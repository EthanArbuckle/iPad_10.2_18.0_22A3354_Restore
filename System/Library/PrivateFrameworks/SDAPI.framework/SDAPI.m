void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void MrecInitModule_latutil_kernel(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugLatticeProcessing)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugLatticeProcessing", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugLatticeProcessing = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugLatticeProcessing);
  }
}

void DuplicateLinkError(char a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/latutil.cpp", 53, (uint64_t)"kernel/latutil", 1, (uint64_t)"%d %d", a7, a8, a1);
}

void BoolGlobalParam::~BoolGlobalParam(BoolGlobalParam *this)
{
  MrecInitModule_sdpres_sdapi();
  JUMPOUT(0x20BD149A8);
}

void MrecInitModule_dmatrix_mrecutil(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  __n128 *v4;
  __n128 v5;

  if (!gParDebugMatrixDecomposition)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugMatrixDecomposition", (const char *)&unk_209A57D10, (const char *)&unk_209A57D10, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugMatrixDecomposition = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugMatrixDecomposition);
  }
  if (!gParDebugMatrixDecompositionAccuracy)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugMatrixDecompositionAccuracy", (const char *)&unk_209A57D10, (const char *)&unk_209A57D10, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugMatrixDecompositionAccuracy = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugMatrixDecompositionAccuracy);
  }
  if (!gParDiagnosticMatrixComputation)
  {
    v4 = (__n128 *)MemChunkAlloc(0x40uLL, 0);
    EnumParamRange::EnumParamRange((uint64_t)&v5, (uint64_t)&sDiagnosticMatrixComputationEnum);
    EnumGlobalParamBase::EnumGlobalParamBase(v4, (unint64_t)"DiagnosticMatrixComputation", (unint64_t)&unk_209A57D10, (unint64_t)&unk_209A57D10, 0, &v5, 0);
    v4->n128_u64[0] = (unint64_t)&unk_24C215008;
    gParDiagnosticMatrixComputation = (uint64_t)v4;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticMatrixComputation);
  }
}

uint64_t *DgnVector::operator*@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double **v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  double *v12;
  double v13;
  uint64_t v14;
  unsigned int v15;
  double v16;

  v3 = *((unsigned int *)result + 2);
  v4 = a2[1];
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = 0;
  if ((_DWORD)v4)
  {
    v6 = (double **)result;
    result = MemChunkAlloc(8 * v4, 0);
    v8 = 0;
    v9 = 0;
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 8) = v4;
    v10 = *a2;
    v11 = *((_QWORD *)a2 + 1);
    do
    {
      result[v9] = 0;
      if ((_DWORD)v3)
      {
        v12 = *v6;
        v13 = 0.0;
        v14 = v3;
        v15 = v8;
        do
        {
          v16 = *v12++;
          v13 = v13 + v16 * *(double *)(v11 + 8 * v15);
          *(double *)&result[v9] = v13;
          ++v15;
          --v14;
        }
        while (v14);
      }
      ++v9;
      v8 += v10;
    }
    while (v9 != v4);
  }
  return result;
}

uint64_t sizeObject(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  if (a2 == 2)
    return 16;
  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    result = 8;
  else
    result = 12;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v4 = *(unsigned int *)(a1 + 8);
    if ((int)v4 >= 1)
      result += 8 * v4;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (a2 == 2)
    return 24;
  if (a2 == 3)
  {
    v2 = 0;
    v3 = 0;
  }
  else
  {
    v2 = 8;
    v3 = 12;
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v3 = 8;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v5 = *(unsigned int *)(a1 + 16);
      if ((int)v5 >= 1)
        v3 += 8 * v5;
      v2 = 8;
    }
  }
  return v3 + v2;
}

{
  uint64_t v4;
  uint64_t v5;

  v4 = sizeObject<EnergyInfo>(a1, a2);
  v5 = sizeObject<EnergyInfo>(a1 + 16, a2) + v4;
  return v5 + sizeObject<FrameTypeInfo>(a1 + 32, a2);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 == 2)
    return 168;
  v5 = sizeObject(a1 + 8);
  v6 = sizeObject<unsigned int>(a1 + 32, a2);
  v7 = sizeObject<DgnArray<ParseToken>>(a1 + 48, a2);
  v8 = sizeObject<RuleDesc>(a1 + 64, a2);
  v9 = sizeObject<unsigned int>(a1 + 80, a2);
  v10 = sizeObject<unsigned short>(a1 + 96, a2);
  v11 = sizeObject<unsigned short>(a1 + 112, a2);
  v12 = sizeObject<unsigned int>(a1 + 136, a2);
  v13 = 6;
  if (a2 == 3)
    v13 = 0;
  return ((v13 + 2 * (a2 != 3)) | (a2 != 3))
       + 4 * (a2 != 3)
       + 8 * (a2 != 3)
       + v5
       + v6
       + v7
       + v8
       + v9
       + v10
       + v11
       + v12;
}

{
  return 8 * (a2 != 3);
}

{
  if (a2 == 3)
    return 0;
  else
    return 24;
}

{
  if (a2 == 3)
    return 0;
  else
    return 48;
}

{
  uint64_t v3;
  uint64_t v4;

  v3 = sizeObject(a1, a2);
  v4 = 18;
  if (a2 == 3)
    v4 = 0;
  return v4 + v3;
}

{
  return 4 * (a2 != 3);
}

{
  uint64_t v2;

  v2 = 6;
  if (a2 == 3)
    v2 = 0;
  if (a2 == 2)
    return 8;
  else
    return v2;
}

{
  if (a2 == 3)
    return 0;
  else
    return 14;
}

{
  uint64_t v3;
  uint64_t v4;

  v3 = sizeObject<unsigned long long>(a1, a2);
  v4 = 28;
  if (a2 == 3)
    v4 = 0;
  return v3 + v4;
}

{
  return LinearTransform::sizeObject(a1 + 8, a2) + 8 * (a2 != 3);
}

{
  return ((8 * (a2 != 3)) | (2 * (a2 != 3)) | (a2 != 3))
       + 2 * (a2 != 3)
       + ((50 * (a2 != 3)) | (8 * (a2 != 3)));
}

{
  if (a2 == 3)
    return 0;
  else
    return 28;
}

{
  if (a2 == 3)
    return 0;
  else
    return 12;
}

{
  return ((a2 != 3) | (8 * (a2 != 3)) | (4 * (a2 != 3))) + 24 * (a2 != 3);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = BitArray::sizeObject(a1, a2);
  if (a2 == 3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v8 = 8;
    if (!gShadowDiagnosticShowIdealizedObjectSizes)
      v8 = 12;
    if ((a2 & 0xFFFFFFFE) == 2 || (v9 = *(unsigned int *)(a1 + 40), (int)v9 < 1))
    {
      v7 = 16;
      v6 = 4;
      v5 = 2;
    }
    else
    {
      v7 = 16;
      v6 = 4;
      v5 = 2;
      v8 += 2 * v9;
    }
  }
  return v4 + v5 + v6 + v7 + 2 * v6 + v8;
}

{
  return sizeObject<DgnString *>(a1, a2) + 8 * (a2 != 3);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 64;
  if (a2 == 3)
    v2 = 0;
  v3 = 12;
  if (a2 == 3)
    v3 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 0;
  else
    v4 = v3;
  return v2 + v4;
}

{
  uint64_t v2;

  v2 = 200;
  if (a2 == 3)
    v2 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    return 0;
  else
    return v2;
}

{
  uint64_t v2;

  v2 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 16;
  if (a2 == 3)
    return 0;
  else
    return v2;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 0;
  else
    v4 = 8 * (a2 != 3);
  v5 = v4 | (2 * (a2 != 3));
  v6 = sizeObject<unsigned char>(a1 + 16, a2);
  v7 = v6 + sizeObject<unsigned long long>(a1 + 32, a2);
  v8 = v7 + sizeObject<unsigned int>(a1 + 48, a2);
  v9 = v8 + sizeObject<unsigned long long>(a1 + 64, a2);
  v10 = v9 + sizeObject<unsigned long long>(a1 + 80, a2);
  return v5 + v10 + sizeObject<unsigned long long>(a1 + 96, a2);
}

{
  uint64_t v2;

  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    if (a2 == 3)
      v2 = 0;
    else
      v2 = 12;
    return sizeObject(a1 + 12, a2) + v2;
  }
  else if (a2 == 3)
  {
    return 0;
  }
  else
  {
    return 24;
  }
}

{
  uint64_t v3;
  uint64_t v4;

  if (a2 == 3)
    return 0;
  v3 = *(unsigned __int16 *)(a1 + 8);
  if (v3 <= 1)
    v4 = 0;
  else
    v4 = 8 * v3;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    return v4 + 8;
  else
    return v4 + 16;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 == 3)
  {
    v2 = 0;
    v3 = 0;
  }
  else
  {
    v4 = *(unsigned __int16 *)(a1 + 24);
    if (v4 <= 1)
      v5 = 0;
    else
      v5 = 8 * v4;
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v3 = v5 + 8;
    else
      v3 = v5 + 16;
    v2 = 12;
  }
  return v3 + v2 + sizeObject<SeederBlock>(a1 + 32, a2);
}

{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sizeObject<WordLatticeLC>(a1, a2);
  v5 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v6 = 4;
  else
    v6 = 8;
  if (a2 == 3)
    v7 = 0;
  else
    v7 = v6;
  if (a2 != 2)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
    {
      v7 += sizeObject<unsigned int>(v8, a2);
      v5 = gShadowDiagnosticShowIdealizedObjectSizes;
    }
    v9 = v5 == 0;
    v10 = 4;
    if (v9)
      v10 = 8;
    if (a2 == 3)
      v6 = 0;
    else
      v6 = v10;
    v11 = *(_QWORD *)(a1 + 24);
    if (v11)
      v6 += sizeObject<WordConfidenceInfo>(v11, a2);
  }
  return v4 + 4 * (a2 != 3) + sizeObject(a1 + 36, a2) + v7 + v6;
}

{
  uint64_t v4;
  uint64_t v5;

  v4 = sizeObject<EnergyInfo>(a1, a2) + 4 * (a2 != 3);
  v5 = sizeObject<RuleDesc>(a1 + 24, a2);
  return v4 + v5 + sizeObject<BitArray>(a1 + 40, a2);
}

{
  return sizeObject<DgnPrimArray<Uns16AndScore>>(a1 + 8, a2) + 4 * (a2 != 3);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 8;
  v5 = 24;
  if (a2 == 3)
    v5 = 0;
  v6 = v5 + ((a2 != 3) | (8 * (a2 != 3)));
  if (a2 == 3)
    v7 = 0;
  else
    v7 = v4;
  if (a2 != 2)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (!v8)
      return v7 + v6;
    v7 += sizeObject<EnergyInfo>(v8, a2);
  }
  v9 = *(_QWORD *)(a1 + 40);
  v10 = v7 + v6;
  if (v9)
    v10 += sizeObject<EnergyInfo>(v9, a2);
  return v10;
}

{
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2 != 3;
  v5 = sizeObject<MiniFst::Trace>(a1, a2);
  v6 = sizeObject<MiniFst::Token>(a1 + 32, a2);
  v7 = sizeObject<MiniFst::Token>(a1 + 48, a2);
  return v5 + 4 * v4 + v6 + v7 + sizeObject<unsigned int>(a1 + 64, a2);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sizeObject<DgnString>(a1 + 8, a2);
  v5 = sizeObject<unsigned long long>(a1 + 24, a2);
  v6 = sizeObject<unsigned char>(a1 + 40, a2);
  v7 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 8;
  if (a2 == 3)
    v7 = 0;
  return ((a2 != 3) | (16 * (a2 != 3)) | (4 * (a2 != 3))) + v4 + v5 + v6 + v7;
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;

  v2 = 8 * (a2 != 3);
  if (**(_BYTE **)(a1 + 24))
  {
    v3 = 16;
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v3 = 8;
    v4 = a2 - 4;
    if (*(_QWORD *)(a1 + 40))
      v5 = (a2 - 4) < 0xFFFFFFFE;
    else
      v5 = 0;
    if (a2 == 3)
      v3 = 0;
    v6 = v3 + v2 + 4 * (a2 != 3);
    if (a2 != 3)
      ++v6;
    v7 = v3 | (4 * (a2 != 3)) | v5;
    if (a2 != 3)
      ++v7;
    v8 = __CFADD__(v4, 2);
    if (v4 >= 0xFFFFFFFE)
      v9 = v6;
    else
      v9 = v6 + 1;
    if (v8)
      v10 = v7;
    else
      v10 = v7 + 1;
    v11 = 1;
    do
    {
      v12 = v9;
      v13 = **(unsigned __int8 **)(a1 + 32 * v11++ + 24);
      v9 += v10;
    }
    while (v13);
    return v12 + v5;
  }
  return v2;
}

{
  _BOOL4 v4;
  uint64_t v5;

  v4 = a2 != 3;
  v5 = sizeObject(a1 + 88, a2);
  return v5 + 4 * v4 + sizeObject(a1 + 28, a2) + 32 * v4;
}

{
  uint64_t v4;
  uint64_t v5;

  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    return 24 * *(unsigned __int16 *)(a1 + 10) + 16;
  v4 = sizeObject(a1, a2);
  if (*(_WORD *)(a1 + 10))
  {
    v5 = *(unsigned __int16 *)(a1 + 10);
    v4 += sizeObject(a1 + 16, a2) * v5;
  }
  return v4;
}

{
  if (a2 == 3)
    return 0;
  else
    return 36;
}

{
  if (a2 == 3)
    return 0;
  else
    return 68;
}

{
  uint64_t v3;
  uint64_t v4;

  v3 = sizeObject<unsigned int>(a1 + 16, a2);
  v4 = 20;
  if (a2 == 3)
    v4 = 0;
  return v3 + v4;
}

{
  return BitArray::sizeObject(a1 + 8, a2) + 8 * (a2 != 3);
}

{
  return sizeObject(a1, a2) + 8 * (a2 != 3);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sizeObject<HistoryAndBigScore>(a1, a2);
  v5 = sizeObject<unsigned char>(a1 + 16, a2);
  v6 = sizeObject(a1 + 32, a2);
  v7 = 14;
  if (a2 == 3)
    v7 = 0;
  return v7 + v4 + v5 + v6;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sizeObject<CWIDCrumbWACS>(a1, a2);
  v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 8;
  if (a2 == 3)
    v6 = 0;
  else
    v6 = v5;
  if (a2 != 2)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      v6 += Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(v7, a2);
  }
  return v4 + 4 * (a2 != 3) + v6 + ((2 * (a2 != 3)) | (16 * (a2 != 3)));
}

BOOL LUDecomposeData::decompose(LUDecomposeData *this)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  unsigned int v9;
  double v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  double v34;
  double v35;
  _BOOL8 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  double v40;
  uint64_t *v42;
  int v43;

  v1 = *((unsigned int *)this + 4);
  v43 = 0;
  v42 = 0;
  if ((_DWORD)v1
    && (v3 = MemChunkAlloc(8 * v1, 0), v42 = v3, v43 = v1, v4 = *((unsigned int *)this + 4), (int)v4 >= 1))
  {
    v5 = 0;
    v6 = *(_QWORD *)this;
    do
    {
      v7 = 0.0;
      v8 = v4;
      v9 = v5;
      do
      {
        v10 = fabs(*(double *)(v6 + 8 * v9));
        if (v10 > v7)
          v7 = v10;
        v9 += v4;
        --v8;
      }
      while (v8);
      if (v7 < 1.17549435e-38)
      {
        v36 = 0;
        goto LABEL_41;
      }
      *(double *)&v3[v5++] = 1.0 / v7;
    }
    while (v5 != v4);
    v11 = 0;
    v12 = 0;
    v13 = *((_QWORD *)this + 3);
    v14 = *(_QWORD *)this;
    v15 = 1;
    do
    {
      if (v11)
      {
        v16 = 0;
        v17 = v11 * v4;
        do
        {
          v18 = (v16 + v17);
          v19 = *(double *)(v14 + 8 * v18);
          if (v16)
          {
            v20 = 0;
            v21 = v16;
            do
            {
              v19 = v19
                  - *(double *)(v14 + 8 * v21) * *(double *)(v14 + 8 * (v17 + v20++));
              v21 += (int)v4;
            }
            while (v16 != v20);
          }
          *(double *)(v14 + 8 * v18) = v19;
          ++v16;
        }
        while (v16 != v11);
      }
      if (v11 < (int)v4)
      {
        v22 = 0.0;
        v23 = v11;
        do
        {
          v24 = (v23 + v11 * v4);
          v25 = *(double *)(v14 + 8 * v24);
          if (v11)
          {
            v26 = v11;
            v27 = v23;
            v28 = v11 * (int)v4;
            do
            {
              v25 = v25 - *(double *)(v14 + 8 * v27) * *(double *)(v14 + 8 * v28++);
              v27 += (int)v4;
              --v26;
            }
            while (v26);
          }
          *(double *)(v14 + 8 * v24) = v25;
          v29 = fabs(v25) * *(double *)&v3[v23];
          if (v29 >= v22)
          {
            v22 = v29;
            v12 = v23;
          }
          ++v23;
        }
        while (v23 != v4);
      }
      if (v11 != v12)
      {
        if ((int)v4 >= 1)
        {
          v30 = v4;
          v31 = v11;
          v32 = v12;
          do
          {
            v33 = *(_QWORD *)(v14 + 8 * v32);
            *(_QWORD *)(v14 + 8 * v32) = *(_QWORD *)(v14 + 8 * v31);
            *(_QWORD *)(v14 + 8 * v31) = v33;
            v32 += v4;
            v31 += (int)v4;
            --v30;
          }
          while (v30);
        }
        *((_DWORD *)this + 10) = -*((_DWORD *)this + 10);
        v3[v12] = v3[v11];
      }
      *(_DWORD *)(v13 + 4 * v11) = v12;
      LODWORD(v4) = *((_DWORD *)this + 4);
      v34 = *(double *)(v14 + 8 * (v11 + v11 * v4));
      v35 = fabs(v34);
      v36 = v35 >= 1.17549435e-38;
      if (v35 < 1.17549435e-38)
        break;
      if (v11 >= (int)v4 - 1)
      {
        v37 = v11 + 1;
      }
      else
      {
        v37 = v11 + 1;
        if (v11 + 1 < (int)v4)
        {
          v38 = v15 + v4 * v11;
          v39 = *((unsigned int *)this + 4);
          v40 = 1.0 / v34;
          do
          {
            *(double *)(v14 + 8 * v38) = v40 * *(double *)(v14 + 8 * v38);
            ++v38;
            --v39;
          }
          while (v15 != v39);
        }
      }
      ++v15;
      v11 = v37;
    }
    while (v37 < (int)v4);
  }
  else
  {
    v36 = 1;
  }
LABEL_41:
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v42);
  return v36;
}

uint64_t LUDecomposeData::forwardSubst(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  double v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *(unsigned int *)(result + 16);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(result + 24);
    v5 = *a2;
    v6 = *(_DWORD *)(result + 16);
    do
    {
      v7 = *(unsigned int *)(v4 + 4 * v3);
      v8 = *(double *)(v5 + 8 * v7);
      *(_QWORD *)(v5 + 8 * v7) = *(_QWORD *)(v5 + 8 * v3);
      if (v6 >= (int)v2)
      {
        if (v8 != 0.0)
          v6 = v3;
      }
      else if (v3 > v6)
      {
        v9 = v3 + v2 * v6;
        LODWORD(v10) = v6;
        do
        {
          v8 = v8 - *(double *)(*(_QWORD *)result + 8 * v9) * *(double *)(v5 + 8 * v10);
          v10 = (v10 + 1);
          v9 += v2;
        }
        while (v3 != v10);
      }
      *(double *)(v5 + 8 * v3++) = v8;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t LUDecomposeData::backSubst(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(result + 16);
  if ((int)v2 >= 1)
  {
    v3 = *a2;
    v4 = *(_QWORD *)result;
    v5 = (v2 * v2);
    v6 = *(unsigned int *)(result + 16);
    do
    {
      v7 = *(double *)(v3 + 8 * (v6 - 1));
      if (v6 < v2)
      {
        v8 = v5;
        v9 = (int)v2;
        do
        {
          v7 = v7 - *(double *)(v4 + 8 * (v8 - 1)) * *(double *)(v3 + 8 * --v9);
          v8 += -(int)v2;
        }
        while (v6 < v9);
      }
      result = ((v2 + 1) * (v6 - 1));
      *(double *)(v3 + 8 * (v6 - 1)) = v7 * (1.0 / *(double *)(v4 + 8 * result));
      --v5;
    }
    while (v6-- > 1);
  }
  return result;
}

uint64_t *DgnMatrix::operator*@<X0>(uint64_t *result@<X0>, double **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  unsigned int v17;

  v3 = *(unsigned int *)result;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = 0;
  if ((_DWORD)v3)
  {
    v5 = result;
    result = MemChunkAlloc(8 * v3, 0);
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 8) = v3;
    if (*(_DWORD *)v5)
    {
      v7 = result;
      v8 = 0;
      do
      {
        DgnMatrix::getRow(v5, v8, (uint64_t)&v16);
        v9 = v17;
        if (v17)
        {
          v10 = v16;
          v11 = *a2;
          v12 = 0.0;
          do
          {
            v13 = *v10++;
            v14 = v13;
            v15 = *v11++;
            v12 = v12 + v14 * v15;
            --v9;
          }
          while (v9);
        }
        else
        {
          v12 = 0.0;
        }
        *(double *)&v7[v8] = v12;
        result = (uint64_t *)DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v16);
        ++v8;
      }
      while (v8 < *(unsigned int *)v5);
    }
  }
  return result;
}

void sub_209778E5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v1);
  _Unwind_Resume(a1);
}

uint64_t *DgnMatrix::getRow@<X0>(uint64_t *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = *((unsigned int *)this + 1);
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = 0;
  if ((_DWORD)v3)
  {
    v5 = this;
    this = MemChunkAlloc(8 * v3, 0);
    *(_QWORD *)a3 = this;
    *(_DWORD *)(a3 + 8) = v3;
    v7 = *((unsigned int *)v5 + 1);
    if ((_DWORD)v7)
    {
      v8 = *(_DWORD *)v5;
      v9 = v5[1];
      do
      {
        *this++ = *(_QWORD *)(v9 + 8 * a2);
        a2 += v8;
        --v7;
      }
      while (v7);
    }
  }
  return this;
}

uint64_t DgnMatrix::operator*@<X0>(uint64_t *a1@<X0>, DgnMatrix *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  int v7;
  int v8;
  uint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int i;
  uint64_t v14;
  double *v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  _QWORD v22[2];
  double *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_DWORD *)a1;
  v7 = *((_DWORD *)a2 + 1);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  *(_DWORD *)(a3 + 4) = v7;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = v7 * v6;
  *(_DWORD *)(a3 + 16) = 0;
  if (v7 * v6)
  {
    v9 = MemChunkAlloc(8 * v7 * v6, 0);
    *(_QWORD *)(a3 + 8) = v9;
    *(_DWORD *)(a3 + 16) = v8;
  }
  else
  {
    v9 = 0;
  }
  DgnMatrix::transpose(a2, (uint64_t)&v25);
  v10 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    v11 = 0;
    v12 = *((_DWORD *)a2 + 1);
    do
    {
      if (v12)
      {
        for (i = 0; i < v12; ++i)
        {
          DgnMatrix::getRow(a1, v11, (uint64_t)&v23);
          DgnMatrix::getRow(&v25, i, (uint64_t)v22);
          v14 = v24;
          if (v24)
          {
            v15 = v23;
            v16 = 0.0;
            v17 = (double *)v22[0];
            do
            {
              v18 = *v15++;
              v19 = v18;
              v20 = *v17++;
              v16 = v16 + v19 * v20;
              --v14;
            }
            while (v14);
          }
          else
          {
            v16 = 0.0;
          }
          *(double *)&v9[v11 + v6 * i] = v16;
          DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v22);
          DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v23);
          v12 = *((_DWORD *)a2 + 1);
        }
        v10 = *(_DWORD *)a1;
      }
      ++v11;
    }
    while (v11 < v10);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v26);
}

void sub_209779024(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v1);
  _Unwind_Resume(a1);
}

uint64_t *DgnMatrix::transpose@<X0>(DgnMatrix *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  uint64_t *result;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;

  v4 = *(_DWORD *)this;
  v5 = *((_DWORD *)this + 1);
  *(_DWORD *)a2 = v5;
  *(_DWORD *)(a2 + 4) = v4;
  v6 = v4 * v5;
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (v4 * v5)
  {
    result = MemChunkAlloc(8 * (v4 * v5), 0);
    *(_QWORD *)(a2 + 8) = result;
    *(_DWORD *)(a2 + 16) = v6;
    v8 = *((_DWORD *)this + 1);
    if (!v8)
      return result;
  }
  else
  {
    result = 0;
    v8 = v5;
    if (!v5)
      return result;
  }
  v9 = 0;
  v10 = 0;
  v11 = *(unsigned int *)this;
  do
  {
    if ((_DWORD)v11)
    {
      v12 = *((_QWORD *)this + 1);
      v13 = v11;
      v14 = v9;
      v15 = v10;
      do
      {
        result[v15] = *(_QWORD *)(v12 + 8 * v14);
        v15 += v5;
        ++v14;
        --v13;
      }
      while (v13);
    }
    ++v10;
    v9 += v11;
  }
  while (v10 != v8);
  return result;
}

uint64_t *DgnMatrix::makeDiagonal@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((unsigned int *)a1 + 2);
  *(_DWORD *)a2 = v3;
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if ((_DWORD)v3 * (_DWORD)v3)
  {
    result = MemChunkAlloc(8 * (v3 * v3), 0);
    *(_QWORD *)(a2 + 8) = result;
    *(_DWORD *)(a2 + 16) = v3 * v3;
    if (!(_DWORD)v3)
      return result;
  }
  else
  {
    result = 0;
    if (!(_DWORD)v3)
      return result;
  }
  for (i = 0; i != v3; ++i)
  {
    v7 = 0;
    v8 = 0;
    v9 = *a1;
    do
    {
      v10 = 0;
      if (i == v8)
        v10 = *(_QWORD *)(v9 + 8 * i);
      result[(i + v7)] = v10;
      ++v8;
      v7 += v3;
    }
    while (v3 != v8);
  }
  return result;
}

uint64_t DgnMatrix::makeIdentity@<X0>(DgnMatrix *this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  unint64_t v4;
  uint64_t *v6;
  int v7;

  v7 = 0;
  v6 = 0;
  if ((_DWORD)this)
  {
    v3 = (int)this;
    v4 = 8 * this;
    v6 = MemChunkAlloc(v4, 0);
    v7 = v3;
    memset_pattern16(v6, &unk_209A57D30, v4);
  }
  DgnMatrix::makeDiagonal((uint64_t *)&v6, a2);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v6);
}

void sub_209779230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t DgnMatrix::invert@<X0>(double **this@<X0>, uint64_t a2@<X8>)
{
  return DgnMatrix::ludInvert(this, 0, a2);
}

uint64_t DgnMatrix::ludInvert@<X0>(double **this@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  DgnMatrix *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  double v10;
  unsigned int v11;
  DgnMatrix *i;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  DgnMatrix *v17;
  uint64_t v18;
  uint64_t *v20;
  int v21;
  _QWORD v22[2];
  int v23;
  _DWORD v24[6];
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;

  v6 = (DgnMatrix *)*(unsigned int *)this;
  DgnMatrix::makeIdentity(v6, (uint64_t)&v25);
  LUDecomposeData::LUDecomposeData((uint64_t)v22, (uint64_t)(this + 1), *(unsigned int *)this);
  v7 = LUDecomposeData::decompose((LUDecomposeData *)v22);
  v8 = v7;
  if (a2)
  {
    if (v7)
    {
      v9 = v23;
      v10 = (double)v24[4];
      if (v23 >= 1)
      {
        v11 = 0;
        do
        {
          v10 = v10 * *(double *)(v22[0] + 8 * v11);
          v11 += v23 + 1;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      v10 = DgnMatrix::naiveDeterminant(this);
    }
    *a2 = v10;
  }
  if (v8)
  {
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; i = (DgnMatrix *)((char *)i + 1))
      {
        v21 = 0;
        v20 = 0;
        v13 = MemChunkAlloc(8 * (_QWORD)v6, 0);
        v20 = v13;
        v21 = (int)v6;
        bzero(v13, 8 * (_QWORD)v6);
        v13[(_QWORD)i] = 0x3FF0000000000000;
        LUDecomposeData::forwardSubst((uint64_t)v22, (uint64_t *)&v20);
        LUDecomposeData::backSubst((uint64_t)v22, (uint64_t *)&v20);
        v14 = v20;
        v15 = v26;
        v16 = v25 * (_DWORD)i;
        v17 = v6;
        do
        {
          v18 = *v14++;
          *(_QWORD *)(v15 + 8 * v16++) = v18;
          v17 = (DgnMatrix *)((char *)v17 - 1);
        }
        while (v17);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v20);
      }
    }
    *(_QWORD *)a3 = v25;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
    DgnPrimFixArray<double>::copyArraySlice(a3 + 8, &v26, 0, v27);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v24);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v22);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v26);
}

void sub_2097793E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

double DgnMatrix::naiveDeterminant(double **this)
{
  double v1;
  unsigned int v3;
  unsigned int i;
  int v5;
  double v6;
  double v7;
  int v8;
  int v10[2];
  uint64_t *v11;
  int v12;

  v1 = 0.0;
  if (*(_DWORD *)this)
  {
    if (*(_DWORD *)this == 1)
    {
      return *this[1];
    }
    else
    {
      v3 = *((_DWORD *)this + 1);
      if (v3)
      {
        for (i = 0; i < v3; ++i)
        {
          v10[0] = *(_DWORD *)this - 1;
          v10[1] = v3 - 1;
          v5 = v10[0] * (v3 - 1);
          v12 = 0;
          v11 = 0;
          if (v5)
          {
            v11 = MemChunkAlloc(8 * v10[0] * (v3 - 1), 0);
            v12 = v5;
          }
          DgnMatrix::getMinorMatrix((int *)this, 0, i, v10);
          v6 = this[1][*(_DWORD *)this * i];
          DgnMatrix::naiveDeterminant((DgnMatrix *)v10);
          if ((i & 1) != 0)
            v8 = -1;
          else
            v8 = 1;
          v1 = v1 + v6 * (double)v8 * v7;
          DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v11);
          v3 = *((_DWORD *)this + 1);
        }
      }
    }
  }
  return v1;
}

void sub_209779524(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v1);
  _Unwind_Resume(a1);
}

double DgnMatrix::determinant(double **this)
{
  uint64_t v2;
  double v3;
  unsigned int v4;
  _QWORD v6[2];
  int v7;
  _DWORD v8[6];

  LUDecomposeData::LUDecomposeData((uint64_t)v6, (uint64_t)(this + 1), *(unsigned int *)this);
  if (LUDecomposeData::decompose((LUDecomposeData *)v6))
  {
    v2 = v7;
    v3 = (double)v8[4];
    if (v7 >= 1)
    {
      v4 = 0;
      do
      {
        v3 = v3 * *(double *)(v6[0] + 8 * v4);
        v4 += v7 + 1;
        --v2;
      }
      while (v2);
    }
  }
  else
  {
    v3 = DgnMatrix::naiveDeterminant(this);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v8);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v6);
  return v3;
}

void sub_2097795E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v9 + 24);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t DgnMatrix::cofactorMatrix@<X0>(double **this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int i;
  _BYTE v11[8];
  uint64_t v12;
  int v13;
  uint64_t v14;
  double v15;

  v15 = 0.0;
  DgnMatrix::ludInvert(this, &v15, (uint64_t)&v13);
  if (v13)
  {
    DgnMatrix::transpose((DgnMatrix *)&v13, (uint64_t)v11);
    DgnMatrix::operator*((uint64_t)v11, a2, v15);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v12);
  }
  else
  {
    v4 = *(_DWORD *)this;
    v5 = *((_DWORD *)this + 1);
    *(_DWORD *)a2 = *(_DWORD *)this;
    *(_DWORD *)(a2 + 4) = v5;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = v5 * v4;
    *(_DWORD *)(a2 + 16) = 0;
    if (v5 * v4)
    {
      *(_QWORD *)(a2 + 8) = MemChunkAlloc(8 * v5 * v4, 0);
      *(_DWORD *)(a2 + 16) = v6;
      v4 = *(_DWORD *)this;
    }
    if (v4)
    {
      v7 = 0;
      v8 = *((_DWORD *)this + 1);
      do
      {
        if (v8)
        {
          for (i = 0; i < v8; ++i)
          {
            *(double *)(*(_QWORD *)(a2 + 8) + 8 * (v7 + *(_DWORD *)a2 * i)) = DgnMatrix::cofactorElement((DgnMatrix *)this, v7, i);
            v8 = *((_DWORD *)this + 1);
          }
          v4 = *(_DWORD *)this;
        }
        ++v7;
      }
      while (v7 < v4);
    }
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v14);
}

void sub_20977970C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

double DgnMatrix::cofactorElement(DgnMatrix *this, unsigned int a2, unsigned int a3)
{
  int v3;
  double v4;
  int v8;
  int v9;
  double *v11;
  uint64_t *v12;
  int v13;

  v3 = *(_DWORD *)this;
  v4 = 0.0;
  if (*(_DWORD *)this >= 2u)
  {
    v8 = *((_DWORD *)this + 1) - 1;
    LODWORD(v11) = v3 - 1;
    HIDWORD(v11) = v8;
    v9 = v8 * (v3 - 1);
    v13 = 0;
    v12 = 0;
    if (v9)
    {
      v12 = MemChunkAlloc(8 * (v8 * (v3 - 1)), 0);
      v13 = v9;
    }
    DgnMatrix::getMinorMatrix((int *)this, a2, a3, (int *)&v11);
    if (((a3 + a2) & 1) != 0)
      v4 = -DgnMatrix::determinant(&v11);
    else
      v4 = DgnMatrix::determinant(&v11);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v12);
  }
  return v4;
}

void sub_209779818(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v1);
  _Unwind_Resume(a1);
}

void DgnMatrix::operator*(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double **v5;
  uint64_t v6;
  double *v7;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = (double **)(a2 + 8);
  *(_DWORD *)(a2 + 16) = 0;
  DgnPrimFixArray<double>::copyArraySlice(a2 + 8, (uint64_t *)(a1 + 8), 0, *(_DWORD *)(a1 + 16));
  v6 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v6)
  {
    v7 = *v5;
    do
    {
      *v7 = *v7 * a3;
      ++v7;
      --v6;
    }
    while (v6);
  }
}

int *DgnMatrix::getMinorMatrix(int *result, unsigned int a2, unsigned int a3, int *a4)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;

  if (a2)
  {
    v4 = 0;
    v5 = *a4;
    v6 = *((_QWORD *)a4 + 1);
    v7 = result[1];
    v8 = a3 + 1;
    v9 = *a4 * a3;
    do
    {
      if (a3)
      {
        v10 = *result;
        v11 = *((_QWORD *)result + 1);
        v12 = a3;
        v13 = v4;
        v14 = v4;
        do
        {
          *(_QWORD *)(v6 + 8 * v14) = *(_QWORD *)(v11 + 8 * v13);
          v14 += v5;
          v13 += v10;
          --v12;
        }
        while (v12);
      }
      if (v8 < v7)
      {
        v15 = *result;
        v16 = *((_QWORD *)result + 1);
        v17 = v4 + v8 * *result;
        v18 = ~a3 + v7;
        v19 = v9;
        do
        {
          *(_QWORD *)(v6 + 8 * v19) = *(_QWORD *)(v16 + 8 * v17);
          v19 += v5;
          v17 += v15;
          --v18;
        }
        while (v18);
      }
      ++v4;
      ++v9;
    }
    while (v4 != a2);
  }
  v20 = *result;
  v21 = a2 + 1;
  if (a2 + 1 < *result)
  {
    v22 = *a4;
    v23 = *((_QWORD *)a4 + 1);
    v24 = result[1];
    v25 = a2 + *a4 * a3;
    v26 = a2 + v20 * (a3 + 1) + 1;
    do
    {
      if (a3)
      {
        v27 = *((_QWORD *)result + 1);
        v28 = a3;
        v29 = v21;
        v30 = a2;
        do
        {
          *(_QWORD *)(v23 + 8 * v30) = *(_QWORD *)(v27 + 8 * v29);
          v30 += v22;
          v29 += v20;
          --v28;
        }
        while (v28);
      }
      if (a3 + 1 < v24)
      {
        v31 = *((_QWORD *)result + 1);
        v32 = ~a3 + v24;
        v33 = v26;
        v34 = v25;
        do
        {
          *(_QWORD *)(v23 + 8 * v34) = *(_QWORD *)(v31 + 8 * v33);
          v34 += v22;
          v33 += v20;
          --v32;
        }
        while (v32);
      }
      ++v21;
      ++a2;
      ++v25;
      ++v26;
    }
    while (v21 != v20);
  }
  return result;
}

uint64_t DgnMatrix::singularValueDecompose(uint64_t *a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  size_t v11;
  uint64_t v12;
  double v13;
  double v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  int v18;
  double v19;
  double v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  double v25;
  unsigned int v26;
  unint64_t v27;
  double v28;
  double v29;
  unint64_t v30;
  double v31;
  unsigned int v32;
  double v33;
  unint64_t v34;
  unsigned int v35;
  double v36;
  unsigned int v37;
  int v38;
  double v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  double v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  double v48;
  double v49;
  int v50;
  double v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  double v55;
  double v56;
  int v57;
  double v58;
  int v59;
  int v60;
  int v61;
  int v62;
  double v63;
  unsigned int v64;
  int v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  double v70;
  double *v71;
  double v72;
  double v73;
  double v74;
  int v75;
  double v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int v84;
  unint64_t v85;
  double v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  int v96;
  double v97;
  unsigned int v98;
  int v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  double *v103;
  double v104;
  double v105;
  double v106;
  double v107;
  int v108;
  uint64_t *v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  unsigned int v115;
  int v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  unsigned int v122;
  double v123;
  unsigned int v124;
  unint64_t v125;
  double v126;
  double v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  double v131;
  uint64_t v132;
  int v133;
  double v134;
  double v135;
  int v136;
  int v137;
  unsigned int v138;
  int v139;
  int v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  double v146;
  double v147;
  unsigned int v148;
  int v149;
  unint64_t v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  unsigned int v159;
  uint64_t v160;
  unsigned int v161;
  unint64_t v162;
  double v163;
  double v164;
  uint64_t *v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  uint64_t *v173;
  unsigned int v174;
  double v175;
  unsigned int v176;
  double v177;
  unsigned int v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int v190;
  unint64_t v191;
  double v192;
  double v193;
  double v194;
  double v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int v198;
  unint64_t v199;
  double v200;
  double v201;
  uint64_t *v202;
  uint64_t v203;
  unsigned int v204;
  unint64_t v205;
  uint64_t i;
  double v207;
  uint64_t v208;
  uint64_t v209;
  double v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v233;
  uint64_t v234;
  unint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t *v239;
  _QWORD v240[2];
  _QWORD v241[2];
  _QWORD v242[2];
  uint64_t *v243;
  unsigned int v244;

  v7 = *(unsigned int *)a1;
  v6 = *((unsigned int *)a1 + 1);
  v8 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v6)
    v9 = (_DWORD)v8 == 0;
  else
    v9 = 0;
  if (v9)
  {
    v11 = 8 * v6;
    v10 = MemChunkAlloc(8 * v6, 0);
    *(_QWORD *)a2 = v10;
    *(_DWORD *)(a2 + 8) = v6;
  }
  else
  {
    if (!(_DWORD)v8)
      goto LABEL_9;
    v10 = *(uint64_t **)a2;
    v11 = 8 * v8;
  }
  bzero(v10, v11);
LABEL_9:
  DgnMatrix::setNumRowsAndCols((uint64_t *)a3, v6, v6);
  v12 = a3[4];
  if ((_DWORD)v12)
    bzero(*((void **)a3 + 1), 8 * v12);
  v244 = 0;
  v243 = 0;
  v13 = 0.0;
  v14 = 0.0;
  v238 = a1;
  v239 = (uint64_t *)a3;
  if ((_DWORD)v6)
  {
    v15 = v6;
    v16 = MemChunkAlloc(8 * v6, 0);
    v17 = 0;
    v243 = v16;
    v244 = v6;
    v18 = 1;
    v19 = 0.0;
    v20 = 0.0;
    do
    {
      *(double *)&v16[v17] = -(v19 * v20);
      v21 = v7 - v17;
      if (v7 <= v17)
      {
        *(double *)(*(_QWORD *)a2 + 8 * v17) = *(double *)(*(_QWORD *)a2 + 8 * v17) + v20 * -0.0;
        v34 = v17 + 1;
        v19 = 0.0;
      }
      else
      {
        v22 = *(_DWORD *)a1;
        v23 = a1[1];
        v24 = v17 + v17 * *(_DWORD *)a1;
        v25 = 0.0;
        v26 = v24;
        v27 = v17;
        do
        {
          v28 = *(double *)(v23 + 8 * v26);
          if (v28 < 0.0)
            v28 = 0.0 - v28;
          v25 = v25 + v28;
          ++v27;
          ++v26;
        }
        while (v7 != v27);
        if (v25 <= 0.0)
        {
          v34 = v17 + 1;
        }
        else
        {
          v29 = 0.0;
          v30 = v7 - v17;
          do
          {
            v31 = 1.0 / v25 * *(double *)(v23 + 8 * v24);
            *(double *)(v23 + 8 * v24) = v31;
            v29 = v29 + v31 * v31;
            ++v24;
            --v30;
          }
          while (v30);
          v20 = DgnSqrt(v29);
          v22 = *(_DWORD *)a1;
          v32 = v17 + *(_DWORD *)a1 * v17;
          v23 = a1[1];
          v33 = *(double *)(v23 + 8 * v32);
          if (v33 <= 0.0)
            v20 = -v20;
          *(double *)(v23 + 8 * v32) = v33 + v20;
          v34 = v17 + 1;
          v35 = v17 + v17 * v22;
          if (v17 + 1 < v6)
          {
            v36 = v29 + v33 * v20;
            v37 = v17 + v22 * v34;
            v38 = v17 + 1;
            do
            {
              v39 = 0.0;
              v40 = v7 - v17;
              v41 = v17 + v17 * v22;
              v42 = v37;
              do
              {
                v39 = v39 + *(double *)(v23 + 8 * v41++) * *(double *)(v23 + 8 * v42++);
                --v40;
              }
              while (v40);
              v43 = v7 - v17;
              v44 = -v39 / v36;
              do
              {
                *(double *)(v23 + 8 * (v37 + v40)) = *(double *)(v23 + 8 * (v37 + v40))
                                                                   + v44
                                                                   * *(double *)(v23 + 8 * (v35 + v40));
                LODWORD(v40) = v40 + 1;
                --v43;
              }
              while (v43);
              ++v38;
              v37 += v22;
            }
            while (v38 != (_DWORD)v6);
          }
          do
          {
            *(double *)(v23 + 8 * v35) = v25 * *(double *)(v23 + 8 * v35);
            ++v35;
            --v21;
          }
          while (v21);
        }
        *(double *)(*(_QWORD *)a2 + 8 * v17) = *(double *)(*(_QWORD *)a2 + 8 * v17) - v25 * v20;
        v19 = 0.0;
        if (v34 < v6)
        {
          v45 = v17 + v22 * v18;
          v46 = v18;
          v47 = v45;
          do
          {
            v48 = *(double *)(v23 + 8 * v47);
            if (v48 < 0.0)
              v48 = 0.0 - v48;
            v19 = v19 + v48;
            v47 += v22;
            ++v46;
          }
          while ((_DWORD)v6 != v46);
          if (v19 > 0.0)
          {
            v49 = 0.0;
            if (v34 < v6)
            {
              v50 = v6;
              do
              {
                v51 = 1.0 / v19 * *(double *)(v23 + 8 * v45);
                *(double *)(v23 + 8 * v45) = v51;
                v49 = v49 + v51 * v51;
                v45 += v22;
                --v50;
              }
              while (v18 != v50);
            }
            v20 = DgnSqrt(v49);
            v52 = *(_DWORD *)a1;
            v53 = v17 + *(_DWORD *)a1 * v34;
            v54 = a1[1];
            v55 = *(double *)(v54 + 8 * v53);
            if (v55 <= 0.0)
              v20 = -v20;
            *(double *)(v54 + 8 * v53) = v55 + v20;
            if (v34 < v7)
            {
              v56 = v49 + v55 * v20;
              v57 = v34;
              do
              {
                if (v34 < v6)
                {
                  v58 = 0.0;
                  v59 = v6;
                  v60 = v52 * v18;
                  do
                  {
                    v58 = v58
                        + *(double *)(v54 + 8 * (v17 + v60))
                        * *(double *)(v54 + 8 * (v57 + v60));
                    v60 += v52;
                    --v59;
                  }
                  while (v18 != v59);
                  if (v34 < v6)
                  {
                    v61 = v6;
                    v62 = v52 * v18;
                    v63 = -v58 / v56;
                    do
                    {
                      *(double *)(v54 + 8 * (v57 + v62)) = *(double *)(v54
                                                                                     + 8 * (v57 + v62))
                                                                         + v63
                                                                         * *(double *)(v54
                                                                                     + 8 * (v17 + v62));
                      v62 += v52;
                      --v61;
                    }
                    while (v18 != v61);
                  }
                }
                ++v57;
              }
              while (v57 != (_DWORD)v7);
            }
            if (v34 < v6)
            {
              v64 = v17 + v52 * v18;
              v65 = v6;
              do
              {
                *(double *)(v54 + 8 * v64) = v19 * *(double *)(v54 + 8 * v64);
                v64 += v52;
                --v65;
              }
              while (v18 != v65);
            }
          }
        }
      }
      v66 = *(double *)(*(_QWORD *)a2 + 8 * v17);
      if (v66 < 0.0)
        v66 = 0.0 - v66;
      v16 = v243;
      v67 = *(double *)&v243[v17];
      if (v67 < 0.0)
        v67 = 0.0 - v67;
      v68 = v66 + v67;
      if (v68 > v14)
        v14 = v68;
      ++v18;
      v17 = v34;
    }
    while (v34 != v6);
    v69 = v244;
    v70 = 0.0;
    if (v244)
    {
      v71 = (double *)v243;
      do
      {
        v72 = *v71++;
        v73 = v72;
        v74 = 0.0 - v72;
        if (v72 < 0.0)
          v73 = v74;
        if (v73 > v70)
          v70 = v73;
        --v69;
      }
      while (v69);
    }
    v75 = 0;
    v76 = v70 * 0.0001;
    v77 = *a3;
    v78 = *a3 + 1;
    v79 = *((_QWORD *)a3 + 1);
    v80 = v6 - 1;
    v81 = v6 + *a3 * (v6 - 1);
    v82 = ~*a3;
    v83 = v6 * v78;
    v84 = v6 * v78 - 1;
    do
    {
      v85 = v15 - 1;
      if (v15 < v6)
      {
        v86 = 0.0 - v20;
        if (v20 >= 0.0)
          v86 = v20;
        if (v86 > v76)
        {
          v87 = *(_DWORD *)a1;
          v88 = a1[1];
          v89 = v80 + *(_DWORD *)a1 * v15;
          v90 = v75;
          v91 = v81;
          do
          {
            *(double *)(v79 + 8 * v91++) = *(double *)(v88 + 8 * v89)
                                           / *(double *)(v88 + 8 * (v85 + v87 * v15))
                                           / v20;
            v89 += v87;
            --v90;
          }
          while (v90);
          v92 = *(_DWORD *)a1;
          v93 = a1[1];
          v94 = v80 + *(_DWORD *)a1 * v15;
          v95 = v83;
          do
          {
            v96 = 0;
            v97 = 0.0;
            v98 = v94;
            do
            {
              v97 = v97 + *(double *)(v93 + 8 * v98) * *(double *)(v79 + 8 * (v95 + v96++));
              v98 += v92;
            }
            while (v75 != v96);
            v99 = 0;
            do
            {
              *(double *)(v79 + 8 * (v95 + v99)) = *(double *)(v79 + 8 * (v95 + v99))
                                                                 + v97 * *(double *)(v79 + 8 * (v81 + v99));
              ++v99;
            }
            while (v75 != v99);
            LODWORD(v15) = v15 + 1;
            v95 += v77;
          }
          while ((_DWORD)v15 != (_DWORD)v6);
        }
        v100 = 0;
        v101 = v84;
        do
        {
          *(_QWORD *)(v79 + 8 * v101) = 0;
          *(_QWORD *)(v79 + 8 * (v81 + v100++)) = 0;
          v101 += v77;
        }
        while (v75 != v100);
      }
      *(_QWORD *)(v79 + 8 * (v78 * v85)) = 0x3FF0000000000000;
      v20 = *(double *)&v16[v85];
      v81 += v82;
      --v80;
      ++v75;
      v83 += v82;
      v84 += v82;
      v15 = v85;
    }
    while ((_DWORD)v85);
  }
  v102 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v102)
  {
    v103 = *(double **)a2;
    v104 = 0.0;
    do
    {
      v105 = *v103++;
      v106 = v105;
      v107 = 0.0 - v105;
      if (v105 < 0.0)
        v106 = v107;
      if (v106 > v104)
        v104 = v106;
      --v102;
    }
    while (v102);
    v13 = v104 * 0.0001;
  }
  if (v7 >= v6)
    v108 = v6;
  else
    v108 = v7;
  if (v108)
  {
    v109 = *(uint64_t **)a2;
    v110 = *(_DWORD *)a1;
    v111 = *(_DWORD *)a1 + 1;
    v112 = a1[1];
    v113 = v108 - 1;
    if (v6 >= v7)
      v114 = v7;
    else
      v114 = v6;
    v115 = v113 + v110 * v114;
    v116 = ~v110;
    v117 = v110 * v113;
    v118 = v113 + v110 * v113;
    v119 = v111 * v114;
    v120 = v117 + v114;
    v121 = v7 - v108 + 1;
    do
    {
      v122 = v108 - 1;
      v123 = *(double *)&v109[v108 - 1];
      v124 = v115;
      v125 = v114;
      if (v114 >= v6)
      {
        v135 = 0.0 - v123;
        if (v123 >= 0.0)
          v135 = *(double *)&v109[v122];
        if (v135 <= v13)
        {
LABEL_126:
          v137 = v7 + 1;
          v138 = v118;
          if (v122 < v7)
          {
            do
            {
              *(_QWORD *)(v112 + 8 * v138++) = 0;
              --v137;
            }
            while (v108 != v137);
          }
          goto LABEL_128;
        }
        v127 = 1.0 / v123;
      }
      else
      {
        do
        {
          *(_QWORD *)(v112 + 8 * v124) = 0;
          ++v125;
          v124 += v110;
        }
        while (v125 < v6);
        v126 = 0.0 - v123;
        if (v123 >= 0.0)
          v126 = v123;
        if (v126 <= v13)
          goto LABEL_126;
        v127 = 1.0 / v123;
        if (v114 < v6)
        {
          v128 = v115;
          v129 = v119;
          v130 = v114;
          do
          {
            v131 = 0.0;
            if (v114 < v7)
            {
              v132 = 0;
              do
              {
                v131 = v131
                     + *(double *)(v112 + 8 * (v120 + v132))
                     * *(double *)(v112 + 8 * (v129 + v132));
                ++v132;
              }
              while (v114 + v132 < v7);
            }
            if (v122 < v7)
            {
              v133 = 0;
              v134 = v127 * v131 / *(double *)(v112 + 8 * (v122 + v110 * v122));
              do
              {
                *(double *)(v112 + 8 * (v128 + v133)) = *(double *)(v112 + 8 * (v128 + v133))
                                                        + v134 * *(double *)(v112 + 8 * (v118 + v133));
                ++v133;
              }
              while (v121 != v133);
            }
            ++v130;
            v129 += v110;
            v128 += v110;
          }
          while (v130 < v6);
        }
      }
      if (v122 < v7)
      {
        v136 = 0;
        do
        {
          *(double *)(v112 + 8 * (v118 + v136)) = v127 * *(double *)(v112 + 8 * (v118 + v136));
          ++v136;
        }
        while (v121 != v136);
      }
LABEL_128:
      *(double *)(v112 + 8 * v111 * v122) = *(double *)(v112 + 8 * v111 * v122) + 1.0;
      --v114;
      v115 += v116;
      v118 += v116;
      v119 += v116;
      v120 += v116;
      ++v121;
      v108 = v122;
    }
    while (v122);
  }
  if ((_DWORD)v6)
  {
    v139 = v6 - 1;
    v234 = 0;
    v140 = v6 - 1;
    v141 = v6;
    do
    {
      v233 = v140;
      v236 = 0;
      v142 = v141--;
      v237 = v141;
      v143 = (v142 - 2);
      v235 = v141;
      if ((v141 & 0x80000000) == 0)
      {
LABEL_132:
        v144 = v142;
        v145 = v234;
        while (1)
        {
          v146 = *(double *)&v243[(v6 - 1) + v145];
          if (v146 < 0.0)
            v146 = 0.0 - v146;
          if (v14 + v146 == v14)
            break;
          v147 = *(double *)(*(_QWORD *)a2 + 8 * (v139 + v145 - 1));
          if (v147 < 0.0)
            v147 = 0.0 - v147;
          if (v14 + v147 == v14)
          {
            v148 = v139 + v145;
            v149 = v6 - 2 + v145;
            goto LABEL_144;
          }
          --v145;
          if (--v144 < 1)
          {
            v148 = -1;
            v149 = -1;
            goto LABEL_144;
          }
        }
        v148 = v139 + v145;
        goto LABEL_153;
      }
      while (1)
      {
        v149 = 0;
        v148 = v141;
LABEL_144:
        v150 = v148 - 1;
        if (v142 > v150)
        {
          v151 = 0.0;
          v152 = 1.0;
          do
          {
            v153 = *(double *)&v243[v150];
            *(double *)&v243[v150] = v151 * v153;
            v154 = v152 * v153;
            v155 = 0.0 - v152 * v153;
            if (v152 * v153 >= 0.0)
              v155 = v152 * v153;
            if (v14 + v155 == v14)
              break;
            v156 = *(double *)(*(_QWORD *)a2 + 8 * v150);
            v157 = DgnSqrt(v156 * v156 + v154 * v154);
            *(double *)(*(_QWORD *)a2 + 8 * v150) = v157;
            v158 = 1.0 / v157;
            v151 = v156 * (1.0 / v157);
            v152 = -(v154 * v158);
            if ((_DWORD)v7)
            {
              v159 = *(_DWORD *)v238 * v149;
              v160 = v238[1];
              v161 = *(_DWORD *)v238 * v150;
              v162 = v7;
              do
              {
                v163 = *(double *)(v160 + 8 * v159);
                v164 = *(double *)(v160 + 8 * v161);
                *(double *)(v160 + 8 * v159) = v152 * v164 + v163 * v151;
                *(double *)(v160 + 8 * v161++) = v164 * v151 - v163 * v152;
                ++v159;
                --v162;
              }
              while (v162);
            }
            ++v150;
          }
          while (v150 < v142);
        }
LABEL_153:
        v165 = *(uint64_t **)a2;
        v166 = *(double *)(*(_QWORD *)a2 + 8 * v237);
        if (v148 == (_DWORD)v141)
          break;
        if (v236 == 59)
        {
          errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dmatrix.cpp", 1641, "mrecutil/dmatrix", 1, "%s", (const char *)&unk_209A57D10);
          v231 = 0;
          goto LABEL_195;
        }
        v167 = *(double *)&v165[v148];
        v168 = *(double *)&v165[v143];
        v169 = *(double *)&v243[v237];
        v170 = ((*(double *)&v243[v143] - v169) * (*(double *)&v243[v143] + v169) + (v168 - v166) * (v166 + v168))
             / (v168
              * (v169 + v169));
        v171 = DgnSqrt(v170 * v170 + 1.0);
        if (v170 <= 0.0)
          v171 = -v171;
        v172 = (v169 * (v168 / (v170 + v171) - v169) + (v167 - v166) * (v166 + v167)) / v167;
        v173 = *(uint64_t **)a2;
        if (v148 <= v143)
        {
          v174 = v148 + 1;
          v175 = 1.0;
          v176 = v148;
          v177 = 1.0;
          do
          {
            v178 = v176++;
            v179 = *(double *)&v243[v176];
            v180 = *(double *)&v173[v176];
            v181 = v175 * v179;
            v182 = DgnSqrt(v181 * v181 + v172 * v172);
            v183 = v177 * v179;
            *(double *)&v243[v178] = v182;
            v177 = v172 / v182;
            v175 = v175 * v179 / v182;
            v184 = v183 * (v181 / v182) + v167 * (v172 / v182);
            v185 = v183 * v177 - v167 * (v181 / v182);
            v186 = v180 * (v181 / v182);
            v187 = v180 * v177;
            v188 = *(_DWORD *)v239 * v178;
            v189 = v239[1];
            v190 = *(_DWORD *)v239 * v174;
            v191 = v6;
            do
            {
              v192 = *(double *)(v189 + 8 * v188);
              v193 = *(double *)(v189 + 8 * v190);
              *(double *)(v189 + 8 * v188) = v175 * v193 + v192 * v177;
              *(double *)(v189 + 8 * v190++) = v193 * v177 - v192 * v175;
              ++v188;
              --v191;
            }
            while (v191);
            v194 = DgnSqrt(v186 * v186 + v184 * v184);
            v173 = *(uint64_t **)a2;
            *(double *)(*(_QWORD *)a2 + 8 * v178) = v194;
            if (v194 != 0.0)
            {
              v195 = 1.0 / v194;
              v177 = v184 * v195;
              v175 = v186 * v195;
            }
            if ((_DWORD)v7)
            {
              v196 = *(_DWORD *)v238 * v178;
              v197 = v238[1];
              v198 = *(_DWORD *)v238 * v174;
              v199 = v7;
              do
              {
                v200 = *(double *)(v197 + 8 * v196);
                v201 = *(double *)(v197 + 8 * v198);
                *(double *)(v197 + 8 * v196) = v175 * v201 + v200 * v177;
                *(double *)(v197 + 8 * v198++) = v201 * v177 - v200 * v175;
                ++v196;
                --v199;
              }
              while (v199);
            }
            v172 = v187 * v175 + v177 * v185;
            v167 = v177 * v187 - v175 * v185;
            ++v174;
          }
          while (v176 <= v143);
        }
        v202 = v243;
        v243[v148] = 0;
        *(double *)&v202[v237] = v172;
        *(double *)&v173[v237] = v167;
        ++v236;
        v139 = v6 - 1;
        v141 = v235;
        if ((v235 & 0x80000000) == 0)
          goto LABEL_132;
      }
      if (v166 < 0.0)
      {
        *(double *)&v165[v237] = -v166;
        v203 = v239[1];
        v204 = *(_DWORD *)v239 * v233;
        v205 = v6;
        do
        {
          *(double *)(v203 + 8 * v204) = -*(double *)(v203 + 8 * v204);
          ++v204;
          --v205;
        }
        while (v205);
      }
      --v234;
      v140 = v233 - 1;
    }
    while ((_DWORD)v141);
    if (v6 < 2)
      goto LABEL_194;
    for (i = 1; i != v6; ++i)
    {
      v207 = *(double *)(*(_QWORD *)a2 + 8 * i);
      DgnMatrix::getCol(v238, i, (uint64_t)v242);
      DgnMatrix::getCol(v239, i, (uint64_t)v241);
      v208 = i;
      do
      {
        v209 = v208 - 1;
        v210 = *(double *)(*(_QWORD *)a2 + 8 * (v208 - 1));
        if (v207 <= v210)
          break;
        *(double *)(*(_QWORD *)a2 + 8 * v208) = v210;
        DgnMatrix::getCol(v238, v208 - 1, (uint64_t)v240);
        v211 = *(unsigned int *)v238;
        if ((_DWORD)v211)
        {
          v212 = (uint64_t *)v240[0];
          v213 = v238[1];
          v214 = v211 * v208;
          do
          {
            v215 = *v212++;
            *(_QWORD *)(v213 + 8 * v214++) = v215;
            --v211;
          }
          while (v211);
        }
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v240);
        DgnMatrix::getCol(v239, v208 - 1, (uint64_t)v240);
        v216 = *(unsigned int *)v239;
        if ((_DWORD)v216)
        {
          v217 = (uint64_t *)v240[0];
          v218 = v239[1];
          v219 = v216 * v208;
          do
          {
            v220 = *v217++;
            *(_QWORD *)(v218 + 8 * v219++) = v220;
            --v216;
          }
          while (v216);
        }
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v240);
        --v208;
      }
      while (v209);
      if (i != v208)
      {
        *(double *)(*(_QWORD *)a2 + 8 * v208) = v207;
        v221 = *(unsigned int *)v238;
        if ((_DWORD)v221)
        {
          v222 = (uint64_t *)v242[0];
          v223 = v221 * v208;
          v224 = v238[1];
          do
          {
            v225 = *v222++;
            *(_QWORD *)(v224 + 8 * v223++) = v225;
            --v221;
          }
          while (v221);
        }
        v226 = *(unsigned int *)v239;
        if ((_DWORD)v226)
        {
          v227 = (uint64_t *)v241[0];
          v228 = v226 * v208;
          v229 = v239[1];
          do
          {
            v230 = *v227++;
            *(_QWORD *)(v229 + 8 * v228++) = v230;
            --v226;
          }
          while (v226);
        }
      }
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v241);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v242);
      v231 = 1;
    }
  }
  else
  {
LABEL_194:
    v231 = 1;
  }
LABEL_195:
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v243);
  return v231;
}

void sub_20977A79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a24);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t *DgnMatrix::setNumRowsAndCols(uint64_t *this, int a2, int a3)
{
  int v3;
  BOOL v4;
  uint64_t *v5;

  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  v3 = a3 * a2;
  if (a3 * a2)
    v4 = *((_DWORD *)this + 4) == 0;
  else
    v4 = 0;
  if (v4)
  {
    v5 = this;
    this = MemChunkAlloc(8 * (a3 * a2), 0);
    v5[1] = (uint64_t)this;
    *((_DWORD *)v5 + 4) = v3;
  }
  return this;
}

uint64_t *DgnMatrix::getCol@<X0>(uint64_t *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *(unsigned int *)this;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = 0;
  if ((_DWORD)v3)
  {
    v5 = this;
    this = MemChunkAlloc(8 * v3, 0);
    *(_QWORD *)a3 = this;
    *(_DWORD *)(a3 + 8) = v3;
    v7 = *(unsigned int *)v5;
    if ((_DWORD)v7)
    {
      v8 = v7 * a2;
      v9 = v5[1];
      do
      {
        *this++ = *(_QWORD *)(v9 + 8 * v8++);
        --v7;
      }
      while (v7);
    }
  }
  return this;
}

uint64_t EnumParamRange::EnumParamRange(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;

  *(_QWORD *)result = a2;
  if (**(_BYTE **)(a2 + 8))
  {
    v2 = 0;
    v3 = 1;
    do
    {
      if (v3 == 1)
      {
        v4 = *(_DWORD *)(a2 + 32 * v2 + 16);
        *(_DWORD *)(result + 8) = v4;
      }
      else
      {
        v4 = *(_DWORD *)(a2 + 32 * v2 + 16);
        if (*(_DWORD *)(result + 8) > v4)
          *(_DWORD *)(result + 8) = v4;
        if (*(_DWORD *)(result + 12) >= v4)
          goto LABEL_9;
      }
      *(_DWORD *)(result + 12) = v4;
LABEL_9:
      v2 = v3;
    }
    while (**(unsigned __int8 **)(a2 + 32 * v3++ + 8));
  }
  return result;
}

void EnumGlobalParam::~EnumGlobalParam(EnumGlobalParam *this)
{
  MrecInitModule_sdpres_sdapi();
  JUMPOUT(0x20BD149A8);
}

uint64_t DgnPrimFixArray<double>::~DgnPrimFixArray(uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    MemChunkFree(v2, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t LUDecomposeData::LUDecomposeData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  DgnPrimFixArray<double>::copyArraySlice(a1, (uint64_t *)a2, 0, *(_DWORD *)(a2 + 8));
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  if ((_DWORD)a3)
    DgnPrimArray<unsigned int>::reallocElts(a1 + 24, a3, 0);
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 40) = 1;
  return a1;
}

void sub_20977AA4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v1);
  _Unwind_Resume(a1);
}

double DgnPrimFixArray<double>::copyArraySlice(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8;
  double *v9;
  uint64_t v10;
  double result;

  if (!a4 || *(_DWORD *)(a1 + 8))
  {
    if (!a4)
      return result;
  }
  else
  {
    *(_QWORD *)a1 = MemChunkAlloc(8 * a4, 0);
    *(_DWORD *)(a1 + 8) = a4;
  }
  v8 = *a2;
  v9 = *(double **)a1;
  v10 = a4;
  do
  {
    result = *(double *)(v8 + 8 * a3);
    *v9++ = result;
    ++a3;
    --v10;
  }
  while (v10);
  return result;
}

unint64_t DgnPrimArray<unsigned int>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 4 * v6, 4 * v5, 4 * v5, 1);
  *(_DWORD *)(a1 + 12) = result >> 2;
  *(_QWORD *)a1 = v8;
  return result;
}

uint64_t DgnPrimArray<unsigned int>::~DgnPrimArray(uint64_t a1)
{
  _QWORD *v2;

  if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 12))
  {
    v2 = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
    {
      MemChunkFree(v2, 0);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

unint64_t DgnPrimArray<short>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 2 * v6, 2 * v5, 2 * v5, 1);
  *(_DWORD *)(a1 + 12) = result >> 1;
  *(_QWORD *)a1 = v8;
  return result;
}

void WarpChooser::~WarpChooser(WarpChooser *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ChannelMgr *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if (*((_BYTE *)this + 20))
  {
    v9 = (ChannelMgr *)ChannelMgr::smpChannelMgr;
    ChannelMgr::closeChannel((ChannelMgr *)ChannelMgr::smpChannelMgr, *((_DWORD *)this + 16), a3, a4, a5, a6, a7, a8);
    if (*((_DWORD *)this + 8))
    {
      v16 = 0;
      do
        ChannelMgr::closeChannel(v9, *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v16++), v10, v11, v12, v13, v14, v15);
      while (v16 < *((unsigned int *)this + 8));
    }
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this);
}

void WarpChooser::printSize(WarpChooser *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void *v82;
  int v83;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/choosew.cpp", 112, (DgnString *)&v82);
  if (v83)
    v16 = v82;
  else
    v16 = &unk_209A57D50;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A57D50, a3, &unk_209A57D50, v16);
  DgnString::~DgnString((DgnString *)&v82);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A57D50);
  v21 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 16;
  v22 = *((unsigned int *)this + 2);
  v23 = *((_DWORD *)this + 3);
  v24 = v21 + 4 * (v22 - 1) + 4;
  if ((int)v22 <= 0)
    v24 = v21;
  if (v23 >= v22)
    v25 = v24;
  else
    v25 = v21;
  if (v23 >= v22)
    v26 = v24 + 4 * (v23 - v22);
  else
    v26 = v21;
  if (v23 >= v22)
    v27 = 0;
  else
    v27 = 4 * v22;
  v28 = (a3 + 1);
  v81 = a3;
  v29 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/choosew.cpp", 113, (DgnString *)&v82);
  if (v83)
    v34 = v82;
  else
    v34 = &unk_209A57D50;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, v28, &unk_209A57D50, v29, v29, v34, v26, v25, v27);
  DgnString::~DgnString((DgnString *)&v82);
  *a4 += v26;
  *a5 += v25;
  *a6 += v27;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/choosew.cpp", 114, (DgnString *)&v82);
  if (v83)
    v39 = v82;
  else
    v39 = &unk_209A57D50;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, v28, &unk_209A57D50, v29, v29, v39, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v82);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/choosew.cpp", 116, (DgnString *)&v82);
  if (v83)
    v44 = v82;
  else
    v44 = &unk_209A57D50;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v28, &unk_209A57D50, v29, v29, v44, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v82);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/choosew.cpp", 118, (DgnString *)&v82);
  if (v83)
    v49 = v82;
  else
    v49 = &unk_209A57D50;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, v28, &unk_209A57D50, v29, v29, v49, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v82);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v50 = 12;
  else
    v50 = 16;
  v51 = *((unsigned int *)this + 8);
  v52 = *((_DWORD *)this + 9);
  if (v52 >= v51)
  {
    v53 = 0;
    if ((int)v51 > 0)
      v50 += 4 * (v51 - 1) + 4;
    v54 = v50 + 4 * (v52 - v51);
  }
  else
  {
    v53 = 4 * v51;
    v54 = v50;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/choosew.cpp", 119, (DgnString *)&v82);
  if (v83)
    v59 = v82;
  else
    v59 = &unk_209A57D50;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v28, &unk_209A57D50, v29, v29, v59, v54, v50, v53);
  DgnString::~DgnString((DgnString *)&v82);
  *a4 += v54;
  *a5 += v50;
  *a6 += v53;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v60 = 4;
  else
    v60 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/choosew.cpp", 120, (DgnString *)&v82);
  if (v83)
    v65 = v82;
  else
    v65 = &unk_209A57D50;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, v28, &unk_209A57D50, v29, v29, v65, v60, v60, 0);
  DgnString::~DgnString((DgnString *)&v82);
  *a4 += v60;
  *a5 += v60;
  v66 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v66 = 16;
  v67 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v67 = 3;
  v68 = *((unsigned int *)this + 14);
  v69 = (((*((_DWORD *)this + 15) - v68) + v68) << v67) + v66;
  v70 = (v68 << v67) + v66;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/choosew.cpp", 121, (DgnString *)&v82);
  if (v83)
    v75 = v82;
  else
    v75 = &unk_209A57D50;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, v28, &unk_209A57D50, v29, v29, v75, v69, v70, 0);
  DgnString::~DgnString((DgnString *)&v82);
  *a4 += v69;
  *a5 += v70;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/choosew.cpp", 122, (DgnString *)&v82);
  if (v83)
    v80 = v82;
  else
    v80 = &unk_209A57D50;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, v81, &unk_209A57D50, (35 - v81), (35 - v81), v80, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v82);
}

void sub_20977B1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t DgnDelete<UttFeatureArraySynchronizedArray>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnArray<DgnPrimArray<unsigned char>>::releaseAll(result + 8);
    return MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray(uint64_t a1)
{
  *(_DWORD *)(a1 + 4) = -16;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  SynchronizedArray<DgnPrimArray<unsigned char>>::reset(a1);
  return a1;
}

void sub_20977B24C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v1);
  _Unwind_Resume(a1);
}

uint64_t SynchronizedArray<DgnPrimArray<unsigned char>>::reset(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 4) = -16;
  v2 = *(unsigned int *)(result + 16);
  if ((int)v2 >= 1)
  {
    v3 = 16 * v2 - 16;
    do
    {
      result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)(v1 + 8) + v3);
      v3 -= 16;
    }
    while (v3 != -16);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

_QWORD *DgnArray<DgnPrimArray<unsigned char>>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 16 * v2 - 16;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a1 + v3);
      v3 -= 16;
    }
    while (v3 != -16);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnIArray<Utterance *>::~DgnIArray(uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    MemChunkFree(v2, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

unint64_t DgnPrimArray<unsigned char>::copyArraySlice(unint64_t result, _QWORD *a2, int a3, unsigned int a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v7 = result;
  v8 = a4;
  if (*(_DWORD *)(result + 12) >= a4)
  {
    *(_DWORD *)(result + 8) = a4;
    if (!a4)
      return result;
  }
  else
  {
    v10 = 0;
    result = realloc_array(*(_QWORD **)result, &v10, a4, *(unsigned int *)(result + 8), *(unsigned int *)(result + 8), 1);
    *(_QWORD *)v7 = v10;
    *(_DWORD *)(v7 + 8) = a4;
    *(_DWORD *)(v7 + 12) = result;
  }
  v9 = 0;
  do
  {
    *(_BYTE *)(*(_QWORD *)v7 + v9) = *(_BYTE *)(*a2 + (a3 + v9));
    ++v9;
  }
  while (v8 != v9);
  return result;
}

uint64_t TParam::TParam(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = off_24C218FB8;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v12 = a1 + 64;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v13 = a1 + 40;
  v14 = a1 + 88;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  MEMORY[0x20BD147A4](a1 + 16, a3);
  MEMORY[0x20BD147A4](v13, a4);
  *(_QWORD *)(a1 + 112) = a5;
  MEMORY[0x20BD147A4](v12, a6);
  MEMORY[0x20BD147A4](v14, a7);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

void sub_20977B4CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*v2);
  TParam::TParam();
  _Unwind_Resume(a1);
}

uint64_t TParam::TParam(uint64_t a1, int a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_24C218FB8;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  MEMORY[0x20BD147A4](a1 + 16, a3);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  return a1;
}

void sub_20977B578(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*(void **)(v1 + 88));
  TParam::TParam();
  _Unwind_Resume(a1);
}

void TParam::~TParam(void **this)
{
  *this = off_24C218FB8;
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

uint64_t TParam::getValidConfig(TParam *this, uint64_t a2)
{
  unint64_t v2;

  v2 = *((_QWORD *)this + 14);
  while (((v2 >> (a2 + 33)) & 1) == 0)
  {
    if (((v2 >> (a2 + 9)) & 1) != 0)
      return a2;
    a2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 17) + 72) + 32 * a2);
  }
  a2 += 24;
  return a2;
}

uint64_t TParam::getValidOriginalConfig(TParam *this, uint64_t a2)
{
  unint64_t i;

  for (i = *((_QWORD *)this + 14);
        ((i >> (a2 + 9)) & 1) == 0;
  return a2;
}

uint64_t TParam::notifyChange(uint64_t this, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(this + 136);
  if (v2)
  {
    v3 = v2[17];
    v2[17] = a2;
    this = (*(uint64_t (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, this);
    v2[17] = v3;
  }
  return this;
}

void sub_20977B6D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 136) = v2;
  _Unwind_Resume(a1);
}

uint64_t TParam::getActiveConfigHandle(TParam *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 17) + 136);
}

uint64_t TParam::needSave(TParam *this)
{
  unint64_t v3;
  uint64_t i;
  unint64_t v5;

  if (*((char *)this + 111) < 0)
  {
    if (*((_QWORD *)this + 12))
      return 0;
  }
  else if (*((_BYTE *)this + 111))
  {
    return 0;
  }
  if ((TParam::flagsSet((uint64_t)this, 8) & 1) != 0)
    return 1;
  if ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 17) + 80) - *(_QWORD *)(*((_QWORD *)this + 17) + 72)) >> 5 != 1)
  {
    v3 = *((_QWORD *)this + 14);
    for (i = 34; ((v3 >> (i - 24)) & 1) == 0 && ((v3 >> i) & 1) == 0; ++i)
    {
      v5 = i - 32;
      if (v5 > ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 17) + 80) - *(_QWORD *)(*((_QWORD *)this + 17) + 72)) >> 5)
              - 1)
        return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t TParam::flagsSet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 112) & a2;
  v4 = a2;
  return std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,64ul>,true,true>(&v3, 0, (uint64_t)&v4, 0, &v4);
}

BOOL TBoolParam::setValue(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned __int8 v6;
  char v7;
  _BOOL4 v8;
  unsigned int *v9;
  int v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  TLocaleInfo *v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  BOOL v24;

  v24 = 0;
  {
    v19 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v19);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v19;
  }
  v7 = TLocaleInfo::stringToBool(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (uint64_t)a3, &v24);
  v8 = v24;
  if (v24)
  {
    v9 = (unsigned int *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v9 = *(unsigned int **)v9;
    loggableUnicode(v9, v22);
    v10 = v23;
    v11 = (void **)v22[0];
    loggableUnicode(a3, __p);
    if (v10 >= 0)
      v16 = v22;
    else
      v16 = v11;
    if (v21 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    tknPrintf("Error: %s : parameter value is out of range, was '%s', expected a BOOLean.\n", v12, v13, v14, v15, v16, v17);
    if (v21 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v22[0]);
  }
  else
  {
    TBoolParam::set(a1, a2, v7);
  }
  return v8;
}

void sub_20977B90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  MEMORY[0x20BD149A8](v23, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TBoolParam::set(uint64_t this, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v4;

  *(_BYTE *)(a2 + this + 176) = a3;
  *(_QWORD *)(this + 112) |= 1 << (a2 + 33);
  v3 = *(_QWORD **)(this + 136);
  if (v3)
  {
    v4 = v3[17];
    v3[17] = a2;
    this = (*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 16))(v3, this);
    v3[17] = v4;
  }
  return this;
}

void sub_20977B9D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 136) = v2;
  _Unwind_Resume(a1);
}

BOOL TBoolParam::setValueOriginal(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned __int8 v6;
  char v7;
  _BOOL4 v8;
  unsigned int *v9;
  int v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  TLocaleInfo *v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  BOOL v24;

  v24 = 0;
  {
    v19 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v19);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v19;
  }
  v7 = TLocaleInfo::stringToBool(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (uint64_t)a3, &v24);
  v8 = v24;
  if (v24)
  {
    v9 = (unsigned int *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v9 = *(unsigned int **)v9;
    loggableUnicode(v9, v22);
    v10 = v23;
    v11 = (void **)v22[0];
    loggableUnicode(a3, __p);
    if (v10 >= 0)
      v16 = v22;
    else
      v16 = v11;
    if (v21 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    tknPrintf("Error: %s : parameter value is out of range, was '%s', expected a BOOLean.\n", v12, v13, v14, v15, v16, v17);
    if (v21 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v22[0]);
  }
  else
  {
    TBoolParam::setOriginal(a1, a2, v7);
  }
  return v8;
}

void sub_20977BB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  MEMORY[0x20BD149A8](v23, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TBoolParam::setOriginal(uint64_t this, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v4;

  *(_BYTE *)(this + a2 + 152) = a3;
  *(_QWORD *)(this + 112) |= 1 << (a2 + 9);
  v3 = *(_QWORD **)(this + 136);
  if (v3)
  {
    v4 = v3[17];
    v3[17] = a2;
    this = (*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 16))(v3, this);
    v3[17] = v4;
  }
  return this;
}

void sub_20977BBF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 136) = v2;
  _Unwind_Resume(a1);
}

TIntParam *TIntParam::TIntParam(TIntParam *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  _QWORD *exception;
  std::string *v18;
  __int128 v19;
  void *v20[2];
  uint64_t v21;
  _BYTE __p[24];
  uint64_t v23;

  *(_QWORD *)TParam::TParam((uint64_t)a1, 2, a2, a3, a4, a8, a9) = &off_24C219EB8;
  if (a5 > a6
    || (*((_DWORD *)a1 + 38) = a5, *((_DWORD *)a1 + 39) = a6, TIntParam::setOriginal(a1, 0, a7)))
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "Failed to create Int param");
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v21) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v20[0], (std::string::size_type)v20[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v20;
      v23 = v21;
    }
    *(_QWORD *)__p = &unk_24C215460;
    if (v23 >= 0)
      v16 = &__p[8];
    else
      v16 = *(const char **)&__p[8];
    conditionalAssert(v16, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 205, v14, v15);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v23) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v21) < 0)
      operator delete(v20[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "Failed to create Int param");
    *exception = aPpx;
    v18 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v19 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
    }
    *exception = &unk_24C215460;
  }
  return a1;
}

{
  return TIntParam::TIntParam(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_20977BDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void **v25;
  void *v26;
  int v27;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      TParam::~TParam(v25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

uint64_t TIntParam::setOriginal(TIntParam *this, uint64_t a2, int a3)
{
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  if (*((_DWORD *)this + 38) > a3 || *((_DWORD *)this + 39) < a3)
    return 1;
  *((_DWORD *)this + a2 + 40) = a3;
  *((_QWORD *)this + 14) |= 1 << (a2 + 9);
  v4 = (_QWORD *)*((_QWORD *)this + 17);
  if (!v4)
    return 0;
  v5 = v4[17];
  v4[17] = a2;
  (*(void (**)(_QWORD *, TIntParam *))(*v4 + 16))(v4, this);
  result = 0;
  v4[17] = v5;
  return result;
}

void sub_20977BEB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 136) = v2;
  _Unwind_Resume(a1);
}

void TLogicException::~TLogicException(void **this)
{
  *this = &unk_24C213620;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_24C213620;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD149A8);
}

uint64_t TIntParam::TIntParam(uint64_t a1, uint64_t a2)
{
  TIntParam *v3;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  _QWORD *exception;
  std::string *v9;
  __int128 v10;
  void *v11[2];
  uint64_t v12;
  _BYTE __p[24];
  uint64_t v14;

  v3 = (TIntParam *)TParam::TParam(a1, 2, a2);
  *(_QWORD *)v3 = &off_24C219EB8;
  *((_QWORD *)v3 + 19) = 0;
  if (TIntParam::setOriginal(v3, 0, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "Failed to create Int param");
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v12) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v11[0], (std::string::size_type)v11[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v11;
      v14 = v12;
    }
    *(_QWORD *)__p = &unk_24C215460;
    if (v14 >= 0)
      v7 = &__p[8];
    else
      v7 = *(const char **)&__p[8];
    conditionalAssert(v7, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 215, v5, v6);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v14) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "Failed to create Int param");
    *exception = aPpx;
    v9 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v10 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    *exception = &unk_24C215460;
  }
  return a1;
}

void sub_20977C084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void **v25;
  void *v26;
  int v27;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      TParam::~TParam(v25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

uint64_t TIntParam::setValue(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned __int8 v6;
  int v7;
  unsigned int *v8;
  int v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;
  TLocaleInfo *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  BOOL v23;

  v23 = 0;
  {
    v18 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v18);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v18;
  }
  v7 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, &v23);
  if (!v23 && v7 >= *(_DWORD *)(a1 + 152) && v7 <= *(_DWORD *)(a1 + 156))
    return TIntParam::set((TIntParam *)a1, a2, v7);
  v8 = (unsigned int *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v8 = *(unsigned int **)v8;
  loggableUnicode(v8, v21);
  v9 = v22;
  v10 = (void **)v21[0];
  loggableUnicode(a3, __p);
  if (v9 >= 0)
    v15 = v21;
  else
    v15 = v10;
  if (v20 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  tknPrintf("Error: %s : parameter value is out of range, was '%s', expected an int in the range [%d,%d].\n", v11, v12, v13, v14, v15, v16, *(unsigned int *)(a1 + 152), *(unsigned int *)(a1 + 156));
  if (v20 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  return 1;
}

void sub_20977C26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  MEMORY[0x20BD149A8](v25, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TIntParam::set(TIntParam *this, uint64_t a2, int a3)
{
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  if (*((_DWORD *)this + 38) > a3 || *((_DWORD *)this + 39) < a3)
    return 1;
  *((_DWORD *)this + a2 + 64) = a3;
  *((_QWORD *)this + 14) |= 1 << (a2 + 33);
  v4 = (_QWORD *)*((_QWORD *)this + 17);
  if (!v4)
    return 0;
  v5 = v4[17];
  v4[17] = a2;
  (*(void (**)(_QWORD *, TIntParam *))(*v4 + 16))(v4, this);
  result = 0;
  v4[17] = v5;
  return result;
}

void sub_20977C364(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 136) = v2;
  _Unwind_Resume(a1);
}

uint64_t TIntParam::setValueOriginal(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned __int8 v6;
  int v7;
  unsigned int *v8;
  int v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;
  TLocaleInfo *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  BOOL v23;

  v23 = 0;
  {
    v18 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v18);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v18;
  }
  v7 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, &v23);
  if (!v23 && v7 >= *(_DWORD *)(a1 + 152) && v7 <= *(_DWORD *)(a1 + 156))
    return TIntParam::setOriginal((TIntParam *)a1, a2, v7);
  v8 = (unsigned int *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v8 = *(unsigned int **)v8;
  loggableUnicode(v8, v21);
  v9 = v22;
  v10 = (void **)v21[0];
  loggableUnicode(a3, __p);
  if (v9 >= 0)
    v15 = v21;
  else
    v15 = v10;
  if (v20 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  tknPrintf("Error: %s : parameter value is out of range, was '%s', expected an int in the range [%d,%d].\n", v11, v12, v13, v14, v15, v16, *(unsigned int *)(a1 + 152), *(unsigned int *)(a1 + 156));
  if (v20 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  return 1;
}

void sub_20977C4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  MEMORY[0x20BD149A8](v25, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TIntParam::getValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const std::locale *v7;
  std::locale *v8;
  std::locale *v9;
  std::wstringbuf::string_type *p_p;
  std::wstringbuf::string_type __p;
  std::locale v13;
  void (__cdecl **v14)(std::wostringstream *__hidden);
  std::wstringbuf v15;
  void (__cdecl **v16)(std::wostringstream *__hidden);
  std::locale v17;

  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v6 = (uint64_t)*(v14 - 3);
  v7 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)&v14 + v6));
  std::ios_base::imbue((std::ios_base *)((char *)&v14 + v6), v7);
  std::locale::~locale((std::locale *)&__p);
  v8 = *(std::locale **)((char *)&v15.__einp_ + v6);
  if (v8)
  {
    (*((void (**)(std::locale *, const std::locale *))v8->__locale_ + 2))(v8, v7);
    v9 = v8 + 1;
    std::locale::locale(&v17, v9);
    std::locale::operator=(v9, v7);
    std::locale::~locale(&v17);
  }
  std::locale::~locale(&v13);
  TParam::getValidConfig(a1, a2);
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v15);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x20BD14978](&v16);
}

void sub_20977C6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::wostringstream::~wostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::wostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  *(_QWORD *)(a1 + 112) = &unk_24C211BB8;
  *(_QWORD *)a1 = &unk_24C211B90;
  std::ios_base::init((std::ios_base *)(a1 + 112), (void *)(a1 + 8));
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  std::wstreambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_20977C7A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::wostream::~wostream();
  MEMORY[0x20BD14978](v1);
  _Unwind_Resume(a1);
}

uint64_t std::wostringstream::~wostringstream(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 112;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x20BD14978](v2);
  return a1;
}

uint64_t TIntParam::getValueOriginal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const std::locale *v7;
  std::locale *v8;
  std::locale *v9;
  unint64_t i;
  std::wstringbuf::string_type *p_p;
  std::wstringbuf::string_type __p;
  std::locale v14;
  void (__cdecl **v15)(std::wostringstream *__hidden);
  std::wstringbuf v16;
  void (__cdecl **v17)(std::wostringstream *__hidden);
  std::locale v18;

  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  v6 = (uint64_t)*(v15 - 3);
  v7 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)&v15 + v6));
  std::ios_base::imbue((std::ios_base *)((char *)&v15 + v6), v7);
  std::locale::~locale((std::locale *)&__p);
  v8 = *(std::locale **)((char *)&v16.__einp_ + v6);
  if (v8)
  {
    (*((void (**)(std::locale *, const std::locale *))v8->__locale_ + 2))(v8, v7);
    v9 = v8 + 1;
    std::locale::locale(&v18, v9);
    std::locale::operator=(v9, v7);
    std::locale::~locale(&v18);
  }
  std::locale::~locale(&v14);
  for (i = *(_QWORD *)(a1 + 112);
        ((i >> (a2 + 9)) & 1) == 0;
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x20BD14978](&v17);
}

void sub_20977CA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::wostringstream::~wostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL TFloatParam::setValue(uint64_t a1, uint64_t a2, __int32 *a3)
{
  unsigned __int8 v6;
  double v7;
  _BOOL4 v8;
  unsigned int *v9;
  int v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  TLocaleInfo *v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  BOOL v24;

  v24 = 0;
  {
    v19 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v19);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v19;
  }
  v7 = TLocaleInfo::stringToFloat(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, &v24);
  v8 = v24;
  if (v24)
  {
    v9 = (unsigned int *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v9 = *(unsigned int **)v9;
    loggableUnicode(v9, v22);
    v10 = v23;
    v11 = (void **)v22[0];
    loggableUnicode((unsigned int *)a3, __p);
    if (v10 >= 0)
      v16 = v22;
    else
      v16 = v11;
    if (v21 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    tknPrintf("Error: %s : parameter value is not a float, was '%s'.\n", v12, v13, v14, v15, v16, v17);
    if (v21 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v22[0]);
  }
  else
  {
    TFloatParam::set(a1, a2, v7);
  }
  return v8;
}

void sub_20977CB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  MEMORY[0x20BD149A8](v23, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TFloatParam::set(uint64_t this, uint64_t a2, double a3)
{
  _QWORD *v3;
  uint64_t v4;

  *(double *)(this + 8 * a2 + 344) = a3;
  *(_QWORD *)(this + 112) |= 1 << (a2 + 33);
  v3 = *(_QWORD **)(this + 136);
  if (v3)
  {
    v4 = v3[17];
    v3[17] = a2;
    this = (*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 16))(v3, this);
    v3[17] = v4;
  }
  return this;
}

void sub_20977CC60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 136) = v2;
  _Unwind_Resume(a1);
}

BOOL TFloatParam::setValueOriginal(uint64_t a1, uint64_t a2, __int32 *a3)
{
  unsigned __int8 v6;
  double v7;
  _BOOL4 v8;
  unsigned int *v9;
  int v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  TLocaleInfo *v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  BOOL v24;

  v24 = 0;
  {
    v19 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v19);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v19;
  }
  v7 = TLocaleInfo::stringToFloat(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, &v24);
  v8 = v24;
  if (v24)
  {
    v9 = (unsigned int *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v9 = *(unsigned int **)v9;
    loggableUnicode(v9, v22);
    v10 = v23;
    v11 = (void **)v22[0];
    loggableUnicode((unsigned int *)a3, __p);
    if (v10 >= 0)
      v16 = v22;
    else
      v16 = v11;
    if (v21 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    tknPrintf("Error: %s : parameter value is not a float, was '%s'.\n", v12, v13, v14, v15, v16, v17);
    if (v21 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v22[0]);
  }
  else
  {
    TFloatParam::setOriginal(a1, a2, v7);
  }
  return v8;
}

void sub_20977CDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  MEMORY[0x20BD149A8](v23, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TFloatParam::setOriginal(uint64_t this, uint64_t a2, double a3)
{
  _QWORD *v3;
  uint64_t v4;

  *(double *)(this + 8 * a2 + 152) = a3;
  *(_QWORD *)(this + 112) |= 1 << (a2 + 9);
  v3 = *(_QWORD **)(this + 136);
  if (v3)
  {
    v4 = v3[17];
    v3[17] = a2;
    this = (*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 16))(v3, this);
    v3[17] = v4;
  }
  return this;
}

void sub_20977CE78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 136) = v2;
  _Unwind_Resume(a1);
}

uint64_t TFloatParam::getValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const std::locale *v7;
  std::locale *v8;
  std::locale *v9;
  std::wstringbuf::string_type *p_p;
  std::wstringbuf::string_type __p;
  std::locale v13;
  void (__cdecl **v14)(std::wostringstream *__hidden);
  std::wstringbuf v15;
  void (__cdecl **v16)(std::wostringstream *__hidden);
  std::locale v17;

  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v6 = (uint64_t)*(v14 - 3);
  v7 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)&v14 + v6));
  std::ios_base::imbue((std::ios_base *)((char *)&v14 + v6), v7);
  std::locale::~locale((std::locale *)&__p);
  v8 = *(std::locale **)((char *)&v15.__einp_ + v6);
  if (v8)
  {
    (*((void (**)(std::locale *, const std::locale *))v8->__locale_ + 2))(v8, v7);
    v9 = v8 + 1;
    std::locale::locale(&v17, v9);
    std::locale::operator=(v9, v7);
    std::locale::~locale(&v17);
  }
  std::locale::~locale(&v13);
  TParam::getValidConfig(a1, a2);
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v15);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x20BD14978](&v16);
}

void sub_20977D00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::wostringstream::~wostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t TFloatParam::getValueOriginal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const std::locale *v7;
  std::locale *v8;
  std::locale *v9;
  unint64_t i;
  std::wstringbuf::string_type *p_p;
  std::wstringbuf::string_type __p;
  std::locale v14;
  void (__cdecl **v15)(std::wostringstream *__hidden);
  std::wstringbuf v16;
  void (__cdecl **v17)(std::wostringstream *__hidden);
  std::locale v18;

  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  v6 = (uint64_t)*(v15 - 3);
  v7 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)&v15 + v6));
  std::ios_base::imbue((std::ios_base *)((char *)&v15 + v6), v7);
  std::locale::~locale((std::locale *)&__p);
  v8 = *(std::locale **)((char *)&v16.__einp_ + v6);
  if (v8)
  {
    (*((void (**)(std::locale *, const std::locale *))v8->__locale_ + 2))(v8, v7);
    v9 = v8 + 1;
    std::locale::locale(&v18, v9);
    std::locale::operator=(v9, v7);
    std::locale::~locale(&v18);
  }
  std::locale::~locale(&v14);
  for (i = *(_QWORD *)(a1 + 112);
        ((i >> (a2 + 9)) & 1) == 0;
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x20BD14978](&v17);
}

void sub_20977D1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::wostringstream::~wostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *TStringParam::TStringParam(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int32 *a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  _QWORD *exception;
  std::string *v15;
  __int128 v16;
  void *v17[2];
  uint64_t v18;
  _BYTE __p[24];
  uint64_t v20;

  v9 = (_QWORD *)TParam::TParam((uint64_t)a1, 4, a2, a3, a4, a6, a7);
  *v9 = &unk_24C214170;
  bzero(v9 + 19, 0x4C8uLL);
  if (TStringParam::setOriginal(a1, 0, a5))
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "Failed to create String param");
    *(_QWORD *)__p = &unk_24C213620;
    if (SHIBYTE(v18) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v17[0], (std::string::size_type)v17[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v17;
      v20 = v18;
    }
    *(_QWORD *)__p = &unk_24C215460;
    if (v20 >= 0)
      v13 = &__p[8];
    else
      v13 = *(const char **)&__p[8];
    conditionalAssert(v13, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 338, v11, v12);
    *(_QWORD *)__p = &unk_24C213620;
    if (SHIBYTE(v20) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "Failed to create String param");
    *exception = &unk_24C213620;
    v15 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v16 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    }
    *exception = &unk_24C215460;
  }
  return a1;
}

void sub_20977D3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void **v25;
  void *v26;
  int v27;
  uint64_t v29;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v27)
  {
LABEL_6:
    __p = v25 + 169;
    std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p = v25 + 166;
    std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p = v25 + 163;
    std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v29 = 144;
    while (1)
    {
      if (SHIBYTE(v25[v29 + 18]) < 0)
        operator delete(v25[v29 + 16]);
      v29 -= 3;
      if (!(v29 * 8))
      {
        TParam::~TParam(v25);
        _Unwind_Resume(a1);
      }
    }
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

uint64_t TStringParam::setOriginal(_QWORD *a1, uint64_t a2, __int32 *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const __int32 *v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;

  v6 = a1[163];
  if (a1[164] != v6)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = (const __int32 *)(v6 + v7);
      if (*(char *)(v6 + v7 + 23) < 0)
        v9 = *(const __int32 **)v9;
      if (!wcscmp(a3, v9))
        break;
      ++v8;
      v6 = a1[163];
      v7 += 24;
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((a1[164] - v6) >> 3))
        return 1;
    }
  }
  MEMORY[0x20BD147A4](&a1[3 * a2 + 19], a3);
  a1[14] |= 1 << (a2 + 9);
  v11 = (_QWORD *)a1[17];
  if (!v11)
    return 0;
  v12 = v11[17];
  v11[17] = a2;
  (*(void (**)(_QWORD *, _QWORD *))(*v11 + 16))(v11, a1);
  result = 0;
  v11[17] = v12;
  return result;
}

void sub_20977D5A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 136) = v2;
  _Unwind_Resume(a1);
}

_QWORD *TStringParam::TStringParam(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)TParam::TParam((uint64_t)a1, 4, a2);
  *v3 = &unk_24C214170;
  bzero(v3 + 19, 0x4C8uLL);
  TStringParam::setOriginal(a1, 0, &dword_209A57E04);
  return a1;
}

void sub_20977D618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void **v10;
  uint64_t v12;

  a10 = v10 + 169;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v10 + 166;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v10 + 163;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&a10);
  v12 = 144;
  while (1)
  {
    if (SHIBYTE(v10[v12 + 18]) < 0)
      operator delete(v10[v12 + 16]);
    v12 -= 3;
    if (!(v12 * 8))
    {
      TParam::~TParam(v10);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t TStringParam::setAllowables(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  unint64_t v9;
  std::vector<std::wstring> *v10;
  __int128 *v11;
  unint64_t v12;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *__p[2];
  char v27;

  if (a3)
  {
    v8 = *(__int128 **)(a3 + 8);
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *(_QWORD *)a3) >> 3);
    if (v9 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3))
    {
      v14 = (unsigned int *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0)
        v14 = *(unsigned int **)v14;
      loggableUnicode(v14, __p);
      if (v27 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      tknPrintf("Error: %s : Mismatch in the number of (allowable, grammar) entries", v15, v16, v17, v18, v19);
      goto LABEL_24;
    }
    v10 = (std::vector<std::wstring> *)(a1 + 1328);
    if (a1 + 1328 != a3)
      std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>(v10, *(std::wstring **)a3, v8, v9);
  }
  if (!a4)
  {
LABEL_9:
    if (a1 + 1304 != a2)
      std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>((std::vector<std::wstring> *)(a1 + 1304), *(std::wstring **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    return 0;
  }
  v11 = *(__int128 **)(a4 + 8);
  v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *(_QWORD *)a4) >> 3);
  if (v12 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3))
  {
    if (a1 + 1352 != a4)
      std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>((std::vector<std::wstring> *)(a1 + 1352), *(std::wstring **)a4, v11, v12);
    goto LABEL_9;
  }
  v20 = (unsigned int *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v20 = *(unsigned int **)v20;
  loggableUnicode(v20, __p);
  if (v27 >= 0)
    v25 = __p;
  else
    v25 = (void **)__p[0];
  tknPrintf("Error: %s : Mismatch in the number of (allowable, description) entries", v21, v22, v23, v24, v25);
LABEL_24:
  if (v27 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_20977D804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TStringParam::set(_QWORD *a1, uint64_t a2, __int32 *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const __int32 *v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;

  v6 = a1[163];
  if (a1[164] != v6)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = (const __int32 *)(v6 + v7);
      if (*(char *)(v6 + v7 + 23) < 0)
        v9 = *(const __int32 **)v9;
      if (!wcscmp(a3, v9))
        break;
      ++v8;
      v6 = a1[163];
      v7 += 24;
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((a1[164] - v6) >> 3))
        return 1;
    }
  }
  MEMORY[0x20BD147A4](&a1[3 * a2 + 91], a3);
  a1[14] |= 1 << (a2 + 33);
  v11 = (_QWORD *)a1[17];
  if (!v11)
    return 0;
  v12 = v11[17];
  v11[17] = a2;
  (*(void (**)(_QWORD *, _QWORD *))(*v11 + 16))(v11, a1);
  result = 0;
  v11[17] = v12;
  return result;
}

void sub_20977D920(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 136) = v2;
  _Unwind_Resume(a1);
}

uint64_t TStringParam::getGrammarValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  const __int32 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const __int32 *v10;
  uint64_t v11;
  int *v12;
  uint64_t v14;
  std::wstringbuf::string_type *p_p;
  std::wstringbuf::string_type __p;
  void (__cdecl **v17)(std::wostringstream *__hidden);
  std::wstringbuf v18;
  void (__cdecl **v19)(std::wostringstream *__hidden);

  v5 = (_QWORD *)((char *)a1 + 24 * TParam::getValidConfig(a1, a2));
  v6 = (const __int32 *)(v5 + 19);
  if (*((char *)v5 + 175) < 0)
    v6 = *(const __int32 **)v6;
  v7 = *((_QWORD *)a1 + 163);
  if (*((_QWORD *)a1 + 164) == v7)
    goto LABEL_9;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = (const __int32 *)(v7 + v8);
    if (*(char *)(v7 + v8 + 23) < 0)
      v10 = *(const __int32 **)v10;
    if (!wcscmp(v6, v10))
      break;
    ++v9;
    v7 = *((_QWORD *)a1 + 163);
    v8 += 24;
    if (v9 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 164) - v7) >> 3))
      goto LABEL_9;
  }
  v14 = *((_QWORD *)a1 + 166);
  if (v14 != *((_QWORD *)a1 + 167))
  {
    v12 = (int *)(v14 + v8);
    if ((*(char *)(v14 + v8 + 23) & 0x80000000) == 0 || (v12 = *(int **)v12) != 0)
    {
      v11 = a3;
      return TBuffer<wchar_t>::assign(v11, v12);
    }
  }
  if (*(_QWORD *)(*((_QWORD *)a1 + 17) + 120) > 4uLL)
  {
LABEL_9:
    v11 = a3;
    v12 = (int *)v6;
    return TBuffer<wchar_t>::assign(v11, v12);
  }
  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v18);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x20BD14978](&v19);
}

void sub_20977DAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::wostringstream::~wostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void TParamManager::~TParamManager(TParamManager *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  char *v11;
  char *v12;
  void *v13;
  void **v14;

  *(_QWORD *)this = &off_24C2148E0;
  v2 = (char *)this + 56;
  v3 = (char *)this + 48;
  v4 = (char *)*((_QWORD *)this + 6);
  if (v4 != (char *)this + 56)
  {
    do
    {
      v5 = *((_QWORD *)v4 + 5);
      if (v5 && (v6 = v5 - 1, v7 = *((_QWORD *)this + 3), v6 < (*((_QWORD *)this + 4) - v7) >> 3))
      {
        v8 = *(_QWORD *)(v7 + 8 * v6);
        v9 = TParam::flagsSet(v8, 8);
        if (v8)
          v10 = v9 == 0;
        else
          v10 = 1;
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      else
      {
        TParam::flagsSet(0, 8);
      }
      v11 = (char *)*((_QWORD *)v4 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v4 + 2);
          v10 = *(_QWORD *)v12 == (_QWORD)v4;
          v4 = v12;
        }
        while (!v10);
      }
      v4 = v12;
    }
    while (v12 != v2);
  }
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)this + 96, *((char **)this + 13));
  v14 = (void **)((char *)this + 72);
  std::vector<std::pair<unsigned long,std::wstring>>::__destroy_vector::operator()[abi:ne180100](&v14);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)v3, *((_QWORD **)this + 7));
  v13 = (void *)*((_QWORD *)this + 3);
  if (v13)
  {
    *((_QWORD *)this + 4) = v13;
    operator delete(v13);
  }
  TRegisterable<TParamManager>::~TRegisterable(this);
}

{
  TParamManager::~TParamManager(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t TParamManager::begin@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(this + 48);
  return this;
}

uint64_t TParamManager::end@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = this + 56;
  return this;
}

_QWORD *TRegisterable<TParamManager>::~TRegisterable(_QWORD *a1)
{
  uint64_t *Registry;
  uint64_t v3;

  *a1 = &unk_24C214950;
  if (a1[1] != -1)
  {
    Registry = (uint64_t *)TRegisterable<TParamManager>::getRegistry();
    v3 = *Registry;
    *(_QWORD *)(Registry[1] + 8 * a1[1] - 8) = 0;
    *Registry = v3 - 1;
  }
  return a1;
}

uint64_t TParamManager::find@<X0>(uint64_t a1@<X0>, const __int32 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  const __int32 *v5;

  v5 = a2;
  result = std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::find<wchar_t const*>(a1 + 48, &v5);
  *a3 = result;
  return result;
}

uint64_t TParamManager::add(TParamManager *this, TParam *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  const __int32 *v21;
  uint64_t v22;
  const __int32 *v24;
  const __int32 **v25;

  v6 = *((_QWORD *)this + 5);
  v4 = (char *)this + 40;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *((_QWORD *)v4 - 2);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)*((_QWORD *)this + 3);
    v18 = (char *)*((_QWORD *)this + 4);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    *((_QWORD *)this + 3) = v16;
    *((_QWORD *)this + 4) = v8;
    *((_QWORD *)this + 5) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 4) = v8;
  v21 = (const __int32 *)((char *)a2 + 16);
  if (*((char *)a2 + 39) < 0)
    v21 = *(const __int32 **)v21;
  v22 = ((uint64_t)v8 - *((_QWORD *)this + 3)) >> 3;
  v24 = v21;
  v25 = &v24;
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__emplace_unique_key_args<wchar_t const*,std::piecewise_construct_t const&,std::tuple<wchar_t const*&&>,std::tuple<>>((uint64_t **)this + 6, &v24, (uint64_t)&std::piecewise_construct, (uint64_t **)&v25)[5] = v22;
  *((_QWORD *)a2 + 17) = this;
  return (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3;
}

unint64_t TParamManager::newConfig(uint64_t a1, __int32 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _QWORD *exception;
  std::string *v16;
  __int128 v17;
  void *v18[2];
  uint64_t v19;
  _BYTE __p[24];
  uint64_t v21;

  v5 = (uint64_t *)(a1 + 72);
  *(_QWORD *)__p = a3;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p[8], a2);
  std::vector<std::pair<unsigned long,std::wstring>>::push_back[abi:ne180100](v5, (uint64_t)__p);
  if (SHIBYTE(v21) < 0)
    operator delete(*(void **)&__p[8]);
  v10 = ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 5) - 1;
  if (v10 >= 0x18)
  {
    tknPrintf("Error: Too many parameter configurations were defined; max number of configurations is %lld\n",
      v6,
      v7,
      v8,
      v9,
      22);
    std::string::basic_string[abi:ne180100]<0>(v18, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v19) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v18[0], (std::string::size_type)v18[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v18;
      v21 = v19;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v21 >= 0)
      v14 = &__p[8];
    else
      v14 = *(const char **)&__p[8];
    conditionalAssert(v14, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 556, v12, v13);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v21) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v19) < 0)
      operator delete(v18[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v16 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v17 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
    }
    *exception = &unk_24C214BA0;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, a2);
  v18[0] = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring&&>,std::tuple<>>((uint64_t **)(a1 + 96), (uint64_t)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v18)+ 7) = v10;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return v10;
}

void sub_20977E050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

uint64_t std::vector<std::pair<unsigned long,std::wstring>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v12 = v5 - *a1;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>(result, v13);
    else
      v14 = 0;
    v15 = &v14[32 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[32 * v13];
    *(_QWORD *)v15 = *(_QWORD *)a2;
    v16 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v15 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v15 + 8) = v16;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v17[2] = v15 + 32;
    std::vector<std::pair<unsigned long,std::wstring>>::__swap_out_circular_buffer(a1, v17);
    v9 = a1[1];
    result = std::__split_buffer<std::pair<unsigned long,std::wstring>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_20977E1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<unsigned long,std::wstring>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void TDataException::~TDataException(void **this)
{
  *this = (void *)aPpx;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_24C213620;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD149A8);
}

void TParamManager::initParam(uint64_t a1, uint64_t a2, int a3, int a4, char a5, uint64_t **a6)
{
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  std::__split_buffer<std::string>::pointer v50;
  char v51;
  int v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  std::__split_buffer<std::string>::pointer v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  std::__split_buffer<std::string>::pointer p_p;
  char v71;
  int v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  std::__split_buffer<std::string>::pointer first;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__split_buffer<std::string>::pointer v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__split_buffer<std::string>::pointer v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__split_buffer<std::string>::pointer v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::__split_buffer<std::string>::pointer v102;
  char v103;
  char v104;
  char v105;
  uint64_t v106;
  std::vector<std::wstring>::pointer v107;
  __int128 v108;
  std::vector<std::wstring>::pointer v109;
  __int128 v110;
  std::vector<std::wstring>::pointer v111;
  __int128 v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  std::string *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  std::string *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  std::string *v124;
  std::string *v125;
  __int128 v126;
  std::wstring *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::__split_buffer<std::string>::pointer v132;
  std::vector<std::wstring>::pointer begin;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  std::__split_buffer<std::string>::pointer v138;
  std::string *v139;
  __int128 v140;
  std::wstring *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  std::__split_buffer<std::string>::pointer v146;
  std::string *v147;
  __int128 v148;
  std::wstring *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  std::__split_buffer<std::string>::pointer v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  std::__split_buffer<std::string>::pointer v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  std::__split_buffer<std::string>::pointer v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  std::__split_buffer<std::string>::pointer v169;
  uint64_t v170;
  int v171;
  uint64_t *v172;
  unsigned int *v173;
  unsigned int *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  std::__split_buffer<std::string>::pointer v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _BYTE *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  _BYTE *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _BYTE *v198;
  std::__split_buffer<std::string>::pointer v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _BYTE *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char *v213;
  _DWORD *v214;
  _QWORD *v215;
  unsigned __int8 v216;
  int v217;
  unsigned __int8 v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _BYTE *v224;
  uint64_t v225;
  uint64_t v226;
  std::vector<std::wstring> *v227;
  std::vector<std::wstring> *v228;
  unsigned __int8 v229;
  unsigned int v230;
  uint64_t v231;
  unsigned int *v232;
  unsigned __int8 v233;
  unsigned int v234;
  uint64_t v235;
  unsigned __int8 v236;
  unsigned int v237;
  uint64_t v238;
  std::vector<std::wstring>::pointer data;
  int v240;
  std::wstring *v241;
  std::wstring *v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  _BYTE *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _BYTE *v251;
  std::__split_buffer<std::string>::pointer v252;
  uint64_t v253;
  unint64_t v254;
  _BYTE *v255;
  uint64_t v256;
  unsigned int *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  std::__split_buffer<std::string>::pointer v262;
  uint64_t v263;
  uint64_t v264;
  _BYTE *v265;
  uint64_t v266;
  unsigned int *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  std::__split_buffer<std::string>::pointer v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  _BYTE *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _BYTE *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _BYTE *v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  _BYTE *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _BYTE *v306;
  std::__split_buffer<std::string>::pointer v307;
  uint64_t v308;
  uint64_t v309;
  const char *v310;
  _QWORD *exception;
  std::string *v312;
  const char *v313;
  _QWORD *v314;
  std::string *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _BYTE *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _BYTE *v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  _BYTE *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  _BYTE *v336;
  std::__split_buffer<std::string>::pointer v337;
  uint64_t v338;
  uint64_t v339;
  const char *v340;
  _QWORD *v341;
  std::string *v342;
  const char *v343;
  _QWORD *v344;
  std::string *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _BYTE *v350;
  uint64_t v351;
  uint64_t v352;
  TLocaleInfo *v353;
  TLocaleInfo *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _BYTE *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _BYTE *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _BYTE *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  _BYTE *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  _BYTE *v387;
  uint64_t v388;
  uint64_t v389;
  __int128 v390;
  __int128 v391;
  TLocaleInfo *v392;
  int v393;
  _BYTE *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  _BYTE *v399;
  std::__split_buffer<std::string>::pointer v400;
  uint64_t v401;
  uint64_t v402;
  TLocaleInfo *v403;
  int v404;
  _BYTE *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  _BYTE *v410;
  std::__split_buffer<std::string>::pointer v411;
  uint64_t v412;
  uint64_t v413;
  TLocaleInfo *v414;
  int v415;
  _BYTE *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  _BYTE *v421;
  std::__split_buffer<std::string>::pointer v422;
  uint64_t v423;
  uint64_t v424;
  __int128 v425;
  __int128 v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  _BYTE *v431;
  uint64_t v432;
  uint64_t v433;
  const char *v434;
  _QWORD *v435;
  std::string *v436;
  const char *v437;
  _QWORD *v438;
  std::string *v439;
  const char *v440;
  _QWORD *v441;
  std::string *v442;
  const char *v443;
  _QWORD *v444;
  std::string *v445;
  const char *v446;
  _QWORD *v447;
  std::string *v448;
  const char *v449;
  _QWORD *v450;
  std::string *v451;
  const char *v452;
  _QWORD *v453;
  std::string *v454;
  const char *v455;
  _QWORD *v456;
  std::string *v457;
  const char *v458;
  _QWORD *v459;
  std::string *v460;
  const char *v461;
  _QWORD *v462;
  std::string *v463;
  const char *v464;
  _QWORD *v465;
  std::string *v466;
  const char *v467;
  _QWORD *v468;
  std::string *v469;
  const char *v470;
  _QWORD *v471;
  std::string *v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  const char *v476;
  _QWORD *v477;
  std::string *v478;
  const char *v479;
  _QWORD *v480;
  std::string *v481;
  const char *v482;
  _QWORD *v483;
  std::string *v484;
  const char *v485;
  _QWORD *v486;
  std::string *v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  const char *v491;
  _QWORD *v492;
  std::string *v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  const char *v498;
  _QWORD *v499;
  std::string *v500;
  const char *v501;
  _QWORD *v502;
  std::string *v503;
  const char *v504;
  _QWORD *v505;
  std::string *v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  char v518;
  char v520;
  unint64_t v521;
  unsigned int *v522;
  unsigned int *v523;
  uint64_t v524;
  uint64_t Config;
  uint64_t *v526;
  int v527;
  uint64_t v528;
  unsigned int *v529;
  unsigned int *v530;
  uint64_t v531;
  unsigned int *v532;
  uint64_t v533;
  std::vector<std::wstring> v534;
  std::vector<std::wstring> v535;
  std::vector<std::wstring> v536;
  void *v537[3];
  void *v538[3];
  unsigned int *v539;
  char v540;
  __int128 v541;
  std::wstring::size_type v542;
  std::__split_buffer<std::string> __p;
  const char *v544;
  __int128 v545;
  uint64_t v546;
  const char *v547;
  uint64_t v548;
  __int128 v549;
  const char *v550;
  __int128 v551;
  uint64_t v552;
  const char *v553;
  __int128 v554;
  uint64_t v555;
  const char *v556;
  __int128 v557;
  uint64_t v558;
  const char *v559;
  __int128 v560;
  uint64_t v561;
  const char *v562;
  __int128 v563;
  uint64_t v564;
  const char *v565;
  __int128 v566;
  uint64_t v567;
  const char *v568;
  uint64_t v569;
  __int128 v570;
  const char *v571;
  uint64_t v572;
  __int128 v573;
  const char *v574;
  uint64_t v575;
  __int128 v576;
  const char *v577;
  uint64_t v578;
  __int128 v579;
  const char *v580;
  uint64_t v581;
  __int128 v582;
  _BYTE v583[24];
  uint64_t end;
  const char *v585;
  __int128 v586;
  uint64_t v587;
  const char *v588;
  __int128 v589;
  uint64_t v590;
  uint64_t v591;

  v591 = *MEMORY[0x24BDAC8D0];
  v545 = xmmword_209A57D60;
  v544 = "N";
  if (a4)
    v11 = 2;
  else
    v11 = 0;
  v546 = -1;
  v547 = "D";
  v548 = v11;
  v549 = xmmword_209A57D70;
  v551 = xmmword_209A57D80;
  v550 = "V";
  v554 = xmmword_209A57D80;
  v552 = 4;
  v553 = "O";
  v555 = 4;
  v557 = xmmword_209A57D80;
  v556 = "F";
  v558 = 4;
  v560 = xmmword_209A57D80;
  v559 = "S";
  v561 = 4;
  v563 = xmmword_209A57D80;
  v562 = "F";
  v564 = -1;
  v566 = xmmword_209A57D80;
  v565 = "M";
  v567 = -1;
  v568 = "M";
  v569 = 2;
  v570 = xmmword_209A57D70;
  v571 = "A";
  v572 = 2;
  v573 = xmmword_209A57D70;
  v574 = "D";
  v575 = v11;
  v576 = xmmword_209A57D90;
  v577 = "V";
  v578 = 2;
  v579 = xmmword_209A57D90;
  v580 = "R";
  v581 = 2;
  v582 = xmmword_209A57DA0;
  v12 = TFileObject::verify(a2, (uint64_t)&v544, 0xDuLL, 1);
  v540 = v12;
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
    *(_QWORD *)v583 = aPpx;
    if (SHIBYTE(__p.__end_) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
    }
    else
    {
      *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
      end = (uint64_t)__p.__end_;
    }
    *(_QWORD *)v583 = &unk_24C216908;
    if (end >= 0)
      v310 = &v583[8];
    else
      v310 = *(const char **)&v583[8];
    conditionalAssert(v310, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 768, v275, v276);
    *(_QWORD *)v583 = aPpx;
    if (SHIBYTE(end) < 0)
      operator delete(*(void **)&v583[8]);
    if (SHIBYTE(__p.__end_) < 0)
      operator delete(__p.__first_);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
    *exception = aPpx;
    v312 = (std::string *)(exception + 1);
    if ((v583[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v312, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
    }
    else
    {
      v390 = *(_OWORD *)v583;
      exception[3] = *(_QWORD *)&v583[16];
      *(_OWORD *)&v312->__r_.__value_.__l.__data_ = v390;
    }
    *exception = &unk_24C216908;
  }
  v539 = 0;
  v13 = (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 5;
  *(_QWORD *)v583 = 0;
  std::vector<wchar_t const*>::vector(v538, v13, v583);
  v14 = (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 5;
  *(_QWORD *)v583 = 0;
  std::vector<wchar_t const*>::vector(v537, v14, v583);
  memset(&v536, 0, sizeof(v536));
  memset(&v535, 0, sizeof(v535));
  memset(&v534, 0, sizeof(v534));
  Config = TParamManager::getConfig(a1, (__int32 *)"F");
  v524 = TParamManager::getConfig(a1, (__int32 *)"S");
  v518 = a5;
  v527 = a4;
  v526 = (uint64_t *)a2;
  v15 = *(_QWORD *)(a2 + 24);
  if (v15)
  {
    v520 = 0;
    v528 = 0;
    v529 = 0;
    v522 = 0;
    v523 = 0;
    v530 = 0;
    v531 = 0;
    v532 = 0;
    v533 = 0;
    while (1)
    {
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"N"))
      {
        v31 = TFileObject::verify((TFileObject *)v15, 0, 0);
        v540 |= v31;
        v539 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"D"))
      {
        v33 = TFileObject::verify((TFileObject *)v15, 0, 1);
        v540 |= v33;
        v533 = *(_QWORD *)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"O")
        || !wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"V"))
      {
        v32 = TFileObject::verify((TFileObject *)v15, 0, a3 == 4);
        v540 |= v32;
        v532 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"D"))
        break;
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"V"))
      {
        if (*(_DWORD *)(v15 + 40))
        {
          loggableFileObject((uint64_t *)v15);
          if (v583[23] >= 0)
            v38 = v583;
          else
            v38 = *(_BYTE **)v583;
LABEL_37:
          tknPrintf("Error: %sBad attribute declaration, expected an object\n", v34, v35, v36, v37, v38);
LABEL_38:
          if ((v583[23] & 0x80000000) != 0)
            operator delete(*(void **)v583);
          v540 = 1;
          goto LABEL_139;
        }
        v61 = *(_QWORD *)(v15 + 24);
        if (!v61)
          goto LABEL_139;
        while (2)
        {
          v62 = TParamManager::getConfig(a1, *(__int32 **)(v61 + 8));
          if ((unint64_t)(v62 + 1) <= 1)
          {
            loggableFileObject((uint64_t *)v15);
            v63 = v583[23];
            v64 = *(_BYTE **)v583;
            loggableUnicode(*(unsigned int **)(v61 + 8), &__p);
            if (v63 >= 0)
              v69 = v583;
            else
              v69 = v64;
            p_p = (std::__split_buffer<std::string>::pointer)&__p;
            if (SHIBYTE(__p.__end_) < 0)
              p_p = __p.__first_;
            tknPrintf("Error: %sInvalid configuration name: '%s'\n", v65, v66, v67, v68, v69, p_p);
            goto LABEL_84;
          }
          v71 = TFileObject::verify((TFileObject *)v61, 0, a3 == 4);
          v540 |= v71;
          if (*((_QWORD *)v537[0] + v62))
          {
            loggableFileObject((uint64_t *)v15);
            v72 = v583[23];
            v73 = *(_BYTE **)v583;
            loggableUnicode(*(unsigned int **)(v61 + 8), &__p);
            if (v72 >= 0)
              v78 = v583;
            else
              v78 = v73;
            first = (std::__split_buffer<std::string>::pointer)&__p;
            if (SHIBYTE(__p.__end_) < 0)
              first = __p.__first_;
            tknPrintf("Error: %sDuplicate parameter setting for '%s' configuration\n", v74, v75, v76, v77, v78, first);
LABEL_84:
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            if ((v583[23] & 0x80000000) != 0)
              operator delete(*(void **)v583);
            v540 = 1;
          }
          else
          {
            *((_QWORD *)v537[0] + v62) = *(_QWORD *)(v61 + 24);
          }
          v61 = *(_QWORD *)(v61 + 16);
          if (!v61)
            goto LABEL_139;
          continue;
        }
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"F"))
      {
        v39 = *(_QWORD *)(a1 + 120);
        *(_OWORD *)&v583[8] = xmmword_209A57DB0;
        *(_QWORD *)v583 = &dword_209A57E04;
        end = -1;
        if ((TFileObject::verify(v15, (uint64_t)v583, 1uLL, 1) & 1) != 0)
        {
          v531 = 0;
          v40 = 1;
          goto LABEL_138;
        }
        v80 = *(_QWORD *)(v15 + 24);
        if (!v80)
        {
          v40 = 0;
          v531 = 0;
          goto LABEL_137;
        }
        v531 = 0;
        v40 = 0;
        while (2)
        {
          if ((TFileObject::verify((TFileObject *)v80, 0, 0) & 1) != 0)
          {
LABEL_95:
            v40 = 1;
            goto LABEL_118;
          }
          if (!wcscmp(*(const __int32 **)(v80 + 24), (const __int32 *)"e"))
          {
            v86 = v531 | 1;
          }
          else
          {
            if (v39 <= 2 && !wcscmp(*(const __int32 **)(v80 + 24), (const __int32 *)"d"))
            {
              loggableFileObject((uint64_t *)v15);
              v91 = (std::__split_buffer<std::string>::pointer)&__p;
              if (SHIBYTE(__p.__end_) < 0)
                v91 = __p.__first_;
              tknPrintf("Warning: %s'deprecated' attribute is not functional\n", v87, v88, v89, v90, v91);
              goto LABEL_114;
            }
            if (!wcscmp(*(const __int32 **)(v80 + 24), (const __int32 *)"h"))
            {
              v86 = v531 | 0x20;
            }
            else if (!wcscmp(*(const __int32 **)(v80 + 24), (const __int32 *)"r"))
            {
              v86 = v531 | 0x100;
            }
            else
            {
              if (wcscmp(*(const __int32 **)(v80 + 24), (const __int32 *)"u"))
              {
                if (v39 > 2 || wcscmp(*(const __int32 **)(v80 + 24), (const __int32 *)"p"))
                {
                  loggableFileObject((uint64_t *)v15);
                  v85 = (std::__split_buffer<std::string>::pointer)&__p;
                  if (SHIBYTE(__p.__end_) < 0)
                    v85 = __p.__first_;
                  tknPrintf("Error: %sUnknown flag\n", v81, v82, v83, v84, v85);
                  if (SHIBYTE(__p.__end_) < 0)
                    operator delete(__p.__first_);
                  goto LABEL_95;
                }
                loggableFileObject((uint64_t *)v15);
                v96 = (std::__split_buffer<std::string>::pointer)&__p;
                if (SHIBYTE(__p.__end_) < 0)
                  v96 = __p.__first_;
                tknPrintf("Warning: %s'persistent' attribute is not functional\n", v92, v93, v94, v95, v96);
LABEL_114:
                if (SHIBYTE(__p.__end_) < 0)
                  operator delete(__p.__first_);
LABEL_118:
                v80 = *(_QWORD *)(v80 + 16);
                if (!v80)
                {
                  if ((~(_BYTE)v531 & 0x21) == 0)
                  {
                    loggableFileObject((uint64_t *)v15);
                    v102 = (std::__split_buffer<std::string>::pointer)&__p;
                    if (SHIBYTE(__p.__end_) < 0)
                      v102 = __p.__first_;
                    tknPrintf("Error: %sParam cannot be exposed and hidden at the same time\n", v98, v99, v100, v101, v102);
                    if (SHIBYTE(__p.__end_) < 0)
                      operator delete(__p.__first_);
                    v40 = 1;
                  }
                  if ((v531 & 2) != 0)
                  {
LABEL_138:
                    v540 |= v40 & 1;
                    goto LABEL_139;
                  }
LABEL_137:
                  v531 |= 4uLL;
                  goto LABEL_138;
                }
                continue;
              }
              v86 = v531 | 2;
            }
          }
          break;
        }
        v531 = v86;
        goto LABEL_118;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"F"))
      {
        if (Config == -1)
        {
          tknPrintf("Error: \"Format\" detected but no format config exists\n", v16, v17, v18, v19);
          v540 = 1;
        }
        v60 = TFileObject::verify((TFileObject *)v15, 0, a3 == 4);
        v540 |= v60;
        v530 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"S"))
      {
        if (v524 == -1)
        {
          tknPrintf("Error: \"SpellOut\" detected but no spellout config exists\n", v20, v21, v22, v23);
          v540 = 1;
        }
        v97 = TFileObject::verify((TFileObject *)v15, 0, a3 == 4);
        v540 |= v97;
        v529 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"M"))
      {
        v103 = TFileObject::verify((TFileObject *)v15, 0, 0);
        v540 |= v103;
        if (a3 != 2)
        {
          loggableFileObject((uint64_t *)v15);
          if (v583[23] >= 0)
            v359 = v583;
          else
            v359 = *(_BYTE **)v583;
          tknPrintf("Error: %sInvalid attribute for given parameter type\n", v355, v356, v357, v358, v359);
          if ((v583[23] & 0x80000000) != 0)
            operator delete(*(void **)v583);
          std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(__p.__end_) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
          }
          else
          {
            *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
            end = (uint64_t)__p.__end_;
          }
          *(_QWORD *)v583 = &unk_24C216908;
          if (end >= 0)
            v464 = &v583[8];
          else
            v464 = *(const char **)&v583[8];
          conditionalAssert(v464, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 905, v360, v361);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(end) < 0)
            operator delete(*(void **)&v583[8]);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          v465 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
          *v465 = aPpx;
          v466 = (std::string *)(v465 + 1);
          if ((v583[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v466, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
          }
          else
          {
            v507 = *(_OWORD *)v583;
            v465[3] = *(_QWORD *)&v583[16];
            *(_OWORD *)&v466->__r_.__value_.__l.__data_ = v507;
          }
          *v465 = &unk_24C216908;
        }
        v523 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"M"))
      {
        v104 = TFileObject::verify((TFileObject *)v15, 0, 0);
        v540 |= v104;
        if (a3 != 2)
        {
          loggableFileObject((uint64_t *)v15);
          if (v583[23] >= 0)
            v373 = v583;
          else
            v373 = *(_BYTE **)v583;
          tknPrintf("Error: %sInvalid attribute for given parameter type\n", v369, v370, v371, v372, v373);
          if ((v583[23] & 0x80000000) != 0)
            operator delete(*(void **)v583);
          std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(__p.__end_) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
          }
          else
          {
            *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
            end = (uint64_t)__p.__end_;
          }
          *(_QWORD *)v583 = &unk_24C216908;
          if (end >= 0)
            v479 = &v583[8];
          else
            v479 = *(const char **)&v583[8];
          conditionalAssert(v479, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 915, v374, v375);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(end) < 0)
            operator delete(*(void **)&v583[8]);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          v480 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
          *v480 = aPpx;
          v481 = (std::string *)(v480 + 1);
          if ((v583[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v481, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
          }
          else
          {
            v511 = *(_OWORD *)v583;
            v480[3] = *(_QWORD *)&v583[16];
            *(_OWORD *)&v481->__r_.__value_.__l.__data_ = v511;
          }
          *v480 = &unk_24C216908;
        }
        v522 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"A"))
      {
        v521 = *(_QWORD *)(a1 + 120);
        *(int64x2_t *)&v583[8] = vdupq_n_s64(1uLL);
        *(_QWORD *)v583 = &dword_209A57E04;
        v586 = xmmword_209A57DB0;
        end = -1;
        v585 = "G";
        v587 = -1;
        v588 = "D";
        v589 = xmmword_209A57DB0;
        v590 = -1;
        if ((TFileObject::verify(v15, (uint64_t)v583, 3uLL, 1) & 1) != 0)
        {
          v105 = 1;
          goto LABEL_232;
        }
        v106 = *(_QWORD *)(v15 + 24);
        if (!v106)
        {
          v105 = 0;
LABEL_217:
          if (v535.__end_ != v535.__begin_
            && (char *)v536.__end_ - (char *)v536.__begin_ != (char *)v535.__end_ - (char *)v535.__begin_)
          {
            loggableFileObject((uint64_t *)v15);
            v159 = (std::__split_buffer<std::string>::pointer)&__p;
            if (SHIBYTE(__p.__end_) < 0)
              v159 = __p.__first_;
            tknPrintf("Error: %sMismatch in the counts of allowables and Grammar associations\n", v155, v156, v157, v158, v159);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v105 = 1;
          }
          if (v534.__end_ != v534.__begin_
            && (char *)v536.__end_ - (char *)v536.__begin_ != (char *)v534.__end_ - (char *)v534.__begin_)
          {
            loggableFileObject((uint64_t *)v15);
            v164 = (std::__split_buffer<std::string>::pointer)&__p;
            if (SHIBYTE(__p.__end_) < 0)
              v164 = __p.__first_;
            tknPrintf("Error: %sMismatch in the counts of allowables and associated descriptions\n", v160, v161, v162, v163, v164);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v105 = 1;
          }
          if (a3)
          {
LABEL_232:
            v540 |= v105 & 1;
            v520 = 1;
            if (a3 == 4 || a3 == 1)
              goto LABEL_139;
            if (a3)
              goto LABEL_638;
          }
          else
          {
            if (((0xAAAAAAAAAAAAAAABLL * (((char *)v536.__end_ - (char *)v536.__begin_) >> 3)) | 2) != 2)
            {
              loggableFileObject((uint64_t *)v15);
              v169 = (std::__split_buffer<std::string>::pointer)&__p;
              if (SHIBYTE(__p.__end_) < 0)
                v169 = __p.__first_;
              tknPrintf("Error: %sBoth 'true' and 'false' must be defined for BOOLean allowables\n", v165, v166, v167, v168, v169);
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              v105 = 1;
            }
            v540 |= v105 & 1;
          }
          if (*(_QWORD *)(a1 + 120) <= 5uLL)
          {
LABEL_638:
            loggableFileObject((uint64_t *)v15);
            if (v583[23] >= 0)
              v431 = v583;
            else
              v431 = *(_BYTE **)v583;
            tknPrintf("Error: %sInvalid attribute for given parameter type\n", v427, v428, v429, v430, v431);
            if ((v583[23] & 0x80000000) != 0)
              operator delete(*(void **)v583);
            std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
            *(_QWORD *)v583 = aPpx;
            if (SHIBYTE(__p.__end_) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
            }
            else
            {
              *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
              end = (uint64_t)__p.__end_;
            }
            *(_QWORD *)v583 = &unk_24C216908;
            if (end >= 0)
              v491 = &v583[8];
            else
              v491 = *(const char **)&v583[8];
            conditionalAssert(v491, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 927, v432, v433);
            *(_QWORD *)v583 = aPpx;
            if (SHIBYTE(end) < 0)
              operator delete(*(void **)&v583[8]);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v492 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
            *v492 = aPpx;
            v493 = (std::string *)(v492 + 1);
            if ((v583[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v493, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
            }
            else
            {
              v514 = *(_OWORD *)v583;
              v492[3] = *(_QWORD *)&v583[16];
              *(_OWORD *)&v493->__r_.__value_.__l.__data_ = v514;
            }
            *v492 = &unk_24C216908;
          }
          v520 = 1;
          goto LABEL_139;
        }
        v105 = 0;
        while (2)
        {
          if ((TFileObject::verify((TFileObject *)v106, 0, 1) & 1) != 0)
          {
LABEL_148:
            v105 = 1;
            goto LABEL_149;
          }
          if (!wcscmp(*(const __int32 **)(v106 + 8), &dword_209A57E04))
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v541, *(__int32 **)(v106 + 24));
            v109 = v536.__end_;
            if (v536.__end_ >= v536.__end_cap_.__value_)
            {
              v113 = 0xAAAAAAAAAAAAAAABLL * (((char *)v536.__end_ - (char *)v536.__begin_) >> 3);
              v114 = v113 + 1;
              if (v113 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v536.__end_cap_.__value_ - (char *)v536.__begin_) >> 3) > v114)
                v114 = 0x5555555555555556 * (((char *)v536.__end_cap_.__value_ - (char *)v536.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v536.__end_cap_.__value_ - (char *)v536.__begin_) >> 3) >= 0x555555555555555)
                v115 = 0xAAAAAAAAAAAAAAALL;
              else
                v115 = v114;
              __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v536.__end_cap_;
              if (v115)
                v116 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v536.__end_cap_, v115);
              else
                v116 = 0;
              v125 = v116 + v113;
              __p.__first_ = v116;
              __p.__begin_ = v125;
              __p.__end_cap_.__value_ = &v116[v115];
              v126 = v541;
              v125->__r_.__value_.__r.__words[2] = v542;
              *(_OWORD *)&v125->__r_.__value_.__l.__data_ = v126;
              v542 = 0;
              v541 = 0uLL;
              __p.__end_ = v125 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(&v536, (std::__split_buffer<std::wstring> *)&__p);
              v127 = v536.__end_;
              std::__split_buffer<std::wstring>::~__split_buffer(&__p);
              v536.__end_ = v127;
              if (SHIBYTE(v542) < 0)
                operator delete((void *)v541);
            }
            else
            {
              v110 = v541;
              v536.__end_->__r_.__value_.__r.__words[2] = v542;
              *(_OWORD *)&v109->__r_.__value_.__l.__data_ = v110;
              v536.__end_ = v109 + 1;
            }
            if (!a3)
            {
              if (wcscmp(*(const __int32 **)(v106 + 24), (const __int32 *)"t")
                && wcscmp(*(const __int32 **)(v106 + 24), (const __int32 *)"f"))
              {
                loggableFileObject((uint64_t *)v15);
                v132 = (std::__split_buffer<std::string>::pointer)&__p;
                if (SHIBYTE(__p.__end_) < 0)
                  v132 = __p.__first_;
                tknPrintf("Error: %sBoolean allowables must be 'true' and 'false'\n", v128, v129, v130, v131, v132);
                goto LABEL_214;
              }
              begin = v536.__begin_;
              if ((std::vector<std::wstring>::pointer)((char *)v536.__end_ - (char *)v536.__begin_) == (std::vector<std::wstring>::pointer)48)
              {
                if (SHIBYTE(v536.__begin_->__r_.__value_.__r.__words[2]) < 0)
                  begin = (std::vector<std::wstring>::pointer)v536.__begin_->__r_.__value_.__l.__data_;
                if (!wcscmp(*(const __int32 **)(v106 + 24), (const __int32 *)begin))
                {
                  loggableFileObject((uint64_t *)v15);
                  v138 = (std::__split_buffer<std::string>::pointer)&__p;
                  if (SHIBYTE(__p.__end_) < 0)
                    v138 = __p.__first_;
                  tknPrintf("Error: %sDuplicate BOOLean allowable\n", v134, v135, v136, v137, v138);
                  goto LABEL_214;
                }
              }
            }
          }
          else if (!wcscmp(*(const __int32 **)(v106 + 8), (const __int32 *)"G"))
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v541, *(__int32 **)(v106 + 24));
            v111 = v535.__end_;
            if (v535.__end_ >= v535.__end_cap_.__value_)
            {
              v117 = 0xAAAAAAAAAAAAAAABLL * (((char *)v535.__end_ - (char *)v535.__begin_) >> 3);
              v118 = v117 + 1;
              if (v117 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v535.__end_cap_.__value_ - (char *)v535.__begin_) >> 3) > v118)
                v118 = 0x5555555555555556 * (((char *)v535.__end_cap_.__value_ - (char *)v535.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v535.__end_cap_.__value_ - (char *)v535.__begin_) >> 3) >= 0x555555555555555)
                v119 = 0xAAAAAAAAAAAAAAALL;
              else
                v119 = v118;
              __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v535.__end_cap_;
              if (v119)
                v120 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v535.__end_cap_, v119);
              else
                v120 = 0;
              v139 = v120 + v117;
              __p.__first_ = v120;
              __p.__begin_ = v139;
              __p.__end_cap_.__value_ = &v120[v119];
              v140 = v541;
              v139->__r_.__value_.__r.__words[2] = v542;
              *(_OWORD *)&v139->__r_.__value_.__l.__data_ = v140;
              v542 = 0;
              v541 = 0uLL;
              __p.__end_ = v139 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(&v535, (std::__split_buffer<std::wstring> *)&__p);
              v141 = v535.__end_;
              std::__split_buffer<std::wstring>::~__split_buffer(&__p);
              v535.__end_ = v141;
              if (SHIBYTE(v542) < 0)
                operator delete((void *)v541);
            }
            else
            {
              v112 = v541;
              v535.__end_->__r_.__value_.__r.__words[2] = v542;
              *(_OWORD *)&v111->__r_.__value_.__l.__data_ = v112;
              v535.__end_ = v111 + 1;
            }
            if (!a3)
            {
              loggableFileObject((uint64_t *)v15);
              v146 = (std::__split_buffer<std::string>::pointer)&__p;
              if (SHIBYTE(__p.__end_) < 0)
                v146 = __p.__first_;
              tknPrintf("Error: %sGrammar attribute not supported in Boolean allowables\n", v142, v143, v144, v145, v146);
              goto LABEL_214;
            }
          }
          else if (!wcscmp(*(const __int32 **)(v106 + 8), (const __int32 *)"D"))
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v541, *(__int32 **)(v106 + 24));
            v107 = v534.__end_;
            if (v534.__end_ >= v534.__end_cap_.__value_)
            {
              v121 = 0xAAAAAAAAAAAAAAABLL * (((char *)v534.__end_ - (char *)v534.__begin_) >> 3);
              v122 = v121 + 1;
              if (v121 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v534.__end_cap_.__value_ - (char *)v534.__begin_) >> 3) > v122)
                v122 = 0x5555555555555556 * (((char *)v534.__end_cap_.__value_ - (char *)v534.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v534.__end_cap_.__value_ - (char *)v534.__begin_) >> 3) >= 0x555555555555555)
                v123 = 0xAAAAAAAAAAAAAAALL;
              else
                v123 = v122;
              __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v534.__end_cap_;
              if (v123)
                v124 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v534.__end_cap_, v123);
              else
                v124 = 0;
              v147 = v124 + v121;
              __p.__first_ = v124;
              __p.__begin_ = v147;
              __p.__end_cap_.__value_ = &v124[v123];
              v148 = v541;
              v147->__r_.__value_.__r.__words[2] = v542;
              *(_OWORD *)&v147->__r_.__value_.__l.__data_ = v148;
              v542 = 0;
              v541 = 0uLL;
              __p.__end_ = v147 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(&v534, (std::__split_buffer<std::wstring> *)&__p);
              v149 = v534.__end_;
              std::__split_buffer<std::wstring>::~__split_buffer(&__p);
              v534.__end_ = v149;
              if (SHIBYTE(v542) < 0)
                operator delete((void *)v541);
            }
            else
            {
              v108 = v541;
              v534.__end_->__r_.__value_.__r.__words[2] = v542;
              *(_OWORD *)&v107->__r_.__value_.__l.__data_ = v108;
              v534.__end_ = v107 + 1;
            }
            if (v521 <= 5)
            {
              loggableFileObject((uint64_t *)v15);
              v154 = (std::__split_buffer<std::string>::pointer)&__p;
              if (SHIBYTE(__p.__end_) < 0)
                v154 = __p.__first_;
              tknPrintf("Error: %sDescription attribute not supported in allowables if version < 6\n", v150, v151, v152, v153, v154);
LABEL_214:
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              goto LABEL_148;
            }
          }
LABEL_149:
          v106 = *(_QWORD *)(v106 + 16);
          if (!v106)
            goto LABEL_217;
          continue;
        }
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"R"))
      {
        v24 = TFileObject::verify((TFileObject *)v15, 0, 0);
        v540 |= v24;
        v25 = TParamManager::nameToParam(a1, *(const __int32 **)(v15 + 24));
        v528 = v25;
        if (!v25 || *(_DWORD *)(v25 + 8))
        {
          loggableFileObject((uint64_t *)v15);
          if (v583[23] >= 0)
            v30 = v583;
          else
            v30 = *(_BYTE **)v583;
          tknPrintf("Error: %sAttribute must reference a previously-defined BOOLean parameter name\n", v26, v27, v28, v29, v30);
          goto LABEL_38;
        }
      }
LABEL_139:
      v15 = *(_QWORD *)(v15 + 16);
      if (!v15)
        goto LABEL_246;
    }
    if (*(_DWORD *)(v15 + 40))
    {
      loggableFileObject((uint64_t *)v15);
      if (v583[23] >= 0)
        v38 = v583;
      else
        v38 = *(_BYTE **)v583;
      goto LABEL_37;
    }
    v41 = *(_QWORD *)(v15 + 24);
    if (!v41)
      goto LABEL_139;
    while (1)
    {
      v42 = TParamManager::getConfig(a1, *(__int32 **)(v41 + 8));
      if ((unint64_t)(v42 + 1) <= 1)
        break;
      v51 = TFileObject::verify((TFileObject *)v41, 0, a3 == 4);
      v540 |= v51;
      if (*((_QWORD *)v538[0] + v42))
      {
        loggableFileObject((uint64_t *)v15);
        v52 = v583[23];
        v53 = *(_BYTE **)v583;
        loggableUnicode(*(unsigned int **)(v41 + 8), &__p);
        if (v52 >= 0)
          v58 = v583;
        else
          v58 = v53;
        v59 = (std::__split_buffer<std::string>::pointer)&__p;
        if (SHIBYTE(__p.__end_) < 0)
          v59 = __p.__first_;
        tknPrintf("Error: %sDuplicate default setting for '%s' configuration\n", v54, v55, v56, v57, v58, v59);
        goto LABEL_58;
      }
      *((_QWORD *)v538[0] + v42) = *(_QWORD *)(v41 + 24);
LABEL_63:
      v41 = *(_QWORD *)(v41 + 16);
      if (!v41)
        goto LABEL_139;
    }
    loggableFileObject((uint64_t *)v15);
    v43 = v583[23];
    v44 = *(_BYTE **)v583;
    loggableUnicode(*(unsigned int **)(v41 + 8), &__p);
    if (v43 >= 0)
      v49 = v583;
    else
      v49 = v44;
    v50 = (std::__split_buffer<std::string>::pointer)&__p;
    if (SHIBYTE(__p.__end_) < 0)
      v50 = __p.__first_;
    tknPrintf("Error: %sInvalid configuration name: '%s'\n", v45, v46, v47, v48, v49, v50);
LABEL_58:
    if (SHIBYTE(__p.__end_) < 0)
      operator delete(__p.__first_);
    if ((v583[23] & 0x80000000) != 0)
      operator delete(*(void **)v583);
    v540 = 1;
    goto LABEL_63;
  }
  v531 = 0;
  v532 = 0;
  v533 = 0;
  v529 = 0;
  v530 = 0;
  v522 = 0;
  v523 = 0;
  v528 = 0;
  v520 = 0;
LABEL_246:
  if (v540)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
    *(_QWORD *)v583 = aPpx;
    if (SHIBYTE(__p.__end_) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
    }
    else
    {
      *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
      end = (uint64_t)__p.__end_;
    }
    *(_QWORD *)v583 = &unk_24C216908;
    if (end >= 0)
      v313 = &v583[8];
    else
      v313 = *(const char **)&v583[8];
    conditionalAssert(v313, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 942, v277, v278);
    *(_QWORD *)v583 = aPpx;
    if (SHIBYTE(end) < 0)
      operator delete(*(void **)&v583[8]);
    if (SHIBYTE(__p.__end_) < 0)
      operator delete(__p.__first_);
    v314 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
    *v314 = aPpx;
    v315 = (std::string *)(v314 + 1);
    if ((v583[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v315, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
    }
    else
    {
      v391 = *(_OWORD *)v583;
      v314[3] = *(_QWORD *)&v583[16];
      *(_OWORD *)&v315->__r_.__value_.__l.__data_ = v391;
    }
    *v314 = &unk_24C216908;
  }
  *(_QWORD *)v583 = v539;
  v170 = std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::find<wchar_t const*>(a1 + 48, (const __int32 **)v583);
  v171 = a4;
  v172 = v526;
  v173 = v529;
  v174 = v530;
  v175 = v533;
  v176 = v170;
  if (v527)
  {
    if (a1 + 56 != v170)
    {
      if (std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__count_unique<wchar_t const*>((uint64_t)a6, (const __int32 **)&v539))
      {
        if (*(_QWORD *)(a1 + 120) >= 7uLL)
        {
          loggableFileObject(v526);
          v330 = v583[23];
          v331 = *(_BYTE **)v583;
          loggableUnicode(v539, &__p);
          v336 = v583;
          if (v330 < 0)
            v336 = v331;
          if (SHIBYTE(__p.__end_) >= 0)
            v337 = (std::__split_buffer<std::string>::pointer)&__p;
          else
            v337 = __p.__first_;
          tknPrintf("Error: %sParameter '%s' has been overridden multiple times\n", v332, v333, v334, v335, v336, v337);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          if ((v583[23] & 0x80000000) != 0)
            operator delete(*(void **)v583);
          std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(__p.__end_) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
          }
          else
          {
            *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
            end = (uint64_t)__p.__end_;
          }
          *(_QWORD *)v583 = &unk_24C216908;
          if (end >= 0)
            v467 = &v583[8];
          else
            v467 = *(const char **)&v583[8];
          conditionalAssert(v467, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 970, v338, v339);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(end) < 0)
            operator delete(*(void **)&v583[8]);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          v468 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
          *v468 = aPpx;
          v469 = (std::string *)(v468 + 1);
          if ((v583[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v469, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
          }
          else
          {
            v508 = *(_OWORD *)v583;
            v468[3] = *(_QWORD *)&v583[16];
            *(_OWORD *)&v469->__r_.__value_.__l.__data_ = v508;
          }
          *v468 = &unk_24C216908;
        }
        loggableFileObject(v526);
        v177 = v583[23];
        v178 = *(_BYTE **)v583;
        loggableUnicode(v539, &__p);
        v183 = v583;
        if (v177 < 0)
          v183 = v178;
        if (SHIBYTE(__p.__end_) >= 0)
          v184 = (std::__split_buffer<std::string>::pointer)&__p;
        else
          v184 = __p.__first_;
        tknPrintf("Warning: %sParameter '%s' has been overridden multiple times\n", v179, v180, v181, v182, v183, v184);
        v175 = v533;
        if (SHIBYTE(__p.__end_) < 0)
          operator delete(__p.__first_);
        if ((v583[23] & 0x80000000) != 0)
          operator delete(*(void **)v583);
      }
      else
      {
        std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__emplace_unique_key_args<wchar_t const*,wchar_t const* const&>(a6, (const __int32 **)&v539, (uint64_t *)&v539);
      }
      v210 = *(_QWORD *)(v176 + 40);
      if (v210 && (v211 = v210 - 1, v212 = *(_QWORD *)(a1 + 24), v211 < (*(_QWORD *)(a1 + 32) - v212) >> 3))
      {
        v209 = *(_QWORD *)(v212 + 8 * v211);
        if (!a3)
          goto LABEL_300;
      }
      else
      {
        v209 = 0;
        if (!a3)
        {
LABEL_300:
          if ((v520 & 1) != 0
            && (std::vector<std::wstring>::pointer)((char *)v534.__end_ - (char *)v534.__begin_) == (std::vector<std::wstring>::pointer)48)
          {
            if (v209)
            else
              v213 = 0;
            data = v536.__begin_;
            if (SHIBYTE(v536.__begin_->__r_.__value_.__r.__words[2]) < 0)
              data = (std::vector<std::wstring>::pointer)v536.__begin_->__r_.__value_.__l.__data_;
            v240 = wcscmp((const __int32 *)data, (const __int32 *)"t");
            v241 = &v534.__begin_[v240 == 0];
            if (SHIBYTE(v241->__r_.__value_.__r.__words[2]) < 0)
              v241 = (std::wstring *)v241->__r_.__value_.__r.__words[0];
            v242 = &v534.__begin_[v240 != 0];
            if (SHIBYTE(v242->__r_.__value_.__r.__words[2]) < 0)
              v242 = (std::wstring *)v242->__r_.__value_.__r.__words[0];
            MEMORY[0x20BD147A4](v213 + 200, v241);
            MEMORY[0x20BD147A4](v213 + 224, v242);
          }
          goto LABEL_374;
        }
      }
LABEL_312:
      if (a3 == 2)
      {
        if (v209)
        else
          v214 = 0;
        if (v523)
        {
          if ((v216 & 1) == 0
          {
            v353 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v353);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v353;
            v171 = v527;
            v172 = v526;
            v173 = v529;
            v174 = v530;
            v175 = v533;
          }
          v217 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v523, (BOOL *)&v540);
        }
        else
        {
          v217 = v214[38];
        }
        if (v540)
        {
          loggableFileObject(v172);
          if (v583[23] >= 0)
            v320 = v583;
          else
            v320 = *(_BYTE **)v583;
          tknPrintf("Error: %sParameter min value is not an integer\n", v316, v317, v318, v319, v320);
          if ((v583[23] & 0x80000000) != 0)
            operator delete(*(void **)v583);
          std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(__p.__end_) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
          }
          else
          {
            *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
            end = (uint64_t)__p.__end_;
          }
          *(_QWORD *)v583 = &unk_24C216908;
          if (end >= 0)
            v443 = &v583[8];
          else
            v443 = *(const char **)&v583[8];
          conditionalAssert(v443, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1058, v321, v322);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(end) < 0)
            operator delete(*(void **)&v583[8]);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          v444 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
          *v444 = aPpx;
          v445 = (std::string *)(v444 + 1);
          if ((v583[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v445, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
          }
          else
          {
            v488 = *(_OWORD *)v583;
            v444[3] = *(_QWORD *)&v583[16];
            *(_OWORD *)&v445->__r_.__value_.__l.__data_ = v488;
          }
          *v444 = &unk_24C216908;
        }
        if (v522)
        {
          if ((v218 & 1) == 0
          {
            v354 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v354);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v354;
            v171 = v527;
            v172 = v526;
            v173 = v529;
            v174 = v530;
            v175 = v533;
          }
          v219 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v522, (BOOL *)&v540);
          if (v540)
          {
            loggableFileObject(v172);
            if (v583[23] >= 0)
              v224 = v583;
            else
              v224 = *(_BYTE **)v583;
            tknPrintf("Error: %sParameter max value is not an integer\n", v220, v221, v222, v223, v224);
            if ((v583[23] & 0x80000000) != 0)
              operator delete(*(void **)v583);
            std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
            *(_QWORD *)v583 = aPpx;
            if (SHIBYTE(__p.__end_) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
            }
            else
            {
              *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
              end = (uint64_t)__p.__end_;
            }
            *(_QWORD *)v583 = &unk_24C216908;
            if (end >= 0)
              v461 = &v583[8];
            else
              v461 = *(const char **)&v583[8];
            conditionalAssert(v461, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1065, v225, v226);
            *(_QWORD *)v583 = aPpx;
            if (SHIBYTE(end) < 0)
              operator delete(*(void **)&v583[8]);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v462 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
            *v462 = aPpx;
            v463 = (std::string *)(v462 + 1);
            if ((v583[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v463, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
            }
            else
            {
              v497 = *(_OWORD *)v583;
              v462[3] = *(_QWORD *)&v583[16];
              *(_OWORD *)&v463->__r_.__value_.__l.__data_ = v497;
            }
            *v462 = &unk_24C216908;
          }
        }
        else
        {
          v219 = v214[39];
        }
        if (v217 > v219)
        {
          loggableFileObject(v172);
          if (v583[23] >= 0)
            v327 = v583;
          else
            v327 = *(_BYTE **)v583;
          tknPrintf("Error: %sInvalid range\n", v323, v324, v325, v326, v327);
          if ((v583[23] & 0x80000000) != 0)
            operator delete(*(void **)v583);
          std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(__p.__end_) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
          }
          else
          {
            *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
            end = (uint64_t)__p.__end_;
          }
          *(_QWORD *)v583 = &unk_24C216908;
          if (end >= 0)
            v446 = &v583[8];
          else
            v446 = *(const char **)&v583[8];
          conditionalAssert(v446, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1071, v328, v329);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(end) < 0)
            operator delete(*(void **)&v583[8]);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          v447 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
          *v447 = aPpx;
          v448 = (std::string *)(v447 + 1);
          if ((v583[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v448, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
          }
          else
          {
            v489 = *(_OWORD *)v583;
            v447[3] = *(_QWORD *)&v583[16];
            *(_OWORD *)&v448->__r_.__value_.__l.__data_ = v489;
          }
          *v447 = &unk_24C216908;
        }
        v214[38] = v217;
        v214[39] = v219;
        goto LABEL_374;
      }
      if (a3 != 4 && a3 != 1)
        goto LABEL_374;
      if (v209)
      else
        v215 = 0;
      if ((v520 & 1) != 0)
      {
        v227 = v535.__begin_ == v535.__end_ ? 0 : &v535;
        v228 = v534.__begin_ == v534.__end_ ? 0 : &v534;
        if (TStringParam::setAllowables((uint64_t)v215, (uint64_t)&v536, (uint64_t)v227, (uint64_t)v228))
        {
          loggableFileObject(v526);
          if (v583[23] >= 0)
            v366 = v583;
          else
            v366 = *(_BYTE **)v583;
          tknPrintf("Error: %sParameter allowable list is invalid\n", v362, v363, v364, v365, v366);
          if ((v583[23] & 0x80000000) != 0)
            operator delete(*(void **)v583);
          std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(__p.__end_) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
          }
          else
          {
            *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
            end = (uint64_t)__p.__end_;
          }
          *(_QWORD *)v583 = &unk_24C216908;
          if (end >= 0)
            v476 = &v583[8];
          else
            v476 = *(const char **)&v583[8];
          conditionalAssert(v476, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1092, v367, v368);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(end) < 0)
            operator delete(*(void **)&v583[8]);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          v477 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
          *v477 = aPpx;
          v478 = (std::string *)(v477 + 1);
          if ((v583[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v478, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
          }
          else
          {
            v510 = *(_OWORD *)v583;
            v477[3] = *(_QWORD *)&v583[16];
            *(_OWORD *)&v478->__r_.__value_.__l.__data_ = v510;
          }
          *v477 = &unk_24C216908;
        }
      }
      if (a3 != 1)
      {
LABEL_374:
        if (*(char *)(v209 + 111) < 0)
          v243 = *(_QWORD *)(v209 + 96);
        else
          v243 = *(unsigned __int8 *)(v209 + 111);
        v244 = v528;
        if (!v243)
          goto LABEL_386;
        loggableFileObject(v172);
        v245 = v583[23];
        v246 = *(_BYTE **)v583;
        loggableUnicode(v539, &__p);
        v251 = v583;
        if (v245 < 0)
          v251 = v246;
        if (SHIBYTE(__p.__end_) >= 0)
          v252 = (std::__split_buffer<std::string>::pointer)&__p;
        else
          v252 = __p.__first_;
        tknPrintf("Warning: %sParameter '%s' is deprecated\n", v247, v248, v249, v250, v251, v252);
        v244 = v528;
        v175 = v533;
        if (SHIBYTE(__p.__end_) < 0)
          operator delete(__p.__first_);
        if ((v583[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v583);
          if (!v533)
          {
LABEL_388:
            *(_QWORD *)(v209 + 112) |= v531;
            if (v244)
              *(_QWORD *)(v209 + 144) = v244;
            if (*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72) >= 0x21uLL)
            {
              v253 = 0;
              v254 = 1;
              do
              {
                if (*((_QWORD *)v538[0] + v254)
                  && (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v209 + 40))(v209, v254))
                {
                  v255 = v583;
                  loggableFileObject(v172);
                  if (v583[23] < 0)
                    v255 = *(_BYTE **)v583;
                  v256 = *(_QWORD *)(a1 + 72) + v253;
                  v257 = (unsigned int *)(v256 + 40);
                  if (*(char *)(v256 + 63) < 0)
                    v257 = *(unsigned int **)v257;
                  loggableUnicode(v257, &__p);
                  if (SHIBYTE(__p.__end_) >= 0)
                    v262 = (std::__split_buffer<std::string>::pointer)&__p;
                  else
                    v262 = __p.__first_;
                  tknPrintf("Error: %sIncorrect default setting for '%s' configuration\n", v258, v259, v260, v261, v255, v262);
                  if (SHIBYTE(__p.__end_) < 0)
                    operator delete(__p.__first_);
                  if ((v583[23] & 0x80000000) != 0)
                    operator delete(*(void **)v583);
                  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
                  *(_QWORD *)v583 = aPpx;
                  if (SHIBYTE(__p.__end_) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
                  }
                  else
                  {
                    *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
                    end = (uint64_t)__p.__end_;
                  }
                  *(_QWORD *)v583 = &unk_24C216908;
                  if (end >= 0)
                    v340 = &v583[8];
                  else
                    v340 = *(const char **)&v583[8];
                  conditionalAssert(v340, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1148, v263, v264);
                  *(_QWORD *)v583 = aPpx;
                  if (SHIBYTE(end) < 0)
                    operator delete(*(void **)&v583[8]);
                  if (SHIBYTE(__p.__end_) < 0)
                    operator delete(__p.__first_);
                  v341 = __cxa_allocate_exception(0x20uLL);
                  std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
                  *v341 = aPpx;
                  v342 = (std::string *)(v341 + 1);
                  if ((v583[23] & 0x80000000) != 0)
                  {
                    std::string::__init_copy_ctor_external(v342, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
                  }
                  else
                  {
                    v425 = *(_OWORD *)v583;
                    v341[3] = *(_QWORD *)&v583[16];
                    *(_OWORD *)&v342->__r_.__value_.__l.__data_ = v425;
                  }
                  *v341 = &unk_24C216908;
                }
                if (*((_QWORD *)v537[0] + v254)
                  && (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v209 + 32))(v209, v254))
                {
                  v265 = v583;
                  loggableFileObject(v172);
                  if (v583[23] < 0)
                    v265 = *(_BYTE **)v583;
                  v266 = *(_QWORD *)(a1 + 72) + v253;
                  v267 = (unsigned int *)(v266 + 40);
                  if (*(char *)(v266 + 63) < 0)
                    v267 = *(unsigned int **)v267;
                  loggableUnicode(v267, &__p);
                  if (SHIBYTE(__p.__end_) >= 0)
                    v272 = (std::__split_buffer<std::string>::pointer)&__p;
                  else
                    v272 = __p.__first_;
                  tknPrintf("Error: %sIncorrect value setting for '%s' configuration\n", v268, v269, v270, v271, v265, v272);
                  if (SHIBYTE(__p.__end_) < 0)
                    operator delete(__p.__first_);
                  if ((v583[23] & 0x80000000) != 0)
                    operator delete(*(void **)v583);
                  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
                  *(_QWORD *)v583 = aPpx;
                  if (SHIBYTE(__p.__end_) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
                  }
                  else
                  {
                    *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
                    end = (uint64_t)__p.__end_;
                  }
                  *(_QWORD *)v583 = &unk_24C216908;
                  if (end >= 0)
                    v343 = &v583[8];
                  else
                    v343 = *(const char **)&v583[8];
                  conditionalAssert(v343, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1154, v273, v274);
                  *(_QWORD *)v583 = aPpx;
                  if (SHIBYTE(end) < 0)
                    operator delete(*(void **)&v583[8]);
                  if (SHIBYTE(__p.__end_) < 0)
                    operator delete(__p.__first_);
                  v344 = __cxa_allocate_exception(0x20uLL);
                  std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
                  *v344 = aPpx;
                  v345 = (std::string *)(v344 + 1);
                  if ((v583[23] & 0x80000000) != 0)
                  {
                    std::string::__init_copy_ctor_external(v345, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
                  }
                  else
                  {
                    v426 = *(_OWORD *)v583;
                    v344[3] = *(_QWORD *)&v583[16];
                    *(_OWORD *)&v345->__r_.__value_.__l.__data_ = v426;
                  }
                  *v344 = &unk_24C216908;
                }
                ++v254;
                v253 += 32;
              }
              while (v254 < (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 5);
            }
            if (v532 && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v209 + 40))(v209, 1))
            {
              loggableFileObject(v172);
              if (v583[23] >= 0)
                v283 = v583;
              else
                v283 = *(_BYTE **)v583;
              tknPrintf("Error: %sIncorrect setting of Original attribute\n", v279, v280, v281, v282, v283);
              if ((v583[23] & 0x80000000) != 0)
                operator delete(*(void **)v583);
              std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
              *(_QWORD *)v583 = aPpx;
              if (SHIBYTE(__p.__end_) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
              }
              else
              {
                *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
                end = (uint64_t)__p.__end_;
              }
              *(_QWORD *)v583 = &unk_24C216908;
              if (end >= 0)
                v434 = &v583[8];
              else
                v434 = *(const char **)&v583[8];
              conditionalAssert(v434, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1162, v284, v285);
              *(_QWORD *)v583 = aPpx;
              if (SHIBYTE(end) < 0)
                operator delete(*(void **)&v583[8]);
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              v435 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
              *v435 = aPpx;
              v436 = (std::string *)(v435 + 1);
              if ((v583[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v436, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
              }
              else
              {
                v473 = *(_OWORD *)v583;
                v435[3] = *(_QWORD *)&v583[16];
                *(_OWORD *)&v436->__r_.__value_.__l.__data_ = v473;
              }
              *v435 = &unk_24C216908;
            }
            if (v174
              && (*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v209 + 40))(v209, Config, v174))
            {
              loggableFileObject(v172);
              if (v583[23] >= 0)
                v290 = v583;
              else
                v290 = *(_BYTE **)v583;
              tknPrintf("Error: %sIncorrect setting of Format attribute\n", v286, v287, v288, v289, v290);
              if ((v583[23] & 0x80000000) != 0)
                operator delete(*(void **)v583);
              std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
              *(_QWORD *)v583 = aPpx;
              if (SHIBYTE(__p.__end_) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
              }
              else
              {
                *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
                end = (uint64_t)__p.__end_;
              }
              *(_QWORD *)v583 = &unk_24C216908;
              if (end >= 0)
                v437 = &v583[8];
              else
                v437 = *(const char **)&v583[8];
              conditionalAssert(v437, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1168, v291, v292);
              *(_QWORD *)v583 = aPpx;
              if (SHIBYTE(end) < 0)
                operator delete(*(void **)&v583[8]);
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              v438 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
              *v438 = aPpx;
              v439 = (std::string *)(v438 + 1);
              if ((v583[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v439, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
              }
              else
              {
                v474 = *(_OWORD *)v583;
                v438[3] = *(_QWORD *)&v583[16];
                *(_OWORD *)&v439->__r_.__value_.__l.__data_ = v474;
              }
              *v438 = &unk_24C216908;
            }
            if (v173
              && (*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v209 + 40))(v209, v524, v173))
            {
              loggableFileObject(v172);
              if (v583[23] >= 0)
                v297 = v583;
              else
                v297 = *(_BYTE **)v583;
              tknPrintf("Error: %sIncorrect setting of SpellOut attribute\n", v293, v294, v295, v296, v297);
              if ((v583[23] & 0x80000000) != 0)
                operator delete(*(void **)v583);
              std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
              *(_QWORD *)v583 = aPpx;
              if (SHIBYTE(__p.__end_) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
              }
              else
              {
                *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
                end = (uint64_t)__p.__end_;
              }
              *(_QWORD *)v583 = &unk_24C216908;
              if (end >= 0)
                v440 = &v583[8];
              else
                v440 = *(const char **)&v583[8];
              conditionalAssert(v440, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1174, v298, v299);
              *(_QWORD *)v583 = aPpx;
              if (SHIBYTE(end) < 0)
                operator delete(*(void **)&v583[8]);
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              v441 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
              *v441 = aPpx;
              v442 = (std::string *)(v441 + 1);
              if ((v583[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v442, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
              }
              else
              {
                v475 = *(_OWORD *)v583;
                v441[3] = *(_QWORD *)&v583[16];
                *(_OWORD *)&v442->__r_.__value_.__l.__data_ = v475;
              }
              *v441 = &unk_24C216908;
            }
            if (!v171)
            {
              TParamManager::add((TParamManager *)a1, (TParam *)v209);
              goto LABEL_412;
            }
            if (*(char *)(v209 + 111) < 0)
            {
              if (!*(_QWORD *)(v209 + 96))
                goto LABEL_412;
            }
            else if (!*(_BYTE *)(v209 + 111))
            {
              goto LABEL_412;
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v209);
            goto LABEL_412;
          }
        }
        else
        {
LABEL_386:
          if (!v175)
            goto LABEL_388;
        }
        MEMORY[0x20BD147A4](v209 + 40, v175);
        goto LABEL_388;
      }
      if (v532)
      {
        if ((v229 & 1) == 0
        {
          v392 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v392);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v392;
          v171 = v527;
          v172 = v526;
          v173 = v529;
          v174 = v530;
        }
        v230 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v532, (BOOL *)&v540);
        v231 = v215[163];
        if (0xAAAAAAAAAAAAAAABLL * ((v215[164] - v231) >> 3) < v230)
        {
          loggableFileObject(v172);
          v393 = v583[23];
          v394 = *(_BYTE **)v583;
          loggableUnicode(v532, &__p);
          v399 = v583;
          if (v393 < 0)
            v399 = v394;
          if (SHIBYTE(__p.__end_) >= 0)
            v400 = (std::__split_buffer<std::string>::pointer)&__p;
          else
            v400 = __p.__first_;
          tknPrintf("Error: %sParameter Original value is out of range, was '%s', expected an int in the range [0,%llu].\n", v395, v396, v397, v398, v399, v400, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v215[164] - v215[163]) >> 3));
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          if ((v583[23] & 0x80000000) != 0)
            operator delete(*(void **)v583);
          std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(__p.__end_) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
          }
          else
          {
            *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
            end = (uint64_t)__p.__end_;
          }
          *(_QWORD *)v583 = &unk_24C216908;
          if (end >= 0)
            v498 = &v583[8];
          else
            v498 = *(const char **)&v583[8];
          conditionalAssert(v498, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1104, v401, v402);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(end) < 0)
            operator delete(*(void **)&v583[8]);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          v499 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
          *v499 = aPpx;
          v500 = (std::string *)(v499 + 1);
          if ((v583[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v500, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
          }
          else
          {
            v515 = *(_OWORD *)v583;
            v499[3] = *(_QWORD *)&v583[16];
            *(_OWORD *)&v500->__r_.__value_.__l.__data_ = v515;
          }
          *v499 = &unk_24C216908;
        }
        v232 = (unsigned int *)(v231 + 24 * v230);
        if (*((char *)v232 + 23) < 0)
          v232 = *(unsigned int **)v232;
        v532 = v232;
        if (!v174)
          goto LABEL_360;
      }
      else
      {
        v532 = 0;
        if (!v530)
        {
LABEL_360:
          if (v173)
          {
            if ((v236 & 1) == 0
            {
              v414 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v414);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v414;
              v171 = v527;
              v172 = v526;
              v173 = v529;
            }
            v237 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v173, (BOOL *)&v540);
            v238 = v215[163];
            v175 = v533;
            if (0xAAAAAAAAAAAAAAABLL * ((v215[164] - v238) >> 3) < v237)
            {
              loggableFileObject(v172);
              v415 = v583[23];
              v416 = *(_BYTE **)v583;
              loggableUnicode(v529, &__p);
              v421 = v583;
              if (v415 < 0)
                v421 = v416;
              if (SHIBYTE(__p.__end_) >= 0)
                v422 = (std::__split_buffer<std::string>::pointer)&__p;
              else
                v422 = __p.__first_;
              tknPrintf("Error: %sParameter SpellOut value is out of range, was '%s', expected an int in the range [0,%llu].\n", v417, v418, v419, v420, v421, v422, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v215[164] - v215[163]) >> 3));
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              if ((v583[23] & 0x80000000) != 0)
                operator delete(*(void **)v583);
              std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
              *(_QWORD *)v583 = aPpx;
              if (SHIBYTE(__p.__end_) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
              }
              else
              {
                *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
                end = (uint64_t)__p.__end_;
              }
              *(_QWORD *)v583 = &unk_24C216908;
              if (end >= 0)
                v504 = &v583[8];
              else
                v504 = *(const char **)&v583[8];
              conditionalAssert(v504, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1126, v423, v424);
              *(_QWORD *)v583 = aPpx;
              if (SHIBYTE(end) < 0)
                operator delete(*(void **)&v583[8]);
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              v505 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
              *v505 = aPpx;
              v506 = (std::string *)(v505 + 1);
              if ((v583[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v506, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
              }
              else
              {
                v517 = *(_OWORD *)v583;
                v505[3] = *(_QWORD *)&v583[16];
                *(_OWORD *)&v506->__r_.__value_.__l.__data_ = v517;
              }
              *v505 = &unk_24C216908;
            }
            v173 = (unsigned int *)(v238 + 24 * v237);
            if (*((char *)v173 + 23) < 0)
              v173 = *(unsigned int **)v173;
          }
          else
          {
            v175 = v533;
          }
          goto LABEL_374;
        }
      }
      if ((v233 & 1) == 0
      {
        v403 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v403);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v403;
        v171 = v527;
        v172 = v526;
        v173 = v529;
        v174 = v530;
      }
      v234 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v174, (BOOL *)&v540);
      v235 = v215[163];
      if (0xAAAAAAAAAAAAAAABLL * ((v215[164] - v235) >> 3) < v234)
      {
        loggableFileObject(v172);
        v404 = v583[23];
        v405 = *(_BYTE **)v583;
        loggableUnicode(v530, &__p);
        v410 = v583;
        if (v404 < 0)
          v410 = v405;
        if (SHIBYTE(__p.__end_) >= 0)
          v411 = (std::__split_buffer<std::string>::pointer)&__p;
        else
          v411 = __p.__first_;
        tknPrintf("Error: %sParameter Format value is out of range, was '%s', expected an int in the range [0,%llu].\n", v406, v407, v408, v409, v410, v411, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v215[164] - v215[163]) >> 3));
        if (SHIBYTE(__p.__end_) < 0)
          operator delete(__p.__first_);
        if ((v583[23] & 0x80000000) != 0)
          operator delete(*(void **)v583);
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
        *(_QWORD *)v583 = aPpx;
        if (SHIBYTE(__p.__end_) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
        }
        else
        {
          *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
          end = (uint64_t)__p.__end_;
        }
        *(_QWORD *)v583 = &unk_24C216908;
        if (end >= 0)
          v501 = &v583[8];
        else
          v501 = *(const char **)&v583[8];
        conditionalAssert(v501, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1115, v412, v413);
        *(_QWORD *)v583 = aPpx;
        if (SHIBYTE(end) < 0)
          operator delete(*(void **)&v583[8]);
        if (SHIBYTE(__p.__end_) < 0)
          operator delete(__p.__first_);
        v502 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
        *v502 = aPpx;
        v503 = (std::string *)(v502 + 1);
        if ((v583[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v503, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
        }
        else
        {
          v516 = *(_OWORD *)v583;
          v502[3] = *(_QWORD *)&v583[16];
          *(_OWORD *)&v503->__r_.__value_.__l.__data_ = v516;
        }
        *v502 = &unk_24C216908;
      }
      v174 = (unsigned int *)(v235 + 24 * v234);
      if (*((char *)v174 + 23) < 0)
        v174 = *(unsigned int **)v174;
      goto LABEL_360;
    }
    if ((v518 & 1) == 0)
    {
      loggableFileObject(v526);
      v192 = v583[23];
      v193 = *(_BYTE **)v583;
      loggableUnicode(v539, &__p);
      v198 = v583;
      if (v192 < 0)
        v198 = v193;
      if (SHIBYTE(__p.__end_) >= 0)
        v199 = (std::__split_buffer<std::string>::pointer)&__p;
      else
        v199 = __p.__first_;
      tknPrintf("Error: %sParameter '%s' does not exist\n", v194, v195, v196, v197, v198, v199);
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      if ((v583[23] & 0x80000000) != 0)
        operator delete(*(void **)v583);
      std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
      *(_QWORD *)v583 = aPpx;
      if (SHIBYTE(__p.__end_) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
      }
      else
      {
        *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
        end = (uint64_t)__p.__end_;
      }
      *(_QWORD *)v583 = &unk_24C216908;
      if (end >= 0)
        v470 = &v583[8];
      else
        v470 = *(const char **)&v583[8];
      conditionalAssert(v470, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 955, v200, v201);
      *(_QWORD *)v583 = aPpx;
      if (SHIBYTE(end) < 0)
        operator delete(*(void **)&v583[8]);
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      v471 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
      *v471 = aPpx;
      v472 = (std::string *)(v471 + 1);
      if ((v583[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v472, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
      }
      else
      {
        v509 = *(_OWORD *)v583;
        v471[3] = *(_QWORD *)&v583[16];
        *(_OWORD *)&v472->__r_.__value_.__l.__data_ = v509;
      }
      *v471 = &unk_24C216908;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 16))
    {
      if (a1 + 56 != v170)
      {
        loggableFileObject(v526);
        v300 = v583[23];
        v301 = *(_BYTE **)v583;
        loggableUnicode(v539, &__p);
        v306 = v583;
        if (v300 < 0)
          v306 = v301;
        if (SHIBYTE(__p.__end_) >= 0)
          v307 = (std::__split_buffer<std::string>::pointer)&__p;
        else
          v307 = __p.__first_;
        tknPrintf("Error: %sParameter '%s' already exists\n", v302, v303, v304, v305, v306, v307);
        if (SHIBYTE(__p.__end_) < 0)
          operator delete(__p.__first_);
        if ((v583[23] & 0x80000000) != 0)
          operator delete(*(void **)v583);
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
        *(_QWORD *)v583 = aPpx;
        if (SHIBYTE(__p.__end_) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
        }
        else
        {
          *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
          end = (uint64_t)__p.__end_;
        }
        *(_QWORD *)v583 = &unk_24C216908;
        if (end >= 0)
          v452 = &v583[8];
        else
          v452 = *(const char **)&v583[8];
        conditionalAssert(v452, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 995, v308, v309);
        *(_QWORD *)v583 = aPpx;
        if (SHIBYTE(end) < 0)
          operator delete(*(void **)&v583[8]);
        if (SHIBYTE(__p.__end_) < 0)
          operator delete(__p.__first_);
        v453 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
        *v453 = aPpx;
        v454 = (std::string *)(v453 + 1);
        if ((v583[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v454, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
        }
        else
        {
          v494 = *(_OWORD *)v583;
          v453[3] = *(_QWORD *)&v583[16];
          *(_OWORD *)&v454->__r_.__value_.__l.__data_ = v494;
        }
        *v453 = &unk_24C216908;
      }
      if (*(_QWORD *)(a1 + 120) > 4uLL)
      {
        if (!*((_QWORD *)v538[0] + 1))
        {
          loggableFileObject(v526);
          if (v583[23] >= 0)
            v350 = v583;
          else
            v350 = *(_BYTE **)v583;
          tknPrintf("Error: %s'Root' default setting is mandatory\n", v346, v347, v348, v349, v350);
          if ((v583[23] & 0x80000000) != 0)
            operator delete(*(void **)v583);
          std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(__p.__end_) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
          }
          else
          {
            *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
            end = (uint64_t)__p.__end_;
          }
          *(_QWORD *)v583 = &unk_24C216908;
          if (end >= 0)
            v458 = &v583[8];
          else
            v458 = *(const char **)&v583[8];
          conditionalAssert(v458, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1009, v351, v352);
          *(_QWORD *)v583 = aPpx;
          if (SHIBYTE(end) < 0)
            operator delete(*(void **)&v583[8]);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          v459 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
          *v459 = aPpx;
          v460 = (std::string *)(v459 + 1);
          if ((v583[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v460, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
          }
          else
          {
            v496 = *(_OWORD *)v583;
            v459[3] = *(_QWORD *)&v583[16];
            *(_OWORD *)&v460->__r_.__value_.__l.__data_ = v496;
          }
          *v459 = &unk_24C216908;
        }
      }
      else if (!v532)
      {
        loggableFileObject(v526);
        if (v583[23] >= 0)
          v189 = v583;
        else
          v189 = *(_BYTE **)v583;
        tknPrintf("Error: %s'Original' attribute is mandatory\n", v185, v186, v187, v188, v189);
        if ((v583[23] & 0x80000000) != 0)
          operator delete(*(void **)v583);
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
        *(_QWORD *)v583 = aPpx;
        if (SHIBYTE(__p.__end_) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
        }
        else
        {
          *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
          end = (uint64_t)__p.__end_;
        }
        *(_QWORD *)v583 = &unk_24C216908;
        if (end >= 0)
          v455 = &v583[8];
        else
          v455 = *(const char **)&v583[8];
        conditionalAssert(v455, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1003, v190, v191);
        *(_QWORD *)v583 = aPpx;
        if (SHIBYTE(end) < 0)
          operator delete(*(void **)&v583[8]);
        if (SHIBYTE(__p.__end_) < 0)
          operator delete(__p.__first_);
        v456 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
        *v456 = aPpx;
        v457 = (std::string *)(v456 + 1);
        if ((v583[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v457, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
        }
        else
        {
          v495 = *(_OWORD *)v583;
          v456[3] = *(_QWORD *)&v583[16];
          *(_OWORD *)&v457->__r_.__value_.__l.__data_ = v495;
        }
        *v456 = &unk_24C216908;
      }
      switch(a3)
      {
        case 0:
          v209 = operator new();
          TBoolParam::TBoolParam(v209, (uint64_t)v539);
          break;
        case 1:
          if ((v520 & 1) == 0)
          {
            loggableFileObject(v526);
            if (v583[23] >= 0)
              v380 = v583;
            else
              v380 = *(_BYTE **)v583;
            tknPrintf("Error: %s'Allowables' attribute is mandatory\n", v376, v377, v378, v379, v380);
            if ((v583[23] & 0x80000000) != 0)
              operator delete(*(void **)v583);
            std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
            *(_QWORD *)v583 = aPpx;
            if (SHIBYTE(__p.__end_) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
            }
            else
            {
              *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
              end = (uint64_t)__p.__end_;
            }
            *(_QWORD *)v583 = &unk_24C216908;
            if (end >= 0)
              v482 = &v583[8];
            else
              v482 = *(const char **)&v583[8];
            conditionalAssert(v482, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1039, v381, v382);
            *(_QWORD *)v583 = aPpx;
            if (SHIBYTE(end) < 0)
              operator delete(*(void **)&v583[8]);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v483 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
            *v483 = aPpx;
            v484 = (std::string *)(v483 + 1);
            if ((v583[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v484, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
            }
            else
            {
              v512 = *(_OWORD *)v583;
              v483[3] = *(_QWORD *)&v583[16];
              *(_OWORD *)&v484->__r_.__value_.__l.__data_ = v512;
            }
            *v483 = &unk_24C216908;
          }
          goto LABEL_309;
        case 2:
          if (!v523 || !v522)
          {
            loggableFileObject(v526);
            if (v583[23] >= 0)
              v387 = v583;
            else
              v387 = *(_BYTE **)v583;
            tknPrintf("Error: %s'Min' and 'Max' attributes are mandatory\n", v383, v384, v385, v386, v387);
            if ((v583[23] & 0x80000000) != 0)
              operator delete(*(void **)v583);
            std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
            *(_QWORD *)v583 = aPpx;
            if (SHIBYTE(__p.__end_) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
            }
            else
            {
              *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
              end = (uint64_t)__p.__end_;
            }
            *(_QWORD *)v583 = &unk_24C216908;
            if (end >= 0)
              v485 = &v583[8];
            else
              v485 = *(const char **)&v583[8];
            conditionalAssert(v485, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1025, v388, v389);
            *(_QWORD *)v583 = aPpx;
            if (SHIBYTE(end) < 0)
              operator delete(*(void **)&v583[8]);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v486 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
            *v486 = aPpx;
            v487 = (std::string *)(v486 + 1);
            if ((v583[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v487, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
            }
            else
            {
              v513 = *(_OWORD *)v583;
              v486[3] = *(_QWORD *)&v583[16];
              *(_OWORD *)&v487->__r_.__value_.__l.__data_ = v513;
            }
            *v486 = &unk_24C216908;
          }
          v209 = operator new();
          TIntParam::TIntParam(v209, (uint64_t)v539);
          break;
        case 3:
          v209 = operator new();
          TFloatParam::TFloatParam(v209, (uint64_t)v539);
          break;
        case 4:
LABEL_309:
          v209 = operator new();
          TStringParam::TStringParam((_QWORD *)v209, (uint64_t)v539);
          break;
        default:
          v209 = 0;
          break;
      }
      v531 |= 8uLL;
      if (!a3)
        goto LABEL_300;
      goto LABEL_312;
    }
    if ((v518 & 1) == 0)
    {
      loggableFileObject(v526);
      if (v583[23] >= 0)
        v206 = v583;
      else
        v206 = *(_BYTE **)v583;
      tknPrintf("Error: %sThis param manager does not support param creation\n", v202, v203, v204, v205, v206);
      if ((v583[23] & 0x80000000) != 0)
        operator delete(*(void **)v583);
      std::string::basic_string[abi:ne180100]<0>(&__p, &byte_209A88803);
      *(_QWORD *)v583 = aPpx;
      if (SHIBYTE(__p.__end_) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v583[8], (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
      }
      else
      {
        *(_OWORD *)&v583[8] = *(_OWORD *)&__p.__first_;
        end = (uint64_t)__p.__end_;
      }
      *(_QWORD *)v583 = &unk_24C216908;
      if (end >= 0)
        v449 = &v583[8];
      else
        v449 = *(const char **)&v583[8];
      conditionalAssert(v449, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 988, v207, v208);
      *(_QWORD *)v583 = aPpx;
      if (SHIBYTE(end) < 0)
        operator delete(*(void **)&v583[8]);
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      v450 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v583, &byte_209A88803);
      *v450 = aPpx;
      v451 = (std::string *)(v450 + 1);
      if ((v583[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v451, *(const std::string::value_type **)v583, *(std::string::size_type *)&v583[8]);
      }
      else
      {
        v490 = *(_OWORD *)v583;
        v450[3] = *(_QWORD *)&v583[16];
        *(_OWORD *)&v451->__r_.__value_.__l.__data_ = v490;
      }
      *v450 = &unk_24C216908;
    }
  }
LABEL_412:
  *(_QWORD *)v583 = &v534;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)v583);
  *(_QWORD *)v583 = &v535;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)v583);
  *(_QWORD *)v583 = &v536;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)v583);
  if (v537[0])
  {
    v537[1] = v537[0];
    operator delete(v537[0]);
  }
  if (v538[0])
  {
    v538[1] = v538[0];
    operator delete(v538[0]);
  }
}

void sub_209782174(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__pa,uint64_t a44,int a45,__int16 a46,char a47,char a48,std::__split_buffer<std::string> *a49,uint64_t a50)
{
  uint64_t v50;
  uint64_t v51;

  MEMORY[0x20BD149A8](v51, 0x1070C40ADD13FEBLL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if ((a27 & 0x100000000) == 0)
    {
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x2097827FCLL);
}

void sub_2097827DC()
{
  __cxa_end_catch();
  JUMPOUT(0x2097827FCLL);
}

void sub_2097827E8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x2097827ECLL);
  __clang_call_terminate(a1);
}

void sub_2097827F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char **a33,uint64_t a34,uint64_t a35,char *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t *a58)
{
  a58 = (uint64_t *)&a33;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  a33 = &a36;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a36 = &a39;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void TSemanticException::~TSemanticException(void **this)
{
  *this = (void *)aPpx;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_24C213620;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD149A8);
}

uint64_t TParamManager::getConfig(uint64_t a1, __int32 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p[2];
  char v7;

  v3 = a1 + 96;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, a2);
  v4 = std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>(v3, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  if ((_QWORD *)(a1 + 104) == v4)
    return -1;
  else
    return v4[7];
}

void sub_2097828FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TParamManager::nameToParam(uint64_t a1, const __int32 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const __int32 *v8;

  v8 = a2;
  v3 = std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::find<wchar_t const*>(a1 + 48, &v8);
  if (a1 + 56 == v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
    return 0;
  v5 = v4 - 1;
  v6 = *(_QWORD *)(a1 + 24);
  if (v5 >= (*(_QWORD *)(a1 + 32) - v6) >> 3)
    return 0;
  else
    return *(_QWORD *)(v6 + 8 * v5);
}

void TParamManager::init(TParamManager *this, const TFileObject *a2, char a3)
{
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _QWORD *exception;
  std::string *v14;
  __int128 v15;
  void *v16[2];
  uint64_t v17;
  _BYTE __p[24];
  uint64_t v19;
  const char *v20;
  __int128 v21;
  uint64_t v22;
  const char *v23;
  __int128 v24;
  uint64_t v25;
  const char *v26;
  __int128 v27;
  uint64_t v28;
  const char *v29;
  __int128 v30;
  uint64_t v31;
  const char *v32;
  __int128 v33;
  uint64_t v34;
  const char *v35;
  __int128 v36;
  uint64_t v37;
  const char *v38;
  __int128 v39;
  uint64_t v40;
  const char *v41;
  __int128 v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  __int128 v46;
  const char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v20 = "O";
  v21 = xmmword_209A57DB0;
  v22 = -1;
  v23 = "O";
  v24 = xmmword_209A57DB0;
  v25 = -1;
  v26 = "O";
  v27 = xmmword_209A57DB0;
  v28 = -1;
  v29 = "O";
  v30 = xmmword_209A57DB0;
  v31 = 3;
  v32 = "O";
  v33 = xmmword_209A57DB0;
  v34 = -1;
  v35 = "C";
  v36 = xmmword_209A57DB0;
  v37 = -1;
  v38 = "C";
  v39 = xmmword_209A57DB0;
  v40 = -1;
  v41 = "C";
  v42 = xmmword_209A57DB0;
  v43 = -1;
  v44 = "C";
  v45 = 3;
  v46 = xmmword_209A57DC0;
  v47 = "C";
  v48 = 3;
  v49 = xmmword_209A57D70;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v20, 0xAuLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v16, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v16[0], (std::string::size_type)v16[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v16;
      v19 = v17;
    }
    *(_QWORD *)__p = &unk_24C216908;
    if (v19 >= 0)
      v12 = &__p[8];
    else
      v12 = *(const char **)&__p[8];
    conditionalAssert(v12, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1218, v10, v11);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v19) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v17) < 0)
      operator delete(v16[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v14 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v15 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    *exception = &unk_24C216908;
  }
  v16[1] = 0;
  v17 = 0;
  v16[0] = &v16[1];
  v6 = *((_QWORD *)a2 + 3);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_31;
  }
  do
  {
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
    {
      v8 = 0;
LABEL_15:
      v7 = 1;
      goto LABEL_23;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C"))
    {
      v8 = 0;
      v7 = 0;
      goto LABEL_23;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
    {
      v7 = 1;
LABEL_19:
      v8 = 4;
      goto LABEL_23;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C"))
    {
      v7 = 0;
      goto LABEL_19;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
    {
      v7 = 1;
LABEL_22:
      v8 = 2;
      goto LABEL_23;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C"))
    {
      v7 = 0;
      goto LABEL_22;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
    {
      v8 = 1;
      goto LABEL_15;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C"))
    {
      v7 = 0;
      v8 = 1;
    }
    else
    {
      if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
      {
        v7 = 1;
      }
      else
      {
        if (wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C"))
          goto LABEL_24;
        v7 = 0;
      }
      v8 = 3;
    }
LABEL_23:
    TParamManager::initParam((uint64_t)this, v6, v8, v7, a3, (uint64_t **)v16);
LABEL_24:
    v6 = *(_QWORD *)(v6 + 16);
  }
  while (v6);
  v9 = v16[1];
LABEL_31:
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)v16, v9);
}

void sub_209782ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  _QWORD *v31[61];

  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)v31, v31[1]);
  _Unwind_Resume(a1);
}

void TParamManager::initialize(TParamManager *this, TInputStream *a2, char a3)
{
  const TFileObject *v6;
  int *NextToken;
  char v8;
  __int32 *v9;
  __int32 *v10;
  __int32 *v11;
  uint64_t Config;
  unsigned int *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  __int32 *v20;
  unsigned int *v21;
  __int32 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  _QWORD *v31;
  std::string *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  _QWORD *exception;
  std::string *v38;
  __int128 v39;
  TFileObject *v40;
  void *v41[2];
  uint64_t v42;
  _BYTE __p[24];
  uint64_t v44;
  _BYTE __s[24];
  _BYTE v46[1024];
  char v47;
  _BYTE v48[24];
  _QWORD v49[128];
  char v50;
  _QWORD v51[11];

  if (*((_BYTE *)a2 + 8))
  {
    if (TInputStream::verifyHeader((uint64_t)a2, "Parameter", (uint64_t)pParameterVersion, 7))
    {
      std::string::basic_string[abi:ne180100]<0>(__s, &byte_209A88803);
      *(_QWORD *)v48 = aPpx;
      if ((__s[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v48[8], *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
      }
      else
      {
        *(_OWORD *)&v48[8] = *(_OWORD *)__s;
        v49[0] = *(_QWORD *)&__s[16];
      }
      *(_QWORD *)v48 = &unk_24C214BA0;
      if (v49[0] >= 0)
        v36 = &v48[8];
      else
        v36 = *(const char **)&v48[8];
      conditionalAssert(v36, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1282, v34, v35);
      *(_QWORD *)v48 = aPpx;
      if (SHIBYTE(v49[0]) < 0)
        operator delete(*(void **)&v48[8]);
      if ((__s[23] & 0x80000000) != 0)
        operator delete(*(void **)__s);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v48, &byte_209A88803);
      *exception = aPpx;
      v38 = (std::string *)(exception + 1);
      if ((v48[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)v48, *(std::string::size_type *)&v48[8]);
      }
      else
      {
        v39 = *(_OWORD *)v48;
        exception[3] = *(_QWORD *)&v48[16];
        *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
      }
      *exception = &unk_24C214BA0;
    }
    *((_QWORD *)this + 15) = *((_QWORD *)a2 + 12);
    TFileObjectParser::TFileObjectParser((TFileObjectParser *)v51, a2);
    v6 = (const TFileObject *)v51[0];
    if (*((_QWORD *)this + 15) >= 5uLL)
    {
      v40 = (TFileObject *)v51[0];
      *(_QWORD *)v48 = v49;
      *(_OWORD *)&v48[8] = xmmword_209A57DD0;
      v50 = 1;
      TInputStream::getStringParameter((uint64_t)a2, "ConfigurationNames", (uint64_t)v48, &dword_209A57E04);
      if (*(_QWORD *)&v48[16])
      {
        *(_QWORD *)__s = v46;
        *(_OWORD *)&__s[8] = xmmword_209A57DD0;
        v47 = 1;
        if (*(_QWORD *)&v48[16] >= *(_QWORD *)&v48[8])
        {
          if (v50)
          {
            *(_DWORD *)__p = 0;
            TBuffer<wchar_t>::insert((uint64_t)v48, *(unint64_t *)&v48[16], (int *)__p, 1uLL);
            NextToken = *(int **)v48;
            --*(_QWORD *)&v48[16];
          }
          else
          {
            NextToken = *(int **)v48;
            if (*(_QWORD *)&v48[8])
              *(_DWORD *)(*(_QWORD *)v48 + 4 * *(_QWORD *)&v48[8] - 4) = 0;
          }
        }
        else
        {
          NextToken = *(int **)v48;
          *(_DWORD *)(*(_QWORD *)v48 + 4 * *(_QWORD *)&v48[16]) = 0;
        }
        if (*NextToken)
        {
          v8 = 0;
          while (1)
          {
            NextToken = getNextToken(NextToken, (uint64_t)__s, (__int32 *)",");
            if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
            {
              if (v47)
              {
                *(_DWORD *)__p = 0;
                TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
                v9 = *(__int32 **)__s;
                --*(_QWORD *)&__s[16];
              }
              else
              {
                v9 = *(__int32 **)__s;
                if (*(_QWORD *)&__s[8])
                  *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
              }
            }
            else
            {
              v9 = *(__int32 **)__s;
              *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
            }
            v10 = wcschr(v9, 58);
            v11 = v10;
            if (v10)
            {
              Config = TParamManager::getConfig((uint64_t)this, v10 + 1);
              if (Config == -1)
              {
                if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
                {
                  if (v47)
                  {
                    LODWORD(v41[0]) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)v41, 1uLL);
                    v13 = *(unsigned int **)__s;
                    --*(_QWORD *)&__s[16];
                  }
                  else
                  {
                    v13 = *(unsigned int **)__s;
                    if (*(_QWORD *)&__s[8])
                      *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
                  }
                }
                else
                {
                  v13 = *(unsigned int **)__s;
                  *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
                }
                loggableUnicode(v13, __p);
                if (__p[23] >= 0)
                  v19 = __p;
                else
                  v19 = *(_BYTE **)__p;
                tknPrintf("Error: Parent configuration not defined: '%s'\n", v15, v16, v17, v18, v19);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
                v8 = 1;
              }
              v14 = *(_QWORD *)&__s[16];
              if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
              {
                if (v47)
                {
                  *(_DWORD *)__p = 0;
                  TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
                  v14 = --*(_QWORD *)&__s[16];
                }
                else if (*(_QWORD *)&__s[8])
                {
                  *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
                }
              }
              else
              {
                *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
              }
              *v11 = 0;
            }
            else
            {
              v14 = *(_QWORD *)&__s[16];
              Config = 1;
            }
            if (v14 >= *(_QWORD *)&__s[8])
            {
              if (v47)
              {
                *(_DWORD *)__p = 0;
                TBuffer<wchar_t>::insert((uint64_t)__s, v14, (int *)__p, 1uLL);
                v20 = *(__int32 **)__s;
                --*(_QWORD *)&__s[16];
              }
              else
              {
                v20 = *(__int32 **)__s;
                if (*(_QWORD *)&__s[8])
                  *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
              }
            }
            else
            {
              v20 = *(__int32 **)__s;
              *(_DWORD *)(*(_QWORD *)__s + 4 * v14) = 0;
            }
            if (TParamManager::getConfig((uint64_t)this, v20) == -1)
            {
              if ((v8 & 1) != 0)
                goto LABEL_62;
              if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
              {
                if (v47)
                {
                  *(_DWORD *)__p = 0;
                  TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
                  v22 = *(__int32 **)__s;
                  --*(_QWORD *)&__s[16];
                }
                else
                {
                  v22 = *(__int32 **)__s;
                  if (*(_QWORD *)&__s[8])
                    *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
                }
              }
              else
              {
                v22 = *(__int32 **)__s;
                *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
              }
              TParamManager::newConfig((uint64_t)this, v22, Config);
              v8 = 0;
              if (!*NextToken)
                break;
            }
            else
            {
              if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
              {
                if (v47)
                {
                  LODWORD(v41[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)v41, 1uLL);
                  v21 = *(unsigned int **)__s;
                  --*(_QWORD *)&__s[16];
                }
                else
                {
                  v21 = *(unsigned int **)__s;
                  if (*(_QWORD *)&__s[8])
                    *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[8] - 4) = 0;
                }
              }
              else
              {
                v21 = *(unsigned int **)__s;
                *(_DWORD *)(*(_QWORD *)__s + 4 * *(_QWORD *)&__s[16]) = 0;
              }
              loggableUnicode(v21, __p);
              if (__p[23] >= 0)
                v27 = __p;
              else
                v27 = *(_BYTE **)__p;
              tknPrintf("Error: Duplicate configuration name: '%s'\n", v23, v24, v25, v26, v27);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
LABEL_62:
              v8 = 1;
              if (!*NextToken)
              {
                std::string::basic_string[abi:ne180100]<0>(v41, &byte_209A88803);
                *(_QWORD *)__p = aPpx;
                if (SHIBYTE(v42) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v41[0], (std::string::size_type)v41[1]);
                }
                else
                {
                  *(_OWORD *)&__p[8] = *(_OWORD *)v41;
                  v44 = v42;
                }
                *(_QWORD *)__p = &unk_24C216908;
                if (v44 >= 0)
                  v30 = &__p[8];
                else
                  v30 = *(const char **)&__p[8];
                conditionalAssert(v30, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/params.cpp", 1327, v28, v29);
                *(_QWORD *)__p = aPpx;
                if (SHIBYTE(v44) < 0)
                  operator delete(*(void **)&__p[8]);
                if (SHIBYTE(v42) < 0)
                  operator delete(v41[0]);
                v31 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
                *v31 = aPpx;
                v32 = (std::string *)(v31 + 1);
                if ((__p[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
                }
                else
                {
                  v33 = *(_OWORD *)__p;
                  v31[3] = *(_QWORD *)&__p[16];
                  *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
                }
                *v31 = &unk_24C216908;
              }
            }
          }
        }
        if (v47 && *(_BYTE **)__s != v46 && *(_QWORD *)__s)
          MEMORY[0x20BD149A8]();
      }
      if (v50 && *(_QWORD **)v48 != v49 && *(_QWORD *)v48)
        MEMORY[0x20BD149A8]();
      v6 = v40;
    }
    TParamManager::init(this, v6, a3);
    TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v51);
  }
}

void sub_209783724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,void *a24)
{
  uint64_t v24;
  unint64_t v27;

  if (LOBYTE(STACK[0x490]))
  {
    if (a24 != a11 && a24 != 0)
      MEMORY[0x20BD149A8]();
  }
  if (LOBYTE(STACK[0x8B0]))
  {
    v27 = STACK[0x498];
    if (STACK[0x498] != a12)
    {
      if (v27)
        MEMORY[0x20BD149A8](v27, 0x1000C4052888210);
    }
  }
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)(v24 - 168));
  _Unwind_Resume(a1);
}

void TParamManager::save(_QWORD *a1, _QWORD **a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _BYTE *v17;
  _OWORD *v18;
  uint64_t **v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD **v50;
  _QWORD *v51;
  unsigned int *v52;
  _QWORD **v53;
  _QWORD *v54;
  unsigned int *v55;
  _QWORD **v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned int *v59;
  _QWORD **v60;
  unsigned int *v61;
  _QWORD **v62;
  void **v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  unsigned int *v68;
  _QWORD **v69;
  unsigned int *v70;
  _QWORD **v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void **v77;
  uint64_t v78;
  unsigned int *v79;
  _QWORD **v80;
  unsigned int *v81;
  _QWORD **v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  BOOL v86;
  void **p_p;
  __int128 v89;
  _BYTE v90[785];
  char v91;
  void *__p;
  __int128 v93;
  _BYTE v94[785];
  char v95;
  _BYTE *v96;
  __int128 v97;
  _BYTE v98[1024];
  char v99;
  uint64_t *v100;
  _QWORD *v101[2];
  int v102[3];

  v5 = 0;
  v101[0] = 0;
  v101[1] = 0;
  v100 = (uint64_t *)v101;
  v96 = v98;
  v97 = xmmword_209A57DD0;
  v99 = 1;
  v6 = a1[9];
  if ((unint64_t)(a1[10] - v6) < 0x41)
    goto LABEL_17;
  v7 = 2;
  do
  {
    if (*((_QWORD *)&v97 + 1))
    {
      LODWORD(__p) = 44;
      TBuffer<wchar_t>::insert((uint64_t)&v96, *((unint64_t *)&v97 + 1), (int *)&__p, 1uLL);
      v6 = a1[9];
    }
    v8 = v6 + 32 * v7;
    v9 = (int *)(v8 + 8);
    if (*(char *)(v8 + 31) < 0)
      v9 = *(int **)v9;
    v10 = 0;
    while (v9[v10++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v96, *((unint64_t *)&v97 + 1), v9, v10 - 1);
    v6 = a1[9];
    v12 = *(_QWORD *)(v6 + 32 * v7);
    if (v12 != 1)
    {
      LODWORD(__p) = 58;
      TBuffer<wchar_t>::insert((uint64_t)&v96, *((unint64_t *)&v97 + 1), (int *)&__p, 1uLL);
      v13 = a1[9] + 32 * v12;
      v14 = (int *)(v13 + 8);
      if (*(char *)(v13 + 31) < 0)
        v14 = *(int **)v14;
      v15 = 0;
      while (v14[v15++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v96, *((unint64_t *)&v97 + 1), v14, v15 - 1);
      v6 = a1[9];
    }
    ++v7;
  }
  while (v7 < (a1[10] - v6) >> 5);
  v5 = *((_QWORD *)&v97 + 1);
  if (*((_QWORD *)&v97 + 1) >= (unint64_t)v97)
  {
    if (v99)
    {
      LODWORD(__p) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v96, *((unint64_t *)&v97 + 1), (int *)&__p, 1uLL);
      v17 = v96;
      --*((_QWORD *)&v97 + 1);
    }
    else
    {
      v17 = v96;
      if ((_QWORD)v97)
        *(_DWORD *)&v96[4 * v97 - 4] = 0;
    }
  }
  else
  {
LABEL_17:
    v17 = v96;
    *(_DWORD *)&v96[4 * v5] = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ConfigurationNames");
  p_p = &__p;
  v18 = std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v100, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  MEMORY[0x20BD147A4]((char *)v18 + 56, v17);
  if (SHIBYTE(v93) < 0)
    operator delete(__p);
  if (*((_QWORD *)&v97 + 1))
    v19 = &v100;
  else
    v19 = 0;
  TOutputStream::writeHeader(a2, "Parameter", (uint64_t)pParameterVersion, 7, v19);
  __p = v94;
  v93 = xmmword_209A57DD0;
  v95 = 1;
  p_p = (void **)v90;
  v89 = xmmword_209A57DD0;
  v91 = 1;
  v20 = (_QWORD *)a1[6];
  if (v20 == a1 + 7)
    goto LABEL_201;
  do
  {
    v21 = v20[5];
    if (v21 && (v22 = v21 - 1, v23 = a1[3], v22 < (a1[4] - v23) >> 3))
      v24 = *(_QWORD *)(v23 + 8 * v22);
    else
      v24 = 0;
    if (TParam::needSave((TParam *)v24))
    {
      v25 = TParam::flagsSet(v24, 8);
      if (v25)
        v26 = "Create";
      else
        v26 = "Override";
      switch(*(_DWORD *)(v24 + 8))
      {
        case 0:
          if (v25)
            v27 = 6;
          else
            v27 = 8;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)v26, v27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"BoolParam = {\n", 14);
          v29 = v28;
          v30 = v28 + 25;
          if (*((char *)v28 + 223) < 0)
          {
            if (v28[26] && *v30)
            {
LABEL_76:
              TBuffer<wchar_t>::resize((uint64_t)&__p, 0);
              TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), (int *)"\"", 0x17uLL);
              if (*((char *)v29 + 223) < 0)
              {
                if (v29[26])
                  v48 = *v30;
                else
                  v48 = 0;
              }
              else if (*((_BYTE *)v29 + 223))
              {
                v48 = (uint64_t)v30;
              }
              else
              {
                v48 = 0;
              }
              slashEscape(v48, (uint64_t)&__p);
              TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), (int *)"\"", 2uLL);
              TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), (int *)"\"", 0x16uLL);
              if (*((char *)v29 + 247) < 0)
              {
                if (v29[29])
                  v49 = v29[28];
                else
                  v49 = 0;
              }
              else if (*((_BYTE *)v29 + 247))
              {
                v49 = (uint64_t)(v29 + 28);
              }
              else
              {
                v49 = 0;
              }
              slashEscape(v49, (uint64_t)&__p);
              TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), (int *)"\"", 2uLL);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Allowables = {", 18);
              if (*((_QWORD *)&v93 + 1) < (unint64_t)v93)
              {
                v47 = (unsigned int *)__p;
                *((_DWORD *)__p + *((_QWORD *)&v93 + 1)) = 0;
                goto LABEL_101;
              }
              if (!v95)
              {
                v47 = (unsigned int *)__p;
                if ((_QWORD)v93)
                  *((_DWORD *)__p + v93 - 1) = 0;
                goto LABEL_101;
              }
              goto LABEL_98;
            }
          }
          else if (*((_BYTE *)v28 + 223))
          {
            goto LABEL_76;
          }
LABEL_102:
          TBuffer<wchar_t>::resize((uint64_t)&__p, 0);
          v51 = (_QWORD *)(v24 + 16);
          if (*(char *)(v24 + 39) < 0)
            v51 = (_QWORD *)*v51;
          slashEscape((uint64_t)v51, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Name = \"", 12);
          if (*((_QWORD *)&v93 + 1) >= (unint64_t)v93)
          {
            if (v95)
            {
              v102[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), v102, 1uLL);
              v52 = (unsigned int *)__p;
              --*((_QWORD *)&v93 + 1);
            }
            else
            {
              v52 = (unsigned int *)__p;
              if ((_QWORD)v93)
                *((_DWORD *)__p + v93 - 1) = 0;
            }
          }
          else
          {
            v52 = (unsigned int *)__p;
            *((_DWORD *)__p + *((_QWORD *)&v93 + 1)) = 0;
          }
          v53 = (_QWORD **)TOutputStream::operator<<((uint64_t)a2, v52);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v53, (uint64_t)"\"\n", 2);
          TBuffer<wchar_t>::resize((uint64_t)&__p, 0);
          v54 = (_QWORD *)(v24 + 40);
          if (*(char *)(v24 + 63) < 0)
            v54 = (_QWORD *)*v54;
          slashEscape((uint64_t)v54, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Description = \"", 19);
          if (*((_QWORD *)&v93 + 1) >= (unint64_t)v93)
          {
            if (v95)
            {
              v102[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), v102, 1uLL);
              v55 = (unsigned int *)__p;
              --*((_QWORD *)&v93 + 1);
            }
            else
            {
              v55 = (unsigned int *)__p;
              if ((_QWORD)v93)
                *((_DWORD *)__p + v93 - 1) = 0;
            }
          }
          else
          {
            v55 = (unsigned int *)__p;
            *((_DWORD *)__p + *((_QWORD *)&v93 + 1)) = 0;
          }
          v56 = (_QWORD **)TOutputStream::operator<<((uint64_t)a2, v55);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v56, (uint64_t)"\"\n", 2);
          if (*(_QWORD *)(v24 + 144))
          {
            TBuffer<wchar_t>::resize((uint64_t)&__p, 0);
            v57 = *(_QWORD *)(v24 + 144);
            v58 = (_QWORD *)(v57 + 16);
            if (*(char *)(v57 + 39) < 0)
              v58 = (_QWORD *)*v58;
            slashEscape((uint64_t)v58, (uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Require = \"", 15);
            if (*((_QWORD *)&v93 + 1) >= (unint64_t)v93)
            {
              if (v95)
              {
                v102[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), v102, 1uLL);
                v59 = (unsigned int *)__p;
                --*((_QWORD *)&v93 + 1);
              }
              else
              {
                v59 = (unsigned int *)__p;
                if ((_QWORD)v93)
                  *((_DWORD *)__p + v93 - 1) = 0;
              }
            }
            else
            {
              v59 = (unsigned int *)__p;
              *((_DWORD *)__p + *((_QWORD *)&v93 + 1)) = 0;
            }
            v60 = (_QWORD **)TOutputStream::operator<<((uint64_t)a2, v59);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v60, (uint64_t)"\"\n", 2);
          }
          TBuffer<wchar_t>::resize((uint64_t)&__p, 0);
          if (TParam::flagsSet(v24, 1))
            TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), (int *)"'", 0xAuLL);
          if (TParam::flagsSet(v24, 32))
            TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), (int *)"'", 9uLL);
          if (TParam::flagsSet(v24, 2))
            TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), (int *)"'", 7uLL);
          if (TParam::flagsSet(v24, 256))
            TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), (int *)"'", 0xCuLL);
          if (*((_QWORD *)&v93 + 1))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Flags = {", 13);
            if (*((_QWORD *)&v93 + 1) >= (unint64_t)v93)
            {
              if (v95)
              {
                v102[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), v102, 1uLL);
                v61 = (unsigned int *)__p;
                --*((_QWORD *)&v93 + 1);
              }
              else
              {
                v61 = (unsigned int *)__p;
                if ((_QWORD)v93)
                  *((_DWORD *)__p + v93 - 1) = 0;
              }
            }
            else
            {
              v61 = (unsigned int *)__p;
              *((_DWORD *)__p + *((_QWORD *)&v93 + 1)) = 0;
            }
            v62 = (_QWORD **)TOutputStream::operator<<((uint64_t)a2, v61);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v62, (uint64_t)"}\n", 2);
          }
          (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)v24 + 24))(v24, 1, &p_p);
          TBuffer<wchar_t>::resize((uint64_t)&__p, 0);
          if (*((_QWORD *)&v89 + 1) >= (unint64_t)v89)
          {
            if (v91)
            {
              v102[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&p_p, *((unint64_t *)&v89 + 1), v102, 1uLL);
              v63 = p_p;
              --*((_QWORD *)&v89 + 1);
            }
            else
            {
              v63 = p_p;
              if ((_QWORD)v89)
                *((_DWORD *)p_p + v89 - 1) = 0;
            }
          }
          else
          {
            v63 = p_p;
            *((_DWORD *)p_p + *((_QWORD *)&v89 + 1)) = 0;
          }
          slashEscape((uint64_t)v63, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Defaults = { ", 17);
          if (a1[10] - a1[9] >= 0x21uLL)
          {
            v64 = 0;
            v65 = 10;
            do
            {
              if (((*(_QWORD *)(v24 + 112) >> v65) & 1) != 0 || v65 == 10 && TParam::flagsSet(v24, 8))
              {
                (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)v24 + 24))(v24, v65 - 9, &p_p);
                TBuffer<wchar_t>::resize((uint64_t)&__p, 0);
                if (*((_QWORD *)&v89 + 1) >= (unint64_t)v89)
                {
                  if (v91)
                  {
                    v102[0] = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&p_p, *((unint64_t *)&v89 + 1), v102, 1uLL);
                    v66 = p_p;
                    --*((_QWORD *)&v89 + 1);
                  }
                  else
                  {
                    v66 = p_p;
                    if ((_QWORD)v89)
                      *((_DWORD *)p_p + v89 - 1) = 0;
                  }
                }
                else
                {
                  v66 = p_p;
                  *((_DWORD *)p_p + *((_QWORD *)&v89 + 1)) = 0;
                }
                slashEscape((uint64_t)v66, (uint64_t)&__p);
                v67 = a1[9] + v64;
                v68 = (unsigned int *)(v67 + 40);
                if (*(char *)(v67 + 63) < 0)
                  v68 = *(unsigned int **)v68;
                v69 = (_QWORD **)TOutputStream::operator<<((uint64_t)a2, v68);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v69, (uint64_t)" = \"", 4);
                if (*((_QWORD *)&v93 + 1) >= (unint64_t)v93)
                {
                  if (v95)
                  {
                    v102[0] = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), v102, 1uLL);
                    v70 = (unsigned int *)__p;
                    --*((_QWORD *)&v93 + 1);
                  }
                  else
                  {
                    v70 = (unsigned int *)__p;
                    if ((_QWORD)v93)
                      *((_DWORD *)__p + v93 - 1) = 0;
                  }
                }
                else
                {
                  v70 = (unsigned int *)__p;
                  *((_DWORD *)__p + *((_QWORD *)&v93 + 1)) = 0;
                }
                v71 = (_QWORD **)TOutputStream::operator<<((uint64_t)v69, v70);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v71, (uint64_t)"\" ", 2);
              }
              v72 = v65 - 8;
              ++v65;
              v64 += 32;
            }
            while (v72 < (uint64_t)(a1[10] - a1[9]) >> 5);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"}\n", 2);
          if ((a3 & 1) == 0)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Values = { ", 15);
            v74 = a1[9];
            v73 = a1[10];
            if ((unint64_t)(v73 - v74) >= 0x21)
            {
              v75 = 0;
              v76 = 34;
              do
              {
                if (((*(_QWORD *)(v24 + 112) >> v76) & 1) != 0)
                {
                  (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)v24 + 16))(v24, v76 - 33, &p_p);
                  TBuffer<wchar_t>::resize((uint64_t)&__p, 0);
                  if (*((_QWORD *)&v89 + 1) >= (unint64_t)v89)
                  {
                    if (v91)
                    {
                      v102[0] = 0;
                      TBuffer<wchar_t>::insert((uint64_t)&p_p, *((unint64_t *)&v89 + 1), v102, 1uLL);
                      v77 = p_p;
                      --*((_QWORD *)&v89 + 1);
                    }
                    else
                    {
                      v77 = p_p;
                      if ((_QWORD)v89)
                        *((_DWORD *)p_p + v89 - 1) = 0;
                    }
                  }
                  else
                  {
                    v77 = p_p;
                    *((_DWORD *)p_p + *((_QWORD *)&v89 + 1)) = 0;
                  }
                  slashEscape((uint64_t)v77, (uint64_t)&__p);
                  v78 = a1[9] + v75;
                  v79 = (unsigned int *)(v78 + 40);
                  if (*(char *)(v78 + 63) < 0)
                    v79 = *(unsigned int **)v79;
                  v80 = (_QWORD **)TOutputStream::operator<<((uint64_t)a2, v79);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v80, (uint64_t)" = \"", 4);
                  if (*((_QWORD *)&v93 + 1) >= (unint64_t)v93)
                  {
                    if (v95)
                    {
                      v102[0] = 0;
                      TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), v102, 1uLL);
                      v81 = (unsigned int *)__p;
                      --*((_QWORD *)&v93 + 1);
                    }
                    else
                    {
                      v81 = (unsigned int *)__p;
                      if ((_QWORD)v93)
                        *((_DWORD *)__p + v93 - 1) = 0;
                    }
                  }
                  else
                  {
                    v81 = (unsigned int *)__p;
                    *((_DWORD *)__p + *((_QWORD *)&v93 + 1)) = 0;
                  }
                  v82 = (_QWORD **)TOutputStream::operator<<((uint64_t)v80, v81);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v82, (uint64_t)"\" ", 2);
                  v74 = a1[9];
                  v73 = a1[10];
                }
                v83 = v76 - 32;
                ++v76;
                v75 += 32;
              }
              while (v83 < (v73 - v74) >> 5);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"}\n", 2);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"}\n", 2);
          break;
        case 2:
          if (v25)
            v31 = 6;
          else
            v31 = 8;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)v26, v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"IntParam = {\n", 13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Min = '", 11);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"'\n", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Max = '", 11);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"'\n", 2);
          goto LABEL_102;
        case 3:
          if (v25)
            v32 = 6;
          else
            v32 = 8;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)v26, v32);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"FloatParam = {\n", 15);
          goto LABEL_102;
        case 4:
          if (v25)
            v33 = 6;
          else
            v33 = 8;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)v26, v33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"StringParam = {\n", 16);
          if (v34[164] != v34[163])
          {
            v35 = v34;
            TBuffer<wchar_t>::resize((uint64_t)&__p, 0);
            if (v35[164] != v35[163])
            {
              v36 = 0;
              v37 = 0;
              do
              {
                v102[0] = 34;
                TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), v102, 1uLL);
                v38 = v35[163] + v36;
                if (*(char *)(v38 + 23) < 0)
                  v38 = *(_QWORD *)v38;
                slashEscape(v38, (uint64_t)&__p);
                TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), (int *)"\"", 2uLL);
                v39 = v35[166];
                if (v39 != v35[167])
                {
                  v40 = v39 + v36;
                  if ((*(char *)(v40 + 23) & 0x80000000) == 0 || *(_QWORD *)v40)
                  {
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), (int *)"G", 0xBuLL);
                    v41 = v35[166];
                    if (v41 == v35[167])
                    {
                      v42 = 0;
                    }
                    else
                    {
                      v42 = (_QWORD *)(v41 + v36);
                      if (*(char *)(v41 + v36 + 23) < 0)
                        v42 = (_QWORD *)*v42;
                    }
                    slashEscape((uint64_t)v42, (uint64_t)&__p);
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), (int *)"\"", 2uLL);
                  }
                }
                v43 = v35[169];
                if (v43 != v35[170])
                {
                  v44 = v43 + v36;
                  if ((*(char *)(v44 + 23) & 0x80000000) == 0 || *(_QWORD *)v44)
                  {
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), (int *)"D", 0xFuLL);
                    v45 = v35[169];
                    if (v45 == v35[170])
                    {
                      v46 = 0;
                    }
                    else
                    {
                      v46 = (_QWORD *)(v45 + v36);
                      if (*(char *)(v45 + v36 + 23) < 0)
                        v46 = (_QWORD *)*v46;
                    }
                    slashEscape((uint64_t)v46, (uint64_t)&__p);
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), (int *)"\"", 2uLL);
                  }
                }
                ++v37;
                v36 += 24;
              }
              while (v37 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35[164] - v35[163]) >> 3));
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Allowables = {", 18);
            if (*((_QWORD *)&v93 + 1) >= (unint64_t)v93)
            {
              if (v95)
              {
LABEL_98:
                v102[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v93 + 1), v102, 1uLL);
                v47 = (unsigned int *)__p;
                --*((_QWORD *)&v93 + 1);
              }
              else
              {
                v47 = (unsigned int *)__p;
                if ((_QWORD)v93)
                  *((_DWORD *)__p + v93 - 1) = 0;
              }
            }
            else
            {
              v47 = (unsigned int *)__p;
              *((_DWORD *)__p + *((_QWORD *)&v93 + 1)) = 0;
            }
LABEL_101:
            v50 = (_QWORD **)TOutputStream::operator<<((uint64_t)a2, v47);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v50, (uint64_t)"}\n", 2);
          }
          goto LABEL_102;
        default:
          goto LABEL_102;
      }
    }
    v84 = (_QWORD *)v20[1];
    if (v84)
    {
      do
      {
        v85 = v84;
        v84 = (_QWORD *)*v84;
      }
      while (v84);
    }
    else
    {
      do
      {
        v85 = (_QWORD *)v20[2];
        v86 = *v85 == (_QWORD)v20;
        v20 = v85;
      }
      while (!v86);
    }
    v20 = v85;
  }
  while (v85 != a1 + 7);
  if (v91)
  {
LABEL_201:
    v86 = p_p == (void **)v90 || p_p == 0;
    if (!v86)
      MEMORY[0x20BD149A8]();
  }
  if (v95 && __p != v94 && __p)
    MEMORY[0x20BD149A8]();
  if (v99 && v96 != v98 && v96)
    MEMORY[0x20BD149A8]();
  std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::destroy((uint64_t)&v100, v101[0]);
}

void sub_209784968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unint64_t v12;

  if (LOBYTE(STACK[0xC90]))
  {
    v12 = STACK[0x878];
    if (STACK[0x878] != a10)
    {
      if (v12)
        MEMORY[0x20BD149A8](v12, 0x1000C4052888210);
    }
  }
  std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::destroy(v10 - 120, *(_QWORD **)(v10 - 112));
  _Unwind_Resume(a1);
}

void TBuffer<wchar_t>::resize(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;

  if (*(_BYTE *)(a1 + 1048) && *(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2 + 1;
    v4 = (void *)operator new[]();
    v5 = v4;
    v6 = *(const void **)a1;
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      memmove(v4, *(const void **)a1, 4 * v7);
    if (v6 != (const void *)(a1 + 24) && v6)
      MEMORY[0x20BD149A8](v6, 0x1000C4052888210);
    *(_QWORD *)a1 = v5;
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 < a2)
  {
    v9 = a2;
    if (*(_BYTE *)(a1 + 1048)
      || ((v10 = *(_QWORD *)(a1 + 8), v10 >= a2) ? (v9 = a2) : (v9 = *(_QWORD *)(a1 + 8)),
          v8 < v10 ? (v11 = v9 == v8) : (v11 = 1),
          !v11))
    {
      bzero((void *)(*(_QWORD *)a1 + 4 * v8), 4 * (v9 - v8));
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
}

uint64_t TParamManager::getConfigHandles(uint64_t this, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t i;

  v3 = ((uint64_t)(*(_QWORD *)(this + 80) - *(_QWORD *)(this + 72)) >> 5) - 1;
  if (v3 >= a3)
    v3 = a3;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
      a2[i] = i + 1;
  }
  return this;
}

void TBoolParam::~TBoolParam(void **this)
{
  uint64_t v2;

  v2 = 0;
  *this = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v2 + 30]) < 0)
      operator delete(this[v2 + 28]);
    v2 -= 3;
  }
  while (v2 != -6);
  TParam::~TParam(this);
}

{
  uint64_t v2;

  v2 = 0;
  *this = off_24C2135E0;
  while (1)
  {
    if (SHIBYTE(this[v2 + 30]) < 0)
      operator delete(this[v2 + 28]);
    v2 -= 3;
    if (v2 == -6)
    {
      TParam::~TParam(this);
      JUMPOUT(0x20BD149A8);
    }
  }
}

uint64_t TBoolParam::getValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  char *v4;

  if (*((_BYTE *)a1 + TParam::getValidConfig(a1, a2) + 152))
    v4 = "t";
  else
    v4 = "f";
  return TBuffer<wchar_t>::assign(a3, (int *)v4);
}

uint64_t TBoolParam::getValueOriginal(TBoolParam *a1, uint64_t a2, uint64_t a3)
{
  char *v4;

  if (TBoolParam::getOriginal(a1, a2))
    v4 = "t";
  else
    v4 = "f";
  return TBuffer<wchar_t>::assign(a3, (int *)v4);
}

void TFloatParam::~TFloatParam(void **this)
{
  TParam::~TParam(this);
  JUMPOUT(0x20BD149A8);
}

void TIntParam::~TIntParam(void **this)
{
  TParam::~TParam(this);
  JUMPOUT(0x20BD149A8);
}

void TStringParam::~TStringParam(void **this)
{
  uint64_t v2;
  void **v3;

  *this = &unk_24C214170;
  v3 = this + 169;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 166;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 163;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = 144;
  do
  {
    if (SHIBYTE(this[v2 + 18]) < 0)
      operator delete(this[v2 + 16]);
    v2 -= 3;
  }
  while (v2 * 8);
  TParam::~TParam(this);
}

{
  uint64_t v2;
  void **v3;

  *this = &unk_24C214170;
  v3 = this + 169;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 166;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 163;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = 144;
  do
  {
    if (SHIBYTE(this[v2 + 18]) < 0)
      operator delete(this[v2 + 16]);
    v2 -= 3;
  }
  while (v2 * 8);
  TParam::~TParam(this);
  MEMORY[0x20BD149A8]();
}

uint64_t TStringParam::getValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  int *v5;

  v4 = (char *)a1 + 24 * TParam::getValidConfig(a1, a2);
  v5 = (int *)(v4 + 152);
  if (v4[175] < 0)
    v5 = *(int **)v5;
  return TBuffer<wchar_t>::assign(a3, v5);
}

uint64_t TStringParam::getValueOriginal(TStringParam *a1, uint64_t a2, uint64_t a3)
{
  int *Original;

  Original = (int *)TStringParam::getOriginal(a1, a2);
  return TBuffer<wchar_t>::assign(a3, Original);
}

uint64_t std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,64ul>,true,true>(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, _QWORD *a5)
{
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2))
        v6 = 64 - a2;
      else
        v6 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0)
        return 0;
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        v7 = v5 - 64;
        ++a1;
        ++a5;
        v8 = v5 <= 127;
        v5 -= 64;
        if (v8)
          goto LABEL_14;
      }
      return 0;
    }
    v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7)
      return 0;
  }
  return 1;
}

void TLocaleInfo::TLocaleInfo(TLocaleInfo *this)
{
  TCollation::TCollation((TLocaleInfo *)((char *)this + 16));
  *(_QWORD *)this = "e";
  *((_BYTE *)this + 80) = wcscmp((const __int32 *)"e", (const __int32 *)"t") == 0;
  *((_QWORD *)this + 1) = "U";
  *((_DWORD *)this + 16) = 2;
  *((_QWORD *)this + 9) = 4;
}

void sub_209784FEC(_Unwind_Exception *a1)
{
  TCollation *v1;

  TCollation::~TCollation(v1);
  _Unwind_Resume(a1);
}

void TException::~TException(void **this)
{
  *this = &unk_24C213620;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_24C213620;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD149A8);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C20FDA0, MEMORY[0x24BEDAAF0]);
}

void sub_2097851BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void `virtual thunk to'std::wostringstream::~wostringstream(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[95] < 0)
    operator delete(*((void **)v1 + 9));
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  JUMPOUT(0x20BD14978);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[95] < 0)
    operator delete(*((void **)v1 + 9));
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x20BD14978](v1 + 112);
  JUMPOUT(0x20BD149A8);
}

void std::wostringstream::~wostringstream(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 112;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x20BD14978](v1);
  JUMPOUT(0x20BD149A8);
}

uint64_t std::wstringbuf::~wstringbuf(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::wstreambuf::~wstreambuf();
}

void std::wstringbuf::~wstringbuf(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  std::wstreambuf::~wstreambuf();
  JUMPOUT(0x20BD149A8);
}

std::wstringbuf::pos_type *__cdecl std::wstringbuf::seekoff(std::wstringbuf::pos_type *__return_ptr retstr, std::wstringbuf::pos_type *this, std::wstringbuf::off_type a3, std::ios_base::seekdir __way, std::ios_base::openmode __wch)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::streamoff v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(&this->__st_._mbstateL + 11);
  v6 = *(&this->__st_._mbstateL + 6);
  if (v5 < v6)
  {
    *(&this->__st_._mbstateL + 11) = v6;
    v5 = v6;
  }
  if ((__wch & 0x18) == 0 || __way == cur && (__wch & 0x18) == 0x18)
    goto LABEL_14;
  if (!v5)
  {
    v8 = 0;
    if (__way)
      goto LABEL_10;
LABEL_17:
    v11 = __way;
    goto LABEL_21;
  }
  v7 = &this->__st_._mbstateL + 8;
  if (this->__st_.__mbstate8[87] < 0)
    v7 = (uint64_t *)*v7;
  v8 = (uint64_t)(v5 - (_QWORD)v7) >> 2;
  if (__way == beg)
    goto LABEL_17;
LABEL_10:
  if (__way == end)
  {
    v11 = v8;
    goto LABEL_21;
  }
  if (__way != cur)
  {
LABEL_14:
    v10 = -1;
    goto LABEL_15;
  }
  if ((__wch & 8) != 0)
    v9 = *(&this->__st_._mbstateL + 3) - *(&this->__st_._mbstateL + 2);
  else
    v9 = v6 - *(&this->__st_._mbstateL + 5);
  v11 = v9 >> 2;
LABEL_21:
  v10 = -1;
  v12 = v11 + a3;
  if (v12 >= 0
    && v8 >= v12
    && (!v12 || ((__wch & 8) == 0 || *(&this->__st_._mbstateL + 3)) && ((__wch & 0x10) == 0 || v6)))
  {
    if ((__wch & 8) != 0)
    {
      *(&this->__st_._mbstateL + 3) = *(&this->__st_._mbstateL + 2) + 4 * v12;
      *(&this->__st_._mbstateL + 4) = v5;
    }
    if ((__wch & 0x10) != 0)
      *(&this->__st_._mbstateL + 6) = *(&this->__st_._mbstateL + 5) + 4 * v12;
    v10 = v12;
  }
LABEL_15:
  *((_OWORD *)&retstr->__st_._mbstateL + 6) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 7) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 4) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 5) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 2) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 3) = 0u;
  *(_OWORD *)retstr->__st_.__mbstate8 = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 1) = 0u;
  retstr->__off_ = v10;
  return this;
}

std::wstringbuf::pos_type *__cdecl std::wstringbuf::seekpos(std::wstringbuf::pos_type *__return_ptr retstr, std::wstringbuf *this, std::wstringbuf::pos_type *__sp, std::ios_base::openmode __wch)
{
  return (std::wstringbuf::pos_type *)((std::wstringbuf::pos_type *(*)(std::wstringbuf::pos_type *__return_ptr))this->seekoff)(retstr);
}

std::wstringbuf::int_type std::wstringbuf::underflow(std::wstringbuf *this)
{
  std::wstreambuf::char_type *hm;
  std::wstreambuf::char_type *nout;
  std::wstreambuf::char_type *einp;
  std::wstreambuf::char_type *ninp;

  hm = this->__hm_;
  nout = this->__nout_;
  if (hm < nout)
  {
    this->__hm_ = nout;
    hm = nout;
  }
  if ((this->__mode_ & 8) == 0)
    return -1;
  einp = this->__einp_;
  if (einp < hm)
  {
    this->__einp_ = hm;
    einp = hm;
  }
  ninp = this->__ninp_;
  if (ninp < einp)
    return *ninp;
  else
    return -1;
}

std::wstringbuf::int_type std::wstringbuf::pbackfail(std::wstringbuf *this, std::wstringbuf::int_type __c)
{
  std::wstreambuf::char_type *hm;
  std::wstreambuf::char_type *nout;
  std::wstreambuf::char_type *ninp;
  std::wstreambuf::char_type *v5;

  hm = this->__hm_;
  nout = this->__nout_;
  if (hm < nout)
  {
    this->__hm_ = nout;
    hm = nout;
  }
  ninp = this->__ninp_;
  if (this->__binp_ < ninp)
  {
    if (__c == -1)
    {
      __c = 0;
      v5 = ninp - 1;
      goto LABEL_10;
    }
    if ((this->__mode_ & 0x10) != 0 || *(ninp - 1) == __c)
    {
      *(ninp - 1) = __c;
      v5 = ninp - 1;
LABEL_10:
      this->__ninp_ = v5;
      this->__einp_ = hm;
      return __c;
    }
  }
  return -1;
}

std::wstringbuf::int_type std::wstringbuf::overflow(std::wstringbuf *this, std::wstringbuf::int_type __c)
{
  uint64_t v2;
  std::wstreambuf::char_type *ninp;
  std::wstreambuf::char_type *binp;
  std::wstreambuf::char_type *eout;
  std::wstreambuf::char_type *nout;
  std::wstringbuf::char_type *hm;
  std::wstreambuf::char_type *bout;
  std::wstringbuf::char_type *v10;
  std::wstringbuf::string_type *p_str;
  std::wstring::size_type v12;
  std::wstring::size_type size;
  std::wstringbuf::string_type *v14;

  if (__c == -1)
  {
    LODWORD(v2) = 0;
    return v2;
  }
  v2 = *(_QWORD *)&__c;
  binp = this->__binp_;
  ninp = this->__ninp_;
  nout = this->__nout_;
  eout = this->__eout_;
  if (nout != eout)
  {
    hm = this->__hm_;
    goto LABEL_14;
  }
  if ((this->__mode_ & 0x10) == 0)
  {
    LODWORD(v2) = -1;
    return v2;
  }
  bout = this->__bout_;
  v10 = this->__hm_;
  p_str = &this->__str_;
  std::wstring::push_back(&this->__str_, 0);
  if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0)
    v12 = (this->__str_.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  else
    v12 = 4;
  std::wstring::resize(&this->__str_, v12, 0);
  if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0)
  {
    p_str = (std::wstringbuf::string_type *)this->__str_.__r_.__value_.__l.__data_;
    size = this->__str_.__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__str_.__r_.__value_.__r.__words[2]);
  }
  eout = (std::wstreambuf::char_type *)((char *)p_str + 4 * size);
  nout = (std::wstreambuf::char_type *)((char *)p_str + 4 * (nout - bout));
  this->__bout_ = (std::wstreambuf::char_type *)p_str;
  this->__nout_ = nout;
  this->__eout_ = eout;
  hm = (std::wstringbuf::char_type *)((char *)p_str + 4 * (v10 - bout));
LABEL_14:
  if (nout + 1 >= hm)
    hm = nout + 1;
  this->__hm_ = hm;
  if ((this->__mode_ & 8) != 0)
  {
    v14 = &this->__str_;
    if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0)
      v14 = (std::wstringbuf::string_type *)v14->__r_.__value_.__r.__words[0];
    this->__binp_ = (std::wstreambuf::char_type *)v14;
    this->__ninp_ = (std::wstreambuf::char_type *)((char *)v14 + 4 * (ninp - binp));
    this->__einp_ = hm;
  }
  if (nout != eout)
  {
    this->__nout_ = nout + 1;
    *nout = v2;
    return v2;
  }
  return ((uint64_t (*)(std::wstringbuf *, uint64_t))this->overflow)(this, v2);
}

void sub_2097857B0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2097856A0);
}

_QWORD *std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = std::less<std::wstring>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::wstring>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

uint64_t std::less<std::wstring>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  size_t v4;
  int v5;
  size_t v6;
  size_t v7;
  const __int32 *v8;
  const __int32 *v9;
  unsigned int v10;

  v3 = *(char *)(a3 + 23);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a3 + 23);
  else
    v4 = *(_QWORD *)(a3 + 8);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v4 >= v6)
    v7 = v6;
  else
    v7 = v4;
  if (!v7
    || (v5 >= 0 ? (v8 = (const __int32 *)a2) : (v8 = *(const __int32 **)a2),
        v3 >= 0 ? (v9 = (const __int32 *)a3) : (v9 = *(const __int32 **)a3),
        (v10 = wmemcmp(v8, v9, v7)) == 0))
  {
    if (v6 < v4)
      v10 = -1;
    else
      v10 = v4 < v6;
  }
  return v10 >> 31;
}

void std::vector<std::wstring>::__swap_out_circular_buffer(std::vector<std::wstring> *this, std::__split_buffer<std::wstring> *__v)
{
  std::wstring *v4;
  std::wstring *begin;
  std::wstring *end;
  std::wstring *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::vector<std::wstring>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::wstring>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::wstring>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::wstring>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t TBoolParam::TBoolParam(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = TParam::TParam(a1, 0, a2);
  *(_QWORD *)v3 = off_24C2135E0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_BYTE *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 112) |= 0x200uLL;
  v4 = *(_QWORD **)(v3 + 136);
  if (v4)
  {
    v5 = v4[17];
    v4[17] = 0;
    (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, a1);
    v4[17] = v5;
  }
  return a1;
}

void sub_209785C5C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = v2;
  v6 = v3;
  v7 = 0;
  *(_QWORD *)(v4 + 136) = v6;
  while (1)
  {
    if (SHIBYTE(v1[v7 + 30]) < 0)
      operator delete(v1[v7 + 28]);
    v7 -= 3;
    if (v7 == -6)
    {
      TParam::~TParam(v1);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t TFloatParam::TFloatParam(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = (_QWORD *)TParam::TParam(a1, 3, a2);
  *v3 = &off_24C213C70;
  v3[19] = 0;
  v3[14] |= 0x200uLL;
  v4 = (_QWORD *)v3[17];
  if (v4)
  {
    v5 = v4[17];
    v4[17] = 0;
    (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, a1);
    v4[17] = v5;
  }
  return a1;
}

void sub_209785D18(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v2 + 136) = v4;
  TParam::~TParam(v1);
  _Unwind_Resume(a1);
}

uint64_t TBoolParam::getOriginal(TBoolParam *this, uint64_t a2)
{
  unint64_t i;

  for (i = *((_QWORD *)this + 14);
        ((i >> (a2 + 9)) & 1) == 0;
  return *((unsigned __int8 *)this + a2 + 152);
}

uint64_t TBuffer<wchar_t>::assign(uint64_t a1, int *a2)
{
  uint64_t v4;

  TBuffer<wchar_t>::resize(a1, 0);
  v4 = 0;
  while (a2[v4++])
    ;
  return TBuffer<wchar_t>::insert(a1, 0, a2, v4 - 1);
}

uint64_t TBuffer<wchar_t>::insert(uint64_t result, unint64_t a2, int *a3, unint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  int v21;

  v6 = result;
  v7 = *(_QWORD *)(result + 16);
  if (v7 >= a2)
    v8 = a2;
  else
    v8 = *(_QWORD *)(result + 16);
  if (*(_BYTE *)(result + 1048))
  {
    v9 = v7 + a4;
    v10 = *(_QWORD *)(result + 8);
    if (v7 + a4 > v10 && v10 < 2 * v9)
    {
      *(_QWORD *)(result + 8) = (2 * v9) | 1;
      result = operator new[]();
      v11 = result;
      v12 = *(const void **)v6;
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
        result = (uint64_t)memmove((void *)result, *(const void **)v6, 4 * v7);
      if (v12 != (const void *)(v6 + 24) && v12)
      {
        result = MEMORY[0x20BD149A8](v12, 0x1000C4052888210);
        v7 = *(_QWORD *)(v6 + 16);
      }
      *(_QWORD *)v6 = v11;
    }
  }
  v13 = v8 + a4;
  v14 = *(_QWORD *)(v6 + 8);
  if (v8 < v7 && v13 < v14)
  {
    v16 = v7 + a4;
    if (v14 < v7 + a4)
      v16 = *(_QWORD *)(v6 + 8);
    v17 = v16 - v13;
    if (v17)
    {
      v18 = (_DWORD *)(*(_QWORD *)v6 + 4 * v16 - 4);
      do
      {
        *v18 = v18[-a4];
        --v18;
        --v17;
      }
      while (v17);
    }
  }
  v19 = v14 - v8;
  if (v14 > v8)
  {
    if (v19 >= a4)
      v19 = a4;
    if (v19)
    {
      v20 = (_DWORD *)(*(_QWORD *)v6 + 4 * v8);
      do
      {
        v21 = *a3++;
        *v20++ = v21;
        --v19;
      }
      while (v19);
    }
  }
  *(_QWORD *)(v6 + 16) = v7 + a4;
  if (v7 + a4 < v14)
    *(_DWORD *)(*(_QWORD *)v6 + 4 * (v7 + a4)) = 0;
  return result;
}

void std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::vector<std::pair<unsigned long,std::wstring>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<unsigned long,std::wstring>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<unsigned long,std::wstring>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t TRegisterable<TParamManager>::getRegistry()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    TRegisterable<TParamManager>::getRegistry(void)::s_registry = (uint64_t)v2;
  }
  return TRegisterable<TParamManager>::getRegistry(void)::s_registry;
}

void sub_2097860B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TRegisterable<TParamManager>::~TRegisterable(_QWORD *a1)
{
  TRegisterable<TParamManager>::~TRegisterable(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t std::wstring::basic_string[abi:ne180100]<0>(uint64_t a1, __int32 *a2)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = wcslen(a2);
  if (v4 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 5)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v4 | 1) != 5)
      v7 = v4 | 1;
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(a1, v7 + 1);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_BYTE *)(a1 + 23) = v4;
    v6 = (void *)a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, a2, 4 * v5);
LABEL_9:
  *((_DWORD *)v6 + v5) = 0;
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::wstring>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::wstring>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

std::wstringbuf::string_type *__cdecl std::wstringbuf::str(std::wstringbuf::string_type *__return_ptr retstr, std::wstringbuf::string_type *this)
{
  std::wstring::value_type v2;
  int *size;
  std::wstring::pointer data;
  int *v5;

  v2 = this[4].__r_.__value_.__s.__data_[0];
  if ((v2 & 0x10) != 0)
  {
    size = (int *)this[3].__r_.__value_.__r.__words[2];
    data = this[2].__r_.__value_.__l.__data_;
    if (size < data)
    {
      this[3].__r_.__value_.__r.__words[2] = (std::wstring::size_type)data;
      size = data;
    }
    v5 = (int *)this[1].__r_.__value_.__r.__words[2];
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      *(_OWORD *)&retstr->__r_.__value_.__l.__data_ = 0uLL;
      retstr->__r_.__value_.__r.__words[2] = 0;
      return this;
    }
    v5 = (int *)this->__r_.__value_.__r.__words[2];
    size = (int *)this[1].__r_.__value_.__l.__size_;
  }
  return (std::wstringbuf::string_type *)std::wstring::__init_with_size[abi:ne180100]<wchar_t *,wchar_t *>(retstr, v5, size, size - v5);
}

_QWORD *std::wstring::__init_with_size[abi:ne180100]<wchar_t *,wchar_t *>(_QWORD *result, int *a2, int *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = result;
  if (a4 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 4)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a4 | 1) != 5)
      v8 = a4 | 1;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)result, v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_DWORD *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 4);
  }
  *(_DWORD *)v4 = 0;
  return result;
}

void std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::wstring>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::wstring>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>(std::vector<std::wstring> *this, std::wstring *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::wstring *> *p_end_cap;
  std::wstring *begin;
  unint64_t v10;
  unint64_t v11;
  std::wstring *v12;
  std::wstring *v13;
  std::wstring *v14;
  std::wstring *v15;
  std::vector<std::wstring>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::wstring>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::wstring>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::wstring *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(__str, (std::wstring *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_2097865EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2097865F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::wstring>::__vdeallocate(std::vector<std::wstring> *this)
{
  if (this->__begin_)
  {
    std::vector<std::wstring>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

char *std::vector<std::wstring>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::wstring *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>(uint64_t a1, __int128 *a2, __int128 *a3, std::wstring *this)
{
  std::wstring *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::wstring *v11;
  std::wstring *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::wstring::__init_copy_ctor_external(v4, *(const std::wstring::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_20978672C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::wstring::__init_copy_ctor_external(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __sz)
{
  std::wstring *v5;
  std::wstring::size_type v6;
  std::wstring *v7;
  uint64_t v8;

  v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5)
      v6 = __sz | 1;
    v7 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)this, v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v7;
    v5 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 4 * __sz + 4);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

std::wstring *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(std::wstring *__str, std::wstring *a2, std::wstring *this)
{
  const std::wstring *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::wstring::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::wstring *)v4;
}

uint64_t std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::find<wchar_t const*>(uint64_t a1, const __int32 **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = wcscmp(*(const __int32 **)(v3 + 32), *a2);
    v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || wcscmp(*a2, *(const __int32 **)(v5 + 32)) < 0)
    return v2;
  return v5;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t *std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__emplace_unique_key_args<wchar_t const*,std::piecewise_construct_t const&,std::tuple<wchar_t const*&&>,std::tuple<>>(uint64_t **a1, const __int32 **a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__find_equal<wchar_t const*>((uint64_t)a1, &v10, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = **a4;
    v7[5] = 0;
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__find_equal<wchar_t const*>(uint64_t a1, _QWORD *a2, const __int32 **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if ((wcscmp(*a3, (const __int32 *)v4[4]) & 0x80000000) == 0)
          break;
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((wcscmp((const __int32 *)v7[4], *a3) & 0x80000000) == 0)
        break;
      v5 = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t std::vector<std::pair<unsigned long,std::wstring>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_QWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)(v8 - 32) = v9;
      v8 -= 32;
      v10 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::wstring>>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::wstring>>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::wstring>>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::wstring>>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<unsigned long,std::wstring>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<unsigned long,std::wstring>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<unsigned long,std::wstring>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

_OWORD *std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring&&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::__find_equal<std::wstring>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::__find_equal<std::wstring>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::wstring>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::wstring>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

_QWORD *std::vector<wchar_t const*>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2097873A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<wchar_t const*>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__count_unique<wchar_t const*>(uint64_t a1, const __int32 **a2)
{
  uint64_t **v2;
  uint64_t v4;

  v2 = *(uint64_t ***)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if ((wcscmp(*a2, (const __int32 *)v2[4]) & 0x80000000) == 0)
      {
        if ((wcscmp((const __int32 *)v2[4], *a2) & 0x80000000) == 0)
          return v4;
        ++v2;
      }
      v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t *std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__emplace_unique_key_args<wchar_t const*,wchar_t const* const&>(uint64_t **a1, const __int32 **a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__find_equal<wchar_t const*>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_OWORD *std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::wstring>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::wstring>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::wstring>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::wstring>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::wstring>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x20BD14858](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x20BD14864](v13);
  return a1;
}

void sub_2097877FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x20BD14864](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2097877DCLL);
}

void sub_209787844(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_209787978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

char *TStringParam::getOriginal(TStringParam *this, uint64_t a2)
{
  unint64_t i;
  char *v3;
  char *result;

  for (i = *((_QWORD *)this + 14);
        ((i >> (a2 + 9)) & 1) == 0;
  v3 = (char *)this + 24 * a2;
  result = v3 + 152;
  if (v3[175] < 0)
    return *(char **)result;
  return result;
}

void OUTLINED_FUNCTION_0(void *__p)
{
  operator delete(__p);
}

void MrecInitModule_corpus_word(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugCorpusFindCorrelatedDocuments)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugCorpusFindCorrelatedDocuments", byte_209A58669, byte_209A58669, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugCorpusFindCorrelatedDocuments = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugCorpusFindCorrelatedDocuments);
  }
}

void Corpus::~Corpus(Corpus *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  DgnDelete<CharInfo>(*(_QWORD *)this);
  *(_QWORD *)this = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    (*(void (**)(_QWORD))*v2)(*((_QWORD *)this + 2));
    MemChunkFree(v2, 0);
  }
  *((_QWORD *)this + 2) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 3);
  if (v3)
  {
    (*(void (**)(_QWORD))*v3)(*((_QWORD *)this + 3));
    MemChunkFree(v3, 0);
  }
  *((_QWORD *)this + 3) = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  if (v4)
  {
    (*(void (**)(_QWORD))*v4)(*((_QWORD *)this + 4));
    MemChunkFree(v4, 0);
  }
  *((_QWORD *)this + 4) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(_QWORD))*v5)(*((_QWORD *)this + 1));
    MemChunkFree(v5, 0);
  }
  *((_QWORD *)this + 1) = 0;
  HuffmanDecoder<unsigned int,unsigned long long>::~HuffmanDecoder((uint64_t)this + 400);
  HuffmanDecoder<unsigned int,unsigned long long>::~HuffmanDecoder((uint64_t)this + 304);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 272);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 256);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 200);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 88);
}

uint64_t DgnDelete<CharInfo>(uint64_t result)
{
  _QWORD *inited;

  if (result)
  {
    inited = (_QWORD *)MrecInitModule_sdpres_sdapi();
    return MemChunkFree(inited, 0);
  }
  return result;
}

void Corpus::printSize(Corpus *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CharInfo *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  void *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  void *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  void *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  int v367;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 300, (DgnString *)&v366);
  if (v367)
    v15 = (void *)v366;
  else
    v15 = &unk_209A58669;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A58669, a3, &unk_209A58669, v15);
  DgnString::~DgnString((DgnString *)&v366);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A58669);
  v20 = *(CharInfo **)this;
  if (*(_QWORD *)this)
  {
    v366 = 0;
    v364 = 0;
    v365 = 0;
    v21 = (a3 + 1);
    CharInfo::printSize(v20, 0xFFFFFFFFLL, v21, &v366, &v365, &v364);
    *a4 += v366;
    *a5 += v365;
    *a6 += v364;
  }
  else
  {
    v21 = (a3 + 1);
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v22 = 4;
  else
    v22 = 8;
  v361 = a3;
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 302, (DgnString *)&v366);
  if (v367)
    v28 = (void *)v366;
  else
    v28 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v21, &unk_209A58669, v23, v23, v28, v22, v22, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v22;
  *a5 += v22;
  v29 = *((_QWORD *)this + 1);
  if (v29)
  {
    v366 = 0;
    v364 = 0;
    v365 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v29 + 16))(v29, 0xFFFFFFFFLL, v21, &v366, &v365, &v364);
    *a4 += v366;
    *a5 += v365;
    *a6 += v364;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v30 = 4;
  else
    v30 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 303, (DgnString *)&v366);
  if (v367)
    v35 = (void *)v366;
  else
    v35 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, v21, &unk_209A58669, v23, v23, v35, v30, v30, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v30;
  *a5 += v30;
  v36 = *((_QWORD *)this + 2);
  if (v36)
  {
    v366 = 0;
    v364 = 0;
    v365 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v36 + 16))(v36, 0xFFFFFFFFLL, v21, &v366, &v365, &v364);
    *a4 += v366;
    *a5 += v365;
    *a6 += v364;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v37 = 4;
  else
    v37 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 305, (DgnString *)&v366);
  if (v367)
    v42 = (void *)v366;
  else
    v42 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, v21, &unk_209A58669, v23, v23, v42, v37, v37, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v37;
  *a5 += v37;
  v43 = *((_QWORD *)this + 3);
  if (v43)
  {
    v366 = 0;
    v364 = 0;
    v365 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v43 + 16))(v43, 0xFFFFFFFFLL, v21, &v366, &v365, &v364);
    *a4 += v366;
    *a5 += v365;
    *a6 += v364;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v44 = 4;
  else
    v44 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 307, (DgnString *)&v366);
  if (v367)
    v49 = (void *)v366;
  else
    v49 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, v21, &unk_209A58669, v23, v23, v49, v44, v44, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v44;
  *a5 += v44;
  v50 = *((_QWORD *)this + 4);
  if (v50)
  {
    v366 = 0;
    v364 = 0;
    v365 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v50 + 16))(v50, 0xFFFFFFFFLL, v21, &v366, &v365, &v364);
    *a4 += v366;
    *a5 += v365;
    *a6 += v364;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v51 = 4;
  else
    v51 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 309, (DgnString *)&v366);
  if (v367)
    v56 = (void *)v366;
  else
    v56 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v21, &unk_209A58669, v23, v23, v56, v51, v51, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v51;
  *a5 += v51;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v61 = (void *)v366;
  else
    v61 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, v21, &unk_209A58669, v23, v23, v61, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v66 = (void *)v366;
  else
    v66 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v21, &unk_209A58669, v23, v23, v66, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v71 = (void *)v366;
  else
    v71 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v21, &unk_209A58669, v23, v23, v71, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v76 = (void *)v366;
  else
    v76 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v21, &unk_209A58669, v23, v23, v76, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v81 = (void *)v366;
  else
    v81 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v21, &unk_209A58669, v23, v23, v81, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v86 = (void *)v366;
  else
    v86 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v82, v83, v84, v85, v21, &unk_209A58669, v23, v23, v86, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v91 = (void *)v366;
  else
    v91 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v21, &unk_209A58669, v23, v23, v91, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v92 = 12;
  else
    v92 = 16;
  v93 = *((unsigned int *)this + 24);
  v94 = *((_DWORD *)this + 25);
  if (v94 >= v93)
  {
    v95 = 0;
    if ((int)v93 > 0)
      v92 += 4 * (v93 - 1) + 4;
    v96 = v92 + 4 * (v94 - v93);
  }
  else
  {
    v95 = 4 * v93;
    v96 = v92;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v101 = (void *)v366;
  else
    v101 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v21, &unk_209A58669, v23, v23, v101, v96, v92, v95);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v96;
  *a5 += v92;
  *a6 += v95;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v102 = 12;
  else
    v102 = 16;
  v103 = *((_DWORD *)this + 28);
  v104 = *((_DWORD *)this + 29);
  v105 = v104 >= v103;
  v106 = v104 - v103;
  if (v105)
  {
    v108 = v103 & ~(v103 >> 31);
    v103 = 0;
    v107 = v102 + v108;
    v102 += v108 + v106;
  }
  else
  {
    v107 = v102;
  }
  v109 = v103;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v114 = (void *)v366;
  else
    v114 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v21, &unk_209A58669, v23, v23, v114, v102, v107, v109);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v102;
  *a5 += v107;
  *a6 += v109;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v115 = 12;
  else
    v115 = 16;
  v116 = *((unsigned int *)this + 32);
  v117 = *((_DWORD *)this + 33);
  if (v117 >= v116)
  {
    v118 = 0;
    if ((int)v116 > 0)
      v115 += 4 * (v116 - 1) + 4;
    v119 = v115 + 4 * (v117 - v116);
  }
  else
  {
    v118 = 4 * v116;
    v119 = v115;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v124 = (void *)v366;
  else
    v124 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v120, v121, v122, v123, v21, &unk_209A58669, v23, v23, v124, v119, v115, v118);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v119;
  *a5 += v115;
  *a6 += v118;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v125 = 12;
  else
    v125 = 16;
  v126 = *((unsigned int *)this + 36);
  v127 = *((_DWORD *)this + 37);
  if (v127 >= v126)
  {
    v128 = 0;
    if ((int)v126 > 0)
      v125 += 4 * (v126 - 1) + 4;
    v129 = v125 + 4 * (v127 - v126);
  }
  else
  {
    v128 = 4 * v126;
    v129 = v125;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v134 = (void *)v366;
  else
    v134 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v21, &unk_209A58669, v23, v23, v134, v129, v125, v128);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v129;
  *a5 += v125;
  *a6 += v128;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v135 = 12;
  else
    v135 = 16;
  v136 = *((unsigned int *)this + 40);
  v137 = *((_DWORD *)this + 41);
  if (v137 >= v136)
  {
    v138 = 0;
    if ((int)v136 > 0)
      v135 += 8 * (v136 - 1) + 8;
    v139 = v135 + 8 * (v137 - v136);
  }
  else
  {
    v138 = 8 * v136;
    v139 = v135;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v144 = (void *)v366;
  else
    v144 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v140, v141, v142, v143, v21, &unk_209A58669, v23, v23, v144, v139, v135, v138);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v139;
  *a5 += v135;
  *a6 += v138;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v145 = 12;
  else
    v145 = 16;
  v146 = *((unsigned int *)this + 44);
  v147 = *((_DWORD *)this + 45);
  if (v147 >= v146)
  {
    v148 = 0;
    if ((int)v146 > 0)
      v145 += 4 * (v146 - 1) + 4;
    v149 = v145 + 4 * (v147 - v146);
  }
  else
  {
    v148 = 4 * v146;
    v149 = v145;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v154 = (void *)v366;
  else
    v154 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v150, v151, v152, v153, v21, &unk_209A58669, v23, v23, v154, v149, v145, v148);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v149;
  *a5 += v145;
  *a6 += v148;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v155 = 12;
  else
    v155 = 16;
  v156 = *((unsigned int *)this + 48);
  v157 = *((_DWORD *)this + 49);
  if (v157 >= v156)
  {
    v158 = 0;
    if ((int)v156 > 0)
      v155 = (v155 | 2) + 2 * (v156 - 1);
    v159 = v155 + 2 * (v157 - v156);
  }
  else
  {
    v158 = 2 * v156;
    v159 = v155;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v164 = (void *)v366;
  else
    v164 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v160, v161, v162, v163, v21, &unk_209A58669, v23, v23, v164, v159, v155, v158);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v159;
  *a5 += v155;
  *a6 += v158;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v165 = 12;
  else
    v165 = 16;
  v166 = *((unsigned int *)this + 52);
  v167 = *((_DWORD *)this + 53);
  if (v167 >= v166)
  {
    v168 = 0;
    if ((int)v166 > 0)
      v165 += 4 * (v166 - 1) + 4;
    v169 = v165 + 4 * (v167 - v166);
  }
  else
  {
    v168 = 4 * v166;
    v169 = v165;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v174 = (void *)v366;
  else
    v174 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v170, v171, v172, v173, v21, &unk_209A58669, v23, v23, v174, v169, v165, v168);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v169;
  *a5 += v165;
  *a6 += v168;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v179 = (void *)v366;
  else
    v179 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v175, v176, v177, v178, v21, &unk_209A58669, v23, v23, v179, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v180 = 12;
  else
    v180 = 16;
  v181 = *((unsigned int *)this + 58);
  v182 = *((_DWORD *)this + 59);
  if (v182 >= v181)
  {
    v183 = 0;
    if ((int)v181 > 0)
      v180 += 4 * (v181 - 1) + 4;
    v184 = v180 + 4 * (v182 - v181);
  }
  else
  {
    v183 = 4 * v181;
    v184 = v180;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v189 = (void *)v366;
  else
    v189 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v185, v186, v187, v188, v21, &unk_209A58669, v23, v23, v189, v184, v180, v183);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v184;
  *a5 += v180;
  *a6 += v183;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v194 = (void *)v366;
  else
    v194 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v190, v191, v192, v193, v21, &unk_209A58669, v23, v23, v194, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v195 = 4;
  else
    v195 = 8;
  v196 = *((_QWORD *)this + 31);
  v362 = v21;
  if (v196)
  {
    v197 = sizeObject(v196 + 32);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v198 = 8;
    else
      v198 = 12;
    v199 = 2;
    if (gShadowDiagnosticShowIdealizedObjectSizes)
    {
      v201 = 8;
    }
    else
    {
      v199 = 3;
      v201 = 16;
    }
    v200 = (unint64_t)*(unsigned int *)(v196 + 96) << v199;
    v202 = (v195 | 0x12)
         + v197
         + v201
         + v198
         + sizeObject<HuffmanSymbol<unsigned int,unsigned long long> *>(v196 + 120, 0)
         + v200;
    v203 = *((_QWORD *)this + 31);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v195 = 4;
    else
      v195 = 8;
    if (v203)
    {
      v204 = sizeObject(v203 + 32);
      if (gShadowDiagnosticShowIdealizedObjectSizes)
        v205 = 8;
      else
        v205 = 12;
      v206 = 2;
      if (!gShadowDiagnosticShowIdealizedObjectSizes)
        v206 = 3;
      v207 = (unint64_t)*(unsigned int *)(v203 + 96) << v206;
      if (gShadowDiagnosticShowIdealizedObjectSizes)
        v208 = 8;
      else
        v208 = 16;
      v209 = 4;
      if (gShadowDiagnosticShowIdealizedObjectSizes)
      {
        v210 = 12;
      }
      else
      {
        v209 = 8;
        v210 = 16;
      }
      v211 = *(unsigned int *)(v203 + 128);
      v21 = v362;
      if ((int)v211 >= 1)
      {
        v212 = v211 + 1;
        do
          v210 += v209 + 16 * (*(_QWORD *)(*(_QWORD *)(v203 + 120) + 8 * (v212-- - 2)) != 0);
        while (v212 > 1);
      }
      v195 = (v195 | 0x12) + v204 + v208 + v205 + v207 + v210;
      v213 = *((_QWORD *)this + 31);
      if (v213)
        v203 = sizeObject(v213 + 32);
      else
        v203 = 0;
    }
    else
    {
      v21 = v362;
    }
  }
  else
  {
    v203 = 0;
    v202 = v195;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v218 = (void *)v366;
  else
    v218 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v214, v215, v216, v217, v21, &unk_209A58669, v23, v23, v218, v202, v195, v203);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v202;
  *a5 += v195;
  *a6 += v203;
  v219 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v219 = 16;
  v220 = *((unsigned int *)this + 66);
  v221 = *((_DWORD *)this + 67);
  v222 = v219 + 4 * (v220 - 1) + 4;
  if ((int)v220 <= 0)
    v222 = v219;
  if (v221 >= v220)
    v223 = v222;
  else
    v223 = v219;
  if (v221 >= v220)
    v224 = v222 + 4 * (v221 - v220);
  else
    v224 = v219;
  if (v221 >= v220)
    v225 = 0;
  else
    v225 = 4 * v220;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v230 = (void *)v366;
  else
    v230 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v226, v227, v228, v229, v21, &unk_209A58669, v23, v23, v230, v224, v223, v225);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v224;
  *a5 += v223;
  *a6 += v225;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v231 = 12;
  else
    v231 = 16;
  v232 = *((unsigned int *)this + 70);
  v233 = *((_DWORD *)this + 71);
  if (v233 >= v232)
  {
    v234 = 0;
    if ((int)v232 > 0)
      v231 += 4 * (v232 - 1) + 4;
    v235 = v231 + 4 * (v233 - v232);
  }
  else
  {
    v234 = 4 * v232;
    v235 = v231;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v240 = (void *)v366;
  else
    v240 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v236, v237, v238, v239, v21, &unk_209A58669, v23, v23, v240, v235, v231, v234);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v235;
  *a5 += v231;
  *a6 += v234;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v241 = 4;
  else
    v241 = 8;
  v242 = *((_QWORD *)this + 36);
  if (v242)
  {
    v243 = sizeObject(v242 + 32);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v244 = 8;
    else
      v244 = 12;
    v245 = 2;
    if (gShadowDiagnosticShowIdealizedObjectSizes)
    {
      v247 = 8;
    }
    else
    {
      v245 = 3;
      v247 = 16;
    }
    v246 = (unint64_t)*(unsigned int *)(v242 + 96) << v245;
    v248 = (v241 | 0x12)
         + v243
         + v247
         + v244
         + sizeObject<HuffmanSymbol<unsigned int,unsigned long long> *>(v242 + 120, 0)
         + v246;
    v249 = *((_QWORD *)this + 36);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v241 = 4;
    else
      v241 = 8;
    if (v249)
    {
      v250 = sizeObject(v249 + 32);
      if (gShadowDiagnosticShowIdealizedObjectSizes)
        v251 = 8;
      else
        v251 = 12;
      v252 = 2;
      if (!gShadowDiagnosticShowIdealizedObjectSizes)
        v252 = 3;
      v253 = (unint64_t)*(unsigned int *)(v249 + 96) << v252;
      if (gShadowDiagnosticShowIdealizedObjectSizes)
        v254 = 8;
      else
        v254 = 16;
      v255 = 4;
      if (gShadowDiagnosticShowIdealizedObjectSizes)
      {
        v256 = 12;
      }
      else
      {
        v255 = 8;
        v256 = 16;
      }
      v257 = *(unsigned int *)(v249 + 128);
      v21 = v362;
      if ((int)v257 >= 1)
      {
        v258 = v257 + 1;
        do
          v256 += v255 + 16 * (*(_QWORD *)(*(_QWORD *)(v249 + 120) + 8 * (v258-- - 2)) != 0);
        while (v258 > 1);
      }
      v241 = (v241 | 0x12) + v250 + v254 + v251 + v253 + v256;
      v259 = *((_QWORD *)this + 36);
      if (v259)
        v249 = sizeObject(v259 + 32);
      else
        v249 = 0;
    }
    else
    {
      v21 = v362;
    }
  }
  else
  {
    v249 = 0;
    v248 = v241;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v264 = (void *)v366;
  else
    v264 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v260, v261, v262, v263, v21, &unk_209A58669, v23, v23, v264, v248, v241, v249);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v248;
  *a5 += v241;
  *a6 += v249;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v269 = (void *)v366;
  else
    v269 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v265, v266, v267, v268, v21, &unk_209A58669, v23, v23, v269, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 8;
  *a5 += 8;
  v270 = HuffmanDecoder<unsigned int,unsigned long long>::sizeObject((uint64_t)this + 304, 0);
  v271 = HuffmanDecoder<unsigned int,unsigned long long>::sizeObject((uint64_t)this + 304, 1);
  v272 = HuffmanDecoder<unsigned int,unsigned long long>::sizeObject((uint64_t)this + 304, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v277 = (void *)v366;
  else
    v277 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v273, v274, v275, v276, v21, &unk_209A58669, v23, v23, v277, v270, v271, v272);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v270;
  *a5 += v271;
  *a6 += v272;
  v278 = HuffmanDecoder<unsigned int,unsigned long long>::sizeObject((uint64_t)this + 400, 0);
  v279 = HuffmanDecoder<unsigned int,unsigned long long>::sizeObject((uint64_t)this + 400, 1);
  v280 = HuffmanDecoder<unsigned int,unsigned long long>::sizeObject((uint64_t)this + 400, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v285 = (void *)v366;
  else
    v285 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v281, v282, v283, v284, v21, &unk_209A58669, v23, v23, v285, v278, v279, v280);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += v278;
  *a5 += v279;
  *a6 += v280;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v290 = (void *)v366;
  else
    v290 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v286, v287, v288, v289, v21, &unk_209A58669, v23, v23, v290, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v295 = (void *)v366;
  else
    v295 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v291, v292, v293, v294, v21, &unk_209A58669, v23, v23, v295, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v300 = (void *)v366;
  else
    v300 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v296, v297, v298, v299, v21, &unk_209A58669, v23, v23, v300, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v305 = (void *)v366;
  else
    v305 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v301, v302, v303, v304, v21, &unk_209A58669, v23, v23, v305, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v310 = (void *)v366;
  else
    v310 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v306, v307, v308, v309, v21, &unk_209A58669, v23, v23, v310, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v315 = (void *)v366;
  else
    v315 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v311, v312, v313, v314, v21, &unk_209A58669, v23, v23, v315, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v320 = (void *)v366;
  else
    v320 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v316, v317, v318, v319, v21, &unk_209A58669, v23, v23, v320, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v325 = (void *)v366;
  else
    v325 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v321, v322, v323, v324, v21, &unk_209A58669, v23, v23, v325, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v330 = (void *)v366;
  else
    v330 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v326, v327, v328, v329, v21, &unk_209A58669, v23, v23, v330, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v335 = (void *)v366;
  else
    v335 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v331, v332, v333, v334, v21, &unk_209A58669, v23, v23, v335, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v340 = (void *)v366;
  else
    v340 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v336, v337, v338, v339, v21, &unk_209A58669, v23, v23, v340, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v345 = (void *)v366;
  else
    v345 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v341, v342, v343, v344, v21, &unk_209A58669, v23, v23, v345, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v350 = (void *)v366;
  else
    v350 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v346, v347, v348, v349, v21, &unk_209A58669, v23, v23, v350, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 311, (DgnString *)&v366);
  if (v367)
    v355 = (void *)v366;
  else
    v355 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v351, v352, v353, v354, v21, &unk_209A58669, v23, v23, v355, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v366);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/corpus.cpp", 312, (DgnString *)&v366);
  if (v367)
    v360 = (void *)v366;
  else
    v360 = &unk_209A58669;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v356, v357, v358, v359, v361, &unk_209A58669, (35 - v361), (35 - v361), v360, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v366);
}

void sub_2097899EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t sizeObject<unsigned int>(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  int v6;
  uint64_t v7;

  if (a2 == 3)
  {
    v3 = *(unsigned int *)(a1 + 8);
    if (v3 <= *(_DWORD *)(a1 + 12))
      return 0;
    else
      return 4 * v3;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      result = 12;
    else
      result = 16;
    if (a2 != 2)
    {
      v6 = *(_DWORD *)(a1 + 8);
      v5 = *(_DWORD *)(a1 + 12);
      v7 = result + 4 * (v6 - 1) + 4;
      if (v6 <= 0)
        v7 = result;
      if (!a2)
        v7 += 4 * (v5 - v6);
      if (v5 >= v6)
        return v7;
    }
  }
  return result;
}

uint64_t sizeObject<unsigned long long>(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  int v6;
  uint64_t v7;

  if (a2 == 3)
  {
    v3 = *(unsigned int *)(a1 + 8);
    if (v3 <= *(_DWORD *)(a1 + 12))
      return 0;
    else
      return 8 * v3;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      result = 12;
    else
      result = 16;
    if (a2 != 2)
    {
      v6 = *(_DWORD *)(a1 + 8);
      v5 = *(_DWORD *)(a1 + 12);
      v7 = result + 8 * (v6 - 1) + 8;
      if (v6 <= 0)
        v7 = result;
      if (!a2)
        v7 += 8 * (v5 - v6);
      if (v5 >= v6)
        return v7;
    }
  }
  return result;
}

uint64_t writeObject<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v7;

  v7 = *(_DWORD *)(a2 + 8);
  writeObject(a1, &v7, a3);
  return writeObjectArray(a1, *(_QWORD *)a2, *(_DWORD *)(a2 + 8), a3);
}

uint64_t writeObject<char>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v7;

  v7 = *(_DWORD *)(a2 + 8);
  writeObject(a1, &v7, a3);
  return writeObjectArray(a1, *(char **)a2, *(unsigned int *)(a2 + 8), a3);
}

uint64_t writeObject<unsigned long long>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v7;

  v7 = *(_DWORD *)(a2 + 8);
  writeObject(a1, &v7, a3);
  return writeObjectArray(a1, *(uint64_t **)a2, *(_DWORD *)(a2 + 8), a3);
}

uint64_t writeObject<unsigned short>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v7;

  v7 = *(_DWORD *)(a2 + 8);
  writeObject(a1, &v7, a3);
  return writeObjectArray(a1, *(__int16 **)a2, *(_DWORD *)(a2 + 8), a3);
}

void readObject<unsigned int>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v8 = 0;
  readObject((uint64_t)a1, &v8, a3);
  v6 = v8;
  v7 = *(_DWORD *)(a2 + 12);
  if (v8 > v7)
    DgnPrimArray<unsigned int>::reallocElts(a2, v8 - v7, 0);
  *(_DWORD *)(a2 + 8) = v6;
  readObjectArray(a1, *(unsigned int **)a2, v6, a3);
}

void readObject<char>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  void *v9;

  v8 = 0;
  readObject((uint64_t)a1, &v8, a3);
  v6 = v8;
  v7 = *(char **)a2;
  if (*(_DWORD *)(a2 + 12) < v8)
  {
    v9 = 0;
    *(_DWORD *)(a2 + 12) = realloc_array(v7, &v9, v8, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 8), 1);
    v7 = (char *)v9;
    *(_QWORD *)a2 = v9;
  }
  *(_DWORD *)(a2 + 8) = v6;
  readObjectArray(a1, v7, v6, a3);
}

void readObject<unsigned short>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v8 = 0;
  readObject((uint64_t)a1, &v8, a3);
  v6 = v8;
  v7 = *(_DWORD *)(a2 + 12);
  if (v8 > v7)
    DgnPrimArray<short>::reallocElts(a2, v8 - v7, 0);
  *(_DWORD *)(a2 + 8) = v6;
  readObjectArray(a1, *(unsigned __int16 **)a2, v6, a3);
}

unint64_t DgnPrimArray<unsigned long long>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 8 * v6, 8 * v5, 8 * v5, 1);
  *(_DWORD *)(a1 + 12) = result >> 3;
  *(_QWORD *)a1 = v8;
  return result;
}

uint64_t HuffmanDecoder<unsigned int,unsigned long long>::~HuffmanDecoder(uint64_t a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(a1 + 80);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a1 + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a1 + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a1 + 16);
  return DgnPrimArray<unsigned int>::~DgnPrimArray(a1);
}

uint64_t sizeObject<HuffmanSymbol<unsigned int,unsigned long long> *>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;

  v2 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 8;
  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    result = 12;
  else
    result = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v5 = *(unsigned int *)(a1 + 8);
    if ((int)v5 >= 1)
    {
      v6 = v5 + 1;
      do
        result += v2 + 16 * (*(_QWORD *)(*(_QWORD *)a1 + 8 * (v6-- - 2)) != 0);
      while (v6 > 1);
    }
    if (!a2)
    {
      v7 = (*(_DWORD *)(a1 + 12) - v5);
      v8 = 2;
      if (!gShadowDiagnosticShowIdealizedObjectSizes)
        v8 = 3;
      result += v7 << v8;
    }
  }
  return result;
}

uint64_t HuffmanDecoder<unsigned int,unsigned long long>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sizeObject<unsigned long long>(a1, a2);
  v5 = sizeObject<unsigned char>(a1 + 16, a2);
  v6 = sizeObject<unsigned int>(a1 + 32, a2);
  v7 = sizeObject<unsigned int>(a1 + 48, a2);
  v8 = sizeObject<unsigned int>(a1 + 80, a2);
  v9 = 12;
  if (a2 == 3)
    v9 = 0;
  return v9 + v4 + v5 + v6 + v7 + v8;
}

uint64_t sizeObject<unsigned char>(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t result;
  unsigned int v5;
  int v6;
  uint64_t v7;

  if (a2 == 3)
  {
    v3 = *(_DWORD *)(a1 + 8);
    if (v3 <= *(_DWORD *)(a1 + 12))
      return 0;
    else
      return v3;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      result = 12;
    else
      result = 16;
    if (a2 != 2)
    {
      v6 = *(_DWORD *)(a1 + 8);
      v5 = *(_DWORD *)(a1 + 12);
      v7 = result + (v6 & ~(v6 >> 31));
      if (!a2)
        v7 += v5 - v6;
      if (v5 >= v6)
        return v7;
    }
  }
  return result;
}

unint64_t DgnPrimArray<char>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  size_t v5;
  unint64_t v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = (*(_DWORD *)(a1 + 12) + v3);
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, v6, v5, v5, 1);
  *(_DWORD *)(a1 + 12) = result;
  *(_QWORD *)a1 = v8;
  return result;
}

void DgnPool::~DgnPool(DgnPool *this)
{
  DgnPool::deleteAllWithoutDestroying(this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16);
}

_QWORD *DgnPool::deleteAllWithoutDestroying(DgnPool *this)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = v2 + 1;
    do
    {
      v4 = *(_QWORD **)(*((_QWORD *)this + 2) + 8 * (v3 - 2));
      if (v4)
        MemChunkFree(v4, 0);
      --v3;
    }
    while (v3 > 1);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 2);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((_QWORD *)this + 2) = 0;
  }
  *((_QWORD *)this + 3) = 0;
  result = (_QWORD *)*((_QWORD *)this + 4);
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *((_QWORD *)this + 4) = 0;
  }
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 1) = 0;
  return result;
}

uint64_t writeObject<unsigned char>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v7;

  v7 = *(_DWORD *)(a2 + 8);
  writeObject(a1, &v7, a3);
  return writeObjectArray(a1, *(char **)a2, *(unsigned int *)(a2 + 8), a3);
}

uint64_t DgnPool::addChunk(DgnPool *this)
{
  int v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = *((_DWORD *)this + 6);
  if (v2 == 1)
    v3 = 15360;
  else
    v3 = 64512;
  if (v2)
    v4 = v3;
  else
    v4 = 3072;
  v5 = *(unsigned int *)this;
  v6 = v4 / v5;
  v7 = MemChunkSuggestAllocExtraItems(v5 * (unint64_t)v6 + 12, v5, 0);
  v8 = v7 + v6;
  result = (uint64_t)MemChunkAlloc((v7 + v6) * *(unsigned int *)this + 12, 0);
  v10 = result;
  v11 = (_QWORD *)((result + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *((_DWORD *)this + 6);
  if (v12 == *((_DWORD *)this + 7))
  {
    result = DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 16, 1, 1);
    v12 = *((_DWORD *)this + 6);
  }
  *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v12) = v10;
  *((_DWORD *)this + 6) = v12 + 1;
  v13 = *((_DWORD *)this + 10);
  if (v13 == *((_DWORD *)this + 11))
  {
    result = DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 32, 1, 1);
    v13 = *((_DWORD *)this + 10);
  }
  *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v13) = v8;
  ++*((_DWORD *)this + 10);
  *((_DWORD *)this + 12) += v8;
  v14 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v11;
  if (v8 >= 2)
  {
    v15 = *(unsigned int *)this;
    v16 = v11;
    do
    {
      v11 = (_QWORD *)((char *)v16 + v15);
      *v16 = (char *)v16 + v15;
      v16 = (_QWORD *)((char *)v16 + v15);
    }
    while (v8-- > 2);
  }
  *v11 = v14;
  return result;
}

void readObject<unsigned char>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  void *v9;

  v8 = 0;
  readObject((uint64_t)a1, &v8, a3);
  v6 = v8;
  v7 = *(unsigned __int8 **)a2;
  if (*(_DWORD *)(a2 + 12) < v8)
  {
    v9 = 0;
    *(_DWORD *)(a2 + 12) = realloc_array(v7, &v9, v8, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 8), 1);
    v7 = (unsigned __int8 *)v9;
    *(_QWORD *)a2 = v9;
  }
  *(_DWORD *)(a2 + 8) = v6;
  readObjectArray(a1, v7, v6, a3);
}

{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  unint64_t v10;

  LODWORD(v10) = 0;
  readObject((uint64_t)a1, &v10, a3);
  v6 = v10;
  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10)
    v8 = (_DWORD)v7 == 0;
  else
    v8 = 0;
  if (v8)
  {
    v9 = MemChunkAlloc(v10, 0);
    *(_QWORD *)a2 = v9;
    *(_DWORD *)(a2 + 8) = v6;
    v7 = v6;
  }
  else
  {
    v9 = *(uint64_t **)a2;
  }
  readObjectArray(a1, (unsigned __int8 *)v9, v7, a3);
}

_QWORD *TSegmenter::TSegmenter(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_24C218D70;
  a1[1] = 0;
  TAllocator::TAllocator((TAllocator *)(a1 + 2), 2048);
  a1[7] = a2;
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[12] = a3;
  a1[13] = a4;
  a1[1] = 5;
  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  a1[11] = *(_QWORD *)(a3 + 72);
  return a1;
}

void sub_20978A4B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  TAllocator *v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v5;
    operator delete(v5);
  }
  TAllocator::clear(v2);
  _Unwind_Resume(a1);
}

void TSegmenter::~TSegmenter(TSegmenter *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 9) = v2;
  if (v2)
    operator delete(v2);
  TAllocator::clear((TSegmenter *)((char *)this + 16));
}

unsigned __int8 *TSegmenter::findSegmentEnd(_QWORD *a1, unsigned __int8 *a2, int *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int *v29;
  int v30;
  signed int v31;
  int *v32;
  signed int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *i;
  unint64_t v43;
  int *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 v47;
  int v48;
  int v49;
  unsigned __int8 v50;
  int v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  char isAlpha;
  unsigned __int8 v59;
  BOOL v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  int v64;
  unsigned __int8 v65;
  int v66;
  unsigned __int8 v67;
  uint64_t isPunct;
  TLocaleInfo *GlobalLocaleInfo;
  _BOOL8 v70;
  TLocaleInfo *v71;
  TLocaleInfo *v72;
  TLocaleInfo *v73;
  int v74;
  uint64_t v75;
  TLocaleInfo *v76;
  uint64_t v77;
  unsigned __int8 v78;
  BOOL v80;
  uint64_t v81;
  unsigned __int8 v82;
  int v83;
  int v84;
  int v85;
  int v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int *v92;
  int v93;
  int *v94;
  int v95;
  BOOL v96;
  TLocaleInfo *v97;
  TLocaleInfo *v98;
  TLocaleInfo *v99;
  unsigned int v100;
  TLocaleInfo *v101;
  _BOOL4 v103;
  TLocaleInfo *v104;
  TLocaleInfo *v105;
  TLocaleInfo *v106;
  TLocaleInfo *v107;
  TLocaleInfo *v108;
  TLocaleInfo *v109;
  TLocaleInfo *v110;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned __int8 v117;
  unint64_t v118;
  unsigned int v119;
  unsigned __int8 v120;
  int v121;
  TLocaleInfo *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned __int8 v129;
  int v130;
  unsigned __int8 v131;
  uint64_t v132;
  int *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v137;
  int v139;
  uint64_t v140;
  unint64_t v141;
  int *v142;
  unint64_t v143;
  TLocaleInfo *v144;
  TLocaleInfo *v145;
  TLocaleInfo *v146;
  TLocaleInfo *v147;
  TLocaleInfo *v148;
  TLocaleInfo *v149;
  TLocaleInfo *v150;
  TLocaleInfo *v151;
  TLocaleInfo *v152;
  TLocaleInfo *v153;
  unint64_t v154;
  int *v155;
  uint64_t v156;
  _OWORD v157[65];
  char v158;
  signed int v159;
  int v160;
  int v161[3];

  v5 = a5;
  v10 = a1[12];
  if (*(_DWORD *)(v10 + 64) != 2)
  {
    v35 = 0;
    v36 = 0;
    memset(v157, 0, 32);
    while (1)
    {
      v37 = a2[v35];
      if (v37 <= 0x20 && ((1 << v37) & 0x100003E01) != 0)
        break;
      v39 = v37 >> 6;
      v40 = 1 << v37;
      v41 = *((_QWORD *)v157 + v39);
      if ((v41 & v40) == 0)
      {
        *((_QWORD *)v157 + v39) = v41 | v40;
        ++v36;
      }
      ++v35;
    }
    i = &a2[v35];
    if (v36 >= 0x1F)
    {
      *a3 = 5;
      v43 = *(_QWORD *)(a5 + 16);
      v44 = (int *)&unk_209A58678;
      v45 = a5;
      v46 = 6;
LABEL_264:
      TBuffer<wchar_t>::insert(v45, v43, v44, v46);
      return i;
    }
    if (v35 >= 0x100)
    {
      *a3 = 5;
LABEL_263:
      v43 = *(_QWORD *)(v5 + 16);
      v44 = (int *)&unk_209A58694;
      v45 = v5;
      v46 = 16;
      goto LABEL_264;
    }
  }
  v160 = 0;
  v11 = TLocaleInfo::multiByteToUnicode(v10, a2, &v160);
  if (v11 == -1)
  {
    LODWORD(v157[0]) = 0;
    for (i = a2 + 1; TLocaleInfo::multiByteToUnicode(a1[12], i, v157) == -1; ++i)
      ;
    *a3 = 5;
    v43 = *(_QWORD *)(v5 + 16);
    v44 = (int *)&unk_209A586D8;
    v45 = v5;
    v46 = 8;
    goto LABEL_264;
  }
  v12 = v11;
  v156 = v5;
  if (a1[11] >= 3uLL)
  {
    v13 = v160;
    if ((v14 & 1) == 0
    {
      v145 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v145);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v145;
    }
    v16 = (int)v13 < 65281 && (_DWORD)v13 != 12288;
    if ((int)v13 <= 65510
      && !v16
      && ((v13 - 65471) > 0x20
       || TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v13) != (_DWORD)v13))
    {
      v17 = v160;
      if ((v18 & 1) == 0
      {
        v147 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v147);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v147;
      }
      v160 = TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v17);
      *a4 |= 2uLL;
    }
  }
  v159 = 0;
  v19 = &a2[v12];
  v20 = TLocaleInfo::multiByteToUnicode(a1[12], v19, &v159);
  v21 = v20;
  if (*v19)
    v22 = v20 == -1;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v23 = TLocaleInfo::composeCharacter(a1[12], v160, v159);
      if (!v23)
        break;
      v24 = (v159 & 0xFFFFFFFB) != 0x670 && v159 >= 0x660;
      v25 = v24 ? 1 : 4;
      v26 = v159 >= 1611 ? v25 : 1;
      *a4 |= v26;
      v160 = v23;
      v19 += v21;
      v27 = TLocaleInfo::multiByteToUnicode(a1[12], v19, &v159);
      v21 = v27;
    }
    while (*v19 && v27 != -1);
  }
  v29 = (int *)a1[13];
  if (v29)
  {
    v30 = *v29;
    v31 = v160;
    if (*v29)
    {
      v32 = v29 + 2;
      do
      {
        v33 = *(v32 - 1);
        if (!v33)
          break;
        if (v160 == v30)
        {
          v160 = *(v32 - 1);
          *a4 |= 8uLL;
          v31 = v33;
          break;
        }
        v34 = *v32;
        v32 += 2;
        v30 = v34;
      }
      while (v34);
    }
  }
  else
  {
    v31 = v160;
  }
  {
    v144 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v144);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v144;
  }
  if ((TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v31) & 1) != 0)
  {
    v48 = 1;
    goto LABEL_76;
  }
  v49 = v160;
  {
    v146 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v146);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v146;
  }
  v48 = 0;
  if (v49 > 159)
  {
    if (v49 >= 12288)
    {
      if (v49 == 12288)
        goto LABEL_76;
      v51 = 65279;
    }
    else
    {
      if (v49 == 160)
        goto LABEL_76;
      v51 = 8203;
    }
    if (v49 == v51)
      goto LABEL_76;
  }
  else if (v49 <= 0x20 && ((1 << v49) & 0x100002600) != 0)
  {
    goto LABEL_76;
  }
  v116 = v160;
  {
    v148 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v148);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v148;
  }
  if (TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v116))
  {
    v118 = 1;
    i = v19;
    if (*v19 && v21 != -1)
    {
      v118 = 1;
      i = v19;
      do
      {
        v119 = v159;
        if ((v120 & 1) == 0
        {
          v123 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v123);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v123;
        }
        if (!TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v119))
          break;
        ++v118;
        i += v21;
        v121 = TLocaleInfo::multiByteToUnicode(a1[12], i, &v159);
        v21 = v121;
      }
      while (*i && v121 != -1);
    }
    if (v118 > a1[1])
    {
      *a3 = 5;
      v45 = v156;
      v43 = *(_QWORD *)(v156 + 16);
      v44 = (int *)&unk_209A586FC;
      v46 = 32;
      goto LABEL_264;
    }
    v139 = 3;
    goto LABEL_323;
  }
  v128 = v160;
  {
    v149 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v149);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v149;
  }
  if ((int)v128 >= 48
    && (v128 < 0x3A
     || v128 >= 0x660
     && TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v128) != -1))
  {
    v48 = 2;
    goto LABEL_76;
  }
  v130 = v160;
  {
    v150 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v150);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v150;
  }
  v48 = 5;
  if ((v130 - 1) >= 8 && (v130 - 11) >= 2 && v130 != 0xFFFF)
  {
    if ((v130 - 14) < 0x12)
    {
      v48 = 5;
      goto LABEL_76;
    }
    if (a1[11] < 3uLL || !unicodeIsDiacritic(v160, a1[12]))
    {
      v48 = 4;
      goto LABEL_76;
    }
    if (isComposableDiacriticInContext(0, v160, a1[12]))
    {
      *a3 = 5;
      v140 = v156;
      v141 = *(_QWORD *)(v156 + 16);
      v142 = (int *)&unk_209A58780;
      v143 = 9;
      goto LABEL_324;
    }
    v139 = 4;
LABEL_323:
    *a3 = v139;
    LODWORD(v157[0]) = v160;
    v140 = v156;
    v141 = *(_QWORD *)(v156 + 16);
    v142 = (int *)v157;
    v143 = 1;
LABEL_324:
    TBuffer<wchar_t>::insert(v140, v141, v142, v143);
    return v19;
  }
LABEL_76:
  *a3 = v48;
  v52 = *(_QWORD *)(v156 + 16);
  LODWORD(v157[0]) = v160;
  v154 = v52;
  TBuffer<wchar_t>::insert(v156, v52, (int *)v157, 1uLL);
  v155 = a3;
  if (!*v19 || v21 == -1)
  {
    i = v19;
  }
  else
  {
    i = v19;
    while (2)
    {
      v53 = v159;
      if (!v159)
        break;
      v54 = v160;
      v55 = a1[12];
      switch(*v155)
      {
        case 0:
          if ((v56 & 1) == 0
          {
            v105 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v105);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v105;
          }
          if ((int)v54 <= 8202)
          {
            if ((_DWORD)v54 != 32 && (_DWORD)v54 != 160)
            {
LABEL_142:
              if ((_DWORD)v54 == 13 && v53 == 10)
                goto LABEL_152;
              break;
            }
          }
          else if ((_DWORD)v54 != 8203 && (_DWORD)v54 != 65279 && (_DWORD)v54 != 12288)
          {
            goto LABEL_142;
          }
          if ((v65 & 1) == 0
          {
            v110 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v110);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v110;
          }
          if (v53 > 8202)
          {
            if (v53 != 8203 && v53 != 12288)
            {
              v66 = 65279;
              goto LABEL_137;
            }
            goto LABEL_152;
          }
          if (v53 == 32 || v53 == 160)
            goto LABEL_152;
          break;
        case 1:
          if ((v57 & 1) == 0
          {
            v106 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v106);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v106;
          }
          isAlpha = TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v53);
          goto LABEL_151;
        case 2:
          if ((v63 & 1) == 0
          {
            v108 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v108);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v108;
          }
          if (v53 < 48
            || v53 >= 0x3A
            && (v53 < 0x660
             || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v53) == -1))
          {
            break;
          }
          goto LABEL_152;
        case 3:
          break;
        case 5:
          if ((v59 & 1) == 0
          {
            v107 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v107);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v107;
          }
          if ((v53 - 1) >= 8)
          {
            v60 = (v53 - 11) < 2 || v53 == 0xFFFF;
            if (!v60 && (v53 - 32) < 0xFFFFFFEE)
              break;
          }
          goto LABEL_152;
        default:
          if ((v61 & 1) == 0
          {
            v151 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v151);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v151;
          }
          if ((TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v53) & 1) != 0)
            break;
          if ((v62 & 1) == 0
          {
            v152 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v152);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v152;
          }
          if (v53 > 159)
          {
            if (v53 >= 12288)
            {
              if (v53 == 12288)
                break;
              v64 = 65279;
            }
            else
            {
              if (v53 == 160)
                break;
              v64 = 8203;
            }
            if (v53 == v64)
              break;
          }
          else if (v53 <= 0x20 && ((1 << v53) & 0x100002600) != 0)
          {
            break;
          }
          if ((v67 & 1) == 0
          {
            v153 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v153);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v153;
          }
          isPunct = TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v53);
          if ((isPunct & 1) != 0)
            break;
          GlobalLocaleInfo = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)isPunct);
          if (v53 >= 48)
          {
            if (v53 < 0x3A)
              break;
            if (v53 >= 0x660)
            {
              GlobalLocaleInfo = (TLocaleInfo *)TLocaleInfo::getDigitExtended((uint64_t)GlobalLocaleInfo, v53);
              if ((_DWORD)GlobalLocaleInfo != -1)
                break;
            }
          }
          TLocaleInfo::getGlobalLocaleInfo(GlobalLocaleInfo);
          if ((unicodeIsJunk(v53) & 1) != 0)
            break;
          if (isComposableDiacriticInContext(0, v54, v55))
            break;
          v70 = isComposableDiacriticInContext(v54, v53, v55);
          if (v70)
            break;
          v71 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)v70);
          if ((v54 - 19968) >> 4 <= 0x51A)
          {
            v66 = 12293;
LABEL_137:
            if (v53 != v66)
              break;
            goto LABEL_152;
          }
          v72 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v71);
          if ((v53 - 19968) >> 4 < 0x51B)
            break;
          TLocaleInfo::getGlobalLocaleInfo(v72);
          v73 = (TLocaleInfo *)isKatakana(v54);
          v74 = (int)v73;
          TLocaleInfo::getGlobalLocaleInfo(v73);
          if (v74)
          {
            isAlpha = isSmallKatakana(v53);
            goto LABEL_150;
          }
          v75 = isKatakana(v53);
          if ((v75 & 1) != 0)
            break;
          v76 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)v75);
          if ((v54 - 12353) < 0x53 || (v54 - 12540) < 3 || (v54 - 12445) <= 1)
          {
            TLocaleInfo::getGlobalLocaleInfo(v76);
            isAlpha = isSmallHiragana(v53);
LABEL_150:
            if ((_DWORD)v54 == 12540)
              break;
LABEL_151:
            if ((isAlpha & 1) == 0)
              break;
            goto LABEL_152;
          }
          v97 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v76);
          if ((v53 - 12353) < 0x53 || (v53 - 12540) < 3 || (v53 - 12445) < 2)
            break;
          v98 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v97);
          v99 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v98);
          v100 = v53 - 3585;
          if ((v54 - 3585) > 0x5A)
          {
            if (v100 < 0x5B)
              break;
            v101 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v99);
            if ((int)v54 >= 1425)
            {
              v103 = v54 < 0x5F5 || (v54 - 64285) < 0x33;
              TLocaleInfo::getGlobalLocaleInfo(v101);
              if (v53 >= 1425)
              {
                if (v53 >= 0x5F5)
                {
                  if (((((v53 - 64285) < 0x33) ^ v103) & 1) != 0)
                    break;
                }
                else if (!v103)
                {
                  break;
                }
              }
              else if (v103)
              {
                break;
              }
            }
            else
            {
              TLocaleInfo::getGlobalLocaleInfo(v101);
              if (v53 >= 1425 && (v53 < 0x5F5 || (v53 - 64285) < 0x33))
                break;
            }
          }
          else
          {
            if (v100 > 0x5A)
              break;
            if ((v53 - 3663) >= 0xFFFFFFD5)
            {
              if (v53 > 0xE3A)
              {
                if (v53 > 0xE44)
                  goto LABEL_152;
              }
              else if (v53 > 0xE2F || (v53 & 0xFFFFFFFD) == 0xE24)
              {
                goto LABEL_152;
              }
            }
            if ((v54 - 3653) < 0xFFFFFFFB)
              break;
          }
LABEL_152:
          if (a1[11] >= 3uLL)
          {
            v77 = v159;
            if ((v78 & 1) == 0
            {
              v104 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v104);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v104;
            }
            v80 = (int)v77 < 65281 && (_DWORD)v77 != 12288;
            if ((int)v77 <= 65510
              && !v80
              && ((v77 - 65471) > 0x20
               || TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v77) != (_DWORD)v77))
            {
              v81 = v159;
              if ((v82 & 1) == 0
              {
                v109 = (TLocaleInfo *)operator new();
                TLocaleInfo::TLocaleInfo(v109);
                TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v109;
              }
              v159 = TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v81);
              *a4 |= 2uLL;
            }
          }
          v83 = v160;
          v160 = v159;
          i += v21;
          v84 = TLocaleInfo::multiByteToUnicode(a1[12], i, &v159);
          v21 = v84;
          v85 = *i;
          if (v83 == 3661 && v160 >= 3656 && v160 <= 3659 && v159 == 3634 && *i && v84 != -1)
          {
            *(_DWORD *)(*(_QWORD *)v156 + 4 * *(_QWORD *)(v156 + 16) - 4) = v160;
            v160 = 3661;
            v85 = *i;
          }
          if (v85 && v84 != -1)
          {
            do
            {
              v86 = TLocaleInfo::composeCharacter(a1[12], v160, v159);
              if (!v86)
                break;
              v87 = (v159 & 0xFFFFFFFB) != 0x670 && v159 >= 0x660;
              v88 = v87 ? 1 : 4;
              v89 = v159 >= 1611 ? v88 : 1;
              *a4 |= v89;
              v160 = v86;
              i += v21;
              v90 = TLocaleInfo::multiByteToUnicode(a1[12], i, &v159);
              v21 = v90;
            }
            while (*i && v90 != -1);
          }
          v92 = (int *)a1[13];
          if (v92)
          {
            v93 = *v92;
            if (*v92)
            {
              v94 = v92 + 2;
              while (*(v94 - 1))
              {
                if (v160 == v93)
                {
                  v160 = *(v94 - 1);
                  *a4 |= 8uLL;
                  break;
                }
                v95 = *v94;
                v94 += 2;
                v93 = v95;
                if (!v95)
                  break;
              }
            }
          }
          if ((unint64_t)(i - a2) <= 0xFF)
          {
            LODWORD(v157[0]) = v160;
            TBuffer<wchar_t>::insert(v156, *(_QWORD *)(v156 + 16), (int *)v157, 1uLL);
          }
          if (*i)
            v96 = v21 == -1;
          else
            v96 = 1;
          if (v96)
            break;
          continue;
      }
      break;
    }
  }
  if ((unint64_t)(i - a2) >= 0x100)
  {
    v5 = v156;
    *v155 = 5;
    TBuffer<wchar_t>::resize(v156, v154);
    goto LABEL_263;
  }
  if (*v155 != 4)
  {
    if (*v155 != 5)
      return i;
    TBuffer<wchar_t>::resize(v156, v154);
    v43 = *(_QWORD *)(v156 + 16);
    v44 = (int *)&unk_209A587A8;
    v45 = v156;
    v46 = 11;
    goto LABEL_264;
  }
  v112 = a1[12];
  v114 = *(_QWORD *)(v156 + 8);
  v113 = *(_QWORD *)(v156 + 16);
  if (v113 >= v114)
  {
    if (*(_BYTE *)(v156 + 1048))
    {
      LODWORD(v157[0]) = 0;
      TBuffer<wchar_t>::insert(v156, v113, (int *)v157, 1uLL);
      --*(_QWORD *)(v156 + 16);
      v115 = *(_QWORD *)v156;
    }
    else
    {
      v115 = *(_QWORD *)v156;
      if (v114)
        *(_DWORD *)(v115 + 4 * v114 - 4) = 0;
    }
  }
  else
  {
    v115 = *(_QWORD *)v156;
    *(_DWORD *)(*(_QWORD *)v156 + 4 * v113) = 0;
  }
  if (TLocaleInfo::isKtivMenukad(v112, (unsigned int *)(v115 + 4 * v154)))
  {
    *(_QWORD *)&v157[0] = (char *)&v157[1] + 8;
    *(_OWORD *)((char *)v157 + 8) = xmmword_209A57DD0;
    v158 = 1;
    v124 = a1[12];
    v126 = *(_QWORD *)(v156 + 8);
    v125 = *(_QWORD *)(v156 + 16);
    if (v125 >= v126)
    {
      if (*(_BYTE *)(v156 + 1048))
      {
        v161[0] = 0;
        TBuffer<wchar_t>::insert(v156, v125, v161, 1uLL);
        --*(_QWORD *)(v156 + 16);
        v127 = *(_QWORD *)v156;
      }
      else
      {
        v127 = *(_QWORD *)v156;
        if (v126)
          *(_DWORD *)(v127 + 4 * v126 - 4) = 0;
      }
    }
    else
    {
      v127 = *(_QWORD *)v156;
      *(_DWORD *)(*(_QWORD *)v156 + 4 * v125) = 0;
    }
    TLocaleInfo::ktivMenukadToKtivMaleh(v124, (int *)(v127 + 4 * v154), v157);
    TBuffer<wchar_t>::resize(v156, v154);
    if (*(_QWORD *)&v157[1])
    {
      v132 = TBuffer<wchar_t>::c_str((uint64_t)v157);
      v133 = (int *)v132;
      v134 = 0;
      v135 = *(_QWORD *)(v156 + 16);
      while (*(_DWORD *)(v132 + 4 * v134++))
        ;
      v137 = v134 - 1;
    }
    else
    {
      *v155 = 5;
      v135 = *(_QWORD *)(v156 + 16);
      v133 = (int *)&unk_209A587D8;
      v137 = 6;
    }
    TBuffer<wchar_t>::insert(v156, v135, v133, v137);
    if (v158)
    {
      if (*(_OWORD **)&v157[0] != (_OWORD *)((char *)&v157[1] + 8) && *(_QWORD *)&v157[0] != 0)
        MEMORY[0x20BD149A8]();
    }
  }
  return i;
}

void sub_20978B8C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TLocaleInfo::getGlobalLocaleInfo(TLocaleInfo *this)
{
  unsigned __int8 v1;
  TLocaleInfo *v3;

  {
    v3 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v3);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v3;
  }
  return TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
}

void sub_20978BA38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t unicodeIsJunk(int a1)
{
  _BOOL4 v1;
  unsigned int v2;

  v1 = a1 == 0xFFFF || (a1 - 14) < 0x12;
  v2 = (a1 - 11) < 2 || v1;
  if ((a1 - 1) >= 8)
    return v2;
  else
    return 1;
}

uint64_t unicodeIsDiacritic(unsigned int a1, uint64_t a2)
{
  uint64_t v2;

  if ((int)a1 < 768)
    return 0;
  if (a1 < 0x370)
    return 1;
  if (a1 > 0xE30)
  {
    LODWORD(v2) = a1 - 3655 < 0xFFFFFFF4;
    if (a1 <= 0xE33)
      LODWORD(v2) = a1 == 3633;
    if (a1 <= 0xE4E)
      return v2;
    else
      return 0;
  }
  else
  {
    if (a1 == 1600)
      return 1;
    if (a1 < 0x64B)
      return 0;
    v2 = 1;
    if (a1 >= 0x660 && (a1 & 0xFFFFFFFB) != 0x670)
    {
      if (a1 == 2364)
        return *(_QWORD *)(a2 + 72) > 3uLL;
      return 0;
    }
  }
  return v2;
}

BOOL isComposableDiacriticInContext(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  unsigned __int8 v7;
  TLocaleInfo *v8;

  if ((int)a2 < 768)
    return 0;
  if (a2 < 0x370)
    goto LABEL_4;
  if (a2 > 0xE30)
  {
    if (a2 > 0xE4E)
      return 0;
    if (a2 > 0xE33)
    {
      if (a2 - 3655 > 0xFFFFFFF3)
        return 0;
    }
    else if (a2 != 3633)
    {
      return 0;
    }
  }
  else if (a2 != 1600)
  {
    if (a2 >= 0x64B)
    {
      if (a2 >= 0x660 && (a2 & 0xFFFFFFFB) != 0x670)
      {
        result = 0;
        if (a2 != 2364 || *(_QWORD *)(a3 + 72) <= 3uLL)
          return result;
      }
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  {
    v8 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v8);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v8;
  }
  return a2 - 3585 > 0x5A || TLocaleInfo::composeCharacter(a3, a1, a2) != 0;
}

void sub_20978BC78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TBuffer<wchar_t>::c_str(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= v3)
  {
    if (*(_BYTE *)(a1 + 1048))
    {
      v5 = 0;
      TBuffer<wchar_t>::insert(a1, v2, &v5, 1uLL);
      --*(_QWORD *)(a1 + 16);
      return *(_QWORD *)a1;
    }
    else
    {
      result = *(_QWORD *)a1;
      if (v3)
        *(_DWORD *)(result + 4 * v3 - 4) = 0;
    }
  }
  else
  {
    result = *(_QWORD *)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 4 * v2) = 0;
  }
  return result;
}

uint64_t TSegmenter::getSegment(TSegmenter *this, char *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  unsigned __int8 *SegmentEnd;
  uint64_t v9;
  TAllocator *v10;
  __int32 *v11;
  __int32 *v12;
  _QWORD *v13;
  __int32 *v14;
  __int128 v15;
  _BYTE v16[1024];
  char v17;
  uint64_t v18;
  int v19;
  int v20;

  if (!*a2)
    return 0;
  v4 = (unint64_t)&a2[-*((_QWORD *)this + 7)];
  v5 = *((_QWORD *)this + 8);
  v6 = (uint64_t *)((char *)this + 64);
  if (v4 >= (*((_QWORD *)this + 9) - v5) >> 3)
  {
    v14 = 0;
    std::vector<TSegment const*>::resize((uint64_t)this + 64, 2 * v4 + 2, &v14);
    v5 = *v6;
  }
  result = *(_QWORD *)(v5 + 8 * v4);
  if (!result)
  {
    v19 = 4;
    v18 = 0;
    v14 = (__int32 *)v16;
    v15 = xmmword_209A57DD0;
    v17 = 1;
    SegmentEnd = TSegmenter::findSegmentEnd(this, (unsigned __int8 *)a2, &v19, &v18, (uint64_t)&v14);
    if ((unint64_t)(*((_QWORD *)&v15 + 1) + 1) >> 62)
      v9 = -1;
    else
      v9 = 4 * (*((_QWORD *)&v15 + 1) + 1);
    v10 = (TSegmenter *)((char *)this + 16);
    v11 = (__int32 *)TAllocator::allocate((TSegmenter *)((char *)this + 16), v9);
    if (*((_QWORD *)&v15 + 1) >= (unint64_t)v15)
    {
      if (v17)
      {
        v20 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v14, *((unint64_t *)&v15 + 1), &v20, 1uLL);
        v12 = v14;
        --*((_QWORD *)&v15 + 1);
      }
      else
      {
        v12 = v14;
        if ((_QWORD)v15)
          v14[(_QWORD)v15 - 1] = 0;
      }
    }
    else
    {
      v12 = v14;
      v14[*((_QWORD *)&v15 + 1)] = 0;
    }
    wcscpy(v11, v12);
    v13 = TAllocator::allocate(v10, 32);
    *v13 = v11;
    v13[1] = SegmentEnd;
    v13[2] = v18;
    *((_DWORD *)v13 + 6) = v19;
    *(_QWORD *)(*v6 + 8 * v4) = v13;
    if (v17 && v14 != (__int32 *)v16)
    {
      if (v14)
        MEMORY[0x20BD149A8]();
    }
    return *(_QWORD *)(*v6 + 8 * v4);
  }
  return result;
}

void sub_20978BEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (LOBYTE(STACK[0x418]) && a9 != v9)
  {
    if (a9)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

void std::vector<TSegment const*>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<TSegment const*>::__append((void **)a1, a2 - v3, a3);
  }
}

uint64_t TSegmenter::getPreviousSegment(TSegmenter *this, char *a2)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  char *i;

  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == a2)
    return 0;
  v5 = a2 - v3;
  v6 = *((_QWORD *)this + 8);
  v7 = (*((_QWORD *)this + 9) - v6) >> 3;
  v8 = a2 - v3 - 1;
  if ((unint64_t)(a2 - v3) <= 1)
    v5 = 1;
  while (1)
  {
    if (v8 < v7)
    {
      result = *(_QWORD *)(v6 + 8 * v8);
      if (result)
        break;
    }
    --v8;
    if (!--v5)
      return TSegmenter::getSegment(this, v3);
  }
  for (i = *(char **)(result + 8); i < a2; i = *(char **)(result + 8))
    result = TSegmenter::getSegment(this, i);
  return result;
}

uint64_t TLocaleInfo::isPunct(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v3;
  _BOOL4 v5;
  unsigned int v6;

  if ((int)a2 <= 255)
  {
    if (a2 - 33 < 0xF)
      return 1;
    result = 1;
    if (a2 - 91 > 0x24 || ((1 << (a2 - 91)) & 0x1F0000003FLL) == 0)
    {
      v5 = a2 - 161 < 0x1F || (a2 & 0xFFFFFFDF) == 215;
      return a2 - 58 < 7 || v5;
    }
    return result;
  }
  if (a2 < 0x5BE)
    return 0;
  if (a2 > 0x6E9)
  {
    v3 = a2 - 3631;
    if (a2 >= 0xE2F)
    {
      if (a2 <= 0xE5B)
      {
        if (v3 < 0x21 && ((0x100810001uLL >> v3) & 1) != 0)
          return 1;
        return a2 > 0xE59;
      }
      v6 = a2 >> 4;
      if (a2 >> 4 >= 0x201)
      {
        if (a2 >> 2 <= 0xC3E)
          return v6 < 0x267 || a2 - 12289 < 4 || a2 - 12294 < 0x17 || a2 == 12539;
        if (a2 >= 0xFF01)
        {
          if (v6 < 0xFF1)
            return 1;
          result = 1;
          if ((a2 - 65504 > 0xE || a2 == 65511)
            && (a2 - 65306 > 0x26 || ((1 << (a2 - 26)) & 0x7E0000007FLL) == 0))
          {
            return a2 - 65371 < 0xB;
          }
          return result;
        }
      }
    }
    return 0;
  }
  if (a2 - 1470 >= 0x37)
  {
    if (a2 - 1542 < 0xA)
      return 1;
  }
  else
  {
    result = 1;
    if (((0x60000000000125uLL >> (a2 + 66)) & 1) != 0 || a2 - 1542 < 0xA)
      return result;
  }
  result = 1;
  if (a2 - 1642 >= 4
    && (a2 - 1563 > 4 || ((1 << (a2 - 27)) & 0x19) == 0)
    && (a2 - 1748 > 0x15 || ((1 << (a2 + 44)) & 0x200401) == 0))
  {
    return 0;
  }
  return result;
}

uint64_t isKatakana(int a1)
{
  _BOOL4 v1;
  int v2;
  unsigned int v3;

  v1 = (a1 - 12540) < 3 || (a1 - 65438) < 2;
  v2 = (a1 - 12443) < 4 || v1;
  if ((a1 - 12449) >= 0x56)
    v3 = v2;
  else
    v3 = 1;
  if ((a1 - 65382) >= 0x38)
    return v3;
  else
    return 1;
}

uint64_t isSmallKatakana(int a1)
{
  BOOL v1;
  uint64_t result;

  v1 = (a1 - 12443) >= 4 && (a1 - 12540) >= 3;
  if (!v1 || (a1 - 65382) < 0xB)
    return 1;
  result = 1;
  if (((a1 - 12449) > 0x22 || ((1 << (a1 + 95)) & 0x400000155) == 0)
    && ((a1 - 12515) > 0xB || ((1 << (a1 + 29)) & 0x815) == 0)
    && (a1 - 65438) >= 2)
  {
    return 0;
  }
  return result;
}

BOOL isSmallHiragana(int a1)
{
  _BOOL8 result;
  BOOL v3;

  result = 1;
  v3 = (a1 - 12419) > 0x1B || ((1 << (a1 + 125)) & 0xC000815) == 0;
  if (v3 && ((a1 - 12353) > 8 || ((1 << (a1 - 65)) & 0x155) == 0))
    return (a1 - 12540) < 3;
  return result;
}

void TProp<unsigned long>::~TProp()
{
  JUMPOUT(0x20BD149A8);
}

void std::vector<TSegment const*>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

uint64_t StringIdCollSearchCmp(unsigned __int16 *a1, EnvMgr **a2)
{
  _BYTE *Name;
  _BYTE *v4;
  int v5;
  EnvMgr *v6;
  int v7;

  Name = (_BYTE *)EnvMgr::getName(a2[1], *a1);
  v4 = Name;
  v5 = *((unsigned __int8 *)a2 + 26);
  v6 = *a2;
  if (!v5)
    return ustrcmp(Name, (unsigned __int8 *)v6);
  v7 = strlen((const char *)v6);
  return ustrncmp(v4, (unsigned __int8 *)v6, v7);
}

uint64_t StringIdCollSearchCmpFromStringId(unsigned __int16 *a1, EnvMgr **a2)
{
  EnvMgr *Name;
  __int16 v5;
  char v6;
  EnvMgr *v8;
  __int128 v9;
  __int16 v10;
  char v11;

  Name = (EnvMgr *)EnvMgr::getName(a2[1], *(unsigned __int16 *)a2);
  v5 = *((_WORD *)a2 + 12);
  v6 = *((_BYTE *)a2 + 26);
  v8 = Name;
  v9 = *(_OWORD *)(a2 + 1);
  v10 = v5;
  v11 = v6;
  return StringIdCollSearchCmp(a1, &v8);
}

void MrecInitModule_filesrc_audiosrc(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugSimulateRealTime)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugSimulateRealTime", byte_209A587FE, byte_209A587FE, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugSimulateRealTime = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugSimulateRealTime);
  }
}

uint64_t SnapTime::recordTime(SnapTime *this, char a2, char a3, char a4, char a5)
{
  uint64_t v9;
  int v10;
  __darwin_time_t CurrentMicrosec;
  __darwin_time_t CurrentTickMicrosec;
  uint64_t result;

  if ((a2 & 1) != 0 || gShadowDiagnosticComputeFullTimingStats)
    v9 = mach_absolute_time();
  else
    v9 = 0;
  *(_QWORD *)this = v9;
  if ((a3 & 1) != 0
    || (v10 = gShadowDiagnosticComputeFullTimingStats, gShadowDiagnosticComputeFullTimingStats))
  {
    CurrentMicrosec = ClockTimer::getCurrentMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
    v10 = gShadowDiagnosticComputeFullTimingStats != 0;
  }
  else
  {
    CurrentMicrosec = 0;
  }
  *((_QWORD *)this + 1) = CurrentMicrosec;
  if ((a4 & 1) != 0 || v10)
  {
    CurrentTickMicrosec = ClockTimer::getCurrentTickMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
    v10 = gShadowDiagnosticComputeFullTimingStats != 0;
  }
  else
  {
    CurrentTickMicrosec = 0;
  }
  *((_QWORD *)this + 2) = CurrentTickMicrosec;
  if ((a5 & 1) != 0 || v10)
    result = ClockTimer::getCurrentCpuMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
  else
    result = 0;
  *((_QWORD *)this + 3) = result;
  return result;
}

void MrecInitLibrary_prefilt(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_lexnet_prefilt();
  MrecInitModule_lookahsc_prefilt();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_retlist_prefilt();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_treepref_prefilt();
}

void MrecInitLibrarySet_throughPrefilt(void)
{
  MrecInitLibrarySet_throughGerm();
  MrecInitLibrary_prefilt();
}

uint64_t DgnPrimArray<unsigned char>::DgnPrimArray(uint64_t a1, unsigned int a2)
{
  void *v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a2)
  {
    v5 = 0;
    *(_DWORD *)(a1 + 12) = realloc_array(0, &v5, a2, 0, 0, 1);
    *(_QWORD *)a1 = v5;
  }
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

uint64_t sizeObject<DgnPrimArray<double>>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];

  v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  else
    v3 = 16;
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v2 = v3;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 8);
      v2 = v3;
      if ((int)v6 >= 1)
      {
        v7 = v6 + 1;
        v2 = v3;
        do
          v2 += sizeObject<unsigned long long>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2)
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  return v2;
}

void sub_20978C840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

WaveData *DgnDelete<WaveData>(WaveData *result)
{
  _QWORD *v1;

  if (result)
  {
    WaveData::~WaveData(result);
    return (WaveData *)MemChunkFree(v1, 0);
  }
  return result;
}

unint64_t DgnArray<DgnPrimArray<double>>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 16 * v6, 16 * v5, 16 * v5, 1);
  *(_DWORD *)(a1 + 12) = result >> 4;
  *(_QWORD *)a1 = v8;
  return result;
}

double DgnPrimArray<double>::copyArraySlice(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  double result;

  v8 = *(_DWORD *)(a1 + 12);
  if (a4 <= v8)
  {
    *(_DWORD *)(a1 + 8) = a4;
    if (!a4)
      return result;
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1, a4 - v8, 0);
    *(_DWORD *)(a1 + 8) = a4;
  }
  v9 = *a2;
  v10 = *(double **)a1;
  v11 = a4;
  do
  {
    result = *(double *)(v9 + 8 * a3);
    *v10++ = result;
    ++a3;
    --v11;
  }
  while (v11);
  return result;
}

uint64_t sizeObject<EnergyInfo>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 == 3)
    return 0;
  v2 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v3 = *(unsigned int *)(a1 + 8);
    v4 = 8 * v3;
    if ((int)v3 <= 0)
      v4 = 0;
    v2 += v4;
    if (!a2)
      v2 += 8 * (*(_DWORD *)(a1 + 12) - v3);
  }
  return v2;
}

uint64_t sizeObject<FrameTypeInfo>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 == 3)
    return 0;
  v2 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v3 = *(unsigned int *)(a1 + 8);
    v4 = 4 * v3;
    if ((int)v3 <= 0)
      v4 = 0;
    v2 += v4;
    if (!a2)
      v2 += 4 * (*(_DWORD *)(a1 + 12) - v3);
  }
  return v2;
}

unint64_t DgnPrimArray<int>::copyArraySlice(unint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  v7 = result;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    *(_DWORD *)(result + 8) = a4;
    if (!a4)
      return result;
  }
  else
  {
    result = DgnPrimArray<unsigned int>::reallocElts(result, a4 - v8, 0);
    *(_DWORD *)(v7 + 8) = a4;
  }
  v9 = *a2;
  v10 = *(_DWORD **)v7;
  v11 = a4;
  do
  {
    *v10++ = *(_DWORD *)(v9 + 4 * a3++);
    --v11;
  }
  while (v11);
  return result;
}

void MrecInitModule_hiersc_pel(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugShowHierarchicalPelStats)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowHierarchicalPelStats", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowHierarchicalPelStats = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowHierarchicalPelStats);
  }
}

uint64_t HS_PackedIntGenoneScoringFunction(uint64_t this, unsigned int a2, unsigned int a3, unsigned __int16 *a4, unsigned int *a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (a3)
  {
    v8 = this;
    v9 = 0;
    v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 488) + 32);
    v11 = a2;
    v12 = a3;
    do
    {
      v13 = *(_QWORD *)(v8 + 776) + 120 * (*(_DWORD *)(v8 + 792) - 1);
      if (*(_BYTE *)(*(_QWORD *)(v13 + 104)
                    + *(unsigned int *)(**(_QWORD **)(v13 + 56)
                                      + 4
                                      * (v9
                                                     + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 272) + 4 * v11)))))
      {
        this = OnDemandPelScorer::getPackedIntComponentScore(v8, a2, v9);
        ++*a5;
      }
      else
      {
        this = *(unsigned int *)(v8 + 760);
      }
      v14 = (int)this >> v10;
      if ((int)this >> v10 >= 20000)
        LOWORD(v14) = 20000;
      a4[v9++] = v14;
    }
    while (v12 != v9);
  }
  return this;
}

uint64_t HS_PackedIntPelScoringFunction(const PelScorer *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  char v16;
  uint64_t v17;
  int PackedIntComponentScore;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  uint64_t v24;

  v4 = *((_QWORD *)this + 2);
  v5 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 288) + 2 * a2);
  v24 = v4;
  v6 = (int *)(*(_QWORD *)(v4 + 272) + 4 * v5);
  v7 = *v6;
  LODWORD(v4) = v6[1];
  v8 = 20000;
  v9 = (v4 - v7);
  if ((_DWORD)v4 != v7)
  {
    v11 = 0;
    v12 = *(_QWORD *)(v24 + 360) + 4 * *(unsigned int *)(*(_QWORD *)(v24 + 456) + 4 * a2);
    v13 = *((unsigned __int8 *)this + 131);
    v14 = *(_DWORD *)(*(_QWORD *)(v24 + 488) + 32);
    v15 = 20000;
    v16 = 1;
    do
    {
      v17 = *((_QWORD *)this + 97) + 120 * (*((_DWORD *)this + 198) - 1);
      if (*(_BYTE *)(*(_QWORD *)(v17 + 104)
                    + *(unsigned int *)(**(_QWORD **)(v17 + 56)
                                      + 4
                                      * (v11
                                                     + *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 272) + 4 * v5)))))
      {
        PackedIntComponentScore = OnDemandPelScorer::getPackedIntComponentScore((uint64_t)this, v5, v11);
        ++*a3;
      }
      else
      {
        PackedIntComponentScore = *((_DWORD *)this + 190);
      }
      v19 = *(_DWORD *)(v12 + 4 * v11);
      if (v13)
      {
        v8 = (v19 >> v14) + (PackedIntComponentScore >> v14);
        if ((v16 & 1) == 0)
          goto LABEL_10;
      }
      else
      {
        v8 = (v19 + PackedIntComponentScore) >> v14;
        if ((v16 & 1) == 0)
        {
LABEL_10:
          if (*((_BYTE *)this + 130))
          {
            if (v15 < v8)
              v8 = v15;
          }
          else
          {
            v21 = v8 - v15;
            v20 = v8 - v15 < 0;
            if (v8 >= v15)
              v8 = v15;
            if (v20)
              v21 = -v21;
            if (v21 < *(_DWORD *)(v24 + 512))
              v8 -= *(_DWORD *)(*(_QWORD *)(v24 + 504) + 4 * v21);
          }
        }
      }
      v16 = 0;
      ++v11;
      v15 = v8;
    }
    while (v9 != v11);
  }
  v22 = *((_DWORD *)this + 151) + v8;
  if (v22 >= 20000)
    return 20000;
  else
    return v22;
}

uint64_t HScorer::HScorer(uint64_t a1, const PelMgr *a2, const GenoneClassTree *a3, const VarClassMgr *a4, const FmpeMgr *a5, const NeuralNet *a6, const Imelda *a7, int a8, double a9, double a10, BOOL a11, _QWORD *a12, _QWORD *a13, int a14)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OnDemandPelScorer::OnDemandPelScorer((OnDemandPelScorer *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  *(_QWORD *)v15 = off_24C218FF8;
  *(_OWORD *)(v15 + 704) = 0u;
  *(_OWORD *)(v15 + 728) = 0u;
  *(_OWORD *)(v15 + 744) = 0u;
  v16 = (_QWORD *)(v15 + 776);
  *(_OWORD *)(v15 + 776) = 0u;
  *(_OWORD *)(v15 + 664) = 0u;
  *(_OWORD *)(v15 + 680) = 0u;
  *(_DWORD *)(v15 + 760) = a14;
  v17 = *(_QWORD *)(v15 + 16);
  if (*(_DWORD *)(v17 + 12) != 1)
    return a1;
  *(_DWORD *)(a1 + 760) = a14 << *(_DWORD *)(*(_QWORD *)(v17 + 488) + 32);
  v18 = *(unsigned int *)(v17 + 620);
  *(_DWORD *)(a1 + 792) = v18;
  if (!(_DWORD)v18)
  {
    v19 = 0;
LABEL_6:
    if (v19 < v18)
    {
      v20 = v18 - v19;
      v21 = 120 * v19;
      do
      {
        v22 = *v16 + v21;
        *(_OWORD *)(v22 + 104) = 0uLL;
        *(_OWORD *)(v22 + 88) = 0uLL;
        *(_QWORD *)(v22 + 32) = 0x3E8000F4240;
        v21 += 120;
        --v20;
      }
      while (v20);
    }
    goto LABEL_9;
  }
  DgnArray<HScorerLevel>::reallocElts(v15 + 776, v18, 0);
  v19 = *(_DWORD *)(a1 + 784);
  if (v19 <= v18)
    goto LABEL_6;
  DgnArray<HScorerLevel>::destructAt((uint64_t)v16, v18, v19 - v18);
LABEL_9:
  *(_DWORD *)(a1 + 784) = v18;
  if (*(int *)(a1 + 792) >= 1)
  {
    v23 = 0;
    v24 = 0;
    do
    {
      HScorerLevel::init(*(_QWORD *)(a1 + 776) + v23, *(const PelMgr **)(a1 + 16), v24, *(_BYTE *)(a1 + 131), (const HScorer *)a1, *(_DWORD *)(*a12 + 4 * v24), *(_DWORD *)(*a13 + 4 * v24));
      ++v24;
      v23 += 120;
    }
    while (v24 < *(int *)(a1 + 792));
  }
  return a1;
}

{
  return HScorer::HScorer(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_20978CF54(_Unwind_Exception *a1)
{
  PelScoreCache **v1;
  uint64_t v2;
  uint64_t v3;

  DgnArray<HScorerLevel>::releaseAll(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v1 + 88));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v1 + 85));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  OnDemandPelScorer::~OnDemandPelScorer(v1);
  _Unwind_Resume(a1);
}

unint64_t HScorerLevel::init(unint64_t this, const PelMgr *a2, unsigned int a3, char a4, const HScorer *a5, int a6, unsigned int a7)
{
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;

  v9 = (_QWORD *)this;
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = a3;
  *(_BYTE *)(this + 20) = a4;
  *(_QWORD *)(this + 80) = a5;
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 33);
  v10 = *((_DWORD *)a2 + 155);
  if (v10)
  {
    v11 = *(_DWORD *)(*((_QWORD *)a2 + 80) + 4 * a3);
    *(_DWORD *)(this + 24) = v11;
    v12 = *((_QWORD *)a2 + 86) + 16 * a3;
    *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 78) + 16 * a3;
    *(_QWORD *)(this + 64) = v12;
    v13 = *(_DWORD *)(this + 100);
    v14 = v11;
    if (v11 > v13)
    {
      this = DgnPrimArray<unsigned long long>::reallocElts(this + 88, v11 - v13, 0);
      v14 = *((_DWORD *)v9 + 6);
    }
    *((_DWORD *)v9 + 24) = v11;
    if (*((_DWORD *)v9 + 29) >= v14)
    {
      v10 = v14;
    }
    else
    {
      v16 = 0;
      this = realloc_array((_QWORD *)v9[13], &v16, v14, *((unsigned int *)v9 + 28), *((unsigned int *)v9 + 28), 1);
      *((_DWORD *)v9 + 29) = this;
      v9[13] = v16;
      v10 = *((_DWORD *)v9 + 6);
    }
  }
  else
  {
    v14 = 0;
    *(_DWORD *)(this + 24) = 0;
    *(_DWORD *)(this + 96) = 0;
    *(_QWORD *)(this + 56) = 0;
    *(_QWORD *)(this + 64) = 0;
  }
  *((_DWORD *)v9 + 28) = v14;
  *((_DWORD *)v9 + 8) = a6;
  *((_DWORD *)v9 + 9) = ((double)a7 * 0.01 * (double)v10 + 0.5);
  if (*(_DWORD *)(*v9 + 620))
    v15 = *(_QWORD *)(*v9 + 656) + 24 * *((unsigned int *)v9 + 2);
  else
    v15 = 0;
  v9[9] = v15;
  return this;
}

void HScorer::~HScorer(PelScoreCache **this)
{
  *this = (PelScoreCache *)off_24C218FF8;
  DgnArray<HScorerLevel>::releaseAll((uint64_t)(this + 97));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 88));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 85));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 83));
  OnDemandPelScorer::~OnDemandPelScorer(this);
}

{
  HScorer::~HScorer(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t (*HScorer::getGenoneScoringFunction(HScorer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(uint64_t this, unsigned int a2, unsigned int a3, unsigned __int16 *a4, unsigned int *a5)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v9 + 16) == 1)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/hiersc.cpp", 418, (uint64_t)"pel/hiersc", 1, (uint64_t)"%.500s", a7, a8, (char)"MIC models");
    v9 = *((_QWORD *)this + 2);
  }
  if (*(_WORD *)(v9 + 536))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/hiersc.cpp", 420, (uint64_t)"pel/hiersc", 1, (uint64_t)"%.500s", a7, a8, (char)"shortlists");
    v9 = *((_QWORD *)this + 2);
  }
  if (*(_DWORD *)(v9 + 12) != 1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/hiersc.cpp", 422, (uint64_t)"pel/hiersc", 1, (uint64_t)"%.500s", a7, a8, (char)"a scoring type other than PackedInt");
  return HS_PackedIntGenoneScoringFunction;
}

uint64_t (*HScorer::getPelScoringFunction(HScorer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(const PelScorer *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v9 + 16) == 1)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/hiersc.cpp", 481, (uint64_t)"pel/hiersc", 1, (uint64_t)"%.500s", a7, a8, (char)"MIC models");
    v9 = *((_QWORD *)this + 2);
  }
  if (*(_WORD *)(v9 + 536))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/hiersc.cpp", 483, (uint64_t)"pel/hiersc", 1, (uint64_t)"%.500s", a7, a8, (char)"shortlists");
    v9 = *((_QWORD *)this + 2);
  }
  if (*(_DWORD *)(v9 + 12) != 1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/hiersc.cpp", 485, (uint64_t)"pel/hiersc", 1, (uint64_t)"%.500s", a7, a8, (char)"a scoring type other than PackedInt");
  return HS_PackedIntPelScoringFunction;
}

void HScorer::beginPelSyncRecog(HScorer *this, uint64_t a2, const AdaptConfig *a3, const CTFTMgr *a4, BOOL a5, char a6, char a7, double a8)
{
  *((_QWORD *)this + 94) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  OnDemandPelScorer::beginPelSyncRecog(this, a2, a3, a4, 1, a6, a7, a8, 0.0);
}

int64x2_t HScorer::beginPelFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int64x2_t *v19;
  uint64_t v20;
  int *v21;
  _QWORD *v22;
  int64x2_t result;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;

  OnDemandPelScorer::beginPelFrame();
  v27 = 0u;
  v28 = 0u;
  SnapTime::recordTime((SnapTime *)&v27, 1, 0, 0, 0);
  v13 = a1 + 216;
  v14 = *(_QWORD *)(a1 + 96);
  if (v14 && *(_DWORD *)(*(_QWORD *)(v14 + 32) + 16) == **(_DWORD **)(v14 + 32))
  {
    LinearTransform::doTransform(*(int **)(*(_QWORD *)(a1 + 32) + 224), a4, a1 + 216, v8, v9, v10, v11, v12);
    v15 = a4;
    a4 = 0;
  }
  else
  {
    v15 = a1 + 216;
    v13 = a4;
  }
  v16 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v16 + 8) == *(_DWORD *)v16)
  {
    if (*(_DWORD *)(v16 + 56) == 1)
    {
      if (a5)
        ++*(_DWORD *)(a5 + 32);
      v17 = *(int **)(v16 + 64);
      if (a4)
      {
LABEL_10:
        LinearTransform::doTransform(v17, a4, v15, v8, v9, v10, v11, v12);
        a4 = 0;
LABEL_16:
        v18 = v13;
        goto LABEL_18;
      }
LABEL_15:
      LinearTransform::doTransform(v17, v13, v15, v8, v9, v10, v11, v12);
      goto LABEL_16;
    }
    if (*(_DWORD *)(v16 + 96))
    {
      if (a5)
        ++*(_DWORD *)(a5 + 32);
      v17 = *(int **)(v16 + 104);
      if (a4)
        goto LABEL_10;
      goto LABEL_15;
    }
  }
  v18 = v15;
  v15 = v13;
LABEL_18:
  v19 = (int64x2_t *)(a1 + 728);
  v20 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v20 + 12) == *(_DWORD *)v20)
  {
    if (*(_DWORD *)(v20 + 136) == 1)
    {
      v21 = *(int **)(v20 + 144);
      if (a4)
      {
LABEL_21:
        LinearTransform::doTransform(v21, a4, v18, v8, v9, v10, v11, v12);
        a4 = 0;
        goto LABEL_26;
      }
      goto LABEL_24;
    }
    if (*(_DWORD *)(v20 + 176))
    {
      v21 = *(int **)(v20 + 184);
      if (a4)
        goto LABEL_21;
LABEL_24:
      LinearTransform::doTransform(v21, v15, v18, v8, v9, v10, v11, v12);
      goto LABEL_26;
    }
  }
  v18 = v15;
LABEL_26:
  if (a4)
    v22 = (_QWORD *)a4;
  else
    v22 = (_QWORD *)v18;
  HScorer::computeHierarchy(a1, v22, (_QWORD *)(a1 + 720), v8, v9, v10, v11, v12);
  v25 = 0u;
  v26 = 0u;
  SnapTime::recordTime((SnapTime *)&v25, 1, 0, 0, 0);
  result = vaddq_s64(*v19, vsubq_s64(v25, v27));
  v24 = vaddq_s64(*(int64x2_t *)(a1 + 744), vsubq_s64(v26, v28));
  *v19 = result;
  *(int64x2_t *)(a1 + 744) = v24;
  return result;
}

void HScorer::computeHierarchy(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 12) != 1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/hiersc.cpp", 813, (uint64_t)"pel/hiersc", 1, (uint64_t)"%.500s", a7, a8, (char)"a scoring type other than PackedInt");
  v11 = *(unsigned int *)(a1 + 792);
  if ((int)v11 >= 1)
  {
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 776);
    do
    {
      v14 = *(unsigned int *)(v13 + 120 * v12 + 24);
      if ((_DWORD)v14)
      {
        v15 = 0;
        v16 = v13 + 120 * v12;
        v17 = *(_QWORD *)(v16 + 88);
        v18 = *(_QWORD *)(v16 + 104);
        v19 = (_DWORD *)(v17 + 4);
        do
        {
          *(v19 - 1) = 20046;
          *v19 = v15;
          *(_BYTE *)(v18 + v15++) = 0;
          v19 += 2;
        }
        while (v14 != v15);
      }
      ++v12;
    }
    while (v12 != v11);
    v20 = 0;
    v21 = 0;
    do
    {
      HScorerLevel::computeHierarchy(*(_QWORD *)(a1 + 776) + v20, a2, a3, a4, a5, a6, a7, a8);
      ++v21;
      v20 += 120;
    }
    while (v21 < *(int *)(a1 + 792));
  }
}

double HScorer::endPelFrame(OnDemandPelScorer *this, int a2, PelStats *a3)
{
  *(int64x2_t *)((char *)a3 + 104) = vaddq_s64(*(int64x2_t *)((char *)a3 + 104), *(int64x2_t *)((char *)this + 728));
  *(int64x2_t *)((char *)a3 + 120) = vaddq_s64(*(int64x2_t *)((char *)a3 + 120), *(int64x2_t *)((char *)this + 744));
  *((_QWORD *)a3 + 21) += *((_QWORD *)this + 90);
  *((_QWORD *)this + 94) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  return OnDemandPelScorer::endPelFrame(this, a2, a3);
}

void HScorerLevel::computeHierarchy(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  unsigned int v19;
  int HierarchyComponentScorePackedInt;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;

  if (*(_DWORD *)(*(_QWORD *)a1 + 12) != 1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/hiersc.cpp", 1142, (uint64_t)"pel/hiersc", 1, (uint64_t)"%.500s", a7, a8, (char)"scoring type other than packed integer");
  v11 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v11)
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 776) + 120 * (v11 - 1);
  else
    v12 = 0;
  v13 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 620))
    v14 = (_QWORD *)(*(_QWORD *)(v13 + 672) + 16 * v11);
  else
    v14 = 0;
  v15 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = *(_DWORD *)(*(_QWORD *)(v13 + 488) + 32);
    v18 = (_QWORD *)(a1 + 88);
    v19 = 0x7FFF;
    do
    {
      if (!v12 || *(_BYTE *)(*(_QWORD *)(v12 + 104) + *(unsigned int *)(**(_QWORD **)(v12 + 56) + 4 * v16)))
      {
        ++*a3;
        HierarchyComponentScorePackedInt = HScorerLevel::getHierarchyComponentScorePackedInt(a1, a2, v16);
        v21 = *(_DWORD *)(*v14 + 4 * v16);
        if (*(_BYTE *)(a1 + 20))
          v22 = (v21 >> v17) + (HierarchyComponentScorePackedInt >> v17);
        else
          v22 = (v21 + HierarchyComponentScorePackedInt) >> v17;
        if (v19 >= v22)
          v19 = v22;
        *(_DWORD *)(*v18 + 8 * v16) = v22;
      }
      ++v16;
    }
    while (v16 != v15);
    v23 = 0;
    v24 = 0;
    v25 = *(_DWORD *)(a1 + 32) + v19;
    do
    {
      if ((!v12 || *(_BYTE *)(*(_QWORD *)(v12 + 104) + *(unsigned int *)(**(_QWORD **)(v12 + 56) + 4 * v23)))
        && *(_DWORD *)(*v18 + 8 * v23) <= v25)
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 104) + v23) = 1;
        ++v24;
      }
      ++v23;
    }
    while (v23 != v15);
    v26 = *(_DWORD *)(a1 + 36);
    if (v24 > v26)
    {
      QuickFindFirstK::quickfindFirstK((uint64_t *)(a1 + 88), 0, v15 - 1, v26 - 1);
      v27 = *(unsigned int *)(a1 + 36);
      v28 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v28)
        bzero(*(void **)(a1 + 104), v28);
      if ((_DWORD)v27)
      {
        v29 = *(_QWORD *)(a1 + 104);
        v30 = (unsigned int *)(*(_QWORD *)(a1 + 88) + 4);
        do
        {
          v31 = *v30;
          v30 += 2;
          *(_BYTE *)(v29 + v31) = 1;
          --v27;
        }
        while (v27);
      }
    }
  }
}

void HScorer::computeScoreForActivePelsThisFrame(HScorer *this, const BitArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/hiersc.cpp", 852, (uint64_t)"pel/hiersc", 1, (uint64_t)"%.500s", a7, a8, (char)"computeScoreForActivePels");
}

uint64_t HScorerLevel::getHierarchyComponentScorePackedInt(uint64_t result, _QWORD *a2, int a3)
{
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;

  v3 = *(unsigned int *)(result + 28);
  if ((int)v3 < 1)
    return 0;
  v4 = (_QWORD **)result;
  LODWORD(result) = 0;
  v5 = *v4[9] + *((unsigned int *)v4[9] + 4) + (*((_DWORD *)*v4 + 37) * a3);
  v6 = v3 + 1;
  v7 = 2 * v3 - 1;
  do
  {
    v8 = *(unsigned __int8 *)(*a2 + (v6 - 2)) - *(unsigned __int8 *)(v5 + v7 - 1);
    result = result + v8 * *(unsigned __int8 *)(v5 + v7) * v8;
    --v6;
    v7 -= 2;
  }
  while (v6 > 1);
  return result;
}

uint64_t QuickFindFirstK::quickfindFirstK(uint64_t *a1, uint64_t a2, signed int a3, int a4)
{
  int v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  uint64_t result;
  int v11;

  v5 = a3;
  LODWORD(v6) = a2;
  v7 = a1;
  v8 = a3 - a2;
  if (a3 < (int)a2)
    ++v8;
  v9 = a2 + (v8 >> 1);
  while (1)
  {
    result = QuickFindFirstK::quickfindFirstKpartition(a1, a2, a3, v9);
    if ((_DWORD)result == a4)
      break;
    if ((int)result <= a4)
    {
      v6 = (result + 1);
    }
    else
    {
      v5 = result - 1;
      v6 = v6;
    }
    v11 = v5 - v6;
    if (v5 < (int)v6)
      ++v11;
    v9 = v6 + (v11 >> 1);
    a1 = v7;
    a2 = v6;
    a3 = v5;
  }
  return result;
}

uint64_t QuickFindFirstK::quickfindFirstKpartition(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (unsigned int *)(*a1 + 8 * a4);
  v5 = *v4;
  if (a4 != a3)
  {
    v6 = *(_QWORD *)v4;
    *(_QWORD *)v4 = *(_QWORD *)(*a1 + 8 * a3);
    *(_QWORD *)(*a1 + 8 * a3) = v6;
  }
  if ((int)a2 >= (int)a3)
  {
    v7 = a2;
  }
  else
  {
    v7 = a2;
    do
    {
      v8 = *a1;
      v9 = a2;
      if (*(_DWORD *)(*a1 + 8 * a2) < v5)
      {
        if ((_DWORD)a2 != (_DWORD)v7)
        {
          v10 = *(_QWORD *)(v8 + 8 * v7);
          *(_QWORD *)(v8 + 8 * v7) = *(_QWORD *)(v8 + 8 * a2);
          *(_QWORD *)(*a1 + 8 * a2) = v10;
        }
        v7 = (v7 + 1);
      }
      LODWORD(a2) = a2 + 1;
    }
    while (a3 != v9 + 1);
  }
  if ((_DWORD)v7 != a3)
  {
    v11 = *(_QWORD *)(*a1 + 8 * a3);
    *(_QWORD *)(*a1 + 8 * a3) = *(_QWORD *)(*a1 + 8 * v7);
    *(_QWORD *)(*a1 + 8 * v7) = v11;
  }
  return v7;
}

_QWORD *DgnArray<HScorerLevel>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnArray<HScorerLevel>::destructAt(a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnArray<HScorerLevel>::destructAt(uint64_t result, int a2, int a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a3 + a2;
  if (a3 + a2 > a2)
  {
    v4 = (_QWORD *)result;
    v5 = v3;
    v6 = a2;
    v7 = 120 * v3;
    do
    {
      --v5;
      v8 = *v4 + v7;
      *(_QWORD *)(v8 - 120) = 0;
      *(_OWORD *)(v8 - 80) = 0u;
      *(_OWORD *)(v8 - 64) = 0u;
      *(_QWORD *)(v8 - 48) = 0;
      DgnPrimArray<unsigned int>::~DgnPrimArray(v8 - 16);
      result = DgnIArray<Utterance *>::~DgnIArray(v8 - 32);
      v7 -= 120;
    }
    while (v5 > v6);
  }
  return result;
}

unint64_t DgnArray<HScorerLevel>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 120 * v6, 120 * v5, 120 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x78;
  *(_QWORD *)a1 = v8;
  return result;
}

BOOL DSMHandle::open(DSMHandle *this, const DgnString *a2, char **a3, const char **a4, unint64_t a5, int a6, int a7)
{
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  FileSpec *v18;
  const char *v19;
  const char *v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  off_t st_size;
  _BOOL8 v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  statvfs v43;
  stat v44;
  char *v45;
  int v46;

  v14 = *((_DWORD *)a2 + 2);
  v15 = MemChunkAlloc(8uLL, 0);
  v16 = v15;
  v17 = &unk_24C215608;
  if (v14 < 2)
    v17 = &unk_24C214EE0;
  *v15 = (uint64_t)v17;
  v18 = FileSpec::FileSpec((FileSpec *)&v45);
  if (*((_DWORD *)a2 + 2))
    v19 = *(const char **)a2;
  else
    v19 = &byte_209A88803;
  if (*((_DWORD *)a4 + 2))
    v20 = *a4;
  else
    v20 = &byte_209A88803;
  FileSpec::fillFromPathAndName(v18, v19, v20);
  if (a6)
    v21 = 2;
  else
    v21 = 0;
  if (a7)
    v22 = v21 | 0x200;
  else
    v22 = v21;
  if (v46)
    v23 = v45;
  else
    v23 = &byte_209A88803;
  v24 = (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*v16 + 16))(v16, v23, v22);
  *(_DWORD *)this = v24;
  if (a7)
  {
    if (v24 == -1)
    {
      if (*((_DWORD *)a3 + 2))
        v27 = *a3;
      else
        v27 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 113, (uint64_t)"mrecutil/dsmsetdata", 1, (uint64_t)"%.500s %.500s", v25, v26, (char)v27);
      v24 = *(_DWORD *)this;
    }
    if (fstat(v24, &v44) < 0)
    {
      if (*((_DWORD *)a3 + 2))
        v30 = *a3;
      else
        v30 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 118, (uint64_t)"mrecutil/dsmsetdata", 3, (uint64_t)"%.500s %.500s", v28, v29, (char)v30);
    }
    st_size = v44.st_size;
    v32 = v44.st_size == 0;
    if (!v44.st_size)
    {
      fstatvfs(*(_DWORD *)this, &v43);
      if (v43.f_bsize * v43.f_bavail <= a5)
      {
        if (v46)
          v33 = v45;
        else
          v33 = &byte_209A88803;
        (*(void (**)(uint64_t *, char *))(*v16 + 24))(v16, v33);
        if (*((_DWORD *)a3 + 2))
          v36 = *a3;
        else
          v36 = &byte_209A88803;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 130, (uint64_t)"mrecutil/dsmsetdata", 1, (uint64_t)"%.500s %.500s", v34, v35, (char)v36);
      }
    }
    v37 = ftruncate(*(_DWORD *)this, a5);
    if (st_size || !v37)
    {
      if (!v37)
        goto LABEL_50;
    }
    else
    {
      if (v46)
        v40 = v45;
      else
        v40 = &byte_209A88803;
      (*(void (**)(uint64_t *, char *))(*v16 + 24))(v16, v40);
    }
    if (*((_DWORD *)a3 + 2))
      v41 = *a3;
    else
      v41 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 140, (uint64_t)"mrecutil/dsmsetdata", 1, (uint64_t)"%.500s %.500s", v38, v39, (char)v41);
  }
  else
  {
    v32 = 0;
  }
LABEL_50:
  (*(void (**)(uint64_t *))*v16)(v16);
  MemChunkFree(v16, 0);
  FileSpec::~FileSpec((FileSpec *)&v45);
  return v32;
}

void sub_20978DF08(_Unwind_Exception *a1)
{
  uint64_t v1;

  FileSpec::~FileSpec((FileSpec *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL DSMMappedPtr::remap(DSMMappedPtr *this, int a2, int a3, BOOL *a4)
{
  int v4;

  *a4 = 0;
  if (a3)
    v4 = 3;
  else
    v4 = 1;
  return mprotect(*(void **)this, *((_QWORD *)this + 1), v4) == 0;
}

uint64_t DSMGlobalRecord::copyAsShared(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;

  if ((uint64_t *)result != a2)
  {
    *(_DWORD *)(result + 40) = a3;
    __dmb(0xBu);
    v3 = *a2;
    v4 = a2[1];
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = v4;
    v5 = a2[2];
    v6 = a2[3];
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = *((_DWORD *)a2 + 8);
    v8 = *((_DWORD *)a2 + 9);
    *(_DWORD *)(result + 32) = v7;
    *(_DWORD *)(result + 36) = v8;
    v9 = *((_DWORD *)a2 + 11);
    *(_DWORD *)(result + 44) = v9;
    *(_DWORD *)(result + 48) = *((_DWORD *)a2 + 10) ^ v4 ^ v3 ^ v5 ^ v6 ^ ((v4 ^ v3 ^ v5 ^ v6) >> 32) ^ v7 ^ v8 ^ v9;
    __dmb(0xBu);
    *(_DWORD *)(result + 40) = *((_DWORD *)a2 + 10);
  }
  return result;
}

uint64_t DSMGlobalRecord::reset(uint64_t this)
{
  int v1;

  *(_DWORD *)(this + 40) = 0;
  __dmb(0xBu);
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = -1;
  *(_QWORD *)(this + 32) = 0;
  v1 = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 44) = 0;
  *(_DWORD *)(this + 48) = v1;
  return this;
}

BOOL DSMSetData::checkMaybeResetGlobalRecord(DSMSetData *this, DSMGlobalRecord *a2)
{
  int8x16_t v3;
  int v4;
  __int32 v5;
  int v6;

  if (*((_DWORD *)a2 + 10) == 2)
    DSMGlobalRecord::isProcessAlive(*((DSMGlobalRecord **)a2 + 3));
  v3 = veorq_s8(*(int8x16_t *)a2, *((int8x16_t *)a2 + 1));
  *(int8x8_t *)v3.i8 = veor_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
  v4 = *((_DWORD *)a2 + 12);
  v5 = *((_DWORD *)a2 + 8) ^ *((_DWORD *)a2 + 10) ^ *((_DWORD *)a2 + 9) ^ *((_DWORD *)a2 + 11) ^ v3.i32[1] ^ v3.i32[0];
  if (v5 != v4)
  {
    *((_DWORD *)a2 + 10) = 1;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = -1;
    *((_QWORD *)a2 + 4) = 0;
    v6 = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 11) = 0;
    *((_DWORD *)a2 + 12) = v6;
  }
  return v5 != v4;
}

BOOL DSMGlobalRecord::isProcessAlive(DSMGlobalRecord *this)
{
  return !kill((pid_t)this, 0) || *__error() == 1;
}

void DSMSetData::refMaybeCreateSetRecordBlobEx(DSMSetData *this)
{
  uint64_t *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  const char *v7;
  DgnString *v8;
  char *v9;
  char v10;
  int v11;
  unsigned __int8 *v12;
  unint64_t v13;
  int v14;
  ClockTimer *v15;
  int v16;
  __darwin_time_t PlatformAbsoluteTime;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BOOL4 v26;
  _QWORD *v27;
  const DgnString *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  unint64_t i;
  uint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t j;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  sem_t **v53;
  int v54;
  const DgnString *v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 v58;
  char *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  size_t v64;
  _QWORD *v65;
  int v66;
  __darwin_time_t v67;
  char *v68;
  uint64_t v69;
  size_t v70;
  int v71;
  uint64_t v72;
  _BOOL4 v73;
  uint64_t v74[4];
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  char *v88;
  int v89;

  v2 = (uint64_t *)((char *)this + 272);
  v3 = *((_DWORD *)this + 71);
  if (v3 <= 0x3FF)
    DgnArray<DSMLocalRecord>::reallocElts((uint64_t)this + 272, 1024 - v3, 0);
  v4 = *((_DWORD *)this + 70);
  if (v4 <= 0x400)
  {
    if (v4 != 1024)
    {
      v5 = 80 * v4 + 72;
      do
      {
        v6 = (_DWORD *)(*v2 + v5);
        *((_QWORD *)v6 - 3) = -1;
        *((_QWORD *)v6 - 2) = -1;
        *((_QWORD *)v6 - 1) = 0;
        *(v6 - 8) = 0;
        __dmb(0xBu);
        *((_QWORD *)v6 - 9) = 0;
        *((_QWORD *)v6 - 8) = 0;
        *((_QWORD *)v6 - 7) = -1;
        *((_QWORD *)v6 - 6) = -1;
        *((_QWORD *)v6 - 5) = 0;
        *(v6 - 7) = 0;
        *v6 = 0;
        v5 += 80;
      }
      while (v5 != 81992);
    }
  }
  else
  {
    DgnArray<DSMLocalRecord>::destructAt(v2, 1024, v4 - 1024);
  }
  *((_DWORD *)this + 70) = 1024;
  DgnString::DgnString((DgnString *)&v80, (DSMSetData *)((char *)this + 16));
  DgnString::operator+=((DgnString *)&v80, "-lock");
  if ((_DWORD)v81)
    v7 = v80;
  else
    v7 = &byte_209A88803;
  DgnSharedLock::create((DSMSetData *)((char *)this + 112), v7);
  DgnString::~DgnString((DgnString *)&v80);
  v8 = DgnString::DgnString((DgnString *)&v88, (DSMSetData *)((char *)this + 16));
  DgnString::operator+=(v8, "-record");
  v85 = 0;
  __dmb(0xBu);
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = -1;
  v84 = 0;
  v86 = 0;
  v87 = v85;
  v9 = v88;
  if (!v89)
    v9 = &byte_209A88803;
  v10 = *v9;
  if (*v9)
  {
    v11 = 0;
    v12 = (unsigned __int8 *)(v9 + 1);
    do
    {
      HIDWORD(v13) = v11;
      LODWORD(v13) = v11;
      v11 = (v13 >> 19) + v10;
      v14 = *v12++;
      v10 = v14;
    }
    while (v14);
  }
  else
  {
    v11 = 0;
  }
  v15 = (ClockTimer *)getpid();
  v16 = (int)v15;
  PlatformAbsoluteTime = ClockTimer::getPlatformAbsoluteTime(v15);
  v18 = sysconf(29);
  v19 = v16;
  v20 = -1640531527 * v11;
  if (v18 <= 0x10000)
    v21 = 0x10000;
  else
    v21 = v18;
  v22 = (2 * v21);
  v74[0] = PlatformAbsoluteTime;
  v74[1] = v22;
  v74[2] = v22;
  v74[3] = v19;
  v75 = 0;
  v76 = v20;
  v77 = 4;
  v78 = 1;
  v79 = ((PlatformAbsoluteTime ^ (unint64_t)v19) >> 32) ^ PlatformAbsoluteTime ^ v19 ^ 4 ^ v20 ^ 1;
  v72 = (uint64_t)this + 112;
  v73 = DgnSharedLock::acquire((sem_t **)this + 14, 0xEA60u);
  if (v73)
  {
    if (*((_DWORD *)this + 6))
      v25 = (char *)*((_QWORD *)this + 2);
    else
      v25 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 364, (uint64_t)"mrecutil/dsmsetdata", 5, (uint64_t)"%.500s", v23, v24, (char)v25);
  }
  v71 = -1;
  v26 = DSMHandle::open((DSMHandle *)&v71, this, &v88, (const char **)&v88, (2 * v21), 1, 1);
  v27 = mmap(0, (2 * v21), 3, 1, v71, 0);
  v31 = v27;
  v69 = (uint64_t)v27;
  v70 = (2 * v21);
  if (v27 == (_QWORD *)-1 && v26)
  {
    DSMHandle::unlink((const char **)this, (const char **)&v88, v28);
LABEL_32:
    if (v89)
      LOBYTE(v33) = (_BYTE)v88;
    else
      v33 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 384, (uint64_t)"mrecutil/dsmsetdata", 2, (uint64_t)"%.500s %.500s", v29, v30, (char)v33);
    v31 = (_QWORD *)v69;
    goto LABEL_36;
  }
  if (v27 == (_QWORD *)-1)
    goto LABEL_32;
LABEL_36:
  v66 = v20;
  v34 = v21 >> 4;
  v67 = PlatformAbsoluteTime;
  v68 = (char *)v31 + v21;
  if (v26)
  {
    v35 = v26;
    DSMGlobalRecord::copyAsShared((uint64_t)v31, v74, 2);
    v36 = (uint64_t)(v31 + 7161);
    for (i = 1024; i > 1; --i)
    {
      DSMGlobalRecord::copyAsShared(v36, (uint64_t *)&v80, 0);
      v36 -= 56;
    }
    v38 = v21 >> 4;
    v39 = (_OWORD *)((char *)v31 + v21);
    do
    {
      *v39++ = xmmword_209A58830;
      --v38;
    }
    while (v38);
  }
  else
  {
    v40 = v31[1];
    v41 = v31[2];
    v42 = *v31 ^ v31[3] ^ v40 ^ v41;
    v43 = HIDWORD(v42) ^ v42;
    v44 = *((_DWORD *)v31 + 8);
    v45 = *((_DWORD *)v31 + 9);
    v46 = *((_DWORD *)v31 + 11);
    if ((v44 ^ *((_DWORD *)v31 + 10) ^ v45 ^ v46 ^ v43) == *((_DWORD *)v31 + 12)
      && *((_DWORD *)v31 + 10) == 4
      && v40 == v22
      && v41 == v22)
    {
      v35 = 0;
      *((_DWORD *)v31 + 11) = v46 + 1;
      *((_DWORD *)v31 + 12) = v44 ^ *((_DWORD *)v31 + 10) ^ v45 ^ (v46 + 1) ^ v43;
    }
    else
    {
      v35 = 0;
      v27 = (_QWORD *)DSMGlobalRecord::copyAsShared((uint64_t)v31, v74, 2);
    }
    for (j = 7; j != 7168; j += 7)
      LOBYTE(v27) = DSMSetData::checkMaybeResetGlobalRecord((DSMSetData *)v27, (DSMGlobalRecord *)&v31[j]);
  }
  v48 = 0;
  while (*(_QWORD *)((char *)v31 + v21) != -1)
  {
    ++v48;
    v21 += 16;
    if (v34 == v48)
    {
      LODWORD(v48) = v34;
      break;
    }
  }
  v49 = v48 - ((_DWORD)v48 == (_DWORD)v34);
  v50 = (uint64_t *)&v68[16 * v49];
  *v50 = v19;
  v50[1] = v67;
  *((_QWORD *)this + 36) = v19;
  *((_DWORD *)this + 74) = v49;
  v51 = v31[3];
  v52 = *v31;
  v53 = (sem_t **)v72;
  if (v72)
  {
    if (!v73)
    {
      *(_QWORD *)(v72 + 8) = 0;
      sem_post(*v53);
    }
    v72 = 0;
  }
  v54 = mprotect((void *)v69, v70, 1);
  if (v54)
    v58 = v35;
  else
    v58 = 0;
  if (v58)
  {
    DSMHandle::unlink((const char **)this, (const char **)&v88, v55);
  }
  else if (!v54)
  {
    goto LABEL_68;
  }
  if (v89)
    LOBYTE(v59) = (_BYTE)v88;
  else
    v59 = &byte_209A88803;
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 466, (uint64_t)"mrecutil/dsmsetdata", 2, (uint64_t)"%.500s %.500s", v56, v57, (char)v59);
LABEL_68:
  v60 = *v2;
  *(_QWORD *)(v60 + 24) = pthread_self();
  v61 = v71;
  v71 = -1;
  v62 = *(_DWORD *)(v60 + 48);
  if (v62 != -1)
    close(v62);
  *(_DWORD *)(v60 + 48) = v61;
  v63 = v69;
  v64 = v70;
  v69 = -1;
  if (v63 != -1)
    munmap(*(void **)(v60 + 56), *(_QWORD *)(v60 + 64));
  *(_QWORD *)(v60 + 56) = v63;
  *(_QWORD *)(v60 + 64) = v64;
  *(_DWORD *)(v60 + 72) = 0;
  *(_DWORD *)(v60 + 40) = 8;
  *(_DWORD *)(v60 + 44) = v66;
  *(_QWORD *)v60 = v52;
  *(_QWORD *)(v60 + 8) = v22;
  *(_QWORD *)(v60 + 16) = v51;
  *(_QWORD *)(v60 + 32) = 0x400000000;
  if (*((_DWORD *)this + 66) <= *((_DWORD *)this + 67))
  {
    v65 = (_QWORD *)*((_QWORD *)this + 32);
    if (v65)
      MemChunkFree(v65, 0);
    *((_DWORD *)this + 67) = 0;
  }
  *((_DWORD *)this + 66) = 1024;
  *((_QWORD *)this + 32) = v63;
  DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&v69);
  DSMHandle::~DSMHandle((DSMHandle *)&v71);
  Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch(&v72);
  DgnString::~DgnString((DgnString *)&v88);
}

void sub_20978E6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, int a17, char a18, uint64_t a19)
{
  uint64_t v19;

  DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&a15);
  DSMHandle::~DSMHandle((DSMHandle *)&a18);
  Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch(&a19);
  DgnString::~DgnString((DgnString *)(v19 - 104));
  _Unwind_Resume(a1);
}

void DSMHandle::unlink(const char **this, const char **a2, const DgnString *a3)
{
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  int v9;

  FileSpec::FileSpec((FileSpec *)&v8);
  if (*((_DWORD *)this + 2))
    v5 = *this;
  else
    v5 = &byte_209A88803;
  if (*((_DWORD *)a2 + 2))
    v6 = *a2;
  else
    v6 = &byte_209A88803;
  FileSpec::fillFromPathAndName((FileSpec *)&v8, v5, v6);
  if (v9)
    v7 = v8;
  else
    v7 = &byte_209A88803;
  if (*((_DWORD *)this + 2) > 1u)
    unlink(v7);
  else
    shm_unlink(v7);
  FileSpec::~FileSpec((FileSpec *)&v8);
}

void sub_20978E7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  FileSpec::~FileSpec((FileSpec *)&a9);
  _Unwind_Resume(a1);
}

void DSMSetData::getDSMName(DSMSetData *this, uint64_t a2, uint64_t a3, unsigned int a4, DgnString *a5)
{
  int v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  int v15;

  *((_DWORD *)a5 + 2) = 0;
  v15 = -1;
  DgnString::DgnString((DgnString *)&v13);
  DSMSetData::getSysReserveName(this, a3, a2, (DgnString *)&v13);
  DSMHandle::open((DSMHandle *)&v15, this, (char **)&v13, (const char **)&v13, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  DgnString::~DgnString((DgnString *)&v13);
  if (v15 != -1
    || (DgnString::DgnString((DgnString *)&v13),
        DSMSetData::getSysName(this, a3, a2, (DgnString *)&v13),
        DSMHandle::open((DSMHandle *)&v15, this, (char **)&v13, (const char **)&v13, 0xFFFFFFFFFFFFFFFFLL, 0, 0),
        DgnString::~DgnString((DgnString *)&v13),
        v15 != -1))
  {
    v13 = -1;
    v14 = 0;
    v10 = sysconf(29);
    v11 = ((v10 - 1) + (unint64_t)a4) & ~(unint64_t)(v10 - 1);
    v12 = (char *)mmap(0, v11, 1, 1, v15, 0);
    v13 = (uint64_t)v12;
    v14 = v11;
    if (v12 != (char *)-1)
      DgnString::operator=(a5, v12 + 16);
    DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&v13);
  }
  DSMHandle::~DSMHandle((DSMHandle *)&v15);
}

void sub_20978E91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13)
{
  DSMHandle::~DSMHandle((DSMHandle *)&a13);
  _Unwind_Resume(a1);
}

void DSMSetData::getSysReserveName(DSMSetData *this, uint64_t a2, uint64_t a3, DgnString *a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[16];

  DgnString::operator=(a4, (DSMSetData *)((char *)this + 16));
  DgnString::makeStringPrintf((DgnString *)"-%08X-%08X-reserve", v7, v8, v9, v10, a2, a3);
  DgnString::operator+=(a4, (uint64_t)v11);
  DgnString::~DgnString((DgnString *)v11);
}

void sub_20978E9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DSMSetData::getSysName(DSMSetData *this, uint64_t a2, uint64_t a3, DgnString *a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[16];

  DgnString::operator=(a4, (DSMSetData *)((char *)this + 16));
  DgnString::makeStringPrintf((DgnString *)"-%08X-%08X", v7, v8, v9, v10, a2, a3);
  DgnString::operator+=(a4, (uint64_t)v11);
  DgnString::~DgnString((DgnString *)v11);
}

void sub_20978EA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DSMSetData::printSize(DSMSetData *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  int v82;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 669, (DgnString *)&v81);
  if (v82)
    v16 = v81;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v81);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = sizeObject((char *)this + 16);
  v22 = sizeObject((char *)this + 16);
  v23 = sizeObject((char *)this + 16);
  v24 = (a3 + 1);
  v80 = a3;
  v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 672, (DgnString *)&v81);
  if (v82)
    v30 = v81;
  else
    v30 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &byte_209A88803, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  v31 = sizeObject((uint64_t)this + 32, 0);
  v32 = sizeObject((uint64_t)this + 32, 1);
  v33 = sizeObject((uint64_t)this + 32, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 672, (DgnString *)&v81);
  if (v82)
    v38 = v81;
  else
    v38 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v24, &byte_209A88803, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += v31;
  *a5 += v32;
  *a6 += v33;
  v39 = sizeObject((uint64_t)this + 112, 0);
  v40 = sizeObject((uint64_t)this + 112, 1);
  v41 = sizeObject((uint64_t)this + 112, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 672, (DgnString *)&v81);
  if (v82)
    v46 = v81;
  else
    v46 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v24, &byte_209A88803, v25, v25, v46, v39, v40, v41);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += v39;
  *a5 += v40;
  *a6 += v41;
  v47 = sizeObject<DSMGlobalRecord>((uint64_t)this + 256, 0);
  v48 = sizeObject<DSMGlobalRecord>((uint64_t)this + 256, 1);
  LODWORD(v81) = 0;
  __dmb(0xBu);
  v49 = *((_DWORD *)this + 66);
  if (v49 <= *((_DWORD *)this + 67))
    v50 = 0;
  else
    v50 = 52 * v49;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 672, (DgnString *)&v81);
  if (v82)
    v55 = v81;
  else
    v55 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, v24, &byte_209A88803, v25, v25, v55, v47, v48, v50);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += v47;
  *a5 += v48;
  *a6 += v50;
  v56 = (char *)this + 272;
  v57 = sizeObject<DSMLocalRecord>((uint64_t)this + 272, 0);
  v58 = sizeObject<DSMLocalRecord>((uint64_t)v56, 1);
  v59 = sizeObject<DSMLocalRecord>((uint64_t)v56, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 672, (DgnString *)&v81);
  if (v82)
    v64 = v81;
  else
    v64 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v24, &byte_209A88803, v25, v25, v64, v57, v58, v59);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += v57;
  *a5 += v58;
  *a6 += v59;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 672, (DgnString *)&v81);
  if (v82)
    v69 = v81;
  else
    v69 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v24, &byte_209A88803, v25, v25, v69, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 672, (DgnString *)&v81);
  if (v82)
    v74 = v81;
  else
    v74 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v24, &byte_209A88803, v25, v25, v74, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmsetdata.cpp", 675, (DgnString *)&v81);
  if (v82)
    v79 = v81;
  else
    v79 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v80, &byte_209A88803, (35 - v80), (35 - v80), v79, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v81);
}

void sub_20978EFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DSMGlobalRecord>(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;

  __dmb(0xBu);
  if (a2 == 3)
  {
    v3 = *(_DWORD *)(a1 + 8);
    if (v3 <= *(_DWORD *)(a1 + 12))
      return 0;
    else
      return 52 * v3;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      result = 12;
    else
      result = 16;
    if (a2 != 2)
    {
      v5 = *(unsigned int *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 12);
      if (v6 >= v5)
      {
        if ((int)v5 >= 1)
        {
          v7 = v5 + 1;
          do
            --v7;
          while (v7 > 1);
          result += 52 * (v5 - 1) + 52;
        }
        if (!a2)
          result += 52 * (v6 - v5);
      }
    }
  }
  return result;
}

uint64_t sizeObject<DSMLocalRecord>(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[2];
  int v10;

  v2 = 0;
  v8 = -1;
  v9[0] = -1;
  v9[1] = 0;
  __dmb(0xBu);
  v3 = 72;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 76;
  v10 = 0;
  if (a2 != 3)
  {
    v2 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v4 = *(_DWORD *)(a1 + 8);
      v5 = 84;
      if (!gShadowDiagnosticShowIdealizedObjectSizes)
        v5 = 92;
      v6 = v5 + v3 * (unint64_t)(v4 - 1);
      if (v4 > 0)
        v2 = v6;
      if (!a2)
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - v4);
    }
  }
  DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)v9);
  DSMHandle::~DSMHandle((DSMHandle *)((char *)&v8 + 4));
  DSMHandle::~DSMHandle((DSMHandle *)&v8);
  return v2;
}

void DSMShmOperation::~DSMShmOperation(DSMShmOperation *this)
{
  JUMPOUT(0x20BD149A8);
}

uint64_t DSMShmOperation::open(DSMShmOperation *this, const char *a2, int a3)
{
  return shm_open(a2, a3, 384);
}

uint64_t DSMShmOperation::unlink(DSMShmOperation *this, const char *a2)
{
  return shm_unlink(a2);
}

void DSMFileOperation::~DSMFileOperation(DSMFileOperation *this)
{
  JUMPOUT(0x20BD149A8);
}

uint64_t DSMFileOperation::open(DSMFileOperation *this, const char *a2, int a3)
{
  return open(a2, a3, 384);
}

uint64_t DSMFileOperation::unlink(DSMFileOperation *this, const char *a2)
{
  return unlink(a2);
}

void DSMMappedPtr::~DSMMappedPtr(DSMMappedPtr *this)
{
  void *v2;

  v2 = *(void **)this;
  if (v2 != (void *)-1)
    munmap(v2, *((_QWORD *)this + 1));
  *(_QWORD *)this = -1;
}

void DSMHandle::~DSMHandle(DSMHandle *this)
{
  int v2;

  v2 = *(_DWORD *)this;
  if (v2 != -1)
    close(v2);
  *(_DWORD *)this = -1;
}

unint64_t DgnArray<DSMLocalRecord>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 80 * v6, 80 * v5, 80 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x50;
  *(_QWORD *)a1 = v8;
  return result;
}

void DgnArray<DSMLocalRecord>::destructAt(_QWORD *a1, int a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a3 + a2;
  if (a3 + a2 > a2)
  {
    v5 = v3;
    v6 = a2;
    v7 = 80 * v3 - 32;
    do
    {
      --v5;
      v8 = *a1 + v7;
      DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)(v8 + 8));
      DSMHandle::~DSMHandle((DSMHandle *)(v8 + 4));
      DSMHandle::~DSMHandle((DSMHandle *)v8);
      v7 -= 80;
    }
    while (v5 > v6);
  }
}

uint64_t *Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    if (!*((_DWORD *)a1 + 2))
    {
      *(_QWORD *)(v2 + 8) = 0;
      sem_post(*(sem_t **)v2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t writeObjectChecksum(uint64_t a1, int *a2)
{
  int v4;
  int v5;

  v4 = *a2;
  (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v4, 4);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v5, 4);
}

void readObjectChecksumAndVerify(DgnStream *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;

  v11 = 0;
  (*(void (**)(DgnStream *, int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v11, 4, 1);
  if (v11 != a2)
  {
    if (*((_DWORD *)a1 + 6))
      v6 = (char *)*((_QWORD *)a1 + 2);
    else
      v6 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/primioi.inl", 36, (uint64_t)"dfutil/dobj", 2, (uint64_t)"%.500s %u %u", v4, v5, (char)v6);
  }
  v7 = (*(uint64_t (**)(DgnStream *))(*(_QWORD *)a1 + 48))(a1);
  v12 = 0;
  (*(void (**)(DgnStream *, int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v12, 4, 1);
  if (v12 != v7)
  {
    if (*((_DWORD *)a1 + 6))
      v10 = (char *)*((_QWORD *)a1 + 2);
    else
      v10 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/primioi.inl", 40, (uint64_t)"dfutil/dobj", 3, (uint64_t)"%.500s %u %u", v8, v9, (char)v10);
  }
}

uint64_t writeObject(uint64_t a1, char *a2, _DWORD *a3)
{
  uint64_t result;
  char v6;

  v6 = *a2;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v6, 1);
  *a3 ^= *a2;
  return result;
}

{
  writeObject(a1, a2, a3);
  writeObject(a1, a2 + 1, a3);
  writeObject(a1, a2 + 2, a3);
  return writeObject(a1, a2 + 3, a3);
}

uint64_t readObject(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  unsigned __int8 v7;

  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v7, 1, 1);
  v6 = v7;
  *a2 = v7;
  *a3 ^= v6;
  return result;
}

{
  readObject(a1, a2, a3);
  readObject(a1, a2 + 1, a3);
  readObject(a1, a2 + 2, a3);
  return readObject(a1, a2 + 3, a3);
}

uint64_t writeObject(uint64_t a1, __int16 *a2, _DWORD *a3)
{
  uint64_t result;
  __int16 v6;

  v6 = *a2;
  result = (*(uint64_t (**)(uint64_t, __int16 *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v6, 2);
  *a3 ^= *a2;
  return result;
}

uint64_t readObject(uint64_t a1, _WORD *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  __int16 v7;

  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, __int16 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v7, 2, 1);
  v6 = v7;
  *a2 = v7;
  *a3 ^= v6;
  return result;
}

uint64_t writeObject(uint64_t a1, unsigned __int16 *a2, _DWORD *a3)
{
  uint64_t result;
  __int16 v6;

  v6 = *a2;
  result = (*(uint64_t (**)(uint64_t, __int16 *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v6, 2);
  *a3 ^= *a2;
  return result;
}

{
  writeObject(a1, a2, a3);
  return writeObject(a1, a2 + 1, a3);
}

uint64_t readObject(uint64_t a1, unsigned __int16 *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  unsigned __int16 v7;

  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v7, 2, 1);
  v6 = v7;
  *a2 = v7;
  *a3 ^= v6;
  return result;
}

{
  readObject(a1, a2, a3);
  return readObject(a1, a2 + 1, a3);
}

uint64_t writeObject(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;

  v6 = *a2;
  result = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v6, 4);
  *a3 ^= *a2;
  return result;
}

{
  int v4;
  uint64_t result;
  int v6;

  v6 = *a2;
  v4 = v6;
  result = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v6, 4);
  *a3 ^= v4;
  return result;
}

{
  writeObject(a1, a2, a3);
  writeObject(a1, a2 + 1, a3);
  return writeObject<PrefilterResultFrame>(a1, (uint64_t)(a2 + 2), a3);
}

{
  writeObject(a1, a2, a3);
  return writeObject(a1, a2 + 1, a3);
}

{
  writeObject(a1, a2, a3);
  writeObject(a1, a2 + 1, a3);
  writeObject(a1, a2 + 2, a3);
  return writeObject(a1, a2 + 3, a3);
}

uint64_t readObject(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  int v7;

  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v7, 4, 1);
  v6 = v7;
  *a2 = v7;
  *a3 ^= v6;
  return result;
}

{
  readObject(a1, a2, a3);
  return readObject(a1, a2 + 1, a3);
}

{
  readObject(a1, a2, a3);
  readObject(a1, a2 + 1, a3);
  readObject(a1, a2 + 2, a3);
  return readObject(a1, a2 + 3, a3);
}

uint64_t writeObject(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v6;

  v6 = *a2;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v6, 8);
  *a3 ^= *(_DWORD *)a2 ^ *((_DWORD *)a2 + 1);
  return result;
}

uint64_t readObject(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v7, 8, 1);
  v6 = v7;
  *a2 = v7;
  *a3 ^= v6 ^ HIDWORD(v6);
  return result;
}

uint64_t writeObject(DgnStream *a1, const double *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  double v12;

  v12 = *a2;
  checkValidityOfDouble(&v12, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = (*(uint64_t (**)(DgnStream *, double *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v12, 8);
  *a3 ^= *(_DWORD *)a2 ^ *((_DWORD *)a2 + 1);
  return result;
}

double readObject(DgnStream *a1, double *a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  double v13;

  v13 = 0.0;
  (*(void (**)(DgnStream *, double *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v13, 8, 1);
  checkValidityOfDouble(&v13, v5, v6, v7, v8, v9, v10, v11);
  result = v13;
  *a2 = v13;
  *a3 ^= LODWORD(result) ^ HIDWORD(result);
  return result;
}

uint64_t writeObject(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  int v4;
  uint64_t result;
  unsigned __int8 v6;

  v6 = *a2;
  v4 = v6;
  result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v6, 1);
  *a3 ^= v4;
  return result;
}

{
  int v5;
  unsigned __int16 *v6;
  char v7;
  char v9;

  v6 = (unsigned __int16 *)(a2 + 2);
  v5 = *a2;
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2 * (v5 == 2);
  v9 = v7;
  writeObject(a1, &v9, a3);
  return writeObject(a1, v6, a3);
}

uint64_t readObject(uint64_t a1, BOOL *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  unsigned __int8 v7;

  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v7, 1, 1);
  v6 = v7;
  *a2 = v7 != 0;
  *a3 ^= v6;
  return result;
}

uint64_t writeObjectArray(uint64_t a1, char *a2, uint64_t a3, _DWORD *a4)
{
  char v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t result;
  char v12;

  v7 = 0;
  if ((_DWORD)a3)
  {
    v8 = a3;
    v9 = a2;
    do
    {
      v10 = *v9++;
      v7 ^= v10;
      --v8;
    }
    while (v8);
  }
  *a4 ^= v7;
  v12 = v7;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v12, 1);
  if ((_DWORD)a3)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3);
  return result;
}

{
  unsigned __int8 v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t result;
  unsigned __int8 v12;

  v7 = 0;
  if ((_DWORD)a3)
  {
    v8 = a3;
    v9 = a2;
    do
    {
      v10 = *v9++;
      v7 ^= v10;
      --v8;
    }
    while (v8);
  }
  *a4 ^= v7;
  v12 = v7;
  result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v12, 1);
  if ((_DWORD)a3)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3);
  return result;
}

void readObjectArray(DgnStream *a1, char *a2, uint64_t a3, unsigned int *a4)
{
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v15 = 0;
  (*(void (**)(DgnStream *, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v15, 1, 1);
  v8 = v15;
  if ((_DWORD)a3)
  {
    (*(void (**)(DgnStream *, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, 1);
    v9 = 0;
    v10 = a3;
    do
    {
      v11 = *a2++;
      v9 ^= v11;
      --v10;
    }
    while (v10);
  }
  else
  {
    v9 = 0;
  }
  if (v8 != v9)
  {
    if (*((_DWORD *)a1 + 6))
      v12 = (char *)*((_QWORD *)a1 + 2);
    else
      v12 = &byte_209A88803;
    (*(void (**)(DgnStream *))(*(_QWORD *)a1 + 40))(a1);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/primioi.inl", 250, (uint64_t)"dfutil/dobj", 4, (uint64_t)"%.500s %llu %llu %llu %u %.500s", v13, v14, (char)v12);
  }
  *a4 ^= v9;
}

void readObjectArray(DgnStream *a1, unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;

  v15 = 0;
  (*(void (**)(DgnStream *, unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v15, 1, 1);
  v8 = v15;
  if ((_DWORD)a3)
  {
    (*(void (**)(DgnStream *, unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, 1);
    v9 = 0;
    v10 = a3;
    do
    {
      v11 = *a2++;
      v9 ^= v11;
      --v10;
    }
    while (v10);
  }
  else
  {
    v9 = 0;
  }
  if (v8 != v9)
  {
    if (*((_DWORD *)a1 + 6))
      v12 = (char *)*((_QWORD *)a1 + 2);
    else
      v12 = &byte_209A88803;
    (*(void (**)(DgnStream *))(*(_QWORD *)a1 + 40))(a1);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/primioi.inl", 276, (uint64_t)"dfutil/dobj", 4, (uint64_t)"%.500s %llu %llu %llu %u %.500s", v13, v14, (char)v12);
  }
  *a4 ^= v9;
}

uint64_t writeObjectArray(uint64_t a1, __int16 *a2, unsigned int a3, _DWORD *a4)
{
  __int16 v7;
  uint64_t v8;
  __int16 *v9;
  __int16 v10;
  uint64_t result;
  __int16 v12;

  v7 = 0;
  if (a3)
  {
    v8 = a3;
    v9 = a2;
    do
    {
      v10 = *v9++;
      v7 ^= v10;
      --v8;
    }
    while (v8);
  }
  *a4 ^= v7;
  v12 = v7;
  result = (*(uint64_t (**)(uint64_t, __int16 *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v12, 2);
  if (a3)
    return (*(uint64_t (**)(uint64_t, __int16 *, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 2 * a3);
  return result;
}

{
  unsigned __int16 v7;
  uint64_t v8;
  __int16 *v9;
  __int16 v10;
  uint64_t result;
  unsigned __int16 v12;

  v7 = 0;
  if (a3)
  {
    v8 = a3;
    v9 = a2;
    do
    {
      v10 = *v9++;
      v7 ^= v10;
      --v8;
    }
    while (v8);
  }
  *a4 ^= v7;
  v12 = v7;
  result = (*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v12, 2);
  if (a3)
    return (*(uint64_t (**)(uint64_t, __int16 *, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 2 * a3);
  return result;
}

void readObjectArray(DgnStream *a1, __int16 *a2, unsigned int a3, unsigned int *a4)
{
  __int16 v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;

  v15 = 0;
  (*(void (**)(DgnStream *, __int16 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v15, 2, 1);
  v8 = v15;
  if (a3)
  {
    (*(void (**)(DgnStream *, __int16 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, 2 * a3, 1);
    v9 = 0;
    v10 = a3;
    do
    {
      v11 = *a2++;
      v9 ^= v11;
      --v10;
    }
    while (v10);
  }
  else
  {
    v9 = 0;
  }
  if (v8 != v9)
  {
    if (*((_DWORD *)a1 + 6))
      v12 = (char *)*((_QWORD *)a1 + 2);
    else
      v12 = &byte_209A88803;
    (*(void (**)(DgnStream *))(*(_QWORD *)a1 + 40))(a1);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/primioi.inl", 302, (uint64_t)"dfutil/dobj", 4, (uint64_t)"%.500s %llu %llu %llu %u %.500s", v13, v14, (char)v12);
  }
  *a4 ^= v9;
}

void readObjectArray(DgnStream *a1, unsigned __int16 *a2, unsigned int a3, unsigned int *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;

  v15 = 0;
  (*(void (**)(DgnStream *, unsigned __int16 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v15, 2, 1);
  v8 = v15;
  if (a3)
  {
    (*(void (**)(DgnStream *, unsigned __int16 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, 2 * a3, 1);
    v9 = 0;
    v10 = a3;
    do
    {
      v11 = *a2++;
      v9 ^= v11;
      --v10;
    }
    while (v10);
  }
  else
  {
    v9 = 0;
  }
  if (v8 != v9)
  {
    if (*((_DWORD *)a1 + 6))
      v12 = (char *)*((_QWORD *)a1 + 2);
    else
      v12 = &byte_209A88803;
    (*(void (**)(DgnStream *))(*(_QWORD *)a1 + 40))(a1);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/primioi.inl", 328, (uint64_t)"dfutil/dobj", 4, (uint64_t)"%.500s %llu %llu %llu %u %.500s", v13, v14, (char)v12);
  }
  *a4 ^= v9;
}

uint64_t writeObjectArray(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v7;
  int v8;
  int v10;

  if (a3)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v8 ^= *(_DWORD *)(a2 + v7);
      v7 += 4;
    }
    while (4 * a3 != v7);
    *a4 ^= v8;
    v10 = v8;
    (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v10, 4);
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 4 * a3);
  }
  else
  {
    v10 = 0;
    return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v10, 4);
  }
}

void readObjectArray(DgnStream *a1, int *a2, unsigned int a3, unsigned int *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v15 = 0;
  (*(void (**)(DgnStream *, int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v15, 4, 1);
  v8 = v15;
  if (a3)
  {
    (*(void (**)(DgnStream *, int *, _QWORD, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, 4 * a3, 1);
    v9 = 0;
    v10 = a3;
    do
    {
      v11 = *a2++;
      v9 ^= v11;
      --v10;
    }
    while (v10);
  }
  else
  {
    v9 = 0;
  }
  if (v8 != v9)
  {
    if (*((_DWORD *)a1 + 6))
      v12 = (char *)*((_QWORD *)a1 + 2);
    else
      v12 = &byte_209A88803;
    (*(void (**)(DgnStream *))(*(_QWORD *)a1 + 40))(a1);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/primioi.inl", 354, (uint64_t)"dfutil/dobj", 4, (uint64_t)"%.500s %llu %llu %llu %u %.500s", v13, v14, (char)v12);
  }
  *a4 ^= v9;
}

void readObjectArray(DgnStream *a1, unsigned int *a2, unsigned int a3, unsigned int *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v15 = 0;
  (*(void (**)(DgnStream *, int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v15, 4, 1);
  v8 = v15;
  if (a3)
  {
    (*(void (**)(DgnStream *, unsigned int *, _QWORD, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, 4 * a3, 1);
    v9 = 0;
    v10 = a3;
    do
    {
      v11 = *a2++;
      v9 ^= v11;
      --v10;
    }
    while (v10);
  }
  else
  {
    v9 = 0;
  }
  if (v8 != v9)
  {
    if (*((_DWORD *)a1 + 6))
      v12 = (char *)*((_QWORD *)a1 + 2);
    else
      v12 = &byte_209A88803;
    (*(void (**)(DgnStream *))(*(_QWORD *)a1 + 40))(a1);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/primioi.inl", 380, (uint64_t)"dfutil/dobj", 4, (uint64_t)"%.500s %llu %llu %llu %u %.500s", v13, v14, (char)v12);
  }
  *a4 ^= v9;
}

uint64_t writeObjectArray(uint64_t a1, uint64_t *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v7 = 0;
  if (a3)
  {
    v8 = a3;
    v9 = a2;
    do
    {
      v10 = *v9++;
      v7 ^= v10;
      --v8;
    }
    while (v8);
  }
  *a4 ^= v7 ^ HIDWORD(v7);
  v12 = v7;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v12, 8);
  if (a3)
    return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 8 * a3);
  return result;
}

uint64_t writeObjectArray(DgnStream *a1, const double *a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  const double *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = 0;
  if (a3)
  {
    v8 = a3;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)v9++;
      v7 ^= v10;
      --v8;
    }
    while (v8);
  }
  *a4 ^= v7 ^ HIDWORD(v7);
  v20 = v7;
  result = (*(uint64_t (**)(DgnStream *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v20, 8);
  if (a3)
  {
    v19 = 0;
    do
      checkValidityOfDouble(&a2[v19++], v12, v13, v14, v15, v16, v17, v18);
    while (a3 != v19);
    return (*(uint64_t (**)(DgnStream *, const double *, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 8 * a3);
  }
  return result;
}

void readObjectArray(DgnStream *a1, double *a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = 0;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v24, 8, 1);
  v8 = v24;
  if (a3)
  {
    (*(void (**)(DgnStream *, double *, _QWORD, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, 8 * a3, 1);
    v16 = a3;
    v17 = a2;
    v18 = a3;
    do
    {
      checkValidityOfDouble(v17++, v9, v10, v11, v12, v13, v14, v15);
      --v18;
    }
    while (v18);
    v19 = 0;
    do
    {
      v20 = *(_QWORD *)a2++;
      v19 ^= v20;
      --v16;
    }
    while (v16);
  }
  else
  {
    v19 = 0;
  }
  if (v8 != v19)
  {
    if (*((_DWORD *)a1 + 6))
      v21 = (char *)*((_QWORD *)a1 + 2);
    else
      v21 = &byte_209A88803;
    (*(void (**)(DgnStream *))(*(_QWORD *)a1 + 40))(a1);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/primioi.inl", 486, (uint64_t)"dfutil/dobj", 4, (uint64_t)"%.500s %llu %llu %llu %u %.500s", v22, v23, (char)v21);
  }
  *a4 ^= HIDWORD(v19) ^ v19;
}

uint64_t writeObjectArray(DgnStream *a1, const BOOL *a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v8;
  char *v10;
  unsigned int v11;

  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)&v10, a3);
  if (a3)
  {
    v8 = 0;
    do
    {
      v10[v8] = a2[v8];
      ++v8;
    }
    while (a3 != v8);
  }
  writeObjectArray((uint64_t)a1, v10, v11, a4);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v10);
}

void sub_209790794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t readObjectArray(DgnStream *a1, BOOL *a2, unsigned int a3, unsigned int *a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v12;
  unsigned int v13;

  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)&v12, a3);
  readObjectArray(a1, v12, v13, a4);
  if (a3)
  {
    v8 = v12;
    v9 = a3;
    do
    {
      v10 = *v8++;
      *a2++ = v10 != 0;
      --v9;
    }
    while (v9);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v12);
}

void sub_20979082C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void readObject(RealDFileSubFileStream *a1, unsigned __int16 *a2, unsigned int *a3)
{
  int v5;
  char v6[2];

  *(_WORD *)v6 = 0;
  RealDFileSubFileStream::readBytes(a1, v6, 2u);
  v5 = *(unsigned __int16 *)v6;
  *a2 = *(_WORD *)v6;
  *a3 ^= v5;
}

void readObject(RealDFileSubFileStream *a1, unsigned int *a2, unsigned int *a3)
{
  int v5;
  char v6[4];

  *(_DWORD *)v6 = 0;
  RealDFileSubFileStream::readBytes(a1, v6, 4u);
  v5 = *(_DWORD *)v6;
  *a2 = *(_DWORD *)v6;
  *a3 ^= v5;
}

void readObjectArray(char **a1, char *a2, unsigned int a3, unsigned int *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v15 = 0;
  RealDFileSubFileStream::readBytes((RealDFileSubFileStream *)a1, &v15, 1u);
  v8 = v15;
  if (a3)
  {
    RealDFileSubFileStream::readBytes((RealDFileSubFileStream *)a1, a2, a3);
    v9 = 0;
    v10 = a3;
    do
    {
      v11 = *a2++;
      v9 ^= v11;
      --v10;
    }
    while (v10);
  }
  else
  {
    v9 = 0;
  }
  if (v8 != v9)
  {
    if (*((_DWORD *)a1 + 6))
      v12 = a1[2];
    else
      v12 = &byte_209A88803;
    (*((void (**)(char **))*a1 + 5))(a1);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/primioi.inl", 276, (uint64_t)"dfutil/dobj", 4, (uint64_t)"%.500s %llu %llu %llu %u %.500s", v13, v14, (char)v12);
  }
  *a4 ^= v9;
}

{
  __int16 v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15[2];

  *(_WORD *)v15 = 0;
  RealDFileSubFileStream::readBytes((RealDFileSubFileStream *)a1, v15, 2u);
  v8 = *(_WORD *)v15;
  if (a3)
  {
    RealDFileSubFileStream::readBytes((RealDFileSubFileStream *)a1, a2, 2 * a3);
    v9 = 0;
    v10 = a3;
    do
    {
      v11 = *(_WORD *)a2;
      a2 += 2;
      v9 ^= v11;
      --v10;
    }
    while (v10);
  }
  else
  {
    v9 = 0;
  }
  if (v8 != v9)
  {
    if (*((_DWORD *)a1 + 6))
      v12 = a1[2];
    else
      v12 = &byte_209A88803;
    (*((void (**)(char **))*a1 + 5))(a1);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/primioi.inl", 302, (uint64_t)"dfutil/dobj", 4, (uint64_t)"%.500s %llu %llu %llu %u %.500s", v13, v14, (char)v12);
  }
  *a4 ^= v9;
}

{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15[2];

  *(_WORD *)v15 = 0;
  RealDFileSubFileStream::readBytes((RealDFileSubFileStream *)a1, v15, 2u);
  v8 = *(unsigned __int16 *)v15;
  if (a3)
  {
    RealDFileSubFileStream::readBytes((RealDFileSubFileStream *)a1, a2, 2 * a3);
    v9 = 0;
    v10 = a3;
    do
    {
      v11 = *(unsigned __int16 *)a2;
      a2 += 2;
      v9 ^= v11;
      --v10;
    }
    while (v10);
  }
  else
  {
    v9 = 0;
  }
  if (v8 != v9)
  {
    if (*((_DWORD *)a1 + 6))
      v12 = a1[2];
    else
      v12 = &byte_209A88803;
    (*((void (**)(char **))*a1 + 5))(a1);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/primioi.inl", 328, (uint64_t)"dfutil/dobj", 4, (uint64_t)"%.500s %llu %llu %llu %u %.500s", v13, v14, (char)v12);
  }
  *a4 ^= v9;
}

{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15[4];

  *(_DWORD *)v15 = 0;
  RealDFileSubFileStream::readBytes((RealDFileSubFileStream *)a1, v15, 4u);
  v8 = *(_DWORD *)v15;
  if (a3)
  {
    RealDFileSubFileStream::readBytes((RealDFileSubFileStream *)a1, a2, 4 * a3);
    v9 = 0;
    v10 = a3;
    do
    {
      v11 = *(_DWORD *)a2;
      a2 += 4;
      v9 ^= v11;
      --v10;
    }
    while (v10);
  }
  else
  {
    v9 = 0;
  }
  if (v8 != v9)
  {
    if (*((_DWORD *)a1 + 6))
      v12 = a1[2];
    else
      v12 = &byte_209A88803;
    (*((void (**)(char **))*a1 + 5))(a1);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/primioi.inl", 380, (uint64_t)"dfutil/dobj", 4, (uint64_t)"%.500s %llu %llu %llu %u %.500s", v13, v14, (char)v12);
  }
  *a4 ^= v9;
}

uint64_t writeObject(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  int v12;

  v6 = *(_DWORD *)(a2 + 8);
  v7 = v6 != 0;
  v8 = v6 - 1;
  if (v7)
    v9 = v8;
  else
    v9 = 0;
  v12 = v9;
  (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v12, 4);
  *a3 ^= v9;
  if (*(_DWORD *)(a2 + 8))
    v10 = *(char **)a2;
  else
    v10 = &byte_209A88803;
  return writeObjectArray(a1, v10, v9, a3);
}

{
  int v6;
  int v8;

  v8 = *(_DWORD *)(a2 + 8);
  v6 = v8;
  (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v8, 4);
  *a3 ^= v6;
  return writeObjectArray(a1, *(_QWORD *)a2, (v6 + 31) >> 5, a3);
}

{
  writeObject<DFileChecksumBucket>(a1, a2, a3);
  return writeObject(a1, (int *)(a2 + 16), a3);
}

{
  int v7;
  int v8;

  LOWORD(v8) = *(_WORD *)a2;
  writeObject(a1, (unsigned __int16 *)&v8, a3);
  LOWORD(v8) = *(_WORD *)(a2 + 2);
  writeObject(a1, (unsigned __int16 *)&v8, a3);
  LOWORD(v8) = *(_WORD *)(a2 + 4);
  writeObject(a1, (unsigned __int16 *)&v8, a3);
  LOWORD(v8) = *(_WORD *)(a2 + 6);
  writeObject(a1, (unsigned __int16 *)&v8, a3);
  LOWORD(v8) = *(_WORD *)(a2 + 8);
  writeObject(a1, (unsigned __int16 *)&v8, a3);
  writeObject(a1, (int *)(a2 + 12), a3);
  writeObject(a1, (unsigned __int16 *)(a2 + 16), a3);
  writeObject(a1, (unsigned __int16 *)(a2 + 18), a3);
  v8 = *(_DWORD *)(a2 + 20);
  writeObject(a1, &v8, a3);
  v7 = *(_DWORD *)(a2 + 24);
  return writeObject(a1, &v7, a3);
}

void readObject(DgnStream *a1, DgnString *a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned __int8 *Buffer;
  unsigned int v8;

  v8 = 0;
  (*(void (**)(DgnStream *, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v8, 4, 1);
  v6 = v8;
  *a3 ^= v8;
  Buffer = (unsigned __int8 *)DgnString::getBuffer(a2, v6);
  readObjectArray(a1, Buffer, v6, a3);
}

void readObject(DgnStream *a1, BitArray *a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;

  v7 = 0;
  (*(void (**)(DgnStream *, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v7, 4, 1);
  v6 = v7;
  *a3 ^= v7;
  BitArray::setSize(a2, v6);
  readObjectArray(a1, *(unsigned int **)a2, (v6 + 31) >> 5, a3);
}

int *writeSharedObject(DgnSharedMemStream *a1, BitArray *a2, unsigned int *a3)
{
  int v6;
  int *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;

  v19 = *((_DWORD *)a2 + 2);
  v6 = v19;
  result = (int *)(*(uint64_t (**)(DgnSharedMemStream *, int *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v19, 4);
  *a3 ^= v6;
  v13 = v6 + 31;
  v14 = (v6 + 31) >> 3;
  if ((v14 & 0x1FFFFFFC) != 0)
  {
    result = (int *)DgnSharedMemStream::writeSharedBytes(a1, *(const char **)a2, v14 & 0x1FFFFFFC, v8, v9, v10, v11, v12);
    if (result)
    {
      v15 = result;
      result = (int *)BitArray::releaseAll((uint64_t)a2);
      *((_DWORD *)a2 + 2) = v6;
      *(_QWORD *)a2 = v15;
    }
    else
    {
      v15 = *(int **)a2;
    }
    if (v13 >= 0x20)
    {
      v16 = 0;
      v17 = v13 >> 5;
      do
      {
        v18 = *v15++;
        v16 ^= v18;
        --v17;
      }
      while (v17);
    }
    else
    {
      v16 = 0;
    }
    *a3 ^= v16;
  }
  return result;
}

uint64_t readSharedObject(DgnSharedMemStream *a1, BitArray *a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *SharedBytes;
  uint64_t result;
  int v15;
  uint64_t v16;
  int v17;
  int v18;

  v18 = 0;
  (*(void (**)(DgnSharedMemStream *, int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v18, 4, 1);
  v12 = v18;
  *a3 ^= v18;
  if (v12)
  {
    SharedBytes = (int *)DgnSharedMemStream::readSharedBytes(a1, ((v12 + 31) >> 3) & 0x1FFFFFFC, v6, v7, v8, v9, v10, v11);
    result = BitArray::releaseAll((uint64_t)a2);
    *((_DWORD *)a2 + 2) = v12;
    *(_QWORD *)a2 = SharedBytes;
    if ((v12 + 31) >= 0x20)
    {
      v15 = 0;
      v16 = (v12 + 31) >> 5;
      do
      {
        v17 = *SharedBytes++;
        v15 ^= v17;
        --v16;
      }
      while (v16);
    }
    else
    {
      v15 = 0;
    }
    *a3 ^= v15;
  }
  else
  {
    result = BitArray::releaseAll((uint64_t)a2);
    *((_DWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
  }
  return result;
}

uint64_t writeObject<double>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  int v6;
  int v8;

  v8 = *(_DWORD *)(a2 + 8);
  v6 = v8;
  (*(void (**)(DgnStream *, int *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v8, 4);
  *a3 ^= v6;
  return writeObjectArray(a1, *(const double **)a2, *(_DWORD *)(a2 + 8), a3);
}

{
  int v7;

  v7 = *(_DWORD *)(a2 + 8);
  writeObject((uint64_t)a1, &v7, a3);
  return writeObjectArray(a1, *(const double **)a2, *(_DWORD *)(a2 + 8), a3);
}

uint64_t writeObject(DgnStream *a1, const DgnMatrix *a2, unsigned int *a3)
{
  int v6;
  int v7;
  int v9;
  int v10;

  v9 = *(_DWORD *)a2;
  v6 = v9;
  (*(void (**)(DgnStream *, int *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v9, 4);
  *a3 ^= v6;
  v10 = *((_DWORD *)a2 + 1);
  v7 = v10;
  (*(void (**)(DgnStream *, int *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v10, 4);
  *a3 ^= v7;
  return writeObject<double>(a1, (uint64_t)a2 + 8, a3);
}

void RealDFileSubFileStream::readBytes(RealDFileSubFileStream *this, char *a2, unsigned int a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = RealDFileSubFileStream::basicRead(this, a2, a3);
  if (v5 < a3)
  {
    *((_BYTE *)this + 76) = 1;
    RealDFileSubFileStream::throwUnexpectedEof(this, a3, v5, v6, v7, v8, v9, v10);
  }
}

size_t RealDFileSubFileStream::basicRead(RealDFileSubFileStream *this, char *a2, unsigned int a3)
{
  RealDFile *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  size_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int16 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int16 *v23;
  int v24;

  v5 = (RealDFile *)*((_QWORD *)this + 5);
  v6 = *((_QWORD *)v5 + 19) + ((unint64_t)*((unsigned __int16 *)this + 34) << 7);
  v7 = *(unsigned int *)(v6 + 108) + ((unint64_t)(*(_DWORD *)(v6 + 96) - 1) << 12);
  v8 = *((_QWORD *)this + 10);
  v9 = v7 - v8;
  if (v9)
  {
    v11 = *((_DWORD *)this + 22);
    v12 = v8 & 0xFFF;
    if (v9 >= a3)
      v13 = a3;
    else
      v13 = v9;
    v14 = 4096 - v12;
    if (4096 - v12 >= v13)
      v10 = v13;
    else
      v10 = v14;
    RealDFile::doReadFromBigCache(v5, *((_DWORD *)this + 22), v12, a2, v10);
    if (v13 > v14)
    {
      LODWORD(v15) = v10;
      do
      {
        v13 -= v15;
        if (v13 >= 0x1000)
          v15 = 4096;
        else
          v15 = v13;
        v16 = *((_QWORD *)this + 5);
        ++v11;
        v17 = *(_DWORD *)(v16 + 144);
        if (v17 > v11)
        {
          v18 = (unsigned __int16 *)(*(_QWORD *)(v16 + 136) + 2 * v11);
          while (1)
          {
            v19 = *v18++;
            if (v19 == *((unsigned __int16 *)this + 34))
              break;
            if (v17 == ++v11)
            {
              v11 = *(_DWORD *)(v16 + 144);
              break;
            }
          }
        }
        RealDFile::doReadFromBigCache((RealDFile *)v16, v11, 0, &a2[v10], v15);
        v10 = (v10 + v15);
      }
      while (v13 > 0x1000);
    }
    v20 = *((_QWORD *)this + 10) + v10;
    *((_QWORD *)this + 10) = v20;
    if ((v20 & 0xFFF) == 0)
    {
      v21 = *((_QWORD *)this + 5);
      ++v11;
      v22 = *(_DWORD *)(v21 + 144);
      if (v22 > v11)
      {
        v23 = (unsigned __int16 *)(*(_QWORD *)(v21 + 136) + 2 * v11);
        while (1)
        {
          v24 = *v23++;
          if (v24 == *((unsigned __int16 *)this + 34))
            break;
          if (v22 == ++v11)
          {
            v11 = v22;
            break;
          }
        }
      }
    }
    *((_DWORD *)this + 22) = v11;
  }
  else
  {
    v10 = 0;
    *a2 = 0;
  }
  return v10;
}

void RealDFile::doReadFromBigCache(RealDFile *this, int a2, unsigned int a3, char *__dst, size_t __n)
{
  unsigned int v5;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = __n;
  v9 = (*((_DWORD *)this + 54) + a2);
  if (v9 >= *((_DWORD *)this + 86)
    || (v10 = *(_QWORD **)(*((_QWORD *)this + 42) + 8 * v9)) == 0)
  {
    RealDFile::fillBigCache(this, *((_DWORD *)this + 54) + a2);
    v10 = *(_QWORD **)(*((_QWORD *)this + 42) + 8 * v9);
  }
  if (v5 > 8)
  {
    memcpy(__dst, (const void *)(*v10 + a3), v5);
  }
  else if (v5)
  {
    v11 = v5;
    do
    {
      *__dst++ = *(_BYTE *)(*v10 + a3++);
      --v11;
    }
    while (v11);
  }
}

double UttFileMgr::startupUttFileMgr(UttFileMgr *this)
{
  uint64_t *v1;
  double result;

  v1 = MemChunkAlloc(0x40uLL, 0);
  *v1 = 0;
  v1[1] = 0;
  *(_QWORD *)&result = 0x10000001DLL;
  v1[2] = 0x10000001DLL;
  *((_DWORD *)v1 + 6) = 1;
  v1[5] = 0;
  v1[6] = 0;
  v1[4] = 0;
  *((_DWORD *)v1 + 14) = 0;
  UttFileMgr::smpUttFileMgr = (uint64_t)v1;
  return result;
}

uint64_t IdMgr<unsigned int>::getNextId(_DWORD *a1)
{
  uint64_t v1;
  int v3;

  v1 = (uint64_t)(a1 + 4);
  if (a1[10] <= *a1)
  {
    v3 = a1[2];
    do
    {
      DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue(v1, v3);
      v3 = a1[2] + 1;
      a1[2] = v3;
    }
    while (a1[10] <= *a1);
  }
  return DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::dequeue(v1);
}

void IdMgr<unsigned int>::recycleId(unsigned int *a1, int a2)
{
  _QWORD *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v4 = a1 + 4;
  DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue((uint64_t)(a1 + 4), a2);
  v5 = *a1;
  v6 = a1[10];
  if (v6 > *a1)
  {
    v7 = a2 + 1;
    v8 = a1[2];
    v9 = v6 - 1;
    do
    {
      if (v8 != v7)
        break;
      a1[10] = v9;
      v10 = a1[9];
      if (!v10)
        v10 = a1[6];
      v11 = v10 - 1;
      a1[9] = v10 - 1;
      v12 = v8 - 1;
      a1[2] = v8 - 1;
      if (v9)
      {
        if (!v11)
          v11 = a1[6];
        v8 = *(_DWORD *)(*v4 + 4 * (v11 - 1)) + 1;
      }
      v7 = v8;
      v8 = v12;
    }
    while (v9-- > v5);
  }
}

void UttFileMgr::printSize(UttFileMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfmgr.cpp", 130, (DgnString *)&v71);
  if (v72)
    v16 = (char *)v71;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v71);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfmgr.cpp", 131, (DgnString *)&v71);
  if (v72)
    v25 = (char *)v71;
  else
    v25 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v21, v22, v23, v24, (a3 + 1), &byte_209A88803, (a3 + 1), &byte_209A88803, v25);
  v67 = a5;
  v68 = a6;
  DgnString::~DgnString((DgnString *)&v71);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v26, v27, v28, v29, (a3 + 1), &byte_209A88803);
  v30 = *((unsigned int *)this + 2);
  if ((_DWORD)v30)
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    do
    {
      v35 = *(_QWORD *)this;
      if (*(_QWORD *)(*(_QWORD *)this + 8 * v31))
      {
        v70 = 0;
        v71 = 0;
        v69 = 0;
        UttFile::printSize(*(UttFile **)(v35 + 8 * v31), v31, (a3 + 2), &v71, &v70, &v69);
        v34 += v71;
        v33 += v70;
        v32 += v69;
        v30 = *((unsigned int *)this + 2);
      }
      ++v31;
    }
    while (v31 < v30);
  }
  else
  {
    v34 = 0;
    v33 = 0;
    v32 = 0;
    v30 = 0;
  }
  v36 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v36 = 16;
  v37 = v36 + v34;
  v38 = v36 + v33;
  v39 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 3;
  v40 = v37 + ((unint64_t)*((unsigned int *)this + 3) << v39);
  v41 = v38 + (v30 << v39);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfmgr.cpp", 131, (DgnString *)&v71);
  if (v72)
    v46 = (char *)v71;
  else
    v46 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v46, v40, v41, v32);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += v40;
  *v67 += v41;
  *v68 += v32;
  v47 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v47 = 16;
  v48 = *((_DWORD *)this + 10);
  v49 = *((_DWORD *)this + 11);
  v50 = v47 + 4 * (v48 - 1) + 4;
  if (v48 <= 0)
    v50 = v47;
  v51 = v49 >= v48;
  v52 = v50 + 4 * (v49 - v48);
  if (v51)
    v47 = v52;
  v53 = v47 + 24;
  v54 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 8, 1u) + 12;
  v55 = *((unsigned int *)this + 10);
  if (v55 <= *((_DWORD *)this + 11))
    v56 = 0;
  else
    v56 = 4 * v55;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfmgr.cpp", 133, (DgnString *)&v71);
  if (v72)
    v61 = (char *)v71;
  else
    v61 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v61, v53, v54, v56);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += v53;
  *v67 += v54;
  *v68 += v56;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfmgr.cpp", 134, (DgnString *)&v71);
  if (v72)
    v66 = (char *)v71;
  else
    v66 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, a3, &byte_209A88803, (35 - a3), (35 - a3), v66, *a4, *v67, *v68);
  DgnString::~DgnString((DgnString *)&v71);
}

void sub_209791988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue(uint64_t a1, int a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v4 = *(_DWORD *)(a1 + 24);
  if (v4 == *(_DWORD *)(a1 + 8))
  {
    v5 = *(_DWORD *)(a1 + 12);
    if (v4 == v5)
    {
      DgnPrimArray<unsigned int>::reallocElts(a1, 1, 1);
      v5 = *(_DWORD *)(a1 + 12);
      v4 = *(_DWORD *)(a1 + 24);
    }
    *(_DWORD *)(a1 + 8) = v5;
    v6 = v5 - v4;
    if (v4)
    {
      v7 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v7)
      {
        memmove((void *)(*(_QWORD *)a1 + 4 * v7 + 4 * v6), (const void *)(*(_QWORD *)a1 + 4 * v7), 4 * (v4 - v7));
        v4 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 16) += v6;
      }
      else
      {
        *(_DWORD *)(a1 + 20) = v4;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 16) = 0;
    }
    bzero((void *)(*(_QWORD *)a1 + 4 * v4), 4 * v6);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * *(unsigned int *)(a1 + 20)) = a2;
  v8 = *(_DWORD *)(a1 + 20);
  v9 = *(_DWORD *)(a1 + 24);
  if (v8 + 1 == *(_DWORD *)(a1 + 8))
    v10 = 0;
  else
    v10 = v8 + 1;
  *(_DWORD *)(a1 + 20) = v10;
  *(_DWORD *)(a1 + 24) = v9 + 1;
}

uint64_t DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::dequeue(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;

  v1 = *(unsigned int *)(a1 + 16);
  v2 = *(unsigned int *)(*(_QWORD *)a1 + 4 * v1);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v1) = 0;
  v3 = *(_DWORD *)(a1 + 16) + 1;
  *(_DWORD *)(a1 + 16) = v3;
  v4 = *(_DWORD *)(a1 + 24) - 1;
  *(_DWORD *)(a1 + 24) = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = v3 >= v5;
    v7 = v3 - v5;
    if (v6)
      *(_DWORD *)(a1 + 16) = v7;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return v2;
}

uint64_t DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject(_DWORD *a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  result = sizeObject<unsigned int>((uint64_t)a1, a2) + 12 * (a2 != 3);
  if (a2 > 3 || a2 == 1)
  {
    v5 = a1[2];
    if (a1[6] < v5)
    {
      v6 = 0;
      v8 = a1[4];
      v7 = a1[5];
      do
      {
        if (v7 >= v8)
        {
          if (v6 >= v8 && v6 < v7)
            goto LABEL_13;
        }
        else if (v6 < v7 || v6 >= v8)
        {
          goto LABEL_13;
        }
        result -= 4 * (a2 != 3);
LABEL_13:
        ++v6;
      }
      while (v5 != v6);
    }
  }
  return result;
}

void MrecInitModule_rulemgr_voc(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;

  if (!gParDebugRuleMgr)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugRuleMgr", (const char *)&unk_209A58919, (const char *)&unk_209A58919, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugRuleMgr = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugRuleMgr);
  }
  if (!gParDebugShowRuleAndStateInfoOnLoad)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugShowRuleAndStateInfoOnLoad", (const char *)&unk_209A58919, (const char *)&unk_209A58919, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugShowRuleAndStateInfoOnLoad = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowRuleAndStateInfoOnLoad);
  }
}

void Rule::~Rule(Rule *this)
{
  *((_WORD *)this + 64) = 0;
  *((_BYTE *)this + 130) = 0;
  *((_DWORD *)this + 4) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 64);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnString::~DgnString((Rule *)((char *)this + 8));
}

void Rule::Rule(Rule *this, const Rule *a2)
{
  DgnString::DgnString((Rule *)((char *)this + 8));
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  Rule::operator=((uint64_t)this, (uint64_t)a2);
}

void sub_209791D48(_Unwind_Exception *a1)
{
  DgnString *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = v3;
  v7 = v5 + 112;
  v8 = v5 + 96;
  v9 = v5 + 80;
  v10 = v5 + 64;
  v11 = v5 + 48;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v7);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v8);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v9);
  DgnIArray<Utterance *>::~DgnIArray(v10);
  DgnArray<DgnArray<ParseToken>>::releaseAll(v11);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t Rule::operator=(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  DgnString::operator=((DgnString *)(a1 + 8), (DgnString *)(a2 + 8));
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  DgnPrimArray<int>::copyArraySlice(a1 + 32, (uint64_t *)(a2 + 32), 0, *(_DWORD *)(a2 + 40));
  DgnArray<DgnArray<ParseToken>>::copyArraySlice(a1 + 48, (_QWORD *)(a2 + 48), 0, *(_DWORD *)(a2 + 56));
  DgnArray<RuleDesc>::copyArraySlice(a1 + 64, (_QWORD *)(a2 + 64), 0, *(_DWORD *)(a2 + 72));
  DgnPrimArray<int>::copyArraySlice(a1 + 80, (uint64_t *)(a2 + 80), 0, *(_DWORD *)(a2 + 88));
  DgnPrimArray<unsigned short>::copyArraySlice(a1 + 96, (uint64_t *)(a2 + 96), 0, *(_DWORD *)(a2 + 104));
  DgnPrimArray<unsigned short>::copyArraySlice(a1 + 112, (uint64_t *)(a2 + 112), 0, *(_DWORD *)(a2 + 120));
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  DgnPrimArray<int>::copyArraySlice(a1 + 136, (uint64_t *)(a2 + 136), 0, *(_DWORD *)(a2 + 144));
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  return a1;
}

uint64_t DgnArray<DgnArray<ParseToken>>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  char v9;

  if (a1 == a2)
    return 1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 != *(_DWORD *)(a2 + 8))
    return 0;
  v5 = v4 + 1;
  v6 = 16 * v4 - 16;
  do
  {
    v7 = --v5 < 1;
    if (v5 < 1)
      break;
    v8 = v6 - 16;
    v9 = DgnArray<ParseToken>::operator==(*(_QWORD *)a1 + v6, (uint64_t *)(*(_QWORD *)a2 + v6));
    v6 = v8;
  }
  while ((v9 & 1) != 0);
  return v7;
}

uint64_t Rule::readRule(Rule *this, DgnStream *a2, unsigned int *a3)
{
  int v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _WORD *v23;
  __int16 *v24;
  __int16 v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _WORD *v29;
  __int16 *v30;
  __int16 v31;
  int v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v48 = 0;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  v44 = 0;
  v45 = 0;
  v42 = 0;
  v43 = 0;
  v40 = 0;
  v41 = 0;
  readObject((uint64_t)a2, (unsigned __int16 *)this, a3);
  readObject(a2, (Rule *)((char *)this + 8), a3);
  readObject((uint64_t)a2, (_DWORD *)this + 6, a3);
  if (!*((_BYTE *)a2 + 35) || (readObject<StateSpec>((uint64_t)a2, (uint64_t)&v48, a3), !*((_BYTE *)a2 + 35)))
    readObject<unsigned int>(a2, (uint64_t)this + 32, a3);
  readObject<DgnArray<ParseToken>>((uint64_t)a2, (uint64_t)this + 48, a3);
  readObject<RuleDesc>((uint64_t)a2, (uint64_t)this + 64, a3);
  if (((!*((_BYTE *)a2 + 35) || (readObject<StateSpec>((uint64_t)a2, (uint64_t)&v46, a3), !*((_BYTE *)a2 + 35)))
     && (readObject<unsigned int>(a2, (uint64_t)this + 80, a3), !*((_BYTE *)a2 + 35))
     || (readObject<RuleSpec>((uint64_t)a2, (uint64_t)&v44, a3), !*((_BYTE *)a2 + 35)))
    && (readObject<unsigned short>(a2, (uint64_t)this + 96, a3), !*((_BYTE *)a2 + 35))
    || (readObject<RuleSpec>((uint64_t)a2, (uint64_t)&v42, a3), !*((_BYTE *)a2 + 35)))
  {
    readObject<unsigned short>(a2, (uint64_t)this + 112, a3);
  }
  readObject((uint64_t)a2, (BOOL *)this + 128, a3);
  readObject((uint64_t)a2, (BOOL *)this + 129, a3);
  readObject((uint64_t)a2, (BOOL *)this + 130, a3);
  if (!*((_BYTE *)a2 + 35) || (readObject<StateSpec>((uint64_t)a2, (uint64_t)&v40, a3), !*((_BYTE *)a2 + 35)))
    readObject<unsigned int>(a2, (uint64_t)this + 136, a3);
  readObject((uint64_t)a2, (unsigned __int16 *)this + 76, a3);
  readObject((uint64_t)a2, (BOOL *)this + 160, a3);
  readObject((uint64_t)a2, (BOOL *)this + 161, a3);
  readObject((uint64_t)a2, (BOOL *)this + 162, a3);
  if (*((_BYTE *)a2 + 35))
  {
    v6 = v49;
    v7 = *((_DWORD *)this + 11);
    v8 = v49;
    if (v49 > v7)
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 32, v49 - v7, 0);
      v8 = v49;
    }
    *((_DWORD *)this + 10) = v6;
    if (v8)
    {
      v9 = 0;
      v10 = *((_QWORD *)this + 4);
      v11 = (int *)(v48 + 4);
      do
      {
        v12 = *v11;
        v11 += 2;
        *(_DWORD *)(v10 + 4 * v9++) = v12;
      }
      while (v9 < v49);
    }
    v13 = v47;
    v14 = *((_DWORD *)this + 23);
    v15 = v47;
    if (v47 > v14)
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 80, v47 - v14, 0);
      v15 = v47;
    }
    *((_DWORD *)this + 22) = v13;
    if (v15)
    {
      v16 = 0;
      v17 = *((_QWORD *)this + 10);
      v18 = (int *)(v46 + 4);
      do
      {
        v19 = *v18;
        v18 += 2;
        *(_DWORD *)(v17 + 4 * v16++) = v19;
      }
      while (v16 < v47);
    }
    v20 = v45;
    v21 = *((_DWORD *)this + 27);
    LODWORD(v22) = v45;
    if (v45 > v21)
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 96, v45 - v21, 0);
      LODWORD(v22) = v45;
    }
    *((_DWORD *)this + 26) = v20;
    if ((_DWORD)v22)
    {
      v23 = (_WORD *)*((_QWORD *)this + 12);
      v22 = v22;
      v24 = (__int16 *)(v44 + 2);
      do
      {
        v25 = *v24;
        v24 += 2;
        *v23++ = v25;
        --v22;
      }
      while (v22);
    }
    v26 = v43;
    v27 = *((_DWORD *)this + 31);
    LODWORD(v28) = v43;
    if (v43 > v27)
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 112, v43 - v27, 0);
      LODWORD(v28) = v43;
    }
    *((_DWORD *)this + 30) = v26;
    if ((_DWORD)v28)
    {
      v29 = (_WORD *)*((_QWORD *)this + 14);
      v28 = v28;
      v30 = (__int16 *)(v42 + 2);
      do
      {
        v31 = *v30;
        v30 += 2;
        *v29++ = v31;
        --v28;
      }
      while (v28);
    }
    v32 = v41;
    v33 = *((_DWORD *)this + 37);
    v34 = v41;
    if (v41 > v33)
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 136, v41 - v33, 0);
      v34 = v41;
    }
    *((_DWORD *)this + 36) = v32;
    if (v34)
    {
      v35 = 0;
      v36 = *((_QWORD *)this + 17);
      v37 = (int *)(v40 + 4);
      do
      {
        v38 = *v37;
        v37 += 2;
        *(_DWORD *)(v36 + 4 * v35++) = v38;
      }
      while (v35 < v41);
    }
  }
  *(_DWORD *)((char *)this + 154) = 0;
  *((_WORD *)this + 79) = 0;
  *((_BYTE *)this + 163) = 0;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v40);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v42);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v44);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v46);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v48);
}

void sub_209792304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a11);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a13);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a15);
  DgnIArray<Utterance *>::~DgnIArray(v15 - 48);
  _Unwind_Resume(a1);
}

uint64_t readObject<StateSpec>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v11 = 0;
  result = readObject(a1, &v11, a3);
  v7 = v11;
  v8 = *(_DWORD *)(a2 + 12);
  if (v11 <= v8)
  {
    *(_DWORD *)(a2 + 8) = v11;
    if (!v7)
      return result;
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts(a2, v11 - v8, 0);
    *(_DWORD *)(a2 + 8) = v7;
  }
  v9 = 0;
  v10 = 0;
  do
  {
    result = readObject(a1, *(_QWORD *)a2 + v9, a3);
    ++v10;
    v9 += 8;
  }
  while (v10 < *(unsigned int *)(a2 + 8));
  return result;
}

unint64_t readObject<DgnArray<ParseToken>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v17 = 0;
  result = readObject(a1, &v17, a3);
  v7 = v17;
  v8 = *(_DWORD *)(a2 + 12);
  if (v17 > v8)
    result = DgnArray<DgnPrimArray<double>>::reallocElts(a2, v17 - v8, 0);
  v9 = *(unsigned int *)(a2 + 8);
  if (v9 <= v7)
  {
    if (v9 < v7)
    {
      v12 = v7 - v9;
      v13 = 16 * v9;
      do
      {
        v14 = (_QWORD *)(*(_QWORD *)a2 + v13);
        *v14 = 0;
        v14[1] = 0;
        v13 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v9 > (int)v7)
  {
    v10 = (int)v9;
    v11 = 16 * (int)v9 - 16;
    do
    {
      --v10;
      result = DgnIArray<Utterance *>::~DgnIArray(*(_QWORD *)a2 + v11);
      v11 -= 16;
    }
    while (v10 > (int)v7);
  }
  *(_DWORD *)(a2 + 8) = v7;
  if ((_DWORD)v7)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      result = readObject<ParseToken>(a1, *(_QWORD *)a2 + v15, a3);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t readObject<RuleDesc>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v11 = 0;
  result = readObject(a1, &v11, a3);
  v7 = v11;
  v8 = *(_DWORD *)(a2 + 12);
  if (v11 <= v8)
  {
    *(_DWORD *)(a2 + 8) = v11;
    if (!v7)
      return result;
  }
  else
  {
    DgnArray<RuleDesc>::reallocElts(a2, v11 - v8, 0);
    *(_DWORD *)(a2 + 8) = v7;
  }
  v9 = 0;
  v10 = 0;
  do
  {
    result = RuleDesc::readObject((unsigned __int16 *)(*(_QWORD *)a2 + v9), a1, a3);
    ++v10;
    v9 += 12;
  }
  while (v10 < *(unsigned int *)(a2 + 8));
  return result;
}

unint64_t readObject<RuleSpec>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;

  v14 = 0;
  result = readObject(a1, &v14, a3);
  v7 = v14;
  v8 = *(_DWORD *)(a2 + 12);
  if (v14 > v8)
    result = DgnPrimArray<unsigned int>::reallocElts(a2, v14 - v8, 0);
  v9 = *(unsigned int *)(a2 + 8);
  if (v9 < v7)
  {
    v10 = v7 - v9;
    v11 = *(_QWORD *)a2 + 4 * v9 + 2;
    do
    {
      *(_DWORD *)(v11 - 2) = 127;
      v11 += 4;
      --v10;
    }
    while (v10);
  }
  *(_DWORD *)(a2 + 8) = v7;
  if ((_DWORD)v7)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      result = readObject(a1, (unsigned __int16 *)(*(_QWORD *)a2 + v12), a3);
      ++v13;
      v12 += 4;
    }
    while (v13 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

_QWORD *DgnArray<DgnArray<ParseToken>>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 16 * v2 - 16;
    do
    {
      DgnIArray<Utterance *>::~DgnIArray(*(_QWORD *)a1 + v3);
      v3 -= 16;
    }
    while (v3 != -16);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t writeObject(DgnStream *a1, const Rule *a2, unsigned int *a3)
{
  writeObject((uint64_t)a1, (unsigned __int16 *)a2, a3);
  writeObject((uint64_t)a1, (uint64_t)a2 + 8, a3);
  writeObject((uint64_t)a1, (int *)a2 + 6, a3);
  writeObject<unsigned int>((uint64_t)a1, (uint64_t)a2 + 32, a3);
  writeObject<DgnArray<ParseToken>>((uint64_t)a1, (uint64_t)a2 + 48, a3);
  writeObject<RuleDesc>((uint64_t)a1, (uint64_t)a2 + 64, a3);
  writeObject<unsigned int>((uint64_t)a1, (uint64_t)a2 + 80, a3);
  writeObject<unsigned short>((uint64_t)a1, (uint64_t)a2 + 96, a3);
  writeObject<unsigned short>((uint64_t)a1, (uint64_t)a2 + 112, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 128, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 129, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 130, a3);
  writeObject<unsigned int>((uint64_t)a1, (uint64_t)a2 + 136, a3);
  writeObject((uint64_t)a1, (unsigned __int16 *)a2 + 76, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 160, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 161, a3);
  return writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 162, a3);
}

uint64_t writeObject<DgnArray<ParseToken>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject<ParseToken>(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<RuleDesc>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = RuleDesc::writeObject((int *)(*(_QWORD *)a2 + v7), a1, a3);
      ++v8;
      v7 += 12;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t sizeObject<DgnArray<ParseToken>>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _BYTE v10[4];

  v9[0] = 0;
  v9[1] = 0;
  sizeObject((uint64_t)v10, 2);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 12;
  else
    v4 = 16;
  if (a2 == 3)
  {
    v4 = 0;
  }
  else if ((a2 & 0xFFFFFFFE) != 2)
  {
    v5 = *(unsigned int *)(a1 + 8);
    v6 = v4;
    if ((int)v5 >= 1)
    {
      v7 = v5 + 1;
      v6 = v4;
      do
        v6 += sizeObject<ParseToken>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
      while (v7 > 1);
    }
    if (a2)
      v4 = v6;
    else
      v4 = v6 + v4 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v9);
  return v4;
}

void sub_209792AD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<RuleDesc>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 == 3)
    return 0;
  v2 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v3 = *(unsigned int *)(a1 + 8);
    v4 = 12 * v3;
    if ((int)v3 <= 0)
      v4 = 0;
    v2 += v4;
    if (!a2)
      v2 += 12 * (*(_DWORD *)(a1 + 12) - v3);
  }
  return v2;
}

uint64_t sizeObject<unsigned short>(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  int v6;
  uint64_t v7;

  if (a2 == 3)
  {
    v3 = *(unsigned int *)(a1 + 8);
    if (v3 <= *(_DWORD *)(a1 + 12))
      return 0;
    else
      return 2 * v3;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      result = 12;
    else
      result = 16;
    if (a2 != 2)
    {
      v6 = *(_DWORD *)(a1 + 8);
      v5 = *(_DWORD *)(a1 + 12);
      v7 = result + 2 * (v6 - 1) + 2;
      if (v6 <= 0)
        v7 = result;
      if (!a2)
        v7 += 2 * (v5 - v6);
      if (v5 >= v6)
        return v7;
    }
  }
  return result;
}

uint64_t RuleDesc::writeObject(int *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = *a1;
  if (v6 > 4)
    v7 = 0;
  else
    v7 = dword_209A58984[v6];
  v16 = v7;
  writeObject(a2, &v16, a3);
  result = writeObject(a2, a1 + 1, a3);
  switch(*a1)
  {
    case 0:
      v10 = a1[2];
      if (v10 < 4)
        v11 = v10 + 1;
      else
        v11 = 0;
      v15 = v11;
      v9 = (int *)&v15;
      goto LABEL_15;
    case 1:
    case 4:
      v9 = a1 + 2;
      goto LABEL_15;
    case 2:
      return writeObject(a2, (unsigned __int16 *)a1 + 4, a3);
    case 3:
      v12 = a1[2];
      if (v12 < 4)
        v13 = v12 + 1;
      else
        v13 = 0;
      v14 = v13;
      v9 = (int *)&v14;
LABEL_15:
      result = writeObject(a2, v9, a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t RuleDesc::readObject(unsigned __int16 *a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  uint64_t result;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned __int16 v13;
  int v14;

  v14 = 0;
  readObject(a2, &v14, a3);
  v6 = 0;
  if ((v14 - 2) <= 4)
    v6 = dword_209A58998[v14 - 2];
  *(_DWORD *)a1 = v6;
  result = readObject(a2, (_DWORD *)a1 + 1, a3);
  if (*(_BYTE *)(a2 + 35))
  {
    v13 = 0;
    result = readObject(a2, &v13, a3);
  }
  switch(*(_DWORD *)a1)
  {
    case 0:
      v12 = 0;
      result = readObject(a2, &v12, a3);
      v8 = v12;
      goto LABEL_10;
    case 1:
    case 4:
      result = readObject(a2, (_DWORD *)a1 + 2, a3);
      break;
    case 2:
      result = readObject(a2, a1 + 4, a3);
      break;
    case 3:
      v11 = 0;
      result = readObject(a2, &v11, a3);
      v8 = v11;
LABEL_10:
      v9 = v8 - 2;
      v10 = v8 - 1;
      if (v9 >= 3)
        v10 = 0;
      *((_DWORD *)a1 + 2) = v10;
      break;
    default:
      return result;
  }
  return result;
}

void RuleMgr::RuleMgr(RuleMgr *this, Voc *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)this = 0u;
  *((_QWORD *)this + 9) = a2;
  *((_WORD *)this + 32) = *((_WORD *)a2 + 84);
  v3 = MemChunkAlloc(0x110uLL, 0);
  *((_QWORD *)this + 10) = EnvMgr::EnvMgr((EnvMgr *)v3, 2u);
  if (!*((_DWORD *)this + 3))
    DgnArray<Rule>::reallocElts((uint64_t)this, 1, 0);
  *((_WORD *)this + 16) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_WORD *)this + 20) = 0;
  *((_DWORD *)this + 11) = 0;
  RuleMgr::newRule(this, 0, v4, v5, v6, v7, v8, v9);
  *((_DWORD *)this + 11) = 0;
}

void sub_209792E8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnArray<Rule>::releaseAll(v1);
  _Unwind_Resume(a1);
}

uint64_t RuleMgr::newRule(RuleMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int16 v21;
  _DWORD v22[6];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[19];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  StateMgr::verifyStateFull(*(StateMgr **)(*((_QWORD *)this + 9) + 56), a2, 1, 1, a5, a6, a7, a8);
  v12 = *((_DWORD *)this + 6);
  if (v12)
  {
    v13 = *(unsigned __int16 *)(*((_QWORD *)this + 2) + 2 * (v12 - 1));
    *((_DWORD *)this + 6) = v12 - 1;
  }
  else
  {
    v13 = *((unsigned __int16 *)this + 16);
    if ((_DWORD)v13 == 0xFFFF)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 2492, (uint64_t)"voc/rulemgr", 14, (uint64_t)"%s", v10, v11, (char)&errStr_voc_rulemgr_E_TOO_MANY_RULES);
      v13 = *((unsigned __int16 *)this + 16);
    }
  }
  DgnString::DgnString((DgnString *)v22);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  memset(v28, 0, sizeof(v28));
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v32 = 65793;
  v21 = v13;
  v22[2] = 0;
  v22[4] = a2;
  if ((_DWORD)v13)
  {
    StateMgr::addChildRule(*(StateMgr **)(*((_QWORD *)this + 9) + 56), a2, v13, v14, v15, v16, v17, v18);
    v28[16] = 1;
    ++*((_DWORD *)this + 9);
  }
  if (v12)
  {
    Rule::operator=(*(_QWORD *)this + 168 * v13, (uint64_t)&v21);
  }
  else
  {
    v19 = *((_DWORD *)this + 2);
    if (v19 == *((_DWORD *)this + 3))
    {
      DgnArray<Rule>::reallocElts((uint64_t)this, 1, 1);
      v19 = *((_DWORD *)this + 2);
    }
    Rule::Rule((Rule *)(*(_QWORD *)this + 168 * v19), (const Rule *)&v21);
    ++*((_DWORD *)this + 2);
    ++*((_WORD *)this + 16);
  }
  *((_DWORD *)this + 11) ^= RuleMgr::computeOneRuleIdNameChecksum(this, v13);
  Rule::~Rule((Rule *)&v21);
  return v13;
}

{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _WORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v23;
  _DWORD v24[6];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[19];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  if (*((unsigned __int16 *)this + 16) <= a3)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 2553, (uint64_t)"voc/rulemgr", 19, (uint64_t)"%u %u", a7, a8, *((_WORD *)this + 16));
  v11 = *((unsigned int *)this + 6);
  if (!(_DWORD)v11)
    goto LABEL_9;
  v12 = 0;
  while (*(unsigned __int16 *)(*((_QWORD *)this + 2) + 2 * v12) != (_DWORD)a3)
  {
    if (v11 == ++v12)
      goto LABEL_9;
  }
  if ((v12 & 0x80000000) != 0)
LABEL_9:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 2555, (uint64_t)"voc/rulemgr", 20, (uint64_t)"%u", a7, a8, a3);
  StateMgr::verifyStateFull(*(StateMgr **)(*((_QWORD *)this + 9) + 56), a2, 1, 1, a5, a6, a7, a8);
  v13 = *((_DWORD *)this + 6);
  if (v13)
  {
    v14 = *((unsigned int *)this + 6);
    v15 = (_WORD *)*((_QWORD *)this + 2);
    while ((unsigned __int16)*v15 != (_DWORD)a3)
    {
      ++v15;
      if (!--v14)
        goto LABEL_16;
    }
    v16 = v13 - 1;
    *v15 = *(_WORD *)(*((_QWORD *)this + 2) + 2 * v16);
    *((_DWORD *)this + 6) = v16;
  }
LABEL_16:
  DgnString::DgnString((DgnString *)v24);
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  memset(v30, 0, sizeof(v30));
  v26 = 0u;
  v25 = 0u;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v34 = 65793;
  v23 = a3;
  v24[2] = 0;
  v24[4] = a2;
  StateMgr::addChildRule(*(StateMgr **)(*((_QWORD *)this + 9) + 56), a2, a3, v17, v18, v19, v20, v21);
  v30[16] = 1;
  ++*((_DWORD *)this + 9);
  Rule::operator=(*(_QWORD *)this + 168 * a3, (uint64_t)&v23);
  *((_DWORD *)this + 11) ^= RuleMgr::computeOneRuleIdNameChecksum(this, a3);
  Rule::~Rule((Rule *)&v23);
  return a3;
}

void sub_209793064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Rule::~Rule((Rule *)va);
  _Unwind_Resume(a1);
}

void RuleMgr::~RuleMgr(EnvMgr **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  EnvMgr *v12;
  unsigned int v13;

  RuleMgr::emptyAllRuleDescsNoRebuild((RuleMgr *)this, a2, a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)this + 2))
  {
    v11 = 0;
    do
    {
      v12 = *this;
      v13 = v11;
      if (*((_DWORD *)*this + 42 * v11 + 26))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 123, (uint64_t)"voc/rulemgr", 12, (uint64_t)"%.500s %d %.500s %d", v9, v10, (char)"delete");
        v12 = *this;
      }
      if (*((_WORD *)v12 + 84 * v13 + 77))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 123, (uint64_t)"voc/rulemgr", 12, (uint64_t)"%.500s %d %.500s %d", v9, v10, (char)"delete");
        v12 = *this;
      }
      if (*((_WORD *)v12 + 84 * v13 + 78))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 123, (uint64_t)"voc/rulemgr", 12, (uint64_t)"%.500s %d %.500s %d", v9, v10, (char)"delete");
        v12 = *this;
      }
      if (*((_WORD *)v12 + 84 * v13 + 79))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 123, (uint64_t)"voc/rulemgr", 12, (uint64_t)"%.500s %d %.500s %d", v9, v10, (char)"delete");
      v11 = v13 + 1;
    }
    while (*((_DWORD *)this + 2) > (unsigned __int16)(v13 + 1));
  }
  DgnDelete<EnvMgr>(this[10]);
  this[10] = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 6));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 2));
  DgnArray<Rule>::releaseAll((uint64_t)this);
}

uint64_t RuleMgr::emptyAllRuleDescsNoRebuild(RuleMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned __int16 i;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  v8 = *((_DWORD *)this + 2);
  if (v8)
  {
    for (i = 0; i < v8; ++i)
    {
      if (*(_BYTE *)(*(_QWORD *)this + 168 * i + 128))
      {
        RuleMgr::setDesc((unint64_t)this, i, (uint64_t)v12, a4, a5, a6, a7, a8);
        v8 = *((_DWORD *)this + 2);
      }
    }
  }
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)v12);
}

void sub_2097932BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

EnvMgr *DgnDelete<EnvMgr>(EnvMgr *result)
{
  _QWORD *v1;

  if (result)
  {
    EnvMgr::~EnvMgr(result);
    return (EnvMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t RuleMgr::setDesc(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  int v32;
  unint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  int v36;
  StateMgr *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned __int16 *v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t *v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t i;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  StateMgr *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  uint64_t *v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  unsigned int v102;
  unsigned __int16 **v103;
  unsigned __int16 *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v129;
  uint64_t v130;
  _BYTE v131[8];
  unsigned int v132;
  unsigned int v133;
  int v134;
  uint64_t **v135;
  void *v136[2];

  RuleMgr::verifyRule((RuleMgr *)a1, a2, 1, a4, a5, a6, a7, a8);
  RuleMgr::verifyNewDesc(a1, a3, v11, v12, v13, v14, v15, v16);
  v19 = *(_QWORD *)a1;
  if (*(_WORD *)(*(_QWORD *)a1 + 168 * a2 + 154))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 123, (uint64_t)"voc/rulemgr", 12, (uint64_t)"%.500s %d %.500s %d", v17, v18, (char)"setDesc");
    v19 = *(_QWORD *)a1;
  }
  if (*(_WORD *)(v19 + 168 * a2 + 156))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 123, (uint64_t)"voc/rulemgr", 12, (uint64_t)"%.500s %d %.500s %d", v17, v18, (char)"setDesc");
    v19 = *(_QWORD *)a1;
  }
  if (*(_WORD *)(v19 + 168 * a2 + 158))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 123, (uint64_t)"voc/rulemgr", 12, (uint64_t)"%.500s %d %.500s %d", v17, v18, (char)"setDesc");
  HashKEV<unsigned int,unsigned int,CWIDScope>::HashKEV((uint64_t)v131, 0, 16);
  v129 = 0;
  v130 = 0;
  RuleMgr::verifyRule((RuleMgr *)a1, a2, 1, v20, v21, v22, v23, v24);
  v30 = *(_QWORD *)a1 + 168 * a2;
  v32 = *(_DWORD *)(v30 + 72);
  v31 = (unsigned int *)(v30 + 72);
  if (v32)
  {
    v33 = 0;
    v34 = v31 - 2;
    do
    {
      v35 = *(_QWORD *)v34;
      v36 = *(_DWORD *)(*(_QWORD *)v34 + 12 * v33);
      switch(v36)
      {
        case 4:
          LODWORD(v136[0]) = 0;
          v44 = *(_DWORD *)(v35 + 12 * v33 + 8) & 0xFFFFFF | (*(unsigned __int16 *)(a1 + 64) << 25);
          LODWORD(v136[0]) = v44;
          if (v134)
            v45 = (-1640531527 * v44) >> -(char)v134;
          else
            v45 = 0;
          v46 = v135[v45];
          if (v46)
          {
            while (*((_DWORD *)v46 + 2) != v44 || *((_DWORD *)v46 + 3) != v44)
            {
              v46 = (uint64_t *)*v46;
              if (!v46)
                goto LABEL_26;
            }
          }
          else
          {
LABEL_26:
            HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v131, (int *)v136);
          }
          break;
        case 2:
          v47 = *(_QWORD *)a1 + 168 * a2;
          v50 = *(_DWORD *)(v47 + 120);
          v48 = (_DWORD *)(v47 + 120);
          v49 = v50;
          if (v50)
          {
            v51 = *(unsigned __int16 *)(v35 + 12 * v33 + 8);
            v52 = *(unsigned __int16 **)(*(_QWORD *)a1 + 168 * a2 + 112);
            v53 = v52;
            v54 = v49;
            v55 = 0xFFFFFFFFLL;
            while (1)
            {
              v56 = *v53++;
              if (v56 == v51)
                break;
              --v55;
              if (!--v54)
                goto LABEL_40;
            }
            if (v55)
            {
              v57 = v49;
              v58 = v52;
              while (*v58 != v51)
              {
                ++v58;
                if (!--v57)
                  goto LABEL_38;
              }
              v59 = v49 - 1;
              *v58 = v52[v59];
              *v48 = v59;
LABEL_38:
              RuleMgr::removeIncludingRule((RuleMgr *)a1, v51, a2, 0);
            }
          }
          break;
        case 1:
          v37 = *(StateMgr **)(*(_QWORD *)(a1 + 72) + 56);
          if (v37)
          {
            if (StateMgr::isStateInRule(v37, *(_DWORD *)(v35 + 12 * v33 + 8), a2, v25, v26, v27, v28, v29))
            {
              StateMgr::unincludeStateInRule((uint64_t)v37, *(_DWORD *)(*(_QWORD *)v34 + 12 * v33 + 8), a2);
              v38 = *(_QWORD *)a1 + 168 * a2;
              v41 = *(_DWORD *)(v38 + 144);
              v39 = (unsigned int *)(v38 + 144);
              v40 = v41;
              if (v41)
              {
                v42 = v40;
                v43 = *(_DWORD **)(*(_QWORD *)a1 + 168 * a2 + 136);
                while (*v43 != *(_DWORD *)(*(_QWORD *)v34 + 12 * v33 + 8))
                {
                  ++v43;
                  if (!--v42)
                    goto LABEL_40;
                }
                v60 = v40 - 1;
                *v43 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 168 * a2 + 136) + 4 * v60);
                *v39 = v60;
              }
            }
          }
          break;
      }
LABEL_40:
      ++v33;
    }
    while (v33 < *v31);
  }
  LODWORD(v130) = 0;
  if (HIDWORD(v130) < v132)
  {
    v136[0] = 0;
    HIDWORD(v130) = realloc_array(v129, v136, 4 * v132, 0, 0, 1) >> 2;
    v129 = v136[0];
  }
  v61 = v133;
  if (!v133)
  {
    LODWORD(v63) = 0;
    v62 = 0;
LABEL_50:
    v64 = v130;
    while (v63 < v61)
    {
      v65 = *((_DWORD *)v62 + 3);
      if (v64 == HIDWORD(v130))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v129, 1, 1);
        v64 = v130;
      }
      *((_DWORD *)v129 + v64) = v65;
      v64 = v130 + 1;
      LODWORD(v130) = v130 + 1;
      v66 = (uint64_t *)*v62;
      v61 = v133;
      if (!*v62)
      {
        v63 = (v63 + 1);
        if (v63 >= v133)
        {
          v66 = v62;
        }
        else
        {
          v66 = v135[v63];
          if (!v66)
          {
            v67 = (uint64_t *)&v135[v63 + 1];
            v68 = ~v63 + v133;
            while (v68)
            {
              v69 = (uint64_t *)*v67++;
              v66 = v69;
              LODWORD(v63) = v63 + 1;
              --v68;
              if (v69)
                goto LABEL_62;
            }
            goto LABEL_64;
          }
        }
      }
LABEL_62:
      v62 = v66;
    }
    goto LABEL_64;
  }
  v62 = *v135;
  if (*v135)
  {
    LODWORD(v63) = 0;
    goto LABEL_50;
  }
  v63 = 0;
  while (v133 - 1 != v63)
  {
    v62 = v135[++v63];
    if (v62)
      goto LABEL_50;
  }
  v64 = v130;
LABEL_64:
  if (v64)
  {
    for (i = 0; i < v64; ++i)
    {
      v71 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 48);
      if (v71)
      {
        WordList::removeIncludingRuleRef(v71, *((_DWORD *)v129 + i) & 0xFFFFFF);
        v64 = v130;
      }
      --*(_WORD *)(*(_QWORD *)a1 + 168 * a2 + 152);
    }
  }
  HashKEV<unsigned int,unsigned int,CWIDScope>::removeAll((uint64_t)v131);
  LODWORD(v130) = 0;
  DgnArray<RuleDesc>::copyArraySlice(*(_QWORD *)a1 + 168 * a2 + 64, (_QWORD *)a3, 0, *(_DWORD *)(a3 + 8));
  if (*(_DWORD *)(a3 + 8))
  {
    v77 = 0;
    do
    {
      v78 = *(_QWORD *)a3;
      v79 = *(_DWORD *)(*(_QWORD *)a3 + 12 * v77);
      switch(v79)
      {
        case 4:
          LODWORD(v136[0]) = 0;
          v94 = *(_DWORD *)(v78 + 12 * v77 + 8) & 0xFFFFFF | (*(unsigned __int16 *)(a1 + 64) << 25);
          LODWORD(v136[0]) = v94;
          if (v134)
            v95 = (-1640531527 * v94) >> -(char)v134;
          else
            v95 = 0;
          v96 = v135[v95];
          if (v96)
          {
            while (*((_DWORD *)v96 + 2) != v94 || *((_DWORD *)v96 + 3) != v94)
            {
              v96 = (uint64_t *)*v96;
              if (!v96)
                goto LABEL_88;
            }
          }
          else
          {
LABEL_88:
            HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v131, (int *)v136);
          }
          break;
        case 2:
          v97 = *(unsigned __int16 *)(v78 + 12 * v77 + 8);
          if (v97 == (_DWORD)a2)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 2881, (uint64_t)"voc/rulemgr", 11, (uint64_t)"%d", v75, v76, a2);
            v97 = *(unsigned __int16 *)(*(_QWORD *)a3 + 12 * v77 + 8);
          }
          v98 = *(_QWORD *)a1;
          v99 = *(_QWORD *)a1 + 168 * a2;
          v102 = *(_DWORD *)(v99 + 120);
          v101 = (_DWORD *)(v99 + 120);
          v100 = v102;
          v103 = (unsigned __int16 **)(v101 - 2);
          if (!v102)
            goto LABEL_97;
          v104 = *v103;
          v105 = v100;
          v106 = 0xFFFFFFFFLL;
          while (1)
          {
            v107 = *v104++;
            if (v107 == v97)
              break;
            --v106;
            if (!--v105)
              goto LABEL_97;
          }
          if (!v106)
          {
LABEL_97:
            if ((_DWORD)v100 == *(_DWORD *)(v98 + 168 * a2 + 124))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)(v101 - 2), 1, 1);
              LODWORD(v100) = *v101;
              v98 = *(_QWORD *)a1;
            }
            (*v103)[v100] = v97;
            *v101 = v100 + 1;
            if (*(_DWORD *)(v98 + 168 * a2 + 104))
            {
              VocMgr::beginRuleStateRecursiveOperation((uint64_t *)VocMgr::smpVocMgr);
              RuleMgr::verifyRuleNotRecursivelyIncluded(a1, v97, a2, v108, v109, v110, v111, v112);
              VocMgr::endRuleStateRecursiveOperation((VocMgr *)VocMgr::smpVocMgr);
            }
            RuleMgr::addIncludingRule((RuleMgr *)a1, v97, a2, 0);
          }
          break;
        case 1:
          v80 = *(StateMgr **)(*(_QWORD *)(a1 + 72) + 56);
          v81 = *(_DWORD *)(v78 + 12 * v77 + 8);
          if (!StateMgr::getLeftWBAllowed(v80, v81, 1, v72, v73, v74, v75, v76)
            || !StateMgr::getRightWBAllowed(v80, v81, 1, v82, v83, v84, v85, v86))
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 2869, (uint64_t)"voc/rulemgr", 21, (uint64_t)"%d %d", v85, v86, a2);
          }
          if (!StateMgr::isStateInRule(v80, v81, a2, v87, v88, v89, v85, v86))
          {
            StateMgr::includeStateInRule((unint64_t)v80, v81, a2);
            v90 = *(_QWORD *)a1 + 168 * a2;
            v93 = *(_DWORD *)(v90 + 144);
            v92 = (unsigned int *)(v90 + 144);
            v91 = v93;
            if (v93 == (unint64_t)v92[1])
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v92 - 2), 1, 1);
              v91 = *v92;
            }
            *(_DWORD *)(*((_QWORD *)v92 - 1) + 4 * v91) = v81;
            ++*v92;
          }
          break;
      }
      ++v77;
    }
    while (v77 < *(unsigned int *)(a3 + 8));
  }
  LODWORD(v130) = 0;
  if (HIDWORD(v130) < v132)
  {
    v136[0] = 0;
    HIDWORD(v130) = realloc_array(v129, v136, 4 * v132, 0, 0, 1) >> 2;
    v129 = v136[0];
  }
  v113 = v133;
  if (v133)
  {
    v114 = *v135;
    if (!*v135)
    {
      v115 = 0;
      while (v133 - 1 != v115)
      {
        v114 = v135[++v115];
        if (v114)
          goto LABEL_113;
      }
      v116 = v130;
      goto LABEL_127;
    }
  }
  else
  {
    v114 = 0;
  }
  LODWORD(v115) = 0;
LABEL_113:
  v116 = v130;
  while (v115 < v113)
  {
    v117 = *((_DWORD *)v114 + 3);
    if (v116 == HIDWORD(v130))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v129, 1, 1);
      v116 = v130;
    }
    *((_DWORD *)v129 + v116) = v117;
    v116 = v130 + 1;
    LODWORD(v130) = v130 + 1;
    v118 = (uint64_t *)*v114;
    v113 = v133;
    if (!*v114)
    {
      v115 = (v115 + 1);
      if (v115 >= v133)
      {
        v118 = v114;
      }
      else
      {
        v118 = v135[v115];
        if (!v118)
        {
          v119 = (uint64_t *)&v135[v115 + 1];
          v120 = ~v115 + v133;
          while (v120)
          {
            v121 = (uint64_t *)*v119++;
            v118 = v121;
            LODWORD(v115) = v115 + 1;
            --v120;
            if (v121)
              goto LABEL_125;
          }
          break;
        }
      }
    }
LABEL_125:
    v114 = v118;
  }
LABEL_127:
  if (v116)
  {
    v122 = 0;
    do
    {
      WordList::addIncludingRuleRef(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 48), *((_DWORD *)v129 + v122) & 0xFFFFFF);
      ++*(_WORD *)(*(_QWORD *)a1 + 168 * a2 + 152);
      ++v122;
    }
    while (v122 < v130);
  }
  HashKEV<unsigned int,unsigned int,CWIDScope>::removeAll((uint64_t)v131);
  LODWORD(v130) = 0;
  RuleMgr::killStatesOfRule((RuleMgr *)a1, a2, 0, v123, v124, v125, v126, v127);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v129);
  return HashKEV<unsigned int,unsigned int,CWIDScope>::~HashKEV((uint64_t)v131);
}

void sub_209793C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  HashKEV<unsigned int,unsigned int,CWIDScope>::~HashKEV((uint64_t)va1);
  _Unwind_Resume(a1);
}

uLong RuleMgr::computeOneRuleIdNameChecksum(RuleMgr *this, unsigned int a2)
{
  uLong v4;
  uint64_t v5;
  const char *v6;
  uInt v7;
  unsigned int v8;
  unsigned __int16 v10;

  v10 = a2;
  v4 = computeCRC32(0, 0, 0);
  v5 = *(_QWORD *)this + 168 * a2;
  if (*(_DWORD *)(v5 + 16))
    v6 = *(const char **)(v5 + 8);
  else
    v6 = (const char *)&unk_209A58919;
  v7 = strlen(v6);
  v8 = computeCRC32(v4, (const unsigned __int8 *)v6, v7);
  return computeCRC32(v8, &v10, 1);
}

uLong RuleMgr::computeRuleIdNameChecksum(uLong this)
{
  unsigned int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  *(_DWORD *)(this + 44) = 0;
  v1 = *(unsigned __int16 *)(this + 32);
  if (v1 >= 2)
  {
    v2 = this;
    v3 = 1;
    v4 = 296;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)v2 + v4))
      {
        this = RuleMgr::computeOneRuleIdNameChecksum((RuleMgr *)v2, (unsigned __int16)v3);
        *(_DWORD *)(v2 + 44) ^= this;
        v1 = *(unsigned __int16 *)(v2 + 32);
      }
      ++v3;
      v4 += 168;
    }
    while (v3 < v1);
  }
  return this;
}

uLong RuleMgr::loadRuleMgr(RuleMgr *this, DFile *a2, DFileChecksums *a3, int a4, BOOL *a5, unsigned int a6)
{
  uLong result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  DgnStream *v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  char *v24;
  uint64_t CurrentSubDirComponents;
  unsigned __int16 v26;
  unsigned int v27;
  uint64_t v28;

  result = DFile::subFileExists((uint64_t)a2, 0x4Eu);
  if (!(_DWORD)result)
    return result;
  *((_WORD *)this + 32) = a6;
  *((_QWORD *)this + 9) = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * a6);
  if (a4)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 866, (uint64_t)"voc/rulemgr", 17, (uint64_t)"%s", v13, v14, (char)&unk_209A58919);
  v28 = 0;
  v15 = 1;
  v16 = OpenAndReadMrecHeader((uint64_t)a2, 0x4Eu, 1, "MRRULE!?", (_DWORD *)&v28 + 1, &v28);
  v19 = (DgnStream *)v16;
  *(_BYTE *)(v16 + 35) = 0;
  v20 = v28;
  v21 = HIDWORD(v28) == 19 && (_DWORD)v28 == 28;
  v22 = v21;
  if (v21)
  {
    *a5 = 1;
    *(_BYTE *)(v16 + 35) = 1;
    v23 = 19;
    v20 = 28;
  }
  else if (v28 == 0x160000001DLL)
  {
    *a5 = 1;
    *(_BYTE *)(v16 + 35) = 1;
    v23 = 22;
  }
  else
  {
    if (v28 == 0x180000001ELL)
    {
      *(_BYTE *)(v16 + 35) = 1;
    }
    else
    {
      if (v28 != 0x180000001FLL)
      {
        if (*((_DWORD *)a2 + 6))
          v24 = (char *)*((_QWORD *)a2 + 2);
        else
          v24 = (char *)&unk_209A58919;
        MrecHeaderCheckVersions(v24, "MRRULE!?", HIDWORD(v28), v28, 0x18u, 0x20u);
        v15 = 0;
        v20 = v28;
        v23 = HIDWORD(v28);
        goto LABEL_24;
      }
      v15 = 0;
      *(_BYTE *)(v16 + 35) = 1;
    }
    v23 = 24;
  }
LABEL_24:
  MrecHeaderCheckLatestVersionIfShared(a2, "MRRULE!?", v23, v20, 24, 32, v17, v18);
  v27 = 0;
  readObject<Rule>(v19, (uint64_t)this, &v27);
  readObject<unsigned short>(v19, (uint64_t)this + 16, &v27);
  readObject((uint64_t)v19, (unsigned __int16 *)this + 16, &v27);
  readObject((uint64_t)v19, (_DWORD *)this + 9, &v27);
  if ((v22 & 1) == 0)
    readObject((uint64_t)v19, (_DWORD *)this + 11, &v27);
  if (*((_BYTE *)v19 + 35))
  {
    v26 = 0;
    readObject((uint64_t)v19, &v26, &v27);
  }
  EnvMgr::loadEnvMgrFromStream(*((EnvMgr **)this + 10), a2, v19, &v27, 0);
  readObjectChecksumAndVerify(v19, v27);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x4Eu, v27);
  (**(void (***)(DgnStream *))v19)(v19);
  result = MemChunkFree(v19, 0);
  if ((v22 | v15) == 1)
    return RuleMgr::computeRuleIdNameChecksum((uLong)this);
  return result;
}

void readObject<Rule>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;

  v16 = 0;
  readObject((uint64_t)a1, &v16, a3);
  v6 = v16;
  v7 = *(_DWORD *)(a2 + 12);
  if (v16 > v7)
    DgnArray<Rule>::reallocElts(a2, v16 - v7, 0);
  v8 = *(_DWORD *)(a2 + 8);
  v9 = (int)v8;
  if (v6 >= v8)
  {
    if (v6 > v8)
    {
      v11 = v6 - v8;
      v12 = 168 * v8 + 160;
      do
      {
        v13 = (_DWORD *)(*(_QWORD *)a2 + v12);
        DgnString::DgnString((DgnString *)(v13 - 38));
        *((_WORD *)v13 - 80) = 0;
        *(v13 - 36) = 0;
        *(v13 - 34) = 0;
        *((_OWORD *)v13 - 8) = 0u;
        *((_OWORD *)v13 - 7) = 0u;
        *((_OWORD *)v13 - 6) = 0u;
        *((_OWORD *)v13 - 5) = 0u;
        *((_OWORD *)v13 - 4) = 0u;
        *((_OWORD *)v13 - 3) = 0u;
        *(_DWORD *)((char *)v13 - 33) = 0;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        *((_QWORD *)v13 - 3) = 0;
        v12 += 168;
        *v13 = 65793;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    v10 = 168 * (int)v8 - 168;
    do
    {
      --v9;
      Rule::~Rule((Rule *)(*(_QWORD *)a2 + v10));
      v10 -= 168;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if (v6)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      Rule::readRule((Rule *)(*(_QWORD *)a2 + v14), a1, a3);
      ++v15;
      v14 += 168;
    }
    while (v15 < *(unsigned int *)(a2 + 8));
  }
}

BOOL RuleMgr::isEmpty(RuleMgr *this)
{
  return *((_DWORD *)this + 9) == 0;
}

void RuleMgr::saveRuleMgr(RuleMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  DgnStream *v13;
  uint64_t CurrentSubDirComponents;
  unsigned int v15;

  v8 = (int *)((char *)this + 36);
  if (*((_DWORD *)this + 9))
  {
    if (a4)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 970, (uint64_t)"voc/rulemgr", 16, (uint64_t)"%s", a7, a8, (char)&errStr_voc_rulemgr_E_MIXED_TEXT_AND_BINARY_SUBFILES);
    v13 = OpenAndWriteMrecHeader((uint64_t)a2, 0x4Eu, a5, "MRRULE!?", 24, 32);
    v15 = 0;
    writeObject<Rule>(v13, (uint64_t)this, &v15);
    writeObject<unsigned short>((uint64_t)v13, (uint64_t)this + 16, &v15);
    writeObject((uint64_t)v13, (unsigned __int16 *)this + 16, &v15);
    writeObject((uint64_t)v13, v8, &v15);
    writeObject((uint64_t)v13, (int *)this + 11, &v15);
    EnvMgr::saveEnvMgrToStream(*((EnvMgr **)this + 10), v13, &v15, 1, 0);
    writeObjectChecksum((uint64_t)v13, (int *)&v15);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x4Eu, v15);
    if (v13)
    {
      (**(void (***)(DgnStream *))v13)(v13);
      MemChunkFree(v13, 0);
    }
  }
}

uint64_t writeObject<Rule>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject((uint64_t)a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject(a1, (const Rule *)(*(_QWORD *)a2 + v7), a3);
      ++v8;
      v7 += 168;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void RuleMgr::printSize(RuleMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  EnvMgr *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 997, (DgnString *)&v97);
  if (v98)
    v16 = (void *)v97;
  else
    v16 = &unk_209A58919;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A58919, a3, &unk_209A58919, v16);
  DgnString::~DgnString((DgnString *)&v97);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A58919);
  v21 = sizeObject<Rule>((uint64_t)this, 0);
  v22 = sizeObject<Rule>((uint64_t)this, 1);
  v23 = sizeObject<Rule>((uint64_t)this, 3);
  v24 = (a3 + 1);
  v94 = a3;
  v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 999, (DgnString *)&v97);
  if (v98)
    v30 = (void *)v97;
  else
    v30 = &unk_209A58919;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_209A58919, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v97);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v31 = 12;
  else
    v31 = 16;
  v32 = *((unsigned int *)this + 6);
  v33 = *((_DWORD *)this + 7);
  if (v33 >= v32)
  {
    v34 = 0;
    if ((int)v32 > 0)
      v31 = (v31 | 2) + 2 * (v32 - 1);
    v35 = v31 + 2 * (v33 - v32);
  }
  else
  {
    v34 = 2 * v32;
    v35 = v31;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 999, (DgnString *)&v97);
  if (v98)
    v40 = (void *)v97;
  else
    v40 = &unk_209A58919;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, v24, &unk_209A58919, v25, v25, v40, v35, v31, v34);
  DgnString::~DgnString((DgnString *)&v97);
  *a4 += v35;
  *a5 += v31;
  *a6 += v34;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 999, (DgnString *)&v97);
  if (v98)
    v45 = (void *)v97;
  else
    v45 = &unk_209A58919;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v41, v42, v43, v44, v24, &unk_209A58919, v25, v25, v45, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v97);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 999, (DgnString *)&v97);
  if (v98)
    v50 = (void *)v97;
  else
    v50 = &unk_209A58919;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v24, &unk_209A58919, v25, v25, v50, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v97);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 999, (DgnString *)&v97);
  if (v98)
    v55 = (void *)v97;
  else
    v55 = &unk_209A58919;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, v24, &unk_209A58919, v25, v25, v55, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v97);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 999, (DgnString *)&v97);
  if (v98)
    v60 = (void *)v97;
  else
    v60 = &unk_209A58919;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, v24, &unk_209A58919, v25, v25, v60, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v97);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 1000, (DgnString *)&v97);
  if (v98)
    v65 = (void *)v97;
  else
    v65 = &unk_209A58919;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, v24, &unk_209A58919, v25, v25, v65, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v97);
  *a4 += 2;
  *a5 += 2;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v66 = 4;
  else
    v66 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 1001, (DgnString *)&v97);
  if (v98)
    v71 = (void *)v97;
  else
    v71 = &unk_209A58919;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v24, &unk_209A58919, v25, v25, v71, v66, v66, 0);
  DgnString::~DgnString((DgnString *)&v97);
  *a4 += v66;
  *a5 += v66;
  v72 = (EnvMgr *)*((_QWORD *)this + 10);
  if (v72)
  {
    v96 = 0;
    v97 = 0;
    v95 = 0;
    EnvMgr::printSize(v72, 0xFFFFFFFFLL, v24, &v97, &v96, &v95);
    *a4 += v97;
    *a5 += v96;
    *a6 += v95;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 4;
  else
    v73 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 1003, (DgnString *)&v97);
  if (v98)
    v78 = (void *)v97;
  else
    v78 = &unk_209A58919;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v74, v75, v76, v77, v24, &unk_209A58919, v25, v25, v78, v73, v73, 0);
  DgnString::~DgnString((DgnString *)&v97);
  *a4 += v73;
  *a5 += v73;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v79 = *((unsigned int *)this + 14);
    v80 = *((_DWORD *)this + 15);
    if (v80 >= v79)
    {
      v81 = 0;
      if ((int)v79 <= 0)
        v82 = 16;
      else
        v82 = 2 * (v79 - 1) + 18;
      v83 = v82 + 2 * (v80 - v79);
    }
    else
    {
      v81 = 2 * v79;
      v82 = 16;
      v83 = 16;
    }
    getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 1009, (DgnString *)&v97);
    if (v98)
      v88 = (void *)v97;
    else
      v88 = &unk_209A58919;
    xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, v24, &unk_209A58919, v25, v25, v88, v83, v82, v81);
    DgnString::~DgnString((DgnString *)&v97);
    *a4 += v83;
    *a5 += v82;
    *a6 += v81;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 1011, (DgnString *)&v97);
  if (v98)
    v93 = (void *)v97;
  else
    v93 = &unk_209A58919;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v89, v90, v91, v92, v94, &unk_209A58919, (35 - v94), (35 - v94), v93, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v97);
}

void sub_209794A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<Rule>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int16 v8;
  _DWORD v9[6];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[19];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  DgnString::DgnString((DgnString *)v9);
  v4 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  v8 = 0;
  v9[2] = 0;
  v9[4] = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v19 = 65793;
  if (a2 != 3)
  {
    v4 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v5 = *(unsigned int *)(a1 + 8);
      if ((int)v5 >= 1)
      {
        v6 = v5 + 1;
        do
          v4 += sizeObject(*(_QWORD *)a1 + 168 * (v6-- - 2), a2);
        while (v6 > 1);
      }
      if (!a2)
        v4 += 168 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  Rule::~Rule((Rule *)&v8);
  return v4;
}

void sub_209794B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Rule::~Rule((Rule *)va);
  _Unwind_Resume(a1);
}

BOOL RuleMgr::verifyRule(RuleMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v8;

  if (a2 && *((_DWORD *)this + 2) > a2)
  {
    v8 = *(_BYTE *)(*(_QWORD *)this + 168 * a2 + 128) != 0;
    if (*(_BYTE *)(*(_QWORD *)this + 168 * a2 + 128))
      return v8;
  }
  else
  {
    v8 = 0;
  }
  if (a3)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 3288, (uint64_t)"voc/rulemgr", 1, (uint64_t)"%d", a7, a8, a2);
  return v8;
}

uint64_t RuleMgr::getParent(RuleMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  RuleMgr::verifyRule(this, a2, 1, a4, a5, a6, a7, a8);
  return *(unsigned int *)(*(_QWORD *)this + 168 * a2 + 24);
}

uint64_t RuleMgr::getLMAllowed(RuleMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  RuleMgr::verifyRule(this, a2, 1, a4, a5, a6, a7, a8);
  return *(unsigned __int8 *)(*(_QWORD *)this + 168 * a2 + 160);
}

uint64_t RuleMgr::getCoartAllowed(RuleMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  RuleMgr::verifyRule(this, a2, 1, a4, a5, a6, a7, a8);
  return *(unsigned __int8 *)(*(_QWORD *)this + 168 * a2 + 161);
}

uint64_t RuleMgr::getPrefilteringAllowed(RuleMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  RuleMgr::verifyRule(this, a2, 1, a4, a5, a6, a7, a8);
  return *(unsigned __int8 *)(*(_QWORD *)this + 168 * a2 + 162);
}

uint64_t RuleMgr::getDesc(RuleMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  RuleMgr::verifyRule(this, a2, 1, a4, a5, a6, a7, a8);
  return *(_QWORD *)this + 168 * a2 + 64;
}

RuleMgr *RuleMgr::addBuiltRef(RuleMgr *this, unsigned int a2, int a3)
{
  uint64_t v3;
  RuleMgr *v4;
  unint64_t v5;
  unsigned int v6;
  unsigned __int16 v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;

  v3 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 168 * a2 + 120))
  {
    v4 = this;
    v5 = 0;
    v6 = a3 + 1;
    do
    {
      v8 = *(_WORD *)(*(_QWORD *)(v3 + 168 * a2 + 112) + 2 * v5);
      v9 = v3 + 168 * v8;
      v11 = *(unsigned __int8 *)(v9 + 130);
      v10 = (_BYTE *)(v9 + 130);
      if (!v11)
      {
        *v10 = 1;
        this = (RuleMgr *)RuleMgr::addBuiltRef(v4, v8, v6);
        v3 = *(_QWORD *)v4;
      }
      ++v5;
    }
    while (v5 < *(unsigned int *)(v3 + 168 * a2 + 120));
  }
  return this;
}

RuleMgr *RuleMgr::removeBuiltRef(RuleMgr *this, unsigned int a2, int a3)
{
  uint64_t v3;
  RuleMgr *v4;
  unint64_t v5;
  unsigned int v6;
  unsigned __int16 v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  unint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;

  v3 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 168 * a2 + 120))
  {
    v4 = this;
    v5 = 0;
    v6 = a3 + 1;
    do
    {
      v8 = *(_WORD *)(*(_QWORD *)(v3 + 168 * a2 + 112) + 2 * v5);
      v9 = v3 + 168 * v8;
      v11 = *(unsigned __int8 *)(v9 + 130);
      v10 = (_BYTE *)(v9 + 130);
      if (v11)
      {
        v12 = *(unsigned int *)(v3 + 168 * *(unsigned __int16 *)(*(_QWORD *)(v3 + 168 * a2 + 112) + 2 * v5) + 104);
        if (!(_DWORD)v12)
          goto LABEL_12;
        v13 = *(unsigned __int16 **)(v3 + 168 * *(unsigned __int16 *)(*(_QWORD *)(v3 + 168 * a2 + 112) + 2 * v5) + 96);
        if (!*(_BYTE *)(v3 + 168 * *v13 + 130) && !*(_BYTE *)(v3 + 168 * *v13 + 129))
        {
          v14 = 1;
          do
          {
            v15 = v14;
            if (v12 == v14)
              break;
            v16 = v13[v14];
            if (*(_BYTE *)(v3 + 168 * v13[v15] + 130))
              break;
            v17 = *(unsigned __int8 *)(v3 + 168 * v16 + 129);
            v14 = v15 + 1;
          }
          while (!v17);
          if (v15 >= v12)
          {
LABEL_12:
            *v10 = 0;
            this = (RuleMgr *)RuleMgr::removeBuiltRef(v4, v8, v6);
            v3 = *(_QWORD *)v4;
          }
        }
      }
      ++v5;
    }
    while (v5 < *(unsigned int *)(v3 + 168 * a2 + 120));
  }
  return this;
}

RuleMgr *RuleMgr::removeIncludingRule(RuleMgr *this, unsigned int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)this + 168 * a2;
  v8 = *(_DWORD *)(v5 + 104);
  v7 = (_DWORD *)(v5 + 104);
  v6 = v8;
  if (!v8)
  {
    v11 = v4 + 168 * a2;
    v13 = *(unsigned __int8 *)(v11 + 130);
    v12 = (_BYTE *)(v11 + 130);
    if (!v13)
      return this;
LABEL_19:
    *v12 = 0;
    return RuleMgr::removeBuiltRef(this, a2, a4 + 1);
  }
  v9 = v6;
  v10 = (_WORD *)*((_QWORD *)v7 - 1);
  while ((unsigned __int16)*v10 != a3)
  {
    ++v10;
    if (!--v9)
      goto LABEL_9;
  }
  LODWORD(v6) = v6 - 1;
  *v10 = *(_WORD *)(*((_QWORD *)v7 - 1) + 2 * v6);
  *v7 = v6;
LABEL_9:
  v14 = v4 + 168 * a2;
  v15 = *(unsigned __int8 *)(v14 + 130);
  v12 = (_BYTE *)(v14 + 130);
  if (v15)
  {
    if (!(_DWORD)v6)
      goto LABEL_19;
    v16 = (unsigned __int16 *)*((_QWORD *)v7 - 1);
    if (!*(_BYTE *)(v4 + 168 * *v16 + 130) && !*(_BYTE *)(v4 + 168 * *v16 + 129))
    {
      v17 = 1;
      do
      {
        v18 = v17;
        if (v6 == v17)
          break;
        v19 = v16[v17];
        if (*(_BYTE *)(v4 + 168 * v16[v18] + 130))
          break;
        v20 = *(unsigned __int8 *)(v4 + 168 * v19 + 129);
        v17 = v18 + 1;
      }
      while (!v20);
      if (v18 >= v6)
        goto LABEL_19;
    }
  }
  return this;
}

RuleMgr *RuleMgr::addIncludingRule(RuleMgr *this, unsigned int a2, unsigned int a3, int a4)
{
  RuleMgr *v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;

  v7 = this;
  v8 = *(_QWORD *)this;
  v10 = *(_QWORD *)this + 168 * a2;
  v13 = *(_DWORD *)(v10 + 104);
  v12 = (unsigned int *)(v10 + 104);
  v11 = v13;
  if (v13 == v12[1])
  {
    this = (RuleMgr *)DgnPrimArray<short>::reallocElts((uint64_t)(v12 - 2), 1, 1);
    v11 = *v12;
    v8 = *(_QWORD *)v7;
  }
  *(_WORD *)(*((_QWORD *)v12 - 1) + 2 * v11) = a3;
  *v12 = v11 + 1;
  v14 = v8 + 168 * a2;
  v16 = *(unsigned __int8 *)(v14 + 130);
  v15 = (_BYTE *)(v14 + 130);
  if (!v16)
  {
    if (*(_BYTE *)(v8 + 168 * a3 + 130))
    {
      *v15 = 1;
      return RuleMgr::addBuiltRef(v7, a2, a4 + 1);
    }
  }
  return this;
}

RuleMgr *RuleMgr::killStatesOfRule(RuleMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v13;
  RuleMgr *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD **v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;

  v11 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 168 * a2 + 130) && *(_DWORD *)(v11 + 168 * a2 + 104))
  {
    v13 = 0;
    do
    {
      RuleMgr::killStatesOfRule(this, *(_WORD *)(*(_QWORD *)(v11 + 168 * a2 + 96) + 2 * v13++), a3 + 1);
      v11 = *(_QWORD *)this;
    }
    while (v13 < *(unsigned int *)(*(_QWORD *)this + 168 * a2 + 104));
  }
  result = (RuleMgr *)RuleMgr::verifyRule(this, a2, 1, a4, a5, a6, a7, a8);
  v20 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 168 * a2 + 129))
  {
    v21 = v20 + 168 * a2;
    v24 = *(_DWORD *)(v21 + 88);
    v23 = (_DWORD *)(v21 + 88);
    v22 = v24;
    if (v24 <= 0xE)
    {
      if (!v22)
      {
        v28 = (_QWORD **)(v20 + 168 * a2 + 80);
LABEL_18:
        v32 = v20;
        if (*v28)
        {
          MemChunkFree(*v28, 0);
          *v28 = 0;
          v32 = *(_QWORD *)this;
        }
        *v23 = 0;
        *(_DWORD *)(v20 + 168 * a2 + 92) = 0;
        v33 = v32 + 168 * a2;
        v36 = *(_QWORD **)(v33 + 32);
        v35 = (_QWORD *)(v33 + 32);
        v34 = v36;
        v37 = v32;
        if (v36)
        {
          MemChunkFree(v34, 0);
          *v35 = 0;
          v37 = *(_QWORD *)this;
        }
        *(_QWORD *)(v32 + 168 * a2 + 40) = 0;
        DgnArray<DgnArray<ParseToken>>::releaseAll(v37 + 168 * a2 + 48);
        *(_BYTE *)(*(_QWORD *)this + 168 * a2 + 129) = 0;
        return RuleMgr::removeBuiltRef(this, a2, a3 + 1);
      }
      v26 = 0;
      do
      {
        StateMgr::setEmptyStateTransition(*(StateMgr **)(*((_QWORD *)this + 9) + 56), *(_DWORD *)(*(_QWORD *)(v20 + 168 * a2 + 80) + 4 * v26++), 0, v15, v16, v17, v18, v19);
        v20 = *(_QWORD *)this;
        v25 = *(unsigned int *)(*(_QWORD *)this + 168 * a2 + 88);
      }
      while (v26 < v25);
    }
    else
    {
      StateMgr::fastEmptyTransitionsForKill(*(_QWORD *)(*((_QWORD *)this + 9) + 56), v20 + 168 * a2 + 80);
      v20 = *(_QWORD *)this;
      LODWORD(v25) = *(_DWORD *)(*(_QWORD *)this + 168 * a2 + 88);
    }
    v27 = v20 + 168 * a2;
    v28 = (_QWORD **)(v27 + 80);
    if ((_DWORD)v25)
    {
      v29 = 0;
      do
      {
        StateMgr::killState(*(StateMgr **)(*((_QWORD *)this + 9) + 56), *((unsigned int *)*v28 + v29++), 0, v15, v16, v17, v18, v19);
        v20 = *(_QWORD *)this;
        v30 = *(_QWORD *)this + 168 * a2;
        v31 = *(_DWORD *)(v30 + 88);
        v23 = (_DWORD *)(v30 + 88);
        v28 = (_QWORD **)(v23 - 2);
      }
      while (v29 < v31);
    }
    else
    {
      v23 = (_DWORD *)(v27 + 88);
    }
    goto LABEL_18;
  }
  return result;
}

RuleMgr *RuleMgr::invalidateAllStates(RuleMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  RuleMgr *v9;
  unsigned __int16 i;

  v8 = *((_DWORD *)this + 2);
  if (v8)
  {
    v9 = this;
    for (i = 0; i < v8; ++i)
    {
      if (*(_BYTE *)(*(_QWORD *)v9 + 168 * i + 128))
      {
        this = RuleMgr::killStatesOfRule(v9, i, 0, a4, a5, a6, a7, a8);
        v8 = *((_DWORD *)v9 + 2);
      }
    }
  }
  return this;
}

void RuleMgr::preAllocToEnsureRuleId(RuleMgr *this, unsigned int a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  signed int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned int v14;

  *((_WORD *)this + 20) = a2 - 1;
  v4 = *((_DWORD *)this + 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if ((_DWORD)v6 != 0 && v5)
    DgnArray<Rule>::reallocElts((uint64_t)this, v6, 0);
  v7 = *((_DWORD *)this + 2);
  v8 = v7;
  if (a2 >= v7)
  {
    if (a2 > v7)
    {
      v10 = a2 - v7;
      v11 = 168 * v7 + 160;
      do
      {
        v12 = (_DWORD *)(*(_QWORD *)this + v11);
        DgnString::DgnString((DgnString *)(v12 - 38));
        *((_WORD *)v12 - 80) = 0;
        *(v12 - 36) = 0;
        *(v12 - 34) = 0;
        *((_OWORD *)v12 - 8) = 0u;
        *((_OWORD *)v12 - 7) = 0u;
        *((_OWORD *)v12 - 6) = 0u;
        *((_OWORD *)v12 - 5) = 0u;
        *((_OWORD *)v12 - 4) = 0u;
        *((_OWORD *)v12 - 3) = 0u;
        *(_DWORD *)((char *)v12 - 33) = 0;
        *((_QWORD *)v12 - 2) = 0;
        *((_QWORD *)v12 - 1) = 0;
        *((_QWORD *)v12 - 3) = 0;
        v11 += 168;
        *v12 = 65793;
        --v10;
      }
      while (v10);
    }
  }
  else if (v7 > (int)a2)
  {
    v9 = 168 * v7 - 168;
    do
    {
      --v8;
      Rule::~Rule((Rule *)(*(_QWORD *)this + v9));
      v9 -= 168;
    }
    while (v8 > a2);
  }
  *((_DWORD *)this + 2) = a2;
  *((_WORD *)this + 16) = a2;
  if (a2 >= 2)
  {
    v13 = *((_DWORD *)this + 6);
    v14 = 1;
    do
    {
      if (v13 == *((_DWORD *)this + 7))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)this + 16, 1, 1);
        v13 = *((_DWORD *)this + 6);
      }
      *(_WORD *)(*((_QWORD *)this + 2) + 2 * v13++) = v14;
      *((_DWORD *)this + 6) = v13;
      ++v14;
    }
    while (v14 < *((unsigned __int16 *)this + 16));
  }
}

void sub_209795668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Rule::~Rule((Rule *)va);
  _Unwind_Resume(a1);
}

unint64_t RuleMgr::verifyRuleNotRecursivelyIncluded(unint64_t this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  __int16 v13;
  uint64_t v14;
  unsigned int v16;
  unint64_t v17;
  int v18;

  v8 = *(_QWORD *)this;
  v9 = *(_QWORD *)this + 168 * a2;
  v11 = *(unsigned __int8 *)(v9 + 163);
  v10 = (_BYTE *)(v9 + 163);
  if (!v11)
  {
    v13 = a2;
    v14 = this;
    *v10 = 1;
    v16 = *(_DWORD *)(this + 56);
    if (v16 == *(_DWORD *)(this + 60))
    {
      this = DgnPrimArray<short>::reallocElts(this + 48, 1, 1);
      v16 = *(_DWORD *)(v14 + 56);
      v8 = *(_QWORD *)v14;
    }
    *(_WORD *)(*(_QWORD *)(v14 + 48) + 2 * v16) = v13;
    *(_DWORD *)(v14 + 56) = v16 + 1;
    if (*(_DWORD *)(v8 + 168 * a2 + 120))
    {
      v17 = 0;
      do
      {
        v18 = *(unsigned __int16 *)(*(_QWORD *)(v8 + 168 * a2 + 112) + 2 * v17);
        if (v18 == a3)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 2637, (uint64_t)"voc/rulemgr", 13, (uint64_t)"%d %d %d %d", a7, a8, a3);
          LOWORD(v18) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v14 + 168 * a2 + 112) + 2 * v17);
        }
        this = RuleMgr::verifyRuleNotRecursivelyIncluded(*(RuleMgr **)(*(_QWORD *)(v14 + 72) + 64), v18, a3);
        ++v17;
        v8 = *(_QWORD *)v14;
      }
      while (v17 < *(unsigned int *)(*(_QWORD *)v14 + 168 * a2 + 120));
    }
  }
  return this;
}

unsigned __int16 *RuleMgr::endUsingTempMarks(RuleMgr *this)
{
  uint64_t v2;
  unsigned __int16 *result;
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned int v6;

  v2 = *((unsigned int *)this + 14);
  result = (unsigned __int16 *)*((_QWORD *)this + 6);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)this;
    v5 = result;
    do
    {
      v6 = *v5++;
      *(_BYTE *)(v4 + 168 * v6 + 163) = 0;
      --v2;
    }
    while (v2);
    goto LABEL_6;
  }
  if (result)
  {
LABEL_6:
    result = (unsigned __int16 *)MemChunkFree(result, 0);
    *((_QWORD *)this + 6) = 0;
  }
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t RuleMgr::verifyNewDesc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  RuleMgr *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;

  if (*(_DWORD *)(a2 + 8))
  {
    v9 = (RuleMgr *)result;
    if (**(_DWORD **)a2 != 3)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 2709, (uint64_t)"voc/rulemgr", 8, (uint64_t)"%s", a7, a8, (char)&errStr_voc_rulemgr_E_NO_START_TOKEN);
    v28 = 0;
    v29 = 0;
    v26 = 0;
    v27 = 0;
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v28, 1, 1);
    v10 = v29;
    *((_DWORD *)v28 + v29) = 0;
    LODWORD(v29) = v10 + 1;
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v26, 1, 1);
    *((_DWORD *)v26 + v27) = 0;
    LODWORD(v27) = v27 + 1;
    if (*(_DWORD *)(a2 + 8))
    {
      v17 = 0;
      v18 = 2;
      do
      {
        v19 = *(_DWORD **)a2;
        switch(*(_DWORD *)(*(_QWORD *)a2 + v18 * 4 - 8))
        {
          case 0:
            v20 = (v29 - 1);
            if ((_DWORD)v29 == 1)
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 2724, (uint64_t)"voc/rulemgr", 7, (uint64_t)"%s", v15, v16, (char)&errStr_voc_rulemgr_E_COUNT_MISMATCH);
              v19 = *(_DWORD **)a2;
            }
            v21 = v19[v18];
            if (v21 != *((_DWORD *)v28 + v20))
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 2726, (uint64_t)"voc/rulemgr", 6, (uint64_t)"%s", v15, v16, (char)&errStr_voc_rulemgr_E_TYPE_MISMATCH);
              v21 = *(_DWORD *)(*(_QWORD *)a2 + v18 * 4);
            }
            if ((v21 & 0xFFFFFFFE) == 2 && *((_DWORD *)v26 + v20) != 1)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 2732, (uint64_t)"voc/rulemgr", 9, (uint64_t)"%s", v15, v16, (char)&errStr_voc_rulemgr_E_SINGLE_IN_REPEAT_OR_OPTIONAL);
            if (HIDWORD(v27) < v20)
            {
              v30 = 0;
              HIDWORD(v27) = realloc_array(v26, &v30, 4 * v20, 4 * v27, 4 * v27, 1) >> 2;
              v26 = v30;
            }
            LODWORD(v27) = v20;
            if (HIDWORD(v29) < v20)
            {
              v30 = 0;
              HIDWORD(v29) = realloc_array(v28, &v30, 4 * v20, 4 * v29, 4 * v29, 1) >> 2;
              v28 = v30;
            }
            LODWORD(v29) = v20;
            break;
          case 1:
            StateMgr::verifyState(*(StateMgr **)(*((_QWORD *)v9 + 9) + 56), v19[v18], v11, v12, v13, v14, v15, v16);
            goto LABEL_29;
          case 2:
            RuleMgr::verifyRule(v9, LOWORD(v19[v18]), 1, v12, v13, v14, v15, v16);
            goto LABEL_29;
          case 3:
            v22 = v19[v18];
            v23 = v29;
            if ((_DWORD)v29 == HIDWORD(v29))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v28, 1, 1);
              v23 = v29;
            }
            *((_DWORD *)v28 + v23) = v22;
            LODWORD(v29) = v23 + 1;
            v24 = v26;
            ++*((_DWORD *)v26 + (v27 - 1));
            v25 = v27;
            if (v27 == (unint64_t)HIDWORD(v27))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v26, 1, 1);
              v25 = v27;
              v24 = v26;
            }
            v24[v25] = 0;
            LODWORD(v27) = v27 + 1;
            break;
          case 4:
            WordList::verifyVisible(*(WordList **)(*((_QWORD *)v9 + 9) + 48), v19[v18], v11, v12, v13, v14, v15, v16);
LABEL_29:
            ++*((_DWORD *)v26 + (v27 - 1));
            break;
          default:
            break;
        }
        ++v17;
        v18 += 3;
      }
      while (v17 < *(unsigned int *)(a2 + 8));
    }
    if ((_DWORD)v29 != 1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 2773, (uint64_t)"voc/rulemgr", 7, (uint64_t)"%s", v15, v16, (char)&errStr_voc_rulemgr_E_COUNT_MISMATCH);
    if (*(int *)v26 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 2774, (uint64_t)"voc/rulemgr", 10, (uint64_t)"%s", v15, v16, (char)&errStr_voc_rulemgr_E_SINGLE_IN_RULE);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  }
  return result;
}

void sub_209795C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t HashKEV<unsigned int,unsigned int,CWIDScope>::add(uint64_t result, int *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v4 >> 1)
    result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v4);
  v5 = *a2;
  v6 = *(_DWORD *)(v3 + 16);
  if (v6)
    v7 = (-1640531527 * *a2) >> -(char)v6;
  else
    v7 = 0;
  v8 = *(_QWORD *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 32);
  if (!v9)
  {
    result = DgnPool::addChunk((DgnPool *)(v3 + 24));
    v9 = *(_QWORD *)(v3 + 32);
  }
  v10 = (_QWORD *)(v8 + 8 * v7);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)v9;
  *(_DWORD *)(v9 + 8) = 0;
  v11 = *a2;
  *(_DWORD *)(v9 + 8) = v5;
  *(_DWORD *)(v9 + 12) = v11;
  ++*(_DWORD *)(v3 + 8);
  if (*(_BYTE *)(v3 + 20))
  {
    *(_QWORD *)v9 = *v10;
  }
  else
  {
    *(_QWORD *)v9 = 0;
    v12 = (_QWORD *)*v10;
    if (*v10)
    {
      do
      {
        v10 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
  }
  *v10 = v9;
  return result;
}

uint64_t HashKEV<unsigned int,unsigned int,CWIDScope>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t (*v7)(char *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = *(char **)v5;
          v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7)
            result = v7(v5 + 12);
          *(_QWORD *)v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t RuleMgr::getHandle(RuleMgr *this, unsigned int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *ChildRules;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  void *v35;
  const char *v36;

  v11 = *(StateMgr **)(*((_QWORD *)this + 9) + 56);
  StateMgr::verifyStateFull(v11, a2, 1, 1, a5, a6, a7, a8);
  ChildRules = (_QWORD *)StateMgr::getChildRules(v11, a2, v12, v13, v14, v15, v16, v17);
  if (!StateMgr::getChildRuleCount(v11, a2, v19, v20, v21, v22, v23, v24))
    return 0;
  v31 = 0;
  while (1)
  {
    v32 = *(unsigned __int16 *)(*ChildRules + 2 * v31);
    v33 = *(_QWORD *)this + 168 * v32;
    v34 = *(_DWORD *)(v33 + 16);
    v35 = *(void **)(v33 + 8);
    v36 = (const char *)(v34 ? v35 : &unk_209A58919);
    if (*v36 && !strcmp(v36, a3))
      break;
    if (++v31 >= (unint64_t)StateMgr::getChildRuleCount(v11, a2, v25, v26, v27, v28, v29, v30))
      return 0;
  }
  return v32;
}

uint64_t RuleMgr::setName(RuleMgr *this, unsigned int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  RuleMgr::verifyRule(this, a2, 1, a4, a5, a6, a7, a8);
  RuleMgr::verifyRule(this, a2, 1, v11, v12, v13, v14, v15);
  v16 = *(_DWORD *)(*(_QWORD *)this + 168 * a2 + 24);
  result = RuleMgr::getHandle(this, v16, a3, v17, v18, v19, v20, v21);
  if ((_DWORD)result != a2)
  {
    if ((_DWORD)result)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/rulemgr.cpp", 2965, (uint64_t)"voc/rulemgr", 2, (uint64_t)"%d", v23, v24, v16);
    *((_DWORD *)this + 11) ^= RuleMgr::computeOneRuleIdNameChecksum(this, a2);
    DgnString::operator=((DgnString *)(*(_QWORD *)this + 168 * a2 + 8), a3);
    result = RuleMgr::computeOneRuleIdNameChecksum(this, a2);
    *((_DWORD *)this + 11) ^= result;
  }
  return result;
}

void *RuleMgr::getName(RuleMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  RuleMgr::verifyRule(this, a2, 1, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)this + 168 * a2;
  if (*(_DWORD *)(v10 + 16))
    return *(void **)(v10 + 8);
  else
    return &unk_209A58919;
}

RuleMgr *RuleMgr::setLMAllowed(RuleMgr *this, unsigned int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  RuleMgr::verifyRule(this, a2, 1, a4, a5, a6, a7, a8);
  *(_BYTE *)(*(_QWORD *)this + 168 * a2 + 160) = a3;
  return RuleMgr::killStatesOfRule(this, a2, 0, v11, v12, v13, v14, v15);
}

RuleMgr *RuleMgr::setCoartAllowed(RuleMgr *this, unsigned int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  RuleMgr::verifyRule(this, a2, 1, a4, a5, a6, a7, a8);
  *(_BYTE *)(*(_QWORD *)this + 168 * a2 + 161) = a3;
  return RuleMgr::killStatesOfRule(this, a2, 0, v11, v12, v13, v14, v15);
}

RuleMgr *RuleMgr::setPrefilteringAllowed(RuleMgr *this, unsigned int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  RuleMgr::verifyRule(this, a2, 1, a4, a5, a6, a7, a8);
  *(_BYTE *)(*(_QWORD *)this + 168 * a2 + 162) = a3;
  return RuleMgr::killStatesOfRule(this, a2, 0, v11, v12, v13, v14, v15);
}

void RuleMgr::fixAlteredState(RuleMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  StateMgr *v21;
  uint64_t v22;

  v11 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 168 * a2 + 130) && *(_DWORD *)(v11 + 168 * a2 + 104))
  {
    v13 = 0;
    do
    {
      RuleMgr::fixAlteredState(this, *(_WORD *)(*(_QWORD *)(v11 + 168 * a2 + 96) + 2 * v13++), a3);
      v11 = *(_QWORD *)this;
    }
    while (v13 < *(unsigned int *)(*(_QWORD *)this + 168 * a2 + 104));
  }
  RuleMgr::verifyRule(this, a2, 1, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 168 * a2 + 129) && *(_DWORD *)(v19 + 168 * a2 + 88))
  {
    v20 = 0;
    v21 = *(StateMgr **)(*((_QWORD *)this + 9) + 56);
    do
    {
      v22 = *(unsigned int *)(*(_QWORD *)(v19 + 168 * a2 + 80) + 4 * v20);
      if (*(_DWORD *)(*((_QWORD *)v21 + 8) + 4 * v22) == (_DWORD)a3)
      {
        StateMgr::setStateCharacteristicsForRuleState(v21, v22, a3, v14, v15, v16, v17, v18);
        v19 = *(_QWORD *)this;
      }
      ++v20;
    }
    while (v20 < *(unsigned int *)(v19 + 168 * a2 + 88));
  }
}

void RuleMgr::alteredStateInRule(RuleMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t IncludingRules;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  IncludingRules = StateMgr::getIncludingRules(*(StateMgr **)(*((_QWORD *)this + 9) + 56), a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(IncludingRules + 8))
  {
    v16 = IncludingRules;
    v17 = 0;
    do
      RuleMgr::fixAlteredState(this, *(unsigned __int16 *)(*(_QWORD *)v16 + 2 * v17++), a2, v11, v12, v13, v14, v15);
    while (v17 < *(unsigned int *)(v16 + 8));
  }
}

uint64_t DgnArray<DgnArray<ParseToken>>::copyArraySlice(uint64_t result, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v7 = result;
  v8 = *(unsigned int *)(result + 8);
  if ((int)v8 >= 1)
  {
    v9 = 16 * v8 - 16;
    do
    {
      result = DgnIArray<Utterance *>::~DgnIArray(*(_QWORD *)v7 + v9);
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(v7 + 8) = 0;
  v10 = *(_DWORD *)(v7 + 12);
  if (a4 <= v10)
  {
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_14;
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(v7, a4 - v10, 0);
    v11 = *(_DWORD *)(v7 + 8);
  }
  v13 = 0;
  v12 = v11;
  do
  {
    v14 = *a2 + 16 * (a3 + v13);
    v15 = (_QWORD *)(*(_QWORD *)v7 + 16 * v12);
    *v15 = 0;
    v15[1] = 0;
    result = DgnArray<ParseToken>::copyArraySlice((unint64_t)v15, (uint64_t *)v14, 0, *(_DWORD *)(v14 + 8));
    v12 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      v16 = (int)v12;
      v17 = 16 * (int)v12 - 16;
      do
      {
        --v16;
        result = DgnIArray<Utterance *>::~DgnIArray(*(_QWORD *)v7 + v17);
        v17 -= 16;
      }
      while (v16 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    v18 = a4 - (unint64_t)v12;
    v19 = 16 * v12;
    do
    {
      v20 = (_QWORD *)(*(_QWORD *)v7 + v19);
      *v20 = 0;
      v20[1] = 0;
      v19 += 16;
      --v18;
    }
    while (v18);
  }
LABEL_17:
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

unint64_t DgnArray<RuleDesc>::copyArraySlice(unint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v7 = result;
  *(_DWORD *)(result + 8) = 0;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    if (!a4)
      goto LABEL_6;
  }
  else
  {
    result = DgnArray<RuleDesc>::reallocElts(result, a4 - v8, 0);
  }
  v9 = *(_DWORD *)(v7 + 8);
  v10 = a4;
  do
  {
    v11 = *a2 + 12 * a3;
    v12 = *(_QWORD *)v7 + 12 * v9;
    *(_QWORD *)v12 = *(_QWORD *)v11;
    *(_DWORD *)(v12 + 8) = *(_DWORD *)(v11 + 8);
    v9 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v9;
    ++a3;
    --v10;
  }
  while (v10);
LABEL_6:
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

unint64_t DgnArray<RuleDesc>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 12 * v6, 12 * v5, 12 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0xC;
  *(_QWORD *)a1 = v8;
  return result;
}

unint64_t DgnPrimArray<unsigned short>::copyArraySlice(unint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;

  v7 = result;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    *(_DWORD *)(result + 8) = a4;
    if (!a4)
      return result;
  }
  else
  {
    result = DgnPrimArray<short>::reallocElts(result, a4 - v8, 0);
    *(_DWORD *)(v7 + 8) = a4;
  }
  v9 = *a2;
  v10 = *(_WORD **)v7;
  v11 = a4;
  do
  {
    *v10++ = *(_WORD *)(v9 + 2 * a3++);
    --v11;
  }
  while (v11);
  return result;
}

uint64_t DgnArray<ParseToken>::operator==(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  int v8;
  int v9;

  if ((uint64_t *)a1 == a2)
    return 1;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != *((_DWORD *)a2 + 2))
    return 0;
  v3 = *a2;
  v4 = v2 + 1;
  v5 = 4 * v2 - 2;
  do
  {
    v6 = --v4 < 1;
    if (v4 < 1)
      break;
    v7 = *(_QWORD *)a1 + v5;
    if (*(unsigned __int8 *)(v7 - 2) != *(unsigned __int8 *)(v3 + v5 - 2))
      break;
    if (*(unsigned __int8 *)(v7 - 1) != *(unsigned __int8 *)(v3 + v5 - 1))
      break;
    v8 = *(unsigned __int16 *)(*(_QWORD *)a1 + v5);
    v9 = *(unsigned __int16 *)(v3 + v5);
    v5 -= 4;
  }
  while (v8 == v9);
  return v6;
}

uint64_t readObject<ParseToken>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v11 = 0;
  result = readObject(a1, &v11, a3);
  v7 = v11;
  v8 = *(_DWORD *)(a2 + 12);
  if (v11 <= v8)
  {
    *(_DWORD *)(a2 + 8) = v11;
    if (!v7)
      return result;
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a2, v11 - v8, 0);
    *(_DWORD *)(a2 + 8) = v7;
  }
  v9 = 0;
  v10 = 0;
  do
  {
    result = readObject(a1, *(_QWORD *)a2 + v9, a3);
    ++v10;
    v9 += 4;
  }
  while (v10 < *(unsigned int *)(a2 + 8));
  return result;
}

uint64_t writeObject<ParseToken>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject(a1, (unsigned __int8 *)(*(_QWORD *)a2 + v7), a3);
      ++v8;
      v7 += 4;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t sizeObject<ParseToken>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[4];

  v4 = sizeObject((uint64_t)v10, 2);
  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 12;
  else
    v5 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = v4;
    v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      v8 = v7 + 1;
      do
        v5 += sizeObject(*(_QWORD *)a1 + 4 * (v8-- - 2), a2);
      while (v8 > 1);
    }
    if (!a2)
      v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
  return v5;
}

_QWORD *DgnArray<Rule>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 168 * v2 - 168;
    do
    {
      Rule::~Rule((Rule *)(*(_QWORD *)a1 + v3));
      v3 -= 168;
    }
    while (v3 != -168);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

unint64_t DgnArray<Rule>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 168 * v6, 168 * v5, 168 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0xA8;
  *(_QWORD *)a1 = v8;
  return result;
}

unint64_t DgnArray<ParseToken>::copyArraySlice(unint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v7 = result;
  *(_DWORD *)(result + 8) = 0;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    if (!a4)
      goto LABEL_6;
  }
  else
  {
    result = DgnPrimArray<unsigned int>::reallocElts(result, a4 - v8, 0);
  }
  v9 = *a2;
  v10 = *(_QWORD *)v7;
  v11 = a4;
  v12 = *(_DWORD *)(v7 + 8);
  do
  {
    *(_DWORD *)(v10 + 4 * v12++) = *(_DWORD *)(v9 + 4 * a3++);
    --v11;
  }
  while (v11);
LABEL_6:
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

uint64_t HashKEV<unsigned int,unsigned int,CWIDScope>::HashKEV(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C219170;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 12;
  else
    v7 = 16;
  *(_DWORD *)(a1 + 24) = 16;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2097969C0(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashKEV<unsigned int,unsigned int,CWIDScope>::~HashKEV(uint64_t a1)
{
  HashKEV<unsigned int,unsigned int,CWIDScope>::~HashKEV(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t HashKEV<unsigned int,unsigned int,CWIDScope>::computeDepth(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;

  v1 = *(unsigned int *)(a1 + 88);
  if (!(_DWORD)v1)
    return 0;
  v3 = 0;
  result = 0;
  v5 = *(_QWORD *)(a1 + 80);
  do
  {
    v6 = *(_QWORD **)(v5 + 8 * v3);
    if (v6)
    {
      v7 = 0;
      do
      {
        v6 = (_QWORD *)*v6;
        ++v7;
      }
      while (v6);
      if (v7 <= result)
        result = result;
      else
        result = v7;
    }
    ++v3;
  }
  while (v3 != v1);
  return result;
}

uint64_t *HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v1 = result;
  v2 = *((unsigned int *)result + 3);
  v3 = *((_DWORD *)result + 22);
  if ((_DWORD)v2)
    v4 = v3 == 0;
  else
    v4 = 0;
  if (v4)
  {
    result = MemChunkAlloc(8 * v2, 0);
    v1[10] = (uint64_t)result;
    *((_DWORD *)v1 + 22) = v2;
    v3 = v2;
  }
  else if (!v3)
  {
    return result;
  }
  v5 = 0;
  do
    *(_QWORD *)(v1[10] + 8 * v5++) = 0;
  while (v3 != v5);
  return result;
}

uint64_t HashKEV<unsigned int,unsigned int,CWIDScope>::~HashKEV(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C219170;
  if (*(_DWORD *)(a1 + 8))
    HashKEV<unsigned int,unsigned int,CWIDScope>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(uint64_t a1, int a2)
{
  uint64_t *v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v18 = 0;
  RoundUpToPowerOf2(a2, &v18);
  v4 = (uint64_t *)(a1 + 80);
  v16 = 0;
  v17 = 0;
  DgnIFixArray<BucketLinkKEV<unsigned int> *>::copyArraySlice(&v16, (_QWORD *)(a1 + 80), 0, *(_DWORD *)(a1 + 88));
  v5 = *(_QWORD **)(a1 + 80);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *v4 = 0;
  }
  *(_DWORD *)(a1 + 88) = 0;
  v6 = v18;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  v7 = v17;
  if (v17)
  {
    v8 = 0;
    v9 = v18;
    v10 = 32 - v18;
    do
    {
      v11 = *(uint64_t **)(v16 + 8 * v8);
      if (v11)
      {
        do
        {
          v12 = (uint64_t *)*v11;
          v13 = (-1640531527 * *((_DWORD *)v11 + 2)) >> v10;
          if (!v9)
            v13 = 0;
          v14 = *v4;
          *v11 = *(_QWORD *)(*v4 + 8 * v13);
          *(_QWORD *)(v14 + 8 * v13) = v11;
          v11 = v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != v7);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v16);
}

void sub_209796C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *DgnIFixArray<BucketLinkKEV<unsigned int> *>::copyArraySlice(uint64_t *result, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t *v7;
  uint64_t v8;

  v7 = result;
  if (!a4 || *((_DWORD *)result + 2))
  {
    if (!a4)
      return result;
  }
  else
  {
    result = MemChunkAlloc(8 * a4, 0);
    *v7 = (uint64_t)result;
    *((_DWORD *)v7 + 2) = a4;
  }
  v8 = 0;
  do
  {
    *(_QWORD *)(*v7 + 8 * v8) = *(_QWORD *)(*a2 + 8 * (a3 + v8));
    ++v8;
  }
  while (a4 != v8);
  return result;
}

void PhnMgr::PhnMgr(PhnMgr *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v2 = (_QWORD *)((char *)this + 8);
  DgnString::DgnString((PhnMgr *)((char *)this + 24));
  DgnString::DgnString((PhnMgr *)((char *)this + 40));
  *(_DWORD *)this = 0;
  v3 = *((unsigned int *)this + 4);
  if ((int)v3 >= 1)
  {
    v4 = 16 * v3 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*v2 + v4));
      v4 -= 16;
    }
    while (v4 != -16);
  }
  *((_DWORD *)this + 4) = 0;
  *((_WORD *)this + 30) = -1;
  *((_DWORD *)this + 14) = -1;
}

void sub_209796D30(_Unwind_Exception *a1)
{
  uint64_t v1;
  DgnString *v2;

  DgnString::~DgnString(v2);
  DgnArray<DgnString>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void PhnMgr::~PhnMgr(PhnMgr *this)
{
  DgnString::~DgnString((PhnMgr *)((char *)this + 40));
  DgnString::~DgnString((PhnMgr *)((char *)this + 24));
  DgnArray<DgnString>::releaseAll((uint64_t)this + 8);
}

void PhnMgr::printSize(PhnMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  int v75;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 112, (DgnString *)&v74);
  if (v75)
    v16 = v74;
  else
    v16 = &unk_209A589AC;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A589AC, a3, &unk_209A589AC, v16);
  DgnString::~DgnString((DgnString *)&v74);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A589AC);
  v21 = (a3 + 1);
  v73 = a3;
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 114, (DgnString *)&v74);
  if (v75)
    v27 = v74;
  else
    v27 = &unk_209A589AC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, v21, &unk_209A589AC, v22, v22, v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 4;
  *a5 += 4;
  v28 = sizeObject<DgnString>((uint64_t)this + 8, 0);
  v29 = sizeObject<DgnString>((uint64_t)this + 8, 1);
  v30 = sizeObject<DgnString>((uint64_t)this + 8, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 114, (DgnString *)&v74);
  if (v75)
    v35 = v74;
  else
    v35 = &unk_209A589AC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, v21, &unk_209A589AC, v22, v22, v35, v28, v29, v30);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += v28;
  *a5 += v29;
  *a6 += v30;
  v36 = sizeObject((char *)this + 24);
  v37 = sizeObject((char *)this + 24);
  v38 = sizeObject((char *)this + 24);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 114, (DgnString *)&v74);
  if (v75)
    v43 = v74;
  else
    v43 = &unk_209A589AC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, v21, &unk_209A589AC, v22, v22, v43, v36, v37, v38);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += v36;
  *a5 += v37;
  *a6 += v38;
  v44 = (char *)this + 40;
  v45 = sizeObject((char *)this + 40);
  v46 = sizeObject(v44);
  v47 = sizeObject(v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 114, (DgnString *)&v74);
  if (v75)
    v52 = v74;
  else
    v52 = &unk_209A589AC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A589AC, v22, v22, v52, v45, v46, v47);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += v45;
  *a5 += v46;
  *a6 += v47;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 114, (DgnString *)&v74);
  if (v75)
    v57 = v74;
  else
    v57 = &unk_209A589AC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v21, &unk_209A589AC, v22, v22, v57, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 114, (DgnString *)&v74);
  if (v75)
    v62 = v74;
  else
    v62 = &unk_209A589AC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A589AC, v22, v22, v62, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 114, (DgnString *)&v74);
  if (v75)
    v67 = v74;
  else
    v67 = &unk_209A589AC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, v21, &unk_209A589AC, v22, v22, v67, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 116, (DgnString *)&v74);
  if (v75)
    v72 = v74;
  else
    v72 = &unk_209A589AC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v73, &unk_209A589AC, (35 - v73), (35 - v73), v72, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v74);
}

void sub_209797258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnString>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[16];

  DgnString::DgnString((DgnString *)v10);
  v4 = sizeObject(v10);
  if (a2 == 3)
  {
    v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 12;
    else
      v5 = 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = v4;
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
          v5 += sizeObject(*(_QWORD *)a1 + 16 * (v8-- - 2));
        while (v8 > 1);
      }
      if (!a2)
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnString::~DgnString((DgnString *)v10);
  return v5;
}

void sub_209797364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

unsigned int *PhnMgr::getPublicPhnIndexArray(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int16 i;
  unsigned int v7;

  v3 = result;
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *result;
  v5 = *(_DWORD *)(a2 + 12);
  if (*result > v5)
  {
    result = (unsigned int *)DgnPrimArray<short>::reallocElts(a2, *result - v5, 0);
    v4 = *v3;
  }
  if (v4)
  {
    for (i = 0; i < v4; ++i)
    {
      if (i
        && *((unsigned __int16 *)v3 + 30) != i
        && *((unsigned __int16 *)v3 + 28) != i
        && *((unsigned __int16 *)v3 + 29) != i)
      {
        v7 = *(_DWORD *)(a2 + 8);
        if (v7 == *(_DWORD *)(a2 + 12))
        {
          result = (unsigned int *)DgnPrimArray<short>::reallocElts(a2, 1, 1);
          v7 = *(_DWORD *)(a2 + 8);
          v4 = *v3;
        }
        *(_WORD *)(*(_QWORD *)a2 + 2 * v7) = i;
        *(_DWORD *)(a2 + 8) = v7 + 1;
      }
    }
  }
  return result;
}

void PhnMgr::getFullAcousticExitContext(uint64_t a1, BitArray *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned __int16 v6;
  int v7;

  BitArray::setSize(a2, *(_DWORD *)a1);
  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    v5 = 0;
    v6 = 0;
    v7 = *(unsigned __int16 *)(a1 + 60);
    do
    {
      if (v7 != v6 && *(unsigned __int16 *)(a1 + 56) != v6 && *(unsigned __int16 *)(a1 + 58) != v6)
      {
        *(_DWORD *)(*(_QWORD *)a2 + 4 * (v5 >> 5)) |= 1 << v5;
        v4 = *(_DWORD *)a1;
      }
      v5 = ++v6;
    }
    while (v4 > v6);
  }
}

void PhnMgr::verifyPhonemePron(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v8 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v8)
  {
    v9 = 0;
    while (1)
    {
      v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 2 * v9);
      if (*(_DWORD *)a1 <= v10
        || v10 == *(unsigned __int16 *)(a1 + 58)
        || (a4 & 1) == 0 && v10 == *(unsigned __int16 *)(a1 + 56))
      {
        break;
      }
      if (v8 == ++v9)
        return;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 165, (uint64_t)"phoneme/phnmgr", 6, (uint64_t)"%u %u %.500s", a7, a8, v10);
  }
}

void PhnMgr::verifyPhonemePron2(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v8 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v8)
  {
    v9 = 0;
    while (1)
    {
      v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 2 * v9);
      if (*(_DWORD *)a1 <= v10
        || v10 == *(unsigned __int16 *)(a1 + 58)
        || (a4 & 1) == 0 && v10 == *(unsigned __int16 *)(a1 + 56))
      {
        break;
      }
      if (v8 == ++v9)
        return;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 182, (uint64_t)"phoneme/phnmgr", 6, (uint64_t)"%u %u %.500s", a7, a8, v10);
  }
}

uint64_t PhnMgr::addPhone(PhnMgr *this, const char *__s, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _BYTE v18[16];

  if (*(_DWORD *)this >= 0xFFFFu)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 523, (uint64_t)"phoneme/phnmgr", 1, (uint64_t)"%d", a7, a8, 255);
  v10 = strlen(__s);
  if (!(_DWORD)v10)
    errThrowInternal(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 524, (uint64_t)"phoneme/phnmgr", 5, (uint64_t)"%s", v11, v12, (char)&errStr_phoneme_phnmgr_E_EMPTY_HUMAN_READABLE);
  v13 = *(unsigned __int16 *)this;
  DgnString::DgnString((DgnString *)v18, __s);
  if (DgnArray<DgnString>::find((unsigned int *)this + 2, (uint64_t)v18) != -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 534, (uint64_t)"phoneme/phnmgr", 10, (uint64_t)"%u %.500s", v14, v15, v13);
  v16 = *((_DWORD *)this + 4);
  if (v16 == *((_DWORD *)this + 5))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 8, 1, 1);
    v16 = *((_DWORD *)this + 4);
  }
  DgnString::DgnString((DgnString *)(*((_QWORD *)this + 1) + 16 * v16), (const DgnString *)v18);
  ++*((_DWORD *)this + 4);
  ++*(_DWORD *)this;
  DgnString::~DgnString((DgnString *)v18);
  return v13;
}

void sub_209797748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void PhnMgr::loadPhnMgrText(PhnMgr *this, DFile *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *LineFieldString;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  PhnMgr *v50;
  unsigned int v51;
  const char *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[16];
  _BYTE v76[16];
  const char *v77;
  unsigned int v78;
  _QWORD v79[2];
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  _QWORD v83[2];
  _BYTE v84[240];

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v84);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v84, (uint64_t)a2, 0x3Eu, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v84, "PhonemeTable");
  v83[0] = 0;
  v83[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v84, sPHT_Versions, (uint64_t)v83, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v84, (unsigned int *)v83, v9, v10, v11, v12, v13, v14);
  v82 = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v84, "NumberOfPhones", &v82, 1, 0, 0xFDE8u);
  DgnTextFile::getHeaderField((DgnTextFile *)v84, "Language", (PhnMgr *)((char *)this + 24), 1);
  DgnTextFile::getHeaderField((DgnTextFile *)v84, "PhonemeSetName", (PhnMgr *)((char *)this + 40), 1);
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v84, v15, v16, v17, v18, v19, v20, v21);
  v80 = 0;
  v81 = 0;
  v79[0] = 0;
  v79[1] = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v84, (uint64_t)&v80);
  DgnTextFile::getLineFieldFormats((uint64_t)v84, (unint64_t)v79);
  if (!(_DWORD)v81)
    goto LABEL_13;
  v24 = 0;
  v25 = 0;
  v26 = -1;
  do
  {
    if (*(_DWORD *)(v80 + v24 + 8))
      v27 = *(const char **)(v80 + v24);
    else
      v27 = (const char *)&unk_209A589AC;
    if (!strcmp(v27, "HumanReadable"))
    {
      if (*(_DWORD *)(v79[0] + 4 * v25))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 286, (uint64_t)"phoneme/phnmgr", 12, (uint64_t)"%.500s %.500s", v22, v23, (char)"HumanReadable");
      v26 = v25;
    }
    else
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 290, (uint64_t)"phoneme/phnmgr", 13, (uint64_t)"%.500s", v22, v23, (char)v27);
    }
    ++v25;
    v24 += 16;
  }
  while (v25 < v81);
  if (v26 == -1)
  {
LABEL_13:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 292, (uint64_t)"phoneme/phnmgr", 14, (uint64_t)"%.500s", v22, v23, (char)"PhoneCode");
    v26 = -1;
  }
  PhnMgr::addPhone(this, "_sil", v28, v29, v30, v31, v22, v23);
  DgnString::DgnString((DgnString *)&v77);
  DgnString::DgnString((DgnString *)v76);
  DgnString::DgnString((DgnString *)v75);
  v32 = MEMORY[0x24BDAC740];
  while (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v84))
  {
    LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v84, v26);
    DgnString::operator=((DgnString *)&v77, LineFieldString);
    if (v78 <= 1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 322, (uint64_t)"phoneme/phnmgr", 11, (uint64_t)"%.500s", v40, v41, (char)"empty string");
    v42 = DgnString::find((DgnString *)&v77, "_");
    if (!(_DWORD)v42)
    {
      if (v78)
        LOBYTE(v49) = (_BYTE)v77;
      else
        v49 = &unk_209A589AC;
      errThrowInternal(v42, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 324, (uint64_t)"phoneme/phnmgr", 11, (uint64_t)"%.500s", v47, v48, (char)v49);
    }
    v50 = this;
    v51 = v78;
    if (v78 >= 2)
    {
      v56 = 0;
      do
      {
        v57 = v77[v56];
        if (v77[v56] < 0 || (*(_DWORD *)(v32 + 4 * v57 + 60) & 0x500) == 0)
        {
          v58 = (v57 - 33) > 0x3F || ((1 << (v57 - 33)) & 0xD4000000FE0057FDLL) == 0;
          if (v58 && (v57 - 123) >= 4)
          {
            if (v51)
              LOBYTE(v60) = (_BYTE)v77;
            else
              v60 = &unk_209A589AC;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 358, (uint64_t)"phoneme/phnmgr", 11, (uint64_t)"%.500s", v47, v48, (char)v60);
            v51 = v78;
          }
        }
        ++v56;
        LODWORD(v59) = v51 - 1;
        if (v51)
          v59 = v59;
        else
          v59 = 0;
      }
      while (v56 < v59);
    }
    if (v51)
      v52 = v77;
    else
      v52 = (const char *)&unk_209A589AC;
    this = v50;
    v53 = PhnMgr::addPhone(v50, v52, v43, v44, v45, v46, v47, v48);
    if (v82 < v53)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 363, (uint64_t)"phoneme/phnmgr", 8, (uint64_t)"%u", v54, v55, v82);
  }
  *((_WORD *)this + 28) = PhnMgr::addPhone(this, "_gen", v33, v34, v35, v36, v37, v38);
  *((_WORD *)this + 29) = PhnMgr::addPhone(this, "_pronless", v61, v62, v63, v64, v65, v66);
  *((_WORD *)this + 30) = PhnMgr::addPhone(this, "_wb", v67, v68, v69, v70, v71, v72);
  if (*(_DWORD *)this - 4 != v82)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 386, (uint64_t)"phoneme/phnmgr", 9, (uint64_t)"%u %u", v73, v74, v82);
  DgnString::~DgnString((DgnString *)v75);
  DgnString::~DgnString((DgnString *)v76);
  DgnString::~DgnString((DgnString *)&v77);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v79);
  DgnArray<DgnString>::releaseAll((uint64_t)&v80);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v83);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v84);
}

void sub_209797C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  va_list va3;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va4;
  uint64_t v22;
  va_list va5;

  va_start(va5, a6);
  va_start(va4, a6);
  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v16 = va_arg(va4, _QWORD);
  v18 = va_arg(va4, _QWORD);
  v19 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v20 = va_arg(va5, _QWORD);
  v22 = va_arg(va5, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnArray<DgnString>::releaseAll((uint64_t)va3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va4);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va5);
  _Unwind_Resume(a1);
}

void PhnMgr::savePhnMgrText(PhnMgr *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  const char *v13;
  const char *v14;
  unsigned int v15;
  unsigned __int16 v16;
  uint64_t v17;
  char *v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26[35];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v26);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v26, (uint64_t)a2, 0x3Eu, a3);
  v24 = 0;
  v25 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v26, sPHT_Versions, (uint64_t)&v24, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v26, "PhonemeTable", (_QWORD *)(v24 + 8 * (v25 - 1)));
  v22 = 0;
  v23 = 0;
  v20 = 0;
  v21 = 0;
  DgnString::DgnString((DgnString *)v19, "HumanReadable");
  v11 = v23;
  if ((_DWORD)v23 == HIDWORD(v23))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v22, 1, 1);
    v11 = v23;
  }
  DgnString::DgnString((DgnString *)(v22 + 16 * v11), (const DgnString *)v19);
  LODWORD(v23) = v23 + 1;
  DgnString::~DgnString((DgnString *)v19);
  v12 = v21;
  if ((_DWORD)v21 == HIDWORD(v21))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v20, 1, 1);
    v12 = v21;
  }
  *(_DWORD *)(v20 + 4 * v12) = 0;
  LODWORD(v21) = v12 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v26, (uint64_t)&v20, (uint64_t)&v22);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v26, "NumberOfPhones", (*(_DWORD *)this - 4));
  if (*((_DWORD *)this + 8))
    v13 = (const char *)*((_QWORD *)this + 3);
  else
    v13 = (const char *)&unk_209A589AC;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v26, "Language", v13);
  if (*((_DWORD *)this + 12))
    v14 = (const char *)*((_QWORD *)this + 5);
  else
    v14 = (const char *)&unk_209A589AC;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v26, "PhonemeSetName", v14);
  v15 = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    v16 = 0;
    do
    {
      if (v16
        && *((unsigned __int16 *)this + 30) != v16
        && *((unsigned __int16 *)this + 28) != v16
        && *((unsigned __int16 *)this + 29) != v16)
      {
        v17 = *((_QWORD *)this + 1) + 16 * v16;
        if (*(_DWORD *)(v17 + 8))
          v18 = *(char **)v17;
        else
          v18 = (char *)&unk_209A589AC;
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v26, 0, v18);
        DgnTextFileWriter::writeNextLine(v26);
        v15 = *(_DWORD *)this;
      }
      ++v16;
    }
    while (v15 > v16);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
  DgnArray<DgnString>::releaseAll((uint64_t)&v22);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v24);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v26);
}

void sub_209797EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

void PhnMgr::loadPhnMgr(PhnMgr *this, char **a2, DFileChecksums *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  DgnStream *v12;
  int v13;
  int v14;
  char *v15;
  uint64_t CurrentSubDirComponents;
  unsigned int v17;
  uint64_t v18;

  if (DFile::subFileExists((uint64_t)a2, 0x3Eu))
  {
    PhnMgr::loadPhnMgrText(this, (DFile *)a2);
  }
  else
  {
    if (a4)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 450, (uint64_t)"phoneme/phnmgr", 17, (uint64_t)"%s", v8, v9, (char)&unk_209A589AC);
    v18 = 0;
    v12 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x3Du, 1, "MRPHNM!?", (_DWORD *)&v18 + 1, &v18);
    v13 = v18;
    if (v18 == 0x1300000007)
    {
      v14 = 19;
    }
    else
    {
      if (*((_DWORD *)a2 + 6))
        v15 = a2[2];
      else
        v15 = (char *)&unk_209A589AC;
      MrecHeaderCheckVersions(v15, "MRPHNM!?", HIDWORD(v18), v18, 0x17u, 8u);
      v13 = v18;
      v14 = HIDWORD(v18);
    }
    MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRPHNM!?", v14, v13, 23, 8, v10, v11);
    v17 = 0;
    readObject((uint64_t)v12, this, &v17);
    readObject<DgnString>(v12, (uint64_t)this + 8, &v17);
    readObject(v12, (PhnMgr *)((char *)this + 24), &v17);
    readObject(v12, (PhnMgr *)((char *)this + 40), &v17);
    readObject((uint64_t)v12, (unsigned __int16 *)this + 28, &v17);
    readObject((uint64_t)v12, (unsigned __int16 *)this + 29, &v17);
    readObject((uint64_t)v12, (unsigned __int16 *)this + 30, &v17);
    readObjectChecksumAndVerify(v12, v17);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents((DFile *)a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x3Du, v17);
    if (v12)
    {
      (**(void (***)(DgnStream *))v12)(v12);
      MemChunkFree(v12, 0);
    }
  }
}

void readObject<DgnString>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;

  v15 = 0;
  readObject((uint64_t)a1, &v15, a3);
  v6 = v15;
  v7 = *(_DWORD *)(a2 + 12);
  if (v15 > v7)
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v15 - v7, 0);
  v8 = *(unsigned int *)(a2 + 8);
  v9 = (int)v8;
  if (v6 >= v8)
  {
    if (v6 > v8)
    {
      v11 = v6 - v8;
      v12 = 16 * v8;
      do
      {
        DgnString::DgnString((DgnString *)(*(_QWORD *)a2 + v12));
        v12 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > v6)
  {
    v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      DgnString::~DgnString((DgnString *)(*(_QWORD *)a2 + v10));
      v10 -= 16;
    }
    while (v9 > v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if (v6)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      readObject(a1, (DgnString *)(*(_QWORD *)a2 + v13), a3);
      ++v14;
      v13 += 16;
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
}

void PhnMgr::savePhnMgr(PhnMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  DgnStream *v8;
  uint64_t CurrentSubDirComponents;
  int v10;

  if (a4)
  {
    PhnMgr::savePhnMgrText(this, a2, a5);
  }
  else
  {
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x3Du, a5, "MRPHNM!?", 23, 8);
    v10 = 0;
    writeObject((uint64_t)v8, (int *)this, &v10);
    writeObject<DgnString>((uint64_t)v8, (uint64_t)this + 8, &v10);
    writeObject((uint64_t)v8, (uint64_t)this + 24, &v10);
    writeObject((uint64_t)v8, (uint64_t)this + 40, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 28, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 29, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 30, &v10);
    writeObjectChecksum((uint64_t)v8, &v10);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x3Du, v10);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
}

uint64_t writeObject<DgnString>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t PhnMgr::operator==(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(unsigned __int16 *)(a1 + 60) == *(unsigned __int16 *)(a2 + 60)
    && *(unsigned __int16 *)(a1 + 56) == *(unsigned __int16 *)(a2 + 56)
    && *(unsigned __int16 *)(a1 + 58) == *(unsigned __int16 *)(a2 + 58)
    && (*(_DWORD *)(a1 + 32) ? (v4 = *(const char **)(a1 + 24)) : (v4 = (const char *)&unk_209A589AC),
        *(_DWORD *)(a2 + 32) ? (v5 = *(const char **)(a2 + 24)) : (v5 = (const char *)&unk_209A589AC),
        !strcmp(v4, v5)
     && (*(_DWORD *)(a1 + 48) ? (v6 = *(const char **)(a1 + 40)) : (v6 = (const char *)&unk_209A589AC),
         *(_DWORD *)(a2 + 48) ? (v7 = *(const char **)(a2 + 40)) : (v7 = (const char *)&unk_209A589AC),
         !strcmp(v6, v7))))
  {
    return DgnArray<DgnString>::operator==(a1 + 8, (uint64_t *)(a2 + 8));
  }
  else
  {
    return 0;
  }
}

uint64_t PhnMgr::getPhnIndex(PhnMgr *this, const char *a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _DWORD *v10;
  const char *v11;
  void *v13;
  int v14;

  v2 = (char)a2;
  DgnString::DgnString((DgnString *)&v13, a2);
  v6 = *(unsigned __int16 *)this;
  if (!*(_WORD *)this)
    goto LABEL_13;
  v7 = 0;
  v8 = *((_QWORD *)this + 1);
  v9 = (const char *)(v14 ? v13 : &unk_209A589AC);
  v10 = (_DWORD *)(v8 + 8);
  while (1)
  {
    v11 = *v10 ? (const char *)*((_QWORD *)v10 - 1) : (const char *)&unk_209A589AC;
    if (!strcmp(v11, v9))
      break;
    ++v7;
    v10 += 4;
    if (v6 == v7)
      goto LABEL_13;
  }
  if ((_WORD)v7 == 0xFFFF)
  {
LABEL_13:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/phoneme/phnmgr.cpp", 569, (uint64_t)"phoneme/phnmgr", 3, (uint64_t)"%.500s", v4, v5, v2);
    LOWORD(v7) = -1;
  }
  DgnString::~DgnString((DgnString *)&v13);
  return (unsigned __int16)v7;
}

void sub_2097985A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

_QWORD *DgnArray<DgnString>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 16 * v2 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*(_QWORD *)a1 + v3));
      v3 -= 16;
    }
    while (v3 != -16);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void DgnArray<DgnString>::copyArraySlice(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 >= 1)
  {
    v9 = 16 * v8 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*(_QWORD *)a1 + v9));
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 12);
  if (a4 <= v10)
  {
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_14;
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1, a4 - v10, 0);
    v11 = *(_DWORD *)(a1 + 8);
  }
  v13 = 0;
  v12 = v11;
  do
  {
    DgnString::DgnString((DgnString *)(*(_QWORD *)a1 + 16 * v12), (const DgnString *)(*a2 + 16 * (a3 + v13)));
    v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      v14 = (int)v12;
      v15 = 16 * (int)v12 - 16;
      do
      {
        --v14;
        DgnString::~DgnString((DgnString *)(*(_QWORD *)a1 + v15));
        v15 -= 16;
      }
      while (v14 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  v16 = a4 - v12;
  if (a4 > v12)
  {
    v17 = 16 * v12;
    do
    {
      DgnString::DgnString((DgnString *)(*(_QWORD *)a1 + v17));
      v17 += 16;
      --v16;
    }
    while (v16);
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = a4;
}

uint64_t DgnArray<DgnString>::find(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  _DWORD *i;
  const char *v6;

  v2 = a1[2];
  if (!(_DWORD)v2)
    return 0xFFFFFFFFLL;
  v3 = 0;
  if (*(_DWORD *)(a2 + 8))
    v4 = *(const char **)a2;
  else
    v4 = (const char *)&unk_209A589AC;
  for (i = (_DWORD *)(*(_QWORD *)a1 + 8); ; i += 4)
  {
    v6 = *i ? (const char *)*((_QWORD *)i - 1) : (const char *)&unk_209A589AC;
    if (!strcmp(v6, v4))
      break;
    if (v2 == ++v3)
      return 0xFFFFFFFFLL;
  }
  return v3;
}

uint64_t DgnArray<DgnString>::operator==(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  const char *v13;
  int v14;
  void *v15;
  const char *v16;
  int v17;

  if ((uint64_t *)a1 == a2)
    return 1;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *((_DWORD *)a2 + 2))
    return 0;
  v4 = *a2;
  v5 = v3 + 1;
  v6 = 16 * v3;
  do
  {
    v7 = --v5 < 1;
    if (v5 < 1)
      break;
    v8 = v6 - 16;
    v9 = *(_QWORD *)a1 + v6;
    v10 = v4 + v6;
    v11 = *(_DWORD *)(v9 - 8);
    v12 = *(void **)(v9 - 16);
    v13 = (const char *)(v11 ? v12 : &unk_209A589AC);
    v14 = *(_DWORD *)(v10 - 8);
    v15 = *(void **)(v10 - 16);
    v16 = (const char *)(v14 ? v15 : &unk_209A589AC);
    v17 = strcmp(v13, v16);
    v6 = v8;
  }
  while (!v17);
  return v7;
}

double fround(double a1, int a2)
{
  double v4;
  double v5;
  double i;
  long double v7;
  BOOL v8;
  double v9;
  double v10;
  double v11;
  double v13;
  double v14;
  double v16;
  double __y;

  v4 = -a1;
  if (a1 >= 0.0)
    v4 = a1;
  __y = 0.0;
  v5 = modf(v4, &__y);
  for (i = 1.0; a2; --a2)
    i = i * 10.0;
  v16 = 0.0;
  v7 = modf(v5 * i, &v16);
  v8 = v7 == 0.5;
  if (v7 > 0.5)
  {
    v9 = v16;
LABEL_11:
    v9 = v9 + 1.0;
    goto LABEL_12;
  }
  v9 = v16;
  v10 = floor(v16 * 0.5);
  v11 = v10 + v10;
  if (v8 && v11 != v16)
    goto LABEL_11;
LABEL_12:
  v13 = __y + v9 / i;
  if (a1 < 0.0)
    v13 = -v13;
  v14 = 1.0;
  if (v13 == 0.0)
    v14 = v13;
  return v13 * v14;
}

double eround(double result, int a2)
{
  double v2;
  double v3;
  unsigned int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;

  if (result == 0.0)
    return result * result;
  v2 = -result;
  if (result >= 0.0)
    v2 = result;
  v3 = 1.0;
  if (a2 >= 2)
  {
    v4 = a2 + 1;
    do
    {
      v3 = v3 * 10.0;
      --v4;
    }
    while (v4 > 2);
  }
  v5 = v3 * 10.0;
  if (v2 < v3 * 10.0)
  {
    v6 = 1.0;
    v7 = v2;
    if (v2 < v3)
    {
      do
      {
        v6 = v6 * 10.0;
        v7 = v2 * v6;
      }
      while (v2 * v6 < v3);
    }
  }
  else
  {
    if (v2 * 0.5 == v2)
      return result;
    v6 = 1.0;
    do
    {
      v6 = v6 * 10.0;
      v7 = v2 / v6;
    }
    while (v2 / v6 >= v5);
  }
  v8 = floor(v7);
  v9 = v7 - v8;
  if (v7 - v8 > 0.5 || ((v10 = floor(v8 * 0.5), v11 = v10 + v10, v9 == 0.5) ? (v12 = v11 == v8) : (v12 = 1), !v12))
    v8 = v8 + 1.0;
  v13 = v2 < v5;
  v14 = v8 / v6;
  if (!v13)
    v14 = v6 * v8;
  if (result >= 0.0)
    v15 = v14;
  else
    v15 = -v14;
  v16 = 1.0;
  if (v15 == 0.0)
    v16 = v15;
  return v15 * v16;
}

uint64_t StateIdPair::computeHash(_DWORD *a1)
{
  unint64_t v1;

  HIDWORD(v1) = *a1;
  LODWORD(v1) = *a1;
  return (v1 >> 19) + a1[1];
}

uint64_t CWIDAC::computeHash(uint64_t a1)
{
  int v1;
  int v2;
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v2 = *(_DWORD *)(a1 + 16);
  v1 = *(_DWORD *)(a1 + 20);
  if (v1 == -83886084)
    v1 = 0;
  HIDWORD(v3) = v1;
  LODWORD(v3) = v1;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = (v3 >> 19) + v4;
  if (v4)
    v1 = v6;
  v7 = *(unsigned __int16 *)(a1 + 4);
  HIDWORD(v8) = v1;
  LODWORD(v8) = v1;
  v9 = v7 == 0x3FFF;
  v10 = (v8 >> 19) + v7;
  if (!v9)
    v1 = v10;
  HIDWORD(v11) = v1;
  LODWORD(v11) = v1;
  v12 = (v11 >> 19) + *(unsigned __int16 *)(a1 + 6);
  if (*(_WORD *)(a1 + 6))
    v1 = v12;
  HIDWORD(v13) = v1;
  LODWORD(v13) = v1;
  v14 = (v13 >> 19) + v2;
  if (v2 == -83886084)
    v15 = v1;
  else
    v15 = v14;
  HIDWORD(v16) = v15;
  LODWORD(v16) = v15;
  v17 = (v16 >> 19) + *(_DWORD *)a1;
  HIDWORD(v16) = v17;
  LODWORD(v16) = v17;
  v18 = (v16 >> 19) + v5;
  if (v5 == -2)
    return v17;
  else
    return v18;
}

uint64_t CWIDAC::cmp(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;

  v2 = *(_DWORD *)a1 >= *(_DWORD *)a2;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    goto LABEL_13;
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a2 + 16);
  v2 = v3 >= v4;
  if (v3 != v4)
    goto LABEL_13;
  v5 = *(_DWORD *)(a1 + 20);
  v6 = *(_DWORD *)(a2 + 20);
  v2 = v5 >= v6;
  if (v5 != v6)
    goto LABEL_13;
  v7 = *(unsigned __int16 *)(a1 + 4);
  v8 = *(unsigned __int16 *)(a2 + 4);
  v2 = v7 >= v8;
  if (v7 != v8)
    goto LABEL_13;
  v9 = *(_DWORD *)(a1 + 12);
  v10 = *(_DWORD *)(a2 + 12);
  v2 = v9 >= v10;
  if (v9 == v10
    && (v11 = *(unsigned __int16 *)(a1 + 6), v12 = *(unsigned __int16 *)(a2 + 6), v2 = v11 >= v12, v11 == v12))
  {
    v13 = *(_DWORD *)(a1 + 8);
    v14 = *(_DWORD *)(a2 + 8);
    v15 = v13 == v14;
    if (v13 < v14)
      v16 = -1;
    else
      v16 = 1;
    if (v15)
      return 0;
    else
      return v16;
  }
  else
  {
LABEL_13:
    if (v2)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
}

uint64_t CWIDACPair::computeHash(uint64_t a1)
{
  unint64_t v2;

  HIDWORD(v2) = CWIDAC::computeHash(a1);
  LODWORD(v2) = HIDWORD(v2);
  return (v2 >> 19) + CWIDAC::computeHash(a1 + 24);
}

uint64_t StartupUserDeltaParamSpecMgr(void)
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;

  v0 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v0, (uint64_t)"UserDeltaTyingType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUserDeltaTyingTypeEnumHistory);
  v1 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v1, (uint64_t)"UserDeltaRunLengthMin", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUserDeltaRunLengthMinIntHistory);
  v2 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v2, (uint64_t)"UserDeltaRunLengthRange", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUserDeltaRunLengthRangeIntHistory);
  v3 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v3, (uint64_t)"UserDeltaInclusionMinDivergence", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUserDeltaInclusionMinDivergenceIntHistory);
  ParamSpecMgr::addParam(qword_253DF2880, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_253DF2880, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_253DF2880, (ParamSpec *)v2);
  ParamSpecMgr::addParam(qword_253DF2880, (ParamSpec *)v3);
  return ParamSpecMgr::sortParams((ParamSpecMgr *)qword_253DF2880);
}

_DWORD *UserDeltaParamSet::UserDeltaParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(_QWORD *)a1 = &off_24C215E00;
  UserDeltaParamSet::setDefaults((UserDeltaParamSet *)a1, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

void sub_209798D78(_Unwind_Exception *a1)
{
  DgnString *v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t UserDeltaParamSet::UserDeltaParamSet(uint64_t a1, uint64_t a2, const char *a3, int a4, int a5, int a6)
{
  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)a1 = &off_24C215E00;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t UserDeltaParamSet::setDefaults(UserDeltaParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  *((_DWORD *)this + 10) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2880, 1, a3, a4, a5, a6, a7, a8);
  *((_DWORD *)this + 11) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2880, 2, 0, 0, v9, v10, v11, v12);
  *((_DWORD *)this + 12) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2880, 3, 0, 0, v13, v14, v15, v16);
  result = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2880, 4, 0, 0, v17, v18, v19, v20);
  *((_DWORD *)this + 13) = result;
  return result;
}

uint64_t UserDeltaParamSet::sizeObject(uint64_t a1, int a2)
{
  _BOOL4 v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2 != 3;
  v3 = sizeObject(a1 + 8);
  v4 = 16 * v2;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 0;
  return v3 + 16 * v2 + v4;
}

uint64_t ParamSetBase::sizeObject(uint64_t a1, int a2)
{
  return sizeObject(a1 + 8) + 16 * (a2 != 3);
}

uint64_t UserDeltaParamSet::getBoolParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 1:
      v8 = "enum";
      v9 = 1;
      goto LABEL_7;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_7;
    case 3:
      v8 = "int";
      v9 = 3;
      goto LABEL_7;
    case 4:
      v8 = "int";
      v9 = 4;
LABEL_7:
      throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

uint64_t UserDeltaParamSet::getIntParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  ParamSpecMgr *v9;
  int v10;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  const void *ParamByParamId;
  const void *v16;
  const void *v17;

  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 2:
      switch((int)a3)
      {
        case 0:
          result = a1[11];
          break;
        case 1:
          v9 = (ParamSpecMgr *)qword_253DF2880;
          v10 = 2;
          goto LABEL_20;
        case 2:
          v11 = (ParamSpecMgr *)qword_253DF2880;
          v12 = 2;
          goto LABEL_22;
        case 3:
          v13 = (ParamSpecMgr *)qword_253DF2880;
          v14 = 2;
          goto LABEL_24;
        default:
          goto LABEL_10;
      }
      break;
    case 3:
      switch((int)a3)
      {
        case 0:
          result = a1[12];
          break;
        case 1:
          v9 = (ParamSpecMgr *)qword_253DF2880;
          v10 = 3;
          goto LABEL_20;
        case 2:
          v11 = (ParamSpecMgr *)qword_253DF2880;
          v12 = 3;
          goto LABEL_22;
        case 3:
          v13 = (ParamSpecMgr *)qword_253DF2880;
          v14 = 3;
          goto LABEL_24;
        default:
          goto LABEL_10;
      }
      break;
    case 4:
      switch((int)a3)
      {
        case 0:
          result = a1[13];
          break;
        case 1:
          v9 = (ParamSpecMgr *)qword_253DF2880;
          v10 = 4;
LABEL_20:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v9, v10, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v11 = (ParamSpecMgr *)qword_253DF2880;
          v12 = 4;
LABEL_22:
          v16 = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v13 = (ParamSpecMgr *)qword_253DF2880;
          v14 = 4;
LABEL_24:
          v17 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_10:
          throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
          goto LABEL_11;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
LABEL_11:
      result = 0;
      break;
  }
  return result;
}

double UserDeltaParamSet::getDoubleParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 1:
      v8 = "enum";
      v9 = 1;
      goto LABEL_7;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_7;
    case 3:
      v8 = "int";
      v9 = 3;
      goto LABEL_7;
    case 4:
      v8 = "int";
      v9 = 4;
LABEL_7:
      throwWrongTypeForParamId(v9, v8, "double", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0.0;
}

uint64_t UserDeltaParamSet::getStringParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 1:
      v8 = "enum";
      v9 = 1;
      goto LABEL_7;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_7;
    case 3:
      v8 = "int";
      v9 = 3;
      goto LABEL_7;
    case 4:
      v8 = "int";
      v9 = 4;
LABEL_7:
      throwWrongTypeForParamId(v9, v8, "string", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

uint64_t UserDeltaParamSet::getEnumParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  char v9;
  void *ParamByParamId;
  void *v11;
  void *v12;

  switch(a2)
  {
    case 1:
      switch((int)a3)
      {
        case 0:
          result = *(unsigned int *)(a1 + 40);
          break;
        case 1:
          ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2880, 1, a3, a4, a5, a6, a7, a8);
          if (ParamByParamId)
          result = EnumParamSpec::getDefault((EnumParamSpec *)ParamByParamId);
          break;
        case 2:
          v11 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2880, 1, a3, a4, a5, a6, a7, a8);
          if (v11)
          result = EnumParamSpec::getMinVal((EnumParamSpec *)v11);
          break;
        case 3:
          v12 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2880, 1, a3, a4, a5, a6, a7, a8);
          if (v12)
          result = EnumParamSpec::getMaxVal((EnumParamSpec *)v12);
          break;
        default:
          throwWrongQueryMode(a3, (uint64_t)"enum", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    case 2:
      v9 = 2;
      goto LABEL_8;
    case 3:
      v9 = 3;
      goto LABEL_8;
    case 4:
      v9 = 4;
LABEL_8:
      throwWrongTypeForParamId(v9, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

uint64_t EnumParamSpec::getDefault(EnumParamSpec *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int i;
  uint64_t v4;

  v1 = *((_QWORD *)this + 4);
  if (!**(_BYTE **)(v1 + 24))
    return 0;
  v2 = 0;
  for (i = 1; ; ++i)
  {
    v4 = v1 + 32 * v2;
    if (*(_BYTE *)(v4 + 16))
      break;
    v2 = i;
    if (!**(unsigned __int8 **)(v1 + 32 * i + 24))
      return 0;
  }
  return *(unsigned int *)(v4 + 32);
}

uint64_t EnumParamSpec::getMinVal(EnumParamSpec *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  int v6;

  v1 = *((_QWORD *)this + 4);
  if (!**(_BYTE **)(v1 + 24))
    return 0;
  v2 = 0;
  LODWORD(result) = 0;
  v4 = 1;
  v5 = v1 + 16;
  do
  {
    v6 = *(_DWORD *)(v5 + 32 * v2 + 16);
    if ((int)result > v6 || v4 == 1)
      result = v6;
    else
      result = result;
    v2 = v4;
  }
  while (**(unsigned __int8 **)(v5 + 32 * v4++ + 8));
  return result;
}

uint64_t EnumParamSpec::getMaxVal(EnumParamSpec *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  int v6;

  v1 = *((_QWORD *)this + 4);
  if (!**(_BYTE **)(v1 + 24))
    return 0;
  v2 = 0;
  LODWORD(result) = 0;
  v4 = 1;
  v5 = v1 + 16;
  do
  {
    v6 = *(_DWORD *)(v5 + 32 * v2 + 16);
    if ((int)result < v6 || v4 == 1)
      result = v6;
    else
      result = result;
    v2 = v4;
  }
  while (**(unsigned __int8 **)(v5 + 32 * v4++ + 8));
  return result;
}

void UserDeltaParamSet::setBoolParameter(UserDeltaParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
}

void UserDeltaParamSet::setIntParameter(UserDeltaParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  void *ParamByParamId;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2880, 2, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId)
      IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v8, 0, 0, v11, v12, v13, v14);
      if (*((_DWORD *)this + 9))
      {
        v21 = "UserDeltaRunLengthMin";
        goto LABEL_16;
      }
      *((_DWORD *)this + 11) = v8;
      return;
    case 3:
      v22 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2880, 3, a3, a4, a5, a6, a7, a8);
      if (v22)
      IntParamSpec::validateValue((IntParamSpec *)v22, v8, 0, 0, v23, v24, v25, v26);
      if (*((_DWORD *)this + 9))
      {
        v21 = "UserDeltaRunLengthRange";
        goto LABEL_16;
      }
      *((_DWORD *)this + 12) = v8;
      break;
    case 4:
      v27 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2880, 4, a3, a4, a5, a6, a7, a8);
      if (v27)
      IntParamSpec::validateValue((IntParamSpec *)v27, v8, 0, 0, v28, v29, v30, v31);
      if (*((_DWORD *)this + 9))
      {
        v21 = "UserDeltaInclusionMinDivergence";
LABEL_16:
        throwParamSetSetFailed(v21, "int", v15, v16, v17, v18, v19, v20);
      }
      else
      {
        *((_DWORD *)this + 13) = v8;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void UserDeltaParamSet::setDoubleParameter(UserDeltaParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;

  v9 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
}

void UserDeltaParamSet::setStringParameter(UserDeltaParamSet *this, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void UserDeltaParamSet::setEnumParameter(UserDeltaParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = a2;
  switch(a2)
  {
    case 1:
      v9 = a3;
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2880, 1, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId)
      EnumParamSpec::validateValue((EnumParamSpec *)ParamByParamId, v9, v12, v13, v14, v15, v16, v17);
      if (*((_DWORD *)this + 9))
        throwParamSetSetFailed("UserDeltaTyingType", "enum", v18, v19, v20, v21, v22, v23);
      else
        *((_DWORD *)this + 10) = v9;
      return;
    case 2:
      throwWrongTypeForParamId(2, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 3:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 4:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
}

void UserDeltaParamSet::~UserDeltaParamSet(UserDeltaParamSet *this)
{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((UserDeltaParamSet *)((char *)this + 8));
}

{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((UserDeltaParamSet *)((char *)this + 8));
  JUMPOUT(0x20BD149A8);
}

void TIntegrityChecker::operator()(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void *__p[2];
  char v16;

  v3 = *(_QWORD *)(a2 + 8);
  if ((v3 & 3) != 2)
    goto LABEL_8;
  if (*(_QWORD *)(*(_QWORD *)a1 + 8) != a2)
  {
    if ((v3 & 4) == 0)
    {
      loggableUnicode(*(unsigned int **)(a2 + 16), __p);
      if (v16 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      tknPrintf("Error: %s : Non-terminal is used but not defined\n", v4, v5, v6, v7, v8);
      goto LABEL_13;
    }
LABEL_8:
    v9 = 0;
    goto LABEL_16;
  }
  loggableUnicode(*(unsigned int **)(a2 + 16), __p);
  if (v16 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  tknPrintf("Error: %s : Top symbol cannot be used on right hand side of rules\n", v10, v11, v12, v13, v14);
LABEL_13:
  if (v16 < 0)
    operator delete(__p[0]);
  v9 = 1;
LABEL_16:
  a1[8] |= v9;
}

void sub_209799BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TGrammarCompiler::TGrammarCompiler(TGrammarCompiler *this, const TLocaleInfo *a2)
{
  TGrammar *v4;
  TLexerLexicon *v5;

  *(_QWORD *)this = &off_24C2157D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v4 = (TGrammar *)operator new();
  TGrammar::TGrammar(v4, a2);
  *((_QWORD *)this + 7) = v4;
  v5 = (TLexerLexicon *)operator new();
  TLexerLexicon::TLexerLexicon(v5, a2);
  TLexerLexicon::addString(v5, 96, 17, 0);
  TLexerLexicon::addString(v5, 34, 2, 1);
  TLexerLexicon::addString(v5, 39, 2, 2);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"<", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"<", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)">", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)">", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"=", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"!", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"|", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"&", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"*", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"/", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"-", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"+", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"%", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"^", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)":", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"!", 26);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)".", 3);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)",", 8);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"$", 9);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)";", 10);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"=", 11);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"{", 14);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"}", 13);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"[", 15);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"]", 16);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"|", 12);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"?", 25);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"(", 6);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)")", 7);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"i", 18);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"e", 19);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"f", 20);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)&unk_209A58B94, 21);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)&unk_209A58BAC, 21);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)&unk_209A58BBC, 23);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"R", 24);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"e", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"n", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"g", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"l", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"g", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"l", 5);
  TLexerLexicon::addRegExp((uint64_t)v5, (__int32 *)"\\", 4);
  TLexerLexicon::addRegExp((uint64_t)v5, (__int32 *)"[", 1);
  TLexerLexicon::doneAdding((TRegExp **)v5);
  *((_QWORD *)this + 8) = v5;
}

void sub_20979A014(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  MEMORY[0x20BD149A8](v2, 0x30C40773F8FACLL);
  v5 = (void *)v1[4];
  if (v5)
  {
    v1[5] = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    v1[2] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void TGrammarCompiler::~TGrammarCompiler(TGrammarCompiler *this)
{
  TGrammar *v2;
  TLexerLexicon *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  void *v11;

  *(_QWORD *)this = &off_24C2157D8;
  v2 = (TGrammar *)*((_QWORD *)this + 7);
  if (v2)
  {
    TGrammar::~TGrammar(v2);
    MEMORY[0x20BD149A8]();
  }
  v3 = (TLexerLexicon *)*((_QWORD *)this + 8);
  if (v3)
  {
    TLexerLexicon::~TLexerLexicon(v3);
    MEMORY[0x20BD149A8]();
  }
  v5 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if (v4 != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        if (*(char *)(v7 + 23) < 0)
          operator delete(*(void **)v7);
        MEMORY[0x20BD149A8](v7, 0x1092C40D41393B2);
        v5 = *((_QWORD *)this + 1);
        v4 = *((_QWORD *)this + 2);
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 3);
  }
  v8 = (_BYTE *)*((_QWORD *)this + 4);
  v9 = (_BYTE *)*((_QWORD *)this + 5);
  if (v9 == v8)
  {
    v8 = (_BYTE *)*((_QWORD *)this + 5);
    if (v9)
    {
LABEL_18:
      *((_QWORD *)this + 5) = v8;
      operator delete(v8);
    }
  }
  else
  {
    v10 = 0;
    do
    {
      if (*(_QWORD *)&v8[8 * v10])
      {
        MEMORY[0x20BD149A8](*(_QWORD *)&v8[8 * v10], 0x1000C4052888210);
        v8 = (_BYTE *)*((_QWORD *)this + 4);
        v9 = (_BYTE *)*((_QWORD *)this + 5);
      }
      ++v10;
    }
    while (v10 < (v9 - v8) >> 3);
    if (v8)
      goto LABEL_18;
  }
  v11 = (void *)*((_QWORD *)this + 1);
  if (v11)
  {
    *((_QWORD *)this + 2) = v11;
    operator delete(v11);
  }
}

{
  TGrammarCompiler::~TGrammarCompiler(this);
  JUMPOUT(0x20BD149A8);
}

void TGrammarCompiler::registerFunction(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v14 = (_QWORD *)operator new();
  TFunctionDescr::TFunctionDescr(v14, a2, a3, a4, a5, a6, a7);
  v15 = a1[3];
  v16 = (_QWORD *)a1[2];
  if ((unint64_t)v16 >= v15)
  {
    v18 = a1[1];
    v19 = ((uint64_t)v16 - v18) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v20 = v15 - v18;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a1 + 3), v22);
    else
      v23 = 0;
    v24 = &v23[8 * v19];
    v25 = &v23[8 * v22];
    *(_QWORD *)v24 = v14;
    v17 = v24 + 8;
    v27 = (char *)a1[1];
    v26 = (char *)a1[2];
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *((_QWORD *)v24 - 1) = v28;
        v24 -= 8;
      }
      while (v26 != v27);
      v26 = (char *)a1[1];
    }
    a1[1] = v24;
    a1[2] = v17;
    a1[3] = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v16 = v14;
    v17 = v16 + 1;
  }
  a1[2] = v17;
}

void sub_20979A314(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1092C40D41393B2);
  _Unwind_Resume(a1);
}

void TGrammarCompiler::loadRule(uint64_t *a1, TLexer *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Token;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int32 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  void *v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  size_t v52;
  int v53;
  _DWORD *v54;
  const __int32 *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  _QWORD *v95;
  char *v96;
  std::string *v97;
  const char *v98;
  _QWORD *v99;
  std::string *v100;
  __int128 v101;
  const char *v102;
  _QWORD *v103;
  std::string *v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  _QWORD *exception;
  std::string *v130;
  const char *v131;
  _QWORD *v132;
  std::string *v133;
  const char *v134;
  _QWORD *v135;
  std::string *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _QWORD *v140;
  uint64_t v141;
  void *v142[2];
  uint64_t v143;
  _BYTE v144[24];
  uint64_t v145;
  _BYTE __p[24];
  _QWORD v147[128];
  char v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  void *v153;
  unint64_t v154;
  uint64_t *v155;
  _QWORD *v156[130];
  _BYTE v157[64];
  std::string::size_type __sz[2];
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;

  v190 = *MEMORY[0x24BDAC8D0];
  Token = nextToken(a2, (uint64_t)a2, a3, a4, a5);
  if (*(_QWORD *)Token != 1)
  {
    loggableToken((uint64_t)a2);
    if (__p[23] >= 0)
      v111 = __p;
    else
      v111 = *(_BYTE **)__p;
    tknPrintf("Error: %sExpected a rule symbol\n", v107, v108, v109, v110, v111);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    std::string::basic_string[abi:ne180100]<0>(__sz, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SBYTE7(v159) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)__sz[0], __sz[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)__sz;
      v147[0] = v159;
    }
    *(_QWORD *)__p = &unk_24C215870;
    if (v147[0] >= 0)
      v128 = &__p[8];
    else
      v128 = *(const char **)&__p[8];
    conditionalAssert(v128, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 855, v112, v113);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v147[0]) < 0)
      operator delete(*(void **)&__p[8]);
    if (SBYTE7(v159) < 0)
      operator delete((void *)__sz[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v130 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v130, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v137 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v130->__r_.__value_.__l.__data_ = v137;
    }
    *exception = &unk_24C215870;
  }
  v141 = *(_QWORD *)(Token + 16);
  v140 = TGrammar::addNonTerminal(a1[7], *(__int32 **)(Token + 8), 1);
  if (*(_QWORD *)nextToken(a2, v9, v10, v11, v12) != 11)
  {
    loggableToken((uint64_t)a2);
    if (__p[23] >= 0)
      v118 = __p;
    else
      v118 = *(_BYTE **)__p;
    tknPrintf("Error: %sExpected '=' after LHS\n", v114, v115, v116, v117, v118);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    std::string::basic_string[abi:ne180100]<0>(__sz, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SBYTE7(v159) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)__sz[0], __sz[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)__sz;
      v147[0] = v159;
    }
    *(_QWORD *)__p = &unk_24C215870;
    if (v147[0] >= 0)
      v131 = &__p[8];
    else
      v131 = *(const char **)&__p[8];
    conditionalAssert(v131, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 867, v119, v120);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v147[0]) < 0)
      operator delete(*(void **)&__p[8]);
    if (SBYTE7(v159) < 0)
      operator delete((void *)__sz[0]);
    v132 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *v132 = aPpx;
    v133 = (std::string *)(v132 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v133, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v138 = *(_OWORD *)__p;
      v132[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v133->__r_.__value_.__l.__data_ = v138;
    }
    *v132 = &unk_24C215870;
  }
  v17 = 0;
  v18 = 0;
  v156[1] = 0;
  v156[0] = 0;
  v155 = (uint64_t *)v156;
  v153 = 0;
  v152 = 0;
  v154 = 0;
  v189 = 0u;
  v188 = 0u;
  v187 = 0u;
  v186 = 0u;
  v185 = 0u;
  v184 = 0u;
  v183 = 0u;
  v182 = 0u;
  v181 = 0u;
  v180 = 0u;
  v179 = 0u;
  v178 = 0u;
  v177 = 0u;
  v176 = 0u;
  v175 = 0u;
  v174 = 0u;
  v173 = 0u;
  v172 = 0u;
  v171 = 0u;
  v170 = 0u;
  v169 = 0u;
  v168 = 0u;
  v167 = 0u;
  v166 = 0u;
  v165 = 0u;
  v164 = 0u;
  v163 = 0u;
  v162 = 0u;
  v161 = 0u;
  v160 = 0u;
  v159 = 0u;
  *(_OWORD *)__sz = 0u;
  v150 = 0;
  v149 = 0;
  v151 = 0;
  do
  {
    while (1)
    {
      while (1)
      {
        v19 = nextToken(a2, v13, v14, v15, v16);
        v20 = v19;
        v21 = *(_QWORD *)v19;
        if (*(uint64_t *)v19 > 11)
          break;
        if (v21 == 1)
        {
          __sz[v17] = (std::string::size_type)TGrammar::addNonTerminal(a1[7], *(__int32 **)(v19 + 8), 0);
          *(_QWORD *)__p = *(_QWORD *)(v20 + 8);
          std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__emplace_unique_key_args<wchar_t const*,wchar_t const* const&>(&v155, (const __int32 **)__p, (uint64_t *)__p);
        }
        else
        {
          if (v21 != 2)
            goto LABEL_113;
          *(_QWORD *)__p = v147;
          *(_OWORD *)&__p[8] = xmmword_209A57DD0;
          v148 = 1;
          TRegExp::stringToRegExp(*(_QWORD *)(v19 + 8), (uint64_t)__p, 0, 0);
          v22 = a1[7];
          if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
          {
            if (v148)
            {
              *(_DWORD *)v144 = 0;
              TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v144, 1uLL);
              v23 = *(__int32 **)__p;
              --*(_QWORD *)&__p[16];
            }
            else
            {
              v23 = *(__int32 **)__p;
              if (*(_QWORD *)&__p[8])
                *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
            }
          }
          else
          {
            v23 = *(__int32 **)__p;
            *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
          }
          __sz[v17] = (std::string::size_type)TGrammar::addTerminal(v22, v23);
          if (v148 && *(_QWORD **)__p != v147 && *(_QWORD *)__p)
            MEMORY[0x20BD149A8]();
        }
LABEL_20:
        if (a3 && *(_QWORD *)v20 != 1)
        {
          if ((*(unsigned int (**)(uint64_t, _QWORD, BOOL, void **))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(v20 + 8), *(_QWORD *)v20 == 17, &v149))
          {
            if (v151 >= 0)
              v91 = (char *)&v149;
            else
              v91 = (char *)v149;
            std::string::basic_string[abi:ne180100]<0>(v144, v91);
            *(_QWORD *)__p = aPpx;
            if ((v144[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v144, *(std::string::size_type *)&v144[8]);
            }
            else
            {
              *(_OWORD *)&__p[8] = *(_OWORD *)v144;
              v147[0] = *(_QWORD *)&v144[16];
            }
            *(_QWORD *)__p = &unk_24C216908;
            if (v147[0] >= 0)
              v94 = &__p[8];
            else
              v94 = *(const char **)&__p[8];
            conditionalAssert(v94, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 910, v92, v93);
            *(_QWORD *)__p = aPpx;
            if (SHIBYTE(v147[0]) < 0)
              operator delete(*(void **)&__p[8]);
            if ((v144[23] & 0x80000000) != 0)
              operator delete(*(void **)v144);
            v95 = __cxa_allocate_exception(0x20uLL);
            if (v151 >= 0)
              v96 = (char *)&v149;
            else
              v96 = (char *)v149;
            std::string::basic_string[abi:ne180100]<0>(__p, v96);
            *v95 = aPpx;
            v97 = (std::string *)(v95 + 1);
            if ((__p[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v97, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            }
            else
            {
              v101 = *(_OWORD *)__p;
              v95[3] = *(_QWORD *)&__p[16];
              *(_OWORD *)&v97->__r_.__value_.__l.__data_ = v101;
            }
            *v95 = &unk_24C216908;
          }
          v28 = HIBYTE(v151);
          if (v151 < 0)
            v28 = v150;
          if (v28)
          {
            loggableToken((uint64_t)a2);
            v33 = __p;
            if (__p[23] < 0)
              v33 = *(_BYTE **)__p;
            v34 = &v149;
            if (v151 < 0)
              v34 = v149;
            tknPrintf("Warning: %s%s\n", v29, v30, v31, v32, v33, v34);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
        }
        v157[v17] = 0;
        v35 = (_QWORD *)nextToken(a2, v24, v25, v26, v27);
        v36 = (_QWORD *)*((_QWORD *)a2 + 3);
        if (*v35 == 25)
        {
          v156[v18 + 66] = v36;
          v156[v18++ + 2] = (_QWORD *)v17;
        }
        else if (v36)
        {
          *((_QWORD *)a2 + 3) = (char *)v36 - 1;
        }
        ++v17;
      }
      if (v21 == 17)
      {
        __sz[v17] = (std::string::size_type)TGrammar::addTerminal(a1[7], *(__int32 **)(v19 + 8));
        goto LABEL_20;
      }
      if (v21 != 12 && v21 != 14)
      {
LABEL_113:
        loggableToken((uint64_t)a2);
        v81 = __p[23];
        v82 = *(_BYTE **)__p;
        loggableUnicode(*(unsigned int **)(v20 + 8), v144);
        v87 = __p;
        if (v81 < 0)
          v87 = v82;
        if (v144[23] >= 0)
          v88 = v144;
        else
          v88 = *(_BYTE **)v144;
        tknPrintf("Error: %sUnexpected RHS symbol '%s'\n", v83, v84, v85, v86, v87, v88);
        if ((v144[23] & 0x80000000) != 0)
          operator delete(*(void **)v144);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        std::string::basic_string[abi:ne180100]<0>(v144, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if ((v144[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v144, *(std::string::size_type *)&v144[8]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v144;
          v147[0] = *(_QWORD *)&v144[16];
        }
        *(_QWORD *)__p = &unk_24C215870;
        if (v147[0] >= 0)
          v102 = &__p[8];
        else
          v102 = *(const char **)&__p[8];
        conditionalAssert(v102, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 985, v89, v90);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v147[0]) < 0)
          operator delete(*(void **)&__p[8]);
        if ((v144[23] & 0x80000000) != 0)
          operator delete(*(void **)v144);
        v103 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *v103 = aPpx;
        v104 = (std::string *)(v103 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v104, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v106 = *(_OWORD *)__p;
          v103[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v104->__r_.__value_.__l.__data_ = v106;
        }
        *v103 = &unk_24C215870;
      }
      v38 = 0;
      if (v17)
      {
        while (v157[v38])
        {
          if (v17 == ++v38)
            goto LABEL_106;
        }
      }
      if (v38 == v17)
      {
LABEL_106:
        loggableToken((uint64_t)a2);
        if (__p[23] >= 0)
          v78 = __p;
        else
          v78 = *(_BYTE **)__p;
        tknPrintf("Error: %sRight hand side must consist of at least one non-optional symbol\n", v74, v75, v76, v77, v78);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        std::string::basic_string[abi:ne180100]<0>(v144, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if ((v144[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v144, *(std::string::size_type *)&v144[8]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v144;
          v147[0] = *(_QWORD *)&v144[16];
        }
        *(_QWORD *)__p = &unk_24C215870;
        if (v147[0] >= 0)
          v98 = &__p[8];
        else
          v98 = *(const char **)&__p[8];
        conditionalAssert(v98, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 951, v79, v80);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v147[0]) < 0)
          operator delete(*(void **)&__p[8]);
        if ((v144[23] & 0x80000000) != 0)
          operator delete(*(void **)v144);
        v99 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *v99 = aPpx;
        v100 = (std::string *)(v99 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v100, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v105 = *(_OWORD *)__p;
          v99[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v105;
        }
        *v99 = &unk_24C215870;
      }
      v39 = TGrammar::addRule(a1[7], v141, (uint64_t)v140, __sz, v157, v17);
      v40 = v39;
      v41 = (char *)v153;
      if ((unint64_t)v153 >= v154)
      {
        v43 = ((_BYTE *)v153 - (_BYTE *)v152) >> 3;
        if ((unint64_t)(v43 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v44 = (uint64_t)(v154 - (_QWORD)v152) >> 2;
        if (v44 <= v43 + 1)
          v44 = v43 + 1;
        if (v154 - (unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v44;
        if (v13)
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v154, v13);
        else
          v45 = 0;
        v46 = &v45[8 * v43];
        *(_QWORD *)v46 = v40;
        v42 = v46 + 8;
        v47 = (char *)v153;
        v48 = (char *)v152;
        if (v153 != v152)
        {
          do
          {
            v49 = *((_QWORD *)v47 - 1);
            v47 -= 8;
            *((_QWORD *)v46 - 1) = v49;
            v46 -= 8;
          }
          while (v47 != v48);
          v47 = (char *)v152;
        }
        v152 = v46;
        v153 = v42;
        v154 = (unint64_t)&v45[8 * v13];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *(_QWORD *)v153 = v39;
        v42 = v41 + 8;
      }
      v153 = v42;
      if (!v18)
        break;
      *((_QWORD *)a2 + 3) = v156[--v18 + 66];
      v50 = v156[v18 + 2];
      v17 = (size_t)v50 + 1;
      v157[(_QWORD)v50] = 1;
    }
    v17 = 0;
  }
  while (*(_QWORD *)v20 != 14);
  v51 = *((_QWORD *)a2 + 3);
  if (v51)
    *((_QWORD *)a2 + 3) = v51 - 1;
  *(_QWORD *)__p = v147;
  *(_OWORD *)&__p[8] = xmmword_209A57DD0;
  v148 = 1;
  compileCode(a2, __p, (uint64_t)&v155, a1 + 1, v16);
  v52 = *(_QWORD *)&__p[16];
  v53 = *(_DWORD *)&__p[16] + 1;
  if ((unint64_t)(*(_QWORD *)&__p[16] + 1) >= 0x7FFFFFFF)
  {
    loggableToken((uint64_t)a2);
    if (v144[23] >= 0)
      v125 = v144;
    else
      v125 = *(_BYTE **)v144;
    tknPrintf("Error: %sRule is too large\n", v121, v122, v123, v124, v125);
    if ((v144[23] & 0x80000000) != 0)
      operator delete(*(void **)v144);
    std::string::basic_string[abi:ne180100]<0>(v142, &byte_209A88803);
    *(_QWORD *)v144 = aPpx;
    if (SHIBYTE(v143) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v144[8], (const std::string::value_type *)v142[0], (std::string::size_type)v142[1]);
    }
    else
    {
      *(_OWORD *)&v144[8] = *(_OWORD *)v142;
      v145 = v143;
    }
    *(_QWORD *)v144 = &unk_24C215870;
    if (v145 >= 0)
      v134 = &v144[8];
    else
      v134 = *(const char **)&v144[8];
    conditionalAssert(v134, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 1007, v126, v127);
    *(_QWORD *)v144 = aPpx;
    if (SHIBYTE(v145) < 0)
      operator delete(*(void **)&v144[8]);
    if (SHIBYTE(v143) < 0)
      operator delete(v142[0]);
    v135 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v144, &byte_209A88803);
    *v135 = aPpx;
    v136 = (std::string *)(v135 + 1);
    if ((v144[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v136, *(const std::string::value_type **)v144, *(std::string::size_type *)&v144[8]);
    }
    else
    {
      v139 = *(_OWORD *)v144;
      v135[3] = *(_QWORD *)&v144[16];
      *(_OWORD *)&v136->__r_.__value_.__l.__data_ = v139;
    }
    *v135 = &unk_24C215870;
  }
  v54 = (_DWORD *)operator new[]();
  *v54 = v53;
  if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
  {
    if (v148)
    {
      *(_DWORD *)v144 = 0;
      TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v144, 1uLL);
      v55 = *(const __int32 **)__p;
      --*(_QWORD *)&__p[16];
    }
    else
    {
      v55 = *(const __int32 **)__p;
      if (*(_QWORD *)&__p[8])
        *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
    }
  }
  else
  {
    v55 = *(const __int32 **)__p;
    *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
  }
  wmemcpy(v54 + 1, v55, v52);
  v56 = a1[6];
  v57 = (_QWORD *)a1[5];
  if ((unint64_t)v57 >= v56)
  {
    v59 = a1[4];
    v60 = ((uint64_t)v57 - v59) >> 3;
    if ((unint64_t)(v60 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v61 = v56 - v59;
    v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1))
      v62 = v60 + 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v62;
    if (v63)
      v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a1 + 6), v63);
    else
      v64 = 0;
    v65 = &v64[8 * v60];
    v66 = &v64[8 * v63];
    *(_QWORD *)v65 = v54;
    v58 = v65 + 8;
    v68 = (char *)a1[4];
    v67 = (char *)a1[5];
    if (v67 != v68)
    {
      do
      {
        v69 = *((_QWORD *)v67 - 1);
        v67 -= 8;
        *((_QWORD *)v65 - 1) = v69;
        v65 -= 8;
      }
      while (v67 != v68);
      v67 = (char *)a1[4];
    }
    a1[4] = (uint64_t)v65;
    a1[5] = (uint64_t)v58;
    a1[6] = (uint64_t)v66;
    if (v67)
      operator delete(v67);
  }
  else
  {
    *v57 = v54;
    v58 = v57 + 1;
  }
  a1[5] = (uint64_t)v58;
  v70 = (uint64_t *)v152;
  if (v153 != v152)
  {
    v71 = ((_BYTE *)v153 - (_BYTE *)v152) >> 3;
    if (v71 <= 1)
      v71 = 1;
    do
    {
      v72 = *v70++;
      *(_QWORD *)(v72 + 40) = v54;
      --v71;
    }
    while (v71);
  }
  if (v148)
  {
    if (*(_QWORD **)__p != v147 && *(_QWORD *)__p != 0)
      MEMORY[0x20BD149A8]();
  }
  if (SHIBYTE(v151) < 0)
    operator delete(v149);
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v155, v156[0]);
}

void sub_20979B2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,void *a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27)
{
  void *v27;
  int v28;
  void *v29;
  void *v31;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v28)
  {
LABEL_6:
    if (LOBYTE(STACK[0x490]) && a27 != v29 && a27)
      MEMORY[0x20BD149A8]();
    if (SLOBYTE(STACK[0x4AF]) < 0)
      operator delete((void *)STACK[0x498]);
    v31 = (void *)STACK[0x4B0];
    if (STACK[0x4B0])
    {
      STACK[0x4B8] = (unint64_t)v31;
      operator delete(v31);
    }
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&STACK[0x4C8], (_QWORD *)STACK[0x4D0]);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void sub_20979B40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,void *a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;
  void *v39;

  if (a32 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_6:
      if (SLOBYTE(STACK[0x4AF]) < 0)
        operator delete((void *)STACK[0x498]);
      v39 = (void *)STACK[0x4B0];
      if (STACK[0x4B0])
      {
        STACK[0x4B8] = (unint64_t)v39;
        operator delete(v39);
      }
      std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&STACK[0x4C8], (_QWORD *)STACK[0x4D0]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

void sub_20979B490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void *v30;
  int v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;

  if (a29 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        loggableToken(v29);
        tknPrintf("Error : %s%s\n", v34, v35, v36, v37);
        if (a29 < 0)
          operator delete(__p);
        __cxa_rethrow();
      }
      if (SLOBYTE(STACK[0x4AF]) < 0)
        operator delete((void *)STACK[0x498]);
      v38 = (void *)STACK[0x4B0];
      if (STACK[0x4B0])
      {
        STACK[0x4B8] = (unint64_t)v38;
        operator delete(v38);
      }
      std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&STACK[0x4C8], (_QWORD *)STACK[0x4D0]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void sub_20979B4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,void *a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;

  if (a25 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    loggableToken(v36);
    tknPrintf("Error : %s%s\n", v39, v40, v41, v42);
    if (a32 < 0)
      operator delete(a27);
    __cxa_rethrow();
  }
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete((void *)STACK[0x498]);
  v43 = (void *)STACK[0x4B0];
  if (STACK[0x4B0])
  {
    STACK[0x4B8] = (unint64_t)v43;
    operator delete(v43);
  }
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&STACK[0x4C8], (_QWORD *)STACK[0x4D0]);
  _Unwind_Resume(a1);
}

void sub_20979B524()
{
  JUMPOUT(0x20979B52CLL);
}

#error "20979B5F4: call analysis failed (funcsize=31)"

void sub_20979B570(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (LOBYTE(STACK[0x490]))
    TSegmenter::findSegmentEnd((uint64_t *)&a24, v30);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    loggableToken(v29);
    tknPrintf("Error : %s%s\n", v33, v34, v35, v36);
    if (a29 < 0)
      operator delete(a24);
    __cxa_rethrow();
  }
  JUMPOUT(0x20979B64CLL);
}

void sub_20979B590()
{
  JUMPOUT(0x20979B678);
}

void sub_20979B598()
{
  JUMPOUT(0x20979B5A0);
}

void sub_20979B610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v30;

  __cxa_end_catch();
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete((void *)STACK[0x498]);
  v30 = (void *)STACK[0x4B0];
  if (STACK[0x4B0])
  {
    STACK[0x4B8] = (unint64_t)v30;
    operator delete(v30);
  }
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&STACK[0x4C8], (_QWORD *)STACK[0x4D0]);
  _Unwind_Resume(a1);
}

void sub_20979B638(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x20979B678);
}

uint64_t nextToken(TLexer *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  TLexer *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  _QWORD *exception;
  std::string *v24;
  __int128 v25;
  const char *v26;
  _QWORD *v27;
  std::string *v28;
  __int128 v29;
  void *__p[2];
  uint64_t v31;
  _BYTE v32[24];
  uint64_t v33;

  v5 = *((_QWORD *)a1 + 3);
  v6 = *((_QWORD *)a1 + 11);
  if (v5 >= (*((_QWORD *)a1 + 12) - v6) >> 3)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *(TLexer **)a1;
    tknPrintf("Error: %s : Unexpected end of file\n", a2, a3, a4, a5, v9);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *(_QWORD *)v32 = aPpx;
    if (SHIBYTE(v31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v32[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v32[8] = *(_OWORD *)__p;
      v33 = v31;
    }
    *(_QWORD *)v32 = &unk_24C215870;
    if (v33 >= 0)
      v22 = &v32[8];
    else
      v22 = *(const char **)&v32[8];
    conditionalAssert(v22, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 211, v10, v11);
    *(_QWORD *)v32 = aPpx;
    if (SHIBYTE(v33) < 0)
      operator delete(*(void **)&v32[8]);
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v32, &byte_209A88803);
    *exception = aPpx;
    v24 = (std::string *)(exception + 1);
    if ((v32[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v32, *(std::string::size_type *)&v32[8]);
    }
    else
    {
      v25 = *(_OWORD *)v32;
      exception[3] = *(_QWORD *)&v32[16];
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
    }
    *exception = &unk_24C215870;
  }
  *((_QWORD *)a1 + 3) = v5 + 1;
  v7 = *(_QWORD *)(v6 + 8 * v5);
  if (v7 && *(_QWORD *)v7 == -1)
  {
    loggableToken((uint64_t)a1);
    v12 = v32[23];
    v13 = *(_BYTE **)v32;
    loggableUnicode(*(unsigned int **)(v7 + 8), __p);
    if (v12 >= 0)
      v18 = v32;
    else
      v18 = v13;
    if (v31 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    tknPrintf("Error: %sFound unexpected token '%s'\n", v14, v15, v16, v17, v18, v19);
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    if ((v32[23] & 0x80000000) != 0)
      operator delete(*(void **)v32);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *(_QWORD *)v32 = aPpx;
    if (SHIBYTE(v31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v32[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v32[8] = *(_OWORD *)__p;
      v33 = v31;
    }
    *(_QWORD *)v32 = &unk_24C215870;
    if (v33 >= 0)
      v26 = &v32[8];
    else
      v26 = *(const char **)&v32[8];
    conditionalAssert(v26, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 219, v20, v21);
    *(_QWORD *)v32 = aPpx;
    if (SHIBYTE(v33) < 0)
      operator delete(*(void **)&v32[8]);
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    v27 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v32, &byte_209A88803);
    *v27 = aPpx;
    v28 = (std::string *)(v27 + 1);
    if ((v32[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v32, *(std::string::size_type *)&v32[8]);
    }
    else
    {
      v29 = *(_OWORD *)v32;
      v27[3] = *(_QWORD *)&v32[16];
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
    }
    *v27 = &unk_24C215870;
  }
  return *(_QWORD *)(v6 + 8 * v5);
}

{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  TLexer *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  _QWORD *exception;
  std::string *v24;
  __int128 v25;
  const char *v26;
  _QWORD *v27;
  std::string *v28;
  __int128 v29;
  void *__p[2];
  uint64_t v31;
  _BYTE v32[24];
  uint64_t v33;

  v5 = *((_QWORD *)a1 + 3);
  v6 = *((_QWORD *)a1 + 11);
  if (v5 >= (*((_QWORD *)a1 + 12) - v6) >> 3)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *(TLexer **)a1;
    tknPrintf("Error: %s : Unexpected end of file\n", a2, a3, a4, a5, v9);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *(_QWORD *)v32 = aPpx;
    if (SHIBYTE(v31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v32[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v32[8] = *(_OWORD *)__p;
      v33 = v31;
    }
    *(_QWORD *)v32 = &unk_24C215870;
    if (v33 >= 0)
      v22 = &v32[8];
    else
      v22 = *(const char **)&v32[8];
    conditionalAssert(v22, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 457, v10, v11);
    *(_QWORD *)v32 = aPpx;
    if (SHIBYTE(v33) < 0)
      operator delete(*(void **)&v32[8]);
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v32, &byte_209A88803);
    *exception = aPpx;
    v24 = (std::string *)(exception + 1);
    if ((v32[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v32, *(std::string::size_type *)&v32[8]);
    }
    else
    {
      v25 = *(_OWORD *)v32;
      exception[3] = *(_QWORD *)&v32[16];
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
    }
    *exception = &unk_24C215870;
  }
  *((_QWORD *)a1 + 3) = v5 + 1;
  v7 = *(_QWORD *)(v6 + 8 * v5);
  if (v7 && *(_QWORD *)v7 == -1)
  {
    loggableToken((uint64_t)a1);
    v12 = v32[23];
    v13 = *(_BYTE **)v32;
    loggableUnicode(*(unsigned int **)(v7 + 8), __p);
    if (v12 >= 0)
      v18 = v32;
    else
      v18 = v13;
    if (v31 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    tknPrintf("Error: %sSyntax error, found unexpected token '%s'\n", v14, v15, v16, v17, v18, v19);
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    if ((v32[23] & 0x80000000) != 0)
      operator delete(*(void **)v32);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *(_QWORD *)v32 = aPpx;
    if (SHIBYTE(v31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v32[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v32[8] = *(_OWORD *)__p;
      v33 = v31;
    }
    *(_QWORD *)v32 = &unk_24C215870;
    if (v33 >= 0)
      v26 = &v32[8];
    else
      v26 = *(const char **)&v32[8];
    conditionalAssert(v26, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 465, v20, v21);
    *(_QWORD *)v32 = aPpx;
    if (SHIBYTE(v33) < 0)
      operator delete(*(void **)&v32[8]);
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    v27 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v32, &byte_209A88803);
    *v27 = aPpx;
    v28 = (std::string *)(v27 + 1);
    if ((v32[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v32, *(std::string::size_type *)&v32[8]);
    }
    else
    {
      v29 = *(_OWORD *)v32;
      v27[3] = *(_QWORD *)&v32[16];
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
    }
    *v27 = &unk_24C215870;
  }
  return *(_QWORD *)(v6 + 8 * v5);
}

void sub_20979B9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void TSyntaxException::~TSyntaxException(void **this)
{
  *this = &unk_24C213620;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = (void *)aPpx;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD149A8);
}

_QWORD *compileCode(TLexer *a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;

  nextToken(a1, (uint64_t)a2, a3, (uint64_t)a4, a5);
  while (1)
  {
    result = (_QWORD *)nextToken(a1, v9, v10, v11, v12);
    if (*result == 13)
      break;
    v15 = *((_QWORD *)a1 + 3);
    if (v15)
      *((_QWORD *)a1 + 3) = v15 - 1;
    compileInstruction(a1, a2, a3, a4, v14);
  }
  return result;
}

void TGrammarCompiler::loadRules(uint64_t *a1, TLexer *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  while (*((_QWORD *)a2 + 3) < (unint64_t)((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3))
    TGrammarCompiler::loadRule(a1, a2, a3, a4, a5);
}

void sub_20979C0D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20979C0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  int v19;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_20979C11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void TGrammarCompiler::registerRules(uint64_t a1, TInputStream *this, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *exception;
  std::string *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (*((_BYTE *)this + 8))
  {
    if (TInputStream::verifyVersion(this, "GrammarFormatVersion", 2uLL, 2uLL, 2uLL))
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v11, &byte_209A88803);
      *exception = aPpx;
      v9 = (std::string *)(exception + 1);
      if (SHIBYTE(v12) < 0)
      {
        std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)v11, *((std::string::size_type *)&v11 + 1));
      }
      else
      {
        v10 = v11;
        exception[3] = v12;
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      }
      *exception = &unk_24C214BA0;
    }
    TLexer::TLexer((TLexer *)&v11, this, 1uLL, *(const TLexerLexicon **)(a1 + 64), 0);
    TGrammarCompiler::loadRules((uint64_t *)a1, (TLexer *)&v11, a3, v6, v7);
    TLexer::~TLexer((TLexer *)&v11);
  }
}

void sub_20979C26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

TLexerLexicon *TGrammarCompiler::finalize(TGrammarCompiler *this)
{
  uint64_t v2;
  TLexerLexicon *result;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  _QWORD *exception;
  std::string *v8;
  __int128 v9;
  void *v10[2];
  uint64_t v11;
  _BYTE __p[24];
  uint64_t v13;
  uint64_t v14;
  char v15;

  v2 = *((_QWORD *)this + 7);
  v14 = v2;
  v15 = 0;
  TGrammar::forEachNonTerminal<TIntegrityChecker>(v2, &v14);
  TGrammar::forEachTerminal<TIntegrityChecker>(v2, &v14);
  if (v15)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v11) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v10[0], (std::string::size_type)v10[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v10;
      v13 = v11;
    }
    *(_QWORD *)__p = &unk_24C216908;
    if (v13 >= 0)
      v6 = &__p[8];
    else
      v6 = *(const char **)&__p[8];
    conditionalAssert(v6, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 1080, v4, v5);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v13) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v8 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v9 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
    }
    *exception = &unk_24C216908;
  }
  TGrammar::finalize(*((TGrammar **)this + 7));
  result = (TLexerLexicon *)*((_QWORD *)this + 8);
  if (result)
  {
    TLexerLexicon::~TLexerLexicon(result);
    result = (TLexerLexicon *)MEMORY[0x20BD149A8]();
  }
  *((_QWORD *)this + 8) = 0;
  return result;
}

void sub_20979C458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t TGrammarCompiler::getAttributeValue(uint64_t a1, __int32 *a2, TAllocator *a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  __int32 *v13;
  __int32 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  __int32 *v19;
  __int32 *v20;
  __int32 *v22;
  TLocaleInfo *v23;
  TLocaleInfo *v24;
  __int32 *v25;
  __int128 v26;
  _BYTE v27[1024];
  char v28;
  int v29;

  if (!wcscmp(a2, dword_209A58B94))
  {
    v25 = (__int32 *)v27;
    v26 = xmmword_209A57DD0;
    v28 = 1;
    v10 = *(_QWORD *)(a1 + 8);
    if ((v11 & 1) == 0
    {
      v23 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v23);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v23;
    }
    TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v10, (uint64_t)&v25, 0);
    if ((unint64_t)(*((_QWORD *)&v26 + 1) + 1) >> 62)
      v12 = -1;
    else
      v12 = 4 * (*((_QWORD *)&v26 + 1) + 1);
    v13 = (__int32 *)TAllocator::allocate(a3, v12);
    if (*((_QWORD *)&v26 + 1) >= (unint64_t)v26)
    {
      if (v28)
      {
        v29 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), &v29, 1uLL);
        v14 = v25;
        --*((_QWORD *)&v26 + 1);
      }
      else
      {
        v14 = v25;
        if ((_QWORD)v26)
          v25[(_QWORD)v26 - 1] = 0;
      }
    }
    else
    {
      v14 = v25;
      v25[*((_QWORD *)&v26 + 1)] = 0;
    }
    wcscpy(v13, v14);
    if (a4)
      *a4 = 1;
    if (!v28)
      return 1;
    v22 = v25;
    if (v25 == (__int32 *)v27)
      return 1;
LABEL_41:
    if (v22)
      MEMORY[0x20BD149A8](v22, 0x1000C4052888210);
    return 1;
  }
  if (!wcscmp(a2, dword_209A58BAC))
  {
    v25 = (__int32 *)v27;
    v26 = xmmword_209A57DD0;
    v28 = 1;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if ((v17 & 1) == 0
    {
      v24 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v24);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v24;
    }
    TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v16 + v15, (uint64_t)&v25, 0);
    if ((unint64_t)(*((_QWORD *)&v26 + 1) + 1) >> 62)
      v18 = -1;
    else
      v18 = 4 * (*((_QWORD *)&v26 + 1) + 1);
    v19 = (__int32 *)TAllocator::allocate(a3, v18);
    if (*((_QWORD *)&v26 + 1) >= (unint64_t)v26)
    {
      if (v28)
      {
        v29 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), &v29, 1uLL);
        v20 = v25;
        --*((_QWORD *)&v26 + 1);
      }
      else
      {
        v20 = v25;
        if ((_QWORD)v26)
          v25[(_QWORD)v26 - 1] = 0;
      }
    }
    else
    {
      v20 = v25;
      v25[*((_QWORD *)&v26 + 1)] = 0;
    }
    wcscpy(v19, v20);
    if (a4)
      *a4 = 1;
    if (!v28)
      return 1;
    v22 = v25;
    if (v25 == (__int32 *)v27)
      return 1;
    goto LABEL_41;
  }
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    v9 = *(_QWORD *)(v8 + 16) + 8 * *(_QWORD *)(a1 + 32);
  else
    v9 = a1 + 48;
  if ((*(_BYTE *)(*(_QWORD *)v9 + 8) & 4) != 0 || wcscmp(a2, dword_209A58BBC))
    return getAttributeValue(a2, *(const __int32 ****)(a1 + 40), a4);
  if (a4)
    *a4 = 1;
  return 1;
}

void sub_20979C858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x20BD149A8](v10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]) && a10 != v11)
  {
    if (a10)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t getAttributeValue(__int32 *a1, const __int32 ***a2, _BYTE *a3)
{
  const __int32 **v5;
  const __int32 ***v6;
  uint64_t v7;
  const __int32 **v8;

  if (a3)
    *a3 = 0;
  if (!a2)
    return 1;
  v5 = *a2;
  if (!*a2)
    return 1;
  v6 = a2 + 1;
  v7 = 1;
  while (wcscmp(a1, *v5))
  {
    v8 = *v6++;
    v5 = v8;
    if (!v8)
      return v7;
  }
  if (a3)
    *a3 = 1;
  return (uint64_t)(*(v6 - 1))[1];
}

uint64_t TGrammarCompiler::compareData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __int32 ***v3;
  uint64_t *v4;
  const __int32 **v5;
  uint64_t v6;
  const __int32 ***v7;
  const __int32 *v8;
  const __int32 **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t AttributeValue;
  const __int32 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *(const __int32 ****)(a2 + 40);
  v4 = *(uint64_t **)(a3 + 40);
  if (v3)
  {
    v5 = *v3;
    if (*v3)
    {
      v6 = 0;
      v7 = v3 + 1;
      while (1)
      {
        v8 = v5[1];
        if (!v8)
          goto LABEL_7;
        if (v8 != (const __int32 *)1)
          break;
        if (*v5[2])
          goto LABEL_7;
LABEL_8:
        v9 = *v7++;
        v5 = v9;
        if (!v9)
          goto LABEL_13;
      }
      if (!v5[2])
        goto LABEL_8;
LABEL_7:
      ++v6;
      goto LABEL_8;
    }
  }
  v6 = 0;
LABEL_13:
  if (v4)
  {
    v10 = *v4;
    if (*v4)
    {
      v11 = 0;
      v12 = v4 + 1;
      while (1)
      {
        v13 = *(_QWORD *)(v10 + 8);
        if (v13)
        {
          if (v13 == 1)
          {
            if (!**(_DWORD **)(v10 + 16))
              goto LABEL_28;
          }
          else if (!*(_QWORD *)(v10 + 16))
          {
            goto LABEL_28;
          }
        }
        AttributeValue = getAttributeValue(*(__int32 **)v10, v3, 0);
        v16 = *(v12 - 1);
        if (AttributeValue != *(_QWORD *)(v16 + 8))
          goto LABEL_32;
        if (AttributeValue)
        {
          if (AttributeValue == 1)
          {
            if (wcscmp(v15, *(const __int32 **)(v16 + 16)))
              goto LABEL_32;
          }
          else if (*(const __int32 **)(v16 + 16) != v15)
          {
LABEL_32:
            v18 = 0;
            goto LABEL_33;
          }
        }
        ++v11;
LABEL_28:
        v17 = *v12++;
        v10 = v17;
        if (!v17)
          goto LABEL_31;
      }
    }
  }
  v11 = 0;
LABEL_31:
  v18 = 1;
LABEL_33:
  if (v6 == v11)
    return v18;
  else
    return 0;
}

_QWORD *TGrammarCompiler::logData(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(uint64_t **)(a2 + 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"{ ", 2);
  if (v4)
  {
    v5 = *v4;
    if (*v4)
    {
      v6 = v4 + 1;
      do
      {
        v7 = *(_QWORD *)(v5 + 8);
        v8 = operator<<(a3, *(unsigned int **)v5);
        if (v7 == 1)
        {
          v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" = \"", 4);
          v8 = operator<<(v9, *(unsigned int **)(*(v6 - 1) + 16));
          v10 = "\"; ";
          v11 = 3;
        }
        else
        {
          v10 = " = [non-serializable object]; ";
          v11 = 30;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
        v12 = *v6++;
        v5 = v12;
      }
      while (v12);
    }
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"}", 1);
}

void TGrammarCompiler::makeData(uint64_t a1, uint64_t a2)
{
  TLocaleInfo *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t AttributeValue;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int32 v10;
  unsigned int *v11;
  unsigned __int8 v12;
  _BOOL4 v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  const __int32 *v24;
  __int32 *v25;
  size_t v26;
  size_t v27;
  unsigned int *v28;
  unsigned __int8 v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  unsigned int *v42;
  const __int32 *v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  const __int32 *v48;
  size_t v49;
  uint64_t *v50;
  TLocaleInfo *v51;
  TAllocator *v52;
  const __int32 **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  BOOL v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  TAllocator *v84;
  unsigned __int8 v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  __int32 *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t *v98;
  char *v99;
  char *v100;
  uint64_t *v101;
  uint64_t *v102;
  char *v103;
  char *v104;
  uint64_t *v105;
  char *v106;
  int v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  char *v114;
  char *v115;
  char *v116;
  size_t v117;
  size_t v118;
  uint64_t v119;
  BOOL v120;
  TLocaleInfo *v121;
  TLocaleInfo *v122;
  TLocaleInfo *v123;
  TLocaleInfo *v124;
  const __int32 *v125;
  unsigned int v126;
  unsigned __int8 v127;
  unsigned int v128;
  uint64_t i;
  unsigned int v130;
  unsigned __int8 v131;
  TLocaleInfo *v132;
  size_t v133;
  __int32 *v134;
  unsigned int *v135;
  int v136;
  unsigned __int8 v137;
  TLocaleInfo *v138;
  unsigned int v139;
  uint64_t j;
  unsigned int v141;
  unsigned __int8 v142;
  const __int32 *v143;
  size_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t GlobalLocaleInfo;
  unsigned int v152;
  unsigned int *v153;
  unsigned int *v154;
  unsigned int v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int *v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int *v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  int v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int *v184;
  unsigned int *v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  int v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  TLocaleInfo *v195;
  unsigned int v196;
  uint64_t v197;
  TLocaleInfo *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  const __int32 *v202;
  int v203;
  uint64_t v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  __int32 *v208;
  int v209;
  unsigned int v210;
  unsigned int v211;
  TLocaleInfo *v212;
  unint64_t v213;
  size_t v215;
  uint64_t v216;
  TLocaleInfo *v217;
  _QWORD *v218;
  uint64_t v219;
  TLocaleInfo *v220;
  int v221;
  void **v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void **v227;
  void **v228;
  int v229;
  void **v230;
  uint64_t v231;
  unsigned int v232;
  __int32 *v233;
  TLocaleInfo *v234;
  TLocaleInfo *v235;
  __int32 *v236;
  unint64_t v237;
  int *v238;
  void *__p;
  uint64_t *v240;
  uint64_t *v241;
  void *v242;
  __int128 v243;
  _BYTE v244[1024];
  char v245;
  void *v246[2];
  char v247;
  _OWORD __src[128];
  uint64_t v249;

  v2 = (TLocaleInfo *)a2;
  v249 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 424) = 0;
  v238 = *(int **)(*(_QWORD *)(a2 + 408) + 40);
  v4 = (uint64_t)(v238 + 1);
  v3 = *v238;
  memset(__src, 0, 512);
  __p = 0;
  v240 = 0;
  v241 = 0;
  std::vector<TGrammarCompiler::TArgument>::resize((uint64_t)&__p, 0);
  v237 = v3;
  if (v3 < 2)
    goto LABEL_440;
  while (2)
  {
    v10 = *(_DWORD *)v4;
    switch(*(_DWORD *)v4)
    {
      case 1:
        v23 = *(_DWORD *)(v4 + 4);
        v24 = (const __int32 *)(v4 + 8);
        v25 = (__int32 *)(v4 + 8 + 4 * wcslen((const __int32 *)(v4 + 8)) + 4);
        v26 = wcslen(v25);
        if ((unint64_t)*(v240 - 2) >= 2)
          goto LABEL_451;
        v27 = v26;
        v28 = (unsigned int *)*(v240 - 1);
        v240 -= 2;
        v242 = 0;
        if ((v29 & 1) == 0
        {
          v122 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v122);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v122;
        }
        AttributeValue = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v28, (unsigned int **)&v242);
        v30 = AttributeValue;
        v31 = *((_QWORD *)v2 + 51);
        v32 = *(_QWORD *)(v31 + 8);
        v33 = v32 - 1;
        if (v32 - 1 < (unint64_t)AttributeValue)
          goto LABEL_16;
        AttributeValue = wcscmp(v24, (const __int32 *)"R");
        if (!(_DWORD)AttributeValue)
        {
          if (v23)
            v70 = v33 + ~(unint64_t)v30;
          else
            v70 = v30;
LABEL_128:
          if (v70 != v33)
          {
            AttributeValue = *((_QWORD *)v2 + v70 + 1);
            if (AttributeValue)
            {
              AttributeValue = TGrammarCompiler::getAttributeValue(AttributeValue, v25, *((TAllocator **)v2 + 52), 0);
              v35 = AttributeValue;
              v34 = (void *)v6;
              goto LABEL_17;
            }
          }
LABEL_16:
          v34 = &unk_209A58DFC;
          v35 = 1;
          goto LABEL_17;
        }
        if (v32 == 1)
          goto LABEL_16;
        v234 = v2;
        v70 = 0;
        v71 = 0;
        v72 = v32 - 2;
        do
        {
          if (v23)
            v73 = v72;
          else
            v73 = v70;
          v74 = *(_QWORD *)(*(_QWORD *)(v31 + 16) + 8 * v73);
          if ((*(_BYTE *)(v74 + 8) & 4) == 0)
          {
            AttributeValue = wcscmp(v24, *(const __int32 **)(v74 + 16));
            if (!(_DWORD)AttributeValue)
            {
              if (v71 == v30)
              {
                v2 = v234;
                goto LABEL_128;
              }
              ++v71;
            }
          }
          ++v70;
          --v72;
        }
        while (v33 != v70);
        v34 = &unk_209A58DFC;
        v35 = 1;
        v2 = v234;
LABEL_17:
        v36 = v240;
        if (v240 < v241)
        {
LABEL_27:
          *v36 = v35;
          v36[1] = (uint64_t)v34;
          v40 = v36 + 2;
        }
        else
        {
          v37 = ((char *)v240 - (_BYTE *)__p) >> 4;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 60)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v39 = (char *)v241 - (_BYTE *)__p;
          if (((char *)v241 - (_BYTE *)__p) >> 3 > v38)
            v38 = v39 >> 3;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
            v6 = 0xFFFFFFFFFFFFFFFLL;
          else
            v6 = v38;
          if (v6)
            AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v241, v6);
          else
            AttributeValue = 0;
          v98 = (uint64_t *)(AttributeValue + 16 * v37);
          *v98 = v35;
          v98[1] = (uint64_t)v34;
          v106 = (char *)__p;
          v99 = (char *)v240;
          v101 = v98;
          if (v240 != __p)
          {
            do
            {
              *((_OWORD *)v101 - 1) = *((_OWORD *)v99 - 1);
              v101 -= 2;
              v99 -= 16;
            }
            while (v99 != v106);
LABEL_140:
            v99 = (char *)__p;
          }
LABEL_141:
          v40 = v98 + 2;
          __p = v101;
          v240 = v98 + 2;
          v241 = (uint64_t *)(AttributeValue + 16 * v6);
          if (v99)
            operator delete(v99);
        }
        v4 = (uint64_t)&v25[v27 + 1];
LABEL_144:
        v240 = v40;
LABEL_178:
        if (v237 <= (v4 - (uint64_t)v238) >> 2)
        {
LABEL_440:
          if (*(_QWORD *)&__src[0])
          {
            v213 = 0;
            while (*((_QWORD *)__src + v213++))
              ;
            v215 = 8 * v213;
            if (v213 >> 61)
              v216 = -1;
            else
              v216 = 8 * v213;
            v217 = v2;
            v218 = TAllocator::allocate(*((TAllocator **)v2 + 52), v216);
            memcpy(v218, __src, v215);
            *(_QWORD *)v217 = v218;
          }
          goto LABEL_447;
        }
        continue;
      case 2:
        v20 = v4 + 4;
        v21 = v240;
        if (v240 >= v241)
        {
          v58 = ((char *)v240 - (_BYTE *)__p) >> 4;
          v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 60)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v60 = (char *)v241 - (_BYTE *)__p;
          if (((char *)v241 - (_BYTE *)__p) >> 3 > v59)
            v59 = v60 >> 3;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0)
            v61 = 0xFFFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          if (v61)
            v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v241, v61);
          else
            v62 = 0;
          v90 = &v62[16 * v58];
          *(_QWORD *)v90 = 1;
          *((_QWORD *)v90 + 1) = v20;
          v92 = (char *)__p;
          v91 = (char *)v240;
          v93 = v90;
          if (v240 != __p)
          {
            do
            {
              *((_OWORD *)v93 - 1) = *((_OWORD *)v91 - 1);
              v93 -= 16;
              v91 -= 16;
            }
            while (v91 != v92);
            v91 = (char *)__p;
          }
          v22 = (uint64_t *)(v90 + 16);
          __p = v93;
          v240 = (uint64_t *)(v90 + 16);
          v241 = (uint64_t *)&v62[16 * v61];
          if (v91)
            operator delete(v91);
        }
        else
        {
          *v240 = 1;
          v21[1] = v20;
          v22 = v21 + 2;
        }
        v240 = v22;
        AttributeValue = wcslen((const __int32 *)v4);
        v4 += 4 * AttributeValue + 4;
        goto LABEL_178;
      case 3:
        v41 = *(v240 - 2);
        v42 = (unsigned int *)*(v240 - 1);
        v240 -= 2;
        v43 = (const __int32 *)*(v240 - 1);
        v44 = *(v240 - 2);
        v240 -= 2;
        v45 = *(unsigned int *)(v4 + 4);
        if (v44 > 1)
        {
          v46 = v43 != 0;
          if (v41 == 1)
          {
            v47 = *v42 == 0;
            goto LABEL_150;
          }
LABEL_149:
          v47 = v42 == 0;
LABEL_150:
          v107 = !v47;
          switch((int)v45)
          {
            case 10:
            case 16:
              if (v46 != v107)
                v89 = (__int32 *)&unk_209A58BD8;
              else
                v89 = (__int32 *)&unk_209A58BE0;
              goto LABEL_160;
            case 11:
            case 17:
              if (v46 != v107)
                v89 = (__int32 *)&unk_209A58BE0;
              else
                v89 = (__int32 *)&unk_209A58BD8;
              goto LABEL_160;
            default:
              tknPrintf("Error: invalid operator used on objects\n", v6, v7, v8, v9);
              goto LABEL_451;
          }
        }
        if (v41 >= 2)
        {
          if (v44 == 1)
            v63 = *v43 == 0;
          else
            v63 = v43 == 0;
          v46 = !v63;
          goto LABEL_149;
        }
        v84 = (TAllocator *)*((_QWORD *)v2 + 52);
        switch((int)v45)
        {
          case 1:
            v242 = 0;
            if ((v85 & 1) == 0
            {
              v212 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v212);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v212;
            }
            v86 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v42, (unsigned int **)&v242);
            AttributeValue = wcslen(v43);
            v87 = v86 - AttributeValue;
            if (v86 > AttributeValue)
            {
              v88 = TAllocator::allocate(v84, 4 * v86 + 4);
              memset_pattern16(v88, "0", 4 * v87);
              AttributeValue = (unint64_t)wcscpy((__int32 *)v88 + v87, v43);
              v43 = (const __int32 *)v88;
            }
            v89 = (__int32 *)v43;
            goto LABEL_160;
          case 2:
            v117 = wcslen(v43);
            v118 = v117 + wcslen((const __int32 *)v42) + 1;
            if (v118 >> 62)
              v119 = -1;
            else
              v119 = 4 * v118;
            v89 = (__int32 *)TAllocator::allocate(v84, v119);
            wcscpy(v89, v43);
            AttributeValue = (unint64_t)wcscpy(&v89[v117], (const __int32 *)v42);
            goto LABEL_160;
          case 14:
            AttributeValue = wcscmp(v43, (const __int32 *)v42);
            if ((int)AttributeValue <= 0)
              v89 = (__int32 *)&unk_209A58BD8;
            else
              v89 = (__int32 *)&unk_209A58BE0;
            goto LABEL_160;
          case 15:
            AttributeValue = wcscmp(v43, (const __int32 *)v42);
            v120 = (AttributeValue & 0x80000000) != 0;
            goto LABEL_197;
          case 16:
            AttributeValue = wcscmp(v43, (const __int32 *)v42);
            if ((_DWORD)AttributeValue)
              v89 = (__int32 *)&unk_209A58BD8;
            else
              v89 = (__int32 *)&unk_209A58BE0;
            goto LABEL_160;
          case 17:
            AttributeValue = wcscmp(v43, (const __int32 *)v42);
LABEL_182:
            if ((_DWORD)AttributeValue)
              v89 = (__int32 *)&unk_209A58BE0;
            else
              v89 = (__int32 *)&unk_209A58BD8;
            goto LABEL_160;
          case 18:
            AttributeValue = wcscmp(v43, (const __int32 *)v42);
            v120 = (int)AttributeValue < 1;
LABEL_197:
            if (v120)
              v89 = (__int32 *)&unk_209A58BE0;
            else
              v89 = (__int32 *)&unk_209A58BD8;
            goto LABEL_160;
          case 19:
            AttributeValue = wcscmp(v43, (const __int32 *)v42);
            if ((AttributeValue & 0x80000000) != 0)
              v89 = (__int32 *)&unk_209A58BD8;
            else
              v89 = (__int32 *)&unk_209A58BE0;
            goto LABEL_160;
          default:
            goto LABEL_211;
        }
        do
        {
LABEL_211:
          v125 = v43;
          v126 = *v43;
          if (!*v43)
            break;
          ++v43;
          if (!v125[1])
            break;
          if ((v127 & 1) == 0
          {
            v124 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v124);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v124;
          }
          AttributeValue = v126 - 48;
          if ((int)v126 < 48)
            break;
          if (v126 > 0x39)
          {
            if (v126 < 0x660)
              break;
            AttributeValue = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v126);
          }
        }
        while (!(_DWORD)AttributeValue);
        v128 = 0;
        for (i = 0; ; ++i)
        {
          v130 = v125[i];
          if ((v131 & 1) == 0)
          {
            if ((_DWORD)AttributeValue)
            {
              v132 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v132);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v132;
            }
          }
          if ((int)v130 < 48)
            break;
          if (v130 >= 0x3A)
          {
            if (v130 < 0x660)
              break;
            AttributeValue = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v130);
            if ((_DWORD)AttributeValue == -1)
              break;
          }
          ++v128;
        }
        v232 = v128;
        if (i <= 1)
          v133 = 1;
        else
          v133 = i;
        v134 = (__int32 *)&unk_209A58BD8;
        if ((_DWORD)i)
          v134 = (__int32 *)v125;
        v233 = v134;
        do
        {
          v135 = v42;
          v136 = *v42;
          if (!*v42)
            break;
          ++v42;
          if (!v135[1])
            break;
          if ((v137 & 1) == 0
          {
            v138 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v138);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v138;
          }
          AttributeValue = (v136 - 48);
          if (v136 < 48)
            break;
          if (v136 > 0x39)
          {
            if (v136 < 0x660)
              break;
            AttributeValue = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v136);
          }
        }
        while (!(_DWORD)AttributeValue);
        v139 = 0;
        for (j = 0; ; ++j)
        {
          v141 = v135[j];
          if ((v142 & 1) == 0)
          {
            if ((_DWORD)AttributeValue)
            {
              v235 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v235);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v235;
            }
          }
          if ((int)v141 < 48)
            break;
          if (v141 >= 0x3A)
          {
            if (v141 < 0x660)
              break;
            AttributeValue = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v141);
            if ((_DWORD)AttributeValue == -1)
              break;
          }
          ++v139;
        }
        v143 = (const __int32 *)&unk_209A58BD8;
        if ((_DWORD)j)
          v143 = (const __int32 *)v135;
        v236 = (__int32 *)v143;
        if (j <= 1)
          v144 = 1;
        else
          v144 = j;
        break;
      case 4:
        v18 = *(int *)(v4 + 12);
        if ((_DWORD)v18)
          v19 = (char *)__p + 16 * (((unint64_t)((char *)v240 - (_BYTE *)__p) >> 4) - v18);
        else
          v19 = 0;
        v76 = (*(uint64_t (**)(char *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v4 + 4) + 24))(v19, *(int *)(v4 + 12), *(_QWORD *)(*(_QWORD *)(v4 + 4) + 48), *(_QWORD *)(*(_QWORD *)(v4 + 4) + 56), *((_QWORD *)v2 + 52));
        if (!v76)
          goto LABEL_451;
        v77 = v75;
        std::vector<TGrammarCompiler::TArgument>::resize((uint64_t)&__p, (((char *)v240 - (_BYTE *)__p) >> 4) - v18);
        v4 += 16;
        v78 = v240;
        if (v240 < v241)
        {
          *v240 = v76;
          v78[1] = v77;
          v79 = v78 + 2;
          goto LABEL_101;
        }
        v80 = ((char *)v240 - (_BYTE *)__p) >> 4;
        v81 = v80 + 1;
        if ((unint64_t)(v80 + 1) >> 60)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v82 = (char *)v241 - (_BYTE *)__p;
        if (((char *)v241 - (_BYTE *)__p) >> 3 > v81)
          v81 = v82 >> 3;
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0)
          v6 = 0xFFFFFFFFFFFFFFFLL;
        else
          v6 = v81;
        if (v6)
          AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v241, v6);
        else
          AttributeValue = 0;
        v102 = (uint64_t *)(AttributeValue + 16 * v80);
        *v102 = v76;
        v102[1] = v77;
        v104 = (char *)__p;
        v103 = (char *)v240;
        v105 = v102;
        if (v240 != __p)
        {
          do
          {
            *((_OWORD *)v105 - 1) = *((_OWORD *)v103 - 1);
            v105 -= 2;
            v103 -= 16;
          }
          while (v103 != v104);
          v103 = (char *)__p;
        }
        v40 = v102 + 2;
        __p = v105;
        v240 = v102 + 2;
        v241 = (uint64_t *)(AttributeValue + 16 * v6);
        if (v103)
          operator delete(v103);
        goto LABEL_144;
      case 5:
        v48 = (const __int32 *)(v4 + 4);
        v49 = wcslen(v48);
        v50 = v240 - 2;
        v51 = v2;
        v52 = (TAllocator *)*((_QWORD *)v2 + 52);
        v53 = *(const __int32 ***)&__src[0];
        if (*(_QWORD *)&__src[0])
        {
          v54 = 0;
          do
          {
            AttributeValue = wcscmp(*v53, v48);
            if (!(_DWORD)AttributeValue)
            {
              *(_OWORD *)(*((_QWORD *)__src + v54) + 8) = *(_OWORD *)v50;
LABEL_100:
              v2 = v51;
              v4 = (uint64_t)&v48[v49 + 1];
              v79 = v240 - 2;
LABEL_101:
              v240 = v79;
              goto LABEL_178;
            }
            v55 = v54 + 1;
            v53 = (const __int32 **)*((_QWORD *)__src + ++v54);
          }
          while (v53);
        }
        else
        {
          v55 = 0;
        }
        AttributeValue = (unint64_t)TAllocator::allocate(v52, 24);
        *(_QWORD *)AttributeValue = v48;
        v83 = (unint64_t *)__src + v55;
        *(_OWORD *)(AttributeValue + 8) = *(_OWORD *)v50;
        *v83 = AttributeValue;
        v83[1] = 0;
        goto LABEL_100;
      case 6:
        v25 = (__int32 *)(v4 + 4);
        v27 = wcslen(v25);
        AttributeValue = getAttributeValue(v25, (const __int32 ***)__src, 0);
        v35 = AttributeValue;
        v34 = (void *)v6;
        v36 = v240;
        if (v240 < v241)
          goto LABEL_27;
        v67 = ((char *)v240 - (_BYTE *)__p) >> 4;
        v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 60)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v69 = (char *)v241 - (_BYTE *)__p;
        if (((char *)v241 - (_BYTE *)__p) >> 3 > v68)
          v68 = v69 >> 3;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
          v6 = 0xFFFFFFFFFFFFFFFLL;
        else
          v6 = v68;
        if (v6)
          AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v241, v6);
        else
          AttributeValue = 0;
        v98 = (uint64_t *)(AttributeValue + 16 * v67);
        *v98 = v35;
        v98[1] = (uint64_t)v34;
        v100 = (char *)__p;
        v99 = (char *)v240;
        v101 = v98;
        if (v240 == __p)
          goto LABEL_141;
        do
        {
          *((_OWORD *)v101 - 1) = *((_OWORD *)v99 - 1);
          v101 -= 2;
          v99 -= 16;
        }
        while (v99 != v100);
        goto LABEL_140;
      case 7:
        v240 -= 2;
        v4 += 4;
        goto LABEL_178;
      case 8:
        goto LABEL_39;
      case 9:
      case 0xA:
        if (*(v240 - 2) == 1)
        {
          v242 = 0;
          v11 = (unsigned int *)*(v240 - 1);
          if ((v12 & 1) == 0
          {
            v121 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v121);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v121;
          }
          AttributeValue = TLocaleInfo::stringToInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, (unsigned int **)&v242);
          v13 = AttributeValue != 0;
          v10 = *(_DWORD *)v4;
        }
        else
        {
          v13 = *(v240 - 1) != 0;
        }
        if (v13 == (v10 != 10))
          goto LABEL_177;
LABEL_39:
        v4 += 4 * *(int *)(v4 + 4);
        goto LABEL_178;
      case 0xB:
        goto LABEL_451;
      case 0xC:
        v14 = v240;
        if (*(v240 - 2) == 1)
        {
          v242 = 0;
          v15 = (unsigned int *)*(v240 - 1);
          if ((v16 & 1) == 0
          {
            v123 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v123);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v123;
          }
          AttributeValue = TLocaleInfo::stringToInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v15, (unsigned int **)&v242);
          v17 = (int)AttributeValue;
          v14 = v240;
        }
        else
        {
          v17 = *(v240 - 1) != 0;
        }
        v56 = v14 - 2;
        v240 = v14 - 2;
        if (v17)
          v57 = &unk_209A58BD8;
        else
          v57 = &unk_209A58BE0;
        if (v56 >= v241)
        {
          v64 = ((char *)v56 - (_BYTE *)__p) >> 4;
          v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 60)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v66 = (char *)v241 - (_BYTE *)__p;
          if (((char *)v241 - (_BYTE *)__p) >> 3 > v65)
            v65 = v66 >> 3;
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
            v6 = 0xFFFFFFFFFFFFFFFLL;
          else
            v6 = v65;
          if (v6)
            AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v241, v6);
          else
            AttributeValue = 0;
          v94 = (_QWORD *)(AttributeValue + 16 * v64);
          *v94 = 1;
          v94[1] = v57;
          v96 = (char *)__p;
          v95 = (char *)v240;
          v97 = (char *)v94;
          if (v240 != __p)
          {
            do
            {
              *((_OWORD *)v97 - 1) = *((_OWORD *)v95 - 1);
              v97 -= 16;
              v95 -= 16;
            }
            while (v95 != v96);
            v95 = (char *)__p;
          }
          v14 = v94 + 2;
          __p = v97;
          v240 = v94 + 2;
          v241 = (uint64_t *)(AttributeValue + 16 * v6);
          if (v95)
            operator delete(v95);
        }
        else
        {
          *(v14 - 2) = 1;
          *(v14 - 1) = (uint64_t)v57;
        }
        v240 = v14;
        goto LABEL_177;
      default:
        goto LABEL_178;
    }
    break;
  }
  switch((int)v45)
  {
    case 3:
      v145 = v45;
      v146 = *v233;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      v147 = v146 - 48;
      if ((int)v146 < 48)
        goto LABEL_265;
      if (v146 <= 0x39)
        goto LABEL_264;
      if (v146 >= 0x660)
      {
        AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v146);
        v147 = AttributeValue;
LABEL_264:
        if (!v147)
          goto LABEL_323;
      }
LABEL_265:
      v148 = *v236;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      v149 = v148 - 48;
      if ((int)v148 < 48)
        goto LABEL_270;
      if (v148 <= 0x39)
        goto LABEL_269;
      if (v148 >= 0x660)
      {
        AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v148);
        v149 = AttributeValue;
LABEL_269:
        if (!v149)
          goto LABEL_323;
      }
LABEL_270:
      v150 = *v236;
      GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      v152 = v150 - 48;
      if ((int)v150 < 48)
        goto LABEL_285;
      if (v150 <= 0x39)
        goto LABEL_274;
      if (v150 < 0x660)
        goto LABEL_285;
      GlobalLocaleInfo = TLocaleInfo::getDigitExtended(GlobalLocaleInfo, v150);
      v152 = GlobalLocaleInfo;
LABEL_274:
      if (v152 != 1)
        goto LABEL_285;
      v153 = (unsigned int *)(v236 + 1);
      do
      {
        v154 = v153;
        v155 = *v153;
        v156 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)GlobalLocaleInfo);
        GlobalLocaleInfo = v155 - 48;
        if ((int)v155 < 48)
          break;
        if (v155 > 0x39)
        {
          if (v155 < 0x660)
            break;
          GlobalLocaleInfo = TLocaleInfo::getDigitExtended(v156, v155);
        }
        v153 = v154 + 1;
      }
      while (!(_DWORD)GlobalLocaleInfo);
      v157 = *v154;
      GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)GlobalLocaleInfo);
      if ((int)v157 < 48
        || v157 >= 0x3A
        && (v157 < 0x660
         || (GlobalLocaleInfo = TLocaleInfo::getDigitExtended(GlobalLocaleInfo, v157), (_DWORD)GlobalLocaleInfo == -1)))
      {
        v190 = v144 + v133;
        v89 = (__int32 *)TAllocator::allocate(v84, 4 * (v144 + v133));
        AttributeValue = (unint64_t)wcsncpy(v89, v233, v133);
        if ((_DWORD)v144 != 1)
        {
          if (v139 <= 1)
            v191 = 1;
          else
            v191 = v139;
          v192 = (v191 - 1);
          v193 = v232;
          if (v232 <= 1)
            v193 = 1;
          do
          {
            v89[v193++] = 48;
            --v192;
          }
          while (v192);
        }
        goto LABEL_419;
      }
LABEL_285:
      v158 = *v233;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)GlobalLocaleInfo);
      v159 = v158 - 48;
      if ((int)v158 < 48)
        goto LABEL_298;
      if (v158 <= 0x39)
        goto LABEL_289;
      if (v158 < 0x660)
        goto LABEL_298;
      AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v158);
      v159 = AttributeValue;
LABEL_289:
      if (v159 != 1)
      {
LABEL_298:
        v45 = v145;
        goto LABEL_391;
      }
      v160 = (unsigned int *)(v233 + 1);
      do
      {
        v161 = v160;
        v162 = *v160;
        v163 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
        AttributeValue = v162 - 48;
        if ((int)v162 < 48)
          break;
        if (v162 > 0x39)
        {
          if (v162 < 0x660)
            break;
          AttributeValue = TLocaleInfo::getDigitExtended(v163, v162);
        }
        v160 = v161 + 1;
      }
      while (!(_DWORD)AttributeValue);
      v164 = *v161;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      if ((int)v164 < 48)
        goto LABEL_412;
      if (v164 < 0x3A)
        goto LABEL_298;
      if (v164 < 0x660
        || (AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v164),
            v45 = v145,
            (_DWORD)AttributeValue == -1))
      {
LABEL_412:
        v190 = v144 + v133;
        v89 = (__int32 *)TAllocator::allocate(v84, 4 * (v144 + v133));
        AttributeValue = (unint64_t)wcsncpy(v89, v236, v144);
        if ((_DWORD)v133 != 1)
        {
          v203 = v232;
          if (v232 <= 1)
            v203 = 1;
          v204 = (v203 - 1);
          if (v139 <= 1)
            v205 = 1;
          else
            v205 = v139;
          do
          {
            v89[v205++] = 48;
            --v204;
          }
          while (v204);
        }
LABEL_419:
        v89[v190 - 1] = 0;
        goto LABEL_160;
      }
      goto LABEL_391;
    case 4:
      v165 = v133 - v144;
      if (v133 < v144
        || (_DWORD)v133 == (_DWORD)v144
        && (AttributeValue = wcsncmp(v233, v143, v133), (AttributeValue & 0x80000000) != 0))
      {
        AttributeValue = (unint64_t)TAllocator::allocate(v84, 8);
        v89 = (__int32 *)AttributeValue;
        *(_QWORD *)AttributeValue = 48;
        goto LABEL_160;
      }
      v181 = v45;
      v182 = *v236;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      v183 = v182 - 48;
      if ((int)v182 < 48)
        goto LABEL_370;
      if (v182 <= 0x39)
        goto LABEL_361;
      if (v182 < 0x660)
        goto LABEL_370;
      AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v182);
      v183 = AttributeValue;
LABEL_361:
      if (v183 != 1)
        goto LABEL_370;
      v184 = (unsigned int *)(v236 + 1);
      do
      {
        v185 = v184;
        v186 = *v184;
        v187 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
        AttributeValue = v186 - 48;
        if ((int)v186 < 48)
          break;
        if (v186 > 0x39)
        {
          if (v186 < 0x660)
            break;
          AttributeValue = TLocaleInfo::getDigitExtended(v187, v186);
        }
        v184 = v185 + 1;
      }
      while (!(_DWORD)AttributeValue);
      v188 = *v185;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      if ((int)v188 < 48)
        goto LABEL_431;
      if (v188 >= 0x3A)
      {
        if (v188 < 0x660
          || (AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v188),
              v45 = v181,
              (_DWORD)AttributeValue == -1))
        {
LABEL_431:
          v89 = (__int32 *)TAllocator::allocate(v84, 4 * (v165 + 2));
          AttributeValue = (unint64_t)wcsncpy(v89, v233, (v165 + 1));
          v89[v165 + 1] = 0;
          goto LABEL_160;
        }
      }
      else
      {
LABEL_370:
        v45 = v181;
      }
      goto LABEL_391;
    case 5:
      if (v133 < v144
        || (v231 = v45, (_DWORD)v133 == (_DWORD)v144)
        && (AttributeValue = wcsncmp(v233, v143, v133), (AttributeValue & 0x80000000) != 0))
      {
        v89 = v233;
        goto LABEL_160;
      }
      v166 = *v236;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      v167 = v166 - 48;
      if ((int)v166 < 48)
        goto LABEL_371;
      if (v166 <= 0x39)
        goto LABEL_330;
      if (v166 < 0x660)
        goto LABEL_371;
      AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v166);
      v167 = AttributeValue;
LABEL_330:
      if (v167 != 1)
      {
LABEL_371:
        if (j > 1 || v133 < 3)
          goto LABEL_391;
        v189 = *v236;
        AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
        if ((int)v189 > 47)
        {
          if (v189 <= 0x39)
          {
            AttributeValue = v189 - 48;
LABEL_386:
            switch((_DWORD)AttributeValue)
            {
              case 2:
                goto LABEL_389;
              case 4:
                v233 += (v133 - 2);
                v210 = *v233;
                AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
                v211 = v210 - 48;
                if ((int)v210 < 48)
                  goto LABEL_394;
                if (v210 > 0x39)
                {
                  if (v210 < 0x660)
                    goto LABEL_394;
                  AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v210);
                  v211 = AttributeValue;
                }
                v233 += v211 == 0;
                goto LABEL_394;
              case 5:
LABEL_389:
                v233 += (v133 - 1);
LABEL_394:
                v246[0] = 0;
                v194 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
                v195 = (TLocaleInfo *)TLocaleInfo::stringToUInt(v194, (unsigned int *)v233, (unsigned int **)v246);
                v196 = v195;
                v197 = TLocaleInfo::getGlobalLocaleInfo(v195);
                v198 = (TLocaleInfo *)TLocaleInfo::stringToUInt(v197, (unsigned int *)v236, (unsigned int **)v246);
                switch((int)v231)
                {
                  case 3:
                    v199 = v198 * (unint64_t)v196;
                    break;
                  case 4:
                    if (!(_DWORD)v198)
                      goto LABEL_451;
                    v199 = v196 / v198;
                    break;
                  case 5:
                    if (!(_DWORD)v198)
                      goto LABEL_451;
                    v199 = v196 % v198;
                    break;
                  case 6:
                    v199 = v198 + (unint64_t)v196;
                    break;
                  case 7:
                    if (v196 < v198)
                      goto LABEL_451;
                    v199 = v196 - (unint64_t)v198;
                    break;
                  default:
                    goto LABEL_451;
                }
                v242 = v244;
                v243 = xmmword_209A57DD0;
                v245 = 1;
                v200 = TLocaleInfo::getGlobalLocaleInfo(v198);
                TLocaleInfo::valueToString(v200, v199, (uint64_t)&v242, 0);
                if ((unint64_t)(*((_QWORD *)&v243 + 1) + 1) >> 62)
                  v201 = -1;
                else
                  v201 = 4 * (*((_QWORD *)&v243 + 1) + 1);
                v89 = (__int32 *)TAllocator::allocate(v84, v201);
                v202 = (const __int32 *)TBuffer<wchar_t>::c_str((uint64_t)&v242);
                AttributeValue = (unint64_t)wcscpy(v89, v202);
                if (v245)
                {
                  AttributeValue = (unint64_t)v242;
                  if (v242 != v244)
                  {
                    if (v242)
                      AttributeValue = MEMORY[0x20BD149A8]();
                  }
                }
                goto LABEL_160;
            }
            goto LABEL_390;
          }
          if (v189 > 0x65F)
          {
            AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v189);
            goto LABEL_386;
          }
        }
LABEL_390:
        LODWORD(v133) = i;
        goto LABEL_391;
      }
      v168 = (unsigned int *)(v236 + 1);
      do
      {
        v169 = v168;
        v170 = *v168;
        v171 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
        AttributeValue = v170 - 48;
        if ((int)v170 < 48)
          break;
        if (v170 > 0x39)
        {
          if (v170 < 0x660)
            break;
          AttributeValue = TLocaleInfo::getDigitExtended(v171, v170);
        }
        v168 = v169 + 1;
      }
      while (!(_DWORD)AttributeValue);
      v172 = *v169;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      v45 = v231;
      if ((int)v172 < 48
        || v172 >= 0x3A
        && (v172 < 0x660
         || (AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v172),
             v45 = v231,
             (_DWORD)AttributeValue == -1)))
      {
        if ((_DWORD)v144 == 1)
        {
LABEL_323:
          v89 = (__int32 *)&unk_209A58BD8;
        }
        else
        {
          v173 = 0;
          if (v139 <= 1)
            v174 = 1;
          else
            v174 = v139;
          v175 = v174 - 1;
          v176 = 4 * (v174 - 1);
          v177 = v232;
          if (v232 <= 1uLL)
            v177 = 1;
          v178 = (uint64_t)&v233[v177 - v175];
          while (1)
          {
            v179 = *(_DWORD *)(v178 + 4 * v173);
            AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
            v180 = v179 - 48;
            if ((int)v179 < 48)
              break;
            if (v179 > 0x39)
            {
              if (v179 < 0x660)
                break;
              AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v179);
              v180 = AttributeValue;
            }
            if (v180)
              break;
            ++v173;
            v176 -= 4;
            v89 = (__int32 *)&unk_209A58BD8;
            if (v175 == (_DWORD)v173)
              goto LABEL_160;
          }
          v206 = v139;
          if (v139 <= 1uLL)
            v206 = 1;
          if (v232 <= 1uLL)
            v207 = 1;
          else
            v207 = v232;
          v208 = (__int32 *)TAllocator::allocate(v84, 4 * (v206 - v173));
          v89 = v208;
          if (v139 <= 1)
            v209 = 1;
          else
            v209 = v139;
          AttributeValue = (unint64_t)wcsncpy(v208, &v233[v207 + v176 / 0xFFFFFFFFFFFFFFFCLL], (v209 - 1) - v173);
          v89[(unint64_t)v176 / 4] = 0;
        }
LABEL_160:
        v108 = v240;
        if (v240 >= v241)
        {
          v110 = ((char *)v240 - (_BYTE *)__p) >> 4;
          v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) >> 60)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v112 = (char *)v241 - (_BYTE *)__p;
          if (((char *)v241 - (_BYTE *)__p) >> 3 > v111)
            v111 = v112 >> 3;
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF0)
            v6 = 0xFFFFFFFFFFFFFFFLL;
          else
            v6 = v111;
          if (v6)
            AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v241, v6);
          else
            AttributeValue = 0;
          v113 = (_QWORD *)(AttributeValue + 16 * v110);
          *v113 = 1;
          v113[1] = v89;
          v115 = (char *)__p;
          v114 = (char *)v240;
          v116 = (char *)v113;
          if (v240 != __p)
          {
            do
            {
              *((_OWORD *)v116 - 1) = *((_OWORD *)v114 - 1);
              v116 -= 16;
              v114 -= 16;
            }
            while (v114 != v115);
            v114 = (char *)__p;
          }
          v109 = v113 + 2;
          __p = v116;
          v240 = v113 + 2;
          v241 = (uint64_t *)(AttributeValue + 16 * v6);
          if (v114)
            operator delete(v114);
        }
        else
        {
          *v240 = 1;
          v108[1] = (uint64_t)v89;
          v109 = v108 + 2;
        }
        v240 = v109;
LABEL_177:
        v4 += 8;
        goto LABEL_178;
      }
LABEL_391:
      if (v133 >= 0xA)
      {
        v219 = v45;
        loggableUnicode((unsigned int *)v233, &v242);
        v220 = v2;
        v221 = SHIBYTE(v243);
        v222 = (void **)v242;
        loggableUnicode((unsigned int *)v236, v246);
        v227 = &v242;
        if (v221 < 0)
          v227 = v222;
        if (v247 >= 0)
          v228 = v246;
        else
          v228 = (void **)v246[0];
      }
      else
      {
        if (v144 < 0xA)
        {
          LODWORD(v231) = v45;
          goto LABEL_394;
        }
        v219 = v45;
        loggableUnicode((unsigned int *)v233, &v242);
        v220 = v2;
        v229 = SHIBYTE(v243);
        v230 = (void **)v242;
        loggableUnicode((unsigned int *)v236, v246);
        v227 = &v242;
        if (v229 < 0)
          v227 = v230;
        if (v247 >= 0)
          v228 = v246;
        else
          v228 = (void **)v246[0];
      }
      tknPrintf("Warning: (%s,%s,%llu)  : Operand out of bounds, overflow\n", v223, v224, v225, v226, v227, v228, v219);
      v2 = v220;
      if (v247 < 0)
        operator delete(v246[0]);
      if (SHIBYTE(v243) < 0)
        operator delete(v242);
LABEL_451:
      *((_BYTE *)v2 + 424) = 1;
LABEL_447:
      if (__p)
      {
        v240 = (uint64_t *)__p;
        operator delete(__p);
      }
      return;
    case 8:
      v89 = (__int32 *)&unk_209A58BE0;
      if (v133 <= v144)
      {
        if ((_DWORD)v133 != (_DWORD)v144)
          goto LABEL_323;
        AttributeValue = wcsncmp(v233, v143, v133);
        if ((int)AttributeValue <= 0)
          goto LABEL_323;
      }
      goto LABEL_160;
    case 9:
      v89 = (__int32 *)&unk_209A58BE0;
      if (v133 < v144)
        goto LABEL_160;
      if ((_DWORD)v133 == (_DWORD)v144)
      {
        AttributeValue = wcsncmp(v233, v143, v133);
        if ((AttributeValue & 0x80000000) != 0)
          goto LABEL_160;
      }
      goto LABEL_323;
    case 10:
      if ((_DWORD)v133 != (_DWORD)v144)
        goto LABEL_323;
      AttributeValue = wcsncmp(v233, v143, v133);
      if ((_DWORD)AttributeValue)
        goto LABEL_323;
      v89 = (__int32 *)&unk_209A58BE0;
      goto LABEL_160;
    case 11:
      v89 = (__int32 *)&unk_209A58BE0;
      if ((_DWORD)v133 != (_DWORD)v144)
        goto LABEL_160;
      AttributeValue = wcsncmp(v233, v143, v133);
      goto LABEL_182;
    case 12:
      v89 = (__int32 *)&unk_209A58BE0;
      if (v133 < v144)
        goto LABEL_160;
      if ((_DWORD)v133 == (_DWORD)v144)
      {
        AttributeValue = wcsncmp(v233, v143, v133);
        if ((int)AttributeValue < 1)
          goto LABEL_160;
      }
      goto LABEL_323;
    case 13:
      v89 = (__int32 *)&unk_209A58BE0;
      if (v133 <= v144)
      {
        if ((_DWORD)v133 != (_DWORD)v144)
          goto LABEL_323;
        AttributeValue = wcsncmp(v233, v143, v133);
        if ((AttributeValue & 0x80000000) != 0)
          goto LABEL_323;
      }
      goto LABEL_160;
    default:
      goto LABEL_391;
  }
}

void sub_20979E5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (SLOBYTE(STACK[0x4BF]) < 0)
    operator delete((void *)STACK[0x4A8]);
  if (a31 < 0)
    operator delete(a26);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void std::vector<TGrammarCompiler::TArgument>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<TGrammarCompiler::TArgument>::__append((void **)a1, a2 - v2);
  }
}

_QWORD *TGrammarCompiler::makeClientData(uint64_t *a1, __int128 *a2, uint64_t a3, TAllocator *this)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;

  if ((unint64_t)(a3 + 1) >> 61)
    v8 = -1;
  else
    v8 = 8 * (a3 + 1);
  v9 = TAllocator::allocate(this, v8);
  v10 = v9;
  if (a3)
  {
    v11 = v9;
    v12 = a3;
    do
    {
      v13 = TAllocator::allocate(this, 24);
      v14 = *a1++;
      *v13 = v14;
      v15 = *a2++;
      *(_OWORD *)(v13 + 1) = v15;
      *v11++ = v13;
      --v12;
    }
    while (v12);
  }
  v10[a3] = 0;
  return v10;
}

_QWORD *TFunctionDescr::TFunctionDescr(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  MEMORY[0x20BD147A4]();
  a1[3] = a3;
  a1[4] = a4;
  a1[5] = a5;
  a1[6] = a6;
  a1[7] = a7;
  return a1;
}

void sub_20979E8A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t compileInstruction(TLexer *a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *Token;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  void **v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  _QWORD *exception;
  std::string *v114;
  const char *v115;
  _QWORD *v116;
  std::string *v117;
  const char *v118;
  _QWORD *v119;
  std::string *v120;
  const char *v121;
  _QWORD *v122;
  std::string *v123;
  const char *v124;
  _QWORD *v125;
  std::string *v126;
  const char *v127;
  _QWORD *v128;
  std::string *v129;
  const char *v130;
  _QWORD *v131;
  std::string *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  void *v140[2];
  uint64_t v141;
  _BYTE __p[24];
  uint64_t v143;

  Token = (uint64_t *)nextToken(a1, (uint64_t)a2, a3, (uint64_t)a4, a5);
  v13 = *Token;
  if (*Token > 17)
  {
    if (v13 != 20)
    {
      if (v13 != 18)
      {
LABEL_40:
        loggableToken((uint64_t)a1);
        if (__p[23] >= 0)
          v64 = __p;
        else
          v64 = *(_BYTE **)__p;
        tknPrintf("Error: %sExpected an attribute or a condition\n", v60, v61, v62, v63, v64);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        std::string::basic_string[abi:ne180100]<0>(v140, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v141) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v140[0], (std::string::size_type)v140[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v140;
          v143 = v141;
        }
        *(_QWORD *)__p = &unk_24C215870;
        if (v143 >= 0)
          v112 = &__p[8];
        else
          v112 = *(const char **)&__p[8];
        conditionalAssert(v112, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 712, v65, v66);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v143) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v141) < 0)
          operator delete(v140[0]);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *exception = aPpx;
        v114 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v114, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v133 = *(_OWORD *)__p;
          exception[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v114->__r_.__value_.__l.__data_ = v133;
        }
        *exception = &unk_24C215870;
      }
      v16 = *((_QWORD *)a1 + 3);
      if (v16)
        *((_QWORD *)a1 + 3) = v16 - 1;
      nextToken(a1, (uint64_t)Token, v10, v11, v12);
      if (*(_QWORD *)nextToken(a1, v17, v18, v19, v20) != 6)
      {
        loggableToken((uint64_t)a1);
        if (__p[23] >= 0)
          v71 = __p;
        else
          v71 = *(_BYTE **)__p;
        tknPrintf("Error: %sExpected '(' after 'if'\n", v67, v68, v69, v70, v71);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        std::string::basic_string[abi:ne180100]<0>(v140, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v141) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v140[0], (std::string::size_type)v140[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v140;
          v143 = v141;
        }
        *(_QWORD *)__p = &unk_24C215870;
        if (v143 >= 0)
          v115 = &__p[8];
        else
          v115 = *(const char **)&__p[8];
        conditionalAssert(v115, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 566, v72, v73);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v143) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v141) < 0)
          operator delete(v140[0]);
        v116 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *v116 = aPpx;
        v117 = (std::string *)(v116 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v117, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v134 = *(_OWORD *)__p;
          v116[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v117->__r_.__value_.__l.__data_ = v134;
        }
        *v116 = &unk_24C215870;
      }
      compileExpression(a1, a2, a3, a4, v21);
      if (*(_QWORD *)nextToken(a1, v22, v23, v24, v25) != 7)
      {
        loggableToken((uint64_t)a1);
        if (__p[23] >= 0)
          v92 = __p;
        else
          v92 = *(_BYTE **)__p;
        tknPrintf("Error: %s() mismatch\n", v88, v89, v90, v91, v92);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        std::string::basic_string[abi:ne180100]<0>(v140, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v141) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v140[0], (std::string::size_type)v140[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v140;
          v143 = v141;
        }
        *(_QWORD *)__p = &unk_24C215870;
        if (v143 >= 0)
          v124 = &__p[8];
        else
          v124 = *(const char **)&__p[8];
        conditionalAssert(v124, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 577, v93, v94);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v143) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v141) < 0)
          operator delete(v140[0]);
        v125 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *v125 = aPpx;
        v126 = (std::string *)(v125 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v126, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v137 = *(_OWORD *)__p;
          v125[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v126->__r_.__value_.__l.__data_ = v137;
        }
        *v125 = &unk_24C215870;
      }
      *(_DWORD *)__p = 9;
      TBuffer<wchar_t>::insert((uint64_t)a2, a2[2], (int *)__p, 1uLL);
      v26 = a2[2];
      *(_DWORD *)__p = 0;
      TBuffer<wchar_t>::insert((uint64_t)a2, v26, (int *)__p, 1uLL);
      v31 = (_QWORD *)nextToken(a1, v27, v28, v29, v30);
      v32 = *((_QWORD *)a1 + 3);
      if (v32)
        *((_QWORD *)a1 + 3) = v32 - 1;
      if (*v31 == 14)
        compileCode(a1, a2, a3, a4);
      else
        compileInstruction(a1, a2, a3, a4);
      if (*(_QWORD *)nextToken(a1, v33, v34, v35, v36) == 19)
      {
        *(_DWORD *)__p = 8;
        TBuffer<wchar_t>::insert((uint64_t)a2, a2[2], (int *)__p, 1uLL);
        v52 = a2[2];
        *(_DWORD *)__p = 0;
        TBuffer<wchar_t>::insert((uint64_t)a2, v52, (int *)__p, 1uLL);
        *(_DWORD *)(*a2 + 4 * v26) = *((_DWORD *)a2 + 4) - v26 + 1;
        v57 = (_QWORD *)nextToken(a1, v53, v54, v55, v56);
        v58 = *((_QWORD *)a1 + 3);
        if (v58)
          *((_QWORD *)a1 + 3) = v58 - 1;
        if (*v57 == 14)
          compileCode(a1, a2, a3, a4);
        else
          compileInstruction(a1, a2, a3, a4);
        v51 = a2[2];
        *(_DWORD *)(*a2 + 4 * v52) = v51 - v52 + 1;
      }
      else
      {
        v51 = a2[2];
        *(_DWORD *)(*a2 + 4 * v26) = v51 - v26 + 1;
        v59 = *((_QWORD *)a1 + 3);
        if (v59)
          *((_QWORD *)a1 + 3) = v59 - 1;
      }
      *(_DWORD *)__p = 7;
      return TBuffer<wchar_t>::insert((uint64_t)a2, v51, (int *)__p, 1uLL);
    }
    if (*(_QWORD *)nextToken(a1, (uint64_t)Token, v10, v11, v12) != 10)
    {
      loggableToken((uint64_t)a1);
      if (__p[23] >= 0)
        v85 = __p;
      else
        v85 = *(_BYTE **)__p;
      tknPrintf("Error: %sMissing ';'\n", v81, v82, v83, v84, v85);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      std::string::basic_string[abi:ne180100]<0>(v140, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v141) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v140[0], (std::string::size_type)v140[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v140;
        v143 = v141;
      }
      *(_QWORD *)__p = &unk_24C215870;
      if (v143 >= 0)
        v121 = &__p[8];
      else
        v121 = *(const char **)&__p[8];
      conditionalAssert(v121, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 694, v86, v87);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v143) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v141) < 0)
        operator delete(v140[0]);
      v122 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *v122 = aPpx;
      v123 = (std::string *)(v122 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v123, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v136 = *(_OWORD *)__p;
        v122[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v123->__r_.__value_.__l.__data_ = v136;
      }
      *v122 = &unk_24C215870;
    }
    *(_DWORD *)__p = 11;
LABEL_27:
    v51 = a2[2];
    return TBuffer<wchar_t>::insert((uint64_t)a2, v51, (int *)__p, 1uLL);
  }
  if (v13 == 1)
  {
    v37 = *((_QWORD *)a1 + 3);
    if (v37)
      *((_QWORD *)a1 + 3) = v37 - 1;
    v38 = nextToken(a1, (uint64_t)Token, v10, v11, v12);
    *(_QWORD *)__p = *(_QWORD *)(v38 + 8);
    if (a3 + 8 != std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::find<wchar_t const*>(a3, (const __int32 **)__p))
    {
      loggableToken((uint64_t)a1);
      if (__p[23] >= 0)
        v78 = __p;
      else
        v78 = *(_BYTE **)__p;
      tknPrintf("Error: %sIllegal array assignment.\n", v74, v75, v76, v77, v78);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      std::string::basic_string[abi:ne180100]<0>(v140, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v141) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v140[0], (std::string::size_type)v140[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v140;
        v143 = v141;
      }
      *(_QWORD *)__p = &unk_24C215870;
      if (v143 >= 0)
        v118 = &__p[8];
      else
        v118 = *(const char **)&__p[8];
      conditionalAssert(v118, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 646, v79, v80);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v143) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v141) < 0)
        operator delete(v140[0]);
      v119 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *v119 = aPpx;
      v120 = (std::string *)(v119 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v120, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v135 = *(_OWORD *)__p;
        v119[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v120->__r_.__value_.__l.__data_ = v135;
      }
      *v119 = &unk_24C215870;
    }
    if (*(_QWORD *)nextToken(a1, v39, v40, v41, v42) != 11)
    {
      loggableToken((uint64_t)a1);
      v95 = __p[23];
      v96 = *(_BYTE **)__p;
      loggableUnicode(*(unsigned int **)(v38 + 8), v140);
      if (v95 >= 0)
        v101 = __p;
      else
        v101 = v96;
      if (v141 >= 0)
        v102 = v140;
      else
        v102 = (void **)v140[0];
      tknPrintf("Error: %sExpected '=' after %s\n", v97, v98, v99, v100, v101, v102);
      if (SHIBYTE(v141) < 0)
        operator delete(v140[0]);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      std::string::basic_string[abi:ne180100]<0>(v140, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v141) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v140[0], (std::string::size_type)v140[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v140;
        v143 = v141;
      }
      *(_QWORD *)__p = &unk_24C215870;
      if (v143 >= 0)
        v130 = &__p[8];
      else
        v130 = *(const char **)&__p[8];
      conditionalAssert(v130, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 654, v103, v104);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v143) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v141) < 0)
        operator delete(v140[0]);
      v131 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *v131 = aPpx;
      v132 = (std::string *)(v131 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v132, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v139 = *(_OWORD *)__p;
        v131[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v132->__r_.__value_.__l.__data_ = v139;
      }
      *v131 = &unk_24C215870;
    }
    compileExpression(a1, a2, a3, a4, v43);
    if (*(_QWORD *)nextToken(a1, v44, v45, v46, v47) != 10)
    {
      loggableToken((uint64_t)a1);
      if (__p[23] >= 0)
        v109 = __p;
      else
        v109 = *(_BYTE **)__p;
      tknPrintf("Error: %sMissing ';'\n", v105, v106, v107, v108, v109);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      std::string::basic_string[abi:ne180100]<0>(v140, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v141) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v140[0], (std::string::size_type)v140[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v140;
        v143 = v141;
      }
      *(_QWORD *)__p = &unk_24C215870;
      if (v143 >= 0)
        v127 = &__p[8];
      else
        v127 = *(const char **)&__p[8];
      conditionalAssert(v127, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 665, v110, v111);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v143) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v141) < 0)
        operator delete(v140[0]);
      v128 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *v128 = aPpx;
      v129 = (std::string *)(v128 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v129, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v138 = *(_OWORD *)__p;
        v128[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v129->__r_.__value_.__l.__data_ = v138;
      }
      *v128 = &unk_24C215870;
    }
    *(_DWORD *)__p = 5;
    TBuffer<wchar_t>::insert((uint64_t)a2, a2[2], (int *)__p, 1uLL);
    v48 = 0;
    v49 = *(int **)(v38 + 8);
    while (v49[v48++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)a2, a2[2], v49, v48 - 1);
    *(_DWORD *)__p = 0;
    goto LABEL_27;
  }
  if (v13 != 14)
    goto LABEL_40;
  v14 = *((_QWORD *)a1 + 3);
  if (v14)
    *((_QWORD *)a1 + 3) = v14 - 1;
  return compileCode(a1, a2, a3, a4);
}

void sub_20979F648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t compileExpression(TLexer *a1, _QWORD *Token, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int OperatorId;
  _BYTE *v21;
  int v22;
  uint64_t v24;
  int *v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const __int32 *v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  const __int32 *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  int *v79;
  uint64_t v82;
  int *v83;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  int v89;
  int v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  void **v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  void **v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  _QWORD *exception;
  std::string *v147;
  const char *v148;
  _QWORD *v149;
  std::string *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t v164;
  const char *v165;
  _QWORD *v166;
  std::string *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _BYTE *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _BYTE *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _BYTE *v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  const char *v212;
  _QWORD *v213;
  std::string *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _BYTE *v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  const char *v230;
  _QWORD *v231;
  std::string *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _BYTE *v237;
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  _QWORD *v241;
  std::string *v242;
  const char *v243;
  _QWORD *v244;
  std::string *v245;
  const char *v246;
  _QWORD *v247;
  std::string *v248;
  const char *v249;
  _QWORD *v250;
  std::string *v251;
  const char *v252;
  _QWORD *v253;
  std::string *v254;
  const char *v255;
  _QWORD *v256;
  std::string *v257;
  const char *v258;
  _QWORD *v259;
  std::string *v260;
  const char *v261;
  _QWORD *v262;
  std::string *v263;
  __int128 v264;
  const char *v265;
  _QWORD *v266;
  std::string *v267;
  const char *v268;
  _QWORD *v269;
  std::string *v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  const char *v274;
  _QWORD *v275;
  std::string *v276;
  const char *v277;
  _QWORD *v278;
  std::string *v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  const char *v287;
  _QWORD *v288;
  std::string *v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  uint64_t v294;
  uint64_t v295;
  char v297;
  uint64_t v298;
  void *__p[2];
  uint64_t v300;
  _BYTE v301[24];
  uint64_t v302;
  _BYTE v303[2048];
  uint64_t v304;

  v6 = Token;
  v8 = 0;
  v304 = *MEMORY[0x24BDAC8D0];
  do
  {
    v9 = &v303[v8];
    *(_DWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    v8 += 16;
  }
  while (v8 != 2048);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v294 = a3 + 8;
  while (2)
  {
    v297 = v10;
    while (1)
    {
      result = nextToken(a1, (uint64_t)Token, a3, (uint64_t)a4, a5);
      v18 = (_QWORD *)result;
      v19 = *(_QWORD *)result;
      if (*(_QWORD *)result != 5)
        break;
      if ((v11 & 1) == 0)
      {
        loggableToken((uint64_t)a1);
        if (v301[23] >= 0)
          v104 = v301;
        else
          v104 = *(_BYTE **)v301;
        tknPrintf("Error: %sExpected an operand\n", v100, v101, v102, v103, v104);
        if ((v301[23] & 0x80000000) != 0)
          operator delete(*(void **)v301);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)v301 = aPpx;
        if (SHIBYTE(v300) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&v301[8] = *(_OWORD *)__p;
          v302 = v300;
        }
        *(_QWORD *)v301 = &unk_24C215870;
        if (v302 >= 0)
          v145 = &v301[8];
        else
          v145 = *(const char **)&v301[8];
        conditionalAssert(v145, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 363, v105, v106);
        *(_QWORD *)v301 = aPpx;
        if (SHIBYTE(v302) < 0)
          operator delete(*(void **)&v301[8]);
        if (SHIBYTE(v300) < 0)
          operator delete(__p[0]);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
        *exception = aPpx;
        v147 = (std::string *)(exception + 1);
        if ((v301[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v147, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
        }
        else
        {
          v210 = *(_OWORD *)v301;
          exception[3] = *(_QWORD *)&v301[16];
          *(_OWORD *)&v147->__r_.__value_.__l.__data_ = v210;
        }
        *exception = &unk_24C215870;
      }
      OperatorId = getOperatorId(*(const __int32 **)(result + 8));
      v21 = &v303[16 * v12];
      if (v12 >= 1)
      {
        while (1)
        {
          v22 = *((_DWORD *)v21 - 4);
          if (v22 > OperatorId)
            break;
          if ((v22 & 0xFFFFFFFE) == 0x14)
          {
            *(_DWORD *)(*v6 + 4 * *((_QWORD *)v21 - 1) + 4) = *((_DWORD *)v6 + 4) - *((_QWORD *)v21 - 1);
          }
          else
          {
            *(_DWORD *)v301 = 3;
            TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
            *(_DWORD *)v301 = *((_DWORD *)v21 - 4);
            TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
          }
          v21 -= 16;
          if (v12-- <= 1)
          {
            v12 = 0;
            v21 = v303;
            break;
          }
        }
      }
      *(_DWORD *)v21 = OperatorId;
      Token = (_QWORD *)v6[2];
      *(_QWORD *)&v303[16 * v12 + 8] = Token;
      if (OperatorId == 20)
      {
        *(_DWORD *)v301 = 9;
        TBuffer<wchar_t>::insert((uint64_t)v6, (unint64_t)Token, (int *)v301, 1uLL);
        *(_DWORD *)v301 = 0;
        TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
        *(_DWORD *)v301 = 7;
        TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
      }
      else if (OperatorId == 21)
      {
        *(_DWORD *)v301 = 10;
        TBuffer<wchar_t>::insert((uint64_t)v6, (unint64_t)Token, (int *)v301, 1uLL);
        *(_DWORD *)v301 = 0;
        TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
        *(_DWORD *)v301 = 7;
        TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
      }
      if (v12 >= 127)
      {
        loggableToken((uint64_t)a1);
        if (v301[23] >= 0)
          v111 = v301;
        else
          v111 = *(_BYTE **)v301;
        tknPrintf("Error: %sExpression contains too many operators\n", v107, v108, v109, v110, v111);
        if ((v301[23] & 0x80000000) != 0)
          operator delete(*(void **)v301);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)v301 = aPpx;
        if (SHIBYTE(v300) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&v301[8] = *(_OWORD *)__p;
          v302 = v300;
        }
        *(_QWORD *)v301 = &unk_24C215870;
        if (v302 >= 0)
          v148 = &v301[8];
        else
          v148 = *(const char **)&v301[8];
        conditionalAssert(v148, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 411, v112, v113);
        *(_QWORD *)v301 = aPpx;
        if (SHIBYTE(v302) < 0)
          operator delete(*(void **)&v301[8]);
        if (SHIBYTE(v300) < 0)
          operator delete(__p[0]);
        v149 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
        *v149 = aPpx;
        v150 = (std::string *)(v149 + 1);
        if ((v301[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v150, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
        }
        else
        {
          v211 = *(_OWORD *)v301;
          v149[3] = *(_QWORD *)&v301[16];
          *(_OWORD *)&v150->__r_.__value_.__l.__data_ = v211;
        }
        *v149 = &unk_24C215870;
      }
      v11 = 0;
      ++v12;
    }
    switch(v19)
    {
      case 1:
        goto LABEL_30;
      case 2:
      case 4:
        if ((v11 & 1) != 0)
        {
          loggableToken((uint64_t)a1);
          if (v301[23] >= 0)
            v142 = v301;
          else
            v142 = *(_BYTE **)v301;
          tknPrintf("Error: %sExpected an operator\n", v138, v139, v140, v141, v142);
          if ((v301[23] & 0x80000000) != 0)
            operator delete(*(void **)v301);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *(_QWORD *)v301 = aPpx;
          if (SHIBYTE(v300) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v301[8] = *(_OWORD *)__p;
            v302 = v300;
          }
          *(_QWORD *)v301 = &unk_24C215870;
          if (v302 >= 0)
            v240 = &v301[8];
          else
            v240 = *(const char **)&v301[8];
          conditionalAssert(v240, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 350, v143, v144);
          *(_QWORD *)v301 = aPpx;
          if (SHIBYTE(v302) < 0)
            operator delete(*(void **)&v301[8]);
          if (SHIBYTE(v300) < 0)
            operator delete(__p[0]);
          v241 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
          *v241 = aPpx;
          v242 = (std::string *)(v241 + 1);
          if ((v301[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v242, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
          }
          else
          {
            v272 = *(_OWORD *)v301;
            v241[3] = *(_QWORD *)&v301[16];
            *(_OWORD *)&v242->__r_.__value_.__l.__data_ = v272;
          }
          *v241 = &unk_24C215870;
        }
        *(_DWORD *)v301 = 2;
        TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
        v24 = 0;
        v25 = (int *)v18[1];
        v26 = v6[2];
        while (v25[v24++])
          ;
        goto LABEL_25;
      case 3:
      case 5:
      case 7:
      case 8:
        goto LABEL_98;
      case 6:
        if ((v11 & 1) != 0)
        {
          loggableToken((uint64_t)a1);
          if (v301[23] >= 0)
            v193 = v301;
          else
            v193 = *(_BYTE **)v301;
          tknPrintf("Error: %sExpected an operator\n", v189, v190, v191, v192, v193);
          if ((v301[23] & 0x80000000) != 0)
            operator delete(*(void **)v301);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *(_QWORD *)v301 = aPpx;
          if (SHIBYTE(v300) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v301[8] = *(_OWORD *)__p;
            v302 = v300;
          }
          *(_QWORD *)v301 = &unk_24C215870;
          if (v302 >= 0)
            v258 = &v301[8];
          else
            v258 = *(const char **)&v301[8];
          conditionalAssert(v258, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 421, v194, v195);
          *(_QWORD *)v301 = aPpx;
          if (SHIBYTE(v302) < 0)
            operator delete(*(void **)&v301[8]);
          if (SHIBYTE(v300) < 0)
            operator delete(__p[0]);
          v259 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
          *v259 = aPpx;
          v260 = (std::string *)(v259 + 1);
          if ((v301[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v260, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
          }
          else
          {
            v284 = *(_OWORD *)v301;
            v259[3] = *(_QWORD *)&v301[16];
            *(_OWORD *)&v260->__r_.__value_.__l.__data_ = v284;
          }
          *v259 = &unk_24C215870;
        }
        compileExpression(a1, v6, a3, a4);
        Token = (_QWORD *)nextToken(a1, v35, v36, v37, v38);
        if (*Token != 7)
        {
          loggableToken((uint64_t)a1);
          if (v301[23] >= 0)
            v186 = v301;
          else
            v186 = *(_BYTE **)v301;
          tknPrintf("Error: %s() mismatch\n", v182, v183, v184, v185, v186);
          if ((v301[23] & 0x80000000) != 0)
            operator delete(*(void **)v301);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *(_QWORD *)v301 = aPpx;
          if (SHIBYTE(v300) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v301[8] = *(_OWORD *)__p;
            v302 = v300;
          }
          *(_QWORD *)v301 = &unk_24C215870;
          if (v302 >= 0)
            v255 = &v301[8];
          else
            v255 = *(const char **)&v301[8];
          conditionalAssert(v255, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 430, v187, v188);
          *(_QWORD *)v301 = aPpx;
          if (SHIBYTE(v302) < 0)
            operator delete(*(void **)&v301[8]);
          if (SHIBYTE(v300) < 0)
            operator delete(__p[0]);
          v256 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
          *v256 = aPpx;
          v257 = (std::string *)(v256 + 1);
          if ((v301[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v257, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
          }
          else
          {
            v283 = *(_OWORD *)v301;
            v256[3] = *(_QWORD *)&v301[16];
            *(_OWORD *)&v257->__r_.__value_.__l.__data_ = v283;
          }
          *v256 = &unk_24C215870;
        }
        goto LABEL_96;
      case 9:
        if ((v11 & 1) != 0)
        {
          loggableToken((uint64_t)a1);
          if (v301[23] >= 0)
            v179 = v301;
          else
            v179 = *(_BYTE **)v301;
          tknPrintf("Error: %sExpected an operator\n", v175, v176, v177, v178, v179);
          if ((v301[23] & 0x80000000) != 0)
            operator delete(*(void **)v301);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *(_QWORD *)v301 = aPpx;
          if (SHIBYTE(v300) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v301[8] = *(_OWORD *)__p;
            v302 = v300;
          }
          *(_QWORD *)v301 = &unk_24C215870;
          if (v302 >= 0)
            v252 = &v301[8];
          else
            v252 = *(const char **)&v301[8];
          conditionalAssert(v252, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 440, v180, v181);
          *(_QWORD *)v301 = aPpx;
          if (SHIBYTE(v302) < 0)
            operator delete(*(void **)&v301[8]);
          if (SHIBYTE(v300) < 0)
            operator delete(__p[0]);
          v253 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
          *v253 = aPpx;
          v254 = (std::string *)(v253 + 1);
          if ((v301[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v254, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
          }
          else
          {
            v282 = *(_OWORD *)v301;
            v253[3] = *(_QWORD *)&v301[16];
            *(_OWORD *)&v254->__r_.__value_.__l.__data_ = v282;
          }
          *v253 = &unk_24C215870;
        }
        v295 = nextToken(a1, v14, v15, v16, v17);
        if (*(_QWORD *)v295 != 1)
        {
          loggableToken((uint64_t)a1);
          if (v301[23] >= 0)
            v172 = v301;
          else
            v172 = *(_BYTE **)v301;
          tknPrintf("Error: %sExpected a function name after '$'\n", v168, v169, v170, v171, v172);
          if ((v301[23] & 0x80000000) != 0)
            operator delete(*(void **)v301);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *(_QWORD *)v301 = aPpx;
          if (SHIBYTE(v300) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v301[8] = *(_OWORD *)__p;
            v302 = v300;
          }
          *(_QWORD *)v301 = &unk_24C215870;
          if (v302 >= 0)
            v249 = &v301[8];
          else
            v249 = *(const char **)&v301[8];
          conditionalAssert(v249, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 447, v173, v174);
          *(_QWORD *)v301 = aPpx;
          if (SHIBYTE(v302) < 0)
            operator delete(*(void **)&v301[8]);
          if (SHIBYTE(v300) < 0)
            operator delete(__p[0]);
          v250 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
          *v250 = aPpx;
          v251 = (std::string *)(v250 + 1);
          if ((v301[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v251, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
          }
          else
          {
            v281 = *(_OWORD *)v301;
            v250[3] = *(_QWORD *)&v301[16];
            *(_OWORD *)&v251->__r_.__value_.__l.__data_ = v281;
          }
          *v250 = &unk_24C215870;
        }
        v298 = 0;
        v40 = *a4;
        v39 = a4[1];
        if (v39 == *a4)
          goto LABEL_108;
        v41 = 0;
        v42 = *(const __int32 **)(v295 + 8);
        while (2)
        {
          v43 = *(_QWORD *)(v40 + 8 * v41);
          v44 = wcslen(v42);
          v48 = v44;
          if (*(char *)(v43 + 23) < 0)
          {
            if (v44 != *(_QWORD *)(v43 + 8))
              goto LABEL_55;
            if (v44 == -1)
LABEL_134:
              std::wstring::__throw_out_of_range[abi:ne180100]();
            v49 = *(const __int32 **)v43;
            if (!v48)
            {
LABEL_58:
              v298 = *(_QWORD *)(v40 + 8 * v41);
              goto LABEL_60;
            }
          }
          else
          {
            if (v44 != *(unsigned __int8 *)(v43 + 23))
              goto LABEL_55;
            v49 = *(const __int32 **)(v40 + 8 * v41);
            if (v48 == -1)
              goto LABEL_134;
            if (!v48)
              goto LABEL_58;
          }
          v50 = wmemcmp(v49, v42, v48);
          v40 = *a4;
          if (v50)
          {
            v39 = a4[1];
LABEL_55:
            if (++v41 >= (unint64_t)((v39 - v40) >> 3))
            {
LABEL_108:
              v298 = 0;
LABEL_109:
              loggableToken((uint64_t)a1);
              v90 = v301[23];
              v91 = *(_BYTE **)v301;
              loggableUnicode(*(unsigned int **)(v295 + 8), __p);
              v96 = v301;
              if (v90 < 0)
                v96 = v91;
              if (v300 >= 0)
                v97 = __p;
              else
                v97 = (void **)__p[0];
              tknPrintf("Error: %s$%s : Invalid function name\n", v92, v93, v94, v95, v96, v97);
              if (SHIBYTE(v300) < 0)
                operator delete(__p[0]);
              if ((v301[23] & 0x80000000) != 0)
                operator delete(*(void **)v301);
              std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
              *(_QWORD *)v301 = aPpx;
              if (SHIBYTE(v300) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                *(_OWORD *)&v301[8] = *(_OWORD *)__p;
                v302 = v300;
              }
              *(_QWORD *)v301 = &unk_24C216908;
              if (v302 >= 0)
                v165 = &v301[8];
              else
                v165 = *(const char **)&v301[8];
              conditionalAssert(v165, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 454, v98, v99);
              *(_QWORD *)v301 = aPpx;
              if (SHIBYTE(v302) < 0)
                operator delete(*(void **)&v301[8]);
              if (SHIBYTE(v300) < 0)
                operator delete(__p[0]);
              v166 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
              *v166 = aPpx;
              v167 = (std::string *)(v166 + 1);
              if ((v301[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v167, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
              }
              else
              {
                v229 = *(_OWORD *)v301;
                v166[3] = *(_QWORD *)&v301[16];
                *(_OWORD *)&v167->__r_.__value_.__l.__data_ = v229;
              }
              *v166 = &unk_24C216908;
            }
            continue;
          }
          break;
        }
        v298 = *(_QWORD *)(v40 + 8 * v41);
        if (!v298)
          goto LABEL_109;
LABEL_60:
        if (*(_QWORD *)nextToken(a1, v45, v48, v46, v47) != 6)
        {
          v67 = *((_QWORD *)a1 + 3);
          if (v67)
          {
            v66 = 0;
            *((_QWORD *)a1 + 3) = v67 - 1;
            goto LABEL_75;
          }
LABEL_74:
          v66 = 0;
          goto LABEL_75;
        }
        v59 = *(_QWORD *)nextToken(a1, v55, v56, v57, v58);
        if (v59 == 7)
          goto LABEL_74;
        v60 = 0;
        do
        {
          if (v60)
          {
            if (v59 != 8)
            {
              loggableToken((uint64_t)a1);
              if (v301[23] >= 0)
                v118 = v301;
              else
                v118 = *(_BYTE **)v301;
              tknPrintf("Error: %sMissing ',' between function parameters\n", v114, v115, v116, v117, v118);
              if ((v301[23] & 0x80000000) != 0)
                operator delete(*(void **)v301);
              std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
              *(_QWORD *)v301 = aPpx;
              if (SHIBYTE(v300) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                *(_OWORD *)&v301[8] = *(_OWORD *)__p;
                v302 = v300;
              }
              *(_QWORD *)v301 = &unk_24C215870;
              if (v302 >= 0)
                v212 = &v301[8];
              else
                v212 = *(const char **)&v301[8];
              conditionalAssert(v212, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 480, v119, v120);
              *(_QWORD *)v301 = aPpx;
              if (SHIBYTE(v302) < 0)
                operator delete(*(void **)&v301[8]);
              if (SHIBYTE(v300) < 0)
                operator delete(__p[0]);
              v213 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
              *v213 = aPpx;
              v214 = (std::string *)(v213 + 1);
              if ((v301[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v214, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
              }
              else
              {
                v264 = *(_OWORD *)v301;
                v213[3] = *(_QWORD *)&v301[16];
                *(_OWORD *)&v214->__r_.__value_.__l.__data_ = v264;
              }
              *v213 = &unk_24C215870;
            }
          }
          else
          {
            v61 = *((_QWORD *)a1 + 3);
            if (v61)
              *((_QWORD *)a1 + 3) = v61 - 1;
          }
          compileExpression(a1, v6, a3, a4);
          v59 = *(_QWORD *)nextToken(a1, v62, v63, v64, v65);
          --v60;
        }
        while (v59 != 7);
        v66 = -v60;
LABEL_75:
        if (v66 < *(_QWORD *)(v298 + 32) || v66 > *(_QWORD *)(v298 + 40))
        {
          loggableToken((uint64_t)a1);
          v128 = v301[23];
          v129 = *(_BYTE **)v301;
          loggableUnicode(*(unsigned int **)(v295 + 8), __p);
          v134 = v301;
          if (v128 < 0)
            v134 = v129;
          if (v300 >= 0)
            v135 = __p;
          else
            v135 = (void **)__p[0];
          tknPrintf("Error: %s$%s : Function takes between %llu and %llu parameters\n", v130, v131, v132, v133, v134, v135, *(_QWORD *)(v298 + 32), *(_QWORD *)(v298 + 40));
          if (SHIBYTE(v300) < 0)
            operator delete(__p[0]);
          if ((v301[23] & 0x80000000) != 0)
            operator delete(*(void **)v301);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *(_QWORD *)v301 = aPpx;
          if (SHIBYTE(v300) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v301[8] = *(_OWORD *)__p;
            v302 = v300;
          }
          *(_QWORD *)v301 = &unk_24C216908;
          if (v302 >= 0)
            v261 = &v301[8];
          else
            v261 = *(const char **)&v301[8];
          conditionalAssert(v261, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 493, v136, v137);
          *(_QWORD *)v301 = aPpx;
          if (SHIBYTE(v302) < 0)
            operator delete(*(void **)&v301[8]);
          if (SHIBYTE(v300) < 0)
            operator delete(__p[0]);
          v262 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
          *v262 = aPpx;
          v263 = (std::string *)(v262 + 1);
          if ((v301[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v263, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
          }
          else
          {
            v285 = *(_OWORD *)v301;
            v262[3] = *(_QWORD *)&v301[16];
            *(_OWORD *)&v263->__r_.__value_.__l.__data_ = v285;
          }
          *v262 = &unk_24C216908;
        }
        *(_DWORD *)v301 = 4;
        TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
        TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)&v298, 2uLL);
        *(_DWORD *)v301 = v66;
        TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
        goto LABEL_96;
      default:
        if (v19 == 24)
        {
LABEL_30:
          if ((v11 & 1) != 0)
          {
            loggableToken((uint64_t)a1);
            if (v301[23] >= 0)
              v155 = v301;
            else
              v155 = *(_BYTE **)v301;
            tknPrintf("Error: %sExpected a binary operator\n", v151, v152, v153, v154, v155);
            if ((v301[23] & 0x80000000) != 0)
              operator delete(*(void **)v301);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
            *(_QWORD *)v301 = aPpx;
            if (SHIBYTE(v300) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              *(_OWORD *)&v301[8] = *(_OWORD *)__p;
              v302 = v300;
            }
            *(_QWORD *)v301 = &unk_24C215870;
            if (v302 >= 0)
              v243 = &v301[8];
            else
              v243 = *(const char **)&v301[8];
            conditionalAssert(v243, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 262, v156, v157);
            *(_QWORD *)v301 = aPpx;
            if (SHIBYTE(v302) < 0)
              operator delete(*(void **)&v301[8]);
            if (SHIBYTE(v300) < 0)
              operator delete(__p[0]);
            v244 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
            *v244 = aPpx;
            v245 = (std::string *)(v244 + 1);
            if ((v301[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v245, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
            }
            else
            {
              v273 = *(_OWORD *)v301;
              v244[3] = *(_QWORD *)&v301[16];
              *(_OWORD *)&v245->__r_.__value_.__l.__data_ = v273;
            }
            *v244 = &unk_24C215870;
          }
          v32 = (_QWORD *)nextToken(a1, v14, v15, v16, v17);
          if (*v32 == 3)
          {
            *(_DWORD *)v301 = 2;
            TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
            *(_DWORD *)v301 = 48;
            TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
            *(_DWORD *)v301 = 0;
            TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
            v34 = 0;
          }
          else
          {
            if (*v32 != 15)
              goto LABEL_90;
            if (*v18 == 1)
            {
              *(_QWORD *)v301 = v18[1];
              if (v294 == std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::find<wchar_t const*>(a3, (const __int32 **)v301))
              {
                loggableToken((uint64_t)a1);
                if (v301[23] >= 0)
                  v219 = v301;
                else
                  v219 = *(_BYTE **)v301;
                tknPrintf("Error: %sIllegal use of '[]' on an attribute.\n", v215, v216, v217, v218, v219);
                if ((v301[23] & 0x80000000) != 0)
                  operator delete(*(void **)v301);
                std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
                *(_QWORD *)v301 = aPpx;
                if (SHIBYTE(v300) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
                }
                else
                {
                  *(_OWORD *)&v301[8] = *(_OWORD *)__p;
                  v302 = v300;
                }
                *(_QWORD *)v301 = &unk_24C215870;
                if (v302 >= 0)
                  v274 = &v301[8];
                else
                  v274 = *(const char **)&v301[8];
                conditionalAssert(v274, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 273, v220, v221);
                *(_QWORD *)v301 = aPpx;
                if (SHIBYTE(v302) < 0)
                  operator delete(*(void **)&v301[8]);
                if (SHIBYTE(v300) < 0)
                  operator delete(__p[0]);
                v275 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
                *v275 = aPpx;
                v276 = (std::string *)(v275 + 1);
                if ((v301[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external(v276, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
                }
                else
                {
                  v291 = *(_OWORD *)v301;
                  v275[3] = *(_QWORD *)&v301[16];
                  *(_OWORD *)&v276->__r_.__value_.__l.__data_ = v291;
                }
                *v275 = &unk_24C215870;
              }
            }
            v33 = nextToken(a1, v28, v29, v30, v31);
            if (*(_QWORD *)v33 == 5 && getOperatorId(*(const __int32 **)(v33 + 8)) == 7)
            {
              v34 = 1;
            }
            else
            {
              v68 = *((_QWORD *)a1 + 3);
              v34 = 0;
              if (v68)
                *((_QWORD *)a1 + 3) = v68 - 1;
            }
            compileExpression(a1, v6, a3, a4);
            v73 = (_QWORD *)nextToken(a1, v69, v70, v71, v72);
            if (*v73 != 16)
            {
              loggableToken((uint64_t)a1);
              if (v301[23] >= 0)
                v207 = v301;
              else
                v207 = *(_BYTE **)v301;
              tknPrintf("Error: %s[] mismatch\n", v203, v204, v205, v206, v207);
              if ((v301[23] & 0x80000000) != 0)
                operator delete(*(void **)v301);
              std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
              *(_QWORD *)v301 = aPpx;
              if (SHIBYTE(v300) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                *(_OWORD *)&v301[8] = *(_OWORD *)__p;
                v302 = v300;
              }
              *(_QWORD *)v301 = &unk_24C215870;
              if (v302 >= 0)
                v268 = &v301[8];
              else
                v268 = *(const char **)&v301[8];
              conditionalAssert(v268, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 287, v208, v209);
              *(_QWORD *)v301 = aPpx;
              if (SHIBYTE(v302) < 0)
                operator delete(*(void **)&v301[8]);
              if (SHIBYTE(v300) < 0)
                operator delete(__p[0]);
              v269 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
              *v269 = aPpx;
              v270 = (std::string *)(v269 + 1);
              if ((v301[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v270, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
              }
              else
              {
                v290 = *(_OWORD *)v301;
                v269[3] = *(_QWORD *)&v301[16];
                *(_OWORD *)&v270->__r_.__value_.__l.__data_ = v290;
              }
              *v269 = &unk_24C215870;
            }
            v32 = (_QWORD *)nextToken(a1, (uint64_t)v73, v74, v75, v76);
          }
          if (*v32 != 3)
          {
LABEL_90:
            if (*v18 == 24
              || (*(_QWORD *)v301 = v18[1],
                  v294 != std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::find<wchar_t const*>(a3, (const __int32 **)v301)))
            {
              loggableToken((uint64_t)a1);
              if (v301[23] >= 0)
                v125 = v301;
              else
                v125 = *(_BYTE **)v301;
              tknPrintf("Error: %sExpected '.' after reference to array.\n", v121, v122, v123, v124, v125);
              if ((v301[23] & 0x80000000) != 0)
                operator delete(*(void **)v301);
              std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
              *(_QWORD *)v301 = aPpx;
              if (SHIBYTE(v300) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                *(_OWORD *)&v301[8] = *(_OWORD *)__p;
                v302 = v300;
              }
              *(_QWORD *)v301 = &unk_24C215870;
              if (v302 >= 0)
                v230 = &v301[8];
              else
                v230 = *(const char **)&v301[8];
              conditionalAssert(v230, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 305, v126, v127);
              *(_QWORD *)v301 = aPpx;
              if (SHIBYTE(v302) < 0)
                operator delete(*(void **)&v301[8]);
              if (SHIBYTE(v300) < 0)
                operator delete(__p[0]);
              v231 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
              *v231 = aPpx;
              v232 = (std::string *)(v231 + 1);
              if ((v301[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v232, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
              }
              else
              {
                v271 = *(_OWORD *)v301;
                v231[3] = *(_QWORD *)&v301[16];
                *(_OWORD *)&v232->__r_.__value_.__l.__data_ = v271;
              }
              *v231 = &unk_24C215870;
            }
            *(_DWORD *)v301 = 6;
            TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
            v82 = 0;
            v83 = (int *)v18[1];
            while (v83[v82++])
              ;
            TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], v83, v82 - 1);
            *(_DWORD *)v301 = 0;
            TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
            v85 = *((_QWORD *)a1 + 3);
            if (v85)
              *((_QWORD *)a1 + 3) = v85 - 1;
            goto LABEL_96;
          }
          if (*v18 == 1)
          {
            *(_QWORD *)v301 = v18[1];
            if (v294 == std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::find<wchar_t const*>(a3, (const __int32 **)v301))
            {
              loggableToken((uint64_t)a1);
              if (v301[23] >= 0)
                v226 = v301;
              else
                v226 = *(_BYTE **)v301;
              tknPrintf("Error: %sIllegal use of '.' on an attribute.\n", v222, v223, v224, v225, v226);
              if ((v301[23] & 0x80000000) != 0)
                operator delete(*(void **)v301);
              std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
              *(_QWORD *)v301 = aPpx;
              if (SHIBYTE(v300) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                *(_OWORD *)&v301[8] = *(_OWORD *)__p;
                v302 = v300;
              }
              *(_QWORD *)v301 = &unk_24C215870;
              if (v302 >= 0)
                v277 = &v301[8];
              else
                v277 = *(const char **)&v301[8];
              conditionalAssert(v277, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 321, v227, v228);
              *(_QWORD *)v301 = aPpx;
              if (SHIBYTE(v302) < 0)
                operator delete(*(void **)&v301[8]);
              if (SHIBYTE(v300) < 0)
                operator delete(__p[0]);
              v278 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
              *v278 = aPpx;
              v279 = (std::string *)(v278 + 1);
              if ((v301[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v279, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
              }
              else
              {
                v292 = *(_OWORD *)v301;
                v278[3] = *(_QWORD *)&v301[16];
                *(_OWORD *)&v279->__r_.__value_.__l.__data_ = v292;
              }
              *v278 = &unk_24C215870;
            }
          }
          v77 = (_QWORD *)nextToken(a1, v51, v52, v53, v54);
          if ((unint64_t)(*v77 - 21) >= 3 && *v77 != 1)
          {
            loggableToken((uint64_t)a1);
            if (v301[23] >= 0)
              v237 = v301;
            else
              v237 = *(_BYTE **)v301;
            tknPrintf("Error: %sExpected an identifier\n", v233, v234, v235, v236, v237);
            if ((v301[23] & 0x80000000) != 0)
              operator delete(*(void **)v301);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
            *(_QWORD *)v301 = aPpx;
            if (SHIBYTE(v300) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              *(_OWORD *)&v301[8] = *(_OWORD *)__p;
              v302 = v300;
            }
            *(_QWORD *)v301 = &unk_24C215870;
            if (v302 >= 0)
              v287 = &v301[8];
            else
              v287 = *(const char **)&v301[8];
            conditionalAssert(v287, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 332, v238, v239);
            *(_QWORD *)v301 = aPpx;
            if (SHIBYTE(v302) < 0)
              operator delete(*(void **)&v301[8]);
            if (SHIBYTE(v300) < 0)
              operator delete(__p[0]);
            v288 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
            *v288 = aPpx;
            v289 = (std::string *)(v288 + 1);
            if ((v301[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v289, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
            }
            else
            {
              v293 = *(_OWORD *)v301;
              v288[3] = *(_QWORD *)&v301[16];
              *(_OWORD *)&v289->__r_.__value_.__l.__data_ = v293;
            }
            *v288 = &unk_24C215870;
          }
          *(_DWORD *)v301 = 1;
          TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
          *(_DWORD *)v301 = v34;
          TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
          v78 = 0;
          v79 = (int *)v18[1];
          while (v79[v78++])
            ;
          TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], v79, v78 - 1);
          *(_DWORD *)v301 = 0;
          TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
          v24 = 0;
          v25 = (int *)v77[1];
          v26 = v6[2];
          while (v25[v24++])
            ;
LABEL_25:
          TBuffer<wchar_t>::insert((uint64_t)v6, v26, v25, v24 - 1);
          *(_DWORD *)v301 = 0;
          TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
LABEL_96:
          v10 = 0;
          v11 = 1;
          if ((v297 & 1) != 0)
          {
            *(_DWORD *)v301 = 12;
            TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
            *(_DWORD *)v301 = 1;
            TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
            v10 = 0;
          }
          continue;
        }
        if (v19 == 26)
        {
          if ((v11 & 1) != 0)
          {
            loggableToken((uint64_t)a1);
            if (v301[23] >= 0)
              v200 = v301;
            else
              v200 = *(_BYTE **)v301;
            tknPrintf("Error: %sExpected a binary operator\n", v196, v197, v198, v199, v200);
            if ((v301[23] & 0x80000000) != 0)
              operator delete(*(void **)v301);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
            *(_QWORD *)v301 = aPpx;
            if (SHIBYTE(v300) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              *(_OWORD *)&v301[8] = *(_OWORD *)__p;
              v302 = v300;
            }
            *(_QWORD *)v301 = &unk_24C215870;
            if (v302 >= 0)
              v265 = &v301[8];
            else
              v265 = *(const char **)&v301[8];
            conditionalAssert(v265, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 251, v201, v202);
            *(_QWORD *)v301 = aPpx;
            if (SHIBYTE(v302) < 0)
              operator delete(*(void **)&v301[8]);
            if (SHIBYTE(v300) < 0)
              operator delete(__p[0]);
            v266 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
            *v266 = aPpx;
            v267 = (std::string *)(v266 + 1);
            if ((v301[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v267, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
            }
            else
            {
              v286 = *(_OWORD *)v301;
              v266[3] = *(_QWORD *)&v301[16];
              *(_OWORD *)&v267->__r_.__value_.__l.__data_ = v286;
            }
            *v266 = &unk_24C215870;
          }
          wcscmp(*(const __int32 **)(result + 8), (const __int32 *)"!");
          v11 = 0;
          v10 = 1;
          continue;
        }
LABEL_98:
        v86 = *((_QWORD *)a1 + 3);
        if (v86)
          *((_QWORD *)a1 + 3) = v86 - 1;
        if (v12 >= 1)
        {
          v87 = &v303[16 * v12];
          v88 = v87;
          do
          {
            v89 = *((_DWORD *)v88 - 4);
            v88 -= 16;
            if ((v89 & 0xFFFFFFFE) == 0x14)
            {
              *(_DWORD *)(*v6 + 4 * *((_QWORD *)v87 - 1) + 4) = *((_DWORD *)v6 + 4) - *((_QWORD *)v87 - 1);
            }
            else
            {
              *(_DWORD *)v301 = 3;
              TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
              *(_DWORD *)v301 = *((_DWORD *)v87 - 4);
              result = TBuffer<wchar_t>::insert((uint64_t)v6, v6[2], (int *)v301, 1uLL);
            }
            v87 = v88;
          }
          while (v88 > v303);
        }
        if (v297 & 1 | ((v11 & 1) == 0))
        {
          loggableToken((uint64_t)a1);
          if (v301[23] >= 0)
            v162 = v301;
          else
            v162 = *(_BYTE **)v301;
          tknPrintf("Error: %sMissing operand\n", v158, v159, v160, v161, v162);
          if ((v301[23] & 0x80000000) != 0)
            operator delete(*(void **)v301);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *(_QWORD *)v301 = aPpx;
          if (SHIBYTE(v300) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v301[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v301[8] = *(_OWORD *)__p;
            v302 = v300;
          }
          *(_QWORD *)v301 = &unk_24C215870;
          if (v302 >= 0)
            v246 = &v301[8];
          else
            v246 = *(const char **)&v301[8];
          conditionalAssert(v246, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/gramcomp.cpp", 535, v163, v164);
          *(_QWORD *)v301 = aPpx;
          if (SHIBYTE(v302) < 0)
            operator delete(*(void **)&v301[8]);
          if (SHIBYTE(v300) < 0)
            operator delete(__p[0]);
          v247 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v301, &byte_209A88803);
          *v247 = aPpx;
          v248 = (std::string *)(v247 + 1);
          if ((v301[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v248, *(const std::string::value_type **)v301, *(std::string::size_type *)&v301[8]);
          }
          else
          {
            v280 = *(_OWORD *)v301;
            v247[3] = *(_QWORD *)&v301[16];
            *(_OWORD *)&v248->__r_.__value_.__l.__data_ = v280;
          }
          *v247 = &unk_24C215870;
        }
        return result;
    }
  }
}

void sub_2097A19C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _Unwind_Exception *exception_object, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;

  if (a29 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void sub_2097A1BB8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t getOperatorId(const __int32 *a1)
{
  if (!wcscmp(a1, (const __int32 *)"="))
    return 10;
  if (!wcscmp(a1, (const __int32 *)"!"))
    return 11;
  if (!wcscmp(a1, (const __int32 *)"<"))
    return 9;
  if (!wcscmp(a1, (const __int32 *)">"))
    return 8;
  if (!wcscmp(a1, (const __int32 *)">"))
    return 13;
  if (!wcscmp(a1, (const __int32 *)"<"))
    return 12;
  if (!wcscmp(a1, (const __int32 *)"|"))
    return 21;
  if (!wcscmp(a1, (const __int32 *)"&"))
    return 20;
  if (!wcscmp(a1, (const __int32 *)"+"))
    return 6;
  if (!wcscmp(a1, (const __int32 *)"-"))
    return 7;
  if (!wcscmp(a1, (const __int32 *)"*"))
    return 3;
  if (!wcscmp(a1, (const __int32 *)"/"))
    return 4;
  if (!wcscmp(a1, (const __int32 *)"%"))
    return 5;
  if (!wcscmp(a1, (const __int32 *)":"))
    return 1;
  if (!wcscmp(a1, (const __int32 *)"^"))
    return 2;
  if (!wcscmp(a1, (const __int32 *)"e"))
    return 16;
  if (!wcscmp(a1, (const __int32 *)"n"))
    return 17;
  if (!wcscmp(a1, (const __int32 *)"g"))
    return 14;
  if (!wcscmp(a1, (const __int32 *)"l"))
    return 15;
  if (!wcscmp(a1, (const __int32 *)"g"))
    return 19;
  if (!wcscmp(a1, (const __int32 *)"l"))
    return 18;
  return 10;
}

void std::wstring::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C20FDA8, MEMORY[0x24BEDAB00]);
}

void sub_2097A1E7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void TLexer::~TLexer(TLexer *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  TAllocator::clear((TLexer *)((char *)this + 32));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void TGrammar::forEachNonTerminal<TIntegrityChecker>(uint64_t a1, _BYTE *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = *(_QWORD **)(a1 + 40);
  v3 = (_QWORD *)(a1 + 48);
  if (v2 != (_QWORD *)(a1 + 48))
  {
    do
    {
      TIntegrityChecker::operator()(a2, v2[5]);
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
}

void TGrammar::forEachTerminal<TIntegrityChecker>(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 144);
  if (*(_QWORD *)(a1 + 152) != v2)
  {
    v5 = 0;
    do
    {
      TIntegrityChecker::operator()(a2, *(_QWORD *)(v2 + 8 * v5++));
      v2 = *(_QWORD *)(a1 + 144);
    }
    while (v5 < (*(_QWORD *)(a1 + 152) - v2) >> 3);
  }
}

void std::vector<TGrammarCompiler::TArgument>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (a2 <= (v6 - (_BYTE *)v7) >> 4)
  {
    if (a2)
    {
      v14 = 16 * a2;
      v15 = &v7[2 * a2];
      do
      {
        *v7 = 0;
        v7 += 2;
        v14 -= 16;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (char *)v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v4, v12);
    else
      v13 = 0;
    v16 = &v13[16 * v10];
    v17 = &v16[16 * a2];
    v18 = 16 * a2;
    v19 = v16;
    do
    {
      *(_QWORD *)v19 = 0;
      v19 += 16;
      v18 -= 16;
    }
    while (v18);
    v20 = &v13[16 * v12];
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v21 - 1);
        v16 -= 16;
        v21 -= 16;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
      operator delete(v21);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t getItnControlCategory(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xB)
    return 5;
  else
    return dword_209A58E00[a1 - 1];
}

BOOL TItnControlState::isSet(TItnControlState *this)
{
  BOOL v1;
  unint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)this == -1)
  {
    v3 = 0;
    v1 = 1;
    do
    {
      if (*((_QWORD *)this + v3 + 4) != -1)
        break;
      v1 = v3 < 3;
      if (v3 == 3)
        break;
      v4 = *((_QWORD *)this + ++v3);
    }
    while (v4 == -1);
  }
  else
  {
    return 1;
  }
  return v1;
}

_OWORD *TItnControlState::set(_OWORD *result, uint64_t *a2, char a3, char a4, int a5, unint64_t a6)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v18;
  unint64_t *v19;
  int ItnControlCategory;
  uint64_t v21;
  int v22;
  char v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char v30;
  _OWORD *v32;
  _OWORD v36[2];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  memset(v36, 0, sizeof(v36));
  *(_QWORD *)&v6 = -1;
  *((_QWORD *)&v6 + 1) = -1;
  *result = v6;
  result[1] = v6;
  result[2] = v6;
  result[3] = v6;
  v32 = result;
  v7 = *a2;
  v8 = a2[1] - *a2;
  if (v8)
  {
    v9 = 0;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 40;
    v30 = a4 ^ 1;
    v12 = -1;
    do
    {
      v13 = (uint64_t *)(v7 + 24 * v9);
      v14 = v13[2];
      if (v14 >= a6)
      {
        v15 = *(_QWORD *)(v7 + 24 * v9 + 8);
        if (v15 != 2)
        {
          if (v15 == 1 && v9 + 1 < v10 && a5 != 0)
          {
            v18 = v10 + v12;
            v19 = (unint64_t *)(v7 + v11);
            do
            {
              if (*(v19 - 1) - 1 <= 1)
              {
                ItnControlCategory = getItnControlCategory(*(v19 - 2));
                result = (_OWORD *)getItnControlCategory(*v13);
                if (ItnControlCategory == (_DWORD)result && v14 <= *v19)
                  goto LABEL_35;
              }
              v19 += 3;
            }
            while (--v18);
          }
          v21 = *v13;
          result = (_OWORD *)getItnControlCategory(*v13);
          if ((_DWORD)result != 2)
          {
            if (v21 == 6 || (a3 & 1) == 0)
            {
              v22 = a5;
              if (v15 != 4)
                v22 = 1;
              v23 = v30;
              if (v15 != 3)
                v23 = 0;
              if ((v23 & 1) != 0 || !v22)
                goto LABEL_35;
            }
LABEL_29:
            v24 = *((_QWORD *)v36 + result);
            if (v14 > v24)
            {
              v25 = (_QWORD *)v32 + result;
              *v25 = -1;
              v25[4] = -1;
              v7 = *a2;
              v14 = *(_QWORD *)(*a2 + 24 * v9 + 16);
            }
            if (v14 >= v24)
            {
              v26 = (uint64_t *)(v7 + 24 * v9);
              *((_QWORD *)v36 + result) = v14;
              v28 = *v26;
              v27 = v26[1];
              result = (_OWORD *)getItnControlCategory(*v26);
              v29 = (uint64_t *)v32 + result + 4;
              if (v27 == 1)
              {
                *v29 = -1;
                v29 = (uint64_t *)v32 + result;
              }
              *v29 = v28;
            }
            goto LABEL_35;
          }
          if ((unint64_t)(v15 - 5) < 0xFFFFFFFFFFFFFFFELL || (a5 & 1) != 0)
            goto LABEL_29;
        }
      }
LABEL_35:
      ++v9;
      v7 = *a2;
      v10 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
      --v12;
      v11 += 24;
    }
    while (v9 < v10);
  }
  return result;
}

uint64_t SDEnvHolder_New()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _BYTE v7[144];

  SdapiInsurance::SdapiInsurance(v7, "SDEnvHolder_New", 1, 1, 95);
  if (v7[97])
  {
    if (gbShowCalls)
      xlprintf("Entering sdapi call %s()\n", v0, v1, v2, v3, "SDEnvHolder_New");
    v4 = EnvHolderMgr::newEnvHolder((EnvHolderMgr *)EnvHolderMgr::smpEnvHolderMgr);
    if (v4 == -1)
      v5 = -1;
    else
      v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v7);
  return v5;
}

void sub_2097A24CC()
{
  __cxa_end_catch();
  JUMPOUT(0x2097A24D8);
}

uint64_t SDEnvHolder_NewFromFile(FileSpec *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  DgnString *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  int v20;
  uint64_t *v21;
  unsigned int EnvHolder;
  uint64_t v23;
  void *v25;
  int v26;
  _BYTE v27[144];
  char *v28;
  int v29;

  v4 = SdapiInsurance::SdapiInsurance(v27, "SDEnvHolder_NewFromFile", 1, 1, 96);
  if (v27[97])
  {
    if (!a1)
      throwBadStringPointer(v4, v5, v6, v7, v8, v9, v10, v11);
    LOBYTE(v28) = 0;
    if (gbShowCalls | gbShowCallsWithFileSpecArgs)
    {
      DgnString::DgnString((DgnString *)&v25);
      DgnString::DgnString((DgnString *)&v28);
      FileSpec::getDiagnosticMaskedName(a1, (DgnString *)&v28, v12);
      DgnString::preAllocate((unint64_t)&v25, 96);
      if (v29)
        v13 = v28;
      else
        v13 = (char *)&unk_209A58E46;
      DgnString::formatStringInPlace((DgnString *)&v25, v13);
      DgnString::~DgnString((DgnString *)&v28);
      if (v26)
        v18 = v25;
      else
        v18 = &unk_209A58E46;
      xlprintf("Entering sdapi call %.500s(%.500s, <SDh %lld>)\n", v14, v15, v16, v17, "SDEnvHolder_NewFromFile", v18, a2);
      DgnString::~DgnString((DgnString *)&v25);
    }
    v19 = a2 - 1;
    if (a2 - 1 >= 5)
    {
      throwBadSdapiArgument("SDEnvHolderSource", a2, v6, v7, v8, v9, v10, v11);
      LODWORD(v19) = 0;
      v20 = 0;
    }
    else
    {
      v20 = dword_209A58E48[v19];
    }
    FileSpec::FileSpec((FileSpec *)&v28, (const char *)a1);
    DFileOwner::DFileOwner((DFileOwner *)&v25);
    v21 = DFile::openDFile((uint64_t)&v28, 0, v20, (uint64_t)&v25);
    EnvHolder = EnvHolderMgr::loadEnvHolder(EnvHolderMgr::smpEnvHolderMgr, (EnvHolder *)v21, v19);
    if (EnvHolder == -1)
      v23 = -1;
    else
      v23 = EnvHolder;
    DFileOwner::~DFileOwner((DFileOwner *)&v25);
    FileSpec::~FileSpec((FileSpec *)&v28);
  }
  else
  {
    v23 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v27);
  return v23;
}

void sub_2097A2730()
{
  __cxa_end_catch();
  JUMPOUT(0x2097A273CLL);
}

uint64_t SDEnvHolder_Save(unint64_t a1, FileSpec *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  DgnString *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  EnvHolderMgr *v28;
  uint64_t v29;
  char *v30;
  int v32;
  void *v33;
  int v34;
  _BYTE v35[144];
  char *v36;
  int v37;

  v6 = SdapiInsurance::SdapiInsurance(v35, "SDEnvHolder_Save", 1, 1, 97);
  if (v35[97])
  {
    if (!a2)
      throwBadStringPointer(v6, v7, v8, v9, v10, v11, v12, v13);
    LOBYTE(v36) = 0;
    if (gbShowCalls | gbShowCallsWithFileSpecArgs)
    {
      DgnString::DgnString((DgnString *)&v33);
      DgnString::DgnString((DgnString *)&v36);
      FileSpec::getDiagnosticMaskedName(a2, (DgnString *)&v36, v14);
      DgnString::preAllocate((unint64_t)&v33, 96);
      if (v37)
        v15 = v36;
      else
        v15 = (char *)&unk_209A58E46;
      DgnString::formatStringInPlace((DgnString *)&v33, v15);
      DgnString::~DgnString((DgnString *)&v36);
      if (v34)
        v20 = v33;
      else
        v20 = &unk_209A58E46;
      v21 = "SD_TRUE";
      if (!a3)
        v21 = "SD_FALSE";
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, %.500s, %.500s)\n", v16, v17, v18, v19, "SDEnvHolder_Save", a1, v20, v21);
      DgnString::~DgnString((DgnString *)&v33);
    }
    if (*(_BYTE *)(ApiState::smpApiState + 1))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdenvh.cpp", 95, (uint64_t)"sdapi/sdenvh", 1, (uint64_t)"%s", v12, v13, (char)&unk_209A58E46);
    FileSpec::FileSpec((FileSpec *)&v36, (const char *)a2);
    v32 = 0;
    DgnString::DgnString((DgnString *)&v33);
    v28 = (EnvHolderMgr *)EnvHolderMgr::smpEnvHolderMgr;
    if (a1 == -1)
    {
      LODWORD(a1) = -1;
    }
    else
    {
      if (HIDWORD(a1))
        throwBadSdapiArgument("SDhEnvHolder", a1, v22, v23, v24, v25, v26, v27);
      if ((a1 + 1) <= 1)
        throwBadSdapiArgument("SDhEnvHolder", a1, v22, v23, v24, v25, v26, v27);
    }
    if (a3 >= 2)
      throwBadSdapiArgument("SDBool", (int)a3, v22, v23, v24, v25, v26, v27);
    EnvHolderMgr::saveEnvHolder(v28, a1, (uint64_t)&v36, &v32, 2, a3 == 1, v26, v27);
    if (v32 == 1)
    {
      v29 = 2;
    }
    else if (v32 == 2)
    {
      v29 = 3;
    }
    else
    {
      v29 = 1;
    }
    if (v34)
      v30 = (char *)v33;
    else
      v30 = (char *)&unk_209A58E46;
    ApiState::setLastResultCodeString((ApiState *)ApiState::smpApiState, v30);
    DgnString::~DgnString((DgnString *)&v33);
    FileSpec::~FileSpec((FileSpec *)&v36);
  }
  else
  {
    v29 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v35);
  return v29;
}

void sub_2097A2A84()
{
  __cxa_end_catch();
  JUMPOUT(0x2097A2A90);
}

void SDEnvHolder_Delete(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  EnvHolderMgr *v9;
  _BYTE v10[144];

  SdapiInsurance::SdapiInsurance(v10, "SDEnvHolder_Delete", 1, 1, 98);
  if (v10[97])
  {
    if (gbShowCalls)
      xlprintf("Entering sdapi call %.500s(<SDh %lld>)\n", v2, v3, v4, v5, "SDEnvHolder_Delete", a1);
    v9 = (EnvHolderMgr *)EnvHolderMgr::smpEnvHolderMgr;
    if (a1 == -1)
    {
      LODWORD(a1) = -1;
    }
    else
    {
      if (HIDWORD(a1))
        throwBadSdapiArgument("SDhEnvHolder", a1, v3, v4, v5, v6, v7, v8);
      if ((a1 + 1) <= 1)
        throwBadSdapiArgument("SDhEnvHolder", a1, v3, v4, v5, v6, v7, v8);
    }
    EnvHolderMgr::deleteEnvHolder(v9, a1, v3, v4, v5, v6, v7, v8);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v10);
}

uint64_t TLocaleInfo::unicodeToMultiByte(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v7;
  char *v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;

  if (*(_DWORD *)(a1 + 64) == 1)
  {
    if ((int)a2 < 128 || a2 - 160 < 0x60)
    {
      v9 = a2;
      v7 = *(_QWORD *)(a3 + 16);
      v8 = &v9;
    }
    else
    {
      v5 = 0;
      while (s_pszCodePage1252ToUnicode[v5 + 1] != a2)
      {
        v5 += 2;
        if (v5 == 66)
          return 1;
      }
      v10 = s_pszCodePage1252ToUnicode[v5];
      v7 = *(_QWORD *)(a3 + 16);
      v8 = &v10;
    }
    goto LABEL_16;
  }
  if ((int)a2 <= 127)
  {
    v11 = a2;
    v7 = *(_QWORD *)(a3 + 16);
    v8 = &v11;
LABEL_16:
    TBuffer<char>::insert(a3, v7, v8, 1uLL);
    return 0;
  }
  if (a2 <= 0x7FF)
  {
    v12 = (a2 >> 6) | 0xC0;
    TBuffer<char>::insert(a3, *(_QWORD *)(a3 + 16), &v12, 1uLL);
    v13 = a2 & 0x3F | 0x80;
    v7 = *(_QWORD *)(a3 + 16);
    v8 = &v13;
    goto LABEL_16;
  }
  if (!HIWORD(a2))
  {
    v14 = (a2 >> 12) | 0xE0;
    TBuffer<char>::insert(a3, *(_QWORD *)(a3 + 16), &v14, 1uLL);
    v15 = (a2 >> 6) & 0x3F | 0x80;
    TBuffer<char>::insert(a3, *(_QWORD *)(a3 + 16), &v15, 1uLL);
    v16 = a2 & 0x3F | 0x80;
    v7 = *(_QWORD *)(a3 + 16);
    v8 = &v16;
    goto LABEL_16;
  }
  return 0;
}

BOOL TLocaleInfo::unicodeToMultiByte(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v6;

  do
  {
    v6 = *a2;
    if (!*a2)
      break;
    ++a2;
  }
  while (!TLocaleInfo::unicodeToMultiByte(a1, v6, a3));
  return v6 != 0;
}

uint64_t TLocaleInfo::unicodeToMultiByte(uint64_t a1, unsigned int *a2, uint64_t *a3, unint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  char v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = 0;
  v14 = 0;
  while (1)
  {
    v6 = *a2;
    if (!*a2)
      break;
    ++a2;
    if ((TLocaleInfo::unicodeToMultiByte(a1, v6, (uint64_t)&v10) & 1) != 0)
    {
      v7 = 0xFFFFFFFFLL;
      goto LABEL_12;
    }
  }
  if (v12 >= v11)
  {
    if (v14)
    {
      v9 = 0;
      TBuffer<char>::insert((uint64_t)&v10, v12--, &v9, 1uLL);
    }
    else if (v11)
    {
      *((_BYTE *)v10 + v11 - 1) = 0;
    }
  }
  else
  {
    *((_BYTE *)v10 + v12) = 0;
  }
  v7 = (v12 + 1);
LABEL_12:
  if (v14 && v10 != &v13 && v10)
    MEMORY[0x20BD149A8]();
  return v7;
}

void sub_2097A2EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a45 && a10 != &a13)
  {
    if (a10)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t TLocaleInfo::multiByteToUnicode(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  unsigned int v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  char *v7;
  char v8;
  int v9;
  int v10;
  int v11;

  v3 = *a2;
  if (*(_DWORD *)(a1 + 64) == 1)
  {
    if ((char)v3 <= -97)
    {
      v3 = s_pszCodePage1252ToUnicode[2 * v3 - 255];
      if (v3 == 0xFFFF)
        result = 0xFFFFFFFFLL;
      else
        result = 1;
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if ((v3 & 0x80) == 0)
  {
LABEL_7:
    result = 1;
LABEL_8:
    *a3 = v3;
    return result;
  }
  if ((v3 & 0xE0) == 0xC0)
  {
    v5 = v3 & 0x1F;
    *a3 = v5;
    if (v3 >= 0xC2)
    {
      result = 2;
      goto LABEL_19;
    }
LABEL_16:
    result = 0xFFFFFFFFLL;
    v3 = 0xFFFF;
    goto LABEL_8;
  }
  if ((v3 & 0xF0) != 0xE0)
    goto LABEL_16;
  v5 = v3 & 0xF;
  *a3 = v5;
  if (v3 == 237)
  {
    if ((a2[1] & 0xE0) != 0x80)
      goto LABEL_16;
  }
  else if (v3 == 224 && (a2[1] & 0xE0) != 0xA0)
  {
    goto LABEL_16;
  }
  result = 3;
LABEL_19:
  v6 = result - 1;
  v7 = (char *)(a2 + 1);
  while (1)
  {
    v8 = *v7++;
    v9 = v8 & 0xC0;
    v10 = v8 & 0x3F | (v5 << 6);
    v11 = v9 == 128 ? v10 : 0xFFFF;
    *a3 = v11;
    if (v9 != 128)
      break;
    v5 = v10;
    if (!--v6)
      return result;
  }
  return 0xFFFFFFFFLL;
}

uint64_t TLocaleInfo::multiByteToUnicode(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v4;
  int v6;
  int v7;
  int v9;
  int v10;

  if (!*a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v9 = 0;
    v6 = TLocaleInfo::multiByteToUnicode(a1, v4, &v9);
    if (v6 == -1)
      break;
    v7 = v6;
    v10 = v9;
    TBuffer<wchar_t>::insert(a3, *(_QWORD *)(a3 + 16), &v10, 1uLL);
    v4 += v7;
    if (!*v4)
      return 0;
  }
  return 1;
}

uint64_t TLocaleInfo::multiByteToUnicode(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned __int8 *v6;
  unint64_t v9;
  int v10;
  uint64_t v12;
  int v14;
  int v15;

  result = 0;
  if (a3)
  {
    v6 = a2;
    if (*a2)
    {
      v9 = 0;
      while (1)
      {
        v14 = 0;
        v10 = TLocaleInfo::multiByteToUnicode(a1, v6, &v14);
        v9 += v10;
        if (v10 == -1 || v9 > a3)
          break;
        v12 = v10;
        v15 = v14;
        TBuffer<wchar_t>::insert(a4, *(_QWORD *)(a4 + 16), &v15, 1uLL);
        v6 += v12;
        if (v9 >= a3 || *v6 == 0)
          return 0;
      }
      return 1;
    }
  }
  return result;
}

uint64_t TLocaleInfo::unicodeStringCompare(uint64_t a1, unsigned int *a2, int *a3, char a4, unint64_t a5)
{
  uint64_t v8;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t result;

  v8 = *a2;
  if ((_DWORD)v8)
  {
    v11 = a2 + 1;
    v12 = 1;
    while (1)
    {
      v13 = v12 - 1;
      v14 = *a3;
      if (!*a3 || v13 >= a5)
        break;
      if ((_DWORD)v8 != v14)
      {
        if ((a4 & 1) != 0)
          goto LABEL_19;
        v16 = TLocaleInfo::toLower(a1, v8);
        if (v16 != TLocaleInfo::toLower(a1, *a3))
        {
          LODWORD(v8) = *(v11 - 1);
          v14 = *a3;
          goto LABEL_19;
        }
      }
      ++a3;
      v17 = *v11++;
      v8 = v17;
      ++v12;
      if (!v17)
      {
        v18 = v12 - 1;
        goto LABEL_13;
      }
    }
    if (v13 < a5)
      goto LABEL_19;
    return 0;
  }
  v18 = 0;
LABEL_13:
  if (v18 >= a5)
    return 0;
  LODWORD(v8) = 0;
  result = 0;
  v14 = *a3;
  if (*a3)
  {
LABEL_19:
    if ((int)v8 < v14)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  return result;
}

uint64_t TBuffer<char>::insert(uint64_t result, unint64_t a2, char *a3, unint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;

  v6 = result;
  v7 = *(_QWORD *)(result + 16);
  if (v7 >= a2)
    v8 = a2;
  else
    v8 = *(_QWORD *)(result + 16);
  if (*(_BYTE *)(result + 280))
  {
    v9 = v7 + a4;
    v10 = *(_QWORD *)(result + 8);
    if (v7 + a4 > v10 && v10 < 2 * v9)
    {
      *(_QWORD *)(result + 8) = (2 * v9) | 1;
      result = operator new[]();
      v11 = result;
      v12 = *(const void **)v6;
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
        result = (uint64_t)memmove((void *)result, *(const void **)v6, *(_QWORD *)(v6 + 16));
      if (v12 != (const void *)(v6 + 24) && v12)
      {
        result = MEMORY[0x20BD149A8](v12, 0x1000C4077774924);
        v7 = *(_QWORD *)(v6 + 16);
      }
      *(_QWORD *)v6 = v11;
    }
  }
  if (v8 < v7)
  {
    v13 = v8 + a4;
    v14 = *(_QWORD *)(v6 + 8);
    if (v8 + a4 < v14)
    {
      if (v14 >= v7 + a4)
        v14 = v7 + a4;
      for (; v13 != v14; --v14)
        *(_BYTE *)(*(_QWORD *)v6 + v14 - 1) = *(_BYTE *)(*(_QWORD *)v6 + v14 + ~a4);
    }
  }
  v15 = *(_QWORD *)(v6 + 8);
  v16 = v15 - v8;
  if (v15 > v8)
  {
    if (v16 >= a4)
      v16 = a4;
    if (v16)
    {
      do
      {
        v17 = *a3++;
        *(_BYTE *)(*(_QWORD *)v6 + v8++) = v17;
        --v16;
      }
      while (v16);
      v15 = *(_QWORD *)(v6 + 8);
    }
  }
  v18 = *(_QWORD *)(v6 + 16) + a4;
  *(_QWORD *)(v6 + 16) = v18;
  if (v18 < v15)
    *(_BYTE *)(*(_QWORD *)v6 + v18) = 0;
  return result;
}

uint64_t MrecInitLibrary_dfutil(void)
{
  MrecInitModule_dfile_dfutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_dtxtfile_dfutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_progcall_dfutil();
  MrecInitModule_realdf_dfutil();
  MrecInitModule_sdpres_sdapi();
  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughDfutil(void)
{
  MrecInitLibrarySet_throughMrecutil();
  return MrecInitLibrary_dfutil();
}

void StartupMrec(DgnSharedMemMgr *a1, const char *a2)
{
  ParamSetHolderMgr *v2;
  ChannelMgr *v3;
  UttFileMgr *v4;
  EnvHolderMgr *v5;
  ModelMgr *v6;
  uint64_t *v7;

  StartupMrecutil(a1, a2);
  v3 = (ChannelMgr *)ParamSetHolderMgr::startupParamSetHolderMgr(v2);
  ChannelMgr::startupChannelMgr(v3);
  UttFileMgr::startupUttFileMgr(v4);
  EnvHolderMgr::startupEnvHolderMgr(v5);
  v7 = ModelMgr::startupModelMgr(v6);
  RecogCtlMgr::startupRecogCtlMgr((RecogCtlMgr *)v7);
}

void MrecPrintSize(unsigned int a1, int a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  MrecutilPrintSize(a1, a2, a3, a4, a5);
  if (ParamSetHolderMgr::smpParamSetHolderMgr)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ParamSetHolderMgr::printSize((ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (ChannelMgr::smpChannelMgr)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ChannelMgr::printSize((ChannelMgr *)ChannelMgr::smpChannelMgr, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (UttFileMgr::smpUttFileMgr)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    UttFileMgr::printSize((UttFileMgr *)UttFileMgr::smpUttFileMgr, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (EnvHolderMgr::smpEnvHolderMgr)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    EnvHolderMgr::printSize((EnvHolderMgr *)EnvHolderMgr::smpEnvHolderMgr, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (ModelMgr::smpModelMgr)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ModelMgr::printSize((ModelMgr *)ModelMgr::smpModelMgr, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (RecogCtlMgr::smpRecogCtlMgr)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    RecogCtlMgr::printSize((RecogCtlMgr *)RecogCtlMgr::smpRecogCtlMgr, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
}

DgnThreadMgr *MessageFormatPrefix(DgnThreadMgr *result, char a2, int a3, int CurrentThreadId)
{
  DgnBuffer *v4;

  v4 = result;
  if ((a2 & 1) != 0 || a3)
  {
    if (CurrentThreadId == -1 && (a2 & 1) == 0)
      CurrentThreadId = DgnThreadMgr::getCurrentThreadId(result);
    if (CurrentThreadId == -1)
      return (DgnThreadMgr *)DgnBuffer::printfAppend(v4, "%s [%s %d %s %d] ");
    else
      return (DgnThreadMgr *)DgnBuffer::printfAppend(v4, "DThread %u: %s [%s %d %s %d] ");
  }
  return result;
}

uint64_t DgnThreadMgr::getCurrentThreadId(DgnThreadMgr *this)
{
  BOOL v1;
  unsigned int *v2;

  if (DgnThreadMgr::smpThreadMgr)
    v1 = DgnThreadMgr::smTlsID == 0;
  else
    v1 = 1;
  if (v1)
    return 0xFFFFFFFFLL;
  v2 = (unsigned int *)pthread_getspecific(DgnThreadMgr::smTlsID);
  if (!v2)
    return 0xFFFFFFFFLL;
  else
    return *v2;
}

void DgnString::DgnString(DgnString *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

void DgnString::DgnString(DgnString *this, const DgnString *a2)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  void *v8;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = *((_DWORD *)a2 + 2);
  if (v3)
    v4 = v3 - 1;
  else
    v4 = 0;
  if (v3 >= 2)
  {
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v8 = 0;
      *((_DWORD *)this + 3) = realloc_array(0, &v8, v6, 0, 0, 1);
      *(_QWORD *)this = v8;
    }
    DgnString::allocBuffer(this, v4);
    v7 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)this + v7) = *(_BYTE *)(*(_QWORD *)a2 + v7);
      ++v7;
    }
    while (v7 < v4);
  }
}

void sub_2097A3848(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void *DgnString::allocBuffer(DgnString *this, unsigned int a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  void *result;
  void *v8;

  v4 = a2 + 1;
  v5 = *((_DWORD *)this + 3);
  if (v4 <= v5)
  {
    result = *(void **)this;
  }
  else
  {
    v6 = (a2 & 0xFFFFFFFC) + 4;
    result = *(void **)this;
    if (v5 < v6)
    {
      v8 = 0;
      v5 = realloc_array(result, &v8, v6, *((unsigned int *)this + 2), *((unsigned int *)this + 2), 1);
      *((_DWORD *)this + 3) = v5;
      result = v8;
      *(_QWORD *)this = v8;
    }
  }
  if (v5 < v4)
  {
    v8 = 0;
    *((_DWORD *)this + 3) = realloc_array(result, &v8, v4, *((unsigned int *)this + 2), *((unsigned int *)this + 2), 1);
    result = v8;
    *(_QWORD *)this = v8;
  }
  *((_DWORD *)this + 2) = v4;
  *((_BYTE *)result + a2) = 0;
  return result;
}

void DgnString::DgnString(DgnString *this, const char *__s)
{
  unsigned int v4;
  uint64_t i;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (__s)
  {
    v4 = strlen(__s);
    if (v4)
    {
      DgnString::allocBuffer(this, v4);
      for (i = 0; i != v4; ++i)
        *(_BYTE *)(*(_QWORD *)this + i) = __s[i];
    }
  }
}

void sub_2097A398C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void DgnString::DgnString(DgnString *this, char a2, unsigned int a3)
{
  uint64_t v6;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (a3)
  {
    DgnString::allocBuffer(this, a3);
    v6 = 0;
    do
      *(_BYTE *)(*(_QWORD *)this + v6++) = a2;
    while (a3 != v6);
  }
}

void sub_2097A3A04(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void DgnString::DgnString(DgnString *this, const char *a2, unsigned int a3)
{
  uint64_t v6;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (a3)
  {
    DgnString::allocBuffer(this, a3);
    v6 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)this + v6) = a2[v6];
      ++v6;
    }
    while (a3 != v6);
  }
}

void sub_2097A3A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

DgnString *DgnString::operator=(DgnString *this, DgnString *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (this != a2)
  {
    v3 = *((_DWORD *)a2 + 2);
    v4 = v3 - 1;
    if (v3 > 1)
    {
      v5 = *(_QWORD *)a2;
      DgnString::allocBuffer(this, v3 - 1);
      v6 = 0;
      do
      {
        *(_BYTE *)(*(_QWORD *)this + v6) = *(_BYTE *)(v5 + v6);
        ++v6;
      }
      while (v4 != v6);
    }
    else
    {
      *((_DWORD *)this + 2) = 0;
    }
  }
  return this;
}

DgnString *DgnString::operator=(DgnString *a1, char *__s)
{
  unsigned int v4;
  uint64_t i;

  if (__s && (v4 = strlen(__s)) != 0)
  {
    DgnString::allocBuffer(a1, v4);
    for (i = 0; i != v4; ++i)
      *(_BYTE *)(*(_QWORD *)a1 + i) = __s[i];
  }
  else
  {
    *((_DWORD *)a1 + 2) = 0;
  }
  return a1;
}

_DWORD *DgnString::set(_DWORD *this, const char *a2, unsigned int a3)
{
  _QWORD *v3;
  uint64_t v6;

  v3 = this;
  if (a3)
  {
    this = DgnString::allocBuffer((DgnString *)this, a3);
    v6 = 0;
    do
    {
      *(_BYTE *)(*v3 + v6) = a2[v6];
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    this[2] = 0;
  }
  return this;
}

_DWORD *DgnString::concatInPlace(_DWORD *this, unsigned int a2, char *a3)
{
  _QWORD *v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  char v12;

  v4 = this;
  v5 = this[2];
  v6 = v5 != 0;
  v7 = v5 - 1;
  if (v6)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8 + a2;
  if (v9)
  {
    this = DgnString::allocBuffer((DgnString *)this, v9);
    if (a2)
    {
      v11 = a2;
      do
      {
        v12 = *a3++;
        *(_BYTE *)(*v4 + v8++) = v12;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    this[2] = 0;
  }
  return this;
}

uint64_t DgnString::printfAppend(DgnString *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  const char *v6;
  const char *v7;
  DgnString *v8;
  char *Buffer;
  unint64_t v10;
  int v11;
  char *v12;
  char *v13;
  char __str[8192];
  unsigned int __size;
  char __size_4;
  __int128 v18;
  uint64_t v19;
  va_list va;

  va_start(va, a5);
  v5 = MEMORY[0x24BDAC7A8](this, a2, a3, a4, a5);
  v7 = v6;
  v8 = (DgnString *)v5;
  v19 = *MEMORY[0x24BDAC8D0];
  v18 = 0u;
  __str[0] = 0;
  __size_4 = 0;
  __size = 0x2000;
  if (vsnprintf(__str, 0x2000uLL, v6, va) >= 0x2000)
  {
    do
    {
      do
      {
        Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)__str, 1);
        v10 = __size;
        v11 = vsnprintf(Buffer, __size, v7, va);
      }
      while (v11 < 0);
    }
    while (v11 >= v10);
  }
  if (DWORD2(v18))
    v12 = (char *)v18;
  else
    v12 = &byte_209A88803;
  if (__size_4)
    v13 = v12;
  else
    v13 = __str;
  DgnString::operator+=(v8, v13);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
}

void sub_2097A3D90(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

DgnBuffer *DgnBuffer::getBuffer(DgnBuffer *this, int a2)
{
  DgnBuffer *v2;
  _BYTE *v3;
  unsigned int v4;

  v2 = this;
  v3 = (char *)this + 8196;
  if (a2)
  {
    if (!*((_BYTE *)this + 8196))
    {
      DgnString::operator=((DgnBuffer *)((char *)this + 8200), (char *)this);
      *v3 = 1;
    }
  }
  else if (!*((_BYTE *)this + 8196))
  {
    *((_DWORD *)this + 2048) = 0x2000;
    return v2;
  }
  v4 = 6 * *((_DWORD *)v2 + 2048) / 5u;
  *((_DWORD *)v2 + 2048) = v4;
  DgnString::allocBuffer((DgnBuffer *)((char *)v2 + 8200), v4);
  return (DgnBuffer *)*((_QWORD *)v2 + 1025);
}

DgnString *DgnString::operator+=(DgnString *this, char *a2)
{
  char *v2;

  v2 = a2;
  if (a2)
    LODWORD(a2) = strlen(a2);
  DgnString::concatInPlace(this, a2, v2);
  return this;
}

uint64_t DgnString::stringPrintf(DgnString *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  const char *v6;
  const char *v7;
  DgnString *v8;
  char *Buffer;
  unint64_t v10;
  int v11;
  char *v12;
  char *v13;
  char __str[8192];
  unsigned int __size;
  char __size_4;
  __int128 v18;
  uint64_t v19;
  va_list va;

  va_start(va, a5);
  v5 = MEMORY[0x24BDAC7A8](this, a2, a3, a4, a5);
  v7 = v6;
  v8 = (DgnString *)v5;
  v19 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(v5 + 8) = 0;
  v18 = 0u;
  __str[0] = 0;
  __size_4 = 0;
  __size = 0x2000;
  if (vsnprintf(__str, 0x2000uLL, v6, va) >= 0x2000)
  {
    do
    {
      do
      {
        Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)__str, 1);
        v10 = __size;
        v11 = vsnprintf(Buffer, __size, v7, va);
      }
      while (v11 < 0);
    }
    while (v11 >= v10);
  }
  if (DWORD2(v18))
    v12 = (char *)v18;
  else
    v12 = &byte_209A88803;
  if (__size_4)
    v13 = v12;
  else
    v13 = __str;
  DgnString::operator+=(v8, v13);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
}

void sub_2097A3FB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

uint64_t DgnString::makeStringPrintf(DgnString *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const char *v5;
  DgnString *v6;
  DgnString *v7;
  char *Buffer;
  unint64_t v9;
  int v10;
  char *v11;
  char *v12;
  char __str[8192];
  unsigned int __size;
  char __size_4;
  __int128 v17;
  uint64_t v18;
  va_list va;

  va_start(va, a5);
  v5 = (const char *)MEMORY[0x24BDAC7A8](this, a2, a3, a4, a5);
  v7 = v6;
  v18 = *MEMORY[0x24BDAC8D0];
  v17 = 0u;
  __str[0] = 0;
  __size_4 = 0;
  __size = 0x2000;
  if (vsnprintf(__str, 0x2000uLL, v5, va) >= 0x2000)
  {
    do
    {
      do
      {
        Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)__str, 1);
        v9 = __size;
        v10 = vsnprintf(Buffer, __size, v5, va);
      }
      while (v10 < 0);
    }
    while (v10 >= v9);
  }
  if (DWORD2(v17))
    v11 = (char *)v17;
  else
    v11 = &byte_209A88803;
  if (__size_4)
    v12 = v11;
  else
    v12 = __str;
  DgnString::DgnString(v7, v12);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
}

void sub_2097A410C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

char *DgnString::formatFloat@<X0>(DgnString *this@<X0>, double a2@<D0>, DgnString *a3@<X8>)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *result;
  char *v10;
  char *v11;
  unsigned int v12;
  int v13;
  char *v14;
  _BYTE v15[16];
  _BYTE v16[16];
  _BYTE v17[16];
  _BYTE v18[16];
  char v19[8];
  int v20;

  v5 = eround(a2, (int)this);
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  DgnString::stringPrintf(a3, "%1.*g", v6, v7, v8, this, *(_QWORD *)&v5);
  if (*((_DWORD *)a3 + 2) < 2u)
    goto LABEL_2;
  v10 = *(char **)a3;
  v11 = strchr(*(char **)a3, 101);
  if (v11)
  {
    v12 = (_DWORD)v11 - (_DWORD)v10;
    if (v12 == -1)
    {
      v13 = 1;
    }
    else
    {
      DgnString::mid(a3, v12 + 2, (uint64_t)v19);
      if (v20 == 3)
      {
        DgnString::left(a3, v12 + 2, (DgnString *)v16);
        operator+("0", (uint64_t)v16, (uint64_t)v17);
        operator+((uint64_t)v17, (uint64_t)v19, (uint64_t)v18);
        DgnString::operator=(a3, (DgnString *)v18);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v17);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v16);
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v19);
      if (*((_DWORD *)a3 + 2) < 2u)
      {
LABEL_14:
        DgnString::left(a3, v12, (DgnString *)v16);
        operator+(".", (uint64_t)v16, (uint64_t)v17);
        operator+("0", (uint64_t)v17, (uint64_t)v18);
        DgnString::mid(a3, v12, (uint64_t)v15);
        operator+((uint64_t)v18, (uint64_t)v15, (uint64_t)v19);
        DgnString::operator=(a3, (DgnString *)v19);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v19);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v15);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v17);
        return (char *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v16);
      }
      v13 = 0;
    }
  }
  else
  {
    v13 = 1;
    v12 = -1;
  }
  v14 = *(char **)a3;
  result = strchr(*(char **)a3, 46);
  if (!result || (_DWORD)result - (_DWORD)v14 == 0xFFFFFFFFLL)
  {
    if (v13)
    {
LABEL_2:
      DgnString::concatInPlace(a3, 1u, ".");
      return (char *)DgnString::concatInPlace(a3, 1u, "0");
    }
    goto LABEL_14;
  }
  return result;
}

void sub_2097A4324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v6 - 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v5);
  _Unwind_Resume(a1);
}

uint64_t DgnString::find(DgnString *this, int a2)
{
  uint64_t v3;
  char *v4;

  if (*((_DWORD *)this + 2) < 2u)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)this;
  v4 = strchr(*(char **)this, a2);
  if (v4)
    return ((_DWORD)v4 - v3);
  else
    return 0xFFFFFFFFLL;
}

_DWORD *DgnString::mid@<X0>(DgnString *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return DgnString::setToMid((_DWORD *)a3, this, a2);
}

void sub_2097A4448(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

_DWORD *operator+@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  BOOL v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = v4 != 0;
  v6 = v4 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_DWORD *)(a2 + 8);
  v5 = v7 != 0;
  v8 = v7 - 1;
  if (v5)
    v9 = v8;
  else
    v9 = 0;
  return DgnString::concatCopy((_DWORD *)a3, v6, *(const char **)a1, v9, *(char **)a2);
}

void sub_2097A44A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

_DWORD *operator+@<X0>(char *__s@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  const char *v9;
  unsigned int v10;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = v5 != 0;
  v7 = v5 - 1;
  if (v6)
    v8 = v7;
  else
    v8 = 0;
  v9 = *(const char **)a2;
  if (__s)
    v10 = strlen(__s);
  else
    v10 = 0;
  return DgnString::concatCopy((_DWORD *)a3, v8, v9, v10, __s);
}

void sub_2097A4524(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

_QWORD *DgnString::left@<X0>(_QWORD *this@<X0>, unsigned int a2@<W1>, DgnString *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  if (a2)
  {
    v4 = this;
    this = DgnString::allocBuffer(a3, a2);
    v6 = 0;
    v7 = *(_QWORD *)a3;
    do
    {
      *(_BYTE *)(v7 + v6) = *(_BYTE *)(*v4 + v6);
      ++v6;
    }
    while (a2 != v6);
  }
  return this;
}

void sub_2097A4598(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

uint64_t DgnString::atoui(char **this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL8 v9;
  char *v10;
  int v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;

  if (!DgnString::checkWhiteSpaceFree(this, -1) || !DgnString::checkIntegral(this, 0))
  {
    if (*((_DWORD *)this + 2))
      v4 = *this;
    else
      v4 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dstring.cpp", 362, (uint64_t)"mrecutil/dstring", 3, (uint64_t)"%.500s %.500s", v2, v3, (char)v4);
  }
  if (*((_DWORD *)this + 2))
    v5 = *this;
  else
    v5 = &byte_209A88803;
  v6 = *v5;
  v7 = MEMORY[0x24BDAC740];
  if (*v5 >= 1)
  {
    do
    {
      if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v6 + 60) & 0x4000) == 0)
        break;
      v8 = *++v5;
      v6 = v8;
    }
    while (v8 > 0);
  }
  v9 = v6 == 43;
  if (v6 == 43)
    v10 = v5 + 1;
  else
    v10 = v5;
  v11 = *v10;
  if (!v11)
    return 0;
  v12 = 0;
  v13 = &v5[v9 + 1];
  do
  {
    if ((v11 & 0x80) != 0)
      goto LABEL_21;
    v14 = *(_DWORD *)(v7 + 4 * v11 + 60);
    if ((v14 & 0x4000) != 0)
      return v12;
    if ((v14 & 0x400) == 0)
    {
LABEL_21:
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dstring.cpp", 377, (uint64_t)"mrecutil/dstring", 1, (uint64_t)"%02x %c", v2, v3, v11);
      LOBYTE(v11) = *(v13 - 1);
    }
    v15 = v11 - 48;
    if ((~((_BYTE)v11 - 48) | 0xFFFFFF01) / 0xA < v12)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dstring.cpp", 381, (uint64_t)"mrecutil/dstring", 2, (uint64_t)"%.500s", v2, v3, (char)v5);
    v12 = (v15 + 10 * v12);
    v16 = *v13++;
    LOBYTE(v11) = v16;
  }
  while (v16);
  return v12;
}

double DgnString::atodb(char **this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  const char *v5;
  double v6;

  if (!DgnString::checkWhiteSpaceFree(this, -1) || (DgnString::checkReal(this) & 1) == 0)
  {
    if (*((_DWORD *)this + 2))
      v4 = *this;
    else
      v4 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dstring.cpp", 422, (uint64_t)"mrecutil/dstring", 3, (uint64_t)"%.500s %.500s", v2, v3, (char)v4);
  }
  if (*((_DWORD *)this + 2))
    v5 = *this;
  else
    v5 = &byte_209A88803;
  v6 = atof(v5);
  return eround(v6, 14);
}

uint64_t DgnString::checkWhiteSpaceFree(char **this, int a2)
{
  char *v2;
  unsigned int v3;
  uint64_t result;
  char *v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;

  if (*((_DWORD *)this + 2))
    v2 = *this;
  else
    v2 = &byte_209A88803;
  v3 = *v2;
  if (a2)
    result = *v2 == 0;
  else
    result = 1;
  if ((*v2 & 0x80000000) == 0 && (result & 1) == 0)
  {
    v5 = v2 + 1;
    v6 = a2 - 1;
    while ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v3 + 60) & 0x4000) == 0)
    {
      v8 = *v5++;
      v7 = v8;
      v3 = v8;
      v9 = v8 == 0;
      if (v6)
        result = v9;
      else
        result = 1;
      if ((v7 & 0x80000000) == 0)
      {
        --v6;
        if (!(_DWORD)result)
          continue;
      }
      return result;
    }
    return 0;
  }
  return result;
}

BOOL DgnString::checkIntegral(char **this, unsigned int a2)
{
  char *v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  _BOOL8 result;
  int v7;

  if (*((_DWORD *)this + 2))
    v2 = *this;
  else
    v2 = &byte_209A88803;
  v3 = *v2;
  if (!*v2)
    return 0;
  if (v3 == 45 || v3 == 43)
  {
    v2 += a2;
    v3 = *v2;
  }
  if (!v3)
    return 0;
  v4 = (unsigned __int8 *)(v2 + 1);
  do
  {
    v5 = v3 - 48;
    result = v5 < 0xA;
    if (v5 >= 0xA)
      break;
    v7 = *v4++;
    v3 = v7;
  }
  while (v7);
  return result;
}

uint64_t DgnString::checkReal(char **this)
{
  char *v1;
  int v2;
  int v3;
  char v4;
  char i;
  int v6;
  int v7;
  int v8;

  if (*((_DWORD *)this + 2))
    v1 = *this;
  else
    v1 = &byte_209A88803;
  v2 = *v1;
  if (*v1)
  {
    v3 = 0;
    v4 = 0;
    for (i = 1; ; i = 0)
    {
      if (v2 == 43 || v2 == 45)
      {
        v6 = *++v1;
        v2 = v6;
        if (!v6)
        {
LABEL_19:
          v4 = 0;
          goto LABEL_20;
        }
      }
      else if (!v2)
      {
        return v4 & 1;
      }
      v7 = 0;
      v4 = 0;
      ++v1;
      do
      {
        if ((v2 - 58) > 0xFFFFFFF5)
        {
          v4 = 1;
        }
        else
        {
          if ((v2 & 0xDF) == 0x45)
            goto LABEL_19;
          if ((v3 | v7) & 1 | (v2 != 46))
            goto LABEL_22;
          v7 = 1;
        }
        v8 = *v1++;
        v2 = v8;
      }
      while (v8);
      --v1;
LABEL_20:
      if ((i & 1) == 0)
        return v4 & 1;
      v2 = *v1;
      v3 = 1;
    }
  }
LABEL_22:
  v4 = 0;
  return v4 & 1;
}

_DWORD *DgnString::formatStringInPlace(DgnString *this, char *__s)
{
  *((_DWORD *)this + 2) = 0;
  return DgnString::appendFormattedString(this, __s);
}

_DWORD *DgnString::appendFormattedString(DgnString *this, char *__s)
{
  char *v2;
  uint64_t v4;
  char *v5;
  char *v6;
  const char *v7;
  const char *v8;
  char *v9;
  const char *v10;
  int v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;

  v2 = __s;
  LODWORD(v4) = strlen(__s);
  v5 = strchr(v2, 39);
  v6 = strchr(v2, 34);
  if (v5)
    v7 = "\"";
  else
    v7 = "'";
  if (v5)
    v8 = "'";
  else
    v8 = "\"";
  if (v6)
    v9 = "'";
  else
    v9 = (char *)v7;
  if (v6)
    v10 = "\"";
  else
    v10 = v8;
  v4 = v4;
  if ((_DWORD)v4)
  {
    v11 = 0;
    v12 = v4;
    v13 = v2;
    do
    {
      v14 = *v13++;
      v11 += strlen(sStringEncodingTable[v14]);
      --v12;
    }
    while (v12);
    DgnString::preAllocate((unint64_t)this, v11 + 2);
    DgnString::concatInPlace(this, 1u, v9);
    v15 = *(unsigned __int8 *)v10;
    do
    {
      v17 = *v2++;
      v16 = v17;
      v18 = (char *)v10;
      if (v17 != v15)
        v18 = sStringEncodingTable[v16];
      DgnString::operator+=(this, v18);
      --v4;
    }
    while (v4);
  }
  else
  {
    DgnString::preAllocate((unint64_t)this, 2);
    DgnString::concatInPlace(this, 1u, v9);
  }
  return DgnString::concatInPlace(this, 1u, v9);
}

unint64_t DgnString::preAllocate(unint64_t this, int a2)
{
  unint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = (a2 + 1);
  if (*(_DWORD *)(this + 12) < v2)
  {
    v3 = this;
    v4 = 0;
    this = realloc_array(*(_QWORD **)this, &v4, v2, *(unsigned int *)(v3 + 8), *(unsigned int *)(v3 + 8), 1);
    *(_DWORD *)(v3 + 12) = this;
    *(_QWORD *)v3 = v4;
  }
  return this;
}

_DWORD *DgnString::concatCopy(_DWORD *this, unsigned int a2, const char *a3, unsigned int a4, char *a5)
{
  unsigned int v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t i;
  uint64_t v12;
  char v13;

  v5 = a2;
  v6 = this;
  v7 = a4 + a2;
  if (v7)
  {
    this = DgnString::allocBuffer((DgnString *)this, v7);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_BYTE *)(*v6 + i) = a3[i];
    }
    if (a4)
    {
      v12 = a4;
      do
      {
        v13 = *a5++;
        *(_BYTE *)(*v6 + v5++) = v13;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    this[2] = 0;
  }
  return this;
}

unint64_t DgnString::appendCharWithGrow(unint64_t this, char a2)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = this;
  v4 = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 12);
  if (v4)
    v6 = v4 + 1;
  else
    v6 = 2;
  if (v6 > v5)
    this = DgnPrimArray<char>::reallocElts(this, v6 - v5, 1);
  *(_DWORD *)(v3 + 8) = v6;
  *(_BYTE *)(*(_QWORD *)v3 + v6 - 2) = a2;
  *(_BYTE *)(*(_QWORD *)v3 + v6 - 1) = 0;
  return this;
}

_DWORD *DgnString::operator+=(_DWORD *a1, char a2)
{
  char v4;

  v4 = a2;
  DgnString::concatInPlace(a1, 1u, &v4);
  return a1;
}

_DWORD *DgnString::operator+=(_DWORD *a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  unsigned int v5;

  v3 = *(_DWORD *)(a2 + 8);
  v4 = v3 != 0;
  v5 = v3 - 1;
  if (!v4)
    v5 = 0;
  DgnString::concatInPlace(a1, v5, *(char **)a2);
  return a1;
}

uint64_t DgnString::getBuffer(DgnString *this, unsigned int a2)
{
  DgnString::allocBuffer(this, a2);
  return *(_QWORD *)this;
}

_DWORD *DgnString::setToMid(_DWORD *this, const DgnString *a2, int a3, unsigned int a4)
{
  _QWORD *v4;
  uint64_t v8;

  v4 = this;
  if (a4)
  {
    this = DgnString::allocBuffer((DgnString *)this, a4);
    v8 = 0;
    do
    {
      *(_BYTE *)(*v4 + v8) = *(_BYTE *)(*(_QWORD *)a2 + (a3 + v8));
      ++v8;
    }
    while (a4 != v8);
  }
  else
  {
    this[2] = 0;
  }
  return this;
}

_DWORD *DgnString::setToMid(_DWORD *this, const DgnString *a2, int a3)
{
  _QWORD *v3;
  int v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint64_t v10;

  v3 = this;
  v4 = *((_DWORD *)a2 + 2);
  v5 = v4 != 0;
  v6 = v4 - 1;
  if (!v5)
    v6 = 0;
  v7 = (v6 - a3);
  if (v6 == a3)
  {
    this[2] = 0;
  }
  else
  {
    this = DgnString::allocBuffer((DgnString *)this, v6 - a3);
    v10 = 0;
    do
    {
      *(_BYTE *)(*v3 + v10) = *(_BYTE *)(*(_QWORD *)a2 + (a3 + v10));
      ++v10;
    }
    while (v7 != v10);
  }
  return this;
}

uint64_t DgnString::reverseFind(DgnString *this, int a2)
{
  uint64_t v3;
  char *v4;

  if (*((_DWORD *)this + 2) < 2u)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)this;
  v4 = strrchr(*(char **)this, a2);
  if (v4)
    return ((_DWORD)v4 - v3);
  else
    return 0xFFFFFFFFLL;
}

uint64_t DgnString::find(DgnString *this, const char *a2)
{
  uint64_t v3;
  char *v4;

  if (*((_DWORD *)this + 2) < 2u)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)this;
  v4 = strstr(*(char **)this, a2);
  if (v4)
    return ((_DWORD)v4 - v3);
  else
    return 0xFFFFFFFFLL;
}

uint64_t DgnString::compareNoCase(DgnString *this, const char *a2, const char *a3)
{
  __darwin_ct_rune_t v5;
  __darwin_ct_rune_t v6;
  uint64_t result;

  while (*(_BYTE *)this)
  {
    if (!*a2)
      return 1;
    v5 = __tolower(*(char *)this);
    v6 = *a2++;
    this = (DgnString *)((char *)this + 1);
    result = (v5 - __tolower(v6));
    if ((_DWORD)result)
      return result;
  }
  if (*a2)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

BOOL DgnString::isPrefixNoCase(DgnString *this, const char *a2, const char *a3)
{
  DgnString *v4;
  int v5;
  __darwin_ct_rune_t v6;
  int v7;
  BOOL v8;
  __darwin_ct_rune_t v9;

  v4 = this;
  v5 = strlen((const char *)this);
  if (!v5)
    return 1;
  while (1)
  {
    v6 = *(char *)v4;
    v7 = *(unsigned __int8 *)a2;
    if (*(_BYTE *)v4)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (v8)
      return (v6 | v7) == 0;
    v9 = __tolower(v6);
    if (v9 != __tolower(*a2))
      break;
    v4 = (DgnString *)((char *)v4 + 1);
    ++a2;
    if (!--v5)
      return 1;
  }
  return 0;
}

uint64_t DgnBuffer::printfAppend(DgnBuffer *this, const char *a2, ...)
{
  const char *v4;
  unsigned int v5;
  int v6;
  DgnBuffer *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  DgnBuffer *Buffer;
  unsigned int v12;
  va_list va;

  va_start(va, a2);
  if (*((_BYTE *)this + 8196))
  {
    if (*((_DWORD *)this + 2052))
      v4 = (const char *)*((_QWORD *)this + 1025);
    else
      v4 = &byte_209A88803;
    v5 = strlen(v4);
    v8 = 6 * *((_DWORD *)this + 2048) / 5u;
    *((_DWORD *)this + 2048) = v8;
    DgnString::allocBuffer((DgnBuffer *)((char *)this + 8200), v8);
    v7 = (DgnBuffer *)*((_QWORD *)this + 1025);
    v6 = *((_DWORD *)this + 2048);
  }
  else
  {
    v5 = strlen((const char *)this);
    v6 = 0x2000;
    *((_DWORD *)this + 2048) = 0x2000;
    v7 = this;
  }
  v9 = v6 - v5;
  result = vsnprintf((char *)v7 + v5, v6 - v5, a2, va);
  if ((result & 0x80000000) != 0 || result >= v9)
  {
    do
    {
      do
      {
        Buffer = DgnBuffer::getBuffer(this, 1);
        v12 = *((_DWORD *)this + 2048) - v5;
        result = vsnprintf((char *)Buffer + v5, v12, a2, va);
      }
      while ((result & 0x80000000) != 0);
    }
    while (result >= v12);
  }
  return result;
}

char *DgnBuffer::appendString(DgnBuffer *this, const char *__s)
{
  int v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  DgnBuffer *Buffer;

  v4 = strlen(__s);
  if (*((_BYTE *)this + 8196))
  {
    v5 = 6 * *((_DWORD *)this + 2048) / 5u;
    *((_DWORD *)this + 2048) = v5;
    DgnString::allocBuffer((DgnBuffer *)((char *)this + 8200), v5);
    v6 = (char *)*((_QWORD *)this + 1025);
    v7 = *((_DWORD *)this + 2048) - 1;
  }
  else
  {
    *((_DWORD *)this + 2048) = 0x2000;
    v7 = 0x1FFF;
    v6 = (char *)this;
  }
  v8 = strlen(v6) + v4;
  if (v8 >= v7)
  {
    do
      Buffer = DgnBuffer::getBuffer(this, 1);
    while (v8 >= *((_DWORD *)this + 2048) - 1);
    v6 = (char *)Buffer;
  }
  return strcat(v6, __s);
}

uint64_t TItnRule::TItnRule(uint64_t a1, __int32 **a2, char a3, char a4, uint64_t a5, char a6, char *a7, uint64_t a8, char *a9, uint64_t a10, __n128 *a11, __n128 *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  __n128 *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __n128 v40;
  __int128 *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t ActiveConfigHandle;
  uint64_t v50;
  int *v51;
  TTagManager *v53;
  uint64_t (*v54)(uint64_t *, uint64_t *);
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  int *v84;
  unint64_t v85;
  uint64_t v86;
  TTagManager *v88;
  uint64_t (*v89)(uint64_t *, uint64_t *);
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  TTagManager *v108;
  uint64_t (*v109)(uint64_t *, uint64_t *);
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  uint64_t v127;
  unint64_t v129;
  int v130;
  TTagManager *v131;
  uint64_t (*v132)(uint64_t *, uint64_t *);
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t *v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  int v148;
  TTagManager *v149;
  uint64_t (*v150)(uint64_t *, uint64_t *);
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  uint64_t *v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  int **v166;
  char **v167;
  char **v168;
  uint64_t v169;
  char *v170;
  uint64_t (*v171)(uint64_t *, uint64_t *);
  __int128 v172;
  _BYTE v173[785];
  char v174;
  int *v175;
  __int128 v176;
  _BYTE v177[1024];
  char v178;
  int v179[3];

  *(_OWORD *)(a1 + 48) = 0u;
  v22 = (char *)(a1 + 48);
  *(_OWORD *)(a1 + 96) = 0u;
  v168 = (char **)(a1 + 96);
  *(_QWORD *)(a1 + 152) = 0;
  v23 = a1 + 152;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v170 = (char *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v24 = a1 + 120;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 217) = a4;
  *(_BYTE *)(a1 + 216) = a3;
  *(_QWORD *)(a1 + 176) = a16;
  *(_QWORD *)(a1 + 184) = a15;
  *(_DWORD *)(a1 + 220) = 0;
  v166 = (int **)(a1 + 120);
  v167 = (char **)(a1 + 72);
  MEMORY[0x20BD147A4]();
  if (a5)
    MEMORY[0x20BD147A4](v24, a5);
  *(_BYTE *)(a1 + 144) = a6;
  v175 = (int *)v177;
  v176 = xmmword_209A57DD0;
  v178 = 1;
  TWord::getWrittenForm(a2, (uint64_t)&v175);
  if (*(_BYTE *)(a1 + 144))
  {
    if (*(char *)(a1 + 143) < 0)
      v25 = *(_QWORD *)(a1 + 128);
    else
      v25 = *(unsigned __int8 *)(a1 + 143);
  }
  else
  {
    v25 = *((_QWORD *)&v176 + 1);
  }
  *(_BYTE *)(a1 + 145) = v25 == 0;
  std::vector<TPItnTagHandle_fake **>::__assign_with_size[abi:ne180100]<TPItnTagHandle_fake ** const*,TPItnTagHandle_fake ** const*>(v170, a7, a8, (a8 - (uint64_t)a7) >> 3);
  std::vector<TPItnTagHandle_fake **>::__assign_with_size[abi:ne180100]<TPItnTagHandle_fake ** const*,TPItnTagHandle_fake ** const*>(v22, a9, a10, (a10 - (uint64_t)a9) >> 3);
  v26 = *(_QWORD *)(a1 + 24);
  v27 = *(uint64_t **)(a1 + 32);
  v28 = 126 - 2 * __clz(((uint64_t)v27 - v26) >> 3);
  v171 = (uint64_t (*)(uint64_t *, uint64_t *))sortTags;
  if (v27 == (uint64_t *)v26)
    v29 = 0;
  else
    v29 = v28;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***,false>(v26, v27, &v171, v29, 1);
  v30 = *(_QWORD *)(a1 + 48);
  v31 = *(uint64_t **)(a1 + 56);
  v32 = 126 - 2 * __clz(((uint64_t)v31 - v30) >> 3);
  v171 = (uint64_t (*)(uint64_t *, uint64_t *))sortTags;
  if (v31 == (uint64_t *)v30)
    v33 = 0;
  else
    v33 = v32;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***,false>(v30, v31, &v171, v33, 1);
  v34 = a11;
  if (*(_BYTE *)(a1 + 145))
    v35 = 2;
  else
    v35 = 1;
  std::vector<TItnControl>::resize(v23, a12 - a11);
  v37 = *(_QWORD *)(a1 + 184);
  v169 = *(_QWORD *)(v37 + 136);
  *(_QWORD *)(v37 + 136) = 1;
  v38 = *(_QWORD *)(a1 + 152);
  if (a11 != a12)
  {
    v39 = (uint64_t *)(v38 + 16);
    do
    {
      v40 = *v34++;
      v36 = v40;
      *((__n128 *)v39 - 1) = v40;
      *v39 = v35;
      v39 += 3;
    }
    while (v34 != a12);
  }
  v41 = *(__int128 **)(a1 + 160);
  v42 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v41 - v38) >> 3));
  v171 = (uint64_t (*)(uint64_t *, uint64_t *))sortControls;
  if (v41 == (__int128 *)v38)
    v43 = 0;
  else
    v43 = v42;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*,false>(v38, v41, (uint64_t (**)(__int128 *, __int128 *))&v171, v43, 1, v36);
  *(_QWORD *)(a1 + 192) = a13;
  *(_BYTE *)(a1 + 200) = a14;
  if (a13 != -1)
  {
    v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + 8 * a13 - 8);
    ++*(_QWORD *)(v44 + 128);
  }
  v45 = 2 * (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 208) = v45;
  v47 = *(_QWORD *)(a1 + 48);
  v46 = *(_QWORD *)(a1 + 56);
  if (v46 == v47 || a13 == -1)
  {
    if (v46 == v47)
      v45 += 2;
    *(_QWORD *)(a1 + 208) = v45 | (a13 == -1);
  }
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(a15 + 5768));
  if (*(_BYTE *)(a15 + TParam::getValidConfig((TParam *)(a15 + 5768), ActiveConfigHandle) + 5920)
    && !*(_BYTE *)(a1 + 145))
  {
    if (*(char *)(a1 + 143) < 0)
    {
      if (!*(_QWORD *)(a1 + 128))
        goto LABEL_32;
    }
    else if (!*(_BYTE *)(a1 + 143))
    {
      goto LABEL_32;
    }
    v171 = (uint64_t (*)(uint64_t *, uint64_t *))v173;
    v172 = xmmword_209A57DD0;
    v174 = 1;
    TBuffer<wchar_t>::assign((uint64_t)&v171, dword_209A58FA4);
    v50 = 0;
    v51 = *a2;
    while (v51[v50++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v171, *((unint64_t *)&v172 + 1), v51, v50 - 1);
    v53 = *(TTagManager **)(a1 + 176);
    if (*((_QWORD *)&v172 + 1) >= (unint64_t)v172)
    {
      if (v174)
      {
        v179[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v171, *((unint64_t *)&v172 + 1), v179, 1uLL);
        v54 = v171;
        --*((_QWORD *)&v172 + 1);
      }
      else
      {
        v54 = v171;
        if ((_QWORD)v172)
          *((_DWORD *)v171 + v172 - 1) = 0;
      }
    }
    else
    {
      v54 = v171;
      *((_DWORD *)v171 + *((_QWORD *)&v172 + 1)) = 0;
    }
    v55 = TTagManager::addWordRuleTag(v53, (uint64_t)v54, -1);
    v56 = v55;
    v57 = *(_QWORD *)(a1 + 88);
    v58 = *(uint64_t **)(a1 + 80);
    if ((unint64_t)v58 >= v57)
    {
      v60 = ((char *)v58 - *v167) >> 3;
      if ((unint64_t)(v60 + 1) >> 61)
        goto LABEL_199;
      v61 = v57 - (_QWORD)*v167;
      v62 = v61 >> 2;
      if (v61 >> 2 <= (unint64_t)(v60 + 1))
        v62 = v60 + 1;
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v63 = v62;
      if (v63)
        v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 88, v63);
      else
        v64 = 0;
      v65 = (uint64_t *)&v64[8 * v60];
      v66 = &v64[8 * v63];
      *v65 = v56;
      v59 = v65 + 1;
      v68 = *(char **)(a1 + 72);
      v67 = *(char **)(a1 + 80);
      if (v67 != v68)
      {
        do
        {
          v69 = *((_QWORD *)v67 - 1);
          v67 -= 8;
          *--v65 = v69;
        }
        while (v67 != v68);
        v67 = *v167;
      }
      *(_QWORD *)(a1 + 72) = v65;
      *(_QWORD *)(a1 + 80) = v59;
      *(_QWORD *)(a1 + 88) = v66;
      if (v67)
        operator delete(v67);
    }
    else
    {
      *v58 = v55;
      v59 = v58 + 1;
    }
    v70 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 80) = v59;
    v71 = *(uint64_t **)(a1 + 104);
    if ((unint64_t)v71 < v70)
    {
      *v71 = v56;
      v72 = v71 + 1;
      goto LABEL_81;
    }
    v73 = ((char *)v71 - *v168) >> 3;
    if (!((unint64_t)(v73 + 1) >> 61))
    {
      v74 = v70 - (_QWORD)*v168;
      v75 = v74 >> 2;
      if (v74 >> 2 <= (unint64_t)(v73 + 1))
        v75 = v73 + 1;
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
        v76 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v76 = v75;
      if (v76)
        v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 112, v76);
      else
        v77 = 0;
      v78 = (uint64_t *)&v77[8 * v73];
      v79 = &v77[8 * v76];
      *v78 = v56;
      v72 = v78 + 1;
      v81 = *(char **)(a1 + 96);
      v80 = *(char **)(a1 + 104);
      if (v80 != v81)
      {
        do
        {
          v82 = *((_QWORD *)v80 - 1);
          v80 -= 8;
          *--v78 = v82;
        }
        while (v80 != v81);
        v80 = *v168;
      }
      *(_QWORD *)(a1 + 96) = v78;
      *(_QWORD *)(a1 + 104) = v72;
      *(_QWORD *)(a1 + 112) = v79;
      if (v80)
        operator delete(v80);
LABEL_81:
      *(_QWORD *)(a1 + 104) = v72;
      TBuffer<wchar_t>::insert((uint64_t)&v171, *((unint64_t *)&v172 + 1), dword_209A58FB8, 2uLL);
      v83 = *((_QWORD *)&v172 + 1);
      if (*((_QWORD *)&v176 + 1) >= (unint64_t)v176)
      {
        if (v178)
        {
          v179[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v175, *((unint64_t *)&v176 + 1), v179, 1uLL);
          v84 = v175;
          --*((_QWORD *)&v176 + 1);
          v85 = *((_QWORD *)&v172 + 1);
          goto LABEL_86;
        }
        v84 = v175;
        if ((_QWORD)v176)
          v175[(_QWORD)v176 - 1] = 0;
      }
      else
      {
        v84 = v175;
        v175[*((_QWORD *)&v176 + 1)] = 0;
      }
      v85 = v83;
LABEL_86:
      v86 = 0;
      while (v84[v86++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v171, v85, v84, v86 - 1);
      v88 = *(TTagManager **)(a1 + 176);
      if (*((_QWORD *)&v172 + 1) >= (unint64_t)v172)
      {
        if (v174)
        {
          v179[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v171, *((unint64_t *)&v172 + 1), v179, 1uLL);
          v89 = v171;
          --*((_QWORD *)&v172 + 1);
        }
        else
        {
          v89 = v171;
          if ((_QWORD)v172)
            *((_DWORD *)v171 + v172 - 1) = 0;
        }
      }
      else
      {
        v89 = v171;
        *((_DWORD *)v171 + *((_QWORD *)&v172 + 1)) = 0;
      }
      v90 = TTagManager::addWordRuleTag(v88, (uint64_t)v89, v56);
      v91 = v90;
      v93 = *(uint64_t **)(a1 + 104);
      v92 = *(_QWORD *)(a1 + 112);
      if ((unint64_t)v93 >= v92)
      {
        v95 = ((char *)v93 - *v168) >> 3;
        if ((unint64_t)(v95 + 1) >> 61)
          goto LABEL_198;
        v96 = v92 - (_QWORD)*v168;
        v97 = v96 >> 2;
        if (v96 >> 2 <= (unint64_t)(v95 + 1))
          v97 = v95 + 1;
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
          v98 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v98 = v97;
        if (v98)
          v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 112, v98);
        else
          v99 = 0;
        v100 = (uint64_t *)&v99[8 * v95];
        v101 = &v99[8 * v98];
        *v100 = v91;
        v94 = v100 + 1;
        v103 = *(char **)(a1 + 96);
        v102 = *(char **)(a1 + 104);
        if (v102 != v103)
        {
          do
          {
            v104 = *((_QWORD *)v102 - 1);
            v102 -= 8;
            *--v100 = v104;
          }
          while (v102 != v103);
          v102 = *v168;
        }
        *(_QWORD *)(a1 + 96) = v100;
        *(_QWORD *)(a1 + 104) = v94;
        *(_QWORD *)(a1 + 112) = v101;
        if (v102)
          operator delete(v102);
      }
      else
      {
        *v93 = v90;
        v94 = v93 + 1;
      }
      *(_QWORD *)(a1 + 104) = v94;
      TBuffer<wchar_t>::resize((uint64_t)&v171, v83);
      v105 = (int *)v166;
      if (*(char *)(a1 + 143) < 0)
        v105 = *v166;
      v106 = 0;
      while (v105[v106++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v171, *((unint64_t *)&v172 + 1), v105, v106 - 1);
      v108 = *(TTagManager **)(a1 + 176);
      if (*((_QWORD *)&v172 + 1) >= (unint64_t)v172)
      {
        if (v174)
        {
          v179[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v171, *((unint64_t *)&v172 + 1), v179, 1uLL);
          v109 = v171;
          --*((_QWORD *)&v172 + 1);
        }
        else
        {
          v109 = v171;
          if ((_QWORD)v172)
            *((_DWORD *)v171 + v172 - 1) = 0;
        }
      }
      else
      {
        v109 = v171;
        *((_DWORD *)v171 + *((_QWORD *)&v172 + 1)) = 0;
      }
      v110 = TTagManager::addWordRuleTag(v108, (uint64_t)v109, v56);
      v111 = v110;
      v113 = *(uint64_t **)(a1 + 80);
      v112 = *(_QWORD *)(a1 + 88);
      if ((unint64_t)v113 >= v112)
      {
        v115 = ((char *)v113 - *v167) >> 3;
        if ((unint64_t)(v115 + 1) >> 61)
          goto LABEL_198;
        v116 = v112 - (_QWORD)*v167;
        v117 = v116 >> 2;
        if (v116 >> 2 <= (unint64_t)(v115 + 1))
          v117 = v115 + 1;
        if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
          v118 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v118 = v117;
        if (v118)
          v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 88, v118);
        else
          v119 = 0;
        v120 = (uint64_t *)&v119[8 * v115];
        v121 = &v119[8 * v118];
        *v120 = v111;
        v114 = v120 + 1;
        v123 = *(char **)(a1 + 72);
        v122 = *(char **)(a1 + 80);
        if (v122 != v123)
        {
          do
          {
            v124 = *((_QWORD *)v122 - 1);
            v122 -= 8;
            *--v120 = v124;
          }
          while (v122 != v123);
          v122 = *v167;
        }
        *(_QWORD *)(a1 + 72) = v120;
        *(_QWORD *)(a1 + 80) = v114;
        *(_QWORD *)(a1 + 88) = v121;
        if (v122)
          operator delete(v122);
      }
      else
      {
        *v113 = v110;
        v114 = v113 + 1;
      }
      *(_QWORD *)(a1 + 80) = v114;
      if (*(_QWORD *)(a1 + 192) == -1)
      {
LABEL_194:
        if (v174 && (char *)v171 != v173 && v171)
          MEMORY[0x20BD149A8]();
        goto LABEL_32;
      }
      TBuffer<wchar_t>::assign((uint64_t)&v171, dword_209A58FC4);
      v125 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + 8 * *(_QWORD *)(a1 + 192) - 8);
      v126 = (int *)(v125 + 16);
      if (*(char *)(v125 + 39) < 0)
        v126 = *(int **)v126;
      v127 = 0;
      while (v126[v127++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v171, *((unint64_t *)&v172 + 1), v126, v127 - 1);
      v179[0] = 61;
      TBuffer<wchar_t>::insert((uint64_t)&v171, *((unint64_t *)&v172 + 1), v179, 1uLL);
      v129 = *((_QWORD *)&v172 + 1);
      if (a14)
        v130 = 49;
      else
        v130 = 48;
      v179[0] = v130;
      TBuffer<wchar_t>::insert((uint64_t)&v171, *((unint64_t *)&v172 + 1), v179, 1uLL);
      v131 = *(TTagManager **)(a1 + 176);
      if (*((_QWORD *)&v172 + 1) >= (unint64_t)v172)
      {
        if (v174)
        {
          v179[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v171, *((unint64_t *)&v172 + 1), v179, 1uLL);
          v132 = v171;
          --*((_QWORD *)&v172 + 1);
        }
        else
        {
          v132 = v171;
          if ((_QWORD)v172)
            *((_DWORD *)v171 + v172 - 1) = 0;
        }
      }
      else
      {
        v132 = v171;
        *((_DWORD *)v171 + *((_QWORD *)&v172 + 1)) = 0;
      }
      v133 = TTagManager::addParamTag(v131, (uint64_t)v132, -1);
      v134 = v133;
      v136 = *(uint64_t **)(a1 + 80);
      v135 = *(_QWORD *)(a1 + 88);
      if ((unint64_t)v136 >= v135)
      {
        v138 = ((char *)v136 - *v167) >> 3;
        if ((unint64_t)(v138 + 1) >> 61)
          goto LABEL_198;
        v139 = v135 - (_QWORD)*v167;
        v140 = v139 >> 2;
        if (v139 >> 2 <= (unint64_t)(v138 + 1))
          v140 = v138 + 1;
        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v140;
        if (v141)
          v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 88, v141);
        else
          v142 = 0;
        v143 = (uint64_t *)&v142[8 * v138];
        v144 = &v142[8 * v141];
        *v143 = v134;
        v137 = v143 + 1;
        v146 = *(char **)(a1 + 72);
        v145 = *(char **)(a1 + 80);
        if (v145 != v146)
        {
          do
          {
            v147 = *((_QWORD *)v145 - 1);
            v145 -= 8;
            *--v143 = v147;
          }
          while (v145 != v146);
          v145 = *v167;
        }
        *(_QWORD *)(a1 + 72) = v143;
        *(_QWORD *)(a1 + 80) = v137;
        *(_QWORD *)(a1 + 88) = v144;
        if (v145)
          operator delete(v145);
      }
      else
      {
        *v136 = v133;
        v137 = v136 + 1;
      }
      *(_QWORD *)(a1 + 80) = v137;
      TBuffer<wchar_t>::resize((uint64_t)&v171, v129);
      if (a14)
        v148 = 48;
      else
        v148 = 49;
      v179[0] = v148;
      TBuffer<wchar_t>::insert((uint64_t)&v171, *((unint64_t *)&v172 + 1), v179, 1uLL);
      v149 = *(TTagManager **)(a1 + 176);
      if (*((_QWORD *)&v172 + 1) >= (unint64_t)v172)
      {
        if (v174)
        {
          v179[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v171, *((unint64_t *)&v172 + 1), v179, 1uLL);
          v150 = v171;
          --*((_QWORD *)&v172 + 1);
        }
        else
        {
          v150 = v171;
          if ((_QWORD)v172)
            *((_DWORD *)v171 + v172 - 1) = 0;
        }
      }
      else
      {
        v150 = v171;
        *((_DWORD *)v171 + *((_QWORD *)&v172 + 1)) = 0;
      }
      v151 = TTagManager::addParamTag(v149, (uint64_t)v150, -1);
      v152 = v151;
      v154 = *(uint64_t **)(a1 + 104);
      v153 = *(_QWORD *)(a1 + 112);
      if ((unint64_t)v154 < v153)
      {
        *v154 = v151;
        v155 = v154 + 1;
LABEL_193:
        *(_QWORD *)(a1 + 104) = v155;
        goto LABEL_194;
      }
      v156 = ((char *)v154 - *v168) >> 3;
      if (!((unint64_t)(v156 + 1) >> 61))
      {
        v157 = v153 - (_QWORD)*v168;
        v158 = v157 >> 2;
        if (v157 >> 2 <= (unint64_t)(v156 + 1))
          v158 = v156 + 1;
        if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8)
          v159 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v159 = v158;
        if (v159)
          v160 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 112, v159);
        else
          v160 = 0;
        v161 = (uint64_t *)&v160[8 * v156];
        v162 = &v160[8 * v159];
        *v161 = v152;
        v155 = v161 + 1;
        v164 = *(char **)(a1 + 96);
        v163 = *(char **)(a1 + 104);
        if (v163 != v164)
        {
          do
          {
            v165 = *((_QWORD *)v163 - 1);
            v163 -= 8;
            *--v161 = v165;
          }
          while (v163 != v164);
          v163 = *v168;
        }
        *(_QWORD *)(a1 + 96) = v161;
        *(_QWORD *)(a1 + 104) = v155;
        *(_QWORD *)(a1 + 112) = v162;
        if (v163)
          operator delete(v163);
        goto LABEL_193;
      }
LABEL_198:
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
LABEL_199:
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  }
LABEL_32:
  *(_QWORD *)(v37 + 136) = v169;
  if (v178 && v175 != (int *)v177 && v175)
    MEMORY[0x20BD149A8]();
  return a1;
}

void sub_2097A5D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  void **v23;
  void **v24;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  if (LOBYTE(STACK[0x478]) && a21 != a10 && a21)
    MEMORY[0x20BD149A8]();
  *(_QWORD *)(v22 + 136) = a19;
  if (LOBYTE(STACK[0x898]))
  {
    v26 = STACK[0x480];
    if (STACK[0x480] != a18)
    {
      if (v26)
        MEMORY[0x20BD149A8](v26, 0x1000C4052888210);
    }
  }
  v27 = *v24;
  if (*v24)
  {
    *(_QWORD *)(v21 + 160) = v27;
    operator delete(v27);
  }
  if (*(char *)(v21 + 143) < 0)
    operator delete(*a15);
  v28 = *a17;
  if (*a17)
  {
    *(_QWORD *)(v21 + 104) = v28;
    operator delete(v28);
  }
  v29 = *a16;
  if (*a16)
  {
    *(_QWORD *)(v21 + 80) = v29;
    operator delete(v29);
  }
  v30 = *v23;
  if (*v23)
  {
    *(_QWORD *)(v21 + 56) = v30;
    operator delete(v30);
  }
  v31 = *a20;
  if (*a20)
  {
    *(_QWORD *)(v21 + 32) = v31;
    operator delete(v31);
  }
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(a1);
}

BOOL sortTags(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

void std::vector<TItnControl>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<TItnControl>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

BOOL sortControls(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return a1[1] < a2[1];
  else
    return *a1 < *a2;
}

void TItnRule::~TItnRule(TItnRule *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *((_QWORD *)this + 24);
  if (v2 != -1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 24) + 8 * v2 - 8);
    --*(_QWORD *)(v3 + 128);
  }
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
  {
    *((_QWORD *)this + 13) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 10) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 7) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 3);
  if (v8)
  {
    *((_QWORD *)this + 4) = v8;
    operator delete(v8);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

BOOL TItnRule::operator==(const __int32 *a1, const __int32 *a2)
{
  int v2;
  size_t v3;
  uint64_t v4;
  int v5;
  const __int32 *v6;
  const __int32 *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  v7 = a1;
  if (v3)
  {
    if (v5 < 0)
      a2 = *(const __int32 **)a2;
    if (v2 < 0)
      a1 = *(const __int32 **)a1;
    if (wmemcmp(a1, a2, v3))
      return 0;
  }
  if (*((unsigned __int8 *)v7 + 145) != *((unsigned __int8 *)v6 + 145))
    return 0;
  v8 = (_QWORD *)*((_QWORD *)v7 + 3);
  v9 = (_QWORD *)*((_QWORD *)v7 + 4);
  v10 = v9 - v8;
  v11 = (_QWORD *)*((_QWORD *)v6 + 3);
  if (v10 != (uint64_t)(*((_QWORD *)v6 + 4) - (_QWORD)v11) >> 3)
    return 0;
  if (v9 != v8)
  {
    if (v10 <= 1)
      v10 = 1;
    while (*v8 == *v11)
    {
      ++v8;
      ++v11;
      if (!--v10)
        goto LABEL_20;
    }
    return 0;
  }
LABEL_20:
  v12 = (_QWORD *)*((_QWORD *)v7 + 6);
  v13 = (_QWORD *)*((_QWORD *)v7 + 7);
  v14 = v13 - v12;
  v15 = (_QWORD *)*((_QWORD *)v6 + 6);
  if (v14 != (uint64_t)(*((_QWORD *)v6 + 7) - (_QWORD)v15) >> 3)
    return 0;
  if (v13 != v12)
  {
    if (v14 <= 1)
      v14 = 1;
    while (*v12 == *v15)
    {
      ++v12;
      ++v15;
      if (!--v14)
        goto LABEL_26;
    }
    return 0;
  }
LABEL_26:
  if (std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(v7 + 30, v6 + 30))
    return 0;
  if (*((unsigned __int8 *)v7 + 144) != *((unsigned __int8 *)v6 + 144))
    return 0;
  if (*((_QWORD *)v7 + 24) != *((_QWORD *)v6 + 24))
    return 0;
  if (*((unsigned __int8 *)v7 + 200) != *((unsigned __int8 *)v6 + 200))
    return 0;
  if (v7[55] != v6[55])
    return 0;
  v17 = (_QWORD *)*((_QWORD *)v7 + 19);
  v16 = (_QWORD *)*((_QWORD *)v7 + 20);
  v18 = 0xAAAAAAAAAAAAAAABLL * (v16 - v17);
  v19 = (_QWORD *)*((_QWORD *)v6 + 19);
  if (v18 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v6 + 20) - (_QWORD)v19) >> 3))
    return 0;
  if (v16 == v17)
    return 1;
  v20 = v18 <= 1 ? 1 : 0xAAAAAAAAAAAAAAABLL * (v16 - v17);
  if (*v17 != *v19)
    return 0;
  v21 = 0;
  v23 = v19 + 2;
  v24 = v17 + 2;
  v25 = 1;
  do
  {
    if (*(v24 - 1) != *(v23 - 1))
      break;
    if (*v24 != *v23)
      break;
    v21 = v25 >= v18;
    if (v20 == v25)
      break;
    v26 = v24[1];
    v27 = v23[1];
    v23 += 3;
    v24 += 3;
    ++v25;
  }
  while (v26 == v27);
  return v21;
}

BOOL std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(const __int32 *a1, const __int32 *a2)
{
  int v2;
  size_t v3;
  uint64_t v4;
  int v5;

  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (!v3)
    return 0;
  if (v5 < 0)
    a2 = *(const __int32 **)a2;
  if (v2 < 0)
    a1 = *(const __int32 **)a1;
  return wmemcmp(a1, a2, v3) != 0;
}

_QWORD *TItnRule::save(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  _QWORD **v8;
  _QWORD *v9;
  unsigned int *v10;
  _QWORD **v11;
  unint64_t v12;
  uint64_t Tag;
  unsigned int *v14;
  _QWORD **v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  _QWORD **v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  _QWORD **v24;
  unint64_t v25;
  unsigned int *v26;
  _QWORD **v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  _QWORD **v33;
  _QWORD *result;
  unsigned int *v35;
  __int128 v36;
  _BYTE v37[1024];
  char v38;
  int v39[3];

  v35 = (unsigned int *)v37;
  v36 = xmmword_209A57DD0;
  v38 = 1;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"Rule = \n{\n", 10);
  v6 = a1;
  if (*(char *)(a1 + 23) < 0)
    v6 = *(_QWORD *)a1;
  slashEscape(v6, (uint64_t)&v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Token = \"", 13);
  if (*((_QWORD *)&v36 + 1) >= (unint64_t)v36)
  {
    if (v38)
    {
      v39[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), v39, 1uLL);
      v7 = v35;
      --*((_QWORD *)&v36 + 1);
    }
    else
    {
      v7 = v35;
      if ((_QWORD)v36)
        v35[(_QWORD)v36 - 1] = 0;
    }
  }
  else
  {
    v7 = v35;
    v35[*((_QWORD *)&v36 + 1)] = 0;
  }
  v8 = (_QWORD **)TOutputStream::operator<<((uint64_t)a2, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v8, (uint64_t)"\"\n", 2);
  if (*(char *)(a1 + 143) < 0)
  {
    if (!*(_QWORD *)(a1 + 128))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(a1 + 143))
  {
LABEL_13:
    if (!*(_BYTE *)(a1 + 144))
      goto LABEL_24;
  }
  TBuffer<wchar_t>::resize((uint64_t)&v35, 0);
  v9 = (_QWORD *)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    v9 = (_QWORD *)*v9;
  slashEscape((uint64_t)v9, (uint64_t)&v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Rewrite = \"", 15);
  if (*((_QWORD *)&v36 + 1) >= (unint64_t)v36)
  {
    if (v38)
    {
      v39[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), v39, 1uLL);
      v10 = v35;
      --*((_QWORD *)&v36 + 1);
    }
    else
    {
      v10 = v35;
      if ((_QWORD)v36)
        v35[(_QWORD)v36 - 1] = 0;
    }
  }
  else
  {
    v10 = v35;
    v35[*((_QWORD *)&v36 + 1)] = 0;
  }
  v11 = (_QWORD **)TOutputStream::operator<<((uint64_t)a2, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v11, (uint64_t)"\"\n", 2);
  if (!*(_BYTE *)(a1 + 144))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    IsRewriteActive = '0'\n", 26);
LABEL_24:
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    LeftContexts = {", 20);
    if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 24))
    {
      v12 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)" '", 2);
        Tag = TTagManager::getTag(a3, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v12));
        v14 = (unsigned int *)Tag;
        if (*(char *)(Tag + 23) < 0)
          v14 = *(unsigned int **)Tag;
        v15 = (_QWORD **)TOutputStream::operator<<((uint64_t)a2, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v15, (uint64_t)"'", 1);
        ++v12;
      }
      while (v12 < (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)" }\n", 3);
  }
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 48))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    RightContexts = {", 21);
    if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 48))
    {
      v16 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)" '", 2);
        v17 = TTagManager::getTag(a3, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v16));
        v18 = (unsigned int *)v17;
        if (*(char *)(v17 + 23) < 0)
          v18 = *(unsigned int **)v17;
        v19 = (_QWORD **)TOutputStream::operator<<((uint64_t)a2, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v19, (uint64_t)"'", 1);
        ++v16;
      }
      while (v16 < (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)" }\n", 3);
  }
  if (*(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 160))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Controls = {", 16);
    if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
    {
      v20 = 0;
      v21 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)" '", 2);
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + v20) - 1;
        v23 = (unsigned int *)&dword_209A58FE0;
        if (v22 <= 0xB)
          v23 = (unsigned int *)off_24C21AD08[v22];
        v24 = (_QWORD **)TOutputStream::operator<<((uint64_t)a2, v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v24, (uint64_t)"-", 1);
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + v20 + 8) - 1;
        v26 = (unsigned int *)&dword_209A58FE0;
        if (v25 <= 4)
          v26 = (unsigned int *)off_24C21AD68[v25];
        v27 = (_QWORD **)TOutputStream::operator<<((uint64_t)a2, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v27, (uint64_t)"'", 1);
        ++v21;
        v20 += 24;
      }
      while (v21 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 3));
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)" }\n", 3);
  }
  v28 = *(_QWORD *)(a1 + 192);
  if (v28 != -1)
  {
    if (v28
      && (v29 = v28 - 1,
          v30 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 24),
          v29 < (*(_QWORD *)(*(_QWORD *)(a1 + 184) + 32) - v30) >> 3))
    {
      v31 = *(_QWORD *)(v30 + 8 * v29);
    }
    else
    {
      v31 = 0;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Parameter = '", 17);
    v32 = (unsigned int *)(v31 + 16);
    if (*(char *)(v31 + 39) < 0)
      v32 = *(unsigned int **)v32;
    v33 = (_QWORD **)TOutputStream::operator<<((uint64_t)a2, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v33, (uint64_t)"-", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v33, (uint64_t)"'\n", 2);
  }
  if (*(_BYTE *)(a1 + 216))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    UserAdded = '1'\n", 20);
  if (*(_BYTE *)(a1 + 217))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"    Deleted = '1'\n", 18);
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"}\n\n", 3);
  if (v38)
  {
    result = v35;
    if (v35 != (unsigned int *)v37)
    {
      if (v35)
        return (_QWORD *)MEMORY[0x20BD149A8]();
    }
  }
  return result;
}

void sub_2097A67FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  if (LOBYTE(STACK[0x428]))
  {
    if (a11 != v11 && a11 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

void TItnRuleManager::TItnRuleManager(TItnRuleManager *this, TInputStream *a2, TTagManager *a3, TLexicon *a4, TItnParamManager *a5)
{
  char *v6;
  int BoolParameter;
  uint64_t v9;
  unint64_t v10;
  const TFileObject *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  _QWORD *exception;
  std::string *v18;
  const char *v19;
  _QWORD *v20;
  std::string *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  _BYTE __p[24];
  _QWORD v26[128];
  char v27;
  __int128 v28;
  uint64_t v29;
  int *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *(_QWORD *)this = &off_24C2153D0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  v6 = (char *)this + 88;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 7) = a5;
  *((_QWORD *)this + 8) = a3;
  *((_QWORD *)this + 9) = a4;
  *((_BYTE *)this + 80) = 0;
  if (*((_BYTE *)a2 + 8))
  {
    v24 = (char *)this + 112;
    if (TInputStream::verifyHeader((uint64_t)a2, "ItnRule", (uint64_t)pItnRuleVersion, 6))
    {
      std::string::basic_string[abi:ne180100]<0>(&v33, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v34) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v33, *((std::string::size_type *)&v33 + 1));
      }
      else
      {
        *(_OWORD *)&__p[8] = v33;
        v26[0] = v34;
      }
      *(_QWORD *)__p = &unk_24C214BA0;
      if (v26[0] >= 0)
        v16 = &__p[8];
      else
        v16 = *(const char **)&__p[8];
      conditionalAssert(v16, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/rulemgr.cpp", 602, v12, v13);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v26[0]) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v34) < 0)
        operator delete((void *)v33);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *exception = aPpx;
      v18 = (std::string *)(exception + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v22 = *(_OWORD *)__p;
        exception[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v22;
      }
      *exception = &unk_24C214BA0;
    }
    BoolParameter = TInputStream::getBoolParameter(a2, "Tokens", 1);
    TFileObjectParser::TFileObjectParser((TFileObjectParser *)&v33, a2);
    v9 = v33;
    v31 = xmmword_209A57DB0;
    v30 = dword_209A58FA4;
    v32 = -1;
    if (TFileObject::verify(v33, (uint64_t)&v30, 1uLL, 1))
    {
      std::string::basic_string[abi:ne180100]<0>(&v28, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v29) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v28, *((std::string::size_type *)&v28 + 1));
      }
      else
      {
        *(_OWORD *)&__p[8] = v28;
        v26[0] = v29;
      }
      *(_QWORD *)__p = &unk_24C214BA0;
      if (v26[0] >= 0)
        v19 = &__p[8];
      else
        v19 = *(const char **)&__p[8];
      conditionalAssert(v19, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/rulemgr.cpp", 617, v14, v15);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v26[0]) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v29) < 0)
        operator delete((void *)v28);
      v20 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *v20 = aPpx;
      v21 = (std::string *)(v20 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v23 = *(_OWORD *)__p;
        v20[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v23;
      }
      *v20 = &unk_24C214BA0;
    }
    v10 = *((_QWORD *)a2 + 12);
    for (i = *(const TFileObject **)(v9 + 24); i; i = (const TFileObject *)*((_QWORD *)i + 2))
      TItnRuleManager::addRule(this, i, BoolParameter, v10);
    if (v10 >= 6)
    {
      *(_QWORD *)__p = v26;
      *(_OWORD *)&__p[8] = xmmword_209A57DD0;
      v27 = 1;
      TInputStream::getStringParameter((uint64_t)a2, "HintRewriteNever", (uint64_t)__p, &dword_209A58FE0);
      if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
      {
        if (v27)
        {
          LODWORD(v28) = 0;
          TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)&v28, 1uLL);
          --*(_QWORD *)&__p[16];
        }
        else if (*(_QWORD *)&__p[8])
        {
          *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
        }
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
      }
      MEMORY[0x20BD147A4](v6);
      TInputStream::getStringParameter((uint64_t)a2, "HintRewriteAlways", (uint64_t)__p, &dword_209A58FE0);
      if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
      {
        if (v27)
        {
          LODWORD(v28) = 0;
          TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)&v28, 1uLL);
          --*(_QWORD *)&__p[16];
        }
        else if (*(_QWORD *)&__p[8])
        {
          *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
        }
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
      }
      MEMORY[0x20BD147A4](v24);
      if (v27 && *(_QWORD **)__p != v26)
      {
        if (*(_QWORD *)__p)
          MEMORY[0x20BD149A8]();
      }
    }
    TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v33);
  }
}

void sub_2097A6E8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, void *a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void **v23;
  char **v24;
  uint64_t v25;
  void *v27;
  _Unwind_Exception *v28;
  void **v29;

  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)(v25 - 168));
  if (a2 == 1)
  {
    __cxa_begin_catch(v28);
    TItnRuleManager::freeMemory((TItnRuleManager *)v20);
    __cxa_rethrow();
  }
  if (*(char *)(v20 + 135) < 0)
    operator delete(*v29);
  if (*(char *)(v20 + 111) < 0)
    operator delete(*v22);
  v27 = *v23;
  if (*v23)
  {
    *(_QWORD *)(v20 + 40) = v27;
    operator delete(v27);
  }
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy(v21, *v24);
  _Unwind_Resume(v28);
}

void sub_2097A6FA0()
{
  JUMPOUT(0x2097A6FDCLL);
}

void sub_2097A6FAC()
{
  JUMPOUT(0x2097A7004);
}

void sub_2097A6FB8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  TItnRuleManager *v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  va_list va;

  va_start(va, a4);
  if (LOBYTE(STACK[0x428]))
    TSegmenter::findSegmentEnd((uint64_t *)va, v5);
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)(v6 - 168));
  if (a2 == 1)
  {
    __cxa_begin_catch(v8);
    TItnRuleManager::freeMemory(v4);
    __cxa_rethrow();
  }
  JUMPOUT(0x2097A7004);
}

void sub_2097A6FFC()
{
  __cxa_end_catch();
  JUMPOUT(0x2097A7004);
}

uint64_t TItnRuleManager::addRule(TItnRuleManager *this, const TFileObject *a2, int a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int32 **v9;
  char v10;
  uint64_t v11;
  unsigned __int8 v12;
  char v13;
  int v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  char v22;
  uint64_t v23;
  unsigned __int8 v24;
  char v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  __int32 *v29;
  uint64_t HeadClone;
  char v31;
  const __int32 *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  __int32 *v36;
  uint64_t v37;
  int *v38;
  const __int32 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  int v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  void **v52;
  void **v53;
  unsigned int *v54;
  void **v55;
  unsigned int *v56;
  unsigned __int8 v57;
  char v58;
  void **v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  TLocaleInfo *v76;
  TLocaleInfo *v77;
  TLocaleInfo *v78;
  TLocaleInfo *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  BOOL v87;
  char v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  __int32 *v92;
  int *v93;
  const __int32 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void **v99;
  void **v100;
  unsigned int *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  void **v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  void **v111;
  int v112;
  void **v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void **v118;
  void **v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t *v127;
  char *v128;
  char *v129;
  uint64_t *v130;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void **v136;
  char *v137;
  char *v138;
  __n128 *v139;
  const TItnRule *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void **v145;
  unint64_t v146;
  char **v147;
  const TItnRule **v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  const TItnRule **v155;
  char *v156;
  char *v157;
  char *v158;
  const TItnRule *v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  uint64_t *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  char *exception;
  std::string *v187;
  const char *v188;
  char *v189;
  std::string *v190;
  const char *v191;
  char *v192;
  std::string *v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t *v197;
  unint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  BOOL v203;
  char *v204;
  uint64_t v206;
  char v207;
  uint64_t v208;
  BOOL v209;
  uint64_t v210;
  void *v211;
  uint64_t *v212;
  char *v213;
  char v214;
  void *v215;
  _BYTE *v216;
  uint64_t v217;
  void *v218;
  _BYTE *v219;
  uint64_t v220;
  void *v221[2];
  char v222;
  void *v223[2];
  char v224;
  void *v225[3];
  _QWORD v226[97];
  char v227;
  void *__p[4];
  int v229;
  __int32 *v230;
  __int128 v231;
  uint64_t v232;
  __int32 *v233;
  __int128 v234;
  uint64_t v235;
  __int32 *v236;
  __int128 v237;
  uint64_t v238;
  __int32 *v239;
  __int128 v240;
  uint64_t v241;
  __int32 *v242;
  __int128 v243;
  uint64_t v244;
  __int32 *v245;
  __int128 v246;
  uint64_t v247;
  __int32 *v248;
  __int128 v249;
  uint64_t v250;
  __int32 *v251;
  __int128 v252;
  uint64_t v253;
  __int32 *v254;
  uint64_t v255;
  __int128 v256;
  uint64_t v257;

  v257 = *MEMORY[0x24BDAC8D0];
  v218 = 0;
  v219 = 0;
  v220 = 0;
  v215 = 0;
  v216 = 0;
  v217 = 0;
  *((_BYTE *)this + 80) = 1;
  v231 = xmmword_209A57D80;
  v230 = dword_209A58FE4;
  v232 = -1;
  v234 = xmmword_209A57D80;
  v233 = dword_209A5900C;
  v235 = -1;
  v237 = xmmword_209A57D60;
  v236 = dword_209A5902C;
  v238 = -1;
  v240 = xmmword_209A57D80;
  v239 = dword_209A59044;
  v241 = -1;
  v243 = xmmword_209A57D80;
  v242 = dword_209A59064;
  v244 = -1;
  v246 = xmmword_209A57D80;
  v245 = dword_209A59098;
  v247 = -1;
  v249 = xmmword_209A57D80;
  v248 = dword_209A590D0;
  v250 = -1;
  v252 = xmmword_209A57D80;
  v251 = dword_209A590F8;
  v253 = -1;
  v254 = dword_209A5911C;
  v255 = 2;
  v256 = xmmword_209A57D70;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v230, 9uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    v225[0] = (void *)aPpx;
    if (SHIBYTE(__p[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v225[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v225[1] = *(_OWORD *)__p;
      v226[0] = __p[2];
    }
    v225[0] = &unk_24C214BA0;
    if (v226[0] >= 0)
      v185 = (const char *)&v225[1];
    else
      v185 = (const char *)v225[1];
    conditionalAssert(v185, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/rulemgr.cpp", 725, v179, v180);
    v225[0] = (void *)aPpx;
    if (SHIBYTE(v226[0]) < 0)
      operator delete(v225[1]);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    exception = (char *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v225, &byte_209A88803);
    *(_QWORD *)exception = aPpx;
    v187 = (std::string *)(exception + 8);
    if (SHIBYTE(v225[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v187, (const std::string::value_type *)v225[0], (std::string::size_type)v225[1]);
    }
    else
    {
      v194 = *(_OWORD *)v225;
      *((void **)exception + 3) = v225[2];
      *(_OWORD *)&v187->__r_.__value_.__l.__data_ = v194;
    }
    *(_QWORD *)exception = &unk_24C214BA0;
  }
  v214 = 0;
  v7 = *((_QWORD *)a2 + 3);
  if (!v7)
  {
    v209 = 0;
    v9 = 0;
    v208 = 0;
    v210 = 0;
    v211 = 0;
    v207 = 0;
    v212 = 0;
    v213 = 0;
    v81 = -1;
    goto LABEL_268;
  }
  v197 = (uint64_t *)a2;
  v198 = a4;
  v210 = 0;
  v8 = 0;
  v202 = 0;
  v9 = 0;
  v209 = 0;
  v200 = 0;
  v201 = -1;
  v199 = 1;
  do
  {
    if (!wcscmp(*(const __int32 **)(v7 + 8), dword_209A5902C))
    {
      if (TFileObject::verify((TFileObject *)v7, 0, 0))
      {
        v214 = 1;
      }
      else if (TLexicon::checkName(*((_QWORD *)this + 9), *(int **)(v7 + 24), a3, 0xFFFFFFFFFFFFFFFFLL))
      {
        v214 = 1;
        loggableFileObject((uint64_t *)v7);
        v14 = SHIBYTE(v225[2]);
        v15 = (void **)v225[0];
        loggableUnicode(*(unsigned int **)(v7 + 24), __p);
        v20 = v225;
        if (v14 < 0)
          v20 = v15;
        v21 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v21 = (void **)__p[0];
        tknPrintf("Error: %s'%s' is an invalid token name.\n", v16, v17, v18, v19, v20, v21);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v225[2]) < 0)
          operator delete(v225[0]);
      }
      else
      {
        v28 = *((_QWORD *)this + 9);
        v29 = *(__int32 **)(v7 + 24);
        if (a3)
          HeadClone = TLexicon::findHeadClone(v28, v29);
        else
          HeadClone = TLexicon::findWord(v28, v29);
        v9 = (__int32 **)HeadClone;
        if (!HeadClone)
        {
          v9 = (__int32 **)TLexicon::addTempWord(*((_QWORD *)this + 9), *(int **)(v7 + 24), 0, 0, 0);
          if (*(_BYTE *)(getPropCheckTokenExistence() + 8))
          {
            v225[0] = v226;
            *(_OWORD *)&v225[1] = xmmword_209A57DD0;
            v227 = 1;
            TWord::getWordSense(v9, (uint64_t)v225);
            if (v225[2] >= v225[1])
            {
              if (v227)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)v225, (unint64_t)v225[2], (int *)__p, 1uLL);
                v32 = (const __int32 *)v225[0];
                --v225[2];
              }
              else
              {
                v32 = (const __int32 *)v225[0];
                if (v225[1])
                  *((_DWORD *)v225[0] + (uint64_t)v225[1] - 1) = 0;
              }
            }
            else
            {
              v32 = (const __int32 *)v225[0];
              *((_DWORD *)v225[0] + (uint64_t)v225[2]) = 0;
            }
            if (wcsncmp(v32, dword_209A5915C, 4uLL))
            {
              loggableFileObject((uint64_t *)v7);
              v45 = SHIBYTE(__p[2]);
              v46 = (void **)__p[0];
              loggableUnicode((unsigned int *)*v9, v223);
              v51 = __p;
              if (v45 < 0)
                v51 = v46;
              v52 = v223;
              if (v224 < 0)
                v52 = (void **)v223[0];
              tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v47, v48, v49, v50, v51, v52);
              if (v224 < 0)
                operator delete(v223[0]);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
            }
            if (v227 && v225[0] != v226 && v225[0])
              MEMORY[0x20BD149A8]();
          }
        }
      }
    }
    else if (!wcscmp(*(const __int32 **)(v7 + 8), dword_209A59044))
    {
      v13 = TFileObject::verify((TFileObject *)v7, 0, 1);
      v214 |= v13;
      if (!v214)
        v202 = *(_QWORD *)(v7 + 24);
    }
    else if (!wcscmp(*(const __int32 **)(v7 + 8), dword_209A58FE4))
    {
      v22 = TFileObject::verify((TFileObject *)v7, 0, 0);
      v214 |= v22;
      if (!v214)
      {
        v23 = *(_QWORD *)(v7 + 24);
        if ((v24 & 1) == 0
        {
          v76 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v76);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v76;
        }
        BYTE4(v210) = TLocaleInfo::stringToBool(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v23, (BOOL *)&v214);
      }
    }
    else
    {
      if (!wcscmp(*(const __int32 **)(v7 + 8), dword_209A5900C))
      {
        v25 = TFileObject::verify((TFileObject *)v7, 0, 0);
        v214 |= v25;
        if (!v214)
        {
          v26 = *(_QWORD *)(v7 + 24);
          if ((v27 & 1) == 0
          {
            v77 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v77);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v77;
          }
          LOBYTE(v210) = TLocaleInfo::stringToBool(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v26, (BOOL *)&v214);
        }
        goto LABEL_77;
      }
      if (!wcscmp(*(const __int32 **)(v7 + 8), dword_209A59064))
      {
        v31 = formatContexts((uint64_t *)v7, *((_QWORD *)this + 8), &v218);
LABEL_41:
        v214 |= v31;
        goto LABEL_77;
      }
      if (!wcscmp(*(const __int32 **)(v7 + 8), dword_209A59098))
      {
        v31 = formatContexts((uint64_t *)v7, *((_QWORD *)this + 8), &v215);
        goto LABEL_41;
      }
      if (!wcscmp(*(const __int32 **)(v7 + 8), dword_209A590F8))
      {
        v200 = v7;
      }
      else
      {
        if (!wcscmp(*(const __int32 **)(v7 + 8), dword_209A59170)
          || !wcscmp(*(const __int32 **)(v7 + 8), dword_209A590D0))
        {
          v33 = *((_QWORD *)this + 7);
          if ((TFileObject::verify((TFileObject *)v7, 0, 0) & 1) != 0)
            goto LABEL_48;
          v36 = wcschr(*(__int32 **)(v7 + 24), 45);
          if (v36)
          {
            v37 = v8;
            v225[0] = v226;
            *(_OWORD *)&v225[1] = xmmword_209A57DD0;
            v227 = 1;
            v38 = *(int **)(v7 + 24);
            TBuffer<wchar_t>::resize((uint64_t)v225, 0);
            TBuffer<wchar_t>::insert((uint64_t)v225, 0, v38, v36 - v38);
            if (v225[2] >= v225[1])
            {
              v8 = v37;
              if (v227)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)v225, (unint64_t)v225[2], (int *)__p, 1uLL);
                v39 = (const __int32 *)v225[0];
                --v225[2];
              }
              else
              {
                v39 = (const __int32 *)v225[0];
                if (v225[1])
                  *((_DWORD *)v225[0] + (uint64_t)v225[1] - 1) = 0;
              }
            }
            else
            {
              v39 = (const __int32 *)v225[0];
              *((_DWORD *)v225[0] + (uint64_t)v225[2]) = 0;
              v8 = v37;
            }
            TParamManager::find(v33, v39, (uint64_t *)v221);
            TParamManager::end(v33, __p);
            if (v221[0] == __p[0])
            {
              loggableFileObject((uint64_t *)v7);
              if (SHIBYTE(__p[2]) >= 0)
                v55 = __p;
              else
                v55 = (void **)__p[0];
              if (v225[2] >= v225[1])
              {
                if (v227)
                {
                  LODWORD(v211) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)v225, (unint64_t)v225[2], (int *)&v211, 1uLL);
                  v56 = (unsigned int *)v225[0];
                  --v225[2];
                }
                else
                {
                  v56 = (unsigned int *)v225[0];
                  if (v225[1])
                    *((_DWORD *)v225[0] + (uint64_t)v225[1] - 1) = 0;
                }
              }
              else
              {
                v56 = (unsigned int *)v225[0];
                *((_DWORD *)v225[0] + (uint64_t)v225[2]) = 0;
              }
              loggableUnicode(v56, v223);
              v70 = v223;
              if (v224 < 0)
                v70 = (void **)v223[0];
              tknPrintf("Error: %s'%s' : Parameter name does not exist\n", v66, v67, v68, v69, v55, v70);
LABEL_122:
              if (v224 < 0)
                operator delete(v223[0]);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              v34 = 0;
              v35 = -1;
            }
            else
            {
              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 24) + 8 * *((_QWORD *)v221[0] + 5) - 8) + 8))
              {
                loggableFileObject((uint64_t *)v7);
                if (SHIBYTE(__p[2]) >= 0)
                  v53 = __p;
                else
                  v53 = (void **)__p[0];
                if (v225[2] >= v225[1])
                {
                  if (v227)
                  {
                    LODWORD(v211) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)v225, (unint64_t)v225[2], (int *)&v211, 1uLL);
                    v54 = (unsigned int *)v225[0];
                    --v225[2];
                  }
                  else
                  {
                    v54 = (unsigned int *)v225[0];
                    if (v225[1])
                      *((_DWORD *)v225[0] + (uint64_t)v225[1] - 1) = 0;
                  }
                }
                else
                {
                  v54 = (unsigned int *)v225[0];
                  *((_DWORD *)v225[0] + (uint64_t)v225[2]) = 0;
                }
                loggableUnicode(v54, v223);
                v65 = v223;
                if (v224 < 0)
                  v65 = (void **)v223[0];
                tknPrintf("Error: %s'%s' : This parameter type cannot be used in word rules\n", v61, v62, v63, v64, v53, v65);
                goto LABEL_122;
              }
              LOBYTE(v229) = 0;
              if ((v57 & 1) == 0
              {
                v79 = (TLocaleInfo *)operator new();
                TLocaleInfo::TLocaleInfo(v79);
                TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v79;
                v8 = v37;
              }
              v58 = TLocaleInfo::stringToBool(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (uint64_t)(v36 + 1), (BOOL *)&v229);
              if ((_BYTE)v229)
              {
                loggableFileObject((uint64_t *)v7);
                if (SHIBYTE(__p[2]) >= 0)
                  v59 = __p;
                else
                  v59 = (void **)__p[0];
                if (v225[2] >= v225[1])
                {
                  if (v227)
                  {
                    LODWORD(v211) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)v225, (unint64_t)v225[2], (int *)&v211, 1uLL);
                    v60 = (unsigned int *)v225[0];
                    --v225[2];
                  }
                  else
                  {
                    v60 = (unsigned int *)v225[0];
                    if (v225[1])
                      *((_DWORD *)v225[0] + (uint64_t)v225[1] - 1) = 0;
                  }
                }
                else
                {
                  v60 = (unsigned int *)v225[0];
                  *((_DWORD *)v225[0] + (uint64_t)v225[2]) = 0;
                }
                loggableUnicode(v60, v223);
                v75 = v223;
                if (v224 < 0)
                  v75 = (void **)v223[0];
                tknPrintf("Error: %s'%s' : The value is out of range, expected a BOOLean.\n", v71, v72, v73, v74, v59, v75);
                goto LABEL_122;
              }
              v35 = *((_QWORD *)v221[0] + 5);
              v34 = v58;
            }
            if (v227 && v225[0] != v226 && v225[0])
              MEMORY[0x20BD149A8]();
          }
          else
          {
            loggableFileObject((uint64_t *)v7);
            v44 = v225;
            if (SHIBYTE(v225[2]) < 0)
              v44 = (void **)v225[0];
            tknPrintf("Error: %sSyntax error, no '-' in control value\n", v40, v41, v42, v43, v44);
            if (SHIBYTE(v225[2]) < 0)
              operator delete(v225[0]);
LABEL_48:
            v34 = 0;
            v35 = -1;
          }
          v209 = v34 != 0;
          v201 = v35;
          v214 |= v35 == -1;
          goto LABEL_77;
        }
        if (!wcscmp(*(const __int32 **)(v7 + 8), dword_209A5911C))
        {
          v10 = TFileObject::verify((TFileObject *)v7, 0, 0);
          v214 |= v10;
          if (!v214)
          {
            v11 = *(_QWORD *)(v7 + 24);
            if ((v12 & 1) == 0
            {
              v78 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v78);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v78;
            }
            v199 = TLocaleInfo::stringToBool(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, (BOOL *)&v214);
          }
          v8 = 1;
        }
      }
    }
LABEL_77:
    v7 = *(_QWORD *)(v7 + 16);
  }
  while (v7);
  v80 = v214;
  if (v214)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    v225[0] = (void *)aPpx;
    if (SHIBYTE(__p[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v225[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v225[1] = *(_OWORD *)__p;
      v226[0] = __p[2];
    }
    v225[0] = &unk_24C214BA0;
    if (v226[0] >= 0)
      v188 = (const char *)&v225[1];
    else
      v188 = (const char *)v225[1];
    conditionalAssert(v188, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/rulemgr.cpp", 830, v181, v182);
    v225[0] = (void *)aPpx;
    if (SHIBYTE(v226[0]) < 0)
      operator delete(v225[1]);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v189 = (char *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v225, &byte_209A88803);
    *(_QWORD *)v189 = aPpx;
    v190 = (std::string *)(v189 + 8);
    if (SHIBYTE(v225[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v190, (const std::string::value_type *)v225[0], (std::string::size_type)v225[1]);
    }
    else
    {
      v195 = *(_OWORD *)v225;
      *((void **)v189 + 3) = v225[2];
      *(_OWORD *)&v190->__r_.__value_.__l.__data_ = v195;
    }
    *(_QWORD *)v189 = &unk_24C214BA0;
  }
  v81 = v201;
  if (v202)
  {
    v208 = v202;
  }
  else
  {
    v208 = 0;
    if (((v8 ^ 1) & 1) == 0)
    {
      loggableFileObject(v197);
      if (SHIBYTE(v225[2]) >= 0)
        v86 = v225;
      else
        v86 = (void **)v225[0];
      tknPrintf("Error: %sIsRewriteActive = '1' but no Rewrite attribute specified\n", v82, v83, v84, v85, v86);
      if (SHIBYTE(v225[2]) < 0)
        operator delete(v225[0]);
      v208 = 0;
      v80 = 1;
      v214 = 1;
    }
  }
  v87 = v202 != 0;
  v211 = 0;
  v212 = 0;
  v213 = 0;
  if (v200)
  {
    *(int64x2_t *)&__p[1] = vdupq_n_s64(1uLL);
    __p[0] = &unk_209A58FE0;
    __p[3] = (void *)-1;
    v203 = v202 != 0;
    if ((TFileObject::verify(v200, (uint64_t)__p, 1uLL, 1) & 1) != 0)
    {
      v88 = 1;
      goto LABEL_265;
    }
    v89 = *(_QWORD *)(v200 + 24);
    if (v89)
    {
      v90 = 0;
      do
      {
        ++v90;
        v89 = *(_QWORD *)(v89 + 16);
      }
      while (v89);
    }
    else
    {
      v90 = 0;
    }
    std::vector<TPItnRuleControl>::reserve(&v211, v90);
    v91 = *(_QWORD *)(v200 + 24);
    if (v91)
    {
      v88 = 0;
      while (1)
      {
        v92 = wcschr(*(__int32 **)(v91 + 24), 45);
        if (!v92)
        {
          loggableFileObject((uint64_t *)v91);
          v99 = v225;
          if (SHIBYTE(v225[2]) < 0)
            v99 = (void **)v225[0];
          tknPrintf("Error: %sSyntax error, no '-' in control value\n", v95, v96, v97, v98, v99);
          if (SHIBYTE(v225[2]) < 0)
            operator delete(v225[0]);
          v88 = 1;
          goto LABEL_255;
        }
        v225[0] = v226;
        *(_OWORD *)&v225[1] = xmmword_209A57DD0;
        v227 = 1;
        v93 = *(int **)(v91 + 24);
        TBuffer<wchar_t>::resize((uint64_t)v225, 0);
        TBuffer<wchar_t>::insert((uint64_t)v225, 0, v93, v92 - v93);
        if (v225[2] >= v225[1])
        {
          if (v227)
          {
            LODWORD(v223[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)v225, (unint64_t)v225[2], (int *)v223, 1uLL);
            v94 = (const __int32 *)v225[0];
            --v225[2];
          }
          else
          {
            v94 = (const __int32 *)v225[0];
            if (v225[1])
              *((_DWORD *)v225[0] + (uint64_t)v225[1] - 1) = 0;
          }
        }
        else
        {
          v94 = (const __int32 *)v225[0];
          *((_DWORD *)v225[0] + (uint64_t)v225[2]) = 0;
        }
        if (!wcscmp(v94, (const __int32 *)"C"))
        {
          v102 = 6;
        }
        else if (!wcscmp(v94, (const __int32 *)"N"))
        {
          v102 = 4;
        }
        else if (!wcscmp(v94, (const __int32 *)"A"))
        {
          v102 = 5;
        }
        else if (!wcscmp(v94, (const __int32 *)"N"))
        {
          v102 = 1;
        }
        else if (!wcscmp(v94, (const __int32 *)"O"))
        {
          v102 = 2;
        }
        else if (!wcscmp(v94, (const __int32 *)"T"))
        {
          v102 = 3;
        }
        else if (!wcscmp(v94, (const __int32 *)"R"))
        {
          v102 = 9;
        }
        else if (!wcscmp(v94, (const __int32 *)"S"))
        {
          v102 = 8;
        }
        else if (!wcscmp(v94, (const __int32 *)"K"))
        {
          v102 = 10;
        }
        else if (!wcscmp(v94, (const __int32 *)"H"))
        {
          v102 = 11;
        }
        else if (!wcscmp(v94, (const __int32 *)"R"))
        {
          v102 = 12;
        }
        else
        {
          if (wcscmp(v94, (const __int32 *)"F"))
          {
            loggableFileObject((uint64_t *)v91);
            if (v224 >= 0)
              v100 = v223;
            else
              v100 = (void **)v223[0];
            if (v225[2] >= v225[1])
            {
              if (v227)
              {
                v229 = 0;
                TBuffer<wchar_t>::insert((uint64_t)v225, (unint64_t)v225[2], &v229, 1uLL);
                v101 = (unsigned int *)v225[0];
                --v225[2];
              }
              else
              {
                v101 = (unsigned int *)v225[0];
                if (v225[1])
                  *((_DWORD *)v225[0] + (uint64_t)v225[1] - 1) = 0;
              }
            }
            else
            {
              v101 = (unsigned int *)v225[0];
              *((_DWORD *)v225[0] + (uint64_t)v225[2]) = 0;
            }
            loggableUnicode(v101, v221);
            v136 = v221;
            if (v222 < 0)
              v136 = (void **)v221[0];
            tknPrintf("Error: %s'%s' : Bad control name\n", v132, v133, v134, v135, v100, v136);
LABEL_227:
            if (v222 < 0)
              operator delete(v221[0]);
            if (v224 < 0)
              operator delete(v223[0]);
            v88 = 1;
            goto LABEL_249;
          }
          v102 = 7;
        }
        if (!wcscmp(v92 + 1, (const __int32 *)"O"))
        {
          v103 = 1;
        }
        else if (!wcscmp(v92 + 1, (const __int32 *)"O"))
        {
          v103 = 2;
        }
        else if (!wcscmp(v92 + 1, (const __int32 *)"B"))
        {
          v103 = 4;
        }
        else if (!wcscmp(v92 + 1, (const __int32 *)"A"))
        {
          v103 = 3;
        }
        else if (!wcscmp(v92 + 1, (const __int32 *)"I"))
        {
          v103 = 5;
        }
        else if (!wcscmp(v92 + 1, (const __int32 *)"T"))
        {
          v103 = 6;
        }
        else
        {
          v103 = -1;
        }
        if (v103 != 6)
        {
          if (v103 != -1)
          {
            v120 = v212;
            if (v212 >= (uint64_t *)v213)
            {
              v122 = ((char *)v212 - (_BYTE *)v211) >> 4;
              v123 = v122 + 1;
              if ((unint64_t)(v122 + 1) >> 60)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v124 = v213 - (_BYTE *)v211;
              if ((v213 - (_BYTE *)v211) >> 3 > v123)
                v123 = v124 >> 3;
              if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF0)
                v125 = 0xFFFFFFFFFFFFFFFLL;
              else
                v125 = v123;
              if (v125)
                v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v213, v125);
              else
                v126 = 0;
              v127 = (uint64_t *)&v126[16 * v122];
              *v127 = v102;
              v127[1] = v103;
              v129 = (char *)v211;
              v128 = (char *)v212;
              v130 = v127;
              if (v212 != v211)
              {
                do
                {
                  *((_OWORD *)v130 - 1) = *((_OWORD *)v128 - 1);
                  v130 -= 2;
                  v128 -= 16;
                }
                while (v128 != v129);
                v128 = (char *)v211;
              }
              v121 = v127 + 2;
              v211 = v130;
              v212 = v127 + 2;
              v213 = &v126[16 * v125];
              if (v128)
                operator delete(v128);
            }
            else
            {
              *v212 = v102;
              v120[1] = v103;
              v121 = v120 + 2;
            }
            v212 = v121;
            goto LABEL_249;
          }
          loggableFileObject((uint64_t *)v91);
          v104 = v224;
          v105 = (void **)v223[0];
          loggableUnicode((unsigned int *)v92 + 1, v221);
          v110 = v223;
          if (v104 < 0)
            v110 = v105;
          v111 = v221;
          if (v222 < 0)
            v111 = (void **)v221[0];
          tknPrintf("Error: %s'%s' : Bad control param\n", v106, v107, v108, v109, v110, v111);
          goto LABEL_227;
        }
        if (v198 >= 5)
        {
          loggableFileObject((uint64_t *)v91);
          v112 = v224;
          v113 = (void **)v223[0];
          loggableUnicode((unsigned int *)v92 + 1, v221);
          v118 = v223;
          if (v112 < 0)
            v118 = v113;
          v119 = v221;
          if (v222 < 0)
            v119 = (void **)v221[0];
          tknPrintf("Error: %s'%s' : Transfer control param is deprecated.\n", v114, v115, v116, v117, v118, v119);
          goto LABEL_227;
        }
LABEL_249:
        if (v227)
        {
          if (v225[0] != v226 && v225[0] != 0)
            MEMORY[0x20BD149A8]();
        }
LABEL_255:
        v91 = *(_QWORD *)(v91 + 16);
        if (!v91)
          goto LABEL_265;
      }
    }
    v88 = 0;
LABEL_265:
    v80 = v214 | v88 & 1;
    v214 = v80;
    v81 = v201;
    v87 = v203;
  }
  if (v80)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    v225[0] = (void *)aPpx;
    if (SHIBYTE(__p[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v225[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v225[1] = *(_OWORD *)__p;
      v226[0] = __p[2];
    }
    v225[0] = &unk_24C214BA0;
    if (v226[0] >= 0)
      v191 = (const char *)&v225[1];
    else
      v191 = (const char *)v225[1];
    conditionalAssert(v191, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/rulemgr.cpp", 848, v183, v184);
    v225[0] = (void *)aPpx;
    if (SHIBYTE(v226[0]) < 0)
      operator delete(v225[1]);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v192 = (char *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v225, &byte_209A88803);
    *(_QWORD *)v192 = aPpx;
    v193 = (std::string *)(v192 + 8);
    if (SHIBYTE(v225[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v193, (const std::string::value_type *)v225[0], (std::string::size_type)v225[1]);
    }
    else
    {
      v196 = *(_OWORD *)v225;
      *((void **)v192 + 3) = v225[2];
      *(_OWORD *)&v193->__r_.__value_.__l.__data_ = v196;
    }
    *(_QWORD *)v192 = &unk_24C214BA0;
  }
  v207 = (v87 | v8) & v199;
LABEL_268:
  if (v218 == v219)
    v137 = 0;
  else
    v137 = (char *)v218;
  if (v215 == v216)
    v138 = 0;
  else
    v138 = (char *)v215;
  if (v211 == v212)
    v139 = 0;
  else
    v139 = (__n128 *)v211;
  v140 = (const TItnRule *)operator new();
  TItnRule::TItnRule((uint64_t)v140, v9, BYTE4(v210) & 1, v210 & 1, v208, v207 & 1, v137, (uint64_t)&v137[v219 - (_BYTE *)v218], v138, (uint64_t)&v138[v216 - (_BYTE *)v215], v139, (__n128 *)((char *)v139 + (char *)v212 - (_BYTE *)v211), v81, v209, *((_QWORD *)this + 7), *((_QWORD *)this + 8));
  if (TItnRuleManager::isAmbiguousRule(this, v140))
  {
    loggableUnicode((unsigned int *)*v9, v225);
    v145 = SHIBYTE(v225[2]) >= 0 ? v225 : (void **)v225[0];
    tknPrintf("Warning: '%s' has ambiguous rules.\n", v141, v142, v143, v144, v145);
    if (SHIBYTE(v225[2]) < 0)
      operator delete(v225[0]);
  }
  v146 = *((_QWORD *)this + 6);
  v147 = (char **)((char *)this + 32);
  v204 = (char *)this + 48;
  v148 = (const TItnRule **)*((_QWORD *)this + 5);
  if ((unint64_t)v148 >= v146)
  {
    v150 = ((char *)v148 - *v147) >> 3;
    if ((unint64_t)(v150 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v151 = v146 - (_QWORD)*v147;
    v152 = v151 >> 2;
    if (v151 >> 2 <= (unint64_t)(v150 + 1))
      v152 = v150 + 1;
    if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8)
      v153 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v153 = v152;
    if (v153)
      v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v204, v153);
    else
      v154 = 0;
    v155 = (const TItnRule **)&v154[8 * v150];
    v156 = &v154[8 * v153];
    *v155 = v140;
    v149 = v155 + 1;
    v158 = (char *)*((_QWORD *)this + 4);
    v157 = (char *)*((_QWORD *)this + 5);
    if (v157 != v158)
    {
      do
      {
        v159 = (const TItnRule *)*((_QWORD *)v157 - 1);
        v157 -= 8;
        *--v155 = v159;
      }
      while (v157 != v158);
      v157 = *v147;
    }
    *((_QWORD *)this + 4) = v155;
    *((_QWORD *)this + 5) = v149;
    *((_QWORD *)this + 6) = v156;
    if (v157)
      operator delete(v157);
  }
  else
  {
    *v148 = v140;
    v149 = v148 + 1;
  }
  *((_QWORD *)this + 5) = v149;
  v160 = ((uint64_t)v149 - *((_QWORD *)this + 4)) >> 3;
  v225[0] = *v9;
  v225[1] = (void *)v160;
  std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__emplace_multi<std::pair<wchar_t const*,TPItnRuleHandle_fake **>>((uint64_t **)this + 1, (uint64_t)v225);
  if (a3)
  {
    memset(v225, 0, sizeof(v225));
    TWord::getClones((uint64_t)v9, (uint64_t)v225);
    v161 = v225[1];
    if (v225[1] != v225[0])
    {
      v206 = v160;
      v162 = v81;
      v163 = 0;
      do
      {
        v164 = operator new();
        TItnRule::TItnRule(v164, *((__int32 ***)v225[0] + v163), BYTE4(v210) & 1, v210 & 1, v208, v207 & 1, v137, (uint64_t)&v137[v219 - (_BYTE *)v218], v138, (uint64_t)&v138[v216 - (_BYTE *)v215], v139, (__n128 *)((char *)v139 + (char *)v212 - (_BYTE *)v211), v162, v209, *((_QWORD *)this + 7), *((_QWORD *)this + 8));
        v166 = (uint64_t *)*((_QWORD *)this + 5);
        v165 = *((_QWORD *)this + 6);
        if ((unint64_t)v166 >= v165)
        {
          v168 = ((char *)v166 - *v147) >> 3;
          if ((unint64_t)(v168 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v169 = v165 - (_QWORD)*v147;
          v170 = v169 >> 2;
          if (v169 >> 2 <= (unint64_t)(v168 + 1))
            v170 = v168 + 1;
          if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8)
            v171 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v171 = v170;
          if (v171)
            v172 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v204, v171);
          else
            v172 = 0;
          v173 = (uint64_t *)&v172[8 * v168];
          *v173 = v164;
          v167 = v173 + 1;
          v175 = (char *)*((_QWORD *)this + 4);
          v174 = (char *)*((_QWORD *)this + 5);
          if (v174 != v175)
          {
            do
            {
              v176 = *((_QWORD *)v174 - 1);
              v174 -= 8;
              *--v173 = v176;
            }
            while (v174 != v175);
            v174 = *v147;
          }
          *((_QWORD *)this + 4) = v173;
          *((_QWORD *)this + 5) = v167;
          *((_QWORD *)this + 6) = &v172[8 * v171];
          if (v174)
            operator delete(v174);
        }
        else
        {
          *v166 = v164;
          v167 = v166 + 1;
        }
        *((_QWORD *)this + 5) = v167;
        v177 = ((uint64_t)v167 - *((_QWORD *)this + 4)) >> 3;
        __p[0] = **((void ***)v225[0] + v163);
        __p[1] = (void *)v177;
        std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__emplace_multi<std::pair<wchar_t const*,TPItnRuleHandle_fake **>>((uint64_t **)this + 1, (uint64_t)__p);
        ++v163;
        v161 = v225[0];
      }
      while (v163 < ((char *)v225[1] - (char *)v225[0]) >> 3);
      v160 = v206;
    }
    if (v161)
    {
      v225[1] = v161;
      operator delete(v161);
    }
  }
  if (v211)
  {
    v212 = (uint64_t *)v211;
    operator delete(v211);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  return v160;
}

void sub_2097A8A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37)
{
  uint64_t v37;

  MEMORY[0x20BD149A8](v37, 0x1070C40ADD13FEBLL);
  if (__p)
    operator delete(__p);
  if (a37)
    operator delete(a37);
  _Unwind_Resume(a1);
}

void TItnRuleManager::freeMemory(TItnRuleManager *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  TItnRule *v5;
  _QWORD *v6;
  char *v7;

  v3 = *((_QWORD *)this + 4);
  v2 = *((_QWORD *)this + 5);
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(TItnRule **)(v3 + 8 * v4);
      if (v5)
      {
        TItnRule::~TItnRule(v5);
        MEMORY[0x20BD149A8]();
        v3 = *((_QWORD *)this + 4);
        v2 = *((_QWORD *)this + 5);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v7 = (char *)*((_QWORD *)this + 2);
  v6 = (_QWORD *)((char *)this + 16);
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)(v6 - 1), v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
  v6[3] = v6[2];
}

void TItnRuleManager::~TItnRuleManager(TItnRuleManager *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C2153D0;
  TItnRuleManager::freeMemory(this);
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

{
  TItnRuleManager::~TItnRuleManager(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t TItnRuleManager::isCustomized(TItnRuleManager *this)
{
  TItnRuleManager *v1;
  unint64_t v2;
  uint64_t v3;
  TItnRuleManager *v4;
  TItnRuleManager *v5;
  BOOL v6;

  v1 = (TItnRuleManager *)*((_QWORD *)this + 1);
  if (v1 == (TItnRuleManager *)((char *)this + 16))
    return 0;
  while (1)
  {
    v2 = *((_QWORD *)v1 + 7);
    if (v2)
    {
      v3 = *((_QWORD *)this + 4);
      if (v2 <= (*((_QWORD *)this + 5) - v3) >> 3)
        v2 = *(_QWORD *)(v3 + 8 * v2 - 8);
      else
        v2 = 0;
    }
    if (*(_BYTE *)(v2 + 217) || *(_BYTE *)(v2 + 216))
      break;
    v4 = (TItnRuleManager *)*((_QWORD *)v1 + 1);
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = *(TItnRuleManager **)v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (TItnRuleManager *)*((_QWORD *)v1 + 2);
        v6 = *(_QWORD *)v5 == (_QWORD)v1;
        v1 = v5;
      }
      while (!v6);
    }
    v1 = v5;
    if (v5 == (TItnRuleManager *)((char *)this + 16))
      return 0;
  }
  return 1;
}

uint64_t formatContexts(uint64_t *a1, uint64_t a2, void **a3)
{
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t *v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  void *__p[2];
  char v36;
  void *v37;
  int64x2_t v38;
  uint64_t v39;

  v37 = &unk_209A58FE0;
  v6 = 1;
  v38 = vdupq_n_s64(1uLL);
  v39 = -1;
  if ((TFileObject::verify((uint64_t)a1, (uint64_t)&v37, 1uLL, 1) & 1) == 0)
  {
    v7 = a1[3];
    if (v7)
    {
      v8 = 0;
      do
      {
        ++v8;
        v7 = *(_QWORD *)(v7 + 16);
      }
      while (v7);
    }
    else
    {
      v8 = 0;
    }
    std::vector<TPItnTagHandle_fake **>::reserve(a3, v8);
    v9 = a1[3];
    if (v9)
    {
      v6 = 0;
      do
      {
        v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v9 + 24));
        if (v10 == -1)
        {
          loggableFileObject(a1);
          if (v36 >= 0)
            v19 = __p;
          else
            v19 = (void **)__p[0];
          tknPrintf("Error: %sBad tag\n", v15, v16, v17, v18, v19);
          if (v36 < 0)
            operator delete(__p[0]);
          v6 = 1;
        }
        else
        {
          v11 = v10;
          v13 = (uint64_t *)a3[1];
          v12 = (unint64_t)a3[2];
          if ((unint64_t)v13 >= v12)
          {
            v20 = ((char *)v13 - (_BYTE *)*a3) >> 3;
            if ((unint64_t)(v20 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v21 = v12 - (_QWORD)*a3;
            v22 = v21 >> 2;
            if (v21 >> 2 <= (unint64_t)(v20 + 1))
              v22 = v20 + 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
              v23 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v23 = v22;
            if (v23)
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a3 + 2), v23);
            else
              v24 = 0;
            v25 = (uint64_t *)&v24[8 * v20];
            *v25 = v11;
            v14 = (char *)(v25 + 1);
            v27 = (char *)*a3;
            v26 = (char *)a3[1];
            if (v26 != *a3)
            {
              do
              {
                v28 = *((_QWORD *)v26 - 1);
                v26 -= 8;
                *--v25 = v28;
              }
              while (v26 != v27);
              v26 = (char *)*a3;
            }
            *a3 = v25;
            a3[1] = v14;
            a3[2] = &v24[8 * v23];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *v13 = v10;
            v14 = (char *)(v13 + 1);
          }
          a3[1] = v14;
        }
        v9 = *(_QWORD *)(v9 + 16);
      }
      while (v9);
    }
    else
    {
      v6 = 0;
    }
    v29 = *a3;
    v30 = (uint64_t *)a3[1];
    v31 = 126 - 2 * __clz(((char *)v30 - (_BYTE *)*a3) >> 3);
    v32 = v30 == *a3;
    __p[0] = sortTags;
    if (v32)
      v33 = 0;
    else
      v33 = v31;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***,false>((uint64_t)v29, v30, (uint64_t (**)(uint64_t *, uint64_t *))__p, v33, 1);
  }
  return v6 & 1;
}

void sub_2097A91C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TItnRuleManager::isAmbiguousRule(TItnRuleManager *this, const TItnRule *a2)
{
  const TItnRule *v2;
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  void *__p[2];
  char v28;

  v2 = a2;
  v4 = (char *)this + 8;
  if (*((char *)a2 + 23) < 0)
    a2 = *(const TItnRule **)a2;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)a2);
  v5 = std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__equal_range_multi<std::wstring>((uint64_t)v4, (uint64_t)__p);
  v7 = v6;
  if (v28 < 0)
    operator delete(__p[0]);
  if (v5 == v7)
    return 0;
  while (1)
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v5[7] - 8);
    if (!*(_BYTE *)(v8 + 217))
    {
      v9 = *((_QWORD *)v2 + 3);
      v10 = *((_QWORD *)v2 + 4);
      v11 = (v10 - v9) >> 3;
      v12 = *(_QWORD *)(v8 + 24);
      if (v11 == (*(_QWORD *)(v8 + 32) - v12) >> 3)
      {
        if (v10 == v9)
          goto LABEL_13;
        v13 = 0;
        do
        {
          v14 = *(_QWORD *)(v9 + 8 * v13);
          v15 = *(_QWORD *)(v12 + 8 * v13++);
        }
        while (v13 < v11 && v14 == v15);
        if (v14 == v15)
        {
LABEL_13:
          v16 = *((_QWORD *)v2 + 6);
          v17 = *((_QWORD *)v2 + 7);
          v18 = (v17 - v16) >> 3;
          v19 = *(_QWORD *)(v8 + 48);
          if (v18 == (*(_QWORD *)(v8 + 56) - v19) >> 3)
          {
            if (v17 == v16)
              goto LABEL_20;
            v20 = 0;
            do
            {
              v21 = *(_QWORD *)(v16 + 8 * v20);
              v22 = *(_QWORD *)(v19 + 8 * v20++);
            }
            while (v20 < v18 && v21 == v22);
            if (v21 == v22)
            {
LABEL_20:
              if (*((_QWORD *)v2 + 24) == *(_QWORD *)(v8 + 192)
                && *((unsigned __int8 *)v2 + 200) == *(unsigned __int8 *)(v8 + 200))
              {
                return 1;
              }
            }
          }
        }
      }
    }
    v23 = (_QWORD *)v5[1];
    if (v23)
    {
      do
      {
        v24 = v23;
        v23 = (_QWORD *)*v23;
      }
      while (v23);
    }
    else
    {
      do
      {
        v24 = (_QWORD *)v5[2];
        v25 = *v24 == (_QWORD)v5;
        v5 = v24;
      }
      while (!v25);
    }
    v5 = v24;
    if (v24 == v7)
      return 0;
  }
}

void sub_2097A936C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TItnRuleManager::getRules(uint64_t a1, __int32 *a2, int a3, uint64_t a4)
{
  void **v8;
  void **v9;
  void **v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  void **v16;
  void **v17;
  BOOL v18;
  void *__p[2];
  char v21;

  TBuffer<TPItnRuleHandle_fake **>::resize(a4, 0);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, a2);
  v8 = (void **)std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__equal_range_multi<std::wstring>(a1 + 8, (uint64_t)__p);
  v10 = v9;
  if (v21 < 0)
    operator delete(__p[0]);
  if (v8 != v10)
  {
    v11 = 0;
    while (1)
    {
      v12 = (unint64_t)v8[7];
      if (v12 && (v13 = *(_QWORD *)(a1 + 32), v12 <= (*(_QWORD *)(a1 + 40) - v13) >> 3))
      {
        v14 = *(_QWORD *)(v13 + 8 * v12 - 8);
        if (a3)
        {
LABEL_8:
          if (!*(_BYTE *)(v14 + 216))
            goto LABEL_12;
          goto LABEL_13;
        }
      }
      else
      {
        v14 = 0;
        if (a3)
          goto LABEL_8;
      }
      if (!*(_BYTE *)(v14 + 217))
      {
LABEL_12:
        __p[0] = v8[7];
        TBuffer<TPItnRuleHandle_fake **>::insert(a4, *(_QWORD *)(a4 + 16), (uint64_t *)__p, 1uLL);
      }
LABEL_13:
      if (*(_BYTE *)(v14 + 216))
        v15 = 1;
      else
        v15 = *(_BYTE *)(v14 + 217) != 0;
      v16 = (void **)v8[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (void **)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (void **)v8[2];
          v18 = *v17 == v8;
          v8 = v17;
        }
        while (!v18);
      }
      v11 |= v15;
      v8 = v17;
      if (v17 == v10)
        return v11 & 1;
    }
  }
  v11 = 0;
  return v11 & 1;
}

void sub_2097A94D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TBuffer<TPItnRuleHandle_fake **>::resize(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;

  if (*(_BYTE *)(a1 + 2072) && *(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2 + 1;
    v4 = (void *)operator new[]();
    v5 = v4;
    v6 = *(const void **)a1;
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      memmove(v4, *(const void **)a1, 8 * v7);
    if (v6 != (const void *)(a1 + 24) && v6)
      MEMORY[0x20BD149A8](v6, 0x80C40B8603338);
    *(_QWORD *)a1 = v5;
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 < a2)
  {
    v9 = a2;
    if (*(_BYTE *)(a1 + 2072)
      || ((v10 = *(_QWORD *)(a1 + 8), v10 >= a2) ? (v9 = a2) : (v9 = *(_QWORD *)(a1 + 8)),
          v8 < v10 ? (v11 = v9 == v8) : (v11 = 1),
          !v11))
    {
      bzero((void *)(*(_QWORD *)a1 + 8 * v8), 8 * (v9 - v8));
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
}

uint64_t TItnRuleManager::addRule(uint64_t a1, __int32 *a2, uint64_t a3, char a4, char *a5, uint64_t a6, char *a7, uint64_t a8, __n128 *a9, __n128 *a10, uint64_t a11, char a12)
{
  __int32 **Word;
  const TItnRule *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  unint64_t v33;
  const TItnRule **v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  const TItnRule **v43;
  char *v44;
  char *v45;
  char *v46;
  const TItnRule *v47;
  void *__p[2];
  char v54;

  *(_BYTE *)(a1 + 80) = 1;
  Word = (__int32 **)TLexicon::findWord(*(_QWORD *)(a1 + 72), a2);
  if (!Word)
    Word = (__int32 **)TLexicon::addTempWord(*(_QWORD *)(a1 + 72), a2, 0, 0, 0);
  v17 = (const TItnRule *)operator new();
  TItnRule::TItnRule((uint64_t)v17, Word, 1, 0, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  if (TItnRuleManager::isAmbiguousRule((TItnRuleManager *)a1, v17))
  {
    loggableUnicode((unsigned int *)a2, __p);
    v22 = v54 >= 0 ? __p : (void **)__p[0];
    tknPrintf("Warning: Word '%s' already has a rule that triggers in the same context.\n", v18, v19, v20, v21, v22);
    if (v54 < 0)
      operator delete(__p[0]);
  }
  v23 = (uint64_t **)(a1 + 8);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, a2);
  v24 = std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__equal_range_multi<std::wstring>(a1 + 8, (uint64_t)__p);
  v26 = v25;
  if (v54 < 0)
    operator delete(__p[0]);
  if (v24 == v26)
  {
LABEL_23:
    v33 = *(_QWORD *)(a1 + 48);
    v34 = *(const TItnRule ***)(a1 + 40);
    if ((unint64_t)v34 >= v33)
    {
      v36 = *(_QWORD *)(a1 + 32);
      v37 = ((uint64_t)v34 - v36) >> 3;
      if ((unint64_t)(v37 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v38 = v33 - v36;
      v39 = v38 >> 2;
      if (v38 >> 2 <= (unint64_t)(v37 + 1))
        v39 = v37 + 1;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
        v40 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v40 = v39;
      if (v40)
        v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 48, v40);
      else
        v41 = 0;
      v43 = (const TItnRule **)&v41[8 * v37];
      v44 = &v41[8 * v40];
      *v43 = v17;
      v35 = v43 + 1;
      v46 = *(char **)(a1 + 32);
      v45 = *(char **)(a1 + 40);
      if (v45 != v46)
      {
        do
        {
          v47 = (const TItnRule *)*((_QWORD *)v45 - 1);
          v45 -= 8;
          *--v43 = v47;
        }
        while (v45 != v46);
        v45 = *(char **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 32) = v43;
      *(_QWORD *)(a1 + 40) = v35;
      *(_QWORD *)(a1 + 48) = v44;
      if (v45)
        operator delete(v45);
    }
    else
    {
      *v34 = v17;
      v35 = v34 + 1;
    }
    *(_QWORD *)(a1 + 40) = v35;
    v42 = ((uint64_t)v35 - *(_QWORD *)(a1 + 32)) >> 3;
    __p[0] = a2;
    __p[1] = (void *)v42;
    std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__emplace_multi<std::pair<wchar_t const*,TPItnRuleHandle_fake **>>(v23, (uint64_t)__p);
  }
  else
  {
    while (1)
    {
      v27 = v24[7];
      if (v27 && (v28 = *(_QWORD *)(a1 + 32), v27 <= (*(_QWORD *)(a1 + 40) - v28) >> 3))
        v29 = *(_QWORD *)(v28 + 8 * v27 - 8);
      else
        v29 = 0;
      if (TItnRule::operator==((const __int32 *)v17, (const __int32 *)v29))
        break;
      v30 = (_QWORD *)v24[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v24[2];
          v32 = *v31 == (_QWORD)v24;
          v24 = v31;
        }
        while (!v32);
      }
      v24 = v31;
      if (v31 == v26)
        goto LABEL_23;
    }
    TItnRule::~TItnRule(v17);
    MEMORY[0x20BD149A8]();
    *(_BYTE *)(v29 + 217) = 0;
    return v24[7];
  }
  return v42;
}

void sub_2097A98D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TItnRuleManager::deleteRule(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  __int32 *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  void *__p[2];
  char v14;

  if (a2 && (v4 = *(_QWORD *)(a1 + 32), a2 <= (*(_QWORD *)(a1 + 40) - v4) >> 3))
    v5 = *(char **)(v4 + 8 * a2 - 8);
  else
    v5 = 0;
  *(_BYTE *)(a1 + 80) = 1;
  v6 = (__int32 *)v5;
  if (v5[23] < 0)
    v6 = *(__int32 **)v5;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v6);
  v7 = std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__equal_range_multi<std::wstring>(a1 + 8, (uint64_t)__p);
  v9 = v8;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v7 != v9)
  {
    while (v7[7] != a2)
    {
      v10 = (_QWORD *)v7[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v7[2];
          v12 = *v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
      if (v11 == v9)
      {
        v7 = v9;
        break;
      }
    }
  }
  if (v5[216])
  {
    TItnRule::~TItnRule((TItnRule *)v5);
    MEMORY[0x20BD149A8]();
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2 - 8) = 0;
    std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::erase((uint64_t **)(a1 + 8), (uint64_t)v7);
  }
  else
  {
    v5[217] = 1;
  }
}

void sub_2097A9A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TItnRuleManager::resetRules(uint64_t a1, __int32 *a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  TItnRule *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD *v14;
  void *__p[2];
  char v16;

  v3 = (uint64_t **)(a1 + 8);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, a2);
  v4 = std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__equal_range_multi<std::wstring>((uint64_t)v3, (uint64_t)__p);
  v6 = v5;
  if (v16 < 0)
    operator delete(__p[0]);
  *(_BYTE *)(a1 + 80) = 1;
  if (v4 != v6)
  {
    do
    {
      v7 = v4[7];
      if (v7 && (v8 = *(_QWORD *)(a1 + 32), v7 <= (*(_QWORD *)(a1 + 40) - v8) >> 3))
        v9 = *(TItnRule **)(v8 + 8 * v7 - 8);
      else
        v9 = 0;
      if (*((_BYTE *)v9 + 216))
      {
        TItnRule::~TItnRule(v9);
        MEMORY[0x20BD149A8]();
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v4[7] - 8) = 0;
        v10 = (_QWORD *)v4[1];
        v11 = v4;
        if (v10)
        {
          do
          {
            v12 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v11[2];
            v13 = *v12 == (_QWORD)v11;
            v11 = v12;
          }
          while (!v13);
        }
        std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::erase(v3, (uint64_t)v4);
      }
      else
      {
        *((_BYTE *)v9 + 217) = 0;
        v14 = (_QWORD *)v4[1];
        if (v14)
        {
          do
          {
            v12 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v4[2];
            v13 = *v12 == (_QWORD)v4;
            v4 = v12;
          }
          while (!v13);
        }
      }
      v4 = v12;
    }
    while (v12 != v6);
  }
}

void sub_2097A9BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TItnRuleManager::resetAllRules(TItnRuleManager *this)
{
  uint64_t **v2;
  char *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  TItnRule *v7;
  char *v8;
  char *v9;
  char *v10;
  BOOL v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v2 = (uint64_t **)((char *)this + 8);
  v3 = (char *)*((_QWORD *)this + 1);
  *((_BYTE *)this + 80) = 1;
  v4 = (char *)this + 16;
  if (v3 != (char *)this + 16)
  {
    do
    {
      v5 = *((_QWORD *)v3 + 7);
      if (v5 && (v6 = *((_QWORD *)this + 4), v5 <= (*((_QWORD *)this + 5) - v6) >> 3))
        v7 = *(TItnRule **)(v6 + 8 * v5 - 8);
      else
        v7 = 0;
      if (*((_BYTE *)v7 + 216))
      {
        TItnRule::~TItnRule(v7);
        MEMORY[0x20BD149A8]();
        *(_QWORD *)(*((_QWORD *)this + 4) + 8 * *((_QWORD *)v3 + 7) - 8) = 0;
        v8 = (char *)*((_QWORD *)v3 + 1);
        v9 = v3;
        if (v8)
        {
          do
          {
            v10 = v8;
            v8 = *(char **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v10 = (char *)*((_QWORD *)v9 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v9;
            v9 = v10;
          }
          while (!v11);
        }
        std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::erase(v2, (uint64_t)v3);
      }
      else
      {
        *((_BYTE *)v7 + 217) = 0;
        v12 = (char *)*((_QWORD *)v3 + 1);
        if (v12)
        {
          do
          {
            v10 = v12;
            v12 = *(char **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v10 = (char *)*((_QWORD *)v3 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v3;
            v3 = v10;
          }
          while (!v11);
        }
      }
      v3 = v10;
    }
    while (v10 != v4);
  }
  v13 = *((_QWORD *)this + 4);
  v14 = *((_QWORD *)this + 5);
  v15 = (char *)this + 32;
  v16 = (v14 - v13) >> 3;
  v17 = v13 - 8;
  do
  {
    v18 = v16;
    if (!v16)
      break;
    --v16;
  }
  while (!*(_QWORD *)(v17 + 8 * v18));
  std::vector<TItnRule *>::resize((uint64_t)v15, v18);
}

void std::vector<TItnRule *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<TItnRule *>::__append((void **)a1, a2 - v2);
  }
}

uint64_t TItnRuleManager::save(uint64_t a1, _QWORD **a2, char a3)
{
  _OWORD *v6;
  _QWORD *v7;
  char v8;
  _OWORD *v9;
  _QWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;
  uint64_t *v19;
  _QWORD *v20[2];
  void **v21;

  if (!*(_QWORD *)(a1 + 24))
  {
    v8 = 0;
    return v8 & 1;
  }
  v20[0] = 0;
  v20[1] = 0;
  v19 = (uint64_t *)v20;
  std::string::basic_string[abi:ne180100]<0>(__p, "Tokens");
  v21 = __p;
  v6 = std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v19, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21);
  MEMORY[0x20BD147A4]((char *)v6 + 56, &unk_209A5918C);
  if (v18 < 0)
    operator delete(__p[0]);
  v7 = (_QWORD *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
  {
    if (!*(_QWORD *)(a1 + 96))
      goto LABEL_12;
    v7 = (_QWORD *)*v7;
  }
  else if (!*(_BYTE *)(a1 + 111))
  {
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "HintRewriteNever");
  v21 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v19, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21);
  MEMORY[0x20BD147A4]((char *)v9 + 56, v7);
  if (v18 < 0)
    operator delete(__p[0]);
LABEL_12:
  v10 = (_QWORD *)(a1 + 112);
  if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 135))
      goto LABEL_19;
LABEL_17:
    std::string::basic_string[abi:ne180100]<0>(__p, "HintRewriteAlways");
    v21 = __p;
    v11 = std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v19, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21);
    MEMORY[0x20BD147A4]((char *)v11 + 56, v10);
    if (v18 < 0)
      operator delete(__p[0]);
    goto LABEL_19;
  }
  if (*(_QWORD *)(a1 + 120))
  {
    v10 = (_QWORD *)*v10;
    goto LABEL_17;
  }
LABEL_19:
  TOutputStream::writeHeader(a2, "ItnRule", (uint64_t)pItnRuleVersion, 6, &v19);
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 != v13)
  {
    v14 = 0;
    v8 = 0;
    while (1)
    {
      v15 = *(_QWORD *)(v13 + 8 * v14);
      if (v15)
      {
        if (*(_BYTE *)(v15 + 216))
        {
          v8 = 1;
          if ((a3 & 1) != 0)
            goto LABEL_27;
        }
        else
        {
          v8 |= *(_BYTE *)(v15 + 217) != 0;
        }
        TItnRule::save(v15, a2, *(_QWORD *)(a1 + 64));
        v13 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(a1 + 40);
      }
LABEL_27:
      if (++v14 >= (unint64_t)((v12 - v13) >> 3))
        goto LABEL_30;
    }
  }
  v8 = 0;
LABEL_30:
  std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::destroy((uint64_t)&v19, v20[0]);
  return v8 & 1;
}

void sub_2097A9F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, _QWORD *a16)
{
  std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void TItnRuleManager::importChanges(TItnRuleManager *this, const TItnRuleManager *a2)
{
  _QWORD *v2;
  char *v3;
  const __int32 *v6;
  const __int32 *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ActiveConfigHandle;
  uint64_t ValidConfig;
  __int32 ***v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  BOOL v18;
  _BYTE *v19;
  __int128 v20;
  _BYTE v21[2048];
  char v22;
  __int32 ***v23;
  __int32 ***v24;
  uint64_t v25;

  *((_BYTE *)this + 80) = 1;
  v2 = (_QWORD *)*((_QWORD *)a2 + 1);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v19 = v21;
  v20 = xmmword_209A57DD0;
  v22 = 1;
  v3 = (char *)a2 + 16;
  if (v2 == (_QWORD *)((char *)a2 + 16))
  {
LABEL_28:
    v18 = v19 == v21 || v19 == 0;
    if (!v18)
      MEMORY[0x20BD149A8]();
    goto LABEL_33;
  }
  v6 = 0;
  do
  {
    if (!v6)
      goto LABEL_13;
    v7 = (const __int32 *)(v2 + 4);
    v8 = wcslen(v6);
    if (*((char *)v2 + 55) < 0)
    {
      if (v8 != v2[5])
        goto LABEL_13;
      if (v8 == -1)
LABEL_36:
        std::wstring::__throw_out_of_range[abi:ne180100]();
      v7 = *(const __int32 **)v7;
      if (v8)
      {
LABEL_12:
        if (!wmemcmp(v7, v6, v8))
          goto LABEL_21;
LABEL_13:
        v6 = (const __int32 *)(v2 + 4);
        if (*((char *)v2 + 55) < 0)
          v6 = *(const __int32 **)v6;
        if (((*(uint64_t (**)(const TItnRuleManager *, const __int32 *, _QWORD, _BYTE **))(*(_QWORD *)a2 + 48))(a2, v6, 0, &v19) & 1) != 0)
        {
          v9 = *((_QWORD *)this + 9);
          v10 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 336);
          ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v10 + 144));
          ValidConfig = TParam::getValidConfig((TParam *)(v10 + 144), ActiveConfigHandle);
          TLexicon::mapWord(v9, (uint64_t)v6, *(int *)(v10 + 4 * ValidConfig + 304), 1, (uint64_t)&v23);
          v13 = v23;
          if (v24 != v23)
          {
            v14 = 0;
            do
            {
              TWord::getWordSpec((TWord *)v13[v14]);
              if (v15 != -1)
                TItnRuleManager::importAdd(this, a2, &v19, v23[v14]);
              ++v14;
              v13 = v23;
            }
            while (v14 < v24 - v23);
          }
        }
      }
    }
    else
    {
      if (v8 != *((unsigned __int8 *)v2 + 55))
        goto LABEL_13;
      if (v8 == -1)
        goto LABEL_36;
      if (v8)
        goto LABEL_12;
    }
LABEL_21:
    v16 = (char *)v2[1];
    if (v16)
    {
      do
      {
        v17 = v16;
        v16 = *(char **)v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        v17 = (char *)v2[2];
        v18 = *(_QWORD *)v17 == (_QWORD)v2;
        v2 = v17;
      }
      while (!v18);
    }
    v2 = v17;
  }
  while (v17 != v3);
  if (v22)
    goto LABEL_28;
LABEL_33:
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void sub_2097AA1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  void *v14;

  if (LOBYTE(STACK[0x820]))
  {
    if (a10 != v10 && a10 != 0)
      MEMORY[0x20BD149A8]();
  }
  v14 = *(void **)(v11 - 104);
  if (v14)
  {
    *(_QWORD *)(v11 - 96) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

void TItnRuleManager::importAdd(_QWORD *a1, _QWORD *a2, _QWORD *a3, __int32 **a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  __int128 v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  const __int32 *v30;
  _QWORD *v31;
  int v32;
  void *v33;
  void *__p[2];
  char v35;
  void *v36;
  void *v37;
  uint64_t v38;
  _BYTE *v39;
  __int128 v40;
  _BYTE v41[2048];
  char v42;

  v39 = v41;
  v40 = xmmword_209A57DD0;
  v42 = 1;
  if (((*(uint64_t (**)(_QWORD *, __int32 *, _QWORD, _BYTE **))(*a1 + 48))(a1, *a4, 0, &v39) & 1) == 0)
  {
    v36 = 0;
    v37 = 0;
    v38 = 0;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, *a4);
    v8 = std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__equal_range_multi<std::wstring>((uint64_t)(a1 + 1), (uint64_t)__p);
    v10 = v9;
    if (v35 < 0)
      operator delete(__p[0]);
    if (v8 != v10)
    {
      v11 = a1[4];
      do
      {
        *(_BYTE *)(*(_QWORD *)(v11 + 8 * v8[7] - 8) + 217) = 1;
        v12 = (_QWORD *)v8[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (_QWORD *)v8[2];
            v14 = *v13 == (_QWORD)v8;
            v8 = v13;
          }
          while (!v14);
        }
        v8 = v13;
      }
      while (v13 != v10);
    }
    if (a3[2])
    {
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)(*a3 + 8 * v15);
        if (v16 && (v17 = a2[4], v16 <= (a2[5] - v17) >> 3))
          v18 = *(_QWORD *)(v17 + 8 * v16 - 8);
        else
          v18 = 0;
        if (*(_QWORD *)(v18 + 32) == *(_QWORD *)(v18 + 24))
          v19 = 0;
        else
          v19 = *(_QWORD *)(v18 + 24);
        if (*(_QWORD *)(v18 + 56) == *(_QWORD *)(v18 + 48))
          v20 = 0;
        else
          v20 = *(_QWORD *)(v18 + 48);
        std::vector<TPItnRuleControl>::resize((uint64_t)&v36, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v18 + 160) - *(_QWORD *)(v18 + 152)) >> 3));
        v22 = *(_QWORD *)(v18 + 152);
        v21 = *(_QWORD *)(v18 + 160);
        if (v21 != v22)
        {
          v23 = (v21 - v22) / 24;
          v24 = v36;
          if (v23 <= 1)
            v23 = 1;
          v25 = *(__int128 **)(v18 + 152);
          do
          {
            v26 = *v25;
            v25 = (__int128 *)((char *)v25 + 24);
            *v24++ = v26;
            --v23;
          }
          while (v23);
        }
        if (v21 == v22)
          v27 = 0;
        else
          v27 = v36;
        v28 = *(_QWORD *)(v18 + 192);
        if (v28 == -1)
          goto LABEL_37;
        v29 = *(_QWORD *)(*(_QWORD *)(a2[7] + 24) + 8 * v28 - 8);
        v30 = (const __int32 *)(v29 + 16);
        if (*(char *)(v29 + 39) < 0)
          v30 = *(const __int32 **)v30;
        TParamManager::find(a1[7], v30, (uint64_t *)__p);
        TParamManager::end(a1[7], &v33);
        if (__p[0] != v33)
        {
          v28 = *((_QWORD *)__p[0] + 5);
          if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[7] + 24) + 8 * v28 - 8) + 8))
          {
LABEL_37:
            v31 = (_QWORD *)(v18 + 120);
            if (*(char *)(v18 + 143) < 0)
              v31 = (_QWORD *)*v31;
            LOBYTE(v32) = *(_BYTE *)(v18 + 200);
            (*(void (**)(_QWORD *, __int32 *, _QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, int))(*a1 + 16))(a1, *a4, v31, *(unsigned __int8 *)(v18 + 144), v19, v19 + *(_QWORD *)(v18 + 32) - *(_QWORD *)(v18 + 24), v20, v20 + *(_QWORD *)(v18 + 56) - *(_QWORD *)(v18 + 48), v27, (uint64_t)v27 - 0x5555555555555550 * ((*(_QWORD *)(v18 + 160) - *(_QWORD *)(v18 + 152)) >> 3), v28, v32);
          }
        }
        ++v15;
      }
      while (v15 < a3[2]);
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
  }
  if (v42 && v39 != v41)
  {
    if (v39)
      MEMORY[0x20BD149A8]();
  }
}

void sub_2097AA53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (LOBYTE(STACK[0x880]))
  {
    if (a25 != a14 && a25 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

void std::vector<TPItnRuleControl>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<TPItnRuleControl>::__append((void **)a1, a2 - v2);
  }
}

uint64_t TItnRuleManager::getRuleWordName(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (a2 <= (*(_QWORD *)(a1 + 40) - v3) >> 3)
      a2 = *(_QWORD *)(v3 + 8 * a2 - 8);
    else
      a2 = 0;
  }
  if (*(char *)(a2 + 23) < 0)
    a2 = *(_QWORD *)a2;
  return TBuffer<wchar_t>::assign(a3, (int *)a2);
}

uint64_t TItnRuleManager::getRuleRewriteForm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2 - 8);
  v4 = (int *)(v3 + 120);
  if (*(char *)(v3 + 143) < 0)
    v4 = *(int **)v4;
  return TBuffer<wchar_t>::assign(a3, v4);
}

void TItnRuleManager::getRuleTags(uint64_t a1, unint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if (a2 && (v5 = *(_QWORD *)(a1 + 32), a2 <= (*(_QWORD *)(a1 + 40) - v5) >> 3))
    v6 = *(_QWORD *)(v5 + 8 * a2 - 8);
  else
    v6 = 0;
  if (a3)
    v7 = 48;
  else
    v7 = 24;
  if (a3)
    v8 = v6 + 48;
  else
    v8 = v6 + 24;
  TBuffer<TPItnRuleHandle_fake **>::resize((uint64_t)a4, (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)(v6 + v7)) >> 3);
  v9 = *(_QWORD *)(v6 + v7);
  if (*(_QWORD *)(v8 + 8) != v9)
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*a4 + 8 * v10) = *(_QWORD *)(v9 + 8 * v10);
      ++v10;
      v9 = *(_QWORD *)(v6 + v7);
    }
    while (v10 < (*(_QWORD *)(v8 + 8) - v9) >> 3);
  }
}

double TItnRuleManager::getRuleControls(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;

  if (a2 && (v4 = *(_QWORD *)(a1 + 32), a2 <= (*(_QWORD *)(a1 + 40) - v4) >> 3))
    v5 = *(_QWORD *)(v4 + 8 * a2 - 8);
  else
    v5 = 0;
  TBuffer<TPItnRuleControl>::resize((uint64_t)a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 160) - *(_QWORD *)(v5 + 152)) >> 3));
  v7 = a3[2];
  if (v7)
  {
    v8 = *(__int128 **)(v5 + 152);
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 160) - (_QWORD)v8) >> 3);
    v10 = (_OWORD *)*a3;
    do
    {
      if (!v9)
        std::vector<TItnControl>::__throw_out_of_range[abi:ne180100]();
      v11 = *v8;
      v8 = (__int128 *)((char *)v8 + 24);
      result = *(double *)&v11;
      *v10++ = v11;
      --v9;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t TItnRuleManager::getRuleClientData(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2 - 8) + 220);
}

uint64_t TItnRuleManager::setRuleClientData(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8 * a2 - 8) + 220) = a3;
  return result;
}

BOOL TItnRuleManager::isValidRule(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if (a2 && (v2 = *(_QWORD *)(a1 + 32), a2 <= (*(_QWORD *)(a1 + 40) - v2) >> 3))
    return *(_QWORD *)(v2 + 8 * a2 - 8) != 0;
  else
    return 0;
}

uint64_t TItnRuleManager::isRuleRewriteActive(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2 - 8) + 144);
}

uint64_t TItnRuleManager::getRuleParamSetting(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2 - 8) + 192);
}

void std::vector<TPItnTagHandle_fake **>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<TPItnRuleControl>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<TItnControl>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void TBuffer<TPItnRuleControl>::resize(uint64_t a1, unint64_t a2)
{
  _BYTE *v4;
  void *v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;

  v4 = (_BYTE *)(a1 + 4120);
  if (*(_BYTE *)(a1 + 4120) && *(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2 + 1;
    v5 = (void *)operator new[]();
    v6 = v5;
    v7 = *(const void **)a1;
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      memmove(v5, *(const void **)a1, 16 * v8);
    if (v7 != (const void *)(a1 + 24) && v7)
      MEMORY[0x20BD149A8](v7, 0x80C40803F642BLL);
    *(_QWORD *)a1 = v6;
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 < a2)
  {
    v10 = a2;
    if (*v4
      || ((v11 = *(_QWORD *)(a1 + 8), v11 >= a2) ? (v10 = a2) : (v10 = *(_QWORD *)(a1 + 8)),
          v9 < v11 ? (v12 = v10 == v9) : (v12 = 1),
          !v12))
    {
      bzero((void *)(*(_QWORD *)a1 + 16 * v9), 16 * (v10 - v9));
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  BOOL v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>((uint64_t)v10, a2, (uint64_t (**)(_QWORD *, _QWORD))a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>((uint64_t)v10, a2, (uint64_t (**)(_QWORD *, _QWORD))a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(v10, &v10[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(v10 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(v10 - 1, v10) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TPItnTagHandle_fake ***,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&)>(v10, a2, a3);
            v10 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TPItnTagHandle_fake ***,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&)>(v10, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(v10, v18, a3);
          v10 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***,false>(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***,TPItnTagHandle_fake ***>((char *)v10, (char *)a2, (char *)a2, (unsigned int (**)(char *, uint64_t))a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(uint64_t result, _QWORD *a2, uint64_t (**a3)(_QWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v14[9];

  if ((_QWORD *)result != a2)
  {
    v14[7] = v3;
    v14[8] = v4;
    v6 = (_QWORD *)result;
    v7 = (_QWORD *)(result + 8);
    if ((_QWORD *)(result + 8) != a2)
    {
      v9 = 0;
      v10 = (_QWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v14[0] = *v10;
          v12 = v9;
          while (1)
          {
            *(_QWORD *)((char *)v6 + v12 + 8) = *(_QWORD *)((char *)v6 + v12);
            if (!v12)
              break;
            v12 -= 8;
            result = (*a3)(v14, (char *)v6 + v12);
            if ((result & 1) == 0)
            {
              v13 = (_QWORD *)((char *)v6 + v12 + 8);
              goto LABEL_10;
            }
          }
          v13 = v6;
LABEL_10:
          *v13 = v14[0];
        }
        v7 = v10 + 1;
        v9 += 8;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(uint64_t result, _QWORD *a2, uint64_t (**a3)(_QWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[9];

  if ((_QWORD *)result != a2)
  {
    v12[7] = v3;
    v12[8] = v4;
    v6 = (_QWORD *)result;
    v7 = (_QWORD *)(result + 8);
    if ((_QWORD *)(result + 8) != a2)
    {
      v9 = result - 8;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12[0] = *v6;
          v11 = v9;
          do
          {
            *(_QWORD *)(v11 + 16) = *(_QWORD *)(v11 + 8);
            result = (*a3)(v12, v11);
            v11 -= 8;
          }
          while ((result & 1) != 0);
          *(_QWORD *)(v11 + 16) = v12[0];
        }
        v7 = v6 + 1;
        v9 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!(*a4)(a2, a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  v10 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(a3, a2))
      return 1;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TPItnTagHandle_fake ***,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v11;

  v4 = a2;
  v11 = *a1;
  if (((*a3)(&v11, a2 - 1) & 1) != 0)
  {
    v6 = a1;
    do
      ++v6;
    while (((*a3)(&v11, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 1;
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v11, v7);
      v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while (((*a3)(&v11, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *v6;
    *v6 = *v4;
    *v4 = v9;
    do
      ++v6;
    while (!(*a3)(&v11, v6));
    do
      --v4;
    while (((*a3)(&v11, v4) & 1) != 0);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v11;
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TPItnTagHandle_fake ***,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;

  v6 = 0;
  v13 = *a1;
  do
    ++v6;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  v7 = &a1[v6];
  v8 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v7 >= a2)
        break;
      --a2;
    }
    while (((*a3)(a2, &v13) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!(*a3)(a2, &v13));
  }
  if (v7 < a2)
  {
    v9 = &a1[v6];
    v10 = a2;
    do
    {
      v11 = *v9;
      *v9 = *v10;
      *v10 = v11;
      do
        ++v9;
      while (((*a3)(v9, &v13) & 1) != 0);
      do
        --v10;
      while (!(*a3)(v10, &v13));
    }
    while (v9 < v10);
    v8 = v9 - 1;
  }
  if (v8 != a1)
    *a1 = *v8;
  *v8 = v13;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (uint64_t *)((char *)a1 + v14);
        *(uint64_t *)((char *)a1 + v14 + 24) = *(uint64_t *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (((*a3)(&v17, v15 + 1) & 1) == 0)
        {
          v16 = (uint64_t *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***,TPItnTagHandle_fake ***>(char *a1, char *a2, char *a3, unsigned int (**a4)(char *, uint64_t))
{
  char *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v24;
  uint64_t v25;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if ((*a4)(v14, (uint64_t)a1))
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 < 9)
    {
      return v13;
    }
    else
    {
      v24 = v13;
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v25 = *(_QWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[8 * v17 + 8];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && (*a4)(&v18[8 * v17 + 8], (uint64_t)&v18[8 * v17 + 16]))
          {
            v19 += 8;
            v20 = v21;
          }
          *(_QWORD *)v18 = *(_QWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 8;
        if (v19 == v6)
        {
          *(_QWORD *)v19 = v25;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v6;
          *(_QWORD *)v6 = v25;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>((uint64_t)a1, (uint64_t)(v19 + 8), (uint64_t (**)(_QWORD *, uint64_t))a4, (v19 + 8 - a1) >> 3);
        }
      }
      while (v16-- > 2);
      return v24;
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[13];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v19[11] = v4;
    v19[12] = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v12 = ((uint64_t)a4 - result) >> 2;
      v13 = v12 + 1;
      v14 = (_QWORD *)(result + 8 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 1))
      {
        ++v14;
        v13 = v15;
      }
      result = ((uint64_t (*)(_QWORD *, _QWORD *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v19[0] = *v7;
        do
        {
          v16 = v14;
          *v7 = *v14;
          if (v9 < v13)
            break;
          v17 = (2 * v13) | 1;
          v14 = (_QWORD *)(v8 + 8 * v17);
          v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 8 * v17, v14 + 1))
            {
              ++v14;
              v17 = v18;
            }
          }
          result = ((uint64_t (*)(_QWORD *, _QWORD *))*a2)(v14, v19);
          v7 = v16;
          v13 = v17;
        }
        while (!(_DWORD)result);
        *v16 = v19[0];
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TPItnTagHandle_fake ** const&,TPItnTagHandle_fake ** const&),TPItnTagHandle_fake ***>(uint64_t result, uint64_t a2, uint64_t (**a3)(_QWORD *, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v13[9];

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v13[7] = v4;
    v13[8] = v5;
    v8 = result;
    v9 = v6 >> 1;
    v10 = (_QWORD *)(result + 8 * (v6 >> 1));
    v11 = (_QWORD *)(a2 - 8);
    result = (*a3)(v10, a2 - 8);
    if ((_DWORD)result)
    {
      v13[0] = *v11;
      do
      {
        v12 = v10;
        *v11 = *v10;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (_QWORD *)(v8 + 8 * v9);
        result = (*a3)(v10, (uint64_t)v13);
        v11 = v12;
      }
      while ((result & 1) != 0);
      *v12 = v13[0];
    }
  }
  return result;
}

char *std::vector<TPItnTagHandle_fake **>::__assign_with_size[abi:ne180100]<TPItnTagHandle_fake ** const*,TPItnTagHandle_fake ** const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<wchar_t const*>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<TItnControl>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[3 * a2];
      do
      {
        *v7 = -1;
        v7[1] = -1;
        v7[2] = 0;
        v7 += 3;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v14[24 * a2];
    v16 = v14;
    do
    {
      *(_QWORD *)v16 = -1;
      *((_QWORD *)v16 + 1) = -1;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 24;
    }
    while (v16 != v15);
    v17 = &v12[24 * v11];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*,false>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

LABEL_1:
  v10 = (__int128 *)((char *)a2 - 24);
  v11 = (__int128 *)a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 3);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)((char *)a2 - 24), v11))
        {
          v30 = *((_QWORD *)v11 + 2);
          v28 = *v11;
          v26 = *v10;
          *((_QWORD *)v11 + 2) = *((_QWORD *)a2 - 1);
          *v11 = v26;
          *v10 = v28;
          *((_QWORD *)a2 - 1) = v30;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(v11, (__int128 *)((char *)v11 + 24), (__int128 *)((char *)a2 - 24), a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((uint64_t)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)a2 - 24, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__n128 *)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)v11 + 72, (uint64_t)a2 - 24, a3);
        return;
      default:
        if (v14 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = (__int128 *)((char *)v11 + 24 * (v15 >> 1));
          if ((unint64_t)v14 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__int128 *)((char *)v11 + 24 * v16), v11, (__int128 *)((char *)a2 - 24), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(v11, (__int128 *)((char *)v11 + 24 * v16), (__int128 *)((char *)a2 - 24), a3);
            v18 = 3 * v16;
            v19 = (__int128 *)((char *)v11 + 24 * v16 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__int128 *)((char *)v11 + 24), v19, a2 - 3, a3);
            v20 = v11 + 3;
            v21 = (__int128 *)((char *)v11 + 8 * v18 + 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(v20, v21, (__int128 *)((char *)a2 - 72), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(v19, v17, v21, a3);
            v29 = *(_QWORD *)(a1 + 16);
            v27 = *(_OWORD *)a1;
            v22 = *v17;
            *(_QWORD *)(a1 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)a1 = v22;
            *((_QWORD *)v17 + 2) = v29;
            *v17 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((__int128 *)(a1 - 24), (__int128 *)a1) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TItnControl *,BOOL (*&)(TItnControl const&,TItnControl const&)>((__int128 *)a1, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TItnControl *,BOOL (*&)(TItnControl const&,TItnControl const&)>((__int128 *)a1, (unint64_t)a2, (uint64_t (**)(char *, __int128 *))a3);
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(a1, v23, a3);
          v11 = (__int128 *)(v23 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(v23 + 24, (uint64_t)a2, a3))
          {
            v12 = v13 + 1;
            if (v25)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*,false>(a1, v23, a3, -v13, a5 & 1);
            v11 = (__int128 *)(v23 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = (__int128 *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*,TItnControl*>((__n128 *)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(uint64_t, __int8 *))a3, a6);
        return;
    }
  }
}

  v10 = (__int128 *)((char *)a2 - 24);
  v11 = (__int128 *)a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 3);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)((char *)a2 - 24), v11))
        {
          v30 = *((_QWORD *)v11 + 2);
          v28 = *v11;
          v26 = *v10;
          *((_QWORD *)v11 + 2) = *((_QWORD *)a2 - 1);
          *v11 = v26;
          *v10 = v28;
          *((_QWORD *)a2 - 1) = v30;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(v11, (__int128 *)((char *)v11 + 24), (__int128 *)((char *)a2 - 24), a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((uint64_t)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)a2 - 24, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__n128 *)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)v11 + 72, (uint64_t)a2 - 24, a3);
        return;
      default:
        if (v14 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = (__int128 *)((char *)v11 + 24 * (v15 >> 1));
          if ((unint64_t)v14 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__int128 *)((char *)v11 + 24 * v16), v11, (__int128 *)((char *)a2 - 24), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(v11, (__int128 *)((char *)v11 + 24 * v16), (__int128 *)((char *)a2 - 24), a3);
            v18 = 3 * v16;
            v19 = (__int128 *)((char *)v11 + 24 * v16 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__int128 *)((char *)v11 + 24), v19, a2 - 3, a3);
            v20 = v11 + 3;
            v21 = (__int128 *)((char *)v11 + 8 * v18 + 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(v20, v21, (__int128 *)((char *)a2 - 72), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(v19, v17, v21, a3);
            v29 = *(_QWORD *)(a1 + 16);
            v27 = *(_OWORD *)a1;
            v22 = *v17;
            *(_QWORD *)(a1 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)a1 = v22;
            *((_QWORD *)v17 + 2) = v29;
            *v17 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((__int128 *)(a1 - 24), (__int128 *)a1) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TItnControl *,BOOL (*&)(TItnControl const&,TItnControl const&)>((__int128 *)a1, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TItnControl *,BOOL (*&)(TItnControl const&,TItnControl const&)>((__int128 *)a1, (unint64_t)a2, (uint64_t (**)(char *, __int128 *))a3);
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRespellManager::TRespellMap const&,TRespellManager::TRespellMap const&),TRespellManager::TRespellMap*>(a1, v23, a3);
          v11 = (__int128 *)(v23 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRespellManager::TRespellMap const&,TRespellManager::TRespellMap const&),TRespellManager::TRespellMap*>(v23 + 24, (uint64_t)a2, a3))
          {
            v12 = v13 + 1;
            if (v25)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRespellManager::TRespellMap const&,TRespellManager::TRespellMap const&),TRespellManager::TRespellMap*,false>(a1, v23, a3, -v13, a5 & 1);
            v11 = (__int128 *)(v23 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = (__int128 *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*,TItnControl*>((__n128 *)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(uint64_t, __int8 *))a3, a6);
        return;
    }
  }
}

  v10 = (__int128 *)((char *)a2 - 56);
  v11 = (__int128 *)a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = 0x6DB6DB6DB6DB6DB7 * (((char *)a2 - (char *)v11) >> 3);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)((char *)a2 - 56), v11))
        {
          v38 = *((_QWORD *)v11 + 6);
          v34 = v11[1];
          v36 = v11[2];
          v32 = *v11;
          v28 = *v10;
          v29 = *(__int128 *)((char *)a2 - 40);
          v30 = *(__int128 *)((char *)a2 - 24);
          *((_DWORD *)v11 + 12) = *((_DWORD *)a2 - 2);
          v11[1] = v29;
          v11[2] = v30;
          *v11 = v28;
          *v10 = v32;
          *(__int128 *)((char *)a2 - 40) = v34;
          *(__int128 *)((char *)a2 - 24) = v36;
          *((_DWORD *)a2 - 2) = v38;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(v11, (__int128 *)((char *)v11 + 56), (__int128 *)((char *)a2 - 56), a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((uint64_t)v11, (uint64_t)v11 + 56, (uint64_t)(v11 + 7), (uint64_t)a2 - 56, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((uint64_t)v11, (uint64_t)v11 + 56, (uint64_t)(v11 + 7), (uint64_t)v11 + 168, (__int128 *)((char *)a2 - 56), a3);
        return;
      default:
        if (v14 <= 1343)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = (__int128 *)((char *)v11 + 56 * (v15 >> 1));
          if ((unint64_t)v14 < 0x1C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(v17, v11, (__int128 *)((char *)a2 - 56), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(v11, v17, (__int128 *)((char *)a2 - 56), a3);
            v18 = 56 * v16;
            v19 = (__int128 *)((char *)v11 + 56 * v16 - 56);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((__int128 *)((char *)v11 + 56), v19, a2 - 7, a3);
            v20 = v11 + 7;
            v21 = (__int128 *)((char *)v11 + v18 + 56);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(v20, v21, (__int128 *)((char *)a2 - 168), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(v19, v17, v21, a3);
            v37 = *(_QWORD *)(a1 + 48);
            v33 = *(_OWORD *)(a1 + 16);
            v35 = *(_OWORD *)(a1 + 32);
            v31 = *(_OWORD *)a1;
            v22 = *v17;
            v23 = v17[1];
            v24 = v17[2];
            *(_DWORD *)(a1 + 48) = *((_DWORD *)v17 + 12);
            *(_OWORD *)(a1 + 16) = v23;
            *(_OWORD *)(a1 + 32) = v24;
            *(_OWORD *)a1 = v22;
            *((_DWORD *)v17 + 12) = v37;
            v17[1] = v33;
            v17[2] = v35;
            *v17 = v31;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((__int128 *)(a1 - 56), (__int128 *)a1) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TGrammarManager2Result *,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&)>((__int128 *)a1, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v25 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TGrammarManager2Result *,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&)>((__int128 *)a1, (unint64_t)a2, (uint64_t (**)(char *, __int128 *))a3);
          if ((v26 & 1) == 0)
            goto LABEL_14;
          v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, v25, a3);
          v11 = (__int128 *)(v25 + 56);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(v25 + 56, (uint64_t)a2, a3))
          {
            v12 = v13 + 1;
            if (v27)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*,false>(a1, v25, a3, -v13, a5 & 1);
            v11 = (__int128 *)(v25 + 56);
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = (__int128 *)v25;
          if (v27)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*,TGrammarManager2Result*>((uint64_t)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(int64_t, uint64_t))a3, a6);
        return;
    }
  }
}

  v10 = (__int128 *)((char *)a2 - 24);
  v11 = (__int128 *)a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 3);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)((char *)a2 - 24), v11))
        {
          v30 = *((_QWORD *)v11 + 2);
          v28 = *v11;
          v26 = *v10;
          *((_QWORD *)v11 + 2) = *((_QWORD *)a2 - 1);
          *v11 = v26;
          *v10 = v28;
          *((_QWORD *)a2 - 1) = v30;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(v11, (__int128 *)((char *)v11 + 24), (__int128 *)((char *)a2 - 24), a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((uint64_t)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)a2 - 24, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__n128 *)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)v11 + 72, (uint64_t)a2 - 24, a3);
        return;
      default:
        if (v14 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = (__int128 *)((char *)v11 + 24 * (v15 >> 1));
          if ((unint64_t)v14 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__int128 *)((char *)v11 + 24 * v16), v11, (__int128 *)((char *)a2 - 24), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(v11, (__int128 *)((char *)v11 + 24 * v16), (__int128 *)((char *)a2 - 24), a3);
            v18 = 3 * v16;
            v19 = (__int128 *)((char *)v11 + 24 * v16 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__int128 *)((char *)v11 + 24), v19, a2 - 3, a3);
            v20 = v11 + 3;
            v21 = (__int128 *)((char *)v11 + 8 * v18 + 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(v20, v21, (__int128 *)((char *)a2 - 72), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(v19, v17, v21, a3);
            v29 = *(_QWORD *)(a1 + 16);
            v27 = *(_OWORD *)a1;
            v22 = *v17;
            *(_QWORD *)(a1 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)a1 = v22;
            *((_QWORD *)v17 + 2) = v29;
            *v17 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((__int128 *)(a1 - 24), (__int128 *)a1) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TItnControl *,BOOL (*&)(TItnControl const&,TItnControl const&)>((__int128 *)a1, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TItnControl *,BOOL (*&)(TItnControl const&,TItnControl const&)>((__int128 *)a1, (unint64_t)a2, (uint64_t (**)(char *, __int128 *))a3);
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(a1, v23, a3);
          v11 = (__int128 *)(v23 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v23 + 24, (uint64_t)a2, a3))
          {
            v12 = v13 + 1;
            if (v25)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,false>(a1, v23, a3, -v13, a5 & 1);
            v11 = (__int128 *)(v23 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = (__int128 *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*,TItnControl*>((__n128 *)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(uint64_t, __int8 *))a3, a6);
        return;
    }
  }
}

  v10 = (__int128 *)((char *)a2 - 56);
  v11 = (__int128 *)a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = 0x6DB6DB6DB6DB6DB7 * (((char *)a2 - (char *)v11) >> 3);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)((char *)a2 - 56), v11))
        {
          v38 = *((_QWORD *)v11 + 6);
          v34 = v11[1];
          v36 = v11[2];
          v32 = *v11;
          v28 = *v10;
          v29 = *(__int128 *)((char *)a2 - 40);
          v30 = *(__int128 *)((char *)a2 - 24);
          *((_DWORD *)v11 + 12) = *((_DWORD *)a2 - 2);
          v11[1] = v29;
          v11[2] = v30;
          *v11 = v28;
          *v10 = v32;
          *(__int128 *)((char *)a2 - 40) = v34;
          *(__int128 *)((char *)a2 - 24) = v36;
          *((_DWORD *)a2 - 2) = v38;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(v11, (__int128 *)((char *)v11 + 56), (__int128 *)((char *)a2 - 56), a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((uint64_t)v11, (uint64_t)v11 + 56, (uint64_t)(v11 + 7), (uint64_t)a2 - 56, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((uint64_t)v11, (uint64_t)v11 + 56, (uint64_t)(v11 + 7), (uint64_t)v11 + 168, (__int128 *)((char *)a2 - 56), a3);
        return;
      default:
        if (v14 <= 1343)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = (__int128 *)((char *)v11 + 56 * (v15 >> 1));
          if ((unint64_t)v14 < 0x1C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(v17, v11, (__int128 *)((char *)a2 - 56), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(v11, v17, (__int128 *)((char *)a2 - 56), a3);
            v18 = 56 * v16;
            v19 = (__int128 *)((char *)v11 + 56 * v16 - 56);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((__int128 *)((char *)v11 + 56), v19, a2 - 7, a3);
            v20 = v11 + 7;
            v21 = (__int128 *)((char *)v11 + v18 + 56);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(v20, v21, (__int128 *)((char *)a2 - 168), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(v19, v17, v21, a3);
            v37 = *(_QWORD *)(a1 + 48);
            v33 = *(_OWORD *)(a1 + 16);
            v35 = *(_OWORD *)(a1 + 32);
            v31 = *(_OWORD *)a1;
            v22 = *v17;
            v23 = v17[1];
            v24 = v17[2];
            *(_DWORD *)(a1 + 48) = *((_DWORD *)v17 + 12);
            *(_OWORD *)(a1 + 16) = v23;
            *(_OWORD *)(a1 + 32) = v24;
            *(_OWORD *)a1 = v22;
            *((_DWORD *)v17 + 12) = v37;
            v17[1] = v33;
            v17[2] = v35;
            *v17 = v31;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((__int128 *)(a1 - 56), (__int128 *)a1) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TGrammarManager2Result *,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&)>((__int128 *)a1, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v25 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TGrammarManager2Result *,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&)>((__int128 *)a1, (unint64_t)a2, (uint64_t (**)(char *, __int128 *))a3);
          if ((v26 & 1) == 0)
            goto LABEL_14;
          v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManagerResult const&,TGrammarManagerResult const&),TGrammarManagerResult*>(a1, v25, a3);
          v11 = (__int128 *)(v25 + 56);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManagerResult const&,TGrammarManagerResult const&),TGrammarManagerResult*>(v25 + 56, (uint64_t)a2, a3))
          {
            v12 = v13 + 1;
            if (v27)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManagerResult const&,TGrammarManagerResult const&),TGrammarManagerResult*,false>(a1, v25, a3, -v13, a5 & 1);
            v11 = (__int128 *)(v25 + 56);
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = (__int128 *)v25;
          if (v27)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*,TGrammarManager2Result*>((uint64_t)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(int64_t, uint64_t))a3, a6);
        return;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (result != a2)
  {
    v17 = v3;
    v18 = v4;
    v6 = result;
    v7 = result + 24;
    if (result + 24 != a2)
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v15 = *(_OWORD *)v10;
          v16 = *(_QWORD *)(v10 + 16);
          v12 = v9;
          while (1)
          {
            v13 = v6 + v12;
            *(_OWORD *)(v13 + 24) = *(_OWORD *)(v6 + v12);
            *(_QWORD *)(v13 + 40) = *(_QWORD *)(v6 + v12 + 16);
            if (!v12)
              break;
            v12 -= 24;
            result = (*a3)((uint64_t)&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              v14 = v6 + v12 + 24;
              goto LABEL_10;
            }
          }
          v14 = v6;
LABEL_10:
          *(_OWORD *)v14 = v15;
          *(_QWORD *)(v14 + 16) = v16;
        }
        v7 = v10 + 24;
        v9 += 24;
      }
      while (v10 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (result != a2)
  {
    v14 = v3;
    v15 = v4;
    v6 = result;
    v7 = result + 24;
    if (result + 24 != a2)
    {
      v9 = result - 24;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12 = *(_OWORD *)v6;
          v13 = *(_QWORD *)(v6 + 16);
          v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 48) = *(_OWORD *)(v11 + 24);
            *(_QWORD *)(v11 + 64) = *(_QWORD *)(v11 + 40);
            result = (*a3)((uint64_t)&v12, v11);
            v11 -= 24;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v11 + 48) = v12;
          *(_QWORD *)(v11 + 64) = v13;
        }
        v7 = v6 + 24;
        v9 += 24;
      }
      while (v6 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v13 = *((_QWORD *)a2 + 2);
    v14 = *a2;
    v15 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v15;
    *a3 = v14;
    *((_QWORD *)a3 + 2) = v13;
    if (!(*a4)(a2, a1))
      return 1;
    v16 = *((_QWORD *)a1 + 2);
    v17 = *a1;
    v18 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v18;
    *a2 = v17;
    *((_QWORD *)a2 + 2) = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = *((_QWORD *)a1 + 2);
    v20 = *a1;
    v21 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v21;
    *a2 = v20;
    *((_QWORD *)a2 + 2) = v19;
    if (!(*a4)(a3, a2))
      return 1;
    v22 = *((_QWORD *)a2 + 2);
    v23 = *a2;
    v24 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v24;
    *a3 = v23;
    *((_QWORD *)a3 + 2) = v22;
    return 2;
  }
  v10 = *((_QWORD *)a1 + 2);
  v11 = *a1;
  v12 = *((_QWORD *)a3 + 2);
  *a1 = *a3;
  *((_QWORD *)a1 + 2) = v12;
  *a3 = v11;
  *((_QWORD *)a3 + 2) = v10;
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TItnControl *,BOOL (*&)(TItnControl const&,TItnControl const&)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v6;
  __int128 *v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v4 = a2;
  v16 = *a1;
  v17 = *((_QWORD *)a1 + 2);
  if (((*a3)(&v16, (__int128 *)((char *)a2 - 24)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 = (__int128 *)((char *)v6 + 24);
    while (((*a3)(&v16, v6) & 1) == 0);
  }
  else
  {
    v7 = (__int128 *)((char *)a1 + 24);
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v16, v7);
      v7 = (__int128 *)((char *)v6 + 24);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 = (__int128 *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *v6;
    v19 = *((_QWORD *)v6 + 2);
    v18 = v9;
    v10 = *v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
    *v6 = v10;
    v11 = v18;
    *((_QWORD *)v4 + 2) = v19;
    *v4 = v11;
    do
      v6 = (__int128 *)((char *)v6 + 24);
    while (!(*a3)(&v16, v6));
    do
      v4 = (__int128 *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  v12 = (__int128 *)((char *)v6 - 24);
  if ((__int128 *)((char *)v6 - 24) != a1)
  {
    v13 = *v12;
    *((_QWORD *)a1 + 2) = *((_QWORD *)v6 - 1);
    *a1 = v13;
  }
  v14 = v16;
  *((_QWORD *)v6 - 1) = v17;
  *v12 = v14;
  return v6;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TItnControl *,BOOL (*&)(TItnControl const&,TItnControl const&)>(__int128 *a1, unint64_t a2, uint64_t (**a3)(char *, __int128 *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  do
    v6 += 24;
  while (((*a3)((char *)a1 + v6, &v17) & 1) != 0);
  v7 = (unint64_t)a1 + v6;
  v8 = (uint64_t)a1 + v6 - 24;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= a2)
        break;
      a2 -= 24;
    }
    while (((*a3)((char *)a2, &v17) & 1) == 0);
  }
  else
  {
    do
      a2 -= 24;
    while (!(*a3)((char *)a2, &v17));
  }
  if (v7 < a2)
  {
    v9 = (__int128 *)((char *)a1 + v6);
    v10 = a2;
    do
    {
      v19 = *v9;
      v11 = v19;
      v20 = *((_QWORD *)v9 + 2);
      v12 = v20;
      v13 = *(_QWORD *)(v10 + 16);
      *v9 = *(_OWORD *)v10;
      *((_QWORD *)v9 + 2) = v13;
      *(_QWORD *)(v10 + 16) = v12;
      *(_OWORD *)v10 = v11;
      do
        v9 = (__int128 *)((char *)v9 + 24);
      while (((*a3)((char *)v9, &v17) & 1) != 0);
      do
        v10 -= 24;
      while (!(*a3)((char *)v10, &v17));
    }
    while ((unint64_t)v9 < v10);
    v8 = (uint64_t)v9 - 24;
  }
  if ((__int128 *)v8 != a1)
  {
    v14 = *(_OWORD *)v8;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v8 + 16);
    *a1 = v14;
  }
  v15 = v17;
  *(_QWORD *)(v8 + 16) = v18;
  *(_OWORD *)v8 = v15;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 24);
      if ((*a3)((__int128 *)(a2 - 24), (__int128 *)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v11;
        *v8 = v10;
        *(_QWORD *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      v12 = (__int128 *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v13, v12))
    {
      v19 = *(_OWORD *)v13;
      v20 = *(_QWORD *)(v13 + 16);
      v16 = v14;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (((*a3)(&v19, (__int128 *)(v17 + 24)) & 1) == 0)
        {
          v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_OWORD *)v18 = v19;
      *(_QWORD *)(v18 + 16) = v20;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (__int128 *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(_QWORD *)(a4 + 16) = v11;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v14 = *(_QWORD *)(a2 + 16);
      v15 = *(_OWORD *)a2;
      v16 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(_QWORD *)(a3 + 16) = v14;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        v17 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((uint64_t)a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v14 = *(_QWORD *)(a4 + 16);
    v15 = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(_QWORD *)(a5 + 16) = v14;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v17 = *(_QWORD *)(a3 + 16);
      v18 = *(_OWORD *)a3;
      v19 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(_QWORD *)(a4 + 16) = v17;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v20 = *(_QWORD *)(a2 + 16);
        v21 = *(__n128 *)a2;
        v22 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(_QWORD *)(a3 + 16) = v20;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          v23 = a1[1].n128_u64[0];
          result = *a1;
          v24 = *(_QWORD *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v24;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*,TItnControl*>(__n128 *a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(uint64_t, __int8 *), __n128 a5)
{
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __n128 v26;
  __n128 *v29;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;

  if (a1 != a2)
  {
    v7 = a2;
    v9 = (char *)a2 - (char *)a1;
    v10 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__n128 *)((char *)a1 + 24 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((uint64_t)a1, a4, v10, v13);
        v13 = (__n128 *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, __n128 *, __n128))*a4)(v15, a1, a5))
        {
          v16 = v15[1].n128_u64[0];
          v17 = *v15;
          v18 = a1[1].n128_u64[0];
          *v15 = *a1;
          v15[1].n128_u64[0] = v18;
          *a1 = v17;
          a1[1].n128_u64[0] = v16;
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((uint64_t)a1, a4, v10, a1);
        }
        v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 < 25)
    {
      return v14;
    }
    else
    {
      v29 = v14;
      v19 = v9 / 0x18uLL;
      do
      {
        v30 = v7;
        v20 = 0;
        v31 = *a1;
        v32 = a1[1].n128_u64[0];
        v21 = (uint64_t)a1;
        do
        {
          v22 = v21 + 24 * v20 + 24;
          v23 = (2 * v20) | 1;
          v24 = 2 * v20 + 2;
          if (v24 < v19 && (*a4)(v21 + 24 * v20 + 24, (__int8 *)(v21 + 24 * v20 + 48)))
          {
            v22 += 24;
            v23 = v24;
          }
          v25 = *(_OWORD *)v22;
          *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
          *(_OWORD *)v21 = v25;
          v21 = v22;
          v20 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        v7 = (__n128 *)((char *)v30 - 24);
        if ((__int8 *)v22 == &v30[-2].n128_i8[8])
        {
          *(_QWORD *)(v22 + 16) = v32;
          *(__n128 *)v22 = v31;
        }
        else
        {
          v26 = *v7;
          *(_QWORD *)(v22 + 16) = v30[-1].n128_u64[1];
          *(__n128 *)v22 = v26;
          *v7 = v31;
          v30[-1].n128_u64[1] = v32;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((uint64_t)a1, v22 + 24, (uint64_t (**)(__int128 *, __int128 *))a4, 0xAAAAAAAAAAAAAAABLL * ((v22 + 24 - (uint64_t)a1) >> 3));
        }
      }
      while (v19-- > 2);
      return v29;
    }
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(uint64_t a1, unsigned int (**a2)(uint64_t, __int8 *), uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = (__n128 *)(a1 + 24 * v12);
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 24 * v12, &v13[1].n128_i8[8]))
      {
        v13 = (__n128 *)((char *)v13 + 24);
        v12 = v14;
      }
      if ((((uint64_t (*)(__n128 *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        do
        {
          v16 = v13;
          v17 = *v13;
          v7[1].n128_u64[0] = v13[1].n128_u64[0];
          *v7 = v17;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = (__n128 *)(a1 + 24 * v18);
          v19 = 2 * v12 + 2;
          if (v19 < a3)
          {
            if ((*a2)(a1 + 24 * v18, &v13[1].n128_i8[8]))
            {
              v13 = (__n128 *)((char *)v13 + 24);
              v18 = v19;
            }
          }
          v7 = v16;
          v12 = v18;
        }
        while (!(*a2)((uint64_t)v13, (__int8 *)&v20));
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  double result;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v17 = v4;
    v18 = v5;
    v9 = v6 >> 1;
    v10 = (__int128 *)(a1 + 24 * (v6 >> 1));
    v11 = (__int128 *)(a2 - 24);
    if ((*a3)(v10, (__int128 *)(a2 - 24)))
    {
      v15 = *v11;
      v16 = *((_QWORD *)v11 + 2);
      do
      {
        v13 = v10;
        v14 = *v10;
        *((_QWORD *)v11 + 2) = *((_QWORD *)v10 + 2);
        *v11 = v14;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__int128 *)(a1 + 24 * v9);
        v11 = v13;
      }
      while (((*a3)(v10, &v15) & 1) != 0);
      result = *(double *)&v15;
      *v13 = v15;
      *((_QWORD *)v13 + 2) = v16;
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__emplace_multi<std::pair<wchar_t const*,TPItnRuleHandle_fake **>>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  uint64_t *v6;

  std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__construct_node<std::pair<wchar_t const*,TPItnRuleHandle_fake **>>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__find_leaf_high((uint64_t)a1, &v5, (uint64_t)(v6 + 4));
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v5, leaf_high, v6);
  return v6;
}

void sub_2097ACDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__construct_node<std::pair<wchar_t const*,TPItnRuleHandle_fake **>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::wstring::basic_string[abi:ne180100]<0>((uint64_t)(v6 + 4), *(__int32 **)a2);
  v6[7] = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2097ACE68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = v4;
        if (!std::less<std::wstring>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = (_QWORD *)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__equal_range_multi<std::wstring>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  while ((std::less<std::wstring>::operator()[abi:ne180100](v5, a2, (uint64_t)(v3 + 4)) & 1) != 0)
  {
    v2 = v3;
LABEL_7:
    v3 = (_QWORD *)*v3;
    if (!v3)
      return v2;
  }
  if (std::less<std::wstring>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2))
  {
    ++v3;
    goto LABEL_7;
  }
  v8 = (_QWORD *)*v3;
  v6 = v3;
  if (*v3)
  {
    v6 = v3;
    do
    {
      v9 = std::less<std::wstring>::operator()[abi:ne180100](v5, (uint64_t)(v8 + 4), a2);
      v10 = v8 + 1;
      if (!v9)
      {
        v10 = v8;
        v6 = v8;
      }
      v8 = (_QWORD *)*v10;
    }
    while (*v10);
  }
  v11 = (_QWORD *)v3[1];
  if (v11)
  {
    do
    {
      v12 = std::less<std::wstring>::operator()[abi:ne180100](v5, a2, (uint64_t)(v11 + 4));
      v13 = v11 + 1;
      if (v12)
        v13 = v11;
      v11 = (_QWORD *)*v13;
    }
    while (*v13);
  }
  return v6;
}

uint64_t TBuffer<TPItnRuleHandle_fake **>::insert(uint64_t result, unint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = result;
  v7 = *(_QWORD *)(result + 16);
  if (v7 >= a2)
    v8 = a2;
  else
    v8 = *(_QWORD *)(result + 16);
  if (*(_BYTE *)(result + 2072))
  {
    v9 = v7 + a4;
    v10 = *(_QWORD *)(result + 8);
    if (v7 + a4 > v10 && v10 < 2 * v9)
    {
      *(_QWORD *)(result + 8) = (2 * v9) | 1;
      result = operator new[]();
      v11 = result;
      v12 = *(const void **)v6;
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
        result = (uint64_t)memmove((void *)result, *(const void **)v6, 8 * v7);
      if (v12 != (const void *)(v6 + 24) && v12)
      {
        result = MEMORY[0x20BD149A8](v12, 0x80C40B8603338);
        v7 = *(_QWORD *)(v6 + 16);
      }
      *(_QWORD *)v6 = v11;
    }
  }
  v13 = v8 + a4;
  v14 = *(_QWORD *)(v6 + 8);
  if (v8 < v7 && v13 < v14)
  {
    v16 = v7 + a4;
    if (v14 < v7 + a4)
      v16 = *(_QWORD *)(v6 + 8);
    for (; v13 != v16; --v16)
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v16 - 8) = *(_QWORD *)(*(_QWORD *)v6 + 8 * v16 + 8 * ~a4);
  }
  v17 = v14 - v8;
  if (v14 > v8)
  {
    if (v17 >= a4)
      v17 = a4;
    if (v17)
    {
      v18 = 8 * v8;
      do
      {
        v19 = *a3++;
        *(_QWORD *)(*(_QWORD *)v6 + v18) = v19;
        v18 += 8;
        --v17;
      }
      while (v17);
    }
  }
  *(_QWORD *)(v6 + 16) = v7 + a4;
  if (v7 + a4 < v14)
    *(_QWORD *)(*(_QWORD *)v6 + 8 * (v7 + a4)) = 0;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

void std::vector<TItnRule *>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::vector<TPItnRuleControl>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::vector<std::pair<TWord const*,unsigned int>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *std::vector<TWord const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2097AD56C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<TWord const*,unsigned int>>::__init_with_size[abi:ne180100]<std::pair<TWord const*,unsigned int>*,std::pair<TWord const*,unsigned int>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<TWord const*,unsigned int>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_2097AD5DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<TWord const*,unsigned int>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2097AD690(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2097AD710(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MrecInitModule_constran_kernel(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;

  if (!gParDebugConstraint)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugConstraint", (const char *)&unk_209A593F0, (const char *)&unk_209A593F0, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugConstraint = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugConstraint);
  }
  if (!gParDiagnosticSearchActiveWordBuildAllSuccessorPhonemeContexts)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DiagnosticSearchActiveWordBuildAllSuccessorPhonemeContexts", (const char *)&unk_209A593F0, (const char *)&unk_209A593F0, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDiagnosticSearchActiveWordBuildAllSuccessorPhonemeContexts = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticSearchActiveWordBuildAllSuccessorPhonemeContexts);
  }
}

uint64_t RecogGermIterator::advanceUntilMatch(uint64_t this)
{
  _DWORD *v1;
  int v2;
  int v3;
  uint64_t v4;
  __int128 v5;
  char v6;
  int v7;
  __int16 v8;
  uint64_t v9;

  if (*(_BYTE *)(this + 32))
  {
    v1 = (_DWORD *)this;
    v4 = 0x3FFFFAFFFFFFLL;
    v5 = xmmword_209A593D0;
    v6 = 0;
    v7 = 1310720000;
    v8 = 0;
    v9 = 0x70000000FFFFFFFELL;
    v2 = *(_DWORD *)(this + 8);
    v3 = *(_DWORD *)(this + 12);
    while (v2 != v3)
    {
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)v1 + 16))(v1, &v4);
      this = RecogGermIterator::cwidacMatches((uint64_t)v1, (int *)&v4);
      if ((this & 1) != 0)
        break;
      v3 = v1[3];
      v2 = v1[2] + 1;
      v1[2] = v2;
    }
  }
  return this;
}

BOOL RecogGermIterator::cwidacMatches(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;
  int v4;

  v2 = *a2;
  if (*(_WORD *)(a1 + 16) != *a2 >> 25)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v2 & 0xFFFFFFu) >= *(_DWORD *)(v3 + 8)
    || ((*(_DWORD *)(*(_QWORD *)v3 + (((*(_QWORD *)&v2 & 0xFFFFFFuLL) >> 3) & 0x1FFFFC)) >> v2) & 1) == 0)
  {
    return 0;
  }
  v4 = a2[2];
  return !v4 || v4 == *(_DWORD *)(a1 + 20);
}

void RecogGermIterator::printSize(RecogGermIterator *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t *v57;
  void *v58;
  int v59;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 142, (DgnString *)&v58);
  if (v59)
    v16 = v58;
  else
    v16 = &unk_209A593F0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A593F0, a3, &unk_209A593F0, v16);
  DgnString::~DgnString((DgnString *)&v58);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A593F0);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 143, (DgnString *)&v58);
  if (v59)
    v25 = v58;
  else
    v25 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &unk_209A593F0, (34 - a3), (34 - a3), v25, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v58);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 144, (DgnString *)&v58);
  if (v59)
    v30 = v58;
  else
    v30 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, (a3 + 1), &unk_209A593F0, (34 - a3), (34 - a3), v30, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v58);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 146, (DgnString *)&v58);
  if (v59)
    v35 = v58;
  else
    v35 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, (a3 + 1), &unk_209A593F0, (34 - a3), (34 - a3), v35, 8, 8, 0);
  v57 = a6;
  DgnString::~DgnString((DgnString *)&v58);
  *a4 += 8;
  *a5 += 8;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v36 = 4;
  else
    v36 = 8;
  v37 = *((_QWORD *)this + 3);
  if (v37)
  {
    v38 = BitArray::sizeObject(v37, 0) + v36;
    v39 = *((_QWORD *)this + 3);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v36 = 4;
    else
      v36 = 8;
    if (v39 && (v36 += BitArray::sizeObject(v39, 1), (v40 = *((_QWORD *)this + 3)) != 0))
      v41 = BitArray::sizeObject(v40, 3);
    else
      v41 = 0;
  }
  else
  {
    v41 = 0;
    v38 = v36;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 148, (DgnString *)&v58);
  if (v59)
    v46 = v58;
  else
    v46 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &unk_209A593F0, (34 - a3), (34 - a3), v46, v38, v36, v41);
  DgnString::~DgnString((DgnString *)&v58);
  *a4 += v38;
  *a5 += v36;
  *v57 += v41;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 149, (DgnString *)&v58);
  if (v59)
    v51 = v58;
  else
    v51 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_209A593F0, (34 - a3), (34 - a3), v51, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v58);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 150, (DgnString *)&v58);
  if (v59)
    v56 = v58;
  else
    v56 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, a3, &unk_209A593F0, (35 - a3), (35 - a3), v56, *a4, *a5, *v57);
  DgnString::~DgnString((DgnString *)&v58);
}

void sub_2097ADD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

double RecogGermArrayRecogGermIterator::getCurrentGermInternal(uint64_t a1, uint64_t a2)
{
  return RecogGerm::operator=(a2, **(_QWORD **)(a1 + 40) + 44 * *(unsigned int *)(a1 + 8));
}

double RecogGerm::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 26) = *(_WORD *)(a2 + 26);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

void Constraint::setUpTranscription(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int16 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int *v43;
  uint64_t v44;
  _QWORD *v45;
  _WORD *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  _DWORD **v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  __int128 v56;
  _BYTE v57[16];

  v5 = a2;
  v6 = a1;
  if (a3)
  {
    DgnPrimArray<int>::copyArraySlice(a1 + 152, (uint64_t *)a3, 0, *(_DWORD *)(a3 + 8));
    *(_BYTE *)(v6 + 60) = 1;
    v9 = *((_DWORD *)v5 + 2);
    if (v9 != *(_DWORD *)(v6 + 160))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 211, (uint64_t)"kernel/constran", 2, (uint64_t)"%s", v7, v8, (char)&unk_209A593F0);
  }
  else
  {
    *(_BYTE *)(a1 + 60) = 0;
    v9 = *((_DWORD *)a2 + 2);
  }
  v10 = (_QWORD *)(v6 + 72);
  v11 = *(_DWORD *)(v6 + 84);
  if (v9 > v11)
    DgnArray<DgnPrimArray<double>>::reallocElts(v6 + 72, v9 - v11, 0);
  v12 = *(unsigned int *)(v6 + 80);
  if (v12 <= v9)
  {
    if (v12 < v9)
    {
      v15 = v9 - v12;
      v16 = 16 * v12;
      do
      {
        v17 = (_QWORD *)(*v10 + v16);
        *v17 = 0;
        v17[1] = 0;
        v16 += 16;
        --v15;
      }
      while (v15);
    }
  }
  else if ((int)v12 > (int)v9)
  {
    v13 = (int)v12;
    v14 = 16 * (int)v12 - 16;
    do
    {
      --v13;
      DgnIArray<Utterance *>::~DgnIArray(*v10 + v14);
      v14 -= 16;
    }
    while (v13 > (int)v9);
  }
  *(_DWORD *)(v6 + 80) = v9;
  if (a4)
    v18 = *a4;
  else
    v18 = 1;
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v57, v18);
  v19 = *(unsigned int *)(v6 + 96);
  if ((int)v19 >= 1)
  {
    v20 = 16 * v19 - 16;
    do
    {
      BitArray::~BitArray((BitArray *)(*(_QWORD *)(v6 + 88) + v20));
      v20 -= 16;
    }
    while (v20 != -16);
  }
  *(_DWORD *)(v6 + 96) = 0;
  v21 = *(unsigned int *)(v6 + 112);
  if ((int)v21 >= 1)
  {
    v22 = 16 * v21 - 16;
    do
    {
      BitArray::~BitArray((BitArray *)(*(_QWORD *)(v6 + 104) + v22));
      v22 -= 16;
    }
    while (v22 != -16);
  }
  *(_DWORD *)(v6 + 112) = 0;
  v23 = *(_DWORD *)(v6 + 100);
  if (v9 > v23)
    DgnArray<DgnPrimArray<double>>::reallocElts(v6 + 88, v9 - v23, 0);
  v24 = *(_DWORD *)(v6 + 116);
  if (v9 > v24)
    DgnArray<DgnPrimArray<double>>::reallocElts(v6 + 104, v9 - v24, 0);
  v50 = (_DWORD **)(v6 + 120);
  BitArray::operator=((int **)(v6 + 120), (uint64_t)v57);
  if (v9)
  {
    v25 = 0;
    do
    {
      PhnIndexSet::PhnIndexSet((PhnIndexSet *)(*(_QWORD *)(v6 + 88) + 16 * *(unsigned int *)(v6 + 96)), (const PhnIndexSet *)v57);
      ++*(_DWORD *)(v6 + 96);
      PhnIndexSet::PhnIndexSet((PhnIndexSet *)(*(_QWORD *)(v6 + 104) + 16 * *(unsigned int *)(v6 + 112)), (const PhnIndexSet *)v57);
      ++*(_DWORD *)(v6 + 112);
      ++v25;
    }
    while (v9 > (unsigned __int16)v25);
    v48 = (uint64_t *)(v6 + 104);
    v49 = (uint64_t *)(v6 + 88);
    if (*(_BYTE *)(v6 + 64))
    {
      **v50 |= 1u;
      v26 = 0;
      v27 = *v49;
      v28 = *v48;
      do
      {
        v29 = 16 * (unsigned __int16)v26;
        **(_DWORD **)(v27 + v29) |= 1u;
        **(_DWORD **)(v28 + v29) |= 1u;
        ++v26;
      }
      while (v9 > (unsigned __int16)v26);
    }
    v30 = 0;
    v31 = 0;
    v32 = *v5;
    v52 = v9;
    while (1)
    {
      *(_DWORD *)(*v10 + 16 * v31 + 8) = 0;
      if (*(_DWORD *)(v32 + 16 * v31 + 8))
        break;
LABEL_59:
      v30 = ++v31;
      if (v52 <= v31)
        goto LABEL_60;
    }
    v33 = 0;
    v51 = (v30 - 1);
    v53 = (v30 + 1);
    while (1)
    {
      v34 = *(unsigned int *)(*(_QWORD *)(v32 + 16 * v31) + 4 * v33);
      v54 = v34;
      v55 = v31;
      v56 = xmmword_209A593D0;
      v35 = (v34 & 0xFE000000) == 0xFA000000 || (v34 & 0xFE000000) == -67108864;
      if (!v35 && DgnArray<CWIDAC>::find(*v10 + 16 * v31, (uint64_t)&v54) == -1)
      {
        v36 = *(_QWORD **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v34 >> 22) & 0x3F8)) + 48);
        v37 = v34 & 0xFFFFFF;
        v38 = *(unsigned __int8 *)(v6 + 64);
        if (*(_BYTE *)(v6 + 64))
        {
          if (*(_WORD *)(v36[4] + 2 * v37))
            goto LABEL_51;
        }
        else if (*(_DWORD *)(v36[32] + 4 * v37) == (_DWORD)v37)
        {
LABEL_51:
          v39 = v5;
          v40 = v6;
          v41 = *v10 + 16 * v31;
          v43 = (unsigned int *)(v41 + 8);
          v42 = *(_DWORD *)(v41 + 8);
          if (v42 == *(_DWORD *)(v41 + 12))
          {
            DgnArray<CWIDAC>::reallocElts(*v10 + 16 * v31, 1, 1);
            v42 = *v43;
            v38 = *(unsigned __int8 *)(v40 + 64);
          }
          v44 = *(_QWORD *)v41 + 24 * v42;
          *(_DWORD *)v44 = v54;
          *(_DWORD *)(v44 + 4) = v55;
          *(_OWORD *)(v44 + 8) = v56;
          *v43 = v42 + 1;
          v6 = v40;
          v5 = v39;
          if (v38 && *(_WORD *)(v36[4] + 2 * v37))
          {
            v45 = v50;
            if (v31)
              v45 = (_QWORD *)(*v49 + 16 * v51);
            v46 = (_WORD *)(v36[9] + 2 * *(unsigned int *)(v36[6] + 4 * v37));
            v47 = (unsigned __int16)v46[*(unsigned __int16 *)(v36[4] + 2 * v37) - 1];
            *(_DWORD *)(*v45 + (((unint64_t)(unsigned __int16)*v46 >> 3) & 0x1FFC)) |= 1 << *v46;
            if ((_DWORD)v53 != *(_DWORD *)(v6 + 96))
              *(_DWORD *)(*(_QWORD *)(*v48 + 16 * v53) + ((v47 >> 3) & 0x1FFC)) |= 1 << v47;
          }
        }
      }
      ++v33;
      v32 = *v5;
      if (v33 >= *(unsigned int *)(*v5 + 16 * v31 + 8))
        goto LABEL_59;
    }
  }
  if (*(_BYTE *)(v6 + 64))
    **v50 |= 1u;
LABEL_60:
  *(_BYTE *)(v6 + 296) = 0;
  BitArray::~BitArray((BitArray *)v57);
}

void sub_2097AE2E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  BitArray::~BitArray((BitArray *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t Constraint::Constraint(uint64_t a1, __int16 a2, int a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, int a10, int a11, char a12, unsigned int *a13)
{
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;

  *(_WORD *)a1 = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)(a1 + 120), 0);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 300) = -16;
  *(_BYTE *)(a1 + 296) = 0;
  Hash<StateSpec,StateSpec,StateSpec,BOOL>::Hash(a1 + 336, 0, 128);
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  Hash<StateSpec,StateSpec,StateSpec,unsigned int>::Hash(a1 + 464, 0, 128);
  *(_OWORD *)(a1 + 576) = 0u;
  Hash<StateSpec,StateSpec,StateSpec,unsigned int>::Hash(a1 + 592, 0, 128);
  *(_BYTE *)(a1 + 64) = a12;
  *(_DWORD *)(a1 + 248) = 1879048192;
  if (a3 && a4)
  {
    v20 = 2;
LABEL_6:
    *(_DWORD *)(a1 + 68) = v20;
    goto LABEL_7;
  }
  if (a3)
  {
    v20 = 1;
    goto LABEL_6;
  }
  if ((a4 & 1) != 0)
  {
    v20 = 0;
    *(_DWORD *)(a1 + 68) = 0;
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 68);
  }
LABEL_7:
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 256;
  if ((v20 - 1) <= 1)
  {
    Constraint::setUpTranscription(a1, a5, a6, a13);
    v20 = *(_DWORD *)(a1 + 68);
  }
  if ((v20 & 0xFFFFFFFD) == 0)
  {
    DgnPrimArray<int>::copyArraySlice(a1 + 168, (uint64_t *)a7, 0, *(_DWORD *)(a7 + 8));
    if (a8)
      DgnArray<DgnArray<ParseToken>>::copyArraySlice(a1 + 184, (_QWORD *)a8, 0, *(_DWORD *)(a8 + 8));
    v23 = a9;
    *(_QWORD *)(a1 + 216) = a9;
    *(_DWORD *)(a1 + 240) = a10;
    *(_DWORD *)(a1 + 244) = a11;
    if (a9)
    {
      v28 = 0;
      v29 = 0;
      if (*(_DWORD *)(a9 + 24))
      {
        v24 = 0;
        do
        {
          v25 = *(_DWORD *)(*(_QWORD *)(v23 + 16) + 4 * v24);
          if (!*(_DWORD *)(*(_QWORD *)(v23 + 80) + 24 * v25 + 8))
          {
            Lattice<WordLatticeLC>::appendOutLinks(v23, v25, (uint64_t)&v28);
            v23 = *(_QWORD *)(a1 + 216);
          }
          ++v24;
        }
        while (v24 < *(unsigned int *)(v23 + 24));
        if ((_DWORD)v29)
        {
          v26 = 0;
          do
            Lattice<WordLatticeLC>::appendOutLinks(*(_QWORD *)(a1 + 216), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 128) + 136 * *(unsigned int *)(v28 + 4 * v26++) + 120), a1 + 224);
          while (v26 < v29);
          v23 = *(_QWORD *)(a1 + 216);
        }
      }
      if (*(_BYTE *)(v23 + 216) && *(_DWORD *)(a1 + 244) != -1)
      {
        if (*(_DWORD *)(a1 + 240))
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 399, (uint64_t)"kernel/constran", 3, (uint64_t)"%s", v21, v22, (char)&errStr_kernel_constran_E_LATTICE_TIME_CONSTRAINT);
          v23 = *(_QWORD *)(a1 + 216);
        }
        *(_DWORD *)(a1 + 248) = WordLattice::computeBackwardScores(v23, a1 + 256);
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
    }
  }
  return a1;
}

void sub_2097AE628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, BitArray *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v27 - 104);
  Hash<StateSpec,StateSpec,StateSpec,unsigned int>::~Hash(a21);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v23 + 576);
  Hash<StateSpec,StateSpec,StateSpec,unsigned int>::~Hash(a19);
  DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::releaseAll(v23 + 448);
  Hash<StateSpec,StateSpec,StateSpec,BOOL>::~Hash(a17);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a20);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a22);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v24);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a15);
  DgnArray<DgnArray<ParseToken>>::releaseAll(a23);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a10);
  DgnIArray<Utterance *>::~DgnIArray(v25);
  BitArray::~BitArray(a13);
  DgnArray<PhnIndexSet>::releaseAll(a18);
  DgnArray<PhnIndexSet>::releaseAll(a16);
  DgnArray<DgnArray<ParseToken>>::releaseAll(a14);
  DgnArray<DgnArray<ParseToken>>::releaseAll(a11);
  DgnArray<DgnArray<ParseToken>>::releaseAll(a12);
  _Unwind_Resume(a1);
}

unint64_t Lattice<WordLatticeLC>::appendOutLinks(unint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  unsigned int v6;

  v3 = *(unsigned int *)(*(_QWORD *)(result + 80) + 24 * a2 + 20);
  if ((_DWORD)v3 != -2)
  {
    v5 = result;
    v6 = *(_DWORD *)(a3 + 8);
    do
    {
      if (v6 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v6 = *(_DWORD *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v6) = v3;
      v6 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v6;
      v3 = *(unsigned int *)(*(_QWORD *)(v5 + 128) + 136 * v3 + 128);
    }
    while ((_DWORD)v3 != -2);
  }
  return result;
}

void Constraint::~Constraint(Constraint *this)
{
  DgnDelete<DgnPrimArray<unsigned int>>(*((_QWORD *)this + 36));
  Hash<StateSpec,StateSpec,StateSpec,unsigned int>::~Hash((uint64_t)this + 592);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 576);
  Hash<StateSpec,StateSpec,StateSpec,unsigned int>::~Hash((uint64_t)this + 464);
  DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::releaseAll((uint64_t)this + 448);
  Hash<StateSpec,StateSpec,StateSpec,BOOL>::~Hash((uint64_t)this + 336);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 272);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 256);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 200);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 152);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136);
  BitArray::~BitArray((Constraint *)((char *)this + 120));
  DgnArray<PhnIndexSet>::releaseAll((uint64_t)this + 104);
  DgnArray<PhnIndexSet>::releaseAll((uint64_t)this + 88);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 72);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 40);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 24);
}

uint64_t DgnDelete<DgnPrimArray<unsigned int>>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)DgnPrimArray<unsigned int>::~DgnPrimArray(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

void Constraint::printSize(Constraint *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  void *v303;
  uint64_t v304;
  unint64_t *v305;
  void *v306;
  uint64_t v307;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 432, (DgnString *)&v306);
  if ((_DWORD)v307)
    v16 = v306;
  else
    v16 = &unk_209A593F0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A593F0, a3, &unk_209A593F0, v16);
  DgnString::~DgnString((DgnString *)&v306);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A593F0);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 433, (DgnString *)&v306);
  if ((_DWORD)v307)
    v27 = v306;
  else
    v27 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A593F0, (34 - a3), (34 - a3), v27, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += 2;
  *a5 += 2;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v28 = 4;
  else
    v28 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 434, (DgnString *)&v306);
  if ((_DWORD)v307)
    v33 = v306;
  else
    v33 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, (a3 + 1), &unk_209A593F0, (34 - a3), (34 - a3), v33, v28, v28, 0);
  v304 = a3;
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v28;
  *a5 += v28;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 436, (DgnString *)&v306);
  if ((_DWORD)v307)
    v38 = v306;
  else
    v38 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), &unk_209A593F0, (34 - a3), (34 - a3), v38, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += 4;
  *a5 += 4;
  v39 = sizeObject<DgnArray<RecogGerm>>((uint64_t)this + 24, 0);
  v40 = sizeObject<DgnArray<RecogGerm>>((uint64_t)this + 24, 1);
  v41 = sizeObject<DgnArray<RecogGerm>>((uint64_t)this + 24, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 438, (DgnString *)&v306);
  if ((_DWORD)v307)
    v46 = v306;
  else
    v46 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v21, &unk_209A593F0, v22, v22, v46, v39, v40, v41);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v39;
  *a5 += v40;
  *a6 += v41;
  v47 = sizeObject<DgnArray<RecogGerm>>((uint64_t)this + 40, 0);
  v48 = sizeObject<DgnArray<RecogGerm>>((uint64_t)this + 40, 1);
  v49 = sizeObject<DgnArray<RecogGerm>>((uint64_t)this + 40, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 440, (DgnString *)&v306);
  if ((_DWORD)v307)
    v54 = v306;
  else
    v54 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v21, &unk_209A593F0, v22, v22, v54, v47, v48, v49);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v47;
  *a5 += v48;
  *a6 += v49;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 441, (DgnString *)&v306);
  if ((_DWORD)v307)
    v59 = v306;
  else
    v59 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v21, &unk_209A593F0, v22, v22, v59, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 442, (DgnString *)&v306);
  if ((_DWORD)v307)
    v64 = v306;
  else
    v64 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v21, &unk_209A593F0, v22, v22, v64, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v306);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 444, (DgnString *)&v306);
  if ((_DWORD)v307)
    v69 = v306;
  else
    v69 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v21, &unk_209A593F0, v22, v22, v69, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v306);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 446, (DgnString *)&v306);
  if ((_DWORD)v307)
    v74 = v306;
  else
    v74 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v21, &unk_209A593F0, v22, v22, v74, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v306);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 448, (DgnString *)&v306);
  if ((_DWORD)v307)
    v79 = v306;
  else
    v79 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v21, &unk_209A593F0, v22, v22, v79, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v306);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 449, (DgnString *)&v306);
  if ((_DWORD)v307)
    v84 = v306;
  else
    v84 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v21, &unk_209A593F0, v22, v22, v84, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v306);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 451, (DgnString *)&v306);
  if ((_DWORD)v307)
    v89 = v306;
  else
    v89 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v21, &unk_209A593F0, v22, v22, v89, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += 4;
  *a5 += 4;
  v90 = sizeObject<DgnArray<CWIDAC>>((uint64_t)this + 72, 0);
  v91 = sizeObject<DgnArray<CWIDAC>>((uint64_t)this + 72, 1);
  v92 = sizeObject<DgnArray<CWIDAC>>((uint64_t)this + 72, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 453, (DgnString *)&v306);
  if ((_DWORD)v307)
    v97 = v306;
  else
    v97 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A593F0, v22, v22, v97, v90, v91, v92);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v90;
  *a5 += v91;
  *a6 += v92;
  v98 = sizeObject<PhnIndexSet>((uint64_t)this + 88, 0);
  v99 = sizeObject<PhnIndexSet>((uint64_t)this + 88, 1);
  v100 = sizeObject<PhnIndexSet>((uint64_t)this + 88, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 455, (DgnString *)&v306);
  if ((_DWORD)v307)
    v105 = v306;
  else
    v105 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A593F0, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v98;
  *a5 += v99;
  *a6 += v100;
  v106 = sizeObject<PhnIndexSet>((uint64_t)this + 104, 0);
  v107 = sizeObject<PhnIndexSet>((uint64_t)this + 104, 1);
  v108 = sizeObject<PhnIndexSet>((uint64_t)this + 104, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 457, (DgnString *)&v306);
  if ((_DWORD)v307)
    v113 = v306;
  else
    v113 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v21, &unk_209A593F0, v22, v22, v113, v106, v107, v108);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v106;
  *a5 += v107;
  *a6 += v108;
  v114 = PhnIndexSet::sizeObject((char *)this + 120, 0);
  v115 = PhnIndexSet::sizeObject((char *)this + 120, 1);
  v116 = PhnIndexSet::sizeObject((char *)this + 120, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 459, (DgnString *)&v306);
  if ((_DWORD)v307)
    v121 = v306;
  else
    v121 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v117, v118, v119, v120, v21, &unk_209A593F0, v22, v22, v121, v114, v115, v116);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v114;
  *a5 += v115;
  *a6 += v116;
  v122 = sizeObject<RecogGerm>((uint64_t)this + 136, 0);
  v123 = sizeObject<RecogGerm>((uint64_t)this + 136, 1);
  v124 = sizeObject<RecogGerm>((uint64_t)this + 136, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 461, (DgnString *)&v306);
  if ((_DWORD)v307)
    v129 = v306;
  else
    v129 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v125, v126, v127, v128, v21, &unk_209A593F0, v22, v22, v129, v122, v123, v124);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v122;
  *a5 += v123;
  *a6 += v124;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v130 = 12;
  else
    v130 = 16;
  v131 = *((unsigned int *)this + 40);
  v132 = *((_DWORD *)this + 41);
  if (v132 >= v131)
  {
    v133 = 0;
    if ((int)v131 > 0)
      v130 += 4 * (v131 - 1) + 4;
    v134 = v130 + 4 * (v132 - v131);
  }
  else
  {
    v133 = 4 * v131;
    v134 = v130;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 463, (DgnString *)&v306);
  if ((_DWORD)v307)
    v139 = v306;
  else
    v139 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v21, &unk_209A593F0, v22, v22, v139, v134, v130, v133);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v134;
  *a5 += v130;
  *a6 += v133;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v140 = 12;
  else
    v140 = 16;
  v141 = *((unsigned int *)this + 44);
  v142 = *((_DWORD *)this + 45);
  if (v142 >= v141)
  {
    v143 = 0;
    if ((int)v141 > 0)
      v140 += 4 * (v141 - 1) + 4;
    v144 = v140 + 4 * (v142 - v141);
  }
  else
  {
    v143 = 4 * v141;
    v144 = v140;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 465, (DgnString *)&v306);
  if ((_DWORD)v307)
    v149 = v306;
  else
    v149 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v21, &unk_209A593F0, v22, v22, v149, v144, v140, v143);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v144;
  *a5 += v140;
  *a6 += v143;
  v150 = sizeObject<DgnArray<ParseToken>>((uint64_t)this + 184, 0);
  v151 = sizeObject<DgnArray<ParseToken>>((uint64_t)this + 184, 1);
  v152 = sizeObject<DgnArray<ParseToken>>((uint64_t)this + 184, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 467, (DgnString *)&v306);
  if ((_DWORD)v307)
    v157 = v306;
  else
    v157 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v153, v154, v155, v156, v21, &unk_209A593F0, v22, v22, v157, v150, v151, v152);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v150;
  *a5 += v151;
  *a6 += v152;
  v158 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 200, 0);
  v159 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 200, 1);
  v306 = 0;
  v307 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v306);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 469, (DgnString *)&v306);
  if ((_DWORD)v307)
    v164 = v306;
  else
    v164 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v160, v161, v162, v163, v21, &unk_209A593F0, v22, v22, v164, v158, v159, 0);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v158;
  *a5 += v159;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v165 = 4;
  else
    v165 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 471, (DgnString *)&v306);
  if ((_DWORD)v307)
    v170 = v306;
  else
    v170 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v166, v167, v168, v169, v21, &unk_209A593F0, v22, v22, v170, v165, v165, 0);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v165;
  *a5 += v165;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v171 = 12;
  else
    v171 = 16;
  v172 = *((unsigned int *)this + 58);
  v173 = *((_DWORD *)this + 59);
  if (v173 >= v172)
  {
    v174 = 0;
    if ((int)v172 > 0)
      v171 += 4 * (v172 - 1) + 4;
    v175 = v171 + 4 * (v173 - v172);
  }
  else
  {
    v174 = 4 * v172;
    v175 = v171;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 473, (DgnString *)&v306);
  if ((_DWORD)v307)
    v180 = v306;
  else
    v180 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v176, v177, v178, v179, v21, &unk_209A593F0, v22, v22, v180, v175, v171, v174);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v175;
  *a5 += v171;
  *a6 += v174;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 475, (DgnString *)&v306);
  if ((_DWORD)v307)
    v185 = v306;
  else
    v185 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v181, v182, v183, v184, v21, &unk_209A593F0, v22, v22, v185, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 477, (DgnString *)&v306);
  if ((_DWORD)v307)
    v190 = v306;
  else
    v190 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v186, v187, v188, v189, v21, &unk_209A593F0, v22, v22, v190, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 479, (DgnString *)&v306);
  if ((_DWORD)v307)
    v195 = v306;
  else
    v195 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v191, v192, v193, v194, v21, &unk_209A593F0, v22, v22, v195, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v196 = 12;
  else
    v196 = 16;
  v197 = *((unsigned int *)this + 66);
  v198 = *((_DWORD *)this + 67);
  if (v198 >= v197)
  {
    v199 = 0;
    if ((int)v197 > 0)
      v196 += 4 * (v197 - 1) + 4;
    v200 = v196 + 4 * (v198 - v197);
  }
  else
  {
    v199 = 4 * v197;
    v200 = v196;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 481, (DgnString *)&v306);
  if ((_DWORD)v307)
    v205 = v306;
  else
    v205 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v201, v202, v203, v204, v21, &unk_209A593F0, v22, v22, v205, v200, v196, v199);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v200;
  *a5 += v196;
  *a6 += v199;
  v206 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 272, 0);
  v207 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 272, 1);
  v306 = 0;
  v307 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v306);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 483, (DgnString *)&v306);
  if ((_DWORD)v307)
    v212 = v306;
  else
    v212 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v208, v209, v210, v211, v21, &unk_209A593F0, v22, v22, v212, v206, v207, 0);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v206;
  *a5 += v207;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v213 = 4;
  else
    v213 = 8;
  v214 = *((_QWORD *)this + 36);
  if (!v214)
  {
    v217 = 0;
LABEL_138:
    v218 = v213;
    goto LABEL_144;
  }
  v215 = *(unsigned int *)(v214 + 8);
  v216 = *(_DWORD *)(v214 + 12);
  if (v216 < v215)
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v213 = 16;
    else
      v213 = 24;
    v217 = 4 * v215;
    goto LABEL_138;
  }
  v217 = 0;
  v219 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v219 = 16;
  if ((int)v215 > 0)
    v219 += 4 * (v215 - 1) + 4;
  v213 += v219;
  v218 = v213 + 4 * (v216 - v215);
LABEL_144:
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 485, (DgnString *)&v306);
  if ((_DWORD)v307)
    v224 = v306;
  else
    v224 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v21, &unk_209A593F0, v22, v22, v224, v218, v213, v217);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v218;
  *a5 += v213;
  v305 = a6;
  *a6 += v217;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 486, (DgnString *)&v306);
  if ((_DWORD)v307)
    v229 = v306;
  else
    v229 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v225, v226, v227, v228, v21, &unk_209A593F0, v22, v22, v229, 31, 31, 0);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += 31;
  *a5 += 31;
  v230 = sizeObject((char *)this + 360);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v231 = 8;
  else
    v231 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v232 = 2;
  else
    v232 = 3;
  v233 = (unint64_t)*((unsigned int *)this + 106) << v232;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v234 = 8;
  else
    v234 = 16;
  v235 = v230 + v234 + v231 + v233 + 13;
  v236 = sizeObject((char *)this + 360);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v237 = 8;
  else
    v237 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v238 = 2;
  else
    v238 = 3;
  v239 = (unint64_t)*((unsigned int *)this + 106) << v238;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v240 = 8;
  else
    v240 = 16;
  v241 = v236 + v240 + v237 + v239 + 13;
  v242 = sizeObject((char *)this + 360);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 488, (DgnString *)&v306);
  if ((_DWORD)v307)
    v247 = v306;
  else
    v247 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v243, v244, v245, v246, v21, &unk_209A593F0, v22, v22, v247, v235, v241, v242);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v235;
  *a5 += v241;
  *a6 += v242;
  v248 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)this + 448, 0);
  v249 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)this + 448, 1);
  v250 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)this + 448, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 490, (DgnString *)&v306);
  if ((_DWORD)v307)
    v255 = v306;
  else
    v255 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v251, v252, v253, v254, v21, &unk_209A593F0, v22, v22, v255, v248, v249, v250);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v248;
  *a5 += v249;
  *a6 += v250;
  v256 = sizeObject((char *)this + 488);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v257 = 8;
  else
    v257 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v258 = 2;
  else
    v258 = 3;
  v259 = (unint64_t)*((unsigned int *)this + 138) << v258;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v260 = 8;
  else
    v260 = 16;
  v261 = v256 + v260 + v257 + v259 + 13;
  v262 = sizeObject((char *)this + 488);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v263 = 8;
  else
    v263 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v264 = 2;
  else
    v264 = 3;
  v265 = (unint64_t)*((unsigned int *)this + 138) << v264;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v266 = 8;
  else
    v266 = 16;
  v267 = v262 + v266 + v263 + v265 + 13;
  v268 = sizeObject((char *)this + 488);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 492, (DgnString *)&v306);
  if ((_DWORD)v307)
    v273 = v306;
  else
    v273 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v269, v270, v271, v272, v21, &unk_209A593F0, v22, v22, v273, v261, v267, v268);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v261;
  *a5 += v267;
  *a6 += v268;
  v274 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 576, 0);
  v275 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 576, 1);
  v306 = 0;
  v307 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v306);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 494, (DgnString *)&v306);
  if ((_DWORD)v307)
    v280 = v306;
  else
    v280 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v276, v277, v278, v279, v21, &unk_209A593F0, v22, v22, v280, v274, v275, 0);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v274;
  *a5 += v275;
  v281 = sizeObject((char *)this + 616);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v282 = 8;
  else
    v282 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v283 = 2;
  else
    v283 = 3;
  v284 = (unint64_t)*((unsigned int *)this + 170) << v283;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v285 = 8;
  else
    v285 = 16;
  v286 = v281 + v285 + v282 + v284 + 13;
  v287 = sizeObject((char *)this + 616);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v288 = 8;
  else
    v288 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v289 = 2;
  else
    v289 = 3;
  v290 = (unint64_t)*((unsigned int *)this + 170) << v289;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v291 = 8;
  else
    v291 = 16;
  v292 = v287 + v291 + v288 + v290 + 13;
  v293 = sizeObject((char *)this + 616);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 496, (DgnString *)&v306);
  if ((_DWORD)v307)
    v298 = v306;
  else
    v298 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v294, v295, v296, v297, v21, &unk_209A593F0, v22, v22, v298, v286, v292, v293);
  DgnString::~DgnString((DgnString *)&v306);
  *a4 += v286;
  *a5 += v292;
  *v305 += v293;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 497, (DgnString *)&v306);
  if ((_DWORD)v307)
    v303 = v306;
  else
    v303 = &unk_209A593F0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v299, v300, v301, v302, v304, &unk_209A593F0, (35 - v304), (35 - v304), v303, *a4, *a5, *v305);
  DgnString::~DgnString((DgnString *)&v306);
}

void sub_2097AFEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnArray<RecogGerm>>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  v4 = sizeObject<RecogGerm>((uint64_t)v10, 2);
  if (a2 == 3)
  {
    v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 12;
    else
      v5 = 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = v4;
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
          v5 += sizeObject<RecogGerm>(*(_QWORD *)a1 + 16 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2)
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v10);
  return v5;
}

void sub_2097B0054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnArray<CWIDAC>>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _BYTE v10[4];
  int v11;
  __int128 v12;

  v9[0] = 0;
  v9[1] = 0;
  v11 = 0x3FFF;
  v12 = xmmword_209A593D0;
  sizeObject((uint64_t)v10, 2);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 12;
  else
    v4 = 16;
  if (a2 == 3)
  {
    v4 = 0;
  }
  else if ((a2 & 0xFFFFFFFE) != 2)
  {
    v5 = *(unsigned int *)(a1 + 8);
    v6 = v4;
    if ((int)v5 >= 1)
    {
      v7 = v5 + 1;
      v6 = v4;
      do
        v6 += sizeObject<CWIDAC>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
      while (v7 > 1);
    }
    if (a2)
      v4 = v6;
    else
      v4 = v6 + v4 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v9);
  return v4;
}

void sub_2097B0160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<PhnIndexSet>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[16];

  DgnString::DgnString((DgnString *)v10);
  v4 = PhnIndexSet::sizeObject(v10, 2);
  if ((_DWORD)a2 == 3)
  {
    v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 12;
    else
      v5 = 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = v4;
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
          v5 += PhnIndexSet::sizeObject(*(_QWORD *)a1 + 16 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!(_DWORD)a2)
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  BitArray::~BitArray((BitArray *)v10);
  return v5;
}

void sub_2097B0250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BitArray::~BitArray((BitArray *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<RecogGerm>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  __int128 v11;
  char v12;
  int v13;
  __int16 v14;
  uint64_t v15;

  v10 = 0x3FFFFAFFFFFFLL;
  v11 = xmmword_209A593D0;
  v12 = 0;
  v13 = 1310720000;
  v14 = 0;
  v15 = 0x70000000FFFFFFFELL;
  v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 12;
  else
    v5 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = v4;
    v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      v8 = v7 + 1;
      do
        v5 += sizeObject(*(_QWORD *)a1 + 44 * (v8-- - 2), a2) + 18;
      while (v8 > 1);
    }
    if (!a2)
      v5 += (v6 + 18) * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
  return v5;
}

uint64_t sizeObject<DgnPrimArray<unsigned int>>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];

  v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  else
    v3 = 16;
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v2 = v3;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 8);
      v2 = v3;
      if ((int)v6 >= 1)
      {
        v7 = v6 + 1;
        v2 = v3;
        do
          v2 += sizeObject<unsigned int>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2)
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  return v2;
}

void sub_2097B0440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnArray<DgnPrimArray<unsigned int>>>(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v9[0] = 0;
  v9[1] = 0;
  v10[0] = 0;
  v10[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 12;
  else
    v4 = 16;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v10);
  v5 = 0;
  if (a2 != 3)
  {
    v5 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = *(unsigned int *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        v7 = v6 + 1;
        do
          v5 += sizeObject<DgnPrimArray<unsigned int>>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2)
        v5 += v4 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v9);
  return v5;
}

void sub_2097B0538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Constraint::makeStateConstraint(__int16 a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7, int a8, char a9, unsigned int *a10)
{
  uint64_t *v18;

  v18 = MemChunkAlloc(0x2C0uLL, 0);
  return Constraint::Constraint((uint64_t)v18, a1, a2, 1, a3, 0, a4, a5, a6, a7, a8, a9, a10);
}

void Constraint::cloneConstraint(Constraint *this, const Constraint *a2)
{
  uint64_t *v3;

  v3 = MemChunkAlloc(0x2C0uLL, 0);
  Constraint::Constraint((Constraint *)v3, this);
}

void Constraint::Constraint(Constraint *this, const Constraint *a2)
{
  uint64_t v4;
  BOOL v5;
  int v6;

  *(_WORD *)this = *(_WORD *)a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  DgnArray<DgnArray<CWIDAC>>::copyArraySlice((uint64_t)this + 72, (_QWORD *)a2 + 9, 0, *((_DWORD *)a2 + 20));
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  DgnArray<PhnIndexSet>::copyArraySlice((uint64_t)this + 88, (_QWORD *)a2 + 11, 0, *((_DWORD *)a2 + 24));
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  DgnArray<PhnIndexSet>::copyArraySlice((uint64_t)this + 104, (_QWORD *)a2 + 13, 0, *((_DWORD *)a2 + 28));
  PhnIndexSet::PhnIndexSet((Constraint *)((char *)this + 120), (const Constraint *)((char *)a2 + 120));
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 152, (uint64_t *)a2 + 19, 0, *((_DWORD *)a2 + 40));
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 168, (uint64_t *)a2 + 21, 0, *((_DWORD *)a2 + 44));
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  DgnArray<DgnArray<ParseToken>>::copyArraySlice((uint64_t)this + 184, (_QWORD *)a2 + 23, 0, *((_DWORD *)a2 + 48));
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  v4 = *((_QWORD *)a2 + 27);
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 27) = v4;
  *((_QWORD *)this + 29) = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 224, (uint64_t *)a2 + 28, 0, *((_DWORD *)a2 + 58));
  *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 256, (uint64_t *)a2 + 32, 0, *((_DWORD *)a2 + 66));
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_DWORD *)this + 75) = -16;
  *((_BYTE *)this + 296) = 0;
  Hash<StateSpec,StateSpec,StateSpec,BOOL>::Hash((uint64_t)this + 336, 0, 128);
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  Hash<StateSpec,StateSpec,StateSpec,unsigned int>::Hash((uint64_t)this + 464, 0, 128);
  *((_OWORD *)this + 36) = 0u;
  Hash<StateSpec,StateSpec,StateSpec,unsigned int>::Hash((uint64_t)this + 592, 0, 128);
  v5 = 0;
  *(_WORD *)((char *)this + 61) = 1;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 63) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  v6 = *((_DWORD *)a2 + 17);
  *((_DWORD *)this + 17) = v6;
  if ((v6 - 1) <= 1)
    v5 = *((_DWORD *)this + 40) != 0;
  *((_BYTE *)this + 60) = v5;
}

void sub_2097B0868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, BitArray *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v23);
  Hash<StateSpec,StateSpec,StateSpec,unsigned int>::~Hash(v19);
  DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::releaseAll(v21 + 448);
  Hash<StateSpec,StateSpec,StateSpec,BOOL>::~Hash(v22);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v21 + 272);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v17);
  DgnArray<DgnArray<ParseToken>>::releaseAll(v16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v24);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a10);
  DgnIArray<Utterance *>::~DgnIArray(a11);
  BitArray::~BitArray(a12);
  DgnArray<PhnIndexSet>::releaseAll(v20);
  DgnArray<PhnIndexSet>::releaseAll(a14);
  DgnArray<DgnArray<ParseToken>>::releaseAll(a15);
  DgnArray<DgnArray<ParseToken>>::releaseAll(a16);
  DgnArray<DgnArray<ParseToken>>::releaseAll(a13);
  _Unwind_Resume(a1);
}

uint64_t Constraint::setupConstraint(Constraint *this)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD **v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *((_BYTE *)this + 296) = 0;
  Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll((uint64_t)this + 336);
  if (!*((_DWORD *)this + 115))
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 448, 1, 0);
  v2 = *((_DWORD *)this + 114);
  if (v2 <= 1)
  {
    if (!v2)
    {
      v3 = (_QWORD *)*((_QWORD *)this + 56);
      *v3 = 0;
      v3[1] = 0;
    }
  }
  else
  {
    DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::destructAt((_QWORD *)this + 56, 1, v2 - 1);
  }
  *((_DWORD *)this + 114) = 1;
  Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll((uint64_t)this + 464);
  v4 = (_QWORD **)((char *)this + 576);
  if (!*((_DWORD *)this + 147))
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 576, 1, 0);
  v5 = *((unsigned int *)this + 146);
  if (v5 <= 1)
  {
    if (!(_DWORD)v5)
    {
      v7 = *v4;
      *v7 = 0;
      v7[1] = 0;
    }
  }
  else if ((int)v5 >= 2)
  {
    v6 = 16 * v5 - 16;
    do
    {
      --v5;
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)*v4 + v6);
      v6 -= 16;
    }
    while (v5 > 1);
  }
  *((_DWORD *)this + 146) = 1;
  return Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll((uint64_t)this + 592);
}

uint64_t Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t (*v7)(char *);
  uint64_t (*v8)(char *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = *(char **)v5;
          v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7)
            result = v7(v5 + 12);
          v8 = *(uint64_t (**)(char *))(v1 + 104);
          if (v8)
            result = v8(v5 + 20);
          *(_QWORD *)v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

void Constraint::prunePreList(Constraint *this, RecogGermIterator *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  RecogGermIterator *v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  RecogGermIterator *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  unsigned int v37;
  unsigned __int16 v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int64_t v60;
  unsigned int v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _DWORD *v99;
  int v100;
  uint64_t v101;
  int v102;
  int v103;
  RecogGermIterator *v104;
  uint64_t v105;
  __int128 v106;
  char v107;
  int v108;
  __int16 v109;
  uint64_t v110;

  v9 = a2;
  if (!a2)
  {
    *((_BYTE *)this + 62) = a3;
    *((_BYTE *)this + 296) = 0;
    if ((*((_DWORD *)this + 17) - 1) > 1)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      return;
    }
    goto LABEL_27;
  }
  if (*((_DWORD *)a2 + 3) == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/constran.cpp", 595, (uint64_t)"kernel/constran", 1, (uint64_t)"%s", a7, a8, (char)&errStr_kernel_constran_E_TOOMANYWORDS);
  *((_BYTE *)this + 62) = a3;
  *((_BYTE *)this + 296) = 0;
  if ((*((_DWORD *)this + 17) - 1) < 2)
  {
LABEL_27:
    if (a3)
      v30 = v9;
    else
      v30 = 0;
    *((_QWORD *)this + 1) = v30;
    *((_BYTE *)this + 61) = 1;
    return;
  }
  v11 = (uint64_t *)((char *)this + 200);
  v12 = *((unsigned int *)this + 52);
  if ((int)v12 >= 1)
  {
    while (1)
    {
      v13 = v12--;
      if (!*((_BYTE *)this + 63))
        break;
      v14 = *((_QWORD *)this + 25);
      if (*((_DWORD *)this + 70) <= v12)
        goto LABEL_14;
      v15 = 16 * v12;
      v16 = *((_QWORD *)this + 34) + v15;
      v17 = *(_DWORD *)(v16 + 8);
      v18 = (uint64_t *)(v14 + v15);
      if (*((_DWORD *)v18 + 2) <= (4 * v17))
        goto LABEL_14;
      if (v17 - 1 >= 0)
      {
        v19 = *v18;
        v20 = (unsigned int *)(*(_QWORD *)v16 + 4 * (v17 - 1));
        do
        {
          v21 = *v20--;
          *(_DWORD *)(v19 + 4 * v21) = -1;
          --v17;
        }
        while (v17);
      }
LABEL_16:
      if (v13 <= 1)
        goto LABEL_17;
    }
    v14 = *v11;
LABEL_14:
    v22 = *(unsigned int *)(v14 + 16 * v12 + 8);
    if ((_DWORD)v22)
      memset(*(void **)(v14 + 16 * v12), 255, 4 * v22);
    goto LABEL_16;
  }
LABEL_17:
  v23 = *((_QWORD *)this + 36);
  if (v23)
    *(_DWORD *)(v23 + 8) = 0;
  v24 = (uint64_t *)((char *)this + 272);
  v25 = *((unsigned int *)this + 52);
  v26 = *((_DWORD *)this + 71);
  if (v25 > v26)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 272, v25 - v26, 0);
  v27 = *((unsigned int *)this + 70);
  if (v27 <= v25)
  {
    if (v27 < v25)
    {
      v31 = v25 - v27;
      v32 = 16 * v27;
      do
      {
        v33 = (_QWORD *)(*v24 + v32);
        *v33 = 0;
        v33[1] = 0;
        v32 += 16;
        --v31;
      }
      while (v31);
    }
  }
  else if ((int)v27 > (int)v25)
  {
    v28 = (int)v27;
    v29 = 16 * (int)v27 - 16;
    do
    {
      --v28;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v24 + v29);
      v29 -= 16;
    }
    while (v28 > (int)v25);
  }
  *((_DWORD *)this + 70) = v25;
  if ((int)v25 >= 1)
  {
    v34 = *v24;
    v35 = v25 + 1;
    do
      *(_DWORD *)(v34 + 16 * (v35-- - 2) + 8) = 0;
    while (v35 > 1);
  }
  *((_QWORD *)this + 1) = v9;
  v36 = (_QWORD **)VocMgr::smpVocMgr;
  v37 = *(_DWORD *)(*(_QWORD *)VocMgr::smpVocMgr + 8);
  if (v37)
  {
    v38 = 0;
    v39 = 0;
    do
    {
      v40 = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v38);
      if (v40)
      {
        v41 = *(_QWORD *)(v40 + 48);
        if (v41)
          v39 += *(_DWORD *)(v41 + 388);
      }
      ++v38;
    }
    while (v37 > v38);
  }
  else
  {
    v39 = 0;
  }
  v42 = *((_DWORD *)v9 + 3);
  *((_BYTE *)this + 63) = v39 > 4 * v42;
  v105 = 0x3FFFFAFFFFFFLL;
  v106 = xmmword_209A593D0;
  v107 = 0;
  v108 = 1310720000;
  v109 = 0;
  v110 = 0x70000000FFFFFFFELL;
  *((_BYTE *)v9 + 32) = 0;
  *((_DWORD *)v9 + 2) = 0;
  if (v42)
  {
    v103 = 0;
    v104 = v9;
    while (1)
    {
      (*(void (**)(RecogGermIterator *, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v105);
      v43 = (unint64_t)v105 >> 25;
      v44 = *((_DWORD *)this + 52);
      v45 = (unsigned __int16)v44;
      v102 = v105;
      if (v43 >= (unsigned __int16)v44)
        break;
      v46 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(**v36 + 8 * v43) + 48) + 388);
      v47 = *v11;
      if (v46 > *(_DWORD *)(*v11 + 16 * v43 + 8))
      {
        v48 = v45;
        v49 = v47 + 16 * v45;
        v51 = *(unsigned int *)(v49 + 8);
        v50 = *(_DWORD *)(v49 + 12);
        v52 = (unsigned int *)(v49 + 8);
        if (v46 > v50)
        {
          DgnPrimArray<unsigned int>::reallocElts(v47 + 16 * v48, v46 - v50, 0);
          v47 = *v11;
        }
        *v52 = v46;
        memset((void *)(*(_QWORD *)(v47 + 16 * v48) + 4 * v51), 255, 4 * (v46 - v51));
        if (*((_BYTE *)this + 63))
        {
          v53 = *v24;
          v54 = *v24 + 16 * v48;
          v55 = *(_DWORD *)(v54 + 8);
          v56 = *((_DWORD *)v104 + 3);
          if (v56 >= v46)
            v57 = v46;
          else
            v57 = *((_DWORD *)v104 + 3);
          if (v57 <= 0x3F8)
            v58 = 1016;
          else
            v58 = v57;
          v59 = *(_DWORD *)(v54 + 8);
          if (v58 > v55)
          {
            if (v56 <= v46)
            {
              if (v56 <= 0x3F8)
                v59 = 1016;
              else
                v59 = *((_DWORD *)v104 + 3);
            }
            else if (v46 <= 0x3F8)
            {
              v59 = 1016;
            }
            else
            {
              v59 = v46;
            }
          }
          v87 = *(_DWORD *)(v54 + 12);
          if (v59 > v87)
          {
            DgnPrimArray<unsigned int>::reallocElts(v54, v59 - v87, 0);
            v53 = *v24;
            v87 = *(_DWORD *)(*v24 + 16 * v48 + 12);
          }
          if (v55 > v87)
            DgnPrimArray<unsigned int>::reallocElts(v53 + 16 * v48, v55 - v87, 0);
          *(_DWORD *)(v53 + 16 * v48 + 8) = v55;
        }
      }
LABEL_110:
      v88 = v102 & 0xFFFFFF;
      v9 = v104;
      if ((_DWORD)v88 != 16777208)
      {
        v89 = *(_QWORD *)(*v11 + 16 * v43);
        if (*(_DWORD *)(v89 + 4 * v88) == -1)
        {
          *(_DWORD *)(v89 + 4 * v88) = v103;
          if (*((_BYTE *)this + 63))
          {
            v97 = *v24 + 16 * v43;
            v99 = (_DWORD *)(v97 + 8);
            v98 = *(unsigned int *)(v97 + 8);
            if (v98 == *(_DWORD *)(v97 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(*v24 + 16 * v43, 1, 1);
              v98 = *v99;
            }
            *(_DWORD *)(*(_QWORD *)v97 + 4 * v98) = v88;
            ++*v99;
          }
        }
        else
        {
          v90 = (uint64_t *)*((_QWORD *)this + 36);
          if (!v90)
          {
            v90 = MemChunkAlloc(0x10uLL, 0);
            *v90 = 0;
            v90[1] = 0;
            *((_QWORD *)this + 36) = v90;
          }
          v91 = *((_DWORD *)v104 + 3);
          if (*((_DWORD *)v90 + 2) < v91)
          {
            v92 = *((_DWORD *)v90 + 3);
            v93 = v90;
            if (v91 > v92)
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)v90, v91 - v92, 0);
              v93 = (uint64_t *)*((_QWORD *)this + 36);
            }
            *((_DWORD *)v90 + 2) = v91;
            memset((void *)*v93, 255, 4 * *((unsigned int *)v93 + 2));
            v90 = (uint64_t *)*((_QWORD *)this + 36);
          }
          v94 = *v90;
          v95 = *(unsigned int *)(*(_QWORD *)(*v11 + 16 * v43) + 4 * v88);
          do
          {
            v96 = v95;
            v95 = *(unsigned int *)(v94 + 4 * v95);
          }
          while ((_DWORD)v95 != -1);
          *(_DWORD *)(v94 + 4 * v96) = v103;
        }
      }
      v100 = *((_DWORD *)v104 + 2) + 1;
      *((_DWORD *)v104 + 2) = v100;
      if (*((_BYTE *)v104 + 32))
      {
        (*(void (**)(RecogGermIterator *))(*(_QWORD *)v104 + 24))(v104);
        v100 = *((_DWORD *)v104 + 2);
      }
      ++v103;
      if (v100 == *((_DWORD *)v104 + 3))
        goto LABEL_128;
    }
    v60 = v43 + 1;
    v61 = *((_DWORD *)this + 53);
    if (v61 <= v43)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 200, v60 - v61, 0);
      v44 = *((_DWORD *)this + 52);
    }
    if (v44 <= v60)
    {
      if (v44 <= v43)
      {
        v64 = v43 - v44 + 1;
        v65 = 16 * v44;
        do
        {
          v66 = (_QWORD *)(*v11 + v65);
          *v66 = 0;
          v66[1] = 0;
          v65 += 16;
          --v64;
        }
        while (v64);
      }
    }
    else if ((int)v44 > (int)v60)
    {
      v62 = (int)v44;
      v63 = 16 * (int)v44 - 16;
      do
      {
        --v62;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v11 + v63);
        v63 -= 16;
      }
      while (v62 > v60);
    }
    *((_DWORD *)this + 52) = v60;
    v67 = *((_DWORD *)this + 71);
    if (v67 <= v43)
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 272, v60 - v67, 0);
    v68 = *((unsigned int *)this + 70);
    if (v68 <= v60)
    {
      if (v68 <= v43)
      {
        v71 = v43 - v68 + 1;
        v72 = 16 * v68;
        do
        {
          v73 = (_QWORD *)(*v24 + v72);
          *v73 = 0;
          v73[1] = 0;
          v72 += 16;
          --v71;
        }
        while (v71);
      }
    }
    else
    {
      v69 = (int)v68;
      if ((int)v68 > (int)v60)
      {
        v70 = 16 * (int)v68 - 16;
        do
        {
          --v69;
          DgnPrimArray<unsigned int>::~DgnPrimArray(*v24 + v70);
          v70 -= 16;
        }
        while (v69 > v60);
      }
    }
    *((_DWORD *)this + 70) = v60;
    v74 = 16 * v45;
    v75 = v60;
    while (1)
    {
      v76 = *(_QWORD *)(**v36 + 8 * v45);
      if (v76)
      {
        v77 = *(_QWORD *)(v76 + 48);
        if (v77)
          break;
      }
LABEL_100:
      ++v45;
      v74 += 16;
      if (v75 == v45)
        goto LABEL_110;
    }
    v78 = *(unsigned int *)(v77 + 388);
    v79 = *v11;
    v80 = *v11 + v74;
    v81 = *(_DWORD *)(v80 + 12);
    if (v78 <= v81)
    {
      *(_DWORD *)(v80 + 8) = v78;
      if (!(_DWORD)v78)
        goto LABEL_91;
    }
    else
    {
      DgnPrimArray<unsigned int>::reallocElts(*v11 + v74, v78 - v81, 0);
      *(_DWORD *)(v80 + 8) = v78;
      v79 = *v11;
    }
    memset(*(void **)(v79 + v74), 255, 4 * v78);
LABEL_91:
    if (*((_BYTE *)this + 63))
    {
      v82 = *((_DWORD *)v104 + 3);
      if (v82 >= v78)
        v82 = v78;
      if (v82 <= 0x3F8)
        v83 = 1016;
      else
        v83 = v82;
      v84 = *v24;
      v85 = *v24 + v74;
      v86 = *(_DWORD *)(v85 + 12);
      if (v83 > v86)
      {
        DgnPrimArray<unsigned int>::reallocElts(v85, v83 - v86, 0);
        v84 = *v24;
      }
      *(_DWORD *)(v84 + v74 + 8) = 0;
    }
    goto LABEL_100;
  }
LABEL_128:
  *((_BYTE *)this + 61) = 0;
  v101 = *((_QWORD *)this + 36);
  if (v101)
  {
    if (!*(_DWORD *)(v101 + 8))
    {
      DgnDelete<DgnPrimArray<unsigned int>>(v101);
      *((_QWORD *)this + 36) = 0;
    }
  }
}

void Constraint::addToReturnList(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;

  v6 = *a2;
  if (v6 >> 25 == 126 || (v6 & 0xFFFFFF) == 0xFFFFF8)
    v7 = 0;
  else
    v7 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v6 >> 22) & 0x3F8))
                                                     + 48)
                                         + 592)
                             + 2 * (v6 & 0xFFFFFF));
  v8 = (_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 32);
  if (v9 <= v7)
  {
    v10 = v7 + 1;
    v11 = *(_DWORD *)(a1 + 36);
    if (v11 <= v7)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 24, v10 - v11, 0);
      v9 = *(_DWORD *)(a1 + 32);
    }
    if (v9 <= v10)
    {
      if (v9 <= v7)
      {
        v14 = v7 - (unint64_t)v9 + 1;
        v15 = 16 * v9;
        do
        {
          v16 = (_QWORD *)(*v8 + v15);
          *v16 = 0;
          v16[1] = 0;
          v15 += 16;
          --v14;
        }
        while (v14);
      }
    }
    else if ((int)v9 > (int)v10)
    {
      v12 = (int)v9;
      v13 = 16 * (int)v9 - 16;
      do
      {
        --v12;
        DgnIArray<Utterance *>::~DgnIArray(*v8 + v13);
        v13 -= 16;
      }
      while (v12 > v10);
    }
    *(_DWORD *)(a1 + 32) = v10;
  }
  v17 = *v8 + 16 * v7;
  v19 = (unsigned int *)(v17 + 8);
  v18 = *(_DWORD *)(v17 + 8);
  if (v18 == *(_DWORD *)(v17 + 12))
  {
    DgnArray<RecogGerm>::reallocElts(v17, 1, 1);
    v18 = *v19;
  }
  RecogGerm::operator=(*(_QWORD *)v17 + 44 * v18, (uint64_t)a2);
  ++*v19;
  ++*a3;
}

void Constraint::seedGivenTraceState(uint64_t a1, unsigned __int16 *a2, uint64_t *a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  VocMgr *v6;
  uint64_t v7;
  StateMgr *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t i;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  StateMgr *v28;
  int v29;
  int v30;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  __int16 v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  _BYTE v45[6];
  uint64_t v46;
  int v47;

  v6 = (VocMgr *)VocMgr::smpVocMgr;
  v7 = *a2;
  v8 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v7) + 56);
  v9 = *((unsigned int *)a2 + 1);
  v10 = *(_DWORD *)(*((_QWORD *)v8 + 62) + 4 * v9);
  if (!v10)
    v10 = *((_DWORD *)a2 + 1);
  v32 = v10;
  v30 = *(_DWORD *)(*((_QWORD *)v8 + 36) + 4 * v9);
  v42 = 0x3FFFFAFFFFFFLL;
  v43 = xmmword_209A593D0;
  v44 = 0;
  *(_DWORD *)v45 = 1310720000;
  *(_WORD *)&v45[4] = 0;
  v46 = 0x70000000FFFFFFFELL;
  *(_BYTE *)(a4 + 32) = 0;
  *(_DWORD *)(a4 + 8) = 0;
  if (*(_DWORD *)(a4 + 12))
  {
    v28 = v8;
    v29 = v7;
    do
    {
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a4 + 16))(a4, &v42);
      if (!*(_BYTE *)(a1 + 62) || ((_DWORD)v43 ? (v20 = (_DWORD)v43 == *((_DWORD *)a2 + 1)) : (v20 = 1), v20))
      {
        v21 = v42;
        if ((_DWORD)v7 == v42 >> 25
          && StateMgr::isWordIdInState(v8, v32, v42 & 0xFFFFFF, 0, v16, v17, v18, v19))
        {
          v33 = v42;
          v35 = *(_QWORD *)((char *)&v43 + 4);
          v36 = HIDWORD(v43);
          v37 = v44;
          v39 = *(_DWORD *)&v45[2];
          v40 = v46;
          v41 = v47;
          v34 = *((_DWORD *)a2 + 1);
          v38 = v30;
          ++*a6;
          if (*(_QWORD *)(a1 + 216))
          {
            if (*((_DWORD *)a3 + 2))
            {
              for (i = 0; i < *((unsigned int *)a3 + 2); ++i)
              {
                v23 = *(_QWORD *)(a1 + 216);
                v24 = *a3;
                v25 = *(_DWORD *)(*(_QWORD *)(v23 + 128) + 136 * *(unsigned int *)(*a3 + 4 * i) + 88);
                if (*(_BYTE *)(v23 + 218))
                {
                  if (v25 != (_DWORD)v21)
                    continue;
                }
                else
                {
                  if (v25 != VocMgr::getRoot(v6, v21))
                    continue;
                  v24 = *a3;
                }
                if (*(_BYTE *)(a1 + 62))
                {
                  v26 = *(_DWORD *)(v24 + 4 * i);
                  if (DWORD1(v43) != -2 && DWORD1(v43) != v26)
                    continue;
                }
                else
                {
                  v26 = *(_DWORD *)(v24 + 4 * i);
                }
                LODWORD(v35) = v26;
                Constraint::addToReturnList(a1, (unsigned int *)&v33, a5);
              }
            }
          }
          else
          {
            Constraint::addToReturnList(a1, (unsigned int *)&v33, a5);
          }
          v8 = v28;
          LODWORD(v7) = v29;
        }
      }
      v27 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v27;
      if (*(_BYTE *)(a4 + 32))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
        v27 = *(_DWORD *)(a4 + 8);
      }
    }
    while (v27 != *(_DWORD *)(a4 + 12));
  }
}

uint64_t VocMgr::getRoot(VocMgr *this, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = a2 & 0xFE000000;
  if ((a2 & 0xFE000000) != 0xFA000000 && v2 != -67108864)
  {
    v3 = a2 & 0xFFFFFF;
    if ((a2 & 0xFFFFFF) != 0xFFFFF8 && v3 != 16777211)
      return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)this + 8 * (a2 >> 25)) + 48)
                                   + 256)
                       + 4 * v3) & 0xFFFFFF | v2;
  }
  return a2;
}

void Constraint::seedGivenPhonyPreState(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v6;
  VocMgr *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v28[3];
  unint64_t v29;
  int v30;
  char v31;
  __int16 v32;
  int v33;
  uint64_t v34;
  int v35;

  v6 = *a2;
  v7 = (VocMgr *)VocMgr::smpVocMgr;
  v8 = *(_QWORD **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v6) + 56);
  v9 = *((unsigned int *)a2 + 1);
  v10 = *(_DWORD *)(v8[62] + 4 * v9);
  if (!v10)
    v10 = *((_DWORD *)a2 + 1);
  v11 = *v8 + 80 * v10;
  v26 = *(unsigned int *)(v11 + 16);
  if ((_DWORD)v26)
  {
    v16 = 0;
    v25 = (_QWORD *)(v11 + 8);
    v23 = (_DWORD)v6 << 25;
    v24 = *(_DWORD *)(v8[36] + 4 * v9);
    do
    {
      v17 = *(_DWORD *)(*v25 + 4 * v16) & 0xFFFFFF | v23;
      v18 = *((_DWORD *)a2 + 1);
      v28[0] = *(_DWORD *)(*v25 + 4 * v16) & 0xFFFFFF | v23;
      v28[1] = 0x3FFF;
      v28[2] = v18;
      v29 = 0xFAFFFFFCFFFFFFFELL;
      v30 = -83886084;
      v31 = 0;
      v33 = 20000;
      v34 = 0x70000000FFFFFFFELL;
      v35 = 0;
      v32 = v24;
      ++*a6;
      if (*(_QWORD *)(a1 + 216))
      {
        if (*(_DWORD *)(a3 + 8))
        {
          v19 = 0;
          while (1)
          {
            v20 = *(_QWORD *)(a1 + 216);
            v21 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v19);
            v22 = *(_DWORD *)(*(_QWORD *)(v20 + 128) + 136 * v21 + 88);
            if (*(_BYTE *)(v20 + 218))
              break;
            if (v22 == VocMgr::getRoot(v7, v17))
            {
              v21 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v19);
LABEL_13:
              LODWORD(v29) = v21;
              Constraint::addToReturnList(a1, v28, a5);
            }
LABEL_14:
            if (++v19 >= (unint64_t)*(unsigned int *)(a3 + 8))
              goto LABEL_17;
          }
          if (v22 != (_DWORD)v17)
            goto LABEL_14;
          goto LABEL_13;
        }
      }
      else
      {
        Constraint::addToReturnList(a1, v28, a5);
      }
LABEL_17:
      ++v16;
    }
    while (v16 != v26);
  }
}

void Constraint::seedGivenStateStateOverNothing(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23[3];
  unint64_t v24;
  int v25;
  char v26;
  __int16 v27;
  int v28;
  uint64_t v29;
  int v30;

  v4 = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *a2);
  v5 = *(_QWORD **)(v4 + 56);
  v6 = *((unsigned int *)a2 + 1);
  v7 = *(_DWORD *)(v5[62] + 4 * v6);
  if (!v7)
    v7 = *((_DWORD *)a2 + 1);
  v8 = *v5 + 80 * v7;
  v9 = *(unsigned int *)(v8 + 16);
  if ((_DWORD)v9)
  {
    v14 = 0;
    v15 = *(_DWORD *)(v5[36] + 4 * v6);
    v16 = (_QWORD *)(v8 + 8);
    v17 = *(_QWORD *)(v4 + 48);
    v18 = 4 * v9;
    while (1)
    {
      v19 = *(unsigned int *)(*v16 + v14);
      if (!*(_BYTE *)(a1 + 64))
        break;
      if (*(_WORD *)(*(_QWORD *)(v17 + 32) + 2 * v19))
        goto LABEL_7;
LABEL_8:
      v14 += 4;
      if (v18 == v14)
        return;
    }
    if (*(_DWORD *)(*(_QWORD *)(v17 + 256) + 4 * v19) != (_DWORD)v19)
      goto LABEL_8;
LABEL_7:
    v20 = v19 & 0xFFFFFF | (*a2 << 25);
    v21 = *((_DWORD *)a2 + 1);
    v22 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v22 + 1;
    v23[0] = v20;
    v23[1] = 0x3FFF;
    v23[2] = v21;
    v24 = 0xFAFFFFFCFFFFFFFELL;
    v25 = -83886084;
    v26 = 0;
    v28 = 20000;
    v29 = 0x70000000FFFFFFFELL;
    v30 = v22;
    v27 = v15;
    ++*a4;
    Constraint::addToReturnList(a1, v23, a3);
    goto LABEL_8;
  }
}

uint64_t Constraint::seedGivenStateLatticeOverState(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  StateMgr *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t BitWords;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t i;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v27;
  uint64_t *v28;
  void *v29;
  int v30;
  unint64_t v31;
  int v32;
  char v33;
  __int16 v34;
  int v35;
  uint64_t v36;
  int v37;
  _DWORD *v38;
  unsigned int v39;
  int v40;

  v10 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *a2) + 56);
  v28 = *(uint64_t **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *a2) + 48);
  v11 = *((unsigned int *)a2 + 1);
  v12 = *(_DWORD *)(*((_QWORD *)v10 + 36) + 4 * v11);
  if (*(_DWORD *)(*((_QWORD *)v10 + 62) + 4 * v11))
    v13 = *(_DWORD *)(*((_QWORD *)v10 + 62) + 4 * v11);
  else
    v13 = *((_DWORD *)a2 + 1);
  BitWords = StateMgr::getBitWords(v10, v13);
  v29 = 0;
  v15 = realloc_array(0, &v29, 4uLL, 0, 0, 1);
  v38 = v29;
  v39 = 1;
  v40 = v15 >> 2;
  if (*(_DWORD *)(a3 + 8))
  {
    v16 = 0;
    LOBYTE(v17) = 0;
    v18 = -83886081;
    v27 = BitWords;
    while (1)
    {
      v19 = v18;
      v20 = *(_QWORD *)(a1 + 216);
      v18 = *(_DWORD *)(*(_QWORD *)(v20 + 128) + 136 * *(unsigned int *)(*(_QWORD *)a3 + 4 * v16) + 88);
      v21 = *(_QWORD *)&v18 & 0xFFFFFFLL;
      if (v18 == v19)
        break;
      if (*a2 != v18 >> 25)
        goto LABEL_20;
      v17 = *(_WORD *)(v28[4] + 2 * v21);
      if (v17)
      {
        if (*(_DWORD *)(BitWords + 8) > v21
          && ((*(_DWORD *)(*(_QWORD *)BitWords + 4 * (v21 >> 5)) >> v18) & 1) != 0)
        {
          if (!*(_BYTE *)(v20 + 218))
          {
            WordList::lookupAll(v28, v21, (uint64_t)&v38);
LABEL_10:
            if (v39)
            {
              for (i = 0; i < v39; ++i)
              {
                v23 = v38[i] & 0xFFFFFF | (*a2 << 25);
                v24 = *((_DWORD *)a2 + 1);
                v25 = *(_DWORD *)(a1 + 16);
                *(_DWORD *)(a1 + 16) = v25 + 1;
                v29 = (void *)(v23 | 0x3FFF00000000);
                v30 = v24;
                v31 = 0xFAFFFFFCFFFFFFFELL;
                v32 = -83886084;
                v33 = 0;
                v35 = 20000;
                v36 = 0x70000000FFFFFFFELL;
                v37 = v25;
                v34 = v12;
                LODWORD(v31) = *(_DWORD *)(*(_QWORD *)a3 + 4 * v16);
                Constraint::addToReturnList(a1, (unsigned int *)&v29, a4);
                ++*a5;
              }
              LOBYTE(v17) = 1;
              BitWords = v27;
            }
            else
            {
              LOBYTE(v17) = 1;
            }
            goto LABEL_21;
          }
LABEL_9:
          *v38 = v21;
          goto LABEL_10;
        }
        goto LABEL_20;
      }
LABEL_21:
      if (++v16 >= (unint64_t)*(unsigned int *)(a3 + 8))
        return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v38);
    }
    if ((v17 & 1) != 0)
    {
      if (!*(_BYTE *)(v20 + 218))
        goto LABEL_10;
      goto LABEL_9;
    }
LABEL_20:
    LOBYTE(v17) = 0;
    goto LABEL_21;
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v38);
}

void sub_2097B1CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void Constraint::seedGivenStateStateOverGerms(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  int v27;
  __int16 v28;
  uint64_t v29;

  v5 = *a2;
  v6 = *(_QWORD **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v5) + 56);
  v7 = *((unsigned int *)a2 + 1);
  v8 = *(_DWORD *)(v6[62] + 4 * v7);
  if (!v8)
    v8 = *((_DWORD *)a2 + 1);
  v9 = *(_DWORD *)(v6[36] + 4 * v7);
  v10 = *v6 + 80 * v8;
  v11 = *(unsigned int *)(v10 + 16);
  *(_BYTE *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  v24 = 0x3FFFFAFFFFFFLL;
  v25 = xmmword_209A593D0;
  v26 = 0;
  v27 = 1310720000;
  v28 = 0;
  v29 = 0x70000000FFFFFFFELL;
  v23 = v11;
  if ((_DWORD)v11)
  {
    v17 = 0;
    v18 = (_QWORD *)(v10 + 8);
    v19 = 16 * v5;
    do
    {
      for (i = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + v19) + 4 * *(unsigned int *)(*v18 + 4 * v17));
            (_DWORD)i != -1;
            LODWORD(i) = *(_DWORD *)(*v22 + 4 * i))
      {
        *(_DWORD *)(a3 + 8) = i;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 16))(a3, &v24);
        if (!(_DWORD)v25 || (_DWORD)v25 == *((_DWORD *)a2 + 1))
        {
          LODWORD(v25) = *((_DWORD *)a2 + 1);
          LOWORD(v27) = v9;
          ++*a5;
          Constraint::addToReturnList(a1, (unsigned int *)&v24, a4);
        }
        v22 = *(_QWORD **)(a1 + 288);
        if (!v22)
          break;
      }
      ++v17;
    }
    while (v17 != v23);
  }
}

void Constraint::seedGivenEmbFstStateStateOverGerms(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  int v5;
  BOOL v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  int v16;
  __int16 v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *a2) + 56) + 288)
                 + 4 * *((unsigned int *)a2 + 1));
  *(_BYTE *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  v13 = 0x3FFFFAFFFFFFLL;
  v14 = xmmword_209A593D0;
  v15 = 0;
  v16 = 1310720000;
  v17 = 0;
  v18 = 0x70000000FFFFFFFELL;
  if (*(_DWORD *)(a3 + 12))
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 16))(a3, &v13);
      if ((_DWORD)v14)
        v11 = (_DWORD)v14 == *((_DWORD *)a2 + 1);
      else
        v11 = 1;
      if (v11)
      {
        LODWORD(v14) = *((_DWORD *)a2 + 1);
        LOWORD(v16) = v5;
        ++*a5;
        Constraint::addToReturnList(a1, (unsigned int *)&v13, a4);
      }
      v12 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v12;
      if (*(_BYTE *)(a3 + 32))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
        v12 = *(_DWORD *)(a3 + 8);
      }
    }
    while (v12 != *(_DWORD *)(a3 + 12));
  }
}

uint64_t Constraint::seedGivenStateLatticeOverStateOverGerms(_QWORD *a1, unsigned __int16 *a2, uint64_t *a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  StateMgr *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t BitWords;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  char v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int v44;
  int v45;

  v12 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *a2) + 56);
  v34 = *(uint64_t **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *a2) + 48);
  v13 = *((unsigned int *)a2 + 1);
  if (*(_DWORD *)(*((_QWORD *)v12 + 62) + 4 * v13))
    v14 = *(_DWORD *)(*((_QWORD *)v12 + 62) + 4 * v13);
  else
    v14 = *((_DWORD *)a2 + 1);
  v15 = *(_DWORD *)(*((_QWORD *)v12 + 36) + 4 * v13);
  BitWords = StateMgr::getBitWords(v12, v14);
  v37 = 0;
  v17 = realloc_array(0, &v37, 4uLL, 0, 0, 1);
  v43 = v37;
  v44 = 1;
  v45 = v17 >> 2;
  v18 = *a2;
  *(_BYTE *)(a4 + 32) = 0;
  *(_DWORD *)(a4 + 8) = 0;
  v37 = (void *)0x3FFFFAFFFFFFLL;
  v38 = xmmword_209A593D0;
  v39 = 0;
  v40 = 1310720000;
  v41 = 0;
  v42 = 0x70000000FFFFFFFELL;
  if (*((_DWORD *)a3 + 2))
  {
    v19 = 0;
    LOBYTE(v20) = 0;
    v21 = -83886081;
    v36 = 16 * v18;
    v33 = BitWords;
    while (1)
    {
      v22 = a1[27];
      v23 = *(_DWORD *)(*(_QWORD *)(v22 + 128) + 136 * *(unsigned int *)(*a3 + 4 * v19) + 88);
      v24 = *(_QWORD *)&v23 & 0xFFFFFFLL;
      v35 = v23;
      if (v23 == v21)
        break;
      if (*a2 != v23 >> 25)
        goto LABEL_35;
      v20 = *(_WORD *)(v34[4] + 2 * v24);
      if (v20)
      {
        if (*(_DWORD *)(BitWords + 8) > v24
          && ((*(_DWORD *)(*(_QWORD *)BitWords + 4 * (v24 >> 5)) >> v23) & 1) != 0)
        {
          if (!*(_BYTE *)(v22 + 218))
          {
            WordList::lookupAll(v34, v24, (uint64_t)&v43);
LABEL_10:
            v25 = v44;
            v21 = v35;
            if (v44)
            {
              v26 = 0;
              do
              {
                v27 = *(unsigned int *)(*(_QWORD *)(a1[25] + v36) + 4 * v43[v26]);
                if ((_DWORD)v27 != -1)
                {
                  do
                  {
                    *(_DWORD *)(a4 + 8) = v27;
                    (*(void (**)(uint64_t, void **))(*(_QWORD *)a4 + 16))(a4, &v37);
                    if ((_DWORD)v38)
                      v28 = (_DWORD)v38 == *((_DWORD *)a2 + 1);
                    else
                      v28 = 1;
                    if (v28)
                    {
                      v29 = *a3;
                      if (DWORD1(v38) == -2 || DWORD1(v38) == *(_DWORD *)(*a3 + 4 * v19))
                      {
                        LODWORD(v38) = *((_DWORD *)a2 + 1);
                        LOWORD(v40) = v15;
                        DWORD1(v38) = *(_DWORD *)(v29 + 4 * v19);
                        Constraint::addToReturnList((uint64_t)a1, (unsigned int *)&v37, a5);
                        ++*a6;
                      }
                    }
                    v31 = (_QWORD *)a1[36];
                    if (!v31)
                      break;
                    LODWORD(v27) = *(_DWORD *)(*v31 + 4 * v27);
                  }
                  while ((_DWORD)v27 != -1);
                  v25 = v44;
                  v21 = v35;
                }
                ++v26;
              }
              while (v26 < v25);
              LOBYTE(v20) = 1;
              BitWords = v33;
            }
            else
            {
              LOBYTE(v20) = 1;
            }
            goto LABEL_37;
          }
LABEL_9:
          *v43 = v24;
          goto LABEL_10;
        }
        goto LABEL_35;
      }
LABEL_36:
      v21 = *(_DWORD *)(*(_QWORD *)(v22 + 128) + 136 * *(unsigned int *)(*a3 + 4 * v19) + 88);
LABEL_37:
      if (++v19 >= (unint64_t)*((unsigned int *)a3 + 2))
        return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v43);
    }
    if ((v20 & 1) != 0)
    {
      if (!*(_BYTE *)(v22 + 218))
        goto LABEL_10;
      goto LABEL_9;
    }
LABEL_35:
    LOBYTE(v20) = 0;
    goto LABEL_36;
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v43);
}

void sub_2097B2288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void Constraint::seedGivenStateGermsOverState(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  StateMgr *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t BitWords;
  int v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  int v19;
  __int16 v20;
  uint64_t v21;

  v10 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *a2) + 56);
  v11 = *((unsigned int *)a2 + 1);
  if (*(_DWORD *)(*((_QWORD *)v10 + 62) + 4 * v11))
    v12 = *(_DWORD *)(*((_QWORD *)v10 + 62) + 4 * v11);
  else
    v12 = *((_DWORD *)a2 + 1);
  v13 = *(_DWORD *)(*((_QWORD *)v10 + 36) + 4 * v11);
  BitWords = StateMgr::getBitWords(v10, v12);
  v16 = 0x3FFFFAFFFFFFLL;
  v17 = xmmword_209A593D0;
  v18 = 0;
  v19 = 1310720000;
  v20 = 0;
  v21 = 0x70000000FFFFFFFELL;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 32) = 1;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)a2;
  *(_QWORD *)(a3 + 24) = BitWords;
LABEL_5:
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  v15 = *(_DWORD *)(a3 + 8);
  while (v15 != *(_DWORD *)(a3 + 12))
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 16))(a3, &v16);
    LODWORD(v17) = *((_DWORD *)a2 + 1);
    LOWORD(v19) = v13;
    ++*a5;
    Constraint::addToReturnList(a1, (unsigned int *)&v16, a4);
    v15 = *(_DWORD *)(a3 + 8) + 1;
    *(_DWORD *)(a3 + 8) = v15;
    if (*(_BYTE *)(a3 + 32))
      goto LABEL_5;
  }
}

void Constraint::seedGivenState(uint64_t a1, unsigned __int16 *a2, uint64_t *a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12, uint64_t a13, _QWORD *a14, uint64_t a15, char a16)
{
  _BYTE *v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  _DWORD *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  _DWORD *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t StateTransition;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  StateMgr *v57;
  _QWORD *v58;
  uint64_t v60;
  uint64_t *v61;
  _DWORD *v62;
  uint64_t v63;
  unsigned __int16 *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int16 v67[2];
  int v68;

  v18 = a5;
  v20 = a14;
  v21 = a15;
  v22 = a13;
  v24 = a10;
  v23 = a11;
  v25 = *a2;
  if (a14)
  {
    v26 = *a14;
    if (!*(_BYTE *)(*a14 + v25))
    {
      v27 = *(_DWORD *)(a13 + 8);
      if (v27 == *(_DWORD *)(a13 + 12))
      {
        v63 = a1;
        v61 = a3;
        v28 = a6;
        v29 = a4;
        DgnPrimArray<short>::reallocElts(a13, 1, 1);
        v20 = a14;
        v18 = a5;
        a3 = v61;
        a4 = v29;
        v24 = a10;
        v22 = a13;
        v21 = a15;
        a6 = v28;
        a1 = v63;
        v23 = a11;
        v27 = *(_DWORD *)(a13 + 8);
        v26 = *a14;
      }
      *(_WORD *)(*(_QWORD *)v22 + 2 * v27) = v25;
      *(_DWORD *)(v22 + 8) = v27 + 1;
      v25 = *a2;
      *(_BYTE *)(v26 + v25) = 1;
    }
  }
  v30 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v25) + 56);
  v31 = *((unsigned int *)a2 + 1);
  if (*(_WORD *)(*(_QWORD *)(v30 + 528) + 2 * v31) == 127)
  {
    v57 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v25) + 56);
    v32 = a2;
    v33 = a9;
    v34 = a7;
    v35 = a8;
    v65 = v22;
    v66 = v21;
    v58 = v20;
    if (*(_BYTE *)(*(_QWORD *)(v30 + 336) + v31) == 1)
    {
      v36 = a1;
      v62 = v23;
      v64 = a2;
      v37 = a3;
      v60 = a6;
      v38 = v24;
      v39 = a4;
      v40 = v18;
      StateTransition = StateMgr::getStateTransition(v57, v31, 0, a4, (uint64_t)a9, a6, a7, a8);
      v35 = a8;
      v34 = a7;
      v33 = a9;
      v23 = v62;
      v32 = v64;
      v42 = a12;
      v18 = v40;
      a4 = v39;
      v24 = v38;
      a3 = v37;
      a6 = v60;
      v43 = StateTransition;
      a1 = v36;
      *a12 += *(_DWORD *)(v43 + 8);
      if (*(_DWORD *)(v43 + 8))
      {
        v44 = 0;
        do
        {
          v45 = *(_DWORD *)(*(_QWORD *)v43 + 4 * v44);
          v67[0] = *v32;
          v68 = v45;
          LOBYTE(v56) = a16;
          Constraint::seedGivenState(v36, v67, v37, v39, v18, a6, a7, a8, v33, v24, v23, v42, v65, v58, v66, v56);
          v35 = a8;
          v34 = a7;
          v33 = a9;
          v23 = v62;
          v32 = v64;
          v42 = a12;
          v18 = v40;
          a4 = v39;
          v24 = v38;
          a3 = v37;
          a6 = v60;
          a1 = v36;
          ++v44;
        }
        while (v44 < *(unsigned int *)(v43 + 8));
      }
    }
    if (!*(_BYTE *)(a1 + 64)
      || ((v46 = *((unsigned int *)v32 + 1), v47 = *(_DWORD *)(*((_QWORD *)v57 + 50) + 4 * v46), v47 == -1)
       || (*v18 = 1, v47 <= a4))
      && ((v48 = *(_DWORD *)(*((_QWORD *)v57 + 52) + 4 * v46), v48 == -1) || (*v18 = 1, v48 >= a4)))
    {
      v49 = *((unsigned int *)v32 + 1);
      if (*(_DWORD *)(*((_QWORD *)v57 + 62) + 4 * v49))
        LODWORD(v49) = *(_DWORD *)(*((_QWORD *)v57 + 62) + 4 * v49);
      v50 = *(_DWORD *)(*(_QWORD *)v57 + 80 * v49 + 16);
      *v24 += v50;
      if (!a6)
        goto LABEL_45;
      if ((*(_DWORD *)(a1 + 68) - 1) >= 2)
      {
        if (*(_DWORD *)(a1 + 208) <= *v32)
          return;
        if (*(_BYTE *)(a1 + 61))
        {
          Constraint::seedGivenPhonyPreState(a1, v32, (uint64_t)a3, a4, v33, v23);
          return;
        }
      }
      else if (*(_BYTE *)(a1 + 61))
      {
        Constraint::seedGivenTraceState(a1, v32, a3, a6, v33, v23);
        return;
      }
      if (v50 >= v34 && (!v35 || *(_BYTE *)(*((_QWORD *)v57 + 58) + *((unsigned int *)v32 + 1))))
      {
        if (*(_QWORD *)(a1 + 216))
        {
          Constraint::seedGivenStateLatticeOverStateOverGerms((_QWORD *)a1, v32, a3, a6, v33, v23);
        }
        else if (v50 >= *(_DWORD *)(a6 + 12) + 500)
        {
          Constraint::seedGivenStateGermsOverState(a1, v32, a6, v33, v23);
        }
        else
        {
          Constraint::seedGivenStateStateOverGerms(a1, v32, a6, v33, v23);
        }
      }
      else
      {
LABEL_45:
        if (*(_QWORD *)(a1 + 216))
          Constraint::seedGivenStateLatticeOverState(a1, v32, (uint64_t)a3, v33, v23);
        else
          Constraint::seedGivenStateStateOverNothing(a1, v32, v33, v23);
      }
    }
  }
  else
  {
    if (v21)
    {
      v51 = *(_DWORD *)(v21 + 8);
      if (v51 == *(_DWORD *)(v21 + 12))
      {
        v52 = a1;
        v53 = v23;
        v54 = a6;
        DgnArray<RuleDesc>::reallocElts(v21, 1, 1);
        a6 = v54;
        a1 = v52;
        v23 = v53;
        v51 = *(_DWORD *)(v21 + 8);
      }
      v55 = *(_QWORD *)v21 + 12 * v51;
      *(_WORD *)(v55 + 4) = v25;
      *(_DWORD *)(v55 + 8) = v31;
      ++*(_DWORD *)(v21 + 8);
    }
    if (a16)
      Constraint::seedGivenEmbFstStateStateOverGerms(a1, a2, a6, a9, v23);
  }
}

uint64_t Constraint::givenStateCanSeedFinalSilence(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t StateTransition;
  uint64_t v14;
  unint64_t v15;
  int v16;
  _WORD v17[2];
  int v18;

  v10 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *a2) + 56);
  v11 = *((unsigned int *)a2 + 1);
  if (*(_BYTE *)(*((_QWORD *)v10 + 4) + v11))
    return 1;
  if (*(_BYTE *)(*((_QWORD *)v10 + 42) + v11) != 1)
    return 0;
  StateTransition = StateMgr::getStateTransition(v10, v11, 0, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(StateTransition + 8))
    return 0;
  v14 = StateTransition;
  v15 = 0;
  do
  {
    v16 = *(_DWORD *)(*(_QWORD *)v14 + 4 * v15);
    v17[0] = *a2;
    v18 = v16;
    result = Constraint::givenStateCanSeedFinalSilence(a1, v17);
    if ((_DWORD)result)
      break;
    ++v15;
  }
  while (v15 < *(unsigned int *)(v14 + 8));
  return result;
}

uint64_t Constraint::givenStateGetPrecedingNonAcousticWords(uint64_t result, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  StateMgr *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  _WORD v29[2];
  int v30;

  v10 = result;
  v11 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *a2) + 56);
  v12 = *((unsigned int *)a2 + 1);
  v13 = *(_DWORD *)(*((_QWORD *)v11 + 64) + 4 * v12);
  if (v13)
  {
    v14 = *(_QWORD *)v11 + 80 * v13;
    v17 = *(_DWORD *)(v14 + 16);
    v16 = (unsigned int *)(v14 + 16);
    v15 = v17;
    if (v17)
    {
      v18 = 0;
      do
      {
        v19 = *(unsigned int *)(*((_QWORD *)v16 - 1) + 4 * v18);
        if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 93) + 256) + 4 * v19) == (_DWORD)v19)
        {
          v20 = v19 & 0xFFFFFF | (*a2 << 25);
          v21 = *(unsigned int *)(a3 + 8);
          if (!(_DWORD)v21)
            goto LABEL_11;
          v22 = *(int **)a3;
          v23 = *(unsigned int *)(a3 + 8);
          v24 = 0xFFFFFFFFLL;
          while (1)
          {
            v25 = *v22++;
            if (v25 == v20)
              break;
            --v24;
            if (!--v23)
              goto LABEL_11;
          }
          if (!v24)
          {
LABEL_11:
            if (v21 == *(_DWORD *)(a3 + 12))
            {
              result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              v21 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v21) = v20;
            ++*(_DWORD *)(a3 + 8);
            v15 = *v16;
          }
        }
        ++v18;
      }
      while (v18 < v15);
      v12 = *((unsigned int *)a2 + 1);
    }
  }
  if (*(_BYTE *)(*((_QWORD *)v11 + 42) + v12) == 1)
  {
    result = StateMgr::getStateTransition(v11, v12, 0, a4, a5, a6, a7, a8);
    if (*(_DWORD *)(result + 8))
    {
      v26 = result;
      v27 = 0;
      do
      {
        v28 = *(_DWORD *)(*(_QWORD *)v26 + 4 * v27);
        v29[0] = *a2;
        v30 = v28;
        result = Constraint::givenStateGetPrecedingNonAcousticWords(v10, v29, a3);
        ++v27;
      }
      while (v27 < *(unsigned int *)(v26 + 8));
    }
  }
  return result;
}

uint64_t Constraint::givenStateGetWeights(uint64_t result, unsigned __int16 *a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  StateMgr *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _WORD v35[2];
  int v36;

  v11 = result;
  v12 = *a2;
  v13 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v12) + 56);
  v14 = *(_DWORD *)(*((_QWORD *)v13 + 34) + 4 * *((unsigned int *)a2 + 1));
  v15 = *(_DWORD *)(a3 + 8);
  if (v15 <= v12)
  {
    v22 = v12 + 1;
    v23 = *(_DWORD *)(a3 + 12);
    if (v23 <= v12)
    {
      result = DgnArray<DgnPrimArray<double>>::reallocElts(a3, v22 - v23, 0);
      v15 = *(_DWORD *)(a3 + 8);
    }
    if (v15 <= v22)
    {
      if (v15 <= v12)
      {
        v26 = v12 - v15 + 1;
        v27 = 16 * v15;
        do
        {
          v28 = (_QWORD *)(*(_QWORD *)a3 + v27);
          *v28 = 0;
          v28[1] = 0;
          v27 += 16;
          --v26;
        }
        while (v26);
      }
    }
    else if ((int)v15 > (int)v22)
    {
      v24 = (int)v15;
      v25 = 16 * (int)v15 - 16;
      do
      {
        --v24;
        result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a3 + v25);
        v25 -= 16;
      }
      while (v24 > v22);
    }
    *(_DWORD *)(a3 + 8) = v22;
    v12 = *a2;
    v16 = *(_QWORD *)a3;
    v17 = *(_DWORD *)(*(_QWORD *)a3 + 16 * v12 + 8);
LABEL_18:
    v29 = v16 + 16 * v12;
    v30 = (unsigned int *)(v29 + 8);
    if (v17 == *(_DWORD *)(v29 + 12))
    {
      result = DgnPrimArray<unsigned int>::reallocElts(v29, 1, 1);
      v17 = *v30;
    }
    *(_DWORD *)(*(_QWORD *)v29 + 4 * v17) = v14;
    ++*v30;
    if (v14 != 0xFFFF)
      *a4 = 0;
    goto LABEL_22;
  }
  v16 = *(_QWORD *)a3;
  v17 = *(_DWORD *)(*(_QWORD *)a3 + 16 * v12 + 8);
  if (!v17)
    goto LABEL_18;
  v18 = *(int **)(v16 + 16 * v12);
  v19 = 0xFFFFFFFFLL;
  v20 = *(unsigned int *)(*(_QWORD *)a3 + 16 * v12 + 8);
  while (1)
  {
    v21 = *v18++;
    if (v21 == v14)
      break;
    --v19;
    if (!--v20)
      goto LABEL_18;
  }
  if (!v19)
    goto LABEL_18;
LABEL_22:
  v31 = *((unsigned int *)a2 + 1);
  if (*(_BYTE *)(*((_QWORD *)v13 + 42) + v31) == 1)
  {
    result = StateMgr::getStateTransition(v13, v31, 0, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_DWORD *)(result + 8))
    {
      v32 = result;
      v33 = 0;
      do
      {
        v34 = *(_DWORD *)(*(_QWORD *)v32 + 4 * v33);
        v35[0] = *a2;
        v36 = v34;
        result = Constraint::givenStateGetWeights(v11, v35, a3, a4);
        ++v33;
      }
      while (v33 < *(unsigned int *)(v32 + 8));
    }
  }
  return result;
}

uint64_t Constraint::getTraceLegal(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  unsigned __int16 v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int16 *v13;
  __int16 v14;
  unsigned int v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  __int128 v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  char v31;
  _BYTE v32[6];
  uint64_t v33;
  int v34;

  v3 = a1 + 136;
  *(_DWORD *)(a1 + 144) = 0;
  v4 = *(unsigned __int16 *)(a2 + 4);
  if (v4 == 0x3FFF)
    v5 = 0;
  else
    v5 = v4 + 1;
  if (*(_DWORD *)(a1 + 80) != v5)
  {
    if (*(_BYTE *)(a1 + 60))
    {
      v7 = v5;
      if (*(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v5) != a3)
        return v3;
    }
    else
    {
      v7 = v5;
    }
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(v8 + 16 * v7 + 8))
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)(v8 + 16 * v7);
        v11 = *(_DWORD *)(v10 + 24 * v9);
        if (*(_BYTE *)(a1 + 62))
        {
          v29 = 0x3FFFFAFFFFFFLL;
          v30 = xmmword_209A593D0;
          v31 = 0;
          *(_DWORD *)v32 = 1310720000;
          *(_WORD *)&v32[4] = 0;
          v33 = 0x70000000FFFFFFFELL;
          v12 = *(_QWORD *)(a1 + 8);
          *(_BYTE *)(v12 + 32) = 0;
          *(_DWORD *)(v12 + 8) = 0;
          if (*(_DWORD *)(v12 + 12))
          {
            v13 = (unsigned __int16 *)(v10 + 24 * v9 + 4);
            do
            {
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 16))(v12, &v29);
              if ((_DWORD)v29 == v11)
              {
                v14 = WORD2(v29);
                if (WORD2(v29) == *v13)
                {
                  *(_WORD *)v32 = 0;
                  v15 = *(_DWORD *)(a1 + 144);
                  if (v15 == *(_DWORD *)(a1 + 148))
                  {
                    DgnArray<RecogGerm>::reallocElts(v3, 1, 1);
                    v15 = *(_DWORD *)(a1 + 144);
                    v16 = v29;
                    v14 = WORD2(v29);
                    v17 = *(_WORD *)v32;
                  }
                  else
                  {
                    v17 = 0;
                    v16 = v11;
                  }
                  v18 = *(_QWORD *)(a1 + 136) + 44 * v15;
                  *(_DWORD *)v18 = v16;
                  *(_WORD *)(v18 + 4) = v14;
                  *(_WORD *)(v18 + 6) = HIWORD(v29);
                  *(_OWORD *)(v18 + 8) = v30;
                  *(_BYTE *)(v18 + 24) = v31;
                  *(_WORD *)(v18 + 26) = v17;
                  *(_DWORD *)(v18 + 28) = *(_DWORD *)&v32[2];
                  *(_QWORD *)(v18 + 32) = v33;
                  *(_DWORD *)(v18 + 40) = v34;
                  *(_DWORD *)(a1 + 144) = v15 + 1;
                }
              }
              v12 = *(_QWORD *)(a1 + 8);
              v19 = *(_DWORD *)(v12 + 8) + 1;
              *(_DWORD *)(v12 + 8) = v19;
              if (*(_BYTE *)(v12 + 32))
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
                v12 = *(_QWORD *)(a1 + 8);
                v19 = *(_DWORD *)(v12 + 8);
              }
            }
            while (v19 != *(_DWORD *)(v12 + 12));
          }
        }
        else
        {
          v20 = v10 + 24 * v9;
          v21 = *(_WORD *)(v20 + 4);
          v22 = *(_WORD *)(v20 + 6);
          v23 = *(_OWORD *)(v20 + 8);
          v24 = *(_DWORD *)(a1 + 144);
          v25 = v24;
          if (v24 == *(_DWORD *)(a1 + 148))
          {
            v28 = v23;
            DgnArray<RecogGerm>::reallocElts(v3, 1, 1);
            v23 = v28;
            v25 = *(_DWORD *)(a1 + 144);
          }
          v26 = *(_QWORD *)(a1 + 136) + 44 * v25;
          *(_DWORD *)v26 = v11;
          *(_WORD *)(v26 + 4) = v21;
          *(_WORD *)(v26 + 6) = v22;
          *(_OWORD *)(v26 + 8) = v23;
          *(_BYTE *)(v26 + 24) = 0;
          *(_DWORD *)(v26 + 26) = 1310720000;
          *(_WORD *)(v26 + 30) = 0;
          *(_QWORD *)(v26 + 32) = 0x70000000FFFFFFFELL;
          *(_DWORD *)(v26 + 40) = v24;
          *(_DWORD *)(a1 + 144) = v25 + 1;
        }
        ++v9;
        v8 = *(_QWORD *)(a1 + 72);
      }
      while (v9 < *(unsigned int *)(v8 + 16 * v7 + 8));
    }
  }
  return v3;
}

StateMgr *Constraint::getStateLegal(uint64_t a1, unsigned int *a2, unsigned int a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, uint64_t a12, _QWORD *a13, uint64_t a14, char a15)
{
  uint64_t v17;
  StateMgr *result;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  int v24;
  uint64_t StateTransition;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t i;
  unsigned int v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unsigned int v38;
  unsigned int v39;
  unsigned __int16 v43[2];
  int v44;
  uint64_t v45;
  uint64_t v46;

  v38 = a6;
  v39 = a7;
  v17 = a2[2];
  if (!(_DWORD)v17)
  {
    StateTransition = a1 + 168;
    LOWORD(v36) = *(_WORD *)a1;
LABEL_15:
    v45 = 0;
    v46 = 0;
    v26 = *(_QWORD *)(a1 + 216);
    if (!v26)
      goto LABEL_32;
    v27 = a2[3];
    if (v27 == -2)
    {
      if (!*(_BYTE *)(v26 + 215) || *(_DWORD *)(a1 + 240) == -1)
      {
        DgnPrimArray<int>::copyArraySlice((unint64_t)&v45, (uint64_t *)(a1 + 224), 0, *(_DWORD *)(a1 + 232));
      }
      else
      {
        v28 = *(unsigned int *)(a1 + 232);
        if ((_DWORD)v28)
        {
          v29 = 0;
          v30 = 0;
          for (i = 0; i < v28; ++i)
          {
            v32 = *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4 * i);
            v33 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 128) + 136 * v32 + 16) - a3;
            if (v33 < 0)
              v33 = a3 - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 128) + 136 * v32 + 16);
            if (v33 <= *(_DWORD *)(a1 + 240))
            {
              if (v30 == HIDWORD(v46))
              {
                DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v45, 1, 1);
                v30 = v46;
                v29 = v45;
              }
              *(_DWORD *)(v29 + 4 * v30) = v32;
              v30 = v46 + 1;
              LODWORD(v46) = v46 + 1;
              v28 = *(unsigned int *)(a1 + 232);
            }
          }
        }
      }
    }
    else
    {
      Lattice<WordLatticeLC>::appendOutLinks(v26, *(_DWORD *)(*(_QWORD *)(v26 + 128) + 136 * v27 + 120), (uint64_t)&v45);
    }
    if ((_DWORD)v46)
    {
LABEL_32:
      *a11 += *(_DWORD *)(StateTransition + 8);
      if (*(_DWORD *)(StateTransition + 8))
      {
        v34 = 0;
        do
        {
          v35 = *(_DWORD *)(*(_QWORD *)StateTransition + 4 * v34);
          v43[0] = v36;
          v44 = v35;
          Constraint::seedGivenState(a1, v43, &v45, a3, a4, a5, v38, v39, a8, a9, a10, a11, a12, a13, a14, a15);
          ++v34;
        }
        while (v34 < *(unsigned int *)(StateTransition + 8));
      }
    }
    return (StateMgr *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v45);
  }
  v36 = (unint64_t)*a2 >> 25;
  result = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v36) + 56);
  if (!*(_BYTE *)(a1 + 64))
    goto LABEL_13;
  v19 = *(_DWORD *)(*((_QWORD *)result + 54) + 4 * v17);
  if (v19 == -1 || (*a4 = 1, v19 <= a3))
  {
    v20 = *(_DWORD *)(*((_QWORD *)result + 56) + 4 * v17);
    if (v20 == -1 || (*a4 = 1, v20 >= a3))
    {
      v21 = *(_QWORD *)(a1 + 216);
      if (!v21)
        goto LABEL_13;
      if (!*(_BYTE *)(v21 + 215))
        goto LABEL_13;
      v22 = *(_DWORD *)(a1 + 240);
      if (v22 == -1)
        goto LABEL_13;
      *a4 = 1;
      v23 = (_DWORD *)(*(_QWORD *)(v21 + 128) + 136 * a2[3]);
      v24 = v23[4] - a3 + v23[5] + v23[6];
      if (v24 < 0)
        v24 = -v24;
      if (v24 <= v22)
      {
LABEL_13:
        StateTransition = StateMgr::getStateTransition(result, v17, 0, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_2097B32E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 104);
  _Unwind_Resume(a1);
}

_QWORD *Constraint::getLegal(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5, unsigned int a6, _DWORD *a7, uint64_t a8, uint64_t *a9, uint64_t a10, char a11)
{
  uint64_t v18;
  unint64_t v19;
  int v20;
  int *v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t TraceLegal;
  int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  WordList *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned __int16 v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  unsigned int PronPredecessorSeedCategory;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int PronSuccessorSeedCategory;
  unint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  _QWORD *v83;
  uint64_t v84;
  _QWORD **v86;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  char v96;
  int v97;
  __int16 v98;
  uint64_t v99;
  unsigned __int8 v100;
  _QWORD v101[2];

  v18 = a1;
  v19 = *a2;
  *a5 = 0;
  v101[0] = 0;
  if (ConstraintCacheInfo::match(a1 + 296, (uint64_t)a2, a6))
  {
    *a5 = *(_DWORD *)(v18 + 320);
    v20 = *(_DWORD *)(v18 + 324);
    LODWORD(v101[0]) = *(_DWORD *)(v18 + 328);
    HIDWORD(v101[0]) = v20;
    v21 = a5;
    goto LABEL_36;
  }
  *(_BYTE *)(v18 + 296) = 0;
  v22 = *(unsigned int *)(v18 + 32);
  if ((_DWORD)v22)
  {
    v23 = (_DWORD *)(*(_QWORD *)(v18 + 24) + 8);
    do
    {
      *v23 = 0;
      v23 += 4;
      --v22;
    }
    while (v22);
  }
  v24 = *(_DWORD *)(v18 + 68);
  if ((v24 - 1) >= 2)
  {
    v26 = *(uint64_t **)(v18 + 8);
  }
  else
  {
    v25 = v18;
    v26 = MemChunkAlloc(0x30uLL, 0);
    TraceLegal = Constraint::getTraceLegal(v25, (uint64_t)a2, a6);
    *((_DWORD *)v26 + 2) = 0;
    *((_BYTE *)v26 + 32) = 0;
    v26[3] = 0;
    *v26 = (uint64_t)&off_24C218850;
    v26[5] = TraceLegal;
    *((_DWORD *)v26 + 3) = *(_DWORD *)(TraceLegal + 8);
    v24 = *(_DWORD *)(v25 + 68);
  }
  v100 = 0;
  if ((v24 & 0xFFFFFFFD) != 0)
  {
    v94 = 0x3FFFFAFFFFFFLL;
    v95 = xmmword_209A593D0;
    v96 = 0;
    v97 = 1310720000;
    v98 = 0;
    v99 = 0x70000000FFFFFFFELL;
    LODWORD(v92) = 0;
    *((_BYTE *)v26 + 32) = 0;
    *((_DWORD *)v26 + 2) = 0;
    v28 = *((_DWORD *)v26 + 3);
    if (v28)
    {
      do
      {
        (*(void (**)(uint64_t *, uint64_t *))(*v26 + 16))(v26, &v94);
        Constraint::addToReturnList(a1, (unsigned int *)&v94, &v92);
        if (a9)
        {
          v29 = v94;
          v30 = (unint64_t)v94 >> 25;
          v31 = *a9;
          if (!*(_BYTE *)(*a9 + v30))
          {
            v32 = *(_DWORD *)(a8 + 8);
            if (v32 == *(_DWORD *)(a8 + 12))
            {
              DgnPrimArray<short>::reallocElts(a8, 1, 1);
              v32 = *(_DWORD *)(a8 + 8);
              v31 = *a9;
            }
            *(_WORD *)(*(_QWORD *)a8 + 2 * v32) = v29 >> 25;
            *(_DWORD *)(a8 + 8) = v32 + 1;
            *(_BYTE *)(v31 + v30) = 1;
          }
        }
        v28 = *((_DWORD *)v26 + 2) + 1;
        *((_DWORD *)v26 + 2) = v28;
        if (*((_BYTE *)v26 + 32))
        {
          (*(void (**)(uint64_t *))(*v26 + 24))(v26);
          v21 = a5;
          v28 = *((_DWORD *)v26 + 2);
        }
        else
        {
          v21 = a5;
        }
      }
      while (v28 != *((_DWORD *)v26 + 3));
    }
    else
    {
      v21 = a5;
    }
    *v21 = v28;
LABEL_29:
    if (v26)
      goto LABEL_30;
    goto LABEL_32;
  }
  v33 = a3;
  v21 = a5;
  Constraint::getStateLegal(a1, a2, a6, &v100, (uint64_t)v26, v33, a4, a5, (_DWORD *)v101 + 1, v101, a7, a8, a9, a10, a11);
  v28 = *a5;
  if (*a5 || !a11)
    goto LABEL_29;
  v34 = *a2;
  if (v34 >> 25 <= 0x7A
    && *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v34 >> 22) & 0x3F8)) + 56)
                            + 528)
                + 2 * a2[2]) != 127)
  {
    v94 = 0x3FFFFAFFFFFFLL;
    v95 = xmmword_209A593D0;
    v96 = 0;
    v97 = 1310720000;
    v98 = 0;
    v99 = 0x70000000FFFFFFFELL;
    *((_BYTE *)v26 + 32) = 0;
    *((_DWORD *)v26 + 2) = 0;
    v28 = *((_DWORD *)v26 + 3);
    if (v28)
    {
      do
      {
        (*(void (**)(uint64_t *, uint64_t *))(*v26 + 16))(v26, &v94);
        Constraint::addToReturnList(a1, (unsigned int *)&v94, a5);
        v28 = *((_DWORD *)v26 + 2) + 1;
        *((_DWORD *)v26 + 2) = v28;
        if (*((_BYTE *)v26 + 32))
        {
          (*(void (**)(uint64_t *))(*v26 + 24))(v26);
          v28 = *((_DWORD *)v26 + 2);
        }
      }
      while (v28 != *((_DWORD *)v26 + 3));
    }
    *a5 = v28;
    if (!v26)
      goto LABEL_32;
    goto LABEL_30;
  }
  v28 = 0;
  if (v26)
  {
LABEL_30:
    if (v26 != *(uint64_t **)(a1 + 8))
    {
      (*(void (**)(uint64_t *))*v26)(v26);
      MemChunkFree(v26, 0);
      v28 = *v21;
    }
  }
LABEL_32:
  v18 = a1;
  if (*(unsigned __int8 *)(a1 + 60) | v100)
    v35 = a6;
  else
    v35 = -16;
  v37 = v101[0];
  v36 = HIDWORD(v101[0]);
  *(_BYTE *)(a1 + 296) = 1;
  *(_DWORD *)(a1 + 300) = v35;
  *(_WORD *)(a1 + 304) = *a2 >> 25;
  *(_DWORD *)(a1 + 306) = a2[1];
  *(_QWORD *)(a1 + 312) = *((_QWORD *)a2 + 1);
  *(_DWORD *)(a1 + 320) = v28;
  *(_DWORD *)(a1 + 324) = v36;
  *(_QWORD *)(a1 + 328) = v37;
LABEL_36:
  v38 = v19 >> 25;
  v39 = VocMgr::smpVocMgr;
  v91 = v19 & 0xFE000000;
  if ((v19 & 0xFE000000) == 0xFC000000)
  {
    v40 = 0;
    v94 = 0;
    *(_QWORD *)&v95 = 0;
  }
  else
  {
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v38) + 48) + 418))
      return (_QWORD *)(v18 + 24);
    v94 = 0;
    *(_QWORD *)&v95 = 0;
    v40 = *(WordList **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v38) + 48);
  }
  v41 = *(unsigned int *)(v18 + 48);
  if ((int)v41 >= 1)
  {
    v42 = 16 * v41 - 16;
    do
    {
      DgnIArray<Utterance *>::~DgnIArray(*(_QWORD *)(v18 + 40) + v42);
      v42 -= 16;
    }
    while (v42 != -16);
  }
  v83 = (_QWORD *)(v18 + 40);
  v43 = 0;
  *(_DWORD *)(v18 + 48) = 0;
  v44 = *(unsigned int *)(v18 + 32);
  v45 = *(_DWORD *)(v18 + 52);
  v88 = v19 >> 25;
  v86 = (_QWORD **)v39;
  if (v44 <= v45
    || (DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v83, v44 - v45, 0),
        v43 = *(_DWORD *)(v18 + 48),
        v43 <= v44))
  {
    if (v43 < v44)
    {
      v49 = v44 - v43;
      v50 = 16 * v43;
      do
      {
        v51 = (_QWORD *)(*v83 + v50);
        *v51 = 0;
        v51[1] = 0;
        v50 += 16;
        --v49;
      }
      while (v49);
    }
  }
  else
  {
    if ((int)v43 <= (int)v44)
    {
      *(_DWORD *)(v18 + 48) = v44;
LABEL_53:
      v52 = 0;
      v90 = v19 & 0xFFFFFF;
      while (1)
      {
        v53 = *(_QWORD *)(v18 + 24) + 16 * v52;
        v54 = *(_QWORD *)(v18 + 40);
        v55 = (unsigned int *)(v53 + 8);
        *v21 -= *(_DWORD *)(v53 + 8);
        v56 = *(_DWORD *)(v53 + 8);
        v89 = v54 + 16 * v52;
        v57 = *(_DWORD *)(v89 + 12);
        if (v56 > v57)
        {
          DgnArray<RecogGerm>::reallocElts(v89, *v55 - v57, 0);
          v56 = *v55;
        }
        v84 = v52;
        if (v56)
          break;
LABEL_114:
        v18 = a1;
        v52 = v84 + 1;
        if (*(_DWORD *)(a1 + 48) <= (unsigned __int16)(v84 + 1))
          goto LABEL_115;
      }
      v58 = 0;
      v59 = (_DWORD *)(v54 + 16 * v84 + 8);
      while (1)
      {
        v60 = *(_QWORD *)v53;
        v61 = *(unsigned int *)(*(_QWORD *)v53 + 44 * v58);
        v62 = v61 >> 25;
        if (v91 != -67108864 && (_DWORD)v88 != (_DWORD)v62)
          break;
        if (v91 == -67108864)
        {
          v65 = v61 & 0xFFFFFF;
          if ((v61 & 0xFFFFFF) == 0xFFFFF8)
            goto LABEL_95;
          v66 = *(_QWORD *)(*(_QWORD *)(**v86 + 8 * v62) + 48);
          v67 = *(unsigned __int8 *)(v66 + 416);
          if (v65 == 16777213)
            PronSuccessorSeedCategory = *(unsigned __int8 *)(v66 + 417);
          else
            PronSuccessorSeedCategory = WordList::getPronSuccessorSeedCategory(*(WordList **)(*(_QWORD *)(**v86 + 8 * v62) + 48), v65);
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v66 + 400) + 16 * v67) + PronSuccessorSeedCategory))
          {
            v60 = *(_QWORD *)v53;
LABEL_95:
            RecogGerm::operator=(*(_QWORD *)v89 + 44 * *v59, v60 + 44 * v58);
LABEL_96:
            ++*v59;
LABEL_97:
            ++*v21;
            goto LABEL_98;
          }
          if (!*(_BYTE *)(a1 + 64))
          {
            v92 = 0;
            v93 = 0;
            WordList::lookupAll((uint64_t *)v66, v65, (uint64_t)&v92);
            if ((_DWORD)v93)
            {
              v78 = 0;
              while (1)
              {
                v79 = *(_DWORD *)(v92 + 4 * v78);
                v80 = *(unsigned __int8 *)(v66 + 416);
                v81 = v79 == 16777213
                    ? *(unsigned __int8 *)(v66 + 417)
                    : WordList::getPronSuccessorSeedCategory((WordList *)v66, v79);
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v66 + 400) + 16 * v80) + v81))
                  goto LABEL_111;
                if (++v78 >= (unint64_t)v93)
                  goto LABEL_112;
              }
            }
            goto LABEL_112;
          }
        }
        else
        {
          if (WordList::seedPossible(v40, v90, v61 & 0xFFFFFF))
          {
            RecogGerm::operator=(*(_QWORD *)v89 + 44 * *v59, *(_QWORD *)v53 + 44 * v58);
            goto LABEL_96;
          }
          if (!*(_BYTE *)(a1 + 64))
          {
            if (!(_DWORD)v95)
              WordList::lookupAll((uint64_t *)v40, v90, (uint64_t)&v94);
            v92 = 0;
            v93 = 0;
            WordList::lookupAll((uint64_t *)v40, v61 & 0xFFFFFF, (uint64_t)&v92);
            v74 = v95;
            if ((_DWORD)v95)
            {
              v75 = 0;
              v76 = v93;
              while (!v76)
              {
LABEL_90:
                if (++v75 >= v74)
                  goto LABEL_112;
              }
              v77 = 0;
              while (!WordList::seedPossible(v40, *(_DWORD *)(v94 + 4 * v75), *(_DWORD *)(v92 + 4 * v77)))
              {
                ++v77;
                v76 = v93;
                if (v77 >= v93)
                {
                  v74 = v95;
                  goto LABEL_90;
                }
              }
LABEL_111:
              RecogGerm::operator=(*(_QWORD *)v89 + 44 * *v59, *(_QWORD *)v53 + 44 * v58);
              ++*v59;
              ++*v21;
            }
LABEL_112:
            DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v92);
          }
        }
LABEL_98:
        if (++v58 >= (unint64_t)*v55)
          goto LABEL_114;
      }
      v63 = *(uint64_t **)(*(_QWORD *)(**v86 + 8 * v62) + 48);
      PronPredecessorSeedCategory = WordList::getPronPredecessorSeedCategory(v40, v90);
      if (!*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v40 + 50) + 16 * PronPredecessorSeedCategory)
                     + WordList::getPronSuccessorSeedCategory((WordList *)v63, v61 & 0xFFFFFF)))
      {
        v21 = a5;
        if (!*(_BYTE *)(a1 + 64))
        {
          if (!(_DWORD)v95)
            WordList::lookupAll((uint64_t *)v40, v90, (uint64_t)&v94);
          v92 = 0;
          v93 = 0;
          WordList::lookupAll(v63, v61 & 0xFFFFFF, (uint64_t)&v92);
          v69 = v95;
          if ((_DWORD)v95)
          {
            v70 = 0;
            v71 = v93;
            while (!v71)
            {
LABEL_78:
              if (++v70 >= v69)
                goto LABEL_110;
            }
            v72 = 0;
            while (1)
            {
              v73 = WordList::getPronPredecessorSeedCategory(v40, *(_DWORD *)(v94 + 4 * v70));
              if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v40 + 50) + 16 * v73)
                            + WordList::getPronSuccessorSeedCategory((WordList *)v63, *(_DWORD *)(v92 + 4 * v72))))break;
              ++v72;
              v71 = v93;
              if (v72 >= v93)
              {
                v69 = v95;
                goto LABEL_78;
              }
            }
            RecogGerm::operator=(*(_QWORD *)v89 + 44 * *v59, *(_QWORD *)v53 + 44 * v58);
            ++*v59;
            ++*a5;
          }
LABEL_110:
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v92);
          v21 = a5;
        }
        goto LABEL_98;
      }
      RecogGerm::operator=(*(_QWORD *)v89 + 44 * *v59, *(_QWORD *)v53 + 44 * v58);
      ++*v59;
      v21 = a5;
      goto LABEL_97;
    }
    v46 = (int)v43;
    v47 = 16 * (int)v43 - 16;
    v48 = v83;
    do
    {
      --v46;
      DgnIArray<Utterance *>::~DgnIArray(*v48 + v47);
      v48 = v83;
      v47 -= 16;
    }
    while (v46 > (int)v44);
  }
  v18 = a1;
  *(_DWORD *)(a1 + 48) = v44;
  if ((_DWORD)v44)
    goto LABEL_53;
LABEL_115:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v94);
  return v83;
}

void sub_2097B3D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a27);
  _Unwind_Resume(a1);
}

BOOL ConstraintCacheInfo::match(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  BOOL v4;

  if (*(_BYTE *)a1
    && ((v3 = *(_DWORD *)(a1 + 4), v3 != a3) ? (v4 = v3 == -16) : (v4 = 1),
        v4
     && *(_WORD *)(a1 + 8) == *(_DWORD *)a2 >> 25
     && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 10)
     && *(unsigned __int16 *)(a2 + 6) == *(unsigned __int16 *)(a1 + 12)
     && *(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 16)))
  {
    return *(_DWORD *)(a2 + 12) == *(_DWORD *)(a1 + 20);
  }
  else
  {
    return 0;
  }
}

uint64_t WordList::seedPossible(WordList *this, unsigned int a2, unsigned int a3)
{
  unsigned int PronPredecessorSeedCategory;
  unsigned int PronSuccessorSeedCategory;

  if (a2 == 16777214)
    PronPredecessorSeedCategory = *((unsigned __int8 *)this + 416);
  else
    PronPredecessorSeedCategory = WordList::getPronPredecessorSeedCategory(this, a2);
  if (a3 == 16777213)
    PronSuccessorSeedCategory = *((unsigned __int8 *)this + 417);
  else
    PronSuccessorSeedCategory = WordList::getPronSuccessorSeedCategory(this, a3);
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 50) + 16 * PronPredecessorSeedCategory)
                            + PronSuccessorSeedCategory);
}

BOOL Constraint::getCanSeedUsingLatticeTimeConstraintSeedThreshScore(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  if ((*(_DWORD *)(a1 + 68) & 0xFFFFFFFD) != 0)
    return 1;
  v4 = *(_QWORD *)(a1 + 216);
  if (!v4)
    return 1;
  if (!*(_BYTE *)(v4 + 216))
    return 1;
  v5 = *(_DWORD *)(a1 + 244);
  if (v5 == -1)
    return 1;
  v6 = *(_QWORD *)(v4 + 128) + 136 * *(unsigned int *)(a2 + 12);
  return vaddvq_s32(*(int32x4_t *)(v6 + 28))
       + *(_DWORD *)(v6 + 44)
       + *(_DWORD *)(v6 + 48)
       + *(_DWORD *)(v6 + 52)
       + *(_DWORD *)(*(_QWORD *)(a1 + 256)
                   + 4 * *(unsigned int *)(*(_QWORD *)(v4 + 80) + 24 * *(unsigned int *)(v6 + 120)))
       + a3 <= *(_DWORD *)(a1 + 248) + v5;
}

uint64_t Constraint::getCanSeedFinalSilence(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int16 v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t **Bucket;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  StateMgr *v24;
  unsigned int v25;
  int v26;
  uint64_t StateTransition;
  unsigned int v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int PronPredecessorSeedCategory;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int16 v43[2];
  int v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned __int8 v47;

  v47 = 1;
  v6 = *(_DWORD *)(a1 + 68);
  if ((v6 - 1) <= 1)
  {
    v7 = *((unsigned __int16 *)a2 + 2);
    v8 = v7 == 0x3FFF ? 0 : v7 + 1;
    if (*(_DWORD *)(a1 + 80) != v8)
      return 0;
  }
  if ((v6 & 0xFFFFFFFD) != 0 || (v10 = *(_QWORD *)(a1 + 216)) == 0)
  {
    v9 = 1;
  }
  else
  {
    v11 = a2[3];
    v45 = 0;
    v46 = 0;
    if (v11 == -2)
      DgnPrimArray<int>::copyArraySlice((unint64_t)&v45, (uint64_t *)(a1 + 224), 0, *(_DWORD *)(a1 + 232));
    else
      Lattice<WordLatticeLC>::appendOutLinks(v10, *(_DWORD *)(*(_QWORD *)(v10 + 128) + 136 * v11 + 120), (uint64_t)&v45);
    v12 = v46;
    if ((_DWORD)v46)
    {
      v13 = v45;
      while (1)
      {
        v14 = *v13++;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 128) + 136 * v14 + 88) == -50331651)
          break;
        if (!--v12)
          goto LABEL_17;
      }
      v9 = 1;
    }
    else
    {
LABEL_17:
      v9 = 0;
      v47 = 0;
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v45);
    v6 = *(_DWORD *)(a1 + 68);
  }
  if ((v6 & 0xFFFFFFFD) != 0 || v9 == 0)
    goto LABEL_50;
  v16 = a2[2];
  LOWORD(v45) = *a2 >> 25;
  HIDWORD(v45) = v16;
  Bucket = Hash<StateSpec,StateSpec,StateSpec,BOOL>::findBucket(a1 + 336, (unsigned __int16 *)&v45);
  if (*Bucket)
  {
    v47 = *((_BYTE *)*Bucket + 20);
    if (!v47)
      return v47;
    goto LABEL_51;
  }
  if ((_DWORD)v16)
  {
    v24 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + (((unint64_t)*a2 >> 22) & 0x3F8)) + 56);
    if (*(_BYTE *)(a1 + 64))
    {
      v25 = *(_DWORD *)(*((_QWORD *)v24 + 54) + 4 * v16);
      if (v25 == -1)
      {
        v26 = 0;
      }
      else
      {
        v26 = 1;
        if (v25 > a3)
          goto LABEL_48;
      }
      v28 = *(_DWORD *)(*((_QWORD *)v24 + 56) + 4 * v16);
      if (v28 != -1)
      {
        v26 = 1;
        if (v28 < a3)
          goto LABEL_48;
      }
      v29 = *(_QWORD *)(a1 + 216);
      if (v29)
      {
        if (*(_BYTE *)(v29 + 215))
        {
          v30 = *(_DWORD *)(a1 + 240);
          if (v30 != -1)
          {
            v31 = (_DWORD *)(*(_QWORD *)(v29 + 128) + 136 * a2[3]);
            v32 = v31[4] - a3 + v31[5] + v31[6];
            if (v32 < 0)
              v32 = -v32;
            v26 = 1;
            if (v32 > v30)
              goto LABEL_48;
          }
        }
      }
    }
    else
    {
      v26 = 0;
    }
    StateTransition = StateMgr::getStateTransition(v24, v16, 0, v19, v20, v21, v22, v23);
  }
  else
  {
    v26 = 0;
    StateTransition = a1 + 168;
  }
  if (!*(_DWORD *)(StateTransition + 8))
  {
LABEL_48:
    v9 = 0;
    v47 = 0;
    goto LABEL_49;
  }
  v33 = 0;
  while (1)
  {
    v34 = *(_DWORD *)(*(_QWORD *)StateTransition + 4 * v33);
    v43[0] = *(_WORD *)a1;
    v44 = v34;
    if ((Constraint::givenStateCanSeedFinalSilence(a1, v43, v18, v19, v20, v21, v22, v23) & 1) != 0)
      break;
    if (++v33 >= (unint64_t)*(unsigned int *)(StateTransition + 8))
      goto LABEL_48;
  }
LABEL_49:
  if (v26)
  {
LABEL_50:
    if (!v9)
      return v47;
    goto LABEL_51;
  }
  Hash<StateSpec,StateSpec,StateSpec,BOOL>::add(a1 + 336, (unsigned __int16 *)&v45, &v47);
  if (!v47)
    return v47;
LABEL_51:
  v35 = *a2;
  if (v35 >> 25 != 126)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v35 >> 22) & 0x3F8)) + 48);
    if (*(_BYTE *)(v36 + 418))
    {
      v47 = 0;
      v37 = v35 & 0xFFFFFF;
      if ((v35 & 0xFFFFFF) == 0xFFFFFE)
        PronPredecessorSeedCategory = *(unsigned __int8 *)(v36 + 416);
      else
        PronPredecessorSeedCategory = WordList::getPronPredecessorSeedCategory((WordList *)v36, v37);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 400) + 16 * PronPredecessorSeedCategory)
                    + *(unsigned __int8 *)(v36 + 417)))
      {
        return 1;
      }
      else if (!*(_BYTE *)(a1 + 64))
      {
        v45 = 0;
        v46 = 0;
        WordList::lookupAll((uint64_t *)v36, v37, (uint64_t)&v45);
        if ((_DWORD)v46)
        {
          v39 = 0;
          while (1)
          {
            v40 = v45[v39];
            v41 = v40 == 16777214
                ? *(unsigned __int8 *)(v36 + 416)
                : WordList::getPronPredecessorSeedCategory((WordList *)v36, v40);
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 400) + 16 * v41) + *(unsigned __int8 *)(v36 + 417)))
              break;
            if (++v39 >= (unint64_t)v46)
              goto LABEL_70;
          }
          v47 = 1;
        }
LABEL_70:
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v45);
      }
    }
  }
  return v47;
}

void sub_2097B4308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Hash<StateSpec,StateSpec,StateSpec,BOOL>::add(uint64_t result, unsigned __int16 *a2, _BYTE *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = result;
  v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1)
    result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  v7 = *((_DWORD *)a2 + 1) + (*a2 << 13);
  v8 = *(_DWORD *)(v5 + 16);
  if (v8)
    v9 = (-1640531527 * v7) >> -(char)v8;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v5 + 80);
  v11 = *(_QWORD *)(v5 + 32);
  if (!v11)
  {
    result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    v11 = *(_QWORD *)(v5 + 32);
  }
  v12 = (_QWORD *)(v10 + 8 * v9);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)v11;
  *(_DWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 12) = *(_QWORD *)a2;
  *(_BYTE *)(v11 + 20) = *a3;
  *(_DWORD *)(v11 + 8) = v7;
  ++*(_DWORD *)(v5 + 8);
  if (*(_BYTE *)(v5 + 20))
  {
    *(_QWORD *)v11 = *v12;
  }
  else
  {
    *(_QWORD *)v11 = 0;
    v13 = (_QWORD *)*v12;
    if (*v12)
    {
      do
      {
        v12 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
  }
  *v12 = v11;
  return result;
}

uint64_t Constraint::getMaxEndTime(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  int v10;

  v3 = a2[2];
  result = 268435200;
  if ((_DWORD)v3)
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                       + (((unint64_t)*a2 >> 22) & 0x3F8))
                                           + 56)
                               + 448)
                   + 4 * v3);
    if (v5 >= 268435200)
      v6 = 268435200;
    else
      v6 = v5;
    if (v5 == -1)
      result = 268435200;
    else
      result = v6;
    v7 = *(_QWORD *)(a1 + 216);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 215))
      {
        v8 = *(_DWORD *)(a1 + 240);
        if (v8 != -1)
        {
          v9 = (_DWORD *)(*(_QWORD *)(v7 + 128) + 136 * a2[3]);
          v10 = v9[4] + v8 + v9[5] + v9[6];
          if ((int)result >= v10)
            return v10;
          else
            return result;
        }
      }
    }
  }
  return result;
}

uint64_t Constraint::getSeededPrecedingNonAcousticWords(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t **Bucket;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t StateTransition;
  unint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned __int16 v30;
  int v31;
  unsigned int v32;
  unsigned __int16 v33[2];
  unsigned int v34;

  v4 = a2[2];
  v33[0] = *a2 >> 25;
  v34 = v4;
  v5 = a1 + 592;
  Bucket = Hash<StateSpec,StateSpec,StateSpec,BOOL>::findBucket(a1 + 592, v33);
  v12 = (_QWORD *)(a1 + 576);
  if (*Bucket)
    return *v12 + 16 * *((unsigned int *)*Bucket + 5);
  v32 = *(_DWORD *)(a1 + 584);
  v14 = v32;
  v15 = v32;
  if (v32 == *(_DWORD *)(a1 + 588))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 576, 1, 1);
    v15 = *(_DWORD *)(a1 + 584);
  }
  v16 = (_QWORD *)(*(_QWORD *)(a1 + 576) + 16 * v15);
  *v16 = 0;
  v16[1] = 0;
  ++*(_DWORD *)(a1 + 584);
  v17 = *(_QWORD *)(a1 + 576);
  v13 = v17 + 16 * v14;
  if (v4)
  {
    v18 = (unint64_t)*a2 >> 25;
    StateTransition = StateMgr::getStateTransition(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v18) + 56), v4, 0, v7, v8, v9, v10, v11);
  }
  else
  {
    StateTransition = a1 + 168;
    LOWORD(v18) = *(_WORD *)a1;
  }
  if (*(_DWORD *)(StateTransition + 8))
  {
    v20 = 0;
    do
    {
      v21 = *(_DWORD *)(*(_QWORD *)StateTransition + 4 * v20);
      v30 = v18;
      v31 = v21;
      Constraint::givenStateGetPrecedingNonAcousticWords(a1, &v30, v17 + 16 * v14, v7, v8, v9, v10, v11);
      ++v20;
    }
    while (v20 < *(unsigned int *)(StateTransition + 8));
  }
  if (!*(_DWORD *)(v17 + 16 * v14 + 8))
  {
    v22 = *(_DWORD *)(a1 + 588);
    if (v14 > v22)
      DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 576, v14 - v22, 0);
    v23 = *(unsigned int *)(a1 + 584);
    if (v23 <= v14)
    {
      if (v23 < v14)
      {
        v26 = v14 - v23;
        v27 = 16 * v23;
        do
        {
          v28 = (_QWORD *)(*v12 + v27);
          *v28 = 0;
          v28[1] = 0;
          v27 += 16;
          --v26;
        }
        while (v26);
      }
    }
    else if ((int)v23 > (int)v14)
    {
      v24 = (int)v23;
      v25 = 16 * (int)v23 - 16;
      do
      {
        --v24;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v12 + v25);
        v25 -= 16;
      }
      while (v24 > (int)v14);
    }
    *(_DWORD *)(a1 + 584) = v14;
    v32 = 0;
    v13 = *(_QWORD *)(a1 + 576);
  }
  Hash<StateSpec,StateSpec,StateSpec,unsigned int>::add(v5, v33, &v32);
  return v13;
}

uint64_t Hash<StateSpec,StateSpec,StateSpec,unsigned int>::add(uint64_t result, unsigned __int16 *a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = result;
  v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1)
    result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  v7 = *((_DWORD *)a2 + 1) + (*a2 << 13);
  v8 = *(_DWORD *)(v5 + 16);
  if (v8)
    v9 = (-1640531527 * v7) >> -(char)v8;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v5 + 80);
  v11 = *(_QWORD *)(v5 + 32);
  if (!v11)
  {
    result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    v11 = *(_QWORD *)(v5 + 32);
  }
  v12 = (_QWORD *)(v10 + 8 * v9);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)v11;
  *(_DWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 12) = *(_QWORD *)a2;
  *(_DWORD *)(v11 + 20) = *a3;
  *(_DWORD *)(v11 + 8) = v7;
  ++*(_DWORD *)(v5 + 8);
  if (*(_BYTE *)(v5 + 20))
  {
    *(_QWORD *)v11 = *v12;
  }
  else
  {
    *(_QWORD *)v11 = 0;
    v13 = (_QWORD *)*v12;
    if (*v12)
    {
      do
      {
        v12 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
  }
  *v12 = v11;
  return result;
}

uint64_t Constraint::getSeededWeights(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t **Bucket;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t StateTransition;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int *v48;
  StateMgr *v49;
  int v50;
  int v51[2];
  unsigned __int16 v52[2];
  int v53;
  unsigned __int8 v54;
  unsigned int v55;
  unsigned __int16 v56[2];
  int v57;

  v6 = a2[2];
  v7 = (unint64_t)*a2 >> 25;
  v56[0] = v7;
  v57 = v6;
  v8 = a1 + 464;
  Bucket = Hash<StateSpec,StateSpec,StateSpec,BOOL>::findBucket(a1 + 464, v56);
  v15 = (_QWORD *)(a1 + 448);
  if (*Bucket)
    return *v15 + 16 * *((unsigned int *)*Bucket + 5);
  *(_QWORD *)v51 = v8;
  v55 = *(_DWORD *)(a1 + 456);
  v17 = v55;
  v18 = v55;
  if (v55 == *(_DWORD *)(a1 + 460))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 448, 1, 1);
    v18 = *(_DWORD *)(a1 + 456);
  }
  v19 = (_QWORD *)(*(_QWORD *)(a1 + 448) + 16 * v18);
  *v19 = 0;
  v19[1] = 0;
  ++*(_DWORD *)(a1 + 456);
  v20 = *(_QWORD *)(a1 + 448);
  v16 = (_QWORD *)(v20 + 16 * v17);
  v21 = 1;
  v54 = 1;
  if ((_DWORD)v6)
  {
    v49 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v7) + 56);
    StateTransition = StateMgr::getStateTransition(v49, v6, 0, v10, v11, v12, v13, v14);
    v23 = *a2;
    v24 = v23 & 0xFFFFFF;
    if ((v23 & 0xFFFFFF) == 0xFFFFF8
      || (v23 & 0xFE000000) == 0xFC000000
      || (v25 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v23 >> 22) & 0x3F8)) + 48),
          *(_WORD *)(*(_QWORD *)(v25 + 32) + 2 * v24) != 1)
      || *(_WORD *)(*(_QWORD *)(v25 + 592) + 2 * v24))
    {
      if (Constraint::getCanSeedFinalSilence(a1, a2, a3))
      {
        v50 = *(_DWORD *)(*((_QWORD *)v49 + 34) + 4 * v6);
        v26 = (v7 + 1);
        v27 = v20 + 16 * v17;
        v28 = *(_DWORD *)(v27 + 12);
        if (v28 <= v7)
          DgnArray<DgnPrimArray<double>>::reallocElts(v20 + 16 * v17, v26 - v28, 0);
        v31 = *(_DWORD *)(v27 + 8);
        v30 = (_DWORD *)(v27 + 8);
        v29 = v31;
        if (v31 <= v26)
        {
          if (v29 <= v7)
          {
            v43 = v7 - v29 + 1;
            v44 = 16 * v29;
            do
            {
              v45 = (_QWORD *)(*v16 + v44);
              *v45 = 0;
              v45[1] = 0;
              v44 += 16;
              --v43;
            }
            while (v43);
          }
        }
        else
        {
          v32 = (int)v29;
          if ((int)v29 > (int)v26)
          {
            v33 = 16 * (int)v29 - 16;
            do
            {
              --v32;
              DgnPrimArray<unsigned int>::~DgnPrimArray(*v16 + v33);
              v33 -= 16;
            }
            while (v32 > v26);
          }
        }
        *v30 = v26;
        v46 = *v16 + 16 * v7;
        v48 = (unsigned int *)(v46 + 8);
        v47 = *(_DWORD *)(v46 + 8);
        if (v47 == *(_DWORD *)(v46 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(*v16 + 16 * v7, 1, 1);
          v47 = *v48;
        }
        *(_DWORD *)(*(_QWORD *)v46 + 4 * v47) = v50;
        ++*v48;
        v34 = *(_QWORD *)v51;
        if (v50 == 0xFFFF)
        {
          v21 = 1;
        }
        else
        {
          v21 = 0;
          v54 = 0;
        }
        goto LABEL_21;
      }
    }
    v21 = 1;
  }
  else
  {
    StateTransition = a1 + 168;
    LOWORD(v7) = *(_WORD *)a1;
  }
  v34 = *(_QWORD *)v51;
LABEL_21:
  if (*(_DWORD *)(StateTransition + 8))
  {
    v35 = 0;
    do
    {
      v36 = *(_DWORD *)(*(_QWORD *)StateTransition + 4 * v35);
      v52[0] = v7;
      v53 = v36;
      Constraint::givenStateGetWeights(a1, v52, (uint64_t)v16, &v54, v11, v12, v13, v14);
      ++v35;
    }
    while (v35 < *(unsigned int *)(StateTransition + 8));
    v21 = v54;
  }
  if (v21)
  {
    v37 = *(_DWORD *)(a1 + 460);
    if (v17 > v37)
      DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 448, v17 - v37, 0);
    v38 = *(unsigned int *)(a1 + 456);
    if (v38 <= v17)
    {
      if (v38 < v17)
      {
        v39 = v17 - v38;
        v40 = 16 * v38;
        do
        {
          v41 = (_QWORD *)(*v15 + v40);
          *v41 = 0;
          v41[1] = 0;
          v40 += 16;
          --v39;
        }
        while (v39);
      }
    }
    else
    {
      DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::destructAt((_QWORD *)(a1 + 448), v17, v38 - v17);
    }
    *(_DWORD *)(a1 + 456) = v17;
    v55 = 0;
    v16 = *(_QWORD **)(a1 + 448);
  }
  Hash<StateSpec,StateSpec,StateSpec,unsigned int>::add(v34, v56, &v55);
  return (uint64_t)v16;
}

BOOL Constraint::getSuccessorRecursivePrefilteringAllowed(unsigned __int16 *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v10;
  unsigned int **StateTransition;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  int v18;

  v9 = a2[2];
  if (v9)
  {
    v10 = (unint64_t)*a2 >> 25;
    StateTransition = (unsigned int **)StateMgr::getStateTransition(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v10) + 56), v9, 0, a4, a5, a6, a7, a8);
  }
  else
  {
    v12 = *a1;
    StateTransition = (unsigned int **)(a1 + 84);
    LODWORD(v10) = v12;
  }
  v13 = *((unsigned int *)StateTransition + 2);
  if (!(_DWORD)v13)
    return 0;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v10) + 56) + 680);
  if (*(_BYTE *)(v14 + **StateTransition) == 1)
    return 1;
  v16 = 1;
  do
  {
    v17 = v16;
    if (v13 == v16)
      break;
    v18 = *(unsigned __int8 *)(v14 + (*StateTransition)[v16++]);
  }
  while (v18 != 1);
  return v17 < v13;
}

uint64_t Constraint::getWeightsForState(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  v2 = a2[2];
  if ((_DWORD)v2)
    return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                               + (((unint64_t)*a2 >> 22) & 0x3F8))
                                                   + 56)
                                       + 272)
                           + 4 * v2);
  else
    return 0xFFFFLL;
}

BOOL Constraint::isLMAllowedForState(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  v2 = a2[2];
  return !(_DWORD)v2
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                      + (((unint64_t)*a2 >> 22) & 0x3F8))
                                          + 56)
                              + 304)
                  + v2) != 0;
}

BOOL Constraint::isCoartAllowedForState(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  v2 = a2[2];
  return !(_DWORD)v2
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                      + (((unint64_t)*a2 >> 22) & 0x3F8))
                                          + 56)
                              + 320)
                  + v2) != 0;
}

BOOL Constraint::isPrecedingNonAcousticWordRequiredForState(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = a2[2];
  result = 0;
  if ((_DWORD)v2)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                      + (((unint64_t)*a2 >> 22) & 0x3F8))
                                          + 56)
                              + 480)
                  + v2) == 1)
      return 1;
    v3 = *(_QWORD *)(a1 + 216);
    if (v3)
    {
      if (*(_DWORD *)(*(_QWORD *)(v3 + 128) + 136 * a2[3] + 108) != -83886084)
        return 1;
    }
  }
  return result;
}

BOOL Constraint::isPrecedingNonAcousticWordValidForState(uint64_t a1, unsigned int *a2, int a3)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v3 = *a2;
  if ((v3 ^ a3) >> 25)
    return 0;
  v4 = a2[2];
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 216);
  if (v5)
    return *(_DWORD *)(*(_QWORD *)(v5 + 128) + 136 * a2[3] + 108) == a3;
  else
    return StateMgr::isPrecedingNonAcousticWordForState(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v3 >> 22) & 0x3F8)) + 56), a3 & 0xFFFFFF, v4);
}

BOOL Constraint::isLeftWBAllowedForState(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  v2 = a2[2];
  return !(_DWORD)v2
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                      + (((unint64_t)*a2 >> 22) & 0x3F8))
                                          + 56)
                              + 352)
                  + v2) != 0;
}

BOOL Constraint::isRightWBAllowedForState(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  v2 = a2[2];
  return !(_DWORD)v2
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                      + (((unint64_t)*a2 >> 22) & 0x3F8))
                                          + 56)
                              + 368)
                  + v2) != 0;
}

uint64_t Constraint::getTraceNextPhones(uint64_t a1, uint64_t a2, int *a3, int **a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  if (*(_DWORD *)a2 == -50331651)
    return 0;
  v5 = *(unsigned __int16 *)(a2 + 4);
  v6 = *a3;
  if (v5 == 0x3FFF)
  {
    if (v6 != 1)
      return 0;
    v7 = a1 + 120;
  }
  else
  {
    v8 = v6 == 1;
    v9 = 104;
    if (v8)
      v9 = 88;
    v7 = *(_QWORD *)(a1 + v9) + 16 * v5;
  }
  BitArray::operator=(a4, v7);
  return 1;
}

uint64_t Constraint::getStateNextPhones(uint64_t a1, unsigned int *a2, _DWORD *a3, BitArray *a4)
{
  unint64_t v4;
  unint64_t v9;
  uint64_t v10;
  _DWORD **v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;

  v4 = *a2;
  if (v4 >> 25 == 126
    || !a2[2]
    || *a3 != 1
    || *(_BYTE *)(gParDiagnosticSearchActiveWordBuildAllSuccessorPhonemeContexts + 41))
  {
    return 0;
  }
  v9 = v4 >> 25;
  v10 = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * (v4 >> 25));
  v11 = *(_DWORD ***)(v10 + 56);
  BitArray::setSize(a4, *(_DWORD *)(v10 + 184));
  StateMgr::mergeNextPhones(v11, a2[2], (_DWORD **)a4);
  v12 = *(_QWORD *)(a1 + 216);
  if (v12)
  {
    v13 = a2[3];
    v30 = 0;
    v31 = 0;
    if (v13 == -2)
      DgnPrimArray<int>::copyArraySlice((unint64_t)&v30, (uint64_t *)(a1 + 224), 0, *(_DWORD *)(a1 + 232));
    else
      Lattice<WordLatticeLC>::appendOutLinks(v12, *(_DWORD *)(*(_QWORD *)(v12 + 128) + 136 * v13 + 120), (uint64_t)&v30);
    PhnIndexSet::PhnIndexSet((PhnIndexSet *)v29, *(_DWORD *)(v10 + 184));
    *(_DWORD *)v29[0] |= 1u;
    if ((_DWORD)v31)
    {
      v14 = 0;
      v15 = -83886081;
      do
      {
        v16 = *(_QWORD *)(a1 + 216);
        v17 = *(_DWORD *)(*(_QWORD *)(v16 + 128) + 136 * *(unsigned int *)(v30 + 4 * v14) + 88);
        if (v17 != v15 && (v17 & 0xFE000000) != -67108864)
        {
          v19 = *(uint64_t **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v9) + 48);
          v20 = *(_QWORD *)&v17 & 0xFFFFFFLL;
          if (*(_BYTE *)(v16 + 218))
          {
            v21 = *(unsigned __int16 *)(v19[74] + 2 * v20);
            *(_DWORD *)(v29[0] + ((v21 >> 3) & 0x1FFC)) |= 1 << v21;
          }
          else
          {
            v27 = 0;
            v28 = 0;
            WordList::lookupAll(v19, v20, (uint64_t)&v27);
            if ((_DWORD)v28)
            {
              v22 = 0;
              v23 = v27;
              v24 = v19[74];
              v25 = v29[0];
              do
              {
                v26 = *(unsigned __int16 *)(v24 + 2 * *(unsigned int *)(v23 + 4 * v22));
                *(_DWORD *)(v25 + ((v26 >> 3) & 0x1FFC)) |= 1 << v26;
                ++v22;
              }
              while (v22 < v28);
            }
            DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
          }
          v15 = v17;
        }
        ++v14;
      }
      while (v14 < v31);
    }
    BitArray::inplaceAndSameSize((_DWORD **)a4, (const BitArray *)v29);
    BitArray::~BitArray((BitArray *)v29);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v30);
  }
  return 1;
}

void sub_2097B510C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  BitArray::~BitArray((BitArray *)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

void RecogGermArrayRecogGermIterator::~RecogGermArrayRecogGermIterator(RecogGermArrayRecogGermIterator *this)
{
  JUMPOUT(0x20BD149A8);
}

void PhnIndexSet::PhnIndexSet(PhnIndexSet *this, unsigned int a2)
{
  BitArray *v3;

  DgnString::DgnString(this);
  BitArray::setSize(v3, a2);
}

void sub_2097B518C(_Unwind_Exception *a1)
{
  BitArray *v1;

  BitArray::~BitArray(v1);
  _Unwind_Resume(a1);
}

void PhnIndexSet::PhnIndexSet(PhnIndexSet *this, const PhnIndexSet *a2)
{
  int **v3;

  DgnString::DgnString(this);
  BitArray::operator=(v3, (uint64_t)a2);
}

void sub_2097B51D0(_Unwind_Exception *a1)
{
  BitArray *v1;

  BitArray::~BitArray(v1);
  _Unwind_Resume(a1);
}

uint64_t DgnArray<CWIDAC>::find(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  if (!*(_DWORD *)(a1 + 8))
    return 0xFFFFFFFFLL;
  v4 = 0;
  v5 = 0;
  while (!CWIDAC::operator==(*(_QWORD *)a1 + v4, a2))
  {
    ++v5;
    v4 += 24;
    if (v5 >= *(unsigned int *)(a1 + 8))
      return 0xFFFFFFFFLL;
  }
  return v5;
}

BOOL CWIDAC::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4)
      && *(unsigned __int16 *)(a1 + 6) == *(unsigned __int16 *)(a2 + 6)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

unint64_t DgnArray<CWIDAC>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 24 * v6, 24 * v5, 24 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x18;
  *(_QWORD *)a1 = v8;
  return result;
}

uint64_t Hash<StateSpec,StateSpec,StateSpec,BOOL>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218BA8;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 17;
  else
    v7 = 21;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2097B53FC(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<StateSpec,StateSpec,StateSpec,BOOL>::~Hash(uint64_t a1)
{
  Hash<StateSpec,StateSpec,StateSpec,BOOL>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<StateSpec,StateSpec,StateSpec,unsigned int>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218BD0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 20;
  else
    v7 = 24;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2097B54F0(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<StateSpec,StateSpec,StateSpec,unsigned int>::~Hash(uint64_t a1)
{
  Hash<StateSpec,StateSpec,StateSpec,unsigned int>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

_QWORD *DgnArray<PhnIndexSet>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 16 * v2 - 16;
    do
    {
      BitArray::~BitArray((BitArray *)(*(_QWORD *)a1 + v3));
      v3 -= 16;
    }
    while (v3 != -16);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t Hash<StateSpec,StateSpec,StateSpec,BOOL>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218BA8;
  if (*(_DWORD *)(a1 + 8))
    Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

_QWORD *DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::destructAt((_QWORD *)a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::destructAt(_QWORD *result, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;

  v3 = result;
  v4 = a3 + a2;
  v5 = a2;
  v6 = v4 + 1;
  for (i = 16 * v4 - 16; --v6 > v5; i = v8)
  {
    v8 = i - 16;
    result = DgnArray<DgnPrimArray<unsigned char>>::releaseAll(*v3 + i);
  }
  return result;
}

uint64_t Hash<StateSpec,StateSpec,StateSpec,unsigned int>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218BD0;
  if (*(_DWORD *)(a1 + 8))
    Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t sizeObject<CWIDAC>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[4];
  int v11;
  __int128 v12;

  v11 = 0x3FFF;
  v12 = xmmword_209A593D0;
  v4 = sizeObject((uint64_t)v10, 2);
  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 12;
  else
    v5 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = v4;
    v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      v8 = v7 + 1;
      do
        v5 += sizeObject(*(_QWORD *)a1 + 24 * (v8-- - 2), a2);
      while (v8 > 1);
    }
    if (!a2)
      v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
  return v5;
}

uint64_t DgnArray<DgnArray<CWIDAC>>::copyArraySlice(uint64_t result, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v7 = result;
  v8 = *(unsigned int *)(result + 8);
  if ((int)v8 >= 1)
  {
    v9 = 16 * v8 - 16;
    do
    {
      result = DgnIArray<Utterance *>::~DgnIArray(*(_QWORD *)v7 + v9);
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(v7 + 8) = 0;
  v10 = *(_DWORD *)(v7 + 12);
  if (a4 <= v10)
  {
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_14;
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(v7, a4 - v10, 0);
    v11 = *(_DWORD *)(v7 + 8);
  }
  v13 = 0;
  v12 = v11;
  do
  {
    v14 = *a2 + 16 * (a3 + v13);
    v15 = (_QWORD *)(*(_QWORD *)v7 + 16 * v12);
    *v15 = 0;
    v15[1] = 0;
    result = DgnArray<CWIDAC>::copyArraySlice((unint64_t)v15, (uint64_t *)v14, 0, *(_DWORD *)(v14 + 8));
    v12 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      v16 = (int)v12;
      v17 = 16 * (int)v12 - 16;
      do
      {
        --v16;
        result = DgnIArray<Utterance *>::~DgnIArray(*(_QWORD *)v7 + v17);
        v17 -= 16;
      }
      while (v16 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    v18 = a4 - (unint64_t)v12;
    v19 = 16 * v12;
    do
    {
      v20 = (_QWORD *)(*(_QWORD *)v7 + v19);
      *v20 = 0;
      v20[1] = 0;
      v19 += 16;
      --v18;
    }
    while (v18);
  }
LABEL_17:
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

unint64_t DgnArray<CWIDAC>::copyArraySlice(unint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;

  v7 = result;
  *(_DWORD *)(result + 8) = 0;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    v9 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_6;
  }
  else
  {
    result = DgnArray<CWIDAC>::reallocElts(result, a4 - v8, 0);
    v9 = *(_DWORD *)(v7 + 8);
  }
  v11 = *a2;
  v12 = *(_QWORD *)v7;
  v13 = a4;
  v10 = v9;
  do
  {
    v14 = v11 + 24 * a3;
    v15 = v12 + 24 * v10;
    *(_DWORD *)v15 = *(_DWORD *)v14;
    *(_DWORD *)(v15 + 4) = *(_DWORD *)(v14 + 4);
    *(_OWORD *)(v15 + 8) = *(_OWORD *)(v14 + 8);
    ++v10;
    ++a3;
    --v13;
  }
  while (v13);
LABEL_6:
  if (v10 < a4)
  {
    v16 = a4 - (unint64_t)v10;
    v17 = (_OWORD *)(*(_QWORD *)v7 + 24 * v10 + 8);
    do
    {
      *((_DWORD *)v17 - 1) = 0x3FFF;
      *v17 = xmmword_209A593D0;
      v17 = (_OWORD *)((char *)v17 + 24);
      --v16;
    }
    while (v16);
  }
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

void DgnArray<PhnIndexSet>::copyArraySlice(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 >= 1)
  {
    v9 = 16 * v8 - 16;
    do
    {
      BitArray::~BitArray((BitArray *)(*(_QWORD *)a1 + v9));
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 12);
  if (a4 <= v10)
  {
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_14;
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1, a4 - v10, 0);
    v11 = *(_DWORD *)(a1 + 8);
  }
  v13 = 0;
  v12 = v11;
  do
  {
    PhnIndexSet::PhnIndexSet((PhnIndexSet *)(*(_QWORD *)a1 + 16 * v12), (const PhnIndexSet *)(*a2 + 16 * (a3 + v13)));
    v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      v14 = (int)v12;
      v15 = 16 * (int)v12 - 16;
      do
      {
        --v14;
        BitArray::~BitArray((BitArray *)(*(_QWORD *)a1 + v15));
        v15 -= 16;
      }
      while (v14 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  v16 = a4 - v12;
  if (a4 > v12)
  {
    v17 = 16 * v12;
    do
    {
      DgnString::DgnString((DgnString *)(*(_QWORD *)a1 + v17));
      v17 += 16;
      --v16;
    }
    while (v16);
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = a4;
}

unint64_t DgnArray<RecogGerm>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 44 * v6, 44 * v5, 44 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x2C;
  *(_QWORD *)a1 = v8;
  return result;
}

uint64_t **Hash<StateSpec,StateSpec,StateSpec,BOOL>::findBucket(uint64_t a1, unsigned __int16 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t **result;
  uint64_t *v8;
  uint64_t **v9;

  v2 = *a2;
  v3 = *((_DWORD *)a2 + 1);
  v4 = v3 + (v2 << 13);
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
    v6 = (-1640531527 * v4) >> -(char)v5;
  else
    v6 = 0;
  result = (uint64_t **)(*(_QWORD *)(a1 + 80) + 8 * v6);
  v8 = *result;
  if (*result)
  {
    do
    {
      v9 = (uint64_t **)v8;
      if (*((_DWORD *)v8 + 2) == v4 && *((unsigned __int16 *)v8 + 6) == v2 && *((_DWORD *)v8 + 4) == v3)
        break;
      v8 = (uint64_t *)*v8;
      result = v9;
    }
    while (*v9);
  }
  return result;
}

void MrecInitModule_picmgr_user(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;

  if (!gParDebugShowUnreachablePelsOnLoad)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowUnreachablePelsOnLoad", algn_209A59469, algn_209A59469, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowUnreachablePelsOnLoad = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowUnreachablePelsOnLoad);
  }
  if (!gParDebugPicMgrBuildLookups)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugPicMgrBuildLookups", algn_209A59469, algn_209A59469, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugPicMgrBuildLookups = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPicMgrBuildLookups);
  }
  if (!gParDebugShowPicMgrStatsOnClose)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugShowPicMgrStatsOnClose", algn_209A59469, algn_209A59469, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugShowPicMgrStatsOnClose = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPicMgrStatsOnClose);
  }
  if (!gParDebugPicMgr)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugPicMgr", algn_209A59469, algn_209A59469, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDebugPicMgr = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPicMgr);
  }
  if (!gParDebugShowPelIdMap)
  {
    v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugShowPelIdMap", algn_209A59469, algn_209A59469, 0, 0, 0);
    *v9 = &unk_24C214CE8;
    gParDebugShowPelIdMap = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPelIdMap);
  }
  if (!gParDiagnosticCheckPelIdMap)
  {
    v10 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v10, "DiagnosticCheckPelIdMap", algn_209A59469, algn_209A59469, 0, 0, 0);
    *v11 = &unk_24C214CE8;
    gParDiagnosticCheckPelIdMap = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticCheckPelIdMap);
  }
}

uint64_t Branch::writeObject(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  writeObject(a2, (__int16 *)(a1 + 4), a3);
  writeObject(a2, (unsigned __int16 *)(a1 + 6), a3);
  writeObject(a2, (unsigned __int16 *)a1, a3);
  return writeObject(a2, (unsigned __int16 *)(a1 + 2), a3);
}

void PicMgr::printSize(PicMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  int v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _BYTE *v170;
  uint64_t v171;
  int v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _BYTE *v196;
  uint64_t v197;
  _BYTE *v198;
  uint64_t v199;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 415, (DgnString *)&v198);
  if ((_DWORD)v199)
    v16 = v198;
  else
    v16 = algn_209A59469;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, algn_209A59469, a3, algn_209A59469, v16);
  DgnString::~DgnString((DgnString *)&v198);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, algn_209A59469);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  v22 = (a3 + 1);
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 416, (DgnString *)&v198);
  if ((_DWORD)v199)
    v28 = v198;
  else
    v28 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), algn_209A59469, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += v21;
  *a5 += v21;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v33 = v198;
  else
    v33 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, (a3 + 1), algn_209A59469, (34 - a3), (34 - a3), v33, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v198);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v38 = v198;
  else
    v38 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), algn_209A59469, (34 - a3), (34 - a3), v38, 4, 4, 0);
  v197 = a3;
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 12;
  else
    v39 = 16;
  v40 = *((_DWORD *)this + 6);
  v41 = *((_DWORD *)this + 7);
  v42 = v41 >= v40;
  v43 = v41 - v40;
  if (v42)
  {
    v45 = v40 & ~(v40 >> 31);
    v40 = 0;
    v44 = v39 + v45;
    v39 += v45 + v43;
  }
  else
  {
    v44 = v39;
  }
  v46 = v40;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v51 = v198;
  else
    v51 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, v22, algn_209A59469, v23, v23, v51, v39, v44, v46);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += v39;
  *a5 += v44;
  *a6 += v46;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v56 = v198;
  else
    v56 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v22, algn_209A59469, v23, v23, v56, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v198);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v57 = 12;
  else
    v57 = 16;
  v58 = *((unsigned int *)this + 12);
  v59 = *((_DWORD *)this + 13);
  if (v59 >= v58)
  {
    v60 = 0;
    if ((int)v58 > 0)
      v57 = (v57 | 2) + 2 * (v58 - 1);
    v61 = v57 + 2 * (v59 - v58);
  }
  else
  {
    v60 = 2 * v58;
    v61 = v57;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v66 = v198;
  else
    v66 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v22, algn_209A59469, v23, v23, v66, v61, v57, v60);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += v61;
  *a5 += v57;
  *a6 += v60;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v67 = 12;
  else
    v67 = 16;
  v68 = *((unsigned int *)this + 16);
  v69 = *((_DWORD *)this + 17);
  if (v69 >= v68)
  {
    v70 = 0;
    if ((int)v68 > 0)
      v67 = (v67 | 2) + 2 * (v68 - 1);
    v71 = v67 + 2 * (v69 - v68);
  }
  else
  {
    v70 = 2 * v68;
    v71 = v67;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v76 = v198;
  else
    v76 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v22, algn_209A59469, v23, v23, v76, v71, v67, v70);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += v71;
  *a5 += v67;
  *a6 += v70;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v77 = 12;
  else
    v77 = 16;
  v78 = *((unsigned int *)this + 20);
  v79 = *((_DWORD *)this + 21);
  if (v79 >= v78)
  {
    v80 = 0;
    if ((int)v78 > 0)
      v77 = (v77 | 2) + 2 * (v78 - 1);
    v81 = v77 + 2 * (v79 - v78);
  }
  else
  {
    v80 = 2 * v78;
    v81 = v77;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v86 = v198;
  else
    v86 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v82, v83, v84, v85, v22, algn_209A59469, v23, v23, v86, v81, v77, v80);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += v81;
  *a5 += v77;
  *a6 += v80;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v91 = v198;
  else
    v91 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v22, algn_209A59469, v23, v23, v91, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v96 = v198;
  else
    v96 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v22, algn_209A59469, v23, v23, v96, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v101 = v198;
  else
    v101 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v22, algn_209A59469, v23, v23, v101, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v198);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v106 = v198;
  else
    v106 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v22, algn_209A59469, v23, v23, v106, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v198);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v107 = 12;
  else
    v107 = 16;
  v108 = *((_DWORD *)this + 26);
  v109 = *((_DWORD *)this + 27);
  v42 = v109 >= v108;
  v110 = v109 - v108;
  if (v42)
  {
    v112 = v108 & ~(v108 >> 31);
    v108 = 0;
    v111 = v107 + v112;
    v107 += v112 + v110;
  }
  else
  {
    v111 = v107;
  }
  v113 = v108;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v118 = v198;
  else
    v118 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v22, algn_209A59469, v23, v23, v118, v107, v111, v113);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += v107;
  *a5 += v111;
  *a6 += v113;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v119 = 12;
  else
    v119 = 16;
  v120 = *((_DWORD *)this + 30);
  v121 = *((_DWORD *)this + 31);
  v42 = v121 >= v120;
  v122 = v121 - v120;
  if (v42)
  {
    v124 = v120 & ~(v120 >> 31);
    v120 = 0;
    v123 = v119 + v124;
    v119 += v124 + v122;
  }
  else
  {
    v123 = v119;
  }
  v125 = v120;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v130 = v198;
  else
    v130 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v126, v127, v128, v129, v22, algn_209A59469, v23, v23, v130, v119, v123, v125);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += v119;
  *a5 += v123;
  *a6 += v125;
  v131 = sizeObject<DgnArray<Branch>>((uint64_t)this + 128, 0);
  v132 = sizeObject<DgnArray<Branch>>((uint64_t)this + 128, 1);
  v198 = 0;
  v199 = 0;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v198);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v137 = v198;
  else
    v137 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v133, v134, v135, v136, v22, algn_209A59469, v23, v23, v137, v131, v132, 0);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += v131;
  *a5 += v132;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v142 = v198;
  else
    v142 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v138, v139, v140, v141, v22, algn_209A59469, v23, v23, v142, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += 4;
  *a5 += 4;
  v143 = sizeObject<DgnArray<PicNode>>((uint64_t)this + 152, 0);
  v144 = sizeObject<DgnArray<PicNode>>((uint64_t)this + 152, 1);
  v198 = 0;
  v199 = 0;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v198);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v149 = v198;
  else
    v149 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v22, algn_209A59469, v23, v23, v149, v143, v144, 0);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += v143;
  *a5 += v144;
  v150 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v150 = 12;
  v151 = *((unsigned int *)this + 44);
  if ((int)v151 <= 0)
    v152 = 0;
  else
    v152 = 2 * v151;
  v153 = v152 + v150;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v158 = v198;
  else
    v158 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v154, v155, v156, v157, v22, algn_209A59469, v23, v23, v158, v153, v153, 0);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += v153;
  *a5 += v153;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v159 = 12;
  else
    v159 = 16;
  v160 = *((_DWORD *)this + 48);
  v161 = *((_DWORD *)this + 49);
  v42 = v161 >= v160;
  v162 = v161 - v160;
  if (v42)
  {
    v164 = v160 & ~(v160 >> 31);
    v160 = 0;
    v163 = v159 + v164;
    v159 += v164 + v162;
  }
  else
  {
    v163 = v159;
  }
  v165 = v160;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v170 = v198;
  else
    v170 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v166, v167, v168, v169, v22, algn_209A59469, v23, v23, v170, v159, v163, v165);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += v159;
  *a5 += v163;
  *a6 += v165;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v171 = 12;
  else
    v171 = 16;
  v172 = *((_DWORD *)this + 52);
  v173 = *((_DWORD *)this + 53);
  v42 = v173 >= v172;
  v174 = v173 - v172;
  if (v42)
  {
    v176 = v172 & ~(v172 >> 31);
    v172 = 0;
    v175 = v171 + v176;
    v171 += v176 + v174;
  }
  else
  {
    v175 = v171;
  }
  v177 = v172;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v182 = v198;
  else
    v182 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v178, v179, v180, v181, v22, algn_209A59469, v23, v23, v182, v171, v175, v177);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += v171;
  *a5 += v175;
  *a6 += v177;
  v183 = (char *)this + 216;
  v184 = BitArray::sizeObject((uint64_t)this + 216, 0);
  v185 = BitArray::sizeObject((uint64_t)v183, 1);
  v186 = BitArray::sizeObject((uint64_t)v183, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 418, (DgnString *)&v198);
  if ((_DWORD)v199)
    v191 = v198;
  else
    v191 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v187, v188, v189, v190, v22, algn_209A59469, v23, v23, v191, v184, v185, v186);
  DgnString::~DgnString((DgnString *)&v198);
  *a4 += v184;
  *a5 += v185;
  *a6 += v186;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/picmgr.cpp", 419, (DgnString *)&v198);
  if ((_DWORD)v199)
    v196 = v198;
  else
    v196 = algn_209A59469;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v192, v193, v194, v195, v197, algn_209A59469, (35 - v197), (35 - v197), v196, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v198);
}

void sub_2097B6BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnArray<Branch>>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];

  v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  else
    v3 = 16;
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v2 = v3;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 8);
      v2 = v3;
      if ((int)v6 >= 1)
      {
        v7 = v6 + 1;
        v2 = v3;
        do
          v2 += sizeObject<EnergyInfo>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2)
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v9);
  return v2;
}

void sub_2097B6D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnArray<PicNode>>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];

  v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  else
    v3 = 16;
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v2 = v3;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 8);
      v2 = v3;
      if ((int)v6 >= 1)
      {
        v7 = v6 + 1;
        v2 = v3;
        do
          v2 += sizeObject<FrameTypeInfo>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2)
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v9);
  return v2;
}

void sub_2097B6E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t DgnPrimArray<unsigned short>::compact(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(result + 8);
  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v1 != (_DWORD)v2)
  {
    v3 = result;
    if ((_DWORD)v1)
    {
      v4 = 0;
      result = realloc_array(*(_QWORD **)result, &v4, 2 * v1, 2 * v1, 2 * v2, 0);
      *(_DWORD *)(v3 + 12) = result >> 1;
      *(_QWORD *)v3 = v4;
    }
    else
    {
      result = *(_QWORD *)result;
      if (*(_QWORD *)v3)
        result = MemChunkFree((_QWORD *)result, 0);
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 12) = 0;
    }
  }
  return result;
}

void **DgnPrimArray<unsigned char>::compact(void **result)
{
  unint64_t v1;
  uint64_t v2;
  void **v3;
  void *v4;

  v1 = *((unsigned int *)result + 2);
  v2 = *((unsigned int *)result + 3);
  if ((_DWORD)v1 != (_DWORD)v2)
  {
    v3 = result;
    if ((_DWORD)v1)
    {
      v4 = 0;
      result = (void **)realloc_array(*result, &v4, v1, v1, v2, 0);
      *((_DWORD *)v3 + 3) = (_DWORD)result;
      *v3 = v4;
    }
    else
    {
      result = (void **)*result;
      if (*v3)
        result = (void **)MemChunkFree(result, 0);
      *v3 = 0;
      *((_DWORD *)v3 + 3) = 0;
    }
  }
  return result;
}

void PicMgr::savePicMgr(PicMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  if (a4)
  {
    PicMgr::saveQuestionsAsText(this, a2, a5);
    PicMgr::saveDurationDistributions(this, a2, a5);
    PicMgr::savePicTreesAsText(this, a2, a5);
    if (*((_DWORD *)this + 48))
      PicMgr::saveAdaptPhonemesAsText(this, a2, a5);
  }
  else
  {
    PicMgr::saveBinary(this, a2, a3, a5);
  }
}

void PicMgr::saveQuestionsAsText(PicMgr *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t i;
  int v21;
  unsigned int v22;
  unsigned __int16 v23;
  uint64_t v24;
  unint64_t j;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37[36];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v37);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v37, (uint64_t)a2, 0x42u, a3);
  v35 = 0;
  v36 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v37, sPQT_Versions, (uint64_t)&v35, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v37, "PicTreeQuestionText", (_QWORD *)(v35 + 8 * (v36 - 1)));
  v11 = *((unsigned int *)this + 26);
  DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v37, "HasPentaphoneQuestions", *((unsigned __int8 *)this + 92));
  DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v37, "HasWordBoundaryQuestions", *((unsigned __int8 *)this + 93));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v37, "NumberOfQuestions", v11);
  v33 = 0;
  v34 = 0;
  v31 = 0;
  v32 = 0;
  DgnString::DgnString((DgnString *)&v29, "QuestionId");
  v12 = v34;
  if ((_DWORD)v34 == HIDWORD(v34))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v33, 1, 1);
    v12 = v34;
  }
  DgnString::DgnString((DgnString *)(v33 + 16 * v12), (const DgnString *)&v29);
  LODWORD(v34) = v34 + 1;
  DgnString::~DgnString((DgnString *)&v29);
  v13 = v32;
  if ((_DWORD)v32 == HIDWORD(v32))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v31, 1, 1);
    v13 = v32;
  }
  *(_DWORD *)(v31 + 4 * v13) = 3;
  LODWORD(v32) = v13 + 1;
  v14 = v34;
  DgnString::DgnString((DgnString *)&v29, "QuestionTarget");
  v15 = v34;
  if ((_DWORD)v34 == HIDWORD(v34))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v33, 1, 1);
    v15 = v34;
  }
  DgnString::DgnString((DgnString *)(v33 + 16 * v15), (const DgnString *)&v29);
  LODWORD(v34) = v34 + 1;
  DgnString::~DgnString((DgnString *)&v29);
  v16 = v32;
  if ((_DWORD)v32 == HIDWORD(v32))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v31, 1, 1);
    v16 = v32;
  }
  *(_DWORD *)(v31 + 4 * v16) = 0;
  LODWORD(v32) = v16 + 1;
  v17 = v34;
  DgnString::DgnString((DgnString *)&v29, "TargetPhonemes");
  v18 = v34;
  if ((_DWORD)v34 == HIDWORD(v34))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v33, 1, 1);
    v18 = v34;
  }
  DgnString::DgnString((DgnString *)(v33 + 16 * v18), (const DgnString *)&v29);
  LODWORD(v34) = v34 + 1;
  DgnString::~DgnString((DgnString *)&v29);
  v19 = v32;
  if ((_DWORD)v32 == HIDWORD(v32))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v31, 1, 1);
    v19 = v32;
  }
  *(_DWORD *)(v31 + 4 * v19) = 0;
  LODWORD(v32) = v19 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v37, (uint64_t)&v31, (uint64_t)&v33);
  if ((_DWORD)v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v21 = *(unsigned __int8 *)(*((_QWORD *)this + 12) + i);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v37, 0, i);
      v22 = v21 - 1;
      if ((v21 - 1) < 6)
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v37, v14, off_24C21AD90[(char)v22]);
      DgnString::DgnString((DgnString *)&v29);
      if (v22 >= 4)
      {
        if ((v21 - 5) < 2)
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v37, v17, "_wb");
      }
      else
      {
        v30 = 0;
        v23 = *((_WORD *)this + 44);
        if (!v23)
          goto LABEL_32;
        v24 = 0;
        for (j = 0; j < v23; ++j)
        {
          if (*(_BYTE *)(*((_QWORD *)this + 14) + j + (_DWORD)i * v23))
          {
            if (v30 >= 2)
              DgnString::operator+=((DgnString *)&v29, ".");
            v26 = *(_QWORD *)(*(_QWORD *)this + 8) + v24;
            if (*(_DWORD *)(v26 + 8))
              v27 = *(char **)v26;
            else
              v27 = algn_209A59469;
            DgnString::operator+=((DgnString *)&v29, v27);
            v23 = *((_WORD *)this + 44);
          }
          v24 += 16;
        }
        if (v30)
          v28 = v29;
        else
LABEL_32:
          v28 = algn_209A59469;
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v37, v17, v28);
      }
      DgnTextFileWriter::writeNextLine(v37);
      DgnString::~DgnString((DgnString *)&v29);
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v31);
  DgnArray<DgnString>::releaseAll((uint64_t)&v33);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v35);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v37);
}

void sub_2097B73A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

void PicMgr::saveDurationDistributions(PicMgr *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t i;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25[35];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v25);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v25, (uint64_t)a2, 0x3Bu, a3);
  v23 = 0;
  v24 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v25, sPDT_Versions, (uint64_t)&v23, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v25, "PicTreeDurationText", (_QWORD *)(v23 + 8 * (v24 - 1)));
  v11 = *((unsigned int *)this + 12);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v25, "NumberOfDistributions", v11);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v25, "PenDif", *((unsigned __int8 *)this + 8));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v25, "PenDifDurLogTerm", *((_DWORD *)this + 3));
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  DgnString::DgnString((DgnString *)v18, "DurId");
  v12 = v22;
  if ((_DWORD)v22 == HIDWORD(v22))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v21, 1, 1);
    v12 = v22;
  }
  DgnString::DgnString((DgnString *)(v21 + 16 * v12), (const DgnString *)v18);
  LODWORD(v22) = v22 + 1;
  DgnString::~DgnString((DgnString *)v18);
  v13 = v20;
  if ((_DWORD)v20 == HIDWORD(v20))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v19, 1, 1);
    v13 = v20;
  }
  *(_DWORD *)(v19 + 4 * v13) = 3;
  LODWORD(v20) = v13 + 1;
  v14 = v22;
  DgnString::DgnString((DgnString *)v18, "MeanScaledFrameDuration");
  v15 = v22;
  if ((_DWORD)v22 == HIDWORD(v22))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v21, 1, 1);
    v15 = v22;
  }
  DgnString::DgnString((DgnString *)(v21 + 16 * v15), (const DgnString *)v18);
  LODWORD(v22) = v22 + 1;
  DgnString::~DgnString((DgnString *)v18);
  v16 = v20;
  if ((_DWORD)v20 == HIDWORD(v20))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v19, 1, 1);
    v16 = v20;
  }
  *(_DWORD *)(v19 + 4 * v16) = 3;
  LODWORD(v20) = v16 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v25, (uint64_t)&v19, (uint64_t)&v21);
  if ((_DWORD)v11)
  {
    for (i = 0; i != v11; ++i)
    {
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v25, 0, i);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v25, v14, *(unsigned __int16 *)(*((_QWORD *)this + 5) + 2 * i));
      DgnTextFileWriter::writeNextLine(v25);
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v19);
  DgnArray<DgnString>::releaseAll((uint64_t)&v21);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v23);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v25);
}

void sub_2097B7684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

void PicMgr::savePicTreesAsText(PicMgr *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  unsigned int v17;
  const char *v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned __int16 *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  PicMgr *v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  char *v66;
  unsigned int v67;
  _BYTE v68[16];
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75[36];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v75);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v75, (uint64_t)a2, 0x47u, a3);
  v73 = 0;
  v74 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v75, sPTT_Versions, (uint64_t)&v73, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v75, "PicTreeText", (_QWORD *)(v73 + 8 * (v74 - 1)));
  v11 = *((unsigned __int16 *)this + 44);
  if (*((_WORD *)this + 44))
  {
    v12 = 0;
    v13 = 0;
    v14 = (unsigned __int8 *)*((_QWORD *)this + 2);
    do
    {
      v16 = *v14++;
      v15 = v16;
      if (v16)
        ++v13;
      v12 += v15;
      --v11;
    }
    while (v11);
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v75, "NumberOfPhonemes", v13);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v75, "NumberOfTrees", v12);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v75, "MaxPelId", *((unsigned __int16 *)this + 45));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v75, "MaxDurId", (*((_DWORD *)this + 12) - 1));
  DgnString::DgnString((DgnString *)&v71);
  v17 = *((_DWORD *)this + 36) - 1;
  if (v17 < 3)
    DgnString::operator=((DgnString *)&v71, off_24C21ADC0[v17]);
  if ((_DWORD)v72)
    v18 = v71;
  else
    v18 = algn_209A59469;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v75, "LookupType", v18);
  DgnString::~DgnString((DgnString *)&v71);
  v71 = 0;
  v72 = 0;
  v69 = 0;
  v70 = 0;
  DgnString::DgnString((DgnString *)v68, "TreeId");
  v19 = v72;
  if ((_DWORD)v72 == HIDWORD(v72))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v71, 1, 1);
    v19 = v72;
  }
  DgnString::DgnString((DgnString *)&v71[16 * v19], (const DgnString *)v68);
  LODWORD(v72) = v72 + 1;
  DgnString::~DgnString((DgnString *)v68);
  v20 = v70;
  if ((_DWORD)v70 == HIDWORD(v70))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v69, 1, 1);
    v20 = v70;
  }
  *(_DWORD *)(v69 + 4 * v20) = 3;
  LODWORD(v70) = v20 + 1;
  v65 = v72;
  DgnString::DgnString((DgnString *)v68, "Phoneme");
  v21 = v72;
  if ((_DWORD)v72 == HIDWORD(v72))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v71, 1, 1);
    v21 = v72;
  }
  DgnString::DgnString((DgnString *)&v71[16 * v21], (const DgnString *)v68);
  LODWORD(v72) = v72 + 1;
  DgnString::~DgnString((DgnString *)v68);
  v22 = v70;
  if ((_DWORD)v70 == HIDWORD(v70))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v69, 1, 1);
    v22 = v70;
  }
  *(_DWORD *)(v69 + 4 * v22) = 0;
  LODWORD(v70) = v22 + 1;
  v64 = v72;
  DgnString::DgnString((DgnString *)v68, "NodeIndex");
  v23 = v72;
  if ((_DWORD)v72 == HIDWORD(v72))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v71, 1, 1);
    v23 = v72;
  }
  DgnString::DgnString((DgnString *)&v71[16 * v23], (const DgnString *)v68);
  LODWORD(v72) = v72 + 1;
  DgnString::~DgnString((DgnString *)v68);
  v24 = v70;
  if ((_DWORD)v70 == HIDWORD(v70))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v69, 1, 1);
    v24 = v70;
  }
  *(_DWORD *)(v69 + 4 * v24) = 3;
  LODWORD(v70) = v24 + 1;
  v63 = v72;
  DgnString::DgnString((DgnString *)v68, "BranchIndex");
  v25 = v72;
  if ((_DWORD)v72 == HIDWORD(v72))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v71, 1, 1);
    v25 = v72;
  }
  DgnString::DgnString((DgnString *)&v71[16 * v25], (const DgnString *)v68);
  LODWORD(v72) = v72 + 1;
  DgnString::~DgnString((DgnString *)v68);
  v26 = v70;
  if ((_DWORD)v70 == HIDWORD(v70))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v69, 1, 1);
    v26 = v70;
  }
  *(_DWORD *)(v69 + 4 * v26) = 3;
  LODWORD(v70) = v26 + 1;
  v62 = v72;
  DgnString::DgnString((DgnString *)v68, "QuestionId");
  v27 = v72;
  if ((_DWORD)v72 == HIDWORD(v72))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v71, 1, 1);
    v27 = v72;
  }
  DgnString::DgnString((DgnString *)&v71[16 * v27], (const DgnString *)v68);
  LODWORD(v72) = v72 + 1;
  DgnString::~DgnString((DgnString *)v68);
  v28 = v70;
  if ((_DWORD)v70 == HIDWORD(v70))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v69, 1, 1);
    v28 = v70;
  }
  *(_DWORD *)(v69 + 4 * v28) = 1;
  LODWORD(v70) = v28 + 1;
  v61 = v72;
  DgnString::DgnString((DgnString *)v68, "YesBranchIndex");
  v29 = v72;
  if ((_DWORD)v72 == HIDWORD(v72))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v71, 1, 1);
    v29 = v72;
  }
  DgnString::DgnString((DgnString *)&v71[16 * v29], (const DgnString *)v68);
  LODWORD(v72) = v72 + 1;
  DgnString::~DgnString((DgnString *)v68);
  v30 = v70;
  if ((_DWORD)v70 == HIDWORD(v70))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v69, 1, 1);
    v30 = v70;
  }
  *(_DWORD *)(v69 + 4 * v30) = 1;
  LODWORD(v70) = v30 + 1;
  v60 = v72;
  DgnString::DgnString((DgnString *)v68, "NoBranchIndex");
  v31 = v72;
  if ((_DWORD)v72 == HIDWORD(v72))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v71, 1, 1);
    v31 = v72;
  }
  DgnString::DgnString((DgnString *)&v71[16 * v31], (const DgnString *)v68);
  LODWORD(v72) = v72 + 1;
  DgnString::~DgnString((DgnString *)v68);
  v32 = v70;
  if ((_DWORD)v70 == HIDWORD(v70))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v69, 1, 1);
    v32 = v70;
  }
  *(_DWORD *)(v69 + 4 * v32) = 1;
  LODWORD(v70) = v32 + 1;
  v59 = v72;
  DgnString::DgnString((DgnString *)v68, "PelId");
  v33 = v72;
  if ((_DWORD)v72 == HIDWORD(v72))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v71, 1, 1);
    v33 = v72;
  }
  DgnString::DgnString((DgnString *)&v71[16 * v33], (const DgnString *)v68);
  LODWORD(v72) = v72 + 1;
  DgnString::~DgnString((DgnString *)v68);
  v34 = v70;
  if ((_DWORD)v70 == HIDWORD(v70))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v69, 1, 1);
    v34 = v70;
  }
  *(_DWORD *)(v69 + 4 * v34) = 1;
  LODWORD(v70) = v34 + 1;
  v58 = v72;
  DgnString::DgnString((DgnString *)v68, "DurId");
  v35 = v72;
  if ((_DWORD)v72 == HIDWORD(v72))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v71, 1, 1);
    v35 = v72;
  }
  DgnString::DgnString((DgnString *)&v71[16 * v35], (const DgnString *)v68);
  LODWORD(v72) = v72 + 1;
  DgnString::~DgnString((DgnString *)v68);
  v36 = v70;
  if ((_DWORD)v70 == HIDWORD(v70))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v69, 1, 1);
    v36 = v70;
  }
  *(_DWORD *)(v69 + 4 * v36) = 1;
  LODWORD(v70) = v36 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v75, (uint64_t)&v69, (uint64_t)&v71);
  v37 = *((unsigned __int16 *)this + 44);
  if (*((_WORD *)this + 44))
  {
    v38 = 0;
    v67 = 0;
    v56 = this;
    do
    {
      v39 = *(_QWORD *)(*(_QWORD *)this + 8) + 16 * v38;
      if (*(_DWORD *)(v39 + 8))
        v40 = *(char **)v39;
      else
        v40 = algn_209A59469;
      v66 = v40;
      v41 = *((_QWORD *)this + 2);
      if (*(_BYTE *)(v41 + v38))
      {
        v42 = 0;
        v57 = v38;
        do
        {
          v43 = *((_QWORD *)this + 16) + 16 * (v42 + (_DWORD)v38 * *((unsigned __int8 *)this + 32));
          v44 = *(unsigned int *)(v43 + 8);
          if ((_DWORD)v44)
          {
            v45 = 0;
            v46 = 0;
            v47 = 8 * v44;
            do
            {
              v48 = (unsigned __int16 *)(*(_QWORD *)v43 + v45);
              v49 = (__int16)v48[2];
              if (v49 == -1)
              {
                v52 = *v48;
                v53 = v48[1];
                v50 = -1;
                v51 = -1;
              }
              else
              {
                v50 = v48[1];
                v51 = *v48;
                v52 = 0xFFFF;
                v53 = 0xFFFF;
              }
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v75, 0, v67);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v75, v65, v66);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v75, v64, v42);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v75, v63, v46);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v75, v62, v49);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v75, v61, v50);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v75, v60, v51);
              if (v52 == 0xFFFF)
                v54 = -1;
              else
                v54 = v52;
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v75, v59, v54);
              if (v53 == 0xFFFF)
                v55 = -1;
              else
                v55 = v53;
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v75, v58, v55);
              DgnTextFileWriter::writeNextLine(v75);
              ++v46;
              v45 += 8;
            }
            while (v47 != v45);
            this = v56;
            v38 = v57;
            v41 = *((_QWORD *)v56 + 2);
          }
          ++v67;
          ++v42;
        }
        while (v42 < *(unsigned __int8 *)(v41 + v38));
        v37 = *((unsigned __int16 *)this + 44);
      }
      ++v38;
    }
    while (v38 < v37);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v69);
  DgnArray<DgnString>::releaseAll((uint64_t)&v71);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v73);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v75);
}

void sub_2097B7F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  va_list va2;
  uint64_t v20;
  va_list va3;

  va_start(va3, a11);
  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v18 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

void PicMgr::saveAdaptPhonemesAsText(PicMgr *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t i;
  uint64_t v24;
  char *v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33[35];

  v6 = *((unsigned int *)this + 48);
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v33);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v33, (uint64_t)a2, 0x36u, a3);
  v31 = 0;
  v32 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v33, sPAT_Versions, (uint64_t)&v31, v7, v8, v9, v10, v11);
  DgnTextFileWriter::setFileType((uint64_t)v33, "PicTreePhonemeAdaptationText", (_QWORD *)(v31 + 8 * (v32 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v33, "NumberOfPhonemes", v6);
  v29 = 0;
  v30 = 0;
  v27 = 0;
  v28 = 0;
  DgnString::DgnString((DgnString *)v26, "PhnIndex");
  v12 = v30;
  if ((_DWORD)v30 == HIDWORD(v30))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v29, 1, 1);
    v12 = v30;
  }
  DgnString::DgnString((DgnString *)(v29 + 16 * v12), (const DgnString *)v26);
  LODWORD(v30) = v30 + 1;
  DgnString::~DgnString((DgnString *)v26);
  v13 = v28;
  if ((_DWORD)v28 == HIDWORD(v28))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v27, 1, 1);
    v13 = v28;
  }
  *(_DWORD *)(v27 + 4 * v13) = 3;
  LODWORD(v28) = v13 + 1;
  v14 = v30;
  DgnString::DgnString((DgnString *)v26, "Phoneme");
  v15 = v30;
  if ((_DWORD)v30 == HIDWORD(v30))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v29, 1, 1);
    v15 = v30;
  }
  DgnString::DgnString((DgnString *)(v29 + 16 * v15), (const DgnString *)v26);
  LODWORD(v30) = v30 + 1;
  DgnString::~DgnString((DgnString *)v26);
  v16 = v28;
  if ((_DWORD)v28 == HIDWORD(v28))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v27, 1, 1);
    v16 = v28;
  }
  *(_DWORD *)(v27 + 4 * v16) = 0;
  LODWORD(v28) = v16 + 1;
  v17 = v30;
  DgnString::DgnString((DgnString *)v26, "ChooseWarpUse");
  v18 = v30;
  if ((_DWORD)v30 == HIDWORD(v30))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v29, 1, 1);
    v18 = v30;
  }
  DgnString::DgnString((DgnString *)(v29 + 16 * v18), (const DgnString *)v26);
  LODWORD(v30) = v30 + 1;
  DgnString::~DgnString((DgnString *)v26);
  v19 = v28;
  if ((_DWORD)v28 == HIDWORD(v28))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v27, 1, 1);
    v19 = v28;
  }
  *(_DWORD *)(v27 + 4 * v19) = 3;
  LODWORD(v28) = v19 + 1;
  v20 = v30;
  DgnString::DgnString((DgnString *)v26, "ScoreSegmentationUse");
  v21 = v30;
  if ((_DWORD)v30 == HIDWORD(v30))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v29, 1, 1);
    v21 = v30;
  }
  DgnString::DgnString((DgnString *)(v29 + 16 * v21), (const DgnString *)v26);
  LODWORD(v30) = v30 + 1;
  DgnString::~DgnString((DgnString *)v26);
  v22 = v28;
  if ((_DWORD)v28 == HIDWORD(v28))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v27, 1, 1);
    v22 = v28;
  }
  *(_DWORD *)(v27 + 4 * v22) = 3;
  LODWORD(v28) = v22 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v33, (uint64_t)&v27, (uint64_t)&v29);
  if ((_DWORD)v6)
  {
    for (i = 0; i != v6; ++i)
    {
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v33, 0, i);
      v24 = *(_QWORD *)(*(_QWORD *)this + 8) + 16 * (unsigned __int16)i;
      if (*(_DWORD *)(v24 + 8))
        v25 = *(char **)v24;
      else
        v25 = algn_209A59469;
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v33, v14, v25);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v33, v17, *(unsigned __int8 *)(*((_QWORD *)this + 23) + i));
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v33, v20, *(unsigned __int8 *)(*((_QWORD *)this + 25) + i));
      DgnTextFileWriter::writeNextLine(v33);
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  DgnArray<DgnString>::releaseAll((uint64_t)&v29);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v31);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v33);
}

void sub_2097B83B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

void PicMgr::saveBinary(PicMgr *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v7;
  uint64_t CurrentSubDirComponents;
  int v9;

  v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x46u, a4, "MRPICT!?", 24, 14);
  v9 = 0;
  writeObject((uint64_t)v7, (char *)this + 8, &v9);
  writeObject((uint64_t)v7, (int *)this + 3, &v9);
  writeObject<unsigned char>((uint64_t)v7, (uint64_t)this + 16, &v9);
  writeObject((uint64_t)v7, (char *)this + 32, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 40, &v9);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 44, &v9);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 45, &v9);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 92, &v9);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 93, &v9);
  writeObject<unsigned char>((uint64_t)v7, (uint64_t)this + 96, &v9);
  writeObject<BOOL>(v7, (uint64_t)this + 112, (unsigned int *)&v9);
  writeObject<DgnArray<Branch>>((uint64_t)v7, (uint64_t)this + 128, &v9);
  writeObject((uint64_t)v7, (int *)this + 36, &v9);
  writeObject<DgnArray<PicNode>>((uint64_t)v7, (uint64_t)this + 152, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 168, &v9);
  writeObject<BOOL>(v7, (uint64_t)this + 184, (unsigned int *)&v9);
  writeObject<BOOL>(v7, (uint64_t)this + 200, (unsigned int *)&v9);
  writeObject((uint64_t)v7, (uint64_t)this + 216, &v9);
  writeObjectChecksum((uint64_t)v7, &v9);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x46u, v9);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
}

uint64_t readObject<BOOL>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;
  BOOL *v7;
  unsigned int v9;
  void *v10;

  v9 = 0;
  readObject((uint64_t)a1, &v9, a3);
  v6 = v9;
  v7 = *(BOOL **)a2;
  if (*(_DWORD *)(a2 + 12) < v9)
  {
    v10 = 0;
    *(_DWORD *)(a2 + 12) = realloc_array(v7, &v10, v9, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 8), 1);
    v7 = (BOOL *)v10;
    *(_QWORD *)a2 = v10;
  }
  *(_DWORD *)(a2 + 8) = v6;
  return readObjectArray(a1, v7, v6, a3);
}

uint64_t writeObject<BOOL>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  int v7;

  v7 = *(_DWORD *)(a2 + 8);
  writeObject((uint64_t)a1, &v7, a3);
  return writeObjectArray(a1, *(const BOOL **)a2, *(_DWORD *)(a2 + 8), a3);
}

uint64_t writeObject<DgnArray<Branch>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject<Branch>(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<DgnArray<PicNode>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject<PicNode>(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

unsigned __int16 *PicMgr::getPicNode(uint64_t a1, int a2, unsigned __int16 *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t *v11;
  int v12;

  v6 = a3[2];
  if (PicMgr::canLookupPic(a1, a3))
  {
    v7 = *(unsigned __int16 *)(a1 + 88);
    v8 = a3[1] + v7 * a3[2];
    v9 = a3[3] + v8 * v7;
    if (*(_DWORD *)(a1 + 144) == 3)
      v8 = v9;
    return (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 16 * v6)
                              + 4 * (*(unsigned __int16 *)(*(_QWORD *)(a1 + 168) + 2 * v8) + a2));
  }
  else
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 128) + 16 * (a2 + *(unsigned __int8 *)(a1 + 32) * v6));
    v12 = 0;
    return PicMgr::searchPicTree(a1, a3, v11, 0, &v12);
  }
}

BOOL PicMgr::canLookupPic(uint64_t a1, unsigned __int16 *a2)
{
  int v2;
  int v4;

  v2 = *(_DWORD *)(a1 + 144);
  if (v2 == 1)
    return 0;
  if (*(_BYTE *)(a1 + 93))
  {
    if (*((_BYTE *)a2 + 10) || *((_BYTE *)a2 + 11) != 1)
      return 0;
  }
  v4 = *(unsigned __int16 *)(*(_QWORD *)a1 + 56);
  if (*(_BYTE *)(a1 + 92))
  {
    if (*a2 != v4 || a2[4] != v4)
      return 0;
  }
  return v2 != 2 || a2[3] == v4;
}

unsigned __int16 *PicMgr::searchPicTree(uint64_t a1, unsigned __int16 *a2, uint64_t *a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v6;
  unsigned __int16 *result;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;

  v6 = *a3;
  result = (unsigned __int16 *)(*a3 + 8 * a4);
  v8 = result[2];
  if (v8 == 0xFFFF)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = *((unsigned __int8 *)a2 + 11);
    v11 = *((unsigned __int8 *)a2 + 10);
    v12 = a2[4];
    v13 = *a2;
    v14 = a2[3];
    v15 = a2[1];
    do
    {
      v16 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 96) + (__int16)v8) - 1;
      v17 = *(unsigned __int16 *)(a1 + 88) * (__int16)v8;
      switch(v16)
      {
        case 0:
          v18 = v17 + v13;
          goto LABEL_8;
        case 1:
          v18 = v17 + v15;
          goto LABEL_8;
        case 2:
          v18 = v17 + v14;
          goto LABEL_8;
        case 3:
          v18 = v17 + v12;
LABEL_8:
          if (*(_BYTE *)(*(_QWORD *)(a1 + 112) + v18))
            goto LABEL_9;
          break;
        case 4:
          if (!v11)
            break;
          goto LABEL_9;
        case 5:
          if (!v10)
            break;
LABEL_9:
          ++result;
          break;
        default:
          break;
      }
      ++v9;
      result = (unsigned __int16 *)(v6 + 8 * *result);
      v8 = result[2];
    }
    while (v8 != 0xFFFF);
  }
  *a5 += v9;
  return result;
}

_QWORD *PicMgr::getPrefContextPelIdAndDurIds(_QWORD *result, int a2, int a3, uint64_t *a4, int a5, uint64_t a6, unsigned int a7, unsigned int a8, uint64_t a9)
{
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int16 v23[5];
  char v24;
  char v25;

  v9 = (uint64_t)result;
  v10 = *(_WORD *)(*result + 56);
  v11 = *(unsigned __int16 *)(a6 + 2 * a8);
  v12 = v10;
  v13 = v10;
  v14 = v10;
  switch(a2)
  {
    case 0:
      goto LABEL_13;
    case 1:
    case 4:
      goto LABEL_8;
    case 2:
      goto LABEL_4;
    case 3:
      v12 = *(_WORD *)(*result + 56);
      if (a8 + 2 < a7)
        v12 = *(_WORD *)(a6 + 2 * (a8 + 2));
LABEL_4:
      if (a8 < 2)
        v13 = *(_WORD *)(*result + 56);
      else
        v13 = *(_WORD *)(a6 + 2 * (a8 - 2));
LABEL_8:
      if (a8 + 1 >= a7)
      {
        v14 = *(_WORD *)(*result + 56);
LABEL_13:
        if (!a8)
          goto LABEL_15;
LABEL_14:
        v10 = *(_WORD *)(a6 + 2 * (a8 - 1));
        goto LABEL_15;
      }
      if (a2 != 1 && !a8)
      {
        v14 = *(_WORD *)(*result + 56);
        goto LABEL_15;
      }
      v14 = *(_WORD *)(a6 + 2 * (a8 + 1));
      if (a8)
        goto LABEL_14;
LABEL_15:
      LOBYTE(v15) = 0;
      LOBYTE(v16) = 0;
      if (a3 != 1)
      {
        if (a3 != 2)
        {
          if (a3 != 3)
            goto LABEL_28;
          v17 = *a4;
          if (a8)
            v15 = (*(_DWORD *)(v17 + 4 * ((a8 + a5 - 1) >> 5)) >> (a8 + a5 - 1)) & 1;
          else
            LOBYTE(v15) = 0;
          v16 = (*(_DWORD *)(v17 + 4 * ((a8 + a5) >> 5)) >> (a8 + a5)) & 1;
        }
        if (a7 - 1 == a8)
          LOBYTE(v16) = 1;
      }
      if (!a8)
        LOBYTE(v15) = 1;
LABEL_28:
      v23[0] = v13;
      v23[1] = v10;
      v23[2] = v11;
      v23[3] = v14;
      v23[4] = v12;
      v24 = v15;
      v25 = v16;
      v18 = *(unsigned __int8 *)(result[2] + v11);
      v19 = *(_DWORD *)(a9 + 12);
      if (v18 > v19)
        result = (_QWORD *)DgnPrimArray<unsigned int>::reallocElts(a9, v18 - v19, 0);
      *(_DWORD *)(a9 + 8) = v18;
      if (v18)
      {
        v20 = 0;
        v21 = 0;
        v22 = 4 * v18;
        do
        {
          result = PicMgr::getPicNode(v9, v21, v23);
          *(_DWORD *)(*(_QWORD *)a9 + v20) = *(_DWORD *)result;
          ++v21;
          v20 += 4;
        }
        while (v22 != v20);
      }
      return result;
    default:
      v14 = *(_WORD *)(*result + 56);
      v12 = v14;
      v13 = v14;
      goto LABEL_15;
  }
}

uint64_t PicMgr::getEndDuplicatesLookup(uint64_t a1, unsigned int *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int16 *v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;

  v12 = a2[2];
  *(_DWORD *)(a6 + 8) = 0;
  v13 = *(_DWORD *)(a6 + 12);
  if (v12 > v13)
    DgnPrimArray<unsigned int>::reallocElts(a6, v12 - v13, 0);
  v14 = *(unsigned __int16 *)(*(_QWORD *)a2 + 4);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v14);
  v16 = *(_QWORD *)(a1 + 152);
  *(_DWORD *)(a5 + 8) = 0;
  v17 = *(_DWORD *)(a5 + 12);
  if (v12 > v17)
  {
    DgnPrimArray<short>::reallocElts(a5, v12 - v17, 0);
LABEL_6:
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = (unsigned __int16 *)(*(_QWORD *)a2 + 12 * v18);
      v21 = *(unsigned __int16 *)(a1 + 88);
      v22 = v20[1] + v21 * v20[2];
      v23 = v20[3] + v22 * v21;
      if (*(_DWORD *)(a1 + 144) != 3)
        v23 = v22;
      v24 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 168) + 2 * v23);
      v25 = *(unsigned int *)(a5 + 8);
      if (!(_DWORD)v25)
        break;
      v26 = 0;
      LODWORD(v27) = -1;
      do
      {
        if (*(unsigned __int16 *)(*(_QWORD *)a5 + 2 * v26) == (_DWORD)v24)
          v27 = v26;
        else
          v27 = v27;
        ++v26;
      }
      while (v25 != v26);
      v28 = *(_QWORD *)a6;
      if ((_DWORD)v27 == -1)
        goto LABEL_18;
      v25 = v27;
LABEL_22:
      v19 += v15;
      *(_DWORD *)(*a3 + 4 * v18++) = *(_DWORD *)(v28 + 4 * v25);
      if (v18 == v12)
        return *(unsigned int *)(a5 + 8);
    }
    v28 = *(_QWORD *)a6;
LABEL_18:
    *(_WORD *)(*(_QWORD *)a5 + 2 * v25) = v24;
    *(_DWORD *)(a5 + 8) = v25 + 1;
    *(_DWORD *)(v28 + 4 * (*(_DWORD *)(a6 + 8))++) = v18;
    if ((_DWORD)v15)
    {
      v29 = 4 * v24;
      v30 = v15;
      v31 = v19;
      do
      {
        *(_DWORD *)(*a4 + 4 * v31++) = *(_DWORD *)(*(_QWORD *)(v16 + 16 * v14) + v29);
        v29 += 4;
        --v30;
      }
      while (v30);
      v28 = *(_QWORD *)a6;
    }
    goto LABEL_22;
  }
  if ((_DWORD)v12)
    goto LABEL_6;
  return *(unsigned int *)(a5 + 8);
}

uint64_t PicMgr::getEndDuplicatesSearch(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned __int16 *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  v6 = a6;
  v10 = *((unsigned int *)a2 + 2);
  *(_DWORD *)(a6 + 8) = 0;
  v11 = *(_DWORD *)(a6 + 12);
  if (v10 <= v11)
  {
    if (!(_DWORD)v10)
      return *(unsigned int *)(v6 + 8);
    v13 = *a2;
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a6, v10 - v11, 0);
    v13 = *a2;
  }
  v14 = *(unsigned __int16 *)(v13 + 4);
  v15 = 0;
  v16 = 0;
  v17 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v14);
  v33 = 16 * v14;
  v35 = v10;
  v36 = v6;
  v38 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v14);
  do
  {
    if (v17)
    {
      LOWORD(v18) = 0;
      v19 = (unsigned __int16 *)(*a2 + 12 * v15);
      v20 = v33 * (unint64_t)*(unsigned __int8 *)(a1 + 32);
      v21 = v38;
      v22 = v16;
      do
      {
        v23 = PicMgr::searchPicTree(a1, v19, (uint64_t *)(*(_QWORD *)(a1 + 128) + v20), (unsigned __int16)v18, a5);
        v18 = v23[3];
        if (v18 == 0xFFFF)
          LOWORD(v18) = 0;
        *(_DWORD *)(*a4 + 4 * v22++) = *(_DWORD *)v23;
        v20 += 16;
        --v21;
      }
      while (v21);
    }
    v6 = v36;
    v24 = *(unsigned int *)(v36 + 8);
    v25 = *(_QWORD *)v36;
    v26 = 0;
    if ((_DWORD)v24)
    {
      v27 = v35;
      v17 = v38;
      while ((_DWORD)v38)
      {
        v28 = 0;
        v29 = *(_DWORD *)(v25 + 4 * v26) * v38;
        v30 = *a4;
        v31 = v38;
        while (*(unsigned __int16 *)(v30 + 4 * (v29 + v28)) == *(unsigned __int16 *)(v30 + 4 * (v16 + v28))
             && *(unsigned __int16 *)(v30 + 4 * (v29 + v28) + 2) == *(unsigned __int16 *)(v30 + 4 * (v16 + v28) + 2))
        {
          ++v28;
          if (!--v31)
            goto LABEL_21;
        }
        if (++v26 == v24)
        {
          v26 = *(unsigned int *)(v36 + 8);
          goto LABEL_24;
        }
      }
LABEL_21:
      v26 = v26;
    }
    else
    {
      v27 = v35;
      v17 = v38;
    }
    if (v26 == v24)
    {
LABEL_24:
      *(_DWORD *)(v25 + 4 * v24) = v15;
      ++*(_DWORD *)(v36 + 8);
    }
    v16 += v17;
    *(_DWORD *)(*a3 + 4 * v15++) = *(_DWORD *)(v25 + 4 * v26);
  }
  while (v15 != v27);
  return *(unsigned int *)(v6 + 8);
}

unsigned __int16 *PicMgr::getNodeDataPtrs(unsigned __int16 *result, uint64_t *a2, _QWORD *a3, unsigned __int16 *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  _WORD *v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;

  v6 = a2;
  v7 = a4[2];
  if (a4[2])
  {
    v12 = (uint64_t)result;
    v13 = *(unsigned __int8 *)(*((_QWORD *)result + 2) + v7);
    result = (unsigned __int16 *)PicMgr::canLookupPic((uint64_t)result, a4);
    if ((_DWORD)result)
    {
      if ((_DWORD)v13)
      {
        v14 = *(unsigned __int16 *)(v12 + 88);
        v15 = a4[1] + v14 * a4[2];
        v16 = a4[3] + v15 * v14;
        if (*(_DWORD *)(v12 + 144) == 3)
          v17 = v16;
        else
          v17 = v15;
        v18 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 152) + 16 * v7)
                      + 4 * *(unsigned __int16 *)(*(_QWORD *)(v12 + 168) + 2 * v17));
        do
        {
          v19 = (unsigned __int16)v18[1];
          if (v19 == 0xFFFF)
          {
            v25 = *v6;
            *(_WORD *)(v25 + 10) = *v18;
            *(_QWORD *)v25 = 0;
            *(_WORD *)(v25 + 8) = 0;
          }
          else
          {
            v20 = *(__int16 *)(*a3 + 2 * v19);
            v21 = *(unsigned __int8 *)(v12 + 8);
            v22 = *(_DWORD *)(v12 + 12);
            v23 = *v6;
            *(_WORD *)(v23 + 10) = *v18;
            *(_BYTE *)(v23 + 8) = v21;
            *(_BYTE *)(v23 + 9) = v22;
            *(_WORD *)(v23 + 4) = v20;
            *(_WORD *)(v23 + 6) = v21 + v22 + v20;
            if (v20 < 0)
              *(_BYTE *)(v23 + 9) = v22 - v20;
            if (v20 >= 0)
              v24 = v20 << 8;
            else
              v24 = 255 * v20;
            *(_DWORD *)v23 = v24;
          }
          ++v6;
          v18 += 2;
          --v13;
        }
        while (v13);
      }
    }
    else
    {
      if ((_DWORD)v13)
      {
        LOWORD(v27) = 0;
        v28 = 16 * v7 * (unint64_t)*(unsigned __int8 *)(v12 + 32);
        v29 = v13;
        do
        {
          result = PicMgr::searchPicTree(v12, a4, (uint64_t *)(*(_QWORD *)(v12 + 128) + v28), (unsigned __int16)v27, a6);
          v27 = result[3];
          if (v27 == 0xFFFF)
            LOWORD(v27) = 0;
          v30 = result[1];
          if (v30 == 0xFFFF)
          {
            v36 = *v6;
            *(_WORD *)(v36 + 10) = *result;
            *(_QWORD *)v36 = 0;
            *(_WORD *)(v36 + 8) = 0;
          }
          else
          {
            v31 = *(__int16 *)(*a3 + 2 * v30);
            v32 = *(unsigned __int8 *)(v12 + 8);
            v33 = *(_DWORD *)(v12 + 12);
            v34 = *v6;
            *(_WORD *)(v34 + 10) = *result;
            *(_BYTE *)(v34 + 8) = v32;
            *(_BYTE *)(v34 + 9) = v33;
            *(_WORD *)(v34 + 4) = v31;
            *(_WORD *)(v34 + 6) = v32 + v33 + v31;
            if (v31 < 0)
              *(_BYTE *)(v34 + 9) = v33 - v31;
            if (v31 >= 0)
              v35 = v31 << 8;
            else
              v35 = 255 * v31;
            *(_DWORD *)v34 = v35;
          }
          ++v6;
          v28 += 16;
          --v29;
        }
        while (v29);
      }
      *a5 += v13;
    }
  }
  else
  {
    v26 = *a2;
    *(_DWORD *)(v26 + 8) = 0;
    *(_QWORD *)v26 = 0;
  }
  return result;
}

uint64_t PicMgr::getNodeDataPtrsFromPicNodes(uint64_t result, uint64_t *a2, _QWORD *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  if (a5)
  {
    v5 = a5;
    v6 = (unsigned __int16 *)(a4 + 2);
    do
    {
      if (!*(v6 - 1) || (v7 = *v6, v7 == 0xFFFF))
      {
        v8 = 0;
        v9 = 0;
        LOWORD(v10) = 0;
      }
      else
      {
        v8 = *(_WORD *)(*a3 + 2 * v7);
        v9 = *(unsigned __int8 *)(result + 8);
        v10 = *(_DWORD *)(result + 12);
      }
      v11 = *a2;
      *(_WORD *)(v11 + 10) = *(v6 - 1);
      *(_BYTE *)(v11 + 8) = v9;
      *(_BYTE *)(v11 + 9) = v10;
      *(_WORD *)(v11 + 4) = v8;
      *(_WORD *)(v11 + 6) = v9 + v8 + v10;
      if (v8 < 0)
        *(_BYTE *)(v11 + 9) = v10 - v8;
      v6 += 2;
      v12 = v8;
      v13 = v8 << 8;
      v14 = 255 * v8;
      if (v12 >= 0)
        v14 = v13;
      *(_DWORD *)v11 = v14;
      ++a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

unint64_t PicMgr::getPelPhoneMap(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  __int16 *v21;
  uint64_t v22;

  v5 = result;
  v6 = *(unsigned __int16 *)(result + 90);
  v7 = v6 + 1;
  v8 = *(_DWORD *)(a2 + 12);
  if (v8 <= v6)
    result = DgnPrimArray<short>::reallocElts(a2, v7 - v8, 0);
  *(_DWORD *)(a2 + 8) = v7;
  if (a3)
  {
    v9 = *(_DWORD *)(a3 + 12);
    if (v9 <= v6)
      result = DgnPrimArray<unsigned int>::reallocElts(a3, v7 - v9, 0);
    *(_DWORD *)(a3 + 8) = v7;
  }
  v10 = *(unsigned int *)(v5 + 136);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = *(unsigned __int8 *)(v5 + 32);
    v15 = *(_QWORD *)(v5 + 128);
    do
    {
      v13 += v11 != 0 && v11 % v14 == 0;
      if (v11 != 0 && v11 % v14 == 0)
        v12 = 0;
      v16 = v15 + 16 * v11;
      v19 = *(_DWORD *)(v16 + 8);
      v17 = (unsigned int *)(v16 + 8);
      v18 = v19;
      if (v19)
      {
        v20 = 0;
        v21 = (__int16 *)(*(_QWORD *)(v15 + 16 * v11) + 4);
        do
        {
          if (*v21 == -1)
          {
            v22 = (unsigned __int16)*(v21 - 2);
            result = *(_QWORD *)a2;
            *(_WORD *)(*(_QWORD *)a2 + 2 * v22) = v13;
            if (a3)
            {
              *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v12;
              v18 = *v17;
            }
          }
          ++v20;
          v21 += 4;
        }
        while (v20 < v18);
        v10 = *(unsigned int *)(v5 + 136);
      }
      ++v12;
      ++v11;
    }
    while (v11 < v10);
  }
  return result;
}

void *PicMgr::getPelDurIdMap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  _WORD *v7;
  void *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;

  v4 = *(unsigned __int16 *)(a1 + 90);
  v5 = v4 + 1;
  v6 = *(_DWORD *)(a2 + 12);
  if (v6 <= v4)
    DgnPrimArray<short>::reallocElts(a2, v5 - v6, 0);
  *(_DWORD *)(a2 + 8) = v5;
  v7 = *(_WORD **)a2;
  result = memset(v7, 255, 2 * v4 + 2);
  *v7 = 0;
  v9 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 128);
    do
    {
      v12 = *(unsigned int *)(v11 + 16 * v10 + 8);
      if ((_DWORD)v12)
      {
        v13 = (_WORD *)(*(_QWORD *)(v11 + 16 * v10) + 2);
        do
        {
          if ((__int16)v13[1] == -1)
            v7[(unsigned __int16)*(v13 - 1)] = *v13;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  return result;
}

unint64_t PicMgr::getRightAndDoubleGenericPicNodes@<X0>(unint64_t this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned __int16 v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned __int16 v16[6];

  v4 = this;
  v6 = *(_WORD *)(*(_QWORD *)this + 56);
  v7 = **(_DWORD **)this - 2;
  v8 = v7 * a2 * v7;
  *a3 = 0;
  a3[1] = 0;
  if ((_DWORD)v8)
  {
    this = DgnPrimArray<unsigned long long>::reallocElts((uint64_t)a3, v7 * a2 * v7, 0);
    *((_DWORD *)a3 + 2) = v8;
    if ((int)v8 >= 1)
    {
      v9 = v8 + 1;
      do
        *(_QWORD *)(*a3 + 8 * (v9-- - 2)) = 0;
      while (v9 > 1);
    }
  }
  if (v7)
  {
    v10 = 0;
    v11 = *(_QWORD *)(v4 + 16);
    do
    {
      v12 = 0;
      do
      {
        v16[0] = v6;
        v16[1] = v10;
        v16[2] = v12;
        v16[3] = v6;
        v16[4] = v6;
        v13 = v12;
        v16[5] = 0;
        if (*(_BYTE *)(v11 + v12))
        {
          v14 = 0;
          v15 = a2 * (v7 * v10 + v12);
          do
          {
            this = (unint64_t)PicMgr::getPicNode(v4, v14, v16);
            *(_QWORD *)(*a3 + 8 * (v15 + v14++)) = this;
            v11 = *(_QWORD *)(v4 + 16);
          }
          while (v14 < *(unsigned __int8 *)(v11 + v13));
        }
        v12 = v13 + 1;
      }
      while (v7 > (unsigned __int16)(v13 + 1));
      ++v10;
    }
    while (v7 > v10);
  }
  return this;
}

void sub_2097B9560(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIArray<Utterance *>::~DgnIArray(v1);
  _Unwind_Resume(a1);
}

unint64_t DgnPrimArray<BOOL>::copyArraySlice(unint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  void *v11;

  v7 = result;
  v8 = a4;
  if (*(_DWORD *)(result + 12) >= a4)
  {
    *(_DWORD *)(result + 8) = a4;
    if (!a4)
      return result;
  }
  else
  {
    v11 = 0;
    result = realloc_array(*(_QWORD **)result, &v11, a4, *(unsigned int *)(result + 8), *(unsigned int *)(result + 8), 1);
    *(_QWORD *)v7 = v11;
    *(_DWORD *)(v7 + 8) = a4;
    *(_DWORD *)(v7 + 12) = result;
  }
  v9 = *a2;
  v10 = *(_BYTE **)v7;
  do
  {
    *v10++ = *(_BYTE *)(v9 + a3++);
    --v8;
  }
  while (v8);
  return result;
}

uint64_t writeObject<Branch>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = Branch::writeObject(*(_QWORD *)a2 + v7, a1, a3);
      ++v8;
      v7 += 8;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<PicNode>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  int v10;

  v10 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v10, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (unsigned __int16 *)(*(_QWORD *)a2 + v7);
      writeObject(a1, v9, a3);
      result = writeObject(a1, v9 + 1, a3);
      ++v8;
      v7 += 4;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t TResGraphMaker::clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 344))
    {
      v3 = *(_QWORD *)(v2 + 64);
      if (v3 != v2 + 88 && v3 != 0)
        MEMORY[0x20BD149A8]();
    }
    v5 = *(void **)(v2 + 24);
    if (v5)
    {
      *(_QWORD *)(v2 + 32) = v5;
      operator delete(v5);
    }
    v6 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v6;
      operator delete(v6);
    }
    this = MEMORY[0x20BD149A8](v2, 0x1030C404962A615);
  }
  *(_QWORD *)(v1 + 16) = 0;
  return this;
}

void TResGraphMaker::add(TResGraphMaker *this, const TGraph *a2, int a3)
{
  TResGraphMaker *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OutEdge;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  int *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  const TGraph *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  void *__p[3];

  v4 = this;
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *(_QWORD *)v5;
  }
  else
  {
    v5 = operator new();
    v6 = 0;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 64) = v5 + 88;
    *(_BYTE *)(v5 + 344) = 1;
    *(_OWORD *)(v5 + 72) = xmmword_209A57DD0;
    *((_QWORD *)v4 + 2) = v5;
    *(_QWORD *)(v5 + 48) = 0;
  }
  v7 = (*(_QWORD *)(v5 + 8) - v6) >> 4;
  v8 = (uint64_t *)*((_QWORD *)a2 + 10);
  v9 = *((_QWORD *)a2 + 11) - (_QWORD)v8;
  v10 = v9 >> 3;
  if (v9)
  {
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v9 >> 3;
    do
    {
      v12 = *v8++;
      if (!*(_BYTE *)(v12 + 32))
        ++v7;
      --v11;
    }
    while (v11);
  }
  v60 = -1;
  std::vector<unsigned long>::vector(__p, v10, &v60);
  v13 = *((_QWORD *)v4 + 2);
  *((_QWORD *)__p[0] + *(_QWORD *)(*((_QWORD *)a2 + 8) + 40)) = *(_QWORD *)(v13 + 56);
  v14 = *(_QWORD *)(v13 + 56);
  std::vector<TPItnRuleControl>::resize(v13, v7 - (v14 != 0));
  v15 = (_QWORD *)*((_QWORD *)v4 + 2);
  v16 = *((_QWORD *)a2 + 9);
  v17 = __p[0];
  *((_QWORD *)__p[0] + *(_QWORD *)(v16 + 40)) = ((uint64_t)(v15[1] - *v15) >> 4) - 1;
  v18 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v18)
  {
    v19 = 0;
    v52 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 24);
    v53 = a2;
    v55 = v14 + 1;
    do
    {
      v20 = *(_QWORD *)(v18 + 8 * v19);
      if (!*(_BYTE *)(v20 + 32))
      {
        v21 = *(_QWORD *)(v20 + 40);
        if (v17[v21] == -1)
          v17[v21] = v55++;
        v56 = v15[3];
        v57 = v15[4];
        OutEdge = TVertex::getOutEdge(v20);
        if (OutEdge)
        {
LABEL_17:
          v23 = *(_QWORD *)(OutEdge + 24);
          v24 = *(_QWORD *)(v23 + 40);
          v25 = __p[0];
          v26 = *((_QWORD *)__p[0] + v24);
          if (v26 == -1)
          {
            *((_QWORD *)__p[0] + v24) = v55;
            v26 = v25[*(_QWORD *)(v23 + 40)];
            ++v55;
          }
          v27 = (uint64_t *)v4;
          v59 = *(_DWORD *)(*((_QWORD *)v4 + 2) + 80);
          v58 = v25[*(_QWORD *)(v20 + 40)];
          v28 = 2;
          switch(*(_DWORD *)(OutEdge + 48))
          {
            case 0:
            case 4:
              v28 = 3;
              break;
            case 1:
              break;
            case 6:
              v28 = 4;
              break;
            default:
              v28 = 1;
              break;
          }
          TWord::getWordSpec(*(TWord **)(OutEdge + 56));
          v30 = v29;
          TLocaleInfo::unicodeToMultiByte(v27[1], **(unsigned int ***)(OutEdge + 56), v27[2] + 64);
          v31 = v27[2];
          LOBYTE(v60) = 0;
          TBuffer<char>::insert(v31 + 64, *(_QWORD *)(v31 + 80), (char *)&v60, 1uLL);
          v32 = (_QWORD *)v27[2];
          v33 = v32[4];
          v34 = v32[5];
          if (v33 >= v34)
          {
            v36 = v32[3];
            v37 = (uint64_t)(v33 - v36) >> 5;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 59)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v39 = v34 - v36;
            if (v39 >> 4 > v38)
              v38 = v39 >> 4;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0)
              v40 = 0x7FFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            if (v40)
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>((uint64_t)(v32 + 5), v40);
            else
              v41 = 0;
            v42 = &v41[32 * v37];
            *(_DWORD *)v42 = v59;
            *((_DWORD *)v42 + 1) = v58;
            *((_DWORD *)v42 + 2) = v26;
            *((_QWORD *)v42 + 2) = v28;
            *((_QWORD *)v42 + 3) = v30;
            v44 = (char *)v32[3];
            v43 = (char *)v32[4];
            v45 = v42;
            v4 = (TResGraphMaker *)v27;
            if (v43 != v44)
            {
              do
              {
                v46 = *((_OWORD *)v43 - 1);
                *((_OWORD *)v45 - 2) = *((_OWORD *)v43 - 2);
                *((_OWORD *)v45 - 1) = v46;
                v45 -= 32;
                v43 -= 32;
              }
              while (v43 != v44);
              v43 = (char *)v32[3];
            }
            v35 = v42 + 32;
            v32[3] = v45;
            v32[4] = v42 + 32;
            v32[5] = &v41[32 * v40];
            if (v43)
              operator delete(v43);
          }
          else
          {
            *(_DWORD *)v33 = v59;
            *(_DWORD *)(v33 + 4) = v58;
            *(_DWORD *)(v33 + 8) = v26;
            v35 = (char *)(v33 + 32);
            *(_QWORD *)(v33 + 16) = v28;
            *(_QWORD *)(v33 + 24) = v30;
            v4 = (TResGraphMaker *)v27;
          }
          v32[4] = v35;
          while (1)
          {
            OutEdge = *(_QWORD *)(OutEdge + 8);
            if (!OutEdge)
              break;
            if (!*(_BYTE *)(OutEdge + 32))
              goto LABEL_17;
          }
        }
        v15 = (_QWORD *)*((_QWORD *)v4 + 2);
        v17 = __p[0];
        v47 = (int *)(*v15 + 16 * *((_QWORD *)__p[0] + *(_QWORD *)(v20 + 40)));
        v47[2] = (unint64_t)(v57 - v56) >> 5;
        v47[3] = ((v15[4] - v15[3]) >> 5) - ((v57 - v56) >> 5);
        v48 = *(_QWORD *)(v20 + 16);
        a2 = v53;
        if (v48)
          v49 = v48 + a3 - v52;
        else
          v49 = -1;
        *v47 = v49;
        v50 = *(_QWORD *)(v20 + 24);
        if (v50)
          v51 = v50 + a3 - v52;
        else
          v51 = -1;
        v47[1] = v51;
      }
      ++v19;
      v18 = *((_QWORD *)a2 + 10);
    }
    while (v19 < (*((_QWORD *)a2 + 11) - v18) >> 3);
    v16 = *((_QWORD *)a2 + 9);
  }
  v15[7] = v17[*(_QWORD *)(v16 + 40)];
  __p[1] = v17;
  operator delete(v17);
}

void sub_2097B9BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TResGraphMaker::~TResGraphMaker(TResGraphMaker *this)
{
  *(_QWORD *)this = &off_24C214BF0;
  TResGraphMaker::clear((uint64_t)this);
}

{
  *(_QWORD *)this = &off_24C214BF0;
  TResGraphMaker::clear((uint64_t)this);
  JUMPOUT(0x20BD149A8);
}

uint64_t StartupSearchCrossLayerParamSpecMgr(void)
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;

  v0 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v0, (uint64_t)"SearchCrossLayerThreshScoreIncrementMatrix", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchCrossLayerThreshScoreIncrementMatrixStringHistory);
  v1 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v1, (uint64_t)"SearchCrossLayerWordEndThreshScoreIncrementMatrix", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchCrossLayerWordEndThreshScoreIncrementMatrixStringHistory);
  v2 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v2, (uint64_t)"SearchCrossLayerUseBestSilence", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSearchCrossLayerUseBestSilenceBoolHistory);
  ParamSpecMgr::addParam(qword_253DF2878, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_253DF2878, (ParamSpec *)v2);
  ParamSpecMgr::addParam(qword_253DF2878, (ParamSpec *)v1);
  return ParamSpecMgr::sortParams((ParamSpecMgr *)qword_253DF2878);
}

_DWORD *SearchCrossLayerParamSet::SearchCrossLayerParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(_QWORD *)a1 = &off_24C217F40;
  DgnString::DgnString((DgnString *)(a1 + 10));
  DgnString::DgnString((DgnString *)(a1 + 16));
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
  return a1;
}

void sub_2097B9DF8(_Unwind_Exception *a1)
{
  DgnString *v1;
  _QWORD *v2;
  DgnString *v3;
  DgnString *v4;
  uint64_t v5;
  DgnString *v6;

  v6 = v4;
  DgnString::~DgnString(v6);
  DgnString::~DgnString(v3);
  *v2 = v5 + 16;
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t SearchCrossLayerParamSet::SearchCrossLayerParamSet(uint64_t a1, _BYTE *a2, char *a3, int a4, int a5, int a6)
{
  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)a1 = &off_24C217F40;
  DgnString::DgnString((DgnString *)(a1 + 40));
  DgnString::DgnString((DgnString *)(a1 + 64));
  DgnString::operator=((DgnString *)(a1 + 40), (DgnString *)(a2 + 40));
  *(_BYTE *)(a1 + 56) = a2[56];
  DgnString::operator=((DgnString *)(a1 + 64), (DgnString *)(a2 + 64));
  return a1;
}

void sub_2097B9EF0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  DgnString *v2;
  DgnString *v3;
  uint64_t v4;

  DgnString::~DgnString(v3);
  *v1 = v4 + 16;
  DgnString::~DgnString(v2);
  _Unwind_Resume(a1);
}

DgnString *SearchCrossLayerParamSet::setDefaults(SearchCrossLayerParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *Default_string;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  Default_string = (char *)ParamSpecMgr::ParamGetDefault_string((ParamSpecMgr *)qword_253DF2878, 1, 0, 0, a5, a6, a7, a8);
  DgnString::operator=((SearchCrossLayerParamSet *)((char *)this + 40), Default_string);
  *((_BYTE *)this + 56) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2878, 2, 0, 0, v10, v11, v12, v13);
  v18 = (char *)ParamSpecMgr::ParamGetDefault_string((ParamSpecMgr *)qword_253DF2878, 3, 0, 0, v14, v15, v16, v17);
  return DgnString::operator=((SearchCrossLayerParamSet *)((char *)this + 64), v18);
}

uint64_t SearchCrossLayerParamSet::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sizeObject(a1 + 8) + 16 * (a2 != 3);
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v5 = sizeObject(a1 + 40);
    v6 = sizeObject(a1 + 64);
    if (a2 == 3)
      v7 = v4;
    else
      v7 = v4 + 1;
    return v7 + v5 + v6;
  }
  return v4;
}

void SearchCrossLayerParamSet::setParamSetSearchCrossLayerThreshScoreIncrementMatrix(SearchCrossLayerParamSet *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 9))
    throwParamSetSetFailed("SearchCrossLayerThreshScoreIncrementMatrix", "string", a3, a4, a5, a6, a7, a8);
  else
    DgnString::operator=((SearchCrossLayerParamSet *)((char *)this + 40), a2);
}

void SearchCrossLayerParamSet::setParamSetSearchCrossLayerWordEndThreshScoreIncrementMatrix(SearchCrossLayerParamSet *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 9))
    throwParamSetSetFailed("SearchCrossLayerWordEndThreshScoreIncrementMatrix", "string", a3, a4, a5, a6, a7, a8);
  else
    DgnString::operator=((SearchCrossLayerParamSet *)((char *)this + 64), a2);
}

BOOL SearchCrossLayerParamSet::getBoolParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  const void *ParamByParamId;

  switch(a2)
  {
    case 3:
      v8 = 3;
      break;
    case 2:
      if ((_DWORD)a3 == 1)
      {
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2878, 2, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        if ((_DWORD)a3)
        {
          throwWrongQueryMode(a3, (uint64_t)"BOOL", a3, a4, a5, a6, a7, a8);
          return 0;
        }
        v9 = *(unsigned __int8 *)(a1 + 56);
      }
      return v9 != 0;
    case 1:
      v8 = 1;
      break;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
  }
  throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
  return 0;
}

uint64_t SearchCrossLayerParamSet::getIntParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 3:
      v8 = "string";
      v9 = 3;
      break;
    case 2:
      v8 = "BOOL";
      v9 = 2;
      break;
    case 1:
      v8 = "string";
      v9 = 1;
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      return 0;
  }
  throwWrongTypeForParamId(v9, v8, "int", a4, a5, a6, a7, a8);
  return 0;
}

double SearchCrossLayerParamSet::getDoubleParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 3:
      v8 = "string";
      v9 = 3;
      break;
    case 2:
      v8 = "BOOL";
      v9 = 2;
      break;
    case 1:
      v8 = "string";
      v9 = 1;
      break;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      return 0.0;
  }
  throwWrongTypeForParamId(v9, v8, "double", a4, a5, a6, a7, a8);
  return 0.0;
}

char *SearchCrossLayerParamSet::getStringParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  ParamSpecMgr *v11;
  int v12;
  const void *ParamByParamId;

  if (a2 != 3)
  {
    if (a2 == 2)
    {
      throwWrongTypeForParamId(2, "BOOL", "string", a4, a5, a6, a7, a8);
    }
    else
    {
      if (a2 == 1)
      {
        if ((_DWORD)a3 != 1)
        {
          if (!(_DWORD)a3)
          {
            v8 = *(_DWORD *)(a1 + 48);
            v9 = *(_QWORD *)(a1 + 40);
            goto LABEL_11;
          }
          goto LABEL_15;
        }
        v11 = (ParamSpecMgr *)qword_253DF2878;
        v12 = 1;
LABEL_19:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
      }
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
    }
    return 0;
  }
  if ((_DWORD)a3 == 1)
  {
    v11 = (ParamSpecMgr *)qword_253DF2878;
    v12 = 3;
    goto LABEL_19;
  }
  if ((_DWORD)a3)
  {
LABEL_15:
    throwWrongQueryMode(a3, (uint64_t)"string", a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v8 = *(_DWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 64);
LABEL_11:
  if (v8)
    return (char *)v9;
  else
    return &byte_209A88803;
}

uint64_t SearchCrossLayerParamSet::getEnumParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 3:
      v8 = "string";
      v9 = 3;
      break;
    case 2:
      v8 = "BOOL";
      v9 = 2;
      break;
    case 1:
      v8 = "string";
      v9 = 1;
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      return 0;
  }
  throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
  return 0;
}

void SearchCrossLayerParamSet::setBoolParameter(SearchCrossLayerParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;

  v8 = a2;
  if (a2 == 3)
  {
    throwWrongTypeForParamId(3, "string", "BOOL", a4, a5, a6, a7, a8);
    goto LABEL_8;
  }
  v9 = a3;
  if (a2 == 2)
    goto LABEL_5;
  if (a2 != 1)
  {
LABEL_8:
    throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
    return;
  }
  throwWrongTypeForParamId(1, "string", "BOOL", a4, a5, a6, a7, a8);
LABEL_5:
  if (*((_DWORD *)this + 9))
    throwParamSetSetFailed("SearchCrossLayerUseBestSilence", "BOOL", a3, a4, a5, a6, a7, a8);
  else
    *((_BYTE *)this + 56) = v9;
}

void SearchCrossLayerParamSet::setIntParameter(SearchCrossLayerParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 3:
      goto LABEL_6;
    case 2:
LABEL_5:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
LABEL_6:
      throwWrongTypeForParamId(v8, "string", "int", a4, a5, a6, a7, a8);
      break;
    case 1:
      throwWrongTypeForParamId(1, "string", "int", a4, a5, a6, a7, a8);
      goto LABEL_5;
  }
  throwWrongParamIdValue(v8, "int", a3, a4, a5, a6, a7, a8);
}

void SearchCrossLayerParamSet::setDoubleParameter(SearchCrossLayerParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;

  v9 = a2;
  switch(a2)
  {
    case 3:
      goto LABEL_6;
    case 2:
LABEL_5:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
LABEL_6:
      throwWrongTypeForParamId(v9, "string", "double", a5, a6, a7, a8, a9);
      break;
    case 1:
      throwWrongTypeForParamId(1, "string", "double", a5, a6, a7, a8, a9);
      goto LABEL_5;
  }
  throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
}

void SearchCrossLayerParamSet::setStringParameter(SearchCrossLayerParamSet *this, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 3:
      goto LABEL_6;
    case 2:
      throwWrongTypeForParamId(2, "BOOL", "string", a4, a5, a6, a7, a8);
LABEL_6:
      SearchCrossLayerParamSet::setParamSetSearchCrossLayerWordEndThreshScoreIncrementMatrix(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 1:
      SearchCrossLayerParamSet::setParamSetSearchCrossLayerThreshScoreIncrementMatrix(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
      break;
  }
}

void SearchCrossLayerParamSet::setEnumParameter(SearchCrossLayerParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 3:
      goto LABEL_6;
    case 2:
LABEL_5:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
LABEL_6:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      break;
    case 1:
      throwWrongTypeForParamId(1, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
  }
  throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
}

void SearchCrossLayerParamSet::~SearchCrossLayerParamSet(SearchCrossLayerParamSet *this)
{
  SearchCrossLayerParamSet::~SearchCrossLayerParamSet(this);
  JUMPOUT(0x20BD149A8);
}

{
  DgnString *v2;

  *(_QWORD *)this = &off_24C217F40;
  v2 = (SearchCrossLayerParamSet *)((char *)this + 40);
  DgnString::~DgnString((SearchCrossLayerParamSet *)((char *)this + 64));
  DgnString::~DgnString(v2);
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((SearchCrossLayerParamSet *)((char *)this + 8));
}

void CharInfo::CharInfo(CharInfo *this)
{
  *(_DWORD *)this = 0;
}

void CharInfo::loadCharInfoFromText(CharInfo *this, DFile *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  _QWORD v31[2];
  const char *v32;
  int v33;
  _QWORD v34[2];
  _BYTE v35[232];

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v35);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v35, (uint64_t)a2, 0x5Au, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v35, "CharInfo");
  v34[0] = 0;
  v34[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v35, sTCH_Versions, (uint64_t)v34, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v35, (unsigned int *)v34, v9, v10, v11, v12, v13, v14);
  DgnString::DgnString((DgnString *)&v32);
  DgnTextFile::getHeaderField((DgnTextFile *)v35, "CharType", (DgnString *)&v32, 1);
  if (v33)
    v15 = v32;
  else
    v15 = (const char *)&unk_209A59530;
  if (!strcmp(v15, "Char"))
  {
    v23 = 0;
LABEL_9:
    *(_DWORD *)this = v23;
    goto LABEL_10;
  }
  if (!strcmp(v15, "EncodedWideChar"))
  {
    v23 = 1;
    goto LABEL_9;
  }
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 115, (uint64_t)"word/charinfo", 6, (uint64_t)"%.500s", v21, v22, (char)v15);
LABEL_10:
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v35, v16, v17, v18, v19, v20, v21, v22);
  v31[0] = 0;
  v31[1] = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v35, (uint64_t)v31);
  v30[0] = 0;
  v30[1] = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v35, (unint64_t)v30);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v35, 0, v24, v25, v26, v27, v28, v29);
  DgnTextFileParser::verifyNoBodyLines((DgnTextFileParser *)v35);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v30);
  DgnArray<DgnString>::releaseAll((uint64_t)v31);
  DgnString::~DgnString((DgnString *)&v32);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v34);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v35);
}

void sub_2097BA8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va3);
  _Unwind_Resume(a1);
}

uint64_t CharInfo::loadCharInfo(CharInfo *this, char **a2, DFileChecksums *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  DgnStream *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t CurrentSubDirComponents;
  unsigned int v18;
  uint64_t v19;

  if (DFile::subFileExists((uint64_t)a2, 0x5Au))
  {
    if ((a4 & 1) == 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 140, (uint64_t)"word/charinfo", 8, (uint64_t)"%s", v8, v9, (char)&unk_209A59530);
    CharInfo::loadCharInfoFromText(this, (DFile *)a2);
  }
  else
  {
    result = DFile::subFileExists((uint64_t)a2, 0xAu);
    if (!(_DWORD)result)
      return result;
    if (a4)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 148, (uint64_t)"word/charinfo", 9, (uint64_t)"%s", v11, v12, (char)&errStr_word_charinfo_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
    v19 = 0;
    v13 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0xAu, 1, "MRCHAR!?", (_DWORD *)&v19 + 1, &v19);
    if (*((_DWORD *)a2 + 6))
      v14 = a2[2];
    else
      v14 = (char *)&unk_209A59530;
    MrecHeaderCheckVersions(v14, "MRCHAR!?", HIDWORD(v19), v19, 0x12u, 3u);
    MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRCHAR!?", SHIDWORD(v19), v19, 18, 3, v15, v16);
    v18 = 0;
    readObject((uint64_t)v13, this, &v18);
    readObjectChecksumAndVerify(v13, v18);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents((DFile *)a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0xAu, v18);
    if (v13)
    {
      (**(void (***)(DgnStream *))v13)(v13);
      MemChunkFree(v13, 0);
    }
  }
  return 1;
}

void CharInfo::saveCharInfoToText(CharInfo *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD v12[2];
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[280];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v16);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v16, (uint64_t)a2, 0x5Au, a3);
  v14 = 0;
  v15 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v16, sTCH_Versions, (uint64_t)&v14, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v16, "CharInfo", (_QWORD *)(v14 + 8 * (v15 - 1)));
  v13[0] = 0;
  v13[1] = 0;
  v12[0] = 0;
  v12[1] = 0;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v16, (uint64_t)v13, (uint64_t)v12);
  if (*(_DWORD *)this)
    v11 = "EncodedWideChar";
  else
    v11 = "Char";
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v16, "CharType", v11);
  DgnArray<DgnString>::releaseAll((uint64_t)v12);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v13);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v14);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v16);
}

void sub_2097BABCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va);
  _Unwind_Resume(a1);
}

void CharInfo::saveCharInfo(CharInfo *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  DgnStream *v8;
  uint64_t CurrentSubDirComponents;
  int v10;

  if (a4)
  {
    CharInfo::saveCharInfoToText(this, a2, a5);
  }
  else
  {
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0xAu, a5, "MRCHAR!?", 18, 3);
    v10 = 0;
    writeObject((uint64_t)v8, (int *)this, &v10);
    writeObjectChecksum((uint64_t)v8, &v10);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0xAu, v10);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
}

void CharInfo::printSize(CharInfo *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  int v31;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 227, (DgnString *)&v30);
  if (v31)
    v15 = v30;
  else
    v15 = &unk_209A59530;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A59530, a3, &unk_209A59530, v15);
  DgnString::~DgnString((DgnString *)&v30);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A59530);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 229, (DgnString *)&v30);
  if (v31)
    v24 = v30;
  else
    v24 = &unk_209A59530;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v20, v21, v22, v23, (a3 + 1), &unk_209A59530, (34 - a3), (34 - a3), v24, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v30);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 231, (DgnString *)&v30);
  if (v31)
    v29 = v30;
  else
    v29 = &unk_209A59530;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, a3, &unk_209A59530, (35 - a3), (35 - a3), v29, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v30);
}

void sub_2097BAE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

unint64_t CharInfo::decodeCharString(CharInfo *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const unsigned __int8 *v10;
  unint64_t result;
  int v12;
  uint64_t v13;
  int v14;

  v10 = 0;
  v14 = 0;
  do
  {
    result = CharInfo::decodeOneChar(a1, v10, &v14, a4, a5, a6, a7, a8);
    v12 = result;
    v13 = *(unsigned int *)(a2 + 8);
    if (v13 == *(_DWORD *)(a2 + 12))
    {
      result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
      v13 = *(unsigned int *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v13) = v12;
    ++*(_DWORD *)(a2 + 8);
    v10 = (const unsigned __int8 *)(v14 + (_DWORD)v10);
  }
  while (v12);
  return result;
}

uint64_t CharInfo::decodeOneChar(CharInfo *this, const unsigned __int8 *a2, _DWORD *a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  char v24;
  int v25;
  int v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  char v34;

  v9 = a2;
  v11 = *((char *)this + a2);
  result = *((unsigned __int8 *)this + a2);
  if (v11 < 0)
  {
    v14 = a2;
    if ((result & 0xE0) == 0xC0)
    {
      if ((result & 0x1E) == 0)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 239, (uint64_t)"word/charinfo", 10, (uint64_t)"0x%02x %u %u %.500s", a7, a8, result);
        LOBYTE(v11) = *((_BYTE *)this + v9);
      }
      v15 = v9 + 1;
      v16 = (v11 & 0x1F) << 6;
      v17 = *((_BYTE *)this + v15);
      if ((v17 & 0xC0) != 0x80)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 239, (uint64_t)"word/charinfo", 10, (uint64_t)"0x%02x %u %u %.500s", a7, a8, v17);
        v17 = *((_BYTE *)this + v15);
      }
      v13 = v9 + 2;
LABEL_38:
      result = v16 | v17 & 0x3Fu;
      goto LABEL_39;
    }
    if ((result & 0xF0) == 0xE0)
    {
      if ((result & 0xF) == 0xD)
      {
        v19 = ((_DWORD)a2 + 1);
        LOBYTE(v20) = *((_BYTE *)this + v19);
        v26 = v20 & 0xE0;
        v18 = 53248;
      }
      else
      {
        if ((result & 0xF) == 0)
        {
          v18 = 0;
          v19 = ((_DWORD)a2 + 1);
          v20 = *((unsigned __int8 *)this + v19);
          v21 = (_DWORD)a2 + 1;
          v22 = (_DWORD)a2 + 1;
          if ((v20 & 0xE0) == 0xA0)
            goto LABEL_26;
          goto LABEL_25;
        }
        v19 = ((_DWORD)a2 + 1);
        v18 = (result & 0xF) << 12;
        LOBYTE(v20) = *((_BYTE *)this + v19);
        v26 = v20 & 0xC0;
      }
      v21 = v19;
      v22 = v19;
      if (v26 == 128)
      {
LABEL_26:
        v27 = (v22 + 1);
        v16 = v18 | ((*((_BYTE *)this + v19) & 0x3F) << 6);
        v17 = *((_BYTE *)this + v27);
        if ((v17 & 0xC0) != 0x80)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 239, (uint64_t)"word/charinfo", 10, (uint64_t)"0x%02x %u %u %.500s", a7, a8, v17);
          v17 = *((_BYTE *)this + v27);
        }
        v13 = v22 + 2;
        goto LABEL_38;
      }
LABEL_25:
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 239, (uint64_t)"word/charinfo", 10, (uint64_t)"0x%02x %u %u %.500s", a7, a8, v20);
      v22 = v21;
      goto LABEL_26;
    }
    if ((result & 0xF8) != 0xF0)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 239, (uint64_t)"word/charinfo", 10, (uint64_t)"0x%02x %u %u %.500s", a7, a8, result);
      result = 0;
      v13 = v9;
      goto LABEL_39;
    }
    v23 = result & 7;
    if (v23 == 4)
    {
      v14 = ((_DWORD)a2 + 1);
      v28 = *((_BYTE *)this + v14);
      if ((v28 & 0xF0) != 0x80)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 239, (uint64_t)"word/charinfo", 10, (uint64_t)"0x%02x %u %u %.500s", a7, a8, v28);
      v25 = 0x100000;
    }
    else if ((result & 7) != 0)
    {
      if (v23 > 3)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 239, (uint64_t)"word/charinfo", 10, (uint64_t)"0x%02x %u %u %.500s", a7, a8, result);
        v25 = 0;
        v29 = v9;
        goto LABEL_33;
      }
      v14 = ((_DWORD)a2 + 1);
      v25 = v23 << 18;
      v34 = *((_BYTE *)this + v14);
      if ((v34 & 0xC0) != 0x80)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 239, (uint64_t)"word/charinfo", 10, (uint64_t)"0x%02x %u %u %.500s", a7, a8, v34);
    }
    else
    {
      v14 = ((_DWORD)a2 + 1);
      v24 = *((_BYTE *)this + v14);
      if ((v24 & 0xC0) != 0x80 || (*((_BYTE *)this + v14) & 0x30) == 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 239, (uint64_t)"word/charinfo", 10, (uint64_t)"0x%02x %u %u %.500s", a7, a8, v24);
      v25 = 0;
    }
    v29 = v14;
LABEL_33:
    v30 = v29 + 1;
    v31 = v25 | ((*((_BYTE *)this + v14) & 0x3F) << 12);
    v32 = *((_BYTE *)this + v30);
    if ((v32 & 0xC0) != 0x80)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 239, (uint64_t)"word/charinfo", 10, (uint64_t)"0x%02x %u %u %.500s", a7, a8, v32);
      v32 = *((_BYTE *)this + v30);
    }
    v33 = v29 + 2;
    v16 = v31 | ((v32 & 0x3F) << 6);
    v17 = *((_BYTE *)this + v33);
    if ((v17 & 0xC0) != 0x80)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/charinfo.cpp", 239, (uint64_t)"word/charinfo", 10, (uint64_t)"0x%02x %u %u %.500s", a7, a8, v17);
      v17 = *((_BYTE *)this + v33);
    }
    v13 = v29 + 3;
    goto LABEL_38;
  }
  v13 = (_DWORD)a2 + 1;
LABEL_39:
  *a3 = v13 - v9;
  return result;
}

uint64_t CharInfo::getLogicalCharLengthsForEncodedCharString(CharInfo *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const unsigned __int8 *v16;
  char v17;
  uint64_t v18;
  int v19;

  v19 = 0;
  result = CharInfo::decodeOneChar(a1, 0, &v19, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    LODWORD(v16) = 0;
    do
    {
      v17 = v19;
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        DgnPrimArray<char>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_BYTE *)(*(_QWORD *)a2 + v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v16 = (const unsigned __int8 *)(v19 + (_DWORD)v16);
      result = CharInfo::decodeOneChar(a1, v16, &v19, v11, v12, v13, v14, v15);
    }
    while ((_DWORD)result);
  }
  return result;
}

uint64_t CharInfo::validateEncodedCharString(CharInfo *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const unsigned __int8 *v9;
  uint64_t result;
  int v11;

  v9 = 0;
  v11 = 0;
  do
  {
    result = CharInfo::decodeOneChar(this, v9, &v11, a4, a5, a6, a7, a8);
    v9 = (const unsigned __int8 *)(v11 + (_DWORD)v9);
  }
  while ((_DWORD)result);
  return result;
}

void PrefilterResult::PrefilterResult(PrefilterResult *this, __int16 a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_BYTE *)this = 0;
  *((_WORD *)this + 1) = a2;
  *((_QWORD *)this + 3) = 0;
}

void PrefilterResult::~PrefilterResult(PrefilterResult *this)
{
  _QWORD *v2;

  if (*(_BYTE *)this)
  {
    PrefilterResult::adjustReferenceCounts(this, 0);
    *(_BYTE *)this = 0;
  }
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    (*(void (**)(_QWORD))*v2)(*((_QWORD *)this + 3));
    MemChunkFree(v2, 0);
  }
  *((_QWORD *)this + 3) = 0;
  DgnIOwnArray<DgnArray<Germ> *>::releaseAll((uint64_t)this + 8);
}

uint64_t PrefilterResult::adjustReferenceCounts(PrefilterResult *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  PrefilterResult::getReferredWordIds((uint64_t)this, (uint64_t)&v11);
  v4 = *((unsigned __int16 *)this + 1);
  v5 = **(_QWORD **)VocMgr::smpVocMgr;
  v6 = *(_QWORD *)(v5 + 8 * v4);
  if (a2)
    Voc::addVocReferringPrefilterResultRef(*(_QWORD *)(v5 + 8 * v4));
  else
    Voc::removeVocReferringPrefilterResultRef(*(_QWORD *)(v5 + 8 * v4));
  if ((_DWORD)v12)
  {
    v7 = 0;
    do
    {
      v8 = *(_DWORD *)(v11 + 4 * v7);
      v9 = *(_QWORD *)(v6 + 48);
      if (a2)
        WordList::addIncludingPrefilterResultRef(v9, v8);
      else
        WordList::removeIncludingPrefilterResultRef(v9, v8);
      ++v7;
    }
    while (v7 < v12);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v11);
}

void sub_2097BB5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t PrefilterResult::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sizeObject<DgnArray<Germ> *>(a1 + 8, a2);
  v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 8;
  v6 = v4 + ((a2 != 3) | (2 * (a2 != 3)));
  if (a2 == 3)
    v7 = 0;
  else
    v7 = v5;
  if (a2 != 2)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8)
      return v7 + v6;
    v7 += Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(v8, a2);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = v7 + v6;
  if (v9)
    v10 += Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(v9, a2);
  return v10;
}

uint64_t sizeObject<DgnArray<Germ> *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject<Germ>(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t PrefilterResult::setComplete(PrefilterResult *this)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    (*(void (**)(_QWORD))*v2)(*((_QWORD *)this + 3));
    MemChunkFree(v2, 0);
  }
  *((_QWORD *)this + 3) = 0;
  result = PrefilterResult::adjustReferenceCounts(this, 1);
  *(_BYTE *)this = 1;
  return result;
}

unint64_t PrefilterResult::cacheCopy(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t result;
  unsigned int v6;

  v4 = MemChunkAlloc(0x10uLL, 0);
  *v4 = 0;
  v4[1] = 0;
  result = DgnArray<Germ>::copyArraySlice((unint64_t)v4, (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8));
  v6 = *(_DWORD *)(a1 + 16);
  if (v6 == *(_DWORD *)(a1 + 20))
  {
    result = DgnPrimArray<unsigned long long>::reallocElts(a1 + 8, 1, 1);
    v6 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6) = v4;
  *(_DWORD *)(a1 + 16) = v6 + 1;
  return result;
}

uint64_t *PrefilterResult::clone(PrefilterResult *this)
{
  uint64_t *v2;
  __int16 v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;

  v2 = MemChunkAlloc(0x20uLL, 0);
  v3 = *((_WORD *)this + 1);
  v2[1] = 0;
  *(_BYTE *)v2 = 0;
  *((_WORD *)v2 + 1) = v3;
  v2[2] = 0;
  v2[3] = 0;
  if (*((_DWORD *)this + 4))
  {
    v4 = 0;
    do
    {
      v5 = MemChunkAlloc(0x10uLL, 0);
      v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v4);
      *v5 = 0;
      v5[1] = 0;
      DgnArray<Germ>::copyArraySlice((unint64_t)v5, (_QWORD *)v6, 0, *(_DWORD *)(v6 + 8));
      v7 = *((_DWORD *)v2 + 4);
      if (v7 == *((_DWORD *)v2 + 5))
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(v2 + 1), 1, 1);
        v7 = *((_DWORD *)v2 + 4);
      }
      *(_QWORD *)(v2[1] + 8 * v7) = v5;
      *((_DWORD *)v2 + 4) = v7 + 1;
      ++v4;
    }
    while (v4 < *((unsigned int *)this + 4));
  }
  PrefilterResult::adjustReferenceCounts((PrefilterResult *)v2, 1);
  *(_BYTE *)v2 = 1;
  return v2;
}

void PrefilterResult::copyIntoQueue(PrefilterResult *this, ReturnListQueue *a2)
{
  unint64_t v4;
  unint64_t v5;
  PrefilterResult *v6;

  if (*((_DWORD *)this + 4))
  {
    v4 = 0;
    do
    {
      v5 = v4 + 1;
      ReturnListQueue::enqueueCopy((uint64_t)a2, v4 + 1, *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v4));
      v4 = v5;
    }
    while (v5 < *((unsigned int *)this + 4));
  }
  if (*(_BYTE *)this)
  {
    v6 = (PrefilterResult *)*((_QWORD *)a2 + 6);
    if (v6)
      PrefilterResult::setComplete(v6);
    *(_BYTE *)a2 = 1;
  }
}

void ReturnListQueue::enqueueCopy(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v6;

  v6 = MemChunkAlloc(0x10uLL, 0);
  *v6 = 0;
  v6[1] = 0;
  DgnArray<Germ>::copyArraySlice((unint64_t)v6, (_QWORD *)a3, 0, *(_DWORD *)(a3 + 8));
  ReturnListQueue::enqueue(a1, a2, (uint64_t)v6);
}

PrefilterResult *ReturnListQueue::setComplete(ReturnListQueue *this)
{
  PrefilterResult *result;

  result = (PrefilterResult *)*((_QWORD *)this + 6);
  if (result)
    result = (PrefilterResult *)PrefilterResult::setComplete(result);
  *(_BYTE *)this = 1;
  return result;
}

uint64_t PrefilterResult::initEmpty(PrefilterResult *this, int a2)
{
  int v3;
  uint64_t *v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  if (a2)
  {
    v3 = a2;
    do
    {
      PrefilterResult::cacheCopy((uint64_t)this, (uint64_t)v6);
      --v3;
    }
    while (v3);
  }
  if (!*((_QWORD *)this + 3))
  {
    v4 = MemChunkAlloc(0x70uLL, 0);
    *((_QWORD *)this + 3) = Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::Hash((uint64_t)v4, 0, 16);
  }
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)v6);
}

void sub_2097BBA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t PrefilterResult::addEntry(PrefilterResult *this, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;

  v8 = *((_QWORD *)this + 3);
  v19 = a3;
  v20 = a2;
  result = (uint64_t)Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::findBucket(v8, &v19);
  if (*(_QWORD *)result)
  {
    v10 = *(unsigned int *)(*(_QWORD *)result + 20);
    v11 = **(_QWORD **)(*((_QWORD *)this + 1) + 8 * a2);
    v12 = *(__int16 *)(v11 + 8 * v10 + 4);
    if (v12 > a4 && a4 != 20000 && v12 != 20000)
      *(_QWORD *)(v11 + 8 * v10) = a3 | ((unint64_t)(unsigned __int16)a4 << 32);
  }
  else
  {
    v15 = *((_QWORD *)this + 3);
    v19 = a3;
    v20 = a2;
    v18 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8 * a2) + 8);
    result = Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::add(v15, (int *)&v19, &v18);
    v16 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * a2);
    v17 = *(_DWORD *)(v16 + 8);
    if (v17 == *(_DWORD *)(v16 + 12))
    {
      result = DgnPrimArray<unsigned long long>::reallocElts(v16, 1, 1);
      v17 = *(_DWORD *)(v16 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v16 + 8 * v17) = a3 | ((unint64_t)(unsigned __int16)a4 << 32);
    ++*(_DWORD *)(v16 + 8);
  }
  return result;
}

uint64_t Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::add(uint64_t result, int *a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v5 = result;
  v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1)
    result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  v7 = *a2;
  v8 = a2[1];
  HIDWORD(v9) = *a2;
  LODWORD(v9) = *a2;
  v10 = (v9 >> 19) + v8;
  v11 = *(_DWORD *)(v5 + 16);
  if (v11)
    v12 = (-1640531527 * v10) >> -(char)v11;
  else
    v12 = 0;
  v13 = *(_QWORD *)(v5 + 80);
  v14 = *(_QWORD *)(v5 + 32);
  if (!v14)
  {
    result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    v14 = *(_QWORD *)(v5 + 32);
    v7 = *a2;
    v8 = a2[1];
  }
  v15 = (_QWORD *)(v13 + 8 * v12);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)v14;
  *(_DWORD *)(v14 + 8) = 0;
  *(_DWORD *)(v14 + 12) = v7;
  *(_DWORD *)(v14 + 16) = v8;
  *(_DWORD *)(v14 + 20) = *a3;
  *(_DWORD *)(v14 + 8) = v10;
  ++*(_DWORD *)(v5 + 8);
  if (*(_BYTE *)(v5 + 20))
  {
    *(_QWORD *)v14 = *v15;
  }
  else
  {
    *(_QWORD *)v14 = 0;
    v16 = (_QWORD *)*v15;
    if (*v15)
    {
      do
      {
        v15 = v16;
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
  }
  *v15 = v14;
  return result;
}

uint64_t PrefilterResult::getGermsForFrame(PrefilterResult *this, unsigned int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8 * a2);
}

uint64_t writeObject<short>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v7;

  v7 = *(_DWORD *)(a2 + 8);
  writeObject(a1, &v7, a3);
  return writeObjectArray(a1, *(__int16 **)a2, *(_DWORD *)(a2 + 8), a3);
}

void readObject<DgnPrimArray<unsigned int>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;

  v16 = 0;
  readObject((uint64_t)a1, &v16, a3);
  v6 = v16;
  v7 = *(_DWORD *)(a2 + 12);
  if (v16 > v7)
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v16 - v7, 0);
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v11 = v6 - v8;
      v12 = 16 * v8;
      do
      {
        v13 = (_QWORD *)(*(_QWORD *)a2 + v12);
        *v13 = 0;
        v13[1] = 0;
        v12 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    v9 = (int)v8;
    v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a2 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if ((_DWORD)v6)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      readObject<unsigned int>(a1, *(_QWORD *)a2 + v14, a3);
      ++v15;
      v14 += 16;
    }
    while (v15 < *(unsigned int *)(a2 + 8));
  }
}

void readObject<DgnPrimArray<short>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;

  v16 = 0;
  readObject((uint64_t)a1, &v16, a3);
  v6 = v16;
  v7 = *(_DWORD *)(a2 + 12);
  if (v16 > v7)
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v16 - v7, 0);
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v11 = v6 - v8;
      v12 = 16 * v8;
      do
      {
        v13 = (_QWORD *)(*(_QWORD *)a2 + v12);
        *v13 = 0;
        v13[1] = 0;
        v12 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    v9 = (int)v8;
    v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a2 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if ((_DWORD)v6)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      readObject<short>(a1, *(_QWORD *)a2 + v14, a3);
      ++v15;
      v14 += 16;
    }
    while (v15 < *(unsigned int *)(a2 + 8));
  }
}

void readObject<short>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v8 = 0;
  readObject((uint64_t)a1, &v8, a3);
  v6 = v8;
  v7 = *(_DWORD *)(a2 + 12);
  if (v8 > v7)
    DgnPrimArray<short>::reallocElts(a2, v8 - v7, 0);
  *(_DWORD *)(a2 + 8) = v6;
  readObjectArray(a1, *(__int16 **)a2, v6, a3);
}

uint64_t writeObject<PrefilterResultFrame>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;

  v10 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v10, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)a2 + v7;
      writeObject<unsigned int>(a1, v9, a3);
      result = writeObject<short>(a1, v9 + 16, a3);
      ++v8;
      v7 += 32;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

unint64_t PrefilterResult::fillPrefilterResultData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t result;
  unint64_t v18;
  unint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;

  v10 = (uint64_t *)(a2 + 8);
  v11 = *(unsigned int *)(a1 + 16);
  v12 = *(_DWORD *)(a2 + 20);
  if (v11 > v12)
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v10, v11 - v12, 0);
  v13 = *(unsigned int *)(a2 + 16);
  if (v13 <= v11)
  {
    if (v13 < v11)
    {
      v14 = v11 - v13;
      v15 = 32 * v13;
      do
      {
        v16 = (_OWORD *)(*v10 + v15);
        *v16 = 0uLL;
        v16[1] = 0uLL;
        v15 += 32;
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    DgnArray<PrefilterResultFrame>::destructAt((uint64_t)v10, v11, v13 - v11);
  }
  *(_DWORD *)(a2 + 16) = v11;
  result = VocMgr::getVocOrThrow((VocMgr *)VocMgr::smpVocMgr, *(unsigned __int16 *)(a1 + 2), a3, a4, a5, a6, a7, a8);
  *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)(result + 48) + 376);
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    for (i = 0; i < v18; ++i)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * i);
      v21 = *(unsigned int *)(v20 + 8);
      if ((_DWORD)v21)
      {
        v22 = 0;
        v23 = 8 * v21;
        do
        {
          v24 = (int *)(*(_QWORD *)v20 + v22);
          v25 = *v24;
          v26 = *((_WORD *)v24 + 2);
          v27 = *v10;
          v28 = *v10 + 32 * i;
          v29 = *(unsigned int *)(v28 + 8);
          if (v29 == *(_DWORD *)(v28 + 12))
          {
            result = DgnPrimArray<unsigned int>::reallocElts(*v10 + 32 * i, 1, 1);
            v29 = *(unsigned int *)(v28 + 8);
            v27 = *v10;
          }
          *(_DWORD *)(*(_QWORD *)v28 + 4 * v29) = v25 & 0xFFFFFF;
          ++*(_DWORD *)(v28 + 8);
          v30 = v27 + 32 * i;
          v33 = *(_DWORD *)(v30 + 24);
          v32 = (unsigned int *)(v30 + 24);
          v31 = v33;
          if (v33 == v32[1])
          {
            result = DgnPrimArray<short>::reallocElts((uint64_t)(v32 - 2), 1, 1);
            v31 = *v32;
          }
          v22 += 8;
          *(_WORD *)(*((_QWORD *)v32 - 1) + 2 * v31) = v26;
          *v32 = v31 + 1;
        }
        while (v23 != v22);
        v18 = *(unsigned int *)(a1 + 16);
      }
    }
  }
  return result;
}

void PrefilterResult::savePrefilterResult(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v6;
  DgnStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD v15[2];
  int v16;
  _BYTE v17[16];

  DFileOwner::DFileOwner((DFileOwner *)v17);
  *a3 = 1;
  v6 = DFile::openDFile(a2, (const FileSpec *)1, 11, (uint64_t)v17);
  *a3 = 2;
  v7 = OpenAndWriteMrecHeader((uint64_t)v6, 0x43u, 1, "MRPRB!? ", 24, 6);
  v16 = 0;
  v15[0] = 0;
  v15[1] = 0;
  PrefilterResult::fillPrefilterResultData(a1, (uint64_t)&v14, v8, v9, v10, v11, v12, v13);
  writeObject((uint64_t)v7, &v14, &v16);
  writeObjectChecksum((uint64_t)v7, &v16);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v17, 0);
  *a3 = 0;
  DgnArray<PrefilterResultFrame>::releaseAll((uint64_t)v15);
  DFileOwner::~DFileOwner((DFileOwner *)v17);
}

void sub_2097BC314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DFileOwner::~DFileOwner((DFileOwner *)va);
  _Unwind_Resume(a1);
}

uint64_t PrefilterResult::getReferredWordIds(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t i;
  uint64_t v6;
  unint64_t v7;
  unint64_t j;
  unint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v23;
  _BYTE v24[8];
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t **v28;

  HashKEV<unsigned int,unsigned int,WordIdScope>::HashKEV((uint64_t)v24, 0, 16);
  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * i);
      v7 = *(unsigned int *)(v6 + 8);
      if ((_DWORD)v7)
      {
        for (j = 0; j < v7; ++j)
        {
          v9 = *(unsigned int *)(*(_QWORD *)v6 + 8 * j);
          v23 = v9 & 0xFFFFFF;
          v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v9 >> 22) & 0x3F8))
                                                  + 48)
                                      + 256)
                          + 4 * (v9 & 0xFFFFFF));
          v23 = v10;
          if (v27)
            v11 = (-1640531527 * v10) >> -(char)v27;
          else
            v11 = 0;
          v12 = v28[v11];
          if (v12)
          {
            while (*((_DWORD *)v12 + 2) != v10 || *((_DWORD *)v12 + 3) != v10)
            {
              v12 = (uint64_t *)*v12;
              if (!v12)
                goto LABEL_12;
            }
          }
          else
          {
LABEL_12:
            HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v24, &v23);
            v7 = *(unsigned int *)(v6 + 8);
          }
        }
        v4 = *(unsigned int *)(a1 + 16);
      }
    }
  }
  v13 = *(_DWORD *)(a2 + 12);
  if (v25 > v13)
    DgnPrimArray<unsigned int>::reallocElts(a2, v25 - v13, 0);
  if (v26)
  {
    v14 = *v28;
    if (!*v28)
    {
      v15 = 0;
      do
      {
        if (v26 - 1 == v15)
          return HashKEV<unsigned int,unsigned int,WordIdScope>::~HashKEV((uint64_t)v24);
        v14 = v28[++v15];
      }
      while (!v14);
      goto LABEL_26;
    }
  }
  else
  {
    v14 = 0;
  }
  LODWORD(v15) = 0;
LABEL_26:
  if (v15 >= v26)
    return HashKEV<unsigned int,unsigned int,WordIdScope>::~HashKEV((uint64_t)v24);
  v16 = *(_DWORD *)(a2 + 8);
  while (1)
  {
    v17 = *((_DWORD *)v14 + 3);
    if (v16 == *(_DWORD *)(a2 + 12))
    {
      DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
      v16 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v16) = v17;
    v16 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v16;
    v18 = (uint64_t *)*v14;
    if (*v14)
      goto LABEL_38;
    v15 = (v15 + 1);
    if (v15 >= v26)
    {
      v18 = v14;
      goto LABEL_38;
    }
    v18 = v28[v15];
    if (!v18)
      break;
LABEL_38:
    v14 = v18;
    if (v15 >= v26)
      return HashKEV<unsigned int,unsigned int,WordIdScope>::~HashKEV((uint64_t)v24);
  }
  v19 = (uint64_t *)&v28[v15 + 1];
  v20 = ~v15 + v26;
  while (v20)
  {
    v21 = (uint64_t *)*v19++;
    v18 = v21;
    LODWORD(v15) = v15 + 1;
    --v20;
    if (v21)
      goto LABEL_38;
  }
  return HashKEV<unsigned int,unsigned int,WordIdScope>::~HashKEV((uint64_t)v24);
}

void sub_2097BC570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HashKEV<unsigned int,unsigned int,WordIdScope>::~HashKEV((uint64_t)va);
  _Unwind_Resume(a1);
}

void ReturnListQueue::ReturnListQueue(ReturnListQueue *this, PrefilterResult *a2, __int16 a3)
{
  *(_BYTE *)this = 0;
  *(_QWORD *)((char *)this + 4) = 4294967280;
  DgnPrimQueue<DgnArray<Germ> *,DgnIOwnArray<DgnArray<Germ> *>>::DgnPrimQueue((uint64_t)this + 16);
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_WORD *)this + 29) = a3;
}

uint64_t ReturnListQueue::ReturnListQueue(uint64_t a1, uint64_t a2, int a3, __int16 a4)
{
  uint64_t v8;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 4) = 4294967280;
  DgnPrimQueue<DgnArray<Germ> *,DgnIOwnArray<DgnArray<Germ> *>>::DgnPrimQueue(a1 + 16);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  v8 = a1 + 56;
  *(_WORD *)(a1 + 58) = a4;
  *(_QWORD *)(a1 + 80) = 0;
  if (!a3)
    v8 = 0;
  if (a2)
    v8 = a2;
  *(_QWORD *)(a1 + 48) = v8;
  return a1;
}

void ReturnListQueue::~ReturnListQueue(ReturnListQueue *this)
{
  PrefilterResult::~PrefilterResult((ReturnListQueue *)((char *)this + 56));
  DgnIOwnArray<DgnArray<Germ> *>::releaseAll((uint64_t)this + 16);
}

uint64_t ReturnListQueue::getNextFrameTime(ReturnListQueue *this)
{
  int v1;

  v1 = *((_DWORD *)this + 2);
  if (v1)
    return (*((_DWORD *)this + 10) + v1);
  else
    return 1;
}

void ReturnListQueue::enqueue(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;

  if (!*(_DWORD *)(a1 + 8))
    *(_DWORD *)(a1 + 8) = a2;
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    PrefilterResult::cacheCopy(v5, a3);
  DgnPrimQueue<DgnArray<Germ> *,DgnIOwnArray<DgnArray<Germ> *>>::enqueue(a1 + 16, a3);
}

void DgnPrimQueue<DgnArray<Germ> *,DgnIOwnArray<DgnArray<Germ> *>>::enqueue(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v4 = *(_DWORD *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 8);
  if (v4 == v5)
  {
    v6 = *(_DWORD *)(a1 + 12);
    if (v4 == v6)
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1, 1, 1);
      v4 = *(_DWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 12);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = 0;
    v7 = v4 + 1;
    *(_DWORD *)(a1 + 8) = v7;
    if (v7 <= v6)
    {
      if (v7 < v6)
      {
        do
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
        while (v6 != v7);
      }
    }
    else
    {
      DgnIOwnArray<DgnArray<Germ> *>::destructAt(a1, v6, v7 - v6);
    }
    *(_DWORD *)(a1 + 8) = v6;
    v8 = *(_DWORD *)(a1 + 24);
    v9 = v6 - v8;
    if (v8)
    {
      v10 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v10)
      {
        memmove((void *)(*(_QWORD *)a1 + 8 * v10 + 8 * v9), (const void *)(*(_QWORD *)a1 + 8 * v10), 8 * (v8 - v10));
        v8 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 16) += v9;
      }
      else
      {
        *(_DWORD *)(a1 + 20) = v8;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 16) = 0;
    }
    bzero((void *)(*(_QWORD *)a1 + 8 * v8), 8 * v9);
    v5 = *(_DWORD *)(a1 + 8);
    v4 = *(_DWORD *)(a1 + 24);
  }
  v11 = *(unsigned int *)(a1 + 20);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a2;
  if ((_DWORD)v11 + 1 == v5)
    v12 = 0;
  else
    v12 = v11 + 1;
  *(_DWORD *)(a1 + 20) = v12;
  *(_DWORD *)(a1 + 24) = v4 + 1;
}

uint64_t ReturnListQueue::dequeue(ReturnListQueue *this, int *a2)
{
  if (!*((_DWORD *)this + 10))
    return 0;
  if (a2)
    *a2 = *((_DWORD *)this + 2);
  ++*((_DWORD *)this + 2);
  return DgnPrimQueue<DgnArray<Germ> *,DgnIOwnArray<DgnArray<Germ> *>>::dequeue((uint64_t)this + 16);
}

uint64_t DgnPrimQueue<DgnArray<Germ> *,DgnIOwnArray<DgnArray<Germ> *>>::dequeue(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;

  v1 = *(unsigned int *)(a1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v1);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v1) = 0;
  v3 = v1 + 1;
  *(_DWORD *)(a1 + 16) = v3;
  v4 = *(_DWORD *)(a1 + 24) - 1;
  *(_DWORD *)(a1 + 24) = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = v3 >= v5;
    v7 = v3 - v5;
    if (v6)
      *(_DWORD *)(a1 + 16) = v7;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return v2;
}

void ReturnListQueue::copyIntoQueue(ReturnListQueue *this, ReturnListQueue *a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  _BOOL4 v7;
  unsigned int v8;
  PrefilterResult *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v4 = *((unsigned int *)this + 8);
  v5 = *((_DWORD *)this + 10);
  v6 = *((unsigned int *)this + 6);
  v7 = v5 != 0;
  v8 = 0;
  if (v4 < v6 && v5 != 0)
  {
    while (1)
    {
      v12 = *((_DWORD *)this + 1);
      v13 = *((_DWORD *)a2 + 2);
      if (v13)
        break;
      if (v12 == 1)
        goto LABEL_18;
LABEL_19:
      ReturnListQueue::enqueueCopy((uint64_t)a2, v8 + *((_DWORD *)this + 2), *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v4));
      ++v8;
      ++v4;
      v7 = v8 < v5;
      if (v4 >= v6 || v8 >= v5)
        goto LABEL_6;
    }
    if (v12 != *((_DWORD *)a2 + 10) + v13)
      goto LABEL_19;
LABEL_18:
    *((_DWORD *)a2 + 1) = v12;
    goto LABEL_19;
  }
LABEL_6:
  if (v7 && v5 != v8)
  {
    v14 = 0;
    v15 = v5 - v8;
    while (1)
    {
      v16 = *((_DWORD *)this + 1);
      v17 = *((_DWORD *)a2 + 2);
      if (!v17)
        break;
      if (v16 == *((_DWORD *)a2 + 10) + v17)
        goto LABEL_26;
LABEL_27:
      ReturnListQueue::enqueueCopy((uint64_t)a2, v8 + v14 + *((_DWORD *)this + 2), *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v14));
      if (v15 == ++v14)
        goto LABEL_11;
    }
    if (v16 != 1)
      goto LABEL_27;
LABEL_26:
    *((_DWORD *)a2 + 1) = v16;
    goto LABEL_27;
  }
LABEL_11:
  if (*(_BYTE *)this)
  {
    v11 = (PrefilterResult *)*((_QWORD *)a2 + 6);
    if (v11)
      PrefilterResult::setComplete(v11);
    *(_BYTE *)a2 = 1;
  }
}

_QWORD *ReturnListQueue::clear(ReturnListQueue *this)
{
  _QWORD *result;

  *((_DWORD *)this + 2) += *((_DWORD *)this + 10);
  result = DgnIOwnArray<DgnArray<Germ> *>::releaseAll((uint64_t)this + 16);
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = 0;
  return result;
}

double ReturnListQueue::reset(ReturnListQueue *this)
{
  double result;

  DgnIOwnArray<DgnArray<Germ> *>::releaseAll((uint64_t)this + 16);
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_BYTE *)this = 0;
  *(_QWORD *)&result = 4294967280;
  *(_QWORD *)((char *)this + 4) = 4294967280;
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t ReturnListQueue::sizeObject(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = DgnPrimQueue<DgnArray<Germ> *,DgnIOwnArray<DgnArray<Germ> *>>::sizeObject(a1 + 16, a2);
  v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 8;
  if (a2 == 3)
    v6 = 0;
  else
    v6 = v5;
  if (a2 != 2)
  {
    v7 = *(_QWORD *)(a1 + 48);
    if (v7)
      v6 += PrefilterResult::sizeObject(v7, a2);
  }
  return ((a2 != 3) | (8 * (a2 != 3))) + v4 + v6;
}

_QWORD *DgnArray<PrefilterResultFrame>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnArray<PrefilterResultFrame>::destructAt(a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnArray<PrefilterResultFrame>::destructAt(uint64_t result, int a2, int a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a3 + a2;
  if (a3 + a2 > a2)
  {
    v4 = (_QWORD *)result;
    v5 = v3;
    v6 = a2;
    v7 = 32 * v3 - 32;
    do
    {
      --v5;
      v8 = *v4 + v7;
      DgnPrimArray<unsigned int>::~DgnPrimArray(v8 + 16);
      result = DgnPrimArray<unsigned int>::~DgnPrimArray(v8);
      v7 -= 32;
    }
    while (v5 > v6);
  }
  return result;
}

_QWORD *DgnIOwnArray<DgnArray<Germ> *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<DgnArray<Germ>>(*(_QWORD *)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnIOwnArray<DgnArray<Germ> *>::destructAt(uint64_t result, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (a3 + a2 > a2)
  {
    v3 = (_QWORD *)result;
    v4 = a2;
    v5 = a3 + a2 - 1;
    do
    {
      result = DgnDelete<DgnArray<Germ>>(*(_QWORD *)(*v3 + 8 * v5));
      *(_QWORD *)(*v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

uint64_t DgnDelete<DgnArray<Germ>>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)DgnIArray<Utterance *>::~DgnIArray(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t sizeObject<Germ>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unint64_t v5;

  if (a2 == 3)
    return 0;
  v2 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v3 = *(_DWORD *)(a1 + 8);
    v4 = 6;
    if (a2 == 2)
      v4 = 8;
    v5 = v4 * (unint64_t)v3;
    if (v3 <= 0)
      v5 = 0;
    v2 += v5;
    if (!a2)
      v2 += 8 * (*(_DWORD *)(a1 + 12) - v3);
  }
  return v2;
}

uint64_t Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sizeObject(a1 + 24);
  if (a2 == 3)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v6 = 8;
    v5 = 12;
    if (!gShadowDiagnosticShowIdealizedObjectSizes)
      v6 = 12;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v7 = 2;
      if (!gShadowDiagnosticShowIdealizedObjectSizes)
        v7 = 3;
      v6 += (unint64_t)*(unsigned int *)(a1 + 88) << v7;
      v5 = 12;
    }
  }
  v8 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v8 = 16;
  if (a2 == 3)
  {
    v8 = 0;
    v9 = v4;
  }
  else
  {
    v9 = v4 + 1;
  }
  return v9 + v5 + v6 + v8;
}

unint64_t DgnArray<Germ>::copyArraySlice(unint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;

  v7 = result;
  *(_DWORD *)(result + 8) = 0;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    v9 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_6;
  }
  else
  {
    result = DgnPrimArray<unsigned long long>::reallocElts(result, a4 - v8, 0);
    v9 = *(_DWORD *)(v7 + 8);
  }
  v11 = a4;
  v10 = v9;
  do
  {
    *(_QWORD *)(*(_QWORD *)v7 + 8 * v10) = *(_QWORD *)(*a2 + 8 * a3);
    v10 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v10;
    ++a3;
    --v11;
  }
  while (v11);
LABEL_6:
  if (v10 < a4)
  {
    v12 = a4 - (unint64_t)v10;
    v13 = *(_QWORD *)v7 + 8 * v10 + 6;
    do
    {
      *(_QWORD *)(v13 - 6) = 4211081215;
      v13 += 8;
      --v12;
    }
    while (v12);
  }
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

uint64_t Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C2189A0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 20;
  else
    v7 = 24;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2097BCF08(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::~Hash(uint64_t a1)
{
  Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C2189A0;
  if (*(_DWORD *)(a1 + 8))
    Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t **Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::findBucket(uint64_t a1, _DWORD *a2)
{
  int v2;
  unint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t **result;
  uint64_t *v8;
  uint64_t **v9;

  v2 = a2[1];
  HIDWORD(v3) = *a2;
  LODWORD(v3) = *a2;
  v4 = (v3 >> 19) + v2;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
    v6 = (-1640531527 * v4) >> -(char)v5;
  else
    v6 = 0;
  result = (uint64_t **)(*(_QWORD *)(a1 + 80) + 8 * v6);
  v8 = *result;
  if (*result)
  {
    do
    {
      v9 = (uint64_t **)v8;
      if (*((_DWORD *)v8 + 2) == v4 && *((_DWORD *)v8 + 4) == v2 && *((_DWORD *)v8 + 3) == *a2)
        break;
      v8 = (uint64_t *)*v8;
      result = v9;
    }
    while (*v9);
  }
  return result;
}

unint64_t DgnArray<PrefilterResultFrame>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 32 * v6, 32 * v5, 32 * v5, 1);
  *(_DWORD *)(a1 + 12) = result >> 5;
  *(_QWORD *)a1 = v8;
  return result;
}

uint64_t HashKEV<unsigned int,unsigned int,WordIdScope>::HashKEV(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C219120;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 12;
  else
    v7 = 16;
  *(_DWORD *)(a1 + 24) = 16;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2097BD130(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashKEV<unsigned int,unsigned int,WordIdScope>::~HashKEV(uint64_t a1)
{
  HashKEV<unsigned int,unsigned int,WordIdScope>::~HashKEV(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t HashKEV<unsigned int,unsigned int,WordIdScope>::~HashKEV(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C219120;
  if (*(_DWORD *)(a1 + 8))
    HashKEV<unsigned int,unsigned int,CWIDScope>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t DgnPrimQueue<DgnArray<Germ> *,DgnIOwnArray<DgnArray<Germ> *>>::DgnPrimQueue(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  DgnIOwnArray<DgnArray<Germ> *>::releaseAll(a1);
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_2097BD1FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIOwnArray<DgnArray<Germ> *>::releaseAll(v1);
  _Unwind_Resume(a1);
}

uint64_t DgnPrimQueue<DgnArray<Germ> *,DgnIOwnArray<DgnArray<Germ> *>>::sizeObject(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v4 = sizeObject<DgnArray<Germ> *>(a1, a2);
  v5 = 12;
  if (a2 == 3)
    v5 = 0;
  v6 = v5 + v4;
  if (a2 > 3 || a2 == 1)
  {
    v8 = *(_DWORD *)(a1 + 8);
    if (*(_DWORD *)(a1 + 24) < v8)
    {
      v9 = 0;
      v11 = *(_DWORD *)(a1 + 16);
      v10 = *(_DWORD *)(a1 + 20);
      do
      {
        if (v10 >= v11)
        {
          if (v9 >= *(_DWORD *)(a1 + 16) && v9 < *(_DWORD *)(a1 + 20))
            goto LABEL_15;
        }
        else if (v9 < *(_DWORD *)(a1 + 20) || v9 >= *(_DWORD *)(a1 + 16))
        {
          goto LABEL_15;
        }
        v6 -= DgnIOwnArray<DgnArray<Germ> *>::sizeMaybeOwnedArrayItem((_QWORD *)a1, v9, a2);
        v8 = *(_DWORD *)(a1 + 8);
LABEL_15:
        ++v9;
      }
      while (v9 < v8);
    }
  }
  return v6;
}

uint64_t DgnIOwnArray<DgnArray<Germ> *>::sizeMaybeOwnedArrayItem(_QWORD *a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 8;
  if (a3 == 3)
    v4 = 0;
  else
    v4 = v3;
  if (a3 != 2)
  {
    v5 = *(_QWORD *)(*a1 + 8 * a2);
    if (v5)
      v4 += sizeObject<Germ>(v5, a3);
  }
  return v4;
}

uint64_t TState::getTransCount(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8 * a2 + 16);
  if (!v2)
    return 0;
  result = 0;
  do
  {
    ++result;
    v2 = *(_QWORD *)(v2 + 8 * a2 + 32);
  }
  while (v2);
  return result;
}

void TFsa::TFsa(TFsa *this)
{
  _OWORD *v1;

  TAllocator::TAllocator(this, 2048);
  v1[3] = 0u;
  *(_OWORD *)((char *)v1 + 104) = 0u;
  v1[4] = 0u;
  v1[5] = 0u;
  *(_OWORD *)((char *)v1 + 120) = 0u;
  *(_OWORD *)((char *)v1 + 136) = 0u;
  *(_OWORD *)((char *)v1 + 152) = 0u;
  *(_OWORD *)((char *)v1 + 168) = 0u;
  *(_OWORD *)((char *)v1 + 184) = 0u;
  TFsa::clear((TFsa *)v1);
}

void sub_2097BD3DC(_Unwind_Exception *a1)
{
  TAllocator *v1;
  void **v2;
  void **v3;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v5 = 0;
  while (1)
  {
    v6 = *(void **)((char *)v1 + v5 + 176);
    if (v6)
    {
      *(_QWORD *)((char *)v1 + v5 + 184) = v6;
      operator delete(v6);
    }
    v5 -= 24;
    if (v5 == -48)
    {
      v7 = (void *)*((_QWORD *)v1 + 16);
      if (v7)
      {
        *((_QWORD *)v1 + 17) = v7;
        operator delete(v7);
      }
      v8 = *v3;
      if (*v3)
      {
        *((_QWORD *)v1 + 14) = v8;
        operator delete(v8);
      }
      v9 = (void *)*((_QWORD *)v1 + 9);
      if (v9)
      {
        *((_QWORD *)v1 + 10) = v9;
        operator delete(v9);
      }
      v10 = *v2;
      if (*v2)
      {
        *((_QWORD *)v1 + 7) = v10;
        operator delete(v10);
      }
      TAllocator::clear(v1);
      _Unwind_Resume(a1);
    }
  }
}

_QWORD *TFsa::clear(TFsa *this)
{
  _QWORD *result;

  result = TAllocator::clear(this);
  *((_QWORD *)this + 14) = *((_QWORD *)this + 13);
  *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
  *((_QWORD *)this + 20) = *((_QWORD *)this + 19);
  *((_QWORD *)this + 23) = *((_QWORD *)this + 22);
  *((_QWORD *)this + 10) = *((_QWORD *)this + 9);
  *((_QWORD *)this + 17) = *((_QWORD *)this + 16);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = 0;
  return result;
}

void TFsa::~TFsa(TFsa *this)
{
  uint64_t i;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  for (i = 0; i != -48; i -= 24)
  {
    v3 = *(void **)((char *)this + i + 176);
    if (v3)
    {
      *(_QWORD *)((char *)this + i + 184) = v3;
      operator delete(v3);
    }
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 10) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 7) = v7;
    operator delete(v7);
  }
  TAllocator::clear(this);
}

_QWORD *TFsa::newState(TAllocator *this, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  char **v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v4 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 9) == v4)
  {
    v5 = TAllocator::allocate(this, 48);
    v6 = (char **)((char *)this + 48);
    *v5 = (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3;
    v5[1] = a2;
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = -1;
    v5[5] = -1;
    v7 = (_QWORD *)*((_QWORD *)this + 7);
    v8 = *((_QWORD *)this + 8);
    if ((unint64_t)v7 >= v8)
    {
      v10 = ((char *)v7 - *v6) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v11 = v8 - (_QWORD)*v6;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 64, v13);
      else
        v14 = 0;
      v15 = &v14[8 * v10];
      v16 = &v14[8 * v13];
      *(_QWORD *)v15 = v5;
      v9 = v15 + 8;
      v18 = (char *)*((_QWORD *)this + 6);
      v17 = (char *)*((_QWORD *)this + 7);
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v15 - 1) = v19;
          v15 -= 8;
        }
        while (v17 != v18);
        v17 = *v6;
      }
      *((_QWORD *)this + 6) = v15;
      *((_QWORD *)this + 7) = v9;
      *((_QWORD *)this + 8) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v7 = v5;
      v9 = v7 + 1;
    }
    *((_QWORD *)this + 7) = v9;
  }
  else
  {
    v5 = *(_QWORD **)(v4 - 8);
    *((_QWORD *)this + 10) = v4 - 8;
    *(_QWORD *)(*((_QWORD *)this + 6) + 8 * *v5) = v5;
    v5[1] = a2;
  }
  ++*((_QWORD *)this + 5);
  return v5;
}

void TFsa::deleteState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a2[4];
  if (v4 != -1)
  {
    *(_QWORD *)(a1[19] + 8 * v4) = 0;
    a2[4] = -1;
    --a1[25];
  }
  v5 = a2[5];
  if (v5 != -1)
  {
    *(_QWORD *)(a1[22] + 8 * v5) = 0;
    a2[5] = -1;
    --a1[26];
  }
  TFsa::deleteAllTrans(a1, (uint64_t)a2);
  v6 = a1[11];
  v7 = (_QWORD *)a1[10];
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[9];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a1 + 11), v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v8 = v15 + 8;
    v18 = (char *)a1[9];
    v17 = (char *)a1[10];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)a1[9];
    }
    a1[9] = v15;
    a1[10] = v8;
    a1[11] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[10] = v8;
  v20 = a1[5];
  *(_QWORD *)(a1[6] + 8 * *a2) = 0;
  a1[5] = v20 - 1;
}

uint64_t TFsa::removeExtremity(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 + 8 * a3;
  v6 = *(_QWORD *)(v3 + 32);
  v4 = (_QWORD *)(v3 + 32);
  v5 = v6;
  if (v6 != -1)
  {
    *(_QWORD *)(*(_QWORD *)(result + 24 * a3 + 152) + 8 * v5) = 0;
    *v4 = -1;
    --*(_QWORD *)(result + 8 * a3 + 200);
  }
  return result;
}

void TFsa::deleteAllTrans(_QWORD *a1, uint64_t a2)
{
  _QWORD *i;
  _QWORD *v5;

  for (i = *(_QWORD **)(a2 + 16); i; i = *(_QWORD **)(a2 + 16))
    TFsa::deleteTrans(a1, i);
  while (1)
  {
    v5 = *(_QWORD **)(a2 + 24);
    if (!v5)
      break;
    TFsa::deleteTrans(a1, v5);
  }
}

_QWORD *TFsa::newTrans(TAllocator *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  char **v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *((_QWORD *)this + 17);
  if (*((_QWORD *)this + 16) == v8)
  {
    v9 = TAllocator::allocate(this, 64);
    v10 = (char **)((char *)this + 104);
    v11 = (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3;
    *v9 = a4;
    v9[1] = v11;
    *((_OWORD *)v9 + 1) = 0u;
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    v12 = (_QWORD *)*((_QWORD *)this + 14);
    v13 = *((_QWORD *)this + 15);
    if ((unint64_t)v12 >= v13)
    {
      v15 = ((char *)v12 - *v10) >> 3;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v16 = v13 - (_QWORD)*v10;
      v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v15 + 1))
        v17 = v15 + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 120, v18);
      else
        v19 = 0;
      v20 = &v19[8 * v15];
      v21 = &v19[8 * v18];
      *(_QWORD *)v20 = v9;
      v14 = v20 + 8;
      v23 = (char *)*((_QWORD *)this + 13);
      v22 = (char *)*((_QWORD *)this + 14);
      if (v22 != v23)
      {
        do
        {
          v24 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *((_QWORD *)v20 - 1) = v24;
          v20 -= 8;
        }
        while (v22 != v23);
        v22 = *v10;
      }
      *((_QWORD *)this + 13) = v20;
      *((_QWORD *)this + 14) = v14;
      *((_QWORD *)this + 15) = v21;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v12 = v9;
      v14 = v12 + 1;
    }
    *((_QWORD *)this + 14) = v14;
  }
  else
  {
    v9 = *(_QWORD **)(v8 - 8);
    *((_QWORD *)this + 17) = v8 - 8;
    *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v9[1]) = v9;
    *v9 = a4;
  }
  v9[3] = a2;
  v9[5] = *(_QWORD *)(a2 + 24);
  v25 = *(_QWORD *)(a2 + 24);
  if (v25)
    *(_QWORD *)(v25 + 56) = v9;
  *(_QWORD *)(a2 + 24) = v9;
  v9[2] = a3;
  v9[4] = *(_QWORD *)(a3 + 16);
  v26 = *(_QWORD *)(a3 + 16);
  if (v26)
    *(_QWORD *)(v26 + 48) = v9;
  *(_QWORD *)(a3 + 16) = v9;
  ++*((_QWORD *)this + 12);
  return v9;
}

void TFsa::deleteTrans(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2[7];
  v5 = a2[5];
  v6 = (_QWORD *)(a2[3] + 24);
  if (v4)
    v6 = (_QWORD *)(v4 + 40);
  *v6 = v5;
  if (v5)
    *(_QWORD *)(v5 + 56) = v4;
  a2[3] = 0;
  a2[7] = 0;
  a2[5] = 0;
  v7 = a2[6];
  v8 = a2[4];
  v9 = (_QWORD *)(a2[2] + 16);
  if (v7)
    v9 = (_QWORD *)(v7 + 32);
  *v9 = v8;
  if (v8)
    *(_QWORD *)(v8 + 48) = v7;
  a2[2] = 0;
  a2[6] = 0;
  a2[4] = 0;
  v10 = (uint64_t)(a1 + 18);
  v11 = a1[18];
  v12 = (_QWORD *)a1[17];
  if ((unint64_t)v12 >= v11)
  {
    v14 = a1[16];
    v15 = ((uint64_t)v12 - v14) >> 3;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v16 = v11 - v14;
    v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1))
      v17 = v15 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v10, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    *(_QWORD *)v20 = a2;
    v13 = v20 + 8;
    v23 = (char *)a1[16];
    v22 = (char *)a1[17];
    if (v22 != v23)
    {
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      v22 = (char *)a1[16];
    }
    a1[16] = v20;
    a1[17] = v13;
    a1[18] = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v12 = a2;
    v13 = v12 + 1;
  }
  a1[17] = v13;
  v25 = a1[12];
  *(_QWORD *)(a1[13] + 8 * a2[1]) = 0;
  a1[12] = v25 - 1;
}

void TFsa::addExtremity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v3 = a2 + 8 * a3;
  v5 = *(_QWORD *)(v3 + 32);
  v4 = (uint64_t *)(v3 + 32);
  if (v5 == -1)
  {
    v8 = a3;
    v9 = a1 + 24 * a3;
    v12 = *(_QWORD *)(v9 + 152);
    v11 = (void **)(v9 + 152);
    v10 = v12;
    v13 = v11 + 1;
    v14 = v11[1];
    v15 = ((uint64_t)v14 - v12) >> 3;
    *v4 = v15;
    v16 = (unint64_t)v11[2];
    if ((unint64_t)v14 >= v16)
    {
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v18 = v16 - v10;
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v15 + 1))
        v19 = v15 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(v11 + 2), v20);
      else
        v21 = 0;
      v22 = &v21[8 * v15];
      v23 = &v21[8 * v20];
      *(_QWORD *)v22 = a2;
      v17 = v22 + 8;
      v24 = (char *)*v13;
      v25 = (char *)*v11;
      if (*v13 != *v11)
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *((_QWORD *)v22 - 1) = v26;
          v22 -= 8;
        }
        while (v24 != v25);
        v24 = (char *)*v11;
      }
      *v11 = v22;
      *v13 = v17;
      v11[2] = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v14 = a2;
      v17 = v14 + 1;
    }
    *v13 = v17;
    ++*(_QWORD *)(a1 + 8 * v8 + 200);
  }
}

_QWORD *TFsa::nfaToDfa(uint64_t a1, TFsa *a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v13[3];
  _BYTE v14[40];
  uint64_t *v15;
  _QWORD *v16[2];
  uint64_t *v17;
  _QWORD *v18[2];
  uint64_t *v19;
  _QWORD *v20[2];

  TAllocator::TAllocator((TAllocator *)v14, 2048);
  v13[0] = (uint64_t)a2;
  v13[1] = a1;
  v13[2] = a3;
  TFsa::clear(a2);
  v20[0] = 0;
  v20[1] = 0;
  v19 = (uint64_t *)v20;
  v7 = *(uint64_t ***)(a1 + 152);
  v6 = *(uint64_t ***)(a1 + 160);
  if (v7 != v6)
  {
    while (!*v7)
    {
      if (++v7 == v6)
        goto LABEL_11;
    }
  }
  if (v7 != v6)
  {
    v8 = *v7;
LABEL_7:
    v17 = v8;
    std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>(&v19, (unint64_t *)&v17, (uint64_t *)&v17);
    v9 = v7 + 1;
    while (v9 != v6)
    {
      v10 = *v9++;
      v8 = v10;
      if (v10)
      {
        v7 = v9 - 1;
        goto LABEL_7;
      }
    }
  }
LABEL_11:
  v18[0] = 0;
  v18[1] = 0;
  v17 = (uint64_t *)v18;
  v16[0] = 0;
  v16[1] = 0;
  v15 = (uint64_t *)v16;
  TFsa::addExtremity(v13[0], (uint64_t)v11, 0);
  TAllocator::clear((TAllocator *)v14);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v17, v18[0]);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v19, v20[0]);
  return TAllocator::clear((TAllocator *)v14);
}

void sub_2097BDDBC(_Unwind_Exception *a1)
{
  TAllocator *v1;
  uint64_t v2;

  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(v2 - 56, *(_QWORD **)(v2 - 48));
  TAllocator::clear(v1);
  _Unwind_Resume(a1);
}

BOOL TFsa::topologicalSort(unint64_t *a1, char **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *__p[3];

  std::vector<unsigned long>::vector(__p, (uint64_t)(a1[7] - a1[6]) >> 3);
  v5 = (_QWORD *)a1[6];
  v4 = (_QWORD *)a1[7];
  if (v5 != v4)
  {
    while (!*v5)
    {
      if (++v5 == v4)
        goto LABEL_16;
    }
  }
  if (v5 != v4)
  {
    v6 = __p[0];
LABEL_7:
    v7 = *(_QWORD *)(*v5 + 16);
    if (v7)
    {
      v8 = 0;
      do
      {
        ++v8;
        v7 = *(_QWORD *)(v7 + 32);
      }
      while (v7);
    }
    else
    {
      v8 = 0;
    }
    v6[*(_QWORD *)*v5] = v8;
    v9 = v5 + 1;
    while (v9 != v4)
    {
      if (*v9++)
      {
        v5 = v9 - 1;
        goto LABEL_7;
      }
    }
  }
LABEL_16:
  a2[1] = *a2;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)a2, a1[5]);
  v12 = (uint64_t *)a1[19];
  v11 = (uint64_t *)a1[20];
  if (v12 != v11)
  {
    while (!*v12)
    {
      if (++v12 == v11)
      {
        v13 = a2[1];
        goto LABEL_42;
      }
    }
  }
  v13 = a2[1];
  if (v12 != v11)
  {
    v14 = a2 + 2;
LABEL_22:
    v15 = *v12;
    if ((unint64_t)v13 >= *v14)
    {
      v16 = (v13 - *a2) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v17 = *v14 - (_QWORD)*a2;
      v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1))
        v18 = v16 + 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a2 + 2), v19);
      else
        v20 = 0;
      v21 = &v20[8 * v16];
      *(_QWORD *)v21 = v15;
      v13 = v21 + 8;
      v23 = *a2;
      v22 = a2[1];
      if (v22 != *a2)
      {
        do
        {
          v24 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *((_QWORD *)v21 - 1) = v24;
          v21 -= 8;
        }
        while (v22 != v23);
        v22 = *a2;
      }
      *a2 = v21;
      a2[1] = v13;
      a2[2] = &v20[8 * v19];
      if (v22)
        operator delete(v22);
    }
    else
    {
      *(_QWORD *)v13 = v15;
      v13 += 8;
    }
    a2[1] = v13;
    v25 = v12 + 1;
    while (v25 != v11)
    {
      if (*v25++)
      {
        v12 = v25 - 1;
        goto LABEL_22;
      }
    }
  }
LABEL_42:
  v27 = *a2;
  v28 = v13 - *a2;
  if (v13 != *a2)
  {
    v29 = 0;
    v30 = a2 + 2;
    do
    {
      v31 = *(_QWORD *)(*(_QWORD *)&v27[8 * v29] + 24);
      if (v31)
      {
        do
        {
          v32 = *(_QWORD **)(v31 + 16);
          v33 = __p[0];
          --*((_QWORD *)__p[0] + *v32);
          if (!v33[*v32])
          {
            if ((unint64_t)v13 >= *v30)
            {
              v34 = (v13 - *a2) >> 3;
              if ((unint64_t)(v34 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v35 = *v30 - (_QWORD)*a2;
              v36 = v35 >> 2;
              if (v35 >> 2 <= (unint64_t)(v34 + 1))
                v36 = v34 + 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
                v37 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v37 = v36;
              if (v37)
                v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a2 + 2), v37);
              else
                v38 = 0;
              v39 = &v38[8 * v34];
              *(_QWORD *)v39 = v32;
              v13 = v39 + 8;
              v41 = *a2;
              v40 = a2[1];
              if (v40 != *a2)
              {
                do
                {
                  v42 = *((_QWORD *)v40 - 1);
                  v40 -= 8;
                  *((_QWORD *)v39 - 1) = v42;
                  v39 -= 8;
                }
                while (v40 != v41);
                v40 = *a2;
              }
              *a2 = v39;
              a2[1] = v13;
              a2[2] = &v38[8 * v37];
              if (v40)
                operator delete(v40);
            }
            else
            {
              *(_QWORD *)v13 = v32;
              v13 += 8;
            }
            a2[1] = v13;
          }
          v31 = *(_QWORD *)(v31 + 40);
        }
        while (v31);
        v27 = *a2;
      }
      ++v29;
      v28 = v13 - v27;
    }
    while (v29 < (v13 - v27) >> 3);
  }
  v43 = v28 >> 3;
  v44 = a1[5];
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v43 == v44;
}

void sub_2097BE138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::epsilonClosure(uint64_t a1, uint64_t **a2)
{
  uint64_t **v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  BOOL v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17[2];
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;

  if (a2 != (uint64_t **)a1)
    std::__tree<TState const*>::__assign_multi<std::__tree_const_iterator<TState const*,std::__tree_node<TState const*,void *> *,long>>(a2, *(_QWORD **)a1, (_QWORD *)(a1 + 8));
  std::set<TState const*>::set[abi:ne180100]((uint64_t *)&v18, a1);
  if (v20)
  {
    v4 = a2 + 1;
    do
    {
      v17[0] = 0;
      v17[1] = 0;
      v16 = (uint64_t *)v17;
      std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v18, v19);
      v19 = 0;
      v20 = 0;
      v18 = (uint64_t *)&v19;
      v5 = v16;
      if (v16 != (uint64_t *)v17)
      {
        do
        {
          v6 = v5[4];
          v15 = v6;
          v7 = *v4;
          if (!*v4)
            goto LABEL_17;
          v8 = a2 + 1;
          do
          {
            v9 = v7[4];
            v10 = v9 >= v6;
            if (v9 >= v6)
              v11 = (uint64_t **)v7;
            else
              v11 = (uint64_t **)(v7 + 1);
            if (v10)
              v8 = (uint64_t **)v7;
            v7 = *v11;
          }
          while (*v11);
          if (v8 == v4 || v6 < (unint64_t)v8[4])
          {
LABEL_17:
            std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>(a2, &v15, (uint64_t *)&v15);
            std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>(&v18, &v15, (uint64_t *)&v15);
          }
          v12 = (uint64_t *)v5[1];
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (uint64_t *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (uint64_t *)v5[2];
              v14 = *v13 == (_QWORD)v5;
              v5 = v13;
            }
            while (!v14);
          }
          v5 = v13;
        }
        while (v13 != (uint64_t *)v17);
      }
      std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v16, v17[0]);
    }
    while (v20);
  }
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v18, v19);
}

void sub_2097BE2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&a11, a12);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t *`anonymous namespace'::TNfaToDfa::nfaToDfaRec(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t **v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t i;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61[2];
  uint64_t *v62;
  _QWORD *v63[2];
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;

  v6 = a2[2] + 1;
  if (v6 >> 61)
    v7 = -1;
  else
    v7 = 8 * v6;
  v8 = TAllocator::allocate((TAllocator *)(a1 + 24), v7);
  v9 = v8;
  v10 = (_QWORD *)*a2;
  v11 = a2 + 1;
  if ((uint64_t *)*a2 == a2 + 1)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v8[v12] = v10[4];
      v13 = (uint64_t *)v10[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (uint64_t *)v10[2];
          v15 = *v14 == (_QWORD)v10;
          v10 = v14;
        }
        while (!v15);
      }
      ++v12;
      v10 = v14;
    }
    while (v14 != v11);
  }
  v8[v12] = 0;
  v17 = a3 + 1;
  v16 = a3[1];
  if (!v16)
    goto LABEL_29;
  v18 = a3 + 1;
  do
  {
    v19 = (unint64_t *)v16[4];
    v20 = v8;
    do
    {
      v21 = *v19;
      v22 = *v20;
      if (!(*v19 | *v20))
      {
        v18 = (uint64_t **)v16;
        goto LABEL_23;
      }
      ++v20;
      ++v19;
    }
    while (v21 == v22);
    if (v21 < v22)
      ++v16;
    else
      v18 = (uint64_t **)v16;
LABEL_23:
    v16 = (uint64_t *)*v16;
  }
  while (v16);
  if (v18 == v17)
  {
LABEL_29:
    v65 = 0;
    v66 = 0;
    v64 = (uint64_t *)&v65;
    v27 = (_QWORD *)*a2;
    if ((uint64_t *)*a2 == v11)
    {
      v28 = 0;
    }
    else
    {
      v28 = 0;
      do
      {
        v29 = v27[4];
        v30 = *(_QWORD *)(v29 + 40) != -1;
        v31 = *(uint64_t **)(v29 + 8);
        if (v31)
        {
          v62 = v31;
          std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>(&v64, (unint64_t *)&v62, (uint64_t *)&v62);
        }
        v32 = (uint64_t *)v27[1];
        if (v32)
        {
          do
          {
            v33 = v32;
            v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v33 = (uint64_t *)v27[2];
            v15 = *v33 == (_QWORD)v27;
            v27 = v33;
          }
          while (!v15);
        }
        v28 |= v30;
        v27 = v33;
      }
      while (v33 != v11);
      if (v66)
      {
        if (v66 == 1)
        {
          v34 = v64[4];
LABEL_45:
          v35 = TFsa::newState(*(TAllocator **)a1, v34);
          if ((v28 & 1) != 0)
            TFsa::addExtremity(*(_QWORD *)a1, (uint64_t)v35, 1u);
          std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v64, v65);
          v36 = *v17;
          if (*v17)
          {
LABEL_48:
            while (2)
            {
              v37 = (uint64_t **)v36;
              v38 = (unint64_t *)v36[4];
              v39 = v9;
              v40 = v38;
              do
              {
                v41 = *v39;
                v42 = *v40;
                if (!(*v39 | *v40))
                {
                  v43 = v9;
LABEL_55:
                  while (1)
                  {
                    v44 = *v38;
                    v45 = *v43;
                    if (!(*v38 | *v43))
                      break;
                    ++v43;
                    ++v38;
                    if (v44 != v45)
                    {
                      if (v44 < v45)
                      {
                        v17 = v37 + 1;
                        v36 = v37[1];
                        if (v36)
                          goto LABEL_48;
                        goto LABEL_63;
                      }
                      break;
                    }
                  }
                  if (v37)
                    goto LABEL_66;
                  goto LABEL_63;
                }
                ++v40;
                ++v39;
              }
              while (v41 == v42);
              v43 = v9;
              if (v41 >= v42)
                goto LABEL_55;
              v36 = *v37;
              v17 = v37;
              if (*v37)
                continue;
              break;
            }
          }
          else
          {
            v37 = a3 + 1;
          }
LABEL_63:
          v46 = (uint64_t *)v37;
          v37 = (uint64_t **)operator new(0x30uLL);
          v37[4] = (uint64_t *)v9;
          v37[5] = 0;
          *v37 = 0;
          v37[1] = 0;
          v37[2] = v46;
          *v17 = (uint64_t *)v37;
          v47 = (uint64_t *)**a3;
          v48 = (uint64_t *)v37;
          if (v47)
          {
            *a3 = v47;
            v48 = *v17;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a3[1], v48);
          a3[2] = (uint64_t *)((char *)a3[2] + 1);
LABEL_66:
          v37[5] = v35;
          v65 = 0;
          v66 = 0;
          v64 = (uint64_t *)&v65;
          v49 = (_QWORD *)*a2;
          if ((uint64_t *)*a2 != v11)
          {
            do
            {
              for (i = *(_QWORD *)(v49[4] + 24); i; i = *(_QWORD *)(i + 40))
              {
                if (*(_QWORD *)i != -1)
                {
                  v62 = *(uint64_t **)i;
                  std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>(&v64, (unint64_t *)&v62, (uint64_t *)&v62);
                }
              }
              v51 = (uint64_t *)v49[1];
              if (v51)
              {
                do
                {
                  v52 = v51;
                  v51 = (uint64_t *)*v51;
                }
                while (v51);
              }
              else
              {
                do
                {
                  v52 = (uint64_t *)v49[2];
                  v15 = *v52 == (_QWORD)v49;
                  v49 = v52;
                }
                while (!v15);
              }
              v49 = v52;
            }
            while (v52 != v11);
            v53 = v64;
            if (v64 != (uint64_t *)&v65)
            {
              do
              {
                v54 = v53[4];
                v63[0] = 0;
                v63[1] = 0;
                v62 = (uint64_t *)v63;
                v61[0] = 0;
                v61[1] = 0;
                v60 = (uint64_t *)v61;
                *TFsa::newTrans(*(TAllocator **)a1, (uint64_t)v35, v55, 0) = v53[4];
                std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v60, v61[0]);
                std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v62, v63[0]);
                v56 = (uint64_t *)v53[1];
                if (v56)
                {
                  do
                  {
                    v57 = v56;
                    v56 = (uint64_t *)*v56;
                  }
                  while (v56);
                }
                else
                {
                  do
                  {
                    v57 = (uint64_t *)v53[2];
                    v15 = *v57 == (_QWORD)v53;
                    v53 = v57;
                  }
                  while (!v15);
                }
                v53 = v57;
              }
              while (v57 != (uint64_t *)&v65);
            }
          }
          std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v64, v65);
          return v35;
        }
        v59 = *(_QWORD *)(a1 + 16);
        if (v59)
        {
          v34 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v59 + 16))(v59, &v64);
          goto LABEL_45;
        }
      }
    }
    v34 = 0;
    goto LABEL_45;
  }
  v23 = v18[4];
  v24 = v8;
  while (1)
  {
    v25 = *v24;
    v26 = *v23;
    if (!(*v24 | *v23))
      return v18[5];
    ++v23;
    ++v24;
    if (v25 != v26)
    {
      if (v25 < v26)
        goto LABEL_29;
      return v18[5];
    }
  }
}

void sub_2097BE79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t *`anonymous namespace'::move(uint64_t *result, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *i;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;

  v3 = result + 1;
  v4 = (_QWORD *)*result;
  if ((uint64_t *)*result != result + 1)
  {
    do
    {
      for (i = *(_QWORD **)(v4[4] + 24); i; i = (_QWORD *)i[5])
      {
        if (*i == a2)
        {
          v11 = i[2];
          result = std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>(a3, (unint64_t *)&v11, &v11);
        }
      }
      v8 = (uint64_t *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != v3);
  }
  return result;
}

uint64_t **std::__tree<TState const*>::__assign_multi<std::__tree_const_iterator<TState const*,std::__tree_node<TState const*,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<TState const*>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v8[4] = v9[4];
          std::__tree<TState const*>::__node_insert_multi(v5, v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<TState const*>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<TState const*>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<TState const*>::__emplace_multi<TState const* const&>(v5, a2 + 4);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_2097BEABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<TState const*>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<TState const*>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

_QWORD *std::__tree<TState const*>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<TState const*>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<TState const*>::__emplace_multi<TState const* const&>(uint64_t **a1, unint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  v4[4] = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= v7[4])
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t *std::set<TState const*>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<TState const*>::insert[abi:ne180100]<std::__tree_const_iterator<TState const*,std::__tree_node<TState const*,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_2097BECAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<TState const*>::insert[abi:ne180100]<std::__tree_const_iterator<TState const*,std::__tree_node<TState const*,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<TState const*>::__find_equal<TState const*>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<TState const*>::__find_equal<TState const*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::__tree<std::__value_type<TState const**,TState*>,std::__map_value_compare<TState const**,std::__value_type<TState const**,TState*>,`anonymous namespace'::TNfaToDfa::TNfaStateCompare,true>,std::allocator<std::__value_type<TState const**,TState*>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    operator delete(a1);
  }
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void TFsa::moveTrans(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = a2[3];
  if (v4 != a3)
  {
    v5 = a2[7];
    v6 = a2[5];
    v7 = (_QWORD *)(v4 + 24);
    if (v5)
      v7 = (_QWORD *)(v5 + 40);
    *v7 = v6;
    if (v6)
      *(_QWORD *)(v6 + 56) = v5;
    a2[7] = 0;
    a2[5] = 0;
    a2[3] = a3;
    a2[5] = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 24);
    if (v8)
      *(_QWORD *)(v8 + 56) = a2;
    *(_QWORD *)(a3 + 24) = a2;
  }
  v9 = a2[2];
  if (v9 != a4)
  {
    v10 = a2[6];
    v11 = a2[4];
    v12 = (_QWORD *)(v9 + 16);
    if (v10)
      v12 = (_QWORD *)(v10 + 32);
    *v12 = v11;
    if (v11)
      *(_QWORD *)(v11 + 48) = v10;
    a2[6] = 0;
    a2[4] = 0;
    a2[2] = a4;
    a2[4] = *(_QWORD *)(a4 + 16);
    v13 = *(_QWORD *)(a4 + 16);
    if (v13)
      *(_QWORD *)(v13 + 48) = a2;
    *(_QWORD *)(a4 + 16) = a2;
  }
}

void TRneParamManager::TRneParamManager(TRneParamManager *this, TLocaleInfo *a2)
{
  _QWORD *v3;
  TParam *v4;

  TLattProcParamManager::TLattProcParamManager(this, a2);
  *v3 = &unk_24C215840;
  v4 = (TParam *)(v3 + 62);
  TBoolParam::TBoolParam((uint64_t)(v3 + 62), (uint64_t)"D", (uint64_t)"L", 0, 0, (uint64_t)"1", (uint64_t)&unk_209A596C4);
  TBoolParam::TBoolParam((uint64_t)this + 744, (uint64_t)"C", (uint64_t)"R", 0, 0, (uint64_t)"1", (uint64_t)&unk_209A596C4);
  TIntParam::TIntParam((TRneParamManager *)((char *)this + 992), (uint64_t)"R", (uint64_t)"T", 0, 0, 300, 0, (uint64_t)"1", (uint64_t)&unk_209A596C4);
  TBoolParam::TBoolParam((uint64_t)this + 1344, (uint64_t)"A", (uint64_t)"O", 0, 0, (uint64_t)"1", (uint64_t)&unk_209A596C4);
  TIntParam::TIntParam((TRneParamManager *)((char *)this + 1592), (uint64_t)"M", (uint64_t)"W", 0, 1, 100, 4, (uint64_t)"1", (uint64_t)&unk_209A596C4);
  TIntParam::TIntParam((TRneParamManager *)((char *)this + 1944), (uint64_t)"M", (uint64_t)"W", 0, 1, 100, 10, (uint64_t)"1", (uint64_t)&unk_209A596C4);
  TStringParam::TStringParam((char *)this + 2296, "B", "W", 0, "0", "1", &unk_209A596C4);
  TParamManager::add(this, v4);
  TParamManager::add(this, (TRneParamManager *)((char *)this + 744));
  TParamManager::add(this, (TRneParamManager *)((char *)this + 992));
  TParamManager::add(this, (TRneParamManager *)((char *)this + 1344));
  TParamManager::add(this, (TRneParamManager *)((char *)this + 1592));
  TParamManager::add(this, (TRneParamManager *)((char *)this + 1944));
  TParamManager::add(this, (TRneParamManager *)((char *)this + 2296));
}

void sub_2097BF4F4(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  TParam::~TParam(v7);
  TParam::~TParam(v6);
  TBoolParam::~TBoolParam(v5);
  TParam::~TParam(v4);
  TBoolParam::~TBoolParam(v3);
  TBoolParam::~TBoolParam(v2);
  *v1 = &unk_24C217520;
  TParam::~TParam(v1 + 18);
  TParamManager::~TParamManager((TParamManager *)v1);
  _Unwind_Resume(a1);
}

void TRne::TRne(TRne *this, TLexicon *a2)
{
  _QWORD *v3;
  TRneParamManager *v4;

  v3 = (_QWORD *)TLatticeProcessor::TLatticeProcessor((uint64_t)this, (uint64_t)a2, 0);
  *v3 = &off_24C218C70;
  v3[8] = 0;
  v4 = (TRneParamManager *)operator new();
  TRneParamManager::TRneParamManager(v4, (TLocaleInfo *)(*((_QWORD *)this + 2) + 240));
  *((_QWORD *)this + 7) = v4;
}

void sub_2097BF600(_Unwind_Exception *a1)
{
  TLatticeProcessor *v1;
  uint64_t v2;

  MEMORY[0x20BD149A8](v2, 0x10F3C40C0367C18);
  TLatticeProcessor::~TLatticeProcessor(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x24BEDB868];
  v7 = MEMORY[0x24BEDB868] + 64;
  a1[15] = MEMORY[0x24BEDB868] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_2097BF6F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x20BD1496C](v1);
  _Unwind_Resume(a1);
}

void TInputStream::~TInputStream(TInputStream *this)
{
  std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x20BD1496C](a1 + 120);
  return a1;
}

void TRne::~TRne(TRne *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C218C70;
  v2 = *((_QWORD *)this + 7);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 8);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  TLatticeProcessor::~TLatticeProcessor(this);
}

{
  TRne::~TRne(this);
  JUMPOUT(0x20BD149A8);
}

void TRne::applyInternal(uint64_t a1, uint64_t a2, _QWORD *a3, void **a4, _QWORD *a5)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  TWord *Word;
  unsigned int v19;
  __int32 *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  _QWORD *v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v153;
  uint64_t ActiveConfigHandle;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int **v169;
  unsigned int *v170;
  _QWORD *v171;
  int *v172;
  uint64_t v173;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *p_p;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  _QWORD *v188;
  void *__p;
  __int128 v191;
  _BYTE v192[785];
  char v193;
  uint64_t v194;
  __int128 v195;
  _BYTE v196[1024];
  char v197;
  void *v198[3];
  _BYTE v199[40];
  void *v200[3];
  void *v201[3];
  void *v202[3];
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  uint64_t v208;
  int v209[3];

  v206 = 0;
  v207 = 0;
  v208 = 0;
  TFsa::topologicalSort(a3 + 3, &v206);
  v9 = v206;
  v8 = v207;
  v11 = a3[16];
  v10 = a3[17];
  v203 = 0;
  v204 = 0;
  v205 = 0;
  std::vector<unsigned long>::vector(v202, ((v207 - v206) >> 3) + 1);
  v182 = (v8 - v9) >> 3;
  std::vector<unsigned long>::vector(v201, v182);
  std::vector<TWord const*>::vector(v200, (v10 - v11) >> 3);
  TAllocator::TAllocator((TAllocator *)v199, 2048);
  v188 = a5;
  *a5 = 0;
  v194 = -1;
  std::vector<unsigned long>::vector(v198, v182, &v194);
  if (v8 != v9)
  {
    v12 = 0;
    v13 = (v8 - v9) >> 3;
    if (v182 <= 1)
      v13 = 1;
    v183 = v13;
    while (1)
    {
      v14 = *(_QWORD **)&v206[8 * v12];
      *((_QWORD *)v201[0] + *v14) = v12;
      v184 = v12;
      *((_QWORD *)v202[0] + v12) = (v204 - v203) >> 3;
      v15 = v14[2];
      if (v15)
        break;
LABEL_243:
      v12 = v184 + 1;
      if (v184 + 1 == v183)
        goto LABEL_244;
    }
    while (1)
    {
      v16 = *(_QWORD **)v15;
      v187 = *(_QWORD *)(v15 + 8);
      v17 = *((_QWORD *)v201[0] + **(_QWORD **)(v15 + 24));
      v185 = v15;
      if (**(_QWORD **)v15 == 2)
      {
        v20 = (__int32 *)v16[1];
        Word = (TWord *)TLexicon::findWord(*(_QWORD *)(a1 + 16), v20);
        if (!Word)
          Word = (TWord *)TLexicon::addTempWord(*(_QWORD *)(a1 + 16), v20, 0, 0, 0);
        v21 = *TWord::getOptionalTagBits(Word);
        v22 = (v21 >> 5) & 1;
        if ((v21 & 0x10) != 0)
          v22 = 3;
        v19 = (v21 & 8) != 0 ? 2 : v22;
      }
      else
      {
        Word = 0;
        v19 = 0;
      }
      *((_QWORD *)v200[0] + v187) = Word;
      v23 = (unint64_t *)((char *)v202[0] + 8 * v17);
      v24 = *v23;
      v25 = v23[1];
      v26 = *v23 == v25;
      if (*v23 < v25)
        break;
      v186 = 0;
LABEL_216:
      if (v26 || (v186 & 1) != 0)
      {
        v127 = v19 - 1;
        if (v127 > 2)
          v128 = 1;
        else
          v128 = *(_QWORD *)&asc_209A5B0E8[8 * v127];
        v129 = *((_DWORD *)v16 + 4);
        v130 = TAllocator::allocate((TAllocator *)v199, 24);
        v131 = v130;
        v132 = v128 | 0x40;
        if (v26)
          v132 = v128;
        if ((v129 & 1) != 0)
          v132 |= 0x81uLL;
        *v130 = 0;
        v130[1] = v187;
        v130[2] = v132;
        v133 = v204;
        if (v204 >= v205)
        {
          v135 = (v204 - v203) >> 3;
          if ((unint64_t)(v135 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v136 = (v205 - v203) >> 2;
          if (v136 <= v135 + 1)
            v136 = v135 + 1;
          if ((unint64_t)(v205 - v203) >= 0x7FFFFFFFFFFFFFF8)
            v137 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v137 = v136;
          if (v137)
            v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v205, v137);
          else
            v138 = 0;
          v139 = &v138[8 * v135];
          *(_QWORD *)v139 = v131;
          v134 = v139 + 8;
          v141 = v203;
          v140 = v204;
          if (v204 != v203)
          {
            do
            {
              v142 = *((_QWORD *)v140 - 1);
              v140 -= 8;
              *((_QWORD *)v139 - 1) = v142;
              v139 -= 8;
            }
            while (v140 != v141);
            v140 = v203;
          }
          v203 = v139;
          v204 = v134;
          v205 = &v138[8 * v137];
          if (v140)
            operator delete(v140);
        }
        else
        {
          *(_QWORD *)v204 = v130;
          v134 = v133 + 8;
        }
        v204 = v134;
      }
      v15 = *(_QWORD *)(v185 + 32);
      if (!v15)
        goto LABEL_243;
    }
    v186 = 0;
    while (1)
    {
      v27 = *(_QWORD **)&v203[8 * v24];
      v28 = v27[2];
      if ((v16[2] & 1) != 0 || (v28 & 0x80) != 0)
        break;
      if ((v28 & 1) != 0)
      {
        if (v19 == 3)
        {
          v36 = TAllocator::allocate((TAllocator *)v199, 24);
          v37 = v36;
          *v36 = v27;
          v36[1] = v187;
          v36[2] = 17;
          v38 = v204;
          if (v204 >= v205)
          {
            v50 = (v204 - v203) >> 3;
            if ((unint64_t)(v50 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v51 = (v205 - v203) >> 2;
            if (v51 <= v50 + 1)
              v51 = v50 + 1;
            if ((unint64_t)(v205 - v203) >= 0x7FFFFFFFFFFFFFF8)
              v52 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v52 = v51;
            if (v52)
              v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v205, v52);
            else
              v53 = 0;
            v58 = &v53[8 * v50];
            *(_QWORD *)v58 = v37;
            v39 = v58 + 8;
            v60 = v203;
            v59 = v204;
            if (v204 != v203)
            {
              do
              {
                v61 = *((_QWORD *)v59 - 1);
                v59 -= 8;
                *((_QWORD *)v58 - 1) = v61;
                v58 -= 8;
              }
              while (v59 != v60);
              v59 = v203;
            }
            v203 = v58;
            v204 = v39;
            v205 = &v53[8 * v52];
            if (v59)
              operator delete(v59);
          }
          else
          {
            *(_QWORD *)v204 = v36;
            v39 = v38 + 8;
          }
          v204 = v39;
          goto LABEL_57;
        }
LABEL_55:
        addTransitionToLattice(a3, v200, *(uint64_t ***)&v203[8 * v24], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 56), a4, (uint64_t *)v198, v188);
LABEL_56:
        v26 = 1;
        goto LABEL_57;
      }
      if ((v28 & 2) != 0)
      {
        switch(v19)
        {
          case 1u:
            if ((v28 & 4) == 0)
            {
              v44 = TAllocator::allocate((TAllocator *)v199, 24);
              *v44 = v27;
              v44[1] = v187;
              v44[2] = 10;
              v45 = v204;
              if (v204 < v205)
                goto LABEL_105;
              v56 = (v204 - v203) >> 3;
              if ((unint64_t)(v56 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v57 = (v205 - v203) >> 2;
              if (v57 <= v56 + 1)
                v57 = v56 + 1;
              if ((unint64_t)(v205 - v203) >= 0x7FFFFFFFFFFFFFF8)
                v48 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v48 = v57;
              if (v48)
                v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v205, v48);
              else
                v49 = 0;
              v117 = &v49[8 * v56];
              *(_QWORD *)v117 = v44;
              v71 = v117 + 8;
              v119 = v203;
              v118 = v204;
              if (v204 != v203)
              {
                do
                {
                  v120 = *((_QWORD *)v118 - 1);
                  v118 -= 8;
                  *((_QWORD *)v117 - 1) = v120;
                  v117 -= 8;
                }
                while (v118 != v119);
LABEL_211:
                v118 = v203;
              }
LABEL_212:
              v203 = v117;
              v204 = v71;
              v205 = &v49[8 * v48];
              if (v118)
                operator delete(v118);
              goto LABEL_214;
            }
            break;
          case 3u:
            if ((v28 & 8) == 0)
            {
              v29 = TAllocator::allocate((TAllocator *)v199, 24);
              *v29 = v27;
              v29[1] = v187;
              v29[2] = 18;
              v31 = v204;
              if (v204 < v205)
                goto LABEL_98;
              v54 = (v204 - v203) >> 3;
              if ((unint64_t)(v54 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v55 = (v205 - v203) >> 2;
              if (v55 <= v54 + 1)
                v55 = v54 + 1;
              if ((unint64_t)(v205 - v203) >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v55;
              if (v34)
                v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v205, v34);
              else
                v35 = 0;
              v92 = &v35[8 * v54];
              *(_QWORD *)v92 = v29;
              v62 = v92 + 8;
              v106 = v203;
              v93 = v204;
              if (v204 != v203)
              {
                do
                {
                  v107 = *((_QWORD *)v93 - 1);
                  v93 -= 8;
                  *((_QWORD *)v92 - 1) = v107;
                  v92 -= 8;
                }
                while (v93 != v106);
LABEL_200:
                v93 = v203;
              }
LABEL_201:
              v203 = v92;
              v204 = v62;
              v205 = &v35[8 * v34];
              if (v93)
                operator delete(v93);
LABEL_203:
              v204 = v62;
            }
            break;
          case 2u:
            v40 = TAllocator::allocate((TAllocator *)v199, 24);
            v41 = v40;
            *v40 = v27;
            v40[1] = v187;
            v40[2] = 6;
            v42 = v204;
            if (v204 >= v205)
            {
              v72 = (v204 - v203) >> 3;
              if ((unint64_t)(v72 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v73 = (v205 - v203) >> 2;
              if (v73 <= v72 + 1)
                v73 = v72 + 1;
              if ((unint64_t)(v205 - v203) >= 0x7FFFFFFFFFFFFFF8)
                v74 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v74 = v73;
              if (v74)
                v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v205, v74);
              else
                v75 = 0;
              v84 = &v75[8 * v72];
              *(_QWORD *)v84 = v41;
              v43 = v84 + 8;
              v86 = v203;
              v85 = v204;
              if (v204 != v203)
              {
                do
                {
                  v87 = *((_QWORD *)v85 - 1);
                  v85 -= 8;
                  *((_QWORD *)v84 - 1) = v87;
                  v84 -= 8;
                }
                while (v85 != v86);
                v85 = v203;
              }
              v203 = v84;
              v204 = v43;
              v205 = &v75[8 * v74];
              if (v85)
                operator delete(v85);
            }
            else
            {
              *(_QWORD *)v204 = v40;
              v43 = v42 + 8;
            }
            v204 = v43;
            v186 |= (v27[2] & 4) == 0;
            break;
          default:
            if ((v28 & 4) == 0)
              goto LABEL_55;
            break;
        }
      }
      else if ((v28 & 8) != 0)
      {
        switch(v19)
        {
          case 1u:
            if ((v28 & 0x40) == 0)
            {
              v44 = TAllocator::allocate((TAllocator *)v199, 24);
              *v44 = v27;
              v44[1] = v187;
              v44[2] = 10;
              v45 = v204;
              if (v204 < v205)
              {
LABEL_105:
                *(_QWORD *)v45 = v44;
                v71 = v45 + 8;
LABEL_214:
                v204 = v71;
                v186 = 1;
                break;
              }
              v90 = (v204 - v203) >> 3;
              if ((unint64_t)(v90 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v91 = (v205 - v203) >> 2;
              if (v91 <= v90 + 1)
                v91 = v90 + 1;
              if ((unint64_t)(v205 - v203) >= 0x7FFFFFFFFFFFFFF8)
                v48 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v48 = v91;
              if (v48)
                v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v205, v48);
              else
                v49 = 0;
              v117 = &v49[8 * v90];
              *(_QWORD *)v117 = v44;
              v71 = v117 + 8;
              v123 = v203;
              v118 = v204;
              if (v204 != v203)
              {
                do
                {
                  v124 = *((_QWORD *)v118 - 1);
                  v118 -= 8;
                  *((_QWORD *)v117 - 1) = v124;
                  v117 -= 8;
                }
                while (v118 != v123);
                goto LABEL_211;
              }
              goto LABEL_212;
            }
            break;
          case 3u:
            v67 = TAllocator::allocate((TAllocator *)v199, 24);
            v68 = v67;
            *v67 = v27;
            v67[1] = v187;
            v67[2] = 17;
            v69 = v204;
            if (v204 >= v205)
            {
              v80 = (v204 - v203) >> 3;
              if ((unint64_t)(v80 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v81 = (v205 - v203) >> 2;
              if (v81 <= v80 + 1)
                v81 = v80 + 1;
              if ((unint64_t)(v205 - v203) >= 0x7FFFFFFFFFFFFFF8)
                v82 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v82 = v81;
              if (v82)
                v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v205, v82);
              else
                v83 = 0;
              v108 = &v83[8 * v80];
              *(_QWORD *)v108 = v68;
              v70 = v108 + 8;
              v110 = v203;
              v109 = v204;
              if (v204 != v203)
              {
                do
                {
                  v111 = *((_QWORD *)v109 - 1);
                  v109 -= 8;
                  *((_QWORD *)v108 - 1) = v111;
                  v108 -= 8;
                }
                while (v109 != v110);
                v109 = v203;
              }
              v203 = v108;
              v204 = v70;
              v205 = &v83[8 * v82];
              if (v109)
                operator delete(v109);
            }
            else
            {
              *(_QWORD *)v204 = v67;
              v70 = v69 + 8;
            }
            v204 = v70;
            v112 = (unint64_t *)((char *)v202[0]
                                      + 8
                                      * *((_QWORD *)v201[0] + **(_QWORD **)(*(_QWORD *)(a3[16] + 8 * v27[1]) + 24)));
            v113 = *v112;
            v114 = v112[1];
            if (*v112 < v114)
            {
              do
              {
                v115 = *(_QWORD *)&v203[8 * v113];
                if ((*(_QWORD *)(v115 + 16) & 0xALL) != 0 && (*(_QWORD *)(v115 + 16) & 0x44) == 0)
                  addTransitionToLattice(a3, v200, (uint64_t **)v115, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 56), a4, (uint64_t *)v198, v188);
                ++v113;
              }
              while (v114 != v113);
            }
            break;
          case 2u:
            if ((v28 & 0x40) == 0)
            {
              v44 = TAllocator::allocate((TAllocator *)v199, 24);
              *v44 = v27;
              v44[1] = v187;
              v44[2] = 6;
              v45 = v204;
              if (v204 < v205)
                goto LABEL_105;
              v46 = (v204 - v203) >> 3;
              if ((unint64_t)(v46 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v47 = (v205 - v203) >> 2;
              if (v47 <= v46 + 1)
                v47 = v46 + 1;
              if ((unint64_t)(v205 - v203) >= 0x7FFFFFFFFFFFFFF8)
                v48 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v48 = v47;
              if (v48)
                v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v205, v48);
              else
                v49 = 0;
              v117 = &v49[8 * v46];
              *(_QWORD *)v117 = v44;
              v71 = v117 + 8;
              v125 = v203;
              v118 = v204;
              if (v204 != v203)
              {
                do
                {
                  v126 = *((_QWORD *)v118 - 1);
                  v118 -= 8;
                  *((_QWORD *)v117 - 1) = v126;
                  v117 -= 8;
                }
                while (v118 != v125);
                goto LABEL_211;
              }
              goto LABEL_212;
            }
            break;
          default:
            goto LABEL_54;
        }
      }
      else
      {
        if (v19 != 3)
        {
          if (v19 != 2)
          {
            v63 = TAllocator::allocate((TAllocator *)v199, 24);
            v64 = v63;
            *v63 = v27;
            v63[1] = v187;
            v63[2] = 1;
            v65 = v204;
            if (v204 >= v205)
            {
              v76 = (v204 - v203) >> 3;
              if ((unint64_t)(v76 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v77 = (v205 - v203) >> 2;
              if (v77 <= v76 + 1)
                v77 = v76 + 1;
              if ((unint64_t)(v205 - v203) >= 0x7FFFFFFFFFFFFFF8)
                v78 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v78 = v77;
              if (v78)
                v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v205, v78);
              else
                v79 = 0;
              v96 = &v79[8 * v76];
              *(_QWORD *)v96 = v64;
              v66 = v96 + 8;
              v98 = v203;
              v97 = v204;
              if (v204 != v203)
              {
                do
                {
                  v99 = *((_QWORD *)v97 - 1);
                  v97 -= 8;
                  *((_QWORD *)v96 - 1) = v99;
                  v96 -= 8;
                }
                while (v97 != v98);
                v97 = v203;
              }
              v203 = v96;
              v204 = v66;
              v205 = &v79[8 * v78];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_QWORD *)v204 = v63;
              v66 = v65 + 8;
            }
            v204 = v66;
            do
            {
              v100 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
            v101 = (unint64_t *)((char *)v202[0]
                                      + 8
                                      * *((_QWORD *)v201[0] + **(_QWORD **)(*(_QWORD *)(a3[16] + 8 * v100[1]) + 24)));
            v102 = *v101;
            v103 = v101[1];
            if (*v101 < v103)
            {
              do
              {
                v104 = *(_QWORD *)&v203[8 * v102];
                if ((*(_QWORD *)(v104 + 16) & 0xALL) != 0 && (*(_QWORD *)(v104 + 16) & 0x44) == 0)
                  addTransitionToLattice(a3, v200, (uint64_t **)v104, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 56), a4, (uint64_t *)v198, v188);
                ++v102;
              }
              while (v103 != v102);
            }
            goto LABEL_57;
          }
          v29 = TAllocator::allocate((TAllocator *)v199, 24);
          v30 = v27[2] & 0x40 | 4;
          *v29 = v27;
          v29[1] = v187;
          v29[2] = v30;
          v31 = v204;
          if (v204 >= v205)
          {
            v32 = (v204 - v203) >> 3;
            if ((unint64_t)(v32 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v33 = (v205 - v203) >> 2;
            if (v33 <= v32 + 1)
              v33 = v32 + 1;
            if ((unint64_t)(v205 - v203) >= 0x7FFFFFFFFFFFFFF8)
              v34 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v34 = v33;
            if (v34)
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v205, v34);
            else
              v35 = 0;
            v92 = &v35[8 * v32];
            *(_QWORD *)v92 = v29;
            v62 = v92 + 8;
            v94 = v203;
            v93 = v204;
            if (v204 != v203)
            {
              do
              {
                v95 = *((_QWORD *)v93 - 1);
                v93 -= 8;
                *((_QWORD *)v92 - 1) = v95;
                v92 -= 8;
              }
              while (v93 != v94);
              goto LABEL_200;
            }
            goto LABEL_201;
          }
LABEL_98:
          *(_QWORD *)v31 = v29;
          v62 = v31 + 8;
          goto LABEL_203;
        }
        if ((v28 & 0x40) == 0)
        {
          v29 = TAllocator::allocate((TAllocator *)v199, 24);
          *v29 = v27;
          v29[1] = v187;
          v29[2] = 18;
          v31 = v204;
          if (v204 < v205)
            goto LABEL_98;
          v88 = (v204 - v203) >> 3;
          if ((unint64_t)(v88 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v89 = (v205 - v203) >> 2;
          if (v89 <= v88 + 1)
            v89 = v88 + 1;
          if ((unint64_t)(v205 - v203) >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v89;
          if (v34)
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v205, v34);
          else
            v35 = 0;
          v92 = &v35[8 * v88];
          *(_QWORD *)v92 = v29;
          v62 = v92 + 8;
          v121 = v203;
          v93 = v204;
          if (v204 != v203)
          {
            do
            {
              v122 = *((_QWORD *)v93 - 1);
              v93 -= 8;
              *((_QWORD *)v92 - 1) = v122;
              v92 -= 8;
            }
            while (v93 != v121);
            goto LABEL_200;
          }
          goto LABEL_201;
        }
      }
LABEL_57:
      if (++v24 == v25)
        goto LABEL_216;
    }
LABEL_54:
    if ((v28 & 0x40) == 0)
      goto LABEL_55;
    goto LABEL_56;
  }
LABEL_244:
  *((_QWORD *)v202[0] + v182) = (v204 - v203) >> 3;
  v143 = a3;
  v145 = (_QWORD *)a3[25];
  v144 = (_QWORD *)a3[26];
  if (v145 == v144)
  {
    v146 = v188;
  }
  else
  {
    v146 = v188;
    while (!*v145)
    {
      if (++v145 == v144)
        goto LABEL_261;
    }
  }
  if (v145 != v144)
  {
    do
    {
      v147 = (unint64_t *)((char *)v202[0] + 8 * *((_QWORD *)v201[0] + *(_QWORD *)*v145));
      v148 = *v147;
      v149 = v147[1];
      if (*v147 < v149)
      {
        do
        {
          v150 = *(_QWORD *)&v203[8 * v148];
          if ((*(_QWORD *)(v150 + 16) & 0x43) != 0x40)
            addTransitionToLattice(v143, v200, (uint64_t **)v150, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 56), a4, (uint64_t *)v198, v146);
          ++v148;
        }
        while (v149 != v148);
      }
      v151 = v145 + 1;
      while (v151 != v144)
      {
        if (*v151++)
        {
          v145 = v151 - 1;
          goto LABEL_260;
        }
      }
      v145 = v144;
LABEL_260:
      ;
    }
    while (v145 != (_QWORD *)v143[26]);
  }
LABEL_261:
  if (!*v146)
    *v146 = 1;
  v153 = *(_QWORD *)(a1 + 56);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v153 + 496));
  v159 = v182;
  if (*(_BYTE *)(v153 + TParam::getValidConfig((TParam *)(v153 + 496), ActiveConfigHandle) + 648))
  {
    tknPrintf("=== START PRODUCTIONS ===\n", v155, v156, v157, v158);
    v164 = v203;
    if (v204 != v203)
    {
      v165 = 0;
      v166 = 0;
      do
      {
        if (v166 <= v159)
        {
          do
          {
            if (v165 != *((_QWORD *)v202[0] + v166))
              break;
            tknPrintf("Productions for State #%llu...\n", v160, v161, v162, v163, v166++);
          }
          while (v166 <= v159);
          v164 = v203;
        }
        v167 = *(_QWORD *)&v164[8 * v165];
        v168 = *(_QWORD *)(v167 + 8);
        v169 = (unsigned int **)*((_QWORD *)v200[0] + v168);
        if (v169)
        {
          v170 = *v169;
          v194 = (uint64_t)v196;
          v195 = xmmword_209A57DD0;
          v197 = 1;
          if (*(_QWORD *)v167)
          {
            TWord::getWrittenForm(*((__int32 ***)v200[0] + v168), (uint64_t)&v194);
            v171 = *(_QWORD **)v167;
            if (*(_QWORD *)v167)
            {
              do
              {
                __p = v192;
                v191 = xmmword_209A57DD0;
                v193 = 1;
                TWord::getWrittenForm(*((__int32 ***)v200[0] + v171[1]), (uint64_t)&__p);
                if (*((_QWORD *)&v191 + 1) >= (unint64_t)v191)
                {
                  if (v193)
                  {
                    v209[0] = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v191 + 1), v209, 1uLL);
                    v172 = (int *)__p;
                    --*((_QWORD *)&v191 + 1);
                  }
                  else
                  {
                    v172 = (int *)__p;
                    if ((_QWORD)v191)
                      *((_DWORD *)__p + v191 - 1) = 0;
                  }
                }
                else
                {
                  v172 = (int *)__p;
                  *((_DWORD *)__p + *((_QWORD *)&v191 + 1)) = 0;
                }
                v173 = 0;
                while (v172[v173++])
                  ;
                TBuffer<wchar_t>::insert((uint64_t)&v194, 0, v172, v173 - 1);
                v171 = (_QWORD *)*v171;
                if (v193)
                {
                  if (__p != v192 && __p != 0)
                    MEMORY[0x20BD149A8]();
                }
              }
              while (v171);
            }
            if (*((_QWORD *)&v195 + 1) >= (unint64_t)v195)
            {
              if (v197)
              {
                LODWORD(__p) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v194, *((unint64_t *)&v195 + 1), (int *)&__p, 1uLL);
                v170 = (unsigned int *)v194;
                --*((_QWORD *)&v195 + 1);
              }
              else
              {
                v170 = (unsigned int *)v194;
                if ((_QWORD)v195)
                  *(_DWORD *)(v194 + 4 * v195 - 4) = 0;
              }
            }
            else
            {
              v170 = (unsigned int *)v194;
              *(_DWORD *)(v194 + 4 * *((_QWORD *)&v195 + 1)) = 0;
            }
          }
          v176 = *(_QWORD *)(v167 + 16);
          loggableUnicode(v170, &__p);
          if (v191 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          tknPrintf("Production #%llu (0x%llx): %s\n", v177, v178, v179, v180, v165, v176, p_p);
          v159 = v182;
          if (SHIBYTE(v191) < 0)
            operator delete(__p);
          if (v197 && (_BYTE *)v194 != v196 && v194)
            MEMORY[0x20BD149A8]();
        }
        else
        {
          tknPrintf("Production #%llu (0x%llx): NOT A WORD\n", v160, v161, v162, v163, v165, *(_QWORD *)(v167 + 16));
        }
        ++v165;
        v164 = v203;
      }
      while (v165 < (v204 - v203) >> 3);
    }
    tknPrintf("=== END PRODUCTIONS ===\n", v160, v161, v162, v163);
  }
  if (v198[0])
  {
    v198[1] = v198[0];
    operator delete(v198[0]);
  }
  TAllocator::clear((TAllocator *)v199);
  if (v200[0])
  {
    v200[1] = v200[0];
    operator delete(v200[0]);
  }
  if (v201[0])
  {
    v201[1] = v201[0];
    operator delete(v201[0]);
  }
  if (v202[0])
  {
    v202[1] = v202[0];
    operator delete(v202[0]);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
}

void sub_2097C09B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  TAllocator::clear((TAllocator *)(v1 - 256));
  v3 = *(void **)(v1 - 216);
  if (v3)
  {
    *(_QWORD *)(v1 - 208) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 192);
  if (v4)
  {
    *(_QWORD *)(v1 - 184) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 - 168);
  if (v5)
  {
    *(_QWORD *)(v1 - 160) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(v1 - 144);
  if (v6)
  {
    *(_QWORD *)(v1 - 136) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v1 - 120);
  if (v7)
  {
    *(_QWORD *)(v1 - 112) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

_QWORD *addTransitionToLattice(_QWORD *result, _QWORD *a2, uint64_t **a3, uint64_t a4, uint64_t a5, void **a6, uint64_t *a7, _QWORD *a8)
{
  uint64_t **v10;
  _QWORD *v12;
  TParam *v13;
  uint64_t ActiveConfigHandle;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t *v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int32 **v28;
  int isUpper;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t **v33;
  int v34;
  unsigned __int8 v35;
  __int32 v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t **v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int *v45;
  uint64_t v46;
  int v48;
  unsigned __int8 v49;
  __int32 v50;
  __int32 v51;
  uint64_t v52;
  __int32 *v53;
  uint64_t Word;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  __int32 *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  unsigned int *v64;
  void *v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void **v71;
  void *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void **v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int32 *v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  unint64_t v97;
  uint64_t *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  TLocaleInfo *v110;
  TLocaleInfo *v111;
  uint64_t **v112;
  void **v113;
  int v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v121;
  unint64_t v122;
  uint64_t v123;
  int v124[2];
  uint64_t v126;
  uint64_t v127;
  int v128;
  unint64_t v129;
  void *v130;
  __int128 v131;
  _BYTE v132[1024];
  char v133;
  void *__p[2];
  char v135;
  _BYTE *v136;
  void *v137;
  uint64_t v138;
  uint64_t *v139;
  _QWORD *v140;
  unint64_t v141;
  void *v142;
  char v143;
  int *v144;
  __int128 v145;
  _BYTE v146[785];
  char v147;
  __int32 *v148;
  __int128 v149;
  _BYTE v150[1024];
  char v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  int v171[5];

  if (((_BYTE)a3[2] & 0x20) != 0)
    return result;
  v10 = a3;
  v12 = result;
  v13 = (TParam *)(a5 + 496);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(a5 + 496));
  v15 = *((unsigned __int8 *)v13 + TParam::getValidConfig(v13, ActiveConfigHandle) + 152);
  v16 = TParam::getActiveConfigHandle((TParam *)(a5 + 744));
  v17 = *(unsigned __int8 *)(a5 + 744 + TParam::getValidConfig((TParam *)(a5 + 744), v16) + 152);
  v18 = TParam::getActiveConfigHandle((TParam *)(a5 + 1344));
  v114 = *(unsigned __int8 *)(a5 + 1344 + TParam::getValidConfig((TParam *)(a5 + 1344), v18) + 152);
  v115 = a5;
  v19 = TParam::getActiveConfigHandle((TParam *)(a5 + 992));
  v20 = *(int *)(a5 + 992 + 4 * TParam::getValidConfig((TParam *)(a5 + 992), v19) + 160);
  v21 = v10[1];
  v22 = *(uint64_t ***)(v12[16] + 8 * (_QWORD)v21);
  v127 = *v22[3];
  v119 = *v22[2];
  v23 = *v22;
  v24 = *((_DWORD *)*v22 + 4);
  v126 = (*v22)[3];
  v117 = **v22;
  v118 = (*v22)[4];
  v129 = (*v22)[5];
  v25 = *((_OWORD *)*v22 + 6);
  v167 = *((_OWORD *)*v22 + 5);
  v168 = v25;
  v26 = *((_OWORD *)v23 + 8);
  v169 = *((_OWORD *)v23 + 7);
  v170 = v26;
  v27 = *((_OWORD *)v23 + 4);
  v165 = *((_OWORD *)v23 + 3);
  v166 = v27;
  v152 = a4 + 256;
  v153 = 0u;
  v154 = 0u;
  v155 = 0u;
  v156 = 0u;
  v157 = 0u;
  v158 = 0u;
  v159 = 0u;
  v160 = 0u;
  v161 = 0u;
  v162 = 0u;
  v163 = 0u;
  v164 = 0u;
  v128 = v24;
  if ((v24 & 1) != 0)
  {
    v28 = 0;
  }
  else
  {
    v28 = *(__int32 ***)(*a2 + 8 * (_QWORD)v21);
    if (*v10 || ((_BYTE)v10[2] & 0x1C) != 0)
    {
      v148 = (__int32 *)v150;
      v149 = xmmword_209A57DD0;
      v151 = 1;
      TWord::getWrittenForm(v28, (uint64_t)&v148);
      v123 = a4 + 240;
      if (v17)
      {
        if (((_BYTE)v10[2] & 0x14) != 0)
        {
          isUpper = 0;
        }
        else
        {
          v33 = v10;
          v34 = *v148;
          if ((v35 & 1) == 0
          {
            v110 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v110);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v110;
          }
          isUpper = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v34);
          v10 = v33;
        }
        v36 = TLocaleInfo::toLower(v123, *v148);
        *v148 = v36;
      }
      else
      {
        isUpper = 0;
      }
      v121 = isUpper;
      v112 = v10;
      v113 = a6;
      v37 = *v10;
      while (v37)
      {
        v144 = (int *)v146;
        v145 = xmmword_209A57DD0;
        v147 = 1;
        v38 = v37[1];
        v39 = *(uint64_t ***)(v12[16] + 8 * v38);
        v23 = *v39;
        v40 = *((_DWORD *)*v39 + 4);
        v126 = (*v39)[3];
        v127 = *v39[3];
        v41 = (*v39)[5] + v129;
        if (v41 >= v20)
          v42 = v20;
        else
          v42 = 0;
        v43 = v41 - v42;
        v129 = v43;
        if (*((_BYTE *)v12 + 248))
        {
          if (v43 >= v20)
            v44 = v20;
          else
            v44 = 0;
          TLatticeProcessor::combineMrecData((uint64_t)&v165, (uint64_t)(v23 + 6), v44);
          v38 = v37[1];
        }
        TWord::getWrittenForm(*(__int32 ***)(*a2 + 8 * v38), (uint64_t)&v144);
        if (*((_QWORD *)&v145 + 1) >= (unint64_t)v145)
        {
          if (v147)
          {
            LODWORD(v130) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v144, *((unint64_t *)&v145 + 1), (int *)&v130, 1uLL);
            v45 = v144;
            --*((_QWORD *)&v145 + 1);
          }
          else
          {
            v45 = v144;
            if ((_QWORD)v145)
              v144[(_QWORD)v145 - 1] = 0;
          }
        }
        else
        {
          v45 = v144;
          v144[*((_QWORD *)&v145 + 1)] = 0;
        }
        v46 = 0;
        v128 |= v40;
        while (v45[v46++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)&v148, 0, v45, v46 - 1);
        if (v17)
        {
          if ((v37[2] & 0x14) == 0)
          {
            v48 = *v148;
            if ((v49 & 1) == 0
            {
              v111 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v111);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v111;
            }
            v121 |= TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v48);
          }
          v50 = TLocaleInfo::toLower(v123, *v148);
          *v148 = v50;
        }
        v37 = (uint64_t *)*v37;
        if (v147 && v144 != (int *)v146 && v144)
          MEMORY[0x20BD149A8]();
      }
      v10 = v112;
      v31 = v119;
      v30 = a7;
      v32 = v129;
      if (v17 && (v121 & 1) != 0)
      {
        v51 = TLocaleInfo::toUpper(v123, *v148);
        *v148 = v51;
      }
      v52 = a4;
      if (*((_QWORD *)&v149 + 1) >= (unint64_t)v149)
      {
        if (v151)
        {
          LODWORD(v144) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v148, *((unint64_t *)&v149 + 1), (int *)&v144, 1uLL);
          v53 = v148;
          --*((_QWORD *)&v149 + 1);
          v52 = a4;
        }
        else
        {
          v53 = v148;
          if ((_QWORD)v149)
            v148[(_QWORD)v149 - 1] = 0;
        }
      }
      else
      {
        v53 = v148;
        v148[*((_QWORD *)&v149 + 1)] = 0;
      }
      Word = TLexicon::findWord(v52, v53);
      v28 = (__int32 **)Word;
      if (v114 && !Word)
      {
        v144 = (int *)v146;
        v145 = xmmword_209A57DD0;
        v147 = 1;
        if (*((_QWORD *)&v149 + 1) >= (unint64_t)v149)
        {
          if (v151)
          {
            LODWORD(v130) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v148, *((unint64_t *)&v149 + 1), (int *)&v130, 1uLL);
            v55 = v148;
            --*((_QWORD *)&v149 + 1);
          }
          else
          {
            v55 = v148;
            if ((_QWORD)v149)
              v148[(_QWORD)v149 - 1] = 0;
          }
        }
        else
        {
          v55 = v148;
          v148[*((_QWORD *)&v149 + 1)] = 0;
        }
        TBuffer<wchar_t>::assign((uint64_t)&v144, v55);
        v56 = TParam::getActiveConfigHandle((TParam *)(v115 + 1592));
        *(_QWORD *)v124 = *(int *)(v115 + 4 * TParam::getValidConfig((TParam *)(v115 + 1592), v56) + 1752);
        v57 = TParam::getActiveConfigHandle((TParam *)(v115 + 1944));
        v122 = *(int *)(v115 + 4 * TParam::getValidConfig((TParam *)(v115 + 1944), v57) + 2104);
        v58 = (__int32 *)TStringParam::get((TStringParam *)(v115 + 2296));
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v142, v58);
        v59 = 0;
        v28 = 0;
        v141 = 0;
        v140 = 0;
        v139 = (uint64_t *)&v140;
        v60 = *((_QWORD *)&v145 + 1);
        if (*((_QWORD *)&v145 + 1) > *(_QWORD *)v124)
        {
          v28 = 0;
          v61 = -1;
          while (1)
          {
            TBuffer<wchar_t>::resize((uint64_t)&v144, v60 - 1);
            v137 = 0;
            v136 = 0;
            v138 = 0;
            std::vector<TItnRule *>::resize((uint64_t)&v136, 0);
            if (*((_QWORD *)&v145 + 1) >= (unint64_t)v145)
            {
              if (v147)
              {
                LODWORD(v130) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v144, *((unint64_t *)&v145 + 1), (int *)&v130, 1uLL);
                --*((_QWORD *)&v145 + 1);
              }
              else if ((_QWORD)v145)
              {
                v144[(_QWORD)v145 - 1] = 0;
              }
            }
            else
            {
              v144[*((_QWORD *)&v145 + 1)] = 0;
            }
            TLexicon::findWordsCollated(a4);
            if (v15)
            {
              v62 = v137;
              v63 = v136;
              if (*((_QWORD *)&v149 + 1) >= (unint64_t)v149)
              {
                if (v151)
                {
                  LODWORD(__p[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v148, *((unint64_t *)&v149 + 1), (int *)__p, 1uLL);
                  v64 = (unsigned int *)v148;
                  --*((_QWORD *)&v149 + 1);
                }
                else
                {
                  v64 = (unsigned int *)v148;
                  if ((_QWORD)v149)
                    v148[(_QWORD)v149 - 1] = 0;
                }
              }
              else
              {
                v64 = (unsigned int *)v148;
                v148[*((_QWORD *)&v149 + 1)] = 0;
              }
              loggableUnicode(v64, &v130);
              if (v131 >= 0)
                v65 = &v130;
              else
                v65 = v130;
              if (*((_QWORD *)&v145 + 1) >= (unint64_t)v145)
              {
                if (v147)
                {
                  v171[0] = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v144, *((unint64_t *)&v145 + 1), v171, 1uLL);
                  v66 = (unsigned int *)v144;
                  --*((_QWORD *)&v145 + 1);
                }
                else
                {
                  v66 = (unsigned int *)v144;
                  if ((_QWORD)v145)
                    v144[(_QWORD)v145 - 1] = 0;
                }
              }
              else
              {
                v66 = (unsigned int *)v144;
                v144[*((_QWORD *)&v145 + 1)] = 0;
              }
              loggableUnicode(v66, __p);
              v71 = __p;
              if (v135 < 0)
                v71 = (void **)__p[0];
              tknPrintf("Found %llu candidates to replace '%s' with a collated prefix '%s'.\n", v67, v68, v69, v70, (v62 - v63) >> 3, v65, v71);
              if (v135 < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v131) < 0)
                operator delete(v130);
            }
            v72 = v137;
            if (v137 != v136)
              break;
LABEL_121:
            if (v72)
            {
              v137 = v72;
              operator delete(v72);
            }
            v60 = *((_QWORD *)&v145 + 1);
            if (*((_QWORD *)&v145 + 1) <= *(_QWORD *)v124 || v61 < 3 || v141 > v122)
            {
              v59 = v140;
              v10 = v112;
              a6 = v113;
              goto LABEL_127;
            }
          }
          v73 = 0;
          v72 = v136;
          while (1)
          {
            v130 = (void *)**((_QWORD **)v72 + v73);
            if (&v140 == (_QWORD **)std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::find<wchar_t const*>((uint64_t)&v139, (const __int32 **)&v130))break;
            if (v15)
            {
              loggableUnicode(**(unsigned int ***)&v136[8 * v73], &v130);
              v78 = v131 >= 0 ? &v130 : (void **)v130;
              tknPrintf("Skipping already seen candidate '%s'.\n", v74, v75, v76, v77, v78);
              if (SHIBYTE(v131) < 0)
                operator delete(v130);
            }
LABEL_117:
            ++v73;
            v72 = v136;
            if (v73 >= ((_BYTE *)v137 - v136) >> 3)
              goto LABEL_121;
          }
          v130 = **(void ***)&v136[8 * v73];
          std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__emplace_unique_key_args<wchar_t const*,wchar_t const* const&>(&v139, (const __int32 **)&v130, (uint64_t *)&v130);
          v79 = *((_QWORD *)&v149 + 1);
          v130 = v132;
          v131 = xmmword_209A57DD0;
          v133 = 1;
          TWord::getWrittenForm(*(__int32 ***)&v136[8 * v73], (uint64_t)&v130);
          v80 = *((_QWORD *)&v131 + 1);
          if (*((_QWORD *)&v149 + 1) >= (unint64_t)v149)
          {
            if (v151)
            {
              LODWORD(__p[0]) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v148, *((unint64_t *)&v149 + 1), (int *)__p, 1uLL);
              v81 = v148;
              --*((_QWORD *)&v149 + 1);
            }
            else
            {
              v81 = v148;
              if ((_QWORD)v149)
                v148[(_QWORD)v149 - 1] = 0;
            }
          }
          else
          {
            v81 = v148;
            v148[*((_QWORD *)&v149 + 1)] = 0;
          }
          v82 = TAligner<wchar_t const,TRneCost>::align<wchar_t const*>((uint64_t)&v152, v81, (uint64_t)&v81[v79], **(int ***)&v136[8 * v73], **(_QWORD **)&v136[8 * v73] + 4 * v80);
          if (!v15)
            goto LABEL_110;
          loggableUnicode(**(unsigned int ***)&v136[8 * v73], __p);
          v87 = __p;
          if (v135 < 0)
            v87 = (void **)__p[0];
          tknPrintf("Edit distance score for '%s' is %llu.\n", v83, v84, v85, v86, v87, v82);
          if (v135 < 0)
          {
            operator delete(__p[0]);
            if (!v28)
              goto LABEL_112;
          }
          else
          {
LABEL_110:
            if (!v28)
              goto LABEL_112;
          }
          if (v61 <= v82)
          {
LABEL_113:
            if (v133 && v130 != v132 && v130)
              MEMORY[0x20BD149A8]();
            goto LABEL_117;
          }
LABEL_112:
          v28 = *(__int32 ***)&v136[8 * v73];
          v61 = v82;
          goto LABEL_113;
        }
LABEL_127:
        std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v139, v59);
        if (v143 < 0)
          operator delete(v142);
        v31 = v119;
        v30 = a7;
        v32 = v129;
        if (v147 && v144 != (int *)v146 && v144)
          MEMORY[0x20BD149A8]();
      }
      if (!v28)
      {
        if (*((_QWORD *)&v149 + 1) >= (unint64_t)v149)
        {
          if (v151)
          {
            LODWORD(v144) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v148, *((unint64_t *)&v149 + 1), (int *)&v144, 1uLL);
            v88 = v148;
            --*((_QWORD *)&v149 + 1);
          }
          else
          {
            v88 = v148;
            if ((_QWORD)v149)
              v148[(_QWORD)v149 - 1] = 0;
          }
        }
        else
        {
          v88 = v148;
          v148[*((_QWORD *)&v149 + 1)] = 0;
        }
        v28 = (__int32 **)TLexicon::addTempWord(a4, v88, 0, 0, 0);
      }
      if (v151 && v148 != (__int32 *)v150 && v148)
        MEMORY[0x20BD149A8]();
      goto LABEL_145;
    }
  }
  v31 = v119;
  v30 = a7;
  v32 = v129;
LABEL_145:
  v89 = *v30;
  if (*(_QWORD *)(*v30 + 8 * v127) == -1)
    *(_QWORD *)(v89 + 8 * v127) = (*a8)++;
  if (*(_QWORD *)(v89 + 8 * v31) == -1)
    *(_QWORD *)(v89 + 8 * v31) = (*a8)++;
  v90 = operator new();
  v91 = v90;
  *(_QWORD *)v90 = v117;
  *(_DWORD *)(v90 + 16) = v128;
  if (v28)
    v92 = *v28;
  else
    v92 = (__int32 *)v23[1];
  *(_QWORD *)(v90 + 8) = v92;
  v93 = *v30;
  *(_QWORD *)(v90 + 24) = *(_QWORD *)(*v30 + 8 * v127);
  *(_QWORD *)(v90 + 32) = *(_QWORD *)(v93 + 8 * v31);
  *(_QWORD *)(v90 + 40) = v126;
  *(_QWORD *)(v90 + 48) = v118;
  *(_QWORD *)(v90 + 56) = v32;
  v94 = v166;
  *(_OWORD *)(v90 + 64) = v165;
  *(_OWORD *)(v90 + 80) = v94;
  v95 = v170;
  *(_OWORD *)(v90 + 128) = v169;
  *(_OWORD *)(v90 + 144) = v95;
  v96 = v168;
  *(_OWORD *)(v90 + 96) = v167;
  *(_OWORD *)(v90 + 112) = v96;
  v97 = (unint64_t)a6[2];
  v98 = (uint64_t *)a6[1];
  if ((unint64_t)v98 >= v97)
  {
    v100 = ((char *)v98 - (_BYTE *)*a6) >> 3;
    if ((unint64_t)(v100 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v101 = v97 - (_QWORD)*a6;
    v102 = v101 >> 2;
    if (v101 >> 2 <= (unint64_t)(v100 + 1))
      v102 = v100 + 1;
    if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
      v103 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v103 = v102;
    if (v103)
      v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a6 + 2), v103);
    else
      v104 = 0;
    v105 = (uint64_t *)&v104[8 * v100];
    v106 = &v104[8 * v103];
    *v105 = v91;
    v99 = v105 + 1;
    v108 = (char *)*a6;
    v107 = (char *)a6[1];
    if (v107 != *a6)
    {
      do
      {
        v109 = *((_QWORD *)v107 - 1);
        v107 -= 8;
        *--v105 = v109;
      }
      while (v107 != v108);
      v107 = (char *)*a6;
    }
    *a6 = v105;
    a6[1] = v99;
    a6[2] = v106;
    if (v107)
      operator delete(v107);
  }
  else
  {
    *v98 = v90;
    v99 = v98 + 1;
  }
  a6[1] = v99;
  v10[2] = (uint64_t *)((unint64_t)v10[2] | 0x20);
  return TAligner<wchar_t const,TRneCost>::~TAligner(&v152);
}

void sub_2097C18B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  unint64_t v16;

  MEMORY[0x20BD149A8](v14, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0xD80]))
  {
    v16 = STACK[0x968];
    if (STACK[0x968] != a14)
    {
      if (v16)
        MEMORY[0x20BD149A8](v16, 0x1000C4052888210);
    }
  }
  TAligner<wchar_t const,TRneCost>::~TAligner(&STACK[0xD88]);
  _Unwind_Resume(a1);
}

uint64_t TRne::apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v9;
  _QWORD *v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char *exception;
  std::string *v19;
  __int128 v20;
  void *v21[2];
  uint64_t v22;
  void *__p[3];
  uint64_t v24;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(v5 + 136);
  *(_QWORD *)(v5 + 136) = a4;
  if (*(_QWORD *)(*(_QWORD *)(a3 + 256) + 8) != *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8))
  {
    tknPrintf("Error: The lattice lexicon handle does not match the lattice processor's lexicon handle.\n", a2, a3, a4, a5);
    std::string::basic_string[abi:ne180100]<0>(v21, &byte_209A88803);
    __p[0] = (void *)aPpx;
    if (SHIBYTE(v22) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v21[0], (std::string::size_type)v21[1]);
    }
    else
    {
      *(_OWORD *)&__p[1] = *(_OWORD *)v21;
      v24 = v22;
    }
    __p[0] = &unk_24C214BA0;
    if (v24 >= 0)
      v17 = (const char *)&__p[1];
    else
      v17 = (const char *)__p[1];
    conditionalAssert(v17, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/rne/rne.cpp", 894, v15, v16);
    __p[0] = (void *)aPpx;
    if (SHIBYTE(v24) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    exception = (char *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *(_QWORD *)exception = aPpx;
    v19 = (std::string *)(exception + 8);
    if (SHIBYTE(__p[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      v20 = *(_OWORD *)__p;
      *((void **)exception + 3) = __p[2];
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    }
    *(_QWORD *)exception = &unk_24C214BA0;
  }
  memset(__p, 0, sizeof(__p));
  v21[0] = 0;
  TRne::applyInternal(a1, a2, (_QWORD *)a3, __p, v21);
  v9 = (_QWORD *)operator new();
  TLattice::TLattice(v9, __p, ((char *)__p[1] - (char *)__p[0]) >> 3, (unint64_t)v21[0], 1, 1, *(_BYTE *)(a3 + 248), *(_QWORD *)(a3 + 16), *(_QWORD *)(a1 + 16));
  v10 = __p[0];
  v11 = __p[1];
  if (__p[1] == __p[0])
  {
    v10 = __p[1];
  }
  else
  {
    v12 = 0;
    do
    {
      if (v10[v12])
      {
        MEMORY[0x20BD149A8](v10[v12], 0x10D2C401D7F962ALL);
        v10 = __p[0];
        v11 = __p[1];
      }
      ++v12;
    }
    while (v12 < (v11 - (_BYTE *)v10) >> 3);
  }
  v13 = v9[1];
  if (v10)
  {
    __p[1] = v10;
    operator delete(v10);
  }
  *(_QWORD *)(v5 + 136) = v6;
  return v13;
}

void sub_2097C1CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      *(_QWORD *)(v27 + 136) = v28;
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void TRne::apply(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t Word;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  void *__p;
  _QWORD *v58;
  uint64_t v59;
  void *v60[3];
  void *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;

  v10 = *(_QWORD *)(a1 + 56);
  v53 = *(_QWORD *)(v10 + 136);
  v54 = v10;
  *(_QWORD *)(v10 + 136) = a5;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)&v64, a3);
  if (a3)
  {
    v11 = 0;
    v12 = v65;
    do
    {
      v13 = **(_QWORD **)(*a2 + 8 * v11);
      if (v12 >= v66)
      {
        v14 = (v12 - v64) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v15 = (v66 - v64) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if ((unint64_t)(v66 - v64) >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v66, v16);
        else
          v17 = 0;
        v18 = &v17[8 * v14];
        *(_QWORD *)v18 = v13;
        v12 = v18 + 8;
        v20 = v64;
        v19 = v65;
        if (v65 != v64)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          v19 = v64;
        }
        v64 = v18;
        v65 = v12;
        v66 = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v12 = v13;
        v12 += 8;
      }
      v65 = v12;
      ++v11;
    }
    while (v11 != a3);
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  std::vector<TPItnTagHandle_fake **>::reserve(&v61, a4 - a3);
  std::vector<TLatticeConstructionTransData>::vector(v60, a4 - a3);
  if (a4 != a3)
  {
    v22 = 0;
    do
    {
      v23 = (char *)v60[0] + 160 * v22;
      *(_QWORD *)v23 = 2;
      *((_DWORD *)v23 + 4) = 0;
      *((_QWORD *)v23 + 1) = **(_QWORD **)(*a2 + 8 * (v22 + a3));
      v24 = (char *)v60[0] + 160 * v22;
      v24[3] = v22;
      v24[5] = v22++;
      v24[4] = v22;
      v24[6] = v22;
      v24[7] = 1;
      v25 = v62;
      if (v62 >= v63)
      {
        v27 = (v62 - (_BYTE *)v61) >> 3;
        if ((unint64_t)(v27 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v28 = (v63 - (_BYTE *)v61) >> 2;
        if (v28 <= v27 + 1)
          v28 = v27 + 1;
        if ((unint64_t)(v63 - (_BYTE *)v61) >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v63, v29);
        else
          v30 = 0;
        v31 = &v30[8 * v27];
        *(_QWORD *)v31 = v24;
        v26 = v31 + 8;
        v33 = (char *)v61;
        v32 = v62;
        if (v62 != v61)
        {
          do
          {
            v34 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *((_QWORD *)v31 - 1) = v34;
            v31 -= 8;
          }
          while (v32 != v33);
          v32 = (char *)v61;
        }
        v61 = v31;
        v62 = v26;
        v63 = &v30[8 * v29];
        if (v32)
          operator delete(v32);
      }
      else
      {
        *(_QWORD *)v62 = v24;
        v26 = v25 + 8;
      }
      v62 = v26;
    }
    while (v22 != a4 - a3);
  }
  v35 = (_QWORD *)operator new();
  TLattice::TLattice(v35, &v61, (v62 - (_BYTE *)v61) >> 3, ((v62 - (_BYTE *)v61) >> 3) + 1, 1, 1, 0, 0, *(_QWORD *)(a1 + 16));
  __p = 0;
  v58 = 0;
  v59 = 0;
  v56 = 0;
  TRne::applyInternal(a1, v36, v35, &__p, &v56);
  v37 = v58;
  if (v58 != __p)
  {
    v38 = 0;
    v37 = __p;
    do
    {
      Word = TLexicon::findWord(*(_QWORD *)(a1 + 16), *(__int32 **)(v37[v38] + 8));
      if (!Word)
        Word = (uint64_t)TLexicon::addTempWord(*(_QWORD *)(a1 + 16), *(int **)(*((_QWORD *)__p + v38) + 8), 0, 0, 0);
      v40 = *(_QWORD *)(*((_QWORD *)__p + v38) + 48) - *(_QWORD *)(*((_QWORD *)__p + v38) + 40);
      v42 = (uint64_t *)a6[1];
      v41 = (unint64_t)a6[2];
      if ((unint64_t)v42 >= v41)
      {
        v44 = ((char *)v42 - (_BYTE *)*a6) >> 4;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 60)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v46 = v41 - (_QWORD)*a6;
        if (v46 >> 3 > v45)
          v45 = v46 >> 3;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
          v47 = 0xFFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)(a6 + 2), v47);
        else
          v48 = 0;
        v49 = (uint64_t *)&v48[16 * v44];
        *v49 = Word;
        v49[1] = v40;
        v51 = (char *)*a6;
        v50 = (char *)a6[1];
        v52 = v49;
        if (v50 != *a6)
        {
          do
          {
            *((_OWORD *)v52 - 1) = *((_OWORD *)v50 - 1);
            v52 -= 2;
            v50 -= 16;
          }
          while (v50 != v51);
          v50 = (char *)*a6;
        }
        v43 = v49 + 2;
        *a6 = v52;
        a6[1] = v49 + 2;
        a6[2] = &v48[16 * v47];
        if (v50)
          operator delete(v50);
      }
      else
      {
        *v42 = Word;
        v42[1] = v40;
        v43 = v42 + 2;
      }
      a6[1] = v43;
      v37 = __p;
      if (*((_QWORD *)__p + v38))
      {
        MEMORY[0x20BD149A8](*((_QWORD *)__p + v38), 0x10D2C401D7F962ALL);
        v37 = __p;
      }
      ++v38;
    }
    while (v38 < v58 - v37);
  }
  if (v35)
  {
    (*(void (**)(_QWORD *))(*v35 + 8))(v35);
    v37 = __p;
  }
  if (v37)
  {
    v58 = v37;
    operator delete(v37);
  }
  if (v60[0])
  {
    v60[1] = v60[0];
    operator delete(v60[0]);
  }
  if (v61)
  {
    v62 = (char *)v61;
    operator delete(v61);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  *(_QWORD *)(v54 + 136) = v53;
}

void sub_2097C22B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v26;

  MEMORY[0x20BD149A8](v22, 0x10F1C4078920B39);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x2097C2090);
  }
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  v26 = *(void **)(v23 - 104);
  if (v26)
  {
    *(_QWORD *)(v23 - 96) = v26;
    operator delete(v26);
  }
  *(_QWORD *)(a12 + 136) = a11;
  _Unwind_Resume(a1);
}

uint64_t TRne::save(TRne *this, TDataManager *a2, TDataManager *a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *p_p;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  _QWORD *exception;
  std::string *v23;
  __int128 v24;
  void *__p;
  uint64_t v26;
  unsigned __int8 v27;
  _BYTE v28[24];
  uint64_t v29;
  void *v30;
  char v31;
  _BYTE v32[152];
  __int128 v33;
  uint64_t v34;
  _BYTE v35[16];
  unint64_t v36;

  v6 = *((_QWORD *)this + 2);
  v7 = (const char *)(v6 + 72);
  if (*(char *)(v6 + 95) < 0)
    v7 = *(const char **)v7;
  TOutputModel::TOutputModel((TOutputModel *)v35, a2, a3, v7, *((const TDataManager **)this + 8));
  if (v36 <= 1)
  {
    tknPrintf("Error: Unsupported model version for Roots and Endings: %llu\n", v8, v9, v10, v11, v36);
    std::string::basic_string[abi:ne180100]<0>(&v33, &byte_209A88803);
    *(_QWORD *)v28 = aPpx;
    if (SHIBYTE(v34) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v28[8], (const std::string::value_type *)v33, *((std::string::size_type *)&v33 + 1));
    }
    else
    {
      *(_OWORD *)&v28[8] = v33;
      v29 = v34;
    }
    *(_QWORD *)v28 = &unk_24C214BA0;
    if (v29 >= 0)
      v21 = &v28[8];
    else
      v21 = *(const char **)&v28[8];
    conditionalAssert(v21, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/rne/rne.cpp", 994, v19, v20);
    *(_QWORD *)v28 = aPpx;
    if (SHIBYTE(v29) < 0)
      operator delete(*(void **)&v28[8]);
    if (SHIBYTE(v34) < 0)
      operator delete((void *)v33);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v28, &byte_209A88803);
    *exception = aPpx;
    v23 = (std::string *)(exception + 1);
    if ((v28[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)v28, *(std::string::size_type *)&v28[8]);
    }
    else
    {
      v24 = *(_OWORD *)v28;
      exception[3] = *(_QWORD *)&v28[16];
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
    }
    *exception = &unk_24C214BA0;
  }
  v12 = (_QWORD *)MEMORY[0x24BEDB800];
  v13 = MEMORY[0x24BEDB848];
  if (a2)
  {
    TDataManager::setIntVar(a2, "RneVersion");
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
    TOutputStream::TOutputStream(&v33, v28, (uint64_t)"RneParam", *((_QWORD *)this + 2) + 240);
    TParamManager::save(*((_QWORD **)this + 7), (_QWORD **)&v33, 0);
    std::stringbuf::str();
    if ((v27 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v27 & 0x80u) == 0)
      v15 = v27;
    else
      v15 = v26;
    (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(_QWORD *)a2 + 48))(a2, "RneParam", p_p, v15);
    if ((char)v27 < 0)
      operator delete(__p);
    *(_QWORD *)v28 = *v12;
    *(_QWORD *)&v28[*(_QWORD *)(*(_QWORD *)v28 - 24)] = v12[3];
    *(_QWORD *)&v28[8] = v13 + 16;
    if (v31 < 0)
      operator delete(v30);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD1496C](v32);
  }
  if (a3)
  {
    TDataManager::setIntVar(a3, "RneVersion");
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
    TOutputStream::TOutputStream(&v33, v28, (uint64_t)"RneParam", *((_QWORD *)this + 2) + 240);
    TParamManager::save(*((_QWORD **)this + 7), (_QWORD **)&v33, 1);
    std::stringbuf::str();
    if ((v27 & 0x80u) == 0)
      v16 = &__p;
    else
      v16 = __p;
    if ((v27 & 0x80u) == 0)
      v17 = v27;
    else
      v17 = v26;
    (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(_QWORD *)a3 + 48))(a3, "RneParam", v16, v17);
    if ((char)v27 < 0)
      operator delete(__p);
    *(_QWORD *)v28 = *v12;
    *(_QWORD *)&v28[*(_QWORD *)(*(_QWORD *)v28 - 24)] = v12[3];
    *(_QWORD *)&v28[8] = v13 + 16;
    if (v31 < 0)
      operator delete(v30);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD1496C](v32);
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8));
}

void sub_2097C2728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_2097C2894(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x20BD1496C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD1496C](a1 + 112);
  return a1;
}

uint64_t TRne::getParamManager(TRne *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t TRne::getType(TRne *this)
{
  return 3;
}

uint64_t TLatticeProcessor::isAdaptive(TLatticeProcessor *this)
{
  return 0;
}

uint64_t TLatticeProcessor::isAdapted(TLatticeProcessor *this)
{
  return 0;
}

uint64_t TLatticeProcessor::isAdapting(TLatticeProcessor *this)
{
  return 0;
}

void TRneParamManager::~TRneParamManager(TRneParamManager *this)
{
  TRneParamManager::~TRneParamManager(this);
  JUMPOUT(0x20BD149A8);
}

{
  void **v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &unk_24C215840;
  v2 = (void **)((char *)this + 2296);
  *((_QWORD *)this + 287) = &unk_24C214170;
  v7 = (void **)((char *)this + 3648);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 3624);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 3600);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v7);
  for (i = 0; i != -1152; i -= 24)
  {
    if (*((char *)this + i + 3599) < 0)
      operator delete(*(void **)((char *)this + i + 3576));
  }
  TParam::~TParam(v2);
  TParam::~TParam((void **)this + 243);
  TParam::~TParam((void **)this + 199);
  v4 = 0;
  *((_QWORD *)this + 168) = off_24C2135E0;
  do
  {
    if (*((char *)this + v4 + 1591) < 0)
      operator delete(*(void **)((char *)this + v4 + 1568));
    v4 -= 24;
  }
  while (v4 != -48);
  TParam::~TParam((void **)this + 168);
  TParam::~TParam((void **)this + 124);
  v5 = 0;
  *((_QWORD *)this + 93) = off_24C2135E0;
  do
  {
    if (*((char *)this + v5 + 991) < 0)
      operator delete(*(void **)((char *)this + v5 + 968));
    v5 -= 24;
  }
  while (v5 != -48);
  TParam::~TParam((void **)this + 93);
  v6 = 0;
  *((_QWORD *)this + 62) = off_24C2135E0;
  do
  {
    if (*((char *)this + v6 + 743) < 0)
      operator delete(*(void **)((char *)this + v6 + 720));
    v6 -= 24;
  }
  while (v6 != -48);
  TParam::~TParam((void **)this + 62);
  *(_QWORD *)this = &unk_24C217520;
  TParam::~TParam((void **)this + 18);
  TParamManager::~TParamManager(this);
}

uint64_t TBoolParam::TBoolParam(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;

  v9 = TParam::TParam(a1, 0, a2, a3, a4, a6, a7);
  *(_QWORD *)v9 = off_24C2135E0;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_BYTE *)(v9 + 152) = a5;
  *(_QWORD *)(v9 + 112) |= 0x200uLL;
  TParam::notifyChange(v9, 0);
  return a1;
}

void sub_2097C2A08(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (SHIBYTE(v1[v3 + 30]) < 0)
      operator delete(v1[v3 + 28]);
    v3 -= 3;
    if (v3 == -6)
    {
      TParam::~TParam(v1);
      _Unwind_Resume(a1);
    }
  }
}

void TLattProcParamManager::~TLattProcParamManager(void **this)
{
  *this = &unk_24C217520;
  TParam::~TParam(this + 18);
  TParamManager::~TParamManager((TParamManager *)this);
}

{
  *this = &unk_24C217520;
  TParam::~TParam(this + 18);
  TParamManager::~TParamManager((TParamManager *)this);
  JUMPOUT(0x20BD149A8);
}

void TInputStream::TInputStream(TInputStream *this, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)this = a2;
  *((_BYTE *)this + 8) = a3;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 1;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = (char *)this + 160;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = a5;
  if (a4)
    MEMORY[0x20BD14750]((char *)this + 16, a4);
  *((_BYTE *)this + 9) = TInputStream::readHeader(this);
}

void sub_2097C2B48(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;

  v5 = v3;
  std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::destroy(v5, *(_QWORD **)(v1 + 160));
  if (*(char *)(v1 + 151) < 0)
    operator delete(*(void **)(v1 + 128));
  if (*(char *)(v1 + 127) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*(void **)(v1 + 72));
  if (*(char *)(v1 + 63) < 0)
    operator delete(*(void **)(v1 + 40));
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

char *TStringParam::get(TStringParam *this)
{
  uint64_t ActiveConfigHandle;
  char *v3;
  char *result;

  ActiveConfigHandle = TParam::getActiveConfigHandle(this);
  v3 = (char *)this + 24 * TParam::getValidConfig(this, ActiveConfigHandle);
  result = v3 + 152;
  if (v3[175] < 0)
    return *(char **)result;
  return result;
}

uint64_t TAligner<wchar_t const,TRneCost>::align<wchar_t const*>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _WORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  uint64_t v20;
  _WORD *v21;
  _QWORD *v22;
  _WORD *v23;
  _QWORD *v24;
  _WORD *v25;
  uint64_t v26;
  int *v27;
  int *v28;
  int *v29;
  BOOL SubstitutionCost;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  unint64_t v36;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _WORD *v42;
  unint64_t v43;
  unint64_t v44;

  v6 = (a3 - (uint64_t)a2) >> 2;
  v7 = (a5 - (uint64_t)a4) >> 2;
  if (v7 + 1 < (unint64_t)(v6 + 1))
    v8 = a2;
  else
    v8 = a4;
  v43 = v7 + 1;
  v44 = v6 + 1;
  if (v7 + 1 >= (unint64_t)(v6 + 1))
    v9 = v6 + 1;
  else
    v9 = v7 + 1;
  if (v7 + 1 >= (unint64_t)(v6 + 1))
    v10 = v7 + 1;
  else
    v10 = v6 + 1;
  if (v7 + 1 < (unint64_t)(v6 + 1))
    v11 = a4;
  else
    v11 = a2;
  v38 = v11;
  v39 = v10;
  v12 = (_QWORD *)(a1 + 8);
  std::vector<unsigned long>::resize(a1 + 8, 3 * v9);
  std::vector<unsigned short>::resize(a1 + 32, 2 * v9);
  v13 = *(_QWORD **)(a1 + 8);
  v14 = a1;
  v15 = *(_WORD **)(a1 + 32);
  v16 = &v13[v9];
  *v16 = 0;
  *v13 = 0;
  *v15 = 0;
  if (v9 >= 2)
  {
    v17 = *v16 + 2;
    for (i = 1; i != v9; ++i)
    {
      v13[i] = 2;
      v16[i] = v17;
      v15[i] = i;
      v17 += 2;
    }
  }
  if (v39 >= 2)
  {
    v19 = &v13[2 * v9];
    v20 = 1;
    v21 = &v15[v9];
    while (1)
    {
      v40 = v20;
      v41 = v16;
      v22 = v19;
      v23 = v21;
      *v19 = *v16 + 2;
      v42 = v15;
      *v21 = *v15 + 1;
      if (v9 >= 2)
        break;
LABEL_36:
      v19 = v41;
      v20 = v40 + 1;
      ++v8;
      v21 = v42;
      v15 = v23;
      v16 = v22;
      if (v40 + 1 == v39)
        return v22[v9 - 1];
    }
    v24 = v16 + 1;
    v25 = v15 + 1;
    v26 = 1;
    v27 = v38;
    while (1)
    {
      if (v43 >= v44)
        v28 = v27;
      else
        v28 = v8;
      if (v43 >= v44)
        v29 = v8;
      else
        v29 = v27;
      SubstitutionCost = TRneCost::getSubstitutionCost(v14, *v28, *v29);
      if (v31 == -1)
      {
        v35 = *v24 + 2;
        v32 = v26 - 1;
      }
      else
      {
        v32 = v26 - 1;
        v33 = *(v24 - 1) + v31;
        v22[v26] = v33;
        v34 = *(v25 - 1);
        if (!SubstitutionCost)
          ++v34;
        v23[v26] = v34;
        v35 = *v24 + 2;
        if (v35 >= v33)
          goto LABEL_33;
      }
      v22[v26] = v35;
      v23[v26] = *v25 + 1;
      v33 = v35;
LABEL_33:
      v36 = *(_QWORD *)(*v12 + 8 * v26) + v22[v32];
      if (v36 < v33)
      {
        v22[v26] = v36;
        v23[v26] = v23[v32] + 1;
      }
      ++v26;
      ++v27;
      ++v24;
      ++v25;
      if (v9 == v26)
        goto LABEL_36;
    }
  }
  v22 = &v13[v9];
  return v22[v9 - 1];
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

BOOL TRneCost::getSubstitutionCost(uint64_t a1, int a2, int a3)
{
  return a2 == a3;
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

_QWORD *TAligner<wchar_t const,TRneCost>::~TAligner(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

_QWORD *TOutputStream::TOutputStream(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  std::ios_base *v5;
  const std::locale *v6;
  std::locale *rdbuf;
  std::locale *v8;
  std::locale v10;
  std::locale v11;
  std::locale v12;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  v5 = (std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
  v6 = std::locale::classic();
  std::ios_base::getloc(v5);
  std::ios_base::imbue(v5, v6);
  std::locale::~locale(&v12);
  rdbuf = (std::locale *)v5->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, v6);
    v8 = rdbuf + 1;
    std::locale::locale(&v11, v8);
    std::locale::operator=(v8, v6);
    std::locale::~locale(&v11);
  }
  std::locale::~locale(&v10);
  return a1;
}

void sub_2097C3284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_2097C3304(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

uint64_t TRegisterable<TLatticeProcessor>::getRegistry()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    TRegisterable<TLatticeProcessor>::getRegistry(void)::s_registry = (uint64_t)v2;
  }
  return TRegisterable<TLatticeProcessor>::getRegistry(void)::s_registry;
}

void sub_2097C34AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TBaseRegistry<TLatticeProcessor *>::registerInstance(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  if (*a1)
  {
    v4 = (_QWORD *)a1[2];
  }
  else
  {
    v4 = (_QWORD *)a1[1];
    a1[2] = v4;
  }
  v5 = (uint64_t)(a1 + 3);
  v6 = a1[3];
  if ((unint64_t)v4 >= v6)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v4 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v6 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v5, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v4 = a2;
    v7 = v4 + 1;
  }
  a1[2] = v7;
  v19 = a1[1];
  ++*a1;
  return ((uint64_t)v7 - v19) >> 3;
}

_QWORD *std::vector<TLatticeConstructionTransData>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<TLatticeConstructionTransData>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 160 * ((160 * a2 - 160) / 0xA0) + 160;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2097C3644(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TLatticeConstructionTransData>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x19999999999999ALL)
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TLatticeConstructionTransData>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[160 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TLatticeConstructionTransData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(160 * a2);
}

uint64_t AdaptConfig::writeObject(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned __int16 v7;

  v7 = *(_DWORD *)a1;
  writeObject(a2, &v7, a3);
  v7 = *(_DWORD *)(a1 + 4);
  writeObject(a2, &v7, a3);
  writeObject(a2, (unsigned __int8 *)(a1 + 8), a3);
  writeObject(a2, (unsigned __int8 *)(a1 + 9), a3);
  writeObject(a2, (unsigned __int8 *)(a1 + 10), a3);
  writeObject(a2, (unsigned __int8 *)(a1 + 11), a3);
  writeObject(a2, (unsigned __int8 *)(a1 + 12), a3);
  return writeObject(a2, (unsigned __int8 *)(a1 + 13), a3);
}

uint64_t AdaptStats::writeObject(AdaptStats *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (uint64_t *)this + 2, a3);
  writeObject((uint64_t)a2, (uint64_t *)this + 3, a3);
  writeObject((uint64_t)a2, (int *)this + 10, a3);
  writeObject((uint64_t)a2, (uint64_t *)this + 4, a3);
  return writeObject<double>(a2, (uint64_t)this, a3);
}

_QWORD *AdaptConfig::clear(_QWORD *this)
{
  *(_QWORD *)((char *)this + 6) = 0;
  *this = 0;
  return this;
}

double AdaptStats::update(AdaptStats *this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  double result;

  result = *(double *)(*(_QWORD *)this + 8 * a2) + (double)a3 * (double)*((uint64_t *)this + 4) / (double)a4;
  *(double *)(*(_QWORD *)this + 8 * a2) = result;
  return result;
}

void readObject<double>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v8 = 0;
  readObject((uint64_t)a1, &v8, a3);
  v6 = v8;
  v7 = *(_DWORD *)(a2 + 12);
  if (v8 > v7)
    DgnPrimArray<unsigned long long>::reallocElts(a2, v8 - v7, 0);
  *(_DWORD *)(a2 + 8) = v6;
  readObjectArray(a1, *(double **)a2, v6, a3);
}

void AdaptStatsHistory::~AdaptStatsHistory(AdaptStatsHistory *this)
{
  DgnIOwnArray<AdaptConfigAndStats *>::releaseAll((uint64_t)this);
  DgnIOwnArray<AdaptConfigAndStats *>::releaseAll((uint64_t)this);
}

void AdaptStatsHistory::saveASB(AdaptStatsHistory *this, DFile *a2, DFileChecksums *a3, char a4, int a5)
{
  DgnStream *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t CurrentSubDirComponents;
  int v12;
  unsigned int v13;

  if ((a4 & 1) == 0 && *((_DWORD *)this + 2))
  {
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 1u, a5, "MRASB!?", 19, 2);
    v12 = *((_DWORD *)this + 2);
    v13 = 0;
    writeObject((uint64_t)v8, &v12, &v13);
    if (*((_DWORD *)this + 2))
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)this + 8 * v9);
        AdaptConfig::writeObject(v10, (uint64_t)v8, &v13);
        AdaptStats::writeObject((AdaptStats *)(v10 + 16), v8, &v13);
        ++v9;
      }
      while (v9 < *((unsigned int *)this + 2));
    }
    writeObjectChecksum((uint64_t)v8, (int *)&v13);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 1u, v13);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
}

_QWORD *DgnIOwnArray<AdaptConfigAndStats *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<AdaptConfigAndStats>(*(_QWORD *)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sizeObject<AdaptConfigAndStats *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject<unsigned long long>(v10 + 16, a2) + 42;
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t DgnDelete<AdaptConfigAndStats>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnPrimArray<unsigned int>::~DgnPrimArray(result + 16);
    *(_QWORD *)((char *)v1 + 6) = 0;
    *v1 = 0;
    return MemChunkFree(v1, 0);
  }
  return result;
}

unint64_t applyNewPronSetHeuristics(unint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  unsigned int v5;
  unint64_t v10;
  unsigned int i;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v5 = *(_DWORD *)(result + 8);
  if (v5)
  {
    v10 = result;
    for (i = 0; i < v5; ++i)
    {
      if (*(_DWORD *)(*(_QWORD *)v10 + 16 * i + 8) < a5)
      {
        v12 = i;
        result = DgnArray<DgnPrimArray<unsigned short>>::removeIndexKeepOrder(v10, i);
        LODWORD(v13) = *((_DWORD *)a4 + 2) - 1;
        if (v13 > i)
        {
          v14 = *a4;
          v15 = i;
          do
          {
            *(_DWORD *)(v14 + 4 * v15) = *(_DWORD *)(v14 + 4 * v15 + 4);
            v13 = (*((_DWORD *)a4 + 2) - 1);
            ++v15;
          }
          while (v15 < v13);
        }
        *((_DWORD *)a4 + 2) = v13;
        if (a2)
        {
          LODWORD(v16) = *(_DWORD *)(a2 + 8) - 1;
          if (v16 > i)
          {
            v17 = i;
            do
            {
              *(_BYTE *)(*(_QWORD *)a2 + v17) = *(_BYTE *)(*(_QWORD *)a2 + v17 + 1);
              v16 = (*(_DWORD *)(a2 + 8) - 1);
              ++v17;
            }
            while (v17 < v16);
          }
          *(_DWORD *)(a2 + 8) = v16;
          LODWORD(v16) = *(_DWORD *)(a3 + 8) - 1;
          if (v16 > i)
          {
            do
            {
              *(_BYTE *)(*(_QWORD *)a3 + v12) = *(_BYTE *)(*(_QWORD *)a3 + v12 + 1);
              v16 = (*(_DWORD *)(a3 + 8) - 1);
              ++v12;
            }
            while (v12 < v16);
          }
          *(_DWORD *)(a3 + 8) = v16;
        }
        --i;
        v5 = *(_DWORD *)(v10 + 8);
      }
    }
  }
  return result;
}

unint64_t DgnArray<DgnPrimArray<unsigned short>>::removeIndexKeepOrder(unint64_t result, unsigned int a2)
{
  unint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = result;
  v3 = *(_DWORD *)(result + 8);
  v4 = v3 - 1;
  if (v3 - 1 > a2)
  {
    v5 = 16 * a2;
    v6 = a2;
    do
    {
      ++v6;
      result = DgnPrimArray<unsigned short>::copyArraySlice(*(_QWORD *)v2 + v5, (uint64_t *)(*(_QWORD *)v2 + v5 + 16), 0, *(_DWORD *)(*(_QWORD *)v2 + v5 + 24));
      v3 = *(_DWORD *)(v2 + 8);
      v5 += 16;
    }
    while (v6 < (v3 - 1));
    v4 = v3 - 1;
  }
  if (v3 != 0x80000000)
  {
    if (v3)
    {
      v10 = v3;
      v11 = 16 * v3 - 16;
      do
      {
        --v10;
        result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)v2 + v11);
        v11 -= 16;
      }
      while (v10 > (int)v4);
    }
    else
    {
      v7 = 0;
      v8 = v4;
      do
      {
        v9 = (_QWORD *)(*(_QWORD *)v2 + v7);
        *v9 = 0;
        v9[1] = 0;
        v7 += 16;
        --v8;
      }
      while (v8);
    }
  }
  *(_DWORD *)(v2 + 8) = v4;
  return result;
}

uint64_t permuteToAltProns(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  ModelMgr *v10;
  unsigned int v11;
  uint64_t VocOrThrow;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)a1;
  v20 = 0;
  v21 = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)&v20, (uint64_t *)v2, 0, *(_DWORD *)(v2 + 8));
  if ((_DWORD)v21)
  {
    v9 = 0;
    v10 = (ModelMgr *)ModelMgr::smpModelMgr;
    v18 = 0;
    v19 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v11 = *(_DWORD *)(v20 + 4 * v9);
      VocOrThrow = ModelMgr::getVocOrThrow(v10, v11 >> 25, v3, v4, v5, v6, v7, v8);
      WordList::lookupAll(*(uint64_t **)(VocOrThrow + 48), v11 & 0xFFFFFF, (uint64_t)&v18);
      if (v19 >= 2)
      {
        DgnPrimArray<int>::copyArraySlice((unint64_t)&v16, &v20, 0, v21);
        *(_DWORD *)(v16 + 4 * v9) = v11 & 0xFE000000 | *(_DWORD *)(v18 + 4) & 0xFFFFFF;
        if (DgnArray<DgnPrimArray<unsigned int>>::find((uint64_t *)a1, (uint64_t)&v16) == -1)
        {
          v13 = *(unsigned int *)(a1 + 8);
          if (v13 == *(_DWORD *)(a1 + 12))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts(a1, 1, 1);
            v13 = *(unsigned int *)(a1 + 8);
          }
          v14 = (_QWORD *)(*(_QWORD *)a1 + 16 * v13);
          *v14 = 0;
          v14[1] = 0;
          DgnPrimArray<int>::copyArraySlice((unint64_t)v14, &v16, 0, v17);
          ++*(_DWORD *)(a1 + 8);
        }
      }
      ++v9;
    }
    while (v9 < v21);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v16);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
}

void sub_2097C4154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t GssResults::GssResults(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, _QWORD *a6, uint64_t a7, unsigned int a8)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  DgnArray<DgnPrimArray<unsigned int>>::copyArraySlice(a1, (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8));
  *(_DWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 20) = a5;
  GssResults::getChoiceWords(a1, a6, a7, a4);
  GssResults::getWordProns((GssResults *)a1, a8);
  return a1;
}

void sub_2097C423C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v6);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v5);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v3);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v2);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v1);
  _Unwind_Resume(a1);
}

uint64_t GssResults::getChoiceWords(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  int v43;
  int v44;
  int v45;

  v4 = (_DWORD *)result;
  v5 = *(unsigned int *)(a4 + 8);
  v6 = (_QWORD *)(result + 24);
  v7 = *(unsigned int *)(result + 32);
  if ((int)v7 >= 1)
  {
    v8 = 16 * v7 - 16;
    do
    {
      result = DgnPrimArray<unsigned int>::~DgnPrimArray(*v6 + v8);
      v8 -= 16;
    }
    while (v8 != -16);
  }
  v9 = 0;
  v4[8] = 0;
  v10 = v4[9];
  v38 = v6;
  if (v5 <= v10
    || (result = DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v6, v5 - v10, 0),
        v9 = v4[8],
        v9 <= v5))
  {
    if (v9 < v5)
    {
      v13 = v5 - v9;
      v14 = 16 * v9;
      do
      {
        v15 = (_QWORD *)(*v6 + v14);
        *v15 = 0;
        v15[1] = 0;
        v14 += 16;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    if ((int)v9 <= (int)v5)
    {
      v4[8] = v5;
LABEL_16:
      v16 = 0;
      v36 = v5;
      while (1)
      {
        v39 = v16;
        v17 = *(_QWORD *)a4 + 48 * v16;
        if (*(_DWORD *)(v17 + 8))
          break;
LABEL_48:
        v16 = v39 + 1;
        if (v39 + 1 == v36)
          return result;
      }
      v18 = 0;
      v19 = 0;
      v20 = 0;
      while (1)
      {
        v21 = *(_QWORD *)v17 + v18;
        if (*(_DWORD *)v21 != 1)
          break;
LABEL_47:
        ++v19;
        v18 += 96;
        if (v19 >= *(unsigned int *)(v17 + 8))
          goto LABEL_48;
      }
      v22 = *(unsigned __int16 *)(v21 + 4);
      v24 = *(_DWORD *)(v21 + 8);
      v23 = *(_DWORD *)(v21 + 12);
      v25 = *(_QWORD *)(*a2 + 8 * v20);
      v26 = v4;
      if ((_DWORD)v20 == v4[4])
        v27 = a3;
      else
        v27 = 0;
      v43 = *(_DWORD *)(v21 + 8);
      v40 = v23;
      if (v25)
      {
        v28 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v25 + 32))(v25, &v43);
        if (v27)
        {
LABEL_25:
          result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v27 + 32))(v27, &v43);
          goto LABEL_28;
        }
      }
      else
      {
        v28 = 0;
        if (v27)
          goto LABEL_25;
      }
      result = 0;
LABEL_28:
      v4 = v26;
      v29 = v26[4];
      if (((v28 | result) & 1) == 0)
      {
        v30 = (v20 + 1);
        v31 = *(_QWORD *)(*a2 + 8 * v30);
        if ((_DWORD)v30 == (_DWORD)v29)
          v32 = a3;
        else
          v32 = 0;
        v44 = v24;
        if (v31)
          (*(void (**)(uint64_t, int *))(*(_QWORD *)v31 + 32))(v31, &v44);
        if (v32)
          result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v32 + 32))(v32, &v44);
        else
          result = 0;
        v4 = v26;
        v29 = v26[4];
        if ((_DWORD)v30 != (_DWORD)v29 || (result & 1) != 0)
          goto LABEL_43;
        v20 = (v20 + 2);
        result = *(_QWORD *)(*a2 + 8 * v20);
        v45 = v24;
        if (result)
        {
          result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)result + 32))(result, &v45);
          v30 = v26[4];
        }
        v29 = v30;
      }
      v30 = v20;
LABEL_43:
      v20 = v30;
      if ((_DWORD)v30 == (_DWORD)v29)
      {
        v33 = *v38 + 16 * v39;
        v35 = (_DWORD *)(v33 + 8);
        v34 = *(unsigned int *)(v33 + 8);
        if (v34 == *(_DWORD *)(v33 + 12))
        {
          result = DgnPrimArray<unsigned int>::reallocElts(*v38 + 16 * v39, 1, 1);
          v34 = *v35;
        }
        *(_DWORD *)(*(_QWORD *)v33 + 4 * v34) = v40 & 0xFFFFFF | (v22 << 25);
        ++*v35;
        v20 = v29;
        v4 = v26;
      }
      goto LABEL_47;
    }
    v11 = (int)v9;
    v12 = 16 * (int)v9 - 16;
    do
    {
      --v11;
      result = DgnPrimArray<unsigned int>::~DgnPrimArray(*v6 + v12);
      v12 -= 16;
    }
    while (v11 > (int)v5);
  }
  v4[8] = v5;
  if ((_DWORD)v5)
    goto LABEL_16;
  return result;
}

_QWORD *GssResults::getWordProns(GssResults *this, unsigned int a2)
{
  uint64_t v3;
  ModelMgr *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  unsigned __int8 PronPredecessorSeedCategory;
  char PronSuccessorSeedCategory;
  unsigned int v24;
  unsigned int v25;
  WordList *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = *((unsigned int *)this + 8);
  v4 = (ModelMgr *)ModelMgr::smpModelMgr;
  v51 = 0;
  v52 = 0;
  v49 = 0;
  v50 = 0;
  v47 = 0;
  v48 = 0;
  v44 = v3;
  if ((_DWORD)v3)
  {
    v5 = 0;
    v6 = 0;
    v46 = (uint64_t *)((char *)this + 40);
    v42 = (char *)this + 56;
    v43 = (char *)this + 88;
    v41 = (char *)this + 72;
    do
    {
      v7 = *((_QWORD *)this + 3) + 16 * v6;
      v45 = v6;
      if (*(_DWORD *)(v7 + 8))
      {
        if ((int)v5 >= 1)
        {
          v8 = 16 * v5 - 16;
          do
          {
            DgnPrimArray<unsigned int>::~DgnPrimArray(v51 + v8);
            v8 -= 16;
          }
          while (v8 != -16);
        }
        LODWORD(v52) = 0;
        if (HIDWORD(v52))
        {
          v9 = 0;
        }
        else
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v51, 1, 1);
          v9 = v52;
        }
        v10 = (_QWORD *)(v51 + 16 * v9);
        *v10 = 0;
        v10[1] = 0;
        DgnPrimArray<int>::copyArraySlice((unint64_t)v10, (uint64_t *)v7, 0, *(_DWORD *)(v7 + 8));
        v17 = v52 + 1;
        LODWORD(v52) = v52 + 1;
        if (*((_BYTE *)this + 20))
        {
          if (v17)
            goto LABEL_12;
        }
        else
        {
          permuteToAltProns((uint64_t)&v51);
          if ((_DWORD)v52)
          {
LABEL_12:
            v18 = 0;
            do
            {
              v19 = v51 + 16 * v18;
              LODWORD(v50) = 0;
              v20 = (_DWORD *)(v19 + 8);
              if (*(_DWORD *)(v19 + 8))
              {
                v21 = 0;
                PronPredecessorSeedCategory = -2;
                PronSuccessorSeedCategory = -2;
                do
                {
                  v24 = *(_DWORD *)(*(_QWORD *)v19 + 4 * v21);
                  v25 = v24 & 0xFFFFFF;
                  v26 = *(WordList **)(ModelMgr::getVocOrThrow(v4, v24 >> 25, v11, v12, v13, v14, v15, v16) + 48);
                  WordList::getPronWithWB(v26, v25, (uint64_t)&v47);
                  if (!v21)
                    PronSuccessorSeedCategory = WordList::getPronSuccessorSeedCategory(v26, v25);
                  if (v21 == *v20 - 1)
                    PronPredecessorSeedCategory = WordList::getPronPredecessorSeedCategory(v26, v25);
                  v27 = v48;
                  if ((_DWORD)v48)
                  {
                    v28 = v50;
                    if ((v50 + v48) <= HIDWORD(v50)
                      || (DgnPrimArray<short>::reallocElts((uint64_t)&v49, (v50 + v48 - HIDWORD(v50)), 1),
                          v27 = v48,
                          v28 = v50,
                          (_DWORD)v48))
                    {
                      v29 = 0;
                      v30 = v47;
                      v31 = v49;
                      do
                      {
                        *(_WORD *)(v31 + 2 * (v28 + v29)) = *(_WORD *)(v30 + 2 * v29);
                        ++v29;
                      }
                      while (v27 != v29);
                    }
                    LODWORD(v50) = v28 + v27;
                  }
                  ++v21;
                }
                while (v21 < *v20);
                if ((_DWORD)v50 && DgnArray<DgnPrimArray<unsigned short>>::find(v46, (uint64_t)&v49) == -1)
                {
                  v32 = *((unsigned int *)this + 12);
                  if (v32 == *((_DWORD *)this + 13))
                  {
                    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v46, 1, 1);
                    v32 = *((unsigned int *)this + 12);
                  }
                  v33 = (_QWORD *)(*v46 + 16 * v32);
                  *v33 = 0;
                  v33[1] = 0;
                  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v33, &v49, 0, v50);
                  ++*((_DWORD *)this + 12);
                  v34 = *((unsigned int *)this + 24);
                  if (v34 == *((_DWORD *)this + 25))
                  {
                    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v43, 1, 1);
                    v34 = *((unsigned int *)this + 24);
                  }
                  *(_DWORD *)(*((_QWORD *)this + 11) + 4 * v34) = v45;
                  ++*((_DWORD *)this + 24);
                  if (PronPredecessorSeedCategory != 254)
                  {
                    v35 = *((unsigned int *)this + 16);
                    if (v35 == *((_DWORD *)this + 17))
                    {
                      DgnPrimArray<char>::reallocElts((uint64_t)v42, 1, 1);
                      v35 = *((unsigned int *)this + 16);
                    }
                    *(_BYTE *)(*((_QWORD *)this + 7) + v35) = PronPredecessorSeedCategory;
                    ++*((_DWORD *)this + 16);
                    v36 = *((unsigned int *)this + 20);
                    if (v36 == *((_DWORD *)this + 21))
                    {
                      DgnPrimArray<char>::reallocElts((uint64_t)v41, 1, 1);
                      v36 = *((unsigned int *)this + 20);
                    }
                    *(_BYTE *)(*((_QWORD *)this + 9) + v36) = PronSuccessorSeedCategory;
                    ++*((_DWORD *)this + 20);
                  }
                }
              }
              ++v18;
              v5 = v52;
            }
            while (v18 < v52);
            goto LABEL_42;
          }
        }
        v5 = 0;
      }
LABEL_42:
      v6 = v45 + 1;
    }
    while (v45 + 1 != v44);
  }
  if (*((_DWORD *)this + 16))
    v37 = (char *)this + 56;
  else
    v37 = 0;
  if (*((_DWORD *)this + 20))
    v38 = (char *)this + 72;
  else
    v38 = 0;
  applyNewPronSetHeuristics((unint64_t)this + 40, (uint64_t)v37, (uint64_t)v38, (uint64_t *)this + 11, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v49);
  return DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v51);
}

void sub_2097C4950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va2);
  _Unwind_Resume(a1);
}

void GssResults::~GssResults(GssResults *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 88);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 40);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this);
}

uint64_t GssResults::updateWordProns(uint64_t a1, unsigned int a2, unsigned int a3, int a4, _DWORD *a5, uint64_t a6)
{
  ModelMgr *v6;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WordList *v27;
  unsigned int NumClientProns;
  unsigned int v29;
  const char *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[2];

  v6 = (ModelMgr *)ModelMgr::smpModelMgr;
  *a5 = 0;
  if (!*(_DWORD *)(a1 + 48))
    return 4;
  v13 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  v40[0] = 0;
  v40[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v40, (uint64_t *)v13, 0, *(_DWORD *)(v13 + 8));
  v14 = *(_DWORD *)v40[0] >> 25;
  v21 = *(_DWORD *)v40[0] & 0xFFFFFF;
  v27 = *(WordList **)(ModelMgr::getVocOrThrow(v6, v14, v15, v16, v17, v18, v19, v20) + 48);
  if (a4)
  {
    ModelMgr::deleteWordClientProns(v6, v14, v21, v22, v23, v24, v25, v26);
    ModelMgr::rebuildAllStalePrefilterers((uint64_t)v6);
  }
  NumClientProns = WordList::getNumClientProns(v27, v21);
  v29 = a3 - NumClientProns;
  if (a3 <= NumClientProns)
  {
    v32 = 3;
  }
  else
  {
    if (v29 >= a2)
      v29 = a2;
    v39[0] = 0;
    v39[1] = 0;
    v38[0] = 0;
    v38[1] = 0;
    v37[0] = 0;
    v37[1] = 0;
    if (*(_BYTE *)(a1 + 20))
      v30 = "GuessPronsAcoustic";
    else
      v30 = "GuessPronsNonAcoustic";
    ModelMgr::addClientPronsAvoidDuplicates(v6, v14, (unsigned int *)v21, (uint64_t)v39, (uint64_t)v38, (uint64_t *)(a1 + 40), (_QWORD *)(a1 + 56), (_QWORD *)(a1 + 72), v29, (uint64_t)v30, (uint64_t)v37);
    v31 = WordList::getNumClientProns(v27, v21);
    if (v31 == NumClientProns)
    {
      v32 = 2;
    }
    else
    {
      *a5 = v31 - NumClientProns;
      ModelMgr::rebuildAllStalePrefilterers((uint64_t)v6);
      if (a6 && *a5)
      {
        v33 = 0;
        v34 = *(_DWORD *)(a6 + 8);
        do
        {
          v35 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v37[0] + 4 * v33));
          if (v34 == *(_DWORD *)(a6 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
            v34 = *(_DWORD *)(a6 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a6 + 4 * v34) = v35;
          v34 = *(_DWORD *)(a6 + 8) + 1;
          *(_DWORD *)(a6 + 8) = v34;
          ++v33;
        }
        while (v33 < *a5);
      }
      v32 = 1;
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v37);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v38);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v39);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v40);
  return v32;
}

void sub_2097C4BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t DgnArray<DgnPrimArray<unsigned int>>::copyArraySlice(uint64_t result, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v7 = result;
  v8 = *(unsigned int *)(result + 8);
  if ((int)v8 >= 1)
  {
    v9 = 16 * v8 - 16;
    do
    {
      result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)v7 + v9);
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(v7 + 8) = 0;
  v10 = *(_DWORD *)(v7 + 12);
  if (a4 <= v10)
  {
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_14;
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(v7, a4 - v10, 0);
    v11 = *(_DWORD *)(v7 + 8);
  }
  v13 = 0;
  v12 = v11;
  do
  {
    v14 = *a2 + 16 * (a3 + v13);
    v15 = (_QWORD *)(*(_QWORD *)v7 + 16 * v12);
    *v15 = 0;
    v15[1] = 0;
    result = DgnPrimArray<int>::copyArraySlice((unint64_t)v15, (uint64_t *)v14, 0, *(_DWORD *)(v14 + 8));
    v12 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      v16 = (int)v12;
      v17 = 16 * (int)v12 - 16;
      do
      {
        --v16;
        result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)v7 + v17);
        v17 -= 16;
      }
      while (v16 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    v18 = a4 - (unint64_t)v12;
    v19 = 16 * v12;
    do
    {
      v20 = (_QWORD *)(*(_QWORD *)v7 + v19);
      *v20 = 0;
      v20[1] = 0;
      v19 += 16;
      --v18;
    }
    while (v18);
  }
LABEL_17:
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

uint64_t DgnArray<DgnPrimArray<unsigned int>>::find(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *((unsigned int *)a1 + 2);
  if (!(_DWORD)v2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = *a1;
  while (1)
  {
    v6 = v5 + 16 * result;
    if (v6 == a2)
      return result;
    if (*(_DWORD *)(v6 + 8) == *(_DWORD *)(a2 + 8))
    {
      v7 = *(unsigned int *)(a2 + 8);
      while ((int)v7 >= 1)
      {
        v8 = *(_QWORD *)v6 + 4 * v7;
        v9 = *(_DWORD *)(*(_QWORD *)a2 - 4 + 4 * v7--);
        if (*(_DWORD *)(v8 - 4) != v9)
          goto LABEL_8;
      }
      return result;
    }
LABEL_8:
    if (++result == v2)
      return 0xFFFFFFFFLL;
  }
}

uint64_t DgnArray<DgnPrimArray<unsigned short>>::find(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *((unsigned int *)a1 + 2);
  if (!(_DWORD)v2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = *a1;
  while (1)
  {
    v6 = v5 + 16 * result;
    if (v6 == a2)
      return result;
    if (*(_DWORD *)(v6 + 8) == *(_DWORD *)(a2 + 8))
    {
      v7 = *(unsigned int *)(a2 + 8);
      while ((int)v7 >= 1)
      {
        v8 = *(_QWORD *)v6 + 2 * v7;
        v9 = *(unsigned __int16 *)(*(_QWORD *)a2 - 2 + 2 * v7--);
        if (*(unsigned __int16 *)(v8 - 2) != v9)
          goto LABEL_8;
      }
      return result;
    }
LABEL_8:
    if (++result == v2)
      return 0xFFFFFFFFLL;
  }
}

uint64_t SDParamSet_GetHandle(unint64_t a1, unint64_t a2, ParamSetHolder *a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  ParamSetHolderMgr *v17;
  ParamSetHolder *ParamSetHolder;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  ParamSetHolderMgr *v25;
  ParamSetHolder *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  ParamSetHolderMgr *v33;
  ParamSetHolder *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  ParamSetHolderMgr *v41;
  ParamSetHolder *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  ParamSetHolderMgr *v49;
  ParamSetHolder *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  ParamSetHolderMgr *v57;
  ParamSetHolder *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  ParamSetHolderMgr *v65;
  ParamSetHolder *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  ParamSetHolderMgr *v73;
  ParamSetHolder *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  ParamSetHolderMgr *v81;
  ParamSetHolder *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  ParamSetHolderMgr *v89;
  ParamSetHolder *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  ParamSetHolderMgr *v97;
  ParamSetHolder *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  ParamSetHolderMgr *v105;
  ParamSetHolder *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  _BYTE v115[152];

  v8 = SdapiInsurance::SdapiInsurance(v115, "SDParamSet_GetHandle", 1, 1, 184);
  if (v115[97])
  {
    if (!a3)
      throwBadStringPointer(v8, v9, v10, v11, v12, v13, v14, v15);
    v115[151] = 0;
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v16 = a4;
      else
        v16 = 0;
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, '%.500s', Masked:0x%016llx)\n", v9, v10, v11, v12, "SDParamSet_GetHandle", a1, a2, a3, v16);
    }
    if (!a4)
      throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v10, v11, v12, v13, v14, v15);
    *a4 = a1;
    a4[1] = a2;
    switch(a2)
    {
      case 1uLL:
        v17 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
        if (HIDWORD(a1))
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        if ((a1 + 1) <= 1)
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        ParamSetHolder = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(v17, a1, v10, v11, v12, v13, v14, v15);
        v24 = ParamSetHolder::lookupName(ParamSetHolder, a3, 1, v19, v20, v21, v22, v23);
        if (v24 != -1)
        {
          a4[2] = v24;
          goto LABEL_84;
        }
        v113 = 0;
        a4[2] = -1;
        break;
      case 2uLL:
        v73 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
        if (HIDWORD(a1))
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        if ((a1 + 1) <= 1)
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        v74 = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(v73, a1, v10, v11, v12, v13, v14, v15);
        v80 = ParamSetHolder::lookupName(v74, a3, 2, v75, v76, v77, v78, v79);
        if (v80 != -1)
        {
          a4[3] = v80;
          goto LABEL_84;
        }
        v113 = 0;
        a4[3] = -1;
        break;
      case 3uLL:
        v49 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
        if (HIDWORD(a1))
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        if ((a1 + 1) <= 1)
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        v50 = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(v49, a1, v10, v11, v12, v13, v14, v15);
        v56 = ParamSetHolder::lookupName(v50, a3, 3, v51, v52, v53, v54, v55);
        if (v56 != -1)
        {
          a4[4] = v56;
          goto LABEL_84;
        }
        v113 = 0;
        a4[4] = -1;
        break;
      case 4uLL:
        v57 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
        if (HIDWORD(a1))
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        if ((a1 + 1) <= 1)
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        v58 = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(v57, a1, v10, v11, v12, v13, v14, v15);
        v64 = ParamSetHolder::lookupName(v58, a3, 4, v59, v60, v61, v62, v63);
        if (v64 != -1)
        {
          a4[5] = v64;
          goto LABEL_84;
        }
        v113 = 0;
        a4[5] = -1;
        break;
      case 5uLL:
        v33 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
        if (HIDWORD(a1))
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        if ((a1 + 1) <= 1)
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        v34 = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(v33, a1, v10, v11, v12, v13, v14, v15);
        v40 = ParamSetHolder::lookupName(v34, a3, 5, v35, v36, v37, v38, v39);
        if (v40 != -1)
        {
          a4[6] = v40;
          goto LABEL_84;
        }
        v113 = 0;
        a4[6] = -1;
        break;
      case 6uLL:
        v81 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
        if (HIDWORD(a1))
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        if ((a1 + 1) <= 1)
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        v82 = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(v81, a1, v10, v11, v12, v13, v14, v15);
        v88 = ParamSetHolder::lookupName(v82, a3, 6, v83, v84, v85, v86, v87);
        if (v88 != -1)
        {
          a4[7] = v88;
          goto LABEL_84;
        }
        v113 = 0;
        a4[7] = -1;
        break;
      case 7uLL:
        v89 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
        if (HIDWORD(a1))
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        if ((a1 + 1) <= 1)
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        v90 = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(v89, a1, v10, v11, v12, v13, v14, v15);
        v96 = ParamSetHolder::lookupName(v90, a3, 7, v91, v92, v93, v94, v95);
        if (v96 != -1)
        {
          a4[8] = v96;
          goto LABEL_84;
        }
        v113 = 0;
        a4[8] = -1;
        break;
      case 8uLL:
        v65 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
        if (HIDWORD(a1))
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        if ((a1 + 1) <= 1)
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        v66 = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(v65, a1, v10, v11, v12, v13, v14, v15);
        v72 = ParamSetHolder::lookupName(v66, a3, 8, v67, v68, v69, v70, v71);
        if (v72 != -1)
        {
          a4[9] = v72;
          goto LABEL_84;
        }
        v113 = 0;
        a4[9] = -1;
        break;
      case 9uLL:
        v105 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
        if (HIDWORD(a1))
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        if ((a1 + 1) <= 1)
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        v106 = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(v105, a1, v10, v11, v12, v13, v14, v15);
        v112 = ParamSetHolder::lookupName(v106, a3, 9, v107, v108, v109, v110, v111);
        if (v112 != -1)
        {
          a4[10] = v112;
          goto LABEL_84;
        }
        v113 = 0;
        a4[10] = -1;
        break;
      case 0xAuLL:
        v41 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
        if (HIDWORD(a1))
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        if ((a1 + 1) <= 1)
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        v42 = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(v41, a1, v10, v11, v12, v13, v14, v15);
        v48 = ParamSetHolder::lookupName(v42, a3, 10, v43, v44, v45, v46, v47);
        if (v48 != -1)
        {
          a4[11] = v48;
          goto LABEL_84;
        }
        v113 = 0;
        a4[11] = -1;
        break;
      case 0xBuLL:
        v97 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
        if (HIDWORD(a1))
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        if ((a1 + 1) <= 1)
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        v98 = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(v97, a1, v10, v11, v12, v13, v14, v15);
        v104 = ParamSetHolder::lookupName(v98, a3, 11, v99, v100, v101, v102, v103);
        if (v104 != -1)
        {
          a4[12] = v104;
          goto LABEL_84;
        }
        v113 = 0;
        a4[12] = -1;
        break;
      case 0xCuLL:
        v25 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
        if (HIDWORD(a1))
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        if ((a1 + 1) <= 1)
          throwBadSdapiArgument("SDhParamSetHolder", a1, v10, v11, v12, v13, v14, v15);
        v26 = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(v25, a1, v10, v11, v12, v13, v14, v15);
        v32 = ParamSetHolder::lookupName(v26, a3, 12, v27, v28, v29, v30, v31);
        if (v32 == -1)
        {
          v113 = 0;
          a4[13] = -1;
        }
        else
        {
          a4[13] = v32;
LABEL_84:
          v113 = 1;
        }
        break;
      default:
        throwBadSdapiArgument("SDParamSetContainerType", a2, v10, v11, v12, v13, v14, v15);
        goto LABEL_86;
    }
  }
  else
  {
LABEL_86:
    v113 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v115);
  return v113;
}

void sub_2097C554C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  ApiState *v15;
  DgnException *v16;
  void *v17;

  if (a2 == 2)
  {
    v15 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v15, v16);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a14);
      _Unwind_Resume(a1);
    }
    v17 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v17);
  }
  __cxa_end_catch();
  JUMPOUT(0x2097C5464);
}

_QWORD *DgnArray<LinearTransform>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 72 * v2 - 72;
    do
    {
      LinearTransform::~LinearTransform((LinearTransform *)(*(_QWORD *)a1 + v3));
      v3 -= 72;
    }
    while (v3 != -72);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_DWORD *BinaryIntScale::setScale(_DWORD *this, unsigned int a2)
{
  int v2;
  unsigned int i;

  if (a2 < 2)
  {
    v2 = 0;
  }
  else
  {
    v2 = 0;
    for (i = 1; i < a2; i *= 2)
      ++v2;
  }
  *this = v2;
  return this;
}

unint64_t BinaryIntScale::getBits(unint64_t this)
{
  unint64_t v1;
  unint64_t i;

  if (this)
  {
    v1 = this;
    LODWORD(this) = 0;
    for (i = 1; i <= v1; i *= 2)
      this = (this + 1);
  }
  return this;
}

uint64_t BinaryIntScale::getUnscaleBits(BinaryIntScale *this, char a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;

  v2 = ~(-1 << (a2 + 1));
  v3 = 2 * (_QWORD)this;
  if (2 * (uint64_t)this < v2)
    return 0;
  LODWORD(result) = 0;
  do
  {
    v2 *= 2;
    result = (result + 1);
  }
  while (v2 <= v3);
  return result;
}

void BandwidthTransform::saveBandwidthTransform(BandwidthTransform *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  DgnStream *v8;
  uint64_t CurrentSubDirComponents;
  unsigned int v10;

  if (a4)
  {
    BandwidthTransform::saveText(this, a2, a5);
  }
  else
  {
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 3u, a5, "MRBEB!?", 22, 1);
    v10 = 0;
    writeObject((uint64_t)v8, (int *)this, &v10);
    writeObject((uint64_t)v8, (int *)this + 1, &v10);
    LinearTransform::writeObject((BandwidthTransform *)((char *)this + 8), v8, &v10);
    writeObjectChecksum((uint64_t)v8, (int *)&v10);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 3u, v10);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
}

void BandwidthTransform::saveText(BandwidthTransform *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  _QWORD v18[2];
  void *v19[2];
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24[35];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v24);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v24, (uint64_t)a2, 4u, a3);
  v22 = 0;
  v23 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v24, sBET_Versions, (uint64_t)&v22, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v24, "BandwidthExtensionTransform", (_QWORD *)(v22 + 8 * (v23 - 1)));
  v20 = 0;
  v21 = 0;
  v19[0] = 0;
  v11 = realloc_array(0, v19, 0x10uLL, 0, 0, 1);
  v20 = v19[0];
  LODWORD(v21) = 4;
  HIDWORD(v21) = v11 >> 2;
  DgnArray<DgnString>::DgnArray(v19, 4);
  DgnString::operator=((DgnString *)v19[0], "TableName");
  *v20 = 0;
  DgnString::operator=((DgnString *)((char *)v19[0] + 16), "RowIndex");
  v20[1] = 3;
  DgnString::operator=((DgnString *)((char *)v19[0] + 32), "ColumnIndex");
  v20[2] = 3;
  DgnString::operator=((DgnString *)((char *)v19[0] + 48), "TableEntryInt");
  v20[3] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v24, (uint64_t)&v20, (uint64_t)v19);
  v13 = *((unsigned int *)this + 2);
  v12 = *((unsigned int *)this + 3);
  v14 = *((_DWORD *)this + 12);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "InputSampleRate", *(unsigned int *)this);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "OutputSampleRate", *((unsigned int *)this + 1));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "InputFeatureDim", v13);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "OutputFeatureDim", v12);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "TransformIntScale", 1 << v14);
  if ((_DWORD)v12)
  {
    for (i = 0; i != v12; ++i)
    {
      if ((_DWORD)v13)
      {
        for (j = 0; j != v13; ++j)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v24, 0, "BETMatrix");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 1u, i);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 2u, j);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v24, 3u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 16 * i) + 4 * j));
          DgnTextFileWriter::writeNextLine(v24);
        }
      }
    }
  }
  v18[0] = 0;
  v18[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v18, (uint64_t *)this + 2, 0, *((_DWORD *)this + 6));
  if ((_DWORD)v12)
  {
    for (k = 0; k != v12; ++k)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v24, 0, "BETOffset");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 1u, k);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 2u, 0);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v24, 3u, *(_DWORD *)(v18[0] + 4 * k));
      DgnTextFileWriter::writeNextLine(v24);
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  DgnArray<DgnString>::releaseAll((uint64_t)v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v22);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v24);
}

void sub_2097C5AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

_QWORD *DgnArray<DgnString>::DgnArray(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if ((_DWORD)a2)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a1, a2, 0);
    v4 = *((_DWORD *)a1 + 2);
    if (v4 > v2)
    {
      if ((int)v4 > (int)v2)
      {
        v5 = (int)v4;
        v6 = 16 * (int)v4 - 16;
        do
        {
          --v5;
          DgnString::~DgnString((DgnString *)(*a1 + v6));
          v6 -= 16;
        }
        while (v5 > (int)v2);
      }
      goto LABEL_11;
    }
  }
  else
  {
    v4 = 0;
  }
  v7 = v2 - v4;
  if (v2 > v4)
  {
    v8 = 16 * v4;
    do
    {
      DgnString::DgnString((DgnString *)(*a1 + v8));
      v8 += 16;
      --v7;
    }
    while (v7);
  }
LABEL_11:
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

uint64_t MrecInitLibrary_fileutil(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughFileutil(void)
{
  MrecInitLibrarySet_throughDfutil();
  return MrecInitLibrary_fileutil();
}

void MrecInitModule_genclass_pel(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugGenoneClassTree)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugGenoneClassTree", (const char *)&unk_209A5B154, (const char *)&unk_209A5B154, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugGenoneClassTree = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugGenoneClassTree);
  }
}

void GenoneClassTree::~GenoneClassTree(GenoneClassTree *this)
{
  DgnArray<DgnMatrix>::releaseAll((uint64_t)this + 280);
  DgnArray<DgnVector>::releaseAll((uint64_t)this + 264);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120);
  BitArray::~BitArray((GenoneClassTree *)((char *)this + 96));
  BitArray::~BitArray((GenoneClassTree *)((char *)this + 80));
  BitArray::~BitArray((GenoneClassTree *)((char *)this + 64));
  BitArray::~BitArray((GenoneClassTree *)((char *)this + 48));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);
}

void GenoneClassTree::printSize(GenoneClassTree *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 206, (DgnString *)&v199);
  if ((_DWORD)v200)
    v16 = v199;
  else
    v16 = &unk_209A5B154;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A5B154, a3, &unk_209A5B154, v16);
  DgnString::~DgnString((DgnString *)&v199);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A5B154);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  v22 = (a3 + 1);
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 207, (DgnString *)&v199);
  if ((_DWORD)v200)
    v28 = v199;
  else
    v28 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &unk_209A5B154, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v21;
  *a5 += v21;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v33 = v199;
  else
    v33 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, (a3 + 1), &unk_209A5B154, (34 - a3), (34 - a3), v33, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v38 = v199;
  else
    v38 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), &unk_209A5B154, (34 - a3), (34 - a3), v38, 4, 4, 0);
  v198 = a3;
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 12;
  else
    v39 = 16;
  v40 = *((unsigned int *)this + 6);
  v41 = *((_DWORD *)this + 7);
  if (v41 >= v40)
  {
    v42 = 0;
    if ((int)v40 > 0)
      v39 += 4 * (v40 - 1) + 4;
    v43 = v39 + 4 * (v41 - v40);
  }
  else
  {
    v42 = 4 * v40;
    v43 = v39;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v48 = v199;
  else
    v48 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, v22, &unk_209A5B154, v23, v23, v48, v43, v39, v42);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v43;
  *a5 += v39;
  *a6 += v42;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v49 = 12;
  else
    v49 = 16;
  v50 = *((unsigned int *)this + 10);
  v51 = *((_DWORD *)this + 11);
  if (v51 >= v50)
  {
    v52 = 0;
    if ((int)v50 > 0)
      v49 = (v49 | 2) + 2 * (v50 - 1);
    v53 = v49 + 2 * (v51 - v50);
  }
  else
  {
    v52 = 2 * v50;
    v53 = v49;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v58 = v199;
  else
    v58 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v22, &unk_209A5B154, v23, v23, v58, v53, v49, v52);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v53;
  *a5 += v49;
  *a6 += v52;
  v59 = BitArray::sizeObject((uint64_t)this + 48, 0);
  v60 = BitArray::sizeObject((uint64_t)this + 48, 1);
  v61 = BitArray::sizeObject((uint64_t)this + 48, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v66 = v199;
  else
    v66 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v22, &unk_209A5B154, v23, v23, v66, v59, v60, v61);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v59;
  *a5 += v60;
  *a6 += v61;
  v67 = BitArray::sizeObject((uint64_t)this + 64, 0);
  v68 = BitArray::sizeObject((uint64_t)this + 64, 1);
  v69 = BitArray::sizeObject((uint64_t)this + 64, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v74 = v199;
  else
    v74 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v22, &unk_209A5B154, v23, v23, v74, v67, v68, v69);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v67;
  *a5 += v68;
  *a6 += v69;
  v75 = BitArray::sizeObject((uint64_t)this + 80, 0);
  v76 = BitArray::sizeObject((uint64_t)this + 80, 1);
  v77 = BitArray::sizeObject((uint64_t)this + 80, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v82 = v199;
  else
    v82 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v22, &unk_209A5B154, v23, v23, v82, v75, v76, v77);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v75;
  *a5 += v76;
  *a6 += v77;
  v83 = BitArray::sizeObject((uint64_t)this + 96, 0);
  v84 = BitArray::sizeObject((uint64_t)this + 96, 1);
  v85 = BitArray::sizeObject((uint64_t)this + 96, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v90 = v199;
  else
    v90 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, v22, &unk_209A5B154, v23, v23, v90, v83, v84, v85);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v83;
  *a5 += v84;
  *a6 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v95 = v199;
  else
    v95 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, v22, &unk_209A5B154, v23, v23, v95, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v96 = 12;
  else
    v96 = 16;
  v97 = *((unsigned int *)this + 32);
  v98 = *((_DWORD *)this + 33);
  if (v98 >= v97)
  {
    v99 = 0;
    if ((int)v97 > 0)
      v96 += 4 * (v97 - 1) + 4;
    v100 = v96 + 4 * (v98 - v97);
  }
  else
  {
    v99 = 4 * v97;
    v100 = v96;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v105 = v199;
  else
    v105 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v22, &unk_209A5B154, v23, v23, v105, v100, v96, v99);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v100;
  *a5 += v96;
  *a6 += v99;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v106 = 12;
  else
    v106 = 16;
  v107 = *((unsigned int *)this + 36);
  v108 = *((_DWORD *)this + 37);
  if (v108 >= v107)
  {
    v109 = 0;
    if ((int)v107 > 0)
      v106 += 4 * (v107 - 1) + 4;
    v110 = v106 + 4 * (v108 - v107);
  }
  else
  {
    v109 = 4 * v107;
    v110 = v106;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v115 = v199;
  else
    v115 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v111, v112, v113, v114, v22, &unk_209A5B154, v23, v23, v115, v110, v106, v109);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v110;
  *a5 += v106;
  *a6 += v109;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v116 = 12;
  else
    v116 = 16;
  v117 = *((unsigned int *)this + 40);
  v118 = *((_DWORD *)this + 41);
  if (v118 >= v117)
  {
    v119 = 0;
    if ((int)v117 > 0)
      v116 += 4 * (v117 - 1) + 4;
    v120 = v116 + 4 * (v118 - v117);
  }
  else
  {
    v119 = 4 * v117;
    v120 = v116;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v125 = v199;
  else
    v125 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v121, v122, v123, v124, v22, &unk_209A5B154, v23, v23, v125, v120, v116, v119);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v120;
  *a5 += v116;
  *a6 += v119;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v126 = 12;
  else
    v126 = 16;
  v127 = *((unsigned int *)this + 44);
  v128 = *((_DWORD *)this + 45);
  if (v128 >= v127)
  {
    v129 = 0;
    if ((int)v127 > 0)
      v126 += 4 * (v127 - 1) + 4;
    v130 = v126 + 4 * (v128 - v127);
  }
  else
  {
    v129 = 4 * v127;
    v130 = v126;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v135 = v199;
  else
    v135 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v131, v132, v133, v134, v22, &unk_209A5B154, v23, v23, v135, v130, v126, v129);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v130;
  *a5 += v126;
  *a6 += v129;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v140 = v199;
  else
    v140 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v136, v137, v138, v139, v22, &unk_209A5B154, v23, v23, v140, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v141 = 12;
  else
    v141 = 16;
  v142 = *((unsigned int *)this + 50);
  v143 = *((_DWORD *)this + 51);
  if (v143 >= v142)
  {
    v144 = 0;
    if ((int)v142 > 0)
      v141 += 4 * (v142 - 1) + 4;
    v145 = v141 + 4 * (v143 - v142);
  }
  else
  {
    v144 = 4 * v142;
    v145 = v141;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v150 = v199;
  else
    v150 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v146, v147, v148, v149, v22, &unk_209A5B154, v23, v23, v150, v145, v141, v144);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v145;
  *a5 += v141;
  *a6 += v144;
  v151 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 208, 0);
  v152 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 208, 1);
  v199 = 0;
  v200 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v199);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v157 = v199;
  else
    v157 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v153, v154, v155, v156, v22, &unk_209A5B154, v23, v23, v157, v151, v152, 0);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v151;
  *a5 += v152;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v158 = 12;
  else
    v158 = 16;
  v159 = *((unsigned int *)this + 58);
  v160 = *((_DWORD *)this + 59);
  if (v160 >= v159)
  {
    v161 = 0;
    if ((int)v159 > 0)
      v158 += 4 * (v159 - 1) + 4;
    v162 = v158 + 4 * (v160 - v159);
  }
  else
  {
    v161 = 4 * v159;
    v162 = v158;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v167 = v199;
  else
    v167 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v163, v164, v165, v166, v22, &unk_209A5B154, v23, v23, v167, v162, v158, v161);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v162;
  *a5 += v158;
  *a6 += v161;
  v168 = sizeObject((uint64_t)this + 240, 0);
  v169 = sizeObject((uint64_t)this + 240, 1);
  v170 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v175 = v199;
  else
    v175 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v171, v172, v173, v174, v22, &unk_209A5B154, v23, v23, v175, v168, v169, v170);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v168;
  *a5 += v169;
  *a6 += v170;
  v176 = sizeObject<DgnVector>((uint64_t)this + 264, 0);
  v177 = sizeObject<DgnVector>((uint64_t)this + 264, 1);
  v178 = sizeObject<DgnVector>((uint64_t)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v183 = v199;
  else
    v183 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v179, v180, v181, v182, v22, &unk_209A5B154, v23, v23, v183, v176, v177, v178);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v176;
  *a5 += v177;
  *a6 += v178;
  v184 = (char *)this + 280;
  v185 = sizeObject<DgnMatrix>((uint64_t)this + 280, 0);
  v186 = sizeObject<DgnMatrix>((uint64_t)v184, 1);
  v187 = sizeObject<DgnMatrix>((uint64_t)v184, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 209, (DgnString *)&v199);
  if ((_DWORD)v200)
    v192 = v199;
  else
    v192 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v188, v189, v190, v191, v22, &unk_209A5B154, v23, v23, v192, v185, v186, v187);
  DgnString::~DgnString((DgnString *)&v199);
  *a4 += v185;
  *a5 += v186;
  *a6 += v187;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 210, (DgnString *)&v199);
  if ((_DWORD)v200)
    v197 = v199;
  else
    v197 = &unk_209A5B154;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v193, v194, v195, v196, v198, &unk_209A5B154, (35 - v198), (35 - v198), v197, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v199);
}

void sub_2097C6BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnVector>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;

  v11 = 0;
  v10 = 0;
  v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3)
  {
    v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 12;
    else
      v5 = 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = v4;
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
          v5 += sizeObject(*(_QWORD *)a1 + 16 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2)
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v10);
  return v5;
}

void sub_2097C6CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnMatrix>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3)
  {
    v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 12;
    else
      v5 = 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = v4;
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
          v5 += sizeObject(*(_QWORD *)a1 + 24 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2)
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v11);
  return v5;
}

void sub_2097C6DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *GenoneClassTree::getDynamicClasses(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  unsigned int SetBitOrStop;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v117;
  void *v118;
  unsigned int v119;
  uint64_t *v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  _QWORD v125[2];
  char *v126;
  unsigned int v127[2];
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  uint64_t v133;
  _DWORD *v134;
  uint64_t v135;
  _DWORD *v136;
  uint64_t v137;
  _QWORD v138[3];

  v11 = *(_DWORD *)(a1 + 184);
  v12 = (_QWORD *)(a1 + 80);
  if (v11 != 1)
    v12 = (_QWORD *)(a1 + 48);
  if (v11 == 2)
    v13 = (_QWORD *)(a1 + 96);
  else
    v13 = v12;
  v117 = v13;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v138, *(unsigned int *)(a1 + 8));
  v14 = *(unsigned int *)(a1 + 112);
  v136 = 0;
  v137 = 0;
  if ((_DWORD)v14)
  {
    v118 = 0;
    v15 = realloc_array(0, &v118, 4 * v14, 0, 0, 1);
    v16 = 0;
    v17 = v118;
    v136 = v118;
    LODWORD(v137) = v14;
    HIDWORD(v137) = v15 >> 2;
    do
      v17[v16++] = 0;
    while (v16 < v137);
  }
  else
  {
    LODWORD(v137) = 0;
  }
  v18 = *(unsigned int *)(a1 + 8);
  v134 = 0;
  v135 = 0;
  if ((_DWORD)v18)
  {
    v118 = 0;
    v19 = realloc_array(0, &v118, 4 * v18, 0, 0, 1);
    v20 = 0;
    v21 = v118;
    v134 = v118;
    LODWORD(v135) = v18;
    HIDWORD(v135) = v19 >> 2;
    do
      v21[v20++] = 0;
    while (v20 < v135);
  }
  else
  {
    v21 = 0;
    LODWORD(v135) = 0;
  }
  if (*((_DWORD *)a2 + 2))
  {
    v22 = 0;
    v23 = *a2;
    v24 = *(_QWORD *)(a1 + 192);
    do
    {
      v21[*(unsigned int *)(v24 + 4 * v22)] = *(_DWORD *)(v23 + 4 * v22);
      ++v22;
    }
    while (v22 < *((unsigned int *)a2 + 2));
  }
  v132 = 0;
  v133 = 0;
  v111 = (_QWORD *)(a1 + 192);
  DgnPrimArray<int>::copyArraySlice((unint64_t)&v132, (uint64_t *)(a1 + 192), 0, *(_DWORD *)(a1 + 200));
  v130 = 0;
  v131 = 0;
  BitArray::BitArray((BitArray *)&v128, *(_DWORD *)(a1 + 8));
  BitArray::clearRange((BitArray *)&v128, 0, v129);
  v112 = a6;
  v113 = a7;
  if ((_DWORD)v133)
  {
    v25 = 0;
    v26 = v132;
    v27 = v128;
    do
    {
      *(_DWORD *)(v27 + (((unint64_t)v26[v25] >> 3) & 0x1FFFFFFC)) |= 1 << v26[v25];
      ++v25;
    }
    while (v25 < v133);
    v126 = 0;
    *(_QWORD *)v127 = 0;
    if ((_DWORD)v133)
    {
      v28 = 0;
      while (1)
      {
        v29 = v132[v28];
        v30 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v29);
        v31 = v138[0];
        if ((*(_DWORD *)(*v117 + 4 * (v29 >> 5)) & (1 << v29)) != 0)
        {
          v32 = v138[0] + 16 * v29;
          v34 = (_DWORD *)(v32 + 8);
          v33 = *(unsigned int *)(v32 + 8);
          if (v33 == *(_DWORD *)(v32 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(v138[0] + 16 * v29, 1, 1);
            v33 = *v34;
            v31 = v138[0];
          }
          *(_DWORD *)(*(_QWORD *)v32 + 4 * v33) = v28;
          ++*v34;
          v35 = v31 + 16 * v30;
          v37 = (_DWORD *)(v35 + 8);
          v36 = *(unsigned int *)(v35 + 8);
          if (v36 == *(_DWORD *)(v35 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(v35, 1, 1);
            v36 = *v37;
          }
          *(_DWORD *)(*(_QWORD *)v35 + 4 * v36) = v28;
          LODWORD(v38) = 1;
        }
        else
        {
          v39 = v138[0] + 16 * v30;
          v40 = v138[0] + 16 * v29;
          v42 = (unsigned int *)(v40 + 8);
          v41 = *(_DWORD *)(v40 + 8);
          v37 = (_DWORD *)(v39 + 8);
          v43 = *(_DWORD *)(v39 + 8) + v41;
          v44 = *(_DWORD *)(v39 + 12);
          if (v43 > v44)
          {
            DgnPrimArray<unsigned int>::reallocElts(v138[0] + 16 * v30, v43 - v44, 1);
            v41 = *v42;
          }
          if (v41)
          {
            v45 = 0;
            v46 = *(_QWORD *)v40;
            v47 = *(_QWORD *)v39;
            do
            {
              *(_DWORD *)(v47 + 4 * (v45 + *v37)) = *(_DWORD *)(v46 + 4 * v45);
              ++v45;
              v38 = *v42;
            }
            while (v45 < v38);
          }
          else
          {
            LODWORD(v38) = 0;
          }
        }
        *v37 += v38;
        v48 = v134;
        v134[v30] += v134[v29];
        ++v136[v30];
        v49 = a5;
        if ((_DWORD)v29 == 1)
          v49 = a4;
        if (v48[v29] >= v49)
        {
          if ((*(_DWORD *)(v128 + 4 * (v29 >> 5)) & (1 << v29)) != 0)
          {
            v50 = v127[0];
            if (v127[0] == (unint64_t)v127[1])
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v126, 1, 1);
              v50 = v127[0];
            }
            *(_DWORD *)&v126[4 * v50] = v29;
            ++v127[0];
          }
        }
        else
        {
          *(_DWORD *)(v128 + ((v30 >> 3) & 0x1FFFFFFC)) |= 1 << v30;
        }
        if ((_DWORD)v30 && v136[v30] == *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4 * v30))
        {
          v51 = v131;
          if (v131 == (unint64_t)HIDWORD(v131))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v130, 1, 1);
            v51 = v131;
          }
          *(_DWORD *)(v130 + 4 * v51) = v30;
          LODWORD(v131) = v131 + 1;
        }
        if (++v28 >= (unint64_t)v133)
        {
          DgnPrimArray<int>::copyArraySlice((unint64_t)&v132, &v130, 0, v131);
          v28 = 0;
          LODWORD(v131) = 0;
          if (!(_DWORD)v133)
            break;
        }
      }
    }
  }
  else
  {
    v126 = 0;
    *(_QWORD *)v127 = 0;
  }
  v52 = v127[0];
  if (!a3 || v127[0] <= a3)
    goto LABEL_107;
  do
  {
    DgnPrimArray<int>::copyArraySlice((unint64_t)&v132, (uint64_t *)&v126, 0, v52);
    v53 = *v134 + 1;
    v54 = v133;
    if ((_DWORD)v133)
    {
      v55 = 0;
      v56 = v132;
      do
      {
        v57 = *v56++;
        v58 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v57);
        if ((_DWORD)v58 && v134[v58] < v53)
        {
          v55 = v58;
          v53 = v134[v58];
        }
        --v54;
      }
      while (v54);
    }
    else
    {
      v55 = 0;
    }
    *(_DWORD *)(v128 + 4 * (v55 >> 5)) |= 1 << v55;
    v127[0] = 0;
    LODWORD(v131) = 0;
    if (!(_DWORD)v133)
      goto LABEL_94;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = v53 + 1;
    v64 = v53 + 1;
    do
    {
      v65 = v132[v59];
      if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v65) != v55)
      {
        v70 = v127[0];
        if (v127[0] == (unint64_t)v127[1])
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v126, 1, 1);
          v70 = v127[0];
        }
        *(_DWORD *)&v126[4 * v70] = v65;
        ++v127[0];
        goto LABEL_83;
      }
      v66 = v134;
      v67 = v134[v65];
      if (v67 < v64)
      {
        if (v60)
        {
          v68 = v131;
          if (v131 == (unint64_t)HIDWORD(v131))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v130, 1, 1);
            v68 = v131;
            v66 = v134;
          }
          *(_DWORD *)(v130 + 4 * v68) = v60;
          LODWORD(v131) = v131 + 1;
          v69 = v66[v65];
        }
        else
        {
          v69 = v134[v65];
        }
        v63 = v64;
        v73 = v65;
        v60 = v61;
        goto LABEL_88;
      }
      if (v67 >= v63)
      {
        v72 = v131;
        if (v131 == (unint64_t)HIDWORD(v131))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v130, 1, 1);
          v72 = v131;
        }
        *(_DWORD *)(v130 + 4 * v72) = v65;
        LODWORD(v131) = v131 + 1;
LABEL_83:
        v69 = v64;
        v73 = v61;
        goto LABEL_88;
      }
      if (v60)
      {
        v71 = v131;
        if (v131 == (unint64_t)HIDWORD(v131))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v130, 1, 1);
          v71 = v131;
          v66 = v134;
        }
        *(_DWORD *)(v130 + 4 * v71) = v60;
        LODWORD(v131) = v131 + 1;
        v63 = v66[v65];
        v69 = v64;
      }
      else
      {
        v69 = v64;
        v63 = v134[v65];
      }
      v73 = v61;
      v60 = v65;
LABEL_88:
      v62 |= (_DWORD)v65 == v55;
      ++v59;
      v61 = v73;
      v64 = v69;
    }
    while (v59 < v133);
    if ((v62 & 1) != 0)
    {
      v74 = v131;
      if (v60)
      {
        v75 = a3;
        if ((_DWORD)v131 == HIDWORD(v131))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v130, 1, 1);
          v74 = v131;
        }
        *(_DWORD *)(v130 + 4 * v74) = v60;
        v74 = v131 + 1;
        LODWORD(v131) = v131 + 1;
      }
      else
      {
        v75 = a3;
      }
      goto LABEL_97;
    }
LABEL_94:
    v76 = v127[0];
    v75 = a3;
    if (v127[0] == (unint64_t)v127[1])
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v126, 1, 1);
      v76 = v127[0];
    }
    *(_DWORD *)&v126[4 * v76] = v55;
    ++v127[0];
    v74 = v131;
LABEL_97:
    if (v127[0] + v74 > v127[1])
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v126, v127[0] + v74 - v127[1], 1);
      v74 = v131;
    }
    if (v74)
    {
      v77 = 0;
      v78 = v130;
      v79 = v126;
      do
      {
        *(_DWORD *)&v79[4 * (v77 + v127[0])] = *(_DWORD *)(v78 + 4 * v77);
        ++v77;
        v80 = v131;
      }
      while (v77 < v131);
    }
    else
    {
      v80 = 0;
    }
    v52 = v127[0] + v80;
    v127[0] = v52;
  }
  while (v52 > v75);
LABEL_107:
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v125, v52);
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(&v123, v52);
  BitArray::BitArray((BitArray *)&v121, *(_DWORD *)(a1 + 200));
  BitArray::setRange(&v121, 0, v122);
  mrec_qsort_r<GenoneClassTree>(v126, v127[0], 4);
  if ((_DWORD)v52)
  {
    v81 = 0;
    v82 = v138[0];
    do
    {
      v83 = *(unsigned int *)&v126[4 * (v52 + ~(_DWORD)v81)];
      if (*(_DWORD *)(v82 + 16 * v83 + 8))
      {
        v84 = 0;
        do
        {
          v85 = *(unsigned int *)(*(_QWORD *)(v82 + 16 * v83) + 4 * v84);
          v86 = v125[0] + 16 * v81;
          v88 = (_DWORD *)(v86 + 8);
          v87 = *(unsigned int *)(v86 + 8);
          if (v87 == *(_DWORD *)(v86 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(v125[0] + 16 * v81, 1, 1);
            v87 = *v88;
          }
          *(_DWORD *)(*(_QWORD *)v86 + 4 * v87) = v85;
          ++*v88;
          v89 = v121;
          if ((*(_DWORD *)(v121 + 4 * (v85 >> 5)) & (1 << v85)) != 0)
          {
            v90 = v123 + 16 * v81;
            v92 = (_DWORD *)(v90 + 8);
            v91 = *(unsigned int *)(v90 + 8);
            if (v91 == *(_DWORD *)(v90 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(v123 + 16 * v81, 1, 1);
              v91 = *v92;
              v89 = v121;
            }
            *(_DWORD *)(*(_QWORD *)v90 + 4 * v91) = v85;
            ++*v92;
            *(_DWORD *)(v89 + 4 * (v85 >> 5)) &= ~(1 << v85);
          }
          ++v84;
          v82 = v138[0];
        }
        while (v84 < *(unsigned int *)(v138[0] + 16 * v83 + 8));
      }
      ++v81;
    }
    while (v81 != v52);
  }
  v93 = *(unsigned int *)(v112 + 8);
  if ((int)v93 >= 1)
  {
    v94 = 16 * v93 - 16;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)v112 + v94);
      v94 -= 16;
    }
    while (v94 != -16);
  }
  *(_DWORD *)(v112 + 8) = 0;
  v95 = *(unsigned int *)(v113 + 8);
  if ((int)v95 >= 1)
  {
    v96 = 16 * v95 - 16;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)v113 + v96);
      v96 -= 16;
    }
    while (v96 != -16);
  }
  *(_DWORD *)(v113 + 8) = 0;
  v97 = v124;
  if (v124)
  {
    v98 = 0;
    v99 = 0;
    v100 = 8;
    do
    {
      if (*(_DWORD *)(v123 + v100))
      {
        v101 = v125[0];
        v102 = *(unsigned int *)(v112 + 8);
        if (v102 == *(_DWORD *)(v112 + 12))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v112, 1, 1);
          v102 = *(unsigned int *)(v112 + 8);
        }
        v103 = (_QWORD *)(*(_QWORD *)v112 + 16 * v102);
        *v103 = 0;
        v103[1] = 0;
        DgnPrimArray<int>::copyArraySlice((unint64_t)v103, (uint64_t *)(v101 + v100 - 8), 0, *(_DWORD *)(v101 + v100));
        ++*(_DWORD *)(v112 + 8);
        v104 = v123;
        v105 = *(unsigned int *)(v113 + 8);
        if (v105 == *(_DWORD *)(v113 + 12))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v113, 1, 1);
          v105 = *(unsigned int *)(v113 + 8);
        }
        v106 = (_QWORD *)(*(_QWORD *)v113 + 16 * v105);
        *v106 = 0;
        v106[1] = 0;
        DgnPrimArray<int>::copyArraySlice((unint64_t)v106, (uint64_t *)(v104 + v100 - 8), 0, *(_DWORD *)(v104 + v100));
        v98 = *(_DWORD *)(v113 + 8) + 1;
        *(_DWORD *)(v113 + 8) = v98;
        v97 = v124;
      }
      ++v99;
      v100 += 16;
    }
    while (v99 < v97);
    if (v98)
    {
      v120 = &v121;
      v119 = v122;
      v118 = 0;
      SetBitOrStop = BitArrayIterator::scanForNextSetBitOrStop((BitArrayIterator *)&v118);
      if (HIDWORD(v118) < v119)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/genclass.cpp", 586, (uint64_t)"pel/genclass", 20, (uint64_t)&errStr_pel_genclass_E_TNODE_NOT_COVERED, v108, v109, *(_DWORD *)(*v111 + 4 * SetBitOrStop));
    }
  }
  BitArray::~BitArray((BitArray *)&v121);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v123);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v125);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v126);
  BitArray::~BitArray((BitArray *)&v128);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v130);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v132);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v134);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v136);
  return DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v138);
}

void sub_2097C7900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  BitArray::~BitArray((BitArray *)&a20);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a22);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a26);
  BitArray::~BitArray((BitArray *)&a28);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a30);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 120);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v30 - 104);
  _Unwind_Resume(a1);
}

char *mrec_qsort_r<GenoneClassTree>(char *result, unint64_t a2, int64_t a3)
{
  int64_t v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  int v31;
  int v32;
  char *v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  char *v46;
  char v47;
  uint64_t v48;
  int v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int64_t v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char v76;
  BOOL v77;
  int64_t v78;
  int64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  int64_t v83;
  char v84;
  char *v85;
  char *v86;
  _DWORD *v87;
  _DWORD *v88;
  _DWORD *v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;

  v4 = -a3;
  v5 = a3 != 8;
  v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0)
    v7 = 2;
  else
    v7 = a3 != 8;
  if (a2 < 7)
  {
LABEL_145:
    if ((uint64_t)(a2 * a3) > a3)
    {
      v85 = &result[a2 * a3];
      v86 = &result[a3];
      v87 = result;
      do
      {
        if (v86 > result)
        {
          v88 = v87;
          v89 = v86;
          do
          {
            v90 = v89;
            v89 = (_DWORD *)((char *)v89 + v4);
            if (*v89 - *v90 < 1)
              break;
            if (v7)
            {
              v91 = 0;
              v92 = (uint64_t)v88 + a3;
              if (v6)
              {
                do
                {
                  v93 = *(_QWORD *)(v92 + 8 * v91);
                  *(_QWORD *)(v92 + 8 * v91) = *(_QWORD *)&v88[2 * v91];
                  *(_QWORD *)&v88[2 * v91++] = v93;
                }
                while ((unint64_t)a3 >> 3 != v91);
              }
              else
              {
                do
                {
                  v94 = *(_BYTE *)(v92 + v91);
                  *(_BYTE *)(v92 + v91) = *((_BYTE *)v88 + v91);
                  *((_BYTE *)v88 + v91++) = v94;
                }
                while (a3 != v91);
              }
            }
            else
            {
              v95 = *(_QWORD *)v90;
              *(_QWORD *)v90 = *(_QWORD *)v89;
              *(_QWORD *)v89 = v95;
            }
            v88 = (_DWORD *)((char *)v88 + v4);
          }
          while (v89 > (_DWORD *)result);
        }
        v86 += a3;
        v87 = (_DWORD *)((char *)v87 + a3);
      }
      while (v86 < v85);
    }
    return result;
  }
  v8 = (unint64_t)a3 >> 3;
  while (1)
  {
    v9 = &result[(a2 >> 1) * a3];
    if (a2 == 7)
      goto LABEL_69;
    v10 = &result[(a2 - 1) * a3];
    if (a2 <= 0x28)
    {
      v21 = *(_DWORD *)result;
      v32 = *(_DWORD *)v9;
      v13 = result;
      v36 = *(_DWORD *)v10;
      goto LABEL_64;
    }
    v11 = (a2 >> 3) * a3;
    v12 = 2 * v11;
    v13 = &result[2 * v11];
    v14 = *(_DWORD *)result;
    v15 = *(_DWORD *)&result[v11];
    v16 = *(_DWORD *)result - v15;
    v17 = v15 - *(_DWORD *)v13;
    v18 = *(_DWORD *)result - *(_DWORD *)v13;
    if (v18 >= 0)
      v19 = *(_DWORD *)v13;
    else
      v19 = *(_DWORD *)result;
    if (v18 >= 0)
      v20 = &result[2 * v11];
    else
      v20 = result;
    if (v17 > 0)
    {
      v19 = *(_DWORD *)&result[v11];
      v20 = &result[v11];
    }
    if (v18 >= 0)
      v13 = result;
    else
      v14 = *(_DWORD *)v13;
    if (v17 < 0)
    {
      v14 = *(_DWORD *)&result[v11];
      v13 = &result[v11];
    }
    if (v16 < 0)
      v21 = v14;
    else
      v21 = v19;
    if (v16 >= 0)
      v13 = v20;
    v22 = -(uint64_t)v11;
    v23 = &v9[-v11];
    v24 = &v9[v11];
    v25 = *(_DWORD *)v23;
    v26 = *(_DWORD *)v23 - *(_DWORD *)v9;
    v27 = *(_DWORD *)v9 - *(_DWORD *)v24;
    v28 = *(_DWORD *)v23 - *(_DWORD *)v24;
    if (v28 >= 0)
      v29 = *(_DWORD *)v24;
    else
      v29 = *(_DWORD *)v23;
    if (v28 >= 0)
      v30 = v24;
    else
      v30 = v23;
    if (v27 > 0)
    {
      v29 = *(_DWORD *)v9;
      v30 = &result[(a2 >> 1) * a3];
    }
    if (v28 >= 0)
      v24 = v23;
    else
      v25 = *(_DWORD *)v24;
    if (v27 >= 0)
      v31 = v25;
    else
      v31 = *(_DWORD *)v9;
    if (v27 >= 0)
      v9 = v24;
    if (v26 < 0)
      v32 = v31;
    else
      v32 = v29;
    if (v26 >= 0)
      v9 = v30;
    v33 = &v10[-v12];
    v34 = &v10[v22];
    v35 = *(_DWORD *)&v10[-v12];
    v36 = *(_DWORD *)v34;
    v37 = *(_DWORD *)v10;
    v38 = *(_DWORD *)v34 - *(_DWORD *)v10;
    if (v35 - *(_DWORD *)v34 < 0)
    {
      if (v38 < 0)
      {
LABEL_63:
        v10 = v34;
        goto LABEL_64;
      }
      if (v35 - v37 >= 0)
        v36 = v35;
      else
        v36 = *(_DWORD *)v10;
      if (v35 - v37 >= 0)
        v10 = v33;
    }
    else
    {
      if (v38 > 0)
        goto LABEL_63;
      if (v35 - v37 >= 0)
        v36 = *(_DWORD *)v10;
      else
        v36 = v35;
      if (v35 - v37 < 0)
        v10 = v33;
    }
LABEL_64:
    v39 = v21 - v32;
    v40 = v32 - v36;
    v41 = v21 - v36;
    if ((v39 & 0x80000000) == 0)
    {
      if (v41 < 0)
        v10 = v13;
      if (v40 <= 0)
        v9 = v10;
LABEL_69:
      if (!v7)
        goto LABEL_82;
      goto LABEL_70;
    }
    if (v41 >= 0)
      v10 = v13;
    if (v40 >= 0)
      v9 = v10;
    if (!v7)
    {
LABEL_82:
      v48 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)v9;
      *(_QWORD *)v9 = v48;
      goto LABEL_83;
    }
LABEL_70:
    if (v6)
    {
      v42 = result;
      v43 = (unint64_t)a3 >> 3;
      do
      {
        v44 = *(_QWORD *)v42;
        *(_QWORD *)v42 = *(_QWORD *)v9;
        v42 += 8;
        *(_QWORD *)v9 = v44;
        v9 += 8;
        --v43;
      }
      while (v43);
    }
    else
    {
      v45 = a3;
      v46 = result;
      do
      {
        v47 = *v46;
        *v46++ = *v9;
        *v9++ = v47;
        --v45;
      }
      while (v45);
    }
LABEL_83:
    v49 = 0;
    v50 = &result[a3];
    v51 = &result[(a2 - 1) * a3];
    v52 = v51;
    v53 = &result[a3];
    v54 = &result[a3];
LABEL_84:
    while (v53 <= v52 && *(_DWORD *)v53 - *(_DWORD *)result <= 0)
    {
      if (*(_DWORD *)v53 == *(_DWORD *)result)
      {
        if (v7)
        {
          v55 = 0;
          if (v6)
          {
            do
            {
              v56 = *(_QWORD *)&v54[8 * v55];
              *(_QWORD *)&v54[8 * v55] = *(_QWORD *)&v53[8 * v55];
              *(_QWORD *)&v53[8 * v55++] = v56;
            }
            while (v8 != v55);
          }
          else
          {
            do
            {
              v57 = v54[v55];
              v54[v55] = v53[v55];
              v53[v55++] = v57;
            }
            while (a3 != v55);
          }
        }
        else
        {
          v65 = *(_QWORD *)v54;
          *(_QWORD *)v54 = *(_QWORD *)v53;
          *(_QWORD *)v53 = v65;
        }
        v54 += a3;
        v49 = 1;
      }
      v53 += a3;
    }
    while (v53 <= v52)
    {
      if (*(_DWORD *)v52 - *(_DWORD *)result < 0)
      {
        if (v7)
        {
          v62 = 0;
          if (v6)
          {
            do
            {
              v63 = *(_QWORD *)&v53[8 * v62];
              *(_QWORD *)&v53[8 * v62] = *(_QWORD *)&v52[8 * v62];
              *(_QWORD *)&v52[8 * v62++] = v63;
            }
            while (v8 != v62);
          }
          else
          {
            do
            {
              v64 = v53[v62];
              v53[v62] = v52[v62];
              v52[v62++] = v64;
            }
            while (a3 != v62);
          }
        }
        else
        {
          v66 = *(_QWORD *)v53;
          *(_QWORD *)v53 = *(_QWORD *)v52;
          *(_QWORD *)v52 = v66;
        }
        v53 += a3;
        v52 += v4;
        v49 = 1;
        goto LABEL_84;
      }
      if (*(_DWORD *)v52 == *(_DWORD *)result)
      {
        if (v7)
        {
          v58 = 0;
          if (v6)
          {
            do
            {
              v59 = *(_QWORD *)&v52[8 * v58];
              *(_QWORD *)&v52[8 * v58] = *(_QWORD *)&v51[8 * v58];
              *(_QWORD *)&v51[8 * v58++] = v59;
            }
            while (v8 != v58);
          }
          else
          {
            do
            {
              v60 = v52[v58];
              v52[v58] = v51[v58];
              v51[v58++] = v60;
            }
            while (a3 != v58);
          }
        }
        else
        {
          v61 = *(_QWORD *)v52;
          *(_QWORD *)v52 = *(_QWORD *)v51;
          *(_QWORD *)v51 = v61;
        }
        v51 += v4;
        v49 = 1;
      }
      v52 += v4;
    }
    v67 = &result[a2 * a3];
    if (!v49)
      break;
    v68 = v53 - v54;
    if (v54 - result >= v53 - v54)
      v69 = v53 - v54;
    else
      v69 = v54 - result;
    if (v69)
    {
      if (v6)
      {
        v70 = &v53[-v69];
        v71 = v69 >> 3;
        v72 = result;
        do
        {
          v73 = *(_QWORD *)v72;
          *(_QWORD *)v72 = *(_QWORD *)v70;
          v72 += 8;
          *(_QWORD *)v70 = v73;
          v70 += 8;
          --v71;
        }
        while (v71);
      }
      else
      {
        v74 = -(uint64_t)v69;
        v75 = result;
        do
        {
          v76 = *v75;
          *v75++ = v53[v74];
          v53[v74] = v76;
          v77 = __CFADD__(v74++, 1);
        }
        while (!v77);
      }
    }
    v78 = v51 - v52;
    v79 = v67 - &v51[a3];
    if (v51 - v52 < v79)
      v79 = v51 - v52;
    if (v79)
    {
      if (v6)
      {
        v80 = &v67[-v79];
        v81 = (unint64_t)v79 >> 3;
        do
        {
          v82 = *(_QWORD *)v53;
          *(_QWORD *)v53 = *(_QWORD *)v80;
          v53 += 8;
          *(_QWORD *)v80 = v82;
          v80 += 8;
          --v81;
        }
        while (v81);
      }
      else
      {
        v83 = -v79;
        do
        {
          v84 = *v53;
          *v53++ = v67[v83];
          v67[v83] = v84;
          v77 = __CFADD__(v83++, 1);
        }
        while (!v77);
      }
    }
    if (v68 > a3)
      result = (char *)mrec_qsort_r<GenoneClassTree>();
    if (v78 <= a3)
      return result;
    result = &v67[-v78];
    a2 = v78 / (unint64_t)a3;
    v6 = ((((_BYTE)v67 - v78) | a3) & 7) == 0;
    if (((((_BYTE)v67 - v78) | a3) & 7) != 0)
      v7 = 2;
    else
      v7 = v5;
    if (a2 < 7)
      goto LABEL_145;
  }
  if ((uint64_t)(a2 * a3) > a3)
  {
    v96 = result;
    do
    {
      if (v50 > result)
      {
        v97 = v96;
        v98 = v50;
        do
        {
          v99 = v98;
          v98 = (_DWORD *)((char *)v98 + v4);
          if (*v98 - *v99 < 1)
            break;
          if (v7)
          {
            v100 = 0;
            v101 = (uint64_t)v97 + a3;
            if (v6)
            {
              do
              {
                v102 = *(_QWORD *)(v101 + 8 * v100);
                *(_QWORD *)(v101 + 8 * v100) = *(_QWORD *)&v97[2 * v100];
                *(_QWORD *)&v97[2 * v100++] = v102;
              }
              while (v8 != v100);
            }
            else
            {
              do
              {
                v103 = *(_BYTE *)(v101 + v100);
                *(_BYTE *)(v101 + v100) = *((_BYTE *)v97 + v100);
                *((_BYTE *)v97 + v100++) = v103;
              }
              while (a3 != v100);
            }
          }
          else
          {
            v104 = *(_QWORD *)v99;
            *(_QWORD *)v99 = *(_QWORD *)v98;
            *(_QWORD *)v98 = v104;
          }
          v97 = (_DWORD *)((char *)v97 + v4);
        }
        while (v98 > (_DWORD *)result);
      }
      v50 += a3;
      v96 = (_DWORD *)((char *)v96 + a3);
    }
    while (v50 < v67);
  }
  return result;
}

unint64_t GenoneClassTree::initForType(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v54[2];

  *(_DWORD *)(a1 + 184) = a2;
  v5 = (_QWORD *)(a1 + 80);
  if (a2 != 1)
    v5 = (_QWORD *)(a1 + 48);
  if (a2 == 2)
    v6 = (_QWORD *)(a1 + 96);
  else
    v6 = v5;
  *(_DWORD *)(a1 + 200) = 0;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = 0;
  v9 = v7 - 1;
  if (v7 != 1)
  {
    do
    {
      if (((*(_DWORD *)(*v6 + 4 * (v9 >> 5)) >> v9) & 1) != 0)
      {
        if (v8 == *(_DWORD *)(a1 + 204))
        {
          DgnPrimArray<unsigned int>::reallocElts(a1 + 192, 1, 1);
          v8 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 192) + 4 * v8) = v9;
        v8 = *(_DWORD *)(a1 + 200) + 1;
        *(_DWORD *)(a1 + 200) = v8;
      }
      --v9;
    }
    while (v9);
  }
  v10 = (_QWORD *)(a1 + 208);
  v11 = *(unsigned int *)(a1 + 216);
  if ((int)v11 >= 1)
  {
    v12 = 16 * v11 - 16;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v10 + v12);
      v12 -= 16;
    }
    while (v12 != -16);
    v8 = *(_DWORD *)(a1 + 200);
  }
  v13 = 0;
  *(_DWORD *)(a1 + 216) = 0;
  v14 = *(_DWORD *)(a1 + 220);
  if (v8 <= v14
    || (DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 208, v8 - v14, 0), v13 = *(_DWORD *)(a1 + 216), v13 <= v8))
  {
    if (v13 < v8)
    {
      v17 = v8 - (unint64_t)v13;
      v18 = 16 * v13;
      do
      {
        v19 = (_QWORD *)(*v10 + v18);
        *v19 = 0;
        v19[1] = 0;
        v18 += 16;
        --v17;
      }
      while (v17);
    }
  }
  else if ((int)v13 > (int)v8)
  {
    v15 = (int)v13;
    v16 = 16 * (int)v13 - 16;
    do
    {
      --v15;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v10 + v16);
      v16 -= 16;
    }
    while (v15 > (int)v8);
  }
  *(_DWORD *)(a1 + 216) = v8;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v54, *(unsigned int *)(a1 + 8));
  v20 = 0;
  LODWORD(v21) = *(_DWORD *)(a1 + 8);
  while (1)
  {
    v22 = *(_DWORD *)(a1 + 112);
    v21 = (v21 - 1);
    if (!(_DWORD)v21)
      break;
    if (v21 >= v22)
    {
      v23 = v54[0] + 16 * v21;
      v25 = (_DWORD *)(v23 + 8);
      v24 = *(unsigned int *)(v23 + 8);
      if (v24 == *(_DWORD *)(v23 + 12))
      {
        DgnPrimArray<unsigned int>::reallocElts(v54[0] + 16 * v21, 1, 1);
        v24 = *v25;
      }
      *(_DWORD *)(*(_QWORD *)v23 + 4 * v24) = v21;
      ++*v25;
    }
    if (((*(_DWORD *)(*v6 + 4 * (v21 >> 5)) >> v21) & 1) != 0)
    {
      DgnPrimArray<int>::copyArraySlice(*v10 + 16 * v20++, (uint64_t *)(v54[0] + 16 * v21), 0, *(_DWORD *)(v54[0] + 16 * v21 + 8));
    }
    else
    {
      v26 = v54[0];
      if (*(_DWORD *)(v54[0] + 16 * v21 + 8))
      {
        v27 = 0;
        do
        {
          v28 = *(_DWORD *)(*(_QWORD *)(v26 + 16 * v21) + 4 * v27);
          v29 = v26 + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v21);
          v31 = (_DWORD *)(v29 + 8);
          v30 = *(unsigned int *)(v29 + 8);
          if (v30 == *(_DWORD *)(v29 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(v26 + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v21), 1, 1);
            v30 = *v31;
            v26 = v54[0];
          }
          *(_DWORD *)(*(_QWORD *)v29 + 4 * v30) = v28;
          ++*v31;
          ++v27;
        }
        while (v27 < *(unsigned int *)(v26 + 16 * v21 + 8));
      }
    }
    if (v20 == *(_DWORD *)(a1 + 200))
    {
      v22 = *(_DWORD *)(a1 + 112);
      break;
    }
  }
  v32 = (_QWORD *)(a1 + 224);
  v33 = *(_DWORD *)(a1 + 236);
  if (v22 > v33)
    DgnPrimArray<unsigned int>::reallocElts(a1 + 224, v22 - v33, 0);
  *(_DWORD *)(a1 + 232) = v22;
  if (v22 != 1)
    bzero((void *)(*v32 + 4 * (v22 - 1 - (unint64_t)(v22 - 2))), 4 * (v22 - 1));
  v34 = (*(_DWORD *)(a1 + 8) - 1);
  if (*(_DWORD *)(a1 + 8) != 1)
  {
    v35 = *(_QWORD *)(a1 + 16);
    do
    {
      v36 = *(unsigned int *)(v35 + 4 * v34);
      if ((_DWORD)v36)
        ++*(_DWORD *)(*v32 + 4 * v36);
      --v34;
    }
    while ((_DWORD)v34);
  }
  if (!a3)
    goto LABEL_65;
  v37 = *(_DWORD *)(a1 + 12);
  v38 = *(_DWORD *)(a3 + 12);
  if (v37 <= v38)
  {
    *(_DWORD *)(a3 + 8) = v37;
    v39 = (unsigned int *)(a3 + 8);
    if (!v37)
      goto LABEL_55;
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a3, v37 - v38, 0);
    *(_DWORD *)(a3 + 8) = v37;
    v39 = (unsigned int *)(a3 + 8);
  }
  v40 = 0;
  v41 = *(_QWORD *)a3;
  do
    *(_DWORD *)(v41 + 4 * v40++) = 0;
  while (v40 < *v39);
LABEL_55:
  v42 = *(unsigned int *)(a1 + 216);
  if (!(_DWORD)v42)
  {
LABEL_65:
    v42 = 0;
    goto LABEL_66;
  }
  v43 = 0;
  v44 = *(_QWORD *)(a1 + 208);
  do
  {
    v45 = v44 + 16 * v43;
    v48 = *(_DWORD *)(v45 + 8);
    v46 = (unsigned int *)(v45 + 8);
    v47 = v48;
    if (v48)
    {
      v49 = 0;
      v50 = *(_QWORD *)(v44 + 16 * v43);
      v51 = *(_QWORD *)(a1 + 32);
      do
      {
        v52 = *(unsigned __int16 *)(v51 + 2 * *(unsigned int *)(v50 + 4 * v49));
        if (v52 != 65534)
        {
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v52) = v43;
          v47 = *v46;
        }
        ++v49;
      }
      while (v49 < v47);
      v42 = *(unsigned int *)(a1 + 216);
    }
    ++v43;
  }
  while (v43 < v42);
LABEL_66:
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v54);
  return v42;
}

void sub_2097C8450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *GenoneClassTree::release(GenoneClassTree *this)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = (_QWORD *)*((_QWORD *)this + 24);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((_QWORD *)this + 24) = 0;
  }
  *((_QWORD *)this + 25) = 0;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 208);
  result = (_QWORD *)*((_QWORD *)this + 28);
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *((_QWORD *)this + 28) = 0;
  }
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 46) = 3;
  return result;
}

BOOL GenoneClassTree::decomposeInverseVariancesForTransformationMatrixAdaptation(GenoneClassTree *this)
{
  uint64_t *v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  double v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int i;
  int *v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t j;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  _BYTE v84[16];
  _QWORD v85[2];
  uint64_t v86;
  unsigned int v87;
  _QWORD v88[2];
  unint64_t v89;
  uint64_t *v90;
  int v91;

  v2 = (uint64_t *)((char *)this + 240);
  v3 = *((unsigned int *)this + 54);
  v5 = *(unsigned int *)(*(_QWORD *)this + 132);
  v4 = *(_DWORD *)(*(_QWORD *)this + 136);
  if (__PAIR64__(*((_DWORD *)this + 60), *((_DWORD *)this + 61)) == __PAIR64__(v4, v5)
    && *((_DWORD *)this + 68) == (_DWORD)v3
    && *((_DWORD *)this + 72) == (_DWORD)v3)
  {
    return 1;
  }
  else
  {
    GenoneClassTree::clearDecomposedInverseVarianceData(this);
    v89 = __PAIR64__(v5, v4);
    v91 = 0;
    v90 = 0;
    if ((_DWORD)v5 * v4)
    {
      v90 = MemChunkAlloc(8 * v5 * v4, 0);
      v91 = v5 * v4;
    }
    *((_DWORD *)this + 60) = v4;
    *((_DWORD *)this + 61) = v5;
    v83 = (uint64_t *)((char *)this + 248);
    DgnPrimFixArray<double>::copyArraySlice((uint64_t)this + 248, (uint64_t *)&v90, 0, v5 * v4);
    v78 = (_QWORD *)((char *)this + 264);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v90);
    v8 = *((_DWORD *)this + 69);
    if (v3 > v8)
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v78, v3 - v8, 0);
    v9 = *((unsigned int *)this + 68);
    if (v9 <= v3)
    {
      if (v9 < v3)
      {
        v12 = v3 - v9;
        v13 = (_DWORD *)(*v78 + 16 * v9 + 8);
        do
        {
          *v13 = 0;
          *((_QWORD *)v13 - 1) = 0;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
    }
    else if ((int)v9 > (int)v3)
    {
      v10 = (int)v9;
      v11 = 16 * (int)v9 - 16;
      do
      {
        --v10;
        DgnPrimFixArray<double>::~DgnPrimFixArray(*v78 + v11);
        v11 -= 16;
      }
      while (v10 > (int)v3);
    }
    v14 = (_QWORD *)((char *)this + 280);
    *((_DWORD *)this + 68) = v3;
    v15 = *((_DWORD *)this + 73);
    if (v3 > v15)
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 280, v3 - v15, 0);
    v16 = *((unsigned int *)this + 72);
    if (v16 <= v3)
    {
      if (v16 < v3)
      {
        v19 = v3 - v16;
        v20 = 24 * v16;
        do
        {
          v21 = *v14 + v20;
          *(_QWORD *)v21 = 0;
          *(_QWORD *)(v21 + 8) = 0;
          *(_DWORD *)(v21 + 16) = 0;
          v20 += 24;
          --v19;
        }
        while (v19);
      }
    }
    else if ((int)v16 > (int)v3)
    {
      v17 = (int)v16;
      v18 = 24 * (int)v16 - 16;
      do
      {
        --v17;
        DgnPrimFixArray<double>::~DgnPrimFixArray(*v14 + v18);
        v18 -= 24;
      }
      while (v17 > (int)v3);
    }
    *((_DWORD *)this + 72) = v3;
    v89 = 0;
    v90 = 0;
    v88[0] = 0;
    v88[1] = 0;
    if (v4)
    {
      for (i = 0; i != v4; ++i)
      {
        PelMgr::getComponentByIndex(*(_QWORD *)this, i, (uint64_t)&v89, (uint64_t)v88, v7);
        if ((_DWORD)v5)
        {
          v23 = (int *)v88[0];
          v24 = *(_DWORD *)v2;
          v25 = v5;
          v26 = i;
          v27 = *v83;
          do
          {
            v28 = *v23++;
            v7 = 1.0 / (double)(v28 * v28);
            *(double *)(v27 + 8 * v26) = v7;
            v26 += v24;
            --v25;
          }
          while (v25);
        }
      }
    }
    BitArray::BitArray((BitArray *)&v86, v4);
    BitArray::clearRange((BitArray *)&v86, 0, v87);
    if ((_DWORD)v3)
    {
      v75 = (uint64_t *)((char *)this + 280);
      v76 = v5;
      v29 = 0;
      v6 = 0;
      v79 = v3;
      while (1)
      {
        v82 = 16 * v29;
        if (v3 < 2)
        {
          BitArray::setRange(&v86, 0, v87);
          v38 = 0;
          v39 = v2;
        }
        else
        {
          v30 = *((_QWORD *)this + 26);
          v31 = v30 + 16 * v29;
          v32 = *(unsigned int *)(v31 + 8);
          if ((_DWORD)v32)
          {
            v33 = 0;
            v34 = *(unsigned int **)(v30 + 16 * v29);
            v35 = *(unsigned int *)(v31 + 8);
            do
            {
              v36 = *v34++;
              v37 = *(unsigned __int16 *)(*((_QWORD *)this + 4) + 2 * v36);
              if (v37 != 65534)
                v33 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 272) + 4 * v37 + 4)
                    + v33
                    - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 272) + 4 * v37);
              --v35;
            }
            while (v35);
          }
          else
          {
            v33 = 0;
          }
          v38 = MemChunkAlloc(0x18uLL, 0);
          *(_DWORD *)v38 = v33;
          *((_DWORD *)v38 + 1) = v76;
          v40 = v33 * v76;
          *((_DWORD *)v38 + 4) = 0;
          v38[1] = 0;
          if (v40)
          {
            v38[1] = (uint64_t)MemChunkAlloc(8 * v40, 0);
            *((_DWORD *)v38 + 4) = v40;
          }
          if ((_DWORD)v32)
          {
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = *(unsigned __int16 *)(*((_QWORD *)this + 4)
                                        + 2
                                        * *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 26) + 16 * v29) + 4 * v41));
              if (v43 != 65534)
              {
                v44 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 272) + 4 * v43);
                v46 = *v44;
                v45 = v44[1];
                if (*v44 < v45)
                {
                  do
                  {
                    DgnMatrix::getRow(v2, v46, (uint64_t)v85);
                    v47 = *((unsigned int *)v38 + 1);
                    if ((_DWORD)v47)
                    {
                      v48 = (uint64_t *)v85[0];
                      v49 = *(_DWORD *)v38;
                      v50 = v42;
                      v51 = v38[1];
                      do
                      {
                        v52 = *v48++;
                        *(_QWORD *)(v51 + 8 * v50) = v52;
                        v50 += v49;
                        --v47;
                      }
                      while (v47);
                    }
                    ++v42;
                    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v85);
                    *(_DWORD *)(v86 + 4 * (v46 >> 5)) |= 1 << v46;
                    ++v46;
                  }
                  while (v46 != v45);
                }
              }
              ++v41;
            }
            while (v41 != v32);
          }
          v39 = v38;
        }
        v53 = (_QWORD *)(*v78 + 16 * v29);
        v54 = *v75;
        v80 = v29;
        v55 = (int *)(*v75 + 24 * v29);
        if ((DgnMatrix::singularValueDecompose(v39, (uint64_t)v53, v55) & 1) == 0)
          break;
        v77 = v54;
        if (v79 >= 2)
        {
          v81 = *(unsigned int *)(*((_QWORD *)this + 26) + 16 * v29 + 8);
          if ((_DWORD)v81)
          {
            v56 = 0;
            v57 = 0;
            do
            {
              v58 = *(unsigned __int16 *)(*((_QWORD *)this + 4)
                                        + 2 * *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 26) + v82) + 4 * v56));
              if (v58 != 65534)
              {
                v59 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 272) + 4 * v58);
                v60 = *v59;
                v61 = v59[1];
                if (*v59 < v61)
                {
                  do
                  {
                    DgnMatrix::getRow(v39, v57, (uint64_t)v85);
                    v62 = *((unsigned int *)this + 61);
                    if ((_DWORD)v62)
                    {
                      v63 = (uint64_t *)v85[0];
                      v64 = *(_DWORD *)v2;
                      v65 = v60;
                      v66 = *v83;
                      do
                      {
                        v67 = *v63++;
                        *(_QWORD *)(v66 + 8 * v65) = v67;
                        v65 += v64;
                        --v62;
                      }
                      while (v62);
                    }
                    ++v57;
                    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v85);
                    ++v60;
                  }
                  while (v60 != v61);
                }
              }
              ++v56;
            }
            while (v56 != v81);
          }
        }
        if ((_DWORD)v76)
        {
          for (j = 0; j != v76; ++j)
          {
            DgnMatrix::getCol((uint64_t *)v55, j, (uint64_t)v84);
            DgnVector::operator*((uint64_t)v84, (uint64_t)v85, *(double *)(*v53 + 8 * j));
            v69 = *v55;
            if ((_DWORD)v69)
            {
              v70 = (uint64_t *)v85[0];
              v71 = *(_QWORD *)(v77 + 24 * v80 + 8);
              v72 = v69 * j;
              do
              {
                v73 = *v70++;
                *(_QWORD *)(v71 + 8 * v72++) = v73;
                --v69;
              }
              while (v69);
            }
            DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v85);
            DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v84);
          }
        }
        if (v38)
        {
          DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)(v38 + 1));
          MemChunkFree(v38, 0);
        }
        LODWORD(v3) = v79;
        v29 = v80 + 1;
        v6 = v80 + 1 >= v79;
        if (v80 + 1 == v79)
          goto LABEL_76;
      }
      GenoneClassTree::clearDecomposedInverseVarianceData(this);
    }
    else
    {
LABEL_76:
      v6 = 1;
    }
    BitArray::~BitArray((BitArray *)&v86);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v88);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v89);
  }
  return v6;
}

void sub_2097C8B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  uint64_t v17;
  va_list va;
  uint64_t v19;
  va_list va1;

  va_start(va1, a15);
  va_start(va, a15);
  v17 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  BitArray::~BitArray((BitArray *)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v15 - 128);
  _Unwind_Resume(a1);
}

_QWORD *GenoneClassTree::clearDecomposedInverseVarianceData(GenoneClassTree *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)*((_QWORD *)this + 31);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((_QWORD *)this + 31) = 0;
  }
  *((_DWORD *)this + 64) = 0;
  *((_QWORD *)this + 30) = 0;
  DgnArray<DgnVector>::releaseAll((uint64_t)this + 264);
  return DgnArray<DgnMatrix>::releaseAll((uint64_t)this + 280);
}

void DgnVector::operator*(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  double *v6;

  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  DgnPrimFixArray<double>::copyArraySlice(a2, (uint64_t *)a1, 0, *(_DWORD *)(a1 + 8));
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5)
  {
    v6 = *(double **)a2;
    do
    {
      *v6 = *v6 * a3;
      ++v6;
      --v5;
    }
    while (v5);
  }
}

_QWORD *DgnArray<DgnVector>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 16 * v2 - 16;
    do
    {
      DgnPrimFixArray<double>::~DgnPrimFixArray(*(_QWORD *)a1 + v3);
      v3 -= 16;
    }
    while (v3 != -16);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnArray<DgnMatrix>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 24 * v2 - 16;
    do
    {
      DgnPrimFixArray<double>::~DgnPrimFixArray(*(_QWORD *)a1 + v3);
      v3 -= 24;
    }
    while (v3 != -16);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void GenoneClassTree::saveGenoneClassTree(GenoneClassTree *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  DgnStream *v8;
  uint64_t CurrentSubDirComponents;
  unsigned int v10;

  if (a4)
  {
    GenoneClassTree::saveGenoneClassTreeText(this, a2, a5);
  }
  else
  {
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x19u, a5, "MRGCT!?#", 24, 4);
    v10 = 0;
    writeObject((uint64_t)v8, (int *)this + 2, &v10);
    writeObject((uint64_t)v8, (int *)this + 3, &v10);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 16, &v10);
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)this + 32, &v10);
    writeObject((uint64_t)v8, (uint64_t)this + 48, &v10);
    writeObject((uint64_t)v8, (uint64_t)this + 64, &v10);
    writeObject((uint64_t)v8, (uint64_t)this + 80, &v10);
    writeObject((uint64_t)v8, (uint64_t)this + 96, &v10);
    writeObject((uint64_t)v8, (int *)this + 28, &v10);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 120, &v10);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 136, &v10);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 152, &v10);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 168, &v10);
    writeObject(v8, (GenoneClassTree *)((char *)this + 240), &v10);
    writeObject<DgnVector>((uint64_t)v8, (uint64_t)this + 264, &v10);
    writeObject<DgnMatrix>(v8, (uint64_t)this + 280, &v10);
    writeObjectChecksum((uint64_t)v8, (int *)&v10);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x19u, v10);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
}

void GenoneClassTree::saveGenoneClassTreeText(GenoneClassTree *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[36];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v42);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v42, (uint64_t)a2, 0x1Au, a3);
  v40 = 0;
  v41 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v42, sGCT_Versions, (uint64_t)&v40, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v42, "GenoneClassTree", (_QWORD *)(v40 + 8 * (v41 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v42, "NumberOfNodes", (*((_DWORD *)this + 2) - 1));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v42, "NumberOfGenones", *((unsigned int *)this + 3));
  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  DgnString::DgnString((DgnString *)v35, "NodeId");
  v11 = v39;
  if ((_DWORD)v39 == HIDWORD(v39))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v38, 1, 1);
    v11 = v39;
  }
  DgnString::DgnString((DgnString *)(v38 + 16 * v11), (const DgnString *)v35);
  LODWORD(v39) = v39 + 1;
  DgnString::~DgnString((DgnString *)v35);
  v12 = v37;
  if ((_DWORD)v37 == HIDWORD(v37))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v36, 1, 1);
    v12 = v37;
  }
  *(_DWORD *)(v36 + 4 * v12) = 3;
  LODWORD(v37) = v12 + 1;
  v34 = v39;
  DgnString::DgnString((DgnString *)v35, "ParentId");
  v13 = v39;
  if ((_DWORD)v39 == HIDWORD(v39))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v38, 1, 1);
    v13 = v39;
  }
  DgnString::DgnString((DgnString *)(v38 + 16 * v13), (const DgnString *)v35);
  LODWORD(v39) = v39 + 1;
  DgnString::~DgnString((DgnString *)v35);
  v14 = v37;
  if ((_DWORD)v37 == HIDWORD(v37))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v36, 1, 1);
    v14 = v37;
  }
  *(_DWORD *)(v36 + 4 * v14) = 3;
  LODWORD(v37) = v14 + 1;
  v33 = v39;
  DgnString::DgnString((DgnString *)v35, "GenId");
  v15 = v39;
  if ((_DWORD)v39 == HIDWORD(v39))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v38, 1, 1);
    v15 = v39;
  }
  DgnString::DgnString((DgnString *)(v38 + 16 * v15), (const DgnString *)v35);
  LODWORD(v39) = v39 + 1;
  DgnString::~DgnString((DgnString *)v35);
  v16 = v37;
  if ((_DWORD)v37 == HIDWORD(v37))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v36, 1, 1);
    v16 = v37;
  }
  *(_DWORD *)(v36 + 4 * v16) = 1;
  LODWORD(v37) = v16 + 1;
  v32 = v39;
  DgnString::DgnString((DgnString *)v35, "IsTransAccClass");
  v17 = v39;
  if ((_DWORD)v39 == HIDWORD(v39))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v38, 1, 1);
    v17 = v39;
  }
  DgnString::DgnString((DgnString *)(v38 + 16 * v17), (const DgnString *)v35);
  LODWORD(v39) = v39 + 1;
  DgnString::~DgnString((DgnString *)v35);
  v18 = v37;
  if ((_DWORD)v37 == HIDWORD(v37))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v36, 1, 1);
    v18 = v37;
  }
  *(_DWORD *)(v36 + 4 * v18) = 3;
  LODWORD(v37) = v18 + 1;
  v19 = v39;
  DgnString::DgnString((DgnString *)v35, "IsSpeakerConstrainedTransAccClass");
  v20 = v39;
  if ((_DWORD)v39 == HIDWORD(v39))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v38, 1, 1);
    v20 = v39;
  }
  DgnString::DgnString((DgnString *)(v38 + 16 * v20), (const DgnString *)v35);
  LODWORD(v39) = v39 + 1;
  DgnString::~DgnString((DgnString *)v35);
  v21 = v37;
  if ((_DWORD)v37 == HIDWORD(v37))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v36, 1, 1);
    v21 = v37;
  }
  *(_DWORD *)(v36 + 4 * v21) = 3;
  LODWORD(v37) = v21 + 1;
  v22 = v39;
  DgnString::DgnString((DgnString *)v35, "IsChannelConstrainedTransAccClass");
  v23 = v39;
  if ((_DWORD)v39 == HIDWORD(v39))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v38, 1, 1);
    v23 = v39;
  }
  DgnString::DgnString((DgnString *)(v38 + 16 * v23), (const DgnString *)v35);
  LODWORD(v39) = v39 + 1;
  DgnString::~DgnString((DgnString *)v35);
  v24 = v37;
  if ((_DWORD)v37 == HIDWORD(v37))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v36, 1, 1);
    v24 = v37;
  }
  *(_DWORD *)(v36 + 4 * v24) = 3;
  LODWORD(v37) = v24 + 1;
  v25 = v39;
  DgnString::DgnString((DgnString *)v35, "IsTransAccAdaptable");
  v26 = v39;
  if ((_DWORD)v39 == HIDWORD(v39))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v38, 1, 1);
    v26 = v39;
  }
  DgnString::DgnString((DgnString *)(v38 + 16 * v26), (const DgnString *)v35);
  LODWORD(v39) = v39 + 1;
  DgnString::~DgnString((DgnString *)v35);
  v27 = v37;
  if ((_DWORD)v37 == HIDWORD(v37))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v36, 1, 1);
    v27 = v37;
  }
  *(_DWORD *)(v36 + 4 * v27) = 3;
  LODWORD(v37) = v27 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v42, (uint64_t)&v36, (uint64_t)&v38);
  if (*((_DWORD *)this + 6) >= 2u)
  {
    v28 = 1;
    do
    {
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v42, 0, v28);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v42, v34, *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v28));
      v29 = *(unsigned __int16 *)(*((_QWORD *)this + 4) + 2 * v28);
      if (v29 == 65534)
      {
        v30 = -2;
      }
      else if (v29 == 0xFFFF)
      {
        v30 = -1;
      }
      else
      {
        v30 = *(unsigned __int16 *)(*((_QWORD *)this + 4) + 2 * v28);
      }
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v42, v33, v30);
      v31 = v28 >> 5;
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v42, v32, (*(_DWORD *)(*((_QWORD *)this + 6) + 4 * v31) >> v28) & 1);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v42, v19, (*(_DWORD *)(*((_QWORD *)this + 10) + 4 * v31) >> (v28 & 0x1F)) & 1);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v42, v22, (*(_DWORD *)(*((_QWORD *)this + 12) + 4 * v31) >> (v28 & 0x1F)) & 1);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v42, v25, (*(_DWORD *)(*((_QWORD *)this + 8) + 4 * v31) >> (v28 & 0x1F)) & 1);
      DgnTextFileWriter::writeNextLine(v42);
      ++v28;
    }
    while (v28 < *((unsigned int *)this + 6));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v36);
  DgnArray<DgnString>::releaseAll((uint64_t)&v38);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v40);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v42);
}

void sub_2097C9484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

uint64_t writeObject<DgnVector>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<DgnMatrix>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject((uint64_t)a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject(a1, (const DgnMatrix *)(*(_QWORD *)a2 + v7), a3);
      ++v8;
      v7 += 24;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void BitArray::add(BitArray *this, int a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;

  v4 = *((_DWORD *)this + 2);
  if (v4 == *((_DWORD *)this + 3))
  {
    BitArray::reallocElts(this, 1, 1);
    v4 = *((_DWORD *)this + 2);
  }
  *((_DWORD *)this + 2) = v4 + 1;
  v5 = 1 << v4;
  v6 = v4 >> 5;
  if (a2)
    v7 = *(_DWORD *)(*(_QWORD *)this + 4 * v6) | v5;
  else
    v7 = *(_DWORD *)(*(_QWORD *)this + 4 * v6) & ~v5;
  *(_DWORD *)(*(_QWORD *)this + 4 * v6) = v7;
}

uint64_t BitArrayIterator::scanForNextSetBitOrStop(BitArrayIterator *this)
{
  unint64_t v1;
  unsigned int v2;
  char v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 1);
  v1 = *((unsigned int *)this + 2);
  if (v2 < v1)
  {
    v3 = v2 & 0x1F;
    if ((v2 & 0x1F) != 0)
    {
      while ((_DWORD)v1 != v2)
      {
        if (((*(_DWORD *)(**((_QWORD **)this + 2) + 4 * (v2 >> 5)) >> v3) & 1) != 0)
          goto LABEL_15;
        *((_DWORD *)this + 1) = ++v2;
        ++v3;
        if ((v2 & 0x1F) == 0)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      v4 = v2 >> 5;
      if (v4 < (v1 >> 5))
      {
        while (!*(_DWORD *)(**((_QWORD **)this + 2) + 4 * v4))
        {
          if (v1 >> 5 == ++v4)
          {
            v4 = v1 >> 5;
            break;
          }
        }
      }
      v2 = 32 * v4;
      *((_DWORD *)this + 1) = v2;
      if (v2 < v1)
      {
        v5 = **((_QWORD **)this + 2);
        while (((*(_DWORD *)(v5 + 4 * (v2 >> 5)) >> v2) & 1) == 0)
        {
          *((_DWORD *)this + 1) = ++v2;
          if ((_DWORD)v1 == v2)
            return (v1 - *(_DWORD *)this);
        }
      }
LABEL_15:
      LODWORD(v1) = v2;
    }
  }
  return (v1 - *(_DWORD *)this);
}

_QWORD *DgnArray<DgnPrimArray<unsigned int>>::DgnArray(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if ((_DWORD)a2)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a1, a2, 0);
    v4 = *((_DWORD *)a1 + 2);
    if (v4 > v2)
    {
      if ((int)v4 > (int)v2)
      {
        v5 = (int)v4;
        v6 = 16 * (int)v4 - 16;
        do
        {
          --v5;
          DgnPrimArray<unsigned int>::~DgnPrimArray(*a1 + v6);
          v6 -= 16;
        }
        while (v5 > (int)v2);
      }
      goto LABEL_11;
    }
  }
  else
  {
    v4 = 0;
  }
  if (v4 < v2)
  {
    v7 = v2 - (unint64_t)v4;
    v8 = 16 * v4;
    do
    {
      v9 = (_QWORD *)(*a1 + v8);
      *v9 = 0;
      v9[1] = 0;
      v8 += 16;
      --v7;
    }
    while (v7);
  }
LABEL_11:
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

void MrecInitModule_psholder_recogctl(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugParamSetUpgrade)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugParamSetUpgrade", byte_209A5B212, byte_209A5B212, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugParamSetUpgrade = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugParamSetUpgrade);
  }
}

uint64_t ParamSetIdCollSearchCmp(unsigned int *a1, ParamSetHolder **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *ParamSetCStringName;
  _BYTE *v10;
  int v11;
  ParamSetHolder *v12;
  int v13;

  ParamSetCStringName = ParamSetHolder::getParamSetCStringName(a2[1], *a1, a3, a4, a5, a6, a7, a8);
  v10 = ParamSetCStringName;
  v11 = *((unsigned __int8 *)a2 + 26);
  v12 = *a2;
  if (!v11)
    return ustrcmp(ParamSetCStringName, (unsigned __int8 *)v12);
  v13 = strlen((const char *)v12);
  return ustrncmp(v10, (unsigned __int8 *)v12, v13);
}

void *ParamSetHolder::getParamSetCStringName(ParamSetHolder *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;

  v8 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * a2);
  if (!v8)
  {
    v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 2237, (uint64_t)"recogctl/psholder", 11, (uint64_t)"%u", a7, a8, a2);
    v8 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v10);
  }
  if (*(_DWORD *)(v8 + 16))
    return *(void **)(v8 + 8);
  else
    return &unk_209A5B212;
}

uint64_t ParamSetIdCollSearchCmpFromParamSetId(unsigned int *a1, ParamSetHolder **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ParamSetHolder *ParamSetCStringName;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ParamSetHolder *v20;
  __int128 v21;
  __int16 v22;
  char v23;

  ParamSetCStringName = (ParamSetHolder *)ParamSetHolder::getParamSetCStringName(a2[1], *(_DWORD *)a2, a3, a4, a5, a6, a7, a8);
  v11 = *((_WORD *)a2 + 12);
  v12 = *((_BYTE *)a2 + 26);
  v20 = ParamSetCStringName;
  v21 = *(_OWORD *)(a2 + 1);
  v22 = v11;
  v23 = v12;
  return ParamSetIdCollSearchCmp(a1, &v20, v13, v14, v15, v16, v17, v18);
}

uint64_t ParamSetHolder::lookupName(ParamSetHolder *a1, ParamSetHolder *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  ParamSetHolder *v17[3];
  __int16 v18;
  char v19;

  v17[0] = a2;
  v17[1] = a1;
  v17[2] = 0;
  v18 = -2;
  v19 = 0;
  if (*((_BYTE *)a1 + 80 * a3 + 72) && *((__int16 *)a1 + 40 * a3 + 37) == -2)
    v8 = (uint64_t)a1 + 80 * a3 + 80;
  else
    v8 = *(_QWORD *)(*((_QWORD *)a1 + 10 * a3 + 12) + 524272);
  v9 = *(_DWORD *)(v8 + 8);
  v10 = v9 - 1;
  if (v9 < 1)
    return 0xFFFFFFFFLL;
  v11 = 0;
  while (1)
  {
    v12 = v11 + v10;
    v13 = v11 + v10 < 0 != __OFADD__(v11, v10) ? v12 + 1 : v11 + v10;
    v14 = (v13 >> 1);
    v15 = ParamSetIdCollSearchCmp((unsigned int *)(*(_QWORD *)v8 + 4 * v14), v17, a3, a4, a5, a6, a7, a8);
    if (!v15)
      break;
    if (v15 >= 0)
      v10 = v14 - 1;
    else
      v11 = v14 + 1;
    if (v11 > v10)
      return 0xFFFFFFFFLL;
  }
  if ((v12 + 3) >= 2)
    return *(unsigned int *)(*(_QWORD *)v8 + 4 * v14);
  else
    return 0xFFFFFFFFLL;
}

uint64_t ParamSetHolder::addName(ParamSetHolder *a1, int a2, ParamSetHolder *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  char v9;
  uint64_t v12;
  uint64_t v13;

  v8 = a4;
  v9 = (char)a3;
  if (ParamSetHolder::lookupName(a1, a3, a4, a4, a5, a6, a7, a8) != -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 732, (uint64_t)"recogctl/psholder", 12, (uint64_t)"%.500s %.500s", v12, v13, v9);
  return DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::add((uint64_t)a1 + 80 * v8 + 72, a2);
}

uint64_t DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::add(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned __int16 v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int16 i;
  int v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  int *v19;
  int v20;
  int v21;
  __int128 v22;
  unsigned __int16 v23;
  char v24;

  v3 = result;
  v4 = (uint64_t *)(result + 8);
  if (*(_BYTE *)result)
  {
    v5 = *(_WORD *)(result + 2);
    v21 = a2;
    v22 = *(_OWORD *)(result + 64);
    v23 = v5;
    v24 = 0;
    result = DgnPrimArray<unsigned int>::searchLastOrBefore((_QWORD *)(result + 8), 0, *(_DWORD *)(result + 16), (uint64_t)&v21, *(uint64_t (**)(uint64_t, uint64_t))(result + 56));
    v6 = result + 1;
    v7 = *(_DWORD *)(v3 + 16);
    if (v7 == *(_DWORD *)(v3 + 20))
    {
      result = DgnPrimArray<unsigned int>::reallocElts((uint64_t)v4, 1, 1);
      v7 = *(_DWORD *)(v3 + 16);
    }
    v8 = *v4;
    if (v7 > v6)
    {
      v9 = 4 * v7;
      v10 = 4 * (v7 - 1);
      do
      {
        *(_DWORD *)(v8 + v9) = *(_DWORD *)(v8 + v10);
        v9 -= 4;
        v10 -= 4;
        --v7;
      }
      while (v6 < v7);
    }
  }
  else
  {
    v6 = *(_DWORD *)(result + 16);
    if (v6 == *(_DWORD *)(result + 20))
    {
      result = DgnPrimArray<unsigned int>::reallocElts(result + 8, 1, 1);
      v6 = *(_DWORD *)(v3 + 16);
    }
    v8 = *v4;
  }
  *(_DWORD *)(v8 + 4 * v6) = a2;
  ++*(_DWORD *)(v3 + 16);
  v11 = *(_DWORD *)(v3 + 32);
  if (v11)
  {
    for (i = 0; i < v11; ++i)
    {
      result = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i);
      if (result)
      {
        v21 = a2;
        v22 = *(_OWORD *)(v3 + 64);
        v23 = i;
        v24 = 0;
        result = DgnPrimArray<unsigned int>::searchLastOrBefore((_QWORD *)result, 0, *(_DWORD *)(result + 8), (uint64_t)&v21, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56));
        v13 = result;
        v14 = *(uint64_t **)(*(_QWORD *)(v3 + 24) + 8 * i);
        v15 = *((_DWORD *)v14 + 2);
        if (v15 == *((_DWORD *)v14 + 3))
        {
          result = DgnPrimArray<unsigned int>::reallocElts(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i), 1, 1);
          v15 = *((_DWORD *)v14 + 2);
        }
        v16 = v13 + 1;
        v17 = *v14;
        if (v15 > v13 + 1)
        {
          v18 = (_DWORD *)(v17 + 4 * v15);
          v19 = (int *)(v17 + 4 * (v15 - 1));
          do
          {
            v20 = *v19--;
            *v18-- = v20;
            --v15;
          }
          while (v16 < v15);
        }
        *(_DWORD *)(v17 + 4 * v16) = a2;
        ++*((_DWORD *)v14 + 2);
        v11 = *(_DWORD *)(v3 + 32);
      }
    }
  }
  return result;
}

void ParamSetHolder::getRefDetails(ParamSetHolder *this@<X0>, DgnString *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  DgnString::DgnString(a2);
  v7 = *((unsigned int *)this + 4);
  if ((_DWORD)v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * i);
      if (v9)
      {
        v10 = *(unsigned int *)(v9 + 36);
        if ((_DWORD)v10)
        {
          if (*(_DWORD *)(v9 + 16))
            v11 = *(char **)(v9 + 8);
          else
            v11 = byte_209A5B212;
          DgnString::printfAppend(a2, "%u,%u,%s,%u;", v4, v5, v6, *(unsigned int *)(v9 + 24), i, v11, v10);
        }
      }
    }
  }
}

void sub_2097C9DE8(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void ParamSetHolder::ParamSetHolder(ParamSetHolder *this, int a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;

  *(_DWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v3 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0x10000001DLL;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 8) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  v4 = (char *)this + 1112;
  v5 = 72;
  do
  {
    v6 = (char *)this + v5;
    *v6 = 0;
    *(_DWORD *)(v6 + 2) = 0;
    *(_OWORD *)(v6 + 8) = 0uLL;
    *(_OWORD *)(v6 + 24) = 0uLL;
    *(_OWORD *)(v6 + 40) = 0uLL;
    v5 += 80;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 9) = 0;
  }
  while (v6 + 80 != v4);
  *(_OWORD *)((char *)this + 1153) = 0u;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)v4 = 0u;
  FileHistory::FileHistory((ParamSetHolder *)((char *)this + 1176), 0x64u, 0x64u);
  v7 = *((_DWORD *)this + 4);
  if (v7 == *((_DWORD *)this + 5))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v3, 1, 1);
    v7 = *((_DWORD *)this + 4);
  }
  v8 = 0;
  *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v7) = 0;
  *((_DWORD *)this + 4) = v7 + 1;
  do
  {
    v9 = (char *)this + v8;
    *((_QWORD *)v9 + 16) = ParamSetIdCollSearchCmpFromParamSetId;
    *((_QWORD *)v9 + 17) = this;
    *((_QWORD *)v9 + 18) = 0;
    v9[72] = 1;
    v8 += 80;
    *(_DWORD *)(v9 + 74) = 131070;
  }
  while (v8 != 1040);
  v10 = MemChunkAlloc(0x110uLL, 0);
  *((_QWORD *)this + 139) = EnvMgr::EnvMgr((EnvMgr *)v10, 0xDu);
}

void sub_2097C9F38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;

  for (i = 1032; i != -8; i -= 80)
    DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray(v2 + i);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnIOwnArray<ParamSetBase *>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void ParamSetHolder::~ParamSetHolder(EnvMgr **this)
{
  uint64_t i;

  DgnDelete<EnvMgr>(this[139]);
  FileHistory::~FileHistory((FileHistory *)(this + 147));
  for (i = 129; i != -1; i -= 10)
    DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray((uint64_t)&this[i]);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 5));
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)(this + 1));
}

void ParamSetHolder::printSize(ParamSetHolder *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t i;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  EnvMgr *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  int v148;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 822, (DgnString *)&v147);
  if (v148)
    v15 = (char *)v147;
  else
    v15 = byte_209A5B212;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, byte_209A5B212, a3, byte_209A5B212, v15);
  DgnString::~DgnString((DgnString *)&v147);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, byte_209A5B212);
  v142 = a3;
  v20 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 824, (DgnString *)&v147);
  if (v148)
    v25 = (char *)v147;
  else
    v25 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), byte_209A5B212, (34 - a3), (34 - a3), v25, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  v26 = sizeObject<ParamSetBase *>((uint64_t)this + 8, 0);
  v27 = sizeObject<ParamSetBase *>((uint64_t)this + 8, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 826, (DgnString *)&v147);
  if (v148)
    v32 = (char *)v147;
  else
    v32 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), byte_209A5B212, (34 - a3), (34 - a3), v32, v26, v27, 0);
  v144 = (a3 + 1);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v26;
  *a5 += v27;
  v33 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v33 = 16;
  v34 = *((_DWORD *)this + 12);
  v35 = *((_DWORD *)this + 13);
  v36 = v35 >= v34;
  v37 = v35 - v34;
  if (v36)
  {
    if (v34 > 0)
      v33 += 4 * (v34 - 1) + 4;
    v33 += 4 * v37;
  }
  v38 = v33 + 24;
  v39 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 10, 1u) + 12;
  v40 = *((unsigned int *)this + 12);
  if (v40 <= *((_DWORD *)this + 13))
    v41 = 0;
  else
    v41 = 4 * v40;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 828, (DgnString *)&v147);
  if (v148)
    v46 = (char *)v147;
  else
    v46 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v144, byte_209A5B212, (34 - a3), (34 - a3), v46, v38, v39, v41);
  DgnString::~DgnString((DgnString *)&v147);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  *a4 += v38;
  *a5 += v39;
  *a6 += v41;
  for (i = 72; i != 1112; i += 80)
  {
    v49 += DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::sizeObject((uint64_t)this + i, 0);
    v48 += DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::sizeObject((uint64_t)this + i, 1);
    v47 += DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::sizeObject((uint64_t)this + i, 3);
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 830, (DgnString *)&v147);
  if (v148)
    v55 = (char *)v147;
  else
    v55 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, v144, byte_209A5B212, v20, v20, v55, v49, v48, v47);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v49;
  *a5 += v48;
  *a6 += v47;
  v56 = (EnvMgr *)*((_QWORD *)this + 139);
  if (v56)
  {
    v147 = 0;
    v145 = 0;
    v146 = 0;
    EnvMgr::printSize(v56, 0xFFFFFFFFLL, v144, &v147, &v146, &v145);
    *a4 += v147;
    *a5 += v146;
    *a6 += v145;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v57 = 4;
  else
    v57 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 832, (DgnString *)&v147);
  if (v148)
    v62 = (char *)v147;
  else
    v62 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v144, byte_209A5B212, v20, v20, v62, v57, v57, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v57;
  *a5 += v57;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 834, (DgnString *)&v147);
  if (v148)
    v67 = (char *)v147;
  else
    v67 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, v144, byte_209A5B212, v20, v20, v67, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 836, (DgnString *)&v147);
  if (v148)
    v72 = (char *)v147;
  else
    v72 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v144, byte_209A5B212, v20, v20, v72, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 838, (DgnString *)&v147);
  if (v148)
    v77 = (char *)v147;
  else
    v77 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v73, v74, v75, v76, v144, byte_209A5B212, v20, v20, v77, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 840, (DgnString *)&v147);
  if (v148)
    v82 = (char *)v147;
  else
    v82 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v144, byte_209A5B212, v20, v20, v82, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 842, (DgnString *)&v147);
  if (v148)
    v87 = (char *)v147;
  else
    v87 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v144, byte_209A5B212, v20, v20, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 844, (DgnString *)&v147);
  if (v148)
    v92 = (char *)v147;
  else
    v92 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v144, byte_209A5B212, v20, v20, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 846, (DgnString *)&v147);
  if (v148)
    v97 = (char *)v147;
  else
    v97 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v144, byte_209A5B212, v20, v20, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 848, (DgnString *)&v147);
  if (v148)
    v102 = (char *)v147;
  else
    v102 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v144, byte_209A5B212, v20, v20, v102, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 850, (DgnString *)&v147);
  if (v148)
    v107 = (char *)v147;
  else
    v107 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v103, v104, v105, v106, v144, byte_209A5B212, v20, v20, v107, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 852, (DgnString *)&v147);
  if (v148)
    v112 = (char *)v147;
  else
    v112 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v108, v109, v110, v111, v144, byte_209A5B212, v20, v20, v112, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 854, (DgnString *)&v147);
  if (v148)
    v117 = (char *)v147;
  else
    v117 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v113, v114, v115, v116, v144, byte_209A5B212, v20, v20, v117, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 856, (DgnString *)&v147);
  if (v148)
    v122 = (char *)v147;
  else
    v122 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v118, v119, v120, v121, v144, byte_209A5B212, v20, v20, v122, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 858, (DgnString *)&v147);
  if (v148)
    v127 = (char *)v147;
  else
    v127 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v123, v124, v125, v126, v144, byte_209A5B212, v20, v20, v127, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v147);
  ++*a4;
  ++*a5;
  v128 = (char *)this + 1176;
  v129 = sizeObject((uint64_t)this + 1176, 0);
  v130 = sizeObject((uint64_t)v128, 1);
  v131 = sizeObject((uint64_t)v128, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 859, (DgnString *)&v147);
  if (v148)
    v136 = (char *)v147;
  else
    v136 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v132, v133, v134, v135, v144, byte_209A5B212, v20, v20, v136, v129, v130, v131);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v129;
  *a5 += v130;
  *a6 += v131;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 860, (DgnString *)&v147);
  if (v148)
    v141 = (char *)v147;
  else
    v141 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, v142, byte_209A5B212, (35 - v142), (35 - v142), v141, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v147);
}

void sub_2097CAA50(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t sizeObject<ParamSetBase *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if ((_DWORD)a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if ((_DWORD)a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!(_DWORD)a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

_QWORD *ParamSetHolder::loadParamSetHolderText(ParamSetHolder *this, DFile *a2)
{
  DFile *v2;
  ParamSpecMgr *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t FileVersion;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  int v163;
  const char *v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int LineFieldUnsigned;
  char *LineFieldString;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  _QWORD *ParamByParamId;
  ParamSpecMgr *v184;
  unsigned int v185;
  ParamSpecMgr *v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  ParamSpecMgr *v198;
  unsigned int v199;
  int Default_BOOL;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  unsigned int v214;
  uint64_t v215;
  const char *v216;
  int v217;
  const char *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int ParamIdByParamName;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  const void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  const char *v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  char *Default_enumAsString;
  const char *v246;
  uint64_t v247;
  uint64_t v248;
  int Default_int;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  double Default_double;
  double v259;
  uint64_t v260;
  uint64_t v261;
  const char *Default_string;
  const char *v263;
  uint64_t v264;
  uint64_t v265;
  double v266;
  double v267;
  EnumParamSpec *v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t v287;
  unsigned int v288;
  uint64_t v289;
  unsigned int v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  unsigned int v296;
  uint64_t v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  char v311;
  unsigned int v312;
  uint64_t *v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  int v317;
  char *__s2;
  char *__s;
  const char *v320;
  const char *v321;
  unsigned int v322;
  const char *v323;
  unsigned int v324;
  const char *v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD v331[2];
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int v336;
  _QWORD v337[2];
  _BYTE v338[100];
  _QWORD v339[2];
  _QWORD v340[2];
  _QWORD v341[2];
  _QWORD v342[2];
  _QWORD v343[2];
  _QWORD v344[2];
  _QWORD v345[2];
  _QWORD v346[2];
  _QWORD v347[2];
  _QWORD v348[2];
  _QWORD v349[2];
  _QWORD v350[3];

  v2 = a2;
  v3 = 0;
  v350[0] = 0;
  v350[1] = 0;
  v308 = 1;
  v349[0] = 0;
  v349[1] = 0;
  v348[0] = 0;
  v348[1] = 0;
  v347[0] = 0;
  v347[1] = 0;
  v346[0] = 0;
  v346[1] = 0;
  v345[0] = 0;
  v345[1] = 0;
  v344[0] = 0;
  v344[1] = 0;
  v343[0] = 0;
  v343[1] = 0;
  v342[0] = 0;
  v342[1] = 0;
  v341[1] = 0;
  v341[0] = 0;
  v340[1] = 0;
  v340[0] = 0;
  v339[1] = 0;
  v339[0] = 0;
  v299 = -1;
  v300 = -1;
  v297 = 0xFFFFFFFFLL;
  v298 = -1;
  v295 = 0xFFFFFFFFLL;
  v296 = -1;
  v293 = 0xFFFFFFFFLL;
  v294 = -1;
  v291 = 0xFFFFFFFFLL;
  v292 = -1;
  v289 = 0xFFFFFFFFLL;
  v290 = -1;
  v287 = 0xFFFFFFFFLL;
  v288 = -1;
  v285 = 0xFFFFFFFFLL;
  v286 = -1;
  v283 = 0xFFFFFFFFLL;
  v284 = -1;
  v281 = 0xFFFFFFFFLL;
  v282 = -1;
  v280 = 0xFFFFFFFFLL;
  v303 = 0xFFFFFFFFLL;
  v301 = 0xFFFFFFFFLL;
  v302 = 0xFFFFFFFFLL;
  while (2)
  {
    DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v338);
    v337[1] = 0;
    v337[0] = 0;
    v336 = 0;
    switch((int)v308)
    {
      case 1:
        *((_DWORD *)this + 280) = 0;
        if ((DFile::subFileExists((uint64_t)v2, 0) & 1) != 0)
        {
          v3 = (ParamSpecMgr *)qword_253DF2828;
          DgnTextFileParser::openDgnTextFileParser((uint64_t)v338, (uint64_t)v2, 0, 1);
          DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v338, "AdapterParamSetArrayText");
          DgnTextFile::legalDgnTextFileVersions((int)v338, sADPT_Versions, (uint64_t)v337, v4, v5, v6, v7, v8);
          DgnTextFileParser::verifyFileVersionInRange((uint64_t)v338, (unsigned int *)v337, v9, v10, v11, v12, v13, v14);
          DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v338, "NumberOfParamSets", &v336, 1, 1u, 0xFFFFu);
          --v336;
          FileVersion = DgnTextFile::getFileVersion((DgnTextFile *)v338);
          v16 = HIDWORD(FileVersion);
          v307 = v350;
          v320 = ".adpt";
          v302 = HIDWORD(FileVersion);
          v303 = FileVersion;
          v17 = FileVersion;
          goto LABEL_25;
        }
        v302 = 0;
        v303 = 1;
        goto LABEL_156;
      case 2:
        *((_DWORD *)this + 281) = 0;
        if (DFile::subFileExists((uint64_t)v2, 0xBu))
        {
          v3 = (ParamSpecMgr *)qword_253DF2830;
          DgnTextFileParser::openDgnTextFileParser((uint64_t)v338, (uint64_t)v2, 0xBu, 1);
          DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v338, "ChannelParamSetArrayText");
          DgnTextFile::legalDgnTextFileVersions((int)v338, sCHPT_Versions, (uint64_t)v337, v18, v19, v20, v21, v22);
          DgnTextFileParser::verifyFileVersionInRange((uint64_t)v338, (unsigned int *)v337, v23, v24, v25, v26, v27, v28);
          DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v338, "NumberOfParamSets", &v336, 1, 1u, 0xFFFFu);
          --v336;
          v29 = DgnTextFile::getFileVersion((DgnTextFile *)v338);
          v16 = HIDWORD(v29);
          v307 = v349;
          v320 = ".chpt";
          v282 = v29;
          v17 = v29;
          v280 = HIDWORD(v29);
          goto LABEL_25;
        }
        v280 = 0;
        v282 = 1;
        goto LABEL_156;
      case 3:
        *((_DWORD *)this + 282) = 0;
        if (DFile::subFileExists((uint64_t)v2, 0xFu))
        {
          v3 = (ParamSpecMgr *)qword_253DF2838;
          DgnTextFileParser::openDgnTextFileParser((uint64_t)v338, (uint64_t)v2, 0xFu, 1);
          DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v338, "ConfidenceParamSetArrayText");
          DgnTextFile::legalDgnTextFileVersions((int)v338, sCOPT_Versions, (uint64_t)v337, v30, v31, v32, v33, v34);
          DgnTextFileParser::verifyFileVersionInRange((uint64_t)v338, (unsigned int *)v337, v35, v36, v37, v38, v39, v40);
          DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v338, "NumberOfParamSets", &v336, 1, 1u, 0xFFFFu);
          --v336;
          v41 = DgnTextFile::getFileVersion((DgnTextFile *)v338);
          v16 = HIDWORD(v41);
          v307 = v348;
          v320 = ".copt";
          v284 = v41;
          v17 = v41;
          v281 = HIDWORD(v41);
          goto LABEL_25;
        }
        v281 = 0;
        v284 = 1;
        goto LABEL_156;
      case 4:
        *((_DWORD *)this + 283) = 0;
        if (DFile::subFileExists((uint64_t)v2, 0x21u))
        {
          v3 = (ParamSpecMgr *)qword_253DF2840;
          DgnTextFileParser::openDgnTextFileParser((uint64_t)v338, (uint64_t)v2, 0x21u, 1);
          DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v338, "LatticeNBestParamSetArrayText");
          DgnTextFile::legalDgnTextFileVersions((int)v338, sLNPT_Versions, (uint64_t)v337, v42, v43, v44, v45, v46);
          DgnTextFileParser::verifyFileVersionInRange((uint64_t)v338, (unsigned int *)v337, v47, v48, v49, v50, v51, v52);
          DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v338, "NumberOfParamSets", &v336, 1, 1u, 0xFFFFu);
          --v336;
          v53 = DgnTextFile::getFileVersion((DgnTextFile *)v338);
          v16 = HIDWORD(v53);
          v307 = v347;
          v320 = ".lnpt";
          v286 = v53;
          v17 = v53;
          v283 = HIDWORD(v53);
          goto LABEL_25;
        }
        v283 = 0;
        v286 = 1;
        goto LABEL_156;
      case 5:
        *((_DWORD *)this + 284) = 0;
        if (DFile::subFileExists((uint64_t)v2, 0x22u))
        {
          v3 = (ParamSpecMgr *)qword_253DF2848;
          DgnTextFileParser::openDgnTextFileParser((uint64_t)v338, (uint64_t)v2, 0x22u, 1);
          DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v338, "LatticePostProbParamSetArrayText");
          DgnTextFile::legalDgnTextFileVersions((int)v338, sLPPT_Versions, (uint64_t)v337, v54, v55, v56, v57, v58);
          DgnTextFileParser::verifyFileVersionInRange((uint64_t)v338, (unsigned int *)v337, v59, v60, v61, v62, v63, v64);
          DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v338, "NumberOfParamSets", &v336, 1, 1u, 0xFFFFu);
          --v336;
          v65 = DgnTextFile::getFileVersion((DgnTextFile *)v338);
          v16 = HIDWORD(v65);
          v307 = v346;
          v320 = ".lppt";
          v288 = v65;
          v17 = v65;
          v285 = HIDWORD(v65);
          goto LABEL_25;
        }
        v285 = 0;
        v288 = 1;
        goto LABEL_156;
      case 6:
        *((_DWORD *)this + 285) = 0;
        if (DFile::subFileExists((uint64_t)v2, 0x37u))
        {
          v3 = (ParamSpecMgr *)qword_253DF2850;
          DgnTextFileParser::openDgnTextFileParser((uint64_t)v338, (uint64_t)v2, 0x37u, 1);
          DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v338, "PrefiltererBuildParamSetArrayText");
          DgnTextFile::legalDgnTextFileVersions((int)v338, sPBPT_Versions, (uint64_t)v337, v66, v67, v68, v69, v70);
          DgnTextFileParser::verifyFileVersionInRange((uint64_t)v338, (unsigned int *)v337, v71, v72, v73, v74, v75, v76);
          DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v338, "NumberOfParamSets", &v336, 1, 1u, 0xFFFFu);
          --v336;
          v77 = DgnTextFile::getFileVersion((DgnTextFile *)v338);
          v16 = HIDWORD(v77);
          v307 = v345;
          v320 = ".pbpt";
          v290 = v77;
          v17 = v77;
          v287 = HIDWORD(v77);
          goto LABEL_25;
        }
        v287 = 0;
        v290 = 1;
        goto LABEL_156;
      case 7:
        *((_DWORD *)this + 286) = 0;
        if (DFile::subFileExists((uint64_t)v2, 0x45u))
        {
          v3 = (ParamSpecMgr *)qword_253DF2858;
          DgnTextFileParser::openDgnTextFileParser((uint64_t)v338, (uint64_t)v2, 0x45u, 1);
          DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v338, "PrefiltererSearchParamSetArrayText");
          DgnTextFile::legalDgnTextFileVersions((int)v338, sPSPT_Versions, (uint64_t)v337, v78, v79, v80, v81, v82);
          DgnTextFileParser::verifyFileVersionInRange((uint64_t)v338, (unsigned int *)v337, v83, v84, v85, v86, v87, v88);
          DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v338, "NumberOfParamSets", &v336, 1, 1u, 0xFFFFu);
          --v336;
          v89 = DgnTextFile::getFileVersion((DgnTextFile *)v338);
          v16 = HIDWORD(v89);
          v307 = v344;
          v320 = ".pspt";
          v292 = v89;
          v17 = v89;
          v289 = HIDWORD(v89);
          goto LABEL_25;
        }
        v289 = 0;
        v292 = 1;
        goto LABEL_156;
      case 8:
        *((_DWORD *)this + 287) = 0;
        if (DFile::subFileExists((uint64_t)v2, 0x3Cu))
        {
          v3 = (ParamSpecMgr *)qword_253DF2860;
          DgnTextFileParser::openDgnTextFileParser((uint64_t)v338, (uint64_t)v2, 0x3Cu, 1);
          DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v338, "PronGuessParamSetArrayText");
          DgnTextFile::legalDgnTextFileVersions((int)v338, sPGPT_Versions, (uint64_t)v337, v90, v91, v92, v93, v94);
          DgnTextFileParser::verifyFileVersionInRange((uint64_t)v338, (unsigned int *)v337, v95, v96, v97, v98, v99, v100);
          DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v338, "NumberOfParamSets", &v336, 1, 1u, 0xFFFFu);
          --v336;
          v101 = DgnTextFile::getFileVersion((DgnTextFile *)v338);
          v16 = HIDWORD(v101);
          v307 = v343;
          v320 = ".pgpt";
          v294 = v101;
          v17 = v101;
          v291 = HIDWORD(v101);
          goto LABEL_25;
        }
        v291 = 0;
        v294 = 1;
        goto LABEL_156;
      case 9:
        *((_DWORD *)this + 288) = 0;
        if (DFile::subFileExists((uint64_t)v2, 0x4Fu))
        {
          v3 = (ParamSpecMgr *)qword_253DF2868;
          DgnTextFileParser::openDgnTextFileParser((uint64_t)v338, (uint64_t)v2, 0x4Fu, 1);
          DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v338, "SausageParamSetArrayText");
          DgnTextFile::legalDgnTextFileVersions((int)v338, sSAPT_Versions, (uint64_t)v337, v102, v103, v104, v105, v106);
          DgnTextFileParser::verifyFileVersionInRange((uint64_t)v338, (unsigned int *)v337, v107, v108, v109, v110, v111, v112);
          DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v338, "NumberOfParamSets", &v336, 1, 1u, 0xFFFFu);
          --v336;
          v113 = DgnTextFile::getFileVersion((DgnTextFile *)v338);
          v16 = HIDWORD(v113);
          v307 = v342;
          v320 = ".sapt";
          v296 = v113;
          v17 = v113;
          v293 = HIDWORD(v113);
          goto LABEL_25;
        }
        v293 = 0;
        v296 = 1;
        goto LABEL_156;
      case 10:
        *((_DWORD *)this + 289) = 0;
        if (DFile::subFileExists((uint64_t)v2, 0x58u))
        {
          v3 = (ParamSpecMgr *)qword_253DF2870;
          DgnTextFileParser::openDgnTextFileParser((uint64_t)v338, (uint64_t)v2, 0x58u, 1);
          DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v338, "SearchParamSetArrayText");
          DgnTextFile::legalDgnTextFileVersions((int)v338, sSRPT_Versions, (uint64_t)v337, v114, v115, v116, v117, v118);
          DgnTextFileParser::verifyFileVersionInRange((uint64_t)v338, (unsigned int *)v337, v119, v120, v121, v122, v123, v124);
          DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v338, "NumberOfParamSets", &v336, 1, 1u, 0xFFFFu);
          --v336;
          v125 = DgnTextFile::getFileVersion((DgnTextFile *)v338);
          v16 = HIDWORD(v125);
          v307 = v341;
          v320 = ".srpt";
          v298 = v125;
          v17 = v125;
          v295 = HIDWORD(v125);
          goto LABEL_25;
        }
        v295 = 0;
        v298 = 1;
        goto LABEL_156;
      case 11:
        *((_DWORD *)this + 290) = 0;
        if (DFile::subFileExists((uint64_t)v2, 0x54u))
        {
          v3 = (ParamSpecMgr *)qword_253DF2878;
          DgnTextFileParser::openDgnTextFileParser((uint64_t)v338, (uint64_t)v2, 0x54u, 1);
          DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v338, "SearchCrossLayerParamSetArrayText");
          DgnTextFile::legalDgnTextFileVersions((int)v338, sSCPT_Versions, (uint64_t)v337, v126, v127, v128, v129, v130);
          DgnTextFileParser::verifyFileVersionInRange((uint64_t)v338, (unsigned int *)v337, v131, v132, v133, v134, v135, v136);
          DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v338, "NumberOfParamSets", &v336, 1, 1u, 0xFFFFu);
          --v336;
          v137 = DgnTextFile::getFileVersion((DgnTextFile *)v338);
          v16 = HIDWORD(v137);
          v307 = v340;
          v320 = ".scpt";
          v299 = v137;
          v17 = v137;
          v297 = HIDWORD(v137);
LABEL_25:
          v138 = v16;
          goto LABEL_30;
        }
        v297 = 0;
        v299 = 1;
        goto LABEL_156;
      case 12:
        *((_DWORD *)this + 291) = 0;
        if (DFile::subFileExists((uint64_t)v2, 0x65u))
        {
          v3 = (ParamSpecMgr *)qword_253DF2880;
          DgnTextFileParser::openDgnTextFileParser((uint64_t)v338, (uint64_t)v2, 0x65u, 1);
          DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v338, "UserDeltaParamSetArrayText");
          DgnTextFile::legalDgnTextFileVersions((int)v338, sUDPT_Versions, (uint64_t)v337, v139, v140, v141, v142, v143);
          DgnTextFileParser::verifyFileVersionInRange((uint64_t)v338, (unsigned int *)v337, v144, v145, v146, v147, v148, v149);
          DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v338, "NumberOfParamSets", &v336, 1, 1u, 0xFFFFu);
          --v336;
          v150 = DgnTextFile::getFileVersion((DgnTextFile *)v338);
          v151 = HIDWORD(v150);
          v307 = v339;
          v320 = ".udpt";
          v300 = v150;
          v301 = HIDWORD(v150);
          v17 = v150;
          goto LABEL_29;
        }
        v300 = 1;
        v301 = 0;
LABEL_156:
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)v337);
        DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v338);
        if (++v308 != 13)
          continue;
        *((_QWORD *)&v279 + 1) = v341;
        *((_QWORD *)&v278 + 1) = v343;
        *(_QWORD *)&v279 = v342;
        *((_QWORD *)&v277 + 1) = v345;
        *(_QWORD *)&v278 = v344;
        *((_QWORD *)&v276 + 1) = v347;
        *(_QWORD *)&v277 = v346;
        *((_QWORD *)&v275 + 1) = v349;
        *(_QWORD *)&v276 = v348;
        *(_QWORD *)&v275 = v350;
        *(_QWORD *)&v274 = v298 | (unint64_t)(v295 << 32);
        *((_QWORD *)&v274 + 1) = v299 | (unint64_t)(v297 << 32);
        *(_QWORD *)&v273 = v294 | (unint64_t)(v291 << 32);
        *((_QWORD *)&v273 + 1) = v296 | (unint64_t)(v293 << 32);
        ParamSetHolder::runUpgradeFunctionSequence((unsigned int *)this, v303 | (unint64_t)(v302 << 32), v282 | (unint64_t)(v280 << 32), v284 | (unint64_t)(v281 << 32), v286 | (unint64_t)(v283 << 32), v288 | (unint64_t)(v285 << 32), v290 | (unint64_t)(v287 << 32), v292 | (unint64_t)(v289 << 32), v273, v274, v300 | (unint64_t)(v301 << 32), v275, v276, v277, v278, v279, (uint64_t)v340, (uint64_t)v339);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v350);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v349);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v348);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v347);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v346);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v345);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v344);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v343);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v342);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v341);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v340);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v339);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v339);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v340);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v341);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v342);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v343);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v344);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v345);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v346);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v347);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v348);
        DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v349);
        return DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v350);
      default:
        LOBYTE(v320) = 0;
        v307 = 0;
        v17 = v303;
        v151 = v302;
LABEL_29:
        v138 = v151;
LABEL_30:
        v335 = 0;
        v334 = 0;
        v309 = v17;
        ParamSpecMgr::getAllParamIdsSortedByName((unint64_t)v3, (uint64_t)&v334, v17, v138);
        DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v338, v152, v153, v154, v155, v156, v157, v158);
        v333 = 0;
        v332 = 0;
        DgnTextFile::getLineFieldNames((uint64_t)v338, (uint64_t)&v332);
        v331[1] = 0;
        v331[0] = 0;
        DgnTextFile::getLineFieldFormats((uint64_t)v338, (unint64_t)v331);
        if ((_DWORD)v333)
        {
          v161 = 0;
          v162 = 0;
          v163 = 0;
          v316 = -1;
          v315 = -1;
          v314 = -1;
          v312 = -1;
          do
          {
            if (*(_DWORD *)(v332 + v161 + 8))
              v164 = *(const char **)(v332 + v161);
            else
              v164 = byte_209A5B212;
            if (!strcmp(v164, "SetIndex"))
            {
              if (*(_DWORD *)(v331[0] + 4 * v162) != 3)
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 963, (uint64_t)"recogctl/psholder", 17, (uint64_t)"%.500s %.500s %.500s", v159, v160, (char)v320);
              ++v163;
              v316 = v162;
            }
            else if (!strcmp(v164, "SetName"))
            {
              if (*(_DWORD *)(v331[0] + 4 * v162))
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 971, (uint64_t)"recogctl/psholder", 17, (uint64_t)"%.500s %.500s %.500s", v159, v160, (char)v320);
              ++v163;
              v315 = v162;
            }
            else if (!strcmp(v164, "ParamName"))
            {
              if (*(_DWORD *)(v331[0] + 4 * v162))
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 979, (uint64_t)"recogctl/psholder", 17, (uint64_t)"%.500s %.500s %.500s", v159, v160, (char)v320);
              ++v163;
              v314 = v162;
            }
            else if (!strcmp(v164, "ParamValue"))
            {
              if (*(_DWORD *)(v331[0] + 4 * v162))
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 987, (uint64_t)"recogctl/psholder", 17, (uint64_t)"%.500s %.500s %.500s", v159, v160, (char)v320);
              ++v163;
              v312 = v162;
            }
            else
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 992, (uint64_t)"recogctl/psholder", 15, (uint64_t)"%.500s %.500s", v159, v160, (char)v320);
            }
            ++v162;
            v161 += 16;
          }
          while (v162 < v333);
          if (v163 == 4)
            goto LABEL_57;
        }
        else
        {
          LOBYTE(v163) = 0;
          v316 = -1;
          v315 = -1;
          v314 = -1;
          v312 = -1;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 995, (uint64_t)"recogctl/psholder", 16, (uint64_t)"%u %u", v159, v160, v163);
LABEL_57:
        v330 = 0;
        v329 = 0;
        DgnString::DgnString((DgnString *)&v327, "_default");
        v165 = v330;
        if (v330 == (unint64_t)HIDWORD(v330))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v329, 1, 1);
          v165 = v330;
        }
        DgnString::DgnString((DgnString *)(v329 + 16 * v165), (const DgnString *)&v327);
        LODWORD(v330) = v330 + 1;
        DgnString::~DgnString((DgnString *)&v327);
        v311 = 0;
        v317 = 0;
        v166 = 0;
        v313 = 0;
        v327 = 0;
        v328 = 0;
        v306 = v309 | (unint64_t)(v138 << 32);
        v310 = v138;
        while (1)
        {
          if ((DgnTextFileParser::parseNextLine((DgnTextFileParser *)v338) & 1) == 0)
          {
            if (v166 != (_DWORD)v335)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1023, (uint64_t)"recogctl/psholder", 34, (uint64_t)"%u %u %.500s %u", v171, v172, v166);
            if (v317 != v336)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1034, (uint64_t)"recogctl/psholder", 35, (uint64_t)"%u %u %.500s %u", v171, v172, v317 + 1);
            DgnArray<DgnString>::releaseAll((uint64_t)&v327);
            DgnArray<DgnString>::releaseAll((uint64_t)&v329);
            v2 = a2;
            DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v331);
            DgnArray<DgnString>::releaseAll((uint64_t)&v332);
            DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v334);
            goto LABEL_156;
          }
          LineFieldUnsigned = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v338, v316, v167, v168, v169, v170, v171, v172);
          LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v338, v315);
          v175 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v338, v314);
          __s = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v338, v312);
          DgnString::DgnString((DgnString *)&v325, LineFieldString);
          DgnString::DgnString((DgnString *)&v323, v175);
          DgnString::DgnString((DgnString *)&v321, __s);
          if (v166 < v335)
          {
            v182 = *(unsigned __int16 *)(v334 + 2 * v166);
            ParamByParamId = (_QWORD *)ParamSpecMgr::getParamByParamId(v3, v182, v176, v177, v178, v179, v180, v181);
            v184 = v3;
            v185 = v166;
            v186 = v184;
            __s2 = (char *)ParamByParamId[1];
            v189 = (*(uint64_t (**)(_QWORD *))(*ParamByParamId + 24))(ParamByParamId);
            if (LineFieldUnsigned)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1079, (uint64_t)"recogctl/psholder", 37, (uint64_t)"%u %.500s %u", v187, v188, LineFieldUnsigned);
            if (v326)
              v190 = v325;
            else
              v190 = byte_209A5B212;
            if (strcmp(v190, "_default"))
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1082, (uint64_t)"recogctl/psholder", 20, (uint64_t)"%.500s %.500s %.500s %u", v191, v192, (char)"_default");
            if (v324)
              v193 = v323;
            else
              v193 = byte_209A5B212;
            if (strcmp(v193, __s2))
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1086, (uint64_t)"recogctl/psholder", 21, (uint64_t)"%.500s %.500s %.500s %u", v196, v197, (char)__s2);
            v198 = v186;
            v199 = v185;
            v3 = v198;
            switch(v189)
            {
              case 1:
                Default_BOOL = ParamSpecMgr::ParamGetDefault_BOOL(v198, v182, v309, v310, v194, v195, v196, v197);
                if (v322)
                  v201 = v321;
                else
                  v201 = byte_209A5B212;
                v204 = strcmp(v201, "True");
                if (v204 && strcmp(v201, "False"))
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1102, (uint64_t)"recogctl/psholder", 29, (uint64_t)"%.500s %.500s %.500s %u", v202, v203, (char)__s2);
                if (Default_BOOL != (v204 == 0))
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1109, (uint64_t)"recogctl/psholder", 22, (uint64_t)"%.500s %.500s %.500s %.500s %u", v202, v203, (char)__s2);
                break;
              case 2:
                Default_int = ParamSpecMgr::ParamGetDefault_int(v198, v182, v309, v310, v194, v195, v196, v197);
                if (DgnTextFile::atosi((DgnTextFile *)v338, __s, v250, v251, v252, v253, v254, v255) != Default_int)
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1123, (uint64_t)"recogctl/psholder", 23, (uint64_t)"%.500s %d %d %.500s %u", v256, v257, (char)__s2);
                break;
              case 3:
                Default_double = ParamSpecMgr::ParamGetDefault_double(v198, v182, v309, v310, v194, v195, v196, v197);
                v259 = atof(__s);
                if (eround(v259, 14) != Default_double)
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1138, (uint64_t)"recogctl/psholder", 24, (uint64_t)"%.500s %f %f %.500s %u", v260, v261, (char)__s2);
                break;
              case 4:
                Default_string = (const char *)ParamSpecMgr::ParamGetDefault_string(v198, v182, v309, v310, v194, v195, v196, v197);
                if (v322)
                  v263 = v321;
                else
                  v263 = byte_209A5B212;
                if (strcmp(v263, Default_string))
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1153, (uint64_t)"recogctl/psholder", 25, (uint64_t)"%.500s %.500s %.500s %.500s %u", v264, v265, (char)__s2);
                break;
              case 5:
                Default_enumAsString = ParamSpecMgr::ParamGetDefault_enumAsString(v198, v182, v309, v310, v194, v195, v196, v197);
                if (v322)
                  v246 = v321;
                else
                  v246 = byte_209A5B212;
                if (strcmp(v246, Default_enumAsString))
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1168, (uint64_t)"recogctl/psholder", 26, (uint64_t)"%.500s %.500s %.500s %.500s %u", v247, v248, (char)__s2);
                break;
              default:
                break;
            }
            v166 = v199 + 1;
            LODWORD(v138) = v310;
            goto LABEL_150;
          }
          if (!LineFieldUnsigned)
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1183, (uint64_t)"recogctl/psholder", 38, (uint64_t)"%u %.500s %u", v180, v181, v317 + 1);
          if (v311 & 1 | (LineFieldUnsigned != v317))
          {
            if (LineFieldUnsigned != v317 + 1)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1190, (uint64_t)"recogctl/psholder", 19, (uint64_t)"%u %u %.500s %u", v180, v181, v317 + 1);
            if ((int)v328 >= 1)
            {
              v205 = 16 * v328 - 16;
              do
              {
                DgnString::~DgnString((DgnString *)(v327 + v205));
                v205 -= 16;
              }
              while (v205 != -16);
            }
            LODWORD(v328) = 0;
            if ((isValidRestrictedName(LineFieldString) & 1) == 0)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1197, (uint64_t)"recogctl/psholder", 27, (uint64_t)"%.500s %.500s %u", v206, v207, (char)LineFieldString);
            if (DgnArray<DgnString>::find((unsigned int *)&v329, (uint64_t)&v325) != -1)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1203, (uint64_t)"recogctl/psholder", 36, (uint64_t)"%.500s %u %u %.500s %u", v208, v209, (char)LineFieldString);
            v210 = v330;
            if (v330 == (unint64_t)HIDWORD(v330))
            {
              DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v329, 1, 1);
              v210 = v330;
            }
            DgnString::DgnString((DgnString *)(v329 + 16 * v210), (const DgnString *)&v325);
            LODWORD(v330) = v330 + 1;
            v313 = MemChunkAlloc(0x30uLL, 0);
            DynamicParamSet::DynamicParamSet(v313, LineFieldString, ParamSetHolderMgr::smParamSetTypeRanked[v308], v306, &v334);
            v213 = v307;
            v214 = *((_DWORD *)v307 + 2);
            if (v214 == *((_DWORD *)v307 + 3))
            {
              DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v307, 1, 1);
              v213 = v307;
              v214 = *((_DWORD *)v307 + 2);
            }
            *(_QWORD *)(*v213 + 8 * v214) = v313;
            *((_DWORD *)v213 + 2) = v214 + 1;
            if (v324 <= 1)
            {
              if (v322 >= 2)
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1222, (uint64_t)"recogctl/psholder", 28, (uint64_t)"%.500s %.500s %u", v211, v212, (char)__s);
              v311 = 1;
              v317 = LineFieldUnsigned;
              goto LABEL_150;
            }
            v317 = LineFieldUnsigned;
          }
          v215 = v329 + 16 * (v330 - 1);
          if (v326)
            v216 = v325;
          else
            v216 = byte_209A5B212;
          v217 = *(_DWORD *)(v215 + 8);
          v218 = *(const char **)v215;
          if (v217)
            v219 = v218;
          else
            v219 = byte_209A5B212;
          if (strcmp(v216, v219))
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1237, (uint64_t)"recogctl/psholder", 30, (uint64_t)"%u %.500s %.500s %.500s %u", v220, v221, v317);
          if (v324 <= 1)
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1241, (uint64_t)"recogctl/psholder", 31, (uint64_t)"%.500s %u %u", v220, v221, (char)v320);
          ParamIdByParamName = ParamSpecMgr::getParamIdByParamName(v3, v175);
          if (ParamIdByParamName == 0xFFFF)
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1248, (uint64_t)"recogctl/psholder", 32, (uint64_t)"%.500s %.500s %u", v222, v223, (char)v175);
          if (DgnArray<DgnString>::find((unsigned int *)&v327, (uint64_t)&v323) != -1)
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1252, (uint64_t)"recogctl/psholder", 33, (uint64_t)"%.500s %.500s %u", v225, v226, (char)v175);
          v227 = v328;
          if (v328 == (unint64_t)HIDWORD(v328))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v327, 1, 1);
            v227 = v328;
          }
          DgnString::DgnString((DgnString *)(v327 + 16 * v227), (const DgnString *)&v323);
          LODWORD(v328) = v328 + 1;
          v234 = (const void *)ParamSpecMgr::getParamByParamId(v3, ParamIdByParamName, v228, v229, v230, v231, v232, v233);
          switch((*(unsigned int (**)(const void *))(*(_QWORD *)v234 + 24))(v234))
          {
            case 1u:
              if (v322)
                v241 = v321;
              else
                v241 = byte_209A5B212;
              v242 = strcmp(v241, "True");
              if (v242 && strcmp(v241, "False"))
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1270, (uint64_t)"recogctl/psholder", 29, (uint64_t)"%.500s %.500s %.500s %u", v243, v244, (char)v175);
              DynamicParamSet::setBoolParameter((uint64_t)v313, ParamIdByParamName, v242 == 0);
              break;
            case 2u:
              v271 = DgnTextFile::atosi((DgnTextFile *)v338, __s, v235, v236, v237, v238, v239, v240);
              DynamicParamSet::setIntParameter((uint64_t)v313, ParamIdByParamName, v271);
              break;
            case 3u:
              v266 = atof(__s);
              v267 = eround(v266, 14);
              DynamicParamSet::setDoubleParameter((uint64_t)v313, ParamIdByParamName, v267);
              break;
            case 4u:
              DynamicParamSet::setStringParameter((uint64_t)v313, ParamIdByParamName, __s, 1);
              break;
            case 5u:
              if ((EnumParamSpec::checkStringEnumValue(v268, __s, v309, v138) & 1) == 0)
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1304, (uint64_t)"recogctl/psholder", 10, (uint64_t)"%.500s %.500s %.500s %u", v269, v270, (char)v175);
              DynamicParamSet::setEnumParameter((uint64_t)v313, ParamIdByParamName, __s, 1);
              break;
            default:
              break;
          }
          v311 = 0;
LABEL_150:
          DgnString::~DgnString((DgnString *)&v321);
          DgnString::~DgnString((DgnString *)&v323);
          DgnString::~DgnString((DgnString *)&v325);
        }
    }
  }
}

void sub_2097CC6E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&STACK[0x250]);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)&STACK[0x260]);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&STACK[0x348]);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&STACK[0x358]);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&STACK[0x368]);
  DgnIOwnArray<DynamicParamSet *>::releaseAll(v1 - 248);
  DgnIOwnArray<DynamicParamSet *>::releaseAll(v1 - 232);
  DgnIOwnArray<DynamicParamSet *>::releaseAll(v1 - 216);
  DgnIOwnArray<DynamicParamSet *>::releaseAll(v1 - 200);
  DgnIOwnArray<DynamicParamSet *>::releaseAll(v1 - 184);
  DgnIOwnArray<DynamicParamSet *>::releaseAll(v1 - 168);
  DgnIOwnArray<DynamicParamSet *>::releaseAll(v1 - 152);
  DgnIOwnArray<DynamicParamSet *>::releaseAll(v1 - 136);
  DgnIOwnArray<DynamicParamSet *>::releaseAll(v1 - 120);
  _Unwind_Resume(a1);
}

uint64_t ParamSetHolder::runUpgradeFunctionSequence(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, uint64_t a17, uint64_t a18)
{
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  DynamicParamSet *v24;
  const char *v25;
  uint64_t v26;
  char *v27;
  int v28;
  uint64_t i;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  int v35;
  int v36;
  char *v37;
  char *v38;
  int *v39;
  unsigned int *v40;
  uint64_t j;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const DynamicParamSet *v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  DynamicParamSet *v60;
  uint64_t k;
  uint64_t m;
  uint64_t v63;
  DynamicParamSet *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t n;
  _QWORD *v73;
  uint64_t ii;
  ParamSpecMgr *v75;
  uint64_t v76;
  unint64_t v77;
  DynamicParamSet *v78;
  char *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t ParamSet;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  const void *ParamByParamId;
  uint64_t BoolParameter;
  const char *EnumParameter;
  EnumParamSpec *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double DoubleParameter;
  uint64_t StringParameter;
  uint64_t IntParameter;
  uint64_t result;
  FileHistory *v112;
  unsigned int v113;
  char *v114;
  uint64_t *v115;
  _QWORD *v116;
  uint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  char *v120;
  unsigned int v121;
  _QWORD v122[2];
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  _OWORD v139[6];
  uint64_t v140;
  _QWORD v141[11];
  _OWORD v142[5];
  uint64_t v143;
  uint64_t v144;
  _QWORD v145[8];
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v145[0] = 1;
  v145[1] = a2;
  v145[2] = a3;
  v145[3] = a4;
  v145[4] = a5;
  v145[5] = a6;
  v145[6] = a7;
  v145[7] = a8;
  v146 = a9;
  v147 = a10;
  v148 = a11;
  v142[0] = a12;
  v142[1] = a13;
  v142[2] = a14;
  v142[3] = a15;
  v142[4] = a16;
  v141[0] = 0;
  v143 = a17;
  v144 = a18;
  v19 = MemChunkAlloc(0x70uLL, 0);
  Hash<DgnString,DgnString,DgnStringScope,unsigned int>::Hash((uint64_t)v19, 0, 16);
  v140 = 0;
  v20 = 1;
  memset(v139, 0, sizeof(v139));
  do
  {
    v21 = v141[v20];
    v22 = MemChunkAlloc(0x70uLL, 0);
    Hash<DgnString,DgnString,DgnStringScope,unsigned int>::Hash((uint64_t)v22, 0, 16);
    *((_QWORD *)v139 + v20) = v22;
    LODWORD(v125) = 0;
    if (*(_DWORD *)(v21 + 8))
    {
      v23 = 0;
      do
      {
        v24 = *(DynamicParamSet **)(*(_QWORD *)v21 + 8 * v23);
        DynamicParamSet::validateSelf(v24);
        if (*((_DWORD *)v24 + 2))
          v25 = *(const char **)v24;
        else
          v25 = byte_209A5B212;
        DgnString::DgnString((DgnString *)&v132, v25);
        Hash<DgnString,DgnString,DgnStringScope,unsigned int>::add((uint64_t)v22, (char **)&v132, &v125);
        if (!*Hash<DgnString,DgnString,DgnStringScope,unsigned int>::findBucket((uint64_t)v19, (uint64_t)&v132))
        {
          LODWORD(v123) = 0;
          Hash<DgnString,DgnString,DgnStringScope,unsigned int>::add((uint64_t)v19, (char **)&v132, &v123);
        }
        DgnString::~DgnString((DgnString *)&v132);
        v23 = v125 + 1;
        LODWORD(v125) = v23;
      }
      while (v23 < *(_DWORD *)(v21 + 8));
    }
    ++v20;
  }
  while (v20 != 13);
  v26 = -1;
  v27 = (char *)&sUpgradeFunctionTable;
  do
  {
    ++v26;
    v28 = 1;
    for (i = 12; i != 108; i += 8)
    {
      if (*(_DWORD *)&v27[i - 4] != *(_DWORD *)((char *)&v144 + i + 4)
        || *(_DWORD *)&v27[i] != *(_DWORD *)((char *)v145 + i))
      {
        v28 = 0;
      }
    }
    v27 += 120;
  }
  while (((v26 != 51) & ~v28) != 0);
  v118 = a1;
  if ((_DWORD)v26 != 51)
  {
    v112 = (FileHistory *)(a1 + 294);
    v30 = v26;
    v115 = v19;
    do
    {
      v31 = v30;
      do
      {
        v32 = v31 + 1;
        v31 = 13;
      }
      while (v32 == 13);
      v33 = 0;
      v34 = (char *)&sUpgradeFunctionTable + 120 * v32;
      v123 = 0;
      v124 = 0;
      v35 = 13;
      do
      {
        if (v33 == HIDWORD(v124))
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v123, 1, 1);
          v33 = v124;
        }
        *(_QWORD *)(v123 + 8 * v33++) = 0;
        LODWORD(v124) = v33;
        --v35;
      }
      while (v35);
      v113 = v32;
      DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v122, 13);
      v36 = v30;
      v37 = (char *)&sUpgradeFunctionTable + 120 * v30;
      v38 = v37 + 12;
      v39 = &dword_2545AA49C;
      v40 = (unsigned int *)(v37 + 12);
      for (j = 16; j != 208; j += 16)
      {
        v42 = *v39++;
        ParamSpecMgr::getAllParamIdsSortedByName(ParamSpecMgr::smpParamSpecMgrArray[v42], v122[0] + j, *(v40 - 1), *v40);
        v40 += 2;
      }
      DgnString::DgnString((DgnString *)&v120);
      v43 = *((unsigned int *)v19 + 3);
      if ((_DWORD)v43)
      {
        v44 = (_QWORD *)v19[10];
        v45 = (_QWORD *)*v44;
        if (*v44)
        {
          v46 = 0;
        }
        else
        {
          v47 = 0;
          v48 = v44 + 1;
          do
          {
            if (v43 - 1 == v47)
              goto LABEL_76;
            v45 = (_QWORD *)v48[v47++];
          }
          while (!v45);
          v46 = v47;
        }
      }
      else
      {
        v46 = 0;
        v45 = 0;
      }
      if (v46 < v43)
      {
        v114 = (char *)&sUpgradeFunctionTable + 120 * v36 + 112;
        v49 = (char *)&sUpgradeFunctionTable + 120 * v32 + 12;
        do
        {
          v116 = v45;
          v117 = v46;
          v138 = 0;
          if (v45)
            v50 = (uint64_t)(v45 + 2);
          else
            v50 = 0;
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          v132 = 0u;
          v133 = 0u;
          v131 = 0;
          v129 = 0u;
          v130 = 0u;
          v127 = 0u;
          v128 = 0u;
          v51 = 16;
          v52 = 1;
          v125 = 0u;
          v126 = 0u;
          do
          {
            v53 = *(_QWORD *)&v37[8 * v52];
            v54 = *Hash<DgnString,DgnString,DgnStringScope,unsigned int>::findBucket(*((_QWORD *)v139 + v52), v50);
            if (v54)
            {
              v55 = *(const DynamicParamSet **)(*(_QWORD *)v141[v52] + 8 * *(unsigned int *)(v54 + 32));
            }
            else
            {
              v56 = MemChunkAlloc(0x30uLL, 0);
              v55 = (const DynamicParamSet *)v56;
              if (*(_DWORD *)(v50 + 8))
                v57 = *(char **)v50;
              else
                v57 = byte_209A5B212;
              DynamicParamSet::DynamicParamSet(v56, v57, ParamSetHolderMgr::smParamSetTypeRanked[v52], v53, v122[0] + v51);
            }
            *((_QWORD *)&v132 + v52) = v55;
            v58 = *(_QWORD *)&v34[8 * v52];
            if (v58 == v53)
            {
              *((_QWORD *)&v125 + v52) = 0;
            }
            else
            {
              v59 = MemChunkAlloc(0x30uLL, 0);
              v60 = DynamicParamSet::DynamicParamSet((DynamicParamSet *)v59, v55);
              *((_QWORD *)&v125 + v52) = v60;
              *((_QWORD *)v60 + 2) = v58;
            }
            ++v52;
            v51 += 16;
          }
          while (v52 != 13);
          (*(void (**)(char **, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))v114)(&v120, v50, *((_QWORD *)&v132 + 1), v133, *((_QWORD *)&v133 + 1), v134, *((_QWORD *)&v134 + 1), v135, *((_QWORD *)&v135 + 1), v136, *((_QWORD *)&v136 + 1), v137, *((_QWORD *)&v137 + 1), v138, *((_QWORD *)&v125 + 1), v126, *((_QWORD *)&v126 + 1), v127, *((_QWORD *)&v127 + 1),
            v128,
            *((_QWORD *)&v128 + 1),
            v129,
            *((_QWORD *)&v129 + 1),
            v130,
            *((_QWORD *)&v130 + 1),
            v131);
          for (k = 8; k != 104; k += 8)
          {
            if (*(_QWORD *)&v34[k] != *(_QWORD *)&v37[k])
              DynamicParamSet::validateSelf(*(DynamicParamSet **)((char *)&v125 + k));
          }
          for (m = 0; m != 96; m += 8)
          {
            v63 = *Hash<DgnString,DgnString,DgnStringScope,unsigned int>::findBucket(*(_QWORD *)((char *)v139 + m + 8), v50);
            if (*(_DWORD *)&v38[m - 4] != *(_DWORD *)&v49[m - 4] || *(_DWORD *)&v38[m] != *(_DWORD *)&v49[m])
            {
              if (v63)
              {
                v64 = *(DynamicParamSet **)((char *)&v132 + m + 8);
                v65 = *(_QWORD *)((char *)&v125 + m + 8);
                *(_QWORD *)((char *)&v132 + m + 8) = v65;
                *(_QWORD *)((char *)&v125 + m + 8) = v64;
                *(_QWORD *)(**(_QWORD **)((char *)v142 + m) + 8 * *(unsigned int *)(v63 + 32)) = v65;
              }
              else
              {
                v64 = *(DynamicParamSet **)((char *)&v125 + m + 8);
              }
              DgnDelete<DynamicParamSet>(v64);
            }
            if (!v63)
              DgnDelete<DynamicParamSet>(*(DynamicParamSet **)((char *)&v132 + m + 8));
          }
          v66 = (_QWORD *)*v116;
          v67 = *((unsigned int *)v115 + 3);
          if (*v116)
          {
            v46 = v117;
          }
          else
          {
            v46 = (v117 + 1);
            if (v46 >= v67)
            {
              v66 = v116;
            }
            else
            {
              v68 = v115[10];
              v66 = *(_QWORD **)(v68 + 8 * v46);
              if (!v66)
              {
                v69 = (_QWORD *)(v68 + 8 * v46 + 8);
                v70 = ~v46 + v67;
                while (v70)
                {
                  v71 = (_QWORD *)*v69++;
                  v66 = v71;
                  v46 = (v46 + 1);
                  --v70;
                  if (v71)
                    goto LABEL_75;
                }
                break;
              }
            }
          }
LABEL_75:
          v45 = v66;
        }
        while (v46 < v67);
      }
LABEL_76:
      DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&v123);
      if (v121 >= 2)
        FileHistory::addEntry(v112, v120);
      DgnString::~DgnString((DgnString *)&v120);
      DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v122);
      a1 = v118;
      v19 = v115;
      DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&v123);
      v30 = v113;
    }
    while (v113 != 51);
  }
  if (v19)
  {
    (*(void (**)(uint64_t *))*v19)(v19);
    MemChunkFree(v19, 0);
  }
  for (n = 8; n != 104; n += 8)
  {
    v73 = *(_QWORD **)((char *)v139 + n);
    if (v73)
    {
      (*(void (**)(_QWORD))*v73)(*(_QWORD *)((char *)v139 + n));
      MemChunkFree(v73, 0);
    }
  }
  for (ii = 1; ii != 13; ++ii)
  {
    v75 = (ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[ParamSetHolderMgr::smParamSetTypeRanked[ii]];
    v132 = 0uLL;
    ParamSpecMgr::getAllParamIdsSortedByName((unint64_t)v75, (uint64_t)&v132, 0, 0);
    v76 = v141[ii];
    if (*(_DWORD *)(v76 + 8))
    {
      v77 = 0;
      v119 = v141[ii];
      do
      {
        v78 = *(DynamicParamSet **)(*(_QWORD *)v76 + 8 * v77);
        if (*((_DWORD *)v78 + 2))
          v79 = *(char **)v78;
        else
          v79 = byte_209A5B212;
        v80 = ParamSetHolder::newParamSet(a1, v79, ParamSetHolderMgr::smParamSetTypeRanked[ii], 0, 0);
        ParamSet = ParamSetHolder::getParamSet((ParamSetHolder *)a1, v80, v81, v82, v83, v84, v85, v86);
        if (DWORD2(v132))
        {
          v94 = ParamSet;
          v95 = 0;
          do
          {
            v96 = *(unsigned __int16 *)(v132 + 2 * v95);
            ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v75, *(unsigned __int16 *)(v132 + 2 * v95), v88, v89, v90, v91, v92, v93);
            switch((*(unsigned int (**)(const void *))(*(_QWORD *)ParamByParamId + 24))(ParamByParamId))
            {
              case 1u:
                BoolParameter = DynamicParamSet::getBoolParameter(v78, v96, v88, v89, v90, v91, v92, v93);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v94 + 64))(v94, v96, BoolParameter);
                break;
              case 2u:
                IntParameter = DynamicParamSet::getIntParameter(v78, v96, v88, v89, v90, v91, v92, v93);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v94 + 72))(v94, v96, IntParameter);
                break;
              case 3u:
                DoubleParameter = DynamicParamSet::getDoubleParameter(v78, v96, v88, v89, v90, v91, v92, v93);
                (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v94 + 80))(v94, v96, DoubleParameter);
                break;
              case 4u:
                StringParameter = DynamicParamSet::getStringParameter(v78, v96, v88, v89, v90, v91, v92, v93);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v94 + 88))(v94, v96, StringParameter);
                break;
              case 5u:
                EnumParameter = (const char *)DynamicParamSet::getEnumParameter(v78, v96, v88, v89, v90, v91, v92, v93);
                v107 = EnumParamSpec::convertEnumStringToInt(v100, EnumParameter, v101, v102, v103, v104, v105, v106);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v94 + 96))(v94, v96, v107);
                break;
              default:
                break;
            }
            ++v95;
          }
          while (v95 < DWORD2(v132));
        }
        ++v77;
        v76 = v119;
        a1 = v118;
      }
      while (v77 < *(unsigned int *)(v119 + 8));
    }
    result = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v132);
  }
  return result;
}

void sub_2097CD21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *DgnIOwnArray<DynamicParamSet *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<DynamicParamSet>(*(DynamicParamSet **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *ParamSetHolder::loadParamSetHolderBinary(ParamSetHolder *this, DFile *a2, DFileChecksums *a3)
{
  uint64_t v5;
  uint64_t v6;
  DgnStream *MrecHeader;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v14;
  _QWORD *v15;
  unint64_t i;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  ParamSpecMgr *v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t ParamByParamId;
  const char *v39;
  const char *v40;
  unsigned int v41;
  uint64_t CurrentSubDirComponents;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  DFileChecksums *v51;
  DFile *v52;
  int v54;
  uint64_t v55;
  int v56[2];
  int v57;
  char *v58;
  int v59;
  unsigned __int16 v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];
  _QWORD v73[2];
  _QWORD v74[2];
  _QWORD v75[2];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90[4];

  *(_QWORD *)v90 = 0;
  MrecHeader = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x44u, 1, "MRPSB!? ", &v90[1], v90);
  v89 = 0;
  v8 = v90[1] == 22 && v90[0] == 1;
  v9 = v8;
  v54 = v9;
  v51 = a3;
  if (v8)
  {
    v10 = 0;
    v89 = 12;
    v11 = 22;
    v12 = 1;
  }
  else if (v90[1] == 23 && v90[0] == 2)
  {
    v10 = 0;
    v89 = 12;
    v11 = 23;
    v12 = 2;
  }
  else
  {
    if (*((_DWORD *)a2 + 6))
      v14 = (char *)*((_QWORD *)a2 + 2);
    else
      v14 = byte_209A5B212;
    MrecHeaderCheckVersions(v14, "MRPSB!? ", v90[1], v90[0], 0x17u, 3u);
    v12 = v90[0];
    v11 = v90[1];
    v10 = 1;
  }
  v52 = a2;
  MrecHeaderCheckLatestVersionIfShared(a2, "MRPSB!? ", v11, v12, 23, 3, v5, v6);
  v88 = 0;
  v86 = -1;
  v87 = -1;
  v84 = -1;
  v85 = -1;
  v82 = -1;
  v83 = -1;
  v80 = -1;
  v81 = -1;
  v78 = -1;
  v79 = -1;
  v76 = -1;
  v77 = -1;
  v75[0] = 0;
  v75[1] = 0;
  v74[0] = 0;
  v74[1] = 0;
  v73[0] = 0;
  v73[1] = 0;
  v72[0] = 0;
  v72[1] = 0;
  v71[0] = 0;
  v71[1] = 0;
  v70[0] = 0;
  v70[1] = 0;
  v69[0] = 0;
  v69[1] = 0;
  v68[0] = 0;
  v68[1] = 0;
  v67[0] = 0;
  v67[1] = 0;
  v66[0] = 0;
  v66[1] = 0;
  v65[0] = 0;
  v65[1] = 0;
  v64[0] = 0;
  v64[1] = 0;
  if (v10)
    readObject((uint64_t)MrecHeader, &v89, &v88);
  v15 = 0;
  for (i = 1; i != 13; ++i)
  {
    v63 = 0;
    switch((int)i)
    {
      case 1:
        *((_DWORD *)this + 280) = 0;
        if (i < v89)
        {
          readObject((uint64_t)MrecHeader, &v63, &v88);
          v17 = &v87;
          readObject((uint64_t)MrecHeader, &v87, &v88);
          v15 = v75;
          goto LABEL_48;
        }
        v87 = 1;
        break;
      case 2:
        *((_DWORD *)this + 281) = 0;
        if (i < v89)
        {
          readObject((uint64_t)MrecHeader, &v63, &v88);
          v17 = &v86;
          readObject((uint64_t)MrecHeader, &v86, &v88);
          v15 = v74;
          goto LABEL_48;
        }
        v86 = 1;
        break;
      case 3:
        *((_DWORD *)this + 282) = 0;
        if (i < v89)
        {
          readObject((uint64_t)MrecHeader, &v63, &v88);
          v17 = &v85;
          readObject((uint64_t)MrecHeader, &v85, &v88);
          v15 = v73;
          goto LABEL_48;
        }
        v85 = 1;
        break;
      case 4:
        *((_DWORD *)this + 283) = 0;
        if (i < v89)
        {
          readObject((uint64_t)MrecHeader, &v63, &v88);
          v17 = &v84;
          readObject((uint64_t)MrecHeader, &v84, &v88);
          v15 = v72;
          goto LABEL_48;
        }
        v84 = 1;
        break;
      case 5:
        *((_DWORD *)this + 284) = 0;
        if (i < v89)
        {
          readObject((uint64_t)MrecHeader, &v63, &v88);
          v17 = &v83;
          readObject((uint64_t)MrecHeader, &v83, &v88);
          v15 = v71;
          goto LABEL_48;
        }
        v83 = 1;
        break;
      case 6:
        *((_DWORD *)this + 285) = 0;
        if (i < v89)
        {
          readObject((uint64_t)MrecHeader, &v63, &v88);
          v17 = &v82;
          readObject((uint64_t)MrecHeader, &v82, &v88);
          v15 = v70;
          goto LABEL_48;
        }
        v82 = 1;
        break;
      case 7:
        *((_DWORD *)this + 286) = 0;
        if (i < v89)
        {
          readObject((uint64_t)MrecHeader, &v63, &v88);
          v17 = &v81;
          readObject((uint64_t)MrecHeader, &v81, &v88);
          v15 = v69;
          goto LABEL_48;
        }
        v81 = 1;
        break;
      case 8:
        *((_DWORD *)this + 287) = 0;
        if (i < v89)
        {
          readObject((uint64_t)MrecHeader, &v63, &v88);
          v17 = &v80;
          readObject((uint64_t)MrecHeader, &v80, &v88);
          v15 = v68;
          goto LABEL_48;
        }
        v80 = 1;
        break;
      case 9:
        *((_DWORD *)this + 288) = 0;
        if (i < v89)
        {
          readObject((uint64_t)MrecHeader, &v63, &v88);
          v17 = &v79;
          readObject((uint64_t)MrecHeader, &v79, &v88);
          v15 = v67;
          goto LABEL_48;
        }
        v79 = 1;
        break;
      case 10:
        *((_DWORD *)this + 289) = 0;
        if (i < v89)
        {
          readObject((uint64_t)MrecHeader, &v63, &v88);
          v17 = &v78;
          readObject((uint64_t)MrecHeader, &v78, &v88);
          v15 = v66;
          goto LABEL_48;
        }
        v78 = 1;
        break;
      case 11:
        *((_DWORD *)this + 290) = 0;
        if (i < v89)
        {
          readObject((uint64_t)MrecHeader, &v63, &v88);
          v17 = &v77;
          readObject((uint64_t)MrecHeader, &v77, &v88);
          v15 = v65;
          goto LABEL_48;
        }
        v77 = 1;
        break;
      case 12:
        *((_DWORD *)this + 291) = 0;
        if (i < v89)
        {
          readObject((uint64_t)MrecHeader, &v63, &v88);
          v17 = &v76;
          readObject((uint64_t)MrecHeader, &v76, &v88);
          v15 = v64;
          goto LABEL_48;
        }
        v76 = 1;
        break;
      default:
        v17 = &v87;
LABEL_48:
        v20 = v17;
        v19 = *(unsigned int *)v17;
        v18 = *((unsigned int *)v20 + 1);
        v21 = (ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[ParamSetHolderMgr::smParamSetTypeRanked[i]];
        v61 = 0;
        v62 = 0;
        ParamSpecMgr::getAllParamIdsSortedByName((unint64_t)v21, (uint64_t)&v61, v19, v18);
        if (v63)
        {
          v22 = 0;
          v55 = v19 | (v18 << 32);
          do
          {
            v60 = 0;
            readObject((uint64_t)MrecHeader, &v60, &v88);
            DgnString::DgnString((DgnString *)&v58);
            readObject(MrecHeader, (DgnString *)&v58, &v88);
            if (v54)
            {
              v23 = v59 ? v58 : byte_209A5B212;
              if ((isValidRestrictedName(v23) & 1) == 0)
              {
                if (v59)
                  LOBYTE(v26) = (_BYTE)v58;
                else
                  v26 = byte_209A5B212;
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1478, (uint64_t)"recogctl/psholder", 39, (uint64_t)"%.500s %.500s", v24, v25, (char)v26);
              }
            }
            v27 = MemChunkAlloc(0x30uLL, 0);
            v28 = (uint64_t)v27;
            if (v59)
              v29 = v58;
            else
              v29 = byte_209A5B212;
            DynamicParamSet::DynamicParamSet(v27, v29, ParamSetHolderMgr::smParamSetTypeRanked[i], v55, &v61);
            if ((_DWORD)v62)
            {
              v36 = 0;
              do
              {
                v37 = *(unsigned __int16 *)(v61 + 2 * v36);
                ParamByParamId = ParamSpecMgr::getParamByParamId(v21, v37, v30, v31, v32, v33, v34, v35);
                switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)ParamByParamId + 24))(ParamByParamId))
                {
                  case 1u:
                    LOBYTE(v56[0]) = 0;
                    readObject((uint64_t)MrecHeader, (BOOL *)v56, &v88);
                    DynamicParamSet::setBoolParameter(v28, v37, v56[0]);
                    break;
                  case 2u:
                    v56[0] = 0;
                    readObject((uint64_t)MrecHeader, v56, &v88);
                    DynamicParamSet::setIntParameter(v28, v37, v56[0]);
                    break;
                  case 3u:
                    *(_QWORD *)v56 = 0;
                    readObject(MrecHeader, (double *)v56, &v88);
                    DynamicParamSet::setDoubleParameter(v28, v37, *(double *)v56);
                    break;
                  case 4u:
                    DgnString::DgnString((DgnString *)v56);
                    readObject(MrecHeader, (DgnString *)v56, &v88);
                    if (v57)
                      v40 = *(const char **)v56;
                    else
                      v40 = byte_209A5B212;
                    DynamicParamSet::setStringParameter(v28, v37, v40, 1);
                    goto LABEL_75;
                  case 5u:
                    DgnString::DgnString((DgnString *)v56);
                    readObject(MrecHeader, (DgnString *)v56, &v88);
                    if (v57)
                      v39 = *(const char **)v56;
                    else
                      v39 = byte_209A5B212;
                    DynamicParamSet::setEnumParameter(v28, v37, v39, 1);
LABEL_75:
                    DgnString::~DgnString((DgnString *)v56);
                    break;
                  default:
                    break;
                }
                ++v36;
              }
              while (v36 < v62);
            }
            v41 = *((_DWORD *)v15 + 2);
            if (v41 == *((_DWORD *)v15 + 3))
            {
              DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v15, 1, 1);
              v41 = *((_DWORD *)v15 + 2);
            }
            *(_QWORD *)(*v15 + 8 * v41) = v28;
            *((_DWORD *)v15 + 2) = v41 + 1;
            DgnString::~DgnString((DgnString *)&v58);
            ++v22;
          }
          while (v63 > (unsigned __int16)v22);
        }
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v61);
        break;
    }
  }
  *((_QWORD *)&v50 + 1) = v66;
  *((_QWORD *)&v49 + 1) = v68;
  *(_QWORD *)&v50 = v67;
  *((_QWORD *)&v48 + 1) = v70;
  *(_QWORD *)&v49 = v69;
  *((_QWORD *)&v47 + 1) = v72;
  *(_QWORD *)&v48 = v71;
  *((_QWORD *)&v46 + 1) = v74;
  *(_QWORD *)&v47 = v73;
  *(_QWORD *)&v46 = v75;
  *(_QWORD *)&v45 = v78;
  *((_QWORD *)&v45 + 1) = v77;
  *(_QWORD *)&v44 = v80;
  *((_QWORD *)&v44 + 1) = v79;
  ParamSetHolder::runUpgradeFunctionSequence((unsigned int *)this, v87, v86, v85, v84, v83, v82, v81, v44, v45, v76, v46, v47, v48, v49, v50, (uint64_t)v65, (uint64_t)v64);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v75);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v74);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v73);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v72);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v71);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v70);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v69);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v68);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v67);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v66);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v65);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v64);
  readObjectChecksumAndVerify(MrecHeader, v88);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(v52);
  DFileChecksums::addChecksum((uint64_t)v51, CurrentSubDirComponents, 0x44u, v88);
  if (MrecHeader)
  {
    (**(void (***)(DgnStream *))MrecHeader)(MrecHeader);
    MemChunkFree(MrecHeader, 0);
  }
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v64);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v65);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v66);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v67);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v68);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v69);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v70);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v71);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v72);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v73);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v74);
  return DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)v75);
}

void sub_2097CDCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,char a54,uint64_t a55,char a56,uint64_t a57,char a58)
{
  uint64_t v58;

  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&a40);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&a42);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&a44);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&a46);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&a48);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&a50);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&a52);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&a54);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&a56);
  DgnIOwnArray<DynamicParamSet *>::releaseAll((uint64_t)&a58);
  DgnIOwnArray<DynamicParamSet *>::releaseAll(v58 - 248);
  DgnIOwnArray<DynamicParamSet *>::releaseAll(v58 - 232);
  _Unwind_Resume(a1);
}

void ParamSetHolder::loadParamSetHolder(EnvMgr **this, char **a2)
{
  DFile *v4;
  int v5;
  DgnStream *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;
  int64x2_t v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE v16[24];
  int64x2_t v17;
  int64x2_t v18;

  v17 = 0u;
  v18 = 0u;
  SnapTime::recordTime((SnapTime *)&v17, 1, 1, 1, 1);
  EnvHolder::errorIfFileObviouslyIsNotOfTypeParamSetHolder((EnvHolder *)a2, v4);
  DFileChecksums::DFileChecksums((DFileChecksums *)v16);
  EnvMgr::loadEnvMgr(this[139], (DFile *)a2, (DFileChecksums *)v16);
  v5 = DFile::subFileExists((uint64_t)a2, 0);
  if (v5)
    ParamSetHolder::loadParamSetHolderText((ParamSetHolder *)this, (DFile *)a2);
  else
    ParamSetHolder::loadParamSetHolderBinary((ParamSetHolder *)this, (DFile *)a2, (DFileChecksums *)v16);
  if (DFile::subFileExists((uint64_t)a2, 0x39u))
  {
    v15 = 0;
    v6 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x39u, 1, "MRPCH!? ", (_DWORD *)&v15 + 1, &v15);
    if (*((_DWORD *)a2 + 6))
      v7 = a2[2];
    else
      v7 = byte_209A5B212;
    MrecHeaderCheckVersions(v7, "MRPCH!? ", HIDWORD(v15), v15, 0x16u, 1u);
    MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRPCH!? ", SHIDWORD(v15), v15, 22, 1, v8, v9);
    DFileChecksums::DFileChecksums((DFileChecksums *)&v12);
    v14 = 0;
    readObject(v6, (DFileChecksums *)&v12, &v14);
    readObjectChecksumAndVerify(v6, v14);
    if ((DFileChecksums::operator==((uint64_t)&v12, (uint64_t)v16) & 1) == 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 1650, (uint64_t)"recogctl/psholder", 14, (uint64_t)"%s", v10, v11, (char)byte_209A5B212);
    if (v6)
    {
      (**(void (***)(DgnStream *))v6)(v6);
      MemChunkFree(v6, 0);
    }
    DFileChecksums::~DFileChecksums((DFileChecksums *)&v12);
  }
  FileHistory::loadFileHistory((FileHistory *)(this + 147), (DFile *)a2, v5);
  v12 = 0u;
  v13 = 0u;
  SnapTime::recordTime((SnapTime *)&v12, 1, 1, 1, 1);
  v12 = vsubq_s64(v12, v17);
  v13 = vsubq_s64(v13, v18);
  FileHistory::addEntryWithElapsedTime((FileHistory *)(this + 147), " loadParamSetHolder time: ", (const SnapTime *)&v12);
  *((_BYTE *)this + 1168) = v5;
  (*((void (**)(char **, const char *))*a2 + 10))(a2, "ParamSetHolder");
  DFileChecksums::~DFileChecksums((DFileChecksums *)v16);
}

void sub_2097CE024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  DFileChecksums::~DFileChecksums((DFileChecksums *)va);
  _Unwind_Resume(a1);
}

_QWORD *ParamSetHolder::saveParamSetHolderText(ParamSetHolder *this, DFile *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  ParamSpecMgr *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned __int16 v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  _QWORD *ParamByParamId;
  char *v81;
  int v82;
  char *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const void *v91;
  _QWORD *v92;
  char *NameForEnumItem;
  double v94;
  char *v95;
  const char *v96;
  int v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  int v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  __int16 *v118;
  char *v119;
  _BYTE *v120;
  unsigned int v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126[35];
  _OWORD *v127;
  int v128;
  int v129;
  DgnString *v130[3];

  DgnArray<DgnString>::DgnArray(v130, 4);
  v126[0] = 0;
  v2 = realloc_array(0, v126, 0x10uLL, 0, 0, 1);
  v127 = v126[0];
  v128 = 4;
  v129 = v2 >> 2;
  DgnString::operator=(v130[0], "SetIndex");
  DgnString::operator=((DgnString *)((char *)v130[0] + 16), "SetName");
  DgnString::operator=((DgnString *)((char *)v130[0] + 32), "ParamName");
  DgnString::operator=((DgnString *)((char *)v130[0] + 48), "ParamValue");
  v123 = 0;
  v116 = 0;
  v111 = 0;
  v112 = 0;
  v109 = 0;
  v110 = 0;
  v107 = 0;
  v108 = 0;
  v105 = 0;
  v106 = 0;
  v103 = 0;
  v104 = 0;
  v101 = 0;
  v102 = 0;
  v122 = 0;
  *v127 = xmmword_209A5B730;
  v3 = 1;
  do
  {
    DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v126);
    switch((int)v3)
    {
      case 1:
        DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v126, (uint64_t)a2, 0, 0);
        v124 = 0;
        v125 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)v126, sADPT_Versions, (uint64_t)&v124, v4, v5, v6, v7, v8);
        DgnTextFileWriter::setFileType((uint64_t)v126, "AdapterParamSetArrayText", (_QWORD *)(v124 + 8 * (v125 - 1)));
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v124);
        DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v126, "NumberOfParamSets", (*((_DWORD *)this + 280) + 1));
        v122 = *((_DWORD *)this + 280);
        v101 = MemChunkAlloc(0x190uLL, 0);
        v116 = AdapterParamSet::AdapterParamSet(v101, v123, ParamSetHolderMgr::smParamSetTypeRanked[v3], *(unsigned int *)this, 0xFFFFFFFFLL);
        break;
      case 2:
        DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v126, (uint64_t)a2, 0xBu, 0);
        v124 = 0;
        v125 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)v126, sCHPT_Versions, (uint64_t)&v124, v9, v10, v11, v12, v13);
        DgnTextFileWriter::setFileType((uint64_t)v126, "ChannelParamSetArrayText", (_QWORD *)(v124 + 8 * (v125 - 1)));
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v124);
        DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v126, "NumberOfParamSets", (*((_DWORD *)this + 281) + 1));
        v122 = *((_DWORD *)this + 281);
        v102 = MemChunkAlloc(0x150uLL, 0);
        v116 = ChannelParamSet::ChannelParamSet(v102, v123, ParamSetHolderMgr::smParamSetTypeRanked[v3], *(unsigned int *)this, 0xFFFFFFFFLL);
        break;
      case 3:
        DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v126, (uint64_t)a2, 0xFu, 0);
        v124 = 0;
        v125 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)v126, sCOPT_Versions, (uint64_t)&v124, v14, v15, v16, v17, v18);
        DgnTextFileWriter::setFileType((uint64_t)v126, "ConfidenceParamSetArrayText", (_QWORD *)(v124 + 8 * (v125 - 1)));
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v124);
        DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v126, "NumberOfParamSets", (*((_DWORD *)this + 282) + 1));
        v122 = *((_DWORD *)this + 282);
        v103 = MemChunkAlloc(0x260uLL, 0);
        v116 = ConfidenceParamSet::ConfidenceParamSet(v103, v123, ParamSetHolderMgr::smParamSetTypeRanked[v3], *(unsigned int *)this, 0xFFFFFFFFLL);
        break;
      case 4:
        DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v126, (uint64_t)a2, 0x21u, 0);
        v124 = 0;
        v125 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)v126, sLNPT_Versions, (uint64_t)&v124, v19, v20, v21, v22, v23);
        DgnTextFileWriter::setFileType((uint64_t)v126, "LatticeNBestParamSetArrayText", (_QWORD *)(v124 + 8 * (v125 - 1)));
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v124);
        DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v126, "NumberOfParamSets", (*((_DWORD *)this + 283) + 1));
        v122 = *((_DWORD *)this + 283);
        v104 = MemChunkAlloc(0x30uLL, 0);
        v116 = LatticeNBestParamSet::LatticeNBestParamSet(v104, v123, ParamSetHolderMgr::smParamSetTypeRanked[v3], *(unsigned int *)this, 0xFFFFFFFFLL);
        break;
      case 5:
        DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v126, (uint64_t)a2, 0x22u, 0);
        v124 = 0;
        v125 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)v126, sLPPT_Versions, (uint64_t)&v124, v24, v25, v26, v27, v28);
        DgnTextFileWriter::setFileType((uint64_t)v126, "LatticePostProbParamSetArrayText", (_QWORD *)(v124 + 8 * (v125 - 1)));
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v124);
        DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v126, "NumberOfParamSets", (*((_DWORD *)this + 284) + 1));
        v122 = *((_DWORD *)this + 284);
        v106 = MemChunkAlloc(0x48uLL, 0);
        v116 = LatticePostProbParamSet::LatticePostProbParamSet(v106, v123, ParamSetHolderMgr::smParamSetTypeRanked[v3], *(unsigned int *)this, 0xFFFFFFFFLL);
        break;
      case 6:
        DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v126, (uint64_t)a2, 0x37u, 0);
        v124 = 0;
        v125 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)v126, sPBPT_Versions, (uint64_t)&v124, v29, v30, v31, v32, v33);
        DgnTextFileWriter::setFileType((uint64_t)v126, "PrefiltererBuildParamSetArrayText", (_QWORD *)(v124 + 8 * (v125 - 1)));
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v124);
        DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v126, "NumberOfParamSets", (*((_DWORD *)this + 285) + 1));
        v122 = *((_DWORD *)this + 285);
        v107 = MemChunkAlloc(0x98uLL, 0);
        v116 = PrefiltererBuildParamSet::PrefiltererBuildParamSet(v107, v123, ParamSetHolderMgr::smParamSetTypeRanked[v3], *(unsigned int *)this, 0xFFFFFFFFLL);
        break;
      case 7:
        DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v126, (uint64_t)a2, 0x45u, 0);
        v124 = 0;
        v125 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)v126, sPSPT_Versions, (uint64_t)&v124, v34, v35, v36, v37, v38);
        DgnTextFileWriter::setFileType((uint64_t)v126, "PrefiltererSearchParamSetArrayText", (_QWORD *)(v124 + 8 * (v125 - 1)));
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v124);
        DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v126, "NumberOfParamSets", (*((_DWORD *)this + 286) + 1));
        v122 = *((_DWORD *)this + 286);
        v105 = MemChunkAlloc(0x98uLL, 0);
        v116 = PrefiltererSearchParamSet::PrefiltererSearchParamSet(v105, v123, ParamSetHolderMgr::smParamSetTypeRanked[v3], *(unsigned int *)this, 0xFFFFFFFFLL);
        break;
      case 8:
        DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v126, (uint64_t)a2, 0x3Cu, 0);
        v124 = 0;
        v125 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)v126, sPGPT_Versions, (uint64_t)&v124, v39, v40, v41, v42, v43);
        DgnTextFileWriter::setFileType((uint64_t)v126, "PronGuessParamSetArrayText", (_QWORD *)(v124 + 8 * (v125 - 1)));
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v124);
        DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v126, "NumberOfParamSets", (*((_DWORD *)this + 287) + 1));
        v122 = *((_DWORD *)this + 287);
        v109 = MemChunkAlloc(0x40uLL, 0);
        v116 = PronGuessParamSet::PronGuessParamSet(v109, v123, ParamSetHolderMgr::smParamSetTypeRanked[v3], *(unsigned int *)this, 0xFFFFFFFFLL);
        break;
      case 9:
        DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v126, (uint64_t)a2, 0x4Fu, 0);
        v124 = 0;
        v125 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)v126, sSAPT_Versions, (uint64_t)&v124, v44, v45, v46, v47, v48);
        DgnTextFileWriter::setFileType((uint64_t)v126, "SausageParamSetArrayText", (_QWORD *)(v124 + 8 * (v125 - 1)));
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v124);
        DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v126, "NumberOfParamSets", (*((_DWORD *)this + 288) + 1));
        v122 = *((_DWORD *)this + 288);
        v108 = MemChunkAlloc(0x48uLL, 0);
        v116 = SausageParamSet::SausageParamSet(v108, v123, ParamSetHolderMgr::smParamSetTypeRanked[v3], *(unsigned int *)this, 0xFFFFFFFFLL);
        break;
      case 10:
        DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v126, (uint64_t)a2, 0x58u, 0);
        v124 = 0;
        v125 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)v126, sSRPT_Versions, (uint64_t)&v124, v49, v50, v51, v52, v53);
        DgnTextFileWriter::setFileType((uint64_t)v126, "SearchParamSetArrayText", (_QWORD *)(v124 + 8 * (v125 - 1)));
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v124);
        DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v126, "NumberOfParamSets", (*((_DWORD *)this + 289) + 1));
        v122 = *((_DWORD *)this + 289);
        v111 = MemChunkAlloc(0x210uLL, 0);
        v116 = SearchParamSet::SearchParamSet(v111, v123, ParamSetHolderMgr::smParamSetTypeRanked[v3], *(unsigned int *)this, 0xFFFFFFFFLL);
        break;
      case 11:
        DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v126, (uint64_t)a2, 0x54u, 0);
        v124 = 0;
        v125 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)v126, sSCPT_Versions, (uint64_t)&v124, v54, v55, v56, v57, v58);
        DgnTextFileWriter::setFileType((uint64_t)v126, "SearchCrossLayerParamSetArrayText", (_QWORD *)(v124 + 8 * (v125 - 1)));
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v124);
        DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v126, "NumberOfParamSets", (*((_DWORD *)this + 290) + 1));
        v122 = *((_DWORD *)this + 290);
        v110 = MemChunkAlloc(0x50uLL, 0);
        v116 = SearchCrossLayerParamSet::SearchCrossLayerParamSet(v110, v123, ParamSetHolderMgr::smParamSetTypeRanked[v3], *(unsigned int *)this, 0xFFFFFFFFLL);
        break;
      case 12:
        DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v126, (uint64_t)a2, 0x65u, 0);
        v124 = 0;
        v125 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)v126, sUDPT_Versions, (uint64_t)&v124, v59, v60, v61, v62, v63);
        DgnTextFileWriter::setFileType((uint64_t)v126, "UserDeltaParamSetArrayText", (_QWORD *)(v124 + 8 * (v125 - 1)));
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v124);
        DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v126, "NumberOfParamSets", (*((_DWORD *)this + 291) + 1));
        v122 = *((_DWORD *)this + 291);
        v112 = MemChunkAlloc(0x38uLL, 0);
        v116 = UserDeltaParamSet::UserDeltaParamSet(v112, v123, ParamSetHolderMgr::smParamSetTypeRanked[v3], *(unsigned int *)this, 0xFFFFFFFFLL);
        break;
      default:
        break;
    }
    DgnTextFileWriter::setLineFieldFormat((uint64_t)v126, (uint64_t)&v127, (uint64_t)v130);
    v64 = (ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[ParamSetHolderMgr::smParamSetTypeRanked[v3]];
    v124 = 0;
    v125 = 0;
    ParamSpecMgr::getAllParamIdsSortedByName((unint64_t)v64, (uint64_t)&v124, 0, 0);
    v114 = v3 - 1;
    v115 = v3;
    v71 = 0;
    v72 = 0;
    v73 = (char *)this + 80 * v3;
    v117 = v73 + 80;
    v118 = (__int16 *)(v73 + 74);
    v119 = v73 + 96;
    v120 = v73 + 72;
    do
    {
      if (v72)
      {
        if (!*v120 || (v74 = v117, *v118 != -2))
          v74 = *(char **)(*(_QWORD *)v119 + 524272);
        v75 = *(_QWORD *)(*((_QWORD *)this + 1) + 8
                                                * *(unsigned int *)(*(_QWORD *)v74 + 4 * (v71 - 1)));
        v76 = 0;
        if (*(_DWORD *)(v75 + 16))
          v123 = *(char **)(v75 + 8);
        else
          v123 = byte_209A5B212;
      }
      else
      {
        v76 = 1;
        v123 = "_default";
        v75 = v116;
      }
      if (!(_DWORD)v125)
        goto LABEL_48;
      v77 = 0;
      v78 = 0;
      do
      {
        v79 = *(unsigned __int16 *)(v124 + 2 * v77);
        ParamByParamId = (_QWORD *)ParamSpecMgr::getParamByParamId(v64, *(unsigned __int16 *)(v124 + 2 * v77), v65, v66, v67, v68, v69, v70);
        v81 = (char *)ParamByParamId[1];
        switch((*(unsigned int (**)(_QWORD *))(*ParamByParamId + 24))(ParamByParamId))
        {
          case 1u:
            v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 24))(v75, v79, v76);
            if (!v72
              || v82 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 24))(v75, v79, 1))
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v126, 0, v71);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 1u, v123);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 2u, v81);
              if (v82)
                v83 = "True";
              else
                v83 = "False";
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 3u, v83);
              DgnTextFileWriter::writeNextLine(v126);
              goto LABEL_45;
            }
            break;
          case 2u:
            v97 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 32))(v75, v79, v76);
            if (!v72
              || v97 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 32))(v75, v79, 1))
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v126, 0, v71);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 1u, v123);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 2u, v81);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v126, 3u, v97);
              DgnTextFileWriter::writeNextLine(v126);
              goto LABEL_45;
            }
            break;
          case 3u:
            v94 = (*(double (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 40))(v75, v79, v76);
            if (!v72
              || v94 != (*(double (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 40))(v75, v79, 1))
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v126, 0, v71);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 1u, v123);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 2u, v81);
              DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v126, 3u, v94);
              DgnTextFileWriter::writeNextLine(v126);
              goto LABEL_45;
            }
            break;
          case 4u:
            v95 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 48))(v75, v79, v76);
            if (!v72
              || (v96 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 48))(v75, v79, 1), strcmp(v95, v96)))
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v126, 0, v71);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 1u, v123);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 2u, v81);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 3u, v95);
              DgnTextFileWriter::writeNextLine(v126);
              goto LABEL_45;
            }
            break;
          case 5u:
            v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 56))(v75, v79, v76);
            if (!v72
              || v84 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 56))(v75, v79, 1))
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v126, 0, v71);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 1u, v123);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 2u, v81);
              v91 = (const void *)ParamSpecMgr::getParamByParamId(v64, v79, v85, v86, v87, v88, v89, v90);
              NameForEnumItem = GetNameForEnumItem(v92[4] + 16, v84);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 3u, NameForEnumItem);
              DgnTextFileWriter::writeNextLine(v126);
LABEL_45:
              v78 = 1;
            }
            break;
          default:
            break;
        }
        ++v77;
      }
      while (v77 < v125);
      if ((v78 & 1) == 0)
      {
LABEL_48:
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v126, 0, v71);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 1u, v123);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 2u, byte_209A5B212);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v126, 3u, byte_209A5B212);
        DgnTextFileWriter::writeNextLine(v126);
      }
      v71 = ++v72;
    }
    while (v122 >= v72);
    switch(v114)
    {
      case 0:
        v98 = v101;
        goto LABEL_63;
      case 1:
        v98 = v102;
        goto LABEL_63;
      case 2:
        v98 = v103;
        goto LABEL_63;
      case 3:
        v98 = v104;
        goto LABEL_63;
      case 4:
        v98 = v106;
        goto LABEL_63;
      case 5:
        v98 = v107;
        goto LABEL_63;
      case 6:
        v98 = v105;
        goto LABEL_63;
      case 7:
        v98 = v109;
        goto LABEL_63;
      case 8:
        v98 = v108;
        goto LABEL_63;
      case 9:
        v98 = v111;
        goto LABEL_63;
      case 10:
        v98 = v110;
        goto LABEL_63;
      case 11:
        v98 = v112;
LABEL_63:
        v99 = v98;
        if (v98)
        {
          (*(void (**)(uint64_t *))*v98)(v98);
          MemChunkFree(v99, 0);
        }
        break;
      default:
        break;
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v124);
    DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v126);
    v3 = v115 + 1;
  }
  while (v115 != 12);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v127);
  return DgnArray<DgnString>::releaseAll((uint64_t)v130);
}

void sub_2097CEFF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnArray<DgnString>::releaseAll(v1 - 120);
  _Unwind_Resume(a1);
}

void ParamSetHolder::saveParamSetHolderBinary(ParamSetHolder *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  ParamSpecMgr *v68;
  unsigned __int16 v69;
  _BYTE *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t ParamByParamId;
  const void *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  int v93;
  const char *NameForEnumItem;
  uint64_t CurrentSubDirComponents;
  int *v98;
  int *v99;
  int *v100;
  int *v101;
  int *v102;
  int *v103;
  int *v104;
  int *v105;
  int *v106;
  int *v107;
  int *v108;
  int *v109;
  uint64_t v110;
  __int16 *v111;
  ParamSetHolder *v112;
  unsigned int v113;
  unsigned __int16 v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[2];

  v5 = OpenAndWriteMrecHeader((uint64_t)a2, 0x44u, a4, "MRPSB!? ", 23, 3);
  v119[0] = 13;
  writeObject((uint64_t)v5, (int *)v119, (_DWORD *)v119 + 1);
  v108 = (int *)((char *)this + 1160);
  v109 = (int *)((char *)this + 1164);
  v106 = (int *)((char *)this + 1152);
  v107 = (int *)((char *)this + 1156);
  v104 = (int *)((char *)this + 1144);
  v105 = (int *)((char *)this + 1148);
  v102 = (int *)((char *)this + 1136);
  v103 = (int *)((char *)this + 1140);
  v100 = (int *)((char *)this + 1128);
  v101 = (int *)((char *)this + 1132);
  v112 = this;
  v98 = (int *)((char *)this + 1120);
  v99 = (int *)((char *)this + 1124);
  v6 = 1;
  do
  {
    v7 = (char *)v112 + 80 * v6;
    v113 = *((_DWORD *)v7 + 22);
    switch((int)v6)
    {
      case 1:
        writeObject((uint64_t)v5, v98, (_DWORD *)v119 + 1);
        DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)&v117);
        v115 = 0.0;
        v116 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)&v117, sADPT_Versions, (uint64_t)&v115, v8, v9, v10, v11, v12);
        writeObject((uint64_t)v5, (int *)(*(_QWORD *)&v115 + 8 * (v116 - 1)), (_DWORD *)v119 + 1);
        goto LABEL_15;
      case 2:
        writeObject((uint64_t)v5, v99, (_DWORD *)v119 + 1);
        DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)&v117);
        v115 = 0.0;
        v116 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)&v117, sCHPT_Versions, (uint64_t)&v115, v13, v14, v15, v16, v17);
        writeObject((uint64_t)v5, (int *)(*(_QWORD *)&v115 + 8 * (v116 - 1)), (_DWORD *)v119 + 1);
        goto LABEL_15;
      case 3:
        writeObject((uint64_t)v5, v100, (_DWORD *)v119 + 1);
        DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)&v117);
        v115 = 0.0;
        v116 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)&v117, sCOPT_Versions, (uint64_t)&v115, v18, v19, v20, v21, v22);
        writeObject((uint64_t)v5, (int *)(*(_QWORD *)&v115 + 8 * (v116 - 1)), (_DWORD *)v119 + 1);
        goto LABEL_15;
      case 4:
        writeObject((uint64_t)v5, v101, (_DWORD *)v119 + 1);
        DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)&v117);
        v115 = 0.0;
        v116 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)&v117, sLNPT_Versions, (uint64_t)&v115, v23, v24, v25, v26, v27);
        writeObject((uint64_t)v5, (int *)(*(_QWORD *)&v115 + 8 * (v116 - 1)), (_DWORD *)v119 + 1);
        goto LABEL_15;
      case 5:
        writeObject((uint64_t)v5, v102, (_DWORD *)v119 + 1);
        DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)&v117);
        v115 = 0.0;
        v116 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)&v117, sLPPT_Versions, (uint64_t)&v115, v28, v29, v30, v31, v32);
        writeObject((uint64_t)v5, (int *)(*(_QWORD *)&v115 + 8 * (v116 - 1)), (_DWORD *)v119 + 1);
        goto LABEL_15;
      case 6:
        writeObject((uint64_t)v5, v103, (_DWORD *)v119 + 1);
        DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)&v117);
        v115 = 0.0;
        v116 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)&v117, sPBPT_Versions, (uint64_t)&v115, v33, v34, v35, v36, v37);
        writeObject((uint64_t)v5, (int *)(*(_QWORD *)&v115 + 8 * (v116 - 1)), (_DWORD *)v119 + 1);
        goto LABEL_15;
      case 7:
        writeObject((uint64_t)v5, v104, (_DWORD *)v119 + 1);
        DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)&v117);
        v115 = 0.0;
        v116 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)&v117, sPSPT_Versions, (uint64_t)&v115, v38, v39, v40, v41, v42);
        writeObject((uint64_t)v5, (int *)(*(_QWORD *)&v115 + 8 * (v116 - 1)), (_DWORD *)v119 + 1);
        goto LABEL_15;
      case 8:
        writeObject((uint64_t)v5, v105, (_DWORD *)v119 + 1);
        DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)&v117);
        v115 = 0.0;
        v116 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)&v117, sPGPT_Versions, (uint64_t)&v115, v43, v44, v45, v46, v47);
        writeObject((uint64_t)v5, (int *)(*(_QWORD *)&v115 + 8 * (v116 - 1)), (_DWORD *)v119 + 1);
        goto LABEL_15;
      case 9:
        writeObject((uint64_t)v5, v106, (_DWORD *)v119 + 1);
        DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)&v117);
        v115 = 0.0;
        v116 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)&v117, sSAPT_Versions, (uint64_t)&v115, v48, v49, v50, v51, v52);
        writeObject((uint64_t)v5, (int *)(*(_QWORD *)&v115 + 8 * (v116 - 1)), (_DWORD *)v119 + 1);
        goto LABEL_15;
      case 10:
        writeObject((uint64_t)v5, v107, (_DWORD *)v119 + 1);
        DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)&v117);
        v115 = 0.0;
        v116 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)&v117, sSRPT_Versions, (uint64_t)&v115, v53, v54, v55, v56, v57);
        writeObject((uint64_t)v5, (int *)(*(_QWORD *)&v115 + 8 * (v116 - 1)), (_DWORD *)v119 + 1);
        goto LABEL_15;
      case 11:
        writeObject((uint64_t)v5, v108, (_DWORD *)v119 + 1);
        DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)&v117);
        v115 = 0.0;
        v116 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)&v117, sSCPT_Versions, (uint64_t)&v115, v58, v59, v60, v61, v62);
        writeObject((uint64_t)v5, (int *)(*(_QWORD *)&v115 + 8 * (v116 - 1)), (_DWORD *)v119 + 1);
        goto LABEL_15;
      case 12:
        writeObject((uint64_t)v5, v109, (_DWORD *)v119 + 1);
        DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)&v117);
        v115 = 0.0;
        v116 = 0;
        DgnTextFile::legalDgnTextFileVersions((int)&v117, sUDPT_Versions, (uint64_t)&v115, v63, v64, v65, v66, v67);
        writeObject((uint64_t)v5, (int *)(*(_QWORD *)&v115 + 8 * (v116 - 1)), (_DWORD *)v119 + 1);
LABEL_15:
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v115);
        DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)&v117);
        break;
      default:
        break;
    }
    v110 = v6;
    v68 = (ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[ParamSetHolderMgr::smParamSetTypeRanked[v6]];
    v117 = 0;
    v118 = 0;
    ParamSpecMgr::getAllParamIdsSortedByName((unint64_t)v68, (uint64_t)&v117, 0, 0);
    v114 = 0;
    if (v113)
    {
      v69 = 0;
      v70 = v7 + 72;
      v71 = (char *)v112 + 80 * v110;
      v111 = (__int16 *)(v71 + 74);
      v72 = v71 + 80;
      v73 = v71 + 96;
      do
      {
        if (!*v70 || (v74 = v72, *v111 != -2))
          v74 = *(_QWORD **)(*(_QWORD *)v73 + 524272);
        v75 = *(_QWORD *)(*((_QWORD *)v112 + 1) + 8 * *(unsigned int *)(*v74 + 4 * v69));
        writeObject((uint64_t)v5, &v114, (_DWORD *)v119 + 1);
        writeObject((uint64_t)v5, v75 + 8, (_DWORD *)v119 + 1);
        if ((_DWORD)v118)
        {
          v82 = 0;
          do
          {
            v83 = *(unsigned __int16 *)(v117 + 2 * v82);
            ParamByParamId = ParamSpecMgr::getParamByParamId(v68, *(unsigned __int16 *)(v117 + 2 * v82), v76, v77, v78, v79, v80, v81);
            switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)ParamByParamId + 24))(ParamByParamId))
            {
              case 1u:
                LOBYTE(v115) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v75 + 24))(v75, v83, 0);
                writeObject((uint64_t)v5, (unsigned __int8 *)&v115, (_DWORD *)v119 + 1);
                break;
              case 2u:
                LODWORD(v115) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v75 + 32))(v75, v83, 0);
                writeObject((uint64_t)v5, (int *)&v115, (_DWORD *)v119 + 1);
                break;
              case 3u:
                v115 = (*(double (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v75 + 40))(v75, v83, 0);
                writeObject(v5, &v115, (unsigned int *)v119 + 1, v87, v88, v89, v90, v91);
                break;
              case 4u:
                v92 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v75 + 48))(v75, v83, 0);
                DgnString::DgnString((DgnString *)&v115, v92);
                writeObject((uint64_t)v5, (uint64_t)&v115, (_DWORD *)v119 + 1);
                goto LABEL_32;
              case 5u:
                v85 = (const void *)ParamSpecMgr::getParamByParamId(v68, v83, v76, v77, v78, v79, v80, v81);
                if (v85)
                else
                  v86 = 0;
                v93 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v75 + 56))(v75, v83, 0);
                NameForEnumItem = GetNameForEnumItem(v86[4] + 16, v93);
                DgnString::DgnString((DgnString *)&v115, NameForEnumItem);
                writeObject((uint64_t)v5, (uint64_t)&v115, (_DWORD *)v119 + 1);
LABEL_32:
                DgnString::~DgnString((DgnString *)&v115);
                break;
              default:
                break;
            }
            ++v82;
          }
          while (v82 < v118);
        }
        v69 = v114 + 1;
        v114 = v69;
      }
      while (v113 > v69);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v117);
    v6 = v110 + 1;
  }
  while (v110 != 12);
  writeObjectChecksum((uint64_t)v5, (int *)v119 + 1);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x44u, SHIDWORD(v119[0]));
  if (v5)
  {
    (**(void (***)(DgnStream *))v5)(v5);
    MemChunkFree(v5, 0);
  }
}

void sub_2097CF864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a28);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)&a30);
  _Unwind_Resume(a1);
}

void ParamSetHolder::saveParamSetHolder(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  _BOOL4 v10;
  uint64_t *v11;
  DgnStream *v12;
  FileHistory *v13;
  int64x2_t v14;
  int64x2_t v15;
  _BYTE v16[24];
  _BYTE v17[23];
  char v18;
  int64x2_t v19;
  int64x2_t v20;

  v19 = 0u;
  v20 = 0u;
  SnapTime::recordTime((SnapTime *)&v19, 1, 1, 1, 1);
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v18);
  if (a4)
  {
    v10 = a4 != 2;
  }
  else if (*(_BYTE *)(a1 + 1168))
  {
    v10 = *(_BYTE *)(*(_QWORD *)(a1 + 1112) + 264) != 0;
  }
  else
  {
    v10 = 0;
  }
  *a3 = 1;
  DFileOwner::DFileOwner((DFileOwner *)v17);
  v11 = DFile::openDFile(a2, (const FileSpec *)1, 13, (uint64_t)v17);
  *a3 = 2;
  DFileChecksums::DFileChecksums((DFileChecksums *)v16);
  EnvMgr::saveEnvMgr(*(EnvMgr **)(a1 + 1112), (DFile *)v11, (DFileChecksums *)v16, v10, a5);
  if (v10)
  {
    ParamSetHolder::saveParamSetHolderText((ParamSetHolder *)a1, (DFile *)v11);
  }
  else
  {
    ParamSetHolder::saveParamSetHolderBinary((ParamSetHolder *)a1, (DFile *)v11, (DFileChecksums *)v16, a5);
    v12 = OpenAndWriteMrecHeader((uint64_t)v11, 0x39u, 0, "MRPCH!? ", 22, 1);
    v14.i32[0] = 0;
    writeObject((uint64_t)v12, (uint64_t)v16, &v14);
    writeObjectChecksum((uint64_t)v12, v14.i32);
    if (v12)
    {
      (**(void (***)(DgnStream *))v12)(v12);
      MemChunkFree(v12, 0);
    }
  }
  v14 = 0u;
  v15 = 0u;
  SnapTime::recordTime((SnapTime *)&v14, 1, 1, 1, 1);
  v14 = vsubq_s64(v14, v19);
  v15 = vsubq_s64(v15, v20);
  v13 = (FileHistory *)(a1 + 1176);
  FileHistory::addEntryWithElapsedTime(v13, " saveParamSetHolder time: ", (const SnapTime *)&v14);
  FileHistory::saveFileHistory(v13, (DFile *)v11, v10);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v17, 0);
  *a3 = 0;
  DFileChecksums::~DFileChecksums((DFileChecksums *)v16);
  DFileOwner::~DFileOwner((DFileOwner *)v17);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v18);
}

void sub_2097CFAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  DFileChecksums::~DFileChecksums((DFileChecksums *)&a13);
  DFileOwner::~DFileOwner((DFileOwner *)&a16);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&a21);
  _Unwind_Resume(a1);
}

uint64_t ParamSetHolder::newParamSet(unsigned int *a1, char *a2, int a3, int a4, const void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t NextId;
  unsigned int i;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  if ((isValidRestrictedName(a2) & 1) == 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 2122, (uint64_t)"recogctl/psholder", 40, (uint64_t)"%.500s", v10, v11, (char)a2);
  if (a5 || !a4)
  {
    if (a5 && (a4 & 1) == 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 2127, (uint64_t)"recogctl/psholder", 6, (uint64_t)"%s", v10, v11, (char)&errStr_recogctl_psholder_E_NONNULL_PARAMSET_ARG);
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 2125, (uint64_t)"recogctl/psholder", 5, (uint64_t)"%s", v10, v11, (char)&errStr_recogctl_psholder_E_NULL_SET_TO_COPY);
  }
  NextId = IdMgr<unsigned int>::getNextId(a1 + 6);
  for (i = a1[4]; i <= NextId; a1[4] = i)
  {
    if (i == a1[5])
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(a1 + 2), 1, 1);
      i = a1[4];
    }
    *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * i++) = 0;
  }
  v16 = a1[20 * a3 + 22];
  if ((_DWORD)v16)
  {
    v17 = *(int **)&a1[20 * a3 + 20];
    v18 = 0xFFFFFFFFLL;
    while (1)
    {
      v19 = *v17++;
      if (v19 == (_DWORD)NextId)
        break;
      --v18;
      if (!--v16)
        goto LABEL_20;
    }
    if (v18)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 2145, (uint64_t)"recogctl/psholder", 3, (uint64_t)"%.500s", v12, v13, (char)a2);
  }
LABEL_20:
  switch(a3)
  {
    case 1:
      v20 = MemChunkAlloc(0x190uLL, 0);
      v21 = v20;
      if (a4)
      {
        AdapterParamSet::AdapterParamSet(v21, v22, a2, 1, *a1, NextId);
      }
      else
      {
        AdapterParamSet::AdapterParamSet(v20, a2, 1, *a1, NextId);
      }
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * NextId) = v21;
      ParamSetHolder::addName((ParamSetHolder *)a1, NextId, (ParamSetHolder *)a2, 1, v23, v24, v25, v26);
      ++a1[280];
      break;
    case 2:
      v27 = MemChunkAlloc(0x150uLL, 0);
      v28 = v27;
      if (a4)
      {
        ChannelParamSet::ChannelParamSet(v28, v29, a2, 2, *a1, NextId);
      }
      else
      {
        ChannelParamSet::ChannelParamSet(v27, a2, 2, *a1, NextId);
      }
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * NextId) = v28;
      ParamSetHolder::addName((ParamSetHolder *)a1, NextId, (ParamSetHolder *)a2, 2, v30, v31, v32, v33);
      ++a1[281];
      break;
    case 3:
      v34 = MemChunkAlloc(0x260uLL, 0);
      v35 = v34;
      if (a4)
      {
        ConfidenceParamSet::ConfidenceParamSet(v35, v36, a2, 3, *a1, NextId);
      }
      else
      {
        ConfidenceParamSet::ConfidenceParamSet(v34, a2, 3, *a1, NextId);
      }
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * NextId) = v35;
      ParamSetHolder::addName((ParamSetHolder *)a1, NextId, (ParamSetHolder *)a2, 3, v37, v38, v39, v40);
      ++a1[282];
      break;
    case 4:
      v41 = MemChunkAlloc(0x30uLL, 0);
      v42 = (uint64_t)v41;
      if (a4)
      {
        LatticeNBestParamSet::LatticeNBestParamSet(v42, (uint64_t)v43, a2, 4, *a1, NextId);
      }
      else
      {
        LatticeNBestParamSet::LatticeNBestParamSet(v41, a2, 4, *a1, NextId);
      }
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * NextId) = v42;
      ParamSetHolder::addName((ParamSetHolder *)a1, NextId, (ParamSetHolder *)a2, 4, v44, v45, v46, v47);
      ++a1[283];
      break;
    case 5:
      v48 = MemChunkAlloc(0x48uLL, 0);
      v49 = v48;
      if (a4)
      {
        LatticePostProbParamSet::LatticePostProbParamSet(v49, v50, a2, 5, *a1, NextId);
      }
      else
      {
        LatticePostProbParamSet::LatticePostProbParamSet(v48, a2, 5, *a1, NextId);
      }
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * NextId) = v49;
      ParamSetHolder::addName((ParamSetHolder *)a1, NextId, (ParamSetHolder *)a2, 5, v51, v52, v53, v54);
      ++a1[284];
      break;
    case 6:
      v55 = MemChunkAlloc(0x98uLL, 0);
      v56 = v55;
      if (a4)
      {
        PrefiltererBuildParamSet::PrefiltererBuildParamSet(v56, v57, a2, 6, *a1, NextId);
      }
      else
      {
        PrefiltererBuildParamSet::PrefiltererBuildParamSet(v55, a2, 6, *a1, NextId);
      }
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * NextId) = v56;
      ParamSetHolder::addName((ParamSetHolder *)a1, NextId, (ParamSetHolder *)a2, 6, v58, v59, v60, v61);
      ++a1[285];
      break;
    case 7:
      v62 = MemChunkAlloc(0x98uLL, 0);
      v63 = v62;
      if (a4)
      {
        PrefiltererSearchParamSet::PrefiltererSearchParamSet(v63, v64, a2, 7, *a1, NextId);
      }
      else
      {
        PrefiltererSearchParamSet::PrefiltererSearchParamSet(v62, a2, 7, *a1, NextId);
      }
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * NextId) = v63;
      ParamSetHolder::addName((ParamSetHolder *)a1, NextId, (ParamSetHolder *)a2, 7, v65, v66, v67, v68);
      ++a1[286];
      break;
    case 8:
      v69 = MemChunkAlloc(0x40uLL, 0);
      v70 = v69;
      if (a4)
      {
        PronGuessParamSet::PronGuessParamSet(v70, v71, a2, 8, *a1, NextId);
      }
      else
      {
        PronGuessParamSet::PronGuessParamSet(v69, a2, 8, *a1, NextId);
      }
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * NextId) = v70;
      ParamSetHolder::addName((ParamSetHolder *)a1, NextId, (ParamSetHolder *)a2, 8, v72, v73, v74, v75);
      ++a1[287];
      break;
    case 9:
      v97 = MemChunkAlloc(0x48uLL, 0);
      v98 = (uint64_t)v97;
      if (a4)
      {
        SausageParamSet::SausageParamSet(v98, (uint64_t)v99, a2, 9, *a1, NextId);
      }
      else
      {
        SausageParamSet::SausageParamSet(v97, a2, 9, *a1, NextId);
      }
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * NextId) = v98;
      ParamSetHolder::addName((ParamSetHolder *)a1, NextId, (ParamSetHolder *)a2, 9, v100, v101, v102, v103);
      ++a1[288];
      break;
    case 10:
      v76 = MemChunkAlloc(0x210uLL, 0);
      v77 = v76;
      if (a4)
      {
        SearchParamSet::SearchParamSet(v77, v78, a2, 10, *a1, NextId);
      }
      else
      {
        SearchParamSet::SearchParamSet(v76, a2, 10, *a1, NextId);
      }
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * NextId) = v77;
      ParamSetHolder::addName((ParamSetHolder *)a1, NextId, (ParamSetHolder *)a2, 10, v79, v80, v81, v82);
      ++a1[289];
      break;
    case 11:
      v83 = MemChunkAlloc(0x50uLL, 0);
      v84 = v83;
      if (a4)
      {
        SearchCrossLayerParamSet::SearchCrossLayerParamSet(v84, v85, a2, 11, *a1, NextId);
      }
      else
      {
        SearchCrossLayerParamSet::SearchCrossLayerParamSet(v83, a2, 11, *a1, NextId);
      }
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * NextId) = v84;
      ParamSetHolder::addName((ParamSetHolder *)a1, NextId, (ParamSetHolder *)a2, 11, v86, v87, v88, v89);
      ++a1[290];
      break;
    case 12:
      v90 = MemChunkAlloc(0x38uLL, 0);
      v91 = (uint64_t)v90;
      if (a4)
      {
        UserDeltaParamSet::UserDeltaParamSet(v91, (uint64_t)v92, a2, 12, *a1, NextId);
      }
      else
      {
        UserDeltaParamSet::UserDeltaParamSet(v90, a2, 12, *a1, NextId);
      }
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * NextId) = v91;
      ParamSetHolder::addName((ParamSetHolder *)a1, NextId, (ParamSetHolder *)a2, 12, v93, v94, v95, v96);
      ++a1[291];
      break;
    default:
      return NextId;
  }
  return NextId;
}

uint64_t ParamSetHolderMgr::getParamSetHolder(ParamSetHolderMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (a2 == -1)
    return 0;
  if (*((_DWORD *)this + 2) <= a2 || (result = *(_QWORD *)(*(_QWORD *)this + 8 * a2)) == 0)
  {
    v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 2796, (uint64_t)"recogctl/psholder", 1, (uint64_t)"%u", a7, a8, a2);
    return *(_QWORD *)(*(_QWORD *)this + 8 * v10);
  }
  return result;
}

uint64_t ParamSetHolder::getParamSet(ParamSetHolder *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (a2 == -1)
    return 0;
  result = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * a2);
  if (!result)
  {
    v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 2223, (uint64_t)"recogctl/psholder", 9, (uint64_t)"%u", a7, a8, a2);
    return *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v10);
  }
  return result;
}

DgnString *Hash<DgnString,DgnString,DgnStringScope,unsigned int>::add(uint64_t a1, char **a2, _DWORD *a3)
{
  unsigned int v6;
  char *v7;
  char v8;
  int v9;
  unsigned __int8 *v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  DgnString *result;
  _QWORD *v19;

  v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1)
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v6);
  v7 = *a2;
  if (!*((_DWORD *)a2 + 2))
    v7 = byte_209A5B212;
  v8 = *v7;
  if (*v7)
  {
    v9 = 0;
    v10 = (unsigned __int8 *)(v7 + 1);
    do
    {
      HIDWORD(v11) = v9;
      LODWORD(v11) = v9;
      v9 = (v11 >> 19) + v8;
      v12 = *v10++;
      v8 = v12;
    }
    while (v12);
  }
  else
  {
    v9 = 0;
  }
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
    v14 = (-1640531527 * v9) >> -(char)v13;
  else
    v14 = 0;
  v15 = *(_QWORD *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 32);
  if (!v16)
  {
    DgnPool::addChunk((DgnPool *)(a1 + 24));
    v16 = *(_QWORD *)(a1 + 32);
  }
  v17 = (_QWORD *)(v15 + 8 * v14);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v16;
  *(_DWORD *)(v16 + 8) = 0;
  result = DgnString::DgnString((DgnString *)(v16 + 16), (const DgnString *)a2);
  *(_DWORD *)(v16 + 32) = *a3;
  *(_DWORD *)(v16 + 8) = v9;
  ++*(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 20))
  {
    *(_QWORD *)v16 = *v17;
  }
  else
  {
    *(_QWORD *)v16 = 0;
    v19 = (_QWORD *)*v17;
    if (*v17)
    {
      do
      {
        v17 = v19;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
  }
  *v17 = v16;
  return result;
}

DynamicParamSet *DgnDelete<DynamicParamSet>(DynamicParamSet *result)
{
  _QWORD *v1;

  if (result)
  {
    DynamicParamSet::~DynamicParamSet(result);
    return (DynamicParamSet *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t ParamSetHolderMgr::startupParamSetHolderMgr(ParamSetHolderMgr *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];
  _QWORD v73[2];
  _QWORD v74[2];
  _BYTE v75[280];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v75);
  v74[0] = 0;
  v74[1] = 0;
  v73[0] = 0;
  v73[1] = 0;
  v72[0] = 0;
  v72[1] = 0;
  v71[0] = 0;
  v71[1] = 0;
  v70[0] = 0;
  v70[1] = 0;
  v69[0] = 0;
  v69[1] = 0;
  v68[0] = 0;
  v68[1] = 0;
  v67[0] = 0;
  v67[1] = 0;
  v66[0] = 0;
  v66[1] = 0;
  v65[0] = 0;
  v65[1] = 0;
  v64[0] = 0;
  v64[1] = 0;
  v63[0] = 0;
  v63[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v75, sADPT_Versions, (uint64_t)v74, v1, v2, v3, v4, v5);
  DgnTextFile::legalDgnTextFileVersions((int)v75, sCHPT_Versions, (uint64_t)v73, v6, v7, v8, v9, v10);
  DgnTextFile::legalDgnTextFileVersions((int)v75, sCOPT_Versions, (uint64_t)v72, v11, v12, v13, v14, v15);
  DgnTextFile::legalDgnTextFileVersions((int)v75, sLNPT_Versions, (uint64_t)v71, v16, v17, v18, v19, v20);
  DgnTextFile::legalDgnTextFileVersions((int)v75, sLPPT_Versions, (uint64_t)v70, v21, v22, v23, v24, v25);
  DgnTextFile::legalDgnTextFileVersions((int)v75, sPBPT_Versions, (uint64_t)v69, v26, v27, v28, v29, v30);
  DgnTextFile::legalDgnTextFileVersions((int)v75, sPSPT_Versions, (uint64_t)v68, v31, v32, v33, v34, v35);
  DgnTextFile::legalDgnTextFileVersions((int)v75, sPGPT_Versions, (uint64_t)v67, v36, v37, v38, v39, v40);
  DgnTextFile::legalDgnTextFileVersions((int)v75, sSAPT_Versions, (uint64_t)v66, v41, v42, v43, v44, v45);
  DgnTextFile::legalDgnTextFileVersions((int)v75, sSRPT_Versions, (uint64_t)v65, v46, v47, v48, v49, v50);
  DgnTextFile::legalDgnTextFileVersions((int)v75, sSCPT_Versions, (uint64_t)v64, v51, v52, v53, v54, v55);
  DgnTextFile::legalDgnTextFileVersions((int)v75, sUDPT_Versions, (uint64_t)v63, v56, v57, v58, v59, v60);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v63);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v64);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v65);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v66);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v67);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v68);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v69);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v70);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v71);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v72);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v73);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v74);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v75);
  v61 = MemChunkAlloc(0x40uLL, 0);
  *v61 = 0;
  v61[1] = 0;
  v61[2] = 0x10000001DLL;
  *((_DWORD *)v61 + 6) = 1;
  v61[5] = 0;
  v61[6] = 0;
  v61[4] = 0;
  *((_DWORD *)v61 + 14) = 0;
  ParamSetHolderMgr::smpParamSetHolderMgr = (uint64_t)v61;
  StartupAdapterParamSpecMgr();
  StartupChannelParamSpecMgr();
  StartupConfidenceParamSpecMgr();
  StartupLatticeNBestParamSpecMgr();
  StartupLatticePostProbParamSpecMgr();
  StartupPrefiltererBuildParamSpecMgr();
  StartupPrefiltererSearchParamSpecMgr();
  StartupPronGuessParamSpecMgr();
  StartupSausageParamSpecMgr();
  StartupSearchParamSpecMgr();
  StartupSearchCrossLayerParamSpecMgr();
  return StartupUserDeltaParamSpecMgr();
}

void sub_2097D0864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a10);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a12);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a14);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a16);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a18);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a20);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a22);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a24);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a26);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a28);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a30);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a32);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)&a34);
  _Unwind_Resume(a1);
}

void ParamSetHolderMgr::deleteParamSetHolder(ParamSetHolderMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t ParamSetHolder;
  EnvMgr **v11;
  unsigned int v12;
  unsigned __int16 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  ParamSetHolder = ParamSetHolderMgr::getParamSetHolder(this, a2, a3, a4, a5, a6, a7, a8);
  v11 = (EnvMgr **)ParamSetHolder;
  v12 = *(_DWORD *)(ParamSetHolder + 16);
  if (v12)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(ParamSetHolder + 8) + 8 * v13);
      if (v15)
        v14 += *(_DWORD *)(v15 + 36);
      ++v13;
    }
    while (v12 > v13);
    if (v14)
    {
      ParamSetHolder::getRefDetails((ParamSetHolder *)ParamSetHolder, (DgnString *)&v18);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 2820, (uint64_t)"recogctl/psholder", 2, (uint64_t)"%u %.500s", v16, v17, a2);
      DgnString::~DgnString((DgnString *)&v18);
    }
  }
  DgnDelete<ParamSetHolder>(v11);
  *(_QWORD *)(*(_QWORD *)this + 8 * a2) = 0;
  IdMgr<unsigned int>::recycleId((unsigned int *)this + 4, a2);
}

void sub_2097D09BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

EnvMgr **DgnDelete<ParamSetHolder>(EnvMgr **result)
{
  _QWORD *v1;

  if (result)
  {
    ParamSetHolder::~ParamSetHolder(result);
    return (EnvMgr **)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t ParamSetHolderMgr::loadParamSetHolder(ParamSetHolderMgr *this, char **a2)
{
  uint64_t NextId;
  unsigned int i;
  uint64_t *v6;
  EnvMgr **v7;

  NextId = IdMgr<unsigned int>::getNextId((_DWORD *)this + 4);
  for (i = *((_DWORD *)this + 2); i <= NextId; *((_DWORD *)this + 2) = i)
  {
    if (i == *((_DWORD *)this + 3))
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this, 1, 1);
      i = *((_DWORD *)this + 2);
    }
    *(_QWORD *)(*(_QWORD *)this + 8 * i++) = 0;
  }
  v6 = MemChunkAlloc(0x4B0uLL, 0);
  ParamSetHolder::ParamSetHolder((ParamSetHolder *)v6, NextId);
  ParamSetHolder::loadParamSetHolder(v7, a2);
  *(_QWORD *)(*(_QWORD *)this + 8 * NextId) = v6;
  return NextId;
}

void ParamSetHolderMgr::printSize(ParamSetHolderMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  ParamSetHolder *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 2862, (DgnString *)&v71);
  if (v72)
    v16 = (char *)v71;
  else
    v16 = byte_209A5B212;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, byte_209A5B212, a3, byte_209A5B212, v16);
  DgnString::~DgnString((DgnString *)&v71);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, byte_209A5B212);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 2864, (DgnString *)&v71);
  if (v72)
    v25 = (char *)v71;
  else
    v25 = byte_209A5B212;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v21, v22, v23, v24, (a3 + 1), byte_209A5B212, (a3 + 1), byte_209A5B212, v25);
  v67 = a5;
  v68 = a6;
  DgnString::~DgnString((DgnString *)&v71);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v26, v27, v28, v29, (a3 + 1), byte_209A5B212);
  v30 = *((unsigned int *)this + 2);
  if ((_DWORD)v30)
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    do
    {
      v35 = *(ParamSetHolder **)(*(_QWORD *)this + 8 * v31);
      if (v35)
      {
        v70 = 0;
        v71 = 0;
        v69 = 0;
        ParamSetHolder::printSize(v35, v31, (a3 + 2), &v71, &v70, &v69);
        v34 += v71;
        v33 += v70;
        v32 += v69;
        v30 = *((unsigned int *)this + 2);
      }
      ++v31;
    }
    while (v31 < v30);
  }
  else
  {
    v34 = 0;
    v33 = 0;
    v32 = 0;
    v30 = 0;
  }
  v36 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v36 = 16;
  v37 = v36 + v34;
  v38 = v36 + v33;
  v39 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 3;
  v40 = v37 + ((unint64_t)*((unsigned int *)this + 3) << v39);
  v41 = v38 + (v30 << v39);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 2864, (DgnString *)&v71);
  if (v72)
    v46 = (char *)v71;
  else
    v46 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), byte_209A5B212, (34 - a3), (34 - a3), v46, v40, v41, v32);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += v40;
  *v67 += v41;
  *v68 += v32;
  v47 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v47 = 16;
  v48 = *((_DWORD *)this + 10);
  v49 = *((_DWORD *)this + 11);
  v50 = v47 + 4 * (v48 - 1) + 4;
  if (v48 <= 0)
    v50 = v47;
  v51 = v49 >= v48;
  v52 = v50 + 4 * (v49 - v48);
  if (v51)
    v47 = v52;
  v53 = v47 + 24;
  v54 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 8, 1u) + 12;
  v55 = *((unsigned int *)this + 10);
  if (v55 <= *((_DWORD *)this + 11))
    v56 = 0;
  else
    v56 = 4 * v55;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 2866, (DgnString *)&v71);
  if (v72)
    v61 = (char *)v71;
  else
    v61 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), byte_209A5B212, (34 - a3), (34 - a3), v61, v53, v54, v56);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += v53;
  *v67 += v54;
  *v68 += v56;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/psholder.cpp", 2867, (DgnString *)&v71);
  if (v72)
    v66 = (char *)v71;
  else
    v66 = byte_209A5B212;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, a3, byte_209A5B212, (35 - a3), (35 - a3), v66, *a4, *v67, *v68);
  DgnString::~DgnString((DgnString *)&v71);
}

void sub_2097D0E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void *ParamSetHolderMgr::getLatticeNBestParamSet(ParamSetHolderMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  ParamSetHolder *ParamSetHolder;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *ParamSet;

  v8 = a3;
  ParamSetHolder = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamSetHolder
    && (ParamSet = (const void *)ParamSetHolder::getParamSet(ParamSetHolder, v8, v10, v11, v12, v13, v14, v15)) != 0)
  {
  }
  else
  {
    return 0;
  }
}

void *ParamSetHolderMgr::getPronGuessParamSet(ParamSetHolderMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  ParamSetHolder *ParamSetHolder;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *ParamSet;

  v8 = a3;
  ParamSetHolder = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamSetHolder
    && (ParamSet = (const void *)ParamSetHolder::getParamSet(ParamSetHolder, v8, v10, v11, v12, v13, v14, v15)) != 0)
  {
  }
  else
  {
    return 0;
  }
}

void *ParamSetHolderMgr::getSearchParamSet(ParamSetHolderMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  ParamSetHolder *ParamSetHolder;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *ParamSet;

  v8 = a3;
  ParamSetHolder = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamSetHolder
    && (ParamSet = (const void *)ParamSetHolder::getParamSet(ParamSetHolder, v8, v10, v11, v12, v13, v14, v15)) != 0)
  {
  }
  else
  {
    return 0;
  }
}

uint64_t upgrade0001(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setBoolParameter(a24, "SearchLatticeSilentWordsUseCoarticulation", 1);
}

_QWORD *upgrade0002(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  char BoolParameter;

  BoolParameter = DynamicParamSet::getBoolParameter(a3, "AdaptationConTransAccComputeExtraGlobalTransform");
  DynamicParamSet::setBoolParameter(a15, "AdaptationConTransAccComputeHierScorerTransforms", BoolParameter);
  return DynamicParamSet::removeParameter(a15, "AdaptationConTransAccComputeExtraGlobalTransform");
}

uint64_t upgrade0003(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setBoolParameter(a24, "SearchLatticeUseThresholding", 1);
}

uint64_t upgrade0004(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setEnumParameter(a24, "SearchThreadingType", "NoThreading", 0);
}

uint64_t upgrade0006(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  int BoolParameter;

  BoolParameter = DynamicParamSet::getBoolParameter(a4, "ChannelAdaptationMeansUseGlobalAccum");
  DynamicParamSet::removeParameter(a16, "ChannelAdaptationMeansUseGlobalAccum");
  return DynamicParamSet::setIntParameter(a16, "ChannelAdaptationMeansAccumSmoothingWindowMicroseconds", BoolParameter << 31 >> 31);
}

uint64_t upgrade0008(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setIntParameter(a24, "FstCorePerWordPenalty", 0);
}

_QWORD *upgrade0009(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  DynamicParamSet::removeParameter(a24, "SearchConstraintLatticeMaxSyntheticSilenceFrames");
  DynamicParamSet::removeParameter(a24, "SearchConstraintLatticeMergeNodeMaxFrames");
  DynamicParamSet::removeParameter(a24, "SearchConstraintLatticePreserveTimes");
  return DynamicParamSet::removeParameter(a24, "SearchGenerateConstraintLattice");
}

uint64_t upgrade0010(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setBoolParameter(a16, "UttDetResetFileChannelStateAfterSection", 0);
}

uint64_t upgrade0011(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setBoolParameter(a24, "SearchActiveNodePreserveMultipleHistories", 0);
}

uint64_t upgrade0012(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  DynamicParamSet::setBoolParameter(a24, "SearchActiveWordHasMergedLatticeLinkId", 0);
  return DynamicParamSet::setIntParameter(a24, "SearchLatticeTimeConstraintDistanceMaxFrames", -1);
}

_QWORD *upgrade0014(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  _QWORD *result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  result = DynamicParamSet::removeParameter(a24, "SearchActiveCountLimitScoreCompareWithBeam");
  if (*((_DWORD *)a1 + 2) <= 1u)
    return (_QWORD *)DgnString::stringPrintf(a1, " Removed parameter SearchActiveCountLimitScoreCompareWithBeam added in 1.22.100 fork.", v28, v29, v30);
  return result;
}

uint64_t upgrade0015(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  DynamicParamSet::setBoolParameter(a20, "PrefiltererBuildDisableHierarchicalScorer", 0);
  DynamicParamSet::setBoolParameter(a20, "PrefiltererBuildDisableGPUScorer", 0);
  DynamicParamSet::setBoolParameter(a24, "SearchDisableHierarchicalScorer", 0);
  return DynamicParamSet::setBoolParameter(a24, "SearchDisableGPUScorer", 0);
}

uint64_t upgrade0016(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  DynamicParamSet::setBoolParameter(a21, "PrefiltererPelScoreUseBestCompScore", 0);
  return DynamicParamSet::setBoolParameter(a24, "SearchPelScoreUseBestCompScore", 0);
}

void upgrade0017(DgnString *a1, char **a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  uint64_t IntParameter;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE v39[8];
  unsigned int v40;

  DynamicParamSet::removeParameter(a20, "PrefiltererBuildHierScorerCutoffList");
  DynamicParamSet::removeParameter(a24, "SearchHierScorerCutoffList");
  DynamicParamSet::setStringParameter(a20, "PrefiltererBuildHierScorerCutoffRatioList", byte_209A5B212, 0);
  DynamicParamSet::setStringParameter(a24, "SearchHierScorerCutoffRatioList", byte_209A5B212, 0);
  DgnString::DgnString((DgnString *)v39);
  IntParameter = DynamicParamSet::getIntParameter(a8, "PrefiltererBuildHierInactiveComponentScore");
  if ((int)IntParameter <= 299)
  {
    DynamicParamSet::setIntParameter(a20, "PrefiltererBuildHierInactiveComponentScore", 400);
    if (*((_DWORD *)a1 + 2) <= 1u)
    {
      if (v40 >= 2)
        DgnString::operator+=((DgnString *)v39, ";");
      if (*((_DWORD *)a2 + 2))
        v33 = *a2;
      else
        v33 = byte_209A5B212;
      DgnString::printfAppend((DgnString *)v39, " Increased parameter PrefiltererBuildHierInactiveComponentScore from %d to %d in param set '%.500s'", v30, v31, v32, IntParameter, 400, v33);
    }
  }
  v34 = DynamicParamSet::getIntParameter(a12, "SearchHierInactiveComponentScore");
  if ((int)v34 <= 299)
  {
    DynamicParamSet::setIntParameter(a24, "SearchHierInactiveComponentScore", 400);
    if (*((_DWORD *)a1 + 2) <= 1u)
    {
      if (v40 >= 2)
        DgnString::operator+=((DgnString *)v39, ";");
      if (*((_DWORD *)a2 + 2))
        v38 = *a2;
      else
        v38 = byte_209A5B212;
      DgnString::printfAppend((DgnString *)v39, " Increased parameter SearchHierInactiveComponentScore from %d to %d in param set '%.500s'", v35, v36, v37, v34, 400, v38);
    }
  }
  if (*((_DWORD *)a1 + 2) <= 1u)
    DgnString::operator=(a1, (DgnString *)v39);
  DgnString::~DgnString((DgnString *)v39);
}

void sub_2097D13E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t upgrade0018(DgnString *a1, char **a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  result = DynamicParamSet::getIntParameter(a8, "PrefiltererBuildHierInactiveComponentScore");
  if ((int)result <= 299)
  {
    v29 = result;
    result = DynamicParamSet::setIntParameter(a20, "PrefiltererBuildHierInactiveComponentScore", 400);
    if (*((_DWORD *)a1 + 2) <= 1u)
    {
      if (*((_DWORD *)a2 + 2))
        v33 = *a2;
      else
        v33 = byte_209A5B212;
      return DgnString::stringPrintf(a1, " Increased parameter PrefiltererBuildHierInactiveComponentScore from %d to %d in param set '%.500s'", v30, v31, v32, v29, 400, v33);
    }
  }
  return result;
}

uint64_t upgrade0019(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setBoolParameter(a24, "FstCoreUseDurationModel", 0);
}

uint64_t upgrade0020(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  const char *EnumParameter;
  char v27;

  EnumParameter = (const char *)DynamicParamSet::getEnumParameter(a12, "FstCoreSearchType");
  DynamicParamSet::removeParameter(a24, "FstCoreSearchType");
  v27 = strcmp(EnumParameter, "ViteAIX") != 0;
  return DynamicParamSet::setBoolParameter(a24, "FstCoreGenerateLattice", v27);
}

uint64_t upgrade0021(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  DynamicParamSet::setBoolParameter(a24, "FstCoreHashTokens", 0);
  return DynamicParamSet::setBoolParameter(a24, "FstCoreUseFwdBwdAlgorithm", 0);
}

uint64_t upgrade0022(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setBoolParameter(a24, "SearchLatticePreserveAlternateProns", 0);
}

uint64_t upgrade0023(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setBoolParameter(a24, "FstCoreLockPelScoreCache", 0);
}

void upgrade0024(DgnString *a1, char **a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  const char *EnumParameter;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  uint64_t IntParameter;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char *v76;
  _BYTE v77[8];
  unsigned int v78;

  DgnString::DgnString((DgnString *)v77);
  EnumParameter = (const char *)DynamicParamSet::getEnumParameter(a9, "PrefiltererAdjustThreshScoreType");
  v32 = strcmp(EnumParameter, "BestPel");
  if (!v32)
  {
    if (*((_DWORD *)a1 + 2) <= 1u)
    {
      if (v78 >= 2)
        DgnString::operator+=((DgnString *)v77, ";");
      if (*((_DWORD *)a2 + 2))
        v33 = *a2;
      else
        v33 = byte_209A5B212;
      DgnString::printfAppend((DgnString *)v77, " Removed parameter PrefiltererAdjustThreshScoreType='%.500s' in param set '%.500s'", v29, v30, v31, EnumParameter, v33);
    }
    IntParameter = DynamicParamSet::getIntParameter(a9, "PrefiltererMaxSeedScore");
    v35 = IntParameter;
    if ((IntParameter & 0x80000000) == 0)
    {
      v36 = IntParameter <= 0x3D3 ? (IntParameter + 20) : 1000;
      DynamicParamSet::setIntParameter(a21, "PrefiltererMaxSeedScore", v36);
      if (*((_DWORD *)a1 + 2) <= 1u)
      {
        if (v78 >= 2)
          DgnString::operator+=((DgnString *)v77, ";");
        if (*((_DWORD *)a2 + 2))
          v40 = *a2;
        else
          v40 = byte_209A5B212;
        DgnString::printfAppend((DgnString *)v77, " Changed parameter PrefiltererMaxSeedScore from %d to %d in param set '%.500s'", v37, v38, v39, v35, v36, v40);
      }
    }
    v41 = DynamicParamSet::getIntParameter(a9, "PrefiltererPelBackoffThreshScoreDecrement");
    v42 = v41;
    if ((v41 & 0x80000000) == 0)
    {
      v43 = (int)v41 <= 20 ? 20 : v41;
      v44 = (v43 - 20);
      DynamicParamSet::setIntParameter(a21, "PrefiltererPelBackoffThreshScoreDecrement", v43 - 20);
      if (*((_DWORD *)a1 + 2) <= 1u)
      {
        if (v78 >= 2)
          DgnString::operator+=((DgnString *)v77, ";");
        if (*((_DWORD *)a2 + 2))
          v48 = *a2;
        else
          v48 = byte_209A5B212;
        DgnString::printfAppend((DgnString *)v77, " Changed parameter PrefiltererPelBackoffThreshScoreDecrement from %d to %d in param set '%.500s'", v45, v46, v47, v42, v44, v48);
      }
    }
    v49 = DynamicParamSet::getIntParameter(a9, "PrefiltererReturnListThreshScoreDecrement");
    if ((int)v49 >= 100)
    {
      DynamicParamSet::setIntParameter(a21, "PrefiltererReturnListThreshScoreDecrement", v49 - 20);
      if (*((_DWORD *)a1 + 2) <= 1u)
      {
        if (v78 >= 2)
          DgnString::operator+=((DgnString *)v77, ";");
        if (*((_DWORD *)a2 + 2))
          v53 = *a2;
        else
          v53 = byte_209A5B212;
        DgnString::printfAppend((DgnString *)v77, " Changed parameter PrefiltererReturnListThreshScoreDecrement from %d to %d in param set '%.500s'", v50, v51, v52, v49, (v49 - 20), v53);
      }
    }
  }
  v54 = (const char *)DynamicParamSet::getEnumParameter(a12, "SearchAdjustThreshScoreType");
  if (!strcmp(v54, "BestPelAndSuccessor") || !strcmp(v54, "BestPel"))
  {
    if (*((_DWORD *)a1 + 2) <= 1u)
    {
      if (v78 >= 2)
        DgnString::operator+=((DgnString *)v77, ";");
      if (*((_DWORD *)a2 + 2))
        v59 = *a2;
      else
        v59 = byte_209A5B212;
      DgnString::printfAppend((DgnString *)v77, " Removed parameter SearchAdjustThreshScoreType='%.500s' in param set '%.500s'", v55, v56, v57, v54, v59);
    }
    v60 = DynamicParamSet::getIntParameter(a12, "SearchWordEndAgainstBestWordEndThreshScoreDecrement");
    if ((int)v60 <= 99)
      v61 = 190;
    else
      v61 = 210;
    DynamicParamSet::setIntParameter(a24, "SearchWordEndAgainstBestWordEndThreshScoreDecrement", v61);
    if (*((_DWORD *)a1 + 2) <= 1u)
    {
      if (v78 >= 2)
        DgnString::operator+=((DgnString *)v77, ";");
      if (*((_DWORD *)a2 + 2))
        v65 = *a2;
      else
        v65 = byte_209A5B212;
      DgnString::printfAppend((DgnString *)v77, " Changed parameter SearchWordEndAgainstBestWordEndThreshScoreDecrement from %d to %d in param set '%.500s'", v62, v63, v64, v60, v61, v65);
    }
    v66 = DynamicParamSet::getIntParameter(a12, "SearchWordEndThreshScoreDecrement");
    DynamicParamSet::setIntParameter(a24, "SearchWordEndThreshScoreDecrement", 120);
    if (*((_DWORD *)a1 + 2) <= 1u)
    {
      if (v78 >= 2)
        DgnString::operator+=((DgnString *)v77, ";");
      if (*((_DWORD *)a2 + 2))
        v70 = *a2;
      else
        v70 = byte_209A5B212;
      DgnString::printfAppend((DgnString *)v77, " Changed parameter SearchWordEndThreshScoreDecrement from %d to %d in param set '%.500s'", v67, v68, v69, v66, 120, v70);
    }
    v58 = 1;
  }
  else
  {
    v58 = 0;
  }
  DynamicParamSet::removeParameter(a21, "PrefiltererAdjustThreshScoreType");
  DynamicParamSet::removeParameter(a24, "SearchAdjustThreshScoreType");
  v71 = DynamicParamSet::getIntParameter(a12, "SearchWordEndAgainstPrevBestNodeThreshScore");
  DynamicParamSet::removeParameter(a24, "SearchWordEndAgainstPrevBestNodeThreshScore");
  v75 = v58 ^ 1;
  if (!v32)
    v75 = 0;
  if ((v75 & 1) == 0 && *((_DWORD *)a1 + 2) <= 1u)
  {
    if (v78 >= 2)
      DgnString::operator+=((DgnString *)v77, ";");
    if (*((_DWORD *)a2 + 2))
      v76 = *a2;
    else
      v76 = byte_209A5B212;
    DgnString::printfAppend((DgnString *)v77, " Removed parameter SearchWordEndAgainstPrevBestNodeThreshScore=%d in param set '%.500s'", v72, v73, v74, v71, v76);
  }
  if (*((_DWORD *)a1 + 2) <= 1u)
    DgnString::operator=(a1, (DgnString *)v77);
  DgnString::~DgnString((DgnString *)v77);
}

void sub_2097D1A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t upgrade0025(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  DynamicParamSet::setBoolParameter(a21, "PrefiltererFmpeWindowTruncateUnavailableFrames", 1);
  return DynamicParamSet::setBoolParameter(a24, "SearchFmpeWindowTruncateUnavailableFrames", 1);
}

uint64_t upgrade0026(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setIntParameter(a24, "FstCoreHashPropagateBestTokensFirst", 0);
}

uint64_t upgrade0027(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setBoolParameter(a15, "AdaptationConTransAccEconomizeCofactorComputation", 0);
}

uint64_t upgrade0028(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setBoolParameter(a24, "SearchLatticeAllowZeroDurationFinalSilence", 0);
}

uint64_t upgrade0029(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setIntParameter(a15, "AdaptationConTransAccRidgeRegularizationFactor", 0);
}

uint64_t upgrade0030(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setIntParameter(a15, "AdaptationConTransAccDecomposedAccumCutoffPercent", 0);
}

uint64_t upgrade0031(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  if (*((_DWORD *)a1 + 2) <= 1u)
    DgnString::stringPrintf(a1, " Added ParamSetType PARAMSETTYPE_USERDELTA (%d).", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, *((unsigned int *)a26 + 6));
  DynamicParamSet::setEnumParameter(a26, "UserDeltaTyingType", "SingleGenone", 0);
  DynamicParamSet::setIntParameter(a26, "UserDeltaRunLengthMin", 1);
  DynamicParamSet::setIntParameter(a26, "UserDeltaRunLengthRange", 126);
  return DynamicParamSet::setIntParameter(a26, "UserDeltaInclusionMinDivergence", 0);
}

void upgrade0032(DgnString *a1, char **a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _BYTE v36[8];
  unsigned int v37;

  DynamicParamSet::removeParameter(a21, "PrefiltererFmpeWindowTruncateUnavailableFrames");
  DynamicParamSet::removeParameter(a24, "SearchFmpeWindowTruncateUnavailableFrames");
  DgnString::DgnString((DgnString *)v36);
  if (DynamicParamSet::getBoolParameter(a9, "PrefiltererFmpeWindowTruncateUnavailableFrames")
    && *((_DWORD *)a1 + 2) <= 1u)
  {
    if (v37 >= 2)
      DgnString::operator+=((DgnString *)v36, ";");
    if (*((_DWORD *)a2 + 2))
      v31 = *a2;
    else
      v31 = byte_209A5B212;
    DgnString::printfAppend((DgnString *)v36, " Changed behavior away from existing True setting of PrefiltererFmpeWindowTruncateUnavailableFrames in param set '%.500s'", v28, v29, v30, v31);
  }
  if (DynamicParamSet::getBoolParameter(a12, "SearchFmpeWindowTruncateUnavailableFrames")
    && *((_DWORD *)a1 + 2) <= 1u)
  {
    if (v37 >= 2)
      DgnString::operator+=((DgnString *)v36, ";");
    if (*((_DWORD *)a2 + 2))
      v35 = *a2;
    else
      v35 = byte_209A5B212;
    DgnString::printfAppend((DgnString *)v36, " Changed behavior away from existing True setting of SearchFmpeWindowTruncateUnavailableFrames in param set '%.500s'", v32, v33, v34, v35);
  }
  if (*((_DWORD *)a1 + 2) <= 1u)
    DgnString::operator=(a1, (DgnString *)v36);
  DgnString::~DgnString((DgnString *)v36);
}

void sub_2097D1D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t upgrade0033(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  DynamicParamSet::setBoolParameter(a16, "ChannelMaxNormEnergyUseOnline", 0);
  DynamicParamSet::setIntParameter(a16, "ChannelOnlineMaxNormEnergyInitialWindowFrames", 0);
  DynamicParamSet::setIntParameter(a16, "ChannelOnlineMaxNormEnergyGeneralRampFactor", 1000);
  return DynamicParamSet::setIntParameter(a16, "ChannelOnlineMaxNormEnergyGeneralDecayValue", 0);
}

uint64_t upgrade0034(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  int IntParameter;

  IntParameter = DynamicParamSet::getIntParameter(a12, "SearchLatticeLinksPerSecondLimit");
  DynamicParamSet::setIntParameter(a24, "SearchLatticePruneLinksPerSecondLimit", IntParameter);
  DynamicParamSet::removeParameter(a24, "SearchLatticeLinksPerSecondLimit");
  DynamicParamSet::setIntParameter(a24, "SearchLatticeAbortOnNumLinks", 0);
  DynamicParamSet::setIntParameter(a24, "SearchLatticeAbortOnNumNodes", 0);
  DynamicParamSet::setIntParameter(a24, "SearchLatticeAbortOnScaledAverageLinksPerFrame", 0);
  return DynamicParamSet::setIntParameter(a24, "SearchLatticeAbortOnScaledAverageNodesPerFrame", 0);
}

uint64_t upgrade0035(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setIntParameter(a23, "SausageGenerationAbortOnNumLatticeLinks", 0);
}

uint64_t upgrade0036(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setEnumParameter(a20, "PrefiltererBuildContextType", "L1", 0);
}

uint64_t upgrade0037(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  const char *v26;
  double DoubleParameter;
  double v28;

  if (DynamicParamSet::getBoolParameter(a12, "FstCoreGenerateLattice"))
    v26 = "Immediate";
  else
    v26 = "None";
  DynamicParamSet::setEnumParameter(a24, "FstCoreLatticeGeneration", v26, 0);
  DynamicParamSet::removeParameter(a24, "FstCoreGenerateLattice");
  DoubleParameter = DynamicParamSet::getDoubleParameter(a12, "FstCoreBeam");
  DynamicParamSet::setDoubleParameter(a24, "FstCoreLatticeBeam", DoubleParameter);
  v28 = DoubleParameter * -0.5;
  if (DoubleParameter * -0.5 < -10000.0)
    v28 = -10000.0;
  return DynamicParamSet::setDoubleParameter(a24, "FstCoreLateLatticeArcFingerSuckPenalty", v28);
}

uint64_t upgrade0038(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setIntParameter(a24, "FstCoreCollectTracesPeriod", 100);
}

_QWORD *upgrade0039(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  DynamicParamSet::removeParameter(a24, "FstCorePelScoreScale");
  return DynamicParamSet::removeParameter(a24, "FstCoreAttilaLatticeOutputFileNamePrefix");
}

uint64_t upgrade0040(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setBoolParameter(a23, "SausageGenerationNewAlgorithm", 0);
}

uint64_t upgrade0041(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setBoolParameter(a24, "SearchLatticeComputeOnlyBestTimes", 0);
}

uint64_t upgrade0042(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setIntParameter(a24, "FstCoreBackoffThreshScore", 5000);
}

_QWORD *upgrade0043(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::removeParameter(a24, "FstCorePerWordPenalty");
}

uint64_t upgrade0044(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  double DoubleParameter;

  DoubleParameter = DynamicParamSet::getDoubleParameter(a12, "FstCoreLateLatticeArcFingerSuckPenalty");
  if (DoubleParameter > -1.0)
    DoubleParameter = -1.0;
  return DynamicParamSet::setDoubleParameter(a24, "FstCoreLateLatticeArcFingerSuckPenalty", DoubleParameter);
}

uint64_t upgrade0045(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setIntParameter(a24, "SearchLatticeTimeConstraintSeedThreshScore", -1);
}

uint64_t upgrade0046(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setEnumParameter(a20, "PrefiltererBuildWordBoundaryType", "None", 0);
}

uint64_t upgrade0047(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setBoolParameter(a24, "SearchPartialExtendWithPrefilterer", 0);
}

uint64_t upgrade0048(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  const char *v26;

  DynamicParamSet::removeParameter(a24, "SearchPartialExtendWithPrefilterer");
  if (DynamicParamSet::getBoolParameter(a12, "SearchPartialExtendWithPrefilterer"))
    v26 = "Complete";
  else
    v26 = "None";
  return DynamicParamSet::setEnumParameter(a24, "SearchPartialIncludePrefiltererResult", v26, 0);
}

_QWORD *upgrade0049(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::removeParameter(a24, "SearchUsesFst");
}

uint64_t upgrade0050(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  return DynamicParamSet::setIntParameter(a15, "AdaptationConTransAccSilenceToSpeechWeight", 0);
}

uint64_t upgrade0051(DgnString *a1, const DgnString *a2, const DynamicParamSet *a3, const DynamicParamSet *a4, const DynamicParamSet *a5, const DynamicParamSet *a6, const DynamicParamSet *a7, const DynamicParamSet *a8, const DynamicParamSet *a9, const DynamicParamSet *a10, const DynamicParamSet *a11, const DynamicParamSet *a12, const DynamicParamSet *a13, const DynamicParamSet *a14, DynamicParamSet *a15, DynamicParamSet *a16, DynamicParamSet *a17, DynamicParamSet *a18, DynamicParamSet *a19, DynamicParamSet *a20,DynamicParamSet *a21,DynamicParamSet *a22,DynamicParamSet *a23,DynamicParamSet *a24,DynamicParamSet *a25,DynamicParamSet *a26)
{
  DynamicParamSet::setBoolParameter(a21, "PrefiltererReturnDistanceAdjustDuration", 0);
  DynamicParamSet::setIntParameter(a24, "SearchPartialIncompleteMaxWords", 0);
  DynamicParamSet::setIntParameter(a24, "SearchPartialIncompleteMinListFrames", 1);
  DynamicParamSet::setIntParameter(a24, "SearchPartialIncompleteMinWordFrames", 1);
  DynamicParamSet::setIntParameter(a24, "SearchPartialCompleteMinWordFrames", 1);
  return DynamicParamSet::setIntParameter(a24, "SearchPartialRegularMinWordFrames", 1);
}

uint64_t DgnPrimArray<unsigned int>::searchLastOrBefore(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  int v5;
  uint64_t v6;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;

  if (!a3)
    return 0xFFFFFFFFLL;
  v5 = a2;
  LODWORD(v6) = a2;
  if (a3 > (int)a2)
  {
    v10 = a3 - 1;
    v11 = a2;
    do
    {
      v12 = v10 + v11;
      if (v10 + (int)v11 < 0 != __OFADD__(v10, (_DWORD)v11))
        ++v12;
      v13 = v12 >> 1;
      if ((_DWORD)v11 == v10 - 1)
        v6 = v10;
      else
        v6 = v13;
      v14 = a5(*a1 + 4 * v6, a4);
      if (v14)
      {
        if (v14 < 0)
        {
          v6 = (v6 + 1);
        }
        else
        {
          v10 = v6 - 1;
          v6 = v11;
        }
      }
      else if (v10 == (_DWORD)v11)
      {
        return v6;
      }
      v11 = v6;
    }
    while ((int)v6 <= v10);
  }
  if ((_DWORD)v6 == v5)
    return 0xFFFFFFFFLL;
  else
    return (v6 - 1);
}

_QWORD *DgnIOwnArray<DgnPrimArray<unsigned int> *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<DgnPrimArray<unsigned int>>(*(_QWORD *)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray(uint64_t a1)
{
  DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::wipeOtherArrays(a1);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a1 + 40);
  DgnIOwnArray<DgnPrimArray<unsigned int> *>::releaseAll(a1 + 24);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a1 + 8);
  return a1;
}

uint64_t DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::wipeOtherArrays(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  if (*(_DWORD *)(result + 32))
  {
    v1 = result;
    v2 = 0;
    do
    {
      result = DgnDelete<DgnPrimArray<unsigned int>>(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v2));
      *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v2++) = 0;
    }
    while (v2 < *(unsigned int *)(v1 + 32));
  }
  return result;
}

_QWORD *DgnIOwnArray<ParamSetBase *>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnIOwnArray<ParamSetBase *>::destructAt(a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnIOwnArray<ParamSetBase *>::destructAt(uint64_t result, int a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (a3 + a2 > a2)
  {
    v3 = (uint64_t *)result;
    v4 = a2;
    v5 = a3 + a2 - 1;
    do
    {
      v6 = *v3;
      v7 = *(_QWORD **)(*v3 + 8 * v5);
      if (v7)
      {
        (*(void (**)(_QWORD))*v7)(*(_QWORD *)(*v3 + 8 * v5));
        result = MemChunkFree(v7, 0);
        v6 = *v3;
      }
      *(_QWORD *)(v6 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

uint64_t DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sizeObject<unsigned int>(a1 + 8, a2);
  v5 = sizeObject<DgnPrimArray<unsigned int> *>(a1 + 24, a2);
  v6 = sizeObject<unsigned short>(a1 + 40, a2);
  v7 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 8;
  if (a2 == 3)
    v7 = 0;
  return ((a2 != 3) | (2 * (a2 != 3))) + 2 * (a2 != 3) + v4 + v5 + v6 + v7 + 2 * v7;
}

uint64_t sizeObject<DgnPrimArray<unsigned int> *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject<unsigned int>(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t Hash<DgnString,DgnString,DgnStringScope,unsigned int>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BYTE v11[24];

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218B58;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  DgnString::DgnString((DgnString *)v11);
  v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  v8 = sizeObject(v11);
  if (v7)
    v9 = 4;
  else
    v9 = 8;
  *(_DWORD *)(a1 + 24) = 48;
  *(_DWORD *)(a1 + 28) = v8 + v9 + 8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  DgnString::~DgnString((DgnString *)v11);
  return a1;
}

void sub_2097D26BC(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;
  DgnString *v3;

  DgnString::~DgnString(v3);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<DgnString,DgnString,DgnStringScope,unsigned int>::~Hash(uint64_t a1)
{
  Hash<DgnString,DgnString,DgnStringScope,unsigned int>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<DgnString,DgnString,DgnStringScope,unsigned int>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218B58;
  if (*(_DWORD *)(a1 + 8))
    Hash<DgnString,DgnString,DgnStringScope,unsigned int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

void Hash<DgnString,DgnString,DgnStringScope,unsigned int>::removeAll(uint64_t a1)
{
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void (*v7)(_QWORD *);
  void (*v8)(_QWORD *);

  v2 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(a1 + 80);
      v5 = *(_QWORD **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = (_QWORD *)*v5;
          v7 = *(void (**)(_QWORD *))(a1 + 96);
          if (v7)
            v7(v5 + 2);
          v8 = *(void (**)(_QWORD *))(a1 + 104);
          if (v8)
            v8(v5 + 4);
          DgnString::~DgnString((DgnString *)(v5 + 2));
          *v5 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(a1 + 80);
        v2 = *(unsigned int *)(a1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t *Hash<DgnString,DgnString,DgnStringScope,unsigned int>::findBucket(uint64_t a1, uint64_t a2)
{
  char *v2;
  char v3;
  int v4;
  unsigned __int8 *v5;
  unint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  const char *v13;

  if (*(_DWORD *)(a2 + 8))
    v2 = *(char **)a2;
  else
    v2 = byte_209A5B212;
  v3 = *v2;
  if (*v2)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(v2 + 1);
    do
    {
      HIDWORD(v6) = v4;
      LODWORD(v6) = v4;
      v4 = (v6 >> 19) + v3;
      v7 = *v5++;
      v3 = v7;
    }
    while (v7);
  }
  else
  {
    v4 = 0;
  }
  v8 = *(_DWORD *)(a1 + 16);
  if (v8)
    v9 = (-1640531527 * v4) >> -(char)v8;
  else
    v9 = 0;
  v10 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 8 * v9);
  v11 = *v10;
  if (*v10)
  {
    do
    {
      v12 = (uint64_t *)v11;
      if (*(_DWORD *)(v11 + 8) == v4)
      {
        v13 = *(_DWORD *)(v11 + 24) ? *(const char **)(v11 + 16) : byte_209A5B212;
        if (!strcmp(v13, v2))
          break;
      }
      v11 = *v12;
      v10 = v12;
    }
    while (*v12);
  }
  return v10;
}

void DynamicParamSet::~DynamicParamSet(DynamicParamSet *this)
{
  DgnArray<ParamValue>::releaseAll((uint64_t)this + 32);
  DgnString::~DgnString(this);
}

_QWORD *DgnArray<ParamValue>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 40 * v2 - 40;
    do
    {
      ParamValue::~ParamValue((ParamValue *)(*(_QWORD *)a1 + v3));
      v3 -= 40;
    }
    while (v3 != -40);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t StartupChannelParamSpecMgr(void)
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;

  v64 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v64, (uint64_t)"ChannelEnablePitchTracking", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelEnablePitchTrackingBoolHistory);
  v70 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v70, (uint64_t)"ChannelWaveInputClippingThreshold", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelWaveInputClippingThresholdIntHistory);
  v68 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v68, (uint64_t)"ChannelWaveInputEnableSpectralWarping", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelWaveInputEnableSpectralWarpingBoolHistory);
  v71 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v71, (uint64_t)"ChannelWaveStereoInputSelectSource", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelWaveStereoInputSelectSourceIntHistory);
  v69 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v69, (uint64_t)"ChannelMaxNormEnergyUseOnline", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelMaxNormEnergyUseOnlineBoolHistory);
  v67 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v67, (uint64_t)"ChannelOnlineMaxNormEnergyInitialWindowFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelOnlineMaxNormEnergyInitialWindowFramesIntHistory);
  v66 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v66, (uint64_t)"ChannelOnlineMaxNormEnergyGeneralRampFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelOnlineMaxNormEnergyGeneralRampFactorIntHistory);
  v65 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v65, (uint64_t)"ChannelOnlineMaxNormEnergyGeneralDecayValue", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelOnlineMaxNormEnergyGeneralDecayValueIntHistory);
  v63 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v63, (uint64_t)"ChannelWavePacketLossDetectionPacketSize", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelWavePacketLossDetectionPacketSizeIntHistory);
  v62 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v62, (uint64_t)"ChannelWavePacketLossDetectionSlopeThresh", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelWavePacketLossDetectionSlopeThreshIntHistory);
  v60 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v60, (uint64_t)"ChannelWavePacketLossDetectionSlopeCountPercent", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelWavePacketLossDetectionSlopeCountPercentIntHistory);
  v59 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v59, (uint64_t)"ChannelWavePacketLossDetectionWindowSize", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelWavePacketLossDetectionWindowSizeIntHistory);
  v57 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v57, (uint64_t)"ChannelAdaptationDelayApplyTillUttEnd", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationDelayApplyTillUttEndBoolHistory);
  v58 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v58, (uint64_t)"ChannelAdaptationMeansRelevance", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationMeansRelevanceIntHistory);
  v56 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v56, (uint64_t)"ChannelAdaptationMeansAccumSmoothingWindowMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationMeansAccumSmoothingWindowMicrosecondsIntHistory);
  v53 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v53, (uint64_t)"ChannelAdaptationMeansAdaptFastInitially", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationMeansAdaptFastInitiallyBoolHistory);
  v54 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v54, (uint64_t)"ChannelAdaptationMeansDelayApplyInitially", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationMeansDelayApplyInitiallyBoolHistory);
  v52 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v52, (uint64_t)"ChannelAdaptationMeansInitialWindowMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationMeansInitialWindowMicrosecondsIntHistory);
  v55 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v55, (uint64_t)"ChannelAdaptationMeansWindowMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationMeansWindowMicrosecondsIntHistory);
  v51 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v51, (uint64_t)"ChannelAdaptationMeansRelevanceScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationMeansRelevanceScaleDoubleHistory);
  v61 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v61, (uint64_t)"ChannelAdaptationMeansUseGlobalAccum", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationMeansUseGlobalAccumBoolHistory);
  v49 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v49, (uint64_t)"ChannelAdaptationMeansReestimationType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationMeansReestimationTypeEnumHistory);
  v50 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v50, (uint64_t)"ChannelAdaptationMeansUseSilenceTracker", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationMeansUseSilenceTrackerBoolHistory);
  v48 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v48, (uint64_t)"ChannelAdaptationMeansC0UseSilenceTracker", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationMeansC0UseSilenceTrackerBoolHistory);
  v47 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v47, (uint64_t)"ChannelAdaptationMeansApplySynchronous", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationMeansApplySynchronousBoolHistory);
  v44 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v44, (uint64_t)"ChannelAdaptationCDFRelevance", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationCDFRelevanceIntHistory);
  v38 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v38, (uint64_t)"ChannelAdaptationCDFAdaptFastInitially", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationCDFAdaptFastInitiallyBoolHistory);
  v40 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v40, (uint64_t)"ChannelAdaptationCDFWindowMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationCDFWindowMicrosecondsIntHistory);
  v35 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v35, (uint64_t)"ChannelAdaptationCDFUseSilenceTracker", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationCDFUseSilenceTrackerBoolHistory);
  v36 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v36, (uint64_t)"ChannelAdaptationInterpolatedCDFMaxPercentMassPerBin", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationInterpolatedCDFMaxPercentMassPerBinIntHistory);
  v46 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v46, (uint64_t)"ChannelAdaptationVarianceRelevance", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationVarianceRelevanceIntHistory);
  v43 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v43, (uint64_t)"ChannelAdaptationVarianceAdaptFastInitially", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationVarianceAdaptFastInitiallyBoolHistory);
  v45 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v45, (uint64_t)"ChannelAdaptationVarianceWindowMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationVarianceWindowMicrosecondsIntHistory);
  v39 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v39, (uint64_t)"ChannelAdaptationVarianceUseSilenceTracker", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelAdaptationVarianceUseSilenceTrackerBoolHistory);
  v42 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v42, (uint64_t)"ChannelSilenceTrackerInitialLevel", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSilenceTrackerInitialLevelIntHistory);
  v37 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v37, (uint64_t)"ChannelSilenceTrackerBackgroundThresh", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSilenceTrackerBackgroundThreshIntHistory);
  v41 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v41, (uint64_t)"ChannelSilenceTrackerSpeechThresh", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSilenceTrackerSpeechThreshIntHistory);
  v32 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v32, (uint64_t)"ChannelSilenceTrackerIncrementPerSecond", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSilenceTrackerIncrementPerSecondIntHistory);
  v29 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v29, (uint64_t)"ChannelSilenceTrackerDecrementPerSecond", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSilenceTrackerDecrementPerSecondIntHistory);
  v30 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v30, (uint64_t)"ChannelSilenceTrackerOutlierWindowMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSilenceTrackerOutlierWindowMicrosecondsIntHistory);
  v26 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v26, (uint64_t)"ChannelSilenceTrackerOutlierMinTriggerPercent", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSilenceTrackerOutlierMinTriggerPercentIntHistory);
  v28 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v28, (uint64_t)"ChannelSilenceTrackerRelevance", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSilenceTrackerRelevanceIntHistory);
  v34 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v34, (uint64_t)"ChannelThreadingType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelThreadingTypeEnumHistory);
  v25 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v25, (uint64_t)"ChannelSpectralSubtractionDelayMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSpectralSubtractionDelayMicrosecondsIntHistory);
  v27 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v27, (uint64_t)"ChannelSpectralSubtractionTargetSNR", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSpectralSubtractionTargetSNRDoubleHistory);
  v23 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v23, (uint64_t)"ChannelSpectralSubtractionDisableAtTargetSNR", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSpectralSubtractionDisableAtTargetSNRBoolHistory);
  v22 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v22, (uint64_t)"ChannelSpectralSubtractionInitialWindowMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSpectralSubtractionInitialWindowMicrosecondsIntHistory);
  v16 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v16, (uint64_t)"ChannelSpectralSubtractionDecayRate", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSpectralSubtractionDecayRateDoubleHistory);
  v19 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v19, (uint64_t)"ChannelSpectralSubtractionMinSNRMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSpectralSubtractionMinSNRMicrosecondsIntHistory);
  v14 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v14, (uint64_t)"ChannelSpectralSubtractionMaxNoiseScaleChange", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSpectralSubtractionMaxNoiseScaleChangeDoubleHistory);
  v13 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v13, (uint64_t)"ChannelSpectralSubtractionStartDecimationMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sChannelSpectralSubtractionStartDecimationMicrosecondsIntHistory);
  v24 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v24, (uint64_t)"UttDetBackgroundFloorIncreasePerSecond", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetBackgroundFloorIncreasePerSecondIntHistory);
  v31 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v31, (uint64_t)"UttDetResetFileChannelStateAfterSection", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetResetFileChannelStateAfterSectionBoolHistory);
  v33 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v33, (uint64_t)"UttDetSpeechThreshOffsetPercent", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetSpeechThreshOffsetPercentIntHistory);
  v21 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v21, (uint64_t)"UttDetBackgroundThreshPercent", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetBackgroundThreshPercentIntHistory);
  v20 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v20, (uint64_t)"UttDetBeginUttWindowMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetBeginUttWindowMicrosecondsIntHistory);
  v17 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v17, (uint64_t)"UttDetBeginUttMinTriggerPercent", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetBeginUttMinTriggerPercentIntHistory);
  v18 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v18, (uint64_t)"UttDetEndUttWindowMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetEndUttWindowMicrosecondsIntHistory);
  v12 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v12, (uint64_t)"UttDetEndUttMinTriggerPercent", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetEndUttMinTriggerPercentIntHistory);
  v15 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v15, (uint64_t)"UttDetInitializeWindowMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetInitializeWindowMicrosecondsIntHistory);
  v10 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v10, (uint64_t)"UttDetInitialBackgroundLevelMin", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetInitialBackgroundLevelMinIntHistory);
  v0 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v0, (uint64_t)"UttDetInitialBackgroundLevelRange", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetInitialBackgroundLevelRangeIntHistory);
  v11 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v11, (uint64_t)"UttDetSpeechOffsetMin", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetSpeechOffsetMinIntHistory);
  v1 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v1, (uint64_t)"UttDetSpeechOffsetRange", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetSpeechOffsetRangeIntHistory);
  v2 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v2, (uint64_t)"UttDetSpeechUttSecondsMin", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetSpeechUttSecondsMinIntHistory);
  v3 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v3, (uint64_t)"UttDetSpeechUttSecondsRange", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetSpeechUttSecondsRangeIntHistory);
  v4 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v4, (uint64_t)"UttDetMaxNonSpeechUttSeconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetMaxNonSpeechUttSecondsIntHistory);
  v5 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v5, (uint64_t)"UttDetLimitFrameEnergy", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetLimitFrameEnergyBoolHistory);
  v6 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v6, (uint64_t)"UttDetBackgroundFloorDecreasePerSecond", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetBackgroundFloorDecreasePerSecondIntHistory);
  v7 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v7, (uint64_t)"UttDetBackgroundFloorOutlierWindowMicroseconds", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetBackgroundFloorOutlierWindowMicrosecondsIntHistory);
  v8 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v8, (uint64_t)"UttDetBackgroundFloorOutlierMinTriggerPercent", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sUttDetBackgroundFloorOutlierMinTriggerPercentIntHistory);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v38);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v44);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v35);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v40);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v57);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v36);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v56);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v53);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v47);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v48);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v54);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v52);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v49);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v58);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v51);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v50);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v55);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v43);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v46);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v39);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v45);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v64);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v37);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v29);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v32);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v42);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v26);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v30);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v41);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v28);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v16);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v25);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v23);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v22);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v14);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v19);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v13);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v27);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v34);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v70);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v68);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v63);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v60);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v62);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v59);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v71);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v69);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v67);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v66);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v65);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v6);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v24);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v8);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v7);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v21);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v17);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v20);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v12);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v18);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v10);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v15);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v5);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v4);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v31);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v11);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v33);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v2);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v3);
  ParamSpecMgr::addParam(qword_253DF2830, (ParamSpec *)v61);
  return ParamSpecMgr::sortParams((ParamSpecMgr *)qword_253DF2830);
}

_DWORD *ChannelParamSet::ChannelParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(_QWORD *)a1 = &off_24C214E60;
  ChannelParamSet::setDefaults((ChannelParamSet *)a1, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

void sub_2097D39BC(_Unwind_Exception *a1)
{
  DgnString *v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t ChannelParamSet::ChannelParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v11 = (_OWORD *)(a1 + 260);
  v12 = (_OWORD *)(a2 + 260);
  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)a1 = &off_24C214E60;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_OWORD *)(a1 + 124) = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  v13 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v13;
  v14 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v14;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_OWORD *)(a1 + 220) = *(_OWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_OWORD *)(a1 + 244) = *(_OWORD *)(a2 + 244);
  *v11 = *v12;
  v11[1] = v12[1];
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_OWORD *)((char *)v11 + 56) = *(_OWORD *)((char *)v12 + 56);
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a2 + 332);
  return a1;
}

uint64_t ChannelParamSet::setDefaults(ChannelParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t result;

  *((_BYTE *)this + 40) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 1, 0, 0, a5, a6, a7, a8);
  *((_DWORD *)this + 11) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 2, 0, 0, v9, v10, v11, v12);
  *((_BYTE *)this + 48) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 3, 0, 0, v13, v14, v15, v16);
  *((_DWORD *)this + 13) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 4, 0, 0, v17, v18, v19, v20);
  *((_BYTE *)this + 56) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 5, 0, 0, v21, v22, v23, v24);
  *((_DWORD *)this + 15) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 6, 0, 0, v25, v26, v27, v28);
  *((_DWORD *)this + 16) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 7, 0, 0, v29, v30, v31, v32);
  *((_BYTE *)this + 68) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 8, 0, 0, v33, v34, v35, v36);
  *((_BYTE *)this + 69) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 9, 0, 0, v37, v38, v39, v40);
  *((_BYTE *)this + 70) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 10, 0, 0, v41, v42, v43, v44);
  *((_BYTE *)this + 71) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 11, 0, 0, v45, v46, v47, v48);
  *((_DWORD *)this + 18) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 12, 0, 0, v49, v50, v51, v52);
  *((_DWORD *)this + 19) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2830, 13, v53, v54, v55, v56, v57, v58);
  *((_DWORD *)this + 20) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 14, 0, 0, v59, v60, v61, v62);
  *((double *)this + 11) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2830, 15, 0, 0, v63, v64, v65, v66);
  *((_BYTE *)this + 96) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 16, 0, 0, v67, v68, v69, v70);
  *((_DWORD *)this + 25) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 17, 0, 0, v71, v72, v73, v74);
  *((_BYTE *)this + 104) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 18, 0, 0, v75, v76, v77, v78);
  *((_DWORD *)this + 27) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 19, 0, 0, v79, v80, v81, v82);
  *((_BYTE *)this + 112) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 20, 0, 0, v83, v84, v85, v86);
  *((_DWORD *)this + 29) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 21, 0, 0, v87, v88, v89, v90);
  *((_BYTE *)this + 120) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 22, 0, 0, v91, v92, v93, v94);
  *((_DWORD *)this + 31) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 23, 0, 0, v95, v96, v97, v98);
  *((_DWORD *)this + 32) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 24, 0, 0, v99, v100, v101, v102);
  *((_DWORD *)this + 33) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 25, 0, 0, v103, v104, v105, v106);
  *((_DWORD *)this + 34) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 26, 0, 0, v107, v108, v109, v110);
  *((_DWORD *)this + 35) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 27, 0, 0, v111, v112, v113, v114);
  *((_DWORD *)this + 36) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 28, 0, 0, v115, v116, v117, v118);
  *((_DWORD *)this + 37) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 29, 0, 0, v119, v120, v121, v122);
  *((_DWORD *)this + 38) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 30, 0, 0, v123, v124, v125, v126);
  *((double *)this + 20) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2830, 31, 0, 0, v127, v128, v129, v130);
  *((_DWORD *)this + 42) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 32, 0, 0, v131, v132, v133, v134);
  *((_BYTE *)this + 172) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 33, 0, 0, v135, v136, v137, v138);
  *((_DWORD *)this + 44) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 34, 0, 0, v139, v140, v141, v142);
  *((double *)this + 23) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2830, 35, 0, 0, v143, v144, v145, v146);
  *((_DWORD *)this + 48) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 36, 0, 0, v147, v148, v149, v150);
  *((_DWORD *)this + 49) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 37, 0, 0, v151, v152, v153, v154);
  *((double *)this + 25) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2830, 38, 0, 0, v155, v156, v157, v158);
  *((_DWORD *)this + 52) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2830, 39, v159, v160, v161, v162, v163, v164);
  *((_DWORD *)this + 53) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 40, 0, 0, v165, v166, v167, v168);
  *((_BYTE *)this + 216) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 41, 0, 0, v169, v170, v171, v172);
  *((_DWORD *)this + 55) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 42, 0, 0, v173, v174, v175, v176);
  *((_DWORD *)this + 56) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 43, 0, 0, v177, v178, v179, v180);
  *((_DWORD *)this + 57) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 44, 0, 0, v181, v182, v183, v184);
  *((_DWORD *)this + 58) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 45, 0, 0, v185, v186, v187, v188);
  *((_DWORD *)this + 59) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 46, 0, 0, v189, v190, v191, v192);
  *((_BYTE *)this + 240) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 47, 0, 0, v193, v194, v195, v196);
  *((_DWORD *)this + 61) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 48, 0, 0, v197, v198, v199, v200);
  *((_DWORD *)this + 62) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 49, 0, 0, v201, v202, v203, v204);
  *((_DWORD *)this + 63) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 50, 0, 0, v205, v206, v207, v208);
  *((_DWORD *)this + 64) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 51, 0, 0, v209, v210, v211, v212);
  *((_DWORD *)this + 65) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 52, 0, 0, v213, v214, v215, v216);
  *((_DWORD *)this + 66) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 53, 0, 0, v217, v218, v219, v220);
  *((_DWORD *)this + 67) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 54, 0, 0, v221, v222, v223, v224);
  *((_DWORD *)this + 68) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 55, 0, 0, v225, v226, v227, v228);
  *((_DWORD *)this + 69) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 56, 0, 0, v229, v230, v231, v232);
  *((_DWORD *)this + 70) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 57, 0, 0, v233, v234, v235, v236);
  *((_DWORD *)this + 71) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 58, 0, 0, v237, v238, v239, v240);
  *((_DWORD *)this + 72) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 59, 0, 0, v241, v242, v243, v244);
  *((_DWORD *)this + 73) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 60, 0, 0, v245, v246, v247, v248);
  *((_DWORD *)this + 74) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 61, 0, 0, v249, v250, v251, v252);
  *((_DWORD *)this + 75) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 62, 0, 0, v253, v254, v255, v256);
  *((_BYTE *)this + 304) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 63, 0, 0, v257, v258, v259, v260);
  *((_DWORD *)this + 77) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 64, 0, 0, v261, v262, v263, v264);
  *((_BYTE *)this + 312) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2830, 65, 0, 0, v265, v266, v267, v268);
  *((_DWORD *)this + 79) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 66, 0, 0, v269, v270, v271, v272);
  *((_DWORD *)this + 80) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 67, 0, 0, v273, v274, v275, v276);
  *((_DWORD *)this + 81) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 68, 0, 0, v277, v278, v279, v280);
  *((_DWORD *)this + 82) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 69, 0, 0, v281, v282, v283, v284);
  result = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2830, 70, 0, 0, v285, v286, v287, v288);
  *((_DWORD *)this + 83) = result;
  return result;
}

uint64_t ChannelParamSet::sizeObject(uint64_t a1, int a2)
{
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2 != 3;
  v4 = sizeObject(a1 + 8);
  v5 = 36;
  if (a2 == 3)
    v5 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    return v4 + 16 * v3;
  else
    return v5 + 152 * (a2 != 3) + v4 + 16 * v3 + 12 * ((a2 != 3) | (4 * (a2 != 3)));
}

BOOL ChannelParamSet::getBoolParameter(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const char *v9;
  char v10;
  ParamSpecMgr *v12;
  int v13;
  const void *ParamByParamId;

  switch(a2)
  {
    case 1:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 1;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[40];
      return v8 != 0;
    case 2:
      v9 = "int";
      v10 = 2;
      goto LABEL_106;
    case 3:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 3;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[48];
      return v8 != 0;
    case 4:
      v9 = "int";
      v10 = 4;
      goto LABEL_106;
    case 5:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 5;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[56];
      return v8 != 0;
    case 6:
      v9 = "int";
      v10 = 6;
      goto LABEL_106;
    case 7:
      v9 = "int";
      v10 = 7;
      goto LABEL_106;
    case 8:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 8;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[68];
      return v8 != 0;
    case 9:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 9;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[69];
      return v8 != 0;
    case 10:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 10;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[70];
      return v8 != 0;
    case 11:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 11;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[71];
      return v8 != 0;
    case 12:
      v9 = "int";
      v10 = 12;
      goto LABEL_106;
    case 13:
      v9 = "enum";
      v10 = 13;
      goto LABEL_106;
    case 14:
      v9 = "int";
      v10 = 14;
      goto LABEL_106;
    case 15:
      v9 = "double";
      v10 = 15;
      goto LABEL_106;
    case 16:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 16;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[96];
      return v8 != 0;
    case 17:
      v9 = "int";
      v10 = 17;
      goto LABEL_106;
    case 18:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 18;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[104];
      return v8 != 0;
    case 19:
      v9 = "int";
      v10 = 19;
      goto LABEL_106;
    case 20:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 20;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[112];
      return v8 != 0;
    case 21:
      v9 = "int";
      v10 = 21;
      goto LABEL_106;
    case 22:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 22;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[120];
      return v8 != 0;
    case 23:
      v9 = "int";
      v10 = 23;
      goto LABEL_106;
    case 24:
      v9 = "int";
      v10 = 24;
      goto LABEL_106;
    case 25:
      v9 = "int";
      v10 = 25;
      goto LABEL_106;
    case 26:
      v9 = "int";
      v10 = 26;
      goto LABEL_106;
    case 27:
      v9 = "int";
      v10 = 27;
      goto LABEL_106;
    case 28:
      v9 = "int";
      v10 = 28;
      goto LABEL_106;
    case 29:
      v9 = "int";
      v10 = 29;
      goto LABEL_106;
    case 30:
      v9 = "int";
      v10 = 30;
      goto LABEL_106;
    case 31:
      v9 = "double";
      v10 = 31;
      goto LABEL_106;
    case 32:
      v9 = "int";
      v10 = 32;
      goto LABEL_106;
    case 33:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 33;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[172];
      return v8 != 0;
    case 34:
      v9 = "int";
      v10 = 34;
      goto LABEL_106;
    case 35:
      v9 = "double";
      v10 = 35;
      goto LABEL_106;
    case 36:
      v9 = "int";
      v10 = 36;
      goto LABEL_106;
    case 37:
      v9 = "int";
      v10 = 37;
      goto LABEL_106;
    case 38:
      v9 = "double";
      v10 = 38;
      goto LABEL_106;
    case 39:
      v9 = "enum";
      v10 = 39;
      goto LABEL_106;
    case 40:
      v9 = "int";
      v10 = 40;
      goto LABEL_106;
    case 41:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 41;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[216];
      return v8 != 0;
    case 42:
      v9 = "int";
      v10 = 42;
      goto LABEL_106;
    case 43:
      v9 = "int";
      v10 = 43;
      goto LABEL_106;
    case 44:
      v9 = "int";
      v10 = 44;
      goto LABEL_106;
    case 45:
      v9 = "int";
      v10 = 45;
      goto LABEL_106;
    case 46:
      v9 = "int";
      v10 = 46;
      goto LABEL_106;
    case 47:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 47;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[240];
      return v8 != 0;
    case 48:
      v9 = "int";
      v10 = 48;
      goto LABEL_106;
    case 49:
      v9 = "int";
      v10 = 49;
      goto LABEL_106;
    case 50:
      v9 = "int";
      v10 = 50;
      goto LABEL_106;
    case 51:
      v9 = "int";
      v10 = 51;
      goto LABEL_106;
    case 52:
      v9 = "int";
      v10 = 52;
      goto LABEL_106;
    case 53:
      v9 = "int";
      v10 = 53;
      goto LABEL_106;
    case 54:
      v9 = "int";
      v10 = 54;
      goto LABEL_106;
    case 55:
      v9 = "int";
      v10 = 55;
      goto LABEL_106;
    case 56:
      v9 = "int";
      v10 = 56;
      goto LABEL_106;
    case 57:
      v9 = "int";
      v10 = 57;
      goto LABEL_106;
    case 58:
      v9 = "int";
      v10 = 58;
      goto LABEL_106;
    case 59:
      v9 = "int";
      v10 = 59;
      goto LABEL_106;
    case 60:
      v9 = "int";
      v10 = 60;
      goto LABEL_106;
    case 61:
      v9 = "int";
      v10 = 61;
      goto LABEL_106;
    case 62:
      v9 = "int";
      v10 = 62;
      goto LABEL_106;
    case 63:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 63;
        goto LABEL_125;
      }
      if ((_DWORD)a3)
        goto LABEL_102;
      v8 = a1[304];
      return v8 != 0;
    case 64:
      v9 = "int";
      v10 = 64;
      goto LABEL_106;
    case 65:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2830;
        v13 = 65;
LABEL_125:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v12, v13, a3, a4, a5, a6, a7, a8);
        return v8 != 0;
      }
      if (!(_DWORD)a3)
      {
        v8 = a1[312];
        return v8 != 0;
      }
LABEL_102:
      throwWrongQueryMode(a3, (uint64_t)"BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
    case 66:
      v9 = "int";
      v10 = 66;
      goto LABEL_106;
    case 67:
      v9 = "int";
      v10 = 67;
      goto LABEL_106;
    case 68:
      v9 = "int";
      v10 = 68;
      goto LABEL_106;
    case 69:
      v9 = "int";
      v10 = 69;
      goto LABEL_106;
    case 70:
      v9 = "int";
      v10 = 70;
LABEL_106:
      throwWrongTypeForParamId(v10, v9, "BOOL", a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t ChannelParamSet::getIntParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  uint64_t result;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  const void *ParamByParamId;
  const void *v18;
  const void *v19;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_110;
    case 2:
      switch((int)a3)
      {
        case 0:
          result = a1[11];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 2;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 2;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 2;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 3:
      v8 = "BOOL";
      v9 = 3;
      goto LABEL_110;
    case 4:
      switch((int)a3)
      {
        case 0:
          result = a1[13];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 4;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 4;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 4;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 5:
      v8 = "BOOL";
      v9 = 5;
      goto LABEL_110;
    case 6:
      switch((int)a3)
      {
        case 0:
          result = a1[15];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 6;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 6;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 6;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 7:
      switch((int)a3)
      {
        case 0:
          result = a1[16];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 7;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 7;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 7;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 8:
      v8 = "BOOL";
      v9 = 8;
      goto LABEL_110;
    case 9:
      v8 = "BOOL";
      v9 = 9;
      goto LABEL_110;
    case 10:
      v8 = "BOOL";
      v9 = 10;
      goto LABEL_110;
    case 11:
      v8 = "BOOL";
      v9 = 11;
      goto LABEL_110;
    case 12:
      switch((int)a3)
      {
        case 0:
          result = a1[18];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 12;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 12;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 12;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 13:
      v8 = "enum";
      v9 = 13;
      goto LABEL_110;
    case 14:
      switch((int)a3)
      {
        case 0:
          result = a1[20];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 14;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 14;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 14;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 15:
      v8 = "double";
      v9 = 15;
      goto LABEL_110;
    case 16:
      v8 = "BOOL";
      v9 = 16;
      goto LABEL_110;
    case 17:
      switch((int)a3)
      {
        case 0:
          result = a1[25];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 17;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 17;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 17;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 18:
      v8 = "BOOL";
      v9 = 18;
      goto LABEL_110;
    case 19:
      switch((int)a3)
      {
        case 0:
          result = a1[27];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 19;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 19;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 19;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 20:
      v8 = "BOOL";
      v9 = 20;
      goto LABEL_110;
    case 21:
      switch((int)a3)
      {
        case 0:
          result = a1[29];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 21;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 21;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 21;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 22:
      v8 = "BOOL";
      v9 = 22;
      goto LABEL_110;
    case 23:
      switch((int)a3)
      {
        case 0:
          result = a1[31];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 23;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 23;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 23;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 24:
      switch((int)a3)
      {
        case 0:
          result = a1[32];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 24;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 24;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 24;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 25:
      switch((int)a3)
      {
        case 0:
          result = a1[33];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 25;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 25;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 25;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 26:
      switch((int)a3)
      {
        case 0:
          result = a1[34];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 26;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 26;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 26;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 27:
      switch((int)a3)
      {
        case 0:
          result = a1[35];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 27;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 27;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 27;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 28:
      switch((int)a3)
      {
        case 0:
          result = a1[36];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 28;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 28;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 28;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 29:
      switch((int)a3)
      {
        case 0:
          result = a1[37];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 29;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 29;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 29;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 30:
      switch((int)a3)
      {
        case 0:
          result = a1[38];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 30;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 30;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 30;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 31:
      v8 = "double";
      v9 = 31;
      goto LABEL_110;
    case 32:
      switch((int)a3)
      {
        case 0:
          result = a1[42];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 32;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 32;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 32;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 33:
      v8 = "BOOL";
      v9 = 33;
      goto LABEL_110;
    case 34:
      switch((int)a3)
      {
        case 0:
          result = a1[44];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 34;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 34;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 34;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 35:
      v8 = "double";
      v9 = 35;
      goto LABEL_110;
    case 36:
      switch((int)a3)
      {
        case 0:
          result = a1[48];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 36;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 36;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 36;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 37:
      switch((int)a3)
      {
        case 0:
          result = a1[49];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 37;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 37;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 37;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 38:
      v8 = "double";
      v9 = 38;
      goto LABEL_110;
    case 39:
      v8 = "enum";
      v9 = 39;
      goto LABEL_110;
    case 40:
      switch((int)a3)
      {
        case 0:
          result = a1[53];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 40;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 40;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 40;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 41:
      v8 = "BOOL";
      v9 = 41;
      goto LABEL_110;
    case 42:
      switch((int)a3)
      {
        case 0:
          result = a1[55];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 42;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 42;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 42;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 43:
      switch((int)a3)
      {
        case 0:
          result = a1[56];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 43;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 43;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 43;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 44:
      switch((int)a3)
      {
        case 0:
          result = a1[57];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 44;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 44;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 44;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 45:
      switch((int)a3)
      {
        case 0:
          result = a1[58];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 45;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 45;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 45;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 46:
      switch((int)a3)
      {
        case 0:
          result = a1[59];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 46;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 46;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 46;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 47:
      v8 = "BOOL";
      v9 = 47;
      goto LABEL_110;
    case 48:
      switch((int)a3)
      {
        case 0:
          result = a1[61];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 48;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 48;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 48;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 49:
      switch((int)a3)
      {
        case 0:
          result = a1[62];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 49;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 49;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 49;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 50:
      switch((int)a3)
      {
        case 0:
          result = a1[63];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 50;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 50;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 50;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 51:
      switch((int)a3)
      {
        case 0:
          result = a1[64];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 51;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 51;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 51;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 52:
      switch((int)a3)
      {
        case 0:
          result = a1[65];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 52;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 52;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 52;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 53:
      switch((int)a3)
      {
        case 0:
          result = a1[66];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 53;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 53;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 53;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 54:
      switch((int)a3)
      {
        case 0:
          result = a1[67];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 54;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 54;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 54;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 55:
      switch((int)a3)
      {
        case 0:
          result = a1[68];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 55;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 55;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 55;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 56:
      switch((int)a3)
      {
        case 0:
          result = a1[69];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 56;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 56;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 56;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 57:
      switch((int)a3)
      {
        case 0:
          result = a1[70];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 57;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 57;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 57;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 58:
      switch((int)a3)
      {
        case 0:
          result = a1[71];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 58;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 58;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 58;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 59:
      switch((int)a3)
      {
        case 0:
          result = a1[72];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 59;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 59;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 59;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 60:
      switch((int)a3)
      {
        case 0:
          result = a1[73];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 60;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 60;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 60;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 61:
      switch((int)a3)
      {
        case 0:
          result = a1[74];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 61;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 61;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 61;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 62:
      switch((int)a3)
      {
        case 0:
          result = a1[75];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 62;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 62;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 62;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 63:
      v8 = "BOOL";
      v9 = 63;
      goto LABEL_110;
    case 64:
      switch((int)a3)
      {
        case 0:
          result = a1[77];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 64;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 64;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 64;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 65:
      v8 = "BOOL";
      v9 = 65;
LABEL_110:
      throwWrongTypeForParamId(v9, v8, "int", a4, a5, a6, a7, a8);
      return 0;
    case 66:
      switch((int)a3)
      {
        case 0:
          result = a1[79];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 66;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 66;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 66;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 67:
      switch((int)a3)
      {
        case 0:
          result = a1[80];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 67;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 67;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 67;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 68:
      switch((int)a3)
      {
        case 0:
          result = a1[81];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 68;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 68;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 68;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 69:
      switch((int)a3)
      {
        case 0:
          result = a1[82];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 69;
          goto LABEL_266;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 69;
          goto LABEL_268;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 69;
          goto LABEL_270;
        default:
          goto LABEL_122;
      }
      return result;
    case 70:
      switch((int)a3)
      {
        case 0:
          result = a1[83];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 70;
LABEL_266:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 70;
LABEL_268:
          v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 70;
LABEL_270:
          v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_122:
          throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

double ChannelParamSet::getDoubleParameter(double *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  double result;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  const void *ParamByParamId;
  const void *v18;
  const void *v19;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_77;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_77;
    case 3:
      v8 = "BOOL";
      v9 = 3;
      goto LABEL_77;
    case 4:
      v8 = "int";
      v9 = 4;
      goto LABEL_77;
    case 5:
      v8 = "BOOL";
      v9 = 5;
      goto LABEL_77;
    case 6:
      v8 = "int";
      v9 = 6;
      goto LABEL_77;
    case 7:
      v8 = "int";
      v9 = 7;
      goto LABEL_77;
    case 8:
      v8 = "BOOL";
      v9 = 8;
      goto LABEL_77;
    case 9:
      v8 = "BOOL";
      v9 = 9;
      goto LABEL_77;
    case 10:
      v8 = "BOOL";
      v9 = 10;
      goto LABEL_77;
    case 11:
      v8 = "BOOL";
      v9 = 11;
      goto LABEL_77;
    case 12:
      v8 = "int";
      v9 = 12;
      goto LABEL_77;
    case 13:
      v8 = "enum";
      v9 = 13;
      goto LABEL_77;
    case 14:
      v8 = "int";
      v9 = 14;
      goto LABEL_77;
    case 15:
      switch((int)a3)
      {
        case 0:
          result = a1[11];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 15;
          goto LABEL_91;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 15;
          goto LABEL_93;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 15;
          goto LABEL_95;
        default:
          goto LABEL_80;
      }
      return result;
    case 16:
      v8 = "BOOL";
      v9 = 16;
      goto LABEL_77;
    case 17:
      v8 = "int";
      v9 = 17;
      goto LABEL_77;
    case 18:
      v8 = "BOOL";
      v9 = 18;
      goto LABEL_77;
    case 19:
      v8 = "int";
      v9 = 19;
      goto LABEL_77;
    case 20:
      v8 = "BOOL";
      v9 = 20;
      goto LABEL_77;
    case 21:
      v8 = "int";
      v9 = 21;
      goto LABEL_77;
    case 22:
      v8 = "BOOL";
      v9 = 22;
      goto LABEL_77;
    case 23:
      v8 = "int";
      v9 = 23;
      goto LABEL_77;
    case 24:
      v8 = "int";
      v9 = 24;
      goto LABEL_77;
    case 25:
      v8 = "int";
      v9 = 25;
      goto LABEL_77;
    case 26:
      v8 = "int";
      v9 = 26;
      goto LABEL_77;
    case 27:
      v8 = "int";
      v9 = 27;
      goto LABEL_77;
    case 28:
      v8 = "int";
      v9 = 28;
      goto LABEL_77;
    case 29:
      v8 = "int";
      v9 = 29;
      goto LABEL_77;
    case 30:
      v8 = "int";
      v9 = 30;
      goto LABEL_77;
    case 31:
      switch((int)a3)
      {
        case 0:
          result = a1[20];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 31;
          goto LABEL_91;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 31;
          goto LABEL_93;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 31;
          goto LABEL_95;
        default:
          goto LABEL_80;
      }
      return result;
    case 32:
      v8 = "int";
      v9 = 32;
      goto LABEL_77;
    case 33:
      v8 = "BOOL";
      v9 = 33;
      goto LABEL_77;
    case 34:
      v8 = "int";
      v9 = 34;
      goto LABEL_77;
    case 35:
      switch((int)a3)
      {
        case 0:
          result = a1[23];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 35;
          goto LABEL_91;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 35;
          goto LABEL_93;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 35;
          goto LABEL_95;
        default:
          goto LABEL_80;
      }
      return result;
    case 36:
      v8 = "int";
      v9 = 36;
      goto LABEL_77;
    case 37:
      v8 = "int";
      v9 = 37;
      goto LABEL_77;
    case 38:
      switch((int)a3)
      {
        case 0:
          result = a1[25];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 38;
LABEL_91:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 38;
LABEL_93:
          v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 38;
LABEL_95:
          v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_80:
          throwWrongQueryMode(a3, (uint64_t)"double", a3, a4, a5, a6, a7, a8);
          return 0.0;
      }
      return result;
    case 39:
      v8 = "enum";
      v9 = 39;
      goto LABEL_77;
    case 40:
      v8 = "int";
      v9 = 40;
      goto LABEL_77;
    case 41:
      v8 = "BOOL";
      v9 = 41;
      goto LABEL_77;
    case 42:
      v8 = "int";
      v9 = 42;
      goto LABEL_77;
    case 43:
      v8 = "int";
      v9 = 43;
      goto LABEL_77;
    case 44:
      v8 = "int";
      v9 = 44;
      goto LABEL_77;
    case 45:
      v8 = "int";
      v9 = 45;
      goto LABEL_77;
    case 46:
      v8 = "int";
      v9 = 46;
      goto LABEL_77;
    case 47:
      v8 = "BOOL";
      v9 = 47;
      goto LABEL_77;
    case 48:
      v8 = "int";
      v9 = 48;
      goto LABEL_77;
    case 49:
      v8 = "int";
      v9 = 49;
      goto LABEL_77;
    case 50:
      v8 = "int";
      v9 = 50;
      goto LABEL_77;
    case 51:
      v8 = "int";
      v9 = 51;
      goto LABEL_77;
    case 52:
      v8 = "int";
      v9 = 52;
      goto LABEL_77;
    case 53:
      v8 = "int";
      v9 = 53;
      goto LABEL_77;
    case 54:
      v8 = "int";
      v9 = 54;
      goto LABEL_77;
    case 55:
      v8 = "int";
      v9 = 55;
      goto LABEL_77;
    case 56:
      v8 = "int";
      v9 = 56;
      goto LABEL_77;
    case 57:
      v8 = "int";
      v9 = 57;
      goto LABEL_77;
    case 58:
      v8 = "int";
      v9 = 58;
      goto LABEL_77;
    case 59:
      v8 = "int";
      v9 = 59;
      goto LABEL_77;
    case 60:
      v8 = "int";
      v9 = 60;
      goto LABEL_77;
    case 61:
      v8 = "int";
      v9 = 61;
      goto LABEL_77;
    case 62:
      v8 = "int";
      v9 = 62;
      goto LABEL_77;
    case 63:
      v8 = "BOOL";
      v9 = 63;
      goto LABEL_77;
    case 64:
      v8 = "int";
      v9 = 64;
      goto LABEL_77;
    case 65:
      v8 = "BOOL";
      v9 = 65;
      goto LABEL_77;
    case 66:
      v8 = "int";
      v9 = 66;
      goto LABEL_77;
    case 67:
      v8 = "int";
      v9 = 67;
      goto LABEL_77;
    case 68:
      v8 = "int";
      v9 = 68;
      goto LABEL_77;
    case 69:
      v8 = "int";
      v9 = 69;
      goto LABEL_77;
    case 70:
      v8 = "int";
      v9 = 70;
LABEL_77:
      throwWrongTypeForParamId(v9, v8, "double", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0.0;
}

uint64_t ChannelParamSet::getStringParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_73;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_73;
    case 3:
      v8 = "BOOL";
      v9 = 3;
      goto LABEL_73;
    case 4:
      v8 = "int";
      v9 = 4;
      goto LABEL_73;
    case 5:
      v8 = "BOOL";
      v9 = 5;
      goto LABEL_73;
    case 6:
      v8 = "int";
      v9 = 6;
      goto LABEL_73;
    case 7:
      v8 = "int";
      v9 = 7;
      goto LABEL_73;
    case 8:
      v8 = "BOOL";
      v9 = 8;
      goto LABEL_73;
    case 9:
      v8 = "BOOL";
      v9 = 9;
      goto LABEL_73;
    case 10:
      v8 = "BOOL";
      v9 = 10;
      goto LABEL_73;
    case 11:
      v8 = "BOOL";
      v9 = 11;
      goto LABEL_73;
    case 12:
      v8 = "int";
      v9 = 12;
      goto LABEL_73;
    case 13:
      v8 = "enum";
      v9 = 13;
      goto LABEL_73;
    case 14:
      v8 = "int";
      v9 = 14;
      goto LABEL_73;
    case 15:
      v8 = "double";
      v9 = 15;
      goto LABEL_73;
    case 16:
      v8 = "BOOL";
      v9 = 16;
      goto LABEL_73;
    case 17:
      v8 = "int";
      v9 = 17;
      goto LABEL_73;
    case 18:
      v8 = "BOOL";
      v9 = 18;
      goto LABEL_73;
    case 19:
      v8 = "int";
      v9 = 19;
      goto LABEL_73;
    case 20:
      v8 = "BOOL";
      v9 = 20;
      goto LABEL_73;
    case 21:
      v8 = "int";
      v9 = 21;
      goto LABEL_73;
    case 22:
      v8 = "BOOL";
      v9 = 22;
      goto LABEL_73;
    case 23:
      v8 = "int";
      v9 = 23;
      goto LABEL_73;
    case 24:
      v8 = "int";
      v9 = 24;
      goto LABEL_73;
    case 25:
      v8 = "int";
      v9 = 25;
      goto LABEL_73;
    case 26:
      v8 = "int";
      v9 = 26;
      goto LABEL_73;
    case 27:
      v8 = "int";
      v9 = 27;
      goto LABEL_73;
    case 28:
      v8 = "int";
      v9 = 28;
      goto LABEL_73;
    case 29:
      v8 = "int";
      v9 = 29;
      goto LABEL_73;
    case 30:
      v8 = "int";
      v9 = 30;
      goto LABEL_73;
    case 31:
      v8 = "double";
      v9 = 31;
      goto LABEL_73;
    case 32:
      v8 = "int";
      v9 = 32;
      goto LABEL_73;
    case 33:
      v8 = "BOOL";
      v9 = 33;
      goto LABEL_73;
    case 34:
      v8 = "int";
      v9 = 34;
      goto LABEL_73;
    case 35:
      v8 = "double";
      v9 = 35;
      goto LABEL_73;
    case 36:
      v8 = "int";
      v9 = 36;
      goto LABEL_73;
    case 37:
      v8 = "int";
      v9 = 37;
      goto LABEL_73;
    case 38:
      v8 = "double";
      v9 = 38;
      goto LABEL_73;
    case 39:
      v8 = "enum";
      v9 = 39;
      goto LABEL_73;
    case 40:
      v8 = "int";
      v9 = 40;
      goto LABEL_73;
    case 41:
      v8 = "BOOL";
      v9 = 41;
      goto LABEL_73;
    case 42:
      v8 = "int";
      v9 = 42;
      goto LABEL_73;
    case 43:
      v8 = "int";
      v9 = 43;
      goto LABEL_73;
    case 44:
      v8 = "int";
      v9 = 44;
      goto LABEL_73;
    case 45:
      v8 = "int";
      v9 = 45;
      goto LABEL_73;
    case 46:
      v8 = "int";
      v9 = 46;
      goto LABEL_73;
    case 47:
      v8 = "BOOL";
      v9 = 47;
      goto LABEL_73;
    case 48:
      v8 = "int";
      v9 = 48;
      goto LABEL_73;
    case 49:
      v8 = "int";
      v9 = 49;
      goto LABEL_73;
    case 50:
      v8 = "int";
      v9 = 50;
      goto LABEL_73;
    case 51:
      v8 = "int";
      v9 = 51;
      goto LABEL_73;
    case 52:
      v8 = "int";
      v9 = 52;
      goto LABEL_73;
    case 53:
      v8 = "int";
      v9 = 53;
      goto LABEL_73;
    case 54:
      v8 = "int";
      v9 = 54;
      goto LABEL_73;
    case 55:
      v8 = "int";
      v9 = 55;
      goto LABEL_73;
    case 56:
      v8 = "int";
      v9 = 56;
      goto LABEL_73;
    case 57:
      v8 = "int";
      v9 = 57;
      goto LABEL_73;
    case 58:
      v8 = "int";
      v9 = 58;
      goto LABEL_73;
    case 59:
      v8 = "int";
      v9 = 59;
      goto LABEL_73;
    case 60:
      v8 = "int";
      v9 = 60;
      goto LABEL_73;
    case 61:
      v8 = "int";
      v9 = 61;
      goto LABEL_73;
    case 62:
      v8 = "int";
      v9 = 62;
      goto LABEL_73;
    case 63:
      v8 = "BOOL";
      v9 = 63;
      goto LABEL_73;
    case 64:
      v8 = "int";
      v9 = 64;
      goto LABEL_73;
    case 65:
      v8 = "BOOL";
      v9 = 65;
      goto LABEL_73;
    case 66:
      v8 = "int";
      v9 = 66;
      goto LABEL_73;
    case 67:
      v8 = "int";
      v9 = 67;
      goto LABEL_73;
    case 68:
      v8 = "int";
      v9 = 68;
      goto LABEL_73;
    case 69:
      v8 = "int";
      v9 = 69;
      goto LABEL_73;
    case 70:
      v8 = "int";
      v9 = 70;
LABEL_73:
      throwWrongTypeForParamId(v9, v8, "string", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

uint64_t ChannelParamSet::getEnumParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  uint64_t result;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  void *ParamByParamId;
  void *v18;
  void *v19;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_70;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_70;
    case 3:
      v8 = "BOOL";
      v9 = 3;
      goto LABEL_70;
    case 4:
      v8 = "int";
      v9 = 4;
      goto LABEL_70;
    case 5:
      v8 = "BOOL";
      v9 = 5;
      goto LABEL_70;
    case 6:
      v8 = "int";
      v9 = 6;
      goto LABEL_70;
    case 7:
      v8 = "int";
      v9 = 7;
      goto LABEL_70;
    case 8:
      v8 = "BOOL";
      v9 = 8;
      goto LABEL_70;
    case 9:
      v8 = "BOOL";
      v9 = 9;
      goto LABEL_70;
    case 10:
      v8 = "BOOL";
      v9 = 10;
      goto LABEL_70;
    case 11:
      v8 = "BOOL";
      v9 = 11;
      goto LABEL_70;
    case 12:
      v8 = "int";
      v9 = 12;
      goto LABEL_70;
    case 13:
      switch((int)a3)
      {
        case 0:
          result = *(unsigned int *)(a1 + 76);
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 13;
          goto LABEL_83;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 13;
          goto LABEL_87;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 13;
          goto LABEL_91;
        default:
          goto LABEL_78;
      }
      return result;
    case 14:
      v8 = "int";
      v9 = 14;
      goto LABEL_70;
    case 15:
      v8 = "double";
      v9 = 15;
      goto LABEL_70;
    case 16:
      v8 = "BOOL";
      v9 = 16;
      goto LABEL_70;
    case 17:
      v8 = "int";
      v9 = 17;
      goto LABEL_70;
    case 18:
      v8 = "BOOL";
      v9 = 18;
      goto LABEL_70;
    case 19:
      v8 = "int";
      v9 = 19;
      goto LABEL_70;
    case 20:
      v8 = "BOOL";
      v9 = 20;
      goto LABEL_70;
    case 21:
      v8 = "int";
      v9 = 21;
      goto LABEL_70;
    case 22:
      v8 = "BOOL";
      v9 = 22;
      goto LABEL_70;
    case 23:
      v8 = "int";
      v9 = 23;
      goto LABEL_70;
    case 24:
      v8 = "int";
      v9 = 24;
      goto LABEL_70;
    case 25:
      v8 = "int";
      v9 = 25;
      goto LABEL_70;
    case 26:
      v8 = "int";
      v9 = 26;
      goto LABEL_70;
    case 27:
      v8 = "int";
      v9 = 27;
      goto LABEL_70;
    case 28:
      v8 = "int";
      v9 = 28;
      goto LABEL_70;
    case 29:
      v8 = "int";
      v9 = 29;
      goto LABEL_70;
    case 30:
      v8 = "int";
      v9 = 30;
      goto LABEL_70;
    case 31:
      v8 = "double";
      v9 = 31;
      goto LABEL_70;
    case 32:
      v8 = "int";
      v9 = 32;
      goto LABEL_70;
    case 33:
      v8 = "BOOL";
      v9 = 33;
      goto LABEL_70;
    case 34:
      v8 = "int";
      v9 = 34;
      goto LABEL_70;
    case 35:
      v8 = "double";
      v9 = 35;
      goto LABEL_70;
    case 36:
      v8 = "int";
      v9 = 36;
      goto LABEL_70;
    case 37:
      v8 = "int";
      v9 = 37;
      goto LABEL_70;
    case 38:
      v8 = "double";
      v9 = 38;
      goto LABEL_70;
    case 39:
      switch((int)a3)
      {
        case 0:
          result = *(unsigned int *)(a1 + 208);
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2830;
          v12 = 39;
LABEL_83:
          ParamByParamId = (void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          if (ParamByParamId)
          result = EnumParamSpec::getDefault((EnumParamSpec *)ParamByParamId);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2830;
          v14 = 39;
LABEL_87:
          v18 = (void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          if (v18)
          result = EnumParamSpec::getMinVal((EnumParamSpec *)v18);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2830;
          v16 = 39;
LABEL_91:
          v19 = (void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          if (v19)
          result = EnumParamSpec::getMaxVal((EnumParamSpec *)v19);
          break;
        default:
LABEL_78:
          throwWrongQueryMode(a3, (uint64_t)"enum", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    case 40:
      v8 = "int";
      v9 = 40;
      goto LABEL_70;
    case 41:
      v8 = "BOOL";
      v9 = 41;
      goto LABEL_70;
    case 42:
      v8 = "int";
      v9 = 42;
      goto LABEL_70;
    case 43:
      v8 = "int";
      v9 = 43;
      goto LABEL_70;
    case 44:
      v8 = "int";
      v9 = 44;
      goto LABEL_70;
    case 45:
      v8 = "int";
      v9 = 45;
      goto LABEL_70;
    case 46:
      v8 = "int";
      v9 = 46;
      goto LABEL_70;
    case 47:
      v8 = "BOOL";
      v9 = 47;
      goto LABEL_70;
    case 48:
      v8 = "int";
      v9 = 48;
      goto LABEL_70;
    case 49:
      v8 = "int";
      v9 = 49;
      goto LABEL_70;
    case 50:
      v8 = "int";
      v9 = 50;
      goto LABEL_70;
    case 51:
      v8 = "int";
      v9 = 51;
      goto LABEL_70;
    case 52:
      v8 = "int";
      v9 = 52;
      goto LABEL_70;
    case 53:
      v8 = "int";
      v9 = 53;
      goto LABEL_70;
    case 54:
      v8 = "int";
      v9 = 54;
      goto LABEL_70;
    case 55:
      v8 = "int";
      v9 = 55;
      goto LABEL_70;
    case 56:
      v8 = "int";
      v9 = 56;
      goto LABEL_70;
    case 57:
      v8 = "int";
      v9 = 57;
      goto LABEL_70;
    case 58:
      v8 = "int";
      v9 = 58;
      goto LABEL_70;
    case 59:
      v8 = "int";
      v9 = 59;
      goto LABEL_70;
    case 60:
      v8 = "int";
      v9 = 60;
      goto LABEL_70;
    case 61:
      v8 = "int";
      v9 = 61;
      goto LABEL_70;
    case 62:
      v8 = "int";
      v9 = 62;
      goto LABEL_70;
    case 63:
      v8 = "BOOL";
      v9 = 63;
      goto LABEL_70;
    case 64:
      v8 = "int";
      v9 = 64;
      goto LABEL_70;
    case 65:
      v8 = "BOOL";
      v9 = 65;
      goto LABEL_70;
    case 66:
      v8 = "int";
      v9 = 66;
      goto LABEL_70;
    case 67:
      v8 = "int";
      v9 = 67;
      goto LABEL_70;
    case 68:
      v8 = "int";
      v9 = 68;
      goto LABEL_70;
    case 69:
      v8 = "int";
      v9 = 69;
      goto LABEL_70;
    case 70:
      v8 = "int";
      v9 = 70;
LABEL_70:
      throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

void ChannelParamSet::setBoolParameter(ChannelParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  const char *v11;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      if (*((_DWORD *)this + 9))
      {
        v11 = "ChannelAdaptationCDFAdaptFastInitially";
        goto LABEL_85;
      }
      *((_BYTE *)this + 40) = a3;
      return;
    case 2:
      throwWrongTypeForParamId(2, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 3:
LABEL_5:
      if (*((_DWORD *)this + 9))
      {
        v11 = "ChannelAdaptationCDFUseSilenceTracker";
        goto LABEL_85;
      }
      *((_BYTE *)this + 48) = v9;
      return;
    case 4:
      throwWrongTypeForParamId(4, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 5:
LABEL_8:
      if (*((_DWORD *)this + 9))
      {
        v11 = "ChannelAdaptationDelayApplyTillUttEnd";
        goto LABEL_85;
      }
      *((_BYTE *)this + 56) = v9;
      return;
    case 6:
      throwWrongTypeForParamId(6, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 7:
LABEL_11:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 8:
LABEL_12:
      if (*((_DWORD *)this + 9))
      {
        v11 = "ChannelAdaptationMeansAdaptFastInitially";
        goto LABEL_85;
      }
      *((_BYTE *)this + 68) = v9;
      return;
    case 9:
      if (*((_DWORD *)this + 9))
      {
        v11 = "ChannelAdaptationMeansApplySynchronous";
        goto LABEL_85;
      }
      *((_BYTE *)this + 69) = a3;
      return;
    case 10:
      if (*((_DWORD *)this + 9))
      {
        v11 = "ChannelAdaptationMeansC0UseSilenceTracker";
        goto LABEL_85;
      }
      *((_BYTE *)this + 70) = a3;
      return;
    case 11:
      if (*((_DWORD *)this + 9))
      {
        v11 = "ChannelAdaptationMeansDelayApplyInitially";
        goto LABEL_85;
      }
      *((_BYTE *)this + 71) = a3;
      return;
    case 12:
      throwWrongTypeForParamId(12, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 13:
LABEL_22:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 14:
LABEL_23:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 15:
LABEL_24:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 16:
LABEL_25:
      if (*((_DWORD *)this + 9))
      {
        v11 = "ChannelAdaptationMeansUseSilenceTracker";
        goto LABEL_85;
      }
      *((_BYTE *)this + 96) = v9;
      return;
    case 17:
      throwWrongTypeForParamId(17, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 18:
LABEL_29:
      if (*((_DWORD *)this + 9))
      {
        v11 = "ChannelAdaptationVarianceAdaptFastInitially";
        goto LABEL_85;
      }
      *((_BYTE *)this + 104) = v9;
      return;
    case 19:
      throwWrongTypeForParamId(19, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 20:
LABEL_32:
      if (*((_DWORD *)this + 9))
      {
        v11 = "ChannelAdaptationVarianceUseSilenceTracker";
        goto LABEL_85;
      }
      *((_BYTE *)this + 112) = v9;
      return;
    case 21:
      throwWrongTypeForParamId(21, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 22:
LABEL_35:
      if (*((_DWORD *)this + 9))
      {
        v11 = "ChannelEnablePitchTracking";
        goto LABEL_85;
      }
      *((_BYTE *)this + 120) = v9;
      return;
    case 23:
      throwWrongTypeForParamId(23, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 24:
LABEL_38:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 25:
LABEL_39:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 26:
LABEL_40:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 27:
LABEL_41:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 28:
LABEL_42:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 29:
LABEL_43:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 30:
LABEL_44:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 31:
LABEL_45:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 32:
LABEL_46:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 33:
LABEL_47:
      if (*((_DWORD *)this + 9))
      {
        v11 = "ChannelSpectralSubtractionDisableAtTargetSNR";
        goto LABEL_85;
      }
      *((_BYTE *)this + 172) = v9;
      return;
    case 34:
      throwWrongTypeForParamId(34, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 35:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 36:
LABEL_52:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 37:
LABEL_53:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 38:
LABEL_54:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 39:
LABEL_55:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 40:
LABEL_56:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 41:
LABEL_57:
      if (*((_DWORD *)this + 9))
      {
        v11 = "ChannelWaveInputEnableSpectralWarping";
        goto LABEL_85;
      }
      *((_BYTE *)this + 216) = v9;
      return;
    case 42:
      throwWrongTypeForParamId(42, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 43:
LABEL_61:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 44:
LABEL_62:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 45:
LABEL_63:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 46:
LABEL_64:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 47:
LABEL_65:
      if (*((_DWORD *)this + 9))
      {
        v11 = "ChannelMaxNormEnergyUseOnline";
        goto LABEL_85;
      }
      *((_BYTE *)this + 240) = v9;
      return;
    case 48:
      throwWrongTypeForParamId(48, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 49:
LABEL_69:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 50:
LABEL_70:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 51:
LABEL_71:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 52:
LABEL_72:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 53:
LABEL_73:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 54:
LABEL_74:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_75;
    case 55:
LABEL_75:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_76;
    case 56:
LABEL_76:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_77;
    case 57:
LABEL_77:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_78;
    case 58:
LABEL_78:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_79;
    case 59:
LABEL_79:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_80;
    case 60:
LABEL_80:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_81;
    case 61:
LABEL_81:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_82;
    case 62:
LABEL_82:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_83;
    case 63:
LABEL_83:
      if (*((_DWORD *)this + 9))
      {
        v11 = "UttDetLimitFrameEnergy";
        goto LABEL_85;
      }
      *((_BYTE *)this + 304) = v9;
      break;
    case 64:
      throwWrongTypeForParamId(64, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_88;
    case 65:
LABEL_88:
      if (*((_DWORD *)this + 9))
      {
        v11 = "UttDetResetFileChannelStateAfterSection";
LABEL_85:
        throwParamSetSetFailed(v11, "BOOL", a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *((_BYTE *)this + 312) = v9;
      }
      break;
    case 66:
      throwWrongTypeForParamId(66, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_91;
    case 67:
LABEL_91:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_92;
    case 68:
LABEL_92:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_93;
    case 69:
LABEL_93:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_94;
    case 70:
LABEL_94:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_95;
    default:
LABEL_95:
      throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void ChannelParamSet::setIntParameter(ChannelParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 2, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId)
      IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v9, 0, 0, v12, v13, v14, v15);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelAdaptationCDFRelevance";
        goto LABEL_220;
      }
      *((_DWORD *)this + 11) = v9;
      return;
    case 3:
      throwWrongTypeForParamId(3, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 4:
LABEL_9:
      v23 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 4, a3, a4, a5, a6, a7, a8);
      if (v23)
      IntParamSpec::validateValue((IntParamSpec *)v23, v9, 0, 0, v24, v25, v26, v27);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelAdaptationCDFWindowMicroseconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 13) = v9;
      return;
    case 5:
      throwWrongTypeForParamId(5, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 6:
LABEL_14:
      v28 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 6, a3, a4, a5, a6, a7, a8);
      if (v28)
      IntParamSpec::validateValue((IntParamSpec *)v28, v9, 0, 0, v29, v30, v31, v32);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelAdaptationInterpolatedCDFMaxPercentMassPerBin";
        goto LABEL_220;
      }
      *((_DWORD *)this + 15) = v9;
      return;
    case 7:
      v33 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 7, a3, a4, a5, a6, a7, a8);
      if (v33)
      IntParamSpec::validateValue((IntParamSpec *)v33, v9, 0, 0, v34, v35, v36, v37);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelAdaptationMeansAccumSmoothingWindowMicroseconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 16) = v9;
      return;
    case 8:
      throwWrongTypeForParamId(8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 9:
LABEL_23:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 10:
LABEL_24:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 11:
LABEL_25:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 12:
LABEL_26:
      v38 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 12, a3, a4, a5, a6, a7, a8);
      if (v38)
      IntParamSpec::validateValue((IntParamSpec *)v38, v9, 0, 0, v39, v40, v41, v42);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelAdaptationMeansInitialWindowMicroseconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 18) = v9;
      return;
    case 13:
      throwWrongTypeForParamId(13, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 14:
LABEL_32:
      v43 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 14, a3, a4, a5, a6, a7, a8);
      if (v43)
      IntParamSpec::validateValue((IntParamSpec *)v43, v9, 0, 0, v44, v45, v46, v47);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelAdaptationMeansRelevance";
        goto LABEL_220;
      }
      *((_DWORD *)this + 20) = v9;
      return;
    case 15:
      throwWrongTypeForParamId(15, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 16:
LABEL_37:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 17:
LABEL_38:
      v48 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 17, a3, a4, a5, a6, a7, a8);
      if (v48)
      IntParamSpec::validateValue((IntParamSpec *)v48, v9, 0, 0, v49, v50, v51, v52);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelAdaptationMeansWindowMicroseconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 25) = v9;
      return;
    case 18:
      throwWrongTypeForParamId(18, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 19:
LABEL_44:
      v53 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 19, a3, a4, a5, a6, a7, a8);
      if (v53)
      IntParamSpec::validateValue((IntParamSpec *)v53, v9, 0, 0, v54, v55, v56, v57);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelAdaptationVarianceRelevance";
        goto LABEL_220;
      }
      *((_DWORD *)this + 27) = v9;
      return;
    case 20:
      throwWrongTypeForParamId(20, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 21:
LABEL_49:
      v58 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 21, a3, a4, a5, a6, a7, a8);
      if (v58)
      IntParamSpec::validateValue((IntParamSpec *)v58, v9, 0, 0, v59, v60, v61, v62);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelAdaptationVarianceWindowMicroseconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 29) = v9;
      return;
    case 22:
      throwWrongTypeForParamId(22, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 23:
LABEL_54:
      v63 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 23, a3, a4, a5, a6, a7, a8);
      if (v63)
      IntParamSpec::validateValue((IntParamSpec *)v63, v9, 0, 0, v64, v65, v66, v67);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelSilenceTrackerBackgroundThresh";
        goto LABEL_220;
      }
      *((_DWORD *)this + 31) = v9;
      return;
    case 24:
      v68 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 24, a3, a4, a5, a6, a7, a8);
      if (v68)
      IntParamSpec::validateValue((IntParamSpec *)v68, v9, 0, 0, v69, v70, v71, v72);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelSilenceTrackerDecrementPerSecond";
        goto LABEL_220;
      }
      *((_DWORD *)this + 32) = v9;
      return;
    case 25:
      v73 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 25, a3, a4, a5, a6, a7, a8);
      if (v73)
      IntParamSpec::validateValue((IntParamSpec *)v73, v9, 0, 0, v74, v75, v76, v77);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelSilenceTrackerIncrementPerSecond";
        goto LABEL_220;
      }
      *((_DWORD *)this + 33) = v9;
      return;
    case 26:
      v78 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 26, a3, a4, a5, a6, a7, a8);
      if (v78)
      IntParamSpec::validateValue((IntParamSpec *)v78, v9, 0, 0, v79, v80, v81, v82);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelSilenceTrackerInitialLevel";
        goto LABEL_220;
      }
      *((_DWORD *)this + 34) = v9;
      return;
    case 27:
      v83 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 27, a3, a4, a5, a6, a7, a8);
      if (v83)
      IntParamSpec::validateValue((IntParamSpec *)v83, v9, 0, 0, v84, v85, v86, v87);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelSilenceTrackerOutlierMinTriggerPercent";
        goto LABEL_220;
      }
      *((_DWORD *)this + 35) = v9;
      return;
    case 28:
      v88 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 28, a3, a4, a5, a6, a7, a8);
      if (v88)
      IntParamSpec::validateValue((IntParamSpec *)v88, v9, 0, 0, v89, v90, v91, v92);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelSilenceTrackerOutlierWindowMicroseconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 36) = v9;
      return;
    case 29:
      v93 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 29, a3, a4, a5, a6, a7, a8);
      if (v93)
      IntParamSpec::validateValue((IntParamSpec *)v93, v9, 0, 0, v94, v95, v96, v97);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelSilenceTrackerSpeechThresh";
        goto LABEL_220;
      }
      *((_DWORD *)this + 37) = v9;
      return;
    case 30:
      v98 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 30, a3, a4, a5, a6, a7, a8);
      if (v98)
      IntParamSpec::validateValue((IntParamSpec *)v98, v9, 0, 0, v99, v100, v101, v102);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelSilenceTrackerRelevance";
        goto LABEL_220;
      }
      *((_DWORD *)this + 38) = v9;
      return;
    case 31:
      throwWrongTypeForParamId(31, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_87;
    case 32:
LABEL_87:
      v103 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 32, a3, a4, a5, a6, a7, a8);
      if (v103)
      IntParamSpec::validateValue((IntParamSpec *)v103, v9, 0, 0, v104, v105, v106, v107);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelSpectralSubtractionDelayMicroseconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 42) = v9;
      return;
    case 33:
      throwWrongTypeForParamId(33, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_92;
    case 34:
LABEL_92:
      v108 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 34, a3, a4, a5, a6, a7, a8);
      if (v108)
      IntParamSpec::validateValue((IntParamSpec *)v108, v9, 0, 0, v109, v110, v111, v112);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelSpectralSubtractionInitialWindowMicroseconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 44) = v9;
      return;
    case 35:
      throwWrongTypeForParamId(35, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_97;
    case 36:
LABEL_97:
      v113 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 36, a3, a4, a5, a6, a7, a8);
      if (v113)
      IntParamSpec::validateValue((IntParamSpec *)v113, v9, 0, 0, v114, v115, v116, v117);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelSpectralSubtractionMinSNRMicroseconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 48) = v9;
      return;
    case 37:
      v118 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 37, a3, a4, a5, a6, a7, a8);
      if (v118)
      IntParamSpec::validateValue((IntParamSpec *)v118, v9, 0, 0, v119, v120, v121, v122);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelSpectralSubtractionStartDecimationMicroseconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 49) = v9;
      return;
    case 38:
      throwWrongTypeForParamId(38, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_106;
    case 39:
LABEL_106:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_107;
    case 40:
LABEL_107:
      v123 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 40, a3, a4, a5, a6, a7, a8);
      if (v123)
      IntParamSpec::validateValue((IntParamSpec *)v123, v9, 0, 0, v124, v125, v126, v127);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelWaveInputClippingThreshold";
        goto LABEL_220;
      }
      *((_DWORD *)this + 53) = v9;
      return;
    case 41:
      throwWrongTypeForParamId(41, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_113;
    case 42:
LABEL_113:
      v128 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 42, a3, a4, a5, a6, a7, a8);
      if (v128)
      IntParamSpec::validateValue((IntParamSpec *)v128, v9, 0, 0, v129, v130, v131, v132);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelWavePacketLossDetectionPacketSize";
        goto LABEL_220;
      }
      *((_DWORD *)this + 55) = v9;
      return;
    case 43:
      v133 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 43, a3, a4, a5, a6, a7, a8);
      if (v133)
      IntParamSpec::validateValue((IntParamSpec *)v133, v9, 0, 0, v134, v135, v136, v137);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelWavePacketLossDetectionSlopeCountPercent";
        goto LABEL_220;
      }
      *((_DWORD *)this + 56) = v9;
      return;
    case 44:
      v138 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 44, a3, a4, a5, a6, a7, a8);
      if (v138)
      IntParamSpec::validateValue((IntParamSpec *)v138, v9, 0, 0, v139, v140, v141, v142);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelWavePacketLossDetectionSlopeThresh";
        goto LABEL_220;
      }
      *((_DWORD *)this + 57) = v9;
      return;
    case 45:
      v143 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 45, a3, a4, a5, a6, a7, a8);
      if (v143)
      IntParamSpec::validateValue((IntParamSpec *)v143, v9, 0, 0, v144, v145, v146, v147);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelWavePacketLossDetectionWindowSize";
        goto LABEL_220;
      }
      *((_DWORD *)this + 58) = v9;
      return;
    case 46:
      v148 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 46, a3, a4, a5, a6, a7, a8);
      if (v148)
      IntParamSpec::validateValue((IntParamSpec *)v148, v9, 0, 0, v149, v150, v151, v152);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelWaveStereoInputSelectSource";
        goto LABEL_220;
      }
      *((_DWORD *)this + 59) = v9;
      return;
    case 47:
      throwWrongTypeForParamId(47, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_134;
    case 48:
LABEL_134:
      v153 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 48, a3, a4, a5, a6, a7, a8);
      if (v153)
      IntParamSpec::validateValue((IntParamSpec *)v153, v9, 0, 0, v154, v155, v156, v157);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelOnlineMaxNormEnergyInitialWindowFrames";
        goto LABEL_220;
      }
      *((_DWORD *)this + 61) = v9;
      return;
    case 49:
      v158 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 49, a3, a4, a5, a6, a7, a8);
      if (v158)
      IntParamSpec::validateValue((IntParamSpec *)v158, v9, 0, 0, v159, v160, v161, v162);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelOnlineMaxNormEnergyGeneralRampFactor";
        goto LABEL_220;
      }
      *((_DWORD *)this + 62) = v9;
      return;
    case 50:
      v163 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 50, a3, a4, a5, a6, a7, a8);
      if (v163)
      IntParamSpec::validateValue((IntParamSpec *)v163, v9, 0, 0, v164, v165, v166, v167);
      if (*((_DWORD *)this + 9))
      {
        v22 = "ChannelOnlineMaxNormEnergyGeneralDecayValue";
        goto LABEL_220;
      }
      *((_DWORD *)this + 63) = v9;
      return;
    case 51:
      v168 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 51, a3, a4, a5, a6, a7, a8);
      if (v168)
      IntParamSpec::validateValue((IntParamSpec *)v168, v9, 0, 0, v169, v170, v171, v172);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetBackgroundFloorDecreasePerSecond";
        goto LABEL_220;
      }
      *((_DWORD *)this + 64) = v9;
      return;
    case 52:
      v173 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 52, a3, a4, a5, a6, a7, a8);
      if (v173)
      IntParamSpec::validateValue((IntParamSpec *)v173, v9, 0, 0, v174, v175, v176, v177);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetBackgroundFloorIncreasePerSecond";
        goto LABEL_220;
      }
      *((_DWORD *)this + 65) = v9;
      return;
    case 53:
      v178 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 53, a3, a4, a5, a6, a7, a8);
      if (v178)
      IntParamSpec::validateValue((IntParamSpec *)v178, v9, 0, 0, v179, v180, v181, v182);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetBackgroundFloorOutlierMinTriggerPercent";
        goto LABEL_220;
      }
      *((_DWORD *)this + 66) = v9;
      return;
    case 54:
      v183 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 54, a3, a4, a5, a6, a7, a8);
      if (v183)
      IntParamSpec::validateValue((IntParamSpec *)v183, v9, 0, 0, v184, v185, v186, v187);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetBackgroundFloorOutlierWindowMicroseconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 67) = v9;
      return;
    case 55:
      v188 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 55, a3, a4, a5, a6, a7, a8);
      if (v188)
      IntParamSpec::validateValue((IntParamSpec *)v188, v9, 0, 0, v189, v190, v191, v192);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetBackgroundThreshPercent";
        goto LABEL_220;
      }
      *((_DWORD *)this + 68) = v9;
      return;
    case 56:
      v193 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 56, a3, a4, a5, a6, a7, a8);
      if (v193)
      IntParamSpec::validateValue((IntParamSpec *)v193, v9, 0, 0, v194, v195, v196, v197);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetBeginUttMinTriggerPercent";
        goto LABEL_220;
      }
      *((_DWORD *)this + 69) = v9;
      return;
    case 57:
      v198 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 57, a3, a4, a5, a6, a7, a8);
      if (v198)
      IntParamSpec::validateValue((IntParamSpec *)v198, v9, 0, 0, v199, v200, v201, v202);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetBeginUttWindowMicroseconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 70) = v9;
      return;
    case 58:
      v203 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 58, a3, a4, a5, a6, a7, a8);
      if (v203)
      IntParamSpec::validateValue((IntParamSpec *)v203, v9, 0, 0, v204, v205, v206, v207);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetEndUttMinTriggerPercent";
        goto LABEL_220;
      }
      *((_DWORD *)this + 71) = v9;
      return;
    case 59:
      v208 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 59, a3, a4, a5, a6, a7, a8);
      if (v208)
      IntParamSpec::validateValue((IntParamSpec *)v208, v9, 0, 0, v209, v210, v211, v212);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetEndUttWindowMicroseconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 72) = v9;
      return;
    case 60:
      v213 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 60, a3, a4, a5, a6, a7, a8);
      if (v213)
      IntParamSpec::validateValue((IntParamSpec *)v213, v9, 0, 0, v214, v215, v216, v217);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetInitialBackgroundLevelMin";
        goto LABEL_220;
      }
      *((_DWORD *)this + 73) = v9;
      return;
    case 61:
      v218 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 61, a3, a4, a5, a6, a7, a8);
      if (v218)
      IntParamSpec::validateValue((IntParamSpec *)v218, v9, 0, 0, v219, v220, v221, v222);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetInitialBackgroundLevelRange";
        goto LABEL_220;
      }
      *((_DWORD *)this + 74) = v9;
      return;
    case 62:
      v223 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 62, a3, a4, a5, a6, a7, a8);
      if (v223)
      IntParamSpec::validateValue((IntParamSpec *)v223, v9, 0, 0, v224, v225, v226, v227);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetInitializeWindowMicroseconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 75) = v9;
      return;
    case 63:
      throwWrongTypeForParamId(63, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_195;
    case 64:
LABEL_195:
      v228 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 64, a3, a4, a5, a6, a7, a8);
      if (v228)
      IntParamSpec::validateValue((IntParamSpec *)v228, v9, 0, 0, v229, v230, v231, v232);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetMaxNonSpeechUttSeconds";
        goto LABEL_220;
      }
      *((_DWORD *)this + 77) = v9;
      return;
    case 65:
      throwWrongTypeForParamId(65, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_200;
    case 66:
LABEL_200:
      v233 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 66, a3, a4, a5, a6, a7, a8);
      if (v233)
      IntParamSpec::validateValue((IntParamSpec *)v233, v9, 0, 0, v234, v235, v236, v237);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetSpeechOffsetMin";
        goto LABEL_220;
      }
      *((_DWORD *)this + 79) = v9;
      return;
    case 67:
      v238 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 67, a3, a4, a5, a6, a7, a8);
      if (v238)
      IntParamSpec::validateValue((IntParamSpec *)v238, v9, 0, 0, v239, v240, v241, v242);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetSpeechOffsetRange";
        goto LABEL_220;
      }
      *((_DWORD *)this + 80) = v9;
      return;
    case 68:
      v243 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 68, a3, a4, a5, a6, a7, a8);
      if (v243)
      IntParamSpec::validateValue((IntParamSpec *)v243, v9, 0, 0, v244, v245, v246, v247);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetSpeechThreshOffsetPercent";
        goto LABEL_220;
      }
      *((_DWORD *)this + 81) = v9;
      return;
    case 69:
      v248 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 69, a3, a4, a5, a6, a7, a8);
      if (v248)
      IntParamSpec::validateValue((IntParamSpec *)v248, v9, 0, 0, v249, v250, v251, v252);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetSpeechUttSecondsMin";
        goto LABEL_220;
      }
      *((_DWORD *)this + 82) = v9;
      break;
    case 70:
      v253 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 70, a3, a4, a5, a6, a7, a8);
      if (v253)
      IntParamSpec::validateValue((IntParamSpec *)v253, v9, 0, 0, v254, v255, v256, v257);
      if (*((_DWORD *)this + 9))
      {
        v22 = "UttDetSpeechUttSecondsRange";
LABEL_220:
        throwParamSetSetFailed(v22, "int", v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *((_DWORD *)this + 83) = v9;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void ChannelParamSet::setDoubleParameter(ChannelParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;
  void *ParamByParamId;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v9 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_16;
    case 15:
LABEL_16:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 15, a4, a5, a6, a7, a8, a9);
      if (ParamByParamId)
      DoubleParamSpec::validateValue((DoubleParamSpec *)ParamByParamId, a3, 0, 0, v13, v14, v15, v16, v17);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ChannelAdaptationMeansRelevanceScale";
        goto LABEL_40;
      }
      *((double *)this + 11) = a3;
      return;
    case 16:
      throwWrongTypeForParamId(16, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_22;
    case 17:
LABEL_22:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_23;
    case 18:
LABEL_23:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_24;
    case 19:
LABEL_24:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_25;
    case 20:
LABEL_25:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_26;
    case 21:
LABEL_26:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_27;
    case 22:
LABEL_27:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_28;
    case 23:
LABEL_28:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_29;
    case 24:
LABEL_29:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_30;
    case 25:
LABEL_30:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_31;
    case 26:
LABEL_31:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_32;
    case 27:
LABEL_32:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_33;
    case 28:
LABEL_33:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_34;
    case 29:
LABEL_34:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_35;
    case 30:
LABEL_35:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_36;
    case 31:
LABEL_36:
      v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 31, a4, a5, a6, a7, a8, a9);
      if (v25)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v25, a3, 0, 0, v26, v27, v28, v29, v30);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ChannelSpectralSubtractionDecayRate";
        goto LABEL_40;
      }
      *((double *)this + 20) = a3;
      return;
    case 32:
      throwWrongTypeForParamId(32, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_43;
    case 33:
LABEL_43:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_44;
    case 34:
LABEL_44:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_45;
    case 35:
LABEL_45:
      v31 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 35, a4, a5, a6, a7, a8, a9);
      if (v31)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v31, a3, 0, 0, v32, v33, v34, v35, v36);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ChannelSpectralSubtractionMaxNoiseScaleChange";
        goto LABEL_40;
      }
      *((double *)this + 23) = a3;
      break;
    case 36:
      throwWrongTypeForParamId(36, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_51;
    case 37:
LABEL_51:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_52;
    case 38:
LABEL_52:
      v37 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 38, a4, a5, a6, a7, a8, a9);
      if (v37)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v37, a3, 0, 0, v38, v39, v40, v41, v42);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ChannelSpectralSubtractionTargetSNR";
LABEL_40:
        throwParamSetSetFailed(v24, "double", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((double *)this + 25) = a3;
      }
      break;
    case 39:
      throwWrongTypeForParamId(39, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_58;
    case 40:
LABEL_58:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_59;
    case 41:
LABEL_59:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_60;
    case 42:
LABEL_60:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_61;
    case 43:
LABEL_61:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_62;
    case 44:
LABEL_62:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_63;
    case 45:
LABEL_63:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_64;
    case 46:
LABEL_64:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_65;
    case 47:
LABEL_65:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_66;
    case 48:
LABEL_66:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_67;
    case 49:
LABEL_67:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_68;
    case 50:
LABEL_68:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_69;
    case 51:
LABEL_69:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_70;
    case 52:
LABEL_70:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_71;
    case 53:
LABEL_71:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_72;
    case 54:
LABEL_72:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_73;
    case 55:
LABEL_73:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_74;
    case 56:
LABEL_74:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_75;
    case 57:
LABEL_75:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_76;
    case 58:
LABEL_76:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_77;
    case 59:
LABEL_77:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_78;
    case 60:
LABEL_78:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_79;
    case 61:
LABEL_79:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_80;
    case 62:
LABEL_80:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_81;
    case 63:
LABEL_81:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_82;
    case 64:
LABEL_82:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_83;
    case 65:
LABEL_83:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_84;
    case 66:
LABEL_84:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_85;
    case 67:
LABEL_85:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_86;
    case 68:
LABEL_86:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_87;
    case 69:
LABEL_87:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_88;
    case 70:
LABEL_88:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_89;
    default:
LABEL_89:
      throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
      return;
  }
}

void ChannelParamSet::setStringParameter(ChannelParamSet *this, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 20:
LABEL_21:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 23:
LABEL_24:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 24:
LABEL_25:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 25:
LABEL_26:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 26:
LABEL_27:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 27:
LABEL_28:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 28:
LABEL_29:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 29:
LABEL_30:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 30:
LABEL_31:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 31:
LABEL_32:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 32:
LABEL_33:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 33:
LABEL_34:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 34:
LABEL_35:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 35:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 36:
LABEL_37:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 37:
LABEL_38:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 38:
LABEL_39:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 39:
LABEL_40:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 40:
LABEL_41:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 41:
LABEL_42:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 42:
LABEL_43:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 43:
LABEL_44:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 44:
LABEL_45:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 45:
LABEL_46:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 46:
LABEL_47:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 47:
LABEL_48:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 48:
LABEL_49:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 49:
LABEL_50:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 50:
LABEL_51:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 51:
LABEL_52:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 52:
LABEL_53:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 53:
LABEL_54:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 54:
LABEL_55:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 55:
LABEL_56:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 56:
LABEL_57:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 57:
LABEL_58:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 58:
LABEL_59:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 59:
LABEL_60:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 60:
LABEL_61:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 61:
LABEL_62:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 62:
LABEL_63:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 63:
LABEL_64:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 64:
LABEL_65:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 65:
LABEL_66:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 66:
LABEL_67:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 67:
LABEL_68:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 68:
LABEL_69:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 69:
LABEL_70:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 70:
LABEL_71:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void ChannelParamSet::setEnumParameter(ChannelParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 13, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId)
      EnumParamSpec::validateValue((EnumParamSpec *)ParamByParamId, v9, v12, v13, v14, v15, v16, v17);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ChannelAdaptationMeansReestimationType";
        goto LABEL_80;
      }
      *((_DWORD *)this + 19) = v9;
      break;
    case 14:
      throwWrongTypeForParamId(14, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 15:
LABEL_52:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 16:
LABEL_53:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 17:
LABEL_54:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 18:
LABEL_55:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 19:
LABEL_56:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 20:
LABEL_57:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 21:
LABEL_58:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 22:
LABEL_59:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 23:
LABEL_60:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 24:
LABEL_61:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 25:
LABEL_62:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 26:
LABEL_63:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 27:
LABEL_64:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 28:
LABEL_65:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 29:
LABEL_66:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 30:
LABEL_67:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 31:
LABEL_68:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 32:
LABEL_69:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 33:
LABEL_70:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 34:
LABEL_71:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 35:
LABEL_72:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 36:
LABEL_73:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 37:
LABEL_74:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_75;
    case 38:
LABEL_75:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_76;
    case 39:
LABEL_76:
      v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2830, 39, a3, a4, a5, a6, a7, a8);
      if (v25)
      EnumParamSpec::validateValue((EnumParamSpec *)v25, v9, v26, v27, v28, v29, v30, v31);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ChannelThreadingType";
LABEL_80:
        throwParamSetSetFailed(v24, "enum", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((_DWORD *)this + 52) = v9;
      }
      break;
    case 40:
      throwWrongTypeForParamId(40, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 41:
LABEL_20:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 42:
LABEL_21:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 43:
LABEL_22:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 44:
LABEL_23:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 45:
LABEL_24:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 46:
LABEL_25:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 47:
LABEL_26:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 48:
LABEL_27:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 49:
LABEL_28:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 50:
LABEL_29:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 51:
LABEL_30:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 52:
LABEL_31:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 53:
LABEL_32:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 54:
LABEL_33:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 55:
LABEL_34:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 56:
LABEL_35:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 57:
LABEL_36:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 58:
LABEL_37:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 59:
LABEL_38:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 60:
LABEL_39:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 61:
LABEL_40:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 62:
LABEL_41:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 63:
LABEL_42:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 64:
LABEL_43:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 65:
LABEL_44:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 66:
LABEL_45:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 67:
LABEL_46:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 68:
LABEL_47:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 69:
LABEL_48:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 70:
LABEL_49:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_50;
    default:
LABEL_50:
      throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void ChannelParamSet::~ChannelParamSet(ChannelParamSet *this)
{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((ChannelParamSet *)((char *)this + 8));
}

{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((ChannelParamSet *)((char *)this + 8));
  JUMPOUT(0x20BD149A8);
}

void MrecInitModule_dtxtfile_dfutil(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugDgnTextFileParser)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugDgnTextFileParser", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugDgnTextFileParser = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugDgnTextFileParser);
  }
}

uint64_t DgnTextFile::atoui(DgnTextFile *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  const char *v13;
  int v14;
  uint64_t v15;
  const char *v16;
  int v17;
  int v18;
  int v19;

  v8 = a2;
  v9 = *(unsigned __int8 *)a2;
  v10 = MEMORY[0x24BDAC740];
  if (*a2 >= 1)
  {
    do
    {
      if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v9 + 60) & 0x4000) == 0)
        break;
      v11 = *++v8;
      v9 = v11;
    }
    while (v11 > 0);
  }
  v12 = v9 == 43;
  if (v9 == 43)
    v13 = v8 + 1;
  else
    v13 = v8;
  v14 = *(unsigned __int8 *)v13;
  if (!v14)
    return 0;
  v15 = 0;
  v16 = &v8[v12 + 1];
  do
  {
    if ((v14 & 0x80) != 0)
      goto LABEL_12;
    v17 = *(_DWORD *)(v10 + 4 * v14 + 60);
    if ((v17 & 0x4000) != 0)
      return v15;
    if ((v17 & 0x400) == 0)
    {
LABEL_12:
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 273, (uint64_t)"dfutil/dtxtfile", 15, (uint64_t)"%02x %c %.500s %u", a7, a8, v14);
      LOBYTE(v14) = *(v16 - 1);
    }
    v18 = v14 - 48;
    if ((~((_BYTE)v14 - 48) | 0xFFFFFF01) / 0xA < v15)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 279, (uint64_t)"dfutil/dtxtfile", 16, (uint64_t)"%.500s %.500s %u", a7, a8, (char)v8);
    v15 = (v18 + 10 * v15);
    v19 = *(unsigned __int8 *)v16++;
    LOBYTE(v14) = v19;
  }
  while (v19);
  return v15;
}

unint64_t DgnTextFile::atou64(DgnTextFile *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  const char *v13;
  int v14;
  unint64_t v15;
  const char *v16;
  int v17;
  int v18;
  int v19;

  v8 = a2;
  v9 = *(unsigned __int8 *)a2;
  v10 = MEMORY[0x24BDAC740];
  if (*a2 >= 1)
  {
    do
    {
      if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v9 + 60) & 0x4000) == 0)
        break;
      v11 = *++v8;
      v9 = v11;
    }
    while (v11 > 0);
  }
  v12 = v9 == 43;
  if (v9 == 43)
    v13 = v8 + 1;
  else
    v13 = v8;
  v14 = *(unsigned __int8 *)v13;
  if (!v14)
    return 0;
  v15 = 0;
  v16 = &v8[v12 + 1];
  do
  {
    if ((v14 & 0x80) != 0)
      goto LABEL_12;
    v17 = *(_DWORD *)(v10 + 4 * v14 + 60);
    if ((v17 & 0x4000) != 0)
      return v15;
    if ((v17 & 0x400) == 0)
    {
LABEL_12:
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 304, (uint64_t)"dfutil/dtxtfile", 15, (uint64_t)"%02x %c %.500s %u", a7, a8, v14);
      LOBYTE(v14) = *(v16 - 1);
    }
    v18 = v14 - 48;
    if (v15 > ~(unint64_t)(v18 & 0xFE) / 0xA)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 310, (uint64_t)"dfutil/dtxtfile", 16, (uint64_t)"%.500s %.500s %u", a7, a8, (char)v8);
    v15 = 10 * v15 + v18;
    v19 = *(unsigned __int8 *)v16++;
    LOBYTE(v14) = v19;
  }
  while (v19);
  return v15;
}

uint64_t DgnTextFile::atosi(DgnTextFile *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  int v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  const char *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;

  v8 = a2;
  v9 = *a2;
  v10 = MEMORY[0x24BDAC740];
  if (v9 >= 1)
  {
    do
    {
      if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v9 + 60) & 0x4000) == 0)
        break;
      v11 = *++v8;
      LOBYTE(v9) = v11;
    }
    while (v11 > 0);
  }
  if (v9 == 45 || v9 == 43)
  {
    v12 = v9 == 45;
    v13 = v8 + 1;
    LOBYTE(v9) = v8[1];
  }
  else
  {
    v12 = 0;
    v13 = v8;
  }
  if (!(_BYTE)v9)
    return 0;
  v14 = 0;
  v15 = (unsigned __int8 *)(v13 + 1);
  do
  {
    if ((v9 & 0x80) != 0)
      goto LABEL_13;
    v16 = *(_DWORD *)(v10 + 4 * v9 + 60);
    if ((v16 & 0x4000) != 0)
      return v14;
    if ((v16 & 0x400) == 0)
    {
LABEL_13:
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 337, (uint64_t)"dfutil/dtxtfile", 15, (uint64_t)"%02x %c %.500s %u", a7, a8, v9);
      LOBYTE(v9) = *(v15 - 1);
    }
    v17 = v9 - 48;
    if (v12)
    {
      if ((v9 + 2147483600) / 10 > (int)v14)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 345, (uint64_t)"dfutil/dtxtfile", 16, (uint64_t)"%.500s %.500s %u", a7, a8, (char)v8);
      v14 = (10 * v14 - v17);
    }
    else
    {
      if ((-2147483601 - v9) / 10 < (int)v14)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 354, (uint64_t)"dfutil/dtxtfile", 16, (uint64_t)"%.500s %.500s %u", a7, a8, (char)v8);
      v14 = (v17 + 10 * v14);
    }
    v18 = *v15++;
    LOBYTE(v9) = v18;
  }
  while (v18);
  return v14;
}

void DgnTextFile::DgnTextFile(DgnTextFile *this)
{
  DgnString *v2;

  *(_QWORD *)this = &off_24C213AB0;
  v2 = (DgnTextFile *)((char *)this + 32);
  DgnString::DgnString((DgnTextFile *)((char *)this + 16));
  DgnString::DgnString(v2);
  DgnString::DgnString((DgnTextFile *)((char *)this + 48));
  DgnString::DgnString((DgnTextFile *)((char *)this + 80));
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_BYTE *)this + 208) = 0;
}

void sub_2097DB0D4(_Unwind_Exception *a1)
{
  DgnString *v1;
  DgnString *v2;
  DgnString *v3;

  DgnString::~DgnString(v3);
  DgnString::~DgnString(v2);
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void DgnTextFile::~DgnTextFile(DgnTextFile *this)
{
  *(_QWORD *)this = &off_24C213AB0;
  DgnTextFile::closeDgnTextFile(this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 176);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 160);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 144);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);
  DgnString::~DgnString((DgnTextFile *)((char *)this + 80));
  DgnString::~DgnString((DgnTextFile *)((char *)this + 48));
  DgnString::~DgnString((DgnTextFile *)((char *)this + 32));
  DgnString::~DgnString((DgnTextFile *)((char *)this + 16));
}

{
  DgnTextFile::~DgnTextFile(this);
  JUMPOUT(0x20BD149A8);
}

void DgnTextFile::closeDgnTextFile(DgnTextFile *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(_QWORD))*v2)(*((_QWORD *)this + 1));
    MemChunkFree(v2, 0);
  }
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 0;
  v3 = *((unsigned int *)this + 34);
  if ((int)v3 >= 1)
  {
    v4 = 16 * v3 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*((_QWORD *)this + 16) + v4));
      v4 -= 16;
    }
    while (v4 != -16);
  }
  *((_DWORD *)this + 34) = 0;
  v5 = *((unsigned int *)this + 38);
  if ((int)v5 >= 1)
  {
    v6 = 16 * v5 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*((_QWORD *)this + 18) + v6));
      v6 -= 16;
    }
    while (v6 != -16);
  }
  *((_DWORD *)this + 38) = 0;
  v7 = *((unsigned int *)this + 42);
  if ((int)v7 >= 1)
  {
    v8 = 16 * v7 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*((_QWORD *)this + 20) + v8));
      v8 -= 16;
    }
    while (v8 != -16);
  }
  *((_DWORD *)this + 42) = 0;
  v9 = *((unsigned int *)this + 46);
  if ((int)v9 >= 1)
  {
    v10 = 16 * v9 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*((_QWORD *)this + 22) + v10));
      v10 -= 16;
    }
    while (v10 != -16);
  }
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 50) = 0;
  *((_BYTE *)this + 208) = 0;
}

void DgnTextFile::legalDgnTextFileVersions(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  v10 = *a2;
  if (*a2 == -1)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 416, (uint64_t)"dfutil/dtxtfile", 38, (uint64_t)"%.500s %u %.500s", a7, a8, (char)"major");
    v10 = *a2;
  }
  if (v10 != 1 && v10 <= 0x12)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 420, (uint64_t)"dfutil/dtxtfile", 38, (uint64_t)"%.500s %u %.500s", a7, a8, (char)"major");
  if (a2[1] == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 423, (uint64_t)"dfutil/dtxtfile", 38, (uint64_t)"%.500s %u %.500s", a7, a8, (char)"minor");
  if (*a2 == 1 && a2[1])
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 427, (uint64_t)"dfutil/dtxtfile", 38, (uint64_t)"%.500s %u %.500s", a7, a8, (char)"minor");
  *(_DWORD *)(a3 + 8) = 0;
  if (*(_DWORD *)(a3 + 12))
  {
    v12 = 0;
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts(a3, 1, 1);
    v12 = *(unsigned int *)(a3 + 8);
  }
  v13 = 0;
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = *(_QWORD *)a2;
  ++*(_DWORD *)(a3 + 8);
  while (1)
  {
    v14 = (v13 + 1);
    v15 = &a2[2 * v14];
    v16 = *v15;
    if (*v15 != 1)
      break;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 435, (uint64_t)"dfutil/dtxtfile", 38, (uint64_t)"%.500s %u %.500s", a7, a8, (char)"major");
    v16 = *v15;
LABEL_21:
    v17 = &a2[2 * v13];
    if (v16 < *v17)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 438, (uint64_t)"dfutil/dtxtfile", 38, (uint64_t)"%.500s %u %.500s", a7, a8, (char)"major");
    v18 = &a2[2 * v14];
    v21 = v18[1];
    v20 = v18 + 1;
    v19 = v21;
    if (v21 == -1)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 442, (uint64_t)"dfutil/dtxtfile", 38, (uint64_t)"%.500s %u %.500s", a7, a8, (char)"minor");
      if (!*v20)
LABEL_27:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 445, (uint64_t)"dfutil/dtxtfile", 38, (uint64_t)"%.500s %u %.500s", a7, a8, (char)"minor");
    }
    else if (!v19)
    {
      goto LABEL_27;
    }
    v22 = *v17;
    if (*v17 == 1)
    {
      v22 = *v20;
      if (*v20 != 1)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 449, (uint64_t)"dfutil/dtxtfile", 38, (uint64_t)"%.500s %u %.500s", a7, a8, (char)"minor");
        v22 = *v17;
      }
    }
    if (*v15 == v22 && *v20 != a2[2 * v13 + 1] + 1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 453, (uint64_t)"dfutil/dtxtfile", 38, (uint64_t)"%.500s %u %.500s", a7, a8, (char)"minor");
    v23 = *(unsigned int *)(a3 + 8);
    if (v23 == *(_DWORD *)(a3 + 12))
    {
      DgnPrimArray<unsigned long long>::reallocElts(a3, 1, 1);
      v23 = *(unsigned int *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v23) = *(_QWORD *)v15;
    ++*(_DWORD *)(a3 + 8);
    ++v13;
  }
  if (v16 != -1)
    goto LABEL_21;
}

uint64_t DgnTextFile::getFileVersion(DgnTextFile *this)
{
  if (*((_BYTE *)this + 104))
    return *(_QWORD *)((char *)this + 68);
  else
    return -1;
}

BOOL DgnTextFile::getHeaderField(DgnTextFile *this, const char *a2, DgnString *a3, int a4)
{
  char v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _BYTE v14[16];

  v6 = (char)a2;
  DgnString::DgnString((DgnString *)v14, a2);
  v8 = DgnArray<DgnString>::find((unsigned int *)this + 40, (uint64_t)v14);
  v11 = v8;
  if (v8 == -1)
  {
    if (a4)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 478, (uint64_t)"dfutil/dtxtfile", 29, (uint64_t)"%.500s %.500s %.500s", v9, v10, v6);
    if (a3)
      *((_DWORD *)a3 + 2) = 0;
  }
  else
  {
    if (a3)
      DgnString::operator=(a3, (DgnString *)(*((_QWORD *)this + 22) + 16 * v8));
    v12 = *((_QWORD *)this + 24);
    if (!*(_BYTE *)(v12 + v11))
      *(_BYTE *)(v12 + v11) = 1;
  }
  DgnString::~DgnString((DgnString *)v14);
  return v11 != -1;
}

void sub_2097DB90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

BOOL DgnTextFile::getHeaderFieldUnsigned(DgnTextFile *this, const char *a2, unsigned int *a3, int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 HeaderField;
  const char *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  const char *v25;
  int v26;

  DgnString::DgnString((DgnString *)&v25);
  HeaderField = DgnTextFile::getHeaderField(this, a2, (DgnString *)&v25, a4);
  if (HeaderField)
  {
    if (v26)
      v19 = v25;
    else
      v19 = &byte_209A88803;
    v20 = DgnTextFile::atoui(this, v19, v12, v13, v14, v15, v16, v17);
    *a3 = v20;
    if (v20 < a5 || v20 > a6)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 525, (uint64_t)"dfutil/dtxtfile", 32, (uint64_t)"%.500s %.500s %.500s %u %u %u", v21, v22, (char)a2);
  }
  else
  {
    *a3 = 0;
  }
  DgnString::~DgnString((DgnString *)&v25);
  return HeaderField;
}

void sub_2097DBA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t DgnTextFile::checkAgainstFormat(DgnTextFile *a1, int a2)
{
  DgnTextFile *v3;
  uint64_t result;
  const char *v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;

  if ((a2 - 1) >= 3)
    return a2 == 0;
  v3 = a1;
  result = DgnTextFile::checkWhiteSpaceFree(a1, (const char *)0xFFFFFFFFLL);
  if (!(_DWORD)result)
    return result;
  if (a2 != 1)
  {
    if (a2 != 3)
    {
      if (a2 == 2)
        return DgnTextFile::checkReal(v3, v5);
      return 0;
    }
    v11 = *(unsigned __int8 *)v3;
    if (*(_BYTE *)v3)
    {
      v12 = (unsigned __int8 *)v3 + 1;
      do
      {
        v13 = v11 - 48;
        result = v13 < 0xA;
        if (v13 >= 0xA)
          break;
        v14 = *v12++;
        v11 = v14;
      }
      while (v14);
      return result;
    }
    return 0;
  }
  v6 = *(unsigned __int8 *)v3;
  if (!*(_BYTE *)v3)
    return 0;
  if (v6 == 45 || v6 == 43)
  {
    v7 = *((unsigned __int8 *)v3 + 1);
    v3 = (DgnTextFile *)((char *)v3 + 1);
    v6 = v7;
  }
  if (!v6)
    return 0;
  v8 = (unsigned __int8 *)v3 + 1;
  do
  {
    v9 = v6 - 48;
    result = v9 < 0xA;
    if (v9 >= 0xA)
      break;
    v10 = *v8++;
    v6 = v10;
  }
  while (v10);
  return result;
}

BOOL DgnTextFile::getHeaderFieldUnsigned64(DgnTextFile *this, const char *a2, unint64_t *a3, int a4, unint64_t a5, unint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 HeaderField;
  const char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v25;
  int v26;

  DgnString::DgnString((DgnString *)&v25);
  HeaderField = DgnTextFile::getHeaderField(this, a2, (DgnString *)&v25, a4);
  if (HeaderField)
  {
    if (v26)
      v19 = v25;
    else
      v19 = &byte_209A88803;
    v20 = DgnTextFile::atou64(this, v19, v12, v13, v14, v15, v16, v17);
    *a3 = v20;
    if (v20 < a5 || v20 > a6)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 549, (uint64_t)"dfutil/dtxtfile", 36, (uint64_t)"%.500s %.500s %.500s %llu %llu %llu", v21, v22, (char)a2);
  }
  else
  {
    *a3 = 0;
  }
  DgnString::~DgnString((DgnString *)&v25);
  return HeaderField;
}

void sub_2097DBC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

BOOL DgnTextFile::getHeaderFieldBool(DgnTextFile *this, const char *a2, BOOL *a3, int a4)
{
  _BOOL8 result;
  BOOL v6;
  unsigned int v7;

  v7 = 0;
  result = DgnTextFile::getHeaderFieldUnsigned(this, a2, &v7, a4, 0, 1u);
  v6 = v7 == 1 && result;
  *a3 = v6;
  return result;
}

BOOL DgnTextFile::getHeaderFieldInteger(DgnTextFile *this, const char *a2, int *a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 HeaderField;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  const char *v25;
  int v26;

  DgnString::DgnString((DgnString *)&v25);
  HeaderField = DgnTextFile::getHeaderField(this, a2, (DgnString *)&v25, a4);
  if (HeaderField)
  {
    if (v26)
      v19 = v25;
    else
      v19 = &byte_209A88803;
    v20 = DgnTextFile::atosi(this, v19, v12, v13, v14, v15, v16, v17);
    *a3 = v20;
    if (v20 < a5 || v20 > a6)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 590, (uint64_t)"dfutil/dtxtfile", 33, (uint64_t)"%.500s %.500s %.500s %d %d %d", v21, v22, (char)a2);
  }
  else
  {
    *a3 = 0;
  }
  DgnString::~DgnString((DgnString *)&v25);
  return HeaderField;
}

void sub_2097DBDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

BOOL DgnTextFile::getHeaderFieldReal(DgnTextFile *this, const char *a2, double *a3, int a4, double a5, double a6)
{
  _BOOL8 HeaderField;
  const char *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  const char *v20;
  int v21;

  DgnString::DgnString((DgnString *)&v20);
  HeaderField = DgnTextFile::getHeaderField(this, a2, (DgnString *)&v20, a4);
  if (HeaderField)
  {
    if (v21)
      v13 = v20;
    else
      v13 = &byte_209A88803;
    v14 = atof(v13);
    v17 = eround(v14, 14);
    *a3 = v17;
    if (v17 < a5 || v17 > a6)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 615, (uint64_t)"dfutil/dtxtfile", 34, (uint64_t)"%.500s %.500s %.500s %g %g %g", v15, v16, (char)a2);
  }
  else
  {
    *a3 = 0.0;
  }
  DgnString::~DgnString((DgnString *)&v20);
  return HeaderField;
}

void sub_2097DBED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t DgnTextFile::getNumLineFields(DgnTextFile *this)
{
  return *((unsigned int *)this + 30);
}

void DgnTextFile::getLineFieldNames(uint64_t a1, uint64_t a2)
{
  DgnArray<DgnString>::copyArraySlice(a2, (_QWORD *)(a1 + 128), 0, *(_DWORD *)(a1 + 136));
}

unint64_t DgnTextFile::getLineFieldFormats(uint64_t a1, unint64_t a2)
{
  return DgnPrimArray<int>::copyArraySlice(a2, (uint64_t *)(a1 + 112), 0, *(_DWORD *)(a1 + 120));
}

uint64_t DgnTextFile::getCurrentLine(DgnTextFile *this)
{
  return (uint64_t)this + 80;
}

DgnString *DgnTextFile::convertToDTFFormat(DgnTextFile *this, const DgnString *a2, DgnString *a3)
{
  DgnString *result;
  int v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  unint64_t v15;
  char __str[6];

  if (*((_DWORD *)this + 2) <= 1u)
    return DgnString::operator=(a2, "^\"\"");
  *((_DWORD *)a2 + 2) = 0;
  v6 = *((_DWORD *)this + 2);
  v7 = v6 != 0;
  v8 = v6 - 1;
  if (!v7)
    v8 = 0;
  if (v8 > 0x60)
    v9 = 3 * v8 + 1;
  else
    v9 = 289;
  result = (DgnString *)DgnString::preAllocate((unint64_t)a2, v9);
  if (*((_DWORD *)this + 2) >= 2u)
  {
    v10 = 0;
    v11 = MEMORY[0x24BDAC740];
    do
    {
      v12 = *(unsigned __int8 *)(*(_QWORD *)this + v10);
      if ((*(char *)(*(_QWORD *)this + v10) & 0x80000000) == 0
        && (*(_DWORD *)(v11 + 4 * *(unsigned __int8 *)(*(_QWORD *)this + v10) + 60) & 0x40000) != 0
        && (v12 != 94
          ? (v13 = (*(_DWORD *)(v11 + 4 * *(unsigned __int8 *)(*(_QWORD *)this + v10) + 60) & 0x4000) == 0)
          : (v13 = 0),
            v13))
      {
        result = (DgnString *)DgnString::appendCharWithGrow((unint64_t)a2, v12);
      }
      else
      {
        snprintf(__str, 6uLL, "^%02x", *(unsigned __int8 *)(*(_QWORD *)this + v10));
        result = DgnString::operator+=(a2, __str);
      }
      ++v10;
      v14 = *((_DWORD *)this + 2);
      v7 = v14 != 0;
      LODWORD(v15) = v14 - 1;
      if (v7)
        v15 = v15;
      else
        v15 = 0;
    }
    while (v10 < v15);
  }
  return result;
}

uint64_t DgnTextFile::convertFromDTFFormat(DgnTextFile *this, const DgnString *a2, DgnString *a3, const char *a4)
{
  const DgnString *v4;
  int v6;
  const char *v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  char *v18;
  unsigned int v19;
  char v20;
  char v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  char *v27;
  const DgnString *v28;

  v4 = a2;
  *((_DWORD *)a2 + 2) = 0;
  v6 = *((_DWORD *)this + 2);
  if (v6)
    v7 = *(const char **)this;
  else
    v7 = &byte_209A88803;
  result = strcmp(v7, "^\"\"");
  if ((_DWORD)result)
  {
    v9 = v6 ? v6 - 1 : 0;
    result = DgnString::preAllocate((unint64_t)v4, v9);
    v12 = *((_DWORD *)this + 2);
    if (v12 >= 2)
    {
      v13 = 0;
      v14 = v12 - 1;
      v15 = MEMORY[0x24BDAC740];
      v28 = v4;
      while (1)
      {
        v16 = *(unsigned __int8 *)(*(_QWORD *)this + v13);
        if (v16 == 94)
          break;
        if ((v16 & 0x80) != 0
          || (*(_DWORD *)(v15 + 4 * *(unsigned __int8 *)(*(_QWORD *)this + v13) + 60) & 0x44000) != 0x40000)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 700, (uint64_t)"dfutil/dtxtfile", 19, (uint64_t)"%02x %u %.500s %.500s %u", v10, v11, v16);
        }
        result = DgnString::appendCharWithGrow((unint64_t)v4, v16);
LABEL_35:
        ++v13;
        v12 = *((_DWORD *)this + 2);
        v14 = v12 - 1;
        if (!v12)
          v14 = 0;
        if (v13 >= v14)
          return result;
      }
      if (v13 + 2 >= v14)
      {
        v17 = v12 == 0;
        v18 = &byte_209A88803;
        if (!v17)
          v18 = *(char **)this;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 707, (uint64_t)"dfutil/dtxtfile", 35, (uint64_t)"%.500s %u %.500s %u", v10, v11, (char)v18);
      }
      v19 = 0;
      v20 = 1;
      while (1)
      {
        v21 = v20;
        v22 = *(unsigned __int8 *)(*(_QWORD *)this + ++v13);
        v23 = *(unsigned __int8 *)(*(_QWORD *)this + v13);
        if ((*(char *)(*(_QWORD *)this + v13) & 0x80000000) == 0)
        {
          v24 = *(_DWORD *)(v15 + 4 * v22 + 60);
          if ((v24 & 0x10000) != 0)
            break;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 715, (uint64_t)"dfutil/dtxtfile", 20, (uint64_t)"%c %u %.500s %.500s %u", v10, v11, v23);
        v25 = 16 * v19;
        if ((v22 & 0x80) == 0)
        {
          v24 = *(_DWORD *)(v15 + 4 * v23 + 60);
          if ((v24 & 0x400) != 0)
            goto LABEL_24;
LABEL_20:
          if ((v24 & 0x1000) != 0)
            v23 = __toupper(v23);
        }
        v26 = v23 - 55;
LABEL_25:
        v20 = 0;
        v19 = v26 + v25;
        if ((v21 & 1) == 0)
        {
          if (!v19)
          {
            v27 = &byte_209A88803;
            if (*((_DWORD *)this + 2))
              v27 = *(char **)this;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 736, (uint64_t)"dfutil/dtxtfile", 21, (uint64_t)"%.500s %.500s %u", v10, v11, (char)v27);
          }
          v4 = v28;
          result = (uint64_t)DgnString::operator+=(v28, v19);
          goto LABEL_35;
        }
      }
      v25 = 16 * v19;
      if ((v24 & 0x400) != 0)
      {
LABEL_24:
        v26 = v23 - 48;
        goto LABEL_25;
      }
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t DgnTextFile::convertToEnvValueFormat(uint64_t a1, DgnString *this)
{
  unsigned int v4;
  int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  BOOL v11;
  char __str[6];

  *((_DWORD *)this + 2) = 0;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 > 0x60)
    v5 = 3 * v4 + 1;
  else
    v5 = 289;
  result = DgnString::preAllocate((unint64_t)this, v5);
  if (*(_DWORD *)(a1 + 8))
  {
    v7 = 0;
    v8 = MEMORY[0x24BDAC740];
    do
    {
      v9 = *(unsigned __int8 *)(*(_QWORD *)a1 + v7);
      if (*(char *)(*(_QWORD *)a1 + v7) < 0
        || (*(_DWORD *)(v8 + 4 * *(unsigned __int8 *)(*(_QWORD *)a1 + v7) + 60) & 0x40000) == 0
        || (v9 != 94
          ? (v10 = (*(_DWORD *)(v8 + 4 * *(unsigned __int8 *)(*(_QWORD *)a1 + v7) + 60) & 0x4000) == 0)
          : (v10 = 0),
            v10 ? (v11 = v9 == 0) : (v11 = 1),
            v11 || v9 == 96))
      {
        result = (uint64_t)DgnString::operator+=(this, __str);
      }
      else
      {
        result = DgnString::appendCharWithGrow((unint64_t)this, v9);
      }
      ++v7;
    }
    while (v7 < *(unsigned int *)(a1 + 8));
  }
  return result;
}

uint64_t DgnTextFile::convertFromEnvValueFormat(uint64_t a1, uint64_t **a2)
{
  uint64_t **v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  char *v15;
  unsigned int v16;
  char v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t **v27;
  _BYTE *v28;
  unint64_t v29;
  void *v30;

  v2 = a2;
  if (*a2)
  {
    MemChunkFree(*a2, 0);
    *v2 = 0;
  }
  *((_DWORD *)v2 + 2) = 0;
  v28 = 0;
  v29 = 0;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 < 2
    || (v30 = 0,
        HIDWORD(v29) = realloc_array(0, &v30, v4 - 1, 0, 0, 1),
        v28 = v30,
        v7 = *(_DWORD *)(a1 + 8),
        v8 = v7 - 1,
        v7 <= 1))
  {
    v9 = v29;
    goto LABEL_36;
  }
  v27 = v2;
  v10 = 0;
  v11 = MEMORY[0x24BDAC740];
  v12 = 1;
  do
  {
    v13 = *(unsigned __int8 *)(*(_QWORD *)a1 + v10);
    if ((_DWORD)v13 == 96)
    {
      if (v10 + 2 >= v8)
      {
        v14 = v12 == 0;
        v15 = &byte_209A88803;
        if (!v14)
          v15 = *(char **)a1;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 799, (uint64_t)"dfutil/dtxtfile", 35, (uint64_t)"%.500s %u %.500s %u", v5, v6, (char)v15);
      }
      v16 = 0;
      v17 = 1;
      while (1)
      {
        v18 = v17;
        v19 = *(unsigned __int8 *)(*(_QWORD *)a1 + ++v10);
        v20 = *(unsigned __int8 *)(*(_QWORD *)a1 + v10);
        if ((*(char *)(*(_QWORD *)a1 + v10) & 0x80000000) == 0)
        {
          v21 = *(_DWORD *)(v11 + 4 * v19 + 60);
          if ((v21 & 0x10000) != 0)
            break;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 807, (uint64_t)"dfutil/dtxtfile", 20, (uint64_t)"%c %u %.500s %.500s %u", v5, v6, v20);
        v22 = 16 * v16;
        if ((v19 & 0x80) == 0)
        {
          v21 = *(_DWORD *)(v11 + 4 * v20 + 60);
          if ((v21 & 0x400) != 0)
            goto LABEL_21;
LABEL_17:
          if ((v21 & 0x1000) != 0)
            v20 = __toupper(v20);
        }
        v23 = v20 - 55;
LABEL_22:
        v17 = 0;
        v16 = v23 + v22;
        if ((v18 & 1) == 0)
        {
          v24 = v29;
          if (v29 == (unint64_t)HIDWORD(v29))
            goto LABEL_29;
          goto LABEL_30;
        }
      }
      v22 = 16 * v16;
      if ((v21 & 0x400) != 0)
      {
LABEL_21:
        v23 = v20 - 48;
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)a1 + v10);
    if ((char)v13 < 0 || (*(_DWORD *)(v11 + 4 * v13 + 60) & 0x44000) != 0x40000)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 792, (uint64_t)"dfutil/dtxtfile", 19, (uint64_t)"%02x %u %.500s %.500s %u", v5, v6, v13);
    v24 = v29;
    if (v29 == (unint64_t)HIDWORD(v29))
    {
LABEL_29:
      DgnPrimArray<char>::reallocElts((uint64_t)&v28, 1, 1);
      v24 = v29;
    }
LABEL_30:
    v28[v24] = v16;
    v9 = v29 + 1;
    LODWORD(v29) = v29 + 1;
    ++v10;
    v12 = *(_DWORD *)(a1 + 8);
    v8 = v12 - 1;
    if (!v12)
      v8 = 0;
  }
  while (v10 < v8);
  v2 = v27;
  if (v9 && !*((_DWORD *)v27 + 2))
  {
    *v27 = MemChunkAlloc(v9, 0);
    *((_DWORD *)v27 + 2) = v9;
    v9 = v29;
  }
LABEL_36:
  if (v9)
  {
    v25 = 0;
    do
    {
      *((_BYTE *)*v2 + v25) = v28[v25];
      ++v25;
    }
    while (v25 < v29);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
}

void sub_2097DC72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DgnTextFile::checkSafe(DgnTextFile *this, const char *a2)
{
  DgnTextFile *i;
  uint64_t v3;
  uint64_t v4;
  int v6;

  for (i = this; ; i = (DgnTextFile *)((char *)i + 1))
  {
    v3 = *(unsigned __int8 *)i;
    if (*(char *)i < 1)
      break;
    if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v3 + 60) & 0x40000) == 0)
      return 0;
  }
  if (!*(_BYTE *)i)
  {
    while (1)
    {
      v6 = *(unsigned __int8 *)this;
      if (v6 != 32 && v6 != 94)
      {
        if (!*(_BYTE *)this)
          return 1;
        this = (DgnTextFile *)((char *)this + 1);
      }
      v4 = 0;
      if (v6 == 94 || v6 == 32)
        return v4;
    }
  }
  return 0;
}

uint64_t DgnTextFile::checkWhiteSpaceFree(DgnTextFile *this, const char *a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  int v6;
  char *v7;
  int v8;
  int v9;
  _BOOL4 v10;

  v3 = *(char *)this;
  v4 = *(unsigned __int8 *)this;
  if ((_DWORD)a2)
    result = *(_BYTE *)this == 0;
  else
    result = 1;
  if ((v3 & 0x80000000) == 0 && (result & 1) == 0)
  {
    v6 = (_DWORD)a2 - 1;
    v7 = (char *)this + 1;
    while ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v4 + 60) & 0x4000) == 0)
    {
      v9 = *v7++;
      v8 = v9;
      v4 = v9;
      v10 = v9 == 0;
      if (v6)
        result = v10;
      else
        result = 1;
      if ((v8 & 0x80000000) == 0)
      {
        --v6;
        if (!(_DWORD)result)
          continue;
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t DgnTextFile::checkReal(DgnTextFile *this, const char *a2)
{
  int v2;
  int v3;
  char v4;
  char i;
  int v6;
  int v7;
  int v8;

  v2 = *(unsigned __int8 *)this;
  if (*(_BYTE *)this)
  {
    v3 = 0;
    v4 = 0;
    for (i = 1; ; i = 0)
    {
      if (v2 == 43 || v2 == 45)
      {
        v6 = *((unsigned __int8 *)this + 1);
        this = (DgnTextFile *)((char *)this + 1);
        v2 = v6;
        if (!v6)
        {
LABEL_16:
          v4 = 0;
          goto LABEL_17;
        }
      }
      else if (!v2)
      {
        return v4 & 1;
      }
      v7 = 0;
      v4 = 0;
      this = (DgnTextFile *)((char *)this + 1);
      do
      {
        if ((v2 - 58) > 0xFFFFFFF5)
        {
          v4 = 1;
        }
        else
        {
          if ((v2 & 0xDF) == 0x45)
            goto LABEL_16;
          if ((v3 | v7) & 1 | (v2 != 46))
            goto LABEL_19;
          v7 = 1;
        }
        v8 = *(unsigned __int8 *)this;
        this = (DgnTextFile *)((char *)this + 1);
        v2 = v8;
      }
      while (v8);
      this = (DgnTextFile *)((char *)this - 1);
LABEL_17:
      if ((i & 1) == 0)
        return v4 & 1;
      v2 = *(unsigned __int8 *)this;
      v3 = 1;
    }
  }
LABEL_19:
  v4 = 0;
  return v4 & 1;
}

void DgnTextFileParser::DgnTextFileParser(DgnTextFileParser *this)
{
  _QWORD *v1;

  DgnTextFile::DgnTextFile(this);
  *v1 = &off_24C215958;
  DgnString::DgnString((DgnString *)(v1 + 27));
}

void sub_2097DC920(_Unwind_Exception *a1)
{
  DgnTextFile *v1;

  DgnTextFile::~DgnTextFile(v1);
  _Unwind_Resume(a1);
}

void DgnTextFileParser::~DgnTextFileParser(DgnTextFileParser *this)
{
  *(_QWORD *)this = &off_24C215958;
  DgnString::~DgnString((DgnTextFileParser *)((char *)this + 216));
  DgnTextFile::~DgnTextFile(this);
}

{
  *(_QWORD *)this = &off_24C215958;
  DgnString::~DgnString((DgnTextFileParser *)((char *)this + 216));
  DgnTextFile::~DgnTextFile(this);
  JUMPOUT(0x20BD149A8);
}

void DgnTextFileParser::verifyMatchingFileType(DgnTextFileParser *this, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  int v8;

  DgnString::DgnString((DgnString *)&v7);
  if (!*((_BYTE *)this + 104))
  {
    v8 = 0;
LABEL_8:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1073, (uint64_t)"dfutil/dtxtfile", 27, (uint64_t)"%.500s %.500s", v4, v5, (char)a2);
    goto LABEL_9;
  }
  DgnString::operator=((DgnString *)&v7, (DgnTextFileParser *)((char *)this + 16));
  if (v8)
    v6 = v7;
  else
    v6 = &byte_209A88803;
  if (strcmp(v6, a2))
    goto LABEL_8;
LABEL_9:
  DgnString::~DgnString((DgnString *)&v7);
}

void sub_2097DCA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DgnTextFileParser::verifyFileVersionInRange(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  BOOL v11;
  char *v12;

  v8 = a2[2];
  if (!(_DWORD)v8)
    goto LABEL_13;
  v9 = 0;
  v10 = (_DWORD *)(*(_QWORD *)a2 + 4);
  v11 = 1;
  do
  {
    if (*(v10 - 1) == *(_DWORD *)(a1 + 68) && *v10 == *(_DWORD *)(a1 + 72))
      break;
    v11 = ++v9 < v8;
    v10 += 2;
  }
  while (v8 != v9);
  if (!v11)
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24))
      v12 = *(char **)(a1 + 16);
    else
      v12 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1082, (uint64_t)"dfutil/dtxtfile", 28, (uint64_t)"%.500s %.500s %u %u", a7, a8, (char)v12);
  }
}

void DgnTextFileParser::verifyMatchingNumFieldSpecs(DgnTextFileParser *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;

  if (*((_DWORD *)this + 34) != a2)
  {
    if (*((_DWORD *)this + 6))
      v8 = (char *)*((_QWORD *)this + 2);
    else
      v8 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1091, (uint64_t)"dfutil/dtxtfile", 30, (uint64_t)"%.500s %.500s %d %d", a7, a8, (char)v8);
  }
}

void DgnTextFileParser::verifyNoBodyLines(DgnTextFileParser *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;

  if (DgnTextFileParser::parseNextLine(this))
  {
    if (*((_DWORD *)this + 6))
      v4 = (char *)*((_QWORD *)this + 2);
    else
      v4 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1098, (uint64_t)"dfutil/dtxtfile", 31, (uint64_t)"%.500s %.500s", v2, v3, (char)v4);
  }
}

uint64_t DgnTextFileParser::parseNextLine(DgnTextFileParser *this)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t Line;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  const char *v25;
  unsigned int v26;
  unsigned int v27;
  DgnString *v28;
  uint64_t v29;
  DgnTextFile *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned int v37;

  v2 = *((unsigned int *)this + 30);
  v3 = (_QWORD *)((char *)this + 144);
  v4 = *((_DWORD *)this + 39);
  if (v2 > v4)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 144, v2 - v4, 0);
  v5 = *((unsigned int *)this + 38);
  v6 = (int)v5;
  if (v2 >= v5)
  {
    if (v2 > v5)
    {
      v8 = v2 - v5;
      v9 = 16 * v5;
      do
      {
        DgnString::DgnString((DgnString *)(*v3 + v9));
        v9 += 16;
        --v8;
      }
      while (v8);
    }
  }
  else if ((int)v5 > (int)v2)
  {
    v7 = 16 * (int)v5 - 16;
    do
    {
      --v6;
      DgnString::~DgnString((DgnString *)(*v3 + v7));
      v7 -= 16;
    }
    while (v6 > (int)v2);
  }
  *((_DWORD *)this + 38) = v2;
  Line = DgnTextFileParser::getLine(this);
  v11 = Line;
  if ((Line & 1) != 0)
  {
    v37 = Line;
    if (*((_DWORD *)this + 22))
      v12 = (char *)*((_QWORD *)this + 10);
    else
      v12 = &byte_209A88803;
    DgnString::preAllocate((unint64_t)this + 216, 256);
    if ((_DWORD)v2)
    {
      v17 = 0;
      v18 = MEMORY[0x24BDAC740];
      v19 = v12;
      while (1)
      {
        v20 = *(_DWORD *)(*((_QWORD *)this + 14) + 4 * v17);
        if ((v20 - 1) < 3)
          break;
        if (!v20)
        {
          v23 = *(unsigned __int8 *)v19;
          if (*v19 < 1)
          {
LABEL_31:
            if (v23)
              goto LABEL_40;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1596, (uint64_t)"dfutil/dtxtfile", 17, (uint64_t)"%d %.500s %.500s %u", v15, v16, v17);
            v23 = *(unsigned __int8 *)v19;
            v25 = v19;
            if (*v19)
              goto LABEL_40;
          }
          else
          {
            while ((*(_DWORD *)(v18 + 4 * v23 + 60) & 0x4000) != 0)
            {
              v24 = *++v19;
              v23 = v24;
              if (v24 <= 0)
                goto LABEL_31;
            }
LABEL_40:
            v25 = v19;
            do
            {
              if ((v23 & 0x80) == 0 && (*(_DWORD *)(v18 + 4 * v23 + 60) & 0x4000) != 0)
                break;
              v27 = *(unsigned __int8 *)++v19;
              v23 = v27;
            }
            while (v27);
          }
LABEL_44:
          DgnString::set((_DWORD *)this + 54, v25, (_DWORD)v19 - (_DWORD)v25);
        }
        DgnString::preAllocate(*((_QWORD *)this + 18) + 16 * v17, 256);
        if (*((_DWORD *)this + 10))
          v28 = (DgnString *)*((_QWORD *)this + 4);
        else
          v28 = (DgnString *)&byte_209A88803;
        DgnTextFile::convertFromDTFFormat((DgnTextFileParser *)((char *)this + 216), (const DgnString *)(*((_QWORD *)this + 18) + 16 * v17), v28, (const char *)*((unsigned int *)this + 25));
        v29 = *((_QWORD *)this + 18) + 16 * v17;
        if (*(_DWORD *)(v29 + 8))
          v30 = *(DgnTextFile **)v29;
        else
          v30 = (DgnTextFile *)&byte_209A88803;
        if ((DgnTextFile::checkAgainstFormat(v30, v20) & 1) == 0)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1629, (uint64_t)"dfutil/dtxtfile", 17, (uint64_t)"%d %.500s %.500s %u", v15, v16, v17);
        if (++v17 == v2)
          goto LABEL_56;
      }
      v21 = *(unsigned __int8 *)v19;
      if (*v19 < 1)
      {
LABEL_25:
        if (!v21)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1578, (uint64_t)"dfutil/dtxtfile", 17, (uint64_t)"%d %.500s %.500s %u", v15, v16, v17);
          v21 = *(unsigned __int8 *)v19;
          v25 = v19;
          if (!*v19)
            goto LABEL_44;
        }
      }
      else
      {
        while ((*(_DWORD *)(v18 + 4 * v21 + 60) & 0x4000) != 0)
        {
          v22 = *++v19;
          v21 = v22;
          if (v22 <= 0)
            goto LABEL_25;
        }
      }
      v25 = v19;
      do
      {
        if ((v21 & 0x80) == 0 && (*(_DWORD *)(v18 + 4 * v21 + 60) & 0x4000) != 0)
          break;
        v26 = *(unsigned __int8 *)++v19;
        v21 = v26;
      }
      while (v26);
      goto LABEL_44;
    }
    v19 = v12;
LABEL_56:
    if (*v19 < 1)
    {
      v11 = v37;
    }
    else
    {
      v31 = *(unsigned __int8 *)v19;
      v11 = v37;
      do
      {
        if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v31 + 60) & 0x4000) == 0)
          break;
        v32 = *++v19;
        v31 = v32;
      }
      while (v32 > 0);
    }
    if (strlen(v19))
    {
      if (*((_DWORD *)this + 22))
        v35 = (char *)*((_QWORD *)this + 10);
      else
        v35 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1648, (uint64_t)"dfutil/dtxtfile", 18, (uint64_t)"%.500s %d %.500s %.500s %u", v33, v34, (char)v35);
    }
  }
  else
  {
    v13 = *((unsigned int *)this + 38);
    if ((int)v13 >= 1)
    {
      v14 = 16 * v13 - 16;
      do
      {
        DgnString::~DgnString((DgnString *)(*v3 + v14));
        v14 -= 16;
      }
      while (v14 != -16);
    }
    *((_DWORD *)this + 38) = 0;
  }
  return v11;
}

void DgnTextFileParser::verifyNoUnknownHeaderFields(DgnTextFileParser *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  char *v13;

  v8 = *((unsigned int *)this + 50);
  if ((_DWORD)v8)
  {
    v10 = 0;
    for (i = 0; i < v8; ++i)
    {
      if (!*(_BYTE *)(*((_QWORD *)this + 24) + i))
      {
        v12 = *((_QWORD *)this + 20) + v10;
        if (*(_DWORD *)(v12 + 8))
          v13 = *(char **)v12;
        else
          v13 = &byte_209A88803;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1108, (uint64_t)"dfutil/dtxtfile", 37, (uint64_t)"%.500s %.500s %.500s", a7, a8, (char)v13);
        v8 = *((unsigned int *)this + 50);
      }
      v10 += 16;
    }
  }
}

void DgnTextFileParser::openDgnTextFileParser(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  char *SubFileExtensionString;
  uint64_t CurrentSubDirComponents;
  char *v10;
  DgnString *v11;
  uint64_t v12;
  DgnStream *v13;
  _BYTE v14[16];
  _BYTE v15[16];

  SubFileExtensionString = GetSubFileExtensionString(a3);
  DgnString::DgnString((DgnString *)v15);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents((DFile *)a2);
  DFile::makeSubFileName(CurrentSubDirComponents, SubFileExtensionString, (DgnString *)v15);
  DgnString::preAllocate(a1 + 32, 192);
  DgnString::operator=((DgnString *)(a1 + 32), (DgnString *)v15);
  DgnString::operator+=((DgnString *)(a1 + 32), " subfile of ");
  DgnString::preAllocate(a1 + 48, 192);
  DgnString::operator=((DgnString *)(a1 + 48), (DgnString *)(a1 + 32));
  if (*(_DWORD *)(a2 + 24))
    v10 = *(char **)(a2 + 16);
  else
    v10 = &byte_209A88803;
  DgnString::operator+=((DgnString *)(a1 + 32), v10);
  DgnString::DgnString((DgnString *)v14);
  FileSpec::getDiagnosticMaskedName((FileSpec **)(a2 + 16), (DgnString *)v14, v11);
  DgnString::operator+=((_DWORD *)(a1 + 48), (uint64_t)v14);
  if (a4)
    v12 = 3;
  else
    v12 = 0;
  v13 = (DgnStream *)DFile::openSubFile(a2, a3, v12, 1);
  DgnTextFileParser::openDgnTextFileParser((DgnTextFileParser *)a1, v13);
  DgnString::~DgnString((DgnString *)v14);
  DgnString::~DgnString((DgnString *)v15);
}

void sub_2097DD2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DgnTextFileParser::openDgnTextFileParser(DgnTextFileParser *this, DgnStream *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  const char *v6;
  const char *v7;
  char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char **v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  char v47;
  int v48;
  DgnTextFile *v49;
  unsigned int v50;
  const char *v51;
  int v52;

  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 25) = 0;
  DgnString::DgnString((DgnString *)&v51);
  DgnString::DgnString((DgnString *)&v49);
  if (!DgnTextFileParser::getNextHeaderField(this, &v51, (DgnString *)&v49, 1)
    || ((v5 = v52, v6 = v51, v52) ? (v7 = v51) : (v7 = &byte_209A88803), strncmp(v7, "DGNTEXTFILE_VERSION", 0x13uLL)))
  {
    if (*((_DWORD *)this + 22))
      v8 = (char *)*((_QWORD *)this + 10);
    else
      v8 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1169, (uint64_t)"dfutil/dtxtfile", 1, (uint64_t)"%.500s %.500s %u", v3, v4, (char)v8);
    v5 = v52;
    v6 = v51;
  }
  if (v5)
    v9 = v6;
  else
    v9 = &byte_209A88803;
  if (strcmp(v9, "DGNTEXTFILE_VERSION"))
  {
    if (*((_DWORD *)this + 22))
      v12 = (char *)*((_QWORD *)this + 10);
    else
      v12 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1173, (uint64_t)"dfutil/dtxtfile", 2, (uint64_t)"%.500s %.500s %u", v10, v11, (char)v12);
  }
  if (v50)
    v13 = (const char *)v49;
  else
    v13 = &byte_209A88803;
  v48 = 0;
  v47 = 0;
  if (sscanf(v13, "%d%c", &v48, &v47) != 1 || (v16 = v48, v48 < 0))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1181, (uint64_t)"dfutil/dtxtfile", 12, (uint64_t)"%.500s %.500s %u", v14, v15, (char)v13);
    v16 = v48;
  }
  if (v16 != 5)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1184, (uint64_t)"dfutil/dtxtfile", 12, (uint64_t)"%.500s %.500s %u", v14, v15, (char)v13);
    v16 = v48;
  }
  v17 = 0;
  v18 = (char **)((char *)this + 16);
  *((_DWORD *)this + 16) = v16;
  do
  {
    DgnTextFileParser::getNextHeaderField(this, &v51, (DgnString *)&v49, 0);
    if (v17 == 2)
    {
      if (v52)
        v29 = v51;
      else
        v29 = &byte_209A88803;
      if (strcmp(v29, "DGNTEXTFILE_FILEVERSION_MINOR"))
      {
        if (*((_DWORD *)this + 22))
          v32 = (char *)*((_QWORD *)this + 10);
        else
          v32 = &byte_209A88803;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1240, (uint64_t)"dfutil/dtxtfile", 3, (uint64_t)"%.500s %.500s %u", v30, v31, (char)v32);
      }
      if (v50)
        v42 = (const char *)v49;
      else
        v42 = &byte_209A88803;
      v48 = 0;
      v47 = 0;
      if (sscanf(v42, "%d%c", &v48, &v47) != 1 || (v45 = v48, v48 < 0))
      {
        if (*((_DWORD *)this + 6))
          v46 = *v18;
        else
          v46 = &byte_209A88803;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1250, (uint64_t)"dfutil/dtxtfile", 13, (uint64_t)"%.500s %.500s %.500s %u", v43, v44, (char)v46);
        v45 = v48;
      }
      *((_DWORD *)this + 18) = v45;
    }
    else if (v17 == 1)
    {
      if (v52)
        v25 = v51;
      else
        v25 = &byte_209A88803;
      if (strcmp(v25, "DGNTEXTFILE_FILEVERSION_MAJOR"))
      {
        if (*((_DWORD *)this + 22))
          v28 = (char *)*((_QWORD *)this + 10);
        else
          v28 = &byte_209A88803;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1218, (uint64_t)"dfutil/dtxtfile", 3, (uint64_t)"%.500s %.500s %u", v26, v27, (char)v28);
      }
      if (v50)
        v37 = (const char *)v49;
      else
        v37 = &byte_209A88803;
      v48 = 0;
      v47 = 0;
      if (sscanf(v37, "%d%c", &v48, &v47) != 1 || (v40 = v48, v48 < 0))
      {
        if (*((_DWORD *)this + 6))
          v41 = *v18;
        else
          v41 = &byte_209A88803;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1228, (uint64_t)"dfutil/dtxtfile", 13, (uint64_t)"%.500s %.500s %.500s %u", v38, v39, (char)v41);
        v40 = v48;
      }
      *((_DWORD *)this + 17) = v40;
    }
    else if (v17)
    {
      if (v52)
        v33 = v51;
      else
        v33 = &byte_209A88803;
      if (strcmp(v33, "DGNTEXTFILE_FIELDS"))
      {
        if (*((_DWORD *)this + 22))
          v36 = (char *)*((_QWORD *)this + 10);
        else
          v36 = &byte_209A88803;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1262, (uint64_t)"dfutil/dtxtfile", 14, (uint64_t)"%.500s %.500s %u", v34, v35, (char)v36);
      }
      DgnTextFileParser::scanValueForLineFieldFormats(this, (const DgnString *)&v49);
    }
    else
    {
      if (v52)
        v19 = v51;
      else
        v19 = &byte_209A88803;
      v23 = !strcmp(v19, "DGNTEXTFILE_TYPE") && v50 >= 2;
      if (!v23 || (DgnTextFile::checkSafe(v49, v20) & 1) == 0)
      {
        if (*((_DWORD *)this + 22))
          v24 = (char *)*((_QWORD *)this + 10);
        else
          v24 = &byte_209A88803;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1205, (uint64_t)"dfutil/dtxtfile", 1, (uint64_t)"%.500s %.500s %u", v21, v22, (char)v24);
      }
      DgnString::operator=((DgnTextFileParser *)((char *)this + 16), (DgnString *)&v49);
    }
    ++v17;
  }
  while (v17 != 4);
  *((_BYTE *)this + 208) = 1;
  *((_BYTE *)this + 104) = 1;
  DgnTextFileParser::readHeader(this);
  DgnString::~DgnString((DgnString *)&v49);
  DgnString::~DgnString((DgnString *)&v51);
}

void sub_2097DD904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  _Unwind_Resume(a1);
}

void DgnTextFileParser::openDgnTextFileParser(DgnTextFileParser *this, char **a2)
{
  DgnString *v4;
  char *v5;
  DgnString *v6;
  uint64_t *v7;

  v4 = (DgnTextFileParser *)((char *)this + 32);
  DgnString::preAllocate((unint64_t)this + 32, 96);
  if (*((_DWORD *)a2 + 2))
    v5 = *a2;
  else
    v5 = &byte_209A88803;
  DgnString::operator=(v4, v5);
  DgnString::preAllocate((unint64_t)this + 48, 96);
  FileSpec::getDiagnosticMaskedName((FileSpec **)a2, (DgnTextFileParser *)((char *)this + 48), v6);
  v7 = MemChunkAlloc(0x68uLL, 0);
  DgnFileStream::DgnFileStream(v7, 0, 1, a2);
  DgnTextFileParser::openDgnTextFileParser(this, (DgnStream *)v7);
}

uint64_t DgnTextFileParser::getNextHeaderField(DgnTextFileParser *this, const char **a2, DgnString *a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  const char *v21;
  unsigned int v22;
  int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;

  if (*((_DWORD *)this + 24))
    return 0;
  DgnTextFileParser::getLine(this);
  v11 = *((_DWORD *)this + 22);
  if (v11)
    v12 = (char *)*((_QWORD *)this + 10);
  else
    v12 = &byte_209A88803;
  v13 = *v12;
  v14 = MEMORY[0x24BDAC740];
  if (a4)
  {
    if (!*v12)
      return 0;
    if ((v13 & 0x80) != 0)
      goto LABEL_18;
    if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v13 + 60) & 0x4000) != 0)
      return 0;
    goto LABEL_13;
  }
  if (!*v12)
    goto LABEL_14;
  if ((v13 & 0x80) == 0)
  {
LABEL_13:
    if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v13 + 60) & 0x4000) != 0)
    {
LABEL_14:
      if (v11)
        v15 = (char *)*((_QWORD *)this + 10);
      else
        v15 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1303, (uint64_t)"dfutil/dtxtfile", 4, (uint64_t)"%.500s %.500s %u", v9, v10, (char)v15);
      LODWORD(v13) = *v12;
      v16 = v12;
      if (!*v12)
        goto LABEL_22;
    }
  }
LABEL_18:
  v16 = v12;
  do
  {
    if ((v13 & 0x80) == 0 && (*(_DWORD *)(v14 + 4 * v13 + 60) & 0x4000) != 0)
      break;
    v17 = *(unsigned __int8 *)++v16;
    LODWORD(v13) = v17;
  }
  while (v17);
LABEL_22:
  DgnString::set(a2, v12, (_DWORD)v16 - (_DWORD)v12);
  v18 = *(unsigned __int8 *)v16;
  if (*v16 < 1)
  {
LABEL_25:
    if (!v18)
    {
      *((_DWORD *)a3 + 2) = 0;
      goto LABEL_32;
    }
  }
  else
  {
    while ((*(_DWORD *)(v14 + 4 * v18 + 60) & 0x4000) != 0)
    {
      v19 = *++v16;
      v18 = v19;
      if (v19 <= 0)
        goto LABEL_25;
    }
  }
  v20 = strlen(v16);
  v21 = &v16[v20 - 1];
  do
  {
    v22 = v20;
    if (v21 <= v16)
      break;
    v23 = *v21;
    if (v23 < 0)
      break;
    --v20;
    --v21;
  }
  while ((*(_DWORD *)(v14 + 4 * v23 + 60) & 0x4000) != 0);
  DgnString::set(a3, v16, v22);
LABEL_32:
  if (*((_DWORD *)a2 + 2))
    v24 = *a2;
  else
    v24 = &byte_209A88803;
  if (strcmp(v24, "DGNTEXTFILE_ENDHEAD"))
    return 1;
  if (*((_DWORD *)a3 + 2))
    v27 = *(char **)a3;
  else
    v27 = &byte_209A88803;
  if (*v27)
  {
    if (*((_DWORD *)this + 22))
      v28 = (char *)*((_QWORD *)this + 10);
    else
      v28 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1345, (uint64_t)"dfutil/dtxtfile", 5, (uint64_t)"%.500s %.500s %u", v25, v26, (char)v28);
  }
  result = 0;
  *((_DWORD *)this + 24) = *((_DWORD *)this + 25);
  return result;
}

void DgnTextFileParser::scanValueForLineFieldFormats(DgnTextFileParser *this, const DgnString *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  const char *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t i;
  uint64_t v33;
  int v34;
  const char *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  char *v42;
  unsigned int v43;
  const char *v44;
  int v45;

  *((_DWORD *)this + 30) = 0;
  v4 = (_QWORD *)((char *)this + 128);
  v5 = *((unsigned int *)this + 34);
  if ((int)v5 >= 1)
  {
    v6 = 16 * v5 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*v4 + v6));
      v6 -= 16;
    }
    while (v6 != -16);
  }
  *((_DWORD *)this + 34) = 0;
  v7 = *((_DWORD *)a2 + 2);
  v8 = *(const char **)a2;
  DgnString::DgnString((DgnString *)&v44);
  DgnString::DgnString((DgnString *)&v42);
  if (v7)
    v9 = v8;
  else
    v9 = &byte_209A88803;
  v10 = MEMORY[0x24BDAC740];
LABEL_8:
  while (1)
  {
    v11 = *(unsigned __int8 *)v9;
    if (*v9 < 1)
      break;
    while ((*(_DWORD *)(v10 + 4 * v11 + 60) & 0x4000) != 0)
    {
      v12 = *++v9;
      v11 = v12;
      if (v12 <= 0)
        goto LABEL_11;
    }
LABEL_12:
    v13 = v9;
    do
    {
      if ((v11 & 0x80) == 0 && ((*(_DWORD *)(v10 + 4 * v11 + 60) & 0x4000) != 0 || v11 == 58))
        break;
      v14 = *(unsigned __int8 *)++v13;
      v11 = v14;
    }
    while (v14);
    DgnString::set(&v44, v9, (_DWORD)v13 - (_DWORD)v9);
    v15 = 0;
    if (v45)
      v16 = v44;
    else
      v16 = &byte_209A88803;
    while (strcmp(v16, (&sFieldNamesAndFormats)[v15]))
    {
      v15 += 2;
      if (v15 == 8)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1502, (uint64_t)"dfutil/dtxtfile", 7, (uint64_t)"%.500s %.500s %u", v17, v18, (char)v9);
        goto LABEL_8;
      }
    }
    if (*v13 != 58)
    {
      if (*((_DWORD *)this + 10))
        v19 = (char *)*((_QWORD *)this + 4);
      else
        v19 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1460, (uint64_t)"dfutil/dtxtfile", 25, (uint64_t)"%.500s %u", v17, v18, (char)v19);
    }
    v22 = *((unsigned __int8 *)v13 + 1);
    v21 = v13 + 1;
    v20 = v22;
    v9 = v21;
    if (v22)
    {
      v9 = v21;
      do
      {
        if ((v20 & 0x80) == 0 && (*(_DWORD *)(v10 + 4 * v20 + 60) & 0x4000) != 0)
          break;
        v23 = *(unsigned __int8 *)++v9;
        v20 = v23;
      }
      while (v23);
    }
    DgnString::set(&v42, v21, (_DWORD)v9 - (_DWORD)v21);
    if (v43)
      v26 = v42;
    else
      v26 = &byte_209A88803;
    v27 = v26;
    if (v43 <= 1)
    {
      if (*((_DWORD *)this + 10))
        v28 = (char *)*((_QWORD *)this + 4);
      else
        v28 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1472, (uint64_t)"dfutil/dtxtfile", 26, (uint64_t)"%.500s %u", v24, v25, (char)v28);
      v27 = v26;
    }
    while (1)
    {
      v29 = *v27;
      if (*v27 < 1)
        break;
      ++v27;
      if ((*(_DWORD *)(v10 + 4 * v29 + 60) & 0x40000) == 0)
        goto LABEL_46;
    }
    if (*v27 || strchr(v26, 58))
LABEL_46:
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1477, (uint64_t)"dfutil/dtxtfile", 24, (uint64_t)"%.500s %.500s %u", v24, v25, (char)v26);
    v30 = *((unsigned int *)this + 34);
    if ((_DWORD)v30)
    {
      v31 = 0;
      for (i = 0; i < v30; ++i)
      {
        v33 = *v4 + v31;
        v34 = *(_DWORD *)(v33 + 8);
        v35 = *(const char **)v33;
        if (v34)
          v36 = v35;
        else
          v36 = &byte_209A88803;
        if (v43)
          v37 = v42;
        else
          v37 = &byte_209A88803;
        if (!strcmp(v36, v37))
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1485, (uint64_t)"dfutil/dtxtfile", 23, (uint64_t)"%.500s %d %.500s %u", v38, v39, (char)v26);
          v30 = *((unsigned int *)this + 34);
        }
        v31 += 16;
      }
    }
    else
    {
      v30 = 0;
    }
    if (v30 == *((_DWORD *)this + 35))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v4, 1, 1);
      v30 = *((unsigned int *)this + 34);
    }
    DgnString::DgnString((DgnString *)(*v4 + 16 * v30), (const DgnString *)&v42);
    ++*((_DWORD *)this + 34);
    if (*v9 >= 1)
      v9 += ((unint64_t)*(unsigned int *)(v10 + 4 * *(unsigned __int8 *)v9 + 60) >> 14) & 1;
    v40 = (int)(&sFieldNamesAndFormats)[v15 + 1];
    v41 = *((_DWORD *)this + 30);
    if (v41 == *((_DWORD *)this + 31))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 112, 1, 1);
      v41 = *((_DWORD *)this + 30);
    }
    *(_DWORD *)(*((_QWORD *)this + 14) + 4 * v41) = v40;
    *((_DWORD *)this + 30) = v41 + 1;
  }
LABEL_11:
  if (v11)
    goto LABEL_12;
  DgnString::~DgnString((DgnString *)&v42);
  DgnString::~DgnString((DgnString *)&v44);
}

void sub_2097DE0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DgnTextFileParser::readHeader(DgnTextFileParser *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  char *v7;
  int v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _BOOL4 HeaderField;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  const char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  DgnString *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  _BYTE v32[16];
  char *v33;
  int v34;

  DgnString::DgnString((DgnString *)&v33);
  DgnString::DgnString((DgnString *)v32);
  DgnString::preAllocate((unint64_t)this + 216, 256);
  v31 = (_QWORD *)((char *)this + 160);
  v2 = MEMORY[0x24BDAC740];
  while (DgnTextFileParser::getNextHeaderField(this, (const char **)&v33, (DgnTextFileParser *)((char *)this + 216), 0))
  {
    if (*((_DWORD *)this + 56) <= 1u)
    {
      if (*((_DWORD *)this + 22))
        v5 = (char *)*((_QWORD *)this + 10);
      else
        v5 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1370, (uint64_t)"dfutil/dtxtfile", 5, (uint64_t)"%.500s %.500s %u", v3, v4, (char)v5);
    }
    v6 = *((_DWORD *)this + 22);
    if (v6 < 2)
    {
      if (v6)
LABEL_13:
        v7 = (char *)*((_QWORD *)this + 10);
      else
        v7 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1375, (uint64_t)"dfutil/dtxtfile", 4, (uint64_t)"%.500s %.500s %u", v3, v4, (char)v7);
      goto LABEL_15;
    }
    if ((**((char **)this + 10) & 0x80000000) == 0
      && (*(_DWORD *)(v2 + 4 * **((unsigned __int8 **)this + 10) + 60) & 0x4000) != 0)
    {
      goto LABEL_13;
    }
LABEL_15:
    v8 = v34;
    v9 = v33;
    if (v34)
      v10 = v33;
    else
      v10 = &byte_209A88803;
    if (!strcmp(v10, "DGNTEXTFILE_FIELDS"))
    {
      if (*((_DWORD *)this + 22))
        v13 = (char *)*((_QWORD *)this + 10);
      else
        v13 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1381, (uint64_t)"dfutil/dtxtfile", 8, (uint64_t)"%.500s %.500s %u", v11, v12, (char)v13);
      v8 = v34;
      v9 = v33;
    }
    if (v8)
      v14 = v9;
    else
      v14 = &byte_209A88803;
    if (!strncmp(v14, "DGNTEXTFILE_", 0xCuLL))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1391, (uint64_t)"dfutil/dtxtfile", 9, (uint64_t)"%.500s %.500s %.500s %u", v15, v16, (char)v14);
      v8 = v34;
      v9 = v33;
    }
    if (v8)
      v17 = (char *)v9;
    else
      v17 = &byte_209A88803;
    HeaderField = DgnTextFile::getHeaderField(this, v17, 0, 0);
    v21 = v17;
    if (HeaderField)
    {
      v22 = v34 ? v33 : &byte_209A88803;
      v23 = strcmp(v22, "^//");
      v21 = v17;
      if (v23)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1401, (uint64_t)"dfutil/dtxtfile", 6, (uint64_t)"%.500s %.500s %.500s %u", v19, v20, (char)v17);
        v21 = v17;
      }
    }
    while (1)
    {
      v24 = *v21;
      if (*v21 < 1)
        break;
      ++v21;
      if ((*(_DWORD *)(v2 + 4 * v24 + 60) & 0x40000) == 0)
        goto LABEL_41;
    }
    if (!*v21)
      goto LABEL_42;
LABEL_41:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1409, (uint64_t)"dfutil/dtxtfile", 10, (uint64_t)"%.500s %.500s %.500s %u", v19, v20, (char)v17);
LABEL_42:
    if ((DgnTextFile::checkWhiteSpaceFree((DgnTextFile *)v17, (const char *)0xFFFFFFFFLL) & 1) == 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1415, (uint64_t)"dfutil/dtxtfile", 11, (uint64_t)"%.500s %.500s %.500s %u", v25, v26, (char)v17);
    if (*((_DWORD *)this + 10))
      v27 = (DgnString *)*((_QWORD *)this + 4);
    else
      v27 = (DgnString *)&byte_209A88803;
    DgnTextFile::convertFromDTFFormat((DgnTextFileParser *)((char *)this + 216), (const DgnString *)v32, v27, (const char *)*((unsigned int *)this + 25));
    v28 = *((unsigned int *)this + 42);
    if (v28 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v31, 1, 1);
      v28 = *((unsigned int *)this + 42);
    }
    DgnString::DgnString((DgnString *)(*v31 + 16 * v28), (const DgnString *)&v33);
    ++*((_DWORD *)this + 42);
    v29 = *((unsigned int *)this + 46);
    if (v29 == *((_DWORD *)this + 47))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 176, 1, 1);
      v29 = *((unsigned int *)this + 46);
    }
    DgnString::DgnString((DgnString *)(*((_QWORD *)this + 22) + 16 * v29), (const DgnString *)v32);
    ++*((_DWORD *)this + 46);
    v30 = *((_DWORD *)this + 50);
    if (v30 == *((_DWORD *)this + 51))
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 192, 1, 1);
      v30 = *((_DWORD *)this + 50);
    }
    *(_BYTE *)(*((_QWORD *)this + 24) + v30) = 0;
    *((_DWORD *)this + 50) = v30 + 1;
  }
  DgnString::~DgnString((DgnString *)v32);
  DgnString::~DgnString((DgnString *)&v33);
}

void sub_2097DE5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  _Unwind_Resume(a1);
}

uint64_t DgnTextFileParser::getLine(DgnTextFileParser *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  const char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  const char *v16;

  *((_DWORD *)this + 22) = 0;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  result = 0;
  if ((v8 & 1) == 0)
  {
    v10 = (const char **)((char *)this + 80);
    v11 = MEMORY[0x24BDAC740];
    while (1)
    {
      DgnStream::getLine(*((DgnStream **)this + 1), (DgnTextFileParser *)((char *)this + 80), v2, v3, v4, v5, v6, v7);
      if (*((_DWORD *)this + 22) <= 1u
        && ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1)) & 1) != 0)
      {
        return 0;
      }
      ++*((_DWORD *)this + 25);
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1)))
      {
        if (*((_DWORD *)this + 10))
          v14 = (char *)*((_QWORD *)this + 4);
        else
          v14 = &byte_209A88803;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dtxtfile.cpp", 1676, (uint64_t)"dfutil/dtxtfile", 22, (uint64_t)"%.500s %u", v12, v13, (char)v14);
      }
      if (!*((_BYTE *)this + 208))
        break;
      v15 = *((_DWORD *)this + 22);
      if (!v15)
        break;
      v16 = *v10;
      if (strncmp(*v10, "^//", 3uLL)
        || v15 >= 5 && (v16[3] < 0 || (*(_DWORD *)(v11 + 4 * *((unsigned __int8 *)v16 + 3) + 60) & 0x4000) == 0))
      {
        break;
      }
      *((_DWORD *)this + 22) = 0;
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1)))
        return 0;
    }
    return 1;
  }
  return result;
}

char *DgnTextFileParser::getLineFieldString(DgnTextFileParser *this, unsigned int a2)
{
  _DWORD *v2;

  v2 = (_DWORD *)(*((_QWORD *)this + 18) + 16 * a2);
  if (v2[2])
    return *(char **)v2;
  else
    return &byte_209A88803;
}

uint64_t DgnTextFileParser::getLineFieldInteger(DgnTextFileParser *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const char *v9;

  v8 = *((_QWORD *)this + 18) + 16 * a2;
  if (*(_DWORD *)(v8 + 8))
    v9 = *(const char **)v8;
  else
    v9 = &byte_209A88803;
  return DgnTextFile::atosi(this, v9, a3, a4, a5, a6, a7, a8);
}

uint64_t DgnTextFileParser::getLineFieldUnsigned(DgnTextFileParser *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const char *v9;

  v8 = *((_QWORD *)this + 18) + 16 * a2;
  if (*(_DWORD *)(v8 + 8))
    v9 = *(const char **)v8;
  else
    v9 = &byte_209A88803;
  return DgnTextFile::atoui(this, v9, a3, a4, a5, a6, a7, a8);
}

double DgnTextFileParser::getLineFieldReal(DgnTextFileParser *this, unsigned int a2)
{
  uint64_t v2;
  const char *v3;
  double v4;

  v2 = *((_QWORD *)this + 18) + 16 * a2;
  if (*(_DWORD *)(v2 + 8))
    v3 = *(const char **)v2;
  else
    v3 = &byte_209A88803;
  v4 = atof(v3);
  return eround(v4, 14);
}

uint64_t DgnTextFileParser::atEof(DgnTextFileParser *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
}

void DgnTextFileWriter::DgnTextFileWriter(DgnTextFileWriter *this)
{
  uint64_t v2;

  DgnTextFile::DgnTextFile(this);
  *(_QWORD *)v2 = &off_24C215978;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  DgnString::DgnString((DgnString *)(v2 + 248));
  DgnString::DgnString((DgnTextFileWriter *)((char *)this + 264));
  *((_BYTE *)this + 209) = 0;
}

void sub_2097DE8A0(_Unwind_Exception *a1)
{
  DgnTextFile *v1;
  uint64_t v2;
  uint64_t v3;
  DgnString *v4;
  DgnString *v5;

  v5 = v4;
  DgnString::~DgnString(v5);
  DgnArray<DgnString>::releaseAll(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnTextFile::~DgnTextFile(v1);
  _Unwind_Resume(a1);
}

void DgnTextFileWriter::~DgnTextFileWriter(DgnTextFileWriter *this)
{
  *(_QWORD *)this = &off_24C215978;
  if (*((_BYTE *)this + 104))
  {
    if (!*((_BYTE *)this + 209))
      DgnTextFileWriter::writeHeader(this);
    DgnTextFile::closeDgnTextFile(this);
  }
  DgnString::~DgnString((DgnTextFileWriter *)((char *)this + 264));
  DgnString::~DgnString((DgnTextFileWriter *)((char *)this + 248));
  DgnArray<DgnString>::releaseAll((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnTextFile::~DgnTextFile(this);
}

{
  DgnTextFileWriter::~DgnTextFileWriter(this);
  JUMPOUT(0x20BD149A8);
}

void DgnTextFileWriter::writeHeader(DgnTextFileWriter *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  DgnString *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int v23;
  char __str[24];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  DgnString::DgnString((DgnString *)&v22);
  DgnString::operator=((DgnString *)&v22, "DGNTEXTFILE_VERSION");
  DgnString::operator+=((DgnString *)&v22, " ");
  snprintf(__str, 0x14uLL, "%u", *((_DWORD *)this + 16));
  DgnString::operator+=((DgnString *)&v22, __str);
  DgnString::operator+=((DgnString *)&v22, "\n");
  if (v23)
    v2 = v22;
  else
    v2 = &byte_209A88803;
  if (v23)
    v3 = (v23 - 1);
  else
    v3 = 0;
  (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1), v2, v3);
  DgnString::operator=((DgnString *)&v22, "DGNTEXTFILE_TYPE");
  DgnString::operator+=((DgnString *)&v22, " ");
  DgnString::operator+=(&v22, (uint64_t)this + 16);
  DgnString::operator+=((DgnString *)&v22, "\n");
  if (v23)
    v4 = v22;
  else
    v4 = &byte_209A88803;
  if (v23)
    v5 = (v23 - 1);
  else
    v5 = 0;
  (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1), v4, v5);
  DgnString::operator=((DgnString *)&v22, "DGNTEXTFILE_FILEVERSION_MAJOR");
  DgnString::operator+=((DgnString *)&v22, " ");
  snprintf(__str, 0x14uLL, "%u", *((_DWORD *)this + 17));
  DgnString::operator+=((DgnString *)&v22, __str);
  DgnString::operator+=((DgnString *)&v22, "\n");
  if (v23)
    v6 = v22;
  else
    v6 = &byte_209A88803;
  if (v23)
    v7 = (v23 - 1);
  else
    v7 = 0;
  (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1), v6, v7);
  DgnString::operator=((DgnString *)&v22, "DGNTEXTFILE_FILEVERSION_MINOR");
  DgnString::operator+=((DgnString *)&v22, " ");
  snprintf(__str, 0x14uLL, "%u", *((_DWORD *)this + 18));
  DgnString::operator+=((DgnString *)&v22, __str);
  DgnString::operator+=((DgnString *)&v22, "\n");
  if (v23)
    v8 = v22;
  else
    v8 = &byte_209A88803;
  if (v23)
    v9 = (v23 - 1);
  else
    v9 = 0;
  (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1), v8, v9);
  DgnString::DgnString((DgnString *)__str);
  if (*((_DWORD *)this + 30))
  {
    v10 = 0;
    do
    {
      v11 = *(_DWORD *)(*((_QWORD *)this + 14) + 4 * v10);
      if (v10)
        DgnString::operator+=((DgnString *)__str, " ");
      v12 = 0;
      while (LODWORD((&sFieldNamesAndFormats)[v12 + 1]) != v11)
      {
        v12 += 2;
        if (v12 == 8)
          goto LABEL_34;
      }
      DgnString::operator+=((DgnString *)__str, (&sFieldNamesAndFormats)[v12]);
LABEL_34:
      if (*(_DWORD *)(*((_QWORD *)this + 16) + 16 * v10 + 8) >= 2u)
      {
        DgnString::operator+=((DgnString *)__str, ":");
        DgnString::operator+=(__str, *((_QWORD *)this + 16) + 16 * v10);
      }
      ++v10;
    }
    while (v10 < *((unsigned int *)this + 30));
  }
  DgnString::operator=((DgnString *)&v22, "DGNTEXTFILE_FIELDS");
  DgnString::operator+=((DgnString *)&v22, " ");
  DgnString::operator+=(&v22, (uint64_t)__str);
  DgnString::operator+=((DgnString *)&v22, "\n");
  if (v23)
    v13 = v22;
  else
    v13 = &byte_209A88803;
  if (v23)
    v14 = (v23 - 1);
  else
    v14 = 0;
  (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1), v13, v14);
  if (*((_DWORD *)this + 42))
  {
    v15 = 0;
    v16 = 0;
    do
    {
      DgnString::operator=((DgnString *)&v22, (DgnString *)(*((_QWORD *)this + 20) + v15));
      DgnString::operator+=((DgnString *)&v22, " ");
      *((_DWORD *)this + 64) = 0;
      DgnTextFile::convertToDTFFormat((DgnTextFile *)(*((_QWORD *)this + 22) + v15), (DgnTextFileWriter *)((char *)this + 248), v17);
      DgnString::operator+=(&v22, (uint64_t)this + 248);
      DgnString::operator+=((DgnString *)&v22, "\n");
      if (v23)
        v18 = v22;
      else
        v18 = &byte_209A88803;
      if (v23)
        v19 = (v23 - 1);
      else
        v19 = 0;
      (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1), v18, v19);
      ++v16;
      v15 += 16;
    }
    while (v16 < *((unsigned int *)this + 42));
  }
  DgnString::operator=((DgnString *)&v22, "DGNTEXTFILE_ENDHEAD");
  DgnString::operator+=((DgnString *)&v22, "\n");
  if (v23)
    v20 = v22;
  else
    v20 = &byte_209A88803;
  if (v23)
    v21 = (v23 - 1);
  else
    v21 = 0;
  (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1), v20, v21);
  *((_BYTE *)this + 209) = 1;
  DgnString::~DgnString((DgnString *)__str);
  DgnString::~DgnString((DgnString *)&v22);
}

void sub_2097DEDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

double DgnTextFileWriter::openDgnTextFileWriter(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  double result;

  if (a4)
    v6 = 5;
  else
    v6 = 1;
  v7 = DFile::openSubFile(a2, a3, v6, 1);
  DgnTextFile::closeDgnTextFile((DgnTextFile *)a1);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 100) = 0;
  *(_QWORD *)&result = 5;
  *(_QWORD *)(a1 + 64) = 5;
  *(_DWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  return result;
}

DgnString *DgnTextFileWriter::setFileType(uint64_t a1, char *a2, _QWORD *a3)
{
  DgnString *result;

  result = DgnString::operator=((DgnString *)(a1 + 16), a2);
  *(_QWORD *)(a1 + 68) = *a3;
  return result;
}

void DgnTextFileWriter::setHeaderField(DgnTextFileWriter *this, const char *a2, const char *a3)
{
  _QWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE v9[16];

  v5 = (_QWORD *)((char *)this + 160);
  DgnString::DgnString((DgnString *)v9, a2);
  v6 = *((_DWORD *)this + 42);
  if (v6 == *((_DWORD *)this + 43))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v5, 1, 1);
    v6 = *((_DWORD *)this + 42);
  }
  DgnString::DgnString((DgnString *)(*v5 + 16 * v6), (const DgnString *)v9);
  ++*((_DWORD *)this + 42);
  DgnString::~DgnString((DgnString *)v9);
  DgnString::DgnString((DgnString *)v9, a3);
  v7 = *((_DWORD *)this + 46);
  if (v7 == *((_DWORD *)this + 47))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 176, 1, 1);
    v7 = *((_DWORD *)this + 46);
  }
  DgnString::DgnString((DgnString *)(*((_QWORD *)this + 22) + 16 * v7), (const DgnString *)v9);
  ++*((_DWORD *)this + 46);
  DgnString::~DgnString((DgnString *)v9);
  v8 = *((_DWORD *)this + 50);
  if (v8 == *((_DWORD *)this + 51))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 192, 1, 1);
    v8 = *((_DWORD *)this + 50);
  }
  *(_BYTE *)(*((_QWORD *)this + 24) + v8) = 1;
  *((_DWORD *)this + 50) = v8 + 1;
}

void sub_2097DEFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

void DgnTextFileWriter::setHeaderFieldUnsigned(DgnTextFileWriter *this, const char *a2, uint64_t a3)
{
  char __str[40];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x28uLL, "%llu", a3);
  DgnTextFileWriter::setHeaderField(this, a2, __str);
}

void DgnTextFileWriter::setHeaderFieldBool(DgnTextFileWriter *this, const char *a2, unsigned int a3)
{
  char __str[40];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x28uLL, "%llu", a3);
  DgnTextFileWriter::setHeaderField(this, a2, __str);
}

void DgnTextFileWriter::setHeaderFieldInteger(DgnTextFileWriter *this, const char *a2, int a3)
{
  char __str[20];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x14uLL, "%d", a3);
  DgnTextFileWriter::setHeaderField(this, a2, __str);
}

void DgnTextFileWriter::setHeaderFieldReal(DgnTextFileWriter *this, const char *a2, double a3)
{
  const char *v5;
  const char *v6;
  int v7;

  DgnString::formatFloat((DgnString *)0xE, a3, (DgnString *)&v6);
  if (v7)
    v5 = v6;
  else
    v5 = &byte_209A88803;
  DgnTextFileWriter::setHeaderField(this, a2, v5);
  DgnString::~DgnString((DgnString *)&v6);
}

void sub_2097DF1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

void DgnTextFileWriter::setLineFieldFormat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  DgnPrimArray<int>::copyArraySlice(a1 + 112, (uint64_t *)a2, 0, *(_DWORD *)(a2 + 8));
  DgnArray<DgnString>::copyArraySlice(a1 + 128, (_QWORD *)a3, 0, *(_DWORD *)(a3 + 8));
}

DgnString *DgnTextFileWriter::setLineFieldValue(DgnTextFileWriter *this, unsigned int a2, char *a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  DgnString *result;

  if (!*((_DWORD *)this + 60) && *((_DWORD *)this + 30))
  {
    v6 = 0;
    do
    {
      v7 = *((unsigned int *)this + 60);
      if (v7 == *((_DWORD *)this + 61))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 232, 1, 1);
        v7 = *((unsigned int *)this + 60);
      }
      DgnString::DgnString((DgnString *)(*((_QWORD *)this + 29) + 16 * v7));
      ++*((_DWORD *)this + 60);
      v8 = *((_DWORD *)this + 56);
      if (v8 == *((_DWORD *)this + 57))
      {
        DgnPrimArray<char>::reallocElts((uint64_t)this + 216, 1, 1);
        v8 = *((_DWORD *)this + 56);
      }
      *(_BYTE *)(*((_QWORD *)this + 27) + v8) = 0;
      *((_DWORD *)this + 56) = v8 + 1;
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 30));
  }
  DgnString::preAllocate(*((_QWORD *)this + 29) + 16 * a2, 256);
  result = DgnString::operator=((DgnString *)(*((_QWORD *)this + 29) + 16 * a2), a3);
  *(_BYTE *)(*((_QWORD *)this + 27) + a2) = 1;
  return result;
}

DgnString *DgnTextFileWriter::setLineFieldIntegerValue(DgnTextFileWriter *this, unsigned int a2, int a3)
{
  char __str[20];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x14uLL, "%d", a3);
  return DgnTextFileWriter::setLineFieldValue(this, a2, __str);
}

DgnString *DgnTextFileWriter::setLineFieldUnsignedValue(DgnTextFileWriter *this, unsigned int a2, int a3)
{
  char __str[20];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x14uLL, "%u", a3);
  return DgnTextFileWriter::setLineFieldValue(this, a2, __str);
}

void DgnTextFileWriter::setLineFieldRealValue(DgnTextFileWriter *this, unsigned int a2, double a3)
{
  char *v5;
  char *v6;
  int v7;

  DgnString::formatFloat((DgnString *)0xE, a3, (DgnString *)&v6);
  if (v7)
    v5 = v6;
  else
    v5 = &byte_209A88803;
  DgnTextFileWriter::setLineFieldValue(this, a2, v5);
  DgnString::~DgnString((DgnString *)&v6);
}

void sub_2097DF478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

void DgnTextFileWriter::writeNextLine(void **this)
{
  DgnString *v2;
  size_t v3;
  uint64_t i;
  unsigned int v5;
  int v6;
  char *v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;

  if (!*((_BYTE *)this + 209))
    DgnTextFileWriter::writeHeader((DgnTextFileWriter *)this);
  DgnString::preAllocate((unint64_t)(this + 10), 4095);
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 64) = 0;
  v3 = *((unsigned int *)this + 30);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (i)
        DgnString::operator+=((DgnString *)(this + 10), " ");
      v5 = *((_DWORD *)this[14] + i);
      DgnTextFile::convertToDTFFormat((DgnTextFile *)((char *)this[29] + 16 * i), (const DgnString *)(this + 31), v2);
      if (v5 <= 3)
        DgnString::operator+=((_DWORD *)this + 20, (uint64_t)(this + 31));
    }
  }
  DgnString::operator+=((DgnString *)(this + 10), "\n");
  v6 = *((_DWORD *)this + 22);
  if (v6)
    v7 = (char *)this[10];
  else
    v7 = &byte_209A88803;
  v8 = v6 != 0;
  v9 = v6 - 1;
  if (v8)
    v10 = v9;
  else
    v10 = 0;
  (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)this[1] + 80))(this[1], v7, v10);
  if ((_DWORD)v3)
    bzero(this[27], v3);
}

uint64_t MrecInitLibrary_kernel(void)
{
  MrecInitModule_active_kernel();
  MrecInitModule_btlat_kernel();
  MrecInitModule_constran_kernel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_crumb_kernel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_latutil_kernel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_nbchoice_kernel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_recog_kernel();
  MrecInitModule_searchlm_kernel();
  MrecInitModule_sausage_kernel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_wordlat_kernel();
  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughKernel(void)
{
  MrecInitLibrarySet_throughNet();
  MrecInitLibrarySet_throughGerm();
  return MrecInitLibrary_kernel();
}

void MrecInitLibrary_lm(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_multilm_lm();
  MrecInitModule_recentb_lm();
  MrecInitModule_wordlm_lm();
  MrecInitModule_ngram2fsm_lm();
}

void MrecInitLibrarySet_throughLm(void)
{
  MrecInitLibrarySet_throughWord();
  MrecInitLibrary_lm();
}

FeatureFrame *DgnDelete<FeatureFrame>(FeatureFrame *result)
{
  _QWORD *v1;

  if (result)
  {
    FeatureFrame::~FeatureFrame(result);
    return (FeatureFrame *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t convertSDWordSpecsToTranscription(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  ModelMgr *v22;
  unint64_t *v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unsigned int v27;
  WordList *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v8 = a4;
  v12 = *(_DWORD *)(a3 + 12);
  v13 = a2 >= v12;
  v14 = a2 - v12;
  if ((_DWORD)v14 != 0 && v13)
    DgnArray<DgnPrimArray<double>>::reallocElts(a3, v14, 0);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 <= a2)
  {
    if (v15 < a2)
    {
      v18 = a2 - v15;
      v19 = 16 * v15;
      do
      {
        v20 = (_QWORD *)(*(_QWORD *)a3 + v19);
        *v20 = 0;
        v20[1] = 0;
        v19 += 16;
        --v18;
      }
      while (v18);
    }
  }
  else if ((int)v15 > (int)a2)
  {
    v16 = (int)v15;
    v17 = 16 * (int)v15 - 16;
    do
    {
      --v16;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a3 + v17);
      v17 -= 16;
    }
    while (v16 > (int)a2);
  }
  *(_DWORD *)(a3 + 8) = a2;
  v42 = 0;
  v43 = 0;
  if (a2)
  {
    v21 = 0;
    v41 = a2;
    v22 = (ModelMgr *)ModelMgr::smpModelMgr;
    do
    {
      v23 = (unint64_t *)(a1 + 16 * v21);
      v24 = *v23;
      if (HIDWORD(*v23))
        v25 = 0;
      else
        v25 = (*v23 & 0xFFFF0000) == 0;
      if (!v25)
        throwBadSdapiArgument("SDhVoc", *v23, a3, a4, a5, a6, a7, a8);
      if ((unsigned __int16)v24 - 1 >= 0x7B)
        throwBadSdapiArgument("SDhVoc", v24, a3, a4, a5, a6, a7, a8);
      if (v8 != (unsigned __int16)v24)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdrecog.cpp", 218, (uint64_t)"sdapi/sdrecog", 1, (uint64_t)"%llu", a7, a8, *v23);
      v26 = *(_QWORD *)(a1 + 16 * v21 + 8);
      v27 = v26 - 1;
      if ((v26 - 1) >> 32)
        throwBadSdapiArgument("SDhWord", *(_QWORD *)(a1 + 16 * v21 + 8), a3, a4, a5, a6, a7, a8);
      if (v27 >= 0xFFFFF4)
        throwBadSdapiArgument("SDhWord", v26, a3, a4, a5, a6, a7, a8);
      v28 = *(WordList **)(ModelMgr::getVocOrThrow(v22, v8, a3, a4, a5, a6, a7, a8) + 48);
      WordList::verifyVisible(v28, v27, v29, v30, v31, v32, v33, v34);
      WordList::lookupAll((uint64_t *)v28, v27, (uint64_t)&v42);
      *(_DWORD *)(*(_QWORD *)a3 + 16 * v21 + 8) = 0;
      if ((_DWORD)v43)
      {
        v35 = 0;
        do
        {
          v36 = *(_DWORD *)(v42 + 4 * v35);
          v37 = *(_QWORD *)a3 + 16 * v21;
          v39 = (_DWORD *)(v37 + 8);
          v38 = *(unsigned int *)(v37 + 8);
          if (v38 == *(_DWORD *)(v37 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(*(_QWORD *)a3 + 16 * v21, 1, 1);
            v38 = *v39;
          }
          *(_DWORD *)(*(_QWORD *)v37 + 4 * v38) = v36 & 0xFFFFFF | (v8 << 25);
          ++*v39;
          ++v35;
        }
        while (v35 < v43);
      }
      ++v21;
    }
    while (v21 != v41);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v42);
}

void sub_2097DF8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

NBestChoiceList *DgnDelete<NBestChoiceList>(NBestChoiceList *result)
{
  _QWORD *v1;

  if (result)
  {
    NBestChoiceList::~NBestChoiceList(result);
    return (NBestChoiceList *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t SDRecog_GuessPronsNonAcoustic(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9, unint64_t a10, unint64_t *a11, const char **a12, unsigned int a13, unsigned int a14, _DWORD *a15, _BYTE *a16, unsigned int a17)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char **v31;
  unint64_t *v32;
  const char **v33;
  _DWORD *v34;
  _BYTE *v35;
  const char *v36;
  uint64_t v37;
  const char **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  ParamSetHolderMgr *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  ParamSetHolderMgr *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  PronGuessParamSet *PronGuessParamSet;
  ParamSetHolderMgr *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *SearchParamSet;
  ModelMgr *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t VocOrThrow;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  StateMgr *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t Colls;
  int v113;
  uint64_t v114;
  unsigned __int16 *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  __int16 v154;
  RecogGrammar *v155;
  RecogGrammar *v156;
  unsigned int v157;
  int v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  const DgnString *v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  unint64_t v172;
  uint64_t *v173;
  unsigned int v174;
  unsigned int **StartStates;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t StateTransition;
  uint64_t v189;
  unint64_t v190;
  uint64_t *v191;
  unsigned int v192;
  unint64_t v193;
  int v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t RecogController;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int *NBestList;
  __int128 v214;
  __n128 v215;
  __n128 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t i;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v233;
  int v234;
  _DWORD *LatticeNBestParamSet;
  RecogCtlMgr *v236;
  uint64_t *v238;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  void *v244;
  uint64_t v245;
  int v246;
  void *v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  _OWORD v253[2];
  _QWORD v254[2];
  _QWORD v255[2];
  _QWORD v256[2];
  uint64_t v257;
  uint64_t v258;
  unsigned __int8 v259[24];
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD v264[2];
  _QWORD v265[2];
  _QWORD v266[2];
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  RecogGrammar *v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD v274[2];
  uint64_t v275;
  uint64_t v276;
  _BYTE v277[152];

  v22 = SdapiInsurance::SdapiInsurance(v277, "SDRecog_GuessPronsNonAcoustic", 1, 0, 239);
  if (!v277[97])
  {
    v223 = 0;
    goto LABEL_193;
  }
  v243 = a7;
  v30 = a13;
  v31 = a12;
  if (gbShowCalls)
  {
    v32 = a11;
    if (gbShowCallPointerArguments)
    {
      v33 = a12;
    }
    else
    {
      v32 = 0;
      v33 = 0;
    }
    if (gbShowCallPointerArguments)
      v34 = a15;
    else
      v34 = 0;
    if (gbShowCallPointerArguments)
      v35 = a16;
    else
      v35 = 0;
    v36 = "SD_TRUE";
    if (!a17)
      v36 = "SD_FALSE";
    xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, <SDh %lld>, <SDh %lld>, <SDh %lld>, <SDh %lld>, <SDh %lld>, <SDh %lld>, <SDh %lld>, <SDh %lld>, Masked:0x%016llx, Masked:0x%016llx, %llu, %llu, Masked:0x%016llx, Masked:0x%016llx, %.500s)\n", v23, v24, v25, v26, "SDRecog_GuessPronsNonAcoustic", a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, v32, v33,
      a13,
      a14,
      v34,
      v35,
      v36);
  }
  if (!a11)
    throwBadLengthForNullPointer(1, "DgnVerifyReadPtr", v24, v25, v26, v27, v28, v29);
  LOBYTE(v244) = 0;
  if (!a12 && a13)
  {
    throwBadLengthForNullPointer(a13, "DgnVerifyReadPtr", v24, v25, v26, v27, v28, v29);
    LOBYTE(v244) = 0;
LABEL_21:
    v37 = a13;
    v38 = a12;
    do
    {
      if (!*v38)
        throwBadStringPointer(v22, v23, v24, v25, v26, v27, v28, v29);
      LOBYTE(v244) = 0;
      ++v38;
      --v37;
    }
    while (v37);
    if (!a16)
      goto LABEL_29;
    goto LABEL_26;
  }
  LOBYTE(v244) = 0;
  if (a13)
    goto LABEL_21;
  LODWORD(v37) = 1;
  if (!a16)
    goto LABEL_29;
LABEL_26:
  LOBYTE(v244) = 0;
  if (!*a16)
  {
LABEL_29:
    v238 = 0;
    goto LABEL_30;
  }
  v238 = MemChunkAlloc(0x30uLL, 0);
  ReproMgr::ReproMgr(v238, a16, 3);
LABEL_30:
  v241 = a8;
  if ((_DWORD)v37)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdrecog.cpp", 2709, (uint64_t)"sdapi/sdrecog", 6, (uint64_t)"%s", v28, v29, (char)&errStr_sdapi_sdrecog_E_NO_SPOKENFORM);
    v275 = 0;
    v276 = 0;
  }
  else
  {
    v275 = 0;
    v276 = 0;
    do
    {
      v43 = *v31;
      if (!*v31 || !*v43)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdrecog.cpp", 2715, (uint64_t)"sdapi/sdrecog", 4, (uint64_t)"%s", v28, v29, (char)&errStr_sdapi_sdrecog_E_BAD_SPOKENFORM);
      DgnString::DgnString((DgnString *)&v244, v43);
      v44 = v276;
      if (v276 == (unint64_t)HIDWORD(v276))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v275, 1, 1);
        v44 = v276;
      }
      DgnString::DgnString((DgnString *)(v275 + 16 * v44), (const DgnString *)&v244);
      LODWORD(v276) = v276 + 1;
      DgnString::~DgnString((DgnString *)&v244);
      ++v31;
      --v30;
    }
    while (v30);
  }
  if (!a14)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdrecog.cpp", 2719, (uint64_t)"sdapi/sdrecog", 35, (uint64_t)"%s", v28, v29, (char)&errStr_sdapi_sdrecog_E_ZERO_MAXNEWPRONS);
  v236 = (RecogCtlMgr *)RecogCtlMgr::smpRecogCtlMgr;
  v45 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
  if (HIDWORD(a1))
    throwBadSdapiArgument("SDhParamSetHolder", a1, v39, v40, v41, v42, v28, v29);
  if ((a1 + 1) <= 1)
    throwBadSdapiArgument("SDhParamSetHolder", a1, v39, v40, v41, v42, v28, v29);
  if (HIDWORD(a2))
    throwBadSdapiArgument("SDhLatticeNBestParamSet", a2, v39, v40, v41, v42, v28, v29);
  if ((a2 + 1) <= 1)
    throwBadSdapiArgument("SDhLatticeNBestParamSet", a2, v39, v40, v41, v42, v28, v29);
  LatticeNBestParamSet = ParamSetHolderMgr::getLatticeNBestParamSet(v45, a1, a2, v40, v41, v42, v28, v29);
  v52 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
  if (HIDWORD(a3))
    throwBadSdapiArgument("SDhParamSetHolder", a3, v46, v47, v48, v49, v50, v51);
  if ((a3 + 1) <= 1)
    throwBadSdapiArgument("SDhParamSetHolder", a3, v46, v47, v48, v49, v50, v51);
  if (HIDWORD(a4))
    throwBadSdapiArgument("SDhPronGuessParamSet", a4, v46, v47, v48, v49, v50, v51);
  if ((a4 + 1) <= 1)
    throwBadSdapiArgument("SDhPronGuessParamSet", a4, v46, v47, v48, v49, v50, v51);
  PronGuessParamSet = (PronGuessParamSet *)ParamSetHolderMgr::getPronGuessParamSet(v52, a3, a4, v47, v48, v49, v50, v51);
  v60 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
  if (HIDWORD(a5))
    throwBadSdapiArgument("SDhParamSetHolder", a5, v53, v54, v55, v56, v57, v58);
  if ((a5 + 1) <= 1)
    throwBadSdapiArgument("SDhParamSetHolder", a5, v53, v54, v55, v56, v57, v58);
  if (HIDWORD(a6))
    throwBadSdapiArgument("SDhSearchParamSet", a6, v53, v54, v55, v56, v57, v58);
  if ((a6 + 1) <= 1)
    throwBadSdapiArgument("SDhSearchParamSet", a6, v53, v54, v55, v56, v57, v58);
  SearchParamSet = ParamSetHolderMgr::getSearchParamSet(v60, a5, a6, v54, v55, v56, v57, v58);
  v68 = (ModelMgr *)ModelMgr::smpModelMgr;
  if (*(_DWORD *)(ModelMgr::smpModelMgr + 296))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdrecog.cpp", 2743, (uint64_t)"sdapi/sdrecog", 44, (uint64_t)"%s", v65, v66, (char)&errStr_sdapi_sdrecog_E_RECOG_UNLOADEDLM);
  if (HIDWORD(v243) || (v243 & 0xFFFF0000) != 0)
    throwBadSdapiArgument("SDhVoc", v243, v61, v62, v63, v64, v65, v66);
  if ((unsigned __int16)v243 - 1 >= 0x7B)
    throwBadSdapiArgument("SDhVoc", v243, v61, v62, v63, v64, v65, v66);
  v69 = *a11;
  if (HIDWORD(*a11) || (v69 & 0xFFFF0000) != 0)
    throwBadSdapiArgument("SDhVoc", *a11, v61, v62, v63, v64, v65, v66);
  if ((unsigned __int16)v69 - 1 >= 0x7B)
    throwBadSdapiArgument("SDhVoc", v69, v61, v62, v63, v64, v65, v66);
  v70 = *(_QWORD *)(ModelMgr::getVocOrThrow(v68, (unsigned __int16)v69, v61, v62, v63, v64, v65, v66) + 48);
  VocOrThrow = ModelMgr::getVocOrThrow(v68, (unsigned __int16)v243, v71, v72, v73, v74, v75, v76);
  if ((DgnArray<DgnPrimArray<BOOL>>::operator==((uint64_t *)(v70 + 400), (uint64_t *)(*(_QWORD *)(VocOrThrow + 48) + 400)) & 1) == 0)errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdrecog.cpp", 2751, (uint64_t)"sdapi/sdrecog", 12, (uint64_t)"%s", v82, v83, (char)&errStr_sdapi_sdrecog_E_SEEDTABLE_MISMATCH);
  if ((unsigned __int16)v243 == (unsigned __int16)v69)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdrecog.cpp", 2753, (uint64_t)"sdapi/sdrecog", 1, (uint64_t)"%llu", v82, v83, *a11);
  v84 = ModelMgr::getVocOrThrow(v68, (unsigned __int16)v243, v78, v79, v80, v81, v82, v83);
  v91 = ModelMgr::getVocOrThrow(v68, (unsigned __int16)v69, v85, v86, v87, v88, v89, v90);
  if ((PhnMgr::operator==(v84 + 184, v91 + 184) & 1) == 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdrecog.cpp", 2757, (uint64_t)"sdapi/sdrecog", 37, (uint64_t)"%u %u", v96, v97, v243);
  v104 = *(StateMgr **)(ModelMgr::getVocOrThrow(v68, (unsigned __int16)v243, v92, v93, v94, v95, v96, v97) + 56);
  v105 = HIDWORD(v241);
  if (HIDWORD(v241))
    throwBadSdapiArgument("SDhState", v241, v98, v99, v100, v101, v102, v103);
  if ((v241 + 1) <= 1)
    throwBadSdapiArgument("SDhState", v241, v98, v99, v100, v101, v102, v103);
  Colls = StateMgr::getColls(v104, v241, 1, v99, v100, v101, v102, v103);
  if (a10 == -1)
  {
    v113 = 0xFFFF;
  }
  else if (a10 == -2)
  {
    v113 = 65534;
  }
  else
  {
    if (HIDWORD(a10) || (a10 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhColl", a10, v106, v107, v108, v109, v110, v111);
    v113 = (unsigned __int16)a10;
    if ((unsigned __int16)a10 == 0xFFFF || !(_WORD)a10)
      throwBadSdapiArgument("SDhColl", a10, v106, v107, v108, v109, v110, v111);
  }
  v114 = *(unsigned int *)(Colls + 8);
  if (!(_DWORD)v114)
    goto LABEL_103;
  v115 = *(unsigned __int16 **)Colls;
  v116 = 0xFFFFFFFFLL;
  while (1)
  {
    v117 = *v115++;
    if (v117 == v113)
      break;
    --v116;
    if (!--v114)
      goto LABEL_103;
  }
  if (!v116)
LABEL_103:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdrecog.cpp", 2765, (uint64_t)"sdapi/sdrecog", 14, (uint64_t)"%s", v110, v111, (char)&errStr_sdapi_sdrecog_E_BAD_COLL);
  v274[1] = 0;
  v274[0] = 0;
  convertSDWordSpecsToTranscription((uint64_t)a11, 1u, (uint64_t)v274, (unsigned __int16)v69, v108, v109, v110, v111);
  v124 = **(_DWORD **)v274[0];
  if (*(_WORD *)(*(_QWORD *)(v70 + 32) + 2 * (*(_QWORD *)&v124 & 0xFFFFFFLL)))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdrecog.cpp", 2779, (uint64_t)"sdapi/sdrecog", 3, (uint64_t)"%.500s", v122, v123, *(_BYTE *)(v70 + 224) + *(_DWORD *)(*(_QWORD *)(v70 + 200) + 4 * (*(_QWORD *)&v124 & 0xFFFFFFLL)));
  v125 = HIDWORD(a9);
  if (v238)
  {
    v126 = v238[2];
    ReproData::setPronGuessingVocId(v126, v243);
    if (a10 == -1)
    {
      v133 = -1;
    }
    else if (a10 == -2)
    {
      v133 = -2;
    }
    else
    {
      if (HIDWORD(a10) || (a10 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhColl", a10, v127, v128, v129, v130, v131, v132);
      if ((unsigned __int16)a10 != 0xFFFF && (_WORD)a10)
      {
        v133 = a10;
      }
      else
      {
        throwBadSdapiArgument("SDhColl", a10, v127, v128, v129, v130, v131, v132);
        v133 = a10;
      }
    }
    ReproData::setCollId(v126, v133);
    if (v105)
      throwBadSdapiArgument("SDhState", v241, v134, v135, v136, v137, v138, v139);
    if ((v241 + 1) <= 1)
      throwBadSdapiArgument("SDhState", v241, v134, v135, v136, v137, v138, v139);
    ReproData::setFragmentStateId(v126, v241);
    if (v125)
      throwBadSdapiArgument("SDhState", a9, v140, v141, v142, v143, v144, v145);
    if ((a9 + 1) <= 1)
      throwBadSdapiArgument("SDhState", a9, v140, v141, v142, v143, v144, v145);
    ReproData::setOptionalPronStateId(v126, a9);
    v244 = 0;
    v245 = 0;
    v263 = 0;
    v262 = 0;
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v244, 1, 1);
    *((_DWORD *)v244 + v245) = v124;
    LODWORD(v245) = v245 + 1;
    v146 = v263;
    if ((_DWORD)v263 == HIDWORD(v263))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v262, 1, 1);
      v146 = v263;
    }
    *(_DWORD *)(v262 + 4 * v146) = 1;
    LODWORD(v263) = v263 + 1;
    ReproData::setPronWords(v126, (uint64_t)&v244);
    ReproData::setPWSetSizes(v126, (uint64_t)&v262);
    ReproData::setSpokenFormIndex(v126, 0);
    ReproData::setSpokenForm(v126, (uint64_t)&v275);
    ReproData::setMaxNewProns(v126, a14);
    ReproData::setMaxClientProns(v126, a14);
    *((_WORD *)v238 + 12) = v69;
    *((_WORD *)v238 + 13) = v243;
    v272 = 0;
    v271 = 0;
    if (SearchParamSet)
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v271, 1, 1);
      v153 = v272;
      *((_QWORD *)v271 + v272) = SearchParamSet;
      LODWORD(v272) = v153 + 1;
    }
    if (a17 >= 2)
      throwBadSdapiArgument("SDBool", (int)a17, v147, v148, v149, v150, v151, v152);
    ReproMgr::saveReproParsAndModels((uint64_t)v238, 0, 0, 0, 0, 0, (uint64_t)LatticeNBestParamSet, 0, (uint64_t)PronGuessParamSet, (uint64_t)&v271, 0, a17 == 1);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v271);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v262);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v244);
  }
  v154 = a10;
  if (a10 == -1)
  {
    v154 = -1;
  }
  else if (a10 == -2)
  {
    v154 = -2;
  }
  else
  {
    if (HIDWORD(a10) || (a10 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhColl", a10, v118, v119, v120, v121, v122, v123);
    if ((unsigned __int16)a10 == 0xFFFF || !(_WORD)a10)
      throwBadSdapiArgument("SDhColl", a10, v118, v119, v120, v121, v122, v123);
  }
  if (v105)
    throwBadSdapiArgument("SDhState", v241, v118, v119, v120, v121, v122, v123);
  if ((v241 + 1) <= 1)
    throwBadSdapiArgument("SDhState", v241, v118, v119, v120, v121, v122, v123);
  if (v125)
    throwBadSdapiArgument("SDhState", a9, v118, v119, v120, v121, v122, v123);
  if ((a9 + 1) <= 1)
    throwBadSdapiArgument("SDhState", a9, v118, v119, v120, v121, v122, v123);
  PronGenerator::PronGenerator((PronGenerator *)&v271, (unsigned __int16)v243, v154, v241, a9, 0, PronGuessParamSet, v123);
  v270 = 0;
  v269 = 0;
  RecogGrammar::newSequenceRecogGrammar((RecogGrammar *)(unsigned __int16)v243);
  v156 = v155;
  v157 = v270;
  if ((_DWORD)v270 == HIDWORD(v270))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v269, 1, 1);
    v157 = v270;
  }
  *(_QWORD *)(v269 + 8 * v157) = v156;
  LODWORD(v270) = v157 + 1;
  v268 = 0;
  v267 = 0;
  DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v267, 1, 1);
  v158 = v268;
  *(_QWORD *)(v267 + 8 * v268) = 0;
  LODWORD(v268) = v158 + 1;
  DgnIOwnArray<HashKEV<unsigned int,unsigned int,StateIdScope> *>::DgnIOwnArray(v266, 1);
  v159 = MemChunkAlloc(0x68uLL, 0);
  v160 = HashKEV<unsigned int,unsigned int,StateIdScope>::HashKEV((uint64_t)v159, 0, 16);
  *(_QWORD *)v266[0] = v160;
  v161 = *(_QWORD *)v266[0];
  DgnIOwnArray<HashKEV<unsigned int,unsigned int,StateIdScope> *>::DgnIOwnArray(v265, 1);
  v162 = MemChunkAlloc(0x68uLL, 0);
  v163 = HashKEV<unsigned int,unsigned int,StateIdScope>::HashKEV((uint64_t)v162, 0, 16);
  *(_QWORD *)v265[0] = v163;
  v164 = *(_QWORD *)v265[0];
  DgnIOwnArray<HashKEV<unsigned int,unsigned int,StateIdScope> *>::DgnIOwnArray(v264, 1);
  v242 = v161;
  v165 = MemChunkAlloc(0x68uLL, 0);
  v166 = HashKEV<unsigned int,unsigned int,StateIdScope>::HashKEV((uint64_t)v165, 0, 16);
  *(_QWORD *)v264[0] = v166;
  v167 = *(_QWORD *)v264[0];
  RecogGrammar::newSequenceRecogGrammar((RecogGrammar *)(unsigned __int16)v243);
  v170 = v169;
  v171 = v270;
  if ((_DWORD)v270 == HIDWORD(v270))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v269, 1, 1);
    v171 = v270;
  }
  *(_QWORD *)(v269 + 8 * v171) = v170;
  LODWORD(v270) = v171 + 1;
  if ((_DWORD)v276)
  {
    v172 = 0;
    do
    {
      v173 = RecogGrammar::newPronGuessRecogGrammar((RecogGrammar *)&v271, 0, (CharInfo **)(v275 + 16 * v172), v168);
      v174 = v270;
      if ((_DWORD)v270 == HIDWORD(v270))
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v269, 1, 1);
        v174 = v270;
      }
      *(_QWORD *)(v269 + 8 * v174) = v173;
      LODWORD(v270) = v174 + 1;
      (*(void (**)(uint64_t *))(*v173 + 24))(v173);
      if (!v172)
      {
        StartStates = (unsigned int **)RecogGrammar::getStartStates((RecogGrammar *)v173);
        v182 = ModelMgr::getVocOrThrow((ModelMgr *)ModelMgr::smpModelMgr, (unsigned __int16)v243, v176, v177, v178, v179, v180, v181);
        StateTransition = StateMgr::getStateTransition(*(StateMgr **)(v182 + 56), **StartStates, 1, v183, v184, v185, v186, v187);
        if (*(_DWORD *)(StateTransition + 8))
        {
          v189 = 0;
          v190 = 0;
          do
          {
            HashKEV<unsigned int,unsigned int,CWIDScope>::add(v164, (int *)(*(_QWORD *)StateTransition + v189));
            ++v190;
            v189 += 4;
          }
          while (v190 < *(unsigned int *)(StateTransition + 8));
        }
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v170 + 16))(v170, v173);
      ++v172;
    }
    while (v172 < v276);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v170 + 24))(v170);
  (*(void (**)(RecogGrammar *, uint64_t))(*(_QWORD *)v156 + 16))(v156, v170);
  v191 = RecogGrammar::newEndOfUtteranceRecogGrammar((RecogGrammar *)(unsigned __int16)v271);
  v192 = v270;
  if ((_DWORD)v270 == HIDWORD(v270))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v269, 1, 1);
    v192 = v270;
  }
  *(_QWORD *)(v269 + 8 * v192) = v191;
  LODWORD(v270) = v192 + 1;
  (*(void (**)(RecogGrammar *, uint64_t *))(*(_QWORD *)v156 + 16))(v156, v191);
  (*(void (**)(RecogGrammar *))(*(_QWORD *)v156 + 24))(v156);
  RecogContext::RecogContext((RecogContext *)&v262);
  v261 = 0;
  v260 = 0;
  v244 = 0;
  v193 = realloc_array(0, &v244, 4uLL, 0, 0, 1);
  v260 = v244;
  HIDWORD(v261) = v193 >> 2;
  LODWORD(v261) = 1;
  *(_DWORD *)v244 = -50331650;
  RecogContext::setLeftContext((uint64_t)&v262, (uint64_t)&v260);
  RecogSpec::RecogSpec((RecogSpec *)v259, 0, 0, v243, 0xFFFF);
  RecogSpec::addLayer(v259, (uint64_t)SearchParamSet, 0, 1, *((_DWORD *)SearchParamSet + 68), *((_DWORD *)SearchParamSet + 67), *((_DWORD *)SearchParamSet + 53), *((_BYTE *)SearchParamSet + 369), *((double *)SearchParamSet + 31), *((_DWORD *)SearchParamSet + 50), *((_DWORD *)SearchParamSet + 52), 0, *((_DWORD *)SearchParamSet + 70), *((_DWORD *)SearchParamSet + 69), *((_DWORD *)SearchParamSet + 64), *((_DWORD *)SearchParamSet + 61), *((_DWORD *)SearchParamSet + 54), *((_DWORD *)SearchParamSet + 55), 0,
    0,
    *((_BYTE *)SearchParamSet + 447),
    0,
    0,
    1u,
    1u,
    1,
    1);
  v257 = 0;
  v258 = 0;
  DgnPrimArray<short>::reallocElts((uint64_t)&v257, 1, 1);
  v194 = v258;
  *(_WORD *)(v257 + 2 * v258) = 127;
  LODWORD(v258) = v194 + 1;
  v256[0] = 0;
  v256[1] = 0;
  v255[0] = 0;
  v255[1] = 0;
  v195 = RecogCtlMgr::newRecogController((uint64_t)v236, 0, (const RecogSpec *)v259, (uint64_t)v256, (uint64_t)v255, 0, 0, 0, 0, v242, v164, v167, 0, (uint64_t)&v257);
  RecogController = RecogCtlMgr::getRecogController(v236, v195, v196, v197, v198, v199, v200, v201);
  v254[0] = 0;
  v254[1] = 0;
  memset(v253, 0, sizeof(v253));
  v251 = 0;
  v252 = 0;
  v244 = 0;
  v203 = realloc_array(0, &v244, 8uLL, 0, 0, 1);
  v251 = v244;
  HIDWORD(v252) = v203 >> 3;
  LODWORD(v252) = 1;
  v204 = RecogGrammar::getStartStates(v156);
  *v251 = v204;
  v249 = 0;
  v250 = 0;
  v244 = 0;
  v205 = realloc_array(0, &v244, 8uLL, 0, 0, 1);
  v249 = v244;
  HIDWORD(v250) = v205 >> 3;
  LODWORD(v250) = 1;
  *(_QWORD *)v244 = 0;
  LOWORD(v234) = 0;
  LOWORD(v233) = 0;
  v206 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *, uint64_t *, _QWORD, _QWORD, _QWORD **, void **, int, _QWORD, _QWORD *, int, _QWORD, _QWORD, _QWORD, _OWORD *))(*(_QWORD *)RecogController + 24))(RecogController, (unsigned __int16)v243, 0, 0, SearchParamSet, &v262, 0, 0, &v251, &v249, v233, 0, v254, v234, 0, 0, 0, v253);
  v247 = 0;
  v248 = 0;
  NBestList = (unsigned int *)WordLattice::getNBestList((WordLattice *)v206, LatticeNBestParamSet[10]);
  v217 = NBestList[2];
  if (HIDWORD(v248) < v217)
  {
    v244 = 0;
    HIDWORD(v248) = realloc_array(v247, &v244, 48 * v217, 48 * v248, 48 * v248, 1)
                  / 0x30;
    v247 = v244;
  }
  if (v248 <= v217)
  {
    if (v248 < v217)
    {
      v220 = v217 - v248;
      v221 = (char *)v247 + 48 * v248;
      v214 = 0uLL;
      do
      {
        *(_OWORD *)(v221 + 28) = 0uLL;
        *(_OWORD *)v221 = 0uLL;
        *((_OWORD *)v221 + 1) = 0uLL;
        *((_DWORD *)v221 + 11) = -1;
        v221 += 48;
        --v220;
      }
      while (v220);
    }
  }
  else if ((int)v248 > (int)v217)
  {
    v218 = (int)v248;
    v219 = 48 * (int)v248 - 48;
    do
    {
      --v218;
      DgnIArray<Utterance *>::~DgnIArray((uint64_t)v247 + v219);
      v219 -= 48;
    }
    while (v218 > (int)v217);
  }
  LODWORD(v248) = v217;
  if ((_DWORD)v217)
  {
    for (i = 0; i != v217; ++i)
      RecogResultChoice::fillFromNBestChoice((unint64_t)v247 + 48 * i, *(uint64_t **)(*(_QWORD *)NBestList + 8 * i), *(_DWORD *)(v206 + 200), *(unsigned __int8 *)(v206 + 213), 0, 0, *(double *)&v214, v215, v216);
  }
  RecogCtlMgr::deleteRecogController(v236, v195, v207, v208, v209, v210, v211, v212);
  v246 = 0;
  if (!*(_BYTE *)(v206 + 209))
  {
    GssResults::GssResults(&v244, v274, 0, &v247, 0, &v267, v170, *(unsigned int *)(v273 + 60));
    v223 = 1;
    switch(GssResults::updateWordProns((uint64_t)&v244, a14, a14, 0, &v246, 0))
    {
      case 1u:
        break;
      case 2u:
        v223 = 2;
        break;
      case 3u:
        v223 = 3;
        break;
      case 4u:
        v223 = 4;
        break;
      default:
        v223 = 5;
        break;
    }
    GssResults::~GssResults((GssResults *)&v244);
    if (!a15)
      goto LABEL_182;
    goto LABEL_181;
  }
  v223 = 5;
  if (a15)
LABEL_181:
    *a15 = v246;
LABEL_182:
  if (v238)
  {
    ReproMgr::~ReproMgr((ReproMgr *)v238);
    MemChunkFree(v224, 0);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v206 + 48))(v206);
  MemChunkFree((_QWORD *)v206, 0);
  DgnDelete<NBestChoiceList>((NBestChoiceList *)NBestList);
  dismantleRecogGrammarIArray((uint64_t)&v269, v225, v226, v227, v228, v229, v230, v231);
  DgnArray<RecogResultChoice>::releaseAll((uint64_t)&v247);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v249);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v251);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v254);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v255);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v256);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v257);
  RecogSpec::~RecogSpec((RecogSpec *)v259);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v260);
  RecogContext::~RecogContext((RecogContext *)&v262);
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)v264);
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)v265);
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)v266);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v267);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v269);
  PronGenerator::~PronGenerator((PronGenerator *)&v271);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v274);
  DgnArray<DgnString>::releaseAll((uint64_t)&v275);
LABEL_193:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v277);
  return v223;
}

void sub_2097E0FE8()
{
  __cxa_end_catch();
  JUMPOUT(0x2097E0FF4);
}

AdaptControllerResults *DgnDelete<AdaptControllerResults>(AdaptControllerResults *result)
{
  _QWORD *v1;

  if (result)
  {
    AdaptControllerResults::~AdaptControllerResults(result);
    return (AdaptControllerResults *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnDelete<Segmentation>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnIOwnArray<PelSegment *>::releaseAll(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnArray<DgnPrimArray<BOOL>>::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  if (a1 == a2)
    return 1;
  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2 != *((_DWORD *)a2 + 2))
    return 0;
  if ((int)v2 < 1)
    return 1;
  v3 = *a1;
  v4 = *a2;
  result = 1;
  do
  {
    v6 = v2 - 1;
    if (v3 != v4)
    {
      v7 = *(unsigned int *)(v3 + 16 * (v2 - 1) + 8);
      if ((_DWORD)v7 != *(_DWORD *)(v4 + 16 * (v2 - 1) + 8))
        return 0;
      v8 = v7 - 1;
      while ((int)v8 + 1 >= 1)
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 16 * v6) + v8);
        v10 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 16 * v6) + v8--);
        if (v9 != v10)
          return 0;
      }
    }
  }
  while (v2-- > 1);
  return result;
}

_QWORD *DgnIOwnArray<HashKEV<unsigned int,unsigned int,StateIdScope> *>::DgnIOwnArray(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if ((_DWORD)a2)
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)a1, a2, 0);
    LODWORD(v4) = *((_DWORD *)a1 + 2);
    if (v4 > v2)
    {
      DgnIOwnArray<ParamSetBase *>::destructAt((uint64_t)a1, v2, v4 - v2);
      goto LABEL_8;
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v4 < v2)
  {
    v4 = v4;
    do
      *(_QWORD *)(*a1 + 8 * v4++) = 0;
    while (v2 != v4);
  }
LABEL_8:
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

uint64_t HashKEV<unsigned int,unsigned int,StateIdScope>::HashKEV(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C219148;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 12;
  else
    v7 = 16;
  *(_DWORD *)(a1 + 24) = 16;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2097E124C(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashKEV<unsigned int,unsigned int,StateIdScope>::~HashKEV(uint64_t a1)
{
  HashKEV<unsigned int,unsigned int,StateIdScope>::~HashKEV(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t HashKEV<unsigned int,unsigned int,StateIdScope>::~HashKEV(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C219148;
  if (*(_DWORD *)(a1 + 8))
    HashKEV<unsigned int,unsigned int,CWIDScope>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

_QWORD *DgnArray<RecogResultChoice>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 48 * v2 - 48;
    do
    {
      DgnIArray<Utterance *>::~DgnIArray(*(_QWORD *)a1 + v3);
      v3 -= 48;
    }
    while (v3 != -48);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void NBestChoiceList::~NBestChoiceList(NBestChoiceList *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
    MemChunkFree(v2, 0);
  *((_QWORD *)this + 3) = 0;
  DgnIOwnArray<NBestChoice *>::releaseAll((uint64_t)this);
}

_QWORD *DgnIOwnArray<NBestChoice *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<NBestChoice>(*(NBestChoice **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

NBestChoice *DgnDelete<NBestChoice>(NBestChoice *result)
{
  _QWORD *v1;

  if (result)
  {
    NBestChoice::~NBestChoice(result);
    return (NBestChoice *)MemChunkFree(v1, 0);
  }
  return result;
}

_QWORD *DgnIOwnArray<PelSegment *>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnIOwnArray<PelSegment *>::destructAt((uint64_t *)a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t *DgnIOwnArray<PelSegment *>::destructAt(uint64_t *result, int a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a3 + a2 > a2)
  {
    v3 = result;
    v4 = a2;
    v5 = a3 + a2 - 1;
    do
    {
      v6 = *v3;
      result = *(uint64_t **)(*v3 + 8 * v5);
      if (result)
      {
        result = (uint64_t *)MemChunkFree(result, 0);
        v6 = *v3;
      }
      *(_QWORD *)(v6 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

uint64_t ReproMgr::ReproMgr(uint64_t a1, char *a2, int a3)
{
  DgnString *v6;
  uint64_t *v7;
  ReproData *v8;

  DgnString::DgnString((DgnString *)a1);
  DgnString::operator=(v6, a2);
  ReproMgr::validateReproDir((ReproMgr *)a1);
  v7 = MemChunkAlloc(0x150uLL, 0);
  v8 = ReproData::ReproData((ReproData *)v7);
  *(_QWORD *)(a1 + 16) = v8;
  ReproData::setReproType(v8, a3);
  *(_DWORD *)(a1 + 24) = 8323199;
  *(_WORD *)(a1 + 28) = -1;
  *(_QWORD *)(a1 + 32) = -1;
  *(_BYTE *)(a1 + 40) = 0;
  return a1;
}

void sub_2097E1540(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void ReproMgr::validateReproDir(ReproMgr *this)
{
  DgnString *v2;
  int v3;
  int v4;
  unsigned int v5;
  const char *v6;
  const char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  const char *v42;
  int v43;
  char *v44;
  int v45;
  const char *v46;
  int v47;
  char *v48;
  int v49;
  const char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  const char *v58;
  int v59;

  v2 = DgnString::DgnString((DgnString *)&v58, this);
  v3 = v59;
  v4 = v59 - 1;
  if (!v59)
    v4 = 0;
  v5 = v4 - 1;
  v6 = v58;
  if (v58[v5] == 47)
  {
    DgnString::left(v2, v5, (DgnString *)&v56);
    DgnString::operator=((DgnString *)&v58, (DgnString *)&v56);
    DgnString::~DgnString((DgnString *)&v56);
    v3 = v59;
    v6 = v58;
  }
  if (v3)
    v7 = v6;
  else
    v7 = &byte_209A88803;
  v8 = (char **)FileSpec::FileSpec((FileSpec *)&v56, v7);
  if (!FileSpec::isValid(v8))
  {
    if (v57)
      LOBYTE(v11) = v56;
    else
      v11 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", 231, (uint64_t)"recogctl/repromgr", 1, (uint64_t)"%.500s", v9, v10, (char)v11);
  }
  v54 = 0;
  v55 = 0;
  v52 = 0;
  v53 = 0;
  FindMatchingFiles((uint64_t)&v56, (unsigned int *)&v54, (unint64_t)&v52);
  if ((_DWORD)v55)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      if (FileSpec::operator==((uint64_t)&v56, v54 + v14))
        v16 += *(unsigned __int8 *)(v52 + v15);
      ++v15;
      v14 += 16;
    }
    while (v15 < v55);
    if (v16)
    {
      if (v16 == 1)
        goto LABEL_25;
      v17 = "%.500s";
      v18 = 3;
      v19 = 247;
      if (!*((_DWORD *)this + 2))
        goto LABEL_21;
LABEL_23:
      v20 = *(char **)this;
      goto LABEL_24;
    }
  }
  v17 = "%.500s";
  v18 = 2;
  v19 = 246;
  if (*((_DWORD *)this + 2))
    goto LABEL_23;
LABEL_21:
  v20 = &byte_209A88803;
LABEL_24:
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", v19, (uint64_t)"recogctl/repromgr", v18, (uint64_t)v17, v12, v13, (char)v20);
LABEL_25:
  DgnString::operator+=((DgnString *)&v58, "/");
  operator+("*", (uint64_t)&v58, (uint64_t)&v50);
  if (v51)
    v21 = v50;
  else
    v21 = &byte_209A88803;
  FileSpec::FileSpec((FileSpec *)&v48, v21);
  if (!FileSpec::isValid(&v48))
  {
    if (v49)
      LOBYTE(v24) = (_BYTE)v48;
    else
      v24 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", 253, (uint64_t)"recogctl/repromgr", 1, (uint64_t)"%.500s", v22, v23, (char)v24);
  }
  operator+(".", (uint64_t)&v58, (uint64_t)&v46);
  if (v47)
    v25 = v46;
  else
    v25 = &byte_209A88803;
  FileSpec::FileSpec((FileSpec *)&v44, v25);
  if (!FileSpec::isValid(&v44))
  {
    if (v45)
      LOBYTE(v28) = (_BYTE)v44;
    else
      v28 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", 256, (uint64_t)"recogctl/repromgr", 1, (uint64_t)"%.500s", v26, v27, (char)v28);
  }
  operator+("..", (uint64_t)&v58, (uint64_t)&v42);
  if (v43)
    v29 = v42;
  else
    v29 = &byte_209A88803;
  FileSpec::FileSpec((FileSpec *)&v40, v29);
  if (!FileSpec::isValid(&v40))
  {
    if (v41)
      LOBYTE(v32) = (_BYTE)v40;
    else
      v32 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", 259, (uint64_t)"recogctl/repromgr", 1, (uint64_t)"%.500s", v30, v31, (char)v32);
  }
  if ((int)v55 >= 1)
  {
    v33 = 16 * v55 - 16;
    do
    {
      FileSpec::~FileSpec((FileSpec *)(v54 + v33));
      v33 -= 16;
    }
    while (v33 != -16);
  }
  LODWORD(v55) = 0;
  LODWORD(v53) = 0;
  FindMatchingFiles((uint64_t)&v48, (unsigned int *)&v54, (unint64_t)&v52);
  if ((_DWORD)v55)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    do
    {
      if ((!FileSpec::operator==((uint64_t)&v56, v54 + v34) || !*(_BYTE *)(v52 + v35))
        && !FileSpec::operator==((uint64_t)&v44, v54 + v34))
      {
        v36 += !FileSpec::operator==((uint64_t)&v40, v54 + v34);
      }
      ++v35;
      v34 += 16;
    }
    while (v35 < v55);
    if (v36)
    {
      if (*((_DWORD *)this + 2))
        v39 = *(char **)this;
      else
        v39 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", 278, (uint64_t)"recogctl/repromgr", 4, (uint64_t)"%.500s", v37, v38, (char)v39);
    }
  }
  FileSpec::~FileSpec((FileSpec *)&v40);
  DgnString::~DgnString((DgnString *)&v42);
  FileSpec::~FileSpec((FileSpec *)&v44);
  DgnString::~DgnString((DgnString *)&v46);
  FileSpec::~FileSpec((FileSpec *)&v48);
  DgnString::~DgnString((DgnString *)&v50);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v52);
  DgnArray<FileSpec>::releaseAll((uint64_t)&v54);
  FileSpec::~FileSpec((FileSpec *)&v56);
  DgnString::~DgnString((DgnString *)&v58);
}

void sub_2097E19B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 80));
  DgnString::~DgnString((DgnString *)(v1 - 64));
  _Unwind_Resume(a1);
}

void ReproMgr::~ReproMgr(ReproData **this)
{
  DgnDelete<ReproData>(this[2]);
  DgnString::~DgnString((DgnString *)this);
}

ReproData *DgnDelete<ReproData>(ReproData *result)
{
  _QWORD *v1;

  if (result)
  {
    ReproData::~ReproData(result);
    return (ReproData *)MemChunkFree(v1, 0);
  }
  return result;
}

void ReproMgr::saveReproParamSets(uint64_t a1, const char *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const char *v13;
  const char *v14;
  uint64_t *v15;
  char *MrecVersionNumberString;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  ModelMgr *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t VocOrThrow;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  const char *v50;
  int ParId;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *StringValue;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  const char *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int BoolValue;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  const char *v85;
  int IntValue;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double DoubleValue;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  unsigned int v151;
  uint64_t Utterance;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v196;
  int v198;
  char *v199;
  int v200;
  _BYTE v201[16];
  const char *v202;
  int v203;
  const char *v204;
  int v205;
  char *v206;
  int v207;
  uint64_t v208;
  uint64_t v209;

  DgnString::makeStringPrintf((DgnString *)"%s0.py", a2, (uint64_t)a3, a4, a5, "par");
  FileSpec::FileSpec((FileSpec *)v201);
  if (*(_DWORD *)(a1 + 8))
    v13 = *(const char **)a1;
  else
    v13 = &byte_209A88803;
  if (v203)
    v14 = v202;
  else
    v14 = &byte_209A88803;
  FileSpec::fillFromPathAndName((FileSpec *)v201, v13, v14);
  v15 = MemChunkAlloc(0x68uLL, 0);
  DgnFileStream::DgnFileStream(v15, 1, 1, v201);
  DgnString::DgnString((DgnString *)&v199);
  v196 = a4;
  DgnString::preAllocate((unint64_t)&v199, 256);
  MrecVersionNumberString = (char *)GetMrecVersionNumberString();
  DgnString::formatStringInPlace((DgnString *)&v199, MrecVersionNumberString);
  if (v200)
    v20 = v199;
  else
    v20 = &byte_209A88803;
  DgnStream::streamPrintf((DgnStream *)v15, "mrecVersion = %s\n", v17, v18, v19, v20);
  DgnStream::streamPrintf((DgnStream *)v15, "\n# Following is a list of preload sizes for the vocs loaded\n# during this repro.\n", v21, v22, v23);
  v24 = *(unsigned __int16 *)(a1 + 24);
  v25 = (ModelMgr *)ModelMgr::smpModelMgr;
  DgnStream::streamPrintf((DgnStream *)v15, "\nvocPreloadSizes =([\n", v26, v27, v28);
  if (v24 != 127)
  {
    VocOrThrow = ModelMgr::getVocOrThrow(v25, v24, v29, v30, v31, v32, v33, v34);
    DgnStream::streamPrintf((DgnStream *)v15, "    [ 'voc%u', %lld ],\n", v36, v37, v38, 0, *(_QWORD *)(VocOrThrow + 96));
  }
  DgnStream::streamPrintf((DgnStream *)v15, "    ])\n", v29, v30, v31);
  DgnStream::streamPrintf((DgnStream *)v15, "\n# Following is a list of parameters that are set to be\n# different from their default values\n", v39, v40, v41);
  v191 = a7;
  v192 = a8;
  v208 = 0;
  v209 = 0;
  GlobalParamMgr::ParamGetAllParamNames(GlobalParamMgr::smpGlobalParamMgr, (uint64_t)&v208);
  DgnStream::streamPrintf((DgnStream *)v15, "\n%s =([\n", v42, v43, v44, "pars");
  if ((_DWORD)v209)
  {
    v48 = 0;
    v49 = 0;
    do
    {
      if (*(_DWORD *)(v208 + v48 + 8))
        v50 = *(const char **)(v208 + v48);
      else
        v50 = &byte_209A88803;
      ParId = GlobalParamMgr::ParamGetParId((GlobalParamMgr *)GlobalParamMgr::smpGlobalParamMgr, v50);
      switch(GlobalParamMgr::ParamGetType((GlobalParamMgr *)GlobalParamMgr::smpGlobalParamMgr, ParId, v52, v53, v54, v55, v56, v57))
      {
        case 1u:
          BoolValue = GlobalParamMgr::ParamGetBoolValue((GlobalParamMgr *)GlobalParamMgr::smpGlobalParamMgr, ParId, 1, v46, v47, v58, v59, v60);
          v84 = GlobalParamMgr::ParamGetBoolValue((GlobalParamMgr *)GlobalParamMgr::smpGlobalParamMgr, ParId, 0, v79, v80, v81, v82, v83);
          if (BoolValue != v84)
          {
            v85 = "False";
            if (v84)
              v85 = "True";
            DgnStream::streamPrintf((DgnStream *)v15, "    [ '%s', %s ],\n", v45, v46, v47, v50, v85);
          }
          break;
        case 2u:
          IntValue = GlobalParamMgr::ParamGetIntValue(GlobalParamMgr::smpGlobalParamMgr, ParId, 1, v46, v47, v58, v59, v60);
          v92 = GlobalParamMgr::ParamGetIntValue(GlobalParamMgr::smpGlobalParamMgr, ParId, 0, v87, v88, v89, v90, v91);
          if ((_DWORD)v92 != IntValue)
            DgnStream::streamPrintf((DgnStream *)v15, "    [ '%s', %d ],\n", v45, v46, v47, v50, v92);
          break;
        case 3u:
          DoubleValue = GlobalParamMgr::ParamGetDoubleValue(GlobalParamMgr::smpGlobalParamMgr, ParId, 1, v46, v47, v58, v59, v60);
          v99 = GlobalParamMgr::ParamGetDoubleValue(GlobalParamMgr::smpGlobalParamMgr, ParId, 0, v94, v95, v96, v97, v98);
          if (v99 != DoubleValue)
          {
            DgnString::formatFloat((DgnString *)0xE, v99, (DgnString *)&v206);
            if (v207)
              v103 = v206;
            else
              v103 = &byte_209A88803;
            DgnStream::streamPrintf((DgnStream *)v15, "    [ '%s', %s ],\n", v100, v101, v102, v50, v103);
            goto LABEL_38;
          }
          break;
        case 4u:
        case 5u:
          DgnString::DgnString((DgnString *)&v206);
          StringValue = GlobalParamMgr::ParamGetStringValue((GlobalParamMgr *)GlobalParamMgr::smpGlobalParamMgr, ParId, 1, v61, v62, v63, v64, v65);
          DgnString::formatStringInPlace((DgnString *)&v206, StringValue);
          DgnString::DgnString((DgnString *)&v204);
          v72 = GlobalParamMgr::ParamGetStringValue((GlobalParamMgr *)GlobalParamMgr::smpGlobalParamMgr, ParId, 0, v67, v68, v69, v70, v71);
          DgnString::formatStringInPlace((DgnString *)&v204, v72);
          if (v205)
            v73 = v204;
          else
            v73 = &byte_209A88803;
          if (v207)
            v74 = v206;
          else
            v74 = &byte_209A88803;
          if (strcmp(v73, v74))
            DgnStream::streamPrintf((DgnStream *)v15, "    [ '%s', %s ],\n", v75, v76, v77, v50, v73);
          DgnString::~DgnString((DgnString *)&v204);
LABEL_38:
          DgnString::~DgnString((DgnString *)&v206);
          break;
        default:
          break;
      }
      ++v49;
      v48 += 16;
    }
    while (v49 < v209);
  }
  DgnStream::streamPrintf((DgnStream *)v15, "    ])\n", v45, v46, v47);
  DgnArray<DgnString>::releaseAll((uint64_t)&v208);
  v108 = ParamSetHolderMgr::smpParamSetHolderMgr;
  v208 = 0;
  v209 = 0;
  if (*(_DWORD *)(ParamSetHolderMgr::smpParamSetHolderMgr + 8))
  {
    v109 = 0;
    v110 = 0;
    do
    {
      v111 = *(_QWORD *)(*(_QWORD *)v108 + 8 * v109);
      if (v111)
      {
        DgnString::makeStringPrintf((DgnString *)"par%d.psh", v104, v105, v106, v107, v110);
        v112 = v209;
        if (v209 == (unint64_t)HIDWORD(v209))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v208, 1, 1);
          v112 = v209;
        }
        DgnString::DgnString((DgnString *)(v208 + 16 * v112), (const DgnString *)&v206);
        LODWORD(v209) = v209 + 1;
        FileSpec::FileSpec((FileSpec *)&v204);
        if (*(_DWORD *)(a1 + 8))
          v113 = *(const char **)a1;
        else
          v113 = &byte_209A88803;
        if (v207)
          v115 = v206;
        else
          v115 = &byte_209A88803;
        FileSpec::fillFromPathAndName((FileSpec *)&v204, v113, v115);
        v198 = 0;
        ParamSetHolder::saveParamSetHolder(v111, (uint64_t)&v204, &v198, 1, 1);
        v110 = (v110 + 1);
        FileSpec::~FileSpec((FileSpec *)&v204);
      }
      else
      {
        DgnString::DgnString((DgnString *)&v206, &byte_209A88803);
        v114 = v209;
        if (v209 == (unint64_t)HIDWORD(v209))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v208, 1, 1);
          v114 = v209;
        }
        DgnString::DgnString((DgnString *)(v208 + 16 * v114), (const DgnString *)&v206);
        LODWORD(v209) = v209 + 1;
      }
      DgnString::~DgnString((DgnString *)&v206);
      ++v109;
    }
    while (v109 < *(unsigned int *)(v108 + 8));
  }
  else
  {
    v110 = 0;
  }
  DgnStream::streamPrintf((DgnStream *)v15, "\n# Following is a listing of all the param sets in use at the\n# time of the repro dump.  For each one, a tuple is specified\n# which gives the name of the psh file, the type of the paramset\n# and the name of the paramset, in that order.\n", v105, v106, v107);
  DgnStream::streamPrintf((DgnStream *)v15, "\nnumberOfParamSetHolders = %d\n", v116, v117, v118, v110);
  v125 = fmtcheck("    ('%s', '%s', '%s'),\n", "%s %s %s");
  if (a2)
  {
    v126 = (*(uint64_t (**)(const char *))(*(_QWORD *)a2 + 32))(a2);
    if (v126)
    {
      DgnStream::streamPrintf((DgnStream *)v15, "\nprefiltererSets =([\n", v119, v120, v121);
      v130 = v208 + 16 * *(unsigned int *)(v126 + 28);
      if (*(_DWORD *)(v130 + 8))
        v131 = *(char **)v130;
      else
        v131 = &byte_209A88803;
      if (*(_DWORD *)(v126 + 16))
        v132 = *(char **)(v126 + 8);
      else
        v132 = &byte_209A88803;
      DgnStream::streamPrintf((DgnStream *)v15, v125, v127, v128, v129, v131, "PrefiltererBuild", v132);
      DgnStream::streamPrintf((DgnStream *)v15, "    ])\n", v133, v134, v135);
    }
  }
  if (a3)
  {
    DgnStream::streamPrintf((DgnStream *)v15, "\nadapterSets =([\n", v119, v120, v121);
    v139 = a3[1];
    if (v139)
    {
      v140 = v208 + 16 * *(unsigned int *)(v139 + 28);
      if (*(_DWORD *)(v140 + 8))
        v141 = *(char **)v140;
      else
        v141 = &byte_209A88803;
      if (*(_DWORD *)(v139 + 16))
        v142 = *(char **)(v139 + 8);
      else
        v142 = &byte_209A88803;
      DgnStream::streamPrintf((DgnStream *)v15, v125, v136, v137, v138, v141, "Adapter", v142);
    }
    v143 = a3[2];
    if (v143)
    {
      v144 = v208 + 16 * *(unsigned int *)(v143 + 28);
      if (*(_DWORD *)(v144 + 8))
        v145 = *(char **)v144;
      else
        v145 = &byte_209A88803;
      if (*(_DWORD *)(v143 + 16))
        v146 = *(char **)(v143 + 8);
      else
        v146 = &byte_209A88803;
      DgnStream::streamPrintf((DgnStream *)v15, v125, v136, v137, v138, v145, "PrefiltererSearch", v146);
    }
    v147 = a3[3];
    if (v147)
    {
      v148 = v208 + 16 * *(unsigned int *)(v147 + 28);
      if (*(_DWORD *)(v148 + 8))
        v149 = *(char **)v148;
      else
        v149 = &byte_209A88803;
      if (*(_DWORD *)(v147 + 16))
        v150 = *(char **)(v147 + 8);
      else
        v150 = &byte_209A88803;
      DgnStream::streamPrintf((DgnStream *)v15, v125, v136, v137, v138, v149, "Search_0", v150);
    }
    DgnStream::streamPrintf((DgnStream *)v15, "    ])\n", v136, v137, v138);
  }
  v151 = *(_DWORD *)(a1 + 36);
  if (v151 != -1)
  {
    Utterance = ChannelMgr::getUtterance((ChannelMgr *)ChannelMgr::smpChannelMgr, v151, v119, v120, v121, v122, v123, v124);
    if (Utterance)
    {
      v153 = *(_QWORD *)(Utterance + 432);
      if (v153)
      {
        DgnStream::streamPrintf((DgnStream *)v15, "\nchannelSets =([\n", v119, v120, v121);
        v157 = v208 + 16 * *(unsigned int *)(v153 + 28);
        if (*(_DWORD *)(v157 + 8))
          v158 = *(char **)v157;
        else
          v158 = &byte_209A88803;
        if (*(_DWORD *)(v153 + 16))
          v159 = *(char **)(v153 + 8);
        else
          v159 = &byte_209A88803;
        DgnStream::streamPrintf((DgnStream *)v15, v125, v154, v155, v156, v158, "Channel", v159);
        DgnStream::streamPrintf((DgnStream *)v15, "    ])\n", v160, v161, v162);
      }
    }
  }
  if (v196 || a5 || a6 || v191 || a9 || *(_DWORD *)(v192 + 8))
  {
    DgnStream::streamPrintf((DgnStream *)v15, "\nrecognitionSets =([\n", v119, v120, v121);
    if (v196)
    {
      v167 = v208 + 16 * *(unsigned int *)(v196 + 28);
      if (*(_DWORD *)(v167 + 8))
        v168 = *(char **)v167;
      else
        v168 = &byte_209A88803;
      if (*(_DWORD *)(v196 + 16))
        v169 = *(char **)(v196 + 8);
      else
        v169 = &byte_209A88803;
      DgnStream::streamPrintf((DgnStream *)v15, v125, v164, v165, v166, v168, "Confidence", v169);
    }
    if (a5)
    {
      v170 = v208 + 16 * *(unsigned int *)(a5 + 28);
      if (*(_DWORD *)(v170 + 8))
        v171 = *(char **)v170;
      else
        v171 = &byte_209A88803;
      if (*(_DWORD *)(a5 + 16))
        v172 = *(char **)(a5 + 8);
      else
        v172 = &byte_209A88803;
      DgnStream::streamPrintf((DgnStream *)v15, v125, v164, v165, v166, v171, "LatticeNBest", v172);
    }
    if (a6)
    {
      v173 = v208 + 16 * *(unsigned int *)(a6 + 28);
      if (*(_DWORD *)(v173 + 8))
        v174 = *(char **)v173;
      else
        v174 = &byte_209A88803;
      if (*(_DWORD *)(a6 + 16))
        v175 = *(char **)(a6 + 8);
      else
        v175 = &byte_209A88803;
      DgnStream::streamPrintf((DgnStream *)v15, v125, v164, v165, v166, v174, "PrefiltererSearch", v175);
    }
    if (v191)
    {
      v176 = v208 + 16 * *(unsigned int *)(v191 + 28);
      if (*(_DWORD *)(v176 + 8))
        v177 = *(char **)v176;
      else
        v177 = &byte_209A88803;
      if (*(_DWORD *)(v191 + 16))
        v178 = *(char **)(v191 + 8);
      else
        v178 = &byte_209A88803;
      DgnStream::streamPrintf((DgnStream *)v15, v125, v164, v165, v166, v177, "PronGuess", v178);
    }
    if (a9)
    {
      v179 = v208 + 16 * *(unsigned int *)(a9 + 28);
      if (*(_DWORD *)(v179 + 8))
        v180 = *(char **)v179;
      else
        v180 = &byte_209A88803;
      if (*(_DWORD *)(a9 + 16))
        v181 = *(char **)(a9 + 8);
      else
        v181 = &byte_209A88803;
      DgnStream::streamPrintf((DgnStream *)v15, v125, v164, v165, v166, v180, "SearchCrossLayer", v181);
    }
    if (*(_DWORD *)(v192 + 8))
    {
      v182 = 0;
      do
      {
        DgnString::makeStringPrintf((DgnString *)"Search_%d", v163, v164, v165, v166, v182);
        v186 = *(_QWORD *)(*(_QWORD *)v192 + 8 * v182);
        v187 = v208 + 16 * *(unsigned int *)(v186 + 28);
        if (*(_DWORD *)(v187 + 8))
          v188 = *(char **)v187;
        else
          v188 = &byte_209A88803;
        if (v207)
          v189 = v206;
        else
          v189 = &byte_209A88803;
        if (*(_DWORD *)(v186 + 16))
          v190 = *(char **)(v186 + 8);
        else
          v190 = &byte_209A88803;
        DgnStream::streamPrintf((DgnStream *)v15, v125, v183, v184, v185, v188, v189, v190);
        DgnString::~DgnString((DgnString *)&v206);
        ++v182;
      }
      while (v182 < *(unsigned int *)(v192 + 8));
    }
    DgnStream::streamPrintf((DgnStream *)v15, "    ])\n", v164, v165, v166);
  }
  (*(void (**)(uint64_t *))(*v15 + 88))(v15);
  (*(void (**)(uint64_t *))*v15)(v15);
  MemChunkFree(v15, 0);
  DgnArray<DgnString>::releaseAll((uint64_t)&v208);
  DgnString::~DgnString((DgnString *)&v199);
  FileSpec::~FileSpec((FileSpec *)v201);
  DgnString::~DgnString((DgnString *)&v202);
}

void sub_2097E25F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;

  va_start(va2, a12);
  va_start(va1, a12);
  va_start(va, a12);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  DgnArray<DgnString>::releaseAll(v12 - 120);
  DgnString::~DgnString((DgnString *)va);
  FileSpec::~FileSpec((FileSpec *)va1);
  DgnString::~DgnString((DgnString *)va2);
  _Unwind_Resume(a1);
}

void ReproMgr::saveReproVoc(const char **this, int a2)
{
  ModelMgr *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t VocOrThrow;
  const FileSpec *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t *v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  OsFile *v34;
  OsFile *v35;
  off_t FileSize;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  _BYTE v42[16];
  const char *v43;
  int v44;
  char *v45[2];
  _BYTE v46[16];
  void *v47;
  unsigned int v48;
  int v49;
  void *v50;

  v4 = (ModelMgr *)ModelMgr::smpModelMgr;
  FileSpec::FileSpec((FileSpec *)v46);
  FileSpec::FileSpec((FileSpec *)v45);
  if (*((_WORD *)this + 12) != 127)
  {
    DgnString::makeStringPrintf((DgnString *)"%s0.voc", v5, v6, v7, v8, "voc");
    if (*((_DWORD *)this + 2))
      v9 = *this;
    else
      v9 = &byte_209A88803;
    if (v44)
      v10 = v43;
    else
      v10 = &byte_209A88803;
    FileSpec::fillFromPathAndName((FileSpec *)v46, v9, v10);
    VocOrThrow = ModelMgr::getVocOrThrow(v4, *((unsigned __int16 *)this + 12), v11, v12, v13, v14, v15, v16);
    v18 = (const FileSpec *)(VocOrThrow + 104);
    if (FileSpec::isValid((char **)(VocOrThrow + 104)))
    {
      DgnString::makeStringPrintf((DgnString *)"%s0.svc", v19, v20, v21, v22, "voc");
      DgnString::operator=((DgnString *)&v43, (DgnString *)&v47);
      DgnString::~DgnString((DgnString *)&v47);
      FileSpec::FileSpec((FileSpec *)v42);
      if (*((_DWORD *)this + 2))
        v23 = *this;
      else
        v23 = &byte_209A88803;
      if (v44)
        v24 = v43;
      else
        v24 = &byte_209A88803;
      FileSpec::fillFromPathAndName((FileSpec *)v42, v23, v24);
      if (a2)
      {
        v25 = MemChunkAlloc(0x68uLL, 0);
        DgnFileStream::DgnFileStream(v25, 0, 0, v18);
        v26 = MemChunkAlloc(0x68uLL, 0);
        DgnFileStream::DgnFileStream(v26, 1, 0, v42);
        v50 = 0;
        v27 = realloc_array(0, &v50, 0x8000uLL, 0, 0, 1);
        v47 = v50;
        v48 = 0x8000;
        v49 = v27;
        while (1)
        {
          v28 = (*(uint64_t (**)(uint64_t *, void *, _QWORD, _QWORD))(*v25 + 72))(v25, v47, v48, 0);
          if (!(_DWORD)v28)
            break;
          (*(void (**)(uint64_t *, void *, uint64_t))(*v26 + 80))(v26, v47, v28);
        }
        (*(void (**)(uint64_t *))(*v26 + 88))(v26);
        (*(void (**)(uint64_t *))*v25)(v25);
        MemChunkFree(v25, 0);
        (*(void (**)(uint64_t *))*v26)(v26);
        MemChunkFree(v26, 0);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
      }
      else
      {
        v29 = MemChunkAlloc(0x68uLL, 0);
        DgnFileStream::DgnFileStream(v29, 1, 1, v42);
        if (*(_DWORD *)(VocOrThrow + 112))
          v33 = *(char **)v18;
        else
          v33 = &byte_209A88803;
        DgnStream::streamPrintf((DgnStream *)v29, "Did not copy svc file as per the client settings.\nLocation of svc file at time of dump was:\n%.500s\n", v30, v31, v32, v33);
        OsFile::openOsFile(v18, 0);
        v35 = v34;
        if (v34)
        {
          FileSize = OsFile::getFileSize(v34);
          DgnStream::streamPrintf((DgnStream *)v29, "Size of svc file at time of dump was:\n%llu\n", v37, v38, v39, FileSize);
          OsFile::~OsFile(v35);
          MemChunkFree(v40, 0);
        }
        (*(void (**)(uint64_t *))(*v29 + 88))(v29);
        (*(void (**)(uint64_t *))*v29)(v29);
        MemChunkFree(v29, 0);
      }
      FileSpec::~FileSpec((FileSpec *)v42);
    }
    DgnString::~DgnString((DgnString *)&v43);
    v41 = *((unsigned __int16 *)this + 12);
    if (v41 != 127)
    {
      LODWORD(v47) = 0;
      ModelMgr::saveVoc(v4, v41, (uint64_t)v46, v45, &v47, 0, (DFileChecksums *)1, 0, 0, 0);
    }
  }
  FileSpec::~FileSpec((FileSpec *)v45);
  FileSpec::~FileSpec((FileSpec *)v46);
}

void sub_2097E2A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  FileSpec::~FileSpec((FileSpec *)va);
  FileSpec::~FileSpec((FileSpec *)va1);
  _Unwind_Resume(a1);
}

void ReproMgr::saveReproParsAndModels(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, BOOL a12)
{
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t UserOrThrow;
  unsigned int v31;
  unsigned int v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  unint64_t v44;
  unint64_t i;
  WordLattice *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  const char *v56;
  int v57;
  char *v58[2];
  _BYTE v59[16];
  const char *v60;
  int v61;

  ReproMgr::saveReproParamSets(a1, a2, a5, a6, a7, a8, a9, a10, a11);
  if (*(_WORD *)(a1 + 26) != 127)
  {
    DgnString::makeStringPrintf((DgnString *)"%s0.voc", v16, v17, v18, v19, "pg");
    FileSpec::FileSpec((FileSpec *)v59);
    FileSpec::FileSpec((FileSpec *)v58);
    if (*(_DWORD *)(a1 + 8))
      v20 = *(char **)a1;
    else
      v20 = &byte_209A88803;
    if (v61)
      v21 = v60;
    else
      v21 = &byte_209A88803;
    FileSpec::fillFromPathAndName((FileSpec *)v59, v20, v21);
    v57 = 0;
    ModelMgr::saveVoc((ModelMgr *)ModelMgr::smpModelMgr, *(unsigned __int16 *)(a1 + 26), (uint64_t)v59, v58, &v57, 0, (DFileChecksums *)1, 0, 0, 0);
    FileSpec::~FileSpec((FileSpec *)v58);
    FileSpec::~FileSpec((FileSpec *)v59);
    DgnString::~DgnString((DgnString *)&v60);
  }
  if (*(__int16 *)(a1 + 28) != -1)
  {
    LODWORD(v58[0]) = 0;
    DgnString::makeStringPrintf((DgnString *)"%s0.usr", v16, v17, v18, v19, "usr");
    FileSpec::FileSpec((FileSpec *)v59);
    if (*(_DWORD *)(a1 + 8))
      v22 = *(const char **)a1;
    else
      v22 = &byte_209A88803;
    if (v61)
      v23 = v60;
    else
      v23 = &byte_209A88803;
    FileSpec::fillFromPathAndName((FileSpec *)v59, v22, v23);
    UserOrThrow = ModelMgr::getUserOrThrow((ModelMgr *)ModelMgr::smpModelMgr, *(unsigned __int16 *)(a1 + 28), v24, v25, v26, v27, v28, v29);
    User::saveUser(UserOrThrow, (uint64_t)v59, v58, 0, 1, 0);
    FileSpec::~FileSpec((FileSpec *)v59);
    DgnString::~DgnString((DgnString *)&v60);
  }
  if (a2)
  {
    v31 = (*(uint64_t (**)(const char *))(*(_QWORD *)a2 + 144))(a2);
    if (v31 != *(unsigned __int16 *)(a1 + 28))
    {
      v32 = v31;
      LODWORD(v58[0]) = 0;
      DgnString::makeStringPrintf((DgnString *)"%s0.usr", v16, v17, v18, v19, "pref");
      FileSpec::FileSpec((FileSpec *)v59);
      if (*(_DWORD *)(a1 + 8))
        v33 = *(const char **)a1;
      else
        v33 = &byte_209A88803;
      if (v61)
        v34 = v60;
      else
        v34 = &byte_209A88803;
      FileSpec::fillFromPathAndName((FileSpec *)v59, v33, v34);
      v41 = ModelMgr::getUserOrThrow((ModelMgr *)ModelMgr::smpModelMgr, v32, v35, v36, v37, v38, v39, v40);
      User::saveUser(v41, (uint64_t)v59, v58, 0, 1, 0);
      FileSpec::~FileSpec((FileSpec *)v59);
      DgnString::~DgnString((DgnString *)&v60);
    }
  }
  if (a3)
  {
    DgnString::makeStringPrintf((DgnString *)"%s0.prd", v16, v17, v18, v19, "pref");
    FileSpec::FileSpec((FileSpec *)v59);
    if (*(_DWORD *)(a1 + 8))
      v42 = *(const char **)a1;
    else
      v42 = &byte_209A88803;
    if (v61)
      v43 = v60;
    else
      v43 = &byte_209A88803;
    FileSpec::fillFromPathAndName((FileSpec *)v59, v42, v43);
    LODWORD(v58[0]) = 0;
    PrefilterResult::savePrefilterResult(a3, (uint64_t)v59, v58);
    FileSpec::~FileSpec((FileSpec *)v59);
    DgnString::~DgnString((DgnString *)&v60);
  }
  if (a4)
  {
    v44 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v44)
    {
      for (i = 0; i < v44; ++i)
      {
        v46 = *(WordLattice **)(*(_QWORD *)a4 + 8 * i);
        if (v46)
        {
          DgnString::makeStringPrintf((DgnString *)"%s%u.ltd", v16, v17, v18, v19, "ltd", i);
          FileSpec::FileSpec((FileSpec *)v59);
          if (*(_DWORD *)(a1 + 8))
            v47 = *(const char **)a1;
          else
            v47 = &byte_209A88803;
          if (v61)
            v48 = v60;
          else
            v48 = &byte_209A88803;
          FileSpec::fillFromPathAndName((FileSpec *)v59, v47, v48);
          LODWORD(v58[0]) = 0;
          WordLattice::saveLattice(v46, (uint64_t)v59, v58);
          FileSpec::~FileSpec((FileSpec *)v59);
          DgnString::~DgnString((DgnString *)&v60);
          v44 = *(unsigned int *)(a4 + 8);
        }
      }
    }
  }
  if (*(_DWORD *)(a1 + 32) != -1)
  {
    LODWORD(v58[0]) = 0;
    DgnString::makeStringPrintf((DgnString *)"%s0.sig", v16, v17, v18, v19, "sig");
    FileSpec::FileSpec((FileSpec *)v59);
    if (*(_DWORD *)(a1 + 8))
      v49 = *(const char **)a1;
    else
      v49 = &byte_209A88803;
    if (v61)
      v50 = v60;
    else
      v50 = &byte_209A88803;
    FileSpec::fillFromPathAndName((FileSpec *)v59, v49, v50);
    ChannelMgr::saveSigProc((ChannelMgr *)ChannelMgr::smpChannelMgr, *(_DWORD *)(a1 + 32), (uint64_t)v59, v58, 0, 1);
    FileSpec::~FileSpec((FileSpec *)v59);
    DgnString::~DgnString((DgnString *)&v60);
  }
  ReproMgr::saveReproVoc((const char **)a1, a12);
  LODWORD(v58[0]) = 0;
  DgnString::makeStringPrintf((DgnString *)"%s0.rep", v51, v52, v53, v54, "rep");
  FileSpec::FileSpec((FileSpec *)v59);
  if (*(_DWORD *)(a1 + 8))
    v55 = *(char **)a1;
  else
    v55 = &byte_209A88803;
  if (v61)
    v56 = v60;
  else
    v56 = &byte_209A88803;
  FileSpec::fillFromPathAndName((FileSpec *)v59, v55, v56);
  ReproData::saveReproData(*(ReproData **)(a1 + 16), (uint64_t)v59, v58);
  FileSpec::~FileSpec((FileSpec *)v59);
  DgnString::~DgnString((DgnString *)&v60);
}

void sub_2097E2F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  FileSpec::~FileSpec((FileSpec *)va);
  DgnString::~DgnString((DgnString *)va1);
  _Unwind_Resume(a1);
}

void ReproMgr::printSize(ReproMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int v66;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", 828, (DgnString *)&v65);
  if (v66)
    v16 = v65;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v65);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = sizeObject(this);
  v22 = sizeObject(this);
  v23 = sizeObject(this);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", 829, (DgnString *)&v65);
  if (v66)
    v28 = v65;
  else
    v28 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v28, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v65);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v29 = 4;
  else
    v29 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", 830, (DgnString *)&v65);
  if (v66)
    v34 = v65;
  else
    v34 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v34, v29, v29, 0);
  DgnString::~DgnString((DgnString *)&v65);
  *a4 += v29;
  *a5 += v29;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", 831, (DgnString *)&v65);
  if (v66)
    v39 = v65;
  else
    v39 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v39, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v65);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", 832, (DgnString *)&v65);
  if (v66)
    v44 = v65;
  else
    v44 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v44, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v65);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", 833, (DgnString *)&v65);
  if (v66)
    v49 = v65;
  else
    v49 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v49, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v65);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", 834, (DgnString *)&v65);
  if (v66)
    v54 = v65;
  else
    v54 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v54, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v65);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", 835, (DgnString *)&v65);
  if (v66)
    v59 = v65;
  else
    v59 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v59, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v65);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/repromgr.cpp", 836, (DgnString *)&v65);
  if (v66)
    v64 = v65;
  else
    v64 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, a3, &byte_209A88803, (35 - a3), (35 - a3), v64, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v65);
}

void sub_2097E3460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

_QWORD *DgnArray<FileSpec>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 16 * v2 - 16;
    do
    {
      FileSpec::~FileSpec((FileSpec *)(*(_QWORD *)a1 + v3));
      v3 -= 16;
    }
    while (v3 != -16);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void DgnSplitStringIntoTokens(unsigned __int8 *a1, char *__s, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int i;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;

  v8 = *(unsigned int *)(a3 + 8);
  if ((int)v8 >= 1)
  {
    v9 = 16 * v8 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*(_QWORD *)a3 + v9));
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(a3 + 8) = 0;
  v10 = *a1;
  if (*a1)
  {
    v11 = 0;
    do
    {
      v12 = v11;
      v11 = v11;
      v13 = (v12 + 1);
      while (!a4 || v10 != a4)
      {
        if (!strchr(__s, (char)v10))
        {
          v19 = *(unsigned int *)(a3 + 8);
          if (v19 == *(_DWORD *)(a3 + 12))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts(a3, 1, 1);
            v19 = *(unsigned int *)(a3 + 8);
          }
          DgnString::DgnString((DgnString *)(*(_QWORD *)a3 + 16 * v19));
          v20 = *(unsigned int *)(a3 + 8);
          *(_DWORD *)(a3 + 8) = v20 + 1;
          DgnString::preAllocate(*(_QWORD *)a3 + 16 * v20, 96);
          v21 = a1[v12];
          if (v21)
          {
            v11 = v12;
            if (!strchr(__s, (char)a1[v12]))
            {
              do
              {
                v11 = v13;
                DgnString::operator+=((_DWORD *)(*(_QWORD *)a3 + 16 * (*(_DWORD *)(a3 + 8) - 1)), v21);
                v22 = (char)a1[v13];
                if (!a1[v13])
                  break;
                v21 = a1[v13];
                v13 = (v13 + 1);
              }
              while (!strchr(__s, v22));
            }
          }
          else
          {
            v11 = v12;
          }
          goto LABEL_28;
        }
        v11 = (v12 + 1);
        v10 = a1[v11];
        v13 = (v13 + 1);
        v12 = v11;
        if (!v10)
          goto LABEL_28;
      }
      v14 = *(unsigned int *)(a3 + 8);
      if (v14 == *(_DWORD *)(a3 + 12))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts(a3, 1, 1);
        v14 = *(unsigned int *)(a3 + 8);
      }
      DgnString::DgnString((DgnString *)(*(_QWORD *)a3 + 16 * v14));
      v15 = *(unsigned int *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v15 + 1;
      DgnString::preAllocate(*(_QWORD *)a3 + 16 * v15, 96);
      DgnString::operator+=((_DWORD *)(*(_QWORD *)a3 + 16 * (*(_DWORD *)(a3 + 8) - 1)), a1[v11]);
      v16 = a1[(v12 + 1)];
      v17 = a1[(v12 + 1)] == 0;
      for (i = 1; a1[(i + v12)]; v17 = a1[(i + v12)] == 0)
      {
        if (v16 == a4)
          break;
        DgnString::operator+=((_DWORD *)(*(_QWORD *)a3 + 16 * (*(_DWORD *)(a3 + 8) - 1)), v16);
        v16 = a1[(++i + v12)];
      }
      if (!v17)
      {
        DgnString::operator+=((_DWORD *)(*(_QWORD *)a3 + 16 * (*(_DWORD *)(a3 + 8) - 1)), v16);
        ++i;
      }
      v11 = (i + v12);
LABEL_28:
      v10 = a1[v11];
    }
    while (v10);
  }
}

_QWORD *DgnSplitStringParValueIntoUintArray(char a1, int a2, unsigned __int8 *a3, int a4, unsigned int a5, unsigned int a6, uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v29;
  uint64_t v30;
  DgnString *v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  DgnSplitStringIntoTokens(a3, " ", (uint64_t)&v32, 0);
  if ((_DWORD)v33 == 1)
  {
LABEL_9:
    v17 = DgnString::atoui((char **)v32);
    v20 = v17;
    if (v17 < a5 || v17 > a6)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dstrutil.cpp", 328, (uint64_t)"mrecutil/dstrutil", 1, (uint64_t)"%.500s %.500s %u %u", v18, v19, a1);
    if (*((_DWORD *)a7 + 2))
    {
      v29 = 0;
      v30 = *a7;
      do
        *(_DWORD *)(v30 + 4 * v29++) = v20;
      while (v29 < *((unsigned int *)a7 + 2));
    }
    return DgnArray<DgnString>::releaseAll((uint64_t)&v32);
  }
  if (!(_DWORD)v33)
  {
    if (*((_DWORD *)a7 + 2))
    {
      v14 = 0;
      v15 = *a7;
      do
        *(_DWORD *)(v15 + 4 * v14++) = a4;
      while (v14 < *((unsigned int *)a7 + 2));
    }
    return DgnArray<DgnString>::releaseAll((uint64_t)&v32);
  }
  v16 = *((_DWORD *)a7 + 2);
  if ((_DWORD)v33 != v16)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dstrutil.cpp", 322, (uint64_t)"mrecutil/dstrutil", 4, (uint64_t)"%.500s %.500s %u %.500s", v12, v13, a1);
    if ((_DWORD)v33 == 1)
      goto LABEL_9;
    v16 = *((_DWORD *)a7 + 2);
  }
  if (v16)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = DgnString::atoui((char **)((char *)v32 + v22));
      v27 = v24;
      if (v24 < a5 || v24 > a6)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dstrutil.cpp", 341, (uint64_t)"mrecutil/dstrutil", 1, (uint64_t)"%.500s %.500s %u %u", v25, v26, a1);
      *(_DWORD *)(*a7 + 4 * v23++) = v27;
      v22 += 16;
    }
    while (v23 < *((unsigned int *)a7 + 2));
  }
  return DgnArray<DgnString>::releaseAll((uint64_t)&v32);
}

void sub_2097E396C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *DgnSplitStringParValueIntoDoubleArray(char a1, int a2, unsigned __int8 *a3, double a4, double a5, double a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v29;
  double *v30;
  DgnString *v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  DgnSplitStringIntoTokens(a3, " ", (uint64_t)&v32, 0);
  if ((_DWORD)v33 == 1)
  {
LABEL_9:
    v19 = DgnString::atodb((char **)v32);
    v20 = v19;
    if (v19 < a5 || v19 > a6)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dstrutil.cpp", 435, (uint64_t)"mrecutil/dstrutil", 3, (uint64_t)"%.500s %.500s %g %g", v17, v18, a1);
    v29 = *(unsigned int *)(a7 + 8);
    if ((_DWORD)v29)
    {
      v30 = *(double **)a7;
      do
      {
        *v30++ = v20;
        --v29;
      }
      while (v29);
    }
    return DgnArray<DgnString>::releaseAll((uint64_t)&v32);
  }
  if (!(_DWORD)v33)
  {
    v14 = *(unsigned int *)(a7 + 8);
    if ((_DWORD)v14)
    {
      v15 = *(double **)a7;
      do
      {
        *v15++ = a4;
        --v14;
      }
      while (v14);
    }
    return DgnArray<DgnString>::releaseAll((uint64_t)&v32);
  }
  v16 = *(_DWORD *)(a7 + 8);
  if ((_DWORD)v33 != v16)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dstrutil.cpp", 429, (uint64_t)"mrecutil/dstrutil", 4, (uint64_t)"%.500s %.500s %u %.500s", v12, v13, a1);
    if ((_DWORD)v33 == 1)
      goto LABEL_9;
    v16 = *(_DWORD *)(a7 + 8);
  }
  if (v16)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v26 = DgnString::atodb((char **)((char *)v32 + v22));
      v27 = v26;
      if (v26 < a5 || v26 > a6)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dstrutil.cpp", 448, (uint64_t)"mrecutil/dstrutil", 3, (uint64_t)"%.500s %.500s %g %g", v24, v25, a1);
      *(double *)(*(_QWORD *)a7 + 8 * v23++) = v27;
      v22 += 16;
    }
    while (v23 < *(unsigned int *)(a7 + 8));
  }
  return DgnArray<DgnString>::releaseAll((uint64_t)&v32);
}

void sub_2097E3BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

void MrecInitModule_paramset_mrecutil(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;

  if (!gParDebugShowActiveParamSetNameAndContents)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowActiveParamSetNameAndContents", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowActiveParamSetNameAndContents = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowActiveParamSetNameAndContents);
  }
  if (!gParDebugShowActiveParamSetNameAndDeltas)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugShowActiveParamSetNameAndDeltas", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugShowActiveParamSetNameAndDeltas = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowActiveParamSetNameAndDeltas);
  }
}

void throwWrongTypeForParamId(char a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramset.cpp", 84, (uint64_t)"mrecutil/paramset", 2, (uint64_t)"%d %.500s %.500s", a7, a8, a1);
}

void throwWrongQueryMode(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramset.cpp", 90, (uint64_t)"mrecutil/paramset", 4, (uint64_t)"%d %.500s", a7, a8, a1);
}

void throwParamSetSetFailed(const char *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramset.cpp", 96, (uint64_t)"mrecutil/paramset", 1, (uint64_t)"%.500s %.500s", a7, a8, (char)a1);
}

void throwWrongParamIdValue(char a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramset.cpp", 102, (uint64_t)"mrecutil/paramset", 3, (uint64_t)"%d %.500s", a7, a8, a1);
}

void ReproData::ReproData(ReproData *this)
{
  *((_QWORD *)this + 3) = 0;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  AdaptConfig::clear((ReproData *)((char *)this + 236));
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *(_QWORD *)this = 0x100000000;
  *((_WORD *)this + 4) = 127;
  *((_DWORD *)this + 3) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_DWORD *)this + 36) = 8323199;
  *((_DWORD *)this + 50) = 0;
  *(_QWORD *)((char *)this + 148) = 0;
  *(_QWORD *)((char *)this + 154) = 0;
  *((_QWORD *)this + 28) = 0x500000002;
  *((_BYTE *)this + 232) = 0;
}

void sub_2097E3EB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = v4;
  DgnArray<DgnString>::releaseAll(v6);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v5);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 80);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void ReproData::~ReproData(ReproData *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 320);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 288);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 272);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 256);
  AdaptConfig::clear((ReproData *)((char *)this + 236));
  DgnArray<DgnString>::releaseAll((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24);
}

uint64_t WordList::isGuessedWordByOptionalTag(WordList *this, unsigned int a2)
{
  uint64_t v4;
  _QWORD v6[2];

  if (*((_DWORD *)this + 129) < 0x3Eu)
    return 0;
  DgnString::DgnString((DgnString *)v6);
  WordList::getTagBits(this, a2, 0, (BitArray *)v6);
  v4 = (*(_DWORD *)(v6[0] + 4) >> 29) & 1;
  BitArray::~BitArray((BitArray *)v6);
  return v4;
}

void sub_2097E4050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BitArray::~BitArray((BitArray *)&a9);
  _Unwind_Resume(a1);
}

void ReproData::saveReproData(ReproData *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v6;
  _BYTE v7[16];

  DFileOwner::DFileOwner((DFileOwner *)v7);
  *a3 = 1;
  v6 = DFile::openDFile(a2, (const FileSpec *)1, 15, (uint64_t)v7);
  *a3 = 2;
  ReproData::saveReproData(a1, (DFile *)v6);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v7, 0);
  *a3 = 0;
  DFileOwner::~DFileOwner((DFileOwner *)v7);
}

void sub_2097E40E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DFileOwner::~DFileOwner((DFileOwner *)&a9);
  _Unwind_Resume(a1);
}

void ReproData::saveReproData(ReproData *this, DFile *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unsigned int v12;
  int v13;
  char *v14;
  const char *v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *CollationName;
  unint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  unsigned int *v109;
  unint64_t v110;
  unsigned int v111;
  unint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  unint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int v121;
  _DWORD *v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  _DWORD *v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  unint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *WordName;
  unint64_t v152;
  unint64_t v153;
  int v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  void *v170[2];
  void *v171;
  uint64_t v172;
  _DWORD *v173;
  uint64_t v174;
  void *v175;
  int v176;
  _DWORD *v177;
  uint64_t v178;
  int v179[2];
  uint64_t v180;
  uint64_t v181;
  void *v182[35];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v182);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v182, (uint64_t)a2, 0x4Cu, 1);
  v180 = 0;
  v181 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v182, sRPD_Versions, (uint64_t)&v180, v4, v5, v6, v7, v8);
  DgnTextFileWriter::setFileType((uint64_t)v182, "ReproData", (_QWORD *)(v180 + 8 * (v181 - 1)));
  DgnArray<DgnString>::DgnArray(v179, 5);
  v177 = 0;
  v178 = 0;
  v175 = 0;
  v9 = realloc_array(0, &v175, 0x14uLL, 0, 0, 1);
  v177 = v175;
  LODWORD(v178) = 5;
  HIDWORD(v178) = v9 >> 2;
  DgnString::operator=(*(DgnString **)v179, "Type");
  *v177 = 0;
  DgnString::operator=((DgnString *)(*(_QWORD *)v179 + 16), "UnsValue1");
  v177[1] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v179 + 32), "IntValue1");
  v177[2] = 1;
  DgnString::operator=((DgnString *)(*(_QWORD *)v179 + 48), "RealValue1");
  v177[3] = 2;
  DgnString::operator=((DgnString *)(*(_QWORD *)v179 + 64), "StrValue1");
  v177[4] = 0;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v182, (uint64_t)&v177, (uint64_t)v179);
  DgnString::DgnString((DgnString *)&v175);
  v10 = *(int *)this;
  if (v10 < 6)
    DgnString::operator=((DgnString *)&v175, off_24C21B3B8[v10]);
  if (v176)
    v11 = (const char *)v175;
  else
    v11 = (const char *)&unk_209A5CF99;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v182, "ReproType", v11);
  v12 = *(_DWORD *)this;
  if ((*(_DWORD *)this & 0xFFFFFFFE) == 2)
  {
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v182, "MaxNewProns", *((unsigned int *)this + 56));
    v12 = *(_DWORD *)this;
    if (*(_DWORD *)this == 2)
    {
      DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v182, "MaxClientProns", *((unsigned int *)this + 57));
      v12 = *(_DWORD *)this;
      if (*(_DWORD *)this == 2)
      {
        DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v182, "RemoveExistingClientProns", *((unsigned __int8 *)this + 232));
        v12 = *(_DWORD *)this;
      }
    }
  }
  if (!v12)
  {
    DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v182, "GeneratePrefilterResult", *((unsigned __int8 *)this + 16));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v182, "NumRecogLayers", *((unsigned int *)this + 1));
    v12 = *(_DWORD *)this;
  }
  if (v12 <= 1)
  {
    DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v182, "ForceRecogTranscript", *((unsigned __int8 *)this + 40));
    v12 = *(_DWORD *)this;
  }
  if (v12 == 4)
  {
    v13 = *((_DWORD *)this + 60);
    if (v13 == 1)
    {
      v14 = "BaumWelch";
    }
    else
    {
      if (v13 != 2)
      {
LABEL_20:
        if (v176)
          v15 = (const char *)v175;
        else
          v15 = (const char *)&unk_209A5CF99;
        DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v182, "AdaptAlignment", v15);
        v16 = "ChooseWarp";
        switch(*((_DWORD *)this + 59))
        {
          case 1:
            goto LABEL_31;
          case 2:
            v16 = "DTMM";
            goto LABEL_31;
          case 3:
            v16 = "MAP";
            goto LABEL_31;
          case 4:
            if (*((_BYTE *)this + 248))
            {
              v16 = "SAT";
            }
            else if (*((_BYTE *)this + 249))
            {
              v16 = "OUFA";
            }
            else
            {
              v16 = "TransAcc";
            }
LABEL_31:
            DgnString::operator=((DgnString *)&v175, v16);
            break;
          default:
            break;
        }
        if (v176)
          v17 = (const char *)v175;
        else
          v17 = (const char *)&unk_209A5CF99;
        DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v182, "AdaptMethod", v17);
        DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v182, "AdaptUserMeans", *((unsigned __int8 *)this + 244));
        DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v182, "AdaptUserDevs", *((unsigned __int8 *)this + 245));
        DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v182, "AdaptUserMixtureWeights", *((unsigned __int8 *)this + 246));
        DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v182, "AdaptUserDurations", *((unsigned __int8 *)this + 247));
        goto LABEL_36;
      }
      v14 = "Viterbi";
    }
    DgnString::operator=((DgnString *)&v175, v14);
    goto LABEL_20;
  }
LABEL_36:
  if (*((_WORD *)this + 4) != 127 && *((_DWORD *)this + 3))
  {
    DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "PrefiltererState");
    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, *((_DWORD *)this + 3));
    DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, 0);
    DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
    GetStateName(*((unsigned __int16 *)this + 4), *((_DWORD *)this + 3), v18, v19, v20, v21, v22, v23, (DgnString *)&v173);
    DgnString::operator=((DgnString *)&v175, (DgnString *)&v173);
    DgnString::~DgnString((DgnString *)&v173);
    if (v176)
      v24 = (char *)v175;
    else
      v24 = (char *)&unk_209A5CF99;
    DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, v24);
    DgnTextFileWriter::writeNextLine(v182);
  }
  switch(*(_DWORD *)this)
  {
    case 0:
      v109 = (unsigned int *)((char *)this + 4);
      if (!*((_DWORD *)this + 1))
      {
        v173 = 0;
        v174 = 0;
        goto LABEL_109;
      }
      v110 = 0;
      do
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "UsePrefilterer");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, v110);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, *(unsigned __int8 *)(*((_QWORD *)this + 3) + v110));
        DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, (char *)&unk_209A5CF99);
        DgnTextFileWriter::writeNextLine(v182);
        ++v110;
      }
      while (v110 < *v109);
      v111 = *v109;
      goto LABEL_104;
    case 1:
      v111 = *((_DWORD *)this + 1);
LABEL_104:
      v109 = (unsigned int *)((char *)this + 4);
      v173 = 0;
      v174 = 0;
      if (v111)
      {
        v171 = 0;
        v112 = realloc_array(0, &v171, 4 * v111, 0, 0, 1);
        v172 = 0;
        v173 = v171;
        v113 = *v109;
        LODWORD(v174) = v111;
        HIDWORD(v174) = v112 >> 2;
        v171 = 0;
        if ((_DWORD)v113)
        {
          v170[0] = 0;
          HIDWORD(v172) = realloc_array(0, v170, 4 * v113, 0, 0, 1) >> 2;
          v114 = v170[0];
          v171 = v170[0];
        }
        else
        {
          v114 = 0;
        }
      }
      else
      {
LABEL_109:
        v114 = 0;
        LODWORD(v113) = 0;
        LODWORD(v174) = 0;
        v171 = 0;
        v172 = 0;
      }
      LODWORD(v172) = v113;
      if (*(_DWORD *)this == 1)
      {
        *v173 = *((_DWORD *)this + 14);
        *v114 = *((_DWORD *)this + 22);
      }
      else if (*v109)
      {
        v115 = 0;
        v116 = *((_QWORD *)this + 8);
        v117 = v173;
        v118 = *((_QWORD *)this + 12);
        do
        {
          v117[v115] = *(_DWORD *)(v116 + 4 * v115);
          v114[v115] = *(_DWORD *)(v118 + 4 * v115);
          ++v115;
        }
        while (v115 < *v109);
      }
      v119 = v174;
      if ((_DWORD)v174)
      {
        v120 = 0;
        v121 = 0;
        v122 = v173;
        do
        {
          if (v122[v120])
          {
            v123 = 0;
            do
            {
              v124 = *(_DWORD *)(*((_QWORD *)this + 6) + 4 * (v121 + v123));
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "State");
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, v120);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, v124);
              DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
              GetStateName(*((unsigned __int16 *)this + 72), v124, v125, v126, v127, v128, v129, v130, (DgnString *)v170);
              DgnString::operator=((DgnString *)&v175, (DgnString *)v170);
              DgnString::~DgnString((DgnString *)v170);
              if (v176)
                v131 = (char *)v175;
              else
                v131 = (char *)&unk_209A5CF99;
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, v131);
              DgnTextFileWriter::writeNextLine(v182);
              ++v123;
              v122 = v173;
            }
            while (v123 < v173[v120]);
            v119 = v174;
            v121 += v123;
          }
          ++v120;
        }
        while (v120 < v119);
      }
      v132 = v172;
      if ((_DWORD)v172)
      {
        v133 = 0;
        v134 = 0;
        v135 = v171;
        do
        {
          if (v135[v133])
          {
            v136 = 0;
            do
            {
              v137 = *(unsigned __int16 *)(*((_QWORD *)this + 10) + 2 * (v134 + v136));
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "Rule");
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, v133);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, v137);
              DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
              GetRuleName(*((unsigned __int16 *)this + 72), v137, v138, v139, v140, v141, v142, v143, (DgnString *)v170);
              DgnString::operator=((DgnString *)&v175, (DgnString *)v170);
              DgnString::~DgnString((DgnString *)v170);
              if (v176)
                v144 = (char *)v175;
              else
                v144 = (char *)&unk_209A5CF99;
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, v144);
              DgnTextFileWriter::writeNextLine(v182);
              ++v136;
              v135 = v171;
            }
            while (v136 < *((_DWORD *)v171 + v133));
            v132 = v172;
            v134 += v136;
          }
          ++v133;
        }
        while (v133 < v132);
      }
      if (*((_DWORD *)this + 30))
      {
        v145 = 0;
        do
        {
          v146 = *(_DWORD *)(*((_QWORD *)this + 14) + 4 * v145);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "LeftContextWord");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, 0);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, 0);
          DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
          WordName = GetWordName(v146 >> 25, v146 & 0xFFFFFF, 1, 1, v147, v148, v149, v150);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, WordName);
          DgnTextFileWriter::writeNextLine(v182);
          ++v145;
        }
        while (v145 < *((unsigned int *)this + 30));
      }
      v152 = *((unsigned int *)this + 70);
      if ((_DWORD)v152)
      {
        v153 = 0;
        v154 = 0;
        v155 = *((_QWORD *)this + 34);
        do
        {
          if (*(_DWORD *)(v155 + 4 * v153))
          {
            v156 = 0;
            do
            {
              v157 = *(_DWORD *)(*((_QWORD *)this + 32) + 4 * (v154 + v156));
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "TranscriptWord");
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, v153);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, 0);
              DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
              v162 = GetWordName(v157 >> 25, v157 & 0xFFFFFF, 0, 0, v158, v159, v160, v161);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, v162);
              DgnTextFileWriter::writeNextLine(v182);
              ++v156;
              v155 = *((_QWORD *)this + 34);
            }
            while (v156 < *(_DWORD *)(v155 + 4 * v153));
            v152 = *((unsigned int *)this + 70);
            v154 += v156;
          }
          ++v153;
        }
        while (v153 < v152);
      }
      if (*((_DWORD *)this + 34))
      {
        v163 = 0;
        do
        {
          v164 = *(_DWORD *)(*((_QWORD *)this + 16) + 4 * v163);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "InjectWord");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, 0);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, 0);
          DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
          v169 = GetWordName(v164 >> 25, v164 & 0xFFFFFF, 0, 0, v165, v166, v167, v168);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, v169);
          DgnTextFileWriter::writeNextLine(v182);
          ++v163;
        }
        while (v163 < *((unsigned int *)this + 34));
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v171);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v173);
      break;
    case 2:
    case 3:
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "FragmentState");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, *((_DWORD *)this + 37));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, 0);
      DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
      GetStateName(*((unsigned __int16 *)this + 73), *((_DWORD *)this + 37), v25, v26, v27, v28, v29, v30, (DgnString *)&v173);
      DgnString::operator=((DgnString *)&v175, (DgnString *)&v173);
      DgnString::~DgnString((DgnString *)&v173);
      if (v176)
        v31 = (char *)v175;
      else
        v31 = (char *)&unk_209A5CF99;
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, v31);
      DgnTextFileWriter::writeNextLine(v182);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "OptionalPronState");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, *((_DWORD *)this + 38));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, 0);
      DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
      GetStateName(*((unsigned __int16 *)this + 73), *((_DWORD *)this + 38), v32, v33, v34, v35, v36, v37, (DgnString *)&v173);
      DgnString::operator=((DgnString *)&v175, (DgnString *)&v173);
      DgnString::~DgnString((DgnString *)&v173);
      if (v176)
        v38 = (char *)v175;
      else
        v38 = (char *)&unk_209A5CF99;
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, v38);
      DgnTextFileWriter::writeNextLine(v182);
      if (*(_DWORD *)this == 2)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "BackoffState");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, *((_DWORD *)this + 39));
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, 0);
        DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
        GetStateName(*((unsigned __int16 *)this + 73), *((_DWORD *)this + 39), v39, v40, v41, v42, v43, v44, (DgnString *)&v173);
        DgnString::operator=((DgnString *)&v175, (DgnString *)&v173);
        DgnString::~DgnString((DgnString *)&v173);
        if (v176)
          v45 = (char *)v175;
        else
          v45 = (char *)&unk_209A5CF99;
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, v45);
        DgnTextFileWriter::writeNextLine(v182);
      }
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "Collation");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, 0);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, 0);
      DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
      CollationName = (char *)GetCollationName(*((unsigned __int16 *)this + 73), *((unsigned __int16 *)this + 80), v46, v47, v48, v49, v50, v51);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, CollationName);
      DgnTextFileWriter::writeNextLine(v182);
      v53 = *((unsigned int *)this + 48);
      if ((_DWORD)v53)
      {
        v54 = 0;
        v55 = 0;
        v56 = *((_QWORD *)this + 23);
        do
        {
          if (*(_DWORD *)(v56 + 4 * v54))
          {
            v57 = 0;
            do
            {
              v58 = *(_DWORD *)(*((_QWORD *)this + 21) + 4 * (v55 + v57));
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "PronWord");
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, v54);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, 0);
              DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
              v63 = GetWordName(v58 >> 25, v58 & 0xFFFFFF, 0, 0, v59, v60, v61, v62);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, v63);
              DgnTextFileWriter::writeNextLine(v182);
              ++v57;
              v56 = *((_QWORD *)this + 23);
            }
            while (v57 < *(_DWORD *)(v56 + 4 * v54));
            v53 = *((unsigned int *)this + 48);
            v55 += v57;
          }
          ++v54;
        }
        while (v54 < v53);
      }
      if (*((_DWORD *)this + 54))
      {
        v64 = 0;
        v65 = 0;
        do
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "SpokenForm");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, *((_DWORD *)this + 50));
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, v65);
          DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
          v66 = *((_QWORD *)this + 26) + v64;
          if (*(_DWORD *)(v66 + 8))
            v67 = *(char **)v66;
          else
            v67 = (char *)&unk_209A5CF99;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, v67);
          DgnTextFileWriter::writeNextLine(v182);
          ++v65;
          v64 += 16;
        }
        while (v65 < *((unsigned int *)this + 54));
      }
      break;
    case 4:
    case 5:
      if (*((_DWORD *)this + 14))
      {
        v68 = 0;
        do
        {
          v69 = *(_DWORD *)(*((_QWORD *)this + 6) + 4 * v68);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "State");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, 0);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, v69);
          DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
          GetStateName(*((unsigned __int16 *)this + 72), v69, v70, v71, v72, v73, v74, v75, (DgnString *)&v173);
          DgnString::operator=((DgnString *)&v175, (DgnString *)&v173);
          DgnString::~DgnString((DgnString *)&v173);
          if (v176)
            v76 = (char *)v175;
          else
            v76 = (char *)&unk_209A5CF99;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, v76);
          DgnTextFileWriter::writeNextLine(v182);
          ++v68;
        }
        while (v68 < *((unsigned int *)this + 14));
      }
      if (*((_DWORD *)this + 82))
      {
        v77 = 0;
        do
        {
          v78 = *(_DWORD *)(*((_QWORD *)this + 40) + 4 * v77);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "SkipState");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, v78);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, 0);
          DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
          GetStateName(*((unsigned __int16 *)this + 72), v78, v79, v80, v81, v82, v83, v84, (DgnString *)&v173);
          DgnString::operator=((DgnString *)&v175, (DgnString *)&v173);
          DgnString::~DgnString((DgnString *)&v173);
          if (v176)
            v85 = (char *)v175;
          else
            v85 = (char *)&unk_209A5CF99;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, v85);
          DgnTextFileWriter::writeNextLine(v182);
          ++v77;
        }
        while (v77 < *((unsigned int *)this + 82));
      }
      if (*((_DWORD *)this + 22))
      {
        v86 = 0;
        do
        {
          v87 = *(unsigned __int16 *)(*((_QWORD *)this + 10) + 2 * v86);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "Rule");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, 0);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, v87);
          DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, 0.0);
          GetRuleName(*((unsigned __int16 *)this + 72), v87, v88, v89, v90, v91, v92, v93, (DgnString *)&v173);
          DgnString::operator=((DgnString *)&v175, (DgnString *)&v173);
          DgnString::~DgnString((DgnString *)&v173);
          if (v176)
            v94 = (char *)v175;
          else
            v94 = (char *)&unk_209A5CF99;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, v94);
          DgnTextFileWriter::writeNextLine(v182);
          ++v86;
        }
        while (v86 < *((unsigned int *)this + 22));
      }
      v95 = *((unsigned int *)this + 70);
      if ((_DWORD)v95)
      {
        v96 = 0;
        v97 = 0;
        v98 = *((_DWORD *)this + 78);
        v99 = *((_QWORD *)this + 34);
        do
        {
          if (*(_DWORD *)(v99 + 4 * v96))
          {
            v100 = 0;
            do
            {
              v101 = *(_DWORD *)(*((_QWORD *)this + 32) + 4 * (v97 + v100));
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 0, "TranscriptWord");
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v182, 1u, v96);
              if (v98)
                v102 = *(_DWORD *)(*((_QWORD *)this + 38) + 4 * v96);
              else
                v102 = -1;
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v182, 2u, v102);
              v103 = 0.0;
              if (*(_DWORD *)this == 4)
                v103 = *(double *)(*((_QWORD *)this + 36) + 8 * v96);
              DgnTextFileWriter::setLineFieldRealValue((DgnTextFileWriter *)v182, 3u, v103);
              v108 = GetWordName(v101 >> 25, v101 & 0xFFFFFF, 0, 0, v104, v105, v106, v107);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v182, 4u, v108);
              DgnTextFileWriter::writeNextLine(v182);
              ++v100;
              v99 = *((_QWORD *)this + 34);
            }
            while (v100 < *(_DWORD *)(v99 + 4 * v96));
            v95 = *((unsigned int *)this + 70);
            v97 += v100;
          }
          ++v96;
        }
        while (v96 < v95);
      }
      break;
    default:
      break;
  }
  DgnString::~DgnString((DgnString *)&v175);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v177);
  DgnArray<DgnString>::releaseAll((uint64_t)v179);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v180);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v182);
}

void sub_2097E51AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  va_list va3;
  uint64_t v18;
  uint64_t v19;
  va_list va4;
  uint64_t v21;
  va_list va5;

  va_start(va5, a6);
  va_start(va4, a6);
  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v16 = va_arg(va4, _QWORD);
  v18 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v19 = va_arg(va5, _QWORD);
  v21 = va_arg(va5, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnArray<DgnString>::releaseAll((uint64_t)va3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va4);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va5);
  _Unwind_Resume(a1);
}

_DWORD *ReproData::setReproType(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

uint64_t ReproData::setPronGuessingVocId(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 146) = a2;
  return this;
}

uint64_t ReproData::setFragmentStateId(uint64_t this, int a2)
{
  *(_DWORD *)(this + 148) = a2;
  return this;
}

uint64_t ReproData::setOptionalPronStateId(uint64_t this, int a2)
{
  *(_DWORD *)(this + 152) = a2;
  return this;
}

uint64_t ReproData::setCollId(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 160) = a2;
  return this;
}

unint64_t ReproData::setPronWords(uint64_t a1, uint64_t a2)
{
  return DgnPrimArray<int>::copyArraySlice(a1 + 168, (uint64_t *)a2, 0, *(_DWORD *)(a2 + 8));
}

unint64_t ReproData::setPWSetSizes(uint64_t a1, uint64_t a2)
{
  return DgnPrimArray<int>::copyArraySlice(a1 + 184, (uint64_t *)a2, 0, *(_DWORD *)(a2 + 8));
}

uint64_t ReproData::setSpokenFormIndex(uint64_t this, int a2)
{
  *(_DWORD *)(this + 200) = a2;
  return this;
}

void ReproData::setSpokenForm(uint64_t a1, uint64_t a2)
{
  DgnArray<DgnString>::copyArraySlice(a1 + 208, (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8));
}

uint64_t ReproData::setMaxNewProns(uint64_t this, int a2)
{
  *(_DWORD *)(this + 224) = a2;
  return this;
}

uint64_t ReproData::setMaxClientProns(uint64_t this, int a2)
{
  *(_DWORD *)(this + 228) = a2;
  return this;
}

uint64_t verifyTokenizerHandle(unint64_t a1, const char *a2)
{
  uint64_t Registry;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *exception;
  char *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  Registry = TRegisterable<TTokenizer>::getRegistry();
  v5 = TBaseRegistry<TTokenizer *>::find(Registry, a1);
  if (*(_QWORD **)(Registry + 16) == v5)
  {
    conditionalAssert(a2, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 45, v6, v7);
    exception = __cxa_allocate_exception(0x28uLL);
    v10 = (char *)a2;
    v11 = exception;
    std::string::basic_string[abi:ne180100]<0>(&v14, v10);
    *v11 = aPpx;
    v12 = (std::string *)(v11 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v13 = v14;
      v11[3] = v15;
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    *v11 = &unk_24C2148C0;
    v11[4] = 3;
  }
  return *v5;
}

void sub_2097E542C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TRegisterable<TTokenizer>::getRegistry()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    TRegisterable<TTokenizer>::getRegistry(void)::s_registry = (uint64_t)v2;
  }
  return TRegisterable<TTokenizer>::getRegistry(void)::s_registry;
}

void sub_2097E54D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *TBaseRegistry<TTokenizer *>::find(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  if (!a2)
    return *(_QWORD **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  if (a2 > ((uint64_t)v3 - v4) >> 3)
    return v3;
  v5 = v4 + 8 * a2;
  v7 = *(_QWORD *)(v5 - 8);
  result = (_QWORD *)(v5 - 8);
  if (!v7 || result == v3)
    return v3;
  while (!*result)
  {
    if (++result == v3)
      return v3;
  }
  return result;
}

void TApiException::~TApiException(void **this)
{
  *this = (void *)aPpx;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = (void *)aPpx;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD149A8);
}

uint64_t saveDump(TTokenizer *a1, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
  int DirSep;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  TEnvManager *DataManager;
  int v22;
  _QWORD v24[2];
  _QWORD *v25;
  char *__s;
  __int128 v27;
  _BYTE v28[256];
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33[1024];
  char v34[1024];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  DirSep = getDirSep();
  sprintf(v34, "%s%ctoken.txt", a6, DirSep);
  std::ofstream::basic_ofstream(&v30);
  TOutputStream::TOutputStream(&v25, &v30, (uint64_t)v34, *((_QWORD *)a1 + 5) + 240);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"ParamConfig=", 12);
  v13 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)a2, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  __s = v28;
  v27 = xmmword_209A57DD0;
  v29 = 1;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Text=", 5);
  TBuffer<char>::resize((uint64_t)&__s, 0);
  slashEscape((uint64_t)a4, (uint64_t)&__s);
  if (*((_QWORD *)&v27 + 1) >= (unint64_t)v27)
  {
    if (v29)
    {
      LOBYTE(v24[0]) = 0;
      TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v27 + 1), (char *)v24, 1uLL);
      --*((_QWORD *)&v27 + 1);
    }
    else if ((_QWORD)v27)
    {
      __s[(_QWORD)v27 - 1] = 0;
    }
  }
  else
  {
    __s[*((_QWORD *)&v27 + 1)] = 0;
  }
  v14 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)__s, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Left=", 5);
  if (a3)
  {
    TBuffer<char>::resize((uint64_t)&__s, 0);
    slashEscape((uint64_t)a3, (uint64_t)&__s);
    if (*((_QWORD *)&v27 + 1) >= (unint64_t)v27)
    {
      if (v29)
      {
        LOBYTE(v24[0]) = 0;
        TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v27 + 1), (char *)v24, 1uLL);
        --*((_QWORD *)&v27 + 1);
      }
      else if ((_QWORD)v27)
      {
        __s[(_QWORD)v27 - 1] = 0;
      }
    }
    else
    {
      __s[*((_QWORD *)&v27 + 1)] = 0;
    }
    v15 = strlen(__s);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)__s, v15);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Right=", 6);
  if (a5)
  {
    TBuffer<char>::resize((uint64_t)&__s, 0);
    slashEscape((uint64_t)a5, (uint64_t)&__s);
    if (*((_QWORD *)&v27 + 1) >= (unint64_t)v27)
    {
      if (v29)
      {
        LOBYTE(v24[0]) = 0;
        TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v27 + 1), (char *)v24, 1uLL);
        --*((_QWORD *)&v27 + 1);
      }
      else if ((_QWORD)v27)
      {
        __s[(_QWORD)v27 - 1] = 0;
      }
    }
    else
    {
      __s[*((_QWORD *)&v27 + 1)] = 0;
    }
    v16 = strlen(__s);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)__s, v16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  v17 = getDirSep();
  sprintf(v34, "%s%ctoken_d.enh", a6, v17);
  v24[0] = 1;
  v24[1] = v34;
  DataManager = makeDataManager((uint64_t)v24, 6uLL, v18, v19, v20);
  TTokenizer::save(a1, DataManager, 0);
  if (DataManager)
    (*(void (**)(TEnvManager *))(*(_QWORD *)DataManager + 8))(DataManager);
  v22 = getDirSep();
  sprintf(v33, "%s%cgeneral.voc", a6, v22);
  TLexicon::save(*((TLexicon **)a1 + 5), 0, (FileSpec *)v33);
  if (v29 && __s != v28 && __s)
    MEMORY[0x20BD149A8]();
  v30 = *MEMORY[0x24BEDB7E8];
  *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x20BD147F8](&v31);
  std::ostream::~ostream();
  return MEMORY[0x20BD1496C](&v32);
}

