void RecentBuffer::unsetContext(RecentBuffer *this, LMContextData *a2)
{
  *((_DWORD *)a2 + 2) = 16777212;
}

double RecentBuffer::initRecentBuffer(RecentBuffer *this)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = *(_DWORD *)(*((_QWORD *)this + 1) + 388);
  v3 = *((_DWORD *)this + 10);
  v4 = *((_DWORD *)this + 55);
  if (v3 > v4)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 208, v3 - v4, 0);
  *((_DWORD *)this + 54) = v3;
  if (v2)
  {
    v5 = *((_DWORD *)this + 69);
    if (v2 > v5)
      DgnPrimArray<short>::reallocElts((uint64_t)this + 264, v2 - v5, 0);
    *((_DWORD *)this + 68) = v2;
  }
  if (*((_BYTE *)this + 56))
  {
    v6 = *((_DWORD *)this + 10);
    v7 = *((_DWORD *)this + 59);
    if (v6 > v7)
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 224, v6 - v7, 0);
    *((_DWORD *)this + 58) = v6;
    if (v2)
    {
      v8 = *((_DWORD *)this + 75);
      if (v2 > v8)
        DgnPrimArray<short>::reallocElts((uint64_t)this + 288, v2 - v8, 0);
      *((_DWORD *)this + 74) = v2;
    }
  }
  v9 = (_QWORD *)((char *)this + 416);
  v10 = (*((_DWORD *)this + 10) + 1);
  v11 = *((_DWORD *)this + 107);
  if (v10 > v11)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 416, v10 - v11, 0);
  v12 = *((unsigned int *)this + 106);
  if (v12 <= v10)
  {
    if (v12 < v10)
    {
      v15 = v10 - v12;
      v16 = 16 * v12;
      do
      {
        v17 = (_QWORD *)(*v9 + v16);
        *v17 = 0;
        v17[1] = 0;
        v16 += 16;
        --v15;
      }
      while (v15);
    }
  }
  else if ((int)v12 > (int)v10)
  {
    v13 = (int)v12;
    v14 = 16 * (int)v12 - 16;
    do
    {
      --v13;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v9 + v14);
      v14 -= 16;
    }
    while (v13 > (int)v10);
  }
  *((_DWORD *)this + 106) = v10;
  RecentBuffer::clearRecent(this);
  return RecentBuffer::setWeights(this);
}

void RecentBuffer::clearRecent(RecentBuffer *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *((unsigned int *)this + 68);
  if ((_DWORD)v2)
    bzero(*((void **)this + 33), 2 * v2);
  *((_DWORD *)this + 60) = 0;
  *((_QWORD *)this + 31) = 0;
  *(_QWORD *)((char *)this + 254) = 0;
  if (*((_DWORD *)this + 10))
  {
    v3 = 0;
    v4 = *((_QWORD *)this + 26);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0xFFFFFF;
    while (v3 < *((unsigned int *)this + 10));
  }
  *((_DWORD *)this + 61) = 0;
  if (*((_BYTE *)this + 56))
  {
    Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll((uint64_t)this + 304);
    v5 = *((unsigned int *)this + 74);
    if ((_DWORD)v5)
      bzero(*((void **)this + 36), 2 * v5);
    *((_DWORD *)this + 70) = 0;
    if (*((_DWORD *)this + 10))
    {
      v6 = 0;
      v7 = *((_QWORD *)this + 28);
      do
        *(_DWORD *)(v7 + 4 * v6++) = 0xFFFFFF;
      while (v6 < *((unsigned int *)this + 10));
    }
  }
}

double RecentBuffer::setWeights(RecentBuffer *this)
{
  long double v2;
  double v3;
  int v4;
  double v5;
  double v6;
  double v7;
  int v8;
  double v9;
  unsigned int v10;
  double v11;
  double v12;
  int v13;
  double v14;
  double v15;
  int v16;
  double v17;
  double result;

  v2 = *((double *)this + 8);
  v3 = 1.0 - v2;
  v4 = *(_DWORD *)this;
  v5 = -20.0;
  v6 = -20.0;
  if (v2 > 0.0)
  {
    v7 = DgnLog(v2);
    v6 = -20.0;
    if (v7 >= -20.0)
      v6 = v7;
  }
  *((_WORD *)this + 264) = (int)((double)-v4 * v6 + 0.5);
  v8 = *(_DWORD *)this;
  if (v3 > 0.0)
  {
    v9 = DgnLog(v3);
    if (v9 < -20.0)
      v5 = -20.0;
    else
      v5 = v9;
  }
  *((_WORD *)this + 265) = (int)((double)-v8 * v5 + 0.5);
  v10 = *((_DWORD *)this + 10);
  if (v10)
    v11 = (double)(*((_DWORD *)this + 60) - *((_DWORD *)this + 62)) / (double)v10;
  else
    v11 = 0.0;
  v12 = v11 * *((double *)this + 6);
  v13 = *(_DWORD *)this;
  v14 = -20.0;
  v15 = -20.0;
  if (1.0 - v12 > 0.0)
  {
    v15 = DgnLog(1.0 - v12);
    if (v15 < -20.0)
      v15 = -20.0;
  }
  *((_WORD *)this + 266) = (int)((double)-v13 * v15 + 0.5);
  v16 = *(_DWORD *)this;
  if (v12 > 0.0)
  {
    v17 = DgnLog(v12);
    if (v17 < -20.0)
      v14 = -20.0;
    else
      v14 = v17;
  }
  result = (double)-v16 * v14 + 0.5;
  *((_WORD *)this + 267) = (int)result;
  return result;
}

uint64_t RecentBuffer::initHeadClonesAndCommonWords(RecentBuffer *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int LmId;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  _QWORD v13[2];
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  v13[0] = 0;
  v13[1] = 0;
  WordLanguageModel::constructLmIdToWordIdMapping(*((_QWORD *)this + 4), (uint64_t)v14, (uint64_t)v13);
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll((uint64_t)this + 80);
  BitArray::setSizeNoGrow((RecentBuffer *)((char *)this + 192), 0);
  v12 = 0;
  v2 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v2 + 388))
  {
    v3 = 0;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 104) + v3))
      {
        if (*(_DWORD *)(*(_QWORD *)(v2 + 256) + 4 * v3) == v3
          && ((*(_DWORD *)(*(_QWORD *)(v2 + 624) + 4 * (v3 >> 5)) >> v3) & 1) != 0)
        {
          v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 112))(*((_QWORD *)this + 2));
          v3 = v12;
          if (v4)
          {
            LmId = WordLanguageModel::getLmId(*((WordLanguageModel **)this + 4), v12);
            v11 = 0;
            v3 = *(_DWORD *)(v14[0] + 4 * LmId);
            v11 = v3;
            if (v3 != v12)
            {
              Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::add((uint64_t)this + 80, (int *)&v12, &v11);
              v6 = *((_DWORD *)this + 50);
              v7 = v11;
              v8 = v11 >= v6;
              v9 = v11 - v6;
              if (v8)
              {
                BitArray::addSize((RecentBuffer *)((char *)this + 192), v9 + 1);
                v7 = v11;
              }
              *(_DWORD *)(*((_QWORD *)this + 24) + 4 * (v7 >> 5)) |= 1 << v7;
              v3 = v12;
            }
          }
        }
      }
      v12 = ++v3;
      v2 = *((_QWORD *)this + 1);
    }
    while (v3 < *(_DWORD *)(v2 + 388));
  }
  if (*((_BYTE *)this + 72))
    RecentBuffer::setCommonWords((uint64_t)this, (uint64_t)v14);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v13);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v14);
}

void sub_209A10D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t RecentBuffer::setCommonWords(uint64_t a1, uint64_t a2)
{
  BitArray *v4;
  _QWORD *v5;
  unsigned int v6;
  unsigned int i;
  unint64_t WordIdWithMapping;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char v16;
  __int128 v17;
  int v18;
  char v19;
  _BYTE v20[56];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[4];

  *(_DWORD *)(a1 + 520) = 0;
  v4 = (BitArray *)(a1 + 496);
  BitArray::setSizeNoGrow((BitArray *)(a1 + 496), 0);
  *(_BYTE *)(a1 + 488) = 0;
  v27[0] = 0;
  v27[1] = 0;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  LMStats::resetStats((LMStats *)v20);
  v17 = xmmword_209A76430;
  v18 = 1;
  v19 = 1;
  v5 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 464))(*(_QWORD *)(a1 + 32));
  (*(void (**)(_QWORD, _QWORD *, _QWORD, _BYTE *, __int128 *, _QWORD *))(**(_QWORD **)(a1 + 32) + 472))(*(_QWORD *)(a1 + 32), v27, 0, v20, &v17, v5);
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 104);
  if (v6 >= 2)
  {
    for (i = 1; i != v6; ++i)
    {
      WordIdWithMapping = WordLanguageModel::getWordIdWithMapping(*(_QWORD *)(a1 + 32), i, 0, a2, 0);
      v9 = WordIdWithMapping;
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v10 + 388) > WordIdWithMapping
        && *(_BYTE *)(*(_QWORD *)(v10 + 104) + WordIdWithMapping)
        && *(_DWORD *)(*(_QWORD *)(v10 + 256) + 4 * WordIdWithMapping) == (_DWORD)WordIdWithMapping
        || (_DWORD)WordIdWithMapping == 16777213)
      {
        v16 = 0;
        if ((*(int (**)(_QWORD, unint64_t, uint64_t, _BYTE *, _QWORD *, _QWORD, _QWORD, _QWORD, char *))(**(_QWORD **)(a1 + 32) + 504))(*(_QWORD *)(a1 + 32), WordIdWithMapping, 0xFFFFLL, v20, v5, 0, 0, 0, &v16) < *(__int16 *)(a1 + 74))
        {
          v11 = *(unsigned int *)(a1 + 520);
          if (v11 == *(_DWORD *)(a1 + 524))
          {
            DgnPrimArray<unsigned int>::reallocElts(a1 + 512, 1, 1);
            v11 = *(unsigned int *)(a1 + 520);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 512) + 4 * v11) = v9;
          ++*(_DWORD *)(a1 + 520);
          if (v9 == 16777213)
          {
            *(_BYTE *)(a1 + 488) = 1;
          }
          else
          {
            v12 = *(_DWORD *)(a1 + 504);
            if (v12 <= v9)
              BitArray::addSize(v4, v9 - v12 + 1);
            *(_DWORD *)(*(_QWORD *)v4 + 4 * (v9 >> 5)) |= 1 << v9;
          }
        }
      }
    }
  }
  if (v5)
  {
    (*(void (**)(_QWORD *))*v5)(v5);
    MemChunkFree(v5, 0);
  }
  DgnPrimArray<unsigned int>::compact(a1 + 512);
  v13 = *(_DWORD *)(a1 + 504) + 1;
  while (1)
  {
    v14 = v13 - 2;
    if ((int)(v13 - 2) < 0)
      break;
    --v13;
    if (((*(_DWORD *)(*(_QWORD *)v4 + 4 * (v14 >> 5)) >> v14) & 1) != 0)
      goto LABEL_23;
  }
  v13 = 0;
LABEL_23:
  BitArray::setSize(v4, v13);
  BitArray::compact(v4);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v27);
}

void sub_209A11010(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t RecentBuffer::computeRemainderScore(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  int v12;
  double v13;
  char v15;
  _BYTE v16[56];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v8 = LMStats::resetStats((LMStats *)v16);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _BYTE *, uint64_t, uint64_t, double))(**((_QWORD **)a1 + 4) + 472))(*((_QWORD *)a1 + 4), a2, 0, v16, a3, a4, v8);
  if (a1[130])
  {
    v9 = 0;
    v10 = 1.0;
    do
    {
      v11 = *(unsigned int *)(*((_QWORD *)a1 + 64) + 4 * v9);
      v15 = 0;
      v10 = v10
          - *(double *)(*((_QWORD *)a1 + 56)
                      + 8
                      * (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, _BYTE *, uint64_t, _QWORD, _QWORD, _QWORD, char *))(**((_QWORD **)a1 + 4) + 504))(*((_QWORD *)a1 + 4), v11, 0xFFFFLL, v16, a4, 0, 0, 0, &v15));
      ++v9;
    }
    while (v9 < a1[130]);
  }
  else
  {
    v10 = 1.0;
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 4) + 480))(*((_QWORD *)a1 + 4), a4);
  v12 = *a1;
  v13 = -20.0;
  if (v10 > 0.0)
  {
    v13 = DgnLog(v10);
    if (v13 < -20.0)
      v13 = -20.0;
  }
  return (int)((double)-v12 * v13 + 0.5);
}

uint64_t RecentBuffer::computeRemainderScores(RecentBuffer *this)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int i;
  uint64_t v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  int v15;
  int v16;
  _DWORD *v17;
  int v18;
  int v19;
  _QWORD v20[2];
  void *v21[2];
  int v22;
  char v23;
  _DWORD *v24;
  uint64_t v25;
  void *v26;

  v2 = *(_DWORD *)(*((_QWORD *)this + 1) + 388);
  v3 = (_QWORD *)((char *)this + 464);
  v4 = *((_DWORD *)this + 119);
  if (v2 > v4)
    DgnPrimArray<short>::reallocElts((uint64_t)this + 464, v2 - v4, 0);
  *((_DWORD *)this + 118) = v2;
  v24 = 0;
  v25 = 0;
  v21[0] = 0;
  v5 = realloc_array(0, v21, 4uLL, 0, 0, 1);
  v24 = v21[0];
  LODWORD(v25) = 1;
  HIDWORD(v25) = v5 >> 2;
  *(_OWORD *)v21 = xmmword_209A80160;
  v22 = 3;
  v23 = 1;
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 464))(*((_QWORD *)this + 3));
  v7 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 464))(*((_QWORD *)this + 4));
  LODWORD(v20[0]) = 0;
  if (v2)
  {
    for (i = 0; i < v2; LODWORD(v20[0]) = ++i)
    {
      v9 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v9 + 388) > i
        && *(_BYTE *)(*(_QWORD *)(v9 + 104) + i)
        && *(_DWORD *)(*(_QWORD *)(v9 + 256) + 4 * i) == i)
      {
        if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 112))(*((_QWORD *)this + 2)) & 1) != 0)
        {
          if (*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this + 80, (int *)v20))
          {
            i = v20[0];
            *(_WORD *)(*v3 + 2 * LODWORD(v20[0])) = 20000;
          }
          else
          {
            (*(void (**)(_QWORD, _QWORD, _QWORD *))(**((_QWORD **)this + 3) + 408))(*((_QWORD *)this + 3), 0, v6);
            *v24 = v20[0];
            v10 = RecentBuffer::computeRemainderScore((int *)this, (uint64_t)&v24, (uint64_t)v21, (uint64_t)v7);
            *(_WORD *)(*((_QWORD *)this + 58) + 2 * LODWORD(v20[0])) = v10;
            (*(void (**)(_QWORD, _QWORD, _QWORD *))(**((_QWORD **)this + 3) + 424))(*((_QWORD *)this + 3), 0, v6);
            (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 432))(*((_QWORD *)this + 3), 0);
            i = v20[0];
          }
          continue;
        }
        i = v20[0];
      }
      *(_WORD *)(*v3 + 2 * i) = 20000;
    }
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD *))(**((_QWORD **)this + 3) + 408))(*((_QWORD *)this + 3), 0, v6);
  v20[0] = 0;
  v20[1] = 0;
  *((_WORD *)this + 242) = RecentBuffer::computeRemainderScore((int *)this, (uint64_t)v20, (uint64_t)v21, (uint64_t)v7);
  v14 = 0;
  v11 = realloc_array(0, (void **)&v14, 4uLL, 0, 0, 1);
  v17 = v14;
  v18 = 1;
  v19 = v11 >> 2;
  *v14 = 0xFFFFFF;
  *((_WORD *)this + 240) = RecentBuffer::computeRemainderScore((int *)this, (uint64_t)&v17, (uint64_t)v21, (uint64_t)v7);
  v26 = 0;
  v12 = realloc_array(0, &v26, 4uLL, 0, 0, 1);
  v14 = v26;
  v15 = 1;
  v16 = v12 >> 2;
  *(_DWORD *)v26 = 16777214;
  *((_WORD *)this + 241) = RecentBuffer::computeRemainderScore((int *)this, (uint64_t)&v14, (uint64_t)v21, (uint64_t)v7);
  *((_WORD *)this + 243) = 20000;
  (*(void (**)(_QWORD, uint64_t, _QWORD *))(**((_QWORD **)this + 3) + 424))(*((_QWORD *)this + 3), 1, v6);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 432))(*((_QWORD *)this + 3), 0);
  if (v7)
  {
    (*(void (**)(_QWORD *))*v7)(v7);
    MemChunkFree(v7, 0);
  }
  if (v6)
  {
    (*(void (**)(_QWORD *))*v6)(v6);
    MemChunkFree(v6, 0);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v14);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v24);
}

void sub_209A114CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void RecentBuffer::loadRecentBufferText(RecentBuffer *this, DFile *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t FileVersion;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char **v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  int NumLineFields;
  uint64_t v38;
  uint64_t v39;
  const char **v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char *LineFieldString;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  const char *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  int v99;
  const char *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  unint64_t v159;
  unint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int LineFieldUnsigned;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int LineFieldInteger;
  uint64_t CurrentLine;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  RecentBuffer *v221;
  const char *v222;
  int v223;
  void *v224;
  int v225;
  _DWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD v232[2];
  unsigned int v233[2];
  uint64_t v234;
  unsigned int v235;
  _QWORD v236[2];
  _BYTE v237[240];

  if (!DFile::subFileExists((uint64_t)a2, 0x4Bu))
    return;
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v237);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v237, (uint64_t)a2, 0x4Bu, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v237, "RecentBufferText");
  v236[0] = 0;
  v236[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v237, sRBT_Versions, (uint64_t)v236, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v237, (unsigned int *)v236, v9, v10, v11, v12, v13, v14);
  FileVersion = DgnTextFile::getFileVersion((DgnTextFile *)v237);
  v221 = this;
  if (FileVersion != 0x200000013)
  {
    v233[0] = 0;
    DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v237, "Depth", v233, 1, 1u, 2u);
    v18 = *((_BYTE *)this + 56) ? 2 : 1;
    if (v233[0] != v18)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1384, (uint64_t)"lm/recentb", 16, (uint64_t)"%s", v16, v17, (char)&unk_209A80178);
  }
  v235 = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v237, "RecentBufferLength", &v235, 1, 0, 0x7FFFFFFFu);
  if (v235 != *((_DWORD *)this + 10))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1392, (uint64_t)"lm/recentb", 10, (uint64_t)"%s", v24, v25, (char)&errStr_lm_recentb_E_RBT_BAD_RECENTBUFFERLENGTH);
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v237, v19, v20, v21, v22, v23, v24, v25);
  *(_QWORD *)v233 = 0;
  v234 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v237, (uint64_t)v233);
  v232[0] = 0;
  v232[1] = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v237, (unint64_t)v232);
  v230 = 0;
  v231 = 0;
  v228 = 0;
  v229 = 0;
  if (FileVersion != 0x200000013)
  {
    NumLineFields = DgnTextFile::getNumLineFields((DgnTextFile *)v237);
    if (*((_BYTE *)this + 56))
    {
      if (DgnTextFile::getNumLineFields((DgnTextFile *)v237) == 3)
        goto LABEL_24;
    }
    else if (NumLineFields == 2)
    {
LABEL_24:
      v40 = *(const char ***)v233;
      if (*(_DWORD *)(*(_QWORD *)v233 + 8))
        v41 = **(const char ***)v233;
      else
        v41 = (const char *)&unk_209A80178;
      if (strcmp(v41, "EntryIndex"))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1554, (uint64_t)"lm/recentb", 7, (uint64_t)"%.500s %.500s", v42, v43, (char)"EntryIndex");
        v40 = *(const char ***)v233;
      }
      if (*(_DWORD *)v232[0] != 3)
      {
        if (*((_DWORD *)v40 + 2))
          v44 = *v40;
        else
          v44 = (const char *)&unk_209A80178;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1558, (uint64_t)"lm/recentb", 8, (uint64_t)"%.500s %.500s", v42, v43, (char)v44);
        v40 = *(const char ***)v233;
      }
      if (*((_DWORD *)v40 + 6))
        v49 = v40[2];
      else
        v49 = (const char *)&unk_209A80178;
      this = v221;
      if (strcmp(v49, "EntryValue1"))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1563, (uint64_t)"lm/recentb", 7, (uint64_t)"%.500s %.500s", v50, v51, (char)"EntryValue1");
      if (*(_DWORD *)(v232[0] + 4) != 1)
      {
        if (*(_DWORD *)(*(_QWORD *)v233 + 24))
          v52 = *(void **)(*(_QWORD *)v233 + 16);
        else
          v52 = &unk_209A80178;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1567, (uint64_t)"lm/recentb", 8, (uint64_t)"%.500s %.500s", v50, v51, (char)v52);
      }
      if (*((_BYTE *)v221 + 56))
      {
        if (*(_DWORD *)(*(_QWORD *)v233 + 40))
          v57 = *(const char **)(*(_QWORD *)v233 + 32);
        else
          v57 = (const char *)&unk_209A80178;
        if (strcmp(v57, "EntryValue2"))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1574, (uint64_t)"lm/recentb", 7, (uint64_t)"%.500s %.500s", v58, v59, (char)"EntryValue2");
        if (*(_DWORD *)(v232[0] + 8) != 1)
        {
          if (*(_DWORD *)(*(_QWORD *)v233 + 40))
            v60 = *(void **)(*(_QWORD *)v233 + 32);
          else
            v60 = &unk_209A80178;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1578, (uint64_t)"lm/recentb", 8, (uint64_t)"%.500s %.500s", v58, v59, (char)v60);
        }
      }
      v161 = 0;
      while (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v237))
      {
        LineFieldUnsigned = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v237, 0, v162, v163, v164, v165, v166, v167);
        LineFieldInteger = DgnTextFileParser::getLineFieldInteger((DgnTextFileParser *)v237, 1u, v169, v170, v171, v172, v173, v174);
        if (v161 != LineFieldUnsigned)
        {
          CurrentLine = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
          if (*(_DWORD *)(CurrentLine + 8))
            v185 = *(void **)CurrentLine;
          else
            v185 = &unk_209A80178;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1591, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v183, v184, (char)v185);
        }
        if (LineFieldUnsigned >= *((_DWORD *)v221 + 10))
        {
          v186 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
          if (*(_DWORD *)(v186 + 8))
            v189 = *(void **)v186;
          else
            v189 = &unk_209A80178;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1594, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v187, v188, (char)v189);
        }
        if (*((_BYTE *)v221 + 56))
        {
          v190 = DgnTextFileParser::getLineFieldInteger((DgnTextFileParser *)v237, 2u, v175, v176, v177, v178, v179, v180);
          if (LineFieldInteger >= 0xFFFFF4)
          {
            if (LineFieldInteger == -2)
            {
              LineFieldInteger = 16777214;
            }
            else
            {
              if (LineFieldInteger != -1)
              {
                v191 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
                if (*(_DWORD *)(v191 + 8))
                  v194 = *(void **)v191;
                else
                  v194 = &unk_209A80178;
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 321, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v192, v193, (char)v194);
              }
              LineFieldInteger = 0xFFFFFF;
            }
          }
          if (v190 >= 0xFFFFF4)
          {
            if (v190 == -3)
            {
              v190 = 16777213;
            }
            else
            {
              if (v190 != -1)
              {
                v204 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
                if (*(_DWORD *)(v204 + 8))
                  v207 = *(void **)v204;
                else
                  v207 = &unk_209A80178;
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 321, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v205, v206, (char)v207);
              }
              v190 = 0xFFFFFF;
            }
          }
          if (LineFieldInteger < 0xFFFFF4)
          {
            v208 = *((_QWORD *)v221 + 1);
            if (*(_DWORD *)(v208 + 388) <= LineFieldInteger || !*(_BYTE *)(*(_QWORD *)(v208 + 104) + LineFieldInteger))
            {
              v209 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
              if (*(_DWORD *)(v209 + 8))
                v212 = *(void **)v209;
              else
                v212 = &unk_209A80178;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1619, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v210, v211, (char)v212);
            }
          }
          if (v190 < 0xFFFFF4)
          {
            v213 = *((_QWORD *)v221 + 1);
            if (*(_DWORD *)(v213 + 388) <= v190 || !*(_BYTE *)(*(_QWORD *)(v213 + 104) + v190))
            {
              v214 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
              if (*(_DWORD *)(v214 + 8))
                v217 = *(void **)v214;
              else
                v217 = &unk_209A80178;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1623, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v215, v216, (char)v217);
            }
          }
          v218 = v229;
          if (v229 == (unint64_t)HIDWORD(v229))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v228, 1, 1);
            v218 = v229;
          }
          *(_DWORD *)(v228 + 4 * v218) = LineFieldInteger;
          LODWORD(v229) = v229 + 1;
          v219 = v231;
          if (v231 == (unint64_t)HIDWORD(v231))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v230, 1, 1);
            v219 = v231;
          }
          LineFieldInteger = v190;
        }
        else
        {
          if (LineFieldInteger >= 0xFFFFF4)
          {
            if (LineFieldInteger == -3)
            {
              LineFieldInteger = 16777213;
            }
            else
            {
              if (LineFieldInteger != -1)
              {
                v200 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
                if (*(_DWORD *)(v200 + 8))
                  v203 = *(void **)v200;
                else
                  v203 = &unk_209A80178;
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 321, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v201, v202, (char)v203);
              }
              LineFieldInteger = 0xFFFFFF;
            }
          }
          else
          {
            v195 = *((_QWORD *)v221 + 1);
            if (*(_DWORD *)(v195 + 388) <= LineFieldInteger || !*(_BYTE *)(*(_QWORD *)(v195 + 104) + LineFieldInteger))
            {
              v196 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
              if (*(_DWORD *)(v196 + 8))
                v199 = *(void **)v196;
              else
                v199 = &unk_209A80178;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1603, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v197, v198, (char)v199);
            }
          }
          v220 = v229;
          if (v229 == (unint64_t)HIDWORD(v229))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v228, 1, 1);
            v220 = v229;
          }
          *(_DWORD *)(v228 + 4 * v220) = 0xFFFFFF;
          LODWORD(v229) = v229 + 1;
          v219 = v231;
          if (v231 == (unint64_t)HIDWORD(v231))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v230, 1, 1);
            v219 = v231;
          }
        }
        *(_DWORD *)(v230 + 4 * v219) = LineFieldInteger;
        LODWORD(v231) = v231 + 1;
        ++v161;
      }
      goto LABEL_198;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1545, (uint64_t)"lm/recentb", 17, (uint64_t)"%s", v38, v39, (char)&errStr_lm_recentb_E_RBT_BAD_NUMFIELDS);
    goto LABEL_24;
  }
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v237, 4, v26, v27, v28, v29, v30, v31);
  v32 = *(const char ***)v233;
  if (*(_DWORD *)(*(_QWORD *)v233 + 8))
    v33 = **(const char ***)v233;
  else
    v33 = (const char *)&unk_209A80178;
  if (strcmp(v33, "TableName"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1414, (uint64_t)"lm/recentb", 7, (uint64_t)"%.500s %.500s", v34, v35, (char)"TableName");
    v32 = *(const char ***)v233;
  }
  if (*(_DWORD *)v232[0])
  {
    if (*((_DWORD *)v32 + 2))
      v36 = *v32;
    else
      v36 = (const char *)&unk_209A80178;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1418, (uint64_t)"lm/recentb", 8, (uint64_t)"%.500s %.500s", v34, v35, (char)v36);
    v32 = *(const char ***)v233;
  }
  if (*((_DWORD *)v32 + 6))
    v45 = v32[2];
  else
    v45 = (const char *)&unk_209A80178;
  if (strcmp(v45, "EntryIndex"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1422, (uint64_t)"lm/recentb", 7, (uint64_t)"%.500s %.500s", v46, v47, (char)"EntryIndex");
    v32 = *(const char ***)v233;
  }
  if (*(_DWORD *)(v232[0] + 4) != 3)
  {
    if (*((_DWORD *)v32 + 6))
      v48 = v32[2];
    else
      v48 = (const char *)&unk_209A80178;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1426, (uint64_t)"lm/recentb", 8, (uint64_t)"%.500s %.500s", v46, v47, (char)v48);
    v32 = *(const char ***)v233;
  }
  if (*((_DWORD *)v32 + 10))
    v53 = v32[4];
  else
    v53 = (const char *)&unk_209A80178;
  if (strcmp(v53, "EntryValue1"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1430, (uint64_t)"lm/recentb", 7, (uint64_t)"%.500s %.500s", v54, v55, (char)"EntryValue1");
    v32 = *(const char ***)v233;
  }
  if (*(_DWORD *)(v232[0] + 8) != 1)
  {
    if (*((_DWORD *)v32 + 10))
      v56 = v32[4];
    else
      v56 = (const char *)&unk_209A80178;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1434, (uint64_t)"lm/recentb", 8, (uint64_t)"%.500s %.500s", v54, v55, (char)v56);
    v32 = *(const char ***)v233;
  }
  if (*((_DWORD *)v32 + 14))
    v61 = v32[6];
  else
    v61 = (const char *)&unk_209A80178;
  if (strcmp(v61, "EntryValue2"))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1438, (uint64_t)"lm/recentb", 7, (uint64_t)"%.500s %.500s", v62, v63, (char)"EntryValue2");
  if (*(_DWORD *)(v232[0] + 12) != 1)
  {
    if (*(_DWORD *)(*(_QWORD *)v233 + 56))
      v64 = *(void **)(*(_QWORD *)v233 + 48);
    else
      v64 = &unk_209A80178;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1442, (uint64_t)"lm/recentb", 8, (uint64_t)"%.500s %.500s", v62, v63, (char)v64);
  }
  v226 = 0;
  v227 = 0;
  DgnString::DgnString((DgnString *)&v224);
  v65 = 0;
  v66 = 1;
  while (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v237))
  {
    LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v237, 0);
    DgnString::DgnString((DgnString *)&v222, LineFieldString);
    v76 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v237, 1u, v70, v71, v72, v73, v74, v75);
    v83 = DgnTextFileParser::getLineFieldInteger((DgnTextFileParser *)v237, 2u, v77, v78, v79, v80, v81, v82);
    v90 = DgnTextFileParser::getLineFieldInteger((DgnTextFileParser *)v237, 3u, v84, v85, v86, v87, v88, v89);
    if ((v66 & 1) != 0)
      DgnString::operator=((DgnString *)&v224, (DgnString *)&v222);
    v91 = v223;
    v92 = v222;
    if (v223)
      v93 = v222;
    else
      v93 = (const char *)&unk_209A80178;
    if (strcmp(v93, "UnigramRecentBuffer") && strcmp(v93, "BigramRecentBuffer"))
    {
      v94 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
      v97 = &unk_209A80178;
      if (*(_DWORD *)(v94 + 8))
        v97 = *(void **)v94;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1468, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v95, v96, (char)v97);
      v91 = v223;
      v92 = v222;
    }
    if (v91)
      v98 = v92;
    else
      v98 = (const char *)&unk_209A80178;
    v99 = v225;
    v100 = (const char *)v224;
    if (v225)
      v101 = (const char *)v224;
    else
      v101 = (const char *)&unk_209A80178;
    if (strcmp(v98, v101) && strcmp(v98, "BigramRecentBuffer"))
    {
      v102 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
      v105 = &unk_209A80178;
      if (*(_DWORD *)(v102 + 8))
        v105 = *(void **)v102;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1472, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v103, v104, (char)v105);
      v91 = v223;
      v92 = v222;
      v99 = v225;
      v100 = (const char *)v224;
    }
    if (v91)
      v106 = v92;
    else
      v106 = (const char *)&unk_209A80178;
    if (v99)
      v107 = v100;
    else
      v107 = (const char *)&unk_209A80178;
    this = v221;
    if (strcmp(v106, v107))
    {
      DgnString::operator=((DgnString *)&v224, (DgnString *)&v222);
      v65 = 0;
    }
    if (v76 != v65)
    {
      v108 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
      v111 = &unk_209A80178;
      if (*(_DWORD *)(v108 + 8))
        v111 = *(void **)v108;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1482, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v109, v110, (char)v111);
    }
    if (v76 >= *((_DWORD *)v221 + 10))
    {
      v112 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
      v115 = &unk_209A80178;
      if (*(_DWORD *)(v112 + 8))
        v115 = *(void **)v112;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1485, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v113, v114, (char)v115);
    }
    if (v223)
      v116 = v222;
    else
      v116 = (const char *)&unk_209A80178;
    if (strcmp(v116, "UnigramRecentBuffer"))
    {
      if (!*((_BYTE *)v221 + 56))
      {
        v117 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
        v120 = &unk_209A80178;
        if (*(_DWORD *)(v117 + 8))
          v120 = *(void **)v117;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1509, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v118, v119, (char)v120);
      }
      if (v83 >= 0xFFFFF4)
      {
        if (v83 == -2)
        {
          v83 = 16777214;
        }
        else
        {
          if (v83 != -1)
          {
            v121 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
            v124 = &unk_209A80178;
            if (*(_DWORD *)(v121 + 8))
              v124 = *(void **)v121;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 321, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v122, v123, (char)v124);
          }
          v83 = 0xFFFFFF;
        }
      }
      if (v90 >= 0xFFFFF4)
      {
        if (v90 == -3)
        {
          v90 = 16777213;
        }
        else
        {
          if (v90 != -1)
          {
            v138 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
            v141 = &unk_209A80178;
            if (*(_DWORD *)(v138 + 8))
              v141 = *(void **)v138;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 321, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v139, v140, (char)v141);
          }
          v90 = 0xFFFFFF;
        }
      }
      if (v83 < 0xFFFFF4)
      {
        v142 = *((_QWORD *)v221 + 1);
        if (*(_DWORD *)(v142 + 388) <= v83 || !*(_BYTE *)(*(_QWORD *)(v142 + 104) + v83))
        {
          v143 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
          v146 = &unk_209A80178;
          if (*(_DWORD *)(v143 + 8))
            v146 = *(void **)v143;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1518, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v144, v145, (char)v146);
        }
      }
      if (v90 < 0xFFFFF4)
      {
        v147 = *((_QWORD *)v221 + 1);
        if (*(_DWORD *)(v147 + 388) <= v90 || !*(_BYTE *)(*(_QWORD *)(v147 + 104) + v90))
        {
          v148 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
          v151 = &unk_209A80178;
          if (*(_DWORD *)(v148 + 8))
            v151 = *(void **)v148;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1522, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v149, v150, (char)v151);
        }
      }
      v152 = v229;
      if (v229 == (unint64_t)HIDWORD(v229))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v228, 1, 1);
        v152 = v229;
      }
      *(_DWORD *)(v228 + 4 * v152) = v83;
      LODWORD(v229) = v229 + 1;
      v153 = v231;
      if (v231 == (unint64_t)HIDWORD(v231))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v230, 1, 1);
        v153 = v231;
      }
      v83 = v90;
LABEL_181:
      *(_DWORD *)(v230 + 4 * v153) = v83;
      LODWORD(v231) = v231 + 1;
      goto LABEL_186;
    }
    if (v90 != -1)
    {
      v125 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
      v128 = &unk_209A80178;
      if (*(_DWORD *)(v125 + 8))
        v128 = *(void **)v125;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1491, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v126, v127, (char)v128);
    }
    if (v83 >= 0xFFFFF4)
    {
      if (v83 == -3)
      {
        v83 = 16777213;
      }
      else
      {
        if (v83 != -1)
        {
          v134 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
          v137 = &unk_209A80178;
          if (*(_DWORD *)(v134 + 8))
            v137 = *(void **)v134;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 321, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v135, v136, (char)v137);
        }
        v83 = 0xFFFFFF;
      }
    }
    else
    {
      v129 = *((_QWORD *)v221 + 1);
      if (*(_DWORD *)(v129 + 388) <= v83 || !*(_BYTE *)(*(_QWORD *)(v129 + 104) + v83))
      {
        v130 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
        v133 = &unk_209A80178;
        if (*(_DWORD *)(v130 + 8))
          v133 = *(void **)v130;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1497, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v131, v132, (char)v133);
      }
    }
    v154 = v227;
    if (v227 == (unint64_t)HIDWORD(v227))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v226, 1, 1);
      v154 = v227;
    }
    v226[v154] = v83;
    LODWORD(v227) = v227 + 1;
    if (!*((_BYTE *)v221 + 56))
    {
      v155 = v229;
      if (v229 == (unint64_t)HIDWORD(v229))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v228, 1, 1);
        v155 = v229;
      }
      *(_DWORD *)(v228 + 4 * v155) = 0xFFFFFF;
      LODWORD(v229) = v229 + 1;
      v153 = v231;
      if (v231 == (unint64_t)HIDWORD(v231))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v230, 1, 1);
        v153 = v231;
      }
      goto LABEL_181;
    }
LABEL_186:
    ++v65;
    DgnString::~DgnString((DgnString *)&v222);
    v66 = 0;
  }
  v156 = v227;
  if ((_DWORD)v227 && *((_BYTE *)this + 56))
  {
    if ((_DWORD)v227 == (_DWORD)v231)
    {
      while ((int)v156 >= 1)
      {
        v157 = v226[v156 - 1];
        v158 = *(_DWORD *)(v230 - 4 + 4 * v156--);
        if (v157 != v158)
          goto LABEL_196;
      }
    }
    else
    {
LABEL_196:
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1534, (uint64_t)"lm/recentb", 13, (uint64_t)"%s", v67, v68, (char)&errStr_lm_recentb_E_UNI_BI_MISMATCH);
    }
  }
  DgnString::~DgnString((DgnString *)&v224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v226);
LABEL_198:
  RecentBuffer::initRecentBuffer(this);
  RecentBuffer::initHeadClonesAndCommonWords(this);
  if (*((_BYTE *)this + 72))
    RecentBuffer::computeRemainderScores(this);
  v224 = 0;
  v159 = realloc_array(0, &v224, 4uLL, 0, 0, 1);
  v226 = v224;
  LODWORD(v227) = 1;
  HIDWORD(v227) = v159 >> 2;
  if ((_DWORD)v231)
  {
    v160 = 0;
    do
    {
      *v226 = *(_DWORD *)(v230 + 4 * v160);
      RecentBuffer::addToRecentInternal(v221, (uint64_t)&v226, *(_DWORD *)(v228 + 4 * v160++));
    }
    while (v160 < v231);
  }
  RecentBuffer::computeAppearancesToScores(v221, *((_DWORD *)v221 + 60) - *((_DWORD *)v221 + 64) - (*((_DWORD *)v221 + 62) + *((_DWORD *)v221 + 63)));
  RecentBuffer::setWeights(v221);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v226);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v228);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v230);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v232);
  DgnArray<DgnString>::releaseAll((uint64_t)v233);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v236);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v237);
}

void sub_209A12908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  DgnString::~DgnString((DgnString *)&a14);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a16);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a18);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a20);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a22);
  DgnArray<DgnString>::releaseAll((uint64_t)&a24);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a27);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)&a29);
  _Unwind_Resume(a1);
}

void RecentBuffer::loadRecentBufferBinary(RecentBuffer *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DFile *v6;
  uint64_t v8;
  uint64_t v9;
  DgnStream *v10;
  BOOL v11;
  int v12;
  char *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int MaybeContextLmId;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  BOOL v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t CurrentSubDirComponents;
  DFile *v60;
  DFileChecksums *v61;
  void *v62[2];
  int v63;
  char v64;
  void *v65;
  uint64_t v66;
  _QWORD v67[2];
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;

  v6 = a2;
  v74 = 0;
  v10 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x49u, 1, "RCNTBUFB", (_DWORD *)&v74 + 1, &v74);
  v11 = HIDWORD(v74) == 18 && (_DWORD)v74 == 7;
  v12 = v11;
  if (!v11 && (HIDWORD(v74) != 22 || (_DWORD)v74 != 8))
  {
    v61 = a3;
    if (*((_DWORD *)v6 + 6))
      v14 = (char *)*((_QWORD *)v6 + 2);
    else
      v14 = (char *)&unk_209A80178;
    MrecHeaderCheckVersions(v14, "RCNTBUFB", HIDWORD(v74), v74, 0x18u, 9u);
    v60 = v6;
    MrecHeaderCheckLatestVersionIfShared(v6, "RCNTBUFB", SHIDWORD(v74), v74, 24, 9, v37, v38);
    v73 = 0;
    v39 = (_DWORD *)((char *)this + 40);
    readObject((uint64_t)v10, (_DWORD *)this + 10, &v73);
    readObject(v10, (double *)this + 6, &v73);
    readObject((uint64_t)v10, (BOOL *)this + 56, &v73);
    readObject(v10, (double *)this + 8, &v73);
    readObject((uint64_t)v10, (BOOL *)this + 72, &v73);
    readObject((uint64_t)v10, (_WORD *)this + 37, &v73);
    readObject<unsigned int,unsigned int,WordIdScope,unsigned int>((uint64_t)v10, (uint64_t)this + 80, &v73);
    readObject(v10, (RecentBuffer *)((char *)this + 192), &v73);
    readObject<unsigned int>(v10, (uint64_t)this + 208, &v73);
    readObject<unsigned int>(v10, (uint64_t)this + 224, &v73);
    v40 = (unsigned int *)((char *)this + 240);
    readObject((uint64_t)v10, (_DWORD *)this + 60, &v73);
    readObject((uint64_t)v10, (_DWORD *)this + 61, &v73);
    readObject<unsigned short>(v10, (uint64_t)this + 464, &v73);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 240, &v73);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 241, &v73);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 242, &v73);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 243, &v73);
    readObject((uint64_t)v10, (BOOL *)this + 488, &v73);
    readObject(v10, (RecentBuffer *)((char *)this + 496), &v73);
    readObject<unsigned int>(v10, (uint64_t)this + 512, &v73);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 264, &v73);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 265, &v73);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 266, &v73);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 267, &v73);
    v41 = *(unsigned int *)(*((_QWORD *)this + 1) + 388);
    v42 = *((_DWORD *)this + 69);
    if (v41 <= v42)
    {
      *((_DWORD *)this + 68) = v41;
      if (!(_DWORD)v41)
      {
        v43 = 1;
        goto LABEL_67;
      }
    }
    else
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 264, v41 - v42, 0);
      *((_DWORD *)this + 68) = v41;
    }
    bzero(*((void **)this + 33), 2 * v41);
    v43 = 0;
LABEL_67:
    *(_QWORD *)((char *)this + 254) = 0;
    *((_QWORD *)this + 31) = 0;
    if (*((_BYTE *)this + 56))
    {
      v44 = *((_DWORD *)this + 75);
      if (v41 > v44)
        DgnPrimArray<short>::reallocElts((uint64_t)this + 288, v41 - v44, 0);
      *((_DWORD *)this + 74) = v41;
      if ((v43 & 1) == 0)
        bzero(*((void **)this + 36), 2 * v41);
      *((_DWORD *)this + 70) = 0;
    }
    v45 = (_QWORD *)((char *)this + 416);
    v46 = (*((_DWORD *)this + 10) + 1);
    v47 = *((_DWORD *)this + 107);
    if (v46 > v47)
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 416, v46 - v47, 0);
    v48 = *((unsigned int *)this + 106);
    if (v48 <= v46)
    {
      if (v48 < v46)
      {
        v51 = v46 - v48;
        v52 = 16 * v48;
        do
        {
          v53 = (_QWORD *)(*v45 + v52);
          *v53 = 0;
          v53[1] = 0;
          v52 += 16;
          --v51;
        }
        while (v51);
      }
    }
    else if ((int)v48 > (int)v46)
    {
      v49 = (int)v48;
      v50 = 16 * (int)v48 - 16;
      do
      {
        --v49;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v45 + v50);
        v50 -= 16;
      }
      while (v49 > (int)v46);
    }
    *((_DWORD *)this + 106) = v46;
    if (*((_BYTE *)this + 72))
      v54 = a4 == 0;
    else
      v54 = 1;
    if (!v54)
      RecentBuffer::computeRemainderScores(this);
    v6 = v60;
    a3 = v61;
    if (*v40)
    {
      v55 = 0;
      v56 = (*((_DWORD *)this + 61) + *v39 - *v40 + 1) % *v39;
      do
      {
        v57 = v56;
        RecentBuffer::addWordCountUni((uint64_t)this, *(_DWORD *)(*((_QWORD *)this + 26) + 4 * v56), 1);
        if (*((_BYTE *)this + 56))
          RecentBuffer::addWordCountBi(this, *(_DWORD *)(*((_QWORD *)this + 26) + 4 * v57), *(_DWORD *)(*((_QWORD *)this + 28) + 4 * v57), 1);
        if ((_DWORD)v57 + 1 == *v39)
          v56 = 0;
        else
          v56 = v57 + 1;
        ++v55;
        v58 = *v40;
      }
      while (v55 < *v40);
    }
    else
    {
      v58 = 0;
    }
    RecentBuffer::computeAppearancesToScores(this, v58 - *((_DWORD *)this + 64) - (*((_DWORD *)this + 62) + *((_DWORD *)this + 63)));
    RecentBuffer::setWeights(this);
    goto LABEL_99;
  }
  MrecHeaderCheckLatestVersionIfShared(v6, "RCNTBUFB", SHIDWORD(v74), v74, 24, 9, v8, v9);
  v73 = 0;
  readObject((uint64_t)v10, (_DWORD *)this + 10, &v73);
  readObject(v10, (double *)this + 6, &v73);
  v15 = (char *)this + 56;
  readObject((uint64_t)v10, (BOOL *)this + 56, &v73);
  readObject(v10, (double *)this + 8, &v73);
  readObject((uint64_t)v10, (BOOL *)this + 72, &v73);
  readObject((uint64_t)v10, (_WORD *)this + 37, &v73);
  v72 = 0;
  readObject((uint64_t)v10, &v72, &v73);
  *((_WORD *)this + 240) = v72;
  v71 = 0;
  readObject((uint64_t)v10, &v71, &v73);
  *((_WORD *)this + 242) = v71;
  v69 = 0;
  v70 = 0;
  v68[0] = 0;
  v68[1] = 0;
  readObject<int>(v10, (uint64_t)&v69, &v73);
  if (v12)
  {
    v62[0] = 0;
    v62[1] = 0;
    readObject<int>(v10, (uint64_t)v62, &v73);
    if (*v15)
    {
      v18 = v70;
      if ((_DWORD)v70 == LODWORD(v62[1]))
      {
        while ((int)v18 >= 1)
        {
          v19 = *(_DWORD *)(v69 - 4 + 4 * v18);
          v20 = *((_DWORD *)v62[0] + --v18);
          if (v19 != v20)
            goto LABEL_19;
        }
      }
      else
      {
LABEL_19:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1718, (uint64_t)"lm/recentb", 13, (uint64_t)"%s", v16, v17, (char)&errStr_lm_recentb_E_UNI_BI_MISMATCH);
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v62);
  }
  readObject<int>(v10, (uint64_t)v68, &v73);
  v67[0] = 0;
  v67[1] = 0;
  readObject<int>(v10, (uint64_t)v67, &v73);
  RecentBuffer::initRecentBuffer(this);
  RecentBuffer::initHeadClonesAndCommonWords(this);
  if (*((_BYTE *)this + 72) && a4)
    RecentBuffer::computeRemainderScores(this);
  if ((a4 & 1) == 0)
  {
    v21 = *(_DWORD *)(*((_QWORD *)this + 1) + 388);
    v22 = *((_DWORD *)this + 119);
    if (v21 <= v22)
    {
      *((_DWORD *)this + 118) = v21;
      LODWORD(v62[0]) = 0;
      if (!v21)
      {
LABEL_40:
        v65 = 0;
        v66 = 0;
        v62[0] = 0;
        v27 = realloc_array(0, v62, 4uLL, 0, 0, 1);
        v65 = v62[0];
        LODWORD(v66) = 1;
        HIDWORD(v66) = v27 >> 2;
        *(_DWORD *)v62[0] = 16777214;
        *(_OWORD *)v62 = xmmword_209A76430;
        v63 = 1;
        v64 = 1;
        v28 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 464))(*((_QWORD *)this + 3));
        v29 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 464))(*((_QWORD *)this + 4));
        (*(void (**)(_QWORD, _QWORD, _QWORD *))(**((_QWORD **)this + 3) + 408))(*((_QWORD *)this + 3), 0, v28);
        *((_WORD *)this + 241) = RecentBuffer::computeRemainderScore((int *)this, (uint64_t)&v65, (uint64_t)v62, (uint64_t)v29);
        (*(void (**)(_QWORD, uint64_t, _QWORD *))(**((_QWORD **)this + 3) + 424))(*((_QWORD *)this + 3), 1, v28);
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 432))(*((_QWORD *)this + 3), 0);
        if (v29)
        {
          (*(void (**)(_QWORD *))*v29)(v29);
          MemChunkFree(v29, 0);
        }
        if (v28)
        {
          (*(void (**)(_QWORD *))*v28)(v28);
          MemChunkFree(v28, 0);
        }
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v65);
        goto LABEL_45;
      }
    }
    else
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 464, v21 - v22, 0);
      *((_DWORD *)this + 118) = v21;
      LODWORD(v62[0]) = 0;
    }
    v23 = 0;
    do
    {
      v24 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v24 + 388) > v23
        && *(_BYTE *)(*(_QWORD *)(v24 + 104) + v23)
        && *(_DWORD *)(*(_QWORD *)(v24 + 256) + 4 * v23) == v23)
      {
        if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 112))(*((_QWORD *)this + 2)) & 1) != 0
          && !*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this + 80, (int *)v62))
        {
          MaybeContextLmId = WordLanguageModel::getMaybeContextLmId(*((WordLanguageModel **)this + 4), v62[0]);
          v25 = *(_DWORD *)(v67[0] + 4 * MaybeContextLmId);
        }
        else
        {
          LOWORD(v25) = 20000;
        }
        v23 = v62[0];
      }
      else
      {
        LOWORD(v25) = 20000;
      }
      *(_WORD *)(*((_QWORD *)this + 58) + 2 * v23++) = v25;
      LODWORD(v62[0]) = v23;
    }
    while (v23 < v21);
    goto LABEL_40;
  }
LABEL_45:
  if (!*v15)
    DgnPrimArray<int>::copyArraySlice((unint64_t)v68, &v69, 0, v70);
  v65 = 0;
  v30 = realloc_array(0, &v65, 4uLL, 0, 0, 1);
  v62[0] = v65;
  LODWORD(v62[1]) = 1;
  HIDWORD(v62[1]) = v30 >> 2;
  if ((_DWORD)v70)
  {
    v31 = 0;
    do
    {
      v32 = *(_DWORD *)(v69 + 4 * v31);
      if (v32 == -3)
        v33 = 16777213;
      else
        v33 = 0xFFFFFF;
      if (v32 >= 0xFFFFF4)
        v32 = v33;
      *(_DWORD *)v62[0] = v32;
      v34 = *(_DWORD *)(v68[0] + 4 * v31);
      if (v34 == -2)
        v35 = 16777214;
      else
        v35 = 0xFFFFFF;
      if (v34 >= 0xFFFFF4)
        v36 = v35;
      else
        v36 = *(_DWORD *)(v68[0] + 4 * v31);
      RecentBuffer::addToRecentInternal(this, (uint64_t)v62, v36);
      ++v31;
    }
    while (v31 < v70);
  }
  RecentBuffer::computeAppearancesToScores(this, *((_DWORD *)this + 60) - *((_DWORD *)this + 64) - (*((_DWORD *)this + 62) + *((_DWORD *)this + 63)));
  RecentBuffer::setWeights(this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v62);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v67);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v68);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v69);
LABEL_99:
  readObjectChecksumAndVerify(v10, v73);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(v6);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x49u, v73);
  if (v10)
  {
    (**(void (***)(DgnStream *))v10)(v10);
    MemChunkFree(v10, 0);
  }
}

void sub_209A13378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  va_list va2;

  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t RecentBuffer::saveRecentBufferText(RecentBuffer *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE v43[16];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54[35];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v54);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v54, (uint64_t)a2, 0x4Au, a3);
  v52 = 0;
  v53 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v54, sRBS_Versions, (uint64_t)&v52, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v54, "RecentBufferSpec", &v52[(v53 - 1)]);
  v50 = 0;
  v51 = 0;
  v48 = 0;
  v49 = 0;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v54, (uint64_t)&v50, (uint64_t)&v48);
  if (*((_BYTE *)this + 56))
    v11 = 2;
  else
    v11 = 1;
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v54, "Depth", v11);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v54, "RecentBufferLength", *((unsigned int *)this + 10));
  DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v54, "RecentBufferWeight", *((double *)this + 6));
  DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v54, "RecentBufferUnigramWeight", *((double *)this + 8));
  DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v54, "UseRecentBufferCommonWordsFix", *((unsigned __int8 *)this + 72));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v54, "RecentBufferCommonWordScore", *((__int16 *)this + 37));
  DgnArray<DgnString>::releaseAll((uint64_t)&v48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v50);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v52);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v54);
  v12 = *((unsigned int *)this + 60);
  v52 = 0;
  v53 = 0;
  if ((_DWORD)v12)
  {
    v54[0] = 0;
    HIDWORD(v53) = realloc_array(0, v54, 4 * v12, 0, 0, 1) >> 2;
    v52 = v54[0];
  }
  LODWORD(v53) = v12;
  if (*((_BYTE *)this + 56))
  {
    v13 = *((unsigned int *)this + 60);
    v50 = 0;
    v51 = 0;
    if (!(_DWORD)v13)
      goto LABEL_34;
    v54[0] = 0;
    HIDWORD(v51) = realloc_array(0, v54, 4 * v13, 0, 0, 1) >> 2;
    v14 = (unsigned int *)v54[0];
    v50 = v54[0];
  }
  else
  {
    v14 = 0;
    LODWORD(v13) = 0;
    v50 = 0;
    v51 = 0;
  }
  v15 = *((_DWORD *)this + 60);
  LODWORD(v51) = v13;
  if (!v15)
  {
    LODWORD(v22) = 0;
    if (!(_DWORD)v13)
      goto LABEL_34;
    goto LABEL_24;
  }
  v16 = 0;
  v17 = (*((_DWORD *)this + 61) + *((_DWORD *)this + 10) - v15 + 1) % *((_DWORD *)this + 10);
  v18 = *((_QWORD *)this + 26);
  v19 = v52;
  do
  {
    v20 = *(_DWORD *)(v18 + 4 * v17);
    if (v20 == 16777213)
      v21 = -3;
    else
      v21 = -1;
    if (v20 >= 0xFFFFF4)
      v20 = v21;
    *((_DWORD *)v19 + v16) = v20;
    if (v17 + 1 == *((_DWORD *)this + 10))
      v17 = 0;
    else
      ++v17;
    ++v16;
    v22 = *((unsigned int *)this + 60);
  }
  while (v16 < v22);
  if ((_DWORD)v13)
  {
LABEL_24:
    v23 = (*((_DWORD *)this + 61) - v22 + *((_DWORD *)this + 10) + 1) % *((_DWORD *)this + 10);
    v24 = *((_QWORD *)this + 28);
    v25 = v13;
    do
    {
      v26 = *(_DWORD *)(v24 + 4 * v23);
      if (v26 == 16777214)
        v27 = -2;
      else
        v27 = -1;
      if (v26 >= 0xFFFFF4)
        v26 = v27;
      *v14++ = v26;
      if (v23 + 1 == *((_DWORD *)this + 10))
        v23 = 0;
      else
        ++v23;
      --v25;
    }
    while (v25);
  }
LABEL_34:
  if ((_DWORD)v53)
  {
    DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v54);
    DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v54, (uint64_t)a2, 0x4Bu, 1);
    v48 = 0;
    v49 = 0;
    DgnTextFile::legalDgnTextFileVersions((int)v54, sRBT_Versions, (uint64_t)&v48, v28, v29, v30, v31, v32);
    DgnTextFileWriter::setFileType((uint64_t)v54, "RecentBufferText", (_QWORD *)(v48 + 8 * (v49 - 1)));
    v46 = 0;
    v47 = 0;
    v44 = 0;
    v45 = 0;
    DgnString::DgnString((DgnString *)v43, "EntryIndex");
    v33 = v45;
    if ((_DWORD)v45 == HIDWORD(v45))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v44, 1, 1);
      v33 = v45;
    }
    DgnString::DgnString((DgnString *)(v44 + 16 * v33), (const DgnString *)v43);
    LODWORD(v45) = v45 + 1;
    DgnString::~DgnString((DgnString *)v43);
    v34 = v47;
    if ((_DWORD)v47 == HIDWORD(v47))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v46, 1, 1);
      v34 = v47;
    }
    *(_DWORD *)(v46 + 4 * v34) = 3;
    LODWORD(v47) = v34 + 1;
    DgnString::DgnString((DgnString *)v43, "EntryValue1");
    v35 = v45;
    if ((_DWORD)v45 == HIDWORD(v45))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v44, 1, 1);
      v35 = v45;
    }
    DgnString::DgnString((DgnString *)(v44 + 16 * v35), (const DgnString *)v43);
    LODWORD(v45) = v45 + 1;
    DgnString::~DgnString((DgnString *)v43);
    v36 = v47;
    if ((_DWORD)v47 == HIDWORD(v47))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v46, 1, 1);
      v36 = v47;
    }
    *(_DWORD *)(v46 + 4 * v36) = 1;
    LODWORD(v47) = v36 + 1;
    if (*((_BYTE *)this + 56))
    {
      DgnString::DgnString((DgnString *)v43, "EntryValue2");
      v37 = v45;
      if ((_DWORD)v45 == HIDWORD(v45))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v44, 1, 1);
        v37 = v45;
      }
      DgnString::DgnString((DgnString *)(v44 + 16 * v37), (const DgnString *)v43);
      LODWORD(v45) = v45 + 1;
      DgnString::~DgnString((DgnString *)v43);
      v38 = v47;
      if ((_DWORD)v47 == HIDWORD(v47))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v46, 1, 1);
        v38 = v47;
      }
      *(_DWORD *)(v46 + 4 * v38) = 1;
      LODWORD(v47) = v38 + 1;
    }
    DgnTextFileWriter::setLineFieldFormat((uint64_t)v54, (uint64_t)&v46, (uint64_t)&v44);
    if (*((_BYTE *)this + 56))
      v39 = 2;
    else
      v39 = 1;
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v54, "Depth", v39);
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v54, "RecentBufferLength", *((unsigned int *)this + 10));
    if (*((_BYTE *)this + 56))
    {
      if ((_DWORD)v51)
      {
        v40 = 0;
        do
        {
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v54, 0, v40);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v54, 1u, v50[v40]);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v54, 2u, *((_DWORD *)v52 + v40));
          DgnTextFileWriter::writeNextLine(v54);
          ++v40;
        }
        while (v40 < v51);
      }
    }
    else if ((_DWORD)v53)
    {
      v41 = 0;
      do
      {
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v54, 0, v41);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v54, 1u, *((_DWORD *)v52 + v41));
        DgnTextFileWriter::writeNextLine(v54);
        ++v41;
      }
      while (v41 < v53);
    }
    DgnArray<DgnString>::releaseAll((uint64_t)&v44);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v46);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v48);
    DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v54);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v50);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v52);
}

void sub_209A139D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  uint64_t v14;
  va_list va3;
  uint64_t v16;
  uint64_t v17;
  va_list va4;
  uint64_t v19;
  va_list va5;

  va_start(va5, a4);
  va_start(va4, a4);
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v14 = va_arg(va4, _QWORD);
  v16 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v17 = va_arg(va5, _QWORD);
  v19 = va_arg(va5, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va4);
  _Unwind_Resume(a1);
}

void RecentBuffer::saveRecentBufferBinary(RecentBuffer *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t CurrentSubDirComponents;
  unsigned int v19;

  v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x49u, a4, "RCNTBUFB", 24, 9);
  v19 = 0;
  writeObject((uint64_t)v7, (int *)this + 10, &v19);
  writeObject(v7, (const double *)this + 6, &v19, v8, v9, v10, v11, v12);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 56, &v19);
  writeObject(v7, (const double *)this + 8, &v19, v13, v14, v15, v16, v17);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 72, &v19);
  writeObject((uint64_t)v7, (__int16 *)this + 37, &v19);
  writeObject<unsigned int,unsigned int,WordIdScope,unsigned int>((uint64_t)v7, (uint64_t)this + 80, &v19);
  writeObject((uint64_t)v7, (uint64_t)this + 192, &v19);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 208, &v19);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 224, &v19);
  writeObject((uint64_t)v7, (int *)this + 60, &v19);
  writeObject((uint64_t)v7, (int *)this + 61, &v19);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 464, &v19);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 240, &v19);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 241, &v19);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 242, &v19);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 243, &v19);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 488, &v19);
  writeObject((uint64_t)v7, (uint64_t)this + 496, &v19);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 512, &v19);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 264, &v19);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 265, &v19);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 266, &v19);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 267, &v19);
  writeObjectChecksum((uint64_t)v7, (int *)&v19);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x49u, v19);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
}

void RecentBuffer::loadRecentBuffer(RecentBuffer *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  _BOOL4 v44;
  BOOL v45;
  unsigned int v46;
  BOOL v47;
  double v48;
  BOOL v49;
  double v50;
  unsigned int v51;
  _QWORD v52[2];
  _BYTE v53[232];

  if (DFile::subFileExists((uint64_t)a2, 0x49u))
  {
    if (a4)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2042, (uint64_t)"lm/recentb", 11, (uint64_t)"%s", v10, v11, (char)&errStr_lm_recentb_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
    if (DFile::subFileExists((uint64_t)a2, 0x4Au))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2044, (uint64_t)"lm/recentb", 15, (uint64_t)"%s", v12, v13, (char)&errStr_lm_recentb_E_RBS_RBB_MISMATCH);
    if (DFile::subFileExists((uint64_t)a2, 0x4Bu))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2046, (uint64_t)"lm/recentb", 6, (uint64_t)"%s", v14, v15, (char)&errStr_lm_recentb_E_RBT_WITH_BINARY_RB_FILE);
    RecentBuffer::loadRecentBufferBinary(this, a2, a3, a5);
  }
  else
  {
    if ((a4 & 1) == 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2055, (uint64_t)"lm/recentb", 12, (uint64_t)"%s", v10, v11, (char)&errStr_lm_recentb_E_CANT_LOAD_TEXT_RECENT_BUFFER);
    DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v53);
    DgnTextFileParser::openDgnTextFileParser((uint64_t)v53, (uint64_t)a2, 0x4Au, 1);
    DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v53, "RecentBufferSpec");
    v52[0] = 0;
    v52[1] = 0;
    DgnTextFile::legalDgnTextFileVersions((int)v53, sRBS_Versions, (uint64_t)v52, v16, v17, v18, v19, v20);
    DgnTextFileParser::verifyFileVersionInRange((uint64_t)v53, (unsigned int *)v52, v21, v22, v23, v24, v25, v26);
    v51 = 0;
    v50 = 0.0;
    v49 = 0;
    v48 = 1.0;
    v47 = 0;
    if (DgnTextFile::getFileVersion((DgnTextFile *)v53) == 0x100000013)
    {
      DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v53, "RecentBufferLength", &v51, 1, 0, 0x7FFFFFFFu);
      DgnTextFile::getHeaderFieldReal((DgnTextFile *)v53, "RecentBufferWeight", &v50, 1, 0.0, 0.99);
      DgnTextFile::getHeaderFieldBool((DgnTextFile *)v53, "UseBigramRecentBuffer", &v49, 1);
    }
    else
    {
      v46 = 0;
      DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v53, "Depth", &v46, 1, 1u, 2u);
      v49 = v46 == 2;
      DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v53, "RecentBufferLength", &v51, 1, 0, 0x7FFFFFFFu);
      DgnTextFile::getHeaderFieldReal((DgnTextFile *)v53, "RecentBufferWeight", &v50, 1, 0.0, 0.99);
    }
    DgnTextFile::getHeaderFieldReal((DgnTextFile *)v53, "RecentBufferUnigramWeight", &v48, 1, 0.0, 1.0);
    DgnTextFile::getHeaderFieldBool((DgnTextFile *)v53, "UseRecentBufferCommonWordsFix", &v47, 1);
    v46 = 0;
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v53, "RecentBufferCommonWordScore", (int *)&v46, 1, 0, 20000);
    v27 = v46;
    DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v53, v28, v29, v30, v31, v32, v33, v34);
    DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v53, 0, v35, v36, v37, v38, v39, v40);
    DgnTextFileParser::verifyNoBodyLines((DgnTextFileParser *)v53);
    if (v50 < 0.0 || v50 > 1.0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2117, (uint64_t)"lm/recentb", 2, (uint64_t)"%.500s %f", v41, v42, (char)"weight");
    v43 = v48;
    if (v48 < 0.0 || v48 > 1.0)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2121, (uint64_t)"lm/recentb", 2, (uint64_t)"%.500s %f", v41, v42, (char)"unigram weight");
      v43 = v48;
    }
    v44 = v49;
    if (v49 == (v43 == 1.0))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2127, (uint64_t)"lm/recentb", 1, (uint64_t)"%f", v41, v42, SLOBYTE(v43));
      v44 = v49;
    }
    v45 = v47;
    if (!v44 && v47)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2129, (uint64_t)"lm/recentb", 14, (uint64_t)"%s", v41, v42, (char)&errStr_lm_recentb_E_COMMON_WORDS_FIX_CONFLICT);
      LOBYTE(v44) = v49;
      v45 = v47;
    }
    *((_DWORD *)this + 10) = v51;
    *((double *)this + 6) = v50;
    *((_BYTE *)this + 56) = v44;
    *((double *)this + 8) = v48;
    *((_BYTE *)this + 72) = v45;
    *((_WORD *)this + 37) = v27;
    if (DFile::subFileExists((uint64_t)a2, 0x4Bu))
    {
      RecentBuffer::loadRecentBufferText(this, a2);
    }
    else
    {
      RecentBuffer::initRecentBuffer(this);
      RecentBuffer::initHeadClonesAndCommonWords(this);
      if (*((_BYTE *)this + 72))
        RecentBuffer::computeRemainderScores(this);
    }
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)v52);
    DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v53);
  }
}

void sub_209A141C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va1);
  _Unwind_Resume(a1);
}

void RecentBuffer::saveRecentBuffer(RecentBuffer *this, DFile *a2, DFileChecksums *a3, int a4, DFileChecksums *a5)
{
  if (a4)
    RecentBuffer::saveRecentBufferText(this, a2, (int)a5);
  else
    RecentBuffer::saveRecentBufferBinary(this, a2, a3, (int)a5);
}

void RecentBuffer::addWordId(RecentBuffer *this, unsigned int a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  _QWORD *v18;
  __int128 v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  int v24;

  v4 = *((unsigned int *)this + 68);
  if (a2 >= v4)
  {
    v5 = (_QWORD *)((char *)this + 264);
    v6 = a2 + 1;
    v7 = *((_DWORD *)this + 69);
    v8 = a2 + 1 - v7;
    if (v6 > v7)
      DgnPrimArray<short>::reallocElts((uint64_t)this + 264, v8, 0);
    *((_DWORD *)this + 68) = v6;
    if (v4 < v6)
      bzero((void *)(*v5 + 2 * v4), 2 * (a2 - v4) + 2);
  }
  if (*((_BYTE *)this + 56))
  {
    v9 = *((unsigned int *)this + 74);
    if (a2 >= v9)
    {
      v10 = a2 + 1;
      v11 = *((_DWORD *)this + 75);
      if (a2 + 1 > v11)
        DgnPrimArray<short>::reallocElts((uint64_t)this + 288, a2 + 1 - v11, 0);
      *((_DWORD *)this + 74) = v10;
      if (v9 < v10)
        bzero((void *)(*((_QWORD *)this + 36) + 2 * v9), 2 * (a2 - v9) + 2);
    }
  }
  if (*((_BYTE *)this + 72))
  {
    v12 = (_QWORD *)((char *)this + 464);
    v13 = *((unsigned int *)this + 118);
    if (a2 >= v13)
    {
      v14 = a2 + 1;
      v15 = *((_DWORD *)this + 119);
      if (a2 + 1 > v15)
        DgnPrimArray<short>::reallocElts((uint64_t)this + 464, a2 + 1 - v15, 0);
      *((_DWORD *)this + 118) = v14;
      if (v13 < v14)
        memset_pattern16((void *)(*v12 + 2 * v13), &unk_209A75B40, 2 * (a2 - v13) + 2);
    }
    v16 = *((unsigned __int16 *)this + 243);
    if (v16 == 20000)
    {
      *(_QWORD *)&v19 = 0;
      v17 = realloc_array(0, (void **)&v19, 4uLL, 0, 0, 1);
      v22 = v19;
      v23 = 1;
      v24 = v17 >> 2;
      *(_DWORD *)v19 = a2;
      v19 = xmmword_209A76430;
      v20 = 1;
      v21 = 1;
      v18 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 464))(*((_QWORD *)this + 4));
      *((_WORD *)this + 243) = RecentBuffer::computeRemainderScore((int *)this, (uint64_t)&v22, (uint64_t)&v19, (uint64_t)v18);
      if (v18)
      {
        (*(void (**)(_QWORD *))*v18)(v18);
        MemChunkFree(v18, 0);
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
      LOWORD(v16) = *((_WORD *)this + 243);
    }
    *(_WORD *)(*v12 + 2 * a2) = v16;
  }
}

void sub_209A14404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void RecentBuffer::deleteWordId(RecentBuffer *this, unsigned int a2, BOOL *a3, BOOL *a4)
{
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t i;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;

  v18 = a2;
  if (!Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeIfPresent((uint64_t)this + 80, (int *)&v18))
  {
    v7 = v18;
    if (*(_WORD *)(*((_QWORD *)this + 33) + 2 * v18)
      || *((_DWORD *)this + 126) > v18
      && ((*(_DWORD *)(*((_QWORD *)this + 62) + (((unint64_t)v18 >> 3) & 0x1FFFFFFC)) >> v18) & 1) != 0)
    {
      if (*((_DWORD *)this + 54))
      {
        v8 = 0;
        do
        {
          v9 = *(_DWORD *)(*((_QWORD *)this + 26) + 4 * v8);
          if (v9 == v18)
          {
            RecentBuffer::addWordCountUni((uint64_t)this, v9, 0);
            *(_DWORD *)(*((_QWORD *)this + 26) + 4 * v8) = 0xFFFFFF;
            RecentBuffer::addWordCountUni((uint64_t)this, 0xFFFFFFu, 1);
            if (*((_BYTE *)this + 56))
            {
              RecentBuffer::addWordCountBi(this, v18, *(_DWORD *)(*((_QWORD *)this + 28) + 4 * v8), 0);
              RecentBuffer::addWordCountBi(this, *(_DWORD *)(*((_QWORD *)this + 26) + 4 * v8), *(_DWORD *)(*((_QWORD *)this + 28) + 4 * v8), 1);
            }
          }
          ++v8;
        }
        while (v8 < *((unsigned int *)this + 54));
      }
      RecentBuffer::computeAppearancesToScores(this, *((_DWORD *)this + 60) - *((_DWORD *)this + 64) - (*((_DWORD *)this + 62) + *((_DWORD *)this + 63)));
      v7 = v18;
    }
    if (*((_BYTE *)this + 56))
    {
      if (*(_WORD *)(*((_QWORD *)this + 36) + 2 * v7))
      {
        v10 = *((unsigned int *)this + 58);
        if ((_DWORD)v10)
        {
          for (i = 0; i < v10; ++i)
          {
            v12 = *(_DWORD *)(*((_QWORD *)this + 28) + 4 * i);
            if (v12 == v18)
            {
              RecentBuffer::addWordCountBi(this, *(_DWORD *)(*((_QWORD *)this + 26) + 4 * i), v12, 0);
              *(_DWORD *)(*((_QWORD *)this + 28) + 4 * i) = 0xFFFFFF;
              RecentBuffer::addWordCountBi(this, *(_DWORD *)(*((_QWORD *)this + 26) + 4 * i), 0xFFFFFFu, 1);
              v10 = *((unsigned int *)this + 58);
            }
          }
          v7 = v18;
        }
      }
    }
    v13 = *((unsigned __int8 *)this + 72);
    if (*((_BYTE *)this + 72))
      *(_WORD *)(*((_QWORD *)this + 58) + 2 * v7) = 20000;
    if (*((_DWORD *)this + 50) > v7 && ((*(_DWORD *)(*((_QWORD *)this + 24) + 4 * (v7 >> 5)) >> v7) & 1) != 0)
    {
      *a3 = 1;
LABEL_29:
      *a4 = 1;
      return;
    }
    if (v13)
    {
      if (*((_DWORD *)this + 126) > v7)
      {
        v14 = *((_QWORD *)this + 62);
        v15 = v7 >> 5;
        v16 = *(_DWORD *)(v14 + 4 * v15);
        v17 = 1 << v7;
        if ((v16 & v17) != 0)
        {
          *(_DWORD *)(v14 + 4 * v15) = v16 & ~v17;
          DgnPrimArray<unsigned int>::removeKeepOrder((uint64_t *)this + 64, v18);
          goto LABEL_29;
        }
      }
    }
  }
}

uint64_t RecentBuffer::addToRecent(WordLanguageModel **this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  int *v12;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;

  v3 = a3;
  v16 = a3;
  v6 = *(unsigned int *)(a2 + 8);
  v14 = 0;
  v15 = 0;
  if ((_DWORD)v6)
  {
    v17 = 0;
    HIDWORD(v15) = realloc_array(0, &v17, 4 * v6, 0, 0, 1) >> 2;
    v14 = (char *)v17;
    v3 = v16;
  }
  LODWORD(v15) = v6;
  if ((_DWORD)v3 != 0xFFFFFF)
  {
    if ((_DWORD)v3 == 16777214)
    {
      v7 = *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)(this + 10), (int *)&v16);
      if (!v7)
      {
LABEL_11:
        if (WordLanguageModel::getMaybeContextLmId(this[4], v16) == -1)
          LODWORD(v3) = 0xFFFFFF;
        else
          LODWORD(v3) = v16;
        goto LABEL_14;
      }
    }
    else
    {
      if (!(*(unsigned int (**)(WordLanguageModel *, uint64_t))(*(_QWORD *)this[2] + 112))(this[2], v3))
      {
        LODWORD(v3) = 0xFFFFFF;
        goto LABEL_14;
      }
      v7 = *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)(this + 10), (int *)&v16);
      if (!v7)
        goto LABEL_11;
    }
    LODWORD(v3) = *((_DWORD *)v7 + 4);
  }
LABEL_14:
  if (*(_DWORD *)(a2 + 8))
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *(_DWORD *)(*(_QWORD *)a2 + v8);
      if (v10 != 0xFFFFFF)
        break;
LABEL_28:
      *(_DWORD *)&v14[v8] = v10;
      ++v9;
      v8 += 4;
      if (v9 >= *(unsigned int *)(a2 + 8))
        goto LABEL_29;
    }
    if (v10 == 16777213)
    {
      v11 = *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)(this + 10), (int *)(*(_QWORD *)a2 + v8));
      if (!v11)
      {
        if (WordLanguageModel::getLmId(this[4], *(_DWORD *)(*(_QWORD *)a2 + v8)) == -1)
          goto LABEL_27;
        v12 = (int *)(*(_QWORD *)a2 + v8);
        goto LABEL_24;
      }
    }
    else
    {
      if (!(*(unsigned int (**)(WordLanguageModel *))(*(_QWORD *)this[2] + 112))(this[2]))
        goto LABEL_27;
      v11 = *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)(this + 10), (int *)(*(_QWORD *)a2 + v8));
      if (!v11)
      {
        if (WordLanguageModel::getLmId(this[4], *(_DWORD *)(*(_QWORD *)a2 + v8)) == -1)
        {
LABEL_27:
          v10 = 0xFFFFFF;
          goto LABEL_28;
        }
        v12 = (int *)(*(_QWORD *)a2 + 4 * v9);
        goto LABEL_24;
      }
    }
    v12 = (int *)(v11 + 2);
LABEL_24:
    v10 = *v12;
    goto LABEL_28;
  }
LABEL_29:
  RecentBuffer::addToRecentInternal((RecentBuffer *)this, (uint64_t)&v14, v3);
  RecentBuffer::computeAppearancesToScores((RecentBuffer *)this, *((_DWORD *)this + 60) - *((_DWORD *)this + 64) - (*((_DWORD *)this + 62) + *((_DWORD *)this + 63)));
  RecentBuffer::setWeights((RecentBuffer *)this);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v14);
}

void sub_209A148B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218978;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 20;
  else
    v7 = 24;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_209A1498C(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::~Hash(uint64_t a1)
{
  Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218978;
  if (*(_DWORD *)(a1 + 8))
    Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::removeBucket(uint64_t result, char **a2)
{
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(char *);
  uint64_t (*v5)(char *);

  v2 = result;
  v3 = *a2;
  *a2 = *(char **)*a2;
  v4 = *(uint64_t (**)(char *))(result + 96);
  if (v4)
    result = v4(v3 + 12);
  v5 = *(uint64_t (**)(char *))(v2 + 104);
  if (v5)
    result = v5(v3 + 20);
  *(_QWORD *)v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  --*(_DWORD *)(v2 + 8);
  return result;
}

void VarClassMgr::printSize(VarClassMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  int v81;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 76, (DgnString *)&v80);
  if (v81)
    v16 = v80;
  else
    v16 = &unk_209A8021C;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A8021C, a3, &unk_209A8021C, v16);
  DgnString::~DgnString((DgnString *)&v80);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A8021C);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 78, (DgnString *)&v80);
  if (v81)
    v27 = v80;
  else
    v27 = &unk_209A8021C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A8021C, (34 - a3), (34 - a3), v27, 4, 4, 0);
  v79 = a3;
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 78, (DgnString *)&v80);
  if (v81)
    v32 = v80;
  else
    v32 = &unk_209A8021C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A8021C, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += 4;
  *a5 += 4;
  v33 = sizeObject((uint64_t)this + 12, 0);
  v34 = sizeObject((uint64_t)this + 12, 1);
  v35 = sizeObject((uint64_t)this + 12, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 78, (DgnString *)&v80);
  if (v81)
    v40 = v80;
  else
    v40 = &unk_209A8021C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, v21, &unk_209A8021C, v22, v22, v40, v33, v34, v35);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v33;
  *a5 += v34;
  *a6 += v35;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 78, (DgnString *)&v80);
  if (v81)
    v45 = v80;
  else
    v45 = &unk_209A8021C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v41, v42, v43, v44, v21, &unk_209A8021C, v22, v22, v45, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += 4;
  *a5 += 4;
  v46 = sizeObject<LinearTransform>((uint64_t)this + 16, 0);
  v47 = sizeObject<LinearTransform>((uint64_t)this + 16, 1);
  v48 = sizeObject<LinearTransform>((uint64_t)this + 16, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 78, (DgnString *)&v80);
  if (v81)
    v53 = v80;
  else
    v53 = &unk_209A8021C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, v21, &unk_209A8021C, v22, v22, v53, v46, v47, v48);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v46;
  *a5 += v47;
  *a6 += v48;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v54 = 12;
  else
    v54 = 16;
  v55 = *((unsigned int *)this + 10);
  v56 = *((_DWORD *)this + 11);
  if (v56 >= v55)
  {
    v57 = 0;
    if ((int)v55 > 0)
      v54 += 4 * (v55 - 1) + 4;
    v58 = v54 + 4 * (v56 - v55);
  }
  else
  {
    v57 = 4 * v55;
    v58 = v54;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 78, (DgnString *)&v80);
  if (v81)
    v63 = v80;
  else
    v63 = &unk_209A8021C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v21, &unk_209A8021C, v22, v22, v63, v58, v54, v57);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v58;
  *a5 += v54;
  *a6 += v57;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v64 = 12;
  else
    v64 = 16;
  v65 = *((unsigned int *)this + 14);
  v66 = *((_DWORD *)this + 15);
  if (v66 >= v65)
  {
    v67 = 0;
    if ((int)v65 > 0)
      v64 = (v64 | 2) + 2 * (v65 - 1);
    v68 = v64 + 2 * (v66 - v65);
  }
  else
  {
    v67 = 2 * v65;
    v68 = v64;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 78, (DgnString *)&v80);
  if (v81)
    v73 = v80;
  else
    v73 = &unk_209A8021C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, v21, &unk_209A8021C, v22, v22, v73, v68, v64, v67);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v68;
  *a5 += v64;
  *a6 += v67;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 79, (DgnString *)&v80);
  if (v81)
    v78 = v80;
  else
    v78 = &unk_209A8021C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v74, v75, v76, v77, v79, &unk_209A8021C, (35 - v79), (35 - v79), v78, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v80);
}

void sub_209A14FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void VarClassMgr::saveVarClassMgr(VarClassMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  DgnStream *v9;
  uint64_t CurrentSubDirComponents;
  int v11;

  if (a4)
  {
    VarClassMgr::saveTransforms(this, a2, a5);
    VarClassMgr::saveMap(this, a2, a5);
  }
  else
  {
    v9 = OpenAndWriteMrecHeader((uint64_t)a2, 0x50u, a5, "MRSCB!?", 24, 4);
    v11 = 0;
    writeObject((uint64_t)v9, (int *)this + 1, &v11);
    writeObject((uint64_t)v9, (int *)this + 2, &v11);
    writeObject((uint64_t)v9, (int *)this + 3, &v11);
    writeObject((uint64_t)v9, (int *)this, &v11);
    writeObject<LinearTransform>(v9, (uint64_t)this + 16, (unsigned int *)&v11);
    writeObject<unsigned int>((uint64_t)v9, (uint64_t)this + 32, &v11);
    writeObject<unsigned short>((uint64_t)v9, (uint64_t)this + 48, &v11);
    writeObjectChecksum((uint64_t)v9, &v11);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x50u, v11);
    if (v9)
    {
      (**(void (***)(DgnStream *))v9)(v9);
      MemChunkFree(v9, 0);
    }
  }
}

void VarClassMgr::saveTransforms(VarClassMgr *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25[2];
  _DWORD *v26;
  int v27;
  int v28;
  int v29[2];
  uint64_t v30;
  uint64_t v31;
  void *v32[35];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v32);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v32, (uint64_t)a2, 0x55u, a3);
  v30 = 0;
  v31 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v32, sSCT_Versions, (uint64_t)&v30, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v32, "SemitiedCovarianceClassTransforms", (_QWORD *)(v30 + 8 * (v31 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v32, "NumberOfCovarianceClasses", *(unsigned int *)this);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v32, "NumberOfOutputFeatures", *((unsigned int *)this + 2));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v32, "NumberOfInputFeatures", *((unsigned int *)this + 1));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v32, "SCTIntScale", 1 << *((_DWORD *)this + 3));
  DgnArray<DgnString>::DgnArray(v29, 5);
  v25[0] = 0;
  v11 = realloc_array(0, v25, 0x14uLL, 0, 0, 1);
  v26 = v25[0];
  v27 = 5;
  v28 = v11 >> 2;
  DgnString::operator=(*(DgnString **)v29, "Type");
  *v26 = 0;
  DgnString::operator=((DgnString *)(*(_QWORD *)v29 + 16), "VarId");
  v26[1] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v29 + 32), "RowNum");
  v26[2] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v29 + 48), "ColNum");
  v26[3] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v29 + 64), "Value");
  v26[4] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v32, (uint64_t)&v26, (uint64_t)v29);
  v12 = *(unsigned int *)this;
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = *((unsigned int *)this + 2);
    v15 = v14;
    do
    {
      if (v15)
      {
        v16 = 0;
        v17 = (_QWORD *)(*((_QWORD *)this + 2) + 72 * v13 + 24);
        LODWORD(v18) = *((_DWORD *)this + 1);
        do
        {
          if ((_DWORD)v18)
          {
            for (i = 0; i < v18; ++i)
            {
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v32, 0, "SCTMatrix");
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 1u, v13);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 2u, v16);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 3u, i);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v32, 4u, *(_DWORD *)(*(_QWORD *)(*v17 + 16 * v16) + 4 * i));
              DgnTextFileWriter::writeNextLine(v32);
              v18 = *((unsigned int *)this + 1);
            }
            v14 = *((unsigned int *)this + 2);
          }
          ++v16;
        }
        while (v16 < v14);
        v12 = *(unsigned int *)this;
        v15 = v14;
      }
      ++v13;
    }
    while (v13 < v12);
    if (v12)
    {
      v20 = 0;
      do
      {
        v21 = *((_QWORD *)this + 2) + 72 * v20;
        v25[0] = 0;
        v25[1] = 0;
        DgnPrimArray<int>::copyArraySlice((unint64_t)v25, (uint64_t *)(v21 + 8), 0, *(_DWORD *)(v21 + 16));
        if (*((_DWORD *)this + 2))
        {
          v22 = 0;
          do
          {
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v32, 0, "SCTOffset");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 1u, v20);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 2u, v22);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 3u, 0);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v32, 4u, *((_DWORD *)v25[0] + v22));
            DgnTextFileWriter::writeNextLine(v32);
            ++v22;
          }
          while (v22 < *((unsigned int *)this + 2));
        }
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
        ++v20;
        v23 = *(unsigned int *)this;
      }
      while (v20 < v23);
      if ((_DWORD)v23)
      {
        v24 = 0;
        do
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v32, 0, "SCTLogDeterminant");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 1u, v24);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 2u, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 3u, 0);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v32, 4u, *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v24));
          DgnTextFileWriter::writeNextLine(v32);
          ++v24;
        }
        while (v24 < *(unsigned int *)this);
      }
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  DgnArray<DgnString>::releaseAll((uint64_t)v29);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v30);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v32);
}

void sub_209A1554C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va2);
  _Unwind_Resume(a1);
}

void VarClassMgr::saveMap(VarClassMgr *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t i;
  _DWORD *v14;
  int v15;
  int v16;
  int v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20[35];
  void *v21;

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v20);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v20, (uint64_t)a2, 0x53u, a3);
  v18 = 0;
  v19 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v20, sSCM_Versions, (uint64_t)&v18, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v20, "SemitiedCovarianceClassMap", (_QWORD *)(v18 + 8 * (v19 - 1)));
  v11 = *((unsigned int *)this + 14);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v20, "NumberOfGenones", v11);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v20, "NumberOfCovarianceClasses", *(unsigned int *)this);
  DgnArray<DgnString>::DgnArray(v17, 2);
  v21 = 0;
  v12 = realloc_array(0, &v21, 8uLL, 0, 0, 1);
  v14 = v21;
  v15 = 2;
  v16 = v12 >> 2;
  DgnString::operator=(*(DgnString **)v17, "GenId");
  *v14 = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v17 + 16), "VarId");
  v14[1] = 3;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v20, (uint64_t)&v14, (uint64_t)v17);
  if ((_DWORD)v11)
  {
    for (i = 0; i != v11; ++i)
    {
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v20, 0, i);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v20, 1u, *(unsigned __int16 *)(*((_QWORD *)this + 6) + 2 * i));
      DgnTextFileWriter::writeNextLine(v20);
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v14);
  DgnArray<DgnString>::releaseAll((uint64_t)v17);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v18);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v20);
}

void sub_209A15754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va2);
  _Unwind_Resume(a1);
}

uint64_t SDParamSetHolder_NewFromFile(FileSpec *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  DgnString *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  uint64_t ParamSetHolder;
  void *v20;
  int v21;
  _BYTE v22[144];
  char *v23;
  int v24;

  v2 = SdapiInsurance::SdapiInsurance(v22, "SDParamSetHolder_NewFromFile", 1, 1, 187);
  if (v22[97])
  {
    if (!a1)
      throwBadStringPointer(v2, v3, v4, v5, v6, v7, v8, v9);
    LOBYTE(v23) = 0;
    if (gbShowCalls | gbShowCallsWithFileSpecArgs)
    {
      DgnString::DgnString((DgnString *)&v20);
      DgnString::DgnString((DgnString *)&v23);
      FileSpec::getDiagnosticMaskedName(a1, (DgnString *)&v23, v10);
      DgnString::preAllocate((unint64_t)&v20, 96);
      if (v24)
        v11 = v23;
      else
        v11 = (char *)&unk_209A80250;
      DgnString::formatStringInPlace((DgnString *)&v20, v11);
      DgnString::~DgnString((DgnString *)&v23);
      if (v21)
        v16 = v20;
      else
        v16 = &unk_209A80250;
      xlprintf("Entering sdapi call %.500s(%.500s)\n", v12, v13, v14, v15, "SDParamSetHolder_NewFromFile", v16);
      DgnString::~DgnString((DgnString *)&v20);
    }
    FileSpec::FileSpec((FileSpec *)&v23, (const char *)a1);
    DFileOwner::DFileOwner((DFileOwner *)&v20);
    v17 = DFile::openDFile((uint64_t)&v23, 0, 13, (uint64_t)&v20);
    ParamSetHolder = ParamSetHolderMgr::loadParamSetHolder((ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr, (char **)v17);
    DFileOwner::~DFileOwner((DFileOwner *)&v20);
    FileSpec::~FileSpec((FileSpec *)&v23);
  }
  else
  {
    ParamSetHolder = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v22);
  return ParamSetHolder;
}

void sub_209A1599C()
{
  __cxa_end_catch();
  JUMPOUT(0x209A159A8);
}

void SDParamSetHolder_Delete(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ParamSetHolderMgr *v9;
  _BYTE v10[144];

  SdapiInsurance::SdapiInsurance(v10, "SDParamSetHolder_Delete", 1, 1, 189);
  if (v10[97])
  {
    if (gbShowCalls)
      xlprintf("Entering sdapi call %.500s(<SDh %lld>)\n", v2, v3, v4, v5, "SDParamSetHolder_Delete", a1);
    v9 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
    if (HIDWORD(a1))
      throwBadSdapiArgument("SDhParamSetHolder", a1, v3, v4, v5, v6, v7, v8);
    if ((a1 + 1) <= 1)
      throwBadSdapiArgument("SDhParamSetHolder", a1, v3, v4, v5, v6, v7, v8);
    ParamSetHolderMgr::deleteParamSetHolder(v9, a1, v3, v4, v5, v6, v7, v8);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v10);
}

void MrecInitModule_wordlat_kernel(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;

  if (!gParDebugLatticeNBestGeneration)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugLatticeNBestGeneration", (const char *)&unk_209A80270, (const char *)&unk_209A80270, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugLatticeNBestGeneration = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugLatticeNBestGeneration);
  }
  if (!gParDebugLatticeLMRescoring)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugLatticeLMRescoring", (const char *)&unk_209A80270, (const char *)&unk_209A80270, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugLatticeLMRescoring = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugLatticeLMRescoring);
  }
  if (!gParDebugLatticeBestAlignment)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugLatticeBestAlignment", (const char *)&unk_209A80270, (const char *)&unk_209A80270, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugLatticeBestAlignment = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugLatticeBestAlignment);
  }
}

uint64_t LatticeStats::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a2 == 3)
    v4 = 0;
  else
    v4 = 96;
  v5 = LMStats::sizeObject(a1 + 48, a2) + v4;
  return v5 + LMStats::sizeObject(a1 + 256, a2);
}

double LatticeStats::resetStats(LatticeStats *this)
{
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 31) = 0;
  LMStats::resetStats((LatticeStats *)((char *)this + 48));
  return LMStats::resetStats((LatticeStats *)((char *)this + 256));
}

double LatticeStats::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  LMStats::operator=(a1 + 48, a2 + 48);
  *(_QWORD *)&result = LMStats::operator=(a1 + 256, a2 + 256).n128_u64[0];
  return result;
}

void BaseWordLatticeLC::~BaseWordLatticeLC(BaseWordLatticeLC *this)
{
  JUMPOUT(0x20BD149A8);
}

double WordLatticeLC::WordLatticeLC(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  double result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;

  *(_DWORD *)(a1 + 16) = -16;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_QWORD *)(a1 + 64) = 1879048192;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = -1;
  *(_QWORD *)a1 = &off_24C2149F8;
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 94) = 0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_WORD *)(a1 + 94) = *(_WORD *)(a2 + 94);
  result = NAN;
  *(_OWORD *)(a1 + 96) = xmmword_209A593D0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_WORD *)(a1 + 92) = 0x3FFF;
  if (a7)
    *(_WORD *)(a1 + 94) = 0;
  if (a3)
    *(_DWORD *)(a1 + 96) = 0;
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 20);
  v11 = *(_DWORD *)(a2 + 24);
  if (a4)
  {
    v9 = -64;
    v10 = -4;
    v11 = -4;
  }
  *(_DWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 20) = v10;
  *(_DWORD *)(a1 + 24) = v11;
  if (a5)
  {
    *(_QWORD *)(a1 + 36) = 0;
    *(_QWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 52) = 0;
    *(_QWORD *)(a1 + 44) = 0;
  }
  else
  {
    *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
    result = *(double *)(a2 + 44);
    *(double *)(a1 + 44) = result;
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  }
  v12 = *(_DWORD *)(a2 + 68);
  v13 = *(_DWORD *)(a2 + 72);
  if (a6)
  {
    v12 = 0;
    v13 = 0;
  }
  *(_DWORD *)(a1 + 68) = v12;
  *(_DWORD *)(a1 + 72) = v13;
  v14 = *(_QWORD *)(a2 + 80);
  if (a8)
    v14 = -1;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  if ((a4 & 1) == 0 && (a5 & 1) == 0)
  {
    result = *(double *)(a2 + 56);
    *(double *)(a1 + 56) = result;
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  }
  return result;
}

void WordLatticeLC::~WordLatticeLC(WordLatticeLC *this)
{
  JUMPOUT(0x20BD149A8);
}

uint64_t WordLatticeLC::cmp(WordLatticeLC *this, const WordLatticeLC *a2, const WordLatticeLC *a3)
{
  uint64_t result;
  int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  result = CWIDAC::cmp((uint64_t)this + 88, (uint64_t)a2 + 88);
  if (!(_DWORD)result)
  {
    result = ItemizedScores::cmp((int *)this + 7, (int *)a2 + 7);
    if (!(_DWORD)result)
    {
      v6 = *((_DWORD *)this + 4);
      if (v6 == -64)
        goto LABEL_4;
      v16 = *((_DWORD *)a2 + 4);
      result = v6 < v16 ? 0xFFFFFFFFLL : 1;
      if (v6 == v16)
      {
        v17 = *((_DWORD *)this + 6);
        v18 = v17 + *((_DWORD *)this + 5);
        v19 = *((_DWORD *)a2 + 6);
        v20 = v19 + *((_DWORD *)a2 + 5);
        result = v18 < v20 ? 0xFFFFFFFFLL : 1;
        if (v18 == v20)
        {
          result = v17 < v19 ? 0xFFFFFFFFLL : 1;
          if (v17 == v19)
          {
LABEL_4:
            v7 = *((_DWORD *)this + 17);
            v8 = *((_DWORD *)a2 + 17);
            v9 = v7 >= v8;
            if (v7 == v8 && (v10 = *((_DWORD *)this + 18), v11 = *((_DWORD *)a2 + 18), v9 = v10 >= v11, v10 == v11))
            {
              v12 = *((_QWORD *)this + 10);
              v13 = *((_QWORD *)a2 + 10);
              v14 = v12 == v13;
              if (v12 < v13)
                v15 = -1;
              else
                v15 = 1;
              if (v14)
                return 0;
              else
                return v15;
            }
            else if (v9)
            {
              return 1;
            }
            else
            {
              return 0xFFFFFFFFLL;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ItemizedScores::cmp(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  BOOL v19;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = v2 + *a1 + v4 + v5 + v6 + v7 + v8;
  v11 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v13 = a2[3];
  v15 = a2[4];
  v14 = a2[5];
  v16 = a2[6];
  v17 = v10 + v11 + v12 + v13 + v15 + v14 + v16;
  v19 = __OFSUB__(v9, v17);
  v18 = v9 - v17 < 0;
  if (v9 == v17
    && (v19 = __OFSUB__(v3, v11), v18 = v3 - v11 < 0, v3 == v11)
    && (v19 = __OFSUB__(v2, v10), v18 = v2 - v10 < 0, v2 == v10))
  {
    if (v8 < v16)
      v20 = -1;
    else
      v20 = 1;
    if (v8 == v16)
      v20 = 0;
    v21 = v7 == v14;
    if (v7 < v14)
      v22 = -1;
    else
      v22 = 1;
    if (v21)
      v22 = v20;
    v23 = v6 == v15;
    if (v6 < v15)
      v24 = -1;
    else
      v24 = 1;
    if (v23)
      v24 = v22;
    v25 = v5 == v13;
    if (v5 < v13)
      v26 = -1;
    else
      v26 = 1;
    if (v25)
      v26 = v24;
    v27 = v4 == v12;
    if (v4 < v12)
      v28 = -1;
    else
      v28 = 1;
    if (v27)
      return v26;
    else
      return v28;
  }
  else if (v18 != v19)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
}

uint64_t WordLatticeLC::cmpForDuplicateCheck(WordLatticeLC *this, const WordLatticeLC *a2, const WordLatticeLC *a3)
{
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unsigned int v14;

  result = CWIDAC::cmp((uint64_t)this + 88, (uint64_t)a2 + 88);
  if (!(_DWORD)result)
  {
    v6 = *((_DWORD *)this + 17);
    v7 = *((_DWORD *)a2 + 17);
    v8 = v6 >= v7;
    if (v6 == v7 && (v9 = *((_DWORD *)this + 18), v10 = *((_DWORD *)a2 + 18), v8 = v9 >= v10, v9 == v10))
    {
      v11 = *((_QWORD *)this + 10);
      v12 = *((_QWORD *)a2 + 10);
      v13 = v11 == v12;
      if (v11 < v12)
        v14 = -1;
      else
        v14 = 1;
      if (v13)
        return 0;
      else
        return v14;
    }
    else if (v8)
    {
      return 1;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t WordLatticeLC::cmpForSameLinkWithDifferentScoresCheck(WordLatticeLC *this, const WordLatticeLC *a2, const WordLatticeLC *a3)
{
  int v3;
  int v4;
  BOOL v5;
  _BOOL4 v6;

  v3 = vaddvq_s32(*(int32x4_t *)((char *)this + 28))
     + *((_DWORD *)this + 11)
     + *((_DWORD *)this + 12)
     + *((_DWORD *)this + 13);
  v4 = vaddvq_s32(*(int32x4_t *)((char *)a2 + 28)) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 12) + *((_DWORD *)a2 + 13);
  v5 = v3 <= v4;
  v6 = v3 < v4;
  if (v5)
    return v6;
  else
    return 0xFFFFFFFFLL;
}

uint64_t WordLatticeLC::cmpForMultiLinkCheck(WordLatticeLC *this, const WordLatticeLC *a2, const WordLatticeLC *a3)
{
  if (CWIDAC::cmp((uint64_t)this + 88, (uint64_t)a2 + 88)
    || *((_DWORD *)this + 17) != *((_DWORD *)a2 + 17)
    || *((_DWORD *)this + 18) != *((_DWORD *)a2 + 18))
  {
    return 0;
  }
  if (vaddvq_s32(*(int32x4_t *)((char *)this + 28))
     + *((_DWORD *)this + 11)
     + *((_DWORD *)this + 12)
     + *((_DWORD *)this + 13) > vaddvq_s32(*(int32x4_t *)((char *)a2 + 28))
                              + *((_DWORD *)a2 + 11)
                              + *((_DWORD *)a2 + 12)
                              + *((_DWORD *)a2 + 13))
    return 0xFFFFFFFFLL;
  return 1;
}

void InputLatticeLC::~InputLatticeLC(InputLatticeLC *this)
{
  JUMPOUT(0x20BD149A8);
}

uint64_t writeObject(DgnStream *a1, const InputLatticeLC *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  int v13;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;

  writeObject(a1, (const double *)a2 + 1, a3, a4, a5, a6, a7, a8);
  v11 = *((_DWORD *)a2 + 4);
  if (v11 == -64)
    v11 = -1;
  v25 = v11;
  writeObject((uint64_t)a1, &v25, a3);
  v12 = *((_DWORD *)a2 + 5);
  if (v12 == -4)
    v12 = -1;
  v24 = v12;
  writeObject((uint64_t)a1, &v24, a3);
  v13 = *((_DWORD *)a2 + 6);
  if (v13 == -4)
    v13 = -1;
  v23 = v13;
  writeObject((uint64_t)a1, &v23, a3);
  v22 = *((_DWORD *)a2 + 7);
  writeObject((uint64_t)a1, &v22, a3);
  v21 = *((_DWORD *)a2 + 8);
  writeObject((uint64_t)a1, &v21, a3);
  v20 = *((_DWORD *)a2 + 9);
  writeObject((uint64_t)a1, &v20, a3);
  v19 = *((_DWORD *)a2 + 10);
  writeObject((uint64_t)a1, &v19, a3);
  v18 = *((_DWORD *)a2 + 11);
  writeObject((uint64_t)a1, &v18, a3);
  v17 = *((_DWORD *)a2 + 12);
  writeObject((uint64_t)a1, &v17, a3);
  v16 = *((_DWORD *)a2 + 13);
  writeObject((uint64_t)a1, &v16, a3);
  v15 = *((_DWORD *)a2 + 16);
  writeObject((uint64_t)a1, &v15, a3);
  writeObject((uint64_t)a1, (int *)a2 + 14, a3);
  writeObject((uint64_t)a1, (int *)a2 + 15, a3);
  writeObject((uint64_t)a1, (int *)a2 + 17, a3);
  writeObject((uint64_t)a1, (int *)a2 + 18, a3);
  writeObject((uint64_t)a1, (uint64_t *)a2 + 10, a3);
  writeObject((uint64_t)a1, (int *)a2 + 22, a3);
  writeObject((uint64_t)a1, (int *)a2 + 23, a3);
  return writeObject((uint64_t)a1, (int *)a2 + 24, a3);
}

uint64_t writeObject(DgnStream *a1, int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  writeObject(a1, (const InputLatticeLC *)a2, a3, a4, a5, a6, a7, a8);
  writeObject((uint64_t)a1, a2 + 26, a3);
  return writeObject((uint64_t)a1, a2 + 27, a3);
}

uint64_t LinkSegIds::findOrAddLinkSegSeqIdFromLinkSegIds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t i;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v5 = *(unsigned int *)(a2 + 8);
  if (v5 > 1)
  {
    v6 = 0;
    v7 = *(uint64_t **)a2;
    for (i = 1; i != v5; ++i)
    {
      v9 = v7[i];
      v10 = i - 1;
      if (v9 < v7[i - 1])
      {
        v11 = v6;
        while (v11 != -1)
        {
          v12 = v7[v11--];
          if (v12 <= v9)
          {
            v13 = v11 + 2;
            goto LABEL_9;
          }
        }
        v13 = 0;
LABEL_9:
        if (v10 >= v13)
        {
          do
          {
            v7[(v10 + 1)] = v7[v10];
            LODWORD(v10) = v10 - 1;
          }
          while (v10 >= v13);
        }
        v7[v13] = v9;
      }
      ++v6;
    }
  }
  v14 = *(unsigned int *)(a1 + 8) | (unint64_t)(v5 << 32);
  v15 = HashProbeKEV<unsigned long long,DgnPrimArray<unsigned long long>,LinkSegIds>::insert(a3, v14, a2);
  if (v15 == v14)
  {
    v16 = *(_DWORD *)(a2 + 8);
    v17 = *(_DWORD *)(a1 + 8);
    v18 = *(_DWORD *)(a1 + 12);
    if (v17 + v16 > v18)
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1, v17 + v16 - v18, 1);
      v16 = *(_DWORD *)(a2 + 8);
      v17 = *(_DWORD *)(a1 + 8);
    }
    if (v16)
    {
      v19 = *(uint64_t **)a2;
      v20 = *(_QWORD *)a1;
      v21 = v16;
      v22 = v17;
      do
      {
        v23 = *v19++;
        *(_QWORD *)(v20 + 8 * v22++) = v23;
        --v21;
      }
      while (v21);
    }
    *(_DWORD *)(a1 + 8) = v16 + v17;
  }
  return v15;
}

uint64_t HashProbeKEV<unsigned long long,DgnPrimArray<unsigned long long>,LinkSegIds>::insert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v6 = *(_DWORD *)(a1 + 4);
  if (*(_DWORD *)a1 >= v6 >> 1)
    HashProbeKEV<unsigned long long,DgnPrimArray<unsigned long long>,LinkSegIds>::upSize(a1, 2 * v6);
  v7 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(uint64_t **)a3;
    do
    {
      v10 = *v9++;
      HIDWORD(v11) = v8;
      LODWORD(v11) = v8;
      HIDWORD(v11) = (v11 >> 19) + HIDWORD(v10);
      LODWORD(v11) = HIDWORD(v11);
      v8 = (v11 >> 19) + v10;
      --v7;
    }
    while (v7);
    LODWORD(v7) = -1640531527 * v8;
  }
  v12 = *(_DWORD *)(a1 + 8);
  v13 = v7 >> -(char)v12;
  if (v12)
    v14 = v13;
  else
    v14 = 0;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(v15 + 8 * v14);
  if (v16 == -1)
  {
LABEL_18:
    *(_QWORD *)(v15 + 8 * v14) = a2;
    ++*(_DWORD *)a1;
    return a2;
  }
  if (!LinkSegIds::equalKeys(*(_QWORD **)(a1 + 32), v16, a3))
  {
    while (1)
    {
      v14 = (_DWORD)v14 + 1 == *(_DWORD *)(a1 + 4) ? 0 : (v14 + 1);
      v15 = *(_QWORD *)(a1 + 16);
      v17 = *(_QWORD *)(v15 + 8 * v14);
      if (v17 == -1)
        break;
      if (LinkSegIds::equalKeys(*(_QWORD **)(a1 + 32), v17, a3))
        return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v14);
    }
    goto LABEL_18;
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v14);
}

BOOL LatticePath::isRootPath(LatticePath *this)
{
  return *(_DWORD *)this == -1
      && *((_DWORD *)this + 1) == -1
      && !*((_DWORD *)this + 2)
      && !*((_DWORD *)this + 3)
      && *((_WORD *)this + 8) == 127
      && *((_DWORD *)this + 5) == 0;
}

BOOL LatticePath::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

void WordLattice::WordLattice(WordLattice *this, int a2, int a3, int a4, __int16 a5, char a6, char a7, char a8, BOOL a9)
{
  *((_BYTE *)this + 8) = 0;
  *(_OWORD *)((char *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 140) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(_QWORD *)this = off_24C213D08;
  *((_DWORD *)this + 47) = 0;
  *((_DWORD *)this + 48) = a2;
  *((_DWORD *)this + 49) = a3;
  *((_DWORD *)this + 50) = a4;
  *((_WORD *)this + 102) = a5;
  *((_BYTE *)this + 206) = a6;
  *((_BYTE *)this + 207) = 1;
  *((_BYTE *)this + 208) = a7;
  *(_WORD *)((char *)this + 209) = 0;
  *((_BYTE *)this + 211) = a8;
  *((_BYTE *)this + 212) = 0;
  *(_DWORD *)((char *)this + 213) = 16843009;
  *((_BYTE *)this + 217) = 0;
  *((_BYTE *)this + 218) = a9;
  *(_WORD *)((char *)this + 219) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  DgnString::DgnString((WordLattice *)((char *)this + 272));
}

{
  WordLattice::WordLattice(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_209A168C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v1 + 32));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(v1 + 30));
  DgnIArray<Utterance *>::~DgnIArray(v2);
  Lattice<WordLatticeLC>::~Lattice(v1);
  _Unwind_Resume(a1);
}

void WordLattice::WordLattice(WordLattice *this, const WordLattice *a2, int a3, int a4, int a5, int a6, int a7, int a8, double a9, uint8x8_t a10)
{
  int8x8_t v12;
  int16x4_t v14;
  char v16;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  int Node;
  uint64_t v26;
  uint64_t v27;
  void *v31[14];
  _DWORD *v32;
  uint64_t v33;

  *((_BYTE *)this + 8) = 0;
  *(_OWORD *)((char *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 140) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *((_DWORD *)this + 47) = 0;
  *(_QWORD *)this = off_24C213D08;
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_WORD *)this + 102) = *((_WORD *)a2 + 102);
  *(_DWORD *)((char *)this + 206) = *(_DWORD *)((char *)a2 + 206);
  *((_WORD *)this + 105) = *((_WORD *)a2 + 105);
  v12.i16[0] = a3;
  v12.i16[1] = a6;
  v12.i16[2] = a4;
  v12.i16[3] = a5;
  *((_BYTE *)this + 212) = *((_BYTE *)a2 + 212);
  a10.i32[0] = *(_DWORD *)((char *)a2 + 213);
  v14 = (int16x4_t)vmovl_u8(a10).u64[0];
  *(_DWORD *)((char *)this + 213) = vmovn_s16((int16x8_t)*(unint64_t *)&vand_s8(vbic_s8((int8x8_t)vtst_s16(v14, v14), v12), (int8x8_t)0x1000100010001)).u32[0];
  *((_BYTE *)this + 217) = 0;
  *((_WORD *)this + 109) = *((_WORD *)a2 + 109);
  v16 = a8 ^ 1;
  if (!*((_BYTE *)a2 + 220))
    v16 = 0;
  *((_BYTE *)this + 220) = v16;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  if (!a6)
    DgnArray<ParseToken>::copyArraySlice((unint64_t)this + 224, (uint64_t *)a2 + 28, 0, *((_DWORD *)a2 + 58));
  v18 = (_OWORD *)((char *)this + 240);
  if ((a8 & 1) != 0)
  {
    *v18 = 0u;
    *((_OWORD *)this + 16) = 0u;
  }
  else
  {
    *(_QWORD *)v18 = 0;
    *((_QWORD *)this + 31) = 0;
    DgnArray<LinkSegment>::copyArraySlice((unint64_t)this + 240, (_QWORD *)a2 + 30, 0, *((_DWORD *)a2 + 62));
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 33) = 0;
    DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)this + 256, (uint64_t *)a2 + 32, 0, *((_DWORD *)a2 + 66));
  }
  DgnString::DgnString((WordLattice *)((char *)this + 272), (const WordLattice *)((char *)a2 + 272));
  if ((a4 & 1) != 0 || a5)
    *((_BYTE *)this + 219) = 0;
  v19 = *((unsigned int *)a2 + 6);
  v20 = *((unsigned int *)a2 + 26);
  v21 = *((_DWORD *)this + 7);
  if (v19 > v21)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 16, v19 - v21, 0);
  v22 = *((_DWORD *)this + 27);
  if (v20 > v22)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 96, v20 - v22, 0);
  v32 = 0;
  v33 = 0;
  if (!(_DWORD)v19)
  {
    LODWORD(v33) = 0;
    if (!(_DWORD)v20)
      goto LABEL_23;
    goto LABEL_21;
  }
  v31[0] = 0;
  v23 = realloc_array(0, v31, 4 * v19, 0, 0, 1);
  v24 = 0;
  v32 = v31[0];
  LODWORD(v33) = v19;
  HIDWORD(v33) = v23 >> 2;
  do
  {
    Node = Lattice<WordLatticeLC>::createNode((uint64_t)this);
    v32[v24++] = Node;
  }
  while (v19 != v24);
  if ((_DWORD)v20)
  {
LABEL_21:
    v26 = 0;
    do
    {
      v27 = *((_QWORD *)a2 + 16) + 136 * *(unsigned int *)(*((_QWORD *)a2 + 12) + v26);
      WordLatticeLC::WordLatticeLC((uint64_t)v31, v27, a3, a4, a5, a6, a7, a8);
      Lattice<WordLatticeLC>::maybeCreateAndConnectLink2((uint64_t *)this, v32[*(unsigned int *)(*((_QWORD *)a2 + 10) + 24 * *(unsigned int *)(v27 + 116))], (const WordLatticeLC *)v32[*(unsigned int *)(*((_QWORD *)a2 + 10)+ 24 * *(unsigned int *)(v27 + 120))], (WordLatticeLC *)v31);
      v26 += 4;
    }
    while (4 * v20 != v26);
  }
LABEL_23:
  *((_BYTE *)this + 8) = 0;
  Lattice<WordLatticeLC>::minimize((uint64_t)this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
}

void sub_209A16BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DgnString *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _QWORD *v13;

  DgnIArray<Utterance *>::~DgnIArray(a12);
  DgnIArray<Utterance *>::~DgnIArray(a13);
  Lattice<WordLatticeLC>::~Lattice(v13);
  _Unwind_Resume(a1);
}

uint64_t Lattice<WordLatticeLC>::maybeCreateAndConnectLink2(uint64_t *a1, unsigned int a2, const WordLatticeLC *a3, WordLatticeLC *a4)
{
  int v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  const WordLatticeLC *Link;

  v5 = (int)a3;
  v8 = *(unsigned int *)(a1[10] + 24 * a2 + 20);
  if ((_DWORD)v8 != -2)
  {
    v9 = a1[16];
    do
    {
      if (*(_DWORD *)(v9 + 136 * v8 + 120) == v5)
      {
        result = WordLatticeLC::cmp(a4, (const WordLatticeLC *)(v9 + 136 * v8), a3);
        if (!(_DWORD)result)
          return result;
        v9 = a1[16];
      }
      v8 = *(unsigned int *)(v9 + 136 * v8 + 128);
    }
    while ((_DWORD)v8 != -2);
  }
  Link = (const WordLatticeLC *)Lattice<WordLatticeLC>::createLink((uint64_t)a1, a2, v5, a4);
  Lattice<WordLatticeLC>::connectInLink(a1, Link);
  Lattice<WordLatticeLC>::connectOutLink(a1, Link);
  return 1;
}

uint64_t Lattice<WordLatticeLC>::cmpNodesByInLinks(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;

  result = Lattice<WordLatticeLC>::cmpNodesByInLinksIgnoreNodes(a1, a2, a3);
  if (!(_DWORD)result)
  {
    if (a2 == a3)
    {
      return 0;
    }
    else if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * a2 + 4) < *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * a3 + 4))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t Lattice<WordLatticeLC>::cmpNodesByOutLinks(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;

  result = Lattice<WordLatticeLC>::cmpNodesByOutLinksIgnoreNodes(a1, a2, a3);
  if (!(_DWORD)result)
  {
    if (a2 == a3)
    {
      return 0;
    }
    else if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * a2 + 4) < *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * a3 + 4))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t WordLattice::SortInLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<InLinkICmp>(*(_QWORD *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<InLinkICmp>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int *v14;
  int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  int v21;
  int v22;
  unsigned int *v23;
  int v24;
  int v25;
  int v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  char v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int *v54;
  int64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  char v63;
  BOOL v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int *v98;
  _BOOL4 v99;
  unsigned int *v100;
  unint64_t v101;
  BOOL v103;
  int v104;

  v5 = a2;
  v6 = (unsigned int *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v103 = ((result | a3) & 7) == 0;
  v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v73 = (unsigned int *)((char *)v6 + v5 * a3);
      v74 = (unsigned int *)((char *)v6 + a3);
      v75 = v6;
      do
      {
        if (v74 > v6)
        {
          v76 = v75;
          v77 = v74;
          do
          {
            v78 = v77;
            v77 = (unsigned int *)((char *)v77 + v7);
            result = Lattice<WordLatticeLC>::cmpInLink(a4, *v77, (const WordLatticeLC *)*v78);
            if ((int)result < 1)
              break;
            if (v104)
            {
              if (v103)
              {
                v79 = 0;
                v80 = (uint64_t)v76 + a3;
                do
                {
                  v81 = *(_QWORD *)(v80 + 8 * v79);
                  *(_QWORD *)(v80 + 8 * v79) = *(_QWORD *)&v76[2 * v79];
                  *(_QWORD *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                v83 = 0;
                v84 = (uint64_t)v76 + a3;
                do
                {
                  v85 = *(_BYTE *)(v84 + v83);
                  *(_BYTE *)(v84 + v83) = *((_BYTE *)v76 + v83);
                  *((_BYTE *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              v82 = *(_QWORD *)v78;
              *(_QWORD *)v78 = *(_QWORD *)v77;
              *(_QWORD *)v77 = v82;
            }
            v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        v74 = (unsigned int *)((char *)v74 + a3);
        v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  v9 = a4;
  v10 = a3 >> 3;
  v99 = a3 != 8;
  while (1)
  {
    v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    v101 = v5;
    if (v5 == 7)
      goto LABEL_46;
    v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      v13 = (v5 >> 3) * a3;
      v14 = (unsigned int *)((char *)v6 + 2 * v13);
      v15 = Lattice<WordLatticeLC>::cmpInLink(a4, *v6, (const WordLatticeLC *)*(unsigned int *)((char *)v6 + v13));
      v100 = (unsigned int *)((char *)v6 + v13);
      v16 = Lattice<WordLatticeLC>::cmpInLink(a4, *(unsigned int *)((char *)v6 + v13), (const WordLatticeLC *)*v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpInLink(a4, *v6, (const WordLatticeLC *)*v14) >= 0)
            v17 = v6;
          else
            v17 = (unsigned int *)((char *)v6 + 2 * v13);
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpInLink(a4, *v6, (const WordLatticeLC *)*v14) >= 0)
          v17 = (unsigned int *)((char *)v6 + 2 * v13);
        else
          v17 = v6;
LABEL_18:
        v100 = v17;
      }
      v19 = (unsigned int *)((char *)v11 - v13);
      v20 = (unsigned int *)((char *)v11 + v13);
      v21 = Lattice<WordLatticeLC>::cmpInLink(a4, *(unsigned int *)((char *)v11 - v13), (const WordLatticeLC *)*v11);
      v22 = Lattice<WordLatticeLC>::cmpInLink(a4, *v11, (const WordLatticeLC *)*(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpInLink(a4, *v19, (const WordLatticeLC *)*v20) >= 0)
            v11 = (unsigned int *)((char *)v11 - v13);
          else
            v11 = (unsigned int *)((char *)v11 + v13);
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpInLink(a4, *v19, (const WordLatticeLC *)*v20) >= 0)
          v11 = (unsigned int *)((char *)v11 + v13);
        else
          v11 = (unsigned int *)((char *)v11 - v13);
      }
      v23 = (unsigned int *)((char *)v98 - 2 * v13);
      v12 = (unsigned int *)((char *)v98 - v13);
      v24 = Lattice<WordLatticeLC>::cmpInLink(a4, *v23, (const WordLatticeLC *)*v12);
      v25 = Lattice<WordLatticeLC>::cmpInLink(a4, *v12, (const WordLatticeLC *)*v98);
      if (v24 < 0)
      {
        v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpInLink(a4, *v23, (const WordLatticeLC *)*v98) >= 0)
            v12 = v23;
        }
      }
      else
      {
        v18 = v100;
        if (v25 <= 0)
        {
          v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpInLink(a4, *v23, (const WordLatticeLC *)*v98) < 0)
            v12 = v23;
        }
      }
      v5 = v101;
      goto LABEL_37;
    }
    v18 = v6;
LABEL_37:
    v9 = a4;
    v26 = Lattice<WordLatticeLC>::cmpInLink(a4, *v18, (const WordLatticeLC *)*v11);
    result = Lattice<WordLatticeLC>::cmpInLink(a4, *v11, (const WordLatticeLC *)*v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = Lattice<WordLatticeLC>::cmpInLink(a4, *v18, (const WordLatticeLC *)*v12);
        if ((int)result >= 0)
          v11 = v18;
        else
          v11 = v12;
      }
    }
    else if ((int)result <= 0)
    {
      result = Lattice<WordLatticeLC>::cmpInLink(a4, *v18, (const WordLatticeLC *)*v12);
      if ((int)result >= 0)
        v11 = v12;
      else
        v11 = v18;
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        v27 = v6;
        v28 = a3 >> 3;
        do
        {
          v29 = *(_QWORD *)v27;
          *(_QWORD *)v27 = *(_QWORD *)v11;
          v27 += 2;
          *(_QWORD *)v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        v31 = a3;
        v32 = v6;
        do
        {
          v33 = *(_BYTE *)v32;
          *(_BYTE *)v32 = *(_BYTE *)v11;
          v32 = (unsigned int *)((char *)v32 + 1);
          *(_BYTE *)v11 = v33;
          v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      v30 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v11;
      *(_QWORD *)v11 = v30;
    }
    v34 = 0;
    v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    v36 = v35;
    v37 = (unsigned int *)((char *)v6 + a3);
    v38 = (_QWORD *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      result = Lattice<WordLatticeLC>::cmpInLink(v9, *v37, (const WordLatticeLC *)*v6);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v39 = 0;
            do
            {
              v40 = v38[v39];
              v38[v39] = *(_QWORD *)&v37[2 * v39];
              *(_QWORD *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            v49 = 0;
            do
            {
              v50 = *((_BYTE *)v38 + v49);
              *((_BYTE *)v38 + v49) = *((_BYTE *)v37 + v49);
              *((_BYTE *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          v48 = *v38;
          *v38 = *(_QWORD *)v37;
          *(_QWORD *)v37 = v48;
        }
        v38 = (_QWORD *)((char *)v38 + a3);
        v34 = 1;
      }
      v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      result = Lattice<WordLatticeLC>::cmpInLink(v9, *v36, (const WordLatticeLC *)*v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            v46 = 0;
            do
            {
              v47 = *(_QWORD *)&v37[2 * v46];
              *(_QWORD *)&v37[2 * v46] = *(_QWORD *)&v36[2 * v46];
              *(_QWORD *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            v52 = 0;
            do
            {
              v53 = *((_BYTE *)v37 + v52);
              *((_BYTE *)v37 + v52) = *((_BYTE *)v36 + v52);
              *((_BYTE *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          v51 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v36;
          *(_QWORD *)v36 = v51;
        }
        v37 = (unsigned int *)((char *)v37 + a3);
        v36 = (unsigned int *)((char *)v36 + v7);
        v34 = 1;
        goto LABEL_55;
      }
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v41 = 0;
            do
            {
              v42 = *(_QWORD *)&v36[2 * v41];
              *(_QWORD *)&v36[2 * v41] = *(_QWORD *)&v35[2 * v41];
              *(_QWORD *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            v44 = 0;
            do
            {
              v45 = *((_BYTE *)v36 + v44);
              *((_BYTE *)v36 + v44) = *((_BYTE *)v35 + v44);
              *((_BYTE *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          v43 = *(_QWORD *)v36;
          *(_QWORD *)v36 = *(_QWORD *)v35;
          *(_QWORD *)v35 = v43;
        }
        v35 = (unsigned int *)((char *)v35 + v7);
        v34 = 1;
      }
      v36 = (unsigned int *)((char *)v36 + v7);
    }
    v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34)
      break;
    v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38)
      v56 = (char *)v37 - (char *)v38;
    else
      v56 = (char *)v38 - (char *)v6;
    if (v56)
    {
      if (v103)
      {
        v57 = (_QWORD *)((char *)v37 - v56);
        v58 = v56 >> 3;
        v59 = v6;
        do
        {
          v60 = *(_QWORD *)v59;
          *(_QWORD *)v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        v61 = -(uint64_t)v56;
        v62 = v6;
        do
        {
          v63 = *(_BYTE *)v62;
          *(_BYTE *)v62 = *((_BYTE *)v37 + v61);
          v62 = (unsigned int *)((char *)v62 + 1);
          *((_BYTE *)v37 + v61) = v63;
          v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3))
      v66 = (char *)v54 - ((char *)v35 + a3);
    else
      v66 = (char *)v35 - (char *)v36;
    if (v66)
    {
      if (v103)
      {
        v67 = (char *)v54 - v66;
        v68 = v66 >> 3;
        do
        {
          v69 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v67;
          v37 += 2;
          *(_QWORD *)v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        v70 = -(uint64_t)v66;
        do
        {
          v71 = *(_BYTE *)v37;
          *(_BYTE *)v37 = *((_BYTE *)v54 + v70);
          v37 = (unsigned int *)((char *)v37 + 1);
          *((_BYTE *)v54 + v70) = v71;
          v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3)
      result = mrec_qsort_r<InLinkICmp>(v6, v55 / a3, a3, a4);
    if (v65 <= (uint64_t)a3)
      return result;
    v6 = (unsigned int *)((char *)v54 - v65);
    v5 = v65 / a3;
    v72 = v99;
    if (((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) != 0)
      v72 = 2;
    v103 = ((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) == 0;
    v104 = v72;
    v9 = a4;
    if (v5 < 7)
      goto LABEL_119;
  }
  v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    v87 = v6;
    do
    {
      if (v86 > v6)
      {
        v88 = v87;
        v89 = v86;
        do
        {
          v90 = v89;
          v89 = (unsigned int *)((char *)v89 + v7);
          result = Lattice<WordLatticeLC>::cmpInLink(a4, *v89, (const WordLatticeLC *)*v90);
          if ((int)result < 1)
            break;
          if (v104)
          {
            if (v103)
            {
              v91 = 0;
              v92 = (uint64_t)v88 + a3;
              do
              {
                v93 = *(_QWORD *)(v92 + 8 * v91);
                *(_QWORD *)(v92 + 8 * v91) = *(_QWORD *)&v88[2 * v91];
                *(_QWORD *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              v95 = 0;
              v96 = (uint64_t)v88 + a3;
              do
              {
                v97 = *(_BYTE *)(v96 + v95);
                *(_BYTE *)(v96 + v95) = *((_BYTE *)v88 + v95);
                *((_BYTE *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            v94 = *(_QWORD *)v90;
            *(_QWORD *)v90 = *(_QWORD *)v89;
            *(_QWORD *)v89 = v94;
          }
          v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      v86 = (unsigned int *)((char *)v86 + a3);
      v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

uint64_t WordLattice::SortOutLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<OutLinkICmp>(*(_QWORD *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<OutLinkICmp>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int *v14;
  int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  int v21;
  int v22;
  unsigned int *v23;
  int v24;
  int v25;
  int v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  char v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int *v54;
  int64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  char v63;
  BOOL v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int *v98;
  _BOOL4 v99;
  unsigned int *v100;
  unint64_t v101;
  BOOL v103;
  int v104;

  v5 = a2;
  v6 = (unsigned int *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v103 = ((result | a3) & 7) == 0;
  v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v73 = (unsigned int *)((char *)v6 + v5 * a3);
      v74 = (unsigned int *)((char *)v6 + a3);
      v75 = v6;
      do
      {
        if (v74 > v6)
        {
          v76 = v75;
          v77 = v74;
          do
          {
            v78 = v77;
            v77 = (unsigned int *)((char *)v77 + v7);
            result = Lattice<WordLatticeLC>::cmpOutLink(a4, *v77, (const WordLatticeLC *)*v78);
            if ((int)result < 1)
              break;
            if (v104)
            {
              if (v103)
              {
                v79 = 0;
                v80 = (uint64_t)v76 + a3;
                do
                {
                  v81 = *(_QWORD *)(v80 + 8 * v79);
                  *(_QWORD *)(v80 + 8 * v79) = *(_QWORD *)&v76[2 * v79];
                  *(_QWORD *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                v83 = 0;
                v84 = (uint64_t)v76 + a3;
                do
                {
                  v85 = *(_BYTE *)(v84 + v83);
                  *(_BYTE *)(v84 + v83) = *((_BYTE *)v76 + v83);
                  *((_BYTE *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              v82 = *(_QWORD *)v78;
              *(_QWORD *)v78 = *(_QWORD *)v77;
              *(_QWORD *)v77 = v82;
            }
            v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        v74 = (unsigned int *)((char *)v74 + a3);
        v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  v9 = a4;
  v10 = a3 >> 3;
  v99 = a3 != 8;
  while (1)
  {
    v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    v101 = v5;
    if (v5 == 7)
      goto LABEL_46;
    v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      v13 = (v5 >> 3) * a3;
      v14 = (unsigned int *)((char *)v6 + 2 * v13);
      v15 = Lattice<WordLatticeLC>::cmpOutLink(a4, *v6, (const WordLatticeLC *)*(unsigned int *)((char *)v6 + v13));
      v100 = (unsigned int *)((char *)v6 + v13);
      v16 = Lattice<WordLatticeLC>::cmpOutLink(a4, *(unsigned int *)((char *)v6 + v13), (const WordLatticeLC *)*v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpOutLink(a4, *v6, (const WordLatticeLC *)*v14) >= 0)
            v17 = v6;
          else
            v17 = (unsigned int *)((char *)v6 + 2 * v13);
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpOutLink(a4, *v6, (const WordLatticeLC *)*v14) >= 0)
          v17 = (unsigned int *)((char *)v6 + 2 * v13);
        else
          v17 = v6;
LABEL_18:
        v100 = v17;
      }
      v19 = (unsigned int *)((char *)v11 - v13);
      v20 = (unsigned int *)((char *)v11 + v13);
      v21 = Lattice<WordLatticeLC>::cmpOutLink(a4, *(unsigned int *)((char *)v11 - v13), (const WordLatticeLC *)*v11);
      v22 = Lattice<WordLatticeLC>::cmpOutLink(a4, *v11, (const WordLatticeLC *)*(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpOutLink(a4, *v19, (const WordLatticeLC *)*v20) >= 0)
            v11 = (unsigned int *)((char *)v11 - v13);
          else
            v11 = (unsigned int *)((char *)v11 + v13);
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpOutLink(a4, *v19, (const WordLatticeLC *)*v20) >= 0)
          v11 = (unsigned int *)((char *)v11 + v13);
        else
          v11 = (unsigned int *)((char *)v11 - v13);
      }
      v23 = (unsigned int *)((char *)v98 - 2 * v13);
      v12 = (unsigned int *)((char *)v98 - v13);
      v24 = Lattice<WordLatticeLC>::cmpOutLink(a4, *v23, (const WordLatticeLC *)*v12);
      v25 = Lattice<WordLatticeLC>::cmpOutLink(a4, *v12, (const WordLatticeLC *)*v98);
      if (v24 < 0)
      {
        v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpOutLink(a4, *v23, (const WordLatticeLC *)*v98) >= 0)
            v12 = v23;
        }
      }
      else
      {
        v18 = v100;
        if (v25 <= 0)
        {
          v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpOutLink(a4, *v23, (const WordLatticeLC *)*v98) < 0)
            v12 = v23;
        }
      }
      v5 = v101;
      goto LABEL_37;
    }
    v18 = v6;
LABEL_37:
    v9 = a4;
    v26 = Lattice<WordLatticeLC>::cmpOutLink(a4, *v18, (const WordLatticeLC *)*v11);
    result = Lattice<WordLatticeLC>::cmpOutLink(a4, *v11, (const WordLatticeLC *)*v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = Lattice<WordLatticeLC>::cmpOutLink(a4, *v18, (const WordLatticeLC *)*v12);
        if ((int)result >= 0)
          v11 = v18;
        else
          v11 = v12;
      }
    }
    else if ((int)result <= 0)
    {
      result = Lattice<WordLatticeLC>::cmpOutLink(a4, *v18, (const WordLatticeLC *)*v12);
      if ((int)result >= 0)
        v11 = v12;
      else
        v11 = v18;
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        v27 = v6;
        v28 = a3 >> 3;
        do
        {
          v29 = *(_QWORD *)v27;
          *(_QWORD *)v27 = *(_QWORD *)v11;
          v27 += 2;
          *(_QWORD *)v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        v31 = a3;
        v32 = v6;
        do
        {
          v33 = *(_BYTE *)v32;
          *(_BYTE *)v32 = *(_BYTE *)v11;
          v32 = (unsigned int *)((char *)v32 + 1);
          *(_BYTE *)v11 = v33;
          v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      v30 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v11;
      *(_QWORD *)v11 = v30;
    }
    v34 = 0;
    v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    v36 = v35;
    v37 = (unsigned int *)((char *)v6 + a3);
    v38 = (_QWORD *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      result = Lattice<WordLatticeLC>::cmpOutLink(v9, *v37, (const WordLatticeLC *)*v6);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v39 = 0;
            do
            {
              v40 = v38[v39];
              v38[v39] = *(_QWORD *)&v37[2 * v39];
              *(_QWORD *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            v49 = 0;
            do
            {
              v50 = *((_BYTE *)v38 + v49);
              *((_BYTE *)v38 + v49) = *((_BYTE *)v37 + v49);
              *((_BYTE *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          v48 = *v38;
          *v38 = *(_QWORD *)v37;
          *(_QWORD *)v37 = v48;
        }
        v38 = (_QWORD *)((char *)v38 + a3);
        v34 = 1;
      }
      v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      result = Lattice<WordLatticeLC>::cmpOutLink(v9, *v36, (const WordLatticeLC *)*v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            v46 = 0;
            do
            {
              v47 = *(_QWORD *)&v37[2 * v46];
              *(_QWORD *)&v37[2 * v46] = *(_QWORD *)&v36[2 * v46];
              *(_QWORD *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            v52 = 0;
            do
            {
              v53 = *((_BYTE *)v37 + v52);
              *((_BYTE *)v37 + v52) = *((_BYTE *)v36 + v52);
              *((_BYTE *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          v51 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v36;
          *(_QWORD *)v36 = v51;
        }
        v37 = (unsigned int *)((char *)v37 + a3);
        v36 = (unsigned int *)((char *)v36 + v7);
        v34 = 1;
        goto LABEL_55;
      }
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v41 = 0;
            do
            {
              v42 = *(_QWORD *)&v36[2 * v41];
              *(_QWORD *)&v36[2 * v41] = *(_QWORD *)&v35[2 * v41];
              *(_QWORD *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            v44 = 0;
            do
            {
              v45 = *((_BYTE *)v36 + v44);
              *((_BYTE *)v36 + v44) = *((_BYTE *)v35 + v44);
              *((_BYTE *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          v43 = *(_QWORD *)v36;
          *(_QWORD *)v36 = *(_QWORD *)v35;
          *(_QWORD *)v35 = v43;
        }
        v35 = (unsigned int *)((char *)v35 + v7);
        v34 = 1;
      }
      v36 = (unsigned int *)((char *)v36 + v7);
    }
    v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34)
      break;
    v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38)
      v56 = (char *)v37 - (char *)v38;
    else
      v56 = (char *)v38 - (char *)v6;
    if (v56)
    {
      if (v103)
      {
        v57 = (_QWORD *)((char *)v37 - v56);
        v58 = v56 >> 3;
        v59 = v6;
        do
        {
          v60 = *(_QWORD *)v59;
          *(_QWORD *)v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        v61 = -(uint64_t)v56;
        v62 = v6;
        do
        {
          v63 = *(_BYTE *)v62;
          *(_BYTE *)v62 = *((_BYTE *)v37 + v61);
          v62 = (unsigned int *)((char *)v62 + 1);
          *((_BYTE *)v37 + v61) = v63;
          v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3))
      v66 = (char *)v54 - ((char *)v35 + a3);
    else
      v66 = (char *)v35 - (char *)v36;
    if (v66)
    {
      if (v103)
      {
        v67 = (char *)v54 - v66;
        v68 = v66 >> 3;
        do
        {
          v69 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v67;
          v37 += 2;
          *(_QWORD *)v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        v70 = -(uint64_t)v66;
        do
        {
          v71 = *(_BYTE *)v37;
          *(_BYTE *)v37 = *((_BYTE *)v54 + v70);
          v37 = (unsigned int *)((char *)v37 + 1);
          *((_BYTE *)v54 + v70) = v71;
          v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3)
      result = mrec_qsort_r<OutLinkICmp>(v6, v55 / a3, a3, a4);
    if (v65 <= (uint64_t)a3)
      return result;
    v6 = (unsigned int *)((char *)v54 - v65);
    v5 = v65 / a3;
    v72 = v99;
    if (((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) != 0)
      v72 = 2;
    v103 = ((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) == 0;
    v104 = v72;
    v9 = a4;
    if (v5 < 7)
      goto LABEL_119;
  }
  v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    v87 = v6;
    do
    {
      if (v86 > v6)
      {
        v88 = v87;
        v89 = v86;
        do
        {
          v90 = v89;
          v89 = (unsigned int *)((char *)v89 + v7);
          result = Lattice<WordLatticeLC>::cmpOutLink(a4, *v89, (const WordLatticeLC *)*v90);
          if ((int)result < 1)
            break;
          if (v104)
          {
            if (v103)
            {
              v91 = 0;
              v92 = (uint64_t)v88 + a3;
              do
              {
                v93 = *(_QWORD *)(v92 + 8 * v91);
                *(_QWORD *)(v92 + 8 * v91) = *(_QWORD *)&v88[2 * v91];
                *(_QWORD *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              v95 = 0;
              v96 = (uint64_t)v88 + a3;
              do
              {
                v97 = *(_BYTE *)(v96 + v95);
                *(_BYTE *)(v96 + v95) = *((_BYTE *)v88 + v95);
                *((_BYTE *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            v94 = *(_QWORD *)v90;
            *(_QWORD *)v90 = *(_QWORD *)v89;
            *(_QWORD *)v89 = v94;
          }
          v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      v86 = (unsigned int *)((char *)v86 + a3);
      v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

char *WordLattice::SortNodes(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<NodeICmp1>(*(char **)a2, *(unsigned int *)(a2 + 8), 4, a1);
}

char *WordLattice::SortNodesCount(uint64_t a1, char **a2, unsigned int a3)
{
  return mrec_qsort_r<NodeICmp1>(*a2, a3, 4, a1);
}

uint64_t WordLattice::SortNodesByInLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<NodeByInLinksICmp>(*(_QWORD *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<NodeByInLinksICmp>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int *v14;
  int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  int v21;
  int v22;
  unsigned int *v23;
  int v24;
  int v25;
  int v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  char v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int *v54;
  int64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  char v63;
  BOOL v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int *v98;
  _BOOL4 v99;
  unsigned int *v100;
  unint64_t v101;
  BOOL v103;
  int v104;

  v5 = a2;
  v6 = (unsigned int *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v103 = ((result | a3) & 7) == 0;
  v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v73 = (unsigned int *)((char *)v6 + v5 * a3);
      v74 = (unsigned int *)((char *)v6 + a3);
      v75 = v6;
      do
      {
        if (v74 > v6)
        {
          v76 = v75;
          v77 = v74;
          do
          {
            v78 = v77;
            v77 = (unsigned int *)((char *)v77 + v7);
            result = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v77, *v78);
            if ((int)result < 1)
              break;
            if (v104)
            {
              if (v103)
              {
                v79 = 0;
                v80 = (uint64_t)v76 + a3;
                do
                {
                  v81 = *(_QWORD *)(v80 + 8 * v79);
                  *(_QWORD *)(v80 + 8 * v79) = *(_QWORD *)&v76[2 * v79];
                  *(_QWORD *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                v83 = 0;
                v84 = (uint64_t)v76 + a3;
                do
                {
                  v85 = *(_BYTE *)(v84 + v83);
                  *(_BYTE *)(v84 + v83) = *((_BYTE *)v76 + v83);
                  *((_BYTE *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              v82 = *(_QWORD *)v78;
              *(_QWORD *)v78 = *(_QWORD *)v77;
              *(_QWORD *)v77 = v82;
            }
            v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        v74 = (unsigned int *)((char *)v74 + a3);
        v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  v9 = a4;
  v10 = a3 >> 3;
  v99 = a3 != 8;
  while (1)
  {
    v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    v101 = v5;
    if (v5 == 7)
      goto LABEL_46;
    v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      v13 = (v5 >> 3) * a3;
      v14 = (unsigned int *)((char *)v6 + 2 * v13);
      v15 = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v6, *(unsigned int *)((char *)v6 + v13));
      v100 = (unsigned int *)((char *)v6 + v13);
      v16 = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *(unsigned int *)((char *)v6 + v13), *v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v6, *v14) >= 0)
            v17 = v6;
          else
            v17 = (unsigned int *)((char *)v6 + 2 * v13);
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v6, *v14) >= 0)
          v17 = (unsigned int *)((char *)v6 + 2 * v13);
        else
          v17 = v6;
LABEL_18:
        v100 = v17;
      }
      v19 = (unsigned int *)((char *)v11 - v13);
      v20 = (unsigned int *)((char *)v11 + v13);
      v21 = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *(unsigned int *)((char *)v11 - v13), *v11);
      v22 = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v11, *(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v19, *v20) >= 0)
            v11 = (unsigned int *)((char *)v11 - v13);
          else
            v11 = (unsigned int *)((char *)v11 + v13);
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v19, *v20) >= 0)
          v11 = (unsigned int *)((char *)v11 + v13);
        else
          v11 = (unsigned int *)((char *)v11 - v13);
      }
      v23 = (unsigned int *)((char *)v98 - 2 * v13);
      v12 = (unsigned int *)((char *)v98 - v13);
      v24 = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v23, *v12);
      v25 = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v12, *v98);
      if (v24 < 0)
      {
        v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v23, *v98) >= 0)
            v12 = v23;
        }
      }
      else
      {
        v18 = v100;
        if (v25 <= 0)
        {
          v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v23, *v98) < 0)
            v12 = v23;
        }
      }
      v5 = v101;
      goto LABEL_37;
    }
    v18 = v6;
LABEL_37:
    v9 = a4;
    v26 = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v18, *v11);
    result = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v11, *v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v18, *v12);
        if ((int)result >= 0)
          v11 = v18;
        else
          v11 = v12;
      }
    }
    else if ((int)result <= 0)
    {
      result = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v18, *v12);
      if ((int)result >= 0)
        v11 = v12;
      else
        v11 = v18;
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        v27 = v6;
        v28 = a3 >> 3;
        do
        {
          v29 = *(_QWORD *)v27;
          *(_QWORD *)v27 = *(_QWORD *)v11;
          v27 += 2;
          *(_QWORD *)v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        v31 = a3;
        v32 = v6;
        do
        {
          v33 = *(_BYTE *)v32;
          *(_BYTE *)v32 = *(_BYTE *)v11;
          v32 = (unsigned int *)((char *)v32 + 1);
          *(_BYTE *)v11 = v33;
          v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      v30 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v11;
      *(_QWORD *)v11 = v30;
    }
    v34 = 0;
    v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    v36 = v35;
    v37 = (unsigned int *)((char *)v6 + a3);
    v38 = (_QWORD *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      result = Lattice<WordLatticeLC>::cmpNodesByInLinks(v9, *v37, *v6);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v39 = 0;
            do
            {
              v40 = v38[v39];
              v38[v39] = *(_QWORD *)&v37[2 * v39];
              *(_QWORD *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            v49 = 0;
            do
            {
              v50 = *((_BYTE *)v38 + v49);
              *((_BYTE *)v38 + v49) = *((_BYTE *)v37 + v49);
              *((_BYTE *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          v48 = *v38;
          *v38 = *(_QWORD *)v37;
          *(_QWORD *)v37 = v48;
        }
        v38 = (_QWORD *)((char *)v38 + a3);
        v34 = 1;
      }
      v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      result = Lattice<WordLatticeLC>::cmpNodesByInLinks(v9, *v36, *v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            v46 = 0;
            do
            {
              v47 = *(_QWORD *)&v37[2 * v46];
              *(_QWORD *)&v37[2 * v46] = *(_QWORD *)&v36[2 * v46];
              *(_QWORD *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            v52 = 0;
            do
            {
              v53 = *((_BYTE *)v37 + v52);
              *((_BYTE *)v37 + v52) = *((_BYTE *)v36 + v52);
              *((_BYTE *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          v51 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v36;
          *(_QWORD *)v36 = v51;
        }
        v37 = (unsigned int *)((char *)v37 + a3);
        v36 = (unsigned int *)((char *)v36 + v7);
        v34 = 1;
        goto LABEL_55;
      }
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v41 = 0;
            do
            {
              v42 = *(_QWORD *)&v36[2 * v41];
              *(_QWORD *)&v36[2 * v41] = *(_QWORD *)&v35[2 * v41];
              *(_QWORD *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            v44 = 0;
            do
            {
              v45 = *((_BYTE *)v36 + v44);
              *((_BYTE *)v36 + v44) = *((_BYTE *)v35 + v44);
              *((_BYTE *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          v43 = *(_QWORD *)v36;
          *(_QWORD *)v36 = *(_QWORD *)v35;
          *(_QWORD *)v35 = v43;
        }
        v35 = (unsigned int *)((char *)v35 + v7);
        v34 = 1;
      }
      v36 = (unsigned int *)((char *)v36 + v7);
    }
    v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34)
      break;
    v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38)
      v56 = (char *)v37 - (char *)v38;
    else
      v56 = (char *)v38 - (char *)v6;
    if (v56)
    {
      if (v103)
      {
        v57 = (_QWORD *)((char *)v37 - v56);
        v58 = v56 >> 3;
        v59 = v6;
        do
        {
          v60 = *(_QWORD *)v59;
          *(_QWORD *)v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        v61 = -(uint64_t)v56;
        v62 = v6;
        do
        {
          v63 = *(_BYTE *)v62;
          *(_BYTE *)v62 = *((_BYTE *)v37 + v61);
          v62 = (unsigned int *)((char *)v62 + 1);
          *((_BYTE *)v37 + v61) = v63;
          v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3))
      v66 = (char *)v54 - ((char *)v35 + a3);
    else
      v66 = (char *)v35 - (char *)v36;
    if (v66)
    {
      if (v103)
      {
        v67 = (char *)v54 - v66;
        v68 = v66 >> 3;
        do
        {
          v69 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v67;
          v37 += 2;
          *(_QWORD *)v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        v70 = -(uint64_t)v66;
        do
        {
          v71 = *(_BYTE *)v37;
          *(_BYTE *)v37 = *((_BYTE *)v54 + v70);
          v37 = (unsigned int *)((char *)v37 + 1);
          *((_BYTE *)v54 + v70) = v71;
          v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3)
      result = mrec_qsort_r<NodeByInLinksICmp>(v6, v55 / a3, a3, a4);
    if (v65 <= (uint64_t)a3)
      return result;
    v6 = (unsigned int *)((char *)v54 - v65);
    v5 = v65 / a3;
    v72 = v99;
    if (((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) != 0)
      v72 = 2;
    v103 = ((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) == 0;
    v104 = v72;
    v9 = a4;
    if (v5 < 7)
      goto LABEL_119;
  }
  v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    v87 = v6;
    do
    {
      if (v86 > v6)
      {
        v88 = v87;
        v89 = v86;
        do
        {
          v90 = v89;
          v89 = (unsigned int *)((char *)v89 + v7);
          result = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v89, *v90);
          if ((int)result < 1)
            break;
          if (v104)
          {
            if (v103)
            {
              v91 = 0;
              v92 = (uint64_t)v88 + a3;
              do
              {
                v93 = *(_QWORD *)(v92 + 8 * v91);
                *(_QWORD *)(v92 + 8 * v91) = *(_QWORD *)&v88[2 * v91];
                *(_QWORD *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              v95 = 0;
              v96 = (uint64_t)v88 + a3;
              do
              {
                v97 = *(_BYTE *)(v96 + v95);
                *(_BYTE *)(v96 + v95) = *((_BYTE *)v88 + v95);
                *((_BYTE *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            v94 = *(_QWORD *)v90;
            *(_QWORD *)v90 = *(_QWORD *)v89;
            *(_QWORD *)v89 = v94;
          }
          v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      v86 = (unsigned int *)((char *)v86 + a3);
      v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

uint64_t WordLattice::SortNodesByOutLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<NodeByOutLinksICmp>(*(_QWORD *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<NodeByOutLinksICmp>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int *v14;
  int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  int v21;
  int v22;
  unsigned int *v23;
  int v24;
  int v25;
  int v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  char v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int *v54;
  int64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  char v63;
  BOOL v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int *v98;
  _BOOL4 v99;
  unsigned int *v100;
  unint64_t v101;
  BOOL v103;
  int v104;

  v5 = a2;
  v6 = (unsigned int *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v103 = ((result | a3) & 7) == 0;
  v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v73 = (unsigned int *)((char *)v6 + v5 * a3);
      v74 = (unsigned int *)((char *)v6 + a3);
      v75 = v6;
      do
      {
        if (v74 > v6)
        {
          v76 = v75;
          v77 = v74;
          do
          {
            v78 = v77;
            v77 = (unsigned int *)((char *)v77 + v7);
            result = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v77, *v78);
            if ((int)result < 1)
              break;
            if (v104)
            {
              if (v103)
              {
                v79 = 0;
                v80 = (uint64_t)v76 + a3;
                do
                {
                  v81 = *(_QWORD *)(v80 + 8 * v79);
                  *(_QWORD *)(v80 + 8 * v79) = *(_QWORD *)&v76[2 * v79];
                  *(_QWORD *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                v83 = 0;
                v84 = (uint64_t)v76 + a3;
                do
                {
                  v85 = *(_BYTE *)(v84 + v83);
                  *(_BYTE *)(v84 + v83) = *((_BYTE *)v76 + v83);
                  *((_BYTE *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              v82 = *(_QWORD *)v78;
              *(_QWORD *)v78 = *(_QWORD *)v77;
              *(_QWORD *)v77 = v82;
            }
            v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        v74 = (unsigned int *)((char *)v74 + a3);
        v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  v9 = a4;
  v10 = a3 >> 3;
  v99 = a3 != 8;
  while (1)
  {
    v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    v101 = v5;
    if (v5 == 7)
      goto LABEL_46;
    v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      v13 = (v5 >> 3) * a3;
      v14 = (unsigned int *)((char *)v6 + 2 * v13);
      v15 = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v6, *(unsigned int *)((char *)v6 + v13));
      v100 = (unsigned int *)((char *)v6 + v13);
      v16 = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *(unsigned int *)((char *)v6 + v13), *v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v6, *v14) >= 0)
            v17 = v6;
          else
            v17 = (unsigned int *)((char *)v6 + 2 * v13);
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v6, *v14) >= 0)
          v17 = (unsigned int *)((char *)v6 + 2 * v13);
        else
          v17 = v6;
LABEL_18:
        v100 = v17;
      }
      v19 = (unsigned int *)((char *)v11 - v13);
      v20 = (unsigned int *)((char *)v11 + v13);
      v21 = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *(unsigned int *)((char *)v11 - v13), *v11);
      v22 = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v11, *(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v19, *v20) >= 0)
            v11 = (unsigned int *)((char *)v11 - v13);
          else
            v11 = (unsigned int *)((char *)v11 + v13);
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v19, *v20) >= 0)
          v11 = (unsigned int *)((char *)v11 + v13);
        else
          v11 = (unsigned int *)((char *)v11 - v13);
      }
      v23 = (unsigned int *)((char *)v98 - 2 * v13);
      v12 = (unsigned int *)((char *)v98 - v13);
      v24 = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v23, *v12);
      v25 = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v12, *v98);
      if (v24 < 0)
      {
        v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v23, *v98) >= 0)
            v12 = v23;
        }
      }
      else
      {
        v18 = v100;
        if (v25 <= 0)
        {
          v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v23, *v98) < 0)
            v12 = v23;
        }
      }
      v5 = v101;
      goto LABEL_37;
    }
    v18 = v6;
LABEL_37:
    v9 = a4;
    v26 = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v18, *v11);
    result = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v11, *v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v18, *v12);
        if ((int)result >= 0)
          v11 = v18;
        else
          v11 = v12;
      }
    }
    else if ((int)result <= 0)
    {
      result = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v18, *v12);
      if ((int)result >= 0)
        v11 = v12;
      else
        v11 = v18;
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        v27 = v6;
        v28 = a3 >> 3;
        do
        {
          v29 = *(_QWORD *)v27;
          *(_QWORD *)v27 = *(_QWORD *)v11;
          v27 += 2;
          *(_QWORD *)v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        v31 = a3;
        v32 = v6;
        do
        {
          v33 = *(_BYTE *)v32;
          *(_BYTE *)v32 = *(_BYTE *)v11;
          v32 = (unsigned int *)((char *)v32 + 1);
          *(_BYTE *)v11 = v33;
          v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      v30 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v11;
      *(_QWORD *)v11 = v30;
    }
    v34 = 0;
    v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    v36 = v35;
    v37 = (unsigned int *)((char *)v6 + a3);
    v38 = (_QWORD *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      result = Lattice<WordLatticeLC>::cmpNodesByOutLinks(v9, *v37, *v6);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v39 = 0;
            do
            {
              v40 = v38[v39];
              v38[v39] = *(_QWORD *)&v37[2 * v39];
              *(_QWORD *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            v49 = 0;
            do
            {
              v50 = *((_BYTE *)v38 + v49);
              *((_BYTE *)v38 + v49) = *((_BYTE *)v37 + v49);
              *((_BYTE *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          v48 = *v38;
          *v38 = *(_QWORD *)v37;
          *(_QWORD *)v37 = v48;
        }
        v38 = (_QWORD *)((char *)v38 + a3);
        v34 = 1;
      }
      v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      result = Lattice<WordLatticeLC>::cmpNodesByOutLinks(v9, *v36, *v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            v46 = 0;
            do
            {
              v47 = *(_QWORD *)&v37[2 * v46];
              *(_QWORD *)&v37[2 * v46] = *(_QWORD *)&v36[2 * v46];
              *(_QWORD *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            v52 = 0;
            do
            {
              v53 = *((_BYTE *)v37 + v52);
              *((_BYTE *)v37 + v52) = *((_BYTE *)v36 + v52);
              *((_BYTE *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          v51 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v36;
          *(_QWORD *)v36 = v51;
        }
        v37 = (unsigned int *)((char *)v37 + a3);
        v36 = (unsigned int *)((char *)v36 + v7);
        v34 = 1;
        goto LABEL_55;
      }
      if (!(_DWORD)result)
      {
        if (v104)
        {
          if (v103)
          {
            v41 = 0;
            do
            {
              v42 = *(_QWORD *)&v36[2 * v41];
              *(_QWORD *)&v36[2 * v41] = *(_QWORD *)&v35[2 * v41];
              *(_QWORD *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            v44 = 0;
            do
            {
              v45 = *((_BYTE *)v36 + v44);
              *((_BYTE *)v36 + v44) = *((_BYTE *)v35 + v44);
              *((_BYTE *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          v43 = *(_QWORD *)v36;
          *(_QWORD *)v36 = *(_QWORD *)v35;
          *(_QWORD *)v35 = v43;
        }
        v35 = (unsigned int *)((char *)v35 + v7);
        v34 = 1;
      }
      v36 = (unsigned int *)((char *)v36 + v7);
    }
    v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34)
      break;
    v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38)
      v56 = (char *)v37 - (char *)v38;
    else
      v56 = (char *)v38 - (char *)v6;
    if (v56)
    {
      if (v103)
      {
        v57 = (_QWORD *)((char *)v37 - v56);
        v58 = v56 >> 3;
        v59 = v6;
        do
        {
          v60 = *(_QWORD *)v59;
          *(_QWORD *)v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        v61 = -(uint64_t)v56;
        v62 = v6;
        do
        {
          v63 = *(_BYTE *)v62;
          *(_BYTE *)v62 = *((_BYTE *)v37 + v61);
          v62 = (unsigned int *)((char *)v62 + 1);
          *((_BYTE *)v37 + v61) = v63;
          v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3))
      v66 = (char *)v54 - ((char *)v35 + a3);
    else
      v66 = (char *)v35 - (char *)v36;
    if (v66)
    {
      if (v103)
      {
        v67 = (char *)v54 - v66;
        v68 = v66 >> 3;
        do
        {
          v69 = *(_QWORD *)v37;
          *(_QWORD *)v37 = *(_QWORD *)v67;
          v37 += 2;
          *(_QWORD *)v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        v70 = -(uint64_t)v66;
        do
        {
          v71 = *(_BYTE *)v37;
          *(_BYTE *)v37 = *((_BYTE *)v54 + v70);
          v37 = (unsigned int *)((char *)v37 + 1);
          *((_BYTE *)v54 + v70) = v71;
          v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3)
      result = mrec_qsort_r<NodeByOutLinksICmp>(v6, v55 / a3, a3, a4);
    if (v65 <= (uint64_t)a3)
      return result;
    v6 = (unsigned int *)((char *)v54 - v65);
    v5 = v65 / a3;
    v72 = v99;
    if (((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) != 0)
      v72 = 2;
    v103 = ((((_DWORD)v54 - (_DWORD)v65) | a3) & 7) == 0;
    v104 = v72;
    v9 = a4;
    if (v5 < 7)
      goto LABEL_119;
  }
  v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    v87 = v6;
    do
    {
      if (v86 > v6)
      {
        v88 = v87;
        v89 = v86;
        do
        {
          v90 = v89;
          v89 = (unsigned int *)((char *)v89 + v7);
          result = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v89, *v90);
          if ((int)result < 1)
            break;
          if (v104)
          {
            if (v103)
            {
              v91 = 0;
              v92 = (uint64_t)v88 + a3;
              do
              {
                v93 = *(_QWORD *)(v92 + 8 * v91);
                *(_QWORD *)(v92 + 8 * v91) = *(_QWORD *)&v88[2 * v91];
                *(_QWORD *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              v95 = 0;
              v96 = (uint64_t)v88 + a3;
              do
              {
                v97 = *(_BYTE *)(v96 + v95);
                *(_BYTE *)(v96 + v95) = *((_BYTE *)v88 + v95);
                *((_BYTE *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            v94 = *(_QWORD *)v90;
            *(_QWORD *)v90 = *(_QWORD *)v89;
            *(_QWORD *)v89 = v94;
          }
          v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      v86 = (unsigned int *)((char *)v86 + a3);
      v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

BOOL WordLattice::hasCollapsedWords(WordLattice *this)
{
  unint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  int v7;

  v1 = *((unsigned int *)this + 26);
  if (!(_DWORD)v1)
    return 0;
  v2 = (unsigned int *)*((_QWORD *)this + 12);
  v3 = *((_QWORD *)this + 16);
  if ((*(_DWORD *)(v3 + 136 * *v2 + 88) & 0xFFFFFF) == 0xFFFFFB)
    return 1;
  v5 = 1;
  do
  {
    v6 = v5;
    if (v1 == v5)
      break;
    v7 = *(_DWORD *)(v3 + 136 * v2[v5++] + 88) & 0xFFFFFF;
  }
  while (v7 != 16777211);
  return v6 < v1;
}

uint64_t WordLattice::findOrAddLinkSegId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v5 = *(unsigned int *)(a1 + 248) | ((unint64_t)*(unsigned int *)(a2 + 8) << 32);
  v6 = HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::insert(a3, v5, a2);
  if (v6 == v5)
  {
    v7 = *(_DWORD *)(a2 + 8);
    v8 = *(_DWORD *)(a1 + 252);
    v9 = *(_DWORD *)(a1 + 248) + v7;
    if (v9 > v8)
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(a1 + 240, v9 - v8, 1);
      v7 = *(_DWORD *)(a2 + 8);
    }
    if (v7)
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = (uint64_t *)(*(_QWORD *)a2 + v10);
        v13 = *(_QWORD *)(a1 + 240) + 28 * (v11 + *(_DWORD *)(a1 + 248));
        v14 = *v12;
        *(_WORD *)(v13 + 8) = *((_WORD *)v12 + 4);
        *(_QWORD *)v13 = v14;
        *(_BYTE *)(v13 + 10) = *((_BYTE *)v12 + 10);
        *(_BYTE *)(v13 + 11) = *((_BYTE *)v12 + 11);
        *(_DWORD *)(v13 + 12) = *((_DWORD *)v12 + 3);
        *(_DWORD *)(v13 + 16) = *((_DWORD *)v12 + 4);
        *(_QWORD *)(v13 + 20) = *(uint64_t *)((char *)v12 + 20);
        ++v11;
        v15 = *(unsigned int *)(a2 + 8);
        v10 += 28;
      }
      while (v11 < v15);
    }
    else
    {
      LODWORD(v15) = 0;
    }
    *(_DWORD *)(a1 + 248) += v15;
  }
  return v6;
}

uint64_t HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::insert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v6 = *(_DWORD *)(a1 + 4);
  if (*(_DWORD *)a1 >= v6 >> 1)
    HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::upSize(a1, 2 * v6);
  v7 = WordLattice::computeHash(a3);
  v8 = *(_DWORD *)(a1 + 8);
  if (v8)
    v9 = (-1640531527 * v7) >> -(char)v8;
  else
    v9 = 0;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(v10 + 8 * v9);
  if (v11 == -1)
  {
LABEL_14:
    *(_QWORD *)(v10 + 8 * v9) = a2;
    ++*(_DWORD *)a1;
    return a2;
  }
  if ((WordLattice::equalKeys(*(_QWORD *)(a1 + 32), v11, a3) & 1) == 0)
  {
    while (1)
    {
      v9 = (_DWORD)v9 + 1 == *(_DWORD *)(a1 + 4) ? 0 : (v9 + 1);
      v10 = *(_QWORD *)(a1 + 16);
      v12 = *(_QWORD *)(v10 + 8 * v9);
      if (v12 == -1)
        break;
      if (WordLattice::equalKeys(*(_QWORD *)(a1 + 32), v12, a3))
        return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v9);
    }
    goto LABEL_14;
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v9);
}

unint64_t WordLattice::findOrAddLinkSegSeqId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WordLattice::findOrAddLinkSegId(a1, a2, a3) | 0x8000000000000000;
}

void WordLattice::printSize(WordLattice *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  int v163;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1664, (DgnString *)&v162);
  if (v163)
    v16 = v162;
  else
    v16 = &unk_209A80270;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A80270, a3, &unk_209A80270, v16);
  DgnString::~DgnString((DgnString *)&v162);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A80270);
  v161 = 0;
  v162 = 0;
  v21 = (a3 + 1);
  v160 = 0;
  Lattice<WordLatticeLC>::printSize((unsigned int *)this, 0xFFFFFFFFLL, v21, &v162, &v161, &v160);
  *a4 += (unint64_t)v162;
  *a5 += v161;
  *a6 += v160;
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1668, (DgnString *)&v162);
  if (v163)
    v27 = v162;
  else
    v27 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1670, (DgnString *)&v162);
  if (v163)
    v32 = v162;
  else
    v32 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1672, (DgnString *)&v162);
  if (v163)
    v37 = v162;
  else
    v37 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1674, (DgnString *)&v162);
  if (v163)
    v42 = v162;
  else
    v42 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v42, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1676, (DgnString *)&v162);
  if (v163)
    v47 = v162;
  else
    v47 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v47, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1678, (DgnString *)&v162);
  if (v163)
    v52 = v162;
  else
    v52 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v52, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1680, (DgnString *)&v162);
  if (v163)
    v57 = v162;
  else
    v57 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v57, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1682, (DgnString *)&v162);
  if (v163)
    v62 = v162;
  else
    v62 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v62, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1684, (DgnString *)&v162);
  if (v163)
    v67 = v162;
  else
    v67 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v67, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1686, (DgnString *)&v162);
  if (v163)
    v72 = v162;
  else
    v72 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v72, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1688, (DgnString *)&v162);
  if (v163)
    v77 = v162;
  else
    v77 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v73, v74, v75, v76, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v77, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1690, (DgnString *)&v162);
  if (v163)
    v82 = v162;
  else
    v82 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v82, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1692, (DgnString *)&v162);
  if (v163)
    v87 = v162;
  else
    v87 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v87, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1694, (DgnString *)&v162);
  if (v163)
    v92 = v162;
  else
    v92 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v92, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1696, (DgnString *)&v162);
  if (v163)
    v97 = v162;
  else
    v97 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v97, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1698, (DgnString *)&v162);
  if (v163)
    v102 = v162;
  else
    v102 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v102, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1700, (DgnString *)&v162);
  if (v163)
    v107 = v162;
  else
    v107 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v103, v104, v105, v106, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v107, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1702, (DgnString *)&v162);
  if (v163)
    v112 = v162;
  else
    v112 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v108, v109, v110, v111, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v112, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1704, (DgnString *)&v162);
  if (v163)
    v117 = v162;
  else
    v117 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v113, v114, v115, v116, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v117, 1, 1, 0);
  v159 = a3;
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  v118 = sizeObject<ParseToken>((uint64_t)this + 224, 0);
  v119 = sizeObject<ParseToken>((uint64_t)this + 224, 1);
  sizeObject((uint64_t)&v162, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1706, (DgnString *)&v162);
  if (v163)
    v124 = v162;
  else
    v124 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v120, v121, v122, v123, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v124, v118, v119, 0);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += v118;
  *a5 += v119;
  v125 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v125 = 16;
  v126 = *((unsigned int *)this + 62);
  v127 = 28 * v126;
  if ((int)v126 <= 0)
    v127 = 0;
  v128 = v127 + v125;
  v129 = v127 + v125 + 28 * (*((_DWORD *)this + 63) - v126);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1708, (DgnString *)&v162);
  if (v163)
    v134 = v162;
  else
    v134 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v21, &unk_209A80270, v22, v22, v134, v129, v128, 0);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += v129;
  *a5 += v128;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v135 = 12;
  else
    v135 = 16;
  v136 = *((unsigned int *)this + 66);
  v137 = *((_DWORD *)this + 67);
  if (v137 >= v136)
  {
    v138 = 0;
    if ((int)v136 > 0)
      v135 += 8 * (v136 - 1) + 8;
    v139 = v135 + 8 * (v137 - v136);
  }
  else
  {
    v138 = 8 * v136;
    v139 = v135;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1710, (DgnString *)&v162);
  if (v163)
    v144 = v162;
  else
    v144 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v140, v141, v142, v143, v21, &unk_209A80270, v22, v22, v144, v139, v135, v138);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += v139;
  *a5 += v135;
  *a6 += v138;
  v145 = (char *)this + 272;
  v146 = sizeObject((char *)this + 272);
  v147 = sizeObject(v145);
  v148 = sizeObject(v145);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1712, (DgnString *)&v162);
  if (v163)
    v153 = v162;
  else
    v153 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v149, v150, v151, v152, v21, &unk_209A80270, v22, v22, v153, v146, v147, v148);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += v146;
  *a5 += v147;
  *a6 += v148;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1713, (DgnString *)&v162);
  if (v163)
    v158 = v162;
  else
    v158 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v154, v155, v156, v157, v159, &unk_209A80270, (35 - v159), (35 - v159), v158, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v162);
}

void sub_209A19B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void Lattice<WordLatticeLC>::printSize(unsigned int *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  void *v147;
  int v148;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 898, (DgnString *)&v147);
  if (v148)
    v16 = v147;
  else
    v16 = &unk_209A80270;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A80270, a3, &unk_209A80270, v16);
  DgnString::~DgnString((DgnString *)&v147);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A80270);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148)
    v27 = v147;
  else
    v27 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v27, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v147);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148)
    v32 = v147;
  else
    v32 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A80270, (34 - a3), (34 - a3), v32, 4, 4, 0);
  v146 = a3;
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v33 = 12;
  else
    v33 = 16;
  v34 = a1[6];
  v35 = a1[7];
  if (v35 >= v34)
  {
    v36 = 0;
    if ((int)v34 > 0)
      v33 += 4 * (v34 - 1) + 4;
    v37 = v33 + 4 * (v35 - v34);
  }
  else
  {
    v36 = 4 * v34;
    v37 = v33;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148)
    v42 = v147;
  else
    v42 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, v21, &unk_209A80270, v22, v22, v42, v37, v33, v36);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v37;
  *a5 += v33;
  *a6 += v36;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 12;
  else
    v43 = 16;
  v44 = a1[10];
  v45 = a1[11];
  if (v45 >= v44)
  {
    v46 = 0;
    if ((int)v44 > 0)
      v43 += 4 * (v44 - 1) + 4;
    v47 = v43 + 4 * (v45 - v44);
  }
  else
  {
    v46 = 4 * v44;
    v47 = v43;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148)
    v52 = v147;
  else
    v52 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A80270, v22, v22, v52, v47, v43, v46);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v47;
  *a5 += v43;
  *a6 += v46;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 12;
  else
    v53 = 16;
  v54 = a1[14];
  v55 = a1[15];
  if (v55 >= v54)
  {
    v56 = 0;
    if ((int)v54 > 0)
      v53 += 4 * (v54 - 1) + 4;
    v57 = v53 + 4 * (v55 - v54);
  }
  else
  {
    v56 = 4 * v54;
    v57 = v53;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148)
    v62 = v147;
  else
    v62 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A80270, v22, v22, v62, v57, v53, v56);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v57;
  *a5 += v53;
  *a6 += v56;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 12;
  else
    v63 = 16;
  v64 = a1[18];
  v65 = a1[19];
  if (v65 >= v64)
  {
    v66 = 0;
    if ((int)v64 > 0)
      v63 += 4 * (v64 - 1) + 4;
    v67 = v63 + 4 * (v65 - v64);
  }
  else
  {
    v66 = 4 * v64;
    v67 = v63;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148)
    v72 = v147;
  else
    v72 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A80270, v22, v22, v72, v67, v63, v66);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v67;
  *a5 += v63;
  *a6 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = a1[22];
  v75 = 24 * v74;
  if ((int)v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 24 * (a1[23] - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148)
    v82 = v147;
  else
    v82 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A80270, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v77;
  *a5 += v76;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v83 = 12;
  else
    v83 = 16;
  v84 = a1[26];
  v85 = a1[27];
  if (v85 >= v84)
  {
    v86 = 0;
    if ((int)v84 > 0)
      v83 += 4 * (v84 - 1) + 4;
    v87 = v83 + 4 * (v85 - v84);
  }
  else
  {
    v86 = 4 * v84;
    v87 = v83;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148)
    v92 = v147;
  else
    v92 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A80270, v22, v22, v92, v87, v83, v86);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v87;
  *a5 += v83;
  *a6 += v86;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v93 = 12;
  else
    v93 = 16;
  v94 = a1[30];
  v95 = a1[31];
  if (v95 >= v94)
  {
    v96 = 0;
    if ((int)v94 > 0)
      v93 += 4 * (v94 - 1) + 4;
    v97 = v93 + 4 * (v95 - v94);
  }
  else
  {
    v96 = 4 * v94;
    v97 = v93;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148)
    v102 = v147;
  else
    v102 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v21, &unk_209A80270, v22, v22, v102, v97, v93, v96);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v97;
  *a5 += v93;
  *a6 += v96;
  v103 = sizeObject<LatticeLink<WordLatticeLC>>((uint64_t)(a1 + 32), 0);
  v104 = sizeObject<LatticeLink<WordLatticeLC>>((uint64_t)(a1 + 32), 1);
  v105 = sizeObject<LatticeLink<WordLatticeLC>>((uint64_t)(a1 + 32), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148)
    v110 = v147;
  else
    v110 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v21, &unk_209A80270, v22, v22, v110, v103, v104, v105);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v103;
  *a5 += v104;
  *a6 += v105;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v111 = 12;
  else
    v111 = 16;
  v112 = a1[38];
  v113 = a1[39];
  if (v113 >= v112)
  {
    v114 = 0;
    if ((int)v112 > 0)
      v111 += 4 * (v112 - 1) + 4;
    v115 = v111 + 4 * (v113 - v112);
  }
  else
  {
    v114 = 4 * v112;
    v115 = v111;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148)
    v120 = v147;
  else
    v120 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v116, v117, v118, v119, v21, &unk_209A80270, v22, v22, v120, v115, v111, v114);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v115;
  *a5 += v111;
  *a6 += v114;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v121 = 12;
  else
    v121 = 16;
  v122 = a1[42];
  v123 = a1[43];
  if (v123 >= v122)
  {
    v124 = 0;
    if ((int)v122 > 0)
      v121 += 4 * (v122 - 1) + 4;
    v125 = v121 + 4 * (v123 - v122);
  }
  else
  {
    v124 = 4 * v122;
    v125 = v121;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148)
    v130 = v147;
  else
    v130 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v126, v127, v128, v129, v21, &unk_209A80270, v22, v22, v130, v125, v121, v124);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v125;
  *a5 += v121;
  *a6 += v124;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v131 = 12;
  else
    v131 = 16;
  v132 = a1[46];
  v133 = a1[47];
  if (v133 >= v132)
  {
    v134 = 0;
    if ((int)v132 > 0)
      v131 += 4 * (v132 - 1) + 4;
    v135 = v131 + 4 * (v133 - v132);
  }
  else
  {
    v134 = 4 * v132;
    v135 = v131;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148)
    v140 = v147;
  else
    v140 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v136, v137, v138, v139, v21, &unk_209A80270, v22, v22, v140, v135, v131, v134);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v135;
  *a5 += v131;
  *a6 += v134;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 908, (DgnString *)&v147);
  if (v148)
    v145 = v147;
  else
    v145 = &unk_209A80270;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v141, v142, v143, v144, v146, &unk_209A80270, (35 - v146), (35 - v146), v145, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v147);
}

void sub_209A1A5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t writeObject(DgnStream *a1, const LatticeData *a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v15;
  int v16;

  writeObject((uint64_t)a1, (int *)a2, a3);
  writeObject((uint64_t)a1, (int *)a2 + 1, a3);
  writeObject((uint64_t)a1, (int *)a2 + 2, a3);
  writeObject((uint64_t)a1, (int *)a2 + 3, a3);
  v16 = *((_DWORD *)a2 + 6);
  writeObject((uint64_t)a1, &v16, a3);
  if (*((_DWORD *)a2 + 6))
  {
    v11 = 0;
    v12 = 0;
    do
    {
      writeObject(a1, (int *)(*((_QWORD *)a2 + 2) + v11), a3, v6, v7, v8, v9, v10);
      ++v12;
      v11 += 112;
    }
    while (v12 < *((unsigned int *)a2 + 6));
  }
  v13 = *((_DWORD *)a2 + 20);
  if (v13 == -64)
    v13 = -1;
  v15 = v13;
  writeObject((uint64_t)a1, &v15, a3);
  writeObject((uint64_t)a1, (int *)a2 + 21, a3);
  writeObject((uint64_t)a1, (int *)a2 + 22, a3);
  writeObject((uint64_t)a1, (int *)a2 + 23, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 96, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 97, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 98, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 99, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 100, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 101, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 102, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 103, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 104, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 105, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 106, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 107, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 108, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 109, a3);
  writeObject<ParseToken>((uint64_t)a1, (uint64_t)a2 + 112, a3);
  writeObject<LinkSegment>((uint64_t)a1, (uint64_t)a2 + 128, a3);
  writeObject<unsigned long long>((uint64_t)a1, (uint64_t)a2 + 144, a3);
  return writeObject((uint64_t)a1, (uint64_t)a2 + 160, a3);
}

uint64_t writeObject<LinkSegment>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 28;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

DgnString *WordLattice::fillLatticeData(WordLattice *this, LatticeData *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WordLattice *v9;
  _QWORD *VocOrThrow;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  void (**v15)(InputLatticeLC *__hidden);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  WordLattice *v30;
  void (**v31)(InputLatticeLC *__hidden);
  uint64_t v32;
  int v33;
  uint8x8_t v34;
  int16x8_t v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v9 = this;
  VocOrThrow = (_QWORD *)VocMgr::getVocOrThrow((VocMgr *)VocMgr::smpVocMgr, *((unsigned __int16 *)this + 102), a3, a4, a5, a6, a7, a8);
  v11 = VocOrThrow[7];
  *(_QWORD *)a2 = *(_QWORD *)(VocOrThrow[6] + 376);
  v12 = *(_DWORD *)(v11 + 732);
  LODWORD(v11) = *(_DWORD *)(VocOrThrow[8] + 44);
  *((_DWORD *)a2 + 2) = v12;
  *((_DWORD *)a2 + 3) = v11;
  if (*((_DWORD *)v9 + 26))
  {
    v13 = 0;
    v14 = *((_DWORD *)a2 + 6);
    v15 = &off_24C214A38;
    do
    {
      v16 = *((_QWORD *)v9 + 16) + 136 * *(unsigned int *)(*((_QWORD *)v9 + 12) + 4 * v13);
      v17 = *((_QWORD *)v9 + 10);
      v18 = *(unsigned int *)(v17 + 24 * *(unsigned int *)(v16 + 116));
      v19 = *(unsigned int *)(v17 + 24 * *(unsigned int *)(v16 + 120));
      v20 = *(_DWORD *)(v16 + 88);
      v21 = *(_DWORD *)(v16 + 108);
      v22 = *(_DWORD *)(v16 + 96);
      v23 = *(_OWORD *)(v16 + 16);
      v24 = *(_OWORD *)(v16 + 32);
      v25 = *(_OWORD *)(v16 + 48);
      v26 = *(_QWORD *)(v16 + 64);
      v27 = *(_DWORD *)(v16 + 72);
      v28 = *(_QWORD *)(v16 + 8);
      v29 = *(_QWORD *)(v16 + 80);
      if (v14 == *((_DWORD *)a2 + 7))
      {
        v40 = *(unsigned int *)(v17 + 24 * *(unsigned int *)(v16 + 120));
        v30 = v9;
        v31 = v15;
        v38 = *(_OWORD *)(v16 + 32);
        v39 = *(_OWORD *)(v16 + 16);
        v37 = *(_OWORD *)(v16 + 48);
        DgnArray<WordLatticeLC>::reallocElts((uint64_t)a2 + 16, 1, 1);
        v25 = v37;
        v24 = v38;
        v23 = v39;
        v19 = v40;
        v15 = v31;
        v9 = v30;
        v14 = *((_DWORD *)a2 + 6);
      }
      v32 = *((_QWORD *)a2 + 2) + 112 * v14;
      *(_QWORD *)(v32 + 8) = v28;
      *(_OWORD *)(v32 + 16) = v23;
      *(_OWORD *)(v32 + 32) = v24;
      *(_OWORD *)(v32 + 48) = v25;
      *(_QWORD *)(v32 + 64) = v26;
      *(_DWORD *)(v32 + 72) = v27;
      *(_QWORD *)(v32 + 80) = v29;
      *(_QWORD *)v32 = v15;
      *(_DWORD *)(v32 + 88) = v20;
      *(_DWORD *)(v32 + 92) = v21;
      *(_DWORD *)(v32 + 96) = v22;
      *(_QWORD *)(v32 + 104) = v18 | (v19 << 32);
      v14 = *((_DWORD *)a2 + 6) + 1;
      *((_DWORD *)a2 + 6) = v14;
      ++v13;
    }
    while (v13 < *((unsigned int *)v9 + 26));
  }
  *((_QWORD *)a2 + 10) = *((_QWORD *)v9 + 24);
  v33 = *((_DWORD *)v9 + 6);
  *((_DWORD *)a2 + 22) = *((_DWORD *)v9 + 50);
  *((_DWORD *)a2 + 23) = v33;
  *((_WORD *)a2 + 48) = *((_WORD *)v9 + 103);
  v34.i32[0] = *((_DWORD *)v9 + 52);
  v34.i32[1] = *(_DWORD *)((char *)v9 + 213);
  *(uint8x8_t *)((char *)a2 + 98) = v34;
  v34.i32[0] = *(_DWORD *)((char *)v9 + 217);
  v35 = (int16x8_t)vmovl_u8(v34);
  *(int16x4_t *)v35.i8 = vuzp2_s16((int16x4_t)vext_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v35.i8, 2uLL), *(int16x4_t *)v35.i8);
  *(_DWORD *)((char *)a2 + 106) = vmovn_s16(v35).u32[0];
  DgnArray<ParseToken>::copyArraySlice((unint64_t)a2 + 112, (uint64_t *)v9 + 28, 0, *((_DWORD *)v9 + 58));
  DgnArray<LinkSegment>::copyArraySlice((unint64_t)a2 + 128, (_QWORD *)v9 + 30, 0, *((_DWORD *)v9 + 62));
  DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)a2 + 144, (uint64_t *)v9 + 32, 0, *((_DWORD *)v9 + 66));
  return DgnString::operator=((LatticeData *)((char *)a2 + 160), (WordLattice *)((char *)v9 + 272));
}

uint64_t WordLattice::computeConfidencePredictorsForLinks(uint64_t a1, uint64_t a2, uint64_t *a3, __int16 **a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  int v11;
  int *v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  int v18;
  __int16 *v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  void *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  void *v36;

  *(_BYTE *)(a1 + 219) = 1;
  v8 = *(unsigned int *)(a2 + 8);
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v9 = realloc_array(0, &v32, 4 * (v8 + 1), 0, 0, 1);
  v10 = (char *)v32;
  v34 = v32;
  LODWORD(v35) = v8 + 1;
  HIDWORD(v35) = v9 >> 2;
  *(_DWORD *)v32 = 0;
  if ((_DWORD)v8)
  {
    v11 = 0;
    v12 = *(int **)a2;
    v13 = v10 + 4;
    do
    {
      v14 = *v12++;
      v11 += v14;
      *v13++ = v11;
      --v8;
    }
    while (v8);
  }
  v15 = *((unsigned int *)a4 + 2);
  v32 = 0;
  v33 = 0;
  v36 = 0;
  v16 = realloc_array(0, &v36, 4 * (v15 + 1), 0, 0, 1);
  v17 = v36;
  v32 = v36;
  LODWORD(v33) = v15 + 1;
  HIDWORD(v33) = v16 >> 2;
  *(_DWORD *)v36 = 0;
  if ((_DWORD)v15)
  {
    v18 = 0;
    v19 = *a4;
    v20 = v17 + 1;
    do
    {
      v21 = *v19++;
      v18 += v21;
      *v20++ = v18;
      --v15;
    }
    while (v15);
  }
  v22 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v22)
  {
    v23 = *(unsigned int **)(a1 + 96);
    v24 = *(_QWORD *)(a1 + 128);
    v25 = v34;
    v26 = *a3;
    do
    {
      v27 = *v23++;
      v28 = (unsigned int *)(v24 + 136 * v27);
      v29 = v28[4];
      v30 = v28[5] + v29;
      v28[16] = v17[v30] - v17[v29];
      v28[14] = v25[v30] - v25[v29];
      v28[15] = *(_DWORD *)(v26 + 4 * (v30 - 1));
      --v22;
    }
    while (v22);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v34);
}

void sub_209A1AC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void WordLattice::saveLattice(WordLattice *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v6;
  DgnStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[3];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[20];
  unsigned int v23;
  _BYTE v24[16];

  DFileOwner::DFileOwner((DFileOwner *)v24);
  *a3 = 1;
  v6 = DFile::openDFile(a2, (const FileSpec *)1, 14, (uint64_t)v24);
  *a3 = 2;
  v7 = OpenAndWriteMrecHeader((uint64_t)v6, 0x1Eu, 0, "MRLAB!? ", 24, 10);
  v23 = 0;
  v18[0] = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  DgnString::DgnString((DgnString *)v22);
  WordLattice::fillLatticeData(a1, (LatticeData *)v14, v8, v9, v10, v11, v12, v13);
  writeObject(v7, (const LatticeData *)v14, &v23);
  writeObjectChecksum((uint64_t)v7, (int *)&v23);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v24, 0);
  *a3 = 0;
  DgnString::~DgnString((DgnString *)v22);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v20);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v16);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v15);
  DFileOwner::~DFileOwner((DFileOwner *)v24);
}

void sub_209A1ADEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 144);
  DgnIArray<Utterance *>::~DgnIArray(v3 + 128);
  DgnIArray<Utterance *>::~DgnIArray(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 32);
  DgnIArray<Utterance *>::~DgnIArray(v1);
  DFileOwner::~DFileOwner((DFileOwner *)(v4 - 80));
  _Unwind_Resume(a1);
}

void LatticeData::~LatticeData(LatticeData *this)
{
  DgnString::~DgnString((LatticeData *)((char *)this + 160));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 128);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16);
}

uint64_t WordLattice::fixStateIds(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v8 = *(unsigned int *)(this + 104);
  if ((int)v8 >= 1)
  {
    v9 = this;
    v10 = v8 + 1;
    do
    {
      v11 = *(_DWORD *)(*(_QWORD *)(v9 + 96) + 4 * (v10 - 2));
      v12 = *(_QWORD *)(v9 + 128);
      v13 = v12 + 136 * v11;
      v16 = *(_DWORD *)(v13 + 96);
      v14 = (_DWORD *)(v13 + 96);
      v15 = v16;
      if (v16)
      {
        this = VocMgr::getVocOrThrow((VocMgr *)VocMgr::smpVocMgr, *(_DWORD *)(v12 + 136 * v11 + 88) >> 25, a3, a4, a5, a6, a7, a8);
        v17 = *(_QWORD *)(this + 56);
        if (*(_WORD *)(*(_QWORD *)(v17 + 48) + 2 * v15))
          *v14 = *(_DWORD *)(*(_QWORD *)(v17 + 64) + 4 * v15);
      }
      --v10;
    }
    while (v10 > 1);
  }
  return this;
}

uint64_t WordLattice::extendPath@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v9;
  _DWORD *v10;
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  int v22;

  v9 = *(_DWORD *)(a2 + 12);
  v10 = (_DWORD *)(*(_QWORD *)(a1 + 128) + 136 * *(unsigned int *)(*(_QWORD *)(a1 + 96) + 4 * a3));
  result = (uint64_t)(v10 + 22);
  v12 = v10[22];
  if ((v12 & 0xFFFFFF) == 0xFFFFFB)
  {
    v13 = v12 >> 25;
    v14 = v10[24];
    if (*(_WORD *)(a2 + 16) != v12 >> 25 || *(_DWORD *)(a2 + 20) != (_DWORD)v14)
    {
      result = CWIDAC::computeHash(result);
      HIDWORD(v16) = v9;
      LODWORD(v16) = v9;
      v9 = result + (v16 >> 19);
      v17 = v10[18];
      if (v17)
      {
        HIDWORD(v18) = v9;
        LODWORD(v18) = v9;
        HIDWORD(v18) = v10[17] + (v18 >> 19);
        LODWORD(v18) = HIDWORD(v18);
        v9 = (v18 >> 19) + v17;
      }
    }
  }
  else
  {
    result = CWIDAC::computeHash(result);
    HIDWORD(v19) = v9;
    LODWORD(v19) = v9;
    v9 = result + (v19 >> 19);
    v20 = v10[18];
    v14 = 0;
    if (v20)
    {
      HIDWORD(v21) = v9;
      LODWORD(v21) = v9;
      HIDWORD(v21) = v10[17] + (v21 >> 19);
      LODWORD(v21) = HIDWORD(v21);
      v9 = (v21 >> 19) + v20;
    }
    v13 = 127;
  }
  v22 = v10[7] + *(_DWORD *)(a2 + 8) + v10[8] + v10[9] + v10[10] + v10[11] + v10[12] + v10[13];
  *(_DWORD *)a5 = a3;
  *(_DWORD *)(a5 + 4) = a4;
  *(_DWORD *)(a5 + 8) = v22;
  *(_DWORD *)(a5 + 12) = v9;
  *(_QWORD *)(a5 + 16) = v13 | (unint64_t)(v14 << 32);
  return result;
}

void WordLattice::makeMinimumSpanningTree(uint64_t a1, unsigned int *a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  void *v35[2];
  uint64_t v36;

  v8 = *(unsigned int *)(a1 + 24);
  v9 = a2[3];
  if (v8 > v9)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a2, v8 - v9, 0);
  v10 = a2[2];
  if (v10 <= v8)
  {
    if (v10 < v8)
    {
      v13 = v8 - v10;
      v14 = 16 * v10;
      do
      {
        v15 = (_QWORD *)(*(_QWORD *)a2 + v14);
        *v15 = 0;
        v15[1] = 0;
        v14 += 16;
        --v13;
      }
      while (v13);
    }
  }
  else if ((int)v10 > (int)v8)
  {
    v11 = (int)v10;
    v12 = 16 * (int)v10 - 16;
    do
    {
      --v11;
      DgnIArray<Utterance *>::~DgnIArray(*(_QWORD *)a2 + v12);
      v12 -= 16;
    }
    while (v11 > (int)v8);
  }
  a2[2] = v8;
  v16 = *(unsigned int *)(a1 + 24);
  v17 = *(_DWORD *)(a3 + 12);
  if (v16 > v17)
    DgnPrimArray<unsigned long long>::reallocElts(a3, v16 - v17, 0);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 <= v16)
  {
    if (v18 < v16)
    {
      do
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v18++) = 0;
      while (v16 != v18);
    }
  }
  else
  {
    DgnIOwnArray<DgnPriorityQueue<LatticePath> *>::destructAt(a3, v16, v18 - v16);
  }
  *(_DWORD *)(a3 + 8) = v16;
  v19 = *(unsigned int *)(a1 + 24);
  if (*((_DWORD *)a4 + 3) >= v19)
  {
    *((_DWORD *)a4 + 2) = v19;
    if (!(_DWORD)v19)
      goto LABEL_21;
  }
  else
  {
    v35[0] = 0;
    v20 = realloc_array(*a4, v35, v19, *((unsigned int *)a4 + 2), *((unsigned int *)a4 + 2), 1);
    *a4 = v35[0];
    *((_DWORD *)a4 + 2) = v19;
    *((_DWORD *)a4 + 3) = v20;
  }
  bzero(*a4, v19);
LABEL_21:
  v21 = *(_QWORD *)a2;
  v22 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if (v22 == *(_DWORD *)(*(_QWORD *)a2 + 12))
  {
    DgnArray<CWIDAC>::reallocElts(*(_QWORD *)a2, 1, 1);
    v22 = *(_DWORD *)(v21 + 8);
  }
  v23 = *(_QWORD *)v21 + 24 * v22;
  *(_OWORD *)v23 = xmmword_209A58830;
  *(_WORD *)(v23 + 16) = 127;
  *(_DWORD *)(v23 + 20) = 0;
  ++*(_DWORD *)(v21 + 8);
  *(_BYTE *)*a4 = 1;
  v24 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v24)
  {
    for (i = 0; i < v24; ++i)
    {
      v26 = *(unsigned int *)(*(_QWORD *)(a1 + 80) + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * i) + 20);
      if ((_DWORD)v26 != -2)
      {
        v27 = *(_QWORD *)(*(_QWORD *)a2 + 16 * i);
        v28 = *(_QWORD *)(a1 + 128);
        do
        {
          WordLattice::extendPath(a1, v27, *(_DWORD *)(v28 + 136 * v26 + 112), 0, (uint64_t)v35);
          v29 = (unsigned int *)(*(_QWORD *)a2
                               + 16
                               * *(unsigned int *)(*(_QWORD *)(a1 + 80)
                                                 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 128) + 136 * v26 + 120)));
          v30 = v29 + 2;
          if (v29[2])
          {
            v31 = (int)v35[1];
            v32 = *(_QWORD *)v29;
            if (SLODWORD(v35[1]) < *(_DWORD *)(*(_QWORD *)v29 + 8))
            {
              *(void **)v32 = v35[0];
              *(_DWORD *)(v32 + 8) = v31;
              *(_DWORD *)(v32 + 12) = HIDWORD(v35[1]);
              *(_QWORD *)(v32 + 16) = v36;
            }
          }
          else
          {
            if (v29[3])
            {
              v33 = 0;
            }
            else
            {
              DgnArray<CWIDAC>::reallocElts(*(_QWORD *)a2+ 16* *(unsigned int *)(*(_QWORD *)(a1 + 80)+ 24 * *(unsigned int *)(*(_QWORD *)(a1 + 128) + 136 * v26 + 120)), 1, 1);
              v33 = *v30;
            }
            v34 = *(_QWORD *)v29 + 24 * v33;
            *(_OWORD *)v34 = *(_OWORD *)v35;
            *(_QWORD *)(v34 + 16) = v36;
            ++*v30;
          }
          v28 = *(_QWORD *)(a1 + 128);
          v26 = *(unsigned int *)(v28 + 136 * v26 + 128);
        }
        while ((_DWORD)v26 != -2);
        v24 = *(unsigned int *)(a1 + 24);
      }
    }
  }
}

uint64_t WordLattice::initializeEndNodeHeap(_QWORD *a1, unsigned int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  DgnPool *v13;
  __int128 v14;

  v8 = *(unsigned int *)(a1[10] + 24 * *(unsigned int *)(a1[16] + 136 * *(unsigned int *)(a1[12] + 4 * a2) + 120));
  result = (uint64_t)MemChunkAlloc(0x48uLL, 0);
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)result = 0x1800000020;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(*a4 + 8 * v8) = result;
  v10 = *(unsigned int *)(a1[10] + 24 * *(unsigned int *)(a1[2] + 4 * v8) + 16);
  if ((_DWORD)v10 != -2)
  {
    v11 = a1[16];
    do
    {
      v12 = *(_DWORD *)(v11 + 136 * v10 + 112);
      if (v12 != a2)
      {
        v13 = *(DgnPool **)(*a4 + 8 * v8);
        WordLattice::extendPath((uint64_t)a1, *(_QWORD *)(*a3 + 16 * *(unsigned int *)(a1[10] + 24 * *(unsigned int *)(v11 + 136 * v10 + 116))), v12, 0, (uint64_t)&v14);
        result = DgnPriorityQueue<LatticePath>::push(v13, &v14);
        v11 = a1[16];
      }
      v10 = *(unsigned int *)(v11 + 136 * v10 + 124);
    }
    while ((_DWORD)v10 != -2);
  }
  return result;
}

uint64_t DgnPriorityQueue<LatticePath>::push(DgnPool *this, __int128 *a2)
{
  _QWORD *v4;
  __int128 v5;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v4)
  {
    DgnPool::addChunk(this);
    v4 = (_QWORD *)*((_QWORD *)this + 1);
  }
  *((_QWORD *)this + 1) = *v4;
  v5 = *a2;
  v4[2] = *((_QWORD *)a2 + 2);
  *(_OWORD *)v4 = v5;
  return DgnHeap<LatticePath>::insert((uint64_t)this + 56, (uint64_t)v4);
}

double WordLattice::nextBestPath@<D0>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Min;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int *v34;
  uint64_t v35;
  double result;
  unsigned int v39;
  _QWORD *v40;
  __int128 v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  unint64_t v46;
  __int128 v47;
  unint64_t v48;

  v10 = *a2;
  v11 = *(unsigned int *)(a1[10] + 24 * *(unsigned int *)(a1[16] + 136 * *(unsigned int *)(a1[12] + 4 * v10) + 120));
  v12 = *a4;
  if (!*(_QWORD *)(*a4 + 8 * v11))
  {
    WordLattice::initializeEndNodeHeap(a1, v10, a3, a4);
    v12 = *a4;
  }
  v40 = a5;
  v47 = *(_OWORD *)a2;
  v48 = *((_QWORD *)a2 + 2);
  v14 = v47;
  v13 = DWORD1(v47);
  while (1)
  {
    v15 = a1[10];
    v16 = *(unsigned int *)(v15 + 24 * *(unsigned int *)(a1[16] + 136 * *(unsigned int *)(a1[12] + 4 * v14) + 120));
    v17 = *(unsigned int *)(v15 + 24 * *(unsigned int *)(a1[16] + 136 * *(unsigned int *)(a1[12] + 4 * v14) + 116));
    v45 = xmmword_209A80260;
    LOWORD(v46) = 127;
    HIDWORD(v46) = 0;
    v18 = *a3 + 16 * v17;
    if (v13 + 1 >= *(_DWORD *)(v18 + 8))
    {
      if (*(_BYTE *)(*v40 + v17))
      {
        LODWORD(v25) = 0;
        v22 = 0;
        v20 = -2;
        v23 = 1879048192;
        v24 = 127;
        v21 = -2;
      }
      else
      {
        v26 = *(_QWORD *)v18 + 24 * v13;
        v43 = *(_OWORD *)v26;
        v44 = *(_QWORD *)(v26 + 16);
        WordLattice::nextBestPath(&v41, a1, &v43, a3, a4);
        v21 = v41;
        v20 = DWORD1(v41);
        v45 = v41;
        v23 = DWORD2(v41);
        v22 = HIDWORD(v41);
        v46 = v42;
        v24 = (unsigned __int16)v42;
        v25 = HIDWORD(v42);
      }
    }
    else
    {
      v19 = *(_QWORD *)v18 + 24 * (v13 + 1);
      v21 = *(_DWORD *)v19;
      v20 = *(_DWORD *)(v19 + 4);
      LODWORD(v45) = *(_DWORD *)v19;
      DWORD1(v45) = v20;
      v23 = *(_DWORD *)(v19 + 8);
      v22 = *(_DWORD *)(v19 + 12);
      *((_QWORD *)&v45 + 1) = __PAIR64__(v22, v23);
      v46 = *(_QWORD *)(v19 + 16);
      v24 = (unsigned __int16)v46;
      v25 = HIDWORD(v46);
    }
    v27 = *(_QWORD *)(v12 + 8 * v11);
    if (v21 != -2 || v20 != -2 || v23 != 1879048192 || v22 || v24 != 127 || (_DWORD)v25)
    {
      WordLattice::extendPath((uint64_t)a1, (uint64_t)&v45, v14, v13 + 1, (uint64_t)&v43);
      DgnPriorityQueue<LatticePath>::push((DgnPool *)v27, &v43);
      v27 = *(_QWORD *)(v12 + 8 * v11);
    }
    if (*(_DWORD *)(v27 + 64))
    {
      Min = DgnHeap<LatticePath>::extractMin(v27 + 56);
      v14 = *(_DWORD *)Min;
      v13 = *(_DWORD *)(Min + 4);
      v30 = *(_DWORD *)(Min + 8);
      v29 = *(_DWORD *)(Min + 12);
      v31 = *(_QWORD *)(Min + 16);
      *(_QWORD *)Min = *(_QWORD *)(v27 + 8);
      *(_QWORD *)(v27 + 8) = Min;
    }
    else
    {
      *(_BYTE *)(*v40 + v16) = 1;
      DgnDelete<DgnPriorityQueue<LatticePath>>(v27);
      v29 = 0;
      *(_QWORD *)(v12 + 8 * v11) = 0;
      v31 = v39 & 0xFFFF0000 | 0x7FLL;
      v13 = -2;
      v30 = 1879048192;
      v14 = -2;
      v39 = v39 & 0xFFFF0000 | 0x7F;
    }
    *(_QWORD *)&v47 = __PAIR64__(v13, v14);
    *((_QWORD *)&v47 + 1) = __PAIR64__(v29, v30);
    v48 = v31;
    if (v14 == -2 && v13 == -2 && v30 == 1879048192 && !v29 && (unsigned __int16)v31 == 127 && !HIDWORD(v31))
      break;
    if ((WordLattice::wordSeqPresent(a1, (LatticePath *)&v47, v11, a3) & 1) == 0)
    {
      v32 = *a3 + 16 * v11;
      v34 = (unsigned int *)(v32 + 8);
      v33 = *(_DWORD *)(v32 + 8);
      if (v33 == *(_DWORD *)(v32 + 12))
      {
        DgnArray<CWIDAC>::reallocElts(*a3 + 16 * v11, 1, 1);
        v33 = *v34;
      }
      v35 = *(_QWORD *)v32 + 24 * v33;
      *(_OWORD *)v35 = v47;
      *(_QWORD *)(v35 + 16) = v48;
      ++*v34;
      break;
    }
  }
  result = *(double *)&v47;
  *(_OWORD *)a6 = v47;
  *(_QWORD *)(a6 + 16) = v48;
  return result;
}

uint64_t DgnDelete<DgnPriorityQueue<LatticePath>>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    DgnPriorityQueue<LatticePath>::~DgnPriorityQueue(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t WordLattice::wordSeqPresent(_QWORD *a1, LatticePath *this, unsigned int a3, _QWORD *a4)
{
  uint64_t v4;
  unsigned int *v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  BOOL v11;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v4 = *(unsigned int *)(*a4 + 16 * a3 + 8);
  if ((int)v4 < 1)
    return 0;
  v6 = (unsigned int *)this;
  v8 = 16 * a3;
  v19 = v8;
  while (1)
  {
    v9 = *(_QWORD *)(*a4 + v8);
    if (v6[3] == *(_DWORD *)(v9 + 24 * (v4 - 1) + 12))
    {
      v10 = (unsigned int *)(v9 + 24 * (v4 - 1));
      while (!LatticePath::isRootPath((LatticePath *)v6))
      {
        if (LatticePath::isRootPath((LatticePath *)v10))
          break;
        v13 = a1[12];
        v14 = *(_DWORD *)(v13 + 4 * *v6);
        v15 = *(_DWORD *)(v13 + 4 * *v10);
        if (!CWIDAC::operator==(a1[16] + 136 * v14 + 88, a1[16] + 136 * v15 + 88))
          break;
        v16 = a1[16];
        if ((*(_DWORD *)(v16 + 136 * v14 + 88) & 0xFFFFFF) == 0xFFFFFB)
        {
          v22 = 0;
          v6 = WordLattice::skipToNextPathWithDifferentWord(a1, v6, a4, &v22);
          v21 = 0;
          v10 = WordLattice::skipToNextPathWithDifferentWord(a1, v10, a4, &v21);
          if (*(_DWORD *)(v22 + 68) != *(_DWORD *)(v21 + 68) || *(_DWORD *)(v22 + 72) != *(_DWORD *)(v21 + 72))
            break;
        }
        else
        {
          v17 = a1[10];
          v6 = (unsigned int *)(*(_QWORD *)(*a4
                                          + 16
                                          * *(unsigned int *)(v17 + 24 * *(unsigned int *)(v16 + 136 * v14 + 116)))
                              + 24 * v6[1]);
          v10 = (unsigned int *)(*(_QWORD *)(*a4
                                           + 16
                                           * *(unsigned int *)(v17 + 24 * *(unsigned int *)(v16 + 136 * v15 + 116)))
                               + 24 * v10[1]);
        }
      }
      v11 = LatticePath::operator==((uint64_t)v6, (uint64_t)v10);
      v8 = v19;
      v6 = (unsigned int *)this;
      if (v11)
        return 1;
    }
    if (v4-- <= 1)
      return 0;
  }
}

_QWORD *WordLattice::getNBestListMaybePrune(uint64_t a1, unsigned int a2, unint64_t a3, void **a4)
{
  __int128 *v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unsigned __int32 v12;
  unsigned __int32 v13;
  int v14;
  BOOL v15;
  BOOL v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  const WordLatticeLC *v23;
  uint64_t v24;
  uint64_t v25;
  int32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int32x2_t v31;
  unsigned __int32 v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int v49;
  int v51;
  int32x4_t v52;
  unsigned __int32 v53;
  int32x4_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  __int16 v64;
  __int128 v65;
  int32x4_t v66;
  int32x2_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  unint64_t v72;
  void *v73[2];
  uint64_t v74[2];
  _QWORD v75[3];

  v75[0] = 0;
  v75[1] = 0;
  v74[0] = 0;
  v74[1] = 0;
  v73[0] = 0;
  v73[1] = 0;
  WordLattice::makeMinimumSpanningTree(a1, (unsigned int *)v75, (uint64_t)v74, v73);
  v7 = *(__int128 **)(v75[0] + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 80) + 24 * **(unsigned int **)(a1 + 48)));
  v8 = *(unsigned int *)(a1 + 104);
  if (*((_DWORD *)a4 + 3) >= v8)
  {
    *((_DWORD *)a4 + 2) = v8;
    if (!(_DWORD)v8)
      goto LABEL_5;
  }
  else
  {
    *(_QWORD *)&v55 = 0;
    v9 = realloc_array(*a4, (void **)&v55, v8, *((unsigned int *)a4 + 2), *((unsigned int *)a4 + 2), 1);
    *a4 = (void *)v55;
    *((_DWORD *)a4 + 2) = v8;
    *((_DWORD *)a4 + 3) = v9;
  }
  bzero(*a4, v8);
LABEL_5:
  v71 = *v7;
  v10 = *((_QWORD *)v7 + 2);
  v72 = v10;
  if (a2 <= 1)
    v11 = 1;
  else
    v11 = a2;
  v12 = v71;
  v13 = DWORD1(v71);
  v14 = DWORD2(v71);
  v15 = HIDWORD(v71) == 0;
  if ((_DWORD)v71 != -2
    || *(_QWORD *)((char *)&v71 + 4) != 0x70000000FFFFFFFELL
    || HIDWORD(v71)
    || ((unsigned __int16)v10 == 127 ? (v16 = HIDWORD(v72) == 0) : (v16 = 0), !v16))
  {
    v17 = 0;
    v49 = v11 - 1;
    do
    {
      v51 = v17;
      v69 = 0;
      v70 = 0;
      v66 = 0uLL;
      v68 = 0;
      v67 = 0;
      if (v12 != -1
        || v13 != -1
        || v14
        || !v15
        || ((unsigned __int16)v72 == 127 ? (v18 = HIDWORD(v72) == 0) : (v18 = 0), !v18))
      {
        v19 = 0;
        v20 = 0;
        do
        {
          *((_BYTE *)*a4 + v12) = 1;
          v21 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v12);
          v22 = *(_QWORD *)(a1 + 128);
          if (v20 == HIDWORD(v70))
          {
            DgnArray<WordLatticeLC>::reallocElts((uint64_t)&v69, 1, 1);
            v20 = v70;
            v19 = v69;
          }
          v23 = (const WordLatticeLC *)(v22 + 136 * v21);
          WordLatticeLC::WordLatticeLC((WordLatticeLC *)(v19 + 112 * v20), v23);
          LODWORD(v70) = v70 + 1;
          v24 = *(_QWORD *)(a1 + 128);
          v25 = *(_QWORD *)(v75[0]
                          + 16
                          * *(unsigned int *)(*(_QWORD *)(a1 + 80) + 24 * *(unsigned int *)(v24 + 136 * v21 + 116)))
              + 24 * v13;
          v26 = *(int32x4_t *)v25;
          v27 = *(_QWORD *)(v25 + 16);
          v29 = *((_DWORD *)v23 + 22);
          v28 = (uint64_t)v23 + 88;
          if ((v29 & 0xFFFFFF) == 0xFFFFFB)
          {
            v30 = v24 + 136 * *(unsigned int *)(*(_QWORD *)(a1 + 96) + 4 * v26.u32[0]);
            v52 = *(int32x4_t *)v25;
            if (CWIDAC::operator==(v30 + 88, v28))
            {
              v31 = vrev64_s32(*(int32x2_t *)v52.i8);
              do
              {
                v53 = v31.i32[0];
                v32 = v31.u32[1];
                *((_BYTE *)*a4 + v31.u32[1]) = 1;
                ItemizedScores::operator+=(v69 + 112 * (v70 - 1) + 28, v30 + 28);
                v33 = *(_DWORD *)(v30 + 24) + *(_DWORD *)(v30 + 20);
                v34 = v69 + 112 * (v70 - 1);
                v35 = *(_DWORD *)(v34 + 16) - v33;
                v36 = *(_DWORD *)(v34 + 20) + v33;
                *(_DWORD *)(v34 + 16) = v35;
                *(_DWORD *)(v34 + 20) = v36;
                *(_QWORD *)(v34 + 68) = *(_QWORD *)(v30 + 68);
                v37 = *(_QWORD *)(a1 + 96);
                v38 = *(_QWORD *)(a1 + 128);
                v39 = *(_QWORD *)(v75[0]
                                + 16
                                * *(unsigned int *)(*(_QWORD *)(a1 + 80)
                                                  + 24
                                                  * *(unsigned int *)(v38
                                                                    + 136 * *(unsigned int *)(v37 + 4 * v32)
                                                                    + 116)))
                    + 24 * v53;
                v54 = *(int32x4_t *)v39;
                v27 = *(_QWORD *)(v39 + 16);
                v30 = v38 + 136 * *(unsigned int *)(v37 + 4 * *(_OWORD *)v39);
                v40 = CWIDAC::operator==(v30 + 88, v28);
                v26 = v54;
                v31 = vrev64_s32(*(int32x2_t *)v54.i8);
              }
              while (v40);
            }
            else
            {
              v26 = v52;
            }
          }
          v20 = v70;
          v19 = v69;
          v41 = v69 + 112 * (v70 - 1);
          v66 = vaddq_s32(v66, *(int32x4_t *)(v41 + 28));
          v67 = vadd_s32(v67, *(int32x2_t *)(v41 + 44));
          v68 += *(_DWORD *)(v41 + 52);
          v12 = v26.i32[0];
          v13 = v26.u32[1];
        }
        while ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v26, (int32x4_t)xmmword_209A58830)))) & 1) != 0|| (v27 & 0xFFFFFFFF0000FFFFLL) != 0x7F);
        if (v70 >= 2)
        {
          v42 = 112 * ((v70 - 1) >> 1) + 112;
          v43 = ((unint64_t)v70 >> 1) + 1;
          do
          {
            WordLatticeLC::WordLatticeLC((WordLatticeLC *)&v55, (const WordLatticeLC *)(v19 + 112 * (v43 - 2)));
            v44 = v69 + v42;
            v45 = v69 + 112 * (v43 - 2);
            BaseWordLatticeLC::operator=(v45, v69 + v42);
            *(_DWORD *)(v45 + 88) = *(_DWORD *)(v44 + 88);
            *(_DWORD *)(v45 + 92) = *(_DWORD *)(v44 + 92);
            *(_OWORD *)(v45 + 96) = *(_OWORD *)(v44 + 96);
            v19 = v69;
            v46 = v69 + v42;
            *(_QWORD *)(v46 + 8) = *((_QWORD *)&v55 + 1);
            *(_OWORD *)(v46 + 16) = v56;
            *(_OWORD *)(v46 + 32) = v57;
            *(_OWORD *)(v46 + 48) = v58;
            *(_QWORD *)(v46 + 64) = v59;
            *(_DWORD *)(v46 + 72) = v60;
            *(_QWORD *)(v46 + 80) = v61;
            *(_DWORD *)(v46 + 88) = v62;
            *(_WORD *)(v46 + 92) = v63;
            *(_WORD *)(v46 + 94) = v64;
            *(_OWORD *)(v46 + 96) = v65;
            v42 += 112;
            --v43;
          }
          while (v43 > 1);
        }
      }
      if (a3)
      {
        v47 = MemChunkAlloc(0x40uLL, 0);
        NBestChoice::NBestChoice(v47, &v69, &v66);
        ParamSpecMgr::addParam(a3, (ParamSpec *)v47);
      }
      DgnArray<WordLatticeLC>::releaseAll((uint64_t)&v69);
      if (v51 == v49)
        break;
      WordLattice::nextBestPath((_QWORD *)a1, (unsigned int *)&v71, v75, v74, v73, (uint64_t)&v55);
      v17 = v51 + 1;
      v12 = v55;
      v13 = DWORD1(v55);
      v71 = v55;
      v14 = DWORD2(v55);
      v72 = v56;
      v15 = HIDWORD(v55) == 0;
    }
    while ((_DWORD)v55 != -2
         || *(_QWORD *)((char *)&v55 + 4) != 0x70000000FFFFFFFELL
         || HIDWORD(v55)
         || (unsigned __int16)v56 != 127
         || DWORD1(v56));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v73);
  DgnIOwnArray<DgnPriorityQueue<LatticePath> *>::releaseAll((uint64_t)v74);
  return DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)v75);
}

void sub_209A1BFEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 136);
  DgnIOwnArray<DgnPriorityQueue<LatticePath> *>::releaseAll(v1 - 120);
  DgnArray<DgnArray<ParseToken>>::releaseAll(v1 - 104);
  _Unwind_Resume(a1);
}

int32x2_t ItemizedScores::operator+=(uint64_t a1, uint64_t a2)
{
  int32x2_t result;

  *(int32x4_t *)a1 = vaddq_s32(*(int32x4_t *)a1, *(int32x4_t *)a2);
  result = vadd_s32(*(int32x2_t *)(a1 + 16), *(int32x2_t *)(a2 + 16));
  *(int32x2_t *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t WordLattice::maybePruneToNumUniquePaths(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;

  if (a2)
  {
    v2 = this;
    v5 = 0;
    v6 = 0;
    WordLattice::getNBestListMaybePrune(this, a2, 0, (void **)&v5);
    if ((int)v6 >= 1)
    {
      v3 = v6 + 1;
      do
      {
        v4 = (v3 - 2);
        if (!v5[v4])
        {
          Lattice<WordLatticeLC>::disconnectAndDestroyLink(v2, *(_DWORD *)(*(_QWORD *)(v2 + 96) + 4 * v4));
          *(_BYTE *)(v2 + 8) = 0;
        }
        --v3;
      }
      while (v3 > 1);
    }
    Lattice<WordLatticeLC>::minimize(v2);
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v5);
  }
  return this;
}

void sub_209A1C104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *WordLattice::getNBestList(WordLattice *this, unsigned int a2)
{
  uint64_t *v4;
  uint64_t v5;
  void *v7[2];

  v4 = MemChunkAlloc(0x20uLL, 0);
  v5 = *(_QWORD *)((char *)this + 196);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = v5;
  v4[3] = 0;
  v7[0] = 0;
  v7[1] = 0;
  WordLattice::getNBestListMaybePrune((uint64_t)this, a2, (unint64_t)v4, v7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v7);
  return v4;
}

void sub_209A1C190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned int *WordLattice::skipToNextPathWithDifferentWord(_QWORD *a1, unsigned int *a2, _QWORD *a3, uint64_t *a4)
{
  unsigned int *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2;
  v8 = a1[16] + 136 * *(unsigned int *)(a1[12] + 4 * *a2);
  v9 = v8 + 88;
  do
  {
    v10 = a1[12];
    v11 = v8;
    v12 = a1[16];
    v6 = (unsigned int *)(*(_QWORD *)(*a3
                                    + 16
                                    * *(unsigned int *)(a1[10]
                                                      + 24
                                                      * *(unsigned int *)(v12
                                                                        + 136 * *(unsigned int *)(v10 + 4 * *v6)
                                                                        + 116)))
                        + 24 * v6[1]);
    v8 = v12 + 136 * *(unsigned int *)(v10 + 4 * *v6);
  }
  while (CWIDAC::operator==(v8 + 88, v9) && !LatticePath::isRootPath((LatticePath *)v6));
  *a4 = v11;
  return v6;
}

uint64_t WordLattice::getLatticeStats(uint64_t this, unsigned int *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5)
{
  int v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;

  v5 = *(_DWORD *)(this + 24);
  if (v5)
  {
    v6 = *(unsigned int **)(this + 16);
    v7 = *(_QWORD *)(this + 80);
    v8 = *(unsigned int *)(this + 24);
    do
    {
      v9 = *v6++;
      v10 = v7 + 24 * v9;
      v11 = *(_DWORD *)(v10 + 8);
      LODWORD(v10) = *(_DWORD *)(v10 + 12);
      *a4 += (v11 * v11);
      *a5 += (v10 * v10);
      --v8;
    }
    while (v8);
  }
  *a2 += v5;
  *a3 += *(_DWORD *)(this + 104);
  return this;
}

uint64_t WordLattice::resortLatticeLinks(WordLattice *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  ForwardLatticeNodeIterator<WordLatticeLC>::ForwardLatticeNodeIterator((uint64_t)&v3, (uint64_t)this);
  while (v7)
  {
    Lattice<WordLatticeLC>::resortLinks((uint64_t)this, *(_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * *(unsigned int *)(v5 + 4 * v6)));
    ForwardLatticeNodeIterator<WordLatticeLC>::next(&v3);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v5);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v4);
}

void sub_209A1C360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Lattice<WordLatticeLC>::resortLinks(uint64_t result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;

  v2 = result;
  v3 = *(_QWORD *)(result + 80);
  v5 = *(_DWORD *)(v3 + 24 * a2 + 12);
  if (v5 >= 2)
  {
    v6 = (_QWORD *)(result + 144);
    v7 = *(_DWORD *)(result + 156);
    if (v5 > v7)
    {
      DgnPrimArray<unsigned int>::reallocElts(result + 144, v5 - v7, 0);
      v3 = *(_QWORD *)(v2 + 80);
    }
    *(_DWORD *)(v2 + 152) = 0;
    v8 = *(unsigned int *)(v3 + 24 * a2 + 20);
    if ((_DWORD)v8 != -2)
    {
      v9 = 0;
      v10 = *(_QWORD *)(v2 + 144);
      v11 = *(_QWORD *)(v2 + 128);
      do
      {
        *(_DWORD *)(v10 + 4 * v9) = v8;
        v9 = *(_DWORD *)(v2 + 152) + 1;
        *(_DWORD *)(v2 + 152) = v9;
        v8 = *(unsigned int *)(v11 + 136 * v8 + 128);
      }
      while ((_DWORD)v8 != -2);
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v2 + 8))(v2, v2 + 144);
    v12 = 0;
    v32 = 0;
    v33 = 0;
    v13 = v5 - 1;
    do
    {
      v14 = (unsigned int *)(*(_QWORD *)(v2 + 144) + 4 * v12);
      *(_DWORD *)(*(_QWORD *)(v2 + 128) + 136 * *v14 + 128) = v14[1];
      if (!Lattice<WordLatticeLC>::cmpOutLink(v2, *v14, (const WordLatticeLC *)v14[1]))
      {
        v15 = *(_DWORD *)(*v6 + 4 * v12 + 4);
        v16 = v33;
        if (v33 == (unint64_t)HIDWORD(v33))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v32, 1, 1);
          v16 = v33;
        }
        *(_DWORD *)(v32 + 4 * v16) = v15;
        LODWORD(v33) = v33 + 1;
      }
      ++v12;
    }
    while (v13 != v12);
    v17 = *(_DWORD **)(v2 + 144);
    *(_DWORD *)(*(_QWORD *)(v2 + 128) + 136 * v17[v13] + 128) = -2;
    *(_DWORD *)(*(_QWORD *)(v2 + 80) + 24 * a2 + 20) = *v17;
    while ((_DWORD)v33)
    {
      v18 = *(_DWORD *)(v32 + 4 * (v33 - 1));
      LODWORD(v33) = v33 - 1;
      Lattice<WordLatticeLC>::disconnectAndDestroyLink(v2, v18);
    }
    result = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
    v3 = *(_QWORD *)(v2 + 80);
  }
  v19 = *(_DWORD *)(v3 + 24 * a2 + 8);
  if (v19 >= 2)
  {
    v20 = *(_DWORD *)(v2 + 156);
    if (v19 > v20)
    {
      DgnPrimArray<unsigned int>::reallocElts(v2 + 144, v19 - v20, 0);
      v3 = *(_QWORD *)(v2 + 80);
    }
    *(_DWORD *)(v2 + 152) = 0;
    v21 = *(unsigned int *)(v3 + 24 * a2 + 16);
    if ((_DWORD)v21 != -2)
    {
      v22 = 0;
      v23 = *(_QWORD *)(v2 + 144);
      v24 = *(_QWORD *)(v2 + 128);
      do
      {
        *(_DWORD *)(v23 + 4 * v22) = v21;
        v22 = *(_DWORD *)(v2 + 152) + 1;
        *(_DWORD *)(v2 + 152) = v22;
        v21 = *(unsigned int *)(v24 + 136 * v21 + 124);
      }
      while ((_DWORD)v21 != -2);
    }
    (**(void (***)(unint64_t, uint64_t))v2)(v2, v2 + 144);
    v25 = 0;
    v32 = 0;
    v33 = 0;
    v26 = v19 - 1;
    do
    {
      v27 = (unsigned int *)(*(_QWORD *)(v2 + 144) + 4 * v25);
      *(_DWORD *)(*(_QWORD *)(v2 + 128) + 136 * *v27 + 124) = v27[1];
      if (!Lattice<WordLatticeLC>::cmpInLink(v2, *v27, (const WordLatticeLC *)v27[1]))
      {
        v28 = *(_DWORD *)(*(_QWORD *)(v2 + 144) + 4 * v25 + 4);
        v29 = v33;
        if (v33 == (unint64_t)HIDWORD(v33))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v32, 1, 1);
          v29 = v33;
        }
        *(_DWORD *)(v32 + 4 * v29) = v28;
        LODWORD(v33) = v33 + 1;
      }
      ++v25;
    }
    while (v26 != v25);
    v30 = *(_DWORD **)(v2 + 144);
    *(_DWORD *)(*(_QWORD *)(v2 + 128) + 136 * v30[v26] + 124) = -2;
    *(_DWORD *)(*(_QWORD *)(v2 + 80) + 24 * a2 + 16) = *v30;
    while ((_DWORD)v33)
    {
      v31 = *(_DWORD *)(v32 + 4 * (v33 - 1));
      LODWORD(v33) = v33 - 1;
      Lattice<WordLatticeLC>::disconnectAndDestroyLink(v2, v31);
    }
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
  }
  return result;
}

void sub_209A1C6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t WordLattice::addSegmentations(WordLattice *this, const Active *a2, const PhnMgr *a3, const PicMgr *a4)
{
  __int16 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  char *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t *Bucket;
  ActiveWord *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _WORD *v25;
  int v26;
  _QWORD **v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t NonSilOutPort;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v46;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  _BYTE v57[16];
  _QWORD v58[3];
  _BYTE v59[16];
  _QWORD v60[4];

  MrecInitModule_sdpres_sdapi();
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v59, 0, 128);
  v60[2] = this;
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v57, 0, 128);
  v58[2] = (char *)this + 256;
  v7 = *((_WORD *)a3 + 28);
  v55 = 0;
  v56 = 0;
  v53 = 0;
  v54 = 0;
  if (!*((_DWORD *)this + 26))
    goto LABEL_59;
  v8 = 0;
  v9 = *((_QWORD *)this + 16);
  v46 = v7;
  do
  {
    v10 = *(_DWORD *)(*((_QWORD *)this + 12) + 4 * v8);
    v11 = v9 + 136 * v10;
    v13 = *(_DWORD *)(v11 + 88);
    v12 = v11 + 88;
    v14 = *(_DWORD *)(v12 - 72);
    v15 = *(_DWORD *)(v12 - 68);
    v16 = *(_DWORD *)(v12 - 64);
    if (v13 >> 25 == 126)
    {
      v17 = (char *)v55;
      if (HIDWORD(v56))
      {
        if ((_DWORD)v56)
        {
LABEL_6:
          LODWORD(v56) = 1;
          *(_QWORD *)(v17 + 12) = 0;
          *(_WORD *)v17 = v7;
          *((_WORD *)v17 + 1) = v7;
          *((_WORD *)v17 + 2) = 0;
          *((_WORD *)v17 + 3) = v7;
          *((_WORD *)v17 + 4) = v7;
          *((_WORD *)v17 + 5) = 0;
          v18 = v55;
          *((_DWORD *)v55 + 5) = v14;
          v18[6] = v16 + v15;
          v19 = WordLattice::findOrAddLinkSegId((uint64_t)this, (uint64_t)&v55, (uint64_t)v59);
LABEL_14:
          v23 = v19 | 0x8000000000000000;
          goto LABEL_15;
        }
      }
      else
      {
        v51 = 0;
        HIDWORD(v56) = realloc_array(v55, &v51, 0x1CuLL, 28 * v56, 28 * v56, 1) / 0x1C;
        v17 = (char *)v51;
        v55 = v51;
        if ((_DWORD)v56)
          goto LABEL_6;
      }
      *((_DWORD *)v17 + 2) = 0xFFFF;
      *(_QWORD *)v17 = -1;
      *((_DWORD *)v17 + 5) = -16;
      v17 = (char *)v55;
      goto LABEL_6;
    }
    Bucket = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket((uint64_t)a2 + 303024, v12);
    v48 = v14;
    if (*Bucket)
      v21 = *(ActiveWord **)(*Bucket + 40);
    else
      v21 = 0;
    v22 = *((_QWORD *)this + 16);
    if (*(_DWORD *)(v22 + 136 * v10 + 24))
    {
      getPortSegments((uint64_t)v21, **(_QWORD **)(*((_QWORD *)v21 + 1) + 72), (uint64_t)&v55, v14, v15, v16, (uint64_t)a4);
      v19 = WordLattice::findOrAddLinkSegId((uint64_t)this, (uint64_t)&v55, (uint64_t)v59);
      goto LABEL_14;
    }
    LODWORD(v54) = 0;
    v51 = 0;
    v52 = 0;
    v24 = *(unsigned int *)(*((_QWORD *)this + 10) + 24 * *(unsigned int *)(v22 + 136 * v10 + 120) + 20);
    if ((_DWORD)v24 == -2)
    {
      v49 = 0;
      v50 = 0;
      goto LABEL_55;
    }
    v25 = 0;
    v26 = 0;
    v27 = (_QWORD **)VocMgr::smpVocMgr;
    do
    {
      v28 = *(unsigned int *)(v22 + 136 * v24 + 88);
      if (v28 >> 25 == 126)
      {
        v29 = 0;
        if (!v26)
          goto LABEL_29;
      }
      else
      {
        v29 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**v27 + ((v28 >> 22) & 0x3F8)) + 48) + 592)
                                  + 2 * (v28 & 0xFFFFFF));
        if (!v26)
          goto LABEL_29;
      }
      v30 = 0;
      while ((unsigned __int16)v25[v30] != v29)
      {
        if (v26 == ++v30)
          goto LABEL_29;
      }
      if (v30 == 0xFFFFFFFFLL)
      {
LABEL_29:
        if (v26 == HIDWORD(v52))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v51, 1, 1);
          v26 = v52;
          v25 = v51;
          v22 = *((_QWORD *)this + 16);
        }
        v25[v26++] = v29;
        LODWORD(v52) = v26;
      }
      v24 = *(unsigned int *)(v22 + 136 * v24 + 128);
    }
    while ((_DWORD)v24 != -2);
    v49 = 0;
    v50 = 0;
    if (v26)
    {
      v31 = 0;
      do
      {
        NonSilOutPort = ActiveWord::maybeGetNonSilOutPort(v21, *((unsigned __int16 *)v51 + v31));
        v33 = NonSilOutPort;
        if (NonSilOutPort)
        {
          v34 = v50;
          if (!(_DWORD)v50)
            goto LABEL_42;
          v35 = v49;
          v36 = v50;
          v37 = 0xFFFFFFFFLL;
          while (*v35 != NonSilOutPort)
          {
            --v37;
            ++v35;
            if (!--v36)
              goto LABEL_42;
          }
          if (!v37)
          {
LABEL_42:
            if ((_DWORD)v50 == HIDWORD(v50))
            {
              DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v49, 1, 1);
              v34 = v50;
            }
            v49[v34] = v33;
            LODWORD(v50) = v34 + 1;
            if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)v21 + 1) + 48))(*((_QWORD *)v21 + 1), v33, (v16 + v15 + v48 - 1)))
            {
              getPortSegments((uint64_t)v21, v33, (uint64_t)&v55, v48, v15, v16, (uint64_t)a4);
              v38 = WordLattice::findOrAddLinkSegId((uint64_t)this, (uint64_t)&v55, (uint64_t)v59);
              v39 = v38;
              v40 = v54;
              if (!(_DWORD)v54)
                goto LABEL_51;
              v41 = v53;
              v42 = v54;
              v43 = 0xFFFFFFFFLL;
              while (1)
              {
                v44 = *v41++;
                if (v44 == v38)
                  break;
                --v43;
                if (!--v42)
                  goto LABEL_51;
              }
              if (!v43)
              {
LABEL_51:
                if ((_DWORD)v54 == HIDWORD(v54))
                {
                  DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v53, 1, 1);
                  v40 = v54;
                }
                v53[v40] = v39;
                LODWORD(v54) = v40 + 1;
              }
            }
          }
        }
        ++v31;
      }
      while (v31 < v52);
    }
LABEL_55:
    if ((_DWORD)v54 == 1)
    {
      v23 = *v53 | 0x8000000000000000;
      v7 = v46;
    }
    else
    {
      v7 = v46;
      v23 = LinkSegIds::findOrAddLinkSegSeqIdFromLinkSegIds((uint64_t)this + 256, (uint64_t)&v53, (uint64_t)v57);
    }
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v49);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v51);
LABEL_15:
    v9 = *((_QWORD *)this + 16);
    *(_QWORD *)(v9 + 136 * v10 + 80) = v23;
    ++v8;
  }
  while (v8 < *((unsigned int *)this + 26));
LABEL_59:
  *((_BYTE *)this + 220) = 1;
  WordLattice::resortLatticeLinks(this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v53);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v55);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v58);
  MrecInitModule_sdpres_sdapi();
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v60);
  return MrecInitModule_sdpres_sdapi();
}

void sub_209A1CBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  MrecInitModule_sdpres_sdapi();
  DgnPrimArray<unsigned int>::~DgnPrimArray(v10 - 112);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

_QWORD *getPortSegments(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  __int16 v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;

  v25 = 0;
  v26 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8), a2, (a4 - 1 + a5 + a6), &v25) == a4 - 1)
  {
    v9 = *(_WORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 302976) + 56);
    v10 = v26;
    *(_DWORD *)(a3 + 8) = 0;
    v11 = *(_DWORD *)(a3 + 12);
    if ((int)v10 + 1 > v11)
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(a3, (_DWORD)v10 + 1 - v11, 0);
    if ((_DWORD)v10)
    {
      v12 = 0;
      v13 = 0;
      v14 = (v10 - 1);
      do
      {
        v15 = *(_QWORD *)(v25 + 8 * v14);
        v16 = *(_QWORD *)a3 + 28 * *(unsigned int *)(a3 + 8);
        *(_QWORD *)v16 = -1;
        *(_DWORD *)(v16 + 8) = 0xFFFF;
        *(_DWORD *)(v16 + 20) = -16;
        v17 = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v17 + 1;
        v18 = *(_QWORD *)a3;
        v19 = *(_QWORD *)a3 + 28 * v17;
        *(_DWORD *)(v19 + 20) = *(_DWORD *)v15;
        *(_DWORD *)(v19 + 24) = *(_DWORD *)(v15 + 8);
        LODWORD(v16) = *(unsigned __int16 *)(v15 + 4);
        *(_WORD *)(v19 + 16) = v16;
        *(_DWORD *)(v19 + 12) = *(_DWORD *)(v15 + 12);
        v20 = *(unsigned __int16 *)(v15 + 20);
        *(_WORD *)v19 = v9;
        *(_WORD *)(v19 + 2) = v9;
        *(_WORD *)(v19 + 4) = v20;
        *(_WORD *)(v19 + 6) = v9;
        *(_WORD *)(v19 + 8) = v9;
        *(_WORD *)(v19 + 10) = 0;
        if ((_DWORD)v16)
          v21 = PicMgr::getPicNode(a7, v12, (unsigned __int16 *)v19)[1];
        else
          v21 = 0;
        *(_WORD *)(v18 + 28 * v17 + 18) = v21;
        if (!v13)
          v13 = *(unsigned __int8 *)(*(_QWORD *)(a7 + 16) + v20);
        if (v14)
          v22 = v12 + 1 == v13;
        else
          v22 = 1;
        if (v22)
        {
          v13 = 0;
          v12 = 0;
        }
        else
        {
          ++v12;
        }
        --v14;
        --v10;
      }
      while (v10);
    }
  }
  DgnIOwnArray<PelSegment *>::releaseAll((uint64_t)&v25);
  return DgnIOwnArray<PelSegment *>::releaseAll((uint64_t)&v25);
}

void sub_209A1CE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnIOwnArray<PelSegment *>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

void BackwardLatticeNodeIterator<WordLatticeLC>::next(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = (uint64_t)(a1 + 3);
  v3 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::dequeue((uint64_t)(a1 + 3));
  v4 = *a1;
  v5 = *(unsigned int *)(*(_QWORD *)(*a1 + 80) + 24 * *(unsigned int *)(*(_QWORD *)(*a1 + 16) + 4 * v3) + 16);
  if ((_DWORD)v5 != -2)
  {
    v6 = *(_QWORD *)(v4 + 128);
    do
    {
      v7 = *(unsigned int *)(*(_QWORD *)(v4 + 80) + 24 * *(unsigned int *)(v6 + 136 * v5 + 116));
      v8 = a1[1];
      v9 = *(_DWORD *)(v8 + 4 * v7) - 1;
      *(_DWORD *)(v8 + 4 * v7) = v9;
      if (!v9)
      {
        DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue(v2, v7);
        v4 = *a1;
        v6 = *(_QWORD *)(*a1 + 128);
      }
      v5 = *(unsigned int *)(v6 + 136 * v5 + 124);
    }
    while ((_DWORD)v5 != -2);
  }
}

uint64_t WordLattice::computeBackwardScores(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;

  v4 = *(_DWORD *)(a1 + 24);
  v5 = *(_DWORD *)(a2 + 12);
  if (v4 > v5)
  {
    DgnPrimArray<unsigned int>::reallocElts(a2, v4 - v5, 0);
    *(_DWORD *)(a2 + 8) = v4;
    v6 = (unsigned int *)(a2 + 8);
    goto LABEL_4;
  }
  *(_DWORD *)(a2 + 8) = v4;
  v6 = (unsigned int *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    v7 = 0;
    v8 = *(_QWORD *)a2;
    do
      *(_DWORD *)(v8 + 4 * v7++) = 1879048192;
    while (v7 < *v6);
  }
  BackwardLatticeNodeIterator<WordLatticeLC>::BackwardLatticeNodeIterator((uint64_t)&v20, a1);
  while (v24)
  {
    v9 = *(_DWORD *)(*(_QWORD *)(v20 + 16) + 4 * *(unsigned int *)(v22 + 4 * v23));
    v10 = *(_QWORD *)(a1 + 80);
    v11 = (unsigned int *)(v10 + 24 * v9);
    v12 = *v11;
    if (v11[3])
    {
      v13 = *(unsigned int *)(v10 + 24 * v9 + 20);
      if ((_DWORD)v13 != -2)
      {
        v14 = *(_QWORD *)(a1 + 128);
        v15 = *(_QWORD *)a2;
        v16 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v12);
        do
        {
          v17 = v14 + 136 * v13;
          v18 = vaddvq_s32(*(int32x4_t *)(v17 + 28))
              + *(_DWORD *)(v17 + 44)
              + *(_DWORD *)(v17 + 48)
              + *(_DWORD *)(v17 + 52)
              + *(_DWORD *)(v15 + 4 * *(unsigned int *)(v10 + 24 * *(unsigned int *)(v17 + 120)));
          if (v16 > v18)
          {
            *(_DWORD *)(v15 + 4 * v12) = v18;
            v16 = v18;
          }
          v13 = *(unsigned int *)(v14 + 136 * v13 + 128);
        }
        while ((_DWORD)v13 != -2);
      }
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v12) = 0;
    }
    BackwardLatticeNodeIterator<WordLatticeLC>::next(&v20);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v21);
  return *(unsigned int *)(*(_QWORD *)a2
                         + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 80) + 24 * **(unsigned int **)(a1 + 32)));
}

void sub_209A1D094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordLattice::expandLMContext(WordLattice *a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  int v7;
  _DWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  int NodesToSplitForExpansion;
  int v17;
  uint64_t v18;
  _QWORD *v23;
  _DWORD *v24;
  _QWORD v26[2];

  v26[0] = 0;
  v26[1] = 0;
  if (a2 >= 2)
  {
    v7 = 0;
    v11 = (_DWORD *)(a5 + 208);
    v23 = (_QWORD *)(a5 + 216);
    v24 = (_DWORD *)(a5 + 204);
    v12 = (_QWORD *)(a5 + 224);
    v13 = (_QWORD *)(a5 + 232);
    v14 = (_QWORD *)(a5 + 240);
    v15 = 2;
    while (1)
    {
      NodesToSplitForExpansion = WordLattice::getNodesToSplitForExpansion(a1, (uint64_t)v26, v15, a3, v24, v11);
      if (a4 >= 1 && NodesToSplitForExpansion + v7 >= a4)
        break;
      v17 = WordLattice::splitNodes((uint64_t *)a1, (uint64_t)v26, v23, v12, v13, v14);
      Lattice<WordLatticeLC>::gc(a1);
      Lattice<WordLatticeLC>::topSortInternal((uint64_t)a1, 0);
      v7 += v17;
      if (++v15 > a2)
        goto LABEL_7;
    }
    *(_DWORD *)(a5 + 200) += v7;
    v18 = 1;
    *a6 = 1;
    *a7 = NodesToSplitForExpansion + v7;
  }
  else
  {
    v7 = 0;
LABEL_7:
    v18 = 0;
    *(_DWORD *)(a5 + 200) += v7;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v26);
  return v18;
}

void sub_209A1D200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordLattice::getNodesToSplitForExpansion(WordLattice *a1, uint64_t a2, int a3, unsigned int a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];

  *(_DWORD *)(a2 + 8) = 0;
  v26[0] = 0;
  v26[1] = 0;
  v25[0] = 0;
  v25[1] = 0;
  v24[0] = 0;
  v24[1] = 0;
  v23[0] = 0;
  v23[1] = 0;
  BackwardLatticeNodeIterator<WordLatticeLC>::BackwardLatticeNodeIterator((uint64_t)&v18, (uint64_t)a1);
  v12 = 0;
  while (v22)
  {
    v13 = *(_DWORD *)(*(_QWORD *)(v18 + 16) + 4 * *(unsigned int *)(v20 + 4 * v21));
    v14 = *((_QWORD *)a1 + 10);
    if (*(_DWORD *)(v14 + 24 * v13 + 8) >= 2u && *(_DWORD *)(v14 + 24 * v13 + 12))
    {
      if (a3 == 2
         ? WordLattice::needToSplitNodeForBigramExpansion(a1, *(_DWORD *)(*(_QWORD *)(v18 + 16) + 4 * *(unsigned int *)(v20 + 4 * v21)), a4): WordLattice::needToSplitNodeForExpansion((uint64_t)a1, v13, a3, a4, (uint64_t)v26, (uint64_t)v25, (uint64_t)v24, (uint64_t)v23, a5, a6))
      {
        v16 = *(unsigned int *)(a2 + 8);
        if (v16 == *(_DWORD *)(a2 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
          v16 = *(unsigned int *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v16) = v13;
        ++*(_DWORD *)(a2 + 8);
        v12 = (*(_DWORD *)(*((_QWORD *)a1 + 10) + 24 * v13 + 8) + v12);
      }
    }
    BackwardLatticeNodeIterator<WordLatticeLC>::next(&v18);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v26);
  return v12;
}

void sub_209A1D3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  va_list va2;

  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v11 - 96);
  _Unwind_Resume(a1);
}

uint64_t WordLattice::splitNodes(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  const WordLatticeLC *v11;
  const WordLatticeLC *v12;
  const WordLatticeLC *Node;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v27;

  if (!*(_DWORD *)(a2 + 8))
    return 0;
  v9 = 0;
  v10 = 0;
  v23 = a2;
  do
  {
    v11 = (const WordLatticeLC *)*(unsigned int *)(a1[10] + 24 * *(unsigned int *)(*(_QWORD *)a2 + 4 * v9) + 16);
    v24 = v9;
    v27 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v9);
    if ((_DWORD)v11 != -2)
    {
      do
      {
        v12 = (const WordLatticeLC *)*(unsigned int *)(a1[16] + 136 * v11 + 124);
        Node = (const WordLatticeLC *)Lattice<WordLatticeLC>::createNode((uint64_t)a1);
        v10 = (v10 + 1);
        v14 = a5;
        v15 = a6;
        v16 = *(_DWORD *)(a1[16] + 136 * v11 + 116);
        v17 = a1[10];
        *a3 += *(unsigned int *)(v17 + 24 * v27 + 8);
        *a4 += *(unsigned int *)(v17 + 24 * v16 + 12);
        Lattice<WordLatticeLC>::disconnectInLink((unint64_t)a1, v11);
        Lattice<WordLatticeLC>::disconnectOutLink((unint64_t)a1, v11);
        v18 = a1[16] + 136 * v11;
        *(_DWORD *)(v18 + 116) = v16;
        *(_DWORD *)(v18 + 120) = (_DWORD)Node;
        a6 = v15;
        a5 = v14;
        Lattice<WordLatticeLC>::connectInLink(a1, v11);
        Lattice<WordLatticeLC>::connectOutLink(a1, v11);
        Lattice<WordLatticeLC>::copyOutLinks((uint64_t)a1, v27, Node);
        v19 = a1[10] + 24 * Node;
        v21 = *(unsigned int *)(v19 + 8);
        v20 = *(unsigned int *)(v19 + 12);
        *v14 += v21;
        *a6 += v20;
        v11 = v12;
      }
      while ((_DWORD)v12 != -2);
    }
    Lattice<WordLatticeLC>::destroyAllLinks((unint64_t)a1, v27);
    Lattice<WordLatticeLC>::destroyNode((unint64_t)a1, v27);
    a2 = v23;
    v9 = v24 + 1;
  }
  while (v24 + 1 < (unint64_t)*(unsigned int *)(v23 + 8));
  return v10;
}

uint64_t WordLattice::needToSplitNodeForBigramExpansion(WordLattice *this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  VocMgr *v7;
  uint64_t v8;
  int v9;
  int v10;
  int Root;
  int v12;

  v3 = *((_QWORD *)this + 10);
  if (*(_DWORD *)(v3 + 24 * a2 + 8))
  {
    v4 = *(unsigned int *)(v3 + 24 * a2 + 16);
    if ((_DWORD)v4 != -2)
    {
      v7 = (VocMgr *)VocMgr::smpVocMgr;
      v8 = *((_QWORD *)this + 16);
      v9 = -83886084;
      v10 = -83886084;
      do
      {
        Root = VocMgr::getRoot(v7, *(unsigned int *)(v8 + 136 * v4 + 88));
        v8 = *((_QWORD *)this + 16);
        if (Root == -50331650)
          v12 = a3;
        else
          v12 = Root;
        if (v10 == -83886084)
        {
          v10 = v12;
          v9 = *(_DWORD *)(v8 + 136 * v4 + 108);
        }
        else if (v10 != v12 || v9 != *(_DWORD *)(v8 + 136 * v4 + 108))
        {
          return 1;
        }
        v4 = *(unsigned int *)(v8 + 136 * v4 + 124);
      }
      while ((_DWORD)v4 != -2);
    }
  }
  return 0;
}

uint64_t WordLattice::needToSplitNodeForExpansion(uint64_t a1, unsigned int a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, _DWORD *a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int HasDistinctScore;
  _BOOL4 v48;
  BOOL v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WordLattice *Root;
  BOOL v57;
  int v58;
  unsigned int v59;
  uint64_t result;
  uint64_t v62;
  unint64_t v63;
  int v64;
  _QWORD *v65;
  char v66;
  char v67;
  unsigned int v68;
  unsigned int v69;
  int v72;
  BOOL v73;
  int v74;
  unsigned int v75;
  VocMgr *v76;

  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(unsigned int *)(v16 + 24 * a2 + 20);
  v18 = *(_QWORD *)(a1 + 128);
  v19 = *(_DWORD *)(v18 + 136 * v17 + 88) >> 25;
  if ((_DWORD)v17 != -2)
  {
    while (v19 == *(_DWORD *)(v18 + 136 * v17 + 88) >> 25)
    {
      v17 = *(unsigned int *)(v18 + 136 * v17 + 128);
      if ((_DWORD)v17 == -2)
        goto LABEL_6;
    }
    v19 = *(_DWORD *)(v18 + 136 * *(unsigned int *)(v16 + 24 * a2 + 16) + 88) >> 25;
  }
LABEL_6:
  *(_DWORD *)(a5 + 8) = 0;
  if (*(_DWORD *)(a5 + 12))
  {
    v20 = 0;
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
    v20 = *(unsigned int *)(a5 + 8);
  }
  v21 = 0;
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v20) = a2;
  ++*(_DWORD *)(a5 + 8);
  *(_DWORD *)(a6 + 8) = 0;
  if (!*(_DWORD *)(a6 + 12))
  {
    DgnPrimArray<char>::reallocElts(a6, 1, 1);
    v21 = *(_DWORD *)(a6 + 8);
  }
  v63 = a5;
  *(_BYTE *)(*(_QWORD *)a6 + v21) = 0;
  v65 = (_QWORD *)a6;
  *(_DWORD *)(a6 + 8) = v21 + 1;
  v76 = (VocMgr *)VocMgr::smpVocMgr;
  v22 = a3;
  if (a3 == 2)
  {
    v74 = -83886084;
    v75 = -83886081;
    v64 = -83886084;
LABEL_48:
    v45 = *(unsigned int *)(v63 + 8);
    if ((_DWORD)v45)
    {
      v69 = v19;
      v46 = 0;
      HasDistinctScore = 0;
      v48 = v22 != 4;
      v49 = v64 != -83886084 || v22 != 4;
      if (v74 != -83886084)
        v49 = 1;
      v73 = v49;
      v50 = -83886084;
      v51 = -83886084;
      do
      {
        v52 = *(_DWORD *)(*(_QWORD *)v63 + 4 * v46);
        v53 = *(_QWORD *)(a1 + 80);
        if (*(_DWORD *)(v53 + 24 * v52 + 8))
        {
          v54 = *(unsigned int *)(v53 + 24 * v52 + 16);
          if ((_DWORD)v54 != -2)
          {
            v55 = *(_QWORD *)(a1 + 128);
            while (1)
            {
              ++*a10;
              Root = (WordLattice *)VocMgr::getRoot(v76, *(unsigned int *)(v55 + 136 * v54 + 88));
              v57 = (_DWORD)Root == -50331650 && a3 == 4;
              v58 = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 136 * v54 + 108);
              if (v57)
                v59 = a4;
              else
                v59 = Root;
              if (v51 == -83886084)
              {
                if (a3 == 4)
                  v51 = v59;
                else
                  v51 = (int)Root;
                if (v73)
                {
                  HasDistinctScore |= a3 == 4;
                }
                else
                {
                  HasDistinctScore = WordLattice::maybePred3Pred2HasDistinctScore(Root, v69, v59, v75, *(unsigned __int8 *)(*v65 + v46));
                  v51 = v59;
                }
                v50 = v58;
              }
              else if (v51 != v59 || v50 != v58)
              {
                result = 1;
                if (((v48 | HasDistinctScore) & 1) != 0 || v64 != -83886084 || v74 != -83886084)
                  return result;
                if ((WordLattice::maybePred3Pred2HasDistinctScore((WordLattice *)1, v69, v59, v75, *(unsigned __int8 *)(*v65 + v46)) & 1) != 0)return 1;
                HasDistinctScore = 0;
              }
              v55 = *(_QWORD *)(a1 + 128);
              v54 = *(unsigned int *)(v55 + 136 * v54 + 124);
              if ((_DWORD)v54 == -2)
              {
                v45 = *(unsigned int *)(v63 + 8);
                break;
              }
            }
          }
        }
        ++v46;
      }
      while (v46 < v45);
    }
  }
  else
  {
    v72 = 0;
    v66 = 0;
    v74 = -83886084;
    v75 = -83886081;
    v64 = -83886084;
    v68 = -83886081;
    v23 = a5;
    while (1)
    {
      *(_DWORD *)(a7 + 8) = 0;
      *(_DWORD *)(a8 + 8) = 0;
      v24 = *(unsigned int *)(v23 + 8);
      if ((_DWORD)v24)
        break;
      v42 = 0;
LABEL_41:
      v23 = v63;
      DgnPrimArray<int>::copyArraySlice(v63, (uint64_t *)a7, 0, v42);
      DgnPrimArray<BOOL>::copyArraySlice((unint64_t)v65, (uint64_t *)a8, 0, *(_DWORD *)(a8 + 8));
      ++v72;
      v22 = a3;
      if (v72 == a3 - 2)
      {
        if (v19 == 126 && v68 != -83886081)
        {
          v43 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v76 + 8 * (v68 >> 25)) + 72);
          v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 696))(v43);
          v22 = a3;
          if (v44)
            v19 = v68 >> 25;
          else
            v19 = 126;
        }
        goto LABEL_48;
      }
    }
    v25 = 0;
    while (1)
    {
      v26 = *(_DWORD *)(*(_QWORD *)v63 + 4 * v25);
      v27 = *(_QWORD *)(a1 + 80);
      if (!*(_DWORD *)(v27 + 24 * v26 + 8))
        break;
      v62 = v25;
      v28 = *(unsigned int *)(v27 + 24 * v26 + 16);
      if ((_DWORD)v28 != -2)
      {
        v67 = *(_BYTE *)(*v65 + v25);
        v29 = *(_QWORD *)(a1 + 128);
        while (1)
        {
          ++*a9;
          v30 = VocMgr::getRoot(v76, *(unsigned int *)(v29 + 136 * v28 + 88));
          v31 = *(_QWORD *)(a1 + 128);
          v32 = *(_DWORD *)(v31 + 136 * v28 + 108);
          v33 = v30 >> 25;
          if (v19 != 126 && v33 != v19)
            return 0;
          v34 = *(_DWORD *)(v31 + 136 * v28 + 116);
          v35 = *(unsigned int *)(a7 + 8);
          if (v35 == *(_DWORD *)(a7 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(a7, 1, 1);
            v35 = *(unsigned int *)(a7 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a7 + 4 * v35) = v34;
          ++*(_DWORD *)(a7 + 8);
          if (v72)
          {
            if (v75 == -83886081)
              v36 = v30;
            else
              v36 = v75;
            v37 = v74;
            if (v75 == -83886081)
              v37 = v32;
            v74 = v37;
            v75 = v36;
            v38 = *(_DWORD *)(a8 + 8);
            if (v38 == *(_DWORD *)(a8 + 12))
            {
              DgnPrimArray<char>::reallocElts(a8, 1, 1);
              v38 = *(_DWORD *)(a8 + 8);
            }
            v39 = v67;
          }
          else
          {
            v40 = v68;
            if (v68 == -83886081)
            {
              v41 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v76 + 8 * v33) + 72);
              v66 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 488))(v41, v30 & 0xFFFFFF);
              v40 = v30;
              v64 = v32;
            }
            v68 = v40;
            v38 = *(_DWORD *)(a8 + 8);
            if (v38 == *(_DWORD *)(a8 + 12))
            {
              DgnPrimArray<char>::reallocElts(a8, 1, 1);
              v38 = *(_DWORD *)(a8 + 8);
            }
            v39 = v66 & 1;
          }
          *(_BYTE *)(*(_QWORD *)a8 + v38) = v39;
          *(_DWORD *)(a8 + 8) = v38 + 1;
          v29 = *(_QWORD *)(a1 + 128);
          v28 = *(unsigned int *)(v29 + 136 * v28 + 124);
          if ((_DWORD)v28 == -2)
          {
            v24 = *(unsigned int *)(v63 + 8);
            break;
          }
        }
      }
      v25 = v62 + 1;
      if (v62 + 1 >= v24)
      {
        v42 = *(_DWORD *)(a7 + 8);
        goto LABEL_41;
      }
    }
  }
  return 0;
}

uint64_t WordLattice::maybePred3Pred2HasDistinctScore(WordLattice *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  if (a3 >> 27 != 31 && a2 != a3 >> 25 || a4 >> 27 != 31 && a4 >> 25 != a2)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * a2) + 72);
  v7 = a3 & 0xFFFFFF;
  v8 = a4 & 0xFFFFFF;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 488))(v6, v7);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 488))(v6, v8);
  if (a5)
  {
    if (v10)
      return v9 ^ 1u;
LABEL_9:
    if ((v9 & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 440))(v6, v7);
    return 0;
  }
  if (v10)
    goto LABEL_9;
  if ((v9 & 1) != 0)
    return 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 456))(v6, v7, v8);
}

uint64_t WordLattice::rescoreLatticeLM(WordLattice *this, SearchLMScorer *a2, LatticeStats *a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  LMStats *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 isLMAllowedForState;
  int v22;
  uint64_t v23;
  uint64_t SeededWeights;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t WeightsForState;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v57;
  SearchLMScorer *v58;
  char v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  _DWORD *v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  _QWORD v69[3];

  SearchLMScorer::beginSearchLMScorerLMRescoring((uint64_t)a2, a4);
  v6 = *((_QWORD *)a2 + 16);
  v7 = *((unsigned int *)this + 6);
  DgnArray<CWIDAC>::DgnArray(v69, v7);
  v67 = 0;
  v68 = 0;
  if ((_DWORD)v7)
  {
    v60 = 0;
    v8 = realloc_array(0, &v60, 4 * v7, 0, 0, 1);
    v67 = v60;
    LODWORD(v68) = v7;
    HIDWORD(v68) = v8 >> 2;
    v60 = 0;
    v9 = realloc_array(0, &v60, 4 * v7, 0, 0, 1);
    v10 = v60;
    v65 = v60;
    LODWORD(v66) = v7;
    HIDWORD(v66) = v9 >> 2;
    v11 = v67;
    do
    {
      *v11++ = -83886081;
      *v10++ = -83886084;
      --v7;
    }
    while (v7);
  }
  else
  {
    v65 = 0;
    v66 = 0;
  }
  v57 = v6;
  ForwardLatticeNodeIterator<WordLatticeLC>::ForwardLatticeNodeIterator((uint64_t)&v60, (uint64_t)this);
  v12 = (LatticeStats *)((char *)a3 + 256);
  while (v64)
  {
    v13 = *(_DWORD *)(*((_QWORD *)v60 + 2) + 4 * *(unsigned int *)(v62 + 4 * v63));
    v14 = *((_QWORD *)this + 10);
    if (!*(_DWORD *)(v14 + 24 * v13 + 8))
    {
      v25 = 24 * v13;
      v67[*(unsigned int *)(v14 + v25)] = -83886084;
      v26 = v69[0] + 24 * *(unsigned int *)(v14 + v25);
      *(_DWORD *)v26 = -50331650;
      *(_DWORD *)(v26 + 4) = 0x3FFF;
      *(_OWORD *)(v26 + 8) = xmmword_209A593D0;
      goto LABEL_37;
    }
    if (!*(_DWORD *)(v14 + 24 * v13 + 12))
      goto LABEL_37;
    v15 = (unsigned int *)(v14 + 24 * v13);
    v16 = *((_QWORD *)this + 16) + 136 * v15[4];
    v17 = *(_DWORD *)(v16 + 116);
    v18 = 24 * v17;
    v19 = v69[0];
    v67[*v15] = *(_DWORD *)(v69[0] + 24 * *(unsigned int *)(v14 + v18) + 16);
    v65[*v15] = *(_DWORD *)(v19 + 24 * *(unsigned int *)(v14 + v18) + 20);
    v20 = v19 + 24 * *v15;
    *(_DWORD *)v20 = *(_DWORD *)(v16 + 88);
    *(_WORD *)(v20 + 4) = *(_WORD *)(v16 + 92);
    *(_WORD *)(v20 + 6) = *(_WORD *)(v16 + 94);
    *(_OWORD *)(v20 + 8) = *(_OWORD *)(v16 + 96);
    if ((*(_DWORD *)(v57 + 68) & 0xFFFFFFFD) == 0)
    {
      isLMAllowedForState = Constraint::isLMAllowedForState(v57, (unsigned int *)v20);
      v14 = *((_QWORD *)this + 10);
      if (!isLMAllowedForState)
        goto LABEL_14;
      v19 = v69[0];
    }
    *(_DWORD *)(v20 + 16) = *(_DWORD *)(v19 + 24 * *(unsigned int *)(v14 + 24 * v17));
LABEL_14:
    v22 = *(_DWORD *)(v14 + 24 * v13 + 12);
    if (v22)
    {
      v23 = v69[0];
      if ((*(_DWORD *)(v57 + 68) & 0xFFFFFFFD) != 0)
      {
        SeededWeights = 0;
      }
      else
      {
        SeededWeights = Constraint::getSeededWeights(v57, (unsigned int *)(v69[0] + 24 * *(unsigned int *)(v14 + 24 * v13)), *(_DWORD *)(*((_QWORD *)this + 16) + 136 * *(unsigned int *)(v14 + 24 * v13 + 20) + 16));
        v14 = *((_QWORD *)this + 10);
        v22 = *(_DWORD *)(v14 + 24 * v13 + 12);
        v23 = v69[0];
      }
      v27 = *((_DWORD *)a3 + 63);
      ++*((_DWORD *)a3 + 62);
      *((_DWORD *)a3 + 63) = v27 + v22;
      v28 = *(unsigned int *)(v14 + 24 * v13);
      v29 = v67[v28];
      v30 = v65[v28];
      v58 = a2;
      v59 = 1;
      SearchLMScorer::setContext((uint64_t)a2, v29, (unsigned int *)(v23 + 24 * v28), 0, 1, SeededWeights, v12, 0, 0xFAFFFFFC, v30);
      v31 = *(unsigned int *)(*((_QWORD *)this + 10) + 24 * v13 + 20);
      if ((_DWORD)v31 != -2)
      {
        v32 = *((_QWORD *)this + 16);
        do
        {
          v33 = v32 + 136 * v31;
          v36 = *(_DWORD *)(v33 + 88);
          v34 = (unsigned int *)(v33 + 88);
          v35 = v36;
          if (v36 != -50331650)
          {
            if (v35 == -50331651)
            {
              v37 = SearchLMScorer::lmScoreFinalSilence(a2, v12);
            }
            else
            {
              v38 = v32 + 136 * v31;
              v41 = *(_DWORD *)(v38 + 108);
              v40 = (unsigned int *)(v38 + 108);
              v39 = v41;
              if (v41 != -83886084)
              {
                if ((*(_DWORD *)(v57 + 68) & 0xFFFFFFFD) != 0)
                {
                  WeightsForState = 0xFFFFLL;
                }
                else
                {
                  WeightsForState = Constraint::getWeightsForState(v57, v34);
                  v39 = *v40;
                }
                v43 = SearchLMScorer::lmScoreNonAcousticWord(a2, v39, WeightsForState, v12);
                v32 = *((_QWORD *)this + 16);
                *(_DWORD *)(v32 + 136 * v31 + 32) = v43;
                goto LABEL_31;
              }
              v37 = SearchLMScorer::lmScoreNonSilCwidac((uint64_t)a2, v34, v12);
            }
            v32 = *((_QWORD *)this + 16);
            *(_DWORD *)(v32 + 136 * v31 + 28) = v37;
          }
LABEL_31:
          v31 = *(unsigned int *)(v32 + 136 * v31 + 128);
        }
        while ((_DWORD)v31 != -2);
      }
      SearchLMContext::~SearchLMContext((SearchLMContext *)&v58);
      v44 = *(unsigned int *)(*((_QWORD *)this + 10) + 24 * v13 + 20);
      if ((_DWORD)v44 != -2)
      {
        v45 = *((_QWORD *)this + 16);
        do
        {
          v46 = v45 + 136 * v44;
          v47 = *(_DWORD *)(v46 + 108);
          if (v47 != -83886084)
          {
            v48 = *(unsigned int *)(*((_QWORD *)this + 10) + 24 * v13);
            v49 = v67[v48];
            v50 = (unsigned int *)(v69[0] + 24 * v48);
            LODWORD(v48) = v65[v48];
            v58 = a2;
            v59 = 1;
            SearchLMScorer::setContext((uint64_t)a2, v49, v50, 0, 1, SeededWeights, v12, 1, v47, v48);
            *(_DWORD *)(*((_QWORD *)this + 16) + 136 * v44 + 28) = SearchLMScorer::lmScoreNonSilCwidac((uint64_t)a2, (unsigned int *)(v46 + 88), v12);
            SearchLMContext::~SearchLMContext((SearchLMContext *)&v58);
            v45 = *((_QWORD *)this + 16);
          }
          v44 = *(unsigned int *)(v45 + 136 * v44 + 128);
        }
        while ((_DWORD)v44 != -2);
      }
    }
LABEL_37:
    ForwardLatticeNodeIterator<WordLatticeLC>::next(&v60);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v62);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v61);
  SearchLMScorer::endSearchLMScorerLMRescoring((uint64_t)a2);
  v51 = *((unsigned int *)this + 26);
  if ((int)v51 >= 1)
  {
    v52 = *((_QWORD *)this + 12);
    v53 = *((_QWORD *)this + 16);
    v54 = v51 + 1;
    do
      *(_QWORD *)(v53 + 136 * *(unsigned int *)(v52 + 4 * (v54-- - 2)) + 8) = 0xBFF0000000000000;
    while (v54 > 1);
  }
  *((_BYTE *)this + 217) = 0;
  WordLattice::resortLatticeLinks(this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v65);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v67);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)v69);
}

void sub_209A1E320(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 120);
  DgnIArray<Utterance *>::~DgnIArray(v1 - 104);
  _Unwind_Resume(a1);
}

uint64_t WordLattice::computeParseTokens(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **Bucket;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD **v27;
  StateMgr *v28;
  uint64_t StateTransition;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *StateTransitionNumParseTokens;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t StateTransitionParseTokens;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v75;
  char v76;
  uint64_t *v77;
  unsigned int v78;
  BOOL v79;
  _QWORD **v80;
  _BYTE v81[112];
  unint64_t v82;
  _DWORD v83[4];

  Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::Hash((uint64_t)v81, 0, 128);
  v4 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v4)
    return Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::~Hash((uint64_t)v81);
  v5 = 0;
  v76 = 0;
  v77 = (uint64_t *)(a1 + 224);
  do
  {
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v5);
    v7 = *(_QWORD *)(a1 + 80);
    if (!*(_DWORD *)(v7 + 24 * v6 + 12))
      goto LABEL_55;
    v8 = *(unsigned int *)(v7 + 24 * v6 + 16);
    if ((_DWORD)v8 != -2)
    {
      v10 = 0;
      v11 = 0;
      v9 = 0;
      v12 = *(_QWORD *)(a1 + 128);
      while (1)
      {
        v13 = (_DWORD *)(v12 + 136 * v8);
        if (v13[22] >> 25 == 126)
        {
          v14 = 0;
          if ((v11 & 1) == 0)
            goto LABEL_11;
        }
        else
        {
          v14 = v13[24];
          if ((v11 & 1) == 0)
          {
LABEL_11:
            if (v13[5])
              v10 = 0;
            else
              v10 = v13[6] == 0;
            v9 = v14;
          }
        }
        v8 = *(unsigned int *)(v12 + 136 * v8 + 124);
        v11 = 1;
        if ((_DWORD)v8 == -2)
          goto LABEL_16;
      }
    }
    v9 = 0;
    v10 = 0;
LABEL_16:
    v15 = *(unsigned int *)(v7 + 24 * v6 + 20);
    if ((_DWORD)v15 == -2)
      goto LABEL_55;
    v75 = v5;
    v80 = (_QWORD **)VocMgr::smpVocMgr;
    v16 = *(_QWORD *)(a1 + 128);
    v78 = v9;
    v79 = v10;
    do
    {
      v17 = v16 + 136 * v15;
      v18 = *(unsigned int *)(v17 + 88);
      if (v18 >> 25 == 126 || v10)
        goto LABEL_47;
      v19 = *(unsigned int *)(v17 + 96);
      if (!*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**v80 + ((v18 >> 22) & 0x3F8)) + 56) + 48) + 2 * v19))
        goto LABEL_47;
      v20 = *(unsigned __int16 *)(a1 + 204);
      v83[0] = v9;
      v83[1] = v19;
      Bucket = Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::findBucket((uint64_t)v81, v83);
      if (*Bucket)
      {
        *(_QWORD *)(v17 + 68) = *(uint64_t *)((char *)*Bucket + 20);
        goto LABEL_22;
      }
      v27 = (_QWORD **)VocMgr::smpVocMgr;
      if (!v9)
      {
        v46 = *(unsigned int *)(a2 + 8);
        if (!(_DWORD)v46)
          goto LABEL_46;
        v47 = 0;
        v48 = *(unsigned int **)a2;
        v49 = 16 * v46;
        while (1)
        {
          v51 = *v48++;
          v50 = v51;
          if ((_DWORD)v19)
          {
            if ((_DWORD)v50 == (_DWORD)v19)
              goto LABEL_49;
          }
          else if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v20) + 56)
                                         + 32)
                             + v50))
          {
LABEL_49:
            v62 = *a3;
            v63 = *a3 + v47;
            v64 = *(_DWORD *)(v63 + 8);
            if (!v64)
              goto LABEL_46;
            v66 = *(_DWORD *)(a1 + 232);
            v65 = *(_DWORD *)(a1 + 236);
            v67 = v66;
            if (v66 + v64 <= v65
              || (DgnPrimArray<unsigned int>::reallocElts((uint64_t)v77, v66 + v64 - v65, 1),
                  v64 = *(_DWORD *)(v63 + 8),
                  v67 = *(_DWORD *)(a1 + 232),
                  v64))
            {
              v68 = 0;
              v69 = *v77;
              v70 = *(_QWORD *)(v62 + v47) + 2;
              do
              {
                *(_DWORD *)(v69 + 4 * (v67 + v68++)) = *(_DWORD *)(v70 - 2);
                v70 += 4;
              }
              while (v64 != v68);
            }
            *(_DWORD *)(a1 + 232) = v67 + v64;
            v71 = *(_DWORD *)(*a3 + v47 + 8);
            *(_DWORD *)(v17 + 68) = v66;
            *(_DWORD *)(v17 + 72) = v71;
            v82 = __PAIR64__(v71, v66);
            Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::add((uint64_t)v81, v83, &v82);
            MrecInitModule_sdpres_sdapi();
LABEL_22:
            v76 = 1;
            goto LABEL_46;
          }
          v47 += 16;
          if (v49 == v47)
            goto LABEL_46;
        }
      }
      v28 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v20) + 56);
      StateTransition = StateMgr::getStateTransition(v28, v9, 0, v22, v23, v24, v25, v26);
      StateTransitionNumParseTokens = (uint64_t *)StateMgr::getStateTransitionNumParseTokens(v28, v9, 0, v30, v31, v32, v33, v34);
      StateTransitionParseTokens = StateMgr::getStateTransitionParseTokens(v28, v9, 0, v36, v37, v38, v39, v40);
      v42 = *(unsigned int *)(StateTransition + 8);
      if (!(_DWORD)v42)
        goto LABEL_46;
      v43 = (uint64_t *)StateTransitionParseTokens;
      v44 = 0;
      v45 = 0;
      while ((_DWORD)v19)
      {
        if (*(_DWORD *)(*(_QWORD *)StateTransition + 4 * v44) == (_DWORD)v19)
          goto LABEL_40;
LABEL_30:
        v45 += *(unsigned __int16 *)(*StateTransitionNumParseTokens + 2 * v44++);
        if (v42 == v44)
          goto LABEL_46;
      }
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**v27 + 8 * v20) + 56) + 32)
                     + *(unsigned int *)(*(_QWORD *)StateTransition + 4 * v44)))
        goto LABEL_30;
LABEL_40:
      v52 = *StateTransitionNumParseTokens;
      if (*(_WORD *)(*StateTransitionNumParseTokens + 2 * v44))
      {
        v53 = 0;
        v54 = *(_DWORD *)(a1 + 232);
        v55 = v45;
        v56 = v54;
        do
        {
          v57 = *v43;
          if (v56 == *(_DWORD *)(a1 + 236))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)v77, 1, 1);
            v56 = *(_DWORD *)(a1 + 232);
            v52 = *StateTransitionNumParseTokens;
          }
          v58 = (v55 + v53);
          v59 = *(_QWORD *)(a1 + 224) + 4 * v56;
          *(_BYTE *)v59 = *(_BYTE *)(v57 + 4 * v58);
          v60 = v57 + 4 * v58;
          *(_BYTE *)(v59 + 1) = *(_BYTE *)(v60 + 1);
          *(_WORD *)(v59 + 2) = *(_WORD *)(v60 + 2);
          *(_DWORD *)(a1 + 232) = ++v56;
          ++v53;
          v61 = *(unsigned __int16 *)(v52 + 2 * v44);
        }
        while (v53 < v61);
        *(_DWORD *)(v17 + 68) = v54;
        *(_DWORD *)(v17 + 72) = v61;
        v82 = __PAIR64__(v61, v54);
        Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::add((uint64_t)v81, v83, &v82);
        MrecInitModule_sdpres_sdapi();
        v76 = 1;
      }
LABEL_46:
      MrecInitModule_sdpres_sdapi();
      v16 = *(_QWORD *)(a1 + 128);
      v9 = v78;
      v10 = v79;
LABEL_47:
      v15 = *(unsigned int *)(v16 + 136 * v15 + 128);
    }
    while ((_DWORD)v15 != -2);
    v4 = *(unsigned int *)(a1 + 24);
    v5 = v75;
LABEL_55:
    ++v5;
  }
  while (v5 < v4);
  if ((v76 & 1) != 0)
    WordLattice::resortLatticeLinks((WordLattice *)a1);
  return Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::~Hash((uint64_t)v81);
}

void sub_209A1E83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::~Hash((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::add(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  unsigned int v6;
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  _QWORD *v15;

  v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1)
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v6);
  result = StateIdPair::computeHash(a2);
  v8 = result;
  v9 = *(_DWORD *)(a1 + 16);
  if (v9)
    v10 = (-1640531527 * result) >> -(char)v9;
  else
    v10 = 0;
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 32);
  if (!v12)
  {
    result = DgnPool::addChunk((DgnPool *)(a1 + 24));
    v12 = *(_QWORD *)(a1 + 32);
  }
  v13 = (_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v12;
  *(_DWORD *)(v12 + 8) = 0;
  *(_QWORD *)&v14 = *(_QWORD *)a2;
  *((_QWORD *)&v14 + 1) = *a3;
  *(_OWORD *)(v12 + 12) = v14;
  *(_DWORD *)(v12 + 8) = v8;
  ++*(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 20))
  {
    *(_QWORD *)v12 = *v13;
  }
  else
  {
    *(_QWORD *)v12 = 0;
    v15 = (_QWORD *)*v13;
    if (*v13)
    {
      do
      {
        v13 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
  }
  *v13 = v12;
  return result;
}

uint64_t **Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::findBucket(uint64_t a1, _DWORD *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;

  v4 = StateIdPair::computeHash(a2);
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
    v6 = (-1640531527 * v4) >> -(char)v5;
  else
    v6 = 0;
  v7 = (uint64_t **)(*(_QWORD *)(a1 + 80) + 8 * v6);
  v8 = *v7;
  if (*v7)
  {
    do
    {
      v9 = (uint64_t **)v8;
      if (*((_DWORD *)v8 + 2) == v4 && *((_DWORD *)v8 + 3) == *a2 && *((_DWORD *)v8 + 4) == a2[1])
        break;
      v8 = (uint64_t *)*v8;
      v7 = v9;
    }
    while (*v9);
  }
  return v7;
}

uint64_t HashProbeKEV<unsigned long long,DgnPrimArray<unsigned long long>,LinkSegIds>::upSize(uint64_t a1, int a2)
{
  uint64_t *v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v25 = 0;
  RoundUpToPowerOf2(a2, &v25);
  v4 = (uint64_t *)(a1 + 16);
  v23 = 0;
  v24 = 0;
  DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)&v23, (uint64_t *)(a1 + 16), 0, *(_DWORD *)(a1 + 24));
  v5 = *(_QWORD **)(a1 + 16);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *v4 = 0;
  }
  *(_QWORD *)(a1 + 24) = 0;
  v6 = v25;
  *(_DWORD *)(a1 + 4) = a2;
  *(_DWORD *)(a1 + 8) = v6;
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::initBuckets((unsigned int *)a1);
  v7 = v24;
  if ((_DWORD)v24)
  {
    v8 = 0;
    v9 = v23;
    v10 = v25;
    v11 = 32 - v25;
    do
    {
      v12 = *(_QWORD *)(v9 + 8 * v8);
      if (v12 != -1)
      {
        v13 = (HIDWORD(v12) & 0xFFFFFFF) + v12;
        if (v13 <= v12)
        {
          v14 = 0;
        }
        else
        {
          v14 = 0;
          v15 = *(_QWORD *)(v9 + 8 * v8) - (unint64_t)v13;
          v16 = (uint64_t *)(**(_QWORD **)(a1 + 32) + 8 * v12);
          do
          {
            v17 = *v16++;
            HIDWORD(v18) = v14;
            LODWORD(v18) = v14;
            HIDWORD(v18) = (v18 >> 19) + HIDWORD(v17);
            LODWORD(v18) = HIDWORD(v18);
            v14 = (v18 >> 19) + v17;
          }
          while (!__CFADD__(v15++, 1));
        }
        LODWORD(v20) = (-1640531527 * v14) >> v11;
        if (v10)
          v20 = v20;
        else
          v20 = 0;
        v21 = *v4;
        while (*(_QWORD *)(v21 + 8 * v20) != -1)
        {
          if ((_DWORD)v20 + 1 == *(_DWORD *)(a1 + 4))
            v20 = 0;
          else
            v20 = (v20 + 1);
        }
        *(_QWORD *)(v21 + 8 * v20) = v12;
      }
      ++v8;
    }
    while (v8 != v7);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v23);
}

void sub_209A1EB88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL LinkSegIds::equalKeys(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = HIDWORD(a2) & 0xFFFFFFF;
  if ((_DWORD)v3 != *(_DWORD *)(a3 + 8))
    return 0;
  if (!(_DWORD)v3)
    return 1;
  if (*(_QWORD *)(*a1 + 8 * a2) != **(_QWORD **)a3)
    return 0;
  v4 = 1;
  do
  {
    v5 = v4;
    if (v3 == v4)
      break;
    v6 = *(_QWORD *)(*a1 + 8 * (a2 + v4));
    v7 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v4++);
  }
  while (v6 == v7);
  return v5 >= v3;
}

uint64_t HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::upSize(uint64_t a1, int a2)
{
  uint64_t *v4;
  _QWORD *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v16 = 0;
  RoundUpToPowerOf2(a2, &v16);
  v4 = (uint64_t *)(a1 + 16);
  v14 = 0;
  v15 = 0;
  DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)&v14, (uint64_t *)(a1 + 16), 0, *(_DWORD *)(a1 + 24));
  v5 = *(_QWORD **)(a1 + 16);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *v4 = 0;
  }
  *(_QWORD *)(a1 + 24) = 0;
  v6 = v16;
  *(_DWORD *)(a1 + 4) = a2;
  *(_DWORD *)(a1 + 8) = v6;
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::initBuckets((unsigned int *)a1);
  v7 = v15;
  if ((_DWORD)v15)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v14 + 8 * v8);
      if (v9 != -1)
      {
        v10 = WordLattice::computeHash(*(WordLattice **)(a1 + 32), *(_QWORD *)(v14 + 8 * v8));
        if (v16)
          v11 = (-1640531527 * v10) >> -(char)v16;
        else
          v11 = 0;
        v12 = *v4;
        while (*(_QWORD *)(v12 + 8 * v11) != -1)
        {
          if ((_DWORD)v11 + 1 == *(_DWORD *)(a1 + 4))
            v11 = 0;
          else
            v11 = (v11 + 1);
        }
        *(_QWORD *)(v12 + 8 * v11) = v9;
        v7 = v15;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v14);
}

void sub_209A1ED28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordLattice::computeHash(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  if (!*(_DWORD *)(a1 + 8))
    return 0;
  v2 = 0;
  v3 = 0;
  LODWORD(v4) = 0;
  do
  {
    HIDWORD(v5) = v4;
    LODWORD(v5) = v4;
    v4 = LinkSegment::computeHash((unsigned __int16 *)(*(_QWORD *)a1 + v2)) + (v5 >> 19);
    ++v3;
    v2 += 28;
  }
  while (v3 < *(unsigned int *)(a1 + 8));
  return v4;
}

uint64_t WordLattice::equalKeys(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v5;
  uint64_t result;
  unint64_t v8;

  v3 = HIDWORD(a2);
  if (*(_DWORD *)(a3 + 8) != HIDWORD(a2))
    return 0;
  if (!HIDWORD(a2))
    return 1;
  v5 = a2;
  result = LinkSegment::operator==(*(_QWORD *)(a1 + 240) + 28 * a2, *(_QWORD *)a3);
  if ((_DWORD)result)
  {
    v8 = 0;
    do
      ++v8;
    while (v8 != v3
         && LinkSegment::operator==(*(_QWORD *)(a1 + 240) + 28 * (v8 + v5), *(_QWORD *)a3 + 28 * v8));
    return v8 >= v3;
  }
  return result;
}

uint64_t WordLattice::computeHash(WordLattice *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = HIDWORD(a2);
  if (HIDWORD(a2) + (int)a2 <= a2)
    return 0;
  LODWORD(v4) = 0;
  v5 = 28 * a2;
  do
  {
    HIDWORD(v6) = v4;
    LODWORD(v6) = v4;
    v4 = LinkSegment::computeHash((unsigned __int16 *)(*((_QWORD *)this + 30) + v5))
       + (v6 >> 19);
    v5 += 28;
    LODWORD(v2) = v2 - 1;
  }
  while ((_DWORD)v2);
  return v4;
}

uint64_t LinkSegment::computeHash(unsigned __int16 *a1)
{
  unint64_t v1;

  HIDWORD(v1) = a1[4] + (*a1 << 13);
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + *((unsigned __int8 *)a1 + 10);
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + *((unsigned __int8 *)a1 + 11);
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + a1[1];
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + a1[2];
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + a1[3];
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + *((_DWORD *)a1 + 3);
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + a1[8];
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + a1[9];
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + *((_DWORD *)a1 + 5);
  LODWORD(v1) = HIDWORD(v1);
  return (v1 >> 19) + *((_DWORD *)a1 + 6);
}

BOOL LinkSegment::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
    && *(unsigned __int16 *)(a1 + 18) == *(unsigned __int16 *)(a2 + 18)
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12))
  {
    v2 = 0;
    while (*(unsigned __int16 *)(a1 + v2) == *(unsigned __int16 *)(a2 + v2))
    {
      v2 += 2;
      if (v2 == 10)
      {
        if (*(unsigned __int8 *)(a1 + 10) != *(unsigned __int8 *)(a2 + 10))
          return 0;
        return *(unsigned __int8 *)(a1 + 11) == *(unsigned __int8 *)(a2 + 11);
      }
    }
  }
  return 0;
}

uint64_t sizeObject<LatticeLink<WordLatticeLC>>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v11[44];
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD v15[2];
  __int128 v16;

  memset(v11, 0, sizeof(v11));
  v12 = 1879048192;
  v13 = 0;
  v14 = -1;
  v15[1] = 0x3FFF;
  v16 = xmmword_209A593D0;
  v4 = sizeObject((uint64_t)v15, 2);
  v5 = sizeObject((uint64_t)&v11[8], 2);
  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v6 = 12;
  else
    v6 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v7 = v5;
    v8 = *(unsigned int *)(a1 + 8);
    if ((int)v8 >= 1)
    {
      v9 = v8 + 1;
      do
        v6 += sizeObject(*(_QWORD *)a1 + 136 * (v9-- - 2), a2) + 20;
      while (v9 > 1);
    }
    if (!a2)
      v6 += (v4 + v7 + 56) * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
  return v6;
}

unint64_t DgnArray<LinkSegment>::copyArraySlice(unint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = result;
  *(_DWORD *)(result + 8) = 0;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    v9 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_6;
  }
  else
  {
    result = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(result, a4 - v8, 0);
    v9 = *(_DWORD *)(v7 + 8);
  }
  v11 = a4;
  v10 = v9;
  do
  {
    v12 = *a2 + 28 * a3;
    v13 = *(_QWORD *)v7 + 28 * v10;
    v14 = *(_QWORD *)v12;
    *(_WORD *)(v13 + 8) = *(_WORD *)(v12 + 8);
    *(_QWORD *)v13 = v14;
    *(_BYTE *)(v13 + 10) = *(_BYTE *)(v12 + 10);
    *(_BYTE *)(v13 + 11) = *(_BYTE *)(v12 + 11);
    *(_DWORD *)(v13 + 12) = *(_DWORD *)(v12 + 12);
    *(_DWORD *)(v13 + 16) = *(_DWORD *)(v12 + 16);
    *(_QWORD *)(v13 + 20) = *(_QWORD *)(v12 + 20);
    v10 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v10;
    ++a3;
    --v11;
  }
  while (v11);
LABEL_6:
  if (v10 < a4)
  {
    v15 = a4 - (unint64_t)v10;
    v16 = 28 * v10;
    do
    {
      v17 = *(_QWORD *)v7 + v16;
      *(_QWORD *)v17 = -1;
      *(_DWORD *)(v17 + 8) = 0xFFFF;
      *(_DWORD *)(v17 + 20) = -16;
      v16 += 28;
      --v15;
    }
    while (v15);
  }
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

uint64_t DgnIOwnArray<DgnPriorityQueue<LatticePath> *>::destructAt(uint64_t result, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (a3 + a2 > a2)
  {
    v3 = (_QWORD *)result;
    v4 = a2;
    v5 = a3 + a2 - 1;
    do
    {
      result = DgnDelete<DgnPriorityQueue<LatticePath>>(*(_QWORD *)(*v3 + 8 * v5));
      *(_QWORD *)(*v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

uint64_t DgnHeap<LatticePath>::insert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4;
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 12))
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1, 1, 1);
    v5 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = 0;
  *(_DWORD *)(a1 + 8) = v5 + 1;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a2;
  return DgnHeap<LatticePath>::heapifyUp((uint64_t *)a1, v4);
}

uint64_t DgnHeap<LatticePath>::heapifyUp(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8 * a2);
  if ((int)a2 < 1)
  {
LABEL_9:
    v5 = a2;
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 8);
    v5 = a2;
    do
    {
      a2 = v5;
      v5 = ((((int)v5 + 1) >> 1) - 1);
      v2 = *a1;
      v6 = *(_QWORD *)(*a1 + 8 * v5);
      v7 = *(_DWORD *)(v6 + 8);
      if (v4 == v7)
      {
        if (*(_QWORD *)v3 >= *(_QWORD *)v6)
          goto LABEL_9;
      }
      else if (v4 >= v7)
      {
        goto LABEL_9;
      }
      *(_QWORD *)(v2 + 8 * a2) = v6;
    }
    while ((int)a2 > 2);
    v2 = *a1;
    a2 = v5;
  }
  *(_QWORD *)(v2 + 8 * v5) = v3;
  return a2;
}

void DgnPriorityQueue<LatticePath>::~DgnPriorityQueue(uint64_t a1)
{
  _QWORD *Min;

  for (; *(_DWORD *)(a1 + 64); *(_QWORD *)(a1 + 8) = Min)
  {
    Min = (_QWORD *)DgnHeap<LatticePath>::extractMin(a1 + 56);
    *Min = *(_QWORD *)(a1 + 8);
  }
  DgnIArray<Utterance *>::~DgnIArray(a1 + 56);
  DgnPool::~DgnPool((DgnPool *)a1);
}

uint64_t DgnHeap<LatticePath>::extractMin(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 8) - 1;
  v2 = **(_QWORD **)a1;
  if (v1 < 1)
  {
    *(_DWORD *)(a1 + 8) = 0;
  }
  else
  {
    **(_QWORD **)a1 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v1);
    *(_DWORD *)(a1 + 8) = v1;
    DgnHeap<LatticePath>::heapifyDown(a1, 0);
  }
  return v2;
}

uint64_t DgnHeap<LatticePath>::heapifyDown(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;

  v2 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    v3 = (2 * (_DWORD)a2) | 1u;
    if ((int)v3 >= v2)
      goto LABEL_7;
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v3);
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
    v6 = *(_DWORD *)(v4 + 8);
    v7 = *(_DWORD *)(v5 + 8);
    if (v6 != v7)
    {
      if (v6 < v7)
        goto LABEL_8;
LABEL_7:
      v3 = a2;
      goto LABEL_8;
    }
    if (*(_QWORD *)v4 >= *(_QWORD *)v5)
      goto LABEL_7;
LABEL_8:
    v8 = (2 * a2 + 2);
    if ((int)v8 >= v2)
      goto LABEL_13;
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v8);
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v3);
    v11 = *(_DWORD *)(v9 + 8);
    v12 = *(_DWORD *)(v10 + 8);
    if (v11 != v12)
    {
      if (v11 < v12)
        goto LABEL_14;
LABEL_13:
      v8 = v3;
      goto LABEL_14;
    }
    if (*(_QWORD *)v9 >= *(_QWORD *)v10)
      goto LABEL_13;
LABEL_14:
    if ((_DWORD)v8 == (_DWORD)a2)
      return a2;
    v13 = *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * a2) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v8);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = v13;
    a2 = v8;
  }
}

_QWORD *DgnIOwnArray<DgnPriorityQueue<LatticePath> *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<DgnPriorityQueue<LatticePath>>(*(_QWORD *)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t BackwardLatticeNodeIterator<WordLatticeLC>::BackwardLatticeNodeIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = 0;
    *(_QWORD *)(a1 + 8) = MemChunkAlloc(4 * v4, 0);
    *(_DWORD *)(a1 + 16) = v4;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
      v7 = *(_QWORD *)(*(_QWORD *)a1 + 80);
      v8 = *(_DWORD *)(v7 + 24 * *(unsigned int *)(v6 + 4 * v5) + 12);
      *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v5) = v8;
      if (!v8)
        DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue(v3, *(_DWORD *)(v7 + 24 * *(unsigned int *)(v6 + 4 * v5)));
      ++v5;
    }
    while (v5 < *(unsigned int *)(a1 + 16));
  }
  return a1;
}

void sub_209A1F640(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v1);
  _Unwind_Resume(a1);
}

_QWORD *DgnArray<CWIDAC>::DgnArray(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v4;
  unint64_t v5;
  _OWORD *v6;

  v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if ((_DWORD)a2)
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)a1, a2, 0);
    v4 = *((_DWORD *)a1 + 2);
  }
  else
  {
    v4 = 0;
  }
  if (v4 < v2)
  {
    v5 = v2 - (unint64_t)v4;
    v6 = (_OWORD *)(*a1 + 24 * v4 + 8);
    do
    {
      *((_DWORD *)v6 - 1) = 0x3FFF;
      *v6 = xmmword_209A593D0;
      v6 = (_OWORD *)((char *)v6 + 24);
      --v5;
    }
    while (v5);
  }
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

uint64_t Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v12;
  int v13;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C2189F0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  v8 = sizeObject((uint64_t)&v12, 2);
  v9 = sizeObject((uint64_t)&v13, 2);
  if (v7)
    v10 = 8;
  else
    v10 = 12;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v10 + v8 + v9;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  return a1;
}

void sub_209A1F7F0(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::~Hash(uint64_t a1)
{
  Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C2189F0;
  if (*(_DWORD *)(a1 + 8))
    Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  char *v5;
  char *v6;
  void (*v7)(char *);
  void (*v8)(char *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = *(char **)v5;
          v7 = *(void (**)(char *))(v1 + 96);
          if (v7)
            v7(v5 + 12);
          v8 = *(void (**)(char *))(v1 + 104);
          if (v8)
            v8(v5 + 20);
          MrecInitModule_sdpres_sdapi();
          result = MrecInitModule_sdpres_sdapi();
          *(_QWORD *)v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

__n128 HmmNet::HmmNet(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  __n128 result;

  *(_QWORD *)a1 = off_24C218E68;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a3 + 4);
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = a5;
  *(_DWORD *)(a1 + 48) = a6;
  *(_DWORD *)(a1 + 52) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0x4E204E2000000000;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 114) = 0;
  return result;
}

uint64_t HmmNet::sizeofOutPorts(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    result = 8;
  else
    result = 12;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v4 = *(unsigned int *)(a1 + 80);
    v5 = 2;
    if (!gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 3;
    result += v4 << v5;
  }
  return result;
}

uint64_t HmmNet::sizeObject(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t active;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v4 = sizeObject((uint64_t)(a1 + 4), a2);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 4;
  else
    v5 = 8;
  active = sizeObject<ActiveWord *>((uint64_t)(a1 + 14), a2);
  v7 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)a1 + 288))(a1, a2);
  if ((_DWORD)a2 == 3)
  {
    v5 = 0;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v9 = 8;
    if (!gShadowDiagnosticShowIdealizedObjectSizes)
      v9 = 12;
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v8 = 24;
    }
    else
    {
      v10 = a1[24];
      v11 = (int)v10 < 1;
      v12 = v9 + v10;
      v8 = 24;
      if (v11)
        v8 = 24;
      else
        v9 = v12;
    }
  }
  return (((_DWORD)a2 != 3) | (2 * ((_DWORD)a2 != 3))) + v4 + active + v5 + v9 + v7 + v8;
}

uint64_t HmmNet::appendCalculatedSegments()
{
  return 0;
}

uint64_t HmmNet::hasSegments()
{
  return 0;
}

uint64_t HmmNet::wasEnding()
{
  return 0;
}

uint64_t HmmNet::hasSilSeedTime(HmmNet *this)
{
  return 0;
}

uint64_t HmmNet::getSilSeedTime(HmmNet *this)
{
  return 4294967280;
}

uint64_t HmmNet::unpackEndSilence(HmmNet *this)
{
  return 0;
}

uint64_t HmmNet::unpackEnd()
{
  return 0;
}

uint64_t HmmNet::unpackNonAcoustic(HmmNet *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(HmmNet *, uint64_t))(*(_QWORD *)this + 136))(this, 1);
  v5 = 0;
  v6 = 0;
  (*(void (**)(HmmNet *, uint64_t *, uint64_t *))(*(_QWORD *)this + 240))(this, &v6, &v5);
  v2 = HmmNet::newInPort(this);
  (*(void (**)(HmmNet *, uint64_t, uint64_t))(*(_QWORD *)this + 160))(this, v2, v6);
  v3 = (_QWORD *)*((_QWORD *)this + 9);
  if (*((_DWORD *)this + 13))
    *v3 = v5;
  else
    PredStruct::addPred(*v3 + 16, v5);
  return v2;
}

uint64_t HmmNet::unpackEmbeddedFst(HmmNet *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(HmmNet *, uint64_t))(*(_QWORD *)this + 136))(this, 1);
  v5 = 0;
  v6 = 0;
  (*(void (**)(HmmNet *, uint64_t *, uint64_t *))(*(_QWORD *)this + 248))(this, &v6, &v5);
  v2 = HmmNet::newInPort(this);
  (*(void (**)(HmmNet *, uint64_t, uint64_t))(*(_QWORD *)this + 160))(this, v2, v6);
  v3 = (_QWORD *)*((_QWORD *)this + 9);
  if (*((_DWORD *)this + 13))
    *v3 = v5;
  else
    PredStruct::addPred(*v3 + 16, v5);
  return v2;
}

uint64_t HmmNet::unpackSilence(HmmNet *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  (*(void (**)(HmmNet *, uint64_t))(*(_QWORD *)this + 136))(this, 1);
  v6 = 0;
  v7 = 0;
  v8 = 16842752;
  v5 = 0;
  (*(void (**)(HmmNet *, uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)this + 208))(this, &v7, 1, &v6, &v5, 2);
  v2 = HmmNet::newInPort(this);
  (*(void (**)(HmmNet *, uint64_t, uint64_t))(*(_QWORD *)this + 160))(this, v2, v6);
  v3 = (_QWORD *)*((_QWORD *)this + 9);
  if (*((_DWORD *)this + 13))
    *v3 = v5;
  else
    PredStruct::addPred(*v3 + 16, v5);
  return v2;
}

uint64_t HmmNet::unpackNoCoart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, 2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  v10 = 0;
  v11 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 208))(a1, a2, a3, &v11, &v10, 2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v10, v6);
  v7 = HmmNet::newInPort((HmmNet *)a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, v7, v11);
  v8 = *(_QWORD *)(a1 + 72);
  if (*(_DWORD *)(a1 + 52))
    *(_QWORD *)(v8 + 8) = v10;
  else
    PredStruct::addPred(*(_QWORD *)(v8 + 8) + 16, v10);
  return v7;
}

uint64_t HmmNet::unpackInPort(HmmNet *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  (*(void (**)(HmmNet *, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 208))(a1, a2, 1, &v8, &v7, 3);
  v5 = HmmNet::newInPort(a1);
  (*(void (**)(HmmNet *, uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, v5, v8);
  (*(void (**)(HmmNet *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v7, a3);
  return v5;
}

uint64_t HmmNet::passScoresToOutPorts1(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v1 = this;
  v2 = *(unsigned int *)(this + 80);
  if ((int)v2 < 1)
  {
    v4 = 20000;
  }
  else
  {
    v3 = v2 + 1;
    v4 = 20000;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 8 * (v3 - 2));
      this = PredStruct::getBestPred((PredStruct *)(v5 + 16));
      v6 = *(__int16 *)(this + 8);
      *(_WORD *)(v5 + 8) = *(_WORD *)(this + 8);
      *(_DWORD *)v5 = *(_DWORD *)this;
      *(_DWORD *)(v5 + 4) = *(_DWORD *)(this + 4);
      if (v4 >= v6)
        v4 = v6;
      --v3;
    }
    while (v3 > 1);
  }
  *(_WORD *)(v1 + 108) = v4;
  v7 = *(_QWORD *)(v1 + 8);
  if (v4 < *(__int16 *)(v7 + 246))
    *(_WORD *)(v7 + 246) = v4;
  return this;
}

void HmmNet::~HmmNet(HmmNet *this)
{
  *(_QWORD *)this = off_24C218E68;
  if (!*((_DWORD *)this + 11))
    HmmNet::deleteInPorts((uint64_t)this);
  if (!*((_DWORD *)this + 13))
    HmmNet::deleteOutPorts(this);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 56);
}

uint64_t HmmNet::deleteInPorts(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned int *)(this + 64);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = v1 + 1;
    do
    {
      v4 = (v3 - 2);
      v5 = *(_QWORD *)(v2 + 56);
      this = *(_QWORD *)(v5 + 8 * v4);
      if (this)
      {
        this = MemChunkFree((_QWORD *)this, 0);
        v5 = *(_QWORD *)(v2 + 56);
      }
      *(_QWORD *)(v5 + 8 * v4) = 0;
      --v3;
    }
    while (v3 > 1);
  }
  return this;
}

_QWORD *HmmNet::deleteOutPorts(HmmNet *this)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;

  *((_DWORD *)this + 13) = 2;
  v2 = *((unsigned int *)this + 20);
  if ((int)v2 >= 1)
  {
    v3 = v2 + 1;
    do
      PredStruct::~PredStruct((PredStruct *)(*(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v3-- - 2)) + 16));
    while (v3 > 1);
  }
  result = (_QWORD *)**((_QWORD **)this + 9);
  if (result)
    result = (_QWORD *)MemChunkFree(result, 0);
  v5 = *((unsigned int *)this + 20);
  if ((int)v5 >= 1)
  {
    v6 = v5 + 1;
    do
      *(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v6-- - 2)) = 0;
    while (v6 > 1);
  }
  return result;
}

uint64_t HmmNet::addEpsilonNode(HmmNet *this)
{
  return 0;
}

void *HmmNet::initEndIndices(HmmNet *this)
{
  unsigned int v2;
  unsigned int v3;
  void **v4;

  v2 = *((_DWORD *)this + 10);
  if (v2 < 2)
  {
    v3 = 1;
  }
  else if (v2 - 3 >= 2)
  {
    if (v2 != 2)
    {
      v3 = 0;
      v4 = (void **)((char *)this + 88);
      return memset(*v4, 255, v3);
    }
    v3 = 2;
  }
  else
  {
    v3 = ***(_DWORD ***)(*((_QWORD *)this + 1) + 16) - 2;
  }
  v4 = (void **)((char *)this + 88);
  if (v3 && !*((_DWORD *)this + 24))
  {
    *((_QWORD *)this + 11) = MemChunkAlloc(v3, 0);
    *((_DWORD *)this + 24) = v3;
  }
  return memset(*v4, 255, v3);
}

void *HmmNet::configureOutPortsInternal(HmmNet *this, unsigned int a2)
{
  void *result;
  int v5;
  unint64_t v6;

  result = HmmNet::initEndIndices(this);
  *((_DWORD *)this + 13) = 1;
  v5 = *((_DWORD *)this + 20);
  if (a2 && !v5)
  {
    result = MemChunkAlloc(8 * a2, 0);
    *((_QWORD *)this + 9) = result;
    *((_DWORD *)this + 20) = a2;
    v5 = a2;
  }
  if (v5 >= 1)
  {
    v6 = v5 + 1;
    do
      *(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v6-- - 2)) = 0;
    while (v6 > 1);
  }
  return result;
}

uint64_t *HmmNet::configureOutPortsExternal(HmmNet *this, unsigned int a2)
{
  uint64_t *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  HmmNet::initEndIndices(this);
  *((_DWORD *)this + 13) = 0;
  if (a2 && !*((_DWORD *)this + 20))
  {
    *((_QWORD *)this + 9) = MemChunkAlloc(8 * a2, 0);
    *((_DWORD *)this + 20) = a2;
  }
  result = MemChunkAlloc(32 * a2, 0);
  if ((int)a2 >= 1)
  {
    v5 = a2 + 1;
    do
    {
      v6 = (v5 - 2);
      v7 = &result[4 * v6];
      *v7 = 0x100000001;
      *((_DWORD *)v7 + 2) = 1310740000;
      v7[2] = 0;
      *((_WORD *)v7 + 12) = 0;
      *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v6) = v7;
      --v5;
    }
    while (v5 > 1);
  }
  return result;
}

uint64_t VocGroupInfo::loadVocGroupInfo(VocGroupInfo *this, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  DgnStream *v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;

  v4 = DFile::subFileExists((uint64_t)a2, 0x69u);
  if ((_DWORD)v4)
  {
    v25 = 0;
    v7 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x69u, 0, "MRVGI!? ", (_DWORD *)&v25 + 1, &v25);
    v24 = 0;
    if (HIDWORD(v25) == 19 && (_DWORD)v25 == 8)
    {
      MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRVGI!? ", 19, 8, 24, 9, v5, v6);
      v22 = 0;
      v23 = 0;
      v20 = 0;
      v21 = 0;
      v18 = 0;
      v19 = 0;
      v16 = 0;
      v17 = 0;
      readObject<unsigned short>(v7, (uint64_t)&v22, &v24);
      readObject<DgnString>(v7, (uint64_t)&v20, &v24);
      readObject<unsigned short>(v7, (uint64_t)&v18, &v24);
      readObject<DFileChecksums>(v7, (uint64_t)&v16, &v24);
      DgnString::DgnString((DgnString *)v15);
      readObject(v7, (DgnString *)v15, &v24);
      if (v23 >= 2)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vgroupi.cpp", 106, (uint64_t)"voc/vgroupi", 1, (uint64_t)"%u %u", v10, v11, v23);
      DFileChecksums::operator=((uint64_t)this, v16 + 24 * *v22);
      DgnString::~DgnString((DgnString *)v15);
    }
    else
    {
      if (*((_DWORD *)a2 + 6))
        v9 = a2[2];
      else
        v9 = &byte_209A88803;
      MrecHeaderCheckVersions(v9, "MRVGI!? ", HIDWORD(v25), v25, 0x18u, 9u);
      MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRVGI!? ", SHIDWORD(v25), v25, 24, 9, v12, v13);
      v22 = 0;
      v23 = 0;
      v20 = 0;
      v21 = 0;
      v18 = 0;
      v19 = 0;
      v16 = 0;
      v17 = 0;
      readObject(v7, this, &v24);
    }
    readObjectChecksumAndVerify(v7, v24);
    if (v7)
    {
      (**(void (***)(DgnStream *))v7)(v7);
      MemChunkFree(v7, 0);
    }
    DgnArray<DFileChecksums>::releaseAll((uint64_t)&v16);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
    DgnArray<DgnString>::releaseAll((uint64_t)&v20);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
  }
  return v4;
}

void sub_209A204A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  DgnArray<DFileChecksums>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnArray<DgnString>::releaseAll((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  _Unwind_Resume(a1);
}

void readObject<DFileChecksums>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;

  v15 = 0;
  readObject((uint64_t)a1, &v15, a3);
  v6 = v15;
  v7 = *(_DWORD *)(a2 + 12);
  if (v15 > v7)
    DgnArray<CWIDAC>::reallocElts(a2, v15 - v7, 0);
  v8 = *(unsigned int *)(a2 + 8);
  v9 = (int)v8;
  if (v6 >= v8)
  {
    if (v6 > v8)
    {
      v11 = v6 - v8;
      v12 = 24 * v8;
      do
      {
        DFileChecksums::DFileChecksums((DFileChecksums *)(*(_QWORD *)a2 + v12));
        v12 += 24;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > v6)
  {
    v10 = 24 * (int)v8 - 24;
    do
    {
      --v9;
      DFileChecksums::~DFileChecksums((DFileChecksums *)(*(_QWORD *)a2 + v10));
      v10 -= 24;
    }
    while (v9 > v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if (v6)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      readObject(a1, (DFileChecksums *)(*(_QWORD *)a2 + v13), a3);
      ++v14;
      v13 += 24;
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
}

uint64_t VocGroupInfo::saveVocGroupInfo(VocGroupInfo *this, DFile *a2)
{
  DgnStream *v3;
  uint64_t result;
  int v5;

  v3 = OpenAndWriteMrecHeader((uint64_t)a2, 0x69u, 0, "MRVGI!? ", 24, 9);
  v5 = 0;
  writeObject((uint64_t)v3, (uint64_t)this, &v5);
  result = writeObjectChecksum((uint64_t)v3, &v5);
  if (v3)
  {
    (**(void (***)(DgnStream *))v3)(v3);
    return MemChunkFree(v3, 0);
  }
  return result;
}

_QWORD *DgnArray<DFileChecksums>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 24 * v2 - 24;
    do
    {
      DFileChecksums::~DFileChecksums((DFileChecksums *)(*(_QWORD *)a1 + v3));
      v3 -= 24;
    }
    while (v3 != -24);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t MrecInitLibrary_voc(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_rulemgr_voc();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_trgrm_voc();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_voc_voc();
  MrecInitModule_sdpres_sdapi();
  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughVoc(void)
{
  MrecInitLibrarySet_throughLm();
  return MrecInitLibrary_voc();
}

void NodeNet::~NodeNet(NodeNet *this)
{
  *(_QWORD *)this = &off_24C219238;
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)this + 176);
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)this + 160);
  AcousticNet::~AcousticNet(this);
}

{
  NodeNet::~NodeNet(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t NodeNet::sizeObject(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = HmmNet::sizeObject(a1, a2);
  v5 = sizeObject<LMContextData *>((uint64_t)(a1 + 40), a2) + v4;
  return v5 + sizeObject<LMContextData *>((uint64_t)(a1 + 44), a2);
}

uint64_t NodeNet::getBestScore(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 168);
  if ((int)v2 < 1)
    return 20000;
  v3 = v2 + 1;
  v4 = 20000;
  do
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * (v3 - 2));
    v6 = *(__int16 *)(v5 + 18);
    if ((int)v4 > (int)v6)
    {
      *a2 = v5 + 8;
      v4 = v6;
    }
    --v3;
  }
  while (v3 > 1);
  return v4;
}

uint64_t NodeNet::addNodesIndirect(NodeNet *this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *((unsigned int *)this + 42);
  if (a2 >= 1)
  {
    v4 = 0;
    v5 = (char *)this + 160;
    v6 = a2 + 1;
    do
    {
      v7 = (*(uint64_t (**)(NodeNet *, _QWORD))(*(_QWORD *)this + 336))(this, 0);
      v8 = *((_DWORD *)this + 42);
      if (v8 == *((_DWORD *)this + 43))
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v5, 1, 1);
        v8 = *((_DWORD *)this + 42);
      }
      *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v8) = v7;
      *((_DWORD *)this + 42) = v8 + 1;
      if (v4)
      {
        if (v7)
          v9 = v7 + 8;
        else
          v9 = 0;
        (*(void (**)(NodeNet *, uint64_t, uint64_t))(*(_QWORD *)this + 120))(this, v9, v4);
      }
      if (v7)
        v4 = v7 + 8;
      else
        v4 = 0;
      --v6;
    }
    while (v6 > 1);
  }
  return v2;
}

uint64_t NodeNet::preallocEndSequences(uint64_t this, unsigned int a2, int a3)
{
  _DWORD *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (_DWORD *)this;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 16) + 16) + a2) * a3;
  v5 = *(_DWORD *)(this + 172);
  v6 = v4 + *(_DWORD *)(this + 168);
  if (v6 > v5)
    this = DgnPrimArray<unsigned long long>::reallocElts(this + 160, v6 - v5, 0);
  if (v3[12])
    v7 = v4;
  else
    v7 = 0;
  v8 = v3[47];
  v9 = v3[46] + v7 + 1;
  if (v9 > v8)
    return DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(v3 + 44), v9 - v8, 0);
  return this;
}

uint64_t NodeNet::fillEpsilonNode(NodeNet *this, NodeNetNode *a2, NodeNetNode *a3)
{
  return NodeNetNode::fillAsEpsilon(a2, a3);
}

uint64_t NodeNet::unpackEpsilonNodes(NodeNet *this, unsigned int a2, int a3)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v5 = a3 - 1;
  if (a3 >= 1)
  {
    v6 = a3 + 1;
    do
    {
      (*(void (**)(NodeNet *))(*(_QWORD *)this + 128))(this);
      --v6;
    }
    while (v6 > 1);
  }
  v7 = *((_DWORD *)this + 46);
  v8 = v7 - 1;
  v9 = *(_QWORD *)(*((_QWORD *)this + 22) + 8 * (v7 - 1));
  v10 = v9 + 8;
  v11 = v9 == 0;
  v12 = *(_QWORD *)(*((_QWORD *)this + 20) + 8 * a2);
  if (v11)
    v13 = 0;
  else
    v13 = v10;
  if (v12)
    v14 = v12 + 8;
  else
    v14 = 0;
  (*(void (**)(NodeNet *, uint64_t, uint64_t))(*(_QWORD *)this + 120))(this, v13, v14);
  v15 = *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v8);
  *(_QWORD *)(v15 + 8) = 0x100000001;
  *(_DWORD *)(v15 + 16) = 1310740000;
  *(_QWORD *)(v15 + 20) = 0;
  *(_WORD *)(v15 + 28) = 0;
  v16 = v7 - 2;
  v17 = *(_QWORD *)(*((_QWORD *)this + 22) + 8 * (v7 - 2));
  *(_WORD *)(v15 + 30) = -1;
  (*(void (**)(NodeNet *, uint64_t, _QWORD))(*(_QWORD *)this + 328))(this, v17, *(_QWORD *)(*((_QWORD *)this + 20) + 8 * a2));
  v18 = *(_QWORD *)(*((_QWORD *)this + 22) + 8 * (v7 - 2));
  v19 = v18 + 8;
  v11 = v18 == 0;
  v20 = a2 - 1;
  v21 = *(_QWORD *)(*((_QWORD *)this + 20) + 8 * (a2 - 1));
  if (v11)
    v22 = 0;
  else
    v22 = v19;
  if (v21)
    v23 = v21 + 8;
  else
    v23 = 0;
  (*(void (**)(NodeNet *, uint64_t, uint64_t))(*(_QWORD *)this + 120))(this, v22, v23);
  v24 = *((_QWORD *)this + 22);
  v25 = *(_QWORD *)(v24 + 8 * v8);
  v26 = *(_QWORD *)(v24 + 8 * v16);
  if (v25)
    v27 = v25 + 8;
  else
    v27 = 0;
  if (v26)
    v28 = v26 + 8;
  else
    v28 = 0;
  result = (*(uint64_t (**)(NodeNet *, uint64_t, uint64_t))(*(_QWORD *)this + 120))(this, v27, v28);
  if (v5 >= 2)
  {
    v30 = 0;
    v31 = *((_DWORD *)this + 12);
    v32 = a2 - 2;
    v33 = a2;
    v34 = v7 - 3;
    v35 = 1 - v5;
    do
    {
      v36 = *(_QWORD *)(*((_QWORD *)this + 22) + 8 * (v34 + v30));
      (*(void (**)(NodeNet *, uint64_t, _QWORD))(*(_QWORD *)this + 328))(this, v36, *(_QWORD *)(*((_QWORD *)this + 20) + 8 * (v20 + v30)));
      v37 = *(_QWORD *)(*((_QWORD *)this + 20) + 8 * (v33 + v30));
      if (v37)
        v38 = v37 + 8;
      else
        v38 = 0;
      if (v36)
        v39 = v36 + 8;
      else
        v39 = 0;
      (*(void (**)(NodeNet *, uint64_t, uint64_t))(*(_QWORD *)this + 120))(this, v38, v39);
      v40 = *(_QWORD *)(*((_QWORD *)this + 20) + 8 * (v32 + v30));
      if (v40)
        v41 = v40 + 8;
      else
        v41 = 0;
      result = (*(uint64_t (**)(NodeNet *, uint64_t, uint64_t))(*(_QWORD *)this + 120))(this, v39, v41);
      if (v31 == 2)
      {
        v42 = *(_QWORD *)(*((_QWORD *)this + 22) + 8 * (v16 + v30));
        if (v42)
          v43 = v42 + 8;
        else
          v43 = 0;
        result = (*(uint64_t (**)(NodeNet *, uint64_t, uint64_t))(*(_QWORD *)this + 120))(this, v43, v39);
      }
      --v30;
    }
    while (v35 != v30);
  }
  return result;
}

uint64_t NodeNet::fillTraceNodes(uint64_t result, int a2, int a3, uint64_t a4, int a5, __int16 a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;

  if (a5 >= 1)
  {
    v7 = result;
    v8 = 0;
    v9 = *(_QWORD *)(result + 8);
    v10 = *(_DWORD *)(v9 + 4);
    v11 = a3 - 1;
    if (v10 == 1)
      v11 = 0;
    v21 = *(_QWORD *)(v9 + 16);
    v12 = a5;
    do
    {
      v13 = a4 + 12 * v8;
      v14 = *(unsigned __int16 *)(v13 + 4);
      v15 = *(_QWORD *)(v21 + 16);
      v16 = *(unsigned __int8 *)(v15 + v14);
      if (*(_BYTE *)(v15 + v14))
      {
        v17 = 0;
        v18 = -v11;
        do
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v7 + 160) + 8 * (a2 + v18));
          result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, (unsigned __int16)(a6 + 4 * v8), v13, (__int16)v17++);
          v18 -= v10;
        }
        while (v16 > (__int16)v17);
        v11 = -v18;
      }
      ++v8;
    }
    while (v8 != v12);
  }
  return result;
}

uint64_t NodeNet::unpackSequence(NodeNet *this, uint64_t a2, int a3, _QWORD *a4, _QWORD *a5, __int16 a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned __int16 *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t result;
  char *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v42;

  v9 = *((_QWORD *)this + 1);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = a3;
  if (a3 < 1)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    v13 = (unsigned __int16 *)(a2 + 4);
    v14 = a3;
    do
    {
      v15 = *v13;
      v13 += 6;
      v12 += *(unsigned __int8 *)(*(_QWORD *)(v10 + 16) + v15);
      --v14;
    }
    while (v14);
  }
  v16 = *(_DWORD *)(v9 + 4);
  NodeNet::addNodesIndirect(this, v12);
  v17 = *((_DWORD *)this + 42);
  v18 = *((_QWORD *)this + 1);
  v19 = (unsigned int *)(v18 + 302832);
  v20 = *(_DWORD *)(v18 + 302836);
  if (v12 <= v20)
  {
    *v19 = v12;
    if (!v12)
    {
      v22 = -1;
      goto LABEL_16;
    }
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts(v18 + 302824, v12 - v20, 0);
    *v19 = v12;
  }
  v21 = 0;
  v22 = v12 - 1;
  if (v16 == 1)
    v23 = 0;
  else
    v23 = v12 - 1;
  v24 = ~v23 + v17;
  do
  {
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 302824) + 8 * v21++) = *(_QWORD *)(*((_QWORD *)this + 20)
                                                                                       + 8 * v24)
                                                                           + 20;
    v24 -= v16;
  }
  while (v12 != v21);
LABEL_16:
  v25 = v17 - 1;
  v26 = *((_QWORD *)this + 1);
  v27 = *(uint64_t **)(v26 + 302824);
  v42 = 0;
  if (a3 < 1)
  {
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v28 = (unsigned __int16 *)a2;
    do
    {
      PicMgr::getNodeDataPtrs((unsigned __int16 *)v10, v27, *(_QWORD **)(*((_QWORD *)this + 1) + 32), v28, (_DWORD *)&v42 + 1, &v42);
      v27 += *(unsigned __int8 *)(*(_QWORD *)(v10 + 16) + v28[2]);
      v28 += 6;
      --v11;
    }
    while (v11);
    v29 = v42;
    v30 = HIDWORD(v42);
    v26 = *((_QWORD *)this + 1);
  }
  v31 = v26 + 302668;
  *(_DWORD *)v31 += v30;
  *(_QWORD *)(v31 + 4) += v29;
  result = (*(uint64_t (**)(NodeNet *))(*(_QWORD *)this + 40))(this);
  if ((result & 1) != 0)
    result = NodeNet::fillTraceNodes((uint64_t)this, v25, v12, a2, a3, a6);
  if (v12 >= 2 && *((_DWORD *)this + 12))
  {
    result = NodeNet::unpackEpsilonNodes(this, v25, v12);
    v33 = (char *)this + 176;
    v34 = *((_DWORD *)this + 46) - 1;
  }
  else
  {
    v33 = (char *)this + 160;
    v34 = v25;
  }
  v35 = *(_QWORD *)(*(_QWORD *)v33 + 8 * v34);
  if (v35)
    v36 = v35 + 8;
  else
    v36 = 0;
  *a4 = v36;
  v37 = *(_QWORD *)(*((_QWORD *)this + 20) + 8 * (v25 - v22));
  if (v37)
    v38 = v37 + 8;
  else
    v38 = 0;
  *a5 = v38;
  return result;
}

uint64_t NodeNet::unpackEndSilence(uint64_t **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  NodeNet::addNodesIndirect((NodeNet *)this, 1);
  v2 = this[20][*((_DWORD *)this + 42) - 1];
  *(_QWORD *)(v2 + 20) = 0;
  *(_DWORD *)(v2 + 28) = 0;
  if (((unsigned int (*)(uint64_t **))(*this)[5])(this))
    NodeNet::fillTraceNodes((uint64_t)this, *((_DWORD *)this + 42) - 1, 1, (uint64_t)(this[1] + 37848), 1, 0);
  v3 = (*((_DWORD *)this + 42) - 1);
  v4 = this[20][v3];
  if (v4)
    v5 = v4 + 8;
  else
    v5 = 0;
  v6 = this[9];
  if (*((_DWORD *)this + 13))
  {
    *v6 = v5;
  }
  else
  {
    PredStruct::addPred(*v6 + 16, v5);
    v3 = (*((_DWORD *)this + 42) - 1);
  }
  v7 = this[20];
  v8 = v7[v3];
  if (v8)
    v9 = (uint64_t *)(v8 + 8);
  else
    v9 = 0;
  this[18] = v9;
  v10 = v7[v3];
  if (v10)
    return v10 + 8;
  else
    return 0;
}

uint64_t NodeNet::unpackOne(uint64_t a1, unsigned __int16 *a2, _QWORD *a3, _QWORD *a4, __int16 a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_DWORD *)(v9 + 4);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 16) + a2[2]);
  NodeNet::addNodesIndirect((NodeNet *)a1, v12);
  v13 = *(_DWORD *)(a1 + 168);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = (_DWORD *)(v14 + 302832);
  v16 = *(_DWORD *)(v14 + 302836);
  if (v12 > v16)
    DgnPrimArray<unsigned long long>::reallocElts(v14 + 302824, v12 - v16, 0);
  *v15 = v12;
  if ((_DWORD)v12)
  {
    v17 = 0;
    if (v11 == 1)
      v18 = 0;
    else
      v18 = v12 - 1;
    v19 = ~v18 + v13;
    do
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 302824) + v17) = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v19)
                                                                     + 20;
      v17 += 8;
      v19 -= v11;
    }
    while (8 * v12 != v17);
  }
  v30 = 0;
  PicMgr::getNodeDataPtrs((unsigned __int16 *)v10, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 302824), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 32), a2, (_DWORD *)&v30 + 1, &v30);
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD *)(a1 + 8) + 302668;
  *(_DWORD *)v21 += HIDWORD(v30);
  *(_QWORD *)(v21 + 4) += v30;
  result = (*(uint64_t (**)(uint64_t))(v20 + 40))(a1);
  if ((result & 1) != 0)
    result = NodeNet::fillTraceNodes(a1, v13 - 1, v12, (uint64_t)a2, 1, a5);
  if (v12 >= 2 && *(_DWORD *)(a1 + 48))
  {
    result = NodeNet::unpackEpsilonNodes((NodeNet *)a1, v13 - 1, v12);
    v23 = (_QWORD *)(a1 + 176);
    v24 = *(_DWORD *)(a1 + 184) - 1;
  }
  else
  {
    v23 = (_QWORD *)(a1 + 160);
    v24 = v13 - 1;
  }
  v25 = *(_QWORD *)(*v23 + 8 * v24);
  if (v25)
    v26 = v25 + 8;
  else
    v26 = 0;
  *a3 = v26;
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * (v13 - v12));
  if (v27)
    v28 = v27 + 8;
  else
    v28 = 0;
  *a4 = v28;
  return result;
}

uint64_t NodeNet::unpackOneFromPicNodes(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _QWORD *a5, _QWORD *a6, __int16 a7)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t result;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(_DWORD *)(v12 + 4);
  NodeNet::addNodesIndirect((NodeNet *)a1, a3);
  v15 = *(_DWORD *)(a1 + 168);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = (unsigned int *)(v16 + 302832);
  v18 = *(_DWORD *)(v16 + 302836);
  if (a3 <= v18)
  {
    *v17 = a3;
    if (!a3)
    {
      v20 = -1;
      goto LABEL_11;
    }
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts(v16 + 302824, a3 - v18, 0);
    *v17 = a3;
  }
  v19 = 0;
  v20 = a3 - 1;
  if (v14 == 1)
    v21 = 0;
  else
    v21 = a3 - 1;
  v22 = ~v21 + v15;
  do
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 302824) + 8 * v19++) = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v22)
                                                                         + 20;
    v22 -= v14;
  }
  while (a3 != v19);
LABEL_11:
  PicMgr::getNodeDataPtrsFromPicNodes(v13, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 302824), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 32), a2, a3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((result & 1) != 0)
    result = NodeNet::fillTraceNodes(a1, v15 - 1, a3, a4, 1, a7);
  if (a3 >= 2 && *(_DWORD *)(a1 + 48))
  {
    result = NodeNet::unpackEpsilonNodes((NodeNet *)a1, v15 - 1, a3);
    v24 = (_QWORD *)(a1 + 176);
    v25 = *(_DWORD *)(a1 + 184) - 1;
  }
  else
  {
    v24 = (_QWORD *)(a1 + 160);
    v25 = v15 - 1;
  }
  v26 = *(_QWORD *)(*v24 + 8 * v25);
  if (v26)
    v27 = v26 + 8;
  else
    v27 = 0;
  *a5 = v27;
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * (v15 - 1 - v20));
  if (v28)
    v29 = v28 + 8;
  else
    v29 = 0;
  *a6 = v29;
  return result;
}

uint64_t NodeNet::addArc(NodeNet *this, const Node *a2, Node *a3)
{
  char *v3;

  v3 = (char *)a3 - 8;
  if (!a3)
    v3 = 0;
  if (!a2)
    a2 = 0;
  return PredStruct::addPred((uint64_t)(v3 + 32), (uint64_t)a2);
}

uint64_t NodeNet::addEpsilonNode(NodeNet *this)
{
  uint64_t v2;
  unsigned int v3;

  v2 = (*(uint64_t (**)(NodeNet *, uint64_t))(*(_QWORD *)this + 336))(this, 1);
  v3 = *((_DWORD *)this + 46);
  if (v3 == *((_DWORD *)this + 47))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 176, 1, 1);
    v3 = *((_DWORD *)this + 46);
  }
  *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v3) = v2;
  *((_DWORD *)this + 46) = v3 + 1;
  if (v2)
    return v2 + 8;
  else
    return 0;
}

uint64_t NodeNet::attachInPort(NodeNet *this, unsigned int a2, Node *a3)
{
  char *v3;

  v3 = (char *)a3 - 8;
  if (!a3)
    v3 = 0;
  return PredStruct::addPred((uint64_t)(v3 + 32), *(_QWORD *)(*((_QWORD *)this + 7) + 8 * a2));
}

uint64_t TraceNodeNet::attachInPort(TraceNodeNet *this, unsigned int a2, Node *a3)
{
  char *v3;

  v3 = (char *)a3 - 8;
  *((_BYTE *)a3 + 74) = 1;
  if (!a3)
    v3 = 0;
  return PredStruct::addPred((uint64_t)(v3 + 32), *(_QWORD *)(*((_QWORD *)this + 7) + 8 * a2));
}

uint64_t NodeNet::seedEpsilonNodes(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t i;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  v1 = *(unsigned int *)(this + 184);
  if ((int)v1 >= 1)
  {
    v2 = this;
    for (i = v1 + 1; i > 1; --i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v2 + 176) + 8 * (i - 2));
      this = PredStruct::getBestPred((PredStruct *)(v4 + 32));
      v5 = *(__int16 *)(this + 8);
      if (v5 == 20000)
      {
        v6 = v4 + 8;
      }
      else
      {
        if (*(__int16 *)(v4 + 30) != -1 && *(_BYTE *)(v4 + 42))
        {
          v7 = *(__int16 *)(v4 + 24);
          if (v7 < 0)
            v8 = *(char *)(v4 + 29) + v7;
          else
            v8 = *(char *)(v4 + 29);
          v5 += v8 + *(_DWORD *)(v2 + 116);
        }
        v6 = v4 + 8;
        if (v5 != 20000)
        {
          *(_DWORD *)(v4 + 8) = *(_DWORD *)this;
          v9 = v5 + (*(_DWORD *)(v4 + 20) >> 8);
          *(_DWORD *)(v4 + 12) = *(_DWORD *)(this + 4) + *(__int16 *)(v4 + 26);
          goto LABEL_14;
        }
      }
      LOWORD(v9) = 20000;
      *(_WORD *)(v4 + 18) = 20000;
LABEL_14:
      *(_WORD *)(v6 + 8) = v9;
    }
  }
  return this;
}

uint64_t NodeNet::scoreNode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, _BYTE *a8, HmmNet *a9, _DWORD *a10, HmmNet *a11)
{
  return Node::scoreNodeOneBest(a2 + 8, a3, *(unsigned __int16 *)(a3 + 8) != 20000, a4, a5, a6, a8, *(PelScoreCache ***)(a1 + 8), a9, a10, a11);
}

uint64_t NodeNet::scoreNetInternal(NodeNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t BestPred;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NodeNet *v25;
  int v26;
  uint64_t v28;
  char v29;
  int v30;

  v12 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = 0;
  v30 = 0;
  v13 = *((unsigned int *)this + 42);
  if (v12)
  {
    if ((_DWORD)v13)
    {
      v14 = 0;
      do
      {
        *((_DWORD *)this + 26) += Node::thresholdNode((Node *)(*(_QWORD *)(*((_QWORD *)this + 20) + v14) + 8), a3);
        v14 += 8;
      }
      while (8 * v13 != v14);
    }
  }
  else if ((_DWORD)v13)
  {
    v15 = (uint64_t *)*((_QWORD *)this + 20);
    v16 = *((unsigned int *)this + 42);
    do
    {
      v17 = *v15++;
      *(_DWORD *)(v17 + 16) = 1310740000;
      --v16;
    }
    while (v16);
  }
  if (*((_DWORD *)this + 10) == 1)
  {
    v18 = 0;
    v19 = 20000;
  }
  else
  {
    (*(void (**)(NodeNet *, uint64_t))(*(_QWORD *)this + 344))(this, a2);
    v20 = **((_QWORD **)this + 20);
    BestPred = PredStruct::getBestPred((PredStruct *)(v20 + 32));
    *((_BYTE *)this + 113) = 0;
    LODWORD(v28) = 0;
    HIDWORD(v28) = a6;
    v19 = (*(uint64_t (**)(NodeNet *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, int *, NodeNet *))(*(_QWORD *)this + 352))(this, v20, BestPred, a3, a4, a5, a2, (char *)this + 113, v28, &v30, this);
    v18 = 1;
  }
  if (v18 < v13)
  {
    v22 = v18;
    do
    {
      v23 = *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v22);
      v24 = PredStruct::getBestPred((PredStruct *)(v23 + 32));
      v29 = 0;
      if (*((_DWORD *)this + 10) == 1)
        v25 = this;
      else
        v25 = 0;
      v26 = (*(uint64_t (**)(NodeNet *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, _QWORD, int *, NodeNet *))(*(_QWORD *)this + 352))(this, v23, v24, a3, a4, a5, a2, &v29, *((unsigned int *)this + 29), &v30, v25);
      if (v26 < v19)
        v19 = v26;
      ++v22;
    }
    while ((_DWORD)v13 != (_DWORD)v22);
  }
  *((_WORD *)this + 55) = v19;
  return HmmNet::passScoresToOutPorts1((uint64_t)this);
}

uint64_t NodeNet::thresholdNetInternal(uint64_t this, uint64_t a2, int a3)
{
  uint64_t v4;
  int v5;

  v4 = this;
  *(_DWORD *)(this + 152) = *(__int16 *)(**(_QWORD **)(this + 160) + 18) <= a3;
  if (*(_DWORD *)(this + 40) != 1)
    this = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 320))(this, *(unsigned __int8 *)(this + 113), a2);
  if (*(__int16 *)(v4 + 110) <= a3)
  {
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_WORD *)(v4 + 110) = 20000;
  }
  *(_DWORD *)(v4 + 104) = v5;
  return this;
}

uint64_t NodeNet::calcNumActiveNodes(NodeNet *this, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((unsigned int *)this + 42);
  if (!(_DWORD)v2)
    return 0;
  v5 = 0;
  LODWORD(v6) = 0;
  v7 = 8 * v2;
  do
  {
    v6 = Node::thresholdNode((Node *)(*(_QWORD *)(*((_QWORD *)this + 20) + v5) + 8), a2)
       + v6;
    v5 += 8;
  }
  while (v7 != v5);
  return v6;
}

void TraceNodeNet::thresholdNetInternal(TraceNodeNet *this, uint64_t a2, int a3)
{
  signed int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2;
  NodeNet::thresholdNetInternal((uint64_t)this, a2, a3);
  v6 = *((unsigned int *)this + 42);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 8 * v6;
    do
    {
      TraceNode::maybeSeedNode(*(_QWORD *)(*((_QWORD *)this + 20) + v7), a3, v4);
      v7 += 8;
    }
    while (v8 != v7);
  }
  TraceNodeNet::passScoresToOutPorts2(this, a3, v4);
}

void TraceNodeNet::passScoresToOutPorts2(TraceNodeNet *this, int a2, signed int a3)
{
  uint64_t v3;
  unint64_t v7;

  v3 = *((unsigned int *)this + 20);
  if ((int)v3 >= 1)
  {
    v7 = v3 + 1;
    do
      TraceExternalOutPort::seedOutPortForTraceBack2(*(TraceExternalOutPort **)(*((_QWORD *)this + 9) + 8 * (v7-- - 2)), a2, a3, *((NetMgr **)this + 1));
    while (v7 > 1);
  }
}

unint64_t TraceNodeNet::seedEpsilonNodes(unint64_t this, signed int a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(unsigned int *)(this + 184);
  if ((int)v2 >= 1)
  {
    v4 = this;
    for (i = v2 + 1; i > 1; --i)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v4 + 176) + 8 * (i - 2));
      this = PredStruct::getBestPred((PredStruct *)(v6 + 32));
      v7 = *(__int16 *)(this + 8);
      if (v7 == 20000)
      {
        v8 = v6 + 8;
      }
      else
      {
        v9 = (_DWORD *)this;
        this = SeederStruct::updateSeederList(v6 + 64, a2, this);
        if (*(__int16 *)(v6 + 30) != -1 && *(_BYTE *)(v6 + 42))
        {
          v10 = *(__int16 *)(v6 + 24);
          if (v10 < 0)
            v11 = *(char *)(v6 + 29) + v10;
          else
            v11 = *(char *)(v6 + 29);
          v7 += v11 + *(_DWORD *)(v4 + 116);
        }
        v8 = v6 + 8;
        if (v7 != 20000)
        {
          *(_DWORD *)(v6 + 8) = *v9;
          v12 = v7 + (*(_DWORD *)(v6 + 20) >> 8);
          *(_DWORD *)(v6 + 12) = v9[1] + *(__int16 *)(v6 + 26);
          goto LABEL_14;
        }
      }
      LOWORD(v12) = 20000;
      *(_WORD *)(v6 + 18) = 20000;
LABEL_14:
      *(_WORD *)(v8 + 8) = v12;
    }
  }
  return this;
}

uint64_t TraceNodeNet::scoreNode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, _BYTE *a8, int a9, int a10, _DWORD *a11, HmmNet *a12)
{
  return TraceNode::scoreNode(a2, a3, a4, a5, a6, a7, a8, *(PelScoreCache ***)(a1 + 8), a9, a10, a11, a12);
}

void NodeNet::newNode(NodeNet *this, char a2)
{
  uint64_t *v3;

  v3 = MemChunkAlloc(0x30uLL, 0);
  NodeNetNode::NodeNetNode((NodeNetNode *)v3, a2);
}

uint64_t NodeNet::estimateActivePelsThisFrame(NodeNet *this, BitArray *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result = AcousticNet::estimateActivePelsThisFrame((uint64_t)this, a2);
  v5 = *((unsigned int *)this + 46);
  if ((int)v5 >= 1)
  {
    v6 = *((_QWORD *)this + 22);
    v7 = *(_QWORD *)a2;
    v8 = v5 + 1;
    do
    {
      v9 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 8 * (v8 - 2)) + 30);
      *(_DWORD *)(v7 + ((v9 >> 3) & 0x1FFC)) |= 1 << v9;
      --v8;
    }
    while (v8 > 1);
  }
  v10 = *((unsigned int *)this + 42);
  if ((int)v10 >= 1)
  {
    v11 = *((_QWORD *)this + 20);
    v12 = *(_QWORD *)a2;
    v13 = v10 + 1;
    do
    {
      v14 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 8 * (v13 - 2)) + 30);
      *(_DWORD *)(v12 + ((v14 >> 3) & 0x1FFC)) |= 1 << v14;
      --v13;
    }
    while (v13 > 1);
  }
  return result;
}

void TraceNodeNet::~TraceNodeNet(TraceNodeNet *this)
{
  *(_QWORD *)this = &off_24C2141B0;
  TraceNodeNet::deleteOutPorts(this);
  NodeNet::~NodeNet(this);
}

{
  TraceNodeNet::~TraceNodeNet(this);
  JUMPOUT(0x20BD149A8);
}

_QWORD *TraceNodeNet::deleteOutPorts(TraceNodeNet *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  unint64_t v7;

  *((_DWORD *)this + 13) = 2;
  v2 = *((unsigned int *)this + 20);
  if ((int)v2 >= 1)
  {
    v3 = v2 + 1;
    do
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v3 - 2));
      BitArray::~BitArray((BitArray *)(v4 + 48));
      DgnIArray<Utterance *>::~DgnIArray(v4 + 32);
      PredStruct::~PredStruct((PredStruct *)(v4 + 16));
      --v3;
    }
    while (v3 > 1);
  }
  result = (_QWORD *)**((_QWORD **)this + 9);
  if (result)
    result = (_QWORD *)MemChunkFree(result, 0);
  v6 = *((unsigned int *)this + 20);
  if ((int)v6 >= 1)
  {
    v7 = v6 + 1;
    do
      *(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v7-- - 2)) = 0;
    while (v7 > 1);
  }
  return result;
}

void TraceNodeNet::newNode(TraceNodeNet *this, char a2)
{
  uint64_t *v3;

  v3 = MemChunkAlloc(0x60uLL, 0);
  TraceNode::TraceNode((TraceNode *)v3, a2);
}

void TraceNodeNet::configureOutPorts(TraceNodeNet *this, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  HmmNet::initEndIndices(this);
  if (a2 && !*((_DWORD *)this + 20))
  {
    *((_QWORD *)this + 9) = MemChunkAlloc(8 * a2, 0);
    *((_DWORD *)this + 20) = a2;
  }
  *((_DWORD *)this + 13) = 0;
  v4 = MemChunkAlloc((uint64_t)a2 << 6, 0);
  if (a2 >= 1)
  {
    v5 = v4;
    v6 = 0;
    v7 = 0;
    v8 = (unint64_t)a2 << 6;
    do
    {
      v9 = &v5[v7 / 8];
      *v9 = 0x100000001;
      *((_DWORD *)v9 + 2) = 1310740000;
      v9[2] = 0;
      *((_WORD *)v9 + 12) = 0;
      SeederStruct::SeederStruct((SeederStruct *)&v5[v7 / 8 + 4]);
      DgnString::DgnString((DgnString *)&v5[v7 / 8 + 6]);
      *(_QWORD *)(*((_QWORD *)this + 9) + v6) = &v5[v7 / 8];
      v7 += 64;
      v6 += 8;
    }
    while (v8 != v7);
  }
}

void sub_209A21DD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  DgnIArray<Utterance *>::~DgnIArray(v1 + v2 + 32);
  PredStruct::~PredStruct((PredStruct *)(v1 + v2 + 16));
  _Unwind_Resume(a1);
}

uint64_t TraceNodeNet::sizeofOutPorts(uint64_t a1, int a2)
{
  uint64_t v4;
  char v5;
  unint64_t v6;

  if (a2 == 3)
  {
    v4 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v4 = 8;
    else
      v4 = 12;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v5 = 2;
      if (!gShadowDiagnosticShowIdealizedObjectSizes)
        v5 = 3;
      v4 += (unint64_t)*(unsigned int *)(a1 + 80) << v5;
    }
  }
  if (!*(_DWORD *)(a1 + 52) && *(_DWORD *)(a1 + 80))
  {
    v6 = 0;
    do
      v4 += sizeObject(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v6++), a2);
    while (v6 < *(unsigned int *)(a1 + 80));
  }
  return v4;
}

BOOL TraceNodeNet::hasSegments(int a1, uint64_t a2, int a3)
{
  return (int)SeederStruct::findSeederIndex((SeederStruct *)(a2 + 32), a3) >= 0;
}

uint64_t TraceNodeNet::wasEnding(int a1, TraceExternalOutPort *this, int a3)
{
  return TraceExternalOutPort::wasEnding(this, a3);
}

uint64_t TraceExternalOutPort::wasEnding(TraceExternalOutPort *this, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v7;

  v2 = *((_DWORD *)this + 10);
  if (!v2)
    return 0;
  v3 = *((_QWORD *)this + 4);
  v4 = *(_DWORD *)(v3 + 8);
  v5 = *(_DWORD *)(v3 + 16 * (v2 - 1) + 12);
  if (v4 != a2 && v5 == v4)
    return 0;
  v7 = v5 >= v4 ? a2 - v4 : v4 - a2;
  if (v7 >= *((_DWORD *)this + 14))
    return 0;
  else
    return (*(_DWORD *)(*((_QWORD *)this + 6) + 4 * (v7 >> 5)) >> v7) & 1;
}

uint64_t TraceNodeNet::appendCalculatedSegments(int a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int SeederIndex;
  BOOL v17;

  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 32)
                 + 16 * SeederStruct::findSeederIndex((SeederStruct *)(a2 + 32), a3));
  v7 = a3 + 1;
  do
  {
    if (*(__int16 *)(v6 + 30) != -1)
    {
      if (*(_BYTE *)(v6 + 42))
      {
        v8 = 0;
      }
      else
      {
        v8 = 0;
        do
        {
          ++v8;
          --v7;
        }
        while (*(_QWORD *)(*(_QWORD *)(v6 + 64)
                          + 16 * SeederStruct::findSeederIndex((SeederStruct *)(v6 + 64), v7)) == v6);
      }
      v9 = MemChunkAlloc(0x28uLL, 0);
      v10 = v9;
      v11 = *(__int16 *)(v6 + 80);
      *(_DWORD *)v9 = v7;
      *((_WORD *)v9 + 2) = *(_WORD *)(v6 + 30);
      *((_DWORD *)v9 + 2) = v8;
      *((_DWORD *)v9 + 3) = v11;
      v12 = *(_QWORD *)(v6 + 44);
      *((_WORD *)v9 + 12) = *(_WORD *)(v6 + 52);
      v9[2] = v12;
      *((_BYTE *)v9 + 26) = *(_BYTE *)(v6 + 54);
      *((_BYTE *)v9 + 27) = *(_BYTE *)(v6 + 55);
      *((_WORD *)v9 + 14) = *(unsigned __int8 *)(v6 + 28);
      v13 = *(__int16 *)(v6 + 24);
      if (v13 < 0)
        v14 = *(char *)(v6 + 29) + v13;
      else
        v14 = *(char *)(v6 + 29);
      *((_DWORD *)v9 + 8) = v14;
      *((_WORD *)v9 + 18) = v13;
      v15 = *(_DWORD *)(a4 + 8);
      if (v15 == *(_DWORD *)(a4 + 12))
      {
        DgnPrimArray<unsigned long long>::reallocElts(a4, 1, 1);
        v15 = *(_DWORD *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v15) = v10;
      *(_DWORD *)(a4 + 8) = v15 + 1;
    }
    SeederIndex = SeederStruct::findSeederIndex((SeederStruct *)(v6 + 64), v7);
    if (*(_BYTE *)(v6 + 82))
      v17 = *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * SeederIndex) == v6;
    else
      v17 = 1;
    v6 = *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * SeederIndex);
  }
  while (v17);
  return (v7 - 1);
}

uint64_t TraceNodeNet::isTraceNet(TraceNodeNet *this)
{
  return 1;
}

void TraceNode::TraceNode(TraceNode *this, char a2)
{
  uint64_t v3;

  NodeNetNode::NodeNetNode(this, a2);
  *(_QWORD *)v3 = &off_24C219EF8;
  *(_QWORD *)(v3 + 44) = -1;
  *(_WORD *)(v3 + 52) = -1;
  *(_DWORD *)(v3 + 54) = -65536;
  SeederStruct::SeederStruct((SeederStruct *)(v3 + 64));
  *((_BYTE *)this + 82) = 0;
}

void sub_209A2210C(_Unwind_Exception *a1)
{
  NodeNetNode *v1;

  NodeNetNode::~NodeNetNode(v1);
  _Unwind_Resume(a1);
}

void SeederStruct::SeederStruct(SeederStruct *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this, 1, 0);
}

void sub_209A22150(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIArray<Utterance *>::~DgnIArray(v1);
  _Unwind_Resume(a1);
}

uint64_t SeederStruct::findSeederIndex(SeederStruct *this, int a2)
{
  uint64_t v2;
  uint64_t result;
  int *i;
  int v6;
  int v7;

  v2 = *((unsigned int *)this + 2);
  if (!(_DWORD)v2)
    return 0xFFFFFFFFLL;
  result = 0;
  for (i = (int *)(*(_QWORD *)this + 12); ; i += 4)
  {
    v6 = *(i - 1);
    if (v6 == a2)
      break;
    v7 = *i;
    if (*i == a2)
      break;
    if (v6 < a2 && v7 > a2)
      break;
    if (v6 > a2 && v7 < a2)
      break;
    if (v2 == ++result)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t MrecInitLibrary_user(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_picmgr_user();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_user_user();
  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughUser(void)
{
  MrecInitLibrarySet_throughPel();
  MrecInitLibrarySet_throughPhoneme();
  return MrecInitLibrary_user();
}

uint64_t MrecInitLibrary_sigproc(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_ltf_sigproc();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_spdebug_sigproc();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sputtdet_sigproc();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_wavepac_sigproc();
  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughSigproc(void)
{
  MrecInitLibrarySet_throughFrame();
  return MrecInitLibrary_sigproc();
}

void MrecInitModule_pelsc_pel(void)
{
  uint64_t *v0;
  _QWORD *v1;
  __n128 *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  __int128 v15;

  if (!gParDebugShowShortListBitVector)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowShortListBitVector", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowShortListBitVector = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowShortListBitVector);
  }
  if (!gParDiagnosticPackedIntPelScoring)
  {
    v2 = (__n128 *)MemChunkAlloc(0x40uLL, 0);
    EnumParamRange::EnumParamRange((uint64_t)&v15, (uint64_t)&sDiagnosticPackedIntPelScoringEnum);
    EnumGlobalParamBase::EnumGlobalParamBase(v2, (unint64_t)"DiagnosticPackedIntPelScoring", (unint64_t)&byte_209A88803, (unint64_t)&byte_209A88803, 0, (__n128 *)&v15, 0);
    v2->n128_u64[0] = (unint64_t)&unk_24C215008;
    gParDiagnosticPackedIntPelScoring = (uint64_t)v2;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticPackedIntPelScoring);
  }
  if (!gParDebugAcousticReferencePackedIntScoring)
  {
    v3 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v3, "DebugAcousticReferencePackedIntScoring", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v4 = &unk_24C214CE8;
    gParDebugAcousticReferencePackedIntScoring = (uint64_t)v4;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAcousticReferencePackedIntScoring);
  }
  if (!gParDebugAcousticFloatScoring)
  {
    v5 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v5, "DebugAcousticFloatScoring", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v6 = &unk_24C214CE8;
    gParDebugAcousticFloatScoring = (uint64_t)v6;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAcousticFloatScoring);
  }
  if (!gParDebugAcousticMicReferenceScoring)
  {
    v7 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v7, "DebugAcousticMicReferenceScoring", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v8 = &unk_24C214CE8;
    gParDebugAcousticMicReferenceScoring = (uint64_t)v8;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAcousticMicReferenceScoring);
  }
  if (!gParDebugQuantPerDimPelScoring)
  {
    v9 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v9, "DebugQuantPerDimPelScoring", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v10 = &unk_24C214CE8;
    gParDebugQuantPerDimPelScoring = (uint64_t)v10;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugQuantPerDimPelScoring);
  }
  if (!gParDebugShowTransformedFeatures)
  {
    v11 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v11, "DebugShowTransformedFeatures", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v12 = &unk_24C214CE8;
    gParDebugShowTransformedFeatures = (uint64_t)v12;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowTransformedFeatures);
  }
  if (!gParDiagnosticAttilaAcousticScoreScale)
  {
    v13 = MemChunkAlloc(0x48uLL, 0);
    v15 = xmmword_209A80310;
    v14 = (_QWORD *)DoubleGlobalParamBase::DoubleGlobalParamBase((uint64_t)v13, (uint64_t)"DiagnosticAttilaAcousticScoreScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, &v15, 0, 0.0);
    *v14 = &unk_24C215998;
    gParDiagnosticAttilaAcousticScoreScale = (uint64_t)v14;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticAttilaAcousticScoreScale);
  }
}

void PelScorer::PelScorer(PelScorer *this, const PelMgr *a2, const GenoneClassTree *a3, const VarClassMgr *a4, const FmpeMgr *a5, const NeuralNet *a6, const Imelda *a7, int a8, double a9, double a10, BOOL a11)
{
  void **v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;

  *(_QWORD *)this = &unk_24C219C38;
  if (MemChunkRegion::smTlsID != -1)
  {
    v20 = (void **)pthread_getspecific(MemChunkRegion::smTlsID);
    if (v20)
    {
      v21 = *v20;
      if (*v20)
        goto LABEL_6;
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
    }
  }
  v21 = &gGlobalMemChunkRegion;
LABEL_6:
  *((_QWORD *)this + 1) = v21;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = a3;
  *((_QWORD *)this + 6) = a4;
  *((_QWORD *)this + 7) = a5;
  *((_QWORD *)this + 8) = a6;
  *((_QWORD *)this + 9) = a7;
  v22 = *(_QWORD *)a2;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = 0;
  v23 = *((_QWORD *)a2 + 62);
  v24 = *((_DWORD *)a2 + 38);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 10) = v22;
  *((_QWORD *)this + 13) = v23;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 29) = v24;
  *(_DWORD *)((char *)this + 127) = 0;
  *((_BYTE *)this + 131) = a11;
  *((double *)this + 17) = a9;
  *((double *)this + 18) = a10;
  *((_DWORD *)this + 38) = -16;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 34) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 11) = 0u;
  if (a4)
    v25 = *(_DWORD *)a4;
  else
    v25 = 0;
  *((_DWORD *)this + 70) = v25;
  *(_QWORD *)((char *)this + 284) = 0;
  *(_OWORD *)((char *)this + 296) = 0uLL;
  *(_OWORD *)((char *)this + 312) = 0uLL;
  AlignedArray<short>::AlignedArray((uint64_t)this + 328, *((_DWORD *)a2 + 56));
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *(_OWORD *)((char *)this + 508) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_WORD *)this + 320) = 0;
  v26 = MemChunkAlloc(0x1F0uLL, 0);
  PelScoreCache::PelScoreCache((uint64_t)v26, (uint64_t)this, *((_QWORD *)this + 2) + 376, *((_QWORD *)this + 2) + 288);
  *((_QWORD *)this + 15) = v27;
  if (a5)
  {
    v28 = MemChunkAlloc(0x298uLL, 0);
    *((_QWORD *)this + 11) = OnDemandPelScorer::OnDemandPelScorer((OnDemandPelScorer *)v28, *(const PelMgr **)(*((_QWORD *)this + 7) + 112), 0, 0, 0, a6, 0, 0, *((double *)this + 17), *((_BYTE *)this + 131), a10);
  }
  if (a8)
  {
    v29 = MemChunkAlloc(0x298uLL, 0);
    *((_QWORD *)this + 12) = OnDemandPelScorer::OnDemandPelScorer((OnDemandPelScorer *)v29, a2, 0, 0, 0, a6, a7, 0, *((double *)this + 17), *((_BYTE *)this + 131), a10);
  }
}

void sub_209A228CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 312);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 200);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 176);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  _Unwind_Resume(a1);
}

void OnDemandPelScorer::OnDemandPelScorer(OnDemandPelScorer *this, const PelMgr *a2, const GenoneClassTree *a3, const VarClassMgr *a4, const FmpeMgr *a5, const NeuralNet *a6, const Imelda *a7, int a8, double a9, double a10, BOOL a11)
{
  OnDemandPelScorer::OnDemandPelScorer(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;

  PelScorer::PelScorer(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  *v13 = off_24C215AA0;
  v14 = v13 + 81;
  *(_OWORD *)(v13 + 81) = 0u;
  if (*((_DWORD *)a2 + 3) == 3)
  {
    v15 = *((_QWORD *)a2 + 6);
    v16 = *((_QWORD *)a2 + 10);
    v17 = *((unsigned int *)a2 + 33);
    if (32 * (_DWORD)v17)
    {
      v25 = 0;
      *((_DWORD *)this + 165) = realloc_array(0, &v25, (32 * v17), 0, 0, 1);
      *((_QWORD *)this + 81) = v25;
    }
    *((_DWORD *)this + 164) = 32 * v17;
    if ((_DWORD)v17)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = 0;
        v21 = (16 * v18);
        v22 = v16 + v21;
        v23 = v15 + v21;
        do
        {
          *(_BYTE *)(*v14 + (v19 + v20)) = *(_BYTE *)(v23 + v20);
          ++v20;
        }
        while (v20 != 16);
        for (i = 0; i != 16; ++i)
          *(_BYTE *)(*v14 + (v19 + 16 + i)) = *(_BYTE *)(v22 + i);
        ++v18;
        v19 += 32;
      }
      while (v18 != v17);
    }
  }
}

void PelScorer::~PelScorer(PelScoreCache **this)
{
  PelScoreCache *v2;
  PelScoreCache *v3;

  *this = (PelScoreCache *)&unk_24C219C38;
  DgnDelete<PelScoreCache>(this[15]);
  this[15] = 0;
  v2 = this[11];
  if (v2)
  {
    (*(void (**)(PelScoreCache *))(*(_QWORD *)v2 + 16))(this[11]);
    MemChunkFree(v2, 0);
  }
  this[11] = 0;
  v3 = this[12];
  if (v3)
  {
    (*(void (**)(PelScoreCache *))(*(_QWORD *)v3 + 16))(this[12]);
    MemChunkFree(v3, 0);
  }
  this[12] = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 78));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 73));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 71));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 69));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 67));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 63));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 61));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 56));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 54));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 52));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 50));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 48));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 46));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 44));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 41));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 39));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 37));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 31));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 29));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 27));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 25));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 22));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 20));
}

PelScoreCache *DgnDelete<PelScoreCache>(PelScoreCache *result)
{
  _QWORD *v1;

  if (result)
  {
    PelScoreCache::~PelScoreCache(result);
    return (PelScoreCache *)MemChunkFree(v1, 0);
  }
  return result;
}

void PelScorer::printSize(PelScorer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  PelScoreCache *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  BOOL v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  int v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  int v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  int v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  char v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  unsigned int v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  char *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  unsigned int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  char *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  char *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  char *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  char *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  char *v472;
  uint64_t v473;
  uint64_t v474;
  unsigned int v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  char *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  char *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  char *v492;
  uint64_t v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  uint64_t v497;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 448, (DgnString *)&v496);
  if ((_DWORD)v497)
    v16 = (char *)v496;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v496);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  v22 = (a3 + 1);
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 449, (DgnString *)&v496);
  if ((_DWORD)v497)
    v28 = (char *)v496;
  else
    v28 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v29 = 4;
  else
    v29 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 450, (DgnString *)&v496);
  if ((_DWORD)v497)
    v34 = (char *)v496;
  else
    v34 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v34, v29, v29, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v29;
  *a5 += v29;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v35 = 4;
  else
    v35 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 451, (DgnString *)&v496);
  if ((_DWORD)v497)
    v40 = (char *)v496;
  else
    v40 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v40, v35, v35, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v35;
  *a5 += v35;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v41 = 4;
  else
    v41 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 452, (DgnString *)&v496);
  if ((_DWORD)v497)
    v46 = (char *)v496;
  else
    v46 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v46, v41, v41, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v41;
  *a5 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v47 = 4;
  else
    v47 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 453, (DgnString *)&v496);
  if ((_DWORD)v497)
    v52 = (char *)v496;
  else
    v52 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v52, v47, v47, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v47;
  *a5 += v47;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 4;
  else
    v53 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 454, (DgnString *)&v496);
  if ((_DWORD)v497)
    v58 = (char *)v496;
  else
    v58 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v58, v53, v53, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v53;
  *a5 += v53;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v59 = 4;
  else
    v59 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 455, (DgnString *)&v496);
  if ((_DWORD)v497)
    v64 = (char *)v496;
  else
    v64 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v64, v59, v59, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v59;
  *a5 += v59;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v65 = 4;
  else
    v65 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 456, (DgnString *)&v496);
  if ((_DWORD)v497)
    v70 = (char *)v496;
  else
    v70 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v70, v65, v65, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v65;
  *a5 += v65;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v71 = 4;
  else
    v71 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 457, (DgnString *)&v496);
  if ((_DWORD)v497)
    v76 = (char *)v496;
  else
    v76 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v76, v71, v71, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v71;
  *a5 += v71;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v77 = 4;
  else
    v77 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 458, (DgnString *)&v496);
  if ((_DWORD)v497)
    v82 = (char *)v496;
  else
    v82 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v82, v77, v77, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v77;
  *a5 += v77;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v83 = 4;
  else
    v83 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 459, (DgnString *)&v496);
  if ((_DWORD)v497)
    v88 = (char *)v496;
  else
    v88 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v88, v83, v83, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v83;
  *a5 += v83;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v89 = 4;
  else
    v89 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 460, (DgnString *)&v496);
  if ((_DWORD)v497)
    v94 = (char *)v496;
  else
    v94 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v94, v89, v89, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v89;
  *a5 += v89;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 461, (DgnString *)&v496);
  if ((_DWORD)v497)
    v99 = (char *)v496;
  else
    v99 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v99, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 462, (DgnString *)&v496);
  if ((_DWORD)v497)
    v104 = (char *)v496;
  else
    v104 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v100, v101, v102, v103, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v104, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 464, (DgnString *)&v496);
  if ((_DWORD)v497)
    v109 = (char *)v496;
  else
    v109 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v105, v106, v107, v108, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v109, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  v110 = (PelScoreCache *)*((_QWORD *)this + 15);
  if (v110)
  {
    v495 = 0;
    v496 = 0;
    v494 = 0;
    PelScoreCache::printSize(v110, 0xFFFFFFFFLL, (a3 + 1), &v496, &v495, &v494);
    *a4 += v496;
    *a5 += v495;
    *a6 += v494;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v111 = 4;
  else
    v111 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 466, (DgnString *)&v496);
  if ((_DWORD)v497)
    v116 = (char *)v496;
  else
    v116 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v116, v111, v111, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v111;
  *a5 += v111;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 477, (DgnString *)&v496);
  if ((_DWORD)v497)
    v121 = (char *)v496;
  else
    v121 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v117, v118, v119, v120, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v121, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v496);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 479, (DgnString *)&v496);
  if ((_DWORD)v497)
    v126 = (char *)v496;
  else
    v126 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v122, v123, v124, v125, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v126, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v496);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 481, (DgnString *)&v496);
  if ((_DWORD)v497)
    v131 = (char *)v496;
  else
    v131 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v127, v128, v129, v130, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v131, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v496);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 483, (DgnString *)&v496);
  if ((_DWORD)v497)
    v136 = (char *)v496;
  else
    v136 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v132, v133, v134, v135, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v136, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v496);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 485, (DgnString *)&v496);
  if ((_DWORD)v497)
    v141 = (char *)v496;
  else
    v141 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v141, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 487, (DgnString *)&v496);
  if ((_DWORD)v497)
    v146 = (char *)v496;
  else
    v146 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v142, v143, v144, v145, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v146, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 488, (DgnString *)&v496);
  if ((_DWORD)v497)
    v151 = (char *)v496;
  else
    v151 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v147, v148, v149, v150, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v151, 4, 4, 0);
  v493 = a3;
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v152 = 12;
  else
    v152 = 16;
  v153 = *((_DWORD *)this + 42);
  v154 = *((_DWORD *)this + 43);
  v155 = v154 >= v153;
  v156 = v154 - v153;
  if (v155)
  {
    v158 = v153 & ~(v153 >> 31);
    v153 = 0;
    v157 = v152 + v158;
    v152 += v158 + v156;
  }
  else
  {
    v157 = v152;
  }
  v159 = v153;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 489, (DgnString *)&v496);
  if ((_DWORD)v497)
    v164 = (char *)v496;
  else
    v164 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v160, v161, v162, v163, v22, &byte_209A88803, v23, v23, v164, v152, v157, v159);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v152;
  *a5 += v157;
  *a6 += v159;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v165 = 12;
  else
    v165 = 16;
  v166 = *((_DWORD *)this + 46);
  v167 = *((_DWORD *)this + 47);
  v155 = v167 >= v166;
  v168 = v167 - v166;
  if (v155)
  {
    v170 = v166 & ~(v166 >> 31);
    v166 = 0;
    v169 = v165 + v170;
    v165 += v170 + v168;
  }
  else
  {
    v169 = v165;
  }
  v171 = v166;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 491, (DgnString *)&v496);
  if ((_DWORD)v497)
    v176 = (char *)v496;
  else
    v176 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v172, v173, v174, v175, v22, &byte_209A88803, v23, v23, v176, v165, v169, v171);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v165;
  *a5 += v169;
  *a6 += v171;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v177 = 4;
  else
    v177 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 493, (DgnString *)&v496);
  if ((_DWORD)v497)
    v182 = (char *)v496;
  else
    v182 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v178, v179, v180, v181, v22, &byte_209A88803, v23, v23, v182, v177, v177, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v177;
  *a5 += v177;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v183 = 12;
  else
    v183 = 16;
  v184 = *((_DWORD *)this + 52);
  v185 = *((_DWORD *)this + 53);
  v155 = v185 >= v184;
  v186 = v185 - v184;
  if (v155)
  {
    v188 = v184 & ~(v184 >> 31);
    v184 = 0;
    v187 = v183 + v188;
    v183 += v188 + v186;
  }
  else
  {
    v187 = v183;
  }
  v189 = v184;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 495, (DgnString *)&v496);
  if ((_DWORD)v497)
    v194 = (char *)v496;
  else
    v194 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v190, v191, v192, v193, v22, &byte_209A88803, v23, v23, v194, v183, v187, v189);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v183;
  *a5 += v187;
  *a6 += v189;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v195 = 12;
  else
    v195 = 16;
  v196 = *((_DWORD *)this + 56);
  v197 = *((_DWORD *)this + 57);
  v155 = v197 >= v196;
  v198 = v197 - v196;
  if (v155)
  {
    v200 = v196 & ~(v196 >> 31);
    v196 = 0;
    v199 = v195 + v200;
    v195 += v200 + v198;
  }
  else
  {
    v199 = v195;
  }
  v201 = v196;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 497, (DgnString *)&v496);
  if ((_DWORD)v497)
    v206 = (char *)v496;
  else
    v206 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v202, v203, v204, v205, v22, &byte_209A88803, v23, v23, v206, v195, v199, v201);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v195;
  *a5 += v199;
  *a6 += v201;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v207 = 12;
  else
    v207 = 16;
  v208 = *((unsigned int *)this + 60);
  v209 = *((_DWORD *)this + 61);
  if (v209 >= v208)
  {
    v210 = 0;
    if ((int)v208 > 0)
      v207 = (v207 | 2) + 2 * (v208 - 1);
    v211 = v207 + 2 * (v209 - v208);
  }
  else
  {
    v210 = 2 * v208;
    v211 = v207;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 498, (DgnString *)&v496);
  if ((_DWORD)v497)
    v216 = (char *)v496;
  else
    v216 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v212, v213, v214, v215, v22, &byte_209A88803, v23, v23, v216, v211, v207, v210);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v211;
  *a5 += v207;
  *a6 += v210;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v217 = 12;
  else
    v217 = 16;
  v218 = *((unsigned int *)this + 64);
  v219 = *((_DWORD *)this + 65);
  if (v219 >= v218)
  {
    v220 = 0;
    if ((int)v218 > 0)
      v217 = (v217 | 2) + 2 * (v218 - 1);
    v221 = v217 + 2 * (v219 - v218);
  }
  else
  {
    v220 = 2 * v218;
    v221 = v217;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 500, (DgnString *)&v496);
  if ((_DWORD)v497)
    v226 = (char *)v496;
  else
    v226 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v222, v223, v224, v225, v22, &byte_209A88803, v23, v23, v226, v221, v217, v220);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v221;
  *a5 += v217;
  *a6 += v220;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 502, (DgnString *)&v496);
  if ((_DWORD)v497)
    v231 = (char *)v496;
  else
    v231 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v227, v228, v229, v230, v22, &byte_209A88803, v23, v23, v231, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 504, (DgnString *)&v496);
  if ((_DWORD)v497)
    v236 = (char *)v496;
  else
    v236 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v232, v233, v234, v235, v22, &byte_209A88803, v23, v23, v236, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 505, (DgnString *)&v496);
  if ((_DWORD)v497)
    v241 = (char *)v496;
  else
    v241 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v237, v238, v239, v240, v22, &byte_209A88803, v23, v23, v241, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 506, (DgnString *)&v496);
  if ((_DWORD)v497)
    v246 = (char *)v496;
  else
    v246 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v242, v243, v244, v245, v22, &byte_209A88803, v23, v23, v246, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 507, (DgnString *)&v496);
  if ((_DWORD)v497)
    v251 = (char *)v496;
  else
    v251 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v247, v248, v249, v250, v22, &byte_209A88803, v23, v23, v251, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 509, (DgnString *)&v496);
  if ((_DWORD)v497)
    v256 = (char *)v496;
  else
    v256 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v252, v253, v254, v255, v22, &byte_209A88803, v23, v23, v256, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 511, (DgnString *)&v496);
  if ((_DWORD)v497)
    v261 = (char *)v496;
  else
    v261 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v257, v258, v259, v260, v22, &byte_209A88803, v23, v23, v261, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v262 = 12;
  else
    v262 = 16;
  v263 = *((unsigned int *)this + 76);
  v264 = *((_DWORD *)this + 77);
  if (v264 >= v263)
  {
    v265 = 0;
    if ((int)v263 > 0)
      v262 += 4 * (v263 - 1) + 4;
    v266 = v262 + 4 * (v264 - v263);
  }
  else
  {
    v265 = 4 * v263;
    v266 = v262;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 513, (DgnString *)&v496);
  if ((_DWORD)v497)
    v271 = (char *)v496;
  else
    v271 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v267, v268, v269, v270, v22, &byte_209A88803, v23, v23, v271, v266, v262, v265);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v266;
  *a5 += v262;
  *a6 += v265;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v272 = 12;
  else
    v272 = 16;
  v273 = *((unsigned int *)this + 80);
  v274 = *((_DWORD *)this + 81);
  if (v274 >= v273)
  {
    v275 = 0;
    if ((int)v273 > 0)
      v272 += 4 * (v273 - 1) + 4;
    v276 = v272 + 4 * (v274 - v273);
  }
  else
  {
    v275 = 4 * v273;
    v276 = v272;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 515, (DgnString *)&v496);
  if ((_DWORD)v497)
    v281 = (char *)v496;
  else
    v281 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v277, v278, v279, v280, v22, &byte_209A88803, v23, v23, v281, v276, v272, v275);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v276;
  *a5 += v272;
  *a6 += v275;
  v282 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v282 = 16;
  v283 = *((unsigned int *)this + 84);
  v284 = *((_DWORD *)this + 85);
  if (v284 >= v283)
  {
    v285 = 0;
    if ((int)v283 > 0)
      v282 = (v282 | 2) + 2 * (v283 - 1);
    v286 = v282 + 2 * (v284 - v283);
  }
  else
  {
    v285 = 2 * v283;
    v286 = v282;
  }
  v287 = v286 + 4;
  v288 = v282 + 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 517, (DgnString *)&v496);
  if ((_DWORD)v497)
    v293 = (char *)v496;
  else
    v293 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v289, v290, v291, v292, v22, &byte_209A88803, v23, v23, v293, v287, v288, v285);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v287;
  *a5 += v288;
  *a6 += v285;
  v294 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 352, 0);
  v295 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 352, 1);
  v496 = 0;
  v497 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v496);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 519, (DgnString *)&v496);
  if ((_DWORD)v497)
    v300 = (char *)v496;
  else
    v300 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v296, v297, v298, v299, v22, &byte_209A88803, v23, v23, v300, v294, v295, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v294;
  *a5 += v295;
  v301 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 368, 0);
  v302 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 368, 1);
  v496 = 0;
  v497 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v496);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 521, (DgnString *)&v496);
  if ((_DWORD)v497)
    v307 = (char *)v496;
  else
    v307 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v303, v304, v305, v306, v22, &byte_209A88803, v23, v23, v307, v301, v302, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v301;
  *a5 += v302;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v308 = 12;
  else
    v308 = 16;
  v309 = *((unsigned int *)this + 98);
  v310 = *((_DWORD *)this + 99);
  if (v310 >= v309)
  {
    v311 = 0;
    if ((int)v309 > 0)
      v308 += 4 * (v309 - 1) + 4;
    v312 = v308 + 4 * (v310 - v309);
  }
  else
  {
    v311 = 4 * v309;
    v312 = v308;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 523, (DgnString *)&v496);
  if ((_DWORD)v497)
    v317 = (char *)v496;
  else
    v317 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v313, v314, v315, v316, v22, &byte_209A88803, v23, v23, v317, v312, v308, v311);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v312;
  *a5 += v308;
  *a6 += v311;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v318 = 12;
  else
    v318 = 16;
  v319 = *((_DWORD *)this + 102);
  v320 = *((_DWORD *)this + 103);
  v155 = v320 >= v319;
  v321 = v320 - v319;
  if (v155)
  {
    v323 = v319 & ~(v319 >> 31);
    v319 = 0;
    v322 = v318 + v323;
    v318 += v323 + v321;
  }
  else
  {
    v322 = v318;
  }
  v324 = v319;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 525, (DgnString *)&v496);
  if ((_DWORD)v497)
    v329 = (char *)v496;
  else
    v329 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v325, v326, v327, v328, v22, &byte_209A88803, v23, v23, v329, v318, v322, v324);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v318;
  *a5 += v322;
  *a6 += v324;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v330 = 12;
  else
    v330 = 16;
  v331 = *((unsigned int *)this + 106);
  v332 = *((_DWORD *)this + 107);
  if (v332 >= v331)
  {
    v333 = 0;
    if ((int)v331 > 0)
      v330 += 8 * (v331 - 1) + 8;
    v334 = v330 + 8 * (v332 - v331);
  }
  else
  {
    v333 = 8 * v331;
    v334 = v330;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 527, (DgnString *)&v496);
  if ((_DWORD)v497)
    v339 = (char *)v496;
  else
    v339 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v335, v336, v337, v338, v22, &byte_209A88803, v23, v23, v339, v334, v330, v333);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v334;
  *a5 += v330;
  *a6 += v333;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v340 = 12;
  else
    v340 = 16;
  v341 = *((unsigned int *)this + 110);
  v342 = *((_DWORD *)this + 111);
  if (v342 >= v341)
  {
    v343 = 0;
    if ((int)v341 > 0)
      v340 += 8 * (v341 - 1) + 8;
    v344 = v340 + 8 * (v342 - v341);
  }
  else
  {
    v343 = 8 * v341;
    v344 = v340;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 529, (DgnString *)&v496);
  if ((_DWORD)v497)
    v349 = (char *)v496;
  else
    v349 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v345, v346, v347, v348, v22, &byte_209A88803, v23, v23, v349, v344, v340, v343);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v344;
  *a5 += v340;
  *a6 += v343;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v350 = 12;
  else
    v350 = 16;
  v351 = *((unsigned int *)this + 114);
  v352 = *((_DWORD *)this + 115);
  if (v352 >= v351)
  {
    v353 = 0;
    if ((int)v351 > 0)
      v350 += 8 * (v351 - 1) + 8;
    v354 = v350 + 8 * (v352 - v351);
  }
  else
  {
    v353 = 8 * v351;
    v354 = v350;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 531, (DgnString *)&v496);
  if ((_DWORD)v497)
    v359 = (char *)v496;
  else
    v359 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v355, v356, v357, v358, v22, &byte_209A88803, v23, v23, v359, v354, v350, v353);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v354;
  *a5 += v350;
  *a6 += v353;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 533, (DgnString *)&v496);
  if ((_DWORD)v497)
    v364 = (char *)v496;
  else
    v364 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v360, v361, v362, v363, v22, &byte_209A88803, v23, v23, v364, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 535, (DgnString *)&v496);
  if ((_DWORD)v497)
    v369 = (char *)v496;
  else
    v369 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v365, v366, v367, v368, v22, &byte_209A88803, v23, v23, v369, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 8;
  *a5 += 8;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v370 = 4;
  else
    v370 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 536, (DgnString *)&v496);
  if ((_DWORD)v497)
    v375 = (char *)v496;
  else
    v375 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v371, v372, v373, v374, v22, &byte_209A88803, v23, v23, v375, v370, v370, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v370;
  *a5 += v370;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v376 = 12;
  else
    v376 = 16;
  v377 = *((unsigned int *)this + 124);
  v378 = *((_DWORD *)this + 125);
  if (v378 >= v377)
  {
    v379 = 0;
    if ((int)v377 > 0)
      v376 += 4 * (v377 - 1) + 4;
    v380 = v376 + 4 * (v378 - v377);
  }
  else
  {
    v379 = 4 * v377;
    v380 = v376;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 538, (DgnString *)&v496);
  if ((_DWORD)v497)
    v385 = (char *)v496;
  else
    v385 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v381, v382, v383, v384, v22, &byte_209A88803, v23, v23, v385, v380, v376, v379);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v380;
  *a5 += v376;
  *a6 += v379;
  v386 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v386 = 16;
  v387 = *((unsigned int *)this + 128);
  v388 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v388 = 3;
  v389 = (((*((_DWORD *)this + 129) - v387) + v387) << v388) + v386;
  v390 = (v387 << v388) + v386;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 540, (DgnString *)&v496);
  if ((_DWORD)v497)
    v395 = (char *)v496;
  else
    v395 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v391, v392, v393, v394, v22, &byte_209A88803, v23, v23, v395, v389, v390, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v389;
  *a5 += v390;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 542, (DgnString *)&v496);
  if ((_DWORD)v497)
    v400 = (char *)v496;
  else
    v400 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v396, v397, v398, v399, v22, &byte_209A88803, v23, v23, v400, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v401 = 4;
  else
    v401 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 544, (DgnString *)&v496);
  if ((_DWORD)v497)
    v406 = (char *)v496;
  else
    v406 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v402, v403, v404, v405, v22, &byte_209A88803, v23, v23, v406, v401, v401, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v401;
  *a5 += v401;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v407 = 12;
  else
    v407 = 16;
  v408 = *((unsigned int *)this + 136);
  v409 = *((_DWORD *)this + 137);
  if (v409 >= v408)
  {
    v410 = 0;
    if ((int)v408 > 0)
      v407 += 4 * (v408 - 1) + 4;
    v411 = v407 + 4 * (v409 - v408);
  }
  else
  {
    v410 = 4 * v408;
    v411 = v407;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 546, (DgnString *)&v496);
  if ((_DWORD)v497)
    v416 = (char *)v496;
  else
    v416 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v412, v413, v414, v415, v22, &byte_209A88803, v23, v23, v416, v411, v407, v410);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v411;
  *a5 += v407;
  *a6 += v410;
  v417 = sizeObject<BinaryIntScale>((uint64_t)this + 552, 0);
  v418 = sizeObject<BinaryIntScale>((uint64_t)this + 552, 1);
  LODWORD(v496) = 0;
  sizeObject((uint64_t)&v496, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 548, (DgnString *)&v496);
  if ((_DWORD)v497)
    v423 = (char *)v496;
  else
    v423 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v419, v420, v421, v422, v22, &byte_209A88803, v23, v23, v423, v417, v418, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v417;
  *a5 += v418;
  v424 = sizeObject<BinaryIntScale>((uint64_t)this + 568, 0);
  v425 = sizeObject<BinaryIntScale>((uint64_t)this + 568, 1);
  LODWORD(v496) = 0;
  sizeObject((uint64_t)&v496, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 550, (DgnString *)&v496);
  if ((_DWORD)v497)
    v430 = (char *)v496;
  else
    v430 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v426, v427, v428, v429, v22, &byte_209A88803, v23, v23, v430, v424, v425, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v424;
  *a5 += v425;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v431 = 12;
  else
    v431 = 16;
  v432 = *((unsigned int *)this + 148);
  v433 = *((_DWORD *)this + 149);
  if (v433 >= v432)
  {
    v434 = 0;
    if ((int)v432 > 0)
      v431 = (v431 | 2) + 2 * (v432 - 1);
    v435 = v431 + 2 * (v433 - v432);
  }
  else
  {
    v434 = 2 * v432;
    v435 = v431;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 552, (DgnString *)&v496);
  if ((_DWORD)v497)
    v440 = (char *)v496;
  else
    v440 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v436, v437, v438, v439, v22, &byte_209A88803, v23, v23, v440, v435, v431, v434);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v435;
  *a5 += v431;
  *a6 += v434;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 554, (DgnString *)&v496);
  if ((_DWORD)v497)
    v445 = (char *)v496;
  else
    v445 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v441, v442, v443, v444, v22, &byte_209A88803, v23, v23, v445, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 556, (DgnString *)&v496);
  if ((_DWORD)v497)
    v450 = (char *)v496;
  else
    v450 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v446, v447, v448, v449, v22, &byte_209A88803, v23, v23, v450, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  v451 = sizeObject((uint64_t)this + 608, 0);
  v452 = sizeObject((uint64_t)this + 608, 1);
  v453 = sizeObject((uint64_t)this + 608, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 558, (DgnString *)&v496);
  if ((_DWORD)v497)
    v458 = (char *)v496;
  else
    v458 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v454, v455, v456, v457, v22, &byte_209A88803, v23, v23, v458, v451, v452, v453);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v451;
  *a5 += v452;
  *a6 += v453;
  v459 = sizeObject((uint64_t)this + 612, 0);
  v460 = sizeObject((uint64_t)this + 612, 1);
  v461 = sizeObject((uint64_t)this + 612, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 560, (DgnString *)&v496);
  if ((_DWORD)v497)
    v466 = (char *)v496;
  else
    v466 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v462, v463, v464, v465, v22, &byte_209A88803, v23, v23, v466, v459, v460, v461);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v459;
  *a5 += v460;
  *a6 += v461;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v467 = 4;
  else
    v467 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 562, (DgnString *)&v496);
  if ((_DWORD)v497)
    v472 = (char *)v496;
  else
    v472 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v468, v469, v470, v471, v22, &byte_209A88803, v23, v23, v472, v467, v467, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v467;
  *a5 += v467;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v473 = 12;
  else
    v473 = 16;
  v474 = *((unsigned int *)this + 158);
  v475 = *((_DWORD *)this + 159);
  if (v475 >= v474)
  {
    v476 = 0;
    if ((int)v474 > 0)
      v473 = (v473 | 2) + 2 * (v474 - 1);
    v477 = v473 + 2 * (v475 - v474);
  }
  else
  {
    v476 = 2 * v474;
    v477 = v473;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 564, (DgnString *)&v496);
  if ((_DWORD)v497)
    v482 = (char *)v496;
  else
    v482 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v478, v479, v480, v481, v22, &byte_209A88803, v23, v23, v482, v477, v473, v476);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v477;
  *a5 += v473;
  *a6 += v476;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 566, (DgnString *)&v496);
  if ((_DWORD)v497)
    v487 = (char *)v496;
  else
    v487 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v483, v484, v485, v486, v22, &byte_209A88803, v23, v23, v487, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 567, (DgnString *)&v496);
  if ((_DWORD)v497)
    v492 = (char *)v496;
  else
    v492 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v488, v489, v490, v491, v493, &byte_209A88803, (35 - v493), (35 - v493), v492, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v496);
}

void sub_209A24F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t PelScorer::startRecordRequestedPels(PelScorer *this)
{
  return MrecInitModule_sdpres_sdapi();
}

void OnDemandPelScorer::beginPelSyncRecog(OnDemandPelScorer *this, uint64_t a2, const AdaptConfig *a3, const CTFTMgr *a4, int a5, char a6, char a7, double a8, double a9)
{
  double v9;
  char v12;
  uint64_t v17;
  BOOL v18;
  int v19;
  int (*v20)(const PelScorer *, unsigned __int16, unsigned int *);
  void (*v21)(const PelScorer *, unsigned __int16, unsigned int, unsigned __int16 *, unsigned int *);
  int (*v22)(const PelScorer *, unsigned __int16, const unsigned __int16 *, unsigned int *);

  v9 = a8;
  v12 = a5;
  if (!*((_BYTE *)this + 131)
    || ((v17 = *((_QWORD *)this + 2),
         LODWORD(a9) = *(_DWORD *)(v17 + 140),
         LODWORD(a8) = *(_DWORD *)(v17 + 144),
         (double)*(unint64_t *)&a8 / (double)*(unint64_t *)&a9 >= *((double *)this + 17))
      ? (v18 = a5 == 0)
      : (v18 = 1),
        v18))
  {
    *((_BYTE *)this + 128) = 0;
  }
  else
  {
    v19 = *(unsigned __int8 *)(gParDiagnosticScoreAllPels + 41);
    *((_BYTE *)this + 128) = v19 ^ 1;
    if (!v19)
    {
      v21 = (void (*)(const PelScorer *, unsigned __int16, unsigned int, unsigned __int16 *, unsigned int *))(*(uint64_t (**)(OnDemandPelScorer *))(*(_QWORD *)this + 104))(this);
      v22 = (int (*)(const PelScorer *, unsigned __int16, const unsigned __int16 *, unsigned int *))(**(uint64_t (***)(OnDemandPelScorer *))this)(this);
      v20 = 0;
      goto LABEL_10;
    }
  }
  v20 = (int (*)(const PelScorer *, unsigned __int16, unsigned int *))(*(uint64_t (**)(OnDemandPelScorer *))(*(_QWORD *)this + 8))(this);
  v21 = 0;
  v22 = 0;
LABEL_10:
  PelScorer::beginPelSyncRecogBase(this, a2, a3, a4, v12, a6, a7, v9, v21, v22, v20);
}

void PelScorer::beginPelSyncRecogBase(PelScorer *this, uint64_t a2, const AdaptConfig *a3, const CTFTMgr *a4, char a5, char a6, char a7, double a8, void (*a9)(const PelScorer *, unsigned __int16, unsigned int, unsigned __int16 *, unsigned int *), int (*a10)(const PelScorer *, unsigned __int16, const unsigned __int16 *, unsigned int *), int (*a11)(const PelScorer *, unsigned __int16, unsigned int *))
{
  uint64_t v19;
  PelScorer *v20;
  uint64_t v21;
  uint64_t v22;

  *((_BYTE *)this + 130) = a7;
  if (*((_QWORD *)this + 7))
  {
    v19 = *((_QWORD *)this + 11);
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 32) = 0;
    *(_DWORD *)(v19 + 112) = *(_DWORD *)(*(_QWORD *)(v19 + 16) + 132);
    *(_DWORD *)(v19 + 152) = -16;
    *(_QWORD *)(v19 + 272) = 0x100000001;
    *(_DWORD *)(v19 + 304) = 0;
    *(_DWORD *)(v19 + 320) = 0;
    *(_QWORD *)(v19 + 284) = 0x100000001;
    PelScorer::initFeatureCacheForSlots((PelScorer *)v19);
    *(_BYTE *)(v19 + 129) = 0;
  }
  v20 = (PelScorer *)*((_QWORD *)this + 12);
  if (v20)
    PelScorer::beginOnlineCTPelSyncRecog(v20, a4, a8);
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 4) = a4;
  PelMgr::verifyFeatureDimension(*((_QWORD *)this + 2), *((_QWORD *)this + 6), a4, a2, 0, *((NeuralNet **)this + 8), *((_QWORD *)this + 9), *((_QWORD *)this + 7));
  *((_DWORD *)this + 28) = *(_DWORD *)(*((_QWORD *)this + 2) + 132);
  PelScorer::initFeatureCache(this);
  *((_BYTE *)this + 129) = a5;
  PelScoreCache::beginPelScoreCacheSyncRecog(*((PelScoreCache **)this + 15), a6, a5, a9, a10, a11, a8, v21, v22);
}

void PelScorer::beginFmpePelSyncRecog(PelScorer *this)
{
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 28) = *(_DWORD *)(*((_QWORD *)this + 2) + 132);
  *((_DWORD *)this + 38) = -16;
  *((_QWORD *)this + 34) = 0x100000001;
  *((_DWORD *)this + 76) = 0;
  *((_DWORD *)this + 80) = 0;
  *(_QWORD *)((char *)this + 284) = 0x100000001;
  PelScorer::initFeatureCacheForSlots(this);
  *((_BYTE *)this + 129) = 0;
}

void PelScorer::beginOnlineCTPelSyncRecog(PelScorer *this, const CTFTMgr *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a2;
  *((_DWORD *)this + 28) = *(_DWORD *)(*((_QWORD *)this + 2) + 132);
  *((_DWORD *)this + 76) = 0;
  *((_DWORD *)this + 80) = 0;
  *(_QWORD *)((char *)this + 284) = 0x100000001;
  PelScorer::initFeatureCacheForSlots(this);
  *((_BYTE *)this + 129) = 0;
  PelScoreCache::beginPelScoreCacheSyncRecog(*((PelScoreCache **)this + 15), 0, 0, 0, 0, 0, a3, v5, v6);
}

uint64_t PelScorer::initFeatureCache(PelScorer *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int16 v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  void *v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  void *v39;

  *((_DWORD *)this + 38) = -16;
  v2 = *((_QWORD *)this + 4);
  *((_DWORD *)this + 68) = *(_DWORD *)(v2 + 56);
  *((_DWORD *)this + 69) = *(_DWORD *)(v2 + 136);
  v3 = *(_DWORD *)(*((_QWORD *)this + 2) + 140);
  v4 = *((_DWORD *)this + 77);
  if (v3 > v4)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 296, v3 - v4, 0);
  *((_DWORD *)this + 76) = v3;
  v5 = *((_DWORD *)this + 81);
  if (v3 > v5)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 312, v3 - v5, 0);
  *((_DWORD *)this + 80) = v3;
  *((_DWORD *)this + 72) = 0;
  *((_DWORD *)this + 71) = 0;
  v6 = *((_DWORD *)this + 68);
  if (v6 <= 1)
    v6 = 1;
  v7 = *((_DWORD *)this + 70);
  if (v7 <= 1)
    v7 = 1;
  v8 = v7 * v6;
  v37 = 0;
  v38 = 0;
  if ((_DWORD)v8)
  {
    v35 = 0;
    v9 = realloc_array(0, &v35, 4 * v7 * v6, 0, 0, 1);
    v10 = v35;
    v37 = v35;
    LODWORD(v38) = v8;
    HIDWORD(v38) = v9 >> 2;
    v11 = v8;
    do
    {
      *v10++ = v8;
      --v11;
    }
    while (v11);
  }
  else
  {
    LODWORD(v38) = 0;
  }
  v12 = *((_DWORD *)this + 69);
  if (v12 <= 1)
    v12 = 1;
  v13 = v12 * v8;
  v35 = 0;
  v36 = 0;
  if ((_DWORD)v13)
  {
    v39 = 0;
    v14 = realloc_array(0, &v39, 4 * v12 * v8, 0, 0, 1);
    v15 = 0;
    v16 = v39;
    v35 = v39;
    LODWORD(v36) = v13;
    HIDWORD(v36) = v14 >> 2;
    do
      v16[v15++] = v13;
    while (v13 != v15);
  }
  else
  {
    v16 = 0;
    LODWORD(v36) = 0;
  }
  v17 = *((_DWORD *)this + 70);
  if (v17 <= 1)
    v17 = 1;
  v18 = *((_DWORD *)this + 69);
  if (v18 <= 1)
    v18 = 1;
  if (v3)
  {
    v19 = 0;
    v20 = (_DWORD *)((char *)this + 284);
    v22 = *((_QWORD *)this + 5);
    v21 = *((_QWORD *)this + 6);
    v23 = *((_QWORD *)this + 4);
    v24 = v37;
    v25 = *((_QWORD *)this + 39);
    v26 = *((_QWORD *)this + 37);
    do
    {
      if (v21)
        v27 = *(unsigned __int16 *)(*(_QWORD *)(v21 + 48) + 2 * v19);
      else
        v27 = -1;
      if (*(_DWORD *)(v23 + 56))
        v28 = *(_DWORD *)(*(_QWORD *)(v23 + 24) + 4 * *(unsigned int *)(*(_QWORD *)(v22 + 136) + 4 * v19));
      else
        v28 = -1;
      if (*(_DWORD *)(v23 + 136))
        v29 = *(_DWORD *)(*(_QWORD *)(v23 + 40) + 4 * *(unsigned int *)(*(_QWORD *)(v22 + 168) + 4 * v19));
      else
        v29 = -1;
      v30 = (v27 & ~(v27 >> 31)) + (v28 & ~(v28 >> 31)) * v17;
      v31 = v24[v30];
      if (v31 == (_DWORD)v8)
      {
        v24[v30] = (*((_DWORD *)this + 72))++;
        v31 = v24[v30];
      }
      *(_DWORD *)(v25 + 4 * v19) = v31;
      v32 = (v29 & ~(v29 >> 31)) + v30 * v18;
      v33 = v16[v32];
      if (v33 == (_DWORD)v13)
      {
        v16[v32] = (*v20)++;
        v33 = v16[v32];
      }
      *(_DWORD *)(v26 + 4 * v19++) = v33;
    }
    while (v3 > v19);
  }
  PelScorer::initFeatureCacheForSlots(this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v35);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v37);
}

void sub_209A255D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *PelScorer::endPelSyncRecogBase(PelScorer *this)
{
  _QWORD *result;
  PelScorer *v3;
  _QWORD *v4;

  *((_BYTE *)this + 130) = 0;
  PelScoreCache::endPelScoreCacheSyncRecog(*((_QWORD *)this + 15));
  *((_BYTE *)this + 129) = 0;
  result = PelScorer::deleteFeatureCache(this);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  if (*((_QWORD *)this + 7))
  {
    v3 = (PelScorer *)*((_QWORD *)this + 11);
    result = PelScorer::deleteFeatureCache(v3);
    *((_QWORD *)v3 + 3) = 0;
    *((_QWORD *)v3 + 4) = 0;
  }
  v4 = (_QWORD *)*((_QWORD *)this + 12);
  if (v4)
  {
    v4[3] = 0;
    v4[4] = 0;
    return (_QWORD *)PelScoreCache::endPelScoreCacheSyncRecog(v4[15]);
  }
  return result;
}

_QWORD *PelScorer::deleteFeatureCache(PelScorer *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *result;

  *((_DWORD *)this + 38) = -16;
  *((_QWORD *)this + 34) = 0;
  *(_QWORD *)((char *)this + 284) = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 37);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((_QWORD *)this + 37) = 0;
  }
  *((_QWORD *)this + 38) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 39);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((_QWORD *)this + 39) = 0;
  }
  *((_QWORD *)this + 40) = 0;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 352);
  v4 = (_QWORD *)*((_QWORD *)this + 22);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((_QWORD *)this + 22) = 0;
  }
  *((_QWORD *)this + 23) = 0;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 368);
  v5 = (_QWORD *)*((_QWORD *)this + 48);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((_QWORD *)this + 48) = 0;
  }
  *((_QWORD *)this + 49) = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 50);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((_QWORD *)this + 50) = 0;
  }
  *((_QWORD *)this + 51) = 0;
  v7 = (_QWORD *)*((_QWORD *)this + 56);
  if (v7)
  {
    MemChunkFree(v7, 0);
    *((_QWORD *)this + 56) = 0;
  }
  *((_QWORD *)this + 57) = 0;
  v8 = (_QWORD *)*((_QWORD *)this + 52);
  if (v8)
  {
    MemChunkFree(v8, 0);
    *((_QWORD *)this + 52) = 0;
  }
  *((_QWORD *)this + 53) = 0;
  v9 = (_QWORD *)*((_QWORD *)this + 54);
  if (v9)
  {
    MemChunkFree(v9, 0);
    *((_QWORD *)this + 54) = 0;
  }
  *((_QWORD *)this + 55) = 0;
  v10 = (_QWORD *)*((_QWORD *)this + 73);
  if (v10)
  {
    MemChunkFree(v10, 0);
    *((_QWORD *)this + 73) = 0;
  }
  *((_QWORD *)this + 74) = 0;
  v11 = (_QWORD *)*((_QWORD *)this + 67);
  if (v11)
  {
    MemChunkFree(v11, 0);
    *((_QWORD *)this + 67) = 0;
  }
  *((_QWORD *)this + 68) = 0;
  v12 = (_QWORD *)*((_QWORD *)this + 69);
  if (v12)
  {
    MemChunkFree(v12, 0);
    *((_QWORD *)this + 69) = 0;
  }
  *((_QWORD *)this + 70) = 0;
  v13 = (_QWORD *)*((_QWORD *)this + 71);
  if (v13)
  {
    MemChunkFree(v13, 0);
    *((_QWORD *)this + 71) = 0;
  }
  *((_QWORD *)this + 72) = 0;
  result = (_QWORD *)*((_QWORD *)this + 78);
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *((_QWORD *)this + 78) = 0;
  }
  *((_QWORD *)this + 79) = 0;
  return result;
}

_QWORD *PelScorer::endFmpePelSyncRecog(PelScorer *this)
{
  _QWORD *result;

  result = PelScorer::deleteFeatureCache(this);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return result;
}

void PelScorer::initFeatureCacheForSlots(PelScorer *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  void *v36;
  size_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  void *v58;

  v2 = (_QWORD *)((char *)this + 352);
  v3 = *((unsigned int *)this + 71);
  v4 = *((_DWORD *)this + 91);
  if (v3 > v4)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 352, v3 - v4, 0);
  v5 = *((unsigned int *)this + 90);
  if (v5 <= v3)
  {
    if (v5 < v3)
    {
      v8 = v3 - v5;
      v9 = 16 * v5;
      do
      {
        v10 = (_QWORD *)(*v2 + v9);
        *v10 = 0;
        v10[1] = 0;
        v9 += 16;
        --v8;
      }
      while (v8);
    }
  }
  else if ((int)v5 > (int)v3)
  {
    v6 = (int)v5;
    v7 = 16 * (int)v5 - 16;
    do
    {
      --v6;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v2 + v7);
      v7 -= 16;
    }
    while (v6 > (int)v3);
  }
  *((_DWORD *)this + 90) = v3;
  v11 = (_QWORD *)((char *)this + 368);
  v12 = *((unsigned int *)this + 72);
  v13 = *((_DWORD *)this + 95);
  if (v12 > v13)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 368, v12 - v13, 0);
  v14 = *((unsigned int *)this + 94);
  if (v14 <= v12)
  {
    if (v14 < v12)
    {
      v17 = v12 - v14;
      v18 = 16 * v14;
      do
      {
        v19 = (_QWORD *)(*v11 + v18);
        *v19 = 0;
        v19[1] = 0;
        v18 += 16;
        --v17;
      }
      while (v17);
    }
  }
  else if ((int)v14 > (int)v12)
  {
    v15 = (int)v14;
    v16 = 16 * (int)v14 - 16;
    do
    {
      --v15;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v11 + v16);
      v16 -= 16;
    }
    while (v15 > (int)v12);
  }
  *((_DWORD *)this + 94) = v12;
  v20 = *((_DWORD *)this + 72);
  v21 = *((_DWORD *)this + 99);
  if (v20 > v21)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 384, v20 - v21, 0);
  *((_DWORD *)this + 98) = v20;
  v22 = *((unsigned int *)this + 71);
  if (*((_DWORD *)this + 103) >= v22)
  {
    *((_DWORD *)this + 102) = v22;
    if (!(_DWORD)v22)
      goto LABEL_27;
  }
  else
  {
    v58 = 0;
    *((_DWORD *)this + 103) = realloc_array(*((_QWORD **)this + 50), &v58, v22, *((unsigned int *)this + 102), *((unsigned int *)this + 102), 1);
    *((_QWORD *)this + 50) = v58;
    *((_DWORD *)this + 102) = v22;
  }
  bzero(*((void **)this + 50), v22);
LABEL_27:
  v23 = *((_DWORD *)this + 71);
  v24 = *((_DWORD *)this + 159);
  if (v23 > v24)
    DgnPrimArray<short>::reallocElts((uint64_t)this + 624, v23 - v24, 0);
  *((_DWORD *)this + 158) = v23;
  v25 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v25 + 16))
  {
    v26 = (*((_DWORD *)this + 29) + 1) & 0xFFFFFFFE;
    v27 = *(_DWORD *)(v25 + 12);
    if (v27 == 1)
    {
      v40 = *((_DWORD *)this + 71);
      v41 = ((((v26 + 7) | 7) + *((_DWORD *)this + 28)) | 7) * v40;
      v42 = *((_DWORD *)this + 149);
      if (v41 > v42)
      {
        DgnPrimArray<short>::reallocElts((uint64_t)this + 584, v41 - v42, 0);
        v40 = *((_DWORD *)this + 71);
      }
      *((_DWORD *)this + 148) = v41;
      *((_DWORD *)this + 150) = (((*((_DWORD *)this + 146) + 15) & 0xFFFFFFF0) - *((_DWORD *)this + 146)) >> 1;
      v43 = *((_DWORD *)this + 137);
      v44 = v40;
      if (v40 > v43)
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 536, v40 - v43, 0);
        v44 = *((_DWORD *)this + 71);
      }
      *((_DWORD *)this + 136) = v40;
      v45 = *((_DWORD *)this + 141);
      if (v44 > v45)
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 552, v44 - v45, 0);
      v46 = *((unsigned int *)this + 140);
      if (v46 < v44)
        bzero((void *)(*((_QWORD *)this + 69) + 4 * v46), 4 * (v44 + ~(_DWORD)v46) + 4);
      *((_DWORD *)this + 140) = v44;
      v47 = *((_DWORD *)this + 71);
      v48 = *((_DWORD *)this + 145);
      if (v47 > v48)
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 568, v47 - v48, 0);
      v49 = *((unsigned int *)this + 144);
      if (v49 < v47)
        bzero((void *)(*((_QWORD *)this + 71) + 4 * v49), 4 * (v47 + ~(_DWORD)v49) + 4);
      *((_DWORD *)this + 144) = v47;
    }
    else if (v27 == 2)
    {
      v28 = *((_DWORD *)this + 71);
      v29 = (*((_DWORD *)this + 28) + v26) * v28;
      v30 = *((_DWORD *)this + 115);
      if (v29 > v30)
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 448, v29 - v30, 0);
        v28 = *((_DWORD *)this + 71);
      }
      *((_DWORD *)this + 114) = v29;
      v31 = *((_DWORD *)this + 107);
      v32 = v28;
      if (v28 > v31)
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 416, v28 - v31, 0);
        v32 = *((_DWORD *)this + 71);
      }
      *((_DWORD *)this + 106) = v28;
      v33 = *((_DWORD *)this + 111);
      if (v32 > v33)
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 432, v32 - v33, 0);
      *((_DWORD *)this + 110) = v32;
    }
  }
  else
  {
    switch(*(_DWORD *)(v25 + 12))
    {
      case 0:
        v50 = *((_DWORD *)this + 71);
        v51 = *((_DWORD *)this + 28) * v50;
        v52 = *((_DWORD *)this + 129);
        if (v51 > v52)
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 504, v51 - v52, 0);
          v50 = *((_DWORD *)this + 71);
        }
        *((_DWORD *)this + 128) = v51;
        v53 = *((_DWORD *)this + 125);
        if (v50 > v53)
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 488, v50 - v53, 0);
        *((_DWORD *)this + 124) = v50;
        break;
      case 1:
      case 3:
        v34 = ((*((_DWORD *)this + 28) + 7) & 0xFFFFFFF8) * *((_DWORD *)this + 71);
        v35 = *((_DWORD *)this + 149);
        if ((v34 | 7) > v35)
          DgnPrimArray<short>::reallocElts((uint64_t)this + 584, (v34 | 7) - v35, 0);
        *((_DWORD *)this + 148) = v34 | 7;
        v36 = (void *)*((_QWORD *)this + 73);
        v37 = ((((_DWORD)v36 + 15) & 0xFFFFFFF0) - v36) >> 1;
        *((_DWORD *)this + 150) = v37;
        bzero(v36, v37);
        bzero((void *)(*((_QWORD *)this + 73) + 2 * v34), (7 - *((_DWORD *)this + 150)));
        v38 = *((_DWORD *)this + 71);
        v39 = *((_DWORD *)this + 137);
        if (v38 > v39)
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 536, v38 - v39, 0);
        *((_DWORD *)this + 136) = v38;
        break;
      case 2:
        v54 = *((_DWORD *)this + 71);
        v55 = *((_DWORD *)this + 28) * v54;
        v56 = *((_DWORD *)this + 115);
        if (v55 > v56)
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 448, v55 - v56, 0);
          v54 = *((_DWORD *)this + 71);
        }
        *((_DWORD *)this + 114) = v55;
        v57 = *((_DWORD *)this + 107);
        if (v54 > v57)
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 416, v54 - v57, 0);
        *((_DWORD *)this + 106) = v54;
        break;
      default:
        return;
    }
  }
}

uint64_t PelScorer::setupForUttAccumulate(unint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 16) != 1)
    return PelScorer::setFrameStaticsNoMic(a1, 0, a2, 0, 1);
  PelScorer::getMICFeatures(a1, (uint64_t *)a2, (_DWORD *)(a3 + 16));
  return PelScorer::setFrameStaticsMic(a1, 0, a2, (unsigned __int16 **)(a1 + 248), *(_DWORD *)(a1 + 264), 0, 1);
}

unint64_t PelScorer::getMICFeatures(unint64_t result, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  double v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  double v33;
  uint64_t v34;
  unsigned int v35;
  int UnscaleBits;
  int v37;
  int *v38;
  double *v39;
  _WORD *v40;
  uint64_t v41;
  int v42;
  double v43;
  double v44;
  _DWORD *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;

  v5 = result;
  v6 = *(_DWORD *)(result + 112);
  v7 = *(_QWORD *)(result + 16);
  v8 = *(unsigned int *)(v7 + 152);
  v9 = (v8 + 1) & 0xFFFFFFFE;
  v10 = *(_DWORD *)(result + 260);
  if (v9 > v10)
  {
    result = DgnPrimArray<short>::reallocElts(result + 248, v9 - v10, 0);
    v7 = *(_QWORD *)(v5 + 16);
  }
  *(_DWORD *)(v5 + 256) = v9;
  v11 = *(_DWORD *)(v7 + 12);
  if (v11 == 1)
  {
    result = PelScorer::MICFeaturesFunction(v5, a2);
  }
  else if (v11 == 2)
  {
    v50 = 0;
    v51 = 0;
    if ((_DWORD)v8)
    {
      v48 = 0;
      v12 = realloc_array(0, &v48, 8 * v8, 0, 0, 1);
      v49 = 0;
      v50 = v48;
      LODWORD(v51) = v8;
      HIDWORD(v51) = v12 >> 3;
      v48 = 0;
      v46 = 0;
      v13 = realloc_array(0, &v46, 4 * v8, 0, 0, 1);
      v47 = 0;
      v48 = v46;
      LODWORD(v49) = v8;
      HIDWORD(v49) = v13 >> 2;
      v45 = a3;
      v46 = 0;
      v52 = 0;
      v14 = realloc_array(0, &v52, 4 * v8, 0, 0, 1);
      v16 = 0;
      v17 = v6 + 3;
      v18 = (v6 + 3) & 0xFFFFFFFC;
      v19 = (v6 + 3) >> 2;
      v46 = v52;
      LODWORD(v47) = v8;
      HIDWORD(v47) = v14 >> 2;
      if (v19 <= 1)
        v20 = 1;
      else
        v20 = v19;
      v21 = *(_QWORD **)(v5 + 16);
      v22 = 32;
      do
      {
        v23 = v50;
        v50[v16] = 0;
        v24 = 0.0;
        if (v17 >= 4)
        {
          v25 = 0;
          v26 = 0;
          v27 = v21[25] + 24 * v16;
          v28 = v17 & 0xFFFFFFFC;
          v29 = 4 * v18;
          do
          {
            v30 = 0;
            v31 = *a2;
            v32 = v25;
            do
            {
              v33 = 0.0;
              if (4 * v26 < v18)
              {
                v34 = v28;
                v35 = v32;
                do
                {
                  LOBYTE(v15) = *(_BYTE *)(v31 + *(unsigned __int8 *)(v21[27] + v35));
                  v15 = (double)*(unint64_t *)&v15;
                  v33 = v33 + v15 * (double)*(__int16 *)(*(_QWORD *)v27 + 2 * (*(_DWORD *)(v27 + 16) + v35));
                  v35 += 4;
                  --v34;
                }
                while (v34);
              }
              v24 = v24 + v33 * v33;
              *(double *)&v23[v16] = v24;
              ++v30;
              ++v32;
            }
            while (v30 != 4);
            ++v26;
            v25 += v29;
            v29 -= 16;
            v28 -= 4;
          }
          while (v26 != v20);
        }
        UnscaleBits = BinaryIntScale::getUnscaleBits((BinaryIntScale *)(uint64_t)(v24 + 0.5), 14);
        *((_DWORD *)v48 + v16) = UnscaleBits;
        v21 = *(_QWORD **)(v5 + 16);
        v37 = 2 * *(_DWORD *)(v21[21] + 4 * v16) - UnscaleBits;
        *((_DWORD *)v46 + v16) = v37;
        if (v22 >= v37)
          v22 = v37;
        ++v16;
      }
      while (v16 != v8);
      v38 = *(int **)(*(_QWORD *)(v5 + 16) + 168);
      v39 = (double *)v50;
      v40 = *(_WORD **)(v5 + 248);
      v41 = v8;
      do
      {
        v42 = *v38++;
        v43 = 1.0 / (double)(1 << (2 * v42 - v22));
        v44 = *v39++;
        *v40++ = (int)(v43 * v44 + 0.5);
        --v41;
      }
      while (v41);
      a3 = v45;
    }
    else
    {
      v48 = 0;
      v49 = 0;
      v46 = 0;
      v22 = 32;
      v47 = 0;
    }
    *(_DWORD *)(v5 + 264) = v22;
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v46);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
    result = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v50);
  }
  *a3 += *(_DWORD *)(*(_QWORD *)(v5 + 16) + 156) * v8;
  return result;
}

void sub_209A26078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t PelScorer::setFrameStaticsMic(uint64_t result, unsigned int a2, unsigned __int8 **a3, unsigned __int16 **a4, int a5, int a6, int a7)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned int v39;
  __int16 v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v12 = result;
  if (a7)
  {
    v13 = *(_QWORD *)(result + 16);
    if (*(_WORD *)(v13 + 536))
    {
      result = FrameDecisionTree::classifyFrame((unsigned __int16 **)(v13 + 528), a3);
      *(_WORD *)(*(_QWORD *)(v12 + 624) + 2 * a2) = result;
      *(_WORD *)(v12 + 640) = result;
    }
  }
  v14 = *(_DWORD *)(v12 + 116) + 1;
  v15 = v14 & 0xFFFFFFFE;
  v16 = *(_DWORD *)(*(_QWORD *)(v12 + 16) + 12);
  if (v16 == 1)
  {
    v32 = *(unsigned int *)(v12 + 112);
    v33 = (v32 + 7) & 0xFFFFFFF8;
    v34 = ((_DWORD)v15 + 7) & 0xFFFFFFF8;
    v35 = *(_DWORD *)(v12 + 600);
    v36 = (v33 + v34) * a2;
    if ((_DWORD)v32)
    {
      v37 = *a3;
      v38 = *(_QWORD *)(v12 + 584);
      v39 = v35 + v36;
      result = *(unsigned int *)(v12 + 112);
      do
      {
        v40 = *v37++;
        *(_WORD *)(v38 + 2 * v39++) = v40;
        --result;
      }
      while (result);
    }
    if (v32 < v33)
    {
      v41 = *(_QWORD *)(v12 + 584);
      v42 = v32 + v35 + v36;
      v43 = v32 - v33;
      do
        *(_WORD *)(v41 + 2 * v42++) = 0;
      while (!__CFADD__(v43++, 1));
    }
    if ((_DWORD)v15)
    {
      v45 = *a4;
      v46 = *(_QWORD *)(v12 + 584);
      v47 = v35 + v36 + v33;
      v48 = v14 & 0xFFFFFFFE;
      do
      {
        v49 = *v45++;
        result = v49;
        *(_WORD *)(v46 + 2 * v47++) = v49;
        --v48;
      }
      while (v48);
    }
    if (v15 < v34)
    {
      v50 = *(_QWORD *)(v12 + 584);
      v51 = v35 + v36 + v33 + (v14 & 0xFFFFFFFE);
      v52 = v34 - v15;
      do
      {
        *(_WORD *)(v50 + 2 * v51++) = 0;
        --v52;
      }
      while (v52);
    }
    v53 = v36 + v35;
    v54 = *(_QWORD *)(v12 + 536);
    v29 = a2;
    *(_DWORD *)(v54 + 4 * a2) = a6;
    v55 = *(_QWORD *)(v12 + 552);
    if (a5 < 0)
    {
      *(_DWORD *)(v55 + 4 * a2) = 0;
      v56 = *(_QWORD *)(v12 + 568);
      *(_DWORD *)(v56 + 4 * a2) = -a5;
    }
    else
    {
      *(_DWORD *)(v55 + 4 * a2) = a5;
      v56 = *(_QWORD *)(v12 + 568);
      *(_DWORD *)(v56 + 4 * a2) = 0;
    }
    *(_QWORD *)(v12 + 616) = *(_QWORD *)(v12 + 584) + 2 * v53;
    *(_DWORD *)(v12 + 604) = *(_DWORD *)(v54 + 4 * a2);
    *(_DWORD *)(v12 + 608) = *(_DWORD *)(v55 + 4 * a2);
    *(_DWORD *)(v12 + 612) = *(_DWORD *)(v56 + 4 * a2);
  }
  else if (v16 == 2)
  {
    v17 = *(_DWORD *)(v12 + 112);
    v18 = (v17 + v15) * a2;
    if (v17)
    {
      v19 = *a3;
      v20 = *(_QWORD *)(v12 + 448);
      v21 = *(unsigned int *)(v12 + 112);
      v22 = (v17 + v15) * a2;
      do
      {
        v23 = *v19++;
        *(double *)(v20 + 8 * v22++) = (double)v23;
        --v21;
      }
      while (v21);
    }
    if ((_DWORD)v15)
    {
      v24 = *a4;
      v25 = *(_QWORD *)(v12 + 448);
      v26 = v17 + v18;
      do
      {
        v27 = *v24++;
        *(double *)(v25 + 8 * v26++) = (double)v27;
        --v15;
      }
      while (v15);
    }
    v28 = *(_QWORD *)(v12 + 416);
    v29 = a2;
    *(double *)(v28 + 8 * a2) = (double)a6;
    v30 = *(_QWORD *)(v12 + 432);
    if (a5 < 0)
      v31 = (double)(1 << -(char)a5);
    else
      v31 = 1.0 / (double)(1 << a5);
    *(double *)(v30 + 8 * a2) = v31;
    *(_QWORD *)(v12 + 480) = *(_QWORD *)(v12 + 448) + 8 * v18;
    *(_QWORD *)(v12 + 464) = *(_QWORD *)(v28 + 8 * a2);
    *(_QWORD *)(v12 + 472) = *(_QWORD *)(v30 + 8 * a2);
  }
  else
  {
    v29 = a2;
  }
  *(_BYTE *)(*(_QWORD *)(v12 + 400) + v29) = 1;
  return result;
}

uint64_t PelScorer::setFrameStaticsNoMic(uint64_t result, unsigned int a2, unsigned __int8 **a3, int a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  __int16 v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;

  v8 = result;
  if (a5)
  {
    v9 = *(_QWORD *)(result + 16);
    if (*(_WORD *)(v9 + 536))
    {
      result = FrameDecisionTree::classifyFrame((unsigned __int16 **)(v9 + 528), a3);
      *(_WORD *)(*(_QWORD *)(v8 + 624) + 2 * a2) = result;
      *(_WORD *)(v8 + 640) = result;
    }
  }
  switch(*(_DWORD *)(*(_QWORD *)(v8 + 16) + 12))
  {
    case 0:
      v25 = *(unsigned int *)(v8 + 112);
      v26 = v25 * a2;
      if ((_DWORD)v25)
      {
        v27 = 0;
        v28 = *(_QWORD *)(*(_QWORD *)(v8 + 80) + 56);
        do
        {
          *(_QWORD *)(*(_QWORD *)(v8 + 504) + 8 * (v26 + v27)) = v28 + 2 * (*a3)[v27];
          ++v27;
        }
        while (v25 != v27);
      }
      v24 = a2;
      *(_DWORD *)(*(_QWORD *)(v8 + 488) + 4 * a2) = a4;
      *(_QWORD *)(v8 + 528) = *(_QWORD *)(v8 + 504) + 8 * v26;
      *(_DWORD *)(v8 + 520) = a4;
      break;
    case 1:
    case 3:
      v10 = *(unsigned int *)(v8 + 112);
      v11 = (v10 + 7) & 0xFFFFFFF8;
      v12 = *(_DWORD *)(v8 + 600);
      v13 = v11 * a2;
      if ((_DWORD)v10)
      {
        v14 = *a3;
        v15 = *(_QWORD *)(v8 + 584);
        v16 = v12 + v13;
        v17 = *(unsigned int *)(v8 + 112);
        do
        {
          v18 = *v14++;
          *(_WORD *)(v15 + 2 * v16++) = v18;
          --v17;
        }
        while (v17);
      }
      v19 = v13 + v12;
      v20 = *(_QWORD *)(v8 + 584);
      if (v10 < v11)
      {
        v21 = v10 + v12 + v13;
        v22 = v10 - v11;
        do
          *(_WORD *)(v20 + 2 * v21++) = 0;
        while (!__CFADD__(v22++, 1));
      }
      v24 = a2;
      *(_DWORD *)(*(_QWORD *)(v8 + 536) + 4 * a2) = a4;
      *(_QWORD *)(v8 + 616) = v20 + 2 * v19;
      *(_DWORD *)(v8 + 604) = a4;
      break;
    case 2:
      v29 = *(unsigned int *)(v8 + 112);
      v30 = v29 * a2;
      if ((_DWORD)v29)
      {
        v31 = *a3;
        v32 = *(_QWORD *)(v8 + 448);
        v33 = v29 * a2;
        do
        {
          v34 = *v31++;
          *(double *)(v32 + 8 * v33++) = (double)v34;
          --v29;
        }
        while (v29);
      }
      else
      {
        v32 = *(_QWORD *)(v8 + 448);
      }
      v24 = a2;
      *(double *)(*(_QWORD *)(v8 + 416) + 8 * a2) = (double)a4;
      *(_QWORD *)(v8 + 480) = v32 + 8 * v30;
      *(double *)(v8 + 464) = (double)a4;
      break;
    default:
      v24 = a2;
      break;
  }
  *(_BYTE *)(*(_QWORD *)(v8 + 400) + v24) = 1;
  return result;
}

unint64_t PelScorer::beginPelFrameBase(uint64_t a1, int a2, int a3, uint64_t a4, PelStats *a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  PelScorer::resetFeatureCache(a1);
  *(_DWORD *)(a1 + 152) = a2;
  DgnPrimArray<unsigned char>::copyArraySlice(a1 + 160, (_QWORD *)a4, 0, *(_DWORD *)(a4 + 8));
  if (*(_DWORD *)(a1 + 284) <= 1u)
  {
    if (*(_QWORD *)(a1 + 24))
      PelScorer::setFrameStaticsForGenoneAdapt((PelScorer *)a1, 0, a3, a5, v12, v13, v14, v15);
    else
      (*(void (**)(uint64_t, _QWORD, PelStats *))(*(_QWORD *)a1 + 96))(a1, 0, a5);
  }
  return PelScoreCache::beginPelScoreCacheFrame(*(_QWORD *)(a1 + 120), *(_DWORD *)(a1 + 152), a6);
}

uint64_t PelScorer::resetFeatureCache(uint64_t this)
{
  uint64_t v1;
  _BYTE *v2;
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  v1 = *(unsigned int *)(this + 284);
  if ((_DWORD)v1)
  {
    v2 = *(_BYTE **)(this + 400);
    v3 = (_DWORD *)(*(_QWORD *)(this + 352) + 8);
    do
    {
      *v3 = 0;
      v3 += 4;
      *v2++ = 0;
      --v1;
    }
    while (v1);
  }
  *(_DWORD *)(this + 184) = 0;
  v4 = *(unsigned int *)(this + 288);
  if ((_DWORD)v4)
  {
    v5 = (_DWORD *)(*(_QWORD *)(this + 368) + 8);
    do
    {
      *v5 = 0;
      v5 += 4;
      --v4;
    }
    while (v4);
  }
  return this;
}

uint64_t PelScorer::setFrameStaticsForGenoneAdapt(PelScorer *this, unsigned int a2, int a3, PelStats *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v13;

  v9 = *(unsigned int *)(*((_QWORD *)this + 37) + 4 * a2);
  if (*(_BYTE *)(*((_QWORD *)this + 50) + v9))
  {
    v10 = *(_DWORD *)(*((_QWORD *)this + 2) + 12);
    if (*(_DWORD *)(*((_QWORD *)this + 2) + 16) == 1)
    {
      if (v10 == 1)
      {
        *((_QWORD *)this + 77) = *((_QWORD *)this + 73)
                               + 2
                               * (*((_DWORD *)this + 150)
                                + (((*((_DWORD *)this + 29) + 7) & 0xFFFFFFF8)
                                 + ((*((_DWORD *)this + 28) + 7) & 0xFFFFFFF8))
                                * v9);
        v13 = *(_DWORD *)(*((_QWORD *)this + 69) + 4 * v9);
        *((_DWORD *)this + 151) = *(_DWORD *)(*((_QWORD *)this + 67) + 4 * v9);
        *((_DWORD *)this + 152) = v13;
        *((_DWORD *)this + 153) = *(_DWORD *)(*((_QWORD *)this + 71) + 4 * v9);
      }
      else if (v10 == 2)
      {
        v11 = *(_QWORD *)(*((_QWORD *)this + 52) + 8 * v9);
        *((_QWORD *)this + 60) = *((_QWORD *)this + 56)
                               + 8 * ((*((_DWORD *)this + 29) + *((_DWORD *)this + 28)) * v9);
        *((_QWORD *)this + 58) = v11;
        *((_QWORD *)this + 59) = *(_QWORD *)(*((_QWORD *)this + 54) + 8 * v9);
      }
    }
    else
    {
      switch(v10)
      {
        case 0:
          *((_QWORD *)this + 66) = *((_QWORD *)this + 63) + 8 * (*((_DWORD *)this + 28) * v9);
          *((_DWORD *)this + 130) = *(_DWORD *)(*((_QWORD *)this + 61) + 4 * v9);
          break;
        case 1:
        case 3:
          *((_QWORD *)this + 77) = *((_QWORD *)this + 73)
                                 + 2
                                 * (*((_DWORD *)this + 150)
                                  + ((*((_DWORD *)this + 28) + 7) & 0xFFFFFFF8) * v9);
          *((_DWORD *)this + 151) = *(_DWORD *)(*((_QWORD *)this + 67) + 4 * v9);
          break;
        case 2:
          *((_QWORD *)this + 60) = *((_QWORD *)this + 56) + 8 * (*((_DWORD *)this + 28) * v9);
          *((_QWORD *)this + 58) = *(_QWORD *)(*((_QWORD *)this + 52) + 8 * v9);
          break;
        default:
          return *((_QWORD *)this + 44) + 16 * v9;
      }
    }
  }
  else
  {
    PelScorer::getTransformedFeatures_Adapt_Cache((uint64_t)this, a2, a3, *((_QWORD *)this + 44) + 16 * v9, a4, a6, a7, a8);
    if (*(_DWORD *)(*((_QWORD *)this + 2) + 16) == 1)
    {
      PelScorer::getMICFeatures((unint64_t)this, (uint64_t *)(*((_QWORD *)this + 44) + 16 * v9), (_DWORD *)a4 + 4);
      PelScorer::setFrameStaticsMic((uint64_t)this, v9, (unsigned __int8 **)(*((_QWORD *)this + 44) + 16 * v9), (unsigned __int16 **)this + 31, *((_DWORD *)this + 66), 0, 0);
    }
    else
    {
      PelScorer::setFrameStaticsNoMic((uint64_t)this, v9, (unsigned __int8 **)(*((_QWORD *)this + 44) + 16 * v9), 0, 0);
    }
  }
  return *((_QWORD *)this + 44) + 16 * v9;
}

double OnDemandPelScorer::endPelFrame(OnDemandPelScorer *this, int a2, PelStats *a3)
{
  return PelScoreCache::endPelScoreCacheFrame(*((PelScoreCache **)this + 15), *((_DWORD *)this + 38), a3);
}

float *(*OnDemandPelScorer::getGenoneScoringFunction(OnDemandPelScorer *this))(float *result, unsigned int a2, unsigned int a3, unsigned __int16 *a4, unsigned int *a5)
{
  uint64_t v1;
  int v2;
  float *(*result)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *);
  int v4;
  int v5;
  float *(*v6)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *);
  float *(*v7)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *);
  float *(*v8)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *);
  BOOL v9;
  float *(*v10)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *);
  float *(*v11)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *);

  v1 = *((_QWORD *)this + 2);
  v2 = *(_DWORD *)(v1 + 12);
  result = FloatGenoneScoringFunction;
  v4 = *(_DWORD *)(v1 + 16);
  v5 = *(unsigned __int16 *)(v1 + 536);
  switch(v2)
  {
    case 0:
      if (v5)
        v6 = (float *(*)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *))MulTableShortListGenoneScoringFunction;
      else
        v6 = (float *(*)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *))MulTableGenoneScoringFunction;
      goto LABEL_21;
    case 1:
      v7 = (float *(*)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *))PackedIntMICShortListGenoneScoringFunction;
      v9 = v5 == 0;
      v8 = (float *(*)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *))PackedIntShortListGenoneScoringFunction;
      if (v9)
      {
        v7 = (float *(*)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *))PackedIntMICGenoneScoringFunction;
        v8 = (float *(*)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *))PackedIntGenoneScoringFunction;
      }
      if (v4 == 1)
        result = v7;
      else
        result = v8;
      break;
    case 2:
      v9 = v5 == 0;
      if (v5)
        v10 = (float *(*)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *))FloatMICShortListGenoneScoringFunction;
      else
        v10 = (float *(*)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *))FloatMICGenoneScoringFunction;
      v11 = (float *(*)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *))FloatShortListGenoneScoringFunction;
      if (v9)
        v11 = FloatGenoneScoringFunction;
      if (v4 == 1)
        result = v10;
      else
        result = v11;
      break;
    case 3:
      if (v5)
        v6 = 0;
      else
        v6 = (float *(*)(float *, unsigned int, unsigned int, unsigned __int16 *, unsigned int *))QuantPerDimGenoneScoringFunction;
LABEL_21:
      if (v4 == 1)
        result = 0;
      else
        result = v6;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t MulTableShortListGenoneScoringFunction(uint64_t result, unsigned int a2, int a3, unsigned __int16 *a4, unsigned int *a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned __int16 *v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unsigned __int16 v31;

  v7 = result;
  v8 = *(_QWORD *)(result + 16);
  *a5 = 0;
  v9 = *(_DWORD *)(*(_QWORD *)(v8 + 584) + 4 * a2)
     + *(unsigned __int16 *)(*(_QWORD *)(v8 + 600)
                           + 2
                           * (*(unsigned __int16 *)(result + 640)
                            + ((*(unsigned __int16 *)(v8 + 536) + 1) >> 1) * a2))
     * a3;
  v10 = v9 + a3;
  if (v9 + a3 == -1)
    v10 = *(_DWORD *)(v8 + 576);
  if (v9 >= v10)
  {
    v11 = *(_DWORD *)(*(_QWORD *)(v8 + 584) + 4 * a2)
        + *(unsigned __int16 *)(*(_QWORD *)(v8 + 600)
                              + 2
                              * (*(unsigned __int16 *)(result + 640)
                               + ((*(unsigned __int16 *)(v8 + 536) + 1) >> 1) * a2))
        * a3;
    v12 = v10;
  }
  else
  {
    v11 = *(_DWORD *)(*(_QWORD *)(v8 + 584) + 4 * a2)
        + *(unsigned __int16 *)(*(_QWORD *)(v8 + 600)
                              + 2
                              * (*(unsigned __int16 *)(result + 640)
                               + ((*(unsigned __int16 *)(v8 + 536) + 1) >> 1) * a2))
        * a3;
    while (((*(_DWORD *)(*(_QWORD *)(v8 + 568) + 4 * (v11 >> 5)) >> v11) & 1) == 0)
    {
      if (++v11 >= v10)
        goto LABEL_33;
    }
    v12 = v11;
  }
  if (v11 < v10)
  {
    v13 = 0;
    while (1)
    {
      v14 = v12 - v9;
      v15 = *(unsigned int **)(v7 + 16);
      v16 = v15[33];
      result = PelMgr::getModelData((PelMgr *)v15, a2);
      v17 = v16 * v14;
      v18 = result + 2 * v17;
      v19 = *(_QWORD *)(v7 + 528);
      if ((v16 & 1) != 0)
      {
        if ((int)v16 < 1)
        {
LABEL_21:
          v29 = 0;
          goto LABEL_22;
        }
        v29 = 0;
        v30 = v16 + 1;
        do
        {
          v29 += *(__int16 *)(*(_QWORD *)(v19 + 8 * (v30 - 2))
                            + 2 * *(unsigned __int16 *)(v18 + 2 * (v30 - 2)));
          --v30;
        }
        while (v30 > 1);
      }
      else
      {
        if ((int)v16 < 2)
          goto LABEL_21;
        v20 = 0;
        v21 = 0;
        v22 = ((int)v16 >> 1) + 1;
        v23 = ((int)v16 >> 1) - 1;
        v24 = (unsigned __int16 *)(result + 2 * v17 + 2 * v23);
        v25 = (uint64_t *)(v19 + 8 * v23);
        v26 = 2 * ((int)v16 >> 1) - 1;
        do
        {
          v28 = *v25--;
          v27 = v28;
          LODWORD(v28) = *v24--;
          v21 += *(__int16 *)(v27 + 2 * v28);
          v20 += *(__int16 *)(*(_QWORD *)(v19 + 8 * v26) + 2 * *(unsigned __int16 *)(v18 + 2 * v26));
          --v22;
          --v26;
        }
        while (v22 > 1);
        v29 = v20 + v21;
      }
LABEL_22:
      ++v13;
      if (v29 >= 20000)
        v31 = 20000;
      else
        v31 = v29;
      a4[v14] = v31;
      if (++v11 >= v10)
      {
        v12 = v10;
      }
      else
      {
        while (((*(_DWORD *)(*(_QWORD *)(v8 + 568) + 4 * (v11 >> 5)) >> v11) & 1) == 0)
        {
          if (v10 == ++v11)
            goto LABEL_34;
        }
        v12 = v11;
      }
      if (v11 >= v10)
        goto LABEL_34;
    }
  }
LABEL_33:
  v13 = 0;
LABEL_34:
  *a5 = v13;
  return result;
}

uint64_t MulTableGenoneScoringFunction(uint64_t result, unsigned int a2, unsigned int a3, unsigned __int16 *a4, unsigned int *a5)
{
  uint64_t v9;
  uint64_t i;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned __int16 *v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unsigned __int16 v26;

  if (a3)
  {
    v9 = result;
    for (i = 0; i != a3; ++i)
    {
      v11 = *(unsigned int **)(v9 + 16);
      v12 = v11[33];
      result = PelMgr::getModelData((PelMgr *)v11, a2);
      v13 = result + 2 * (v12 * i);
      v14 = *(_QWORD *)(v9 + 528);
      if ((v12 & 1) != 0)
      {
        if ((int)v12 < 1)
        {
LABEL_12:
          v24 = 0;
          goto LABEL_13;
        }
        v24 = 0;
        v25 = v12 + 1;
        do
        {
          v24 += *(__int16 *)(*(_QWORD *)(v14 + 8 * (v25 - 2))
                            + 2 * *(unsigned __int16 *)(v13 + 2 * (v25 - 2)));
          --v25;
        }
        while (v25 > 1);
      }
      else
      {
        if ((int)v12 < 2)
          goto LABEL_12;
        v15 = 0;
        v16 = 0;
        v17 = ((int)v12 >> 1) + 1;
        v18 = ((int)v12 >> 1) - 1;
        v19 = (unsigned __int16 *)(result + 2 * (v12 * i) + 2 * v18);
        v20 = (uint64_t *)(v14 + 8 * v18);
        v21 = 2 * ((int)v12 >> 1) - 1;
        do
        {
          v23 = *v20--;
          v22 = v23;
          LODWORD(v23) = *v19--;
          v16 += *(__int16 *)(v22 + 2 * v23);
          v15 += *(__int16 *)(*(_QWORD *)(v14 + 8 * v21) + 2 * *(unsigned __int16 *)(v13 + 2 * v21));
          --v17;
          --v21;
        }
        while (v17 > 1);
        v24 = v15 + v16;
      }
LABEL_13:
      if (v24 >= 20000)
        v26 = 20000;
      else
        v26 = v24;
      a4[i] = v26;
    }
  }
  *a5 = a3;
  return result;
}

double *FloatMICShortListGenoneScoringFunction(double *result, unsigned int a2, int a3, unsigned __int16 *a4, unsigned int *a5)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double *v14;
  double v15;
  unsigned int v16;
  float *v17;
  double v18;
  double v19;
  int v20;
  double *v21;
  float v22;
  double v23;
  double v24;
  double *v25;
  int v26;
  float *v27;
  float v28;
  double v29;
  double v30;
  double v31;
  int v32;

  v5 = *((_QWORD *)result + 2);
  *a5 = 0;
  v6 = *(_DWORD *)(*(_QWORD *)(v5 + 584) + 4 * a2)
     + *(unsigned __int16 *)(*(_QWORD *)(v5 + 600)
                           + 2
                           * (*((unsigned __int16 *)result + 320)
                            + ((*(unsigned __int16 *)(v5 + 536) + 1) >> 1) * a2))
     * a3;
  v7 = v6 + a3;
  if (v6 + a3 == -1)
    v7 = *(_DWORD *)(v5 + 576);
  if (v6 >= v7)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(v5 + 584) + 4 * a2)
       + *(unsigned __int16 *)(*(_QWORD *)(v5 + 600)
                             + 2
                             * (*((unsigned __int16 *)result + 320)
                              + ((*(unsigned __int16 *)(v5 + 536) + 1) >> 1) * a2))
       * a3;
    v9 = v7;
  }
  else
  {
    v8 = *(_DWORD *)(*(_QWORD *)(v5 + 584) + 4 * a2)
       + *(unsigned __int16 *)(*(_QWORD *)(v5 + 600)
                             + 2
                             * (*((unsigned __int16 *)result + 320)
                              + ((*(unsigned __int16 *)(v5 + 536) + 1) >> 1) * a2))
       * a3;
    while (((*(_DWORD *)(*(_QWORD *)(v5 + 568) + 4 * (v8 >> 5)) >> v8) & 1) == 0)
    {
      if (++v8 >= v7)
        goto LABEL_33;
    }
    v9 = v8;
  }
  if (v8 < v7)
  {
    v10 = 0;
    v11 = *(unsigned int *)(v5 + 132);
    v12 = *(_DWORD *)(v5 + 152);
    v13 = *(_QWORD *)(v5 + 232)
        + *(unsigned int *)(v5 + 248)
        + *(unsigned int *)(*(_QWORD *)(v5 + 256) + 4 * a2)
        + 4 * v11;
    v14 = (double *)*((_QWORD *)result + 60);
    v15 = result[59];
    result = &v14[(v11 - 1) + 1];
    while (1)
    {
      v16 = v9 - v6;
      v17 = (float *)(v13 + 4 * (v12 + 2 * (_DWORD)v11 + 3) * v16);
      v18 = 0.0;
      v19 = 0.0;
      if ((_DWORD)v11)
        break;
      v25 = v14;
      if (v12)
        goto LABEL_18;
LABEL_21:
      ++v10;
      v31 = v19 + v15 * v18 + *v17 + 0.5;
      v32 = (int)v31 & ~((int)v31 >> 31);
      if (v32 >= 0xFFFF)
        v32 = 0xFFFF;
      if (v32 >= 20000)
        LOWORD(v32) = 20000;
      a4[v16] = v32;
      if (++v8 >= v7)
      {
        v9 = v7;
      }
      else
      {
        while (((*(_DWORD *)(*(_QWORD *)(v5 + 568) + 4 * (v8 >> 5)) >> v8) & 1) == 0)
        {
          if (v7 == ++v8)
            goto LABEL_34;
        }
        v9 = v8;
      }
      if (v8 >= v7)
        goto LABEL_34;
    }
    v20 = v11;
    v21 = v14;
    do
    {
      v22 = *v17++;
      v23 = v22;
      v24 = *v21++;
      v19 = v19 + v23 * v24;
      --v20;
    }
    while (v20);
    v25 = &v14[(v11 - 1) + 1];
    if (!v12)
      goto LABEL_21;
LABEL_18:
    v18 = 0.0;
    v26 = v12;
    v27 = v17;
    do
    {
      v28 = *v27++;
      v29 = v28;
      v30 = *v25++;
      v18 = v18 + v29 * v30;
      --v26;
    }
    while (v26);
    v17 += (v12 - 1) + 1;
    goto LABEL_21;
  }
LABEL_33:
  v10 = 0;
LABEL_34:
  *a5 = v10;
  return result;
}

uint64_t FloatMICGenoneScoringFunction(uint64_t result, unsigned int a2, unsigned int a3, unsigned __int16 *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double *v10;
  double v11;
  float *v12;
  double v13;
  double v14;
  int v15;
  double *v16;
  float v17;
  double v18;
  double v19;
  double *v20;
  int v21;
  float *v22;
  float v23;
  double v24;
  double v25;
  double v26;
  int v27;

  if (a3)
  {
    v5 = 0;
    v6 = *(_QWORD *)(result + 16);
    v7 = *(unsigned int *)(v6 + 132);
    v8 = *(_DWORD *)(v6 + 152);
    v9 = *(_QWORD *)(v6 + 232)
       + *(unsigned int *)(v6 + 248)
       + *(unsigned int *)(*(_QWORD *)(v6 + 256) + 4 * a2)
       + 4 * v7;
    v10 = *(double **)(result + 480);
    v11 = *(double *)(result + 472);
    result = 20000;
    while (1)
    {
      v12 = (float *)(v9 + 4 * ((v8 + 2 * v7 + 3) * v5));
      v13 = 0.0;
      v14 = 0.0;
      if ((_DWORD)v7)
        break;
      v20 = v10;
      if (v8)
        goto LABEL_9;
LABEL_12:
      v26 = v14 + v11 * v13 + *v12 + 0.5;
      v27 = (int)v26 & ~((int)v26 >> 31);
      if (v27 >= 0xFFFF)
        v27 = 0xFFFF;
      if (v27 >= 20000)
        LOWORD(v27) = 20000;
      a4[v5++] = v27;
      if (v5 == a3)
        goto LABEL_17;
    }
    v15 = v7;
    v16 = v10;
    do
    {
      v17 = *v12++;
      v18 = v17;
      v19 = *v16++;
      v14 = v14 + v18 * v19;
      --v15;
    }
    while (v15);
    v20 = &v10[(v7 - 1) + 1];
    if (!v8)
      goto LABEL_12;
LABEL_9:
    v13 = 0.0;
    v21 = v8;
    v22 = v12;
    do
    {
      v23 = *v22++;
      v24 = v23;
      v25 = *v20++;
      v13 = v13 + v24 * v25;
      --v21;
    }
    while (v21);
    v12 += (v8 - 1) + 1;
    goto LABEL_12;
  }
LABEL_17:
  *a5 = a3;
  return result;
}

uint64_t FloatShortListGenoneScoringFunction(uint64_t result, unsigned int a2, int a3, unsigned __int16 *a4, unsigned int *a5)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  float *v14;
  double v15;
  double *v16;
  uint64_t v17;
  float *v18;
  double v19;
  int v20;

  v5 = *(_QWORD *)(result + 16);
  *a5 = 0;
  v6 = *(_DWORD *)(*(_QWORD *)(v5 + 584) + 4 * a2)
     + *(unsigned __int16 *)(*(_QWORD *)(v5 + 600)
                           + 2
                           * (*(unsigned __int16 *)(result + 640)
                            + ((*(unsigned __int16 *)(v5 + 536) + 1) >> 1) * a2))
     * a3;
  v7 = v6 + a3;
  if (v6 + a3 == -1)
    v7 = *(_DWORD *)(v5 + 576);
  if (v6 >= v7)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(v5 + 584) + 4 * a2)
       + *(unsigned __int16 *)(*(_QWORD *)(v5 + 600)
                             + 2
                             * (*(unsigned __int16 *)(result + 640)
                              + ((*(unsigned __int16 *)(v5 + 536) + 1) >> 1) * a2))
       * a3;
    v9 = v7;
  }
  else
  {
    v8 = *(_DWORD *)(*(_QWORD *)(v5 + 584) + 4 * a2)
       + *(unsigned __int16 *)(*(_QWORD *)(v5 + 600)
                             + 2
                             * (*(unsigned __int16 *)(result + 640)
                              + ((*(unsigned __int16 *)(v5 + 536) + 1) >> 1) * a2))
       * a3;
    while (((*(_DWORD *)(*(_QWORD *)(v5 + 568) + 4 * (v8 >> 5)) >> v8) & 1) == 0)
    {
      if (++v8 >= v7)
        goto LABEL_27;
    }
    v9 = v8;
  }
  if (v8 >= v7)
  {
LABEL_27:
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = *(unsigned int *)(v5 + 132);
    v12 = *(_QWORD *)(v5 + 232) + *(unsigned int *)(v5 + 248) + *(unsigned int *)(*(_QWORD *)(v5 + 256) + 4 * a2);
    v13 = *(double **)(result + 480);
    do
    {
      result = v9 - v6;
      v14 = (float *)(v12 + 4 * ((2 * (_DWORD)v11) | 1) * result);
      v15 = 0.0;
      if ((_DWORD)v11)
      {
        v16 = v13;
        v17 = v11;
        do
        {
          v18 = v14 + 2;
          v19 = *v16++;
          v15 = v15 + (v19 - *v14) * (v19 - *v14) * v14[1];
          v14 += 2;
          --v17;
        }
        while (v17);
        v14 = v18;
      }
      ++v10;
      v20 = (int)(v15 + *v14 + 0.5);
      if (v20 >= 20000)
        LOWORD(v20) = 20000;
      a4[result] = v20;
      if (++v8 >= v7)
      {
        v9 = v7;
      }
      else
      {
        result = *(_QWORD *)(v5 + 568);
        while (((*(_DWORD *)(result + 4 * (v8 >> 5)) >> v8) & 1) == 0)
        {
          if (v7 == ++v8)
            goto LABEL_28;
        }
        v9 = v8;
      }
    }
    while (v8 < v7);
  }
LABEL_28:
  *a5 = v10;
  return result;
}

float *FloatGenoneScoringFunction(float *result, unsigned int a2, unsigned int a3, unsigned __int16 *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  float *v10;
  double v11;
  double *v12;
  uint64_t v13;
  double v14;
  int v15;

  if (a3)
  {
    v5 = 0;
    v6 = *((_QWORD *)result + 2);
    v7 = *(unsigned int *)(v6 + 132);
    v8 = *(_QWORD *)(v6 + 232) + *(unsigned int *)(v6 + 248) + *(unsigned int *)(*(_QWORD *)(v6 + 256) + 4 * a2);
    v9 = (double *)*((_QWORD *)result + 60);
    do
    {
      v10 = (float *)(v8 + 4 * ((2 * (_DWORD)v7) | 1) * v5);
      v11 = 0.0;
      if ((_DWORD)v7)
      {
        v12 = v9;
        v13 = v7;
        do
        {
          result = v10 + 2;
          v14 = *v12++;
          v11 = v11 + (v14 - *v10) * (v14 - *v10) * v10[1];
          v10 += 2;
          --v13;
        }
        while (v13);
        v10 = result;
      }
      v15 = (int)(v11 + *v10 + 0.5);
      if (v15 >= 20000)
        LOWORD(v15) = 20000;
      a4[v5++] = v15;
    }
    while (v5 != a3);
  }
  *a5 = a3;
  return result;
}

uint64_t PackedIntMICShortListGenoneScoringFunction(uint64_t this, unsigned int a2, int a3, unsigned __int16 *a4, unsigned int *a5)
{
  PelScorer *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;

  v7 = (PelScorer *)this;
  v8 = *(_QWORD *)(this + 16);
  v16 = *(_DWORD *)(*(_QWORD *)(v8 + 488) + 32);
  *a5 = 0;
  v9 = *(_DWORD *)(*(_QWORD *)(v8 + 584) + 4 * a2)
     + *(unsigned __int16 *)(*(_QWORD *)(v8 + 600)
                           + 2
                           * (*(unsigned __int16 *)(this + 640)
                            + ((*(unsigned __int16 *)(v8 + 536) + 1) >> 1) * a2))
     * a3;
  v10 = v9 + a3;
  if (v9 + a3 == -1)
    v10 = *(_DWORD *)(v8 + 576);
  if (v9 >= v10)
  {
    v11 = *(_DWORD *)(*(_QWORD *)(v8 + 584) + 4 * a2)
        + *(unsigned __int16 *)(*(_QWORD *)(v8 + 600)
                              + 2
                              * (*(unsigned __int16 *)(this + 640)
                               + ((*(unsigned __int16 *)(v8 + 536) + 1) >> 1) * a2))
        * a3;
    v12 = v10;
  }
  else
  {
    v11 = *(_DWORD *)(*(_QWORD *)(v8 + 584) + 4 * a2)
        + *(unsigned __int16 *)(*(_QWORD *)(v8 + 600)
                              + 2
                              * (*(unsigned __int16 *)(this + 640)
                               + ((*(unsigned __int16 *)(v8 + 536) + 1) >> 1) * a2))
        * a3;
    while (((*(_DWORD *)(*(_QWORD *)(v8 + 568) + 4 * (v11 >> 5)) >> v11) & 1) == 0)
    {
      if (++v11 >= v10)
        goto LABEL_22;
    }
    v12 = v11;
  }
  if (v11 >= v10)
  {
LABEL_22:
    v13 = 0;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = v12 - v9;
      ++v13;
      this = PelScorer::getPackedIntMICComponentScore(v7, a2, v12 - v9);
      v15 = (int)this >> v16;
      if ((int)this >> v16 >= 20000)
        LOWORD(v15) = 20000;
      a4[v14] = v15;
      if (++v11 >= v10)
      {
        v12 = v10;
      }
      else
      {
        while (((*(_DWORD *)(*(_QWORD *)(v8 + 568) + 4 * (v11 >> 5)) >> v11) & 1) == 0)
        {
          if (v10 == ++v11)
            goto LABEL_23;
        }
        v12 = v11;
      }
    }
    while (v11 < v10);
  }
LABEL_23:
  *a5 = v13;
  return this;
}

PelScorer *PackedIntMICGenoneScoringFunction(PelScorer *this, unsigned int a2, unsigned int a3, unsigned __int16 *a4, unsigned int *a5)
{
  PelScorer *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  if (a3)
  {
    v9 = this;
    v10 = 0;
    v11 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 488) + 32);
    do
    {
      v12 = v10 + 1;
      this = (PelScorer *)PelScorer::getPackedIntMICComponentScore(v9, a2, v10);
      v13 = (int)this >> v11;
      if ((int)this >> v11 >= 20000)
        LOWORD(v13) = 20000;
      a4[v10++] = v13;
    }
    while (a3 != v12);
  }
  *a5 = a3;
  return this;
}

uint64_t PackedIntShortListGenoneScoringFunction(uint64_t result, uint64_t a2, int a3, unsigned __int16 *a4, unsigned int *a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;

  v7 = result;
  v8 = *(_QWORD *)(result + 16);
  v16 = *(_DWORD *)(*(_QWORD *)(v8 + 488) + 32);
  *a5 = 0;
  v9 = *(_DWORD *)(*(_QWORD *)(v8 + 584) + 4 * a2)
     + *(unsigned __int16 *)(*(_QWORD *)(v8 + 600)
                           + 2
                           * (*(unsigned __int16 *)(result + 640)
                            + ((*(unsigned __int16 *)(v8 + 536) + 1) >> 1) * a2))
     * a3;
  v10 = v9 + a3;
  if (v9 + a3 == -1)
    v10 = *(_DWORD *)(v8 + 576);
  if (v9 >= v10)
  {
    v11 = *(_DWORD *)(*(_QWORD *)(v8 + 584) + 4 * a2)
        + *(unsigned __int16 *)(*(_QWORD *)(v8 + 600)
                              + 2
                              * (*(unsigned __int16 *)(result + 640)
                               + ((*(unsigned __int16 *)(v8 + 536) + 1) >> 1) * a2))
        * a3;
    v12 = v10;
  }
  else
  {
    v11 = *(_DWORD *)(*(_QWORD *)(v8 + 584) + 4 * a2)
        + *(unsigned __int16 *)(*(_QWORD *)(v8 + 600)
                              + 2
                              * (*(unsigned __int16 *)(result + 640)
                               + ((*(unsigned __int16 *)(v8 + 536) + 1) >> 1) * a2))
        * a3;
    while (((*(_DWORD *)(*(_QWORD *)(v8 + 568) + 4 * (v11 >> 5)) >> v11) & 1) == 0)
    {
      if (++v11 >= v10)
        goto LABEL_22;
    }
    v12 = v11;
  }
  if (v11 >= v10)
  {
LABEL_22:
    v13 = 0;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = v12 - v9;
      ++v13;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 80))(v7, a2, v14);
      v15 = (int)result >> v16;
      if ((int)result >> v16 >= 20000)
        LOWORD(v15) = 20000;
      a4[v14] = v15;
      if (++v11 >= v10)
      {
        v12 = v10;
      }
      else
      {
        while (((*(_DWORD *)(*(_QWORD *)(v8 + 568) + 4 * (v11 >> 5)) >> v11) & 1) == 0)
        {
          if (v10 == ++v11)
            goto LABEL_23;
        }
        v12 = v11;
      }
    }
    while (v11 < v10);
  }
LABEL_23:
  *a5 = v13;
  return result;
}

uint64_t PackedIntGenoneScoringFunction(uint64_t result, uint64_t a2, unsigned int a3, unsigned __int16 *a4, unsigned int *a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  if (a3)
  {
    v9 = result;
    v10 = 0;
    v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 488) + 32);
    do
    {
      v12 = v10 + 1;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, v10);
      v13 = (int)result >> v11;
      if ((int)result >> v11 >= 20000)
        LOWORD(v13) = 20000;
      a4[v10++] = v13;
    }
    while (a3 != v12);
  }
  *a5 = a3;
  return result;
}

uint64_t QuantPerDimGenoneScoringFunction(uint64_t result, uint64_t a2, unsigned int a3, unsigned __int16 *a4, unsigned int *a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  if (a3)
  {
    v9 = result;
    v10 = 0;
    v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 488) + 32);
    do
    {
      v12 = v10 + 1;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v9, a2, v10);
      v13 = (int)result >> v11;
      if ((int)result >> v11 >= 20000)
        LOWORD(v13) = 20000;
      a4[v10++] = v13;
    }
    while (a3 != v12);
  }
  *a5 = a3;
  return result;
}

uint64_t (*OnDemandPelScorer::getCompScoresToPelScoreFunction(OnDemandPelScorer *this))(const PelScorer *a1, unsigned int a2, const unsigned __int16 *a3, unsigned int *a4)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t (*result)(const PelScorer *, unsigned int, const unsigned __int16 *, unsigned int *);
  uint64_t (*v5)(const PelScorer *, unsigned int, const unsigned __int16 *, unsigned int *);

  v1 = *((_QWORD *)this + 2);
  v2 = *(_DWORD *)(v1 + 12);
  v3 = *(unsigned __int16 *)(v1 + 536);
  result = PackedIntCompScoresToPelScoreFunction;
  switch(v2)
  {
    case 0:
      if (v3)
        result = MulTableShortListCompScoresToPelScoreFunction;
      else
        result = MulTableCompScoresToPelScoreFunction;
      break;
    case 1:
      if (v3)
        result = PackedIntShortListCompScoresToPelScoreFunction;
      break;
    case 2:
      v5 = FloatCompScoresToPelScoreFunction;
      if (*(double *)(gParDiagnosticAttilaAcousticScoreScale + 48) != 0.0)
        v5 = (uint64_t (*)(const PelScorer *, unsigned int, const unsigned __int16 *, unsigned int *))FloatAttilaCompatibleCompScoresToPelScoreFunction;
      if (v3)
        result = FloatShortListCompScoresToPelScoreFunction;
      else
        result = v5;
      break;
    case 3:
      return result;
    default:
      result = FloatCompScoresToPelScoreFunction;
      break;
  }
  return result;
}

uint64_t FloatShortListCompScoresToPelScoreFunction(const PelScorer *a1, unsigned int a2, const unsigned __int16 *a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  double v21;
  int v22;

  v4 = *((_QWORD *)a1 + 2);
  v5 = (unsigned int *)(*(_QWORD *)(v4 + 456) + 4 * a2);
  v6 = *(_QWORD *)(v4 + 344);
  v7 = *v5;
  v8 = v5[1] - v7;
  v9 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 288) + 2 * a2);
  *a4 = 0;
  v10 = *(_DWORD *)(*(_QWORD *)(v4 + 584) + 4 * v9)
      + v8
      * *(unsigned __int16 *)(*(_QWORD *)(v4 + 600)
                            + 2
                            * (*((unsigned __int16 *)a1 + 320)
                             + ((*(unsigned __int16 *)(v4 + 536) + 1) >> 1) * v9));
  v11 = v10 + v8;
  if (v11 == -1)
    v11 = *(_DWORD *)(v4 + 576);
  if (v10 >= v11)
  {
    v12 = v10;
    v13 = v11;
  }
  else
  {
    v12 = v10;
    while (((*(_DWORD *)(*(_QWORD *)(v4 + 568) + 4 * (v12 >> 5)) >> v12) & 1) == 0)
    {
      if (++v12 >= v11)
        goto LABEL_31;
    }
    v13 = v12;
  }
  if (v12 >= v11)
  {
LABEL_31:
    v14 = 0;
    v18 = 20000;
  }
  else
  {
    v14 = 0;
    v15 = v6 + v7;
    v16 = 1;
    v17 = 20000;
    do
    {
      v18 = a3[v13 - v10] + *(unsigned __int8 *)(v15 + v13 - v10);
      if ((v16 & 1) == 0)
      {
        if (*((_BYTE *)a1 + 130))
        {
          if (v17 < v18)
            v18 = v17;
        }
        else
        {
          v20 = v18 - v17;
          v19 = v18 - v17 < 0;
          if (v18 >= v17)
            v18 = v17;
          if (v19)
            v20 = -v20;
          if (v20 < *(_DWORD *)(v4 + 512))
            v18 -= *(_DWORD *)(*(_QWORD *)(v4 + 504) + 4 * v20);
        }
      }
      ++v14;
      if (++v12 >= v11)
      {
        v13 = v11;
      }
      else
      {
        while (((*(_DWORD *)(*(_QWORD *)(v4 + 568) + 4 * (v12 >> 5)) >> v12) & 1) == 0)
        {
          if (v11 == ++v12)
            goto LABEL_32;
        }
        v13 = v12;
      }
      v16 = 0;
      v17 = v18;
    }
    while (v12 < v11);
  }
LABEL_32:
  v21 = *((double *)a1 + 58) + 0.5;
  *a4 = v14;
  v22 = v18 + (int)v21;
  if (v22 >= 20000)
    return 20000;
  else
    return v22;
}

uint64_t FloatAttilaCompatibleCompScoresToPelScoreFunction(const PelScorer *a1, unsigned int a2, const unsigned __int16 *a3, unsigned int *a4, double a5, double a6, double a7)
{
  double v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  double v12;
  long double v13;
  uint64_t v14;
  const unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v19;
  double v20;
  unsigned int v21;
  double v22;
  unint64_t v23;
  double v24;
  int v25;

  v8 = *(double *)(gParDiagnosticAttilaAcousticScoreScale + 48);
  v9 = *((_QWORD *)a1 + 2);
  v10 = (unsigned int *)(*(_QWORD *)(v9 + 456) + 4 * a2);
  v11 = *v10;
  LODWORD(v10) = v10[1];
  v12 = 0.0;
  v13 = 0.0;
  v14 = ((_DWORD)v10 - v11);
  if ((_DWORD)v10 != (_DWORD)v11)
  {
    v15 = a3;
    v16 = 0;
    v17 = (unsigned __int8 *)(*(_QWORD *)(v9 + 344) + v11);
    do
    {
      LOBYTE(a6) = v17[v16];
      LOWORD(a7) = a3[v16];
      a7 = (double)*(unint64_t *)&a7;
      a6 = ((double)*(unint64_t *)&a6 + a7) / *((double *)a1 + 13);
      if (a6 < v12 || v16 == 0)
        v12 = a6;
      ++v16;
    }
    while (v14 != v16);
    v13 = 0.0;
    do
    {
      v19 = *v17++;
      v20 = (double)v19;
      v21 = *v15++;
      v22 = (v20 + (double)v21) / *((double *)a1 + 13);
      if (v22 - v12 <= 50.0)
        v13 = v13 + DgnExp(v12 - v22);
      --v14;
    }
    while (v14);
  }
  *(double *)&v23 = DgnLog(v13);
  v24 = v12 - *(double *)&v23;
  LODWORD(v23) = *(_DWORD *)(v9 + 132);
  v25 = (int)(v8 * (v24 + (double)v23 * DgnLog(12.5663706)) + 0.5) + (int)(*((double *)a1 + 58) + 0.5);
  if (v25 >= 20000)
    return 20000;
  else
    return v25;
}

uint64_t FloatCompScoresToPelScoreFunction(const PelScorer *a1, unsigned int a2, const unsigned __int16 *a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  char v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;

  v4 = *((_QWORD *)a1 + 2);
  v5 = (unsigned int *)(*(_QWORD *)(v4 + 456) + 4 * a2);
  v6 = *v5;
  v7 = v5[1] - v6;
  if ((_DWORD)v7)
  {
    v9 = (unsigned __int8 *)(*(_QWORD *)(v4 + 344) + v6);
    v8 = 20000;
    v10 = 1;
    v11 = v7;
    do
    {
      v12 = v8;
      v14 = *v9++;
      v13 = v14;
      v15 = *a3++;
      v8 = v15 + v13;
      if ((v10 & 1) == 0)
      {
        if (*((_BYTE *)a1 + 130))
        {
          if (v12 < v8)
            v8 = v12;
        }
        else
        {
          v17 = v8 - v12;
          v16 = v8 - v12 < 0;
          if (v8 >= v12)
            v8 = v12;
          if (v16)
            v17 = -v17;
          if (v17 < *(_DWORD *)(v4 + 512))
            v8 -= *(_DWORD *)(*(_QWORD *)(v4 + 504) + 4 * v17);
        }
      }
      v10 = 0;
      --v11;
    }
    while (v11);
  }
  else
  {
    v8 = 20000;
  }
  *a4 = v7;
  v18 = v8 + (int)(*((double *)a1 + 58) + 0.5);
  if (v18 >= 20000)
    return 20000;
  else
    return v18;
}

uint64_t MulTableShortListCompScoresToPelScoreFunction(const PelScorer *a1, unsigned int a2, const unsigned __int16 *a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;

  v4 = *((_QWORD *)a1 + 2);
  v5 = (unsigned int *)(*(_QWORD *)(v4 + 456) + 4 * a2);
  v6 = *(_QWORD *)(v4 + 344);
  v7 = *v5;
  v8 = v5[1] - v7;
  v9 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 288) + 2 * a2);
  *a4 = 0;
  v10 = *(_DWORD *)(*(_QWORD *)(v4 + 584) + 4 * v9)
      + v8
      * *(unsigned __int16 *)(*(_QWORD *)(v4 + 600)
                            + 2
                            * (*((unsigned __int16 *)a1 + 320)
                             + ((*(unsigned __int16 *)(v4 + 536) + 1) >> 1) * v9));
  v11 = v10 + v8;
  if (v11 == -1)
    v11 = *(_DWORD *)(v4 + 576);
  if (v10 >= v11)
  {
    v12 = v10;
    v13 = v11;
  }
  else
  {
    v12 = v10;
    while (((*(_DWORD *)(*(_QWORD *)(v4 + 568) + 4 * (v12 >> 5)) >> v12) & 1) == 0)
    {
      if (++v12 >= v11)
        goto LABEL_31;
    }
    v13 = v12;
  }
  if (v12 >= v11)
  {
LABEL_31:
    v14 = 0;
    v18 = 20000;
  }
  else
  {
    v14 = 0;
    v15 = v6 + v7;
    v16 = 1;
    v17 = 20000;
    do
    {
      v18 = a3[v13 - v10] + *(unsigned __int8 *)(v15 + v13 - v10);
      if ((v16 & 1) == 0)
      {
        if (*((_BYTE *)a1 + 130))
        {
          if (v17 < v18)
            v18 = v17;
        }
        else
        {
          v20 = v18 - v17;
          v19 = v18 - v17 < 0;
          if (v18 >= v17)
            v18 = v17;
          if (v19)
            v20 = -v20;
          if (v20 < *(_DWORD *)(v4 + 512))
            v18 -= *(_DWORD *)(*(_QWORD *)(v4 + 504) + 4 * v20);
        }
      }
      ++v14;
      if (++v12 >= v11)
      {
        v13 = v11;
      }
      else
      {
        while (((*(_DWORD *)(*(_QWORD *)(v4 + 568) + 4 * (v12 >> 5)) >> v12) & 1) == 0)
        {
          if (v11 == ++v12)
            goto LABEL_32;
        }
        v13 = v12;
      }
      v16 = 0;
      v17 = v18;
    }
    while (v12 < v11);
  }
LABEL_32:
  *a4 = v14;
  v21 = *((_DWORD *)a1 + 130) + v18;
  if (v21 >= 20000)
    return 20000;
  else
    return v21;
}

uint64_t MulTableCompScoresToPelScoreFunction(const PelScorer *a1, unsigned int a2, const unsigned __int16 *a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  char v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;

  v4 = *((_QWORD *)a1 + 2);
  v5 = (unsigned int *)(*(_QWORD *)(v4 + 456) + 4 * a2);
  v6 = *v5;
  v7 = v5[1] - v6;
  if ((_DWORD)v7)
  {
    v9 = (unsigned __int8 *)(*(_QWORD *)(v4 + 344) + v6);
    v8 = 20000;
    v10 = 1;
    v11 = v7;
    do
    {
      v12 = v8;
      v14 = *v9++;
      v13 = v14;
      v15 = *a3++;
      v8 = v15 + v13;
      if ((v10 & 1) == 0)
      {
        if (*((_BYTE *)a1 + 130))
        {
          if (v12 < v8)
            v8 = v12;
        }
        else
        {
          v17 = v8 - v12;
          v16 = v8 - v12 < 0;
          if (v8 >= v12)
            v8 = v12;
          if (v16)
            v17 = -v17;
          if (v17 < *(_DWORD *)(v4 + 512))
            v8 -= *(_DWORD *)(*(_QWORD *)(v4 + 504) + 4 * v17);
        }
      }
      v10 = 0;
      --v11;
    }
    while (v11);
  }
  else
  {
    v8 = 20000;
  }
  *a4 = v7;
  v18 = *((_DWORD *)a1 + 130) + v8;
  if (v18 >= 20000)
    return 20000;
  else
    return v18;
}

uint64_t PackedIntShortListCompScoresToPelScoreFunction(const PelScorer *a1, unsigned int a2, const unsigned __int16 *a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;

  v4 = *((_QWORD *)a1 + 2);
  v5 = (unsigned int *)(*(_QWORD *)(v4 + 456) + 4 * a2);
  v6 = *(_QWORD *)(v4 + 360);
  v7 = *v5;
  v8 = v5[1] - v7;
  v9 = *(_DWORD *)(*(_QWORD *)(v4 + 488) + 32);
  v10 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 288) + 2 * a2);
  *a4 = 0;
  v11 = *(_DWORD *)(*(_QWORD *)(v4 + 584) + 4 * v10)
      + v8
      * *(unsigned __int16 *)(*(_QWORD *)(v4 + 600)
                            + 2
                            * (*((unsigned __int16 *)a1 + 320)
                             + ((*(unsigned __int16 *)(v4 + 536) + 1) >> 1) * v10));
  v12 = v11 + v8;
  if (v12 == -1)
    v12 = *(_DWORD *)(v4 + 576);
  if (v11 >= v12)
  {
    v13 = v11;
    v14 = v12;
  }
  else
  {
    v13 = v11;
    while (((*(_DWORD *)(*(_QWORD *)(v4 + 568) + 4 * (v13 >> 5)) >> v13) & 1) == 0)
    {
      if (++v13 >= v12)
        goto LABEL_31;
    }
    v14 = v13;
  }
  if (v13 >= v12)
  {
LABEL_31:
    v15 = 0;
    v19 = 20000;
  }
  else
  {
    v15 = 0;
    v16 = 1;
    v17 = 20000;
    v18 = v6 + 4 * v7;
    do
    {
      v19 = (*(int *)(v18 + 4 * (v14 - v11)) >> v9) + a3[v14 - v11];
      if ((v16 & 1) == 0)
      {
        if (*((_BYTE *)a1 + 130))
        {
          if (v17 < v19)
            v19 = v17;
        }
        else
        {
          v21 = v19 - v17;
          v20 = v19 - v17 < 0;
          if (v19 >= v17)
            v19 = v17;
          if (v20)
            v21 = -v21;
          if (v21 < *(_DWORD *)(v4 + 512))
            v19 -= *(_DWORD *)(*(_QWORD *)(v4 + 504) + 4 * v21);
        }
      }
      ++v15;
      if (++v13 >= v12)
      {
        v14 = v12;
      }
      else
      {
        while (((*(_DWORD *)(*(_QWORD *)(v4 + 568) + 4 * (v13 >> 5)) >> v13) & 1) == 0)
        {
          if (v12 == ++v13)
            goto LABEL_32;
        }
        v14 = v13;
      }
      v16 = 0;
      v17 = v19;
    }
    while (v13 < v12);
  }
LABEL_32:
  *a4 = v15;
  v22 = *((_DWORD *)a1 + 151) + v19;
  if (v22 >= 20000)
    return 20000;
  else
    return v22;
}

uint64_t PackedIntCompScoresToPelScoreFunction(const PelScorer *a1, unsigned int a2, const unsigned __int16 *a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  char v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;

  v4 = *((_QWORD *)a1 + 2);
  v5 = (unsigned int *)(*(_QWORD *)(v4 + 456) + 4 * a2);
  v6 = *v5;
  v7 = v5[1] - v6;
  if ((_DWORD)v7)
  {
    v9 = (int *)(*(_QWORD *)(v4 + 360) + 4 * v6);
    v8 = 20000;
    v10 = 1;
    v11 = v7;
    do
    {
      v12 = v8;
      v13 = *v9++;
      v14 = v13 >> *(_DWORD *)(*(_QWORD *)(v4 + 488) + 32);
      v15 = *a3++;
      v8 = v14 + v15;
      if ((v10 & 1) == 0)
      {
        if (*((_BYTE *)a1 + 130))
        {
          if (v12 < v8)
            v8 = v12;
        }
        else
        {
          v17 = v8 - v12;
          v16 = v8 - v12 < 0;
          if (v8 >= v12)
            v8 = v12;
          if (v16)
            v17 = -v17;
          if (v17 < *(_DWORD *)(v4 + 512))
            v8 -= *(_DWORD *)(*(_QWORD *)(v4 + 504) + 4 * v17);
        }
      }
      v10 = 0;
      --v11;
    }
    while (v11);
  }
  else
  {
    v8 = 20000;
  }
  *a4 = v7;
  v18 = *((_DWORD *)a1 + 151) + v8;
  if (v18 >= 20000)
    return 20000;
  else
    return v18;
}

uint64_t (*OnDemandPelScorer::getPelScoringFunction(OnDemandPelScorer *this))(const PelScorer *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t (*result)(const PelScorer *, unsigned int, unsigned int *);
  uint64_t (*v6)(const PelScorer *, unsigned int, unsigned int *);
  BOOL v7;
  uint64_t (*v8)(const PelScorer *, unsigned int, unsigned int *);
  uint64_t (*v9)(const PelScorer *, unsigned int, unsigned int *);

  v1 = *((_QWORD *)this + 2);
  v2 = *(_DWORD *)(v1 + 12);
  v3 = *(_DWORD *)(v1 + 16);
  v4 = *(unsigned __int16 *)(v1 + 536);
  result = QuantPerDimPelScoringFunction;
  switch(v2)
  {
    case 0:
      if (v4)
        result = MulTableShortListPelScoringFunction;
      else
        result = MulTablePelScoringFunction;
      break;
    case 1:
      v6 = PackedIntMICShortListPelScoringFunction;
      v7 = v4 == 0;
      v8 = PackedIntShortListPelScoringFunction;
      if (v7)
        v6 = PackedIntMICPelScoringFunction;
      v9 = PackedIntPelScoringFunction;
      goto LABEL_12;
    case 2:
      v6 = FloatMICShortListPelScoringFunction;
      v7 = v4 == 0;
      v8 = FloatShortListPelScoringFunction;
      if (v7)
        v6 = FloatMICPelScoringFunction;
      v9 = FloatPelScoringFunction;
LABEL_12:
      if (v7)
        v8 = v9;
      if (v3 == 1)
        result = v6;
      else
        result = v8;
      break;
    case 3:
      return result;
    default:
      result = FloatPelScoringFunction;
      break;
  }
  return result;
}

uint64_t FloatMICShortListPelScoringFunction(const PelScorer *a1, unsigned int a2, unsigned int *a3)
{
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  void *v17;

  v6 = 0;
  v7 = *((_QWORD *)a1 + 2);
  v8 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 288) + 2 * a2);
  v11 = (int *)(*(_QWORD *)(v7 + 272) + 4 * v8);
  v9 = *v11;
  v10 = v11[1];
  v15 = 0;
  v16 = 0;
  v12 = v10 - v9;
  if (v10 != v9)
  {
    v17 = 0;
    HIDWORD(v16) = realloc_array(0, &v17, 2 * (v10 - v9), 0, 0, 1) >> 1;
    v6 = (unsigned __int16 *)v17;
    v15 = v17;
  }
  LODWORD(v16) = v12;
  FloatMICShortListGenoneScoringFunction((double *)a1, v8, v12, v6, a3);
  v13 = FloatShortListCompScoresToPelScoreFunction(a1, a2, v6, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
  return v13;
}

uint64_t FloatMICPelScoringFunction(const PelScorer *a1, unsigned int a2, unsigned int *a3)
{
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int *v11;
  unsigned int v12;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  void *v17;

  v6 = 0;
  v7 = *((_QWORD *)a1 + 2);
  v8 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 288) + 2 * a2);
  v11 = (int *)(*(_QWORD *)(v7 + 272) + 4 * v8);
  v9 = *v11;
  v10 = v11[1];
  v15 = 0;
  v16 = 0;
  v12 = v10 - v9;
  if (v10 != v9)
  {
    v17 = 0;
    HIDWORD(v16) = realloc_array(0, &v17, 2 * (v10 - v9), 0, 0, 1) >> 1;
    v6 = (unsigned __int16 *)v17;
    v15 = v17;
  }
  LODWORD(v16) = v12;
  FloatMICGenoneScoringFunction((uint64_t)a1, v8, v12, v6, a3);
  v13 = FloatCompScoresToPelScoreFunction(a1, a2, v6, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
  return v13;
}

uint64_t FloatShortListPelScoringFunction(const PelScorer *a1, unsigned int a2, unsigned int *a3)
{
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  void *v17;

  v6 = 0;
  v7 = *((_QWORD *)a1 + 2);
  v8 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 288) + 2 * a2);
  v11 = (int *)(*(_QWORD *)(v7 + 272) + 4 * v8);
  v9 = *v11;
  v10 = v11[1];
  v15 = 0;
  v16 = 0;
  v12 = v10 - v9;
  if (v10 != v9)
  {
    v17 = 0;
    HIDWORD(v16) = realloc_array(0, &v17, 2 * (v10 - v9), 0, 0, 1) >> 1;
    v6 = (unsigned __int16 *)v17;
    v15 = v17;
  }
  LODWORD(v16) = v12;
  FloatShortListGenoneScoringFunction((uint64_t)a1, v8, v12, v6, a3);
  v13 = FloatShortListCompScoresToPelScoreFunction(a1, a2, v6, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
  return v13;
}

uint64_t FloatPelScoringFunction(const PelScorer *a1, unsigned int a2, unsigned int *a3)
{
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int *v11;
  unsigned int v12;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  void *v17;

  v6 = 0;
  v7 = *((_QWORD *)a1 + 2);
  v8 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 288) + 2 * a2);
  v11 = (int *)(*(_QWORD *)(v7 + 272) + 4 * v8);
  v9 = *v11;
  v10 = v11[1];
  v15 = 0;
  v16 = 0;
  v12 = v10 - v9;
  if (v10 != v9)
  {
    v17 = 0;
    HIDWORD(v16) = realloc_array(0, &v17, 2 * (v10 - v9), 0, 0, 1) >> 1;
    v6 = (unsigned __int16 *)v17;
    v15 = v17;
  }
  LODWORD(v16) = v12;
  FloatGenoneScoringFunction((float *)a1, v8, v12, v6, a3);
  v13 = FloatCompScoresToPelScoreFunction(a1, a2, v6, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
  return v13;
}

uint64_t MulTableShortListPelScoringFunction(const PelScorer *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v13;
  int v14;
  int v15;
  unsigned __int16 *v16;

  v6 = *((_QWORD *)a1 + 2);
  v7 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 288) + 2 * a2);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 272) + 4 * *(unsigned __int16 *)(*(_QWORD *)(v6 + 288) + 2 * a2));
  v9 = HIDWORD(v8) - v8;
  v16 = 0;
  v10 = realloc_array(0, (void **)&v16, 2 * (HIDWORD(v8) - v8), 0, 0, 1);
  v13 = v16;
  v14 = v9;
  v15 = v10 >> 1;
  MulTableShortListGenoneScoringFunction((uint64_t)a1, v7, v9, v16, a3);
  v11 = MulTableShortListCompScoresToPelScoreFunction(a1, a2, v13, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v13);
  return v11;
}

void sub_209A283B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MulTablePelScoringFunction(const PelScorer *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v13;
  unsigned int v14;
  int v15;
  unsigned __int16 *v16;

  v6 = *((_QWORD *)a1 + 2);
  v7 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 288) + 2 * a2);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 272) + 4 * *(unsigned __int16 *)(*(_QWORD *)(v6 + 288) + 2 * a2));
  v9 = HIDWORD(v8) - v8;
  v16 = 0;
  v10 = realloc_array(0, (void **)&v16, 2 * (HIDWORD(v8) - v8), 0, 0, 1);
  v13 = v16;
  v14 = v9;
  v15 = v10 >> 1;
  MulTableGenoneScoringFunction((uint64_t)a1, v7, v9, v16, a3);
  v11 = MulTableCompScoresToPelScoreFunction(a1, a2, v13, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v13);
  return v11;
}

void sub_209A28494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PackedIntMICShortListPelScoringFunction(const PelScorer *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  unsigned int v16;
  int PackedIntMICComponentScore;
  int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v24;
  int v26;
  int v27;

  v4 = *((_QWORD *)this + 2);
  v5 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 288) + 2 * a2);
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 272) + 4 * v5 + 4) - *(_DWORD *)(*(_QWORD *)(v4 + 272) + 4 * v5);
  v7 = *(unsigned int *)(*(_QWORD *)(v4 + 456) + 4 * a2);
  v8 = *(_QWORD *)(v4 + 360);
  v27 = *((unsigned __int8 *)this + 131);
  v26 = *(_DWORD *)(*(_QWORD *)(v4 + 488) + 32);
  *a3 = 0;
  v9 = *(_DWORD *)(*(_QWORD *)(v4 + 584) + 4 * v5)
     + v6
     * *(unsigned __int16 *)(*(_QWORD *)(v4 + 600)
                           + 2
                           * (*((unsigned __int16 *)this + 320)
                            + ((*(unsigned __int16 *)(v4 + 536) + 1) >> 1) * v5));
  v10 = v9 + v6;
  if (v9 + v6 == -1)
    v10 = *(_DWORD *)(v4 + 576);
  if (v9 >= v10)
  {
    v11 = *(_DWORD *)(*(_QWORD *)(v4 + 584) + 4 * v5)
        + v6
        * *(unsigned __int16 *)(*(_QWORD *)(v4 + 600)
                              + 2
                              * (*((unsigned __int16 *)this + 320)
                               + ((*(unsigned __int16 *)(v4 + 536) + 1) >> 1) * v5));
    v12 = v10;
  }
  else
  {
    v11 = *(_DWORD *)(*(_QWORD *)(v4 + 584) + 4 * v5)
        + v6
        * *(unsigned __int16 *)(*(_QWORD *)(v4 + 600)
                              + 2
                              * (*((unsigned __int16 *)this + 320)
                               + ((*(unsigned __int16 *)(v4 + 536) + 1) >> 1) * v5));
    while (((*(_DWORD *)(*(_QWORD *)(v4 + 568) + 4 * (v11 >> 5)) >> v11) & 1) == 0)
    {
      if (++v11 >= v10)
        goto LABEL_34;
    }
    v12 = v11;
  }
  if (v11 < v10)
  {
    v13 = 0;
    v14 = 20000;
    v15 = 1;
    v24 = v8 + 4 * v7;
    while (1)
    {
      v16 = v12 - v9;
      PackedIntMICComponentScore = PelScorer::getPackedIntMICComponentScore(this, v5, v12 - v9);
      if (v27)
      {
        v18 = (*(int *)(v24 + 4 * v16) >> v26) + (PackedIntMICComponentScore >> v26);
        if ((v15 & 1) == 0)
          goto LABEL_16;
      }
      else
      {
        v18 = (*(_DWORD *)(v24 + 4 * v16) + PackedIntMICComponentScore) >> v26;
        if ((v15 & 1) == 0)
        {
LABEL_16:
          if (*((_BYTE *)this + 130))
          {
            if (v14 >= v18)
              v14 = v18;
          }
          else
          {
            v20 = v18 - v14;
            v19 = v18 - v14 < 0;
            if (v18 < v14)
              v14 = v18;
            if (v19)
              v21 = -v20;
            else
              v21 = v20;
            if (v21 < *(_DWORD *)(v4 + 512))
              v14 -= *(_DWORD *)(*(_QWORD *)(v4 + 504) + 4 * v21);
          }
          goto LABEL_26;
        }
      }
      v14 = v18;
LABEL_26:
      ++v13;
      if (++v11 >= v10)
      {
        v12 = v10;
      }
      else
      {
        while (((*(_DWORD *)(*(_QWORD *)(v4 + 568) + 4 * (v11 >> 5)) >> v11) & 1) == 0)
        {
          if (v10 == ++v11)
            goto LABEL_35;
        }
        v12 = v11;
      }
      v15 = 0;
      if (v11 >= v10)
        goto LABEL_35;
    }
  }
LABEL_34:
  v13 = 0;
  v14 = 20000;
LABEL_35:
  *a3 = v13;
  v22 = *((_DWORD *)this + 151) + v14;
  if (v22 >= 20000)
    return 20000;
  else
    return v22;
}

uint64_t PackedIntMICPelScoringFunction(const PelScorer *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  int PackedIntMICComponentScore;
  int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int *v22;

  v4 = *((_QWORD *)this + 2);
  v5 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 288) + 2 * a2);
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 272) + 4 * v5);
  v7 = *(_DWORD *)(*(_QWORD *)(v4 + 272) + 4 * v5 + 4);
  v8 = (v7 - v6);
  if (v7 == v6)
  {
    v9 = 20000;
    goto LABEL_20;
  }
  v22 = a3;
  v10 = 0;
  v11 = *(_QWORD *)(v4 + 360) + 4 * *(unsigned int *)(*(_QWORD *)(v4 + 456) + 4 * a2);
  v12 = *((unsigned __int8 *)this + 131);
  v13 = *(_DWORD *)(*(_QWORD *)(v4 + 488) + 32);
  v9 = 20000;
  v14 = 1;
  do
  {
    PackedIntMICComponentScore = PelScorer::getPackedIntMICComponentScore(this, v5, v10);
    if (v12)
    {
      v16 = (*(int *)(v11 + 4 * v10) >> v13) + (PackedIntMICComponentScore >> v13);
      if ((v14 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      v16 = (*(_DWORD *)(v11 + 4 * v10) + PackedIntMICComponentScore) >> v13;
      if ((v14 & 1) != 0)
      {
LABEL_6:
        v9 = v16;
        goto LABEL_18;
      }
    }
    if (*((_BYTE *)this + 130))
    {
      if (v9 >= v16)
        v9 = v16;
    }
    else
    {
      v18 = v16 - v9;
      v17 = v16 - v9 < 0;
      if (v16 < v9)
        v9 = v16;
      if (v17)
        v19 = -v18;
      else
        v19 = v18;
      if (v19 < *(_DWORD *)(v4 + 512))
        v9 -= *(_DWORD *)(*(_QWORD *)(v4 + 504) + 4 * v19);
    }
LABEL_18:
    v14 = 0;
    ++v10;
  }
  while (v8 != v10);
  a3 = v22;
LABEL_20:
  *a3 = v8;
  v20 = *((_DWORD *)this + 151) + v9;
  if (v20 >= 20000)
    return 20000;
  else
    return v20;
}

uint64_t PackedIntShortListPelScoringFunction(const PelScorer *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  unsigned int v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v24;
  int v26;
  int v27;

  v4 = *((_QWORD *)a1 + 2);
  v5 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 288) + 2 * a2);
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 272) + 4 * v5 + 4) - *(_DWORD *)(*(_QWORD *)(v4 + 272) + 4 * v5);
  v7 = *(unsigned int *)(*(_QWORD *)(v4 + 456) + 4 * a2);
  v8 = *(_QWORD *)(v4 + 360);
  v27 = *((unsigned __int8 *)a1 + 131);
  v26 = *(_DWORD *)(*(_QWORD *)(v4 + 488) + 32);
  *a3 = 0;
  v9 = *(_DWORD *)(*(_QWORD *)(v4 + 584) + 4 * v5)
     + v6
     * *(unsigned __int16 *)(*(_QWORD *)(v4 + 600)
                           + 2
                           * (*((unsigned __int16 *)a1 + 320)
                            + ((*(unsigned __int16 *)(v4 + 536) + 1) >> 1) * v5));
  v10 = v9 + v6;
  if (v9 + v6 == -1)
    v10 = *(_DWORD *)(v4 + 576);
  if (v9 >= v10)
  {
    v11 = *(_DWORD *)(*(_QWORD *)(v4 + 584) + 4 * v5)
        + v6
        * *(unsigned __int16 *)(*(_QWORD *)(v4 + 600)
                              + 2
                              * (*((unsigned __int16 *)a1 + 320)
                               + ((*(unsigned __int16 *)(v4 + 536) + 1) >> 1) * v5));
    v12 = v10;
  }
  else
  {
    v11 = *(_DWORD *)(*(_QWORD *)(v4 + 584) + 4 * v5)
        + v6
        * *(unsigned __int16 *)(*(_QWORD *)(v4 + 600)
                              + 2
                              * (*((unsigned __int16 *)a1 + 320)
                               + ((*(unsigned __int16 *)(v4 + 536) + 1) >> 1) * v5));
    while (((*(_DWORD *)(*(_QWORD *)(v4 + 568) + 4 * (v11 >> 5)) >> v11) & 1) == 0)
    {
      if (++v11 >= v10)
        goto LABEL_34;
    }
    v12 = v11;
  }
  if (v11 < v10)
  {
    v13 = 0;
    v14 = 20000;
    v15 = 1;
    v24 = v8 + 4 * v7;
    while (1)
    {
      v16 = v12 - v9;
      v17 = (*(uint64_t (**)(const PelScorer *, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, v5, v12 - v9);
      if (v27)
      {
        v18 = (*(int *)(v24 + 4 * v16) >> v26) + (v17 >> v26);
        if ((v15 & 1) == 0)
          goto LABEL_16;
      }
      else
      {
        v18 = (*(_DWORD *)(v24 + 4 * v16) + v17) >> v26;
        if ((v15 & 1) == 0)
        {
LABEL_16:
          if (*((_BYTE *)a1 + 130))
          {
            if (v14 >= v18)
              v14 = v18;
          }
          else
          {
            v20 = v18 - v14;
            v19 = v18 - v14 < 0;
            if (v18 < v14)
              v14 = v18;
            if (v19)
              v21 = -v20;
            else
              v21 = v20;
            if (v21 < *(_DWORD *)(v4 + 512))
              v14 -= *(_DWORD *)(*(_QWORD *)(v4 + 504) + 4 * v21);
          }
          goto LABEL_26;
        }
      }
      v14 = v18;
LABEL_26:
      ++v13;
      if (++v11 >= v10)
      {
        v12 = v10;
      }
      else
      {
        while (((*(_DWORD *)(*(_QWORD *)(v4 + 568) + 4 * (v11 >> 5)) >> v11) & 1) == 0)
        {
          if (v10 == ++v11)
            goto LABEL_35;
        }
        v12 = v11;
      }
      v15 = 0;
      if (v11 >= v10)
        goto LABEL_35;
    }
  }
LABEL_34:
  v13 = 0;
  v14 = 20000;
LABEL_35:
  *a3 = v13;
  v22 = *((_DWORD *)a1 + 151) + v14;
  if (v22 >= 20000)
    return 20000;
  else
    return v22;
}

uint64_t PackedIntPelScoringFunction(const PelScorer *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  int v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int *v22;

  v4 = *((_QWORD *)a1 + 2);
  v5 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 288) + 2 * a2);
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 272) + 4 * v5);
  v7 = *(_DWORD *)(*(_QWORD *)(v4 + 272) + 4 * v5 + 4);
  v8 = (v7 - v6);
  if (v7 == v6)
  {
    v9 = 20000;
    goto LABEL_20;
  }
  v22 = a3;
  v10 = 0;
  v11 = *(_QWORD *)(v4 + 360) + 4 * *(unsigned int *)(*(_QWORD *)(v4 + 456) + 4 * a2);
  v12 = *((unsigned __int8 *)a1 + 131);
  v13 = *(_DWORD *)(*(_QWORD *)(v4 + 488) + 32);
  v9 = 20000;
  v14 = 1;
  do
  {
    v15 = (*(uint64_t (**)(const PelScorer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v5, v10);
    if (v12)
    {
      v16 = (*(int *)(v11 + 4 * v10) >> v13) + (v15 >> v13);
      if ((v14 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      v16 = (*(_DWORD *)(v11 + 4 * v10) + v15) >> v13;
      if ((v14 & 1) != 0)
      {
LABEL_6:
        v9 = v16;
        goto LABEL_18;
      }
    }
    if (*((_BYTE *)a1 + 130))
    {
      if (v9 >= v16)
        v9 = v16;
    }
    else
    {
      v18 = v16 - v9;
      v17 = v16 - v9 < 0;
      if (v16 < v9)
        v9 = v16;
      if (v17)
        v19 = -v18;
      else
        v19 = v18;
      if (v19 < *(_DWORD *)(v4 + 512))
        v9 -= *(_DWORD *)(*(_QWORD *)(v4 + 504) + 4 * v19);
    }
LABEL_18:
    v14 = 0;
    ++v10;
  }
  while (v8 != v10);
  a3 = v22;
LABEL_20:
  *a3 = v8;
  v20 = *((_DWORD *)a1 + 151) + v9;
  if (v20 >= 20000)
    return 20000;
  else
    return v20;
}

uint64_t QuantPerDimPelScoringFunction(const PelScorer *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  int v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int *v22;

  v4 = *((_QWORD *)a1 + 2);
  v5 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 288) + 2 * a2);
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 272) + 4 * v5);
  v7 = *(_DWORD *)(*(_QWORD *)(v4 + 272) + 4 * v5 + 4);
  v8 = (v7 - v6);
  if (v7 == v6)
  {
    v9 = 20000;
    goto LABEL_20;
  }
  v22 = a3;
  v10 = 0;
  v11 = *(_QWORD *)(v4 + 360) + 4 * *(unsigned int *)(*(_QWORD *)(v4 + 456) + 4 * a2);
  v12 = *((unsigned __int8 *)a1 + 131);
  v13 = *(_DWORD *)(*(_QWORD *)(v4 + 488) + 32);
  v9 = 20000;
  v14 = 1;
  do
  {
    v15 = (*(uint64_t (**)(const PelScorer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, v5, v10);
    if (v12)
    {
      v16 = (*(int *)(v11 + 4 * v10) >> v13) + (v15 >> v13);
      if ((v14 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      v16 = (*(_DWORD *)(v11 + 4 * v10) + v15) >> v13;
      if ((v14 & 1) != 0)
      {
LABEL_6:
        v9 = v16;
        goto LABEL_18;
      }
    }
    if (*((_BYTE *)a1 + 130))
    {
      if (v9 >= v16)
        v9 = v16;
    }
    else
    {
      v18 = v16 - v9;
      v17 = v16 - v9 < 0;
      if (v16 < v9)
        v9 = v16;
      if (v17)
        v19 = -v18;
      else
        v19 = v18;
      if (v19 < *(_DWORD *)(v4 + 512))
        v9 -= *(_DWORD *)(*(_QWORD *)(v4 + 504) + 4 * v19);
    }
LABEL_18:
    v14 = 0;
    ++v10;
  }
  while (v8 != v10);
  a3 = v22;
LABEL_20:
  *a3 = v8;
  v20 = *((_DWORD *)a1 + 151) + v9;
  if (v20 >= 20000)
    return 20000;
  else
    return v20;
}

double PelScorer::getComponentProbs(PelScorer *this, unsigned int a2, uint64_t a3, int a4)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v31;
  double v32;
  long double v33;
  unsigned __int16 *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  int v56;
  double v57;
  long double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int PackedIntMICComponentScore;
  int v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v77;
  double v78;
  long double v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v89;
  double v90;
  long double v91;
  uint64_t v93;
  int v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  unsigned __int16 *v99;
  uint64_t v100;
  unsigned __int16 *v101;

  v8 = *((double *)this + 13);
  v9 = *((_QWORD *)this + 2);
  v10 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 288) + 2 * a2);
  v11 = (int *)(*(_QWORD *)(v9 + 456) + 4 * a2);
  v12 = *v11;
  v13 = v11[1];
  v14 = (v13 - *v11);
  if (v13 != *v11 && *(_DWORD *)(a3 + 8) == 0)
  {
    *(_QWORD *)a3 = MemChunkAlloc(8 * (v13 - *v11), 0);
    *(_DWORD *)(a3 + 8) = v14;
  }
  if (v13 != v12)
    bzero(*(void **)a3, 8 * (v13 + ~v12) + 8);
  v16 = *((_QWORD *)this + 2);
  v17 = a2;
  v94 = (int)(v8 * 20.0);
  v18 = -1.0 / ((double)a4 * 0.0000152587891 * v8);
  switch(*(_DWORD *)(v16 + 12))
  {
    case 0:
      v95 = (_QWORD *)a3;
      v100 = 0;
      v101 = 0;
      v19 = realloc_array(0, (void **)&v101, 2 * v14, 0, 0, 1);
      v99 = v101;
      v20 = *((_QWORD *)this + 2);
      v100 = (v13 - v12);
      HIDWORD(v100) = v19 >> 1;
      v21 = *(unsigned int *)(*(_QWORD *)(v20 + 456) + 4 * a2);
      v22 = *(_QWORD *)(v20 + 344);
      MulTableGenoneScoringFunction((uint64_t)this, v10, v13 - v12, v101, (unsigned int *)&v101);
      v23 = MulTableCompScoresToPelScoreFunction(this, a2, v99, (unsigned int *)&v101);
      v24 = 0.0;
      if (v13 != v12)
      {
        v25 = 0;
        v26 = (v23 * a4) >> 16;
        do
        {
          v27 = *(unsigned __int8 *)(v22 + v21 + v25) + v99[v25];
          v28 = v27 >> 5;
          v29 = (int)(v27 * a4) >> 16;
          if (v28 <= 0x270 && v29 != 20000)
          {
            v31 = v29 - v26;
            if (v31 < v94)
            {
              v32 = v18 * (double)v31;
              if (v32 > -87.3)
              {
                v33 = DgnExp(v32);
                *(long double *)(*v95 + 8 * v25) = v33;
                v24 = v24 + v33;
              }
            }
          }
          ++v25;
        }
        while (v14 != v25);
      }
      goto LABEL_110;
    case 1:
      v98 = (_QWORD *)a3;
      v99 = 0;
      v100 = 0;
      v59 = v16;
      if (v13 != v12)
      {
        v101 = 0;
        HIDWORD(v100) = realloc_array(0, (void **)&v101, 4 * v14, 0, 0, 1) >> 2;
        v99 = v101;
        v59 = *((_QWORD *)this + 2);
      }
      LODWORD(v100) = v14;
      v24 = 0.0;
      if (v13 == v12)
        goto LABEL_110;
      v60 = 0;
      v61 = *(_QWORD *)(v59 + 360) + 4 * *(unsigned int *)(*(_QWORD *)(v59 + 456) + 4 * v17);
      v62 = *(_DWORD *)(*(_QWORD *)(v16 + 488) + 32);
      v63 = *(_DWORD *)(v59 + 16);
      v64 = 20000;
      do
      {
        if (v63 == 1)
          PackedIntMICComponentScore = PelScorer::getPackedIntMICComponentScore(this, v10, v60);
        else
          PackedIntMICComponentScore = (*(uint64_t (**)(PelScorer *, uint64_t, uint64_t))(*(_QWORD *)this + 80))(this, v10, v60);
        *(_DWORD *)&v99[2 * v60] = PackedIntMICComponentScore;
        if (*((_BYTE *)this + 131))
        {
          v66 = PackedIntMICComponentScore >> v62;
          if (PackedIntMICComponentScore >> v62 >= 20000)
            v66 = 20000;
          v67 = (*(int *)(v61 + 4 * v60) >> v62) + v66;
          if (!v60)
          {
LABEL_72:
            v64 = v67;
            goto LABEL_80;
          }
        }
        else
        {
          v67 = (*(_DWORD *)(v61 + 4 * v60) + PackedIntMICComponentScore) >> v62;
          if (!v60)
            goto LABEL_72;
        }
        if (*((_BYTE *)this + 130))
        {
          if (v64 >= v67)
            v64 = v67;
        }
        else
        {
          v69 = v67 - v64;
          v68 = v67 - v64 < 0;
          if (v67 < v64)
            v64 = v67;
          if (v68)
            v70 = -v69;
          else
            v70 = v69;
          if (v70 < *(_DWORD *)(v16 + 512))
            v64 -= *(_DWORD *)(*(_QWORD *)(v16 + 504) + 4 * v70);
        }
LABEL_80:
        ++v60;
      }
      while (v14 != v60);
      v71 = 0;
      v72 = ((*((_DWORD *)this + 151) + v64) * a4) >> 16;
      v24 = 0.0;
      do
      {
        v73 = *(_DWORD *)&v99[2 * v71];
        if (*((_BYTE *)this + 131))
          v74 = (*(int *)(v61 + 4 * v71) >> v62) + (v73 >> v62);
        else
          v74 = (*(_DWORD *)(v61 + 4 * v71) + v73) >> v62;
        v53 = v74 <= 19999;
        v75 = (v74 * a4) >> 16;
        if (v53 && v75 != 20000)
        {
          v77 = v75 - v72;
          if (v77 < v94)
          {
            v78 = v18 * (double)v77;
            if (v78 > -87.3)
            {
              v79 = DgnExp(v78);
              *(long double *)(*v98 + 8 * v71) = v79;
              v24 = v24 + v79;
            }
          }
        }
        ++v71;
      }
      while (v14 != v71);
LABEL_110:
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v99);
      return v24;
    case 2:
      v96 = (_QWORD *)a3;
      v99 = 0;
      v34 = 0;
      v100 = 0;
      if (v13 != v12)
      {
        v101 = 0;
        HIDWORD(v100) = realloc_array(0, (void **)&v101, 2 * v14, 0, 0, 1) >> 1;
        v34 = v101;
        v99 = v101;
        v16 = *((_QWORD *)this + 2);
      }
      LODWORD(v100) = v13 - v12;
      v35 = *(unsigned int *)(*(_QWORD *)(v16 + 456) + 4 * a2);
      v93 = *(_QWORD *)(v16 + 344);
      v36 = v13 - v12;
      if (*(_DWORD *)(v16 + 16) == 1)
        FloatMICGenoneScoringFunction((uint64_t)this, v10, v36, v34, (unsigned int *)&v101);
      else
        FloatGenoneScoringFunction((float *)this, v10, v36, v34, (unsigned int *)&v101);
      v80 = FloatCompScoresToPelScoreFunction(this, a2, v34, (unsigned int *)&v101);
      v24 = 0.0;
      if (v13 != v12)
      {
        v81 = v35;
        v82 = 0;
        v83 = v93 + v81;
        v84 = (v80 * a4) >> 16;
        do
        {
          v85 = *(unsigned __int8 *)(v83 + v82) + v99[v82];
          v86 = v85 >> 5;
          v87 = (int)(v85 * a4) >> 16;
          if (v86 <= 0x270 && v87 != 20000)
          {
            v89 = v87 - v84;
            if (v89 < v94)
            {
              v90 = v18 * (double)v89;
              if (v90 > -87.3)
              {
                v91 = DgnExp(v90);
                *(long double *)(*v96 + 8 * v82) = v91;
                v24 = v24 + v91;
              }
            }
          }
          ++v82;
        }
        while (v14 != v82);
      }
      goto LABEL_110;
    case 3:
      v99 = 0;
      v100 = 0;
      if (v13 == v12)
      {
        LODWORD(v100) = v14;
        v24 = 0.0;
        goto LABEL_110;
      }
      v97 = (_QWORD *)a3;
      v101 = 0;
      v37 = realloc_array(0, (void **)&v101, 4 * v14, 0, 0, 1);
      v38 = 0;
      v99 = v101;
      v39 = *((_QWORD *)this + 2);
      LODWORD(v100) = v14;
      HIDWORD(v100) = v37 >> 2;
      v40 = *(_QWORD *)(v39 + 360) + 4 * *(unsigned int *)(*(_QWORD *)(v39 + 456) + 4 * v17);
      v41 = *(_DWORD *)(*(_QWORD *)(v16 + 488) + 32);
      v42 = 20000;
      break;
    default:
      return 0.0;
  }
  while (1)
  {
    v43 = (*(uint64_t (**)(PelScorer *, uint64_t, uint64_t))(*(_QWORD *)this + 88))(this, v10, v38);
    *(_DWORD *)&v99[2 * v38] = v43;
    if (*((_BYTE *)this + 131))
    {
      v44 = v43 >> v41;
      if (v43 >> v41 >= 20000)
        v44 = 20000;
      v45 = (*(int *)(v40 + 4 * v38) >> v41) + v44;
      if (v38)
      {
LABEL_32:
        v47 = v45 - v42;
        v46 = v45 - v42 < 0;
        if (v45 < v42)
          v42 = v45;
        if (v46)
          v48 = -v47;
        else
          v48 = v47;
        if (v48 < *(_DWORD *)(v16 + 512))
          v42 -= *(_DWORD *)(*(_QWORD *)(v16 + 504) + 4 * v48);
        goto LABEL_41;
      }
    }
    else
    {
      v45 = (*(_DWORD *)(v40 + 4 * v38) + v43) >> v41;
      if (v38)
        goto LABEL_32;
    }
    v42 = v45;
LABEL_41:
    if (v14 == ++v38)
    {
      v49 = 0;
      v50 = ((*((_DWORD *)this + 151) + v42) * a4) >> 16;
      v24 = 0.0;
      do
      {
        v51 = *(_DWORD *)&v99[2 * v49];
        if (*((_BYTE *)this + 131))
          v52 = (*(int *)(v40 + 4 * v49) >> v41) + (v51 >> v41);
        else
          v52 = (*(_DWORD *)(v40 + 4 * v49) + v51) >> v41;
        v53 = v52 <= 19999;
        v54 = (v52 * a4) >> 16;
        if (v53 && v54 != 20000)
        {
          v56 = v54 - v50;
          if (v56 < v94)
          {
            v57 = v18 * (double)v56;
            if (v57 > -87.3)
            {
              v58 = DgnExp(v57);
              *(long double *)(*v97 + 8 * v49) = v58;
              v24 = v24 + v58;
            }
          }
        }
        ++v49;
      }
      while (v14 != v49);
      goto LABEL_110;
    }
  }
}

void sub_209A293D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PelScorer::getPackedIntMICComponentScore(PelScorer *this, unsigned int a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 *v7;
  __int16 *v8;
  int v9;
  __int16 *v10;
  unint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  double v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int64x2_t v30;
  signed int v31;
  int32x2_t v32;
  int32x2_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  unsigned int v48;
  int32x2_t v50;
  int32x2_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 2);
  v4 = *(unsigned int *)(v3 + 132);
  v5 = ((_DWORD)v4 + 1) & 0xFFFFFFFE;
  v6 = *(unsigned int *)(v3 + 152);
  v7 = (unsigned __int16 *)*((_QWORD *)this + 77);
  v8 = (__int16 *)(*(_QWORD *)(v3 + 232)
                 + *(unsigned int *)(v3 + 248)
                 + *(unsigned int *)(*(_QWORD *)(v3 + 256) + 4 * a2)
                 + v5
                 + (*(_DWORD *)(v3 + 148) * a3));
  v9 = *v8;
  v52 = 0;
  v53 = 0;
  v10 = (__int16 *)((char *)v8 + (((_DWORD)v5 + 17) & 0xFFFFFFF0) - v5);
  if ((_DWORD)v4)
  {
    v11 = 0;
    v12 = v7;
    do
    {
      LODWORD(v13) = v4 - v11;
      if ((v4 - v11) >= 4)
        v13 = 4;
      else
        v13 = v13;
      if ((_DWORD)v13)
      {
        v14 = &v52;
        v15 = v12;
        do
        {
          v17 = *v10++;
          v16 = v17;
          v18 = *v15++;
          *(_DWORD *)v14 += v18 * v16;
          v14 = (uint64_t *)((char *)v14 + 4);
          --v13;
        }
        while (v13);
      }
      v11 += 4;
      v12 += 4;
    }
    while (v11 < v4);
    v19 = v52;
    v20 = HIDWORD(v52);
    v22 = v53;
    v21 = HIDWORD(v53);
  }
  else
  {
    v21 = 0;
    v20 = 0;
    v22 = 0;
    v19 = 0;
  }
  v23 = **(double **)(v3 + 488);
  v24 = *v10;
  v25 = (((2 * (_DWORD)v4 + 17) & 0xFFFFFFF0) - 2 * (_DWORD)v4 - 2) >> 1;
  v26 = (uint64_t)&v10[v25 + 1];
  v27 = ((v6 + 7) & 0xFFFFFFF8) - 1;
  if (v27 < 0)
  {
    v40 = 0;
  }
  else
  {
    v28 = (v4 + 7) & 0xFFFFFFF8;
    v29 = (uint64_t)&v10[v25 + 1];
    v30 = 0uLL;
    do
    {
      v50 = 0;
      v51 = 0;
      v31 = v27 & 0xFFFFFFFC;
      if (v27 >= (int)(v27 & 0xFFFFFFFC))
      {
        v34 = 8 * v27;
        v35 = v28 + 8 * v27;
        do
        {
          v36 = 0;
          v37 = v34;
          v38 = v29 + 2 * v34;
          do
          {
            if (v37 + v36 >= v6)
              break;
            v50.i32[v36 & 3] += v7[(v35 + v36)] * *(__int16 *)(v38 + 2 * v36);
            ++v36;
          }
          while (v36 != 8);
          v35 -= 8;
          v34 = v37 - 8;
        }
        while (v27-- > v31);
        v27 = v31 - 1;
        v33 = v50;
        v32 = v51;
      }
      else
      {
        v32 = 0;
        v33 = 0;
      }
      v30 = vaddq_s64(vaddl_s32(v32, v33), v30);
    }
    while ((v27 & 0x80000000) == 0);
    v40 = vaddvq_s64(v30);
  }
  v41 = 1 << (v9 - 1);
  if (!v9)
    v41 = 0;
  v42 = (v41 + (uint64_t)(v23 * (double)(v22 + v19 + v20 + v21) + 0.5)) >> v9;
  v43 = *((_DWORD *)this + 152);
  v44 = 1 << (v43 - 1);
  if (!v43)
    v44 = 0;
  v45 = v23 * (double)((v40 + v44) >> v43 << *((_DWORD *)this + 153) >> 1) + 0.5;
  v46 = 1 << (v24 - 1);
  if (!v24)
    v46 = 0;
  v47 = v23 * (double)*(int *)(v26 + 2 * v6 + ((2 * (_DWORD)v6 + 27) & 0xFFFFFFF0) - 2 * (_DWORD)v6 - 12) + 0.5;
  v48 = ((int)v47 + v42 + ((v46 + (uint64_t)v45) >> v24)) & ~((int)((int)v47 + v42 + ((v46 + (uint64_t)v45) >> v24)) >> 31);
  if (v48 >= 0xFFFF)
    return 0xFFFFLL;
  else
    return v48;
}

double OnDemandPelScorer::setFrameStaticsForGenone(OnDemandPelScorer *this, unsigned int a2, PelStats *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  double result;
  int v15;

  v9 = *(unsigned int *)(*((_QWORD *)this + 37) + 4 * a2);
  if (*(_BYTE *)(*((_QWORD *)this + 50) + v9))
  {
    v10 = *((_QWORD *)this + 2);
    if (*(_DWORD *)(v10 + 16) == 1)
    {
      if (*(_WORD *)(v10 + 536))
        *((_WORD *)this + 320) = *(_WORD *)(*((_QWORD *)this + 78) + 2 * v9);
      v11 = *(_DWORD *)(v10 + 12);
      if (v11 == 1)
      {
        *((_QWORD *)this + 77) = *((_QWORD *)this + 73)
                               + 2
                               * (*((_DWORD *)this + 150)
                                + (((*((_DWORD *)this + 29) + 7) & 0xFFFFFFF8)
                                 + ((*((_DWORD *)this + 28) + 7) & 0xFFFFFFF8))
                                * v9);
        v15 = *(_DWORD *)(*((_QWORD *)this + 69) + 4 * v9);
        *((_DWORD *)this + 151) = *(_DWORD *)(*((_QWORD *)this + 67) + 4 * v9);
        *((_DWORD *)this + 152) = v15;
        *((_DWORD *)this + 153) = *(_DWORD *)(*((_QWORD *)this + 71) + 4 * v9);
      }
      else if (v11 == 2)
      {
        v12 = *(_QWORD *)(*((_QWORD *)this + 52) + 8 * v9);
        *((_QWORD *)this + 60) = *((_QWORD *)this + 56)
                               + 8 * ((*((_DWORD *)this + 29) + *((_DWORD *)this + 28)) * v9);
        *((_QWORD *)this + 58) = v12;
        result = *(double *)(*((_QWORD *)this + 54) + 8 * v9);
        *((double *)this + 59) = result;
      }
    }
    else
    {
      if (*(_WORD *)(v10 + 536))
        *((_WORD *)this + 320) = *(_WORD *)(*((_QWORD *)this + 78) + 2 * v9);
      switch(*(_DWORD *)(v10 + 12))
      {
        case 0:
          *((_QWORD *)this + 66) = *((_QWORD *)this + 63) + 8 * (*((_DWORD *)this + 28) * v9);
          *((_DWORD *)this + 130) = *(_DWORD *)(*((_QWORD *)this + 61) + 4 * v9);
          break;
        case 1:
        case 3:
          *((_QWORD *)this + 77) = *((_QWORD *)this + 73)
                                 + 2
                                 * (*((_DWORD *)this + 150)
                                  + ((*((_DWORD *)this + 28) + 7) & 0xFFFFFFF8) * v9);
          *((_DWORD *)this + 151) = *(_DWORD *)(*((_QWORD *)this + 67) + 4 * v9);
          break;
        case 2:
          *((_QWORD *)this + 60) = *((_QWORD *)this + 56) + 8 * (*((_DWORD *)this + 28) * v9);
          result = *(double *)(*((_QWORD *)this + 52) + 8 * v9);
          *((double *)this + 58) = result;
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    PelScorer::getTransformedFeatures_NoAdapt_Cache((uint64_t)this, a2, 0, (unint64_t)this + 200, a3, a6, a7, a8);
    if (*(_DWORD *)(*((_QWORD *)this + 2) + 16) == 1)
    {
      PelScorer::getMICFeatures((unint64_t)this, (uint64_t *)this + 25, (_DWORD *)a3 + 4);
      PelScorer::setFrameStaticsMic((uint64_t)this, v9, (unsigned __int8 **)this + 25, (unsigned __int16 **)this + 31, *((_DWORD *)this + 66), *((_DWORD *)this + 67), 1);
    }
    else
    {
      PelScorer::setFrameStaticsNoMic((uint64_t)this, v9, (unsigned __int8 **)this + 25, *((_DWORD *)this + 67), 1);
    }
  }
  return result;
}

double PelScorer::getTransformedFeatures_NoAdapt_Cache(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_DWORD *)(a1 + 268) = 0;
  v11 = a2;
  v12 = *(unsigned int *)(*(_QWORD *)(a1 + 312) + 4 * a2);
  v13 = *(_QWORD *)(a1 + 368) + 16 * v12;
  if (*(_DWORD *)(v13 + 8))
  {
    *(_DWORD *)(a1 + 268) = *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v12);
    v14 = a1 + 216;
    v15 = a4;
  }
  else
  {
    v13 = a1 + 160;
    v16 = a1 + 216;
    v17 = *(unsigned int *)(a1 + 112);
    if (*(_DWORD *)(a1 + 168) != (_DWORD)v17)
    {
      DgnPrimArray<unsigned char>::copyArraySlice(a4, (_QWORD *)(a1 + 160), 0, v17);
      v13 = 0;
    }
    v18 = *(_QWORD *)(a1 + 96);
    if (v18 && *(_DWORD *)(*(_QWORD *)(v18 + 32) + 16) == **(_DWORD **)(v18 + 32))
    {
      if (v13)
        v19 = v13;
      else
        v19 = a4;
      LinearTransform::doTransform(*(int **)(*(_QWORD *)(a1 + 32) + 224), v19, a1 + 216, v17, (uint64_t)a5, a6, a7, a8);
      v13 = 0;
      v20 = *(_QWORD *)(a1 + 32);
      v21 = *(unsigned int *)(v20 + 4);
      v22 = 1 << (v21 - 1);
      v23 = **(_DWORD **)(v20 + 240);
      if (!v21)
        LODWORD(v22) = 0;
      *(_DWORD *)(a1 + 268) += ((int)v22 + v23) >> v21;
      v24 = a4;
    }
    else
    {
      v24 = a1 + 216;
      v16 = a4;
    }
    v25 = *(_QWORD *)(a1 + 48);
    if (v25)
    {
      if (a5)
        ++a5[7];
      v26 = *(unsigned __int16 *)(*(_QWORD *)(v25 + 48) + 2 * v11);
      if (v13)
        v27 = v13;
      else
        v27 = v16;
      LinearTransform::doTransform((int *)(*(_QWORD *)(v25 + 16) + 72 * *(unsigned __int16 *)(*(_QWORD *)(v25 + 48) + 2 * v11)), v27, v24, v17, (uint64_t)a5, a6, a7, a8);
      v13 = 0;
      v28 = *(_QWORD *)(a1 + 48);
      v29 = *(_DWORD *)(*(_QWORD *)(v28 + 32) + 4 * v26);
      v30 = *(unsigned int *)(v28 + 12);
      v31 = 1 << (v30 - 1);
      if (!v30)
        LODWORD(v31) = 0;
      *(_DWORD *)(a1 + 268) += ((int)v31 + v29) >> v30;
      v15 = v16;
    }
    else
    {
      v15 = v24;
      v24 = v16;
    }
    v32 = *(_QWORD *)(a1 + 32);
    if (*(_DWORD *)(v32 + 8) == *(_DWORD *)v32)
    {
      if (a5)
        ++a5[8];
      if (*(_DWORD *)(v32 + 56))
        v33 = *(unsigned int *)(*(_QWORD *)(v32 + 24)
                              + 4 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 136) + 4 * v11));
      else
        v33 = 0xFFFFFFFFLL;
      if (v13)
        v34 = v13;
      else
        v34 = v24;
      LinearTransform::doTransform((int *)(*(_QWORD *)(v32 + 64) + 72 * v33), v34, v15, v17, (uint64_t)a5, a6, a7, a8);
      v13 = 0;
      v35 = *(_QWORD *)(a1 + 32);
      v36 = *(_DWORD *)(*(_QWORD *)(v35 + 80) + 4 * v33);
      v37 = *(unsigned int *)(v35 + 4);
      v38 = 1 << (v37 - 1);
      if (!v37)
        LODWORD(v38) = 0;
      *(_DWORD *)(a1 + 268) += ((int)v38 + v36) >> v37;
      v14 = v24;
    }
    else
    {
      v14 = v15;
      v15 = v24;
    }
    if (v13)
      v39 = v13;
    else
      v39 = v15;
    DgnPrimArray<unsigned char>::copyArraySlice(*(_QWORD *)(a1 + 368) + 16 * v12, (_QWORD *)v39, 0, *(_DWORD *)(v39 + 8));
    *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v12) = *(_DWORD *)(a1 + 268);
  }
  v41 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v41 + 12) == *(_DWORD *)v41)
  {
    if (a5)
      ++a5[9];
    if (*(_DWORD *)(v41 + 136))
      v42 = *(unsigned int *)(*(_QWORD *)(v41 + 40)
                            + 4 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 168) + 4 * v11));
    else
      v42 = 0xFFFFFFFFLL;
    if (v13)
      v43 = v13;
    else
      v43 = v15;
    LinearTransform::doTransform((int *)(*(_QWORD *)(v41 + 144) + 72 * v42), v43, v14, a4, (uint64_t)a5, a6, a7, a8);
    v44 = *(_QWORD *)(a1 + 32);
    v45 = *(_DWORD *)(*(_QWORD *)(v44 + 160) + 4 * v42);
    v46 = *(unsigned int *)(v44 + 4);
    v47 = 1 << (v46 - 1);
    if (!v46)
      LODWORD(v47) = 0;
    *(_DWORD *)(a1 + 268) += ((int)v47 + v45) >> v46;
  }
  else
  {
    v14 = v15;
    if (v13)
    {
      DgnPrimArray<unsigned char>::copyArraySlice(a4, (_QWORD *)v13, 0, *(_DWORD *)(v13 + 8));
      return result;
    }
  }
  if (v14 != a4)
  {
    *(_DWORD *)(a4 + 8) = 0;
    v48 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)v14;
    *(_QWORD *)v14 = v48;
    LODWORD(v48) = *(_DWORD *)(a4 + 12);
    result = *(double *)(v14 + 8);
    *(double *)(a4 + 8) = result;
    *(_DWORD *)(v14 + 8) = 0;
    *(_DWORD *)(v14 + 12) = v48;
  }
  return result;
}

double PelScorer::getTransformedFeatures_Adapt_Cache(uint64_t a1, unsigned int a2, int a3, unint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v12 = a2;
  v13 = *(unsigned int *)(*(_QWORD *)(a1 + 312) + 4 * a2);
  v14 = *(_QWORD *)(a1 + 368) + 16 * v13;
  v15 = a1 + 216;
  if (*(_DWORD *)(v14 + 8))
  {
    v16 = a4;
  }
  else
  {
    v14 = a1 + 160;
    v17 = *(unsigned int *)(a1 + 112);
    if (*(_DWORD *)(a1 + 168) != (_DWORD)v17)
    {
      DgnPrimArray<unsigned char>::copyArraySlice(a4, (_QWORD *)(a1 + 160), 0, v17);
      v14 = 0;
    }
    v18 = *(_QWORD *)(a1 + 96);
    if (v18 && *(_DWORD *)(*(_QWORD *)(v18 + 32) + 16) == **(_DWORD **)(v18 + 32))
    {
      if (v14)
        v19 = v14;
      else
        v19 = a4;
      LinearTransform::doTransform(*(int **)(*(_QWORD *)(a1 + 32) + 224), v19, v15, v17, (uint64_t)a5, a6, a7, a8);
      v14 = 0;
      v20 = a4;
    }
    else
    {
      v20 = v15;
      v15 = a4;
    }
    v21 = *(_QWORD *)(a1 + 48);
    if (v21)
    {
      if (a5)
        ++a5[7];
      if (v14)
        v22 = v14;
      else
        v22 = v15;
      LinearTransform::doTransform((int *)(*(_QWORD *)(v21 + 16) + 72 * *(unsigned __int16 *)(*(_QWORD *)(v21 + 48) + 2 * v12)), v22, v20, v17, (uint64_t)a5, a6, a7, a8);
      v14 = 0;
      v16 = v15;
    }
    else
    {
      v16 = v20;
      v20 = v15;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 12) || (v23 = *(_QWORD *)(a1 + 32), *(_DWORD *)(v23 + 8) != *(_DWORD *)v23))
    {
      v15 = v16;
      v16 = v20;
    }
    else
    {
      if (a5)
        ++a5[8];
      if (*(_DWORD *)(v23 + 56))
        v24 = *(_DWORD *)(*(_QWORD *)(v23 + 24)
                        + 4 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 136) + 4 * v12));
      else
        v24 = -1;
      if (v14)
        v32 = v14;
      else
        v32 = v20;
      LinearTransform::doTransform((int *)(*(_QWORD *)(v23 + 64) + 72 * v24), v32, v16, v17, (uint64_t)a5, a6, a7, a8);
      v14 = 0;
      v15 = v20;
    }
    if (v14)
      v25 = v14;
    else
      v25 = v16;
    DgnPrimArray<unsigned char>::copyArraySlice(*(_QWORD *)(a1 + 368) + 16 * v13, (_QWORD *)v25, 0, *(_DWORD *)(v25 + 8));
  }
  v27 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(v27 + 12) || *(_BYTE *)(v27 + 13)) && !a3
    || (v28 = *(_QWORD *)(a1 + 32), *(_DWORD *)(v28 + 12) != *(_DWORD *)v28))
  {
    if (v14)
    {
      DgnPrimArray<unsigned char>::copyArraySlice(a4, (_QWORD *)v14, 0, *(_DWORD *)(v14 + 8));
      return result;
    }
  }
  else
  {
    if (a5)
      ++a5[9];
    if (*(_DWORD *)(v28 + 136))
      v29 = *(_DWORD *)(*(_QWORD *)(v28 + 40)
                      + 4 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 168) + 4 * v12));
    else
      v29 = -1;
    if (v14)
      v30 = v14;
    else
      v30 = v16;
    LinearTransform::doTransform((int *)(*(_QWORD *)(v28 + 144) + 72 * v29), v30, v15, a4, (uint64_t)a5, a6, a7, a8);
    v16 = v15;
  }
  if (v16 != a4)
  {
    *(_DWORD *)(a4 + 8) = 0;
    v31 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)v16;
    *(_QWORD *)v16 = v31;
    LODWORD(v31) = *(_DWORD *)(a4 + 12);
    result = *(double *)(v16 + 8);
    *(double *)(a4 + 8) = result;
    *(_DWORD *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 12) = v31;
  }
  return result;
}

uint64_t PelScorer::MICFeaturesFunction(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BinaryIntScale *v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int UnscaleBits;
  int v29;
  int *v30;
  uint64_t *v31;
  _WORD *v32;
  uint64_t v33;
  int v34;
  char v35;
  BOOL v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;

  v3 = *(_DWORD *)(a1 + 112);
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 152);
  v47 = 0;
  v48 = 0;
  if ((_DWORD)v4)
  {
    v45 = 0;
    v6 = realloc_array(0, &v45, 8 * v4, 0, 0, 1);
    v46 = 0;
    v47 = v45;
    LODWORD(v48) = v4;
    HIDWORD(v48) = v6 >> 3;
    v45 = 0;
    v43 = 0;
    v7 = realloc_array(0, &v43, 4 * v4, 0, 0, 1);
    v44 = 0;
    v45 = v43;
    LODWORD(v46) = v4;
    HIDWORD(v46) = v7 >> 2;
    v43 = 0;
    v49 = 0;
    v8 = realloc_array(0, &v49, 4 * v4, 0, 0, 1);
    v9 = 0;
    v10 = v3 + 3;
    v11 = v10 & 0xFFFFFFFC;
    v43 = v49;
    LODWORD(v44) = v4;
    HIDWORD(v44) = v8 >> 2;
    if (v10 >> 2 <= 1)
      v12 = 1;
    else
      v12 = v10 >> 2;
    v13 = *(_QWORD **)(a1 + 16);
    v14 = 32;
    do
    {
      v15 = 0;
      v16 = v47;
      v47[v9] = 0;
      if (v10 >= 4)
      {
        v17 = 0;
        v15 = 0;
        v18 = 0;
        v19 = v13[25] + 24 * v9;
        v20 = v10 & 0xFFFFFFFC;
        v21 = 4 * v11;
        do
        {
          v22 = 0;
          v23 = *a2;
          v24 = v17;
          do
          {
            if (4 * v18 >= v11)
            {
              v25 = 0;
            }
            else
            {
              v25 = 0;
              v26 = v20;
              v27 = v24;
              do
              {
                v25 += *(__int16 *)(*(_QWORD *)v19 + 2 * (*(_DWORD *)(v19 + 16) + v27))
                     * *(unsigned __int8 *)(v23 + *(unsigned __int8 *)(v13[27] + v27));
                v27 += 4;
                --v26;
              }
              while (v26);
            }
            v15 = (BinaryIntScale *)((char *)v15 + v25 * (uint64_t)v25);
            v16[v9] = v15;
            ++v22;
            ++v24;
          }
          while (v22 != 4);
          ++v18;
          v17 += v21;
          v21 -= 16;
          v20 -= 4;
        }
        while (v18 != v12);
      }
      UnscaleBits = BinaryIntScale::getUnscaleBits(v15, 14);
      *((_DWORD *)v45 + v9) = UnscaleBits;
      v13 = *(_QWORD **)(a1 + 16);
      v29 = 2 * *(_DWORD *)(v13[21] + 4 * v9) - UnscaleBits;
      *((_DWORD *)v43 + v9) = v29;
      if (v14 >= v29)
        v14 = v29;
      ++v9;
    }
    while (v9 != v4);
    *(_DWORD *)(a1 + 264) = v14;
    v30 = *(int **)(*(_QWORD *)(a1 + 16) + 168);
    v31 = v47;
    v32 = *(_WORD **)(a1 + 248);
    v33 = v4;
    do
    {
      v34 = *v30++;
      v35 = 2 * v34 - v14 - 1;
      v37 = 2 * v34 - v14;
      v36 = 2 * v34 == v14;
      v39 = *v31++;
      v38 = v39;
      v40 = 1 << v35;
      if (v36)
        v40 = 0;
      *v32++ = (unint64_t)(v40 + v38) >> v37;
      --v33;
    }
    while (v33);
  }
  else
  {
    v45 = 0;
    v46 = 0;
    v43 = 0;
    v44 = 0;
    *(_DWORD *)(a1 + 264) = 32;
  }
  v41 = (v4 + 1) & 0xFFFFFFFE;
  if (v4 < v41)
    bzero((void *)(*(_QWORD *)(a1 + 248) + 2 * v4), 2 * (v41 + ~(_DWORD)v4) + 2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v43);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v45);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
}

void sub_209A2A230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_209A2A384(_Unwind_Exception *a1)
{
  PelScoreCache **v1;
  uint64_t v2;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  PelScorer::~PelScorer(v1);
  _Unwind_Resume(a1);
}

void OnDemandPelScorer::~OnDemandPelScorer(PelScoreCache **this)
{
  *this = (PelScoreCache *)off_24C215AA0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 81));
  PelScorer::~PelScorer(this);
}

{
  *this = (PelScoreCache *)off_24C215AA0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 81));
  PelScorer::~PelScorer(this);
}

{
  *this = (PelScoreCache *)off_24C215AA0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 81));
  PelScorer::~PelScorer(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t OnDemandPelScorer::loadFrames(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;

  if (a3 && *(_DWORD *)(a3 + 16) > a2)
    return 1;
  result = 0;
  if (a4)
    *a4 = a2;
  return result;
}

uint64_t OnDemandPelScorer::computeScoreForActivePelsThisFrame(uint64_t this, const BitArray *a2)
{
  int v2;
  uint64_t v4;
  unsigned int i;

  v2 = *((_DWORD *)a2 + 2);
  if (v2)
  {
    v4 = this;
    for (i = 0; i != v2; ++i)
    {
      if (((*(_DWORD *)(*(_QWORD *)a2 + 4 * (i >> 5)) >> i) & 1) != 0)
        this = PelScoreCache::getScoreNoBackoff(*(PelScoreCache **)(v4 + 120), (unsigned __int16)i);
    }
  }
  return this;
}

void OnDemandPelScorer::printSize(OnDemandPelScorer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 3172, (DgnString *)&v28);
  if (v29)
    v16 = v28;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v28);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v26 = 0;
  v27 = 0;
  PelScorer::printSize(this, a2, (a3 + 1), &v27, &v26, a6);
  *a4 += v27;
  *a5 += v26;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 3178, (DgnString *)&v28);
  if (v29)
    v25 = v28;
  else
    v25 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, a3, &byte_209A88803, (35 - a3), (35 - a3), v25, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v28);
}

void sub_209A2A648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t OnDemandPelScorer::getPackedIntComponentScore(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;

  v3 = *(_QWORD *)(this + 16);
  v4 = *(unsigned int *)(v3 + 132);
  if ((int)v4 < 1)
    return 0;
  v5 = this;
  LODWORD(this) = 0;
  v6 = *(_QWORD *)(v3 + 232)
     + *(unsigned int *)(v3 + 248)
     + *(unsigned int *)(*(_QWORD *)(v3 + 256) + 4 * a2)
     + (*(_DWORD *)(v3 + 148) * a3);
  v7 = *(_QWORD *)(v5 + 616);
  v8 = v4 + 1;
  v9 = 2 * v4 - 1;
  do
  {
    v10 = *(unsigned __int16 *)(v7 + 2 * (v8 - 2)) - *(unsigned __int8 *)(v6 + v9 - 1);
    this = this + v10 * *(unsigned __int8 *)(v6 + v9) * v10;
    --v8;
    v9 -= 2;
  }
  while (v8 > 1);
  return this;
}

uint64_t OnDemandPelScorer::getQuantPerDimComponentScore(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;

  v3 = *(_QWORD *)(this + 16);
  v4 = *(unsigned int *)(v3 + 132);
  if ((int)v4 < 1)
    return 0;
  v5 = this;
  v6 = 0;
  LODWORD(this) = 0;
  v7 = (unsigned __int8 *)(*(_QWORD *)(v3 + 232)
                         + *(unsigned int *)(v3 + 248)
                         + *(unsigned int *)(*(_QWORD *)(v3 + 256) + 4 * a2)
                         + (*(_DWORD *)(v3 + 148) * a3));
  v8 = *(unsigned __int16 **)(v5 + 616);
  v9 = *(_QWORD *)(v5 + 648);
  v10 = 32 * v4;
  do
  {
    v12 = *v8++;
    v11 = v12;
    v13 = *v7++;
    v14 = *(unsigned __int8 *)(v9 + (int)(v6 + (v13 >> 4)));
    this = this + (v11 - v14) * (v11 - v14) * *(unsigned __int8 *)(v9 + (int)(v6 + (v13 & 0xF) + 16));
    v6 += 32;
  }
  while (v10 != v6);
  return this;
}

uint64_t AlignedArray<short>::AlignedArray(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  void *v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a2 + 7;
  if (a2 == -7)
  {
    v5 = 0;
  }
  else
  {
    DgnPrimArray<short>::reallocElts(a1, a2 + 7, 0);
    v5 = *(void **)a1;
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = ((((_DWORD)v5 + 15) & 0xFFFFFFF0) - v5) >> 1;
  bzero(v5, (((_DWORD)v5 + 15) & 0xFFFFFFF0) - v5);
  bzero((void *)(*(_QWORD *)a1 + 2 * *(unsigned int *)(a1 + 16) + 2 * a2), 2 * (7 - *(_DWORD *)(a1 + 16)));
  return a1;
}

void sub_209A2A810(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void Segmentation::printSize(Segmentation *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  int v34;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/segment.cpp", 176, (DgnString *)&v33);
  if (v34)
    v16 = v33;
  else
    v16 = &unk_209A80368;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A80368, a3, &unk_209A80368, v16);
  DgnString::~DgnString((DgnString *)&v33);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A80368);
  v21 = sizeObject<PelSegment *>((uint64_t)this, 0);
  v22 = sizeObject<PelSegment *>((uint64_t)this, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/segment.cpp", 177, (DgnString *)&v33);
  if (v34)
    v27 = v33;
  else
    v27 = &unk_209A80368;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A80368, (34 - a3), (34 - a3), v27, v21, v22, 0);
  DgnString::~DgnString((DgnString *)&v33);
  *a4 += v21;
  *a5 += v22;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/segment.cpp", 178, (DgnString *)&v33);
  if (v34)
    v32 = v33;
  else
    v32 = &unk_209A80368;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, a3, &unk_209A80368, (35 - a3), (35 - a3), v32, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v33);
}

void sub_209A2A9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<PelSegment *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

void MrecInitModule_leafgraph_fstgraph(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t *v36;
  _QWORD *v37;
  __int128 v38;

  if (!gParDebugShowFstGraphDiagnostic)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowFstGraphDiagnostic", byte_209A80392, byte_209A80392, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowFstGraphDiagnostic = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowFstGraphDiagnostic);
  }
  if (!gParDebugFstGraphConstruction)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugFstGraphConstruction", byte_209A80392, byte_209A80392, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugFstGraphConstruction = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstGraphConstruction);
  }
  if (!gParDebugFstGraphConstruction2)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugFstGraphConstruction2", byte_209A80392, byte_209A80392, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugFstGraphConstruction2 = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstGraphConstruction2);
  }
  if (!gParDebugFstGraphConstruction3)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugFstGraphConstruction3", byte_209A80392, byte_209A80392, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDebugFstGraphConstruction3 = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstGraphConstruction3);
  }
  if (!gParDebugFstGraphConstruction4)
  {
    v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugFstGraphConstruction4", byte_209A80392, byte_209A80392, 0, 0, 0);
    *v9 = &unk_24C214CE8;
    gParDebugFstGraphConstruction4 = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstGraphConstruction4);
  }
  if (!gParFstGraphLeftCtxSize)
  {
    v10 = MemChunkAlloc(0x38uLL, 0);
    *(_QWORD *)&v38 = 0x400000000;
    v11 = (_QWORD *)IntGlobalParamBase::IntGlobalParamBase((uint64_t)v10, (uint64_t)"FstGraphLeftCtxSize", (uint64_t)byte_209A80392, (uint64_t)byte_209A80392, 1, &v38, 0);
    *v11 = &unk_24C214A58;
    gParFstGraphLeftCtxSize = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFstGraphLeftCtxSize);
  }
  if (!gParFstGraphRightCtxSize)
  {
    v12 = MemChunkAlloc(0x38uLL, 0);
    *(_QWORD *)&v38 = 0x100000000;
    v13 = (_QWORD *)IntGlobalParamBase::IntGlobalParamBase((uint64_t)v12, (uint64_t)"FstGraphRightCtxSize", (uint64_t)byte_209A80392, (uint64_t)byte_209A80392, 1, &v38, 0);
    *v13 = &unk_24C214A58;
    gParFstGraphRightCtxSize = (uint64_t)v13;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFstGraphRightCtxSize);
  }
  if (!gParFstGraphBigEndian)
  {
    v14 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v14, "FstGraphBigEndian", byte_209A80392, byte_209A80392, 0, 0, 0);
    *v15 = &unk_24C214CE8;
    gParFstGraphBigEndian = (uint64_t)v15;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFstGraphBigEndian);
  }
  if (!gParFstGraphFinalMin)
  {
    v16 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v16, "FstGraphFinalMin", byte_209A80392, byte_209A80392, 1, 0, 0);
    *v17 = &unk_24C214CE8;
    gParFstGraphFinalMin = (uint64_t)v17;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFstGraphFinalMin);
  }
  if (!gParFstGraphFullMin)
  {
    v18 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v18, "FstGraphFullMin", byte_209A80392, byte_209A80392, 0, 0, 0);
    *v19 = &unk_24C214CE8;
    gParFstGraphFullMin = (uint64_t)v19;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFstGraphFullMin);
  }
  if (!gParFstGraphRegularizePush)
  {
    v20 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v20, "FstGraphRegularizePush", byte_209A80392, byte_209A80392, 0, 0, 0);
    *v21 = &unk_24C214CE8;
    gParFstGraphRegularizePush = (uint64_t)v21;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFstGraphRegularizePush);
  }
  if (!gParFstGraphInsertSilence)
  {
    v22 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v22, "FstGraphInsertSilence", byte_209A80392, byte_209A80392, 1, 0, 0);
    *v23 = &unk_24C214CE8;
    gParFstGraphInsertSilence = (uint64_t)v23;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFstGraphInsertSilence);
  }
  if (!gParFstGraphSilenceCost)
  {
    v24 = MemChunkAlloc(0x48uLL, 0);
    v38 = xmmword_209A80380;
    v25 = (_QWORD *)DoubleGlobalParamBase::DoubleGlobalParamBase((uint64_t)v24, (uint64_t)"FstGraphSilenceCost", (uint64_t)byte_209A80392, (uint64_t)byte_209A80392, &v38, 0, 0.0);
    *v25 = &unk_24C215998;
    gParFstGraphSilenceCost = (uint64_t)v25;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFstGraphSilenceCost);
  }
  if (!gParFstGraphAstraFormat)
  {
    v26 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v26, "FstGraphAstraFormat", byte_209A80392, byte_209A80392, 0, 0, 0);
    *v27 = &unk_24C214CE8;
    gParFstGraphAstraFormat = (uint64_t)v27;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFstGraphAstraFormat);
  }
  if (!gParFstGraphSkipArcs)
  {
    v28 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v28, "FstGraphSkipArcs", byte_209A80392, byte_209A80392, 0, 0, 0);
    *v29 = &unk_24C214CE8;
    gParFstGraphSkipArcs = (uint64_t)v29;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFstGraphSkipArcs);
  }
  if (!gParFstGraphWordInsertionCost)
  {
    v30 = MemChunkAlloc(0x48uLL, 0);
    v38 = xmmword_209A80380;
    v31 = (_QWORD *)DoubleGlobalParamBase::DoubleGlobalParamBase((uint64_t)v30, (uint64_t)"FstGraphWordInsertionCost", (uint64_t)byte_209A80392, (uint64_t)byte_209A80392, &v38, 0, 0.0);
    *v31 = &unk_24C215998;
    gParFstGraphWordInsertionCost = (uint64_t)v31;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFstGraphWordInsertionCost);
  }
  if (!gParFstGraphPush)
  {
    v32 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v32, "FstGraphPush", byte_209A80392, byte_209A80392, 0, 0, 0);
    *v33 = &unk_24C214CE8;
    gParFstGraphPush = (uint64_t)v33;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFstGraphPush);
  }
  if (!gParFstGraphPushForwardCost)
  {
    v34 = MemChunkAlloc(0x38uLL, 0);
    *(_QWORD *)&v38 = 0x1F400000000;
    v35 = (_QWORD *)IntGlobalParamBase::IntGlobalParamBase((uint64_t)v34, (uint64_t)"FstGraphPushForwardCost", (uint64_t)byte_209A80392, (uint64_t)byte_209A80392, 0, &v38, 0);
    *v35 = &unk_24C214A58;
    gParFstGraphPushForwardCost = (uint64_t)v35;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFstGraphPushForwardCost);
  }
  if (!gParFstGraphOutputFormat)
  {
    v36 = MemChunkAlloc(0x38uLL, 0);
    *(_QWORD *)&v38 = 0x900000004;
    v37 = (_QWORD *)IntGlobalParamBase::IntGlobalParamBase((uint64_t)v36, (uint64_t)"FstGraphOutputFormat", (uint64_t)byte_209A80392, (uint64_t)byte_209A80392, 4, &v38, 0);
    *v37 = &unk_24C214A58;
    gParFstGraphOutputFormat = (uint64_t)v37;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFstGraphOutputFormat);
  }
}

uint64_t TDataManager::getBoolVar(TDataManager *this, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  _QWORD *exception;
  std::string *v25;
  __int128 v26;
  void *v27[2];
  uint64_t v28;
  _BYTE __p[24];
  uint64_t v30;

  v6 = (*(uint64_t (**)(TDataManager *, const char *, _QWORD, _QWORD))(*(_QWORD *)this + 40))(this, a2, 0, 0);
  if (v6)
  {
    v7 = v6;
    v8 = (char *)operator new[]();
    (*(void (**)(TDataManager *, const char *, char *, uint64_t))(*(_QWORD *)this + 40))(this, a2, v8, v7);
    v8[v7] = 0;
    v9 = *v8;
    v10 = v8;
    v11 = MEMORY[0x24BDAC740];
    if (*v8)
    {
      v10 = v8;
      do
      {
        if ((v9 & 0x80) != 0)
        {
          if (!__maskrune(v9, 0x4000uLL))
            break;
        }
        else if ((*(_DWORD *)(v11 + 4 * v9 + 60) & 0x4000) == 0)
        {
          break;
        }
        v12 = *(unsigned __int8 *)++v10;
        v9 = v12;
      }
      while (v12);
    }
    v13 = &v10[strlen(v10)];
    while (1)
    {
      v14 = v13;
      if (v13 <= v10)
        break;
      --v13;
      v15 = *((unsigned __int8 *)v14 - 1);
      if (*(v14 - 1) < 0)
      {
        if (!__maskrune(v15, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v11 + 4 * v15 + 60) & 0x4000) == 0)
      {
        break;
      }
    }
    *v14 = 0;
    if (!strcmp(v10, "0") || !strcasecmp(v10, "false"))
    {
      a3 = 0;
    }
    else
    {
      if (strcmp(v10, "1") && strcasecmp(v10, "true"))
      {
        MEMORY[0x20BD14990](v8, 0x1000C8077774924);
        tknPrintf("Error: '%s' was not a BOOLean\n", v17, v18, v19, v20, a2);
        std::string::basic_string[abi:ne180100]<0>(v27, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v28) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v27[0], (std::string::size_type)v27[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v27;
          v30 = v28;
        }
        *(_QWORD *)__p = &unk_24C215870;
        if (v30 >= 0)
          v23 = &__p[8];
        else
          v23 = *(const char **)&__p[8];
        conditionalAssert(v23, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/datamgr.cpp", 66, v21, v22);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v30) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v28) < 0)
          operator delete(v27[0]);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *exception = aPpx;
        v25 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v26 = *(_OWORD *)__p;
          exception[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
        }
        *exception = &unk_24C215870;
      }
      a3 = 1;
    }
    MEMORY[0x20BD14990](v8, 0x1000C8077774924);
  }
  return a3;
}

void sub_209A2B608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t TDataManager::setBoolVar(TDataManager *this, const char *a2, int a3)
{
  const char *v3;

  if (a3)
    v3 = "1";
  else
    v3 = "0";
  return (*(uint64_t (**)(TDataManager *, const char *, const char *, uint64_t))(*(_QWORD *)this + 48))(this, a2, v3, 1);
}

uint64_t TDataManager::getIntVar(TDataManager *this, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (*(uint64_t (**)(TDataManager *, const char *, _QWORD, _QWORD))(*(_QWORD *)this + 40))(this, a2, 0, 0);
  if (!v6)
    return a3;
  v7 = v6;
  v8 = (char *)operator new[]();
  (*(void (**)(TDataManager *, const char *, char *, uint64_t))(*(_QWORD *)this + 40))(this, a2, v8, v7);
  v8[v7] = 0;
  v9 = *v8;
  v10 = v8;
  v11 = MEMORY[0x24BDAC740];
  if (*v8)
  {
    v10 = v8;
    do
    {
      if ((v9 & 0x80) != 0)
      {
        if (!__maskrune(v9, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v11 + 4 * v9 + 60) & 0x4000) == 0)
      {
        break;
      }
      v12 = *(unsigned __int8 *)++v10;
      v9 = v12;
    }
    while (v12);
  }
  v13 = &v10[strlen(v10)];
  while (1)
  {
    v14 = v13;
    if (v13 <= v10)
      break;
    --v13;
    v15 = *((unsigned __int8 *)v14 - 1);
    if (*(v14 - 1) < 0)
    {
      if (!__maskrune(v15, 0x4000uLL))
        break;
    }
    else if ((*(_DWORD *)(v11 + 4 * v15 + 60) & 0x4000) == 0)
    {
      break;
    }
  }
  *v14 = 0;
  v16 = atoi(v10);
  MEMORY[0x20BD14990](v8, 0x1000C8077774924);
  return v16;
}

uint64_t TDataManager::setIntVar(TDataManager *this, const char *a2)
{
  void *v4;
  uint64_t v5;
  void *__p;
  uint64_t v8;
  unsigned __int8 v9;
  void *v10;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::ostream::operator<<();
  std::stringbuf::str();
  std::stringbuf::str();
  if (v11 >= 0)
    v4 = &v10;
  else
    v4 = v10;
  if ((v9 & 0x80u) == 0)
    v5 = v9;
  else
    v5 = v8;
  (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(_QWORD *)this + 48))(this, a2, v4, v5);
  if ((char)v9 < 0)
    operator delete(__p);
  if (v11 < 0)
    operator delete(v10);
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD1496C](&v14);
}

void sub_209A2B914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void TDataManager::getStringVar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, 0, 0);
  if (v6)
  {
    v7 = v6;
    v8 = operator new[]();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, v8, v7);
    *(_BYTE *)(v8 + v7) = 0;
    MEMORY[0x20BD14750](a3, v8);
    JUMPOUT(0x20BD14990);
  }
  JUMPOUT(0x20BD14750);
}

off_t TDataManager::getVar(TDataManager *this, char *a2, char *a3, size_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v10;
  FILE *v12;
  FILE *v13;
  off_t v14;
  off_t v15;
  char DirSep;
  char *__filename;
  __int128 v19;
  _BYTE v20[256];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  __filename = v20;
  v19 = xmmword_209A57DD0;
  v21 = 1;
  v7 = (char *)this + 16;
  if (*((char *)this + 39) < 0)
    v7 = *(char **)v7;
  TBuffer<char>::assign((uint64_t)&__filename, v7);
  DirSep = getDirSep();
  TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v19 + 1), &DirSep, 1uLL);
  v8 = 0;
  while (a2[v8++])
    ;
  TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v19 + 1), a2, v8 - 1);
  v10 = 0;
  while (*(unsigned __int8 *)(FILE_EXTENSION + v10++))
    ;
  TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v19 + 1), (char *)FILE_EXTENSION, v10 - 1);
  if (*((_QWORD *)&v19 + 1) >= (unint64_t)v19)
  {
    if (v21)
    {
      DirSep = 0;
      TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v19 + 1), &DirSep, 1uLL);
      --*((_QWORD *)&v19 + 1);
    }
    else if ((_QWORD)v19)
    {
      __filename[(_QWORD)v19 - 1] = 0;
    }
  }
  else
  {
    __filename[*((_QWORD *)&v19 + 1)] = 0;
  }
  v12 = fopen(__filename, "rb");
  v13 = v12;
  if (v12)
  {
    fseek(v12, 0, 2);
    v14 = ftello(v13);
    v15 = v14;
    if (a4 && v14)
    {
      fseek(v13, 0, 0);
      fread(a3, 1uLL, a4, v13);
    }
    fclose(v13);
  }
  else
  {
    v15 = 0;
  }
  if (v21 && __filename != v20 && __filename)
    MEMORY[0x20BD149A8]();
  return v15;
}

void sub_209A2BC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  if (a45 && a10 != v45)
  {
    if (a10)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(exception_object);
}

char *TDataManager::setVar(TDataManager *this, char *a2, const char *a3, size_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v10;
  FILE *v12;
  std::error_code *v13;
  FILE *v14;
  char *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  _QWORD *exception;
  std::string *v25;
  __int128 v26;
  void *v27[2];
  uint64_t v28;
  _BYTE __p[24];
  uint64_t v30;
  char *__filename;
  __int128 v32;
  _BYTE v33[256];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __filename = v33;
  v32 = xmmword_209A57DD0;
  v34 = 1;
  v7 = (char *)this + 16;
  if (*((char *)this + 39) < 0)
    v7 = *(char **)v7;
  TBuffer<char>::assign((uint64_t)&__filename, v7);
  __p[0] = getDirSep();
  TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v32 + 1), __p, 1uLL);
  v8 = 0;
  while (a2[v8++])
    ;
  TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v32 + 1), a2, v8 - 1);
  v10 = 0;
  while (*(unsigned __int8 *)(FILE_EXTENSION + v10++))
    ;
  TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v32 + 1), (char *)FILE_EXTENSION, v10 - 1);
  if (*((_QWORD *)&v32 + 1) >= (unint64_t)v32)
  {
    if (v34)
    {
      __p[0] = 0;
      TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v32 + 1), __p, 1uLL);
      --*((_QWORD *)&v32 + 1);
    }
    else if ((_QWORD)v32)
    {
      __filename[(_QWORD)v32 - 1] = 0;
    }
  }
  else
  {
    __filename[*((_QWORD *)&v32 + 1)] = 0;
  }
  v12 = fopen(__filename, "rb");
  if (v12)
    fclose(v12);
  v13 = (std::error_code *)*((_QWORD *)&v32 + 1);
  if (a4)
  {
    if (*((_QWORD *)&v32 + 1) >= (unint64_t)v32)
    {
      if (v34)
      {
        __p[0] = 0;
        TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v32 + 1), __p, 1uLL);
        --*((_QWORD *)&v32 + 1);
      }
      else if ((_QWORD)v32)
      {
        __filename[(_QWORD)v32 - 1] = 0;
      }
    }
    else
    {
      __filename[*((_QWORD *)&v32 + 1)] = 0;
    }
    v14 = fopen(__filename, "wb");
    if (!v14)
    {
      v16 = TBuffer<char>::c_str((uint64_t)&__filename);
      tknPrintf("Error: Couldn't save '%s' to '%s'.\n", v17, v18, v19, v20, a2, v16);
      std::string::basic_string[abi:ne180100]<0>(v27, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v28) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v27[0], (std::string::size_type)v27[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v27;
        v30 = v28;
      }
      *(_QWORD *)__p = &unk_24C214120;
      if (v30 >= 0)
        v23 = &__p[8];
      else
        v23 = *(const char **)&__p[8];
      conditionalAssert(v23, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/datamgr.cpp", 201, v21, v22);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v30) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v28) < 0)
        operator delete(v27[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *exception = aPpx;
      v25 = (std::string *)(exception + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v26 = *(_OWORD *)__p;
        exception[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
      }
      *exception = &unk_24C214120;
    }
    fwrite(a3, 1uLL, a4, v14);
    result = (char *)fclose(v14);
  }
  else
  {
    if (*((_QWORD *)&v32 + 1) >= (unint64_t)v32)
    {
      if (v34)
      {
        __p[0] = 0;
        TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v32 + 1), __p, 1uLL);
        --*((_QWORD *)&v32 + 1);
      }
      else if ((_QWORD)v32)
      {
        __filename[(_QWORD)v32 - 1] = 0;
      }
    }
    else
    {
      __filename[*((_QWORD *)&v32 + 1)] = 0;
    }
    result = (char *)remove((const std::__fs::filesystem::path *)__filename, v13);
  }
  if (v34)
  {
    result = __filename;
    if (__filename != v33)
    {
      if (__filename)
        return (char *)MEMORY[0x20BD149A8]();
    }
  }
  return result;
}

void sub_209A2C01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  void *v62;
  int v63;
  uint64_t v64;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v63 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v63)
  {
LABEL_6:
    if (a62 && a27 != v64)
    {
      if (a27)
        MEMORY[0x20BD149A8]();
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v62);
  goto LABEL_6;
}

void TDataSaver::~TDataSaver(char **this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  BOOL v7;

  v2 = (char *)(this + 1);
  v3 = *this;
  if (*this != (char *)(this + 1))
  {
    do
    {
      v4 = *((_QWORD *)v3 + 7);
      if (v4)
        MEMORY[0x20BD149A8](v4, 0x1000C4077774924);
      v5 = (char *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)this, this[1]);
}

void TDataSaver::load(uint64_t **this, const TDataManager *a2, char *a3, char *a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  void *__p[2];
  char v14;
  void **v15;

  if (a4)
    v7 = a4;
  else
    v7 = a3;
  v8 = (*(uint64_t (**)(const TDataManager *, char *, _QWORD, _QWORD))(*(_QWORD *)a2 + 40))(a2, a3, 0, 0);
  if (v8)
  {
    v9 = v8;
    v10 = operator new[]();
    (*(void (**)(const TDataManager *, char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3, v10, v9);
    std::string::basic_string[abi:ne180100]<0>(__p, v7);
    v15 = __p;
    v11 = std::__tree<std::__value_type<std::string,std::pair<char *,unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<char *,unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<char *,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15);
    *((_QWORD *)v11 + 7) = v10;
    *((_QWORD *)v11 + 8) = v9;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, v7);
    v15 = __p;
    v12 = std::__tree<std::__value_type<std::string,std::pair<char *,unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<char *,unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<char *,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15);
    *((_QWORD *)v12 + 7) = 0;
    *((_QWORD *)v12 + 8) = 0;
  }
  if (v14 < 0)
    operator delete(__p[0]);
}

void sub_209A2C280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *TDataSaver::save(_QWORD *this, TDataManager *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = this + 1;
  v3 = (_QWORD *)*this;
  if ((_QWORD *)*this != this + 1)
  {
    do
    {
      v5 = v3 + 4;
      if (*((char *)v3 + 55) < 0)
        v5 = (_QWORD *)*v5;
      this = (_QWORD *)(*(uint64_t (**)(TDataManager *, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, v5, v3[7], v3[8]);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v2);
  }
  return this;
}

uint64_t TDataSaver::getStringVar(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::find<std::string>(a1, (const void **)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  if (a1 + 8 != v7 && *(_QWORD *)(v7 + 56))
    a4 = *(_QWORD *)(v7 + 56);
  return MEMORY[0x20BD14750](a3, a4);
}

void sub_209A2C3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TDataManager::~TDataManager(void **this)
{
  *this = off_24C2140A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_24C2140A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x20BD149A8);
}

uint64_t TDataManager::isOpen(TDataManager *this)
{
  return 1;
}

_OWORD *std::__tree<std::__value_type<std::string,std::pair<char *,unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<char *,unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<char *,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void MrecInitModule_snr_channel(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugSnrEstimation)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugSnrEstimation", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugSnrEstimation = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugSnrEstimation);
  }
}

uint64_t MrecInitLibrary_audiosrc(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_filesrc_audiosrc();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughAudiosrc(void)
{
  MrecInitLibrarySet_throughFrame();
  return MrecInitLibrary_audiosrc();
}

unint64_t realloc_array(_QWORD *a1, void **a2, unint64_t a3, size_t a4, uint64_t a5, char a6)
{
  MemChunkRegion *MemChunkRegionAndSuggestSize;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v15;

  v15 = 0;
  MemChunkRegionAndSuggestSize = (MemChunkRegion *)GetMemChunkRegionAndSuggestSize(a1, a3, &v15);
  if ((a6 & 1) != 0 || v15 != a5)
  {
    v12 = MemChunkAlloc(v15, MemChunkRegionAndSuggestSize);
    v13 = v12;
    if (a1)
    {
      if (a4)
        memcpy(v12, a1, a4);
      MemChunkFree(a1, MemChunkRegionAndSuggestSize);
    }
    *a2 = v13;
    return v15;
  }
  else
  {
    *a2 = a1;
  }
  return a5;
}

void TGrammar::TGrammar(TGrammar *this, const TLocaleInfo *a2)
{
  _QWORD *v4;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 7) = 0;
  TAllocator::TAllocator((TGrammar *)((char *)this + 72), 2048);
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 8) = 0;
  *(_BYTE *)this = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  v4 = (_QWORD *)operator new();
  TRegExp::TRegExp(v4, (uint64_t)a2);
  *((_QWORD *)this + 14) = v4;
  *((_QWORD *)this + 1) = TGrammar::addNonTerminal((uint64_t)this, dword_209A803D0, 1);
}

void sub_209A2C738(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  TAllocator *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  void **v8;
  void *v10;

  MEMORY[0x20BD149A8](v5, 0x60C40CE5A77A8);
  v10 = *(void **)(v4 + 144);
  if (v10)
  {
    *(_QWORD *)(v4 + 152) = v10;
    operator delete(v10);
  }
  if (*v8)
    operator delete(*v8);
  TAllocator::clear(v3);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(v2, *v7);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(v1, *v6);
  _Unwind_Resume(a1);
}

_QWORD *TGrammar::addNonTerminal(uint64_t a1, __int32 *a2, int a3)
{
  uint64_t **v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  uint64_t v9;
  __int32 *v10;
  uint64_t v11;
  uint64_t v12;
  __int32 *v14;
  __int32 *v15;
  const __int32 **v16;

  v15 = a2;
  v5 = (uint64_t **)(a1 + 40);
  v6 = std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::find<wchar_t const*>(a1 + 40, (const __int32 **)&v15);
  if (a1 + 48 == v6)
  {
    v8 = wcslen(v15);
    if ((v8 + 1) >> 62)
      v9 = -1;
    else
      v9 = 4 * (v8 + 1);
    v10 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 72), v9);
    v14 = v10;
    wcscpy(v10, v15);
    v7 = TAllocator::allocate((TAllocator *)(a1 + 72), 40);
    v11 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v11 + 1;
    v7[2] = v10;
    v7[3] = v11;
    *v7 = 0;
    v7[1] = 0;
    v7[4] = 0;
    v16 = (const __int32 **)&v14;
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__emplace_unique_key_args<wchar_t const*,std::piecewise_construct_t const&,std::tuple<wchar_t const*&&>,std::tuple<>>(v5, (const __int32 **)&v14, (uint64_t)&std::piecewise_construct, (uint64_t **)&v16)[5] = (uint64_t)v7;
  }
  else
  {
    v7 = *(_QWORD **)(v6 + 40);
  }
  v12 = 1;
  if (!a3)
    v12 = 2;
  v7[1] |= v12;
  return v7;
}

void TGrammar::~TGrammar(TGrammar *this)
{
  TRegExp *v2;
  void *v3;
  void *v4;

  v2 = (TRegExp *)*((_QWORD *)this + 14);
  if (v2)
  {
    TRegExp::~TRegExp(v2);
    MEMORY[0x20BD149A8]();
  }
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 15);
  if (v4)
    operator delete(v4);
  TAllocator::clear((TGrammar *)((char *)this + 72));
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
}

uint64_t TGrammar::computeDerivationForSymbol(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a2[3];
  v4 = v3 >> 6;
  v5 = 1 << v3;
  v6 = *(_QWORD *)(*a3 + 8 * v4);
  if ((v5 & v6) == 0)
  {
    v7 = result;
    *(_QWORD *)(*a3 + 8 * v4) = v6 | v5;
    v8 = a2[3];
    v9 = *(_QWORD *)(result + 64) * v8;
    *(_QWORD *)(*(_QWORD *)(result + 120) + (((unint64_t)(v9 + v8) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v9 + v8);
    v10 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = *(_QWORD *)(v10[2] + 8 * v10[1] - 8);
        *(_QWORD *)(*(_QWORD *)(v7 + 120)
                  + (((unint64_t)(*(_QWORD *)(v12 + 24) + v9) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (*(_BYTE *)(v12 + 24) + v9);
        result = TGrammar::computeDerivationForSymbol(v7, v12, a3);
        v13 = *(_QWORD *)(v7 + 64);
        if (v13)
        {
          v14 = 0;
          v15 = v13 * *(_QWORD *)(v12 + 24);
          v16 = *(_QWORD *)(v7 + 120);
          do
          {
            if (((*(_QWORD *)(v16 + (((v15 + v14) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v15
                                                                                    + v14)) & 1) != 0)
            {
              *(_QWORD *)(v16 + (((v9 + v14) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v9
                                                                                     + v14);
              v13 = *(_QWORD *)(v7 + 64);
            }
            ++v14;
          }
          while (v14 < v13);
        }
        v10 = (_QWORD *)v10[4];
      }
      while (v10);
    }
  }
  return result;
}

void TGrammar::finalize(TGrammar *this)
{
  TGrammar *v2;
  TGrammar *v3;
  TGrammar *v4;
  BOOL v5;
  void *__p[3];

  std::vector<BOOL>::resize((uint64_t)this + 120, *((_QWORD *)this + 8) * *((_QWORD *)this + 8), 0);
  std::vector<BOOL>::vector(__p, *((_QWORD *)this + 8));
  v2 = (TGrammar *)*((_QWORD *)this + 5);
  if (v2 != (TGrammar *)((char *)this + 48))
  {
    do
    {
      TGrammar::computeDerivationForSymbol((uint64_t)this, *((_QWORD **)v2 + 5), __p);
      v3 = (TGrammar *)*((_QWORD *)v2 + 1);
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = *(TGrammar **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (TGrammar *)*((_QWORD *)v2 + 2);
          v5 = *(_QWORD *)v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (v4 != (TGrammar *)((char *)this + 48));
  }
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  TRegExp::doneAdding(*((TRegExp **)this + 14));
  *(_BYTE *)this = 1;
  if (__p[0])
    operator delete(__p[0]);
}

void sub_209A2CB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_209A2CCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *TGrammar::addTerminal(uint64_t a1, __int32 *a2)
{
  uint64_t **v3;
  uint64_t v4;
  _QWORD *v5;
  char **v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int32 *v24;
  __int32 *v25;
  __int32 **v26;

  v25 = a2;
  v3 = (uint64_t **)(a1 + 16);
  v4 = std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::find<wchar_t const*>(a1 + 16, (const __int32 **)&v25);
  if (a1 + 24 != v4)
    return *(_QWORD **)(v4 + 40);
  v6 = (char **)(a1 + 144);
  TRegExp::add(*(const TLocaleInfo ***)(a1 + 112), v25, (uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
  v7 = wcslen(v25);
  if ((v7 + 1) >> 62)
    v8 = -1;
  else
    v8 = 4 * (v7 + 1);
  v24 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 72), v8);
  wcscpy(v24, v25);
  v5 = TAllocator::allocate((TAllocator *)(a1 + 72), 40);
  v9 = (uint64_t)(*(_QWORD *)(a1 + 152) - (_QWORD)*v6) >> 3;
  v5[2] = v24;
  v5[3] = v9;
  *(_OWORD *)v5 = xmmword_209A803C0;
  v5[4] = 0;
  v26 = &v24;
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__emplace_unique_key_args<wchar_t const*,std::piecewise_construct_t const&,std::tuple<wchar_t const*&&>,std::tuple<>>(v3, (const __int32 **)&v24, (uint64_t)&std::piecewise_construct, (uint64_t **)&v26)[5] = (uint64_t)v5;
  v10 = *(_QWORD **)(a1 + 152);
  v11 = *(_QWORD *)(a1 + 160);
  if ((unint64_t)v10 >= v11)
  {
    v13 = ((char *)v10 - *v6) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v14 = v11 - (_QWORD)*v6;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 160, v16);
    else
      v17 = 0;
    v18 = &v17[8 * v13];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = v5;
    v12 = v18 + 8;
    v21 = *(char **)(a1 + 144);
    v20 = *(char **)(a1 + 152);
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = *v6;
    }
    *(_QWORD *)(a1 + 144) = v18;
    *(_QWORD *)(a1 + 152) = v12;
    *(_QWORD *)(a1 + 160) = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = v5;
    v12 = v10 + 1;
  }
  *(_QWORD *)(a1 + 152) = v12;
  return v5;
}

_QWORD *TGrammar::addRule(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5, size_t a6)
{
  size_t v11;
  TAllocator *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *result;
  _QWORD **v19;
  int v20;
  _QWORD *v21;

  v11 = a6 + 1;
  v12 = (TAllocator *)(a1 + 72);
  v13 = (unsigned __int8 *)TAllocator::allocate((TAllocator *)(a1 + 72), a6 + 1);
  v14 = v13;
  if (a6)
    memmove(v13, a5, a6);
  v14[a6] = 0;
  if (v11 >> 61)
    v15 = -1;
  else
    v15 = 8 * v11;
  v16 = TAllocator::allocate(v12, v15);
  v17 = v16;
  if (a6)
    memmove(v16, a4, 8 * a6);
  v17[a6] = a3;
  result = TAllocator::allocate(v12, 48);
  result[2] = v17;
  result[3] = v14;
  *result = a2;
  result[1] = v11;
  v19 = (_QWORD **)(v17 - 1);
  result[4] = 0;
  result[5] = 0;
  do
  {
    v20 = *v14++;
    ++v19;
  }
  while (v20);
  v21 = *v19;
  result[4] = *v21;
  *v21 = result;
  return result;
}

BOOL TGrammar::getTerminals(uint64_t a1, unsigned int *a2, char **a3)
{
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _BOOL4 v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  std::vector<TRegExpMatch>::resize((uint64_t)&v22, 0);
  v21 = TRegExp::match(*(_QWORD **)(a1 + 112), a2, 3, (uint64_t)&v22);
  v6 = v23;
  if (v23 != v22)
  {
    v7 = 0;
    v8 = a3 + 2;
    v9 = a3[1];
    v6 = v22;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v6[3 * v7 + 2]);
      if ((unint64_t)v9 >= *v8)
      {
        v11 = (v9 - *a3) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v12 = *v8 - (_QWORD)*a3;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a3 + 2), v14);
        else
          v15 = 0;
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = v10;
        v9 = v16 + 8;
        v18 = *a3;
        v17 = a3[1];
        if (v17 != *a3)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          v17 = *a3;
        }
        *a3 = v16;
        a3[1] = v9;
        a3[2] = &v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v9 = v10;
        v9 += 8;
      }
      a3[1] = v9;
      ++v7;
      v6 = v22;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * (v23 - v22));
  }
  if (v6)
  {
    v23 = v6;
    operator delete(v6);
  }
  return v21;
}

void sub_209A2D114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void MrecInitModule_ltf_sigproc(void)
{
  __n128 *v0;
  __n128 v1;

  if (!gParDiagnosticLinearTransformation)
  {
    v0 = (__n128 *)MemChunkAlloc(0x40uLL, 0);
    EnumParamRange::EnumParamRange((uint64_t)&v1, (uint64_t)&sDiagnosticLinearTransformationEnum);
    EnumGlobalParamBase::EnumGlobalParamBase(v0, (unint64_t)"DiagnosticLinearTransformation", (unint64_t)&unk_209A8041E, (unint64_t)&unk_209A8041E, 0, &v1, 0);
    v0->n128_u64[0] = (unint64_t)&unk_24C215008;
    gParDiagnosticLinearTransformation = (uint64_t)v0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticLinearTransformation);
  }
}

void LinearTransform::LinearTransform(LinearTransform *this)
{
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 28) = 0u;
  *((_WORD *)this + 22) = 3;
  *((_BYTE *)this + 46) = 0;
  *((_DWORD *)this + 12) = 0;
}

void LinearTransform::LinearTransform(LinearTransform *this, const LinearTransform *a2)
{
  char *v4;
  char *v5;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  v4 = (char *)this + 24;
  *((_QWORD *)this + 7) = 0;
  v5 = (char *)this + 56;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 8, (uint64_t *)a2 + 1, 0, *((_DWORD *)a2 + 4));
  DgnArray<DgnPrimArray<unsigned int>>::copyArraySlice((uint64_t)v4, (_QWORD *)a2 + 3, 0, *((_DWORD *)a2 + 8));
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  DgnArray<DgnPrimArray<short>>::copyArraySlice((uint64_t)v5, (_QWORD *)a2 + 7, 0, *((_DWORD *)a2 + 16));
  *((_WORD *)this + 22) = *((_WORD *)a2 + 22);
  *((_BYTE *)this + 46) = *((_BYTE *)a2 + 46);
}

void sub_209A2D3F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v3);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void LinearTransform::~LinearTransform(LinearTransform *this)
{
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8);
}

uint64_t LinearTransform::setSize(uint64_t this, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = this;
  v6 = *(unsigned int *)(this + 32);
  if ((int)v6 >= 1)
  {
    v7 = 16 * v6 - 16;
    do
    {
      this = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)(v5 + 24) + v7);
      v7 -= 16;
    }
    while (v7 != -16);
  }
  *(_DWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 16) = 0;
  if (*(_DWORD *)v5 != a2 || *(_DWORD *)(v5 + 4) != a3)
  {
    *(_DWORD *)(v5 + 48) = 0;
    v8 = *(unsigned int *)(v5 + 64);
    if ((int)v8 >= 1)
    {
      v9 = 16 * v8 - 16;
      do
      {
        this = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)(v5 + 56) + v9);
        v9 -= 16;
      }
      while (v9 != -16);
    }
    *(_DWORD *)(v5 + 64) = 0;
  }
  *(_DWORD *)v5 = a2;
  *(_DWORD *)(v5 + 4) = a3;
  if (!*(_DWORD *)(v5 + 48))
    *(_DWORD *)(v5 + 48) = (a2 + 7) & 0xFFFFFFF8;
  return this;
}

void LinearTransform::setTransform(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;

  v8 = a7;
  if (!*(_DWORD *)(a1 + 4) || !*(_DWORD *)a1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ltf.cpp", 167, (uint64_t)"sigproc/ltf", 5, (uint64_t)"%s", a7, a8, (char)&unk_209A8041E);
  BinaryIntScale::setScale((_DWORD *)(a1 + 40), a6);
  if (1 << *(_DWORD *)(a1 + 40) != a6)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ltf.cpp", 171, (uint64_t)"sigproc/ltf", 1, (uint64_t)&errStr_sigproc_ltf_E_INCORRECT_INTSCALE, v20, v21, a6);
  *(_WORD *)(a1 + 44) = a3;
  if (a3 != 3)
  {
    if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a1 + 4))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ltf.cpp", 177, (uint64_t)"sigproc/ltf", 3, (uint64_t)"%.500s %u %u", v20, v21, (char)"row");
      a3 = *(unsigned __int16 *)(a1 + 44);
    }
    v27 = v8;
    if (a3 == 2)
      v22 = 1;
    else
      v22 = *(_DWORD *)a1;
    v23 = *(unsigned int *)(a1 + 4);
    if ((_DWORD)v23)
    {
      v24 = 0;
      v25 = 8;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)a2 + v25) != v22)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ltf.cpp", 194, (uint64_t)"sigproc/ltf", 3, (uint64_t)"%.500s %u %u", v20, v21, (char)"column");
          v23 = *(unsigned int *)(a1 + 4);
        }
        ++v24;
        v25 += 16;
      }
      while (v24 < v23);
    }
    DgnArray<DgnPrimArray<unsigned int>>::copyArraySlice(a1 + 24, (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8));
    v8 = v27;
  }
  *(_BYTE *)(a1 + 46) = a5;
  if (a5)
  {
    v26 = *(_DWORD *)(a4 + 8);
    if (v26 != *(_DWORD *)(a1 + 4))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ltf.cpp", 209, (uint64_t)"sigproc/ltf", 4, (uint64_t)"%u %u", v20, v21, *(_DWORD *)(a4 + 8));
      v26 = *(_DWORD *)(a4 + 8);
    }
    DgnPrimArray<int>::copyArraySlice(a1 + 8, (uint64_t *)a4, 0, v26);
  }
  if (v8)
    LinearTransform::verifyMatrix((LinearTransform *)a1, v15, v16, v17, v18, v19, v20, v21);
  LinearTransform::padMatrix((LinearTransform *)a1);
}

void LinearTransform::verifyMatrix(LinearTransform *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t i;
  int v19;

  v9 = *((unsigned __int16 *)this + 22);
  if (v9 == 2)
  {
    v16 = *((unsigned int *)this + 1);
    if ((_DWORD)v16)
    {
      v17 = 0;
      for (i = 0; i < v16; ++i)
      {
        v19 = **(_DWORD **)(*((_QWORD *)this + 3) + v17);
        if (v19 != (__int16)v19)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ltf.cpp", 303, (uint64_t)"sigproc/ltf", 6, (uint64_t)"%u %u %d", a7, a8, i);
          v16 = *((unsigned int *)this + 1);
        }
        v17 += 16;
      }
    }
  }
  else if (v9 == 1)
  {
    v10 = *((unsigned int *)this + 1);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = *(unsigned int *)this;
      v13 = v12;
      do
      {
        if (v13)
        {
          v14 = 0;
          do
          {
            v15 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16 * v11) + 4 * v14);
            if (v15 != (__int16)v15)
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ltf.cpp", 315, (uint64_t)"sigproc/ltf", 6, (uint64_t)"%u %u %d", a7, a8, v11);
              v12 = *(unsigned int *)this;
            }
            ++v14;
          }
          while (v14 < v12);
          v10 = *((unsigned int *)this + 1);
          v13 = v12;
        }
        ++v11;
      }
      while (v11 < v10);
    }
  }
}

void LinearTransform::padMatrix(LinearTransform *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int *v16;
  _WORD *v17;
  uint64_t v18;
  int v19;

  if (!*((_DWORD *)this + 12))
    *((_DWORD *)this + 12) = (*(_DWORD *)this + 7) & 0xFFFFFFF8;
  if (*((_WORD *)this + 22) == 1)
  {
    v2 = (_QWORD *)((char *)this + 56);
    v3 = *((unsigned int *)this + 1);
    v4 = *((_DWORD *)this + 17);
    if (v3 > v4)
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 56, v3 - v4, 0);
    v5 = *((unsigned int *)this + 16);
    if (v5 <= v3)
    {
      if (v5 < v3)
      {
        v8 = v3 - v5;
        v9 = 16 * v5;
        do
        {
          v10 = (_QWORD *)(*v2 + v9);
          *v10 = 0;
          v10[1] = 0;
          v9 += 16;
          --v8;
        }
        while (v8);
      }
    }
    else if ((int)v5 > (int)v3)
    {
      v6 = (int)v5;
      v7 = 16 * (int)v5 - 16;
      do
      {
        --v6;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v2 + v7);
        v7 -= 16;
      }
      while (v6 > (int)v3);
    }
    *((_DWORD *)this + 16) = v3;
    if (*((_DWORD *)this + 1))
    {
      v11 = 0;
      v12 = *((_DWORD *)this + 12);
      do
      {
        v13 = *v2 + 16 * v11;
        v14 = *(_DWORD *)(v13 + 12);
        if (v12 > v14)
          DgnPrimArray<short>::reallocElts(*v2 + 16 * v11, v12 - v14, 0);
        *(_DWORD *)(v13 + 8) = v12;
        v15 = *(unsigned int *)this;
        if ((_DWORD)v15)
        {
          v16 = *(int **)(*((_QWORD *)this + 3) + 16 * v11);
          v17 = *(_WORD **)(*((_QWORD *)this + 7) + 16 * v11);
          v18 = *(unsigned int *)this;
          do
          {
            v19 = *v16++;
            *v17++ = v19;
            --v18;
          }
          while (v18);
        }
        v12 = *((_DWORD *)this + 12);
        if (v15 < v12)
          bzero((void *)(*(_QWORD *)(*v2 + 16 * v11) + 2 * v15), 2 * (v12 + ~(_DWORD)v15) + 2);
        ++v11;
      }
      while (v11 < *((unsigned int *)this + 1));
    }
  }
}

uint64_t LinearTransform::getUnscaledData(int *a1, uint64_t *a2, double **a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  double v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int *v20;
  double v21;
  double *v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;

  DgnMatrix::makeIdentity((DgnMatrix *)a1[1], (uint64_t)&v24);
  *a2 = (uint64_t)v24;
  DgnPrimFixArray<double>::copyArraySlice((uint64_t)(a2 + 1), &v25, 0, v26);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v25);
  v6 = a1[1];
  LODWORD(v25) = 0;
  v24 = 0;
  if ((_DWORD)v6)
  {
    v24 = MemChunkAlloc(8 * v6, 0);
    LODWORD(v25) = v6;
    bzero(v24, 8 * v6);
  }
  DgnPrimFixArray<double>::copyArraySlice((uint64_t)a3, (uint64_t *)&v24, 0, v6);
  result = DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v24);
  v8 = *((unsigned __int16 *)a1 + 22);
  if (v8 != 2)
  {
    if (v8 == 3)
      goto LABEL_12;
    result = (uint64_t)DgnMatrix::setNumRowsAndCols(a2, a1[1], *a1);
  }
  v9 = a1[1];
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = *a1;
    v12 = *(_DWORD *)a2;
    v13 = a2[1];
    do
    {
      if ((_DWORD)v11)
      {
        v14 = *(int **)(*((_QWORD *)a1 + 3) + 16 * v10);
        v15 = (double)(unint64_t)(1 << a1[10]);
        v16 = v11;
        v17 = v10;
        do
        {
          v18 = *v14++;
          *(double *)(v13 + 8 * v17) = (double)v18 / v15;
          v17 += v12;
          --v16;
        }
        while (v16);
      }
      ++v10;
    }
    while (v10 != v9);
  }
LABEL_12:
  if (*((_BYTE *)a1 + 46))
  {
    v19 = a1[1];
    if ((_DWORD)v19)
    {
      v20 = (int *)*((_QWORD *)a1 + 1);
      v21 = (double)(unint64_t)(1 << a1[10]);
      v22 = *a3;
      do
      {
        v23 = *v20++;
        *v22++ = (double)v23 / v21;
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

void sub_209A2DBEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t LinearTransform::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sizeObject<unsigned int>(a1 + 8, a2);
  v5 = sizeObject<DgnPrimArray<unsigned int>>(a1 + 24, a2);
  v6 = sizeObject(a1 + 40, a2);
  v7 = sizeObject<DgnPrimArray<unsigned short>>(a1 + 56, a2);
  v8 = 14;
  if (a2 == 3)
    v8 = 0;
  return (v8 | (a2 != 3)) + v4 + v5 + v6 + v7;
}

uint64_t LinearTransform::writeObject(LinearTransform *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (int *)this + 10, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 8, a3);
  writeObject<DgnPrimArray<unsigned int>>((uint64_t)a2, (uint64_t)this + 24, a3);
  writeObject((uint64_t)a2, (int *)this, a3);
  writeObject((uint64_t)a2, (int *)this + 1, a3);
  writeObject((uint64_t)a2, (unsigned __int16 *)this + 22, a3);
  return writeObject((uint64_t)a2, (unsigned __int8 *)this + 46, a3);
}

uint64_t LinearTransform::transformMeans(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  unsigned int v13;
  unsigned __int8 *v14;
  _DWORD *v15;
  int v16;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];

  v6 = *(unsigned int *)(a2 + 8);
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v20, *(_DWORD *)(a2 + 8));
  v19[0] = 0;
  v19[1] = 0;
  if ((_DWORD)v6)
  {
    for (i = 0; i != v6; ++i)
      *(_BYTE *)(v20[0] + i) = *(_DWORD *)(*(_QWORD *)a2 + 4 * i);
  }
  v18[0] = 0;
  v18[1] = 0;
  LinearTransform::doTransform(a1, (uint64_t)v20, (uint64_t)v19, v7, v8, v9, v10, v11);
  v13 = *(_DWORD *)(a3 + 12);
  if (v6 <= v13)
  {
    *(_DWORD *)(a3 + 8) = v6;
    if (!(_DWORD)v6)
      goto LABEL_9;
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a3, v6 - v13, 0);
    *(_DWORD *)(a3 + 8) = v6;
  }
  v14 = (unsigned __int8 *)v19[0];
  v15 = *(_DWORD **)a3;
  do
  {
    v16 = *v14++;
    *v15++ = v16;
    --v6;
  }
  while (v6);
LABEL_9:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v19);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
}

void sub_209A2DE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void LinearTransform::doTransform(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  void *v34;

  if (*a1 != *(_DWORD *)(a2 + 8))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ltf.cpp", 390, (uint64_t)"sigproc/ltf", 2, (uint64_t)"%u %u", a7, a8, *a1);
  v11 = a1[1];
  if (*(_DWORD *)(a3 + 12) < v11)
  {
    v34 = 0;
    *(_DWORD *)(a3 + 12) = realloc_array(*(_QWORD **)a3, &v34, v11, *(unsigned int *)(a3 + 8), *(unsigned int *)(a3 + 8), 1);
    *(_QWORD *)a3 = v34;
  }
  *(_DWORD *)(a3 + 8) = v11;
  v12 = *((unsigned __int16 *)a1 + 22);
  if (v12 == 3)
  {
    v13 = a1[1];
    v14 = (v13 - 1);
    if (v13 - 1 >= 0)
    {
      do
      {
        v15 = a1[10];
        v16 = 1 << (v15 - 1);
        if (!v15)
          LODWORD(v16) = 0;
        v17 = ((*(unsigned __int8 *)(*(_QWORD *)a2 + v14) << v15) + *(_DWORD *)(*((_QWORD *)a1 + 1) + 4 * v14)
                                                                  + (int)v16) >> v15;
        if (v17 <= 0)
          v18 = 0;
        else
          v18 = -1;
        if (v17 >= 0x100)
          LOBYTE(v17) = v18;
        *(_BYTE *)(*(_QWORD *)a3 + v14--) = v17;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    v19 = a1[1] - 1;
    if ((v19 & 0x80000000) == 0)
    {
      do
      {
        v20 = *((unsigned __int8 *)a1 + 46);
        if (*((_BYTE *)a1 + 46))
          v20 = *(_DWORD *)(*((_QWORD *)a1 + 1) + 4 * v19);
        if (v12 == 2)
        {
          v21 = v19;
          v20 += **(_DWORD **)(*((_QWORD *)a1 + 3) + 16 * v19) * *(unsigned __int8 *)(*(_QWORD *)a2 + v19);
        }
        else
        {
          v22 = *a1;
          v23 = *a1 - 1;
          if (v23 < 0)
          {
            v21 = v19;
          }
          else
          {
            v21 = v19;
            v24 = (unsigned __int8 *)(*(_QWORD *)a2 + v23);
            v25 = (int *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16 * v19) + 4 * v23);
            do
            {
              v27 = *v25--;
              v26 = v27;
              v28 = *v24--;
              v20 += v26 * v28;
              --v22;
            }
            while (v22);
          }
        }
        v29 = a1[10];
        v30 = 1 << (v29 - 1);
        if (!v29)
          LODWORD(v30) = 0;
        v31 = ((int)v30 + v20) >> v29;
        if (v31 <= 0)
          v32 = 0;
        else
          v32 = -1;
        if (v31 >= 0x100)
          LOBYTE(v31) = v32;
        *(_BYTE *)(*(_QWORD *)a3 + v21) = v31;
      }
      while ((int)v19-- > 0);
    }
  }
}

void MrecInitLibrarySet_throughFstgraph(void)
{
  MrecInitLibrarySet_throughFst();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_leafgraph_fstgraph();
}

void MrecInitModule_util_mrecutil(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;

  if (!gParDiagnosticShowIdealizedObjectSizes)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DiagnosticShowIdealizedObjectSizes", &byte_209A88803, &byte_209A88803, 0, SetShadowDiagnosticShowIdealizedObjectSizes, 0);
    *v1 = &unk_24C214CE8;
    gParDiagnosticShowIdealizedObjectSizes = (uint64_t)v1;
    gShadowDiagnosticShowIdealizedObjectSizes = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticShowIdealizedObjectSizes);
  }
  if (!gParDiagnosticTrackObjectPointerAllocation)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DiagnosticTrackObjectPointerAllocation", &byte_209A88803, &byte_209A88803, 0, SetTrackObjectPointerAllocation, 0);
    *v3 = &unk_24C214CE8;
    gParDiagnosticTrackObjectPointerAllocation = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticTrackObjectPointerAllocation);
  }
}

uint64_t getShipObjectSizeDescription@<X0>(FileSpec *a1@<X0>, uint64_t a2@<X1>, DgnString *a3@<X8>)
{
  DgnString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  DgnString::DgnString(a3);
  FileSpec::getRelativeSourceFileName(a1, a3, v6);
  return DgnString::printfAppend(a3, "(%u)", v7, v8, v9, a2);
}

void sub_209A2E194(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

double MrecBeginningOfTime(void)
{
  DgnPrinterMgr *v0;
  DgnThreadMgr *v1;
  MemChunkRegion **v2;
  MemChunkRegion *v3;

  CPUID::initCPUID((CPUID *)&CPUID::smCPUID);
  ClockTimer::initClockTimer((ClockTimer *)&ClockTimer::smClockTimer);
  MemChunkInit();
  DgnPrinterMgr::startupDgnPrinterMgr(v0);
  ++sLogRefCount;
  DgnThreadMgr::startupThreadMgr(v1);
  ClockTimer::initCyclesPerSecondAndSpeedFactor((ClockTimer *)&ClockTimer::smClockTimer);
  if (MemChunkRegion::smTlsID == -1)
    goto LABEL_5;
  v2 = (MemChunkRegion **)pthread_getspecific(MemChunkRegion::smTlsID);
  if (!v2)
    goto LABEL_5;
  v3 = *v2;
  if (!v3)
  {
    pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_5:
    v3 = (MemChunkRegion *)&gGlobalMemChunkRegion;
  }
  return MemChunkRegion::resetMaxAlloc(v3);
}

void StartupMrecutil(DgnSharedMemMgr *a1, const char *a2)
{
  GlobalParamMgr *inited;
  ParamSpecMgr *v3;

  DgnSharedMemMgr::startupDSMMgr(a1, a2);
  inited = (GlobalParamMgr *)MrecInitModule_sdpres_sdapi();
  v3 = (ParamSpecMgr *)GlobalParamMgr::startupGlobalParamMgr(inited);
  ParamSpecMgr::startupParamSpecMgrs(v3);
}

void MrecutilPrintSize(unsigned int a1, int a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (DgnPrinterMgr::smpDgnPrinterMgr)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    DgnPrinterMgr::printSize((DgnPrinterMgr *)DgnPrinterMgr::smpDgnPrinterMgr, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (DgnSharedMemMgr::smpDSMMgr)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    DgnSharedMemMgr::printSize((DgnSharedMemMgr *)DgnSharedMemMgr::smpDSMMgr, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (GlobalParamMgr::smpGlobalParamMgr)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    GlobalParamMgr::printSize((GlobalParamMgr *)GlobalParamMgr::smpGlobalParamMgr, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (qword_253DF2828)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ParamSpecMgr::printSize((ParamSpecMgr *)qword_253DF2828, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (qword_253DF2830)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ParamSpecMgr::printSize((ParamSpecMgr *)qword_253DF2830, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (qword_253DF2838)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ParamSpecMgr::printSize((ParamSpecMgr *)qword_253DF2838, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (qword_253DF2840)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ParamSpecMgr::printSize((ParamSpecMgr *)qword_253DF2840, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (qword_253DF2848)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ParamSpecMgr::printSize((ParamSpecMgr *)qword_253DF2848, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (qword_253DF2850)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ParamSpecMgr::printSize((ParamSpecMgr *)qword_253DF2850, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (qword_253DF2858)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ParamSpecMgr::printSize((ParamSpecMgr *)qword_253DF2858, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (qword_253DF2860)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ParamSpecMgr::printSize((ParamSpecMgr *)qword_253DF2860, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (qword_253DF2868)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ParamSpecMgr::printSize((ParamSpecMgr *)qword_253DF2868, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (qword_253DF2870)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ParamSpecMgr::printSize((ParamSpecMgr *)qword_253DF2870, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (qword_253DF2878)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ParamSpecMgr::printSize((ParamSpecMgr *)qword_253DF2878, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
  if (qword_253DF2880)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ParamSpecMgr::printSize((ParamSpecMgr *)qword_253DF2880, 0xFFFFFFFFLL, (a2 + 1), &v11, &v10, &v9);
    *a3 += v11;
    *a4 += v10;
    *a5 += v9;
  }
}

DgnString *AppendFullMrecMachineInfo(DgnString *a1)
{
  const char *MrecName;
  uint64_t CyclesPerSecond;
  int DynamicSpeechRecognitionSpeedFactor;
  int StaticSpeechRecognitionSpeedFactor;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  DgnString *result;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  size_t v19;
  unint64_t v20;
  utsname v21;
  char __str[1024];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  MrecName = GetMrecName();
  snprintf(__str, 0x400uLL, "%s Machine OS: ", MrecName);
  DgnString::operator+=(a1, __str);
  if (uname(&v21))
    strcpy(__str, "<Unknown>\n");
  else
    snprintf(__str, 0x400uLL, "%s %s %s\n", v21.sysname, v21.release, v21.machine);
  DgnString::operator+=(a1, __str);
  CyclesPerSecond = ClockTimer::getCyclesPerSecond((ClockTimer *)&ClockTimer::smClockTimer);
  DynamicSpeechRecognitionSpeedFactor = ClockTimer::getDynamicSpeechRecognitionSpeedFactor((ClockTimer *)&ClockTimer::smClockTimer);
  StaticSpeechRecognitionSpeedFactor = ClockTimer::getStaticSpeechRecognitionSpeedFactor((ClockTimer *)&ClockTimer::smClockTimer);
  v6 = GetMrecName();
  snprintf(__str, 0x64uLL, "%s Machine Speed: CyclesPerMicrosec: %llu; DynSRSF: %u; StatSRSF: %u\n",
    v6,
    (CyclesPerSecond + 500000) / 0xF4240uLL,
    DynamicSpeechRecognitionSpeedFactor,
    StaticSpeechRecognitionSpeedFactor);
  DgnString::operator+=(a1, __str);
  v19 = 8;
  v20 = 0;
  sysctlbyname("hw.memsize", &v20, &v19, 0, 0);
  v7 = GetMrecName();
  snprintf(v21.sysname, 0x64uLL, "%s Machine Memory: RAM: %lluM\n", v7, v20 >> 20);
  DgnString::operator+=(a1, v21.sysname);
  v19 = 8;
  v20 = 0;
  sysctlbyname("hw.logicalcpu", &v20, &v19, 0, 0);
  v8 = v20;
  v9 = sysconf(29);
  v10 = GetMrecName();
  snprintf(v21.sysname, 0x64uLL, "%s Machine Info: #LPUs: %llu; PageSize: %llu; AllocGran: %llu\n", v10, v8, v9, v9);
  DgnString::operator+=(a1, v21.sysname);
  v11 = (char *)GetMrecName();
  DgnString::operator+=(a1, v11);
  DgnString::operator+=(a1, " Machine Name: ");
  if (gethostname(v21.sysname, 0x400uLL))
    strcpy(v21.sysname, "<Unknown>");
  DgnString::operator+=(a1, v21.sysname);
  result = DgnString::operator+=(a1, "\n");
  v13 = (char *)&CPUID::smCPUID + dword_253DF4D94 + 9369;
  if (*v13)
  {
    v14 = (char *)GetMrecName();
    DgnString::operator+=(a1, v14);
    DgnString::operator+=(a1, " CPU Label: ");
    DgnString::operator+=(a1, v13);
    result = DgnString::operator+=(a1, "\n");
  }
  if (byte_253DF2D31)
  {
    v15 = (char *)GetMrecName();
    DgnString::operator+=(a1, v15);
    DgnString::operator+=(a1, " CPU Details: ");
    DgnString::operator+=(a1, &byte_253DF2D31);
    result = DgnString::operator+=(a1, "\n");
  }
  if (byte_253DF3531)
  {
    v16 = (char *)GetMrecName();
    DgnString::operator+=(a1, v16);
    DgnString::operator+=(a1, " CPU Processors: ");
    DgnString::operator+=(a1, &byte_253DF3531);
    result = DgnString::operator+=(a1, "\n");
  }
  if (*((_BYTE *)&CPUID::smCPUID + 5241))
  {
    v17 = (char *)GetMrecName();
    DgnString::operator+=(a1, v17);
    DgnString::operator+=(a1, " CPU Instruction Sets: ");
    DgnString::operator+=(a1, (char *)&CPUID::smCPUID + 5241);
    result = DgnString::operator+=(a1, "\n");
  }
  if (*((_BYTE *)&CPUID::smCPUID + 7289))
  {
    v18 = (char *)GetMrecName();
    DgnString::operator+=(a1, v18);
    DgnString::operator+=(a1, " CPU Cache Sizes: ");
    DgnString::operator+=(a1, (char *)&CPUID::smCPUID + 7289);
    return DgnString::operator+=(a1, "\n");
  }
  return result;
}

uint64_t RoundUpToPowerOf2(int a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;

  v2 = 0;
  v3 = a1 - 1;
  if (a1 != 1)
  {
    do
    {
      ++v2;
      v4 = v3 > 1;
      v3 >>= 1;
    }
    while (v4);
  }
  if (a2)
    *a2 = v2;
  return (1 << v2);
}

double DgnSqrt(double a1)
{
  return sqrt(a1);
}

void SetShadowDiagnosticShowIdealizedObjectSizes(void)
{
  gShadowDiagnosticShowIdealizedObjectSizes = *(_BYTE *)(gParDiagnosticShowIdealizedObjectSizes + 41);
}

void SetTrackObjectPointerAllocation(void)
{
  gShadowDiagnosticTrackObjectPointerAllocation = *(_BYTE *)(gParDiagnosticTrackObjectPointerAllocation + 41);
}

uint64_t NetNBestAlg::getNBest(NetNBestAlg *this, unint64_t a2, unint64_t a3, int a4, int a5)
{
  _QWORD *Min;
  uint64_t result;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;

  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_QWORD *)this + 15) = 0;
  for (*((_DWORD *)this + 28) = 0; *((_DWORD *)this + 24); *((_QWORD *)this + 5) = Min)
  {
    Min = (_QWORD *)DgnHeap<NBestQueueItem>::extractMin((uint64_t)this + 88);
    *Min = *((_QWORD *)this + 5);
  }
  result = (uint64_t)this + 136;
  if (a3 <= 0xFFFFFFFD)
  {
    v35 = (uint64_t *)((char *)this + 136);
    v34 = 1 << a2;
    v33 = a2 >> 5;
    *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v33) |= 1 << a2;
    DgnPrimQueue<NBestQueueItem,DgnPrimStructArray<NBestQueueItem>>::enqueue((uint64_t)this + 104, a2 | (a3 << 32), a4);
    while (1)
    {
      while (*((_DWORD *)this + 32))
      {
        v12 = DgnPrimQueue<NBestQueueItem,DgnPrimStructArray<NBestQueueItem>>::dequeue((uint64_t)this + 104);
        v14 = HIDWORD(v12);
        if (HIDWORD(v12) != -2)
        {
          v15 = v13;
          do
          {
            v16 = *(_QWORD *)(**(_QWORD **)this + 8 * WORD1(v14));
            v17 = (unsigned __int16)v14;
            v18 = (*(__int16 *)(v16 + 16 * (unsigned __int16)v14 + 12) + v15);
            if ((int)v18 < a5)
            {
              v19 = (unsigned int *)(v16 + 16 * v17);
              v20 = *v19;
              v36 = __PAIR64__(v19[2], v20);
              v37 = v18;
              if (((*(_DWORD *)(*((_QWORD *)this + 2) + ((v20 >> 3) & 0x1FFFFFFC)) >> v20) & 1) != 0)
              {
                a2 = a2 & 0xFFFFFFFF00000000 | v18;
                DgnPrimQueue<NBestQueueItem,DgnPrimStructArray<NBestQueueItem>>::enqueue((uint64_t)this + 104, v36, a2);
              }
              else
              {
                DgnPriorityQueue<NBestQueueItem>::push((NetNBestAlg *)((char *)this + 32), &v36);
              }
            }
            LODWORD(v14) = *(_DWORD *)(v16 + 16 * v17 + 4);
          }
          while ((_DWORD)v14 != -2);
        }
      }
      if (!*((_DWORD *)this + 24))
        break;
      v21 = DgnHeap<NBestQueueItem>::extractMin((uint64_t)this + 88);
      v22 = *(_QWORD *)v21;
      v23 = *(unsigned int *)(v21 + 8);
      *(_QWORD *)v21 = *((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v21;
      v24 = *((_QWORD *)this + 2);
      v25 = v22 >> 5;
      if ((*(_DWORD *)(v24 + 4 * v25) & (1 << v22)) == 0)
      {
        v26 = *((_DWORD *)this + 36);
        if (v26 == *((_DWORD *)this + 37))
        {
          DgnArray<RuleDesc>::reallocElts((uint64_t)v35, 1, 1);
          v26 = *((_DWORD *)this + 36);
          v24 = *((_QWORD *)this + 2);
        }
        v27 = *((_QWORD *)this + 17) + 12 * v26;
        *(_QWORD *)v27 = v22;
        *(_DWORD *)(v27 + 8) = v23;
        *((_DWORD *)this + 36) = v26 + 1;
        *(_DWORD *)(v24 + 4 * v25) |= 1 << v22;
      }
      a3 = a3 & 0xFFFFFFFF00000000 | v23;
      DgnPrimQueue<NBestQueueItem,DgnPrimStructArray<NBestQueueItem>>::enqueue((uint64_t)this + 104, v22, a3);
    }
    v28 = *((unsigned int *)this + 36);
    v29 = *((_QWORD *)this + 2);
    result = (uint64_t)this + 136;
    if ((int)v28 >= 1)
    {
      v30 = *v35;
      v31 = v28 + 1;
      do
      {
        v32 = *(unsigned int *)(v30 + 12 * (v31 - 2));
        *(_DWORD *)(v29 + ((v32 >> 3) & 0x1FFFFFFC)) &= ~(1 << v32);
        --v31;
      }
      while (v31 > 1);
    }
    *(_DWORD *)(v29 + 4 * v33) &= ~v34;
  }
  return result;
}

void DgnPrimQueue<NBestQueueItem,DgnPrimStructArray<NBestQueueItem>>::enqueue(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *(_DWORD *)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 8);
  if (v6 == v7)
  {
    v8 = *(_DWORD *)(a1 + 12);
    if (v6 == v8)
    {
      DgnArray<RuleDesc>::reallocElts(a1, 1, 1);
      v8 = *(_DWORD *)(a1 + 12);
      v6 = *(_DWORD *)(a1 + 24);
    }
    *(_DWORD *)(a1 + 8) = v8;
    v9 = v8 - v6;
    if (v6)
    {
      v10 = *(_DWORD *)(a1 + 16);
      if (v10)
      {
        memmove((void *)(*(_QWORD *)a1 + 12 * v10 + 12 * v9), (const void *)(*(_QWORD *)a1 + 12 * v10), 12 * (v6 - v10));
        v6 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 16) += v9;
      }
      else
      {
        *(_DWORD *)(a1 + 20) = v6;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 16) = 0;
    }
    bzero((void *)(*(_QWORD *)a1 + 12 * v6), 12 * v9);
    v7 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 24);
  }
  v11 = *(_DWORD *)(a1 + 20);
  v12 = *(_QWORD *)a1 + 12 * v11;
  *(_QWORD *)v12 = a2;
  *(_DWORD *)(v12 + 8) = a3;
  if (v11 + 1 == v7)
    v13 = 0;
  else
    v13 = v11 + 1;
  *(_DWORD *)(a1 + 20) = v13;
  *(_DWORD *)(a1 + 24) = v6 + 1;
}

uint64_t DgnPrimQueue<NBestQueueItem,DgnPrimStructArray<NBestQueueItem>>::dequeue(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;

  v1 = *(_DWORD *)(a1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 12 * v1);
  v3 = v1 + 1;
  *(_DWORD *)(a1 + 16) = v3;
  v4 = *(_DWORD *)(a1 + 24) - 1;
  *(_DWORD *)(a1 + 24) = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = v3 >= v5;
    v7 = v3 - v5;
    if (v6)
      *(_DWORD *)(a1 + 16) = v7;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return v2;
}

uint64_t DgnPriorityQueue<NBestQueueItem>::push(DgnPool *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    DgnPool::addChunk(this);
    v4 = *((_QWORD *)this + 1);
  }
  *((_QWORD *)this + 1) = *(_QWORD *)v4;
  v5 = *a2;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v4 = v5;
  return DgnHeap<NBestQueueItem>::insert((uint64_t)this + 56, v4);
}

uint64_t DgnHeap<NBestQueueItem>::insert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4;
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 12))
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1, 1, 1);
    v5 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = 0;
  *(_DWORD *)(a1 + 8) = v5 + 1;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a2;
  return DgnHeap<NBestQueueItem>::heapifyUp((uint64_t *)a1, v4);
}

uint64_t DgnHeap<NBestQueueItem>::heapifyUp(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8 * a2);
  if ((int)a2 < 1)
  {
    v7 = a2;
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 8);
    while (1)
    {
      v5 = ((((int)a2 + 1) >> 1) - 1);
      v2 = *a1;
      v6 = *(_QWORD *)(*a1 + 8 * v5);
      v7 = a2;
      if (v4 >= *(_DWORD *)(v6 + 8))
        break;
      *(_QWORD *)(v2 + 8 * a2) = v6;
      v8 = (int)a2 <= 2;
      a2 = ((((int)a2 + 1) >> 1) - 1);
      if (v8)
      {
        v2 = *a1;
        v7 = v5;
        a2 = v5;
        break;
      }
    }
  }
  *(_QWORD *)(v2 + 8 * v7) = v3;
  return a2;
}

void MrecInitModule_model_recogctl(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;

  if (!gParDebugShowLoadVocCalls)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowLoadVocCalls", (const char *)&unk_209A8041F, (const char *)&unk_209A8041F, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowLoadVocCalls = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowLoadVocCalls);
  }
  if (!gParDebugShowFstCompilationTimes)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugShowFstCompilationTimes", (const char *)&unk_209A8041F, (const char *)&unk_209A8041F, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugShowFstCompilationTimes = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowFstCompilationTimes);
  }
}

void ModelMgr::ModelMgr(ModelMgr *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;

  *(_QWORD *)this = 0x100010000001DLL;
  *((_QWORD *)this + 1) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  v23 = (char *)this + 40;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0x100010000001DLL;
  *((_QWORD *)this + 10) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  *((_OWORD *)this + 7) = 0u;
  v22 = (char *)this + 112;
  *((_OWORD *)this + 8) = 0u;
  v21 = (char *)this + 128;
  *((_OWORD *)this + 9) = 0u;
  v2 = (char *)this + 144;
  *((_OWORD *)this + 10) = 0u;
  v3 = (char *)this + 160;
  *((_OWORD *)this + 11) = 0u;
  v4 = (char *)this + 176;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  v5 = (char *)this + 208;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 28) = 0x100010000001DLL;
  *((_DWORD *)this + 64) = 0;
  *((_OWORD *)this + 15) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_QWORD *)this + 38) = 0x100010000001DLL;
  *((_QWORD *)this + 39) = 0;
  *((_DWORD *)this + 84) = 0;
  *((_OWORD *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  v6 = (char *)this + 344;
  *((_QWORD *)this + 47) = 0x10000001DLL;
  *((_QWORD *)this + 49) = 0;
  *((_DWORD *)this + 96) = 1;
  *((_DWORD *)this + 104) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  v7 = (char *)this + 424;
  *((_OWORD *)this + 25) = 0u;
  *((_QWORD *)this + 57) = 0x100010000001DLL;
  *((_QWORD *)this + 58) = 0;
  *((_DWORD *)this + 122) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  v24 = (char *)this + 496;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_QWORD *)this + 66) = 0x100010000001DLL;
  *((_QWORD *)this + 67) = 0;
  *((_DWORD *)this + 140) = 0;
  *((_OWORD *)this + 34) = 0u;
  v25 = (char *)this + 568;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_QWORD *)this + 75) = 0x1000100000000;
  *((_QWORD *)this + 76) = 0;
  *((_DWORD *)this + 158) = 0;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_OWORD *)this + 40) = 0u;
  DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 264, 1, 1);
  v8 = *((_DWORD *)this + 89);
  v9 = *((_DWORD *)this + 88);
  v10 = *((unsigned int *)this + 68);
  *(_QWORD *)(*((_QWORD *)this + 33) + 8 * v10) = 0;
  *((_DWORD *)this + 68) = v10 + 1;
  *((_DWORD *)this + 74) = 0;
  if (v9 == v8)
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v6, 1, 1);
    v9 = *((_DWORD *)this + 88);
  }
  *(_QWORD *)(*((_QWORD *)this + 43) + 8 * v9) = 0;
  *((_DWORD *)this + 88) = v9 + 1;
  v11 = *((_DWORD *)this + 12);
  if (v11 == *((_DWORD *)this + 13))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v23, 1, 1);
    v11 = *((_DWORD *)this + 12);
  }
  *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v11) = 0;
  *((_DWORD *)this + 12) = v11 + 1;
  v12 = *((_DWORD *)this + 108);
  if (v12 == *((_DWORD *)this + 109))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v7, 1, 1);
    v12 = *((_DWORD *)this + 108);
  }
  *(_QWORD *)(*((_QWORD *)this + 53) + 8 * v12) = 0;
  *((_DWORD *)this + 108) = v12 + 1;
  v13 = *((_DWORD *)this + 126);
  if (v13 == *((_DWORD *)this + 127))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v24, 1, 1);
    v13 = *((_DWORD *)this + 126);
  }
  *(_QWORD *)(*((_QWORD *)this + 62) + 8 * v13) = 0;
  *((_DWORD *)this + 126) = v13 + 1;
  v14 = *((_DWORD *)this + 144);
  if (v14 == *((_DWORD *)this + 145))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v25, 1, 1);
    v14 = *((_DWORD *)this + 144);
  }
  *(_QWORD *)(*((_QWORD *)this + 71) + 8 * v14) = 0;
  *((_DWORD *)this + 144) = v14 + 1;
  v15 = *((_DWORD *)this + 42);
  if (v15 == *((_DWORD *)this + 43))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v3, 1, 1);
    v15 = *((_DWORD *)this + 42);
  }
  *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v15) = 0;
  *((_DWORD *)this + 42) = v15 + 1;
  v16 = *((_DWORD *)this + 46);
  if (v16 == *((_DWORD *)this + 47))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v4, 1, 1);
    v16 = *((_DWORD *)this + 46);
  }
  *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v16) = 0;
  *((_DWORD *)this + 46) = v16 + 1;
  v17 = *((_DWORD *)this + 30);
  if (v17 == *((_DWORD *)this + 31))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)v22, 1, 1);
    v17 = *((_DWORD *)this + 30);
  }
  *(_WORD *)(*((_QWORD *)this + 14) + 2 * v17) = -1;
  *((_DWORD *)this + 30) = v17 + 1;
  v18 = *((_DWORD *)this + 34);
  if (v18 == *((_DWORD *)this + 35))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)v21, 1, 1);
    v18 = *((_DWORD *)this + 34);
  }
  *(_WORD *)(*((_QWORD *)this + 16) + 2 * v18) = 127;
  *((_DWORD *)this + 34) = v18 + 1;
  v19 = *((_DWORD *)this + 38);
  if (v19 == *((_DWORD *)this + 39))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v2, 1, 1);
    v19 = *((_DWORD *)this + 38);
  }
  *(_DWORD *)(*((_QWORD *)this + 18) + 4 * v19) = 0;
  ++*((_DWORD *)this + 38);
  v20 = *((_DWORD *)this + 54);
  if (v20 == *((_DWORD *)this + 55))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v5, 1, 1);
    v20 = *((_DWORD *)this + 54);
  }
  *(_QWORD *)(*((_QWORD *)this + 26) + 8 * v20) = 0;
  *((_DWORD *)this + 54) = v20 + 1;
}

void sub_209A2F664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  DgnIOwnArray<DgnString *>::releaseAll(a22);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a20);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a21);
  DgnIOwnArray<ParamSetBase *>::releaseAll(*(_QWORD *)(v33 - 96));
  DgnPrimArray<unsigned int>::~DgnPrimArray(a18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a19);
  DgnIOwnArray<ArcGraph *>::releaseAll(*(_QWORD *)(v33 - 104));
  DgnPrimArray<unsigned int>::~DgnPrimArray(a16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a17);
  DgnIOwnArray<ReproData *>::releaseAll(v32);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a15);
  DgnIOwnArray<Corpus *>::releaseAll(v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a13);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a14);
  DgnIOwnArray<Voc *>::releaseAll(v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v25);
  DgnIOwnArray<ParamSetBase *>::releaseAll(v24);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a9);
  DgnIOwnArray<ParamSetBase *>::releaseAll(v31);
  DgnIOwnArray<ParamSetBase *>::releaseAll(v30);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v29);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a23);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a24);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a10);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a11);
  DgnIOwnArray<User *>::releaseAll(*(_QWORD *)(v33 - 112));
  DgnPrimArray<unsigned int>::~DgnPrimArray(a12);
  _Unwind_Resume(a1);
}

void ModelMgr::freeVoc(ModelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t VocOrThrow;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _WORD *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 i;

  VocOrThrow = ModelMgr::getVocOrThrow(this, a2, a3, a4, a5, a6, a7, a8);
  if (Voc::getVocReferringReproRefCount((Voc *)VocOrThrow))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 1158, (uint64_t)"recogctl/model", 17, (uint64_t)"%s", v11, v12, (char)&errStr_recogctl_model_E_REPRO_REF_PRESENT);
  if (*(_QWORD *)(VocOrThrow + 136))
    errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 1160, "recogctl/model", 1, "%u", a2);
  if (*(_DWORD *)(VocOrThrow + 248))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 1162, (uint64_t)"recogctl/model", 27, (uint64_t)"%u", v11, v12, a2);
  DgnDelete<Voc>(*(Voc **)(*((_QWORD *)this + 33) + 8 * a2));
  *(_QWORD *)(*((_QWORD *)this + 33) + 8 * a2) = 0;
  if (a2)
  {
    v15 = *((_DWORD *)this + 72);
    if (v15)
    {
      v16 = *((unsigned int *)this + 72);
      v17 = (_WORD *)*((_QWORD *)this + 35);
      while ((unsigned __int16)*v17 != a2)
      {
        ++v17;
        if (!--v16)
          goto LABEL_14;
      }
      v18 = v15 - 1;
      *v17 = *(_WORD *)(*((_QWORD *)this + 35) + 2 * v18);
      *((_DWORD *)this + 72) = v18;
    }
LABEL_14:
    IdMgr<unsigned short>::recycleId((unsigned int *)this + 56, a2);
  }
  v19 = *((_DWORD *)this + 34);
  if (v19 >= 2)
  {
    for (i = 1; i < v19; ++i)
    {
      if (*(unsigned __int16 *)(*((_QWORD *)this + 16) + 2 * i) == a2)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 1177, (uint64_t)"recogctl/model", 23, (uint64_t)"%u %u", v13, v14, a2);
        v19 = *((_DWORD *)this + 34);
      }
    }
  }
}

uint64_t *ModelMgr::startupModelMgr(ModelMgr *this)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = MemChunkAlloc(0x290uLL, 0);
  ModelMgr::ModelMgr((ModelMgr *)v1);
  ModelMgr::smpModelMgr = v2;
  ArcGraphMgr::startupArcGraphMgr(v2 + 496);
  TransducerGrammarMgr::startupTransducerGrammarMgr(ModelMgr::smpModelMgr + 568);
  VocMgr::startupVocMgr(ModelMgr::smpModelMgr + 264);
  return UserMgr::startupUserMgr(ModelMgr::smpModelMgr + 40);
}

void ModelMgr::printSize(ModelMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  BOOL v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  uint64_t v285;
  int v286;
  unsigned int v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  uint64_t v298;
  int v299;
  unsigned int v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  unsigned int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  void *v348;
  uint64_t v349;
  int v350;
  unsigned int v351;
  unsigned int v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  void *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  void *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  char v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  void *v404;
  uint64_t v405;
  unint64_t *v406;
  uint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  int v411;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 322, (DgnString *)&v410);
  if (v411)
    v16 = (void *)v410;
  else
    v16 = &unk_209A8041F;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A8041F, a3, &unk_209A8041F, v16);
  DgnString::~DgnString((DgnString *)&v410);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A8041F);
  if (VocMgr::smpVocMgr)
  {
    v410 = 0;
    v408 = 0;
    v409 = 0;
    VocMgr::printSize((VocMgr *)VocMgr::smpVocMgr, 0xFFFFFFFFLL, (a3 + 1), &v410, &v409, &v408);
    *a4 += v410;
    *a5 += v409;
    *a6 += v408;
  }
  v406 = a6;
  if (UserMgr::smpUserMgr)
  {
    v410 = 0;
    v408 = 0;
    v409 = 0;
    v21 = (a3 + 1);
    UserMgr::printSize((UserMgr *)UserMgr::smpUserMgr, 0xFFFFFFFFLL, v21, &v410, &v409, &v408);
    *a4 += v410;
    *a5 += v409;
    *v406 += v408;
  }
  else
  {
    v21 = (a3 + 1);
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 327, (DgnString *)&v410);
  if (v411)
    v26 = (void *)v410;
  else
    v26 = &unk_209A8041F;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v22, v23, v24, v25, v21, &unk_209A8041F, v21, &unk_209A8041F, v26);
  DgnString::~DgnString((DgnString *)&v410);
  v407 = v21;
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v27, v28, v29, v30, v21, &unk_209A8041F);
  v31 = *((unsigned int *)this + 12);
  if ((_DWORD)v31)
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = v406;
    do
    {
      v37 = *((_QWORD *)this + 5);
      if (*(_QWORD *)(v37 + 8 * v32))
      {
        v410 = 0;
        v408 = 0;
        v409 = 0;
        User::printSize(*(User **)(v37 + 8 * v32), v32, (a3 + 2), &v410, &v409, &v408);
        v35 += v410;
        v34 += v409;
        v33 += v408;
        v31 = *((unsigned int *)this + 12);
      }
      ++v32;
    }
    while (v32 < v31);
  }
  else
  {
    v35 = 0;
    v34 = 0;
    v33 = 0;
    v31 = 0;
    v36 = v406;
  }
  v38 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v38 = 16;
  v39 = v38 + v35;
  v40 = v38 + v34;
  v41 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v41 = 3;
  v42 = v39 + ((unint64_t)*((unsigned int *)this + 13) << v41);
  v43 = v40 + (v31 << v41);
  v405 = a3;
  v44 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 327, (DgnString *)&v410);
  if (v411)
    v49 = (void *)v410;
  else
    v49 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, v407, &unk_209A8041F, v44, v44, v49, v42, v43, v33);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v42;
  *a5 += v43;
  *v36 += v33;
  v50 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v50 = 16;
  v51 = *((unsigned int *)this + 16);
  v52 = *((_DWORD *)this + 17);
  v53 = (v50 | 2) + 2 * (v51 - 1);
  if ((int)v51 <= 0)
    v53 = v50;
  if (v52 >= v51)
    v54 = v53;
  else
    v54 = v50;
  if (v52 >= v51)
    v55 = v53 + 2 * (v52 - v51);
  else
    v55 = v50;
  if (v52 >= v51)
    v56 = 0;
  else
    v56 = 2 * v51;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 328, (DgnString *)&v410);
  if (v411)
    v61 = (void *)v410;
  else
    v61 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, v407, &unk_209A8041F, v44, v44, v61, v55, v54, v56);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v55;
  *a5 += v54;
  *v36 += v56;
  v62 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v62 = 16;
  v63 = *((_DWORD *)this + 4);
  v64 = *((_DWORD *)this + 5);
  v65 = v64 >= v63;
  v66 = v64 - v63;
  if (v65)
  {
    if (v63 > 0)
      v62 = (v62 | 2) + 2 * (v63 - 1);
    v62 += 2 * v66;
  }
  v67 = v62 + 20;
  v68 = DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::sizeObject((_DWORD *)this + 2, 1u) + 8;
  v69 = *((unsigned int *)this + 4);
  if (v69 <= *((_DWORD *)this + 5))
    v70 = 0;
  else
    v70 = 2 * v69;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 329, (DgnString *)&v410);
  if (v411)
    v75 = (void *)v410;
  else
    v75 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, v407, &unk_209A8041F, v44, v44, v75, v67, v68, v70);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v67;
  *a5 += v68;
  *v36 += v70;
  v76 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v76 = 16;
  v77 = *((_DWORD *)this + 22);
  v78 = *((_DWORD *)this + 23);
  v65 = v78 >= v77;
  v79 = v78 - v77;
  if (v65)
  {
    if (v77 > 0)
      v76 = (v76 | 2) + 2 * (v77 - 1);
    v76 += 2 * v79;
  }
  v80 = v76 + 20;
  v81 = DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::sizeObject((_DWORD *)this + 20, 1u) + 8;
  v82 = *((unsigned int *)this + 22);
  if (v82 <= *((_DWORD *)this + 23))
    v83 = 0;
  else
    v83 = 2 * v82;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 331, (DgnString *)&v410);
  if (v411)
    v88 = (void *)v410;
  else
    v88 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, v407, &unk_209A8041F, v44, v44, v88, v80, v81, v83);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v80;
  *a5 += v81;
  *v36 += v83;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v89 = 12;
  else
    v89 = 16;
  v90 = *((unsigned int *)this + 30);
  v91 = *((_DWORD *)this + 31);
  if (v91 >= v90)
  {
    v92 = 0;
    if ((int)v90 > 0)
      v89 = (v89 | 2) + 2 * (v90 - 1);
    v93 = v89 + 2 * (v91 - v90);
  }
  else
  {
    v92 = 2 * v90;
    v93 = v89;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 333, (DgnString *)&v410);
  if (v411)
    v98 = (void *)v410;
  else
    v98 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v407, &unk_209A8041F, v44, v44, v98, v93, v89, v92);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v93;
  *a5 += v89;
  *v36 += v92;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v99 = 12;
  else
    v99 = 16;
  v100 = *((unsigned int *)this + 34);
  v101 = *((_DWORD *)this + 35);
  if (v101 >= v100)
  {
    v102 = 0;
    if ((int)v100 > 0)
      v99 = (v99 | 2) + 2 * (v100 - 1);
    v103 = v99 + 2 * (v101 - v100);
  }
  else
  {
    v102 = 2 * v100;
    v103 = v99;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 335, (DgnString *)&v410);
  if (v411)
    v108 = (void *)v410;
  else
    v108 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v407, &unk_209A8041F, v44, v44, v108, v103, v99, v102);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v103;
  *a5 += v99;
  *v36 += v102;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v109 = 12;
  else
    v109 = 16;
  v110 = *((unsigned int *)this + 38);
  v111 = *((_DWORD *)this + 39);
  if (v111 >= v110)
  {
    v112 = 0;
    if ((int)v110 > 0)
      v109 += 4 * (v110 - 1) + 4;
    v113 = v109 + 4 * (v111 - v110);
  }
  else
  {
    v112 = 4 * v110;
    v113 = v109;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 337, (DgnString *)&v410);
  if (v411)
    v118 = (void *)v410;
  else
    v118 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v407, &unk_209A8041F, v44, v44, v118, v113, v109, v112);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v113;
  *a5 += v109;
  *v36 += v112;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 338, (DgnString *)&v410);
  if (v411)
    v123 = (void *)v410;
  else
    v123 = &unk_209A8041F;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v119, v120, v121, v122, v407, &unk_209A8041F, v407, &unk_209A8041F, v123);
  DgnString::~DgnString((DgnString *)&v410);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v124, v125, v126, v127, v407, &unk_209A8041F);
  v128 = *((unsigned int *)this + 42);
  if ((_DWORD)v128)
  {
    v129 = 0;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    do
    {
      v133 = *((_QWORD *)this + 20);
      if (*(_QWORD *)(v133 + 8 * v129))
      {
        v410 = 0;
        v408 = 0;
        v409 = 0;
        (*(void (**)(_QWORD, unint64_t, _QWORD, unint64_t *, unint64_t *, unint64_t *))(**(_QWORD **)(v133 + 8 * v129) + 16))(*(_QWORD *)(v133 + 8 * v129), v129, (v405 + 2), &v410, &v409, &v408);
        v132 += v410;
        v131 += v409;
        v130 += v408;
        v128 = *((unsigned int *)this + 42);
      }
      ++v129;
    }
    while (v129 < v128);
  }
  else
  {
    v132 = 0;
    v131 = 0;
    v130 = 0;
    v128 = 0;
  }
  v134 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v134 = 16;
  v135 = v134 + v132;
  v136 = v134 + v131;
  v137 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v137 = 3;
  v138 = v135 + ((unint64_t)*((unsigned int *)this + 43) << v137);
  v139 = v136 + (v128 << v137);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 338, (DgnString *)&v410);
  if (v411)
    v144 = (void *)v410;
  else
    v144 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v140, v141, v142, v143, v407, &unk_209A8041F, v44, v44, v144, v138, v139, v130);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v138;
  *a5 += v139;
  *v406 += v130;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 340, (DgnString *)&v410);
  if (v411)
    v149 = (void *)v410;
  else
    v149 = &unk_209A8041F;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v145, v146, v147, v148, v407, &unk_209A8041F, v407, &unk_209A8041F, v149);
  DgnString::~DgnString((DgnString *)&v410);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v150, v151, v152, v153, v407, &unk_209A8041F);
  v154 = *((unsigned int *)this + 46);
  if ((_DWORD)v154)
  {
    v155 = 0;
    v156 = 0;
    v157 = 0;
    v158 = 0;
    do
    {
      v159 = *((_QWORD *)this + 22);
      if (*(_QWORD *)(v159 + 8 * v155))
      {
        v410 = 0;
        v408 = 0;
        v409 = 0;
        (*(void (**)(_QWORD, unint64_t, _QWORD, unint64_t *, unint64_t *, unint64_t *))(**(_QWORD **)(v159 + 8 * v155) + 16))(*(_QWORD *)(v159 + 8 * v155), v155, (v405 + 2), &v410, &v409, &v408);
        v158 += v410;
        v157 += v409;
        v156 += v408;
        v154 = *((unsigned int *)this + 46);
      }
      ++v155;
    }
    while (v155 < v154);
  }
  else
  {
    v158 = 0;
    v157 = 0;
    v156 = 0;
    v154 = 0;
  }
  v160 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v160 = 16;
  v161 = v160 + v158;
  v162 = v160 + v157;
  v163 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v163 = 3;
  v164 = v161 + ((unint64_t)*((unsigned int *)this + 47) << v163);
  v165 = v162 + (v154 << v163);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 340, (DgnString *)&v410);
  if (v411)
    v170 = (void *)v410;
  else
    v170 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v166, v167, v168, v169, v407, &unk_209A8041F, v44, v44, v170, v164, v165, v156);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v164;
  *a5 += v165;
  *v406 += v156;
  v171 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v171 = 16;
  v172 = *((unsigned int *)this + 50);
  v173 = *((_DWORD *)this + 51);
  v174 = (v171 | 2) + 2 * (v172 - 1);
  if ((int)v172 <= 0)
    v174 = v171;
  if (v173 >= v172)
    v175 = v174;
  else
    v175 = v171;
  if (v173 >= v172)
    v176 = v174 + 2 * (v173 - v172);
  else
    v176 = v171;
  if (v173 >= v172)
    v177 = 0;
  else
    v177 = 2 * v172;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 342, (DgnString *)&v410);
  if (v411)
    v182 = (void *)v410;
  else
    v182 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v178, v179, v180, v181, v407, &unk_209A8041F, v44, v44, v182, v176, v175, v177);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v176;
  *a5 += v175;
  *v406 += v177;
  v183 = sizeObject<ParamSetBase *>((uint64_t)this + 208, 0);
  v184 = sizeObject<ParamSetBase *>((uint64_t)this + 208, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 344, (DgnString *)&v410);
  if (v411)
    v189 = (void *)v410;
  else
    v189 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v185, v186, v187, v188, v407, &unk_209A8041F, v44, v44, v189, v183, v184, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v183;
  *a5 += v184;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 345, (DgnString *)&v410);
  if (v411)
    v194 = (void *)v410;
  else
    v194 = &unk_209A8041F;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v190, v191, v192, v193, v407, &unk_209A8041F, v407, &unk_209A8041F, v194);
  DgnString::~DgnString((DgnString *)&v410);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v195, v196, v197, v198, v407, &unk_209A8041F);
  v199 = *((unsigned int *)this + 68);
  if ((_DWORD)v199)
  {
    v200 = 0;
    v201 = 0;
    v202 = 0;
    v203 = 0;
    v204 = v406;
    do
    {
      v205 = *((_QWORD *)this + 33);
      if (*(_QWORD *)(v205 + 8 * v200))
      {
        v410 = 0;
        v408 = 0;
        v409 = 0;
        Voc::printSize(*(Voc **)(v205 + 8 * v200), v200, (v405 + 2), &v410, &v409, &v408);
        v203 += v410;
        v202 += v409;
        v201 += v408;
        v199 = *((unsigned int *)this + 68);
      }
      ++v200;
    }
    while (v200 < v199);
  }
  else
  {
    v203 = 0;
    v202 = 0;
    v201 = 0;
    v199 = 0;
    v204 = v406;
  }
  v206 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v206 = 16;
  v207 = v206 + v203;
  v208 = v206 + v202;
  v209 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v209 = 3;
  v210 = v207 + ((unint64_t)*((unsigned int *)this + 69) << v209);
  v211 = v208 + (v199 << v209);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 345, (DgnString *)&v410);
  if (v411)
    v216 = (void *)v410;
  else
    v216 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v212, v213, v214, v215, v407, &unk_209A8041F, v44, v44, v216, v210, v211, v201);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v210;
  *a5 += v211;
  *v204 += v201;
  v217 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v217 = 16;
  v218 = *((unsigned int *)this + 72);
  v219 = *((_DWORD *)this + 73);
  v220 = (v217 | 2) + 2 * (v218 - 1);
  if ((int)v218 <= 0)
    v220 = v217;
  if (v219 >= v218)
    v221 = v220;
  else
    v221 = v217;
  if (v219 >= v218)
    v222 = v220 + 2 * (v219 - v218);
  else
    v222 = v217;
  if (v219 >= v218)
    v223 = 0;
  else
    v223 = 2 * v218;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 346, (DgnString *)&v410);
  if (v411)
    v228 = (void *)v410;
  else
    v228 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v224, v225, v226, v227, v407, &unk_209A8041F, v44, v44, v228, v222, v221, v223);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v222;
  *a5 += v221;
  *v204 += v223;
  v229 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v229 = 16;
  v230 = *((_DWORD *)this + 60);
  v231 = *((_DWORD *)this + 61);
  v65 = v231 >= v230;
  v232 = v231 - v230;
  if (v65)
  {
    if (v230 > 0)
      v229 = (v229 | 2) + 2 * (v230 - 1);
    v229 += 2 * v232;
  }
  v233 = v229 + 20;
  v234 = DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::sizeObject((_DWORD *)this + 58, 1u) + 8;
  v235 = *((unsigned int *)this + 60);
  if (v235 <= *((_DWORD *)this + 61))
    v236 = 0;
  else
    v236 = 2 * v235;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 347, (DgnString *)&v410);
  if (v411)
    v241 = (void *)v410;
  else
    v241 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v237, v238, v239, v240, v407, &unk_209A8041F, v44, v44, v241, v233, v234, v236);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v233;
  *a5 += v234;
  *v204 += v236;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 349, (DgnString *)&v410);
  if (v411)
    v246 = (void *)v410;
  else
    v246 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v242, v243, v244, v245, v407, &unk_209A8041F, v44, v44, v246, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 350, (DgnString *)&v410);
  if (v411)
    v251 = (void *)v410;
  else
    v251 = &unk_209A8041F;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v247, v248, v249, v250, v407, &unk_209A8041F, v407, &unk_209A8041F, v251);
  DgnString::~DgnString((DgnString *)&v410);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v252, v253, v254, v255, v407, &unk_209A8041F);
  v256 = *((unsigned int *)this + 88);
  if ((_DWORD)v256)
  {
    v257 = 0;
    v258 = 0;
    v259 = 0;
    v260 = 0;
    do
    {
      v261 = *((_QWORD *)this + 43);
      if (*(_QWORD *)(v261 + 8 * v257))
      {
        v410 = 0;
        v408 = 0;
        v409 = 0;
        Corpus::printSize(*(Corpus **)(v261 + 8 * v257), v257, (v405 + 2), &v410, &v409, &v408);
        v260 += v410;
        v259 += v409;
        v258 += v408;
        v256 = *((unsigned int *)this + 88);
      }
      ++v257;
    }
    while (v257 < v256);
  }
  else
  {
    v260 = 0;
    v259 = 0;
    v258 = 0;
    v256 = 0;
  }
  v262 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v262 = 16;
  v263 = v262 + v260;
  v264 = v262 + v259;
  v265 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v265 = 3;
  v266 = v263 + ((unint64_t)*((unsigned int *)this + 89) << v265);
  v267 = v264 + (v256 << v265);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 350, (DgnString *)&v410);
  if (v411)
    v272 = (void *)v410;
  else
    v272 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v268, v269, v270, v271, v407, &unk_209A8041F, v44, v44, v272, v266, v267, v258);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v266;
  *a5 += v267;
  *v204 += v258;
  v273 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v273 = 16;
  v274 = *((unsigned int *)this + 92);
  v275 = *((_DWORD *)this + 93);
  v276 = (v273 | 2) + 2 * (v274 - 1);
  if ((int)v274 <= 0)
    v276 = v273;
  if (v275 >= v274)
    v277 = v276;
  else
    v277 = v273;
  if (v275 >= v274)
    v278 = v276 + 2 * (v275 - v274);
  else
    v278 = v273;
  if (v275 >= v274)
    v279 = 0;
  else
    v279 = 2 * v274;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 351, (DgnString *)&v410);
  if (v411)
    v284 = (void *)v410;
  else
    v284 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v280, v281, v282, v283, v407, &unk_209A8041F, v44, v44, v284, v278, v277, v279);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v278;
  *a5 += v277;
  *v204 += v279;
  v285 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v285 = 16;
  v286 = *((_DWORD *)this + 80);
  v287 = *((_DWORD *)this + 81);
  v65 = v287 >= v286;
  v288 = v287 - v286;
  if (v65)
  {
    if (v286 > 0)
      v285 = (v285 | 2) + 2 * (v286 - 1);
    v285 += 2 * v288;
  }
  v289 = v285 + 20;
  v290 = DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::sizeObject((_DWORD *)this + 78, 1u) + 8;
  v291 = *((unsigned int *)this + 80);
  if (v291 <= *((_DWORD *)this + 81))
    v292 = 0;
  else
    v292 = 2 * v291;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 352, (DgnString *)&v410);
  if (v411)
    v297 = (void *)v410;
  else
    v297 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v293, v294, v295, v296, v407, &unk_209A8041F, v44, v44, v297, v289, v290, v292);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v289;
  *a5 += v290;
  *v204 += v292;
  v298 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v298 = 16;
  v299 = *((_DWORD *)this + 118);
  v300 = *((_DWORD *)this + 119);
  v65 = v300 >= v299;
  v301 = v300 - v299;
  if (v65)
  {
    if (v299 > 0)
      v298 = (v298 | 2) + 2 * (v299 - 1);
    v298 += 2 * v301;
  }
  v302 = v298 + 20;
  v303 = DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::sizeObject((_DWORD *)this + 116, 1u) + 8;
  v304 = *((unsigned int *)this + 118);
  if (v304 <= *((_DWORD *)this + 119))
    v305 = 0;
  else
    v305 = 2 * v304;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 354, (DgnString *)&v410);
  if (v411)
    v310 = (void *)v410;
  else
    v310 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v306, v307, v308, v309, v407, &unk_209A8041F, v44, v44, v310, v302, v303, v305);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v302;
  *a5 += v303;
  *v204 += v305;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 355, (DgnString *)&v410);
  if (v411)
    v315 = (void *)v410;
  else
    v315 = &unk_209A8041F;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v311, v312, v313, v314, v407, &unk_209A8041F, v407, &unk_209A8041F, v315);
  DgnString::~DgnString((DgnString *)&v410);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v316, v317, v318, v319, v407, &unk_209A8041F);
  v320 = *((unsigned int *)this + 126);
  if ((_DWORD)v320)
  {
    v321 = 0;
    v322 = 0;
    v323 = 0;
    v324 = 0;
    do
    {
      v325 = *((_QWORD *)this + 62);
      if (*(_QWORD *)(v325 + 8 * v321))
      {
        v410 = 0;
        v408 = 0;
        v409 = 0;
        ArcGraph::printSize(*(ArcGraph **)(v325 + 8 * v321), v321, (v405 + 2), &v410, &v409, &v408);
        v324 += v410;
        v323 += v409;
        v322 += v408;
        v320 = *((unsigned int *)this + 126);
      }
      ++v321;
    }
    while (v321 < v320);
  }
  else
  {
    v324 = 0;
    v323 = 0;
    v322 = 0;
    v320 = 0;
  }
  v326 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v326 = 16;
  v327 = v326 + v324;
  v328 = v326 + v323;
  v329 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v329 = 3;
  v330 = v327 + ((unint64_t)*((unsigned int *)this + 127) << v329);
  v331 = v328 + (v320 << v329);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 355, (DgnString *)&v410);
  if (v411)
    v336 = (void *)v410;
  else
    v336 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v332, v333, v334, v335, v407, &unk_209A8041F, v44, v44, v336, v330, v331, v322);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v330;
  *a5 += v331;
  *v204 += v322;
  v337 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v337 = 16;
  v338 = *((unsigned int *)this + 130);
  v339 = *((_DWORD *)this + 131);
  v340 = (v337 | 2) + 2 * (v338 - 1);
  if ((int)v338 <= 0)
    v340 = v337;
  if (v339 >= v338)
    v341 = v340;
  else
    v341 = v337;
  if (v339 >= v338)
    v342 = v340 + 2 * (v339 - v338);
  else
    v342 = v337;
  if (v339 >= v338)
    v343 = 0;
  else
    v343 = 2 * v338;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 356, (DgnString *)&v410);
  if (v411)
    v348 = (void *)v410;
  else
    v348 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v344, v345, v346, v347, v407, &unk_209A8041F, v44, v44, v348, v342, v341, v343);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v342;
  *a5 += v341;
  *v204 += v343;
  if (ArcGraphMgr::smpArcGraphMgr)
  {
    v410 = 0;
    v408 = 0;
    v409 = 0;
    ArcGraphMgr::printSize((ArcGraphMgr *)ArcGraphMgr::smpArcGraphMgr, 0xFFFFFFFFLL, v407, &v410, &v409, &v408);
    *a4 += v410;
    *a5 += v409;
    *v204 += v408;
  }
  v349 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v349 = 16;
  v350 = *((_DWORD *)this + 136);
  v351 = *((_DWORD *)this + 137);
  v65 = v351 >= v350;
  v352 = v351 - v350;
  if (v65)
  {
    if (v350 > 0)
      v349 = (v349 | 2) + 2 * (v350 - 1);
    v349 += 2 * v352;
  }
  v353 = v349 + 20;
  v354 = DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::sizeObject((_DWORD *)this + 134, 1u) + 8;
  v355 = *((unsigned int *)this + 136);
  if (v355 <= *((_DWORD *)this + 137))
    v356 = 0;
  else
    v356 = 2 * v355;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 360, (DgnString *)&v410);
  if (v411)
    v361 = (void *)v410;
  else
    v361 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v357, v358, v359, v360, v407, &unk_209A8041F, v44, v44, v361, v353, v354, v356);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v353;
  *a5 += v354;
  *v204 += v356;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 362, (DgnString *)&v410);
  if (v411)
    v366 = (void *)v410;
  else
    v366 = &unk_209A8041F;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v362, v363, v364, v365, v407, &unk_209A8041F, v407, &unk_209A8041F, v366);
  DgnString::~DgnString((DgnString *)&v410);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v367, v368, v369, v370, v407, &unk_209A8041F);
  v371 = *((unsigned int *)this + 144);
  if ((_DWORD)v371)
  {
    v372 = 0;
    v373 = 0;
    v374 = 0;
    v375 = 0;
    do
    {
      v376 = *((_QWORD *)this + 71);
      if (*(_QWORD *)(v376 + 8 * v372))
      {
        v410 = 0;
        v408 = 0;
        v409 = 0;
        (*(void (**)(_QWORD, unint64_t, _QWORD, unint64_t *, unint64_t *, unint64_t *))(**(_QWORD **)(v376 + 8 * v372) + 16))(*(_QWORD *)(v376 + 8 * v372), v372, (v405 + 2), &v410, &v409, &v408);
        v375 += v410;
        v374 += v409;
        v373 += v408;
        v371 = *((unsigned int *)this + 144);
      }
      ++v372;
    }
    while (v372 < v371);
  }
  else
  {
    v375 = 0;
    v374 = 0;
    v373 = 0;
    v371 = 0;
  }
  v377 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v377 = 16;
  v378 = v377 + v375;
  v379 = v377 + v374;
  v380 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v380 = 3;
  v381 = v378 + ((unint64_t)*((unsigned int *)this + 145) << v380);
  v382 = v379 + (v371 << v380);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 362, (DgnString *)&v410);
  if (v411)
    v387 = (void *)v410;
  else
    v387 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v383, v384, v385, v386, v407, &unk_209A8041F, v44, v44, v387, v381, v382, v373);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v381;
  *a5 += v382;
  *v406 += v373;
  v388 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v388 = 16;
  v389 = *((unsigned int *)this + 148);
  v390 = *((_DWORD *)this + 149);
  v391 = (v388 | 2) + 2 * (v389 - 1);
  if ((int)v389 <= 0)
    v391 = v388;
  if (v390 >= v389)
    v392 = v391;
  else
    v392 = v388;
  if (v390 >= v389)
    v393 = v391 + 2 * (v390 - v389);
  else
    v393 = v388;
  if (v390 >= v389)
    v394 = 0;
  else
    v394 = 2 * v389;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 364, (DgnString *)&v410);
  if (v411)
    v399 = (void *)v410;
  else
    v399 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v395, v396, v397, v398, v407, &unk_209A8041F, v44, v44, v399, v393, v392, v394);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v393;
  *a5 += v392;
  *v406 += v394;
  if (TransducerGrammarMgr::smpTransducerGrammarMgr)
  {
    v410 = 0;
    v408 = 0;
    v409 = 0;
    TransducerGrammarMgr::printSize((TransducerGrammarMgr *)TransducerGrammarMgr::smpTransducerGrammarMgr, 0xFFFFFFFFLL, v407, &v410, &v409, &v408);
    *a4 += v410;
    *a5 += v409;
    *v406 += v408;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 368, (DgnString *)&v410);
  if (v411)
    v404 = (void *)v410;
  else
    v404 = &unk_209A8041F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v400, v401, v402, v403, v405, &unk_209A8041F, (35 - v405), (35 - v405), v404, *a4, *a5, *v406);
  DgnString::~DgnString((DgnString *)&v410);
}

void sub_209A314F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t ModelMgr::rebuildPrefilterer(ModelMgr *this, unsigned int a2, const PrefiltererBuildParamSet *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  Prefilterer *v14;
  uint64_t LookaheadScorer;
  const PrefiltererBuildParamSet *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *Prefilterer;
  uint64_t result;

  v7 = a3;
  v9 = *((_QWORD *)this + 20);
  v10 = a2;
  v11 = *(_QWORD **)(v9 + 8 * a2);
  if (v11)
  {
    (*(void (**)(_QWORD *))*v11)(v11);
    MemChunkFree(v11, 0);
    v9 = *((_QWORD *)this + 20);
  }
  *(_QWORD *)(v9 + 8 * v10) = 0;
  v12 = *((_QWORD *)this + 22);
  v13 = *(_QWORD **)(v12 + 8 * v10);
  if (v13)
  {
    (*(void (**)(_QWORD *))*v13)(v13);
    MemChunkFree(v13, 0);
    v12 = *((_QWORD *)this + 22);
  }
  *(_QWORD *)(v12 + 8 * v10) = 0;
  v14 = *(Prefilterer **)(*((_QWORD *)this + 5) + 8 * v7);
  LookaheadScorer = Prefilterer::maybeMakeLookaheadScorer(v14, *(const User **)(*((_QWORD *)this + 26) + 8 * v10), a3);
  Prefilterer = Prefilterer::makePrefilterer(*(Prefilterer **)(*((_QWORD *)this + 26) + 8 * v10), v16, v17, v18, v19, v20, v21, v22);
  result = (*(uint64_t (**)(uint64_t *, Prefilterer *, uint64_t, uint64_t, BOOL))(*Prefilterer + 104))(Prefilterer, v14, a4, a5, LookaheadScorer != 0);
  *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v10) = Prefilterer;
  *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v10) = LookaheadScorer;
  *(_WORD *)(*((_QWORD *)this + 14) + 2 * v10) = v7;
  *(_WORD *)(*((_QWORD *)this + 16) + 2 * v10) = a4;
  *(_DWORD *)(*((_QWORD *)this + 18) + 4 * v10) = a5;
  return result;
}

uint64_t ModelMgr::rebuildAllStalePrefilterers(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  unsigned __int16 v3;
  unsigned __int16 v4;
  const PrefiltererBuildParamSet *v5;

  v1 = *(_DWORD *)(this + 120);
  if (v1 >= 2)
  {
    v2 = this;
    v3 = 1;
    do
    {
      v4 = v3;
      v5 = (const PrefiltererBuildParamSet *)*(unsigned __int16 *)(*(_QWORD *)(v2 + 112) + 2 * v3);
      if ((_DWORD)v5 != 0xFFFF && !*(_QWORD *)(*(_QWORD *)(v2 + 160) + 8 * v3))
      {
        this = ModelMgr::rebuildPrefilterer((ModelMgr *)v2, v3, v5, *(unsigned __int16 *)(*(_QWORD *)(v2 + 128) + 2 * v3), *(unsigned int *)(*(_QWORD *)(v2 + 144) + 4 * v3));
        v1 = *(_DWORD *)(v2 + 120);
      }
      v3 = v4 + 1;
    }
    while (v1 > (unsigned __int16)(v4 + 1));
  }
  return this;
}

uint64_t ModelMgr::getUserOrThrow(ModelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (*((_DWORD *)this + 12) <= a2 || (result = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * a2)) == 0)
  {
    v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 710, (uint64_t)"recogctl/model", 6, (uint64_t)"%u", a7, a8, a2);
    return *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v10);
  }
  return result;
}

User *DgnDelete<User>(User *result)
{
  _QWORD *v1;

  if (result)
  {
    User::~User(result);
    return (User *)MemChunkFree(v1, 0);
  }
  return result;
}

Corpus *DgnDelete<Corpus>(Corpus *result)
{
  _QWORD *v1;

  if (result)
  {
    Corpus::~Corpus(result);
    return (Corpus *)MemChunkFree(v1, 0);
  }
  return result;
}

void VocOwner::~VocOwner(VocOwner *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_BYTE *)this + 8))
    ModelMgr::freeVoc((ModelMgr *)ModelMgr::smpModelMgr, **(unsigned __int16 **)this, a3, a4, a5, a6, a7, a8);
}

uint64_t ModelMgr::loadVoc(ModelMgr *this, char **a2, DFile *a3, DSMSetData **a4, uint64_t a5, int a6, char a7, ProgressCallbackHandler *a8)
{
  VocGroupInfo *v16;
  int VocGroupInfo;
  uint64_t v18;
  uint64_t v19;
  uint64_t NextId;
  _QWORD *v21;
  unsigned int i;
  uint64_t *v23;
  DFileProgressInfo *v24;
  unsigned int v25;
  ProgressCallbackHandler *v26;
  const char *v27;
  uint64_t v28;
  unsigned int v29;
  _BOOL8 v30;
  uint64_t MaybeReserveAndRefDSMId;
  uint64_t v32;
  uint64_t v33;
  DgnSharedMemSet *v34;
  uint64_t v35;
  ModelMgr *Voc;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  DFile *v45;
  int v46;
  unsigned int v47;
  DFile *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  StateMgr *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v67;
  int v68;
  DFile *v69;
  Voc *v70;
  char *v71;
  BOOL v72[30];
  BOOL v73[2];
  __int16 *v74;
  char v75;
  __int16 v76;
  _BYTE v77[31];
  _BYTE v78[9];

  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)v78);
  DFileChecksums::DFileChecksums((DFileChecksums *)v77);
  v69 = a3;
  VocGroupInfo = VocGroupInfo::loadVocGroupInfo(v16, a2);
  v76 = 127;
  v74 = &v76;
  v75 = 1;
  NextId = IdMgr<unsigned short>::getNextId((uint64_t)this + 224);
  if (NextId >= 0x7C)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 958, (uint64_t)"recogctl/model", 8, (uint64_t)"%s", v18, v19, (char)&errStr_recogctl_model_E_TOO_MANY_VOCS);
  v21 = (_QWORD *)((char *)this + 264);
  for (i = *((_DWORD *)this + 68); i <= NextId; *((_DWORD *)this + 68) = i)
  {
    if (i == *((_DWORD *)this + 69))
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 264, 1, 1);
      i = *((_DWORD *)this + 68);
    }
    *(_QWORD *)(*((_QWORD *)this + 33) + 8 * i++) = 0;
  }
  v23 = MemChunkAlloc(0x268uLL, 0);
  *(_QWORD *)(*((_QWORD *)this + 33) + 8 * NextId) = Voc::Voc((Voc *)v23, NextId);
  v25 = *((_DWORD *)this + 72);
  if (v25 == *((_DWORD *)this + 73))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 280, 1, 1);
    v25 = *((_DWORD *)this + 72);
  }
  v68 = VocGroupInfo;
  *(_WORD *)(*((_QWORD *)this + 35) + 2 * v25) = NextId;
  *((_DWORD *)this + 72) = v25 + 1;
  v76 = NextId;
  v70 = *(Voc **)(*((_QWORD *)this + 33) + 8 * NextId);
  DFileProgressInfo::attachProgressHandler((Voc *)((char *)v70 + 520), a8, v24);
  (*((void (**)(char **, uint64_t))*a2 + 12))(a2, (uint64_t)v70 + 520);
  DFile::cacheSubFileSizeInfo(a2);
  ProgressCallbackHandler::startReporting((uint64_t)a8, v26);
  *(_WORD *)v73 = 0;
  v67 = a7;
  if (a4)
  {
    if (*((_DWORD *)a2 + 6))
      v27 = a2[2];
    else
      v27 = (const char *)&unk_209A8041F;
    DgnString::DgnString((DgnString *)&v71, v27);
    MaybeReserveAndRefDSMId = DgnSharedMemSet::getMaybeReserveAndRefDSMIdEx(a4, &v71, 1);
    if (!DgnSharedMemSet::isCurThreadDSMOwner((DgnSharedMemSet *)a4, MaybeReserveAndRefDSMId)
      && !DgnSharedMemSet::waitTilCreatedAndMapEx(a4, MaybeReserveAndRefDSMId, &v71, 0xF4240u))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 993, (uint64_t)"recogctl/model", 43, (uint64_t)"%d %.500s", v32, v33, MaybeReserveAndRefDSMId);
    }
    v28 = a5;
    LODWORD(a5) = DgnSharedMemSet::getGlobalState((DgnSharedMemSet *)a4, MaybeReserveAndRefDSMId) - 3 < 2;
    v30 = *(_DWORD *)(DgnSharedMemSet::getSetCacheDir((DgnSharedMemSet *)a4) + 8) < 2u;
    *((_QWORD *)v70 + 15) = a4;
    *((_DWORD *)v70 + 32) = MaybeReserveAndRefDSMId;
    *((_BYTE *)a2 + 72) = 1;
    DgnString::~DgnString((DgnString *)&v71);
    v29 = a5;
  }
  else
  {
    v28 = a5;
    v29 = 0;
    v30 = 0;
    MaybeReserveAndRefDSMId = 0xFFFFFFFFLL;
    LOBYTE(a5) = 1;
  }
  DFileChecksums::DFileChecksums((DFileChecksums *)v72);
  if (v30 & v29)
    v34 = (DgnSharedMemSet *)a4;
  else
    v34 = 0;
  if (v30 & v29)
    v35 = MaybeReserveAndRefDSMId;
  else
    v35 = 0xFFFFFFFFLL;
  Voc = (ModelMgr *)Voc::loadVoc(v70, (DFile *)a2, v69, v34, v35, v28, a6, v67, &v73[1], (DFileChecksums *)v72, v73);
  if ((a5 & 1) == 0)
    Voc::saveVocShared(v70, (DgnSharedMemSet *)a4, MaybeReserveAndRefDSMId, (const FileSpec *)(a2 + 2), v30);
  if (v68)
    ModelMgr::checkChecksums(Voc, (VocGroupInfo *)v77, (const DFileChecksums *)v72, v73[1]);
  if (v73[0])
    RuleMgr::invalidateAllStates(*(RuleMgr **)(*(_QWORD *)(*v21 + 8 * NextId) + 64), v37, v38, v39, v40, v41, v42, v43);
  v44 = DFile::subFileExists((uint64_t)a2, 0x61u);
  if (v44)
    v45 = (DFile *)a2;
  else
    v45 = 0;
  v46 = DFile::subFileExists((uint64_t)a2, 0x4Cu);
  if (v46)
    v47 = NextId;
  else
    v47 = 127;
  if (v46)
    v48 = (DFile *)a2;
  else
    v48 = 0;
  v56 = DFile::subFileExists((uint64_t)a2, 0x4Du);
  if ((_DWORD)NextId == 127)
    v57 = 0;
  else
    v57 = v44;
  if (v57 == 1)
  {
    TextStateRule::TextStateRule((TextStateRule *)&v71);
    TextStateRule::loadStatesAndRules((TextStateRule *)&v71, v45, NextId);
    TextStateRule::~TextStateRule((TextStateRule *)&v71);
  }
  v58 = *(StateMgr **)(*(_QWORD *)(*v21 + 8 * NextId) + 56);
  if (!*((_DWORD *)v58 + 181))
    StateMgr::makeSpecialEouStateId(*(StateMgr **)(*(_QWORD *)(*v21 + 8 * NextId) + 56), v49, v50, v51, v52, v53, v54, v55);
  if (v47 != 127)
    Voc::loadAndDiscardReproData(*(Voc **)(*v21 + 8 * v47), v48);
  if (v56)
    Voc::loadAndDiscardReproResult(*(Voc **)(*v21 + 8 * v47), v48);
  if (!StateMgr::isEmpty(v58))
    StateMgr::recomputeAllPrimitiveBegPhones(v58);
  StateMgr::declarePhnIndexSetsInitialized((uint64_t)v58);
  if (!v73[1])
    (*((void (**)(char **, const char *))*a2 + 10))(a2, "Voc");
  StateMgr::computeStateIdNameChecksum(*((_QWORD *)v70 + 7));
  RuleMgr::computeRuleIdNameChecksum(*((_QWORD *)v70 + 8));
  v75 = 0;
  DFileChecksums::~DFileChecksums((DFileChecksums *)v72);
  VocOwner::~VocOwner((VocOwner *)&v74, v59, v60, v61, v62, v63, v64, v65);
  DFileChecksums::~DFileChecksums((DFileChecksums *)v77);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)v78);
  return NextId;
}

void sub_209A31CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va;

  va_start(va, a10);
  DgnString::~DgnString((DgnString *)va);
  VocOwner::~VocOwner((VocOwner *)(v10 - 144), v12, v13, v14, v15, v16, v17, v18);
  DFileChecksums::~DFileChecksums((DFileChecksums *)(v10 - 120));
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)(v10 - 89));
  _Unwind_Resume(a1);
}

void ModelMgr::checkChecksums(ModelMgr *this, VocGroupInfo *a2, const DFileChecksums *a3, char a4)
{
  DFileChecksums *inited;
  unsigned int v7;
  char *SubFileName;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int Checksum;
  uint64_t v17;
  uint64_t v18;

  inited = (DFileChecksums *)MrecInitModule_sdpres_sdapi();
  if (*((_DWORD *)a3 + 2))
  {
    v7 = 0;
    do
    {
      SubFileName = DFileChecksums::getSubFileName(a3, v7);
      if (!DFileChecksums::present(inited, SubFileName))
      {
        v9 = DFileChecksums::getSubFileName(a3, v7);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 1130, (uint64_t)"recogctl/model", 11, (uint64_t)"%.500s", v10, v11, v9);
      }
      ++v7;
    }
    while (v7 < *((_DWORD *)a3 + 2));
  }
  if (*((_DWORD *)inited + 2))
  {
    v12 = 0;
    do
    {
      v13 = DFileChecksums::getSubFileName(inited, v12);
      if (DFileChecksums::present(a3, v13))
      {
        Checksum = DFileChecksums::getChecksum(inited, v12);
        if (Checksum != DFileChecksums::getChecksum(a3, v13))
        {
          DFileChecksums::getChecksum(inited, v12);
          DFileChecksums::getChecksum(a3, v13);
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 1147, (uint64_t)"recogctl/model", 10, (uint64_t)"%.500s %u %08x %08x", v17, v18, (char)v13);
        }
      }
      else if ((a4 & 1) == 0)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 1138, (uint64_t)"recogctl/model", 9, (uint64_t)"%.500s %u", v14, v15, (char)v13);
      }
      ++v12;
    }
    while (v12 < *((_DWORD *)inited + 2));
  }
}

uint64_t ModelMgr::getVocOrThrow(ModelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (*((_DWORD *)this + 68) <= a2 || (result = *(_QWORD *)(*((_QWORD *)this + 33) + 8 * a2)) == 0)
  {
    v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 1325, (uint64_t)"recogctl/model", 4, (uint64_t)"%u", a7, a8, a2);
    return *(_QWORD *)(*((_QWORD *)this + 33) + 8 * v10);
  }
  return result;
}

Voc *DgnDelete<Voc>(Voc *result)
{
  _QWORD *v1;

  if (result)
  {
    Voc::~Voc(result);
    return (Voc *)MemChunkFree(v1, 0);
  }
  return result;
}

void ModelMgr::saveVoc(ModelMgr *a1, unsigned int a2, uint64_t a3, char **a4, _DWORD *a5, int a6, DFileChecksums *a7, ProgressCallbackHandler *a8, unsigned int a9, unsigned int a10)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t VocOrThrow;
  _BOOL4 isValid;
  uint64_t shouldSaveSubFilesInTextFormat;
  DFileProgressInfo *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  ProgressCallbackHandler *v32;
  uint64_t *v33;
  _BYTE v34[16];
  _BYTE v35[56];
  _BYTE v36[24];
  _BYTE v37[31];
  char v38;

  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v38);
  VocOrThrow = ModelMgr::getVocOrThrow(a1, a2, v18, v19, v20, v21, v22, v23);
  isValid = FileSpec::isValid((char **)(VocOrThrow + 104));
  shouldSaveSubFilesInTextFormat = Voc::shouldSaveSubFilesInTextFormat(VocOrThrow, a6);
  if (!FileSpec::isValid(a4))
  {
LABEL_4:
    if (!isValid)
      goto LABEL_9;
    goto LABEL_7;
  }
  if (a6 == 1)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 1225, (uint64_t)"recogctl/model", 34, (uint64_t)"%s", v28, v29, (char)&errStr_recogctl_model_E_SAVE_SVC_AS_TEXT);
    shouldSaveSubFilesInTextFormat = 0;
    goto LABEL_4;
  }
  shouldSaveSubFilesInTextFormat = 0;
  if (!isValid)
    goto LABEL_9;
LABEL_7:
  if (FileSpec::isValid(a4))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 1231, (uint64_t)"recogctl/model", 35, (uint64_t)"%u", v30, v31, a2);
LABEL_9:
  DFileProgressInfo::attachProgressHandler((DFileProgressInfo *)(VocOrThrow + 520), a8, v27);
  ProgressCallbackHandler::startReporting((uint64_t)a8, v32);
  DFileChecksums::DFileChecksums((DFileChecksums *)v37);
  DFileChecksums::DFileChecksums((DFileChecksums *)v36);
  Voc::saveVoc(VocOrThrow, a3, a4, a5, (DFileChecksums *)v37, shouldSaveSubFilesInTextFormat, a7, a9, a10);
  if ((shouldSaveSubFilesInTextFormat & 1) != 0)
  {
    if (!StateMgr::isEmpty(*(StateMgr **)(VocOrThrow + 56)) || !RuleMgr::isEmpty(*(RuleMgr **)(VocOrThrow + 64)))
    {
      TextStateRule::TextStateRule((TextStateRule *)v35);
      DFileOwner::DFileOwner((DFileOwner *)v34);
      *a5 = 2;
      v33 = DFile::openDFile(a3, (const FileSpec *)2, 2, (uint64_t)v34);
      TextStateRule::saveStatesAndRules((TextStateRule *)v35, (DFile *)v33, a2);
      *a5 = 0;
      DFileOwner::setRemoveFileOnDestruction((uint64_t)v34, 0);
      DFileOwner::~DFileOwner((DFileOwner *)v34);
      TextStateRule::~TextStateRule((TextStateRule *)v35);
    }
  }
  else
  {
    VocGroupInfo::setVocChecksums((VocGroupInfo *)v36, (const DFileChecksums *)v37);
    if (*(_DWORD *)(MrecInitModule_sdpres_sdapi() + 8))
    {
      *a5 = 2;
      Voc::writeVocGroupInfo(VocOrThrow, (VocGroupInfo *)v36, a3);
      *a5 = 0;
    }
  }
  DFileChecksums::~DFileChecksums((DFileChecksums *)v36);
  DFileChecksums::~DFileChecksums((DFileChecksums *)v37);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v38);
}

void sub_209A321CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  TextStateRule::~TextStateRule((TextStateRule *)va);
  DFileChecksums::~DFileChecksums((DFileChecksums *)va1);
  DFileChecksums::~DFileChecksums((DFileChecksums *)va2);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)(v5 - 81));
  _Unwind_Resume(a1);
}

uint64_t ModelMgr::createWord(ModelMgr *this, unsigned int a2, char *a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Voc *v13;

  if (!*a3)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 1440, (uint64_t)"recogctl/model", 41, (uint64_t)"%s", a7, a8, (char)&errStr_recogctl_model_E_BAD_WORD_NAME);
  v13 = *(Voc **)(*((_QWORD *)this + 33) + 8 * a2);
  if ((_DWORD)a4 != 0xFFFFFF
    && ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 6) + 624) + 4 * (a4 >> 5)) >> a4) & 1) == 0)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 1450, (uint64_t)"recogctl/model", 42, (uint64_t)"%u %u %.500s", a7, a8, a2);
  }
  return Voc::createWord(v13, a3, a4, a5, (uint64_t)a5, a6, a7, a8) & 0xFFFFFF | (a2 << 25);
}

_QWORD *ModelMgr::deleteWordFamilyFromWordList(uint64_t a1, unsigned int a2, uint64_t a3)
{
  Voc *v6;
  uint64_t v7;
  uint64_t v8;
  WordList *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v6 = *(Voc **)(*(_QWORD *)(a1 + 264) + 8 * a2);
  if (Voc::getVocReferringReproRefCount(v6))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 1530, (uint64_t)"recogctl/model", 28, (uint64_t)"%s", v7, v8, (char)&errStr_recogctl_model_E_DELETE_WORD_REPRO_REF_PRESENT);
  v9 = (WordList *)*((_QWORD *)v6 + 6);
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v24, *(unsigned int *)(a3 + 8));
  if (*(_DWORD *)(a3 + 8))
  {
    v16 = 0;
    v17 = 0;
    do
    {
      WordList::verifyDeletable(v9, *(_DWORD *)(*(_QWORD *)a3 + 4 * v17), v10, v11, v12, v13, v14, v15);
      WordList::lookupAll((uint64_t *)v9, *(_DWORD *)(*(_QWORD *)a3 + 4 * v17), v24[0] + v16);
      ModelMgr::notifyWordFamilyDeleted(a1, a2, *(unsigned int *)(*(_QWORD *)a3 + 4 * v17++), v18, v19, v20, v21, v22);
      v16 += 16;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  Voc::deleteWordIdArrayFamily(v6, a3, v24);
  return DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v24);
}

void sub_209A32458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ModelMgr::notifyWordFamilyDeleted(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  StateMgr *v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v8 = a3;
  result = ModelMgr::getVocOrThrow((ModelMgr *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 32) + 2 * v8) && *(_DWORD *)(a1 + 168) >= 2u)
  {
    v16 = *(StateMgr **)(result + 56);
    v17 = 1;
    do
    {
      v18 = v17;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v17))
      {
        if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 128) + 2 * v17) == a2)
        {
          result = StateMgr::isWordIdInState(v16, *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v17), v8, 0, v12, v13, v14, v15);
          if ((_DWORD)result)
          {
            v19 = *(_QWORD *)(a1 + 160);
            v20 = *(_QWORD **)(v19 + 8 * v18);
            if (v20)
            {
              (*(void (**)(_QWORD *))*v20)(v20);
              result = MemChunkFree(v20, 0);
              v19 = *(_QWORD *)(a1 + 160);
            }
            *(_QWORD *)(v19 + 8 * v18) = 0;
            v21 = *(_QWORD *)(a1 + 176);
            v22 = *(_QWORD **)(v21 + 8 * v18);
            if (v22)
            {
              (*(void (**)(_QWORD *))*v22)(v22);
              result = MemChunkFree(v22, 0);
              v21 = *(_QWORD *)(a1 + 176);
            }
            *(_QWORD *)(v21 + 8 * v18) = 0;
          }
        }
      }
      v17 = v18 + 1;
    }
    while (*(_DWORD *)(a1 + 168) > (unsigned __int16)(v18 + 1));
  }
  return result;
}

uint64_t ModelMgr::notifyWordFamilyAdded(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  StateMgr *v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[2];

  v8 = a3;
  v15 = *(StateMgr **)(ModelMgr::getVocOrThrow((ModelMgr *)a1, a2, a3, a4, a5, a6, a7, a8) + 56);
  v23[0] = 0;
  v23[1] = 0;
  if (*(_DWORD *)(a1 + 168) >= 2u)
  {
    v16 = 1;
    do
    {
      v17 = v16;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v16)
        && *(unsigned __int16 *)(*(_QWORD *)(a1 + 128) + 2 * v16) == a2
        && StateMgr::isWordIdInState(v15, *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v16), v8, 0, v11, v12, v13, v14))
      {
        v18 = *(_QWORD *)(a1 + 160);
        v19 = *(_QWORD **)(v18 + 8 * v17);
        if (v19)
        {
          (*(void (**)(_QWORD *))*v19)(v19);
          MemChunkFree(v19, 0);
          v18 = *(_QWORD *)(a1 + 160);
        }
        *(_QWORD *)(v18 + 8 * v17) = 0;
        v20 = *(_QWORD *)(a1 + 176);
        v21 = *(_QWORD **)(v20 + 8 * v17);
        if (v21)
        {
          (*(void (**)(_QWORD *))*v21)(v21);
          MemChunkFree(v21, 0);
          v20 = *(_QWORD *)(a1 + 176);
        }
        *(_QWORD *)(v20 + 8 * v17) = 0;
      }
      v16 = v17 + 1;
    }
    while (*(_DWORD *)(a1 + 168) > (unsigned __int16)(v17 + 1));
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v23);
}

void sub_209A32688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ModelMgr::notifyWordFamilyChangedProns(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t VocOrThrow;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int i;
  int v42;
  uint64_t v43;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int16 *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  uint64_t v54;
  uint64_t v55;

  v10 = a3;
  v11 = a2;
  VocOrThrow = ModelMgr::getVocOrThrow((ModelMgr *)a1, a2, a3, a4, a5, a6, a7, a8);
  v20 = VocOrThrow;
  if (*(_DWORD *)(a4 + 8))
    Voc::notifyWordFamilyChanged(VocOrThrow, a4, v14, v15, v16, v17, v18, v19);
  if (*(_DWORD *)(a5 + 8))
    Voc::notifyWordFamilyAdded(v20, v10, a5, 0xFFFFFFLL, v16, v17, v18, v19);
  v54 = 0;
  v55 = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)&v54, (uint64_t *)a4, 0, *(_DWORD *)(a4 + 8));
  v26 = *(_DWORD *)(a5 + 8);
  if ((v55 + v26) > HIDWORD(v55))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v54, (v55 + v26 - HIDWORD(v55)), 1);
    v26 = *(_DWORD *)(a5 + 8);
  }
  if (v26)
  {
    v27 = 0;
    v28 = *(_QWORD *)a5;
    v29 = v54;
    do
    {
      *(_DWORD *)(v29 + 4 * (v27 + v55)) = *(_DWORD *)(v28 + 4 * v27);
      ++v27;
      v30 = *(unsigned int *)(a5 + 8);
    }
    while (v27 < v30);
  }
  else
  {
    LODWORD(v30) = 0;
  }
  v31 = v55 + v30;
  LODWORD(v55) = v55 + v30;
  if (*(_BYTE *)(v20 + 288))
  {
    if (StateMgr::isWordIdInState(*(StateMgr **)(v20 + 56), *(_DWORD *)(v20 + 304), v10, 1, v22, v23, v24, v25))
    {
      v32 = *(_DWORD *)(v20 + 292);
      v33 = *(_DWORD *)(v20 + 296);
      if (*(_QWORD *)(v20 + 292))
      {
        v34 = *(unsigned int *)(a1 + 48);
        if (!(_DWORD)v34)
          goto LABEL_32;
        v35 = 0;
        v36 = *(uint64_t **)(a1 + 40);
        do
        {
          if (*v36 && *(_DWORD *)(*v36 + 216) == *(_DWORD *)(v20 + 308))
            v35 = *v36;
          ++v36;
          --v34;
        }
        while (v34);
        if (v35)
        {
          v45 = v11;
          v46 = v10;
          v53[0] = 0;
          v53[1] = 0;
          v51 = 0;
          v52 = 0;
          if ((_DWORD)v55)
          {
            v37 = 0;
            v47 = *(_QWORD *)(v20 + 48);
            do
            {
              v38 = *(unsigned int *)(v54 + 4 * v37);
              v50 = 0;
              v49 = 0;
              Voc::getPrefPron(v20, v38, (const unsigned __int16 **)&v50, &v49);
              v48 = v38;
              v39 = *(_DWORD *)(*(_QWORD *)(v47 + 48) + 4 * v38);
              LODWORD(v52) = 0;
              v40 = v49;
              if (v49)
              {
                for (i = 0; i < v49; ++i)
                {
                  PicMgr::getPrefContextPelIdAndDurIds(*(_QWORD **)(v35 + 48), v32, v33, (uint64_t *)(v47 + 88), v39, (uint64_t)v50, v40, i, (uint64_t)v53);
                  v42 = Voc::findOrAddPrefPicModel(v20, (unsigned int *)v53);
                  v43 = v52;
                  if (v52 == (unint64_t)HIDWORD(v52))
                  {
                    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v51, 1, 1);
                    v43 = v52;
                  }
                  *(_DWORD *)(v51 + 4 * v43) = v42;
                  LODWORD(v52) = v52 + 1;
                  v40 = v49;
                }
              }
              Voc::addPrefPicModelIdPron(v20, v48, &v51);
              ++v37;
            }
            while (v37 < v55);
          }
          Voc::addPrefWordIdsSortedByPron(v20, (uint64_t)&v54);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v51);
          DgnIArray<Utterance *>::~DgnIArray((uint64_t)v53);
          v11 = v45;
          v10 = v46;
        }
        else
        {
LABEL_32:
          Voc::notifyPrefWordIdsSortedByPronBad((Voc *)v20);
        }
      }
      else
      {
        Voc::addPrefWordIdsSortedByPron(v20, (uint64_t)&v54);
      }
    }
    v31 = v55;
  }
  if (v31)
    ModelMgr::notifyWordFamilyAdded(a1, v11, v10, v21, v22, v23, v24, v25);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v54);
}

void sub_209A32978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t *ModelMgr::deleteWordClientProns(ModelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t VocOrThrow;
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  VocOrThrow = ModelMgr::getVocOrThrow(this, a2, a3, a4, a5, a6, a7, a8);
  result = *(uint64_t **)(VocOrThrow + 48);
  if (*(_WORD *)(result[4] + 2 * a3))
  {
    v26 = 0;
    v27 = 0;
    WordList::lookupAllClientAddedProns(result, result[28] + *(unsigned int *)(result[25] + 4 * a3), (uint64_t)&v26);
    if ((_DWORD)v27)
      ModelMgr::notifyWordFamilyDeleted((uint64_t)this, a2, a3, v13, v14, v15, v16, v17);
    v24 = 0;
    v25 = 0;
    v23[0] = 0;
    v23[1] = 0;
    Voc::deleteWordClientProns((WordList **)VocOrThrow, a3, (unint64_t)&v24, (uint64_t)v23, v14, v15, v16, v17);
    if ((_DWORD)v25)
      ModelMgr::notifyWordFamilyAdded((uint64_t)this, a2, a3, v18, v19, v20, v21, v22);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v23);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v24);
    return (uint64_t *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  }
  return result;
}

void sub_209A32A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t ModelMgr::addClientPronsAvoidDuplicates(ModelMgr *a1, unsigned int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t *a6, _QWORD *a7, _QWORD *a8, int a9, uint64_t a10, uint64_t a11)
{
  uint64_t VocOrThrow;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  VocOrThrow = ModelMgr::getVocOrThrow(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
  WordList::verifyModifiable(*(WordList **)(VocOrThrow + 48), a3, v18, v19, v20, v21, v22, v23);
  Voc::addClientPronsAvoidDuplicates(VocOrThrow, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return ModelMgr::notifyWordFamilyChangedProns((uint64_t)a1, a2, (uint64_t)a3, a4, a5, v24, v25, v26);
}

ArcGraph *DgnDelete<ArcGraph>(ArcGraph *result)
{
  _QWORD *v1;

  if (result)
  {
    ArcGraph::~ArcGraph(result);
    return (ArcGraph *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t ModelMgr::getArcGraphOrThrow(ModelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (*((_DWORD *)this + 126) <= a2 || (result = *(_QWORD *)(*((_QWORD *)this + 62) + 8 * a2)) == 0)
  {
    v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/model.cpp", 2187, (uint64_t)"recogctl/model", 4, (uint64_t)"%u", a7, a8, a2);
    return *(_QWORD *)(*((_QWORD *)this + 62) + 8 * v10);
  }
  return result;
}

uint64_t ModelMgr::getEmbeddedRecSpec(ModelMgr *this, unsigned int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 80) + 8 * a2);
}

uint64_t ModelMgr::getEmbRecSpecId(ModelMgr *this, unsigned int a2, unsigned int a3)
{
  return *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 33) + 8 * a2) + 56) + 528)
                             + 2 * a3);
}

_QWORD *DgnIOwnArray<User *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<User>(*(User **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnIOwnArray<Voc *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<Voc>(*(Voc **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnIOwnArray<Corpus *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<Corpus>(*(Corpus **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnIOwnArray<ReproData *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<ReproData>(*(ReproData **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnIOwnArray<ArcGraph *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<ArcGraph>(*(ArcGraph **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void MrecInitModule_scrcache_pel(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;

  if (!gParDiagnosticScoreAllPels)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DiagnosticScoreAllPels", (const char *)&unk_209A80476, (const char *)&unk_209A80476, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDiagnosticScoreAllPels = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticScoreAllPels);
  }
  if (!gParDebugShowPelStats)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugShowPelStats", (const char *)&unk_209A80476, (const char *)&unk_209A80476, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugShowPelStats = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPelStats);
  }
  if (!gParDebugShowPelsPerGenoneFrameStats)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugShowPelsPerGenoneFrameStats", (const char *)&unk_209A80476, (const char *)&unk_209A80476, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugShowPelsPerGenoneFrameStats = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPelsPerGenoneFrameStats);
  }
  if (!gParDebugShowPelsPerGenoneStats)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugShowPelsPerGenoneStats", (const char *)&unk_209A80476, (const char *)&unk_209A80476, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDebugShowPelsPerGenoneStats = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPelsPerGenoneStats);
  }
  if (!gParDebugShowPelScores)
  {
    v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugShowPelScores", (const char *)&unk_209A80476, (const char *)&unk_209A80476, 0, 0, 0);
    *v9 = &unk_24C214CE8;
    gParDebugShowPelScores = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPelScores);
  }
  if (!gParDebugPelScoreCache)
  {
    v10 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v10, "DebugPelScoreCache", (const char *)&unk_209A80476, (const char *)&unk_209A80476, 0, 0, 0);
    *v11 = &unk_24C214CE8;
    gParDebugPelScoreCache = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPelScoreCache);
  }
  if (!gParDebugShowBestPels)
  {
    v12 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v12, "DebugShowBestPels", (const char *)&unk_209A80476, (const char *)&unk_209A80476, 0, 0, 0);
    *v13 = &unk_24C214CE8;
    gParDebugShowBestPels = (uint64_t)v13;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowBestPels);
  }
  if (!gParDebugActivePels)
  {
    v14 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v14, "DebugActivePels", (const char *)&unk_209A80476, (const char *)&unk_209A80476, 0, 0, 0);
    *v15 = &unk_24C214CE8;
    gParDebugActivePels = (uint64_t)v15;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugActivePels);
  }
  if (!gParDebugPelScoringTime)
  {
    v16 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v16, "DebugPelScoringTime", (const char *)&unk_209A80476, (const char *)&unk_209A80476, 0, 0, 0);
    *v17 = &unk_24C214CE8;
    gParDebugPelScoringTime = (uint64_t)v17;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPelScoringTime);
  }
}

uint64_t PelStats::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = SnapTime::sizeObject(a1 + 40, a2);
  v5 = SnapTime::sizeObject(a1 + 72, a2);
  v6 = SnapTime::sizeObject(a1 + 104, a2);
  v7 = SnapTime::sizeObject(a1 + 136, a2);
  v8 = 48;
  if (a2 == 3)
    v8 = 0;
  return v8 + v4 + v5 + v6 + v7;
}

double PelStats::resetStats(PelStats *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

__n128 PelStats::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v2 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v2;
  v3 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v3;
  v4 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v4;
  result = *(__n128 *)(a2 + 136);
  v6 = *(_OWORD *)(a2 + 152);
  *(__n128 *)(a1 + 136) = result;
  *(_OWORD *)(a1 + 152) = v6;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  return result;
}

int64x2_t PelStats::operator-=(uint64_t a1, uint64_t a2)
{
  int64x2_t result;

  *(int32x2_t *)a1 = vsub_s32(*(int32x2_t *)a1, *(int32x2_t *)a2);
  *(_QWORD *)(a1 + 8) -= *(_QWORD *)(a2 + 8);
  *(int32x4_t *)(a1 + 16) = vsubq_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a2 + 16));
  *(int32x2_t *)(a1 + 32) = vsub_s32(*(int32x2_t *)(a1 + 32), *(int32x2_t *)(a2 + 32));
  *(_QWORD *)(a1 + 168) -= *(_QWORD *)(a2 + 168);
  *(int64x2_t *)(a1 + 40) = vsubq_s64(*(int64x2_t *)(a1 + 40), *(int64x2_t *)(a2 + 40));
  *(int64x2_t *)(a1 + 56) = vsubq_s64(*(int64x2_t *)(a1 + 56), *(int64x2_t *)(a2 + 56));
  *(int64x2_t *)(a1 + 72) = vsubq_s64(*(int64x2_t *)(a1 + 72), *(int64x2_t *)(a2 + 72));
  *(int64x2_t *)(a1 + 88) = vsubq_s64(*(int64x2_t *)(a1 + 88), *(int64x2_t *)(a2 + 88));
  *(int64x2_t *)(a1 + 104) = vsubq_s64(*(int64x2_t *)(a1 + 104), *(int64x2_t *)(a2 + 104));
  *(int64x2_t *)(a1 + 120) = vsubq_s64(*(int64x2_t *)(a1 + 120), *(int64x2_t *)(a2 + 120));
  *(int64x2_t *)(a1 + 136) = vsubq_s64(*(int64x2_t *)(a1 + 136), *(int64x2_t *)(a2 + 136));
  result = vsubq_s64(*(int64x2_t *)(a1 + 152), *(int64x2_t *)(a2 + 152));
  *(int64x2_t *)(a1 + 152) = result;
  return result;
}

int64x2_t PelStats::operator+=(uint64_t a1, uint64_t a2)
{
  int64x2_t result;

  *(int32x2_t *)a1 = vadd_s32(*(int32x2_t *)a1, *(int32x2_t *)a2);
  *(_QWORD *)(a1 + 8) += *(_QWORD *)(a2 + 8);
  *(int32x4_t *)(a1 + 16) = vaddq_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a2 + 16));
  *(int32x2_t *)(a1 + 32) = vadd_s32(*(int32x2_t *)(a1 + 32), *(int32x2_t *)(a2 + 32));
  *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), *(int64x2_t *)(a2 + 40));
  *(int64x2_t *)(a1 + 56) = vaddq_s64(*(int64x2_t *)(a1 + 56), *(int64x2_t *)(a2 + 56));
  *(int64x2_t *)(a1 + 72) = vaddq_s64(*(int64x2_t *)(a1 + 72), *(int64x2_t *)(a2 + 72));
  *(int64x2_t *)(a1 + 88) = vaddq_s64(*(int64x2_t *)(a1 + 88), *(int64x2_t *)(a2 + 88));
  *(int64x2_t *)(a1 + 104) = vaddq_s64(*(int64x2_t *)(a1 + 104), *(int64x2_t *)(a2 + 104));
  *(int64x2_t *)(a1 + 120) = vaddq_s64(*(int64x2_t *)(a1 + 120), *(int64x2_t *)(a2 + 120));
  *(int64x2_t *)(a1 + 136) = vaddq_s64(*(int64x2_t *)(a1 + 136), *(int64x2_t *)(a2 + 136));
  result = vaddq_s64(*(int64x2_t *)(a1 + 152), *(int64x2_t *)(a2 + 152));
  *(int64x2_t *)(a1 + 152) = result;
  *(_QWORD *)(a1 + 168) += *(_QWORD *)(a2 + 168);
  return result;
}

double PelScoreCache::PelScoreCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 492) = 0x10000;
  result = NAN;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFF000000000;
  *(_DWORD *)(a1 + 256) = 20000;
  *(_DWORD *)(a1 + 488) = 1310785535;
  return result;
}

void PelScoreCache::~PelScoreCache(PelScoreCache *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 472);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 240);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 224);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 176);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 144);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 128);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 64);
}

void PelScoreCache::printSize(PelScoreCache *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 348, (DgnString *)&v248);
  if ((_DWORD)v249)
    v16 = v248;
  else
    v16 = &unk_209A80476;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A80476, a3, &unk_209A80476, v16);
  DgnString::~DgnString((DgnString *)&v248);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A80476);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  v22 = (a3 + 1);
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 349, (DgnString *)&v248);
  if ((_DWORD)v249)
    v28 = v248;
  else
    v28 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &unk_209A80476, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v21;
  *a5 += v21;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 351, (DgnString *)&v248);
  if ((_DWORD)v249)
    v33 = v248;
  else
    v33 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, (a3 + 1), &unk_209A80476, (34 - a3), (34 - a3), v33, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v248);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v34 = 4;
  else
    v34 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 352, (DgnString *)&v248);
  if ((_DWORD)v249)
    v39 = v248;
  else
    v39 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, (a3 + 1), &unk_209A80476, (34 - a3), (34 - a3), v39, v34, v34, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v34;
  *a5 += v34;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v40 = 4;
  else
    v40 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 353, (DgnString *)&v248);
  if ((_DWORD)v249)
    v45 = v248;
  else
    v45 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v41, v42, v43, v44, (a3 + 1), &unk_209A80476, (34 - a3), (34 - a3), v45, v40, v40, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v40;
  *a5 += v40;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v46 = 4;
  else
    v46 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 355, (DgnString *)&v248);
  if ((_DWORD)v249)
    v51 = v248;
  else
    v51 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_209A80476, (34 - a3), (34 - a3), v51, v46, v46, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v46;
  *a5 += v46;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v52 = 4;
  else
    v52 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 357, (DgnString *)&v248);
  if ((_DWORD)v249)
    v57 = v248;
  else
    v57 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, (a3 + 1), &unk_209A80476, (34 - a3), (34 - a3), v57, v52, v52, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v52;
  *a5 += v52;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v58 = 4;
  else
    v58 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 359, (DgnString *)&v248);
  if ((_DWORD)v249)
    v63 = v248;
  else
    v63 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, (a3 + 1), &unk_209A80476, (34 - a3), (34 - a3), v63, v58, v58, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v58;
  *a5 += v58;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 361, (DgnString *)&v248);
  if ((_DWORD)v249)
    v68 = v248;
  else
    v68 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, (a3 + 1), &unk_209A80476, (34 - a3), (34 - a3), v68, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 362, (DgnString *)&v248);
  if ((_DWORD)v249)
    v73 = v248;
  else
    v73 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, (a3 + 1), &unk_209A80476, (34 - a3), (34 - a3), v73, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += 4;
  *a5 += 4;
  v74 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v74 = 12;
  v75 = *((unsigned int *)this + 18);
  if ((int)v75 <= 0)
    v76 = 0;
  else
    v76 = 2 * v75;
  v77 = v76 + v74;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 364, (DgnString *)&v248);
  if ((_DWORD)v249)
    v82 = v248;
  else
    v82 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, (a3 + 1), &unk_209A80476, (34 - a3), (34 - a3), v82, v77, v77, 0);
  v247 = a3;
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v77;
  *a5 += v77;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v83 = 12;
  else
    v83 = 16;
  v84 = *((unsigned int *)this + 22);
  v85 = *((_DWORD *)this + 23);
  if (v85 >= v84)
  {
    v86 = 0;
    if ((int)v84 > 0)
      v83 = (v83 | 2) + 2 * (v84 - 1);
    v87 = v83 + 2 * (v85 - v84);
  }
  else
  {
    v86 = 2 * v84;
    v87 = v83;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 366, (DgnString *)&v248);
  if ((_DWORD)v249)
    v92 = v248;
  else
    v92 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v22, &unk_209A80476, v23, v23, v92, v87, v83, v86);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v87;
  *a5 += v83;
  *a6 += v86;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v93 = 12;
  else
    v93 = 16;
  v94 = *((unsigned int *)this + 26);
  v95 = *((_DWORD *)this + 27);
  if (v95 >= v94)
  {
    v96 = 0;
    if ((int)v94 > 0)
      v93 = (v93 | 2) + 2 * (v94 - 1);
    v97 = v93 + 2 * (v95 - v94);
  }
  else
  {
    v96 = 2 * v94;
    v97 = v93;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 367, (DgnString *)&v248);
  if ((_DWORD)v249)
    v102 = v248;
  else
    v102 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v22, &unk_209A80476, v23, v23, v102, v97, v93, v96);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v97;
  *a5 += v93;
  *a6 += v96;
  v103 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 112, 0);
  v104 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 112, 1);
  v248 = 0;
  v249 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v248);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 369, (DgnString *)&v248);
  if ((_DWORD)v249)
    v109 = v248;
  else
    v109 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v105, v106, v107, v108, v22, &unk_209A80476, v23, v23, v109, v103, v104, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v103;
  *a5 += v104;
  v110 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 128, 0);
  v111 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 128, 1);
  v248 = 0;
  v249 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v248);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 371, (DgnString *)&v248);
  if ((_DWORD)v249)
    v116 = v248;
  else
    v116 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, v22, &unk_209A80476, v23, v23, v116, v110, v111, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v110;
  *a5 += v111;
  v117 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v117 = 12;
  v118 = *((unsigned int *)this + 38);
  if ((int)v118 <= 0)
    v119 = 0;
  else
    v119 = 4 * v118;
  v120 = v119 + v117;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 373, (DgnString *)&v248);
  if ((_DWORD)v249)
    v125 = v248;
  else
    v125 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v121, v122, v123, v124, v22, &unk_209A80476, v23, v23, v125, v120, v120, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v120;
  *a5 += v120;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v126 = 12;
  else
    v126 = 16;
  v127 = *((unsigned int *)this + 42);
  v128 = *((_DWORD *)this + 43);
  if (v128 >= v127)
  {
    v129 = 0;
    if ((int)v127 > 0)
      v126 = (v126 | 2) + 2 * (v127 - 1);
    v130 = v126 + 2 * (v128 - v127);
  }
  else
  {
    v129 = 2 * v127;
    v130 = v126;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 375, (DgnString *)&v248);
  if ((_DWORD)v249)
    v135 = v248;
  else
    v135 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v131, v132, v133, v134, v22, &unk_209A80476, v23, v23, v135, v130, v126, v129);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v130;
  *a5 += v126;
  *a6 += v129;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v136 = 12;
  else
    v136 = 16;
  v137 = *((unsigned int *)this + 46);
  v138 = *((_DWORD *)this + 47);
  if (v138 >= v137)
  {
    v139 = 0;
    if ((int)v137 > 0)
      v136 += 4 * (v137 - 1) + 4;
    v140 = v136 + 4 * (v138 - v137);
  }
  else
  {
    v139 = 4 * v137;
    v140 = v136;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 377, (DgnString *)&v248);
  if ((_DWORD)v249)
    v145 = v248;
  else
    v145 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v141, v142, v143, v144, v22, &unk_209A80476, v23, v23, v145, v140, v136, v139);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v140;
  *a5 += v136;
  *a6 += v139;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v146 = 12;
  else
    v146 = 16;
  v147 = *((unsigned int *)this + 50);
  v148 = *((_DWORD *)this + 51);
  if (v148 >= v147)
  {
    v149 = 0;
    if ((int)v147 > 0)
      v146 = (v146 | 2) + 2 * (v147 - 1);
    v150 = v146 + 2 * (v148 - v147);
  }
  else
  {
    v149 = 2 * v147;
    v150 = v146;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 379, (DgnString *)&v248);
  if ((_DWORD)v249)
    v155 = v248;
  else
    v155 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v151, v152, v153, v154, v22, &unk_209A80476, v23, v23, v155, v150, v146, v149);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v150;
  *a5 += v146;
  *a6 += v149;
  v156 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 208, 0);
  v157 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 208, 1);
  v248 = 0;
  v249 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v248);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 381, (DgnString *)&v248);
  if ((_DWORD)v249)
    v162 = v248;
  else
    v162 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v158, v159, v160, v161, v22, &unk_209A80476, v23, v23, v162, v156, v157, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v156;
  *a5 += v157;
  v163 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 240, 0);
  v164 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 240, 1);
  v248 = 0;
  v249 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v248);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 383, (DgnString *)&v248);
  if ((_DWORD)v249)
    v169 = v248;
  else
    v169 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v165, v166, v167, v168, v22, &unk_209A80476, v23, v23, v169, v163, v164, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v163;
  *a5 += v164;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 385, (DgnString *)&v248);
  if ((_DWORD)v249)
    v174 = v248;
  else
    v174 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v170, v171, v172, v173, v22, &unk_209A80476, v23, v23, v174, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += 4;
  *a5 += 4;
  v175 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v175 = 16;
  v176 = *((unsigned int *)this + 68);
  v177 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v177 = 3;
  v178 = (((*((_DWORD *)this + 69) - v176) + v176) << v177) + v175;
  v179 = (v176 << v177) + v175;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 386, (DgnString *)&v248);
  if ((_DWORD)v249)
    v184 = v248;
  else
    v184 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v180, v181, v182, v183, v22, &unk_209A80476, v23, v23, v184, v178, v179, 0);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v178;
  *a5 += v179;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v185 = 12;
  else
    v185 = 16;
  v186 = *((unsigned int *)this + 72);
  v187 = *((_DWORD *)this + 73);
  if (v187 >= v186)
  {
    v188 = 0;
    if ((int)v186 > 0)
      v185 += 4 * (v186 - 1) + 4;
    v189 = v185 + 4 * (v187 - v186);
  }
  else
  {
    v188 = 4 * v186;
    v189 = v185;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 388, (DgnString *)&v248);
  if ((_DWORD)v249)
    v194 = v248;
  else
    v194 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v190, v191, v192, v193, v22, &unk_209A80476, v23, v23, v194, v189, v185, v188);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v189;
  *a5 += v185;
  *a6 += v188;
  v195 = PelStats::sizeObject((uint64_t)this + 296, 0);
  v196 = PelStats::sizeObject((uint64_t)this + 296, 1);
  v197 = PelStats::sizeObject((uint64_t)this + 296, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 418, (DgnString *)&v248);
  if ((_DWORD)v249)
    v202 = v248;
  else
    v202 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v198, v199, v200, v201, v22, &unk_209A80476, v23, v23, v202, v195, v196, v197);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v195;
  *a5 += v196;
  *a6 += v197;
  v203 = sizeObject<Uns16AndScore>((uint64_t)this + 472, 0);
  v204 = sizeObject<Uns16AndScore>((uint64_t)this + 472, 1);
  v205 = sizeObject((uint64_t)&v248, 2);
  v206 = *((unsigned int *)this + 120);
  if (v206 <= *((_DWORD *)this + 121))
    v207 = 0;
  else
    v207 = v205 * v206;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 433, (DgnString *)&v248);
  if ((_DWORD)v249)
    v212 = v248;
  else
    v212 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v208, v209, v210, v211, v22, &unk_209A80476, v23, v23, v212, v203, v204, v207);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v203;
  *a5 += v204;
  *a6 += v207;
  v213 = (char *)this + 488;
  v214 = sizeObject((uint64_t)this + 488, 0);
  v215 = sizeObject((uint64_t)v213, 1);
  v216 = sizeObject((uint64_t)v213, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 442, (DgnString *)&v248);
  if ((_DWORD)v249)
    v221 = v248;
  else
    v221 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v217, v218, v219, v220, v22, &unk_209A80476, v23, v23, v221, v214, v215, v216);
  DgnString::~DgnString((DgnString *)&v248);
  *a4 += v214;
  *a5 += v215;
  *a6 += v216;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 444, (DgnString *)&v248);
  if ((_DWORD)v249)
    v226 = v248;
  else
    v226 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v222, v223, v224, v225, v22, &unk_209A80476, v23, v23, v226, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v248);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 446, (DgnString *)&v248);
  if ((_DWORD)v249)
    v231 = v248;
  else
    v231 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v227, v228, v229, v230, v22, &unk_209A80476, v23, v23, v231, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v248);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 447, (DgnString *)&v248);
  if ((_DWORD)v249)
    v236 = v248;
  else
    v236 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v232, v233, v234, v235, v22, &unk_209A80476, v23, v23, v236, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v248);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 448, (DgnString *)&v248);
  if ((_DWORD)v249)
    v241 = v248;
  else
    v241 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v237, v238, v239, v240, v22, &unk_209A80476, v23, v23, v241, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v248);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 449, (DgnString *)&v248);
  if ((_DWORD)v249)
    v246 = v248;
  else
    v246 = &unk_209A80476;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v242, v243, v244, v245, v247, &unk_209A80476, (35 - v247), (35 - v247), v246, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v248);
}

void sub_209A34754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void PelScoreCache::beginPelScoreCacheSyncRecog(PelScoreCache *this, char a2, char a3, void (*a4)(const PelScorer *, unsigned __int16, unsigned int, unsigned __int16 *, unsigned int *), int (*a5)(const PelScorer *, unsigned __int16, const unsigned __int16 *, unsigned int *), int (*a6)(const PelScorer *, unsigned __int16, unsigned int *), double a7, uint64_t a8, uint64_t a9)
{
  BOOL v14;
  char v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  BOOL v21;

  *((_BYTE *)this + 493) = a2;
  *((_BYTE *)this + 494) = a3;
  if (a7 == 0.0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcache.cpp", 475, (uint64_t)"pel/scrcache", 1, (uint64_t)"%s", a8, a9, (char)&unk_209A80476);
  *((_DWORD *)this + 14) = vcvtd_n_s64_f64(a7, 0x10uLL);
  if (a4)
    v14 = a5 == 0;
  else
    v14 = 1;
  v15 = !v14;
  *((_BYTE *)this + 492) = v15;
  PelScoreCache::cleanPelScoreCache(this, 0);
  if (*((_BYTE *)this + 494))
  {
    v16 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 16) + 144);
    v17 = *((_DWORD *)this + 18);
    if ((_DWORD)v16)
      v18 = v17 == 0;
    else
      v18 = 0;
    if (v18)
    {
      *((_QWORD *)this + 8) = MemChunkAlloc(2 * v16, 0);
      *((_DWORD *)this + 18) = v16;
      v17 = v16;
    }
    if (v17 >= 1)
      memset(*((void **)this + 8), 78, 2 * v17);
    if (*((_BYTE *)this + 492))
    {
      v19 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 16) + 140);
      v20 = *((_DWORD *)this + 38);
      if ((_DWORD)v19)
        v21 = v20 == 0;
      else
        v21 = 0;
      if (v21)
      {
        *((_QWORD *)this + 18) = MemChunkAlloc(4 * v19, 0);
        *((_DWORD *)this + 38) = v19;
        v20 = v19;
      }
      if (v20 >= 1)
        memset(*((void **)this + 18), 255, 4 * v20);
    }
  }
  *((_BYTE *)this + 8) = 1;
  *((_QWORD *)this + 4) = a4;
  *((_QWORD *)this + 5) = a5;
  *((_QWORD *)this + 6) = a6;
}

double PelScoreCache::cleanPelScoreCache(PelScoreCache *this, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  double result;

  *((_DWORD *)this + 15) = -16;
  if (*((_BYTE *)this + 494))
  {
    v4 = (_QWORD *)*((_QWORD *)this + 8);
    if (v4)
    {
      MemChunkFree(v4, 0);
      *((_QWORD *)this + 8) = 0;
    }
    *((_DWORD *)this + 18) = 0;
    v5 = (_QWORD *)*((_QWORD *)this + 10);
    if (v5)
    {
      MemChunkFree(v5, 0);
      *((_QWORD *)this + 10) = 0;
    }
    *((_QWORD *)this + 11) = 0;
    v6 = (_QWORD *)*((_QWORD *)this + 12);
    if (v6)
    {
      MemChunkFree(v6, 0);
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 13) = 0;
    if (*((_BYTE *)this + 492))
    {
      v7 = (_QWORD *)*((_QWORD *)this + 18);
      if (v7)
      {
        MemChunkFree(v7, 0);
        *((_QWORD *)this + 18) = 0;
      }
      *((_DWORD *)this + 38) = 0;
      v8 = (_QWORD *)*((_QWORD *)this + 20);
      if (v8)
      {
        MemChunkFree(v8, 0);
        *((_QWORD *)this + 20) = 0;
      }
      *((_QWORD *)this + 21) = 0;
      v9 = (_QWORD *)*((_QWORD *)this + 22);
      if (v9)
      {
        MemChunkFree(v9, 0);
        *((_QWORD *)this + 22) = 0;
      }
      *((_QWORD *)this + 23) = 0;
      v10 = (_QWORD *)*((_QWORD *)this + 24);
      if (v10)
      {
        MemChunkFree(v10, 0);
        *((_QWORD *)this + 24) = 0;
      }
      *((_QWORD *)this + 25) = 0;
    }
    if (a2)
    {
      v11 = *((unsigned int *)this + 120);
      v12 = *((unsigned int *)this + 30);
      if (v12 <= v11)
      {
        if (v12 < v11)
        {
          v15 = v11 - v12;
          v16 = 16 * v12;
          do
          {
            v17 = (_QWORD *)(*((_QWORD *)this + 14) + v16);
            *v17 = 0;
            v17[1] = 0;
            v16 += 16;
            --v15;
          }
          while (v15);
        }
      }
      else if ((int)v12 > (int)v11)
      {
        v13 = (int)v12;
        v14 = 16 * (int)v12 - 16;
        do
        {
          --v13;
          DgnPrimArray<unsigned int>::~DgnPrimArray(*((_QWORD *)this + 14) + v14);
          v14 -= 16;
        }
        while (v13 > (int)v11);
      }
      *((_DWORD *)this + 30) = v11;
      v18 = *((unsigned int *)this + 34);
      if (v18 <= v11)
      {
        if (v18 < v11)
        {
          v21 = v11 - v18;
          v22 = 16 * v18;
          do
          {
            v23 = (_QWORD *)(*((_QWORD *)this + 16) + v22);
            *v23 = 0;
            v23[1] = 0;
            v22 += 16;
            --v21;
          }
          while (v21);
        }
      }
      else if ((int)v18 > (int)v11)
      {
        v19 = (int)v18;
        v20 = 16 * (int)v18 - 16;
        do
        {
          --v19;
          DgnPrimArray<unsigned int>::~DgnPrimArray(*((_QWORD *)this + 16) + v20);
          v20 -= 16;
        }
        while (v19 > (int)v11);
      }
      *((_DWORD *)this + 34) = v11;
    }
    else
    {
      DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 112);
      DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 128);
    }
    if (*((_BYTE *)this + 492))
    {
      DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 208);
      DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 224);
      DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 240);
    }
    v24 = (_QWORD *)*((_QWORD *)this + 35);
    if (v24)
    {
      MemChunkFree(v24, 0);
      *((_QWORD *)this + 35) = 0;
    }
    *((_QWORD *)this + 36) = 0;
    v25 = (_QWORD *)*((_QWORD *)this + 33);
    if (v25)
    {
      MemChunkFree(v25, 0);
      *((_QWORD *)this + 33) = 0;
    }
    *((_QWORD *)this + 34) = 0;
  }
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  v26 = (_QWORD *)*((_QWORD *)this + 59);
  if (v26)
  {
    MemChunkFree(v26, 0);
    *((_QWORD *)this + 59) = 0;
  }
  *((_QWORD *)this + 60) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  return result;
}

uint64_t PelScoreCache::endPelScoreCacheSyncRecog(uint64_t this)
{
  *(_WORD *)(this + 493) = 256;
  *(_BYTE *)(this + 8) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0xFFFFFFF000000000;
  return this;
}

unint64_t PelScoreCache::beginPelScoreCacheFrame(unint64_t this, unsigned int a2, char a3)
{
  uint64_t v4;
  unsigned int i;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  unsigned int j;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  __int16 *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  unsigned int v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = this;
  *(_BYTE *)(this + 495) = a3;
  if (*(_BYTE *)(this + 494))
  {
    for (i = *(_DWORD *)(this + 288); i <= a2; ++i)
    {
      v6 = *(unsigned int *)(v4 + 120);
      if (v6 == *(_DWORD *)(v4 + 124))
      {
        this = DgnArray<DgnPrimArray<double>>::reallocElts(v4 + 112, 1, 1);
        v6 = *(unsigned int *)(v4 + 120);
      }
      v7 = (_QWORD *)(*(_QWORD *)(v4 + 112) + 16 * v6);
      *v7 = 0;
      v7[1] = 0;
      ++*(_DWORD *)(v4 + 120);
      v8 = *(unsigned int *)(v4 + 136);
      if (v8 == *(_DWORD *)(v4 + 140))
      {
        this = DgnArray<DgnPrimArray<double>>::reallocElts(v4 + 128, 1, 1);
        v8 = *(unsigned int *)(v4 + 136);
      }
      v9 = (_QWORD *)(*(_QWORD *)(v4 + 128) + 16 * v8);
      *v9 = 0;
      v9[1] = 0;
      ++*(_DWORD *)(v4 + 136);
      if (*(_BYTE *)(v4 + 492))
      {
        v10 = *(unsigned int *)(v4 + 216);
        if (v10 == *(_DWORD *)(v4 + 220))
        {
          this = DgnArray<DgnPrimArray<double>>::reallocElts(v4 + 208, 1, 1);
          v10 = *(unsigned int *)(v4 + 216);
        }
        v11 = (_QWORD *)(*(_QWORD *)(v4 + 208) + 16 * v10);
        *v11 = 0;
        v11[1] = 0;
        ++*(_DWORD *)(v4 + 216);
        v12 = *(unsigned int *)(v4 + 232);
        if (v12 == *(_DWORD *)(v4 + 236))
        {
          this = DgnArray<DgnPrimArray<double>>::reallocElts(v4 + 224, 1, 1);
          v12 = *(unsigned int *)(v4 + 232);
        }
        v13 = (_QWORD *)(*(_QWORD *)(v4 + 224) + 16 * v12);
        *v13 = 0;
        v13[1] = 0;
        ++*(_DWORD *)(v4 + 232);
        v14 = *(unsigned int *)(v4 + 248);
        if (v14 == *(_DWORD *)(v4 + 252))
        {
          this = DgnArray<DgnPrimArray<double>>::reallocElts(v4 + 240, 1, 1);
          v14 = *(unsigned int *)(v4 + 248);
        }
        v15 = (_QWORD *)(*(_QWORD *)(v4 + 240) + 16 * v14);
        *v15 = 0;
        v15[1] = 0;
        ++*(_DWORD *)(v4 + 248);
      }
      v16 = *(_DWORD *)(v4 + 272);
      v17 = *(unsigned int *)(v4 + 288);
      if (v17 == *(_DWORD *)(v4 + 292))
      {
        this = DgnPrimArray<unsigned int>::reallocElts(v4 + 280, 1, 1);
        v17 = *(unsigned int *)(v4 + 288);
      }
      *(_DWORD *)(*(_QWORD *)(v4 + 280) + 4 * v17) = v16;
      ++*(_DWORD *)(v4 + 288);
    }
  }
  for (j = *(_DWORD *)(v4 + 480); j <= a2; *(_DWORD *)(v4 + 480) = j)
  {
    if (j == *(_DWORD *)(v4 + 484))
    {
      this = DgnPrimArray<unsigned int>::reallocElts(v4 + 472, 1, 1);
      j = *(_DWORD *)(v4 + 480);
    }
    *(_DWORD *)(*(_QWORD *)(v4 + 472) + 4 * j) = 1310785535;
    j = *(_DWORD *)(v4 + 480) + 1;
  }
  *(_DWORD *)(v4 + 488) = *(_DWORD *)(*(_QWORD *)(v4 + 472) + 4 * a2);
  if (*(_BYTE *)(v4 + 494))
  {
    v19 = *(_QWORD *)(v4 + 112) + 16 * a2;
    v20 = *(_DWORD *)(v19 + 8);
    if (v20)
    {
      *(_QWORD *)(v4 + 80) = *(_QWORD *)v19;
      v21 = *(_DWORD *)(v19 + 12);
      *(_DWORD *)(v4 + 88) = v20;
      *(_DWORD *)(v4 + 92) = v21;
      *(_QWORD *)v19 = 0;
      *(_QWORD *)(v19 + 8) = 0;
      v22 = (_QWORD *)(*(_QWORD *)(v4 + 128) + 16 * a2);
      *(_QWORD *)(v4 + 96) = *v22;
      *(_QWORD *)(v4 + 104) = v22[1];
      *v22 = 0;
      v22[1] = 0;
      v23 = *(unsigned int *)(v4 + 88);
      if ((_DWORD)v23)
      {
        v24 = *(__int16 **)(v4 + 96);
        v25 = *(unsigned __int16 **)(v4 + 80);
        v26 = *(_QWORD *)(v4 + 64);
        do
        {
          v28 = *v24++;
          v27 = v28;
          v29 = *v25++;
          *(_WORD *)(v26 + 2 * v29) = v27;
          --v23;
        }
        while (v23);
      }
      if (*(_BYTE *)(v4 + 492))
      {
        v30 = (_QWORD *)(*(_QWORD *)(v4 + 208) + 16 * a2);
        *(_QWORD *)(v4 + 160) = *v30;
        *(_QWORD *)(v4 + 168) = v30[1];
        *v30 = 0;
        v30[1] = 0;
        v31 = (_QWORD *)(*(_QWORD *)(v4 + 224) + 16 * a2);
        *(_QWORD *)(v4 + 176) = *v31;
        *(_QWORD *)(v4 + 184) = v31[1];
        *v31 = 0;
        v31[1] = 0;
        v32 = (_QWORD *)(*(_QWORD *)(v4 + 240) + 16 * a2);
        *(_QWORD *)(v4 + 192) = *v32;
        *(_QWORD *)(v4 + 200) = v32[1];
        *v32 = 0;
        v32[1] = 0;
        if (*(_DWORD *)(v4 + 168))
        {
          v33 = 0;
          v34 = *(_QWORD *)(v4 + 176);
          v35 = *(_QWORD *)(v4 + 160);
          v36 = *(_QWORD *)(v4 + 144);
          do
          {
            *(_DWORD *)(v36 + 4 * *(unsigned __int16 *)(v35 + 2 * v33)) = *(_DWORD *)(v34 + 4 * v33);
            ++v33;
          }
          while (v33 < *(unsigned int *)(v4 + 168));
        }
      }
    }
  }
  *(_DWORD *)(v4 + 256) = 0;
  *(_DWORD *)(v4 + 60) = a2;
  if (*(_BYTE *)(gParDiagnosticScoreAllPels + 41))
  {
    if (*(_BYTE *)(v4 + 494))
      return PelScoreCache::scoreAllPels(v4);
  }
  return this;
}

uint64_t PelScoreCache::scoreAllPels(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned __int16 v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 i;

  v1 = this;
  v2 = *(_DWORD *)(this + 72);
  if (*(_BYTE *)(this + 492))
  {
    if (v2)
    {
      v3 = 0;
      do
      {
        v4 = v3;
        if (*(_WORD *)(*(_QWORD *)(v1 + 64) + 2 * v3) == 20046)
        {
          v5 = *(unsigned __int16 *)(**(_QWORD **)(v1 + 24) + 2 * v3);
          if (*(_DWORD *)(*(_QWORD *)(v1 + 144) + 4 * v5) == -1)
            PelScoreCache::computeGenScores((PelScoreCache *)v1, *(unsigned __int16 *)(**(_QWORD **)(v1 + 24) + 2 * v3));
          this = PelScoreCache::computePelScoreFromGenScores((PelScoreCache *)v1, v4, v5);
          v2 = *(_DWORD *)(v1 + 72);
        }
        v3 = v4 + 1;
      }
      while (v2 > (unsigned __int16)(v4 + 1));
    }
  }
  else if (v2)
  {
    for (i = 0; i < v2; ++i)
    {
      if (*(_WORD *)(*(_QWORD *)(v1 + 64) + 2 * i) == 20046)
      {
        this = PelScoreCache::computePelScore((PelScoreCache *)v1, i);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
  }
  return this;
}

double PelScoreCache::endPelScoreCacheFrame(PelScoreCache *this, int a2, PelStats *a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _OWORD *v12;
  double result;

  *((_DWORD *)this + 64) = 20000;
  *((_BYTE *)this + 495) = 0;
  *(_DWORD *)(*((_QWORD *)this + 59) + 4 * *((unsigned int *)this + 15)) = *((_DWORD *)this + 122);
  *((_DWORD *)this + 122) = 1310785535;
  if (*((_BYTE *)this + 494))
  {
    PelScoreCache::setPelsNotScored((void **)this);
    v5 = *((unsigned int *)this + 15);
    v6 = (_QWORD *)(*((_QWORD *)this + 14) + 16 * v5);
    *v6 = *((_QWORD *)this + 10);
    v6[1] = *((_QWORD *)this + 11);
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
    v7 = (_QWORD *)(*((_QWORD *)this + 16) + 16 * v5);
    *v7 = *((_QWORD *)this + 12);
    v7[1] = *((_QWORD *)this + 13);
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = 0;
    PelScoreCache::setGensNotScored((void **)this);
    if (*((_BYTE *)this + 492))
    {
      v8 = *((unsigned int *)this + 15);
      v9 = (_QWORD *)(*((_QWORD *)this + 26) + 16 * v8);
      *v9 = *((_QWORD *)this + 20);
      v9[1] = *((_QWORD *)this + 21);
      *((_QWORD *)this + 20) = 0;
      *((_QWORD *)this + 21) = 0;
      v10 = (_QWORD *)(*((_QWORD *)this + 28) + 16 * v8);
      *v10 = *((_QWORD *)this + 22);
      v10[1] = *((_QWORD *)this + 23);
      *((_QWORD *)this + 22) = 0;
      *((_QWORD *)this + 23) = 0;
      v11 = (_QWORD *)(*((_QWORD *)this + 30) + 16 * v8);
      *v11 = *((_QWORD *)this + 24);
      v11[1] = *((_QWORD *)this + 25);
      *((_QWORD *)this + 24) = 0;
      *((_QWORD *)this + 25) = 0;
    }
  }
  v12 = (_OWORD *)((char *)this + 296);
  PelStats::operator+=((uint64_t)a3, (uint64_t)v12);
  result = 0.0;
  v12[9] = 0u;
  v12[10] = 0u;
  v12[7] = 0u;
  v12[8] = 0u;
  v12[5] = 0u;
  v12[6] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  v12[1] = 0u;
  v12[2] = 0u;
  *v12 = 0u;
  return result;
}

void **PelScoreCache::setPelsNotScored(void **this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int16 *v3;
  _WORD *v4;
  unint64_t v5;

  v1 = *((unsigned int *)this + 22);
  v2 = *((unsigned int *)this + 18);
  if (3 * (int)v1 >= v2)
  {
    if ((int)v2 >= 1)
      return (void **)memset(this[8], 78, 2 * v2);
  }
  else if ((int)v1 >= 1)
  {
    v3 = (unsigned __int16 *)this[10];
    v4 = this[8];
    v5 = v1 + 1;
    do
      v4[v3[(v5-- - 2)]] = 20046;
    while (v5 > 1);
  }
  return this;
}

void **PelScoreCache::setGensNotScored(void **this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int16 *v3;
  _DWORD *v4;
  unint64_t v5;

  v1 = *((unsigned int *)this + 42);
  v2 = *((unsigned int *)this + 38);
  if (3 * (int)v1 >= v2)
  {
    if ((int)v2 >= 1)
      return (void **)memset(this[18], 255, 4 * v2);
  }
  else if ((int)v1 >= 1)
  {
    v3 = (unsigned __int16 *)this[20];
    v4 = this[18];
    v5 = v1 + 1;
    do
      v4[v3[(v5-- - 2)]] = -1;
    while (v5 > 1);
  }
  return this;
}

unint64_t PelScoreCache::addCacheClient(unint64_t this, const void *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;

  if (*(_BYTE *)(this + 494))
  {
    v3 = this;
    v4 = *(_DWORD *)(this + 272);
    if (v4 == *(_DWORD *)(this + 276))
    {
      this = DgnPrimArray<unsigned long long>::reallocElts(this + 264, 1, 1);
      v4 = *(_DWORD *)(v3 + 272);
    }
    *(_QWORD *)(*(_QWORD *)(v3 + 264) + 8 * v4) = a2;
    *(_DWORD *)(v3 + 272) = v4 + 1;
    v5 = *(unsigned int *)(v3 + 288);
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD **)(v3 + 280);
      do
      {
        ++*v6++;
        --v5;
      }
      while (v5);
    }
  }
  return this;
}

double PelScoreCache::removeCacheClient(PelScoreCache *this, const void *a2)
{
  int v2;
  uint64_t v3;
  const void **i;
  unsigned int v5;
  double result;

  if (*((_BYTE *)this + 494))
  {
    v2 = *((_DWORD *)this + 68);
    if (!v2)
      return PelScoreCache::cleanPelScoreCache(this, *((unsigned __int8 *)this + 493));
    v3 = *((unsigned int *)this + 68);
    for (i = (const void **)*((_QWORD *)this + 33); *i != a2; ++i)
    {
      if (!--v3)
        return result;
    }
    v5 = v2 - 1;
    *i = *(const void **)(*((_QWORD *)this + 33) + 8 * v5);
    *((_DWORD *)this + 68) = v5;
    if (!v5)
      return PelScoreCache::cleanPelScoreCache(this, *((unsigned __int8 *)this + 493));
  }
  return result;
}

uint64_t PelScoreCache::removeCacheClientOfFrame(uint64_t this, unsigned int a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  if (*(_BYTE *)(this + 494))
  {
    v3 = this;
    v4 = *(_QWORD *)(this + 280);
    v5 = *(_DWORD *)(v4 + 4 * a2) - 1;
    *(_DWORD *)(v4 + 4 * a2) = v5;
    if (!v5 && !*(_BYTE *)(this + 493))
    {
      v6 = a2;
      v7 = *(_QWORD *)(this + 112) + 16 * a2;
      if (*(_QWORD *)v7)
      {
        MemChunkFree(*(_QWORD **)v7, 0);
        *(_QWORD *)v7 = 0;
      }
      *(_QWORD *)(v7 + 8) = 0;
      v8 = (uint64_t *)(*(_QWORD *)(v3 + 128) + 16 * v6);
      this = *v8;
      if (*v8)
      {
        this = MemChunkFree((_QWORD *)this, 0);
        *v8 = 0;
      }
      v8[1] = 0;
      if (*(_BYTE *)(v3 + 492))
      {
        v9 = *(_QWORD *)(v3 + 208) + 16 * v6;
        if (*(_QWORD *)v9)
        {
          MemChunkFree(*(_QWORD **)v9, 0);
          *(_QWORD *)v9 = 0;
        }
        *(_QWORD *)(v9 + 8) = 0;
        v10 = *(_QWORD *)(v3 + 224) + 16 * v6;
        if (*(_QWORD *)v10)
        {
          MemChunkFree(*(_QWORD **)v10, 0);
          *(_QWORD *)v10 = 0;
        }
        *(_QWORD *)(v10 + 8) = 0;
        v11 = (uint64_t *)(*(_QWORD *)(v3 + 240) + 16 * v6);
        this = *v11;
        if (*v11)
        {
          this = MemChunkFree((_QWORD *)this, 0);
          *v11 = 0;
        }
        v11[1] = 0;
      }
    }
  }
  return this;
}

uint64_t PelScoreCache::removeCacheClientOfFramesFromTimeOn(uint64_t this, signed int a2, void *a3, void *a4)
{
  signed int v4;
  uint64_t v5;

  v4 = a2;
  v5 = this;
  if ((a3 & 1) != 0)
  {
    if (*(_DWORD *)(this + 288) > a2)
    {
      do
        this = PelScoreCache::removeCacheClientOfFrame(v5, v4++, a3);
      while (v4 < *(_DWORD *)(v5 + 288));
    }
  }
  else if ((a2 & 0x80000000) == 0)
  {
    do
      this = PelScoreCache::removeCacheClientOfFrame(v5, v4--, a3);
    while (v4 != -1);
  }
  return this;
}

uint64_t PelScoreCache::computeGenScores(PelScoreCache *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v18;

  v4 = *(_QWORD *)this;
  if (*(_DWORD *)(v4 + 284) >= 2u)
  {
    (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 96))(v4, a2, (char *)this + 296);
    v4 = *(_QWORD *)this;
  }
  v5 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 272) + 4 * a2 + 4)
                    - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 272) + 4 * a2));
  v6 = *((unsigned int *)this + 50);
  *(_DWORD *)(*((_QWORD *)this + 18) + 4 * a2) = v6;
  v8 = *((_DWORD *)this + 42);
  v7 = *((_DWORD *)this + 43);
  if (v8 == v7 || v8 == *((_DWORD *)this + 47))
  {
    v9 = 4 * v8 / 3u + 32;
    if (v9 > v7)
      DgnPrimArray<short>::reallocElts((uint64_t)this + 160, v9 - v7, 0);
    v10 = *((_DWORD *)this + 47);
    if (v9 > v10)
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 176, v9 - v10, 0);
  }
  v11 = *((unsigned int *)this + 42);
  *(_WORD *)(*((_QWORD *)this + 20) + 2 * v11) = a2;
  *((_DWORD *)this + 42) = v11 + 1;
  *(_DWORD *)(*((_QWORD *)this + 22) + 4 * (*((_DWORD *)this + 46))++) = v6;
  v13 = *((_DWORD *)this + 50);
  v12 = *((_DWORD *)this + 51);
  v14 = v13 + v5;
  v15 = v5 + 4 * v13 / 3u + 32;
  if (v14 > v12 && v15 > v12)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v15 - v12, 0);
    v14 = *((_DWORD *)this + 50) + v5;
  }
  *((_DWORD *)this + 50) = v14;
  v18 = 0;
  result = (*((uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, unsigned int *))this + 4))(*(_QWORD *)this, a2, v5, *((_QWORD *)this + 24) + 2 * v6, &v18);
  ++*((_DWORD *)this + 75);
  *((_QWORD *)this + 38) += v18;
  return result;
}

uint64_t PelScoreCache::computePelScoreFromGenScores(PelScoreCache *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v16;

  v3 = a3;
  v6 = *(_QWORD *)this;
  if (*(_DWORD *)(v6 + 284) >= 2u && *(_WORD *)(*(_QWORD *)(v6 + 16) + 536))
  {
    v7 = *(unsigned int *)(*(_QWORD *)(v6 + 296) + 4 * a3);
    if (*(_BYTE *)(*(_QWORD *)(v6 + 400) + v7))
    {
      *(_WORD *)(v6 + 640) = *(_WORD *)(*(_QWORD *)(v6 + 624) + 2 * v7);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v6 + 96))(v6, a3, (char *)this + 296);
      v6 = *(_QWORD *)this;
    }
  }
  v16 = 0;
  v8 = *((_DWORD *)this + 14)
     * (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))this + 5))(v6, a2, *((_QWORD *)this + 24) + 2 * *(unsigned int *)(*((_QWORD *)this + 18) + 4 * v3), &v16);
  *(_WORD *)(*((_QWORD *)this + 8) + 2 * a2) = HIWORD(v8);
  v10 = *((_DWORD *)this + 22);
  v9 = *((_DWORD *)this + 23);
  if (v10 == v9 || v10 == *((_DWORD *)this + 27))
  {
    v11 = 4 * v10 / 3u + 32;
    if (v11 > v9)
      DgnPrimArray<short>::reallocElts((uint64_t)this + 80, v11 - v9, 0);
    v12 = *((_DWORD *)this + 27);
    if (v11 > v12)
      DgnPrimArray<short>::reallocElts((uint64_t)this + 96, v11 - v12, 0);
  }
  v13 = *((unsigned int *)this + 22);
  *(_WORD *)(*((_QWORD *)this + 10) + 2 * v13) = a2;
  *((_DWORD *)this + 22) = v13 + 1;
  v14 = *((unsigned int *)this + 26);
  *(_WORD *)(*((_QWORD *)this + 12) + 2 * v14) = HIWORD(v8);
  *((_DWORD *)this + 26) = v14 + 1;
  if (v8 >> 16 < *((__int16 *)this + 245))
    *((_DWORD *)this + 122) = v8 & 0xFFFF0000 | a2;
  ++*((_DWORD *)this + 74);
  return (v8 >> 16);
}

uint64_t PelScoreCache::computePelScore(PelScoreCache *this, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;

  v4 = a2;
  v5 = *(_QWORD **)this;
  if (*((_DWORD *)v5 + 71) >= 2u)
  {
    (*(void (**)(_QWORD *, _QWORD, char *))(*v5 + 96))(v5, *(unsigned __int16 *)(**((_QWORD **)this + 3) + 2 * a2), (char *)this + 296);
    v5 = *(_QWORD **)this;
  }
  v10 = 0;
  v6 = *((_DWORD *)this + 14) * (*((uint64_t (**)(_QWORD *, uint64_t, unsigned int *))this + 6))(v5, a2, &v10);
  *(_WORD *)(*((_QWORD *)this + 8) + 2 * v4) = HIWORD(v6);
  v7 = *((_DWORD *)this + 22);
  if (v7 == *((_DWORD *)this + 23))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 80, 1, 1);
    v7 = *((_DWORD *)this + 22);
  }
  *(_WORD *)(*((_QWORD *)this + 10) + 2 * v7) = a2;
  *((_DWORD *)this + 22) = v7 + 1;
  v8 = *((_DWORD *)this + 26);
  if (v8 == *((_DWORD *)this + 27))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 96, 1, 1);
    v8 = *((_DWORD *)this + 26);
  }
  *(_WORD *)(*((_QWORD *)this + 12) + 2 * v8) = HIWORD(v6);
  *((_DWORD *)this + 26) = v8 + 1;
  if (v6 >> 16 < *((__int16 *)this + 245))
    *((_DWORD *)this + 122) = v6 & 0xFFFF0000 | a2;
  *((int32x2_t *)this + 37) = vadd_s32(*(int32x2_t *)((char *)this + 296), (int32x2_t)0x100000001);
  *((_QWORD *)this + 38) += v10;
  return (v6 >> 16);
}

uint64_t PelScoreCache::computePelScoreNoCache(PelScoreCache *this, uint64_t a2)
{
  int v2;
  int v4;
  uint64_t result;
  int v6;

  v2 = a2;
  v6 = 0;
  v4 = *((_DWORD *)this + 14) * (*((uint64_t (**)(_QWORD, uint64_t, int *))this + 6))(*(_QWORD *)this, a2, &v6);
  result = (v4 >> 16);
  if ((int)result < *((__int16 *)this + 245))
    *((_DWORD *)this + 122) = v4 & 0xFFFF0000 | v2;
  return result;
}

unint64_t PelScoreCache::makeBestStats(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;

  v1 = this;
  v2 = *(unsigned int *)(this + 120);
  v3 = (_QWORD *)(this + 472);
  v4 = *(_DWORD *)(this + 484);
  if (v2 > v4)
    this = DgnPrimArray<unsigned int>::reallocElts(this + 472, v2 - v4, 0);
  *(_DWORD *)(v1 + 480) = v2;
  if ((int)v2 >= 1)
  {
    do
    {
      v5 = *(_QWORD *)(v1 + 112);
      v6 = (v2 - 1);
      v7 = *(unsigned int *)(v5 + 16 * v6 + 8);
      if ((int)v7 < 1)
      {
        LODWORD(v5) = 20000;
        v11 = 0xFFFF;
      }
      else
      {
        v8 = *(_QWORD *)(v5 + 16 * v6);
        v9 = v7 + 1;
        v10 = v7 - 1;
        v11 = 0xFFFF;
        LOWORD(v5) = 20000;
        do
        {
          this = (__int16)v5;
          if (*(__int16 *)(*(_QWORD *)(*(_QWORD *)(v1 + 128) + 16 * v6) + 2 * v10) >= (__int16)v5)
          {
            LODWORD(v5) = (__int16)v5;
          }
          else
          {
            v11 = *(unsigned __int16 *)(v8 + 2 * v10);
            LODWORD(v5) = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(v1 + 128) + 16 * v6) + 2 * v10);
          }
          --v9;
          --v10;
        }
        while (v9 > 1);
      }
      *(_DWORD *)(*v3 + 4 * v6) = v11 | ((_DWORD)v5 << 16);
    }
    while (v2-- > 1);
  }
  return this;
}

unsigned int *PelScoreCache::makePelScoreCacheData(PelScoreCache *this)
{
  unsigned int *v2;
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v2 = (unsigned int *)MemChunkAlloc(0x18uLL, 0);
  PelScoreCacheData::PelScoreCacheData((PelScoreCacheData *)v2);
  *v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + 144);
  v4 = v3 + 2;
  v5 = *((unsigned int *)this + 30);
  v6 = v3[5];
  if (v5 > v6)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)(v3 + 2), v5 - v6, 0);
  v7 = v2[4];
  if (v7 <= v5)
  {
    if (v7 < v5)
    {
      v10 = v5 - v7;
      v11 = 16 * v7;
      do
      {
        v12 = (_QWORD *)(*v4 + v11);
        *v12 = 0;
        v12[1] = 0;
        v11 += 16;
        --v10;
      }
      while (v10);
    }
  }
  else if ((int)v7 > (int)v5)
  {
    v8 = (int)v7;
    v9 = 16 * (int)v7 - 16;
    do
    {
      --v8;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v4 + v9);
      v9 -= 16;
    }
    while (v8 > (int)v5);
  }
  v2[4] = v5;
  if (*((_DWORD *)this + 30))
  {
    v13 = 0;
    v14 = *((_QWORD *)this + 14);
    do
    {
      v15 = *(_DWORD *)(v14 + 16 * v13 + 8);
      v16 = *v4 + 16 * v13;
      v17 = *(_DWORD *)(v16 + 12);
      v18 = v15;
      if (v15 > v17)
      {
        DgnPrimArray<unsigned int>::reallocElts(*v4 + 16 * v13, v15 - v17, 0);
        v14 = *((_QWORD *)this + 14);
        v18 = *(_DWORD *)(v14 + 16 * v13 + 8);
      }
      *(_DWORD *)(v16 + 8) = v15;
      if (v18)
      {
        v19 = 0;
        do
        {
          *(_DWORD *)(*(_QWORD *)(*v4 + 16 * v13) + 4 * v19) = *(unsigned __int16 *)(*(_QWORD *)(v14 + 16 * v13)
                                                                                   + 2 * v19) | (*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 16) + 16 * v13) + 2 * v19) << 16);
          ++v19;
          v14 = *((_QWORD *)this + 14);
        }
        while (v19 < *(unsigned int *)(v14 + 16 * v13 + 8));
      }
      ++v13;
    }
    while (v13 < *((unsigned int *)this + 30));
    LODWORD(v5) = v2[4];
  }
  if ((int)v5 >= 1)
  {
    v20 = v5 + 1;
    do
    {
      v21 = *v4 + 16 * (v20 - 2);
      mrec_qsort_r<PelScoreCache>(*(unsigned __int16 **)v21, *(unsigned int *)(v21 + 8), 4);
      --v20;
    }
    while (v20 > 1);
  }
  return v2;
}

unsigned __int16 *mrec_qsort_r<PelScoreCache>(unsigned __int16 *result, unint64_t a2, int64_t a3)
{
  int64_t v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int16 *v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int16 *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unsigned __int16 *v49;
  char v50;
  int v51;
  unsigned __int16 *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int64_t v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unsigned __int16 *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int16 *v81;
  char v82;
  int64_t v83;
  int64_t v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  int64_t v88;
  char v89;
  char *v90;
  unsigned __int16 *v91;
  unsigned __int16 *v92;
  unsigned __int16 *v93;
  unsigned __int16 *v94;
  unsigned __int16 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  unsigned __int16 *v101;
  unsigned __int16 *v102;
  unsigned __int16 *v103;
  unsigned __int16 *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;

  v4 = -a3;
  v5 = a3 != 8;
  v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0)
    v7 = 2;
  else
    v7 = a3 != 8;
  if (a2 < 7)
  {
LABEL_157:
    if ((uint64_t)(a2 * a3) > a3)
    {
      v90 = (char *)result + a2 * a3;
      v91 = (unsigned __int16 *)((char *)result + a3);
      v92 = result;
      do
      {
        if (v91 > result)
        {
          v93 = v92;
          v94 = v91;
          do
          {
            v95 = v94;
            v94 = (unsigned __int16 *)((char *)v94 + v4);
            if (*v94 <= *v95)
              break;
            if (v7)
            {
              v96 = 0;
              v97 = (uint64_t)v93 + a3;
              if (v6)
              {
                do
                {
                  v98 = *(_QWORD *)(v97 + 8 * v96);
                  *(_QWORD *)(v97 + 8 * v96) = *(_QWORD *)&v93[4 * v96];
                  *(_QWORD *)&v93[4 * v96++] = v98;
                }
                while ((unint64_t)a3 >> 3 != v96);
              }
              else
              {
                do
                {
                  v99 = *(_BYTE *)(v97 + v96);
                  *(_BYTE *)(v97 + v96) = *((_BYTE *)v93 + v96);
                  *((_BYTE *)v93 + v96++) = v99;
                }
                while (a3 != v96);
              }
            }
            else
            {
              v100 = *(_QWORD *)v95;
              *(_QWORD *)v95 = *(_QWORD *)v94;
              *(_QWORD *)v94 = v100;
            }
            v93 = (unsigned __int16 *)((char *)v93 + v4);
          }
          while (v94 > result);
        }
        v91 = (unsigned __int16 *)((char *)v91 + a3);
        v92 = (unsigned __int16 *)((char *)v92 + a3);
      }
      while (v91 < (unsigned __int16 *)v90);
    }
  }
  else
  {
    v8 = (unint64_t)a3 >> 3;
    while (1)
    {
      v9 = (unsigned __int16 *)((char *)result + (a2 >> 1) * a3);
      if (a2 != 7)
      {
        v10 = (unsigned __int16 *)((char *)result + (a2 - 1) * a3);
        if (a2 <= 0x28)
        {
          v22 = *result;
          v33 = *v9;
          v13 = result;
          v42 = *v10;
        }
        else
        {
          v11 = (a2 >> 3) * a3;
          v12 = 2 * v11;
          v13 = &result[v11];
          v14 = *result;
          v15 = *(unsigned __int16 *)((char *)result + v11);
          v16 = *v13;
          if (v14 >= v16)
            v17 = *v13;
          else
            v17 = *result;
          if (v14 >= v16)
            v18 = &result[v11];
          else
            v18 = result;
          if (v15 > v16)
          {
            v17 = *(unsigned __int16 *)((char *)result + v11);
            v18 = (unsigned __int16 *)((char *)result + v11);
          }
          if (v14 <= v16)
            v19 = *v13;
          else
            v19 = *result;
          if (v14 >= v16)
            v13 = result;
          v20 = v15 >= v16;
          if (v15 >= v16)
            v21 = v19;
          else
            v21 = *(unsigned __int16 *)((char *)result + v11);
          if (!v20)
            v13 = (unsigned __int16 *)((char *)result + v11);
          if (v14 < v15)
            v22 = v21;
          else
            v22 = v17;
          if (v14 >= v15)
            v13 = v18;
          v23 = -(uint64_t)v11;
          v24 = (unsigned __int16 *)((char *)v9 - v11);
          v25 = (unsigned __int16 *)((char *)v9 + v11);
          v26 = *v24;
          v27 = *v9;
          v28 = *v25;
          if (v26 >= v28)
            v29 = *v25;
          else
            v29 = *v24;
          if (v26 >= v28)
            v30 = v25;
          else
            v30 = v24;
          if (v27 > v28)
          {
            v29 = *v9;
            v30 = (unsigned __int16 *)((char *)result + (a2 >> 1) * a3);
          }
          if (v26 <= v28)
            v31 = *v25;
          else
            v31 = *v24;
          if (v26 >= v28)
            v25 = v24;
          if (v27 >= v28)
            v32 = v31;
          else
            v32 = *v9;
          if (v27 >= v28)
            v9 = v25;
          if (v26 < v27)
            v33 = v32;
          else
            v33 = v29;
          if (v26 >= v27)
            v9 = v30;
          v34 = &v10[v12 / 0xFFFFFFFFFFFFFFFELL];
          v35 = (unsigned __int16 *)((char *)v10 + v23);
          v36 = *v34;
          v37 = *v35;
          v38 = *v10;
          if (v36 >= v38)
            v39 = *v10;
          else
            v39 = *v34;
          if (v36 >= v38)
            v40 = (unsigned __int16 *)((char *)result + (a2 - 1) * a3);
          else
            v40 = v34;
          if (v37 > v38)
          {
            v39 = *v35;
            v40 = v35;
          }
          if (v36 <= v38)
            v41 = *v10;
          else
            v41 = *v34;
          if (v36 >= v38)
            v10 = v34;
          if (v37 >= v38)
            v42 = v41;
          else
            v42 = *v35;
          if (v37 < v38)
            v10 = v35;
          if (v36 >= v37)
          {
            v42 = v39;
            v10 = v40;
          }
        }
        if (v22 >= v42)
          v43 = v10;
        else
          v43 = v13;
        if (v33 > v42)
          v43 = v9;
        if (v22 >= v42)
          v10 = v13;
        if (v33 >= v42)
          v9 = v10;
        if (v22 >= v33)
          v9 = v43;
      }
      if (v7)
      {
        if (v6)
        {
          v44 = result;
          v45 = (unint64_t)a3 >> 3;
          do
          {
            v46 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v9;
            v44 += 4;
            *(_QWORD *)v9 = v46;
            v9 += 4;
            --v45;
          }
          while (v45);
        }
        else
        {
          v48 = a3;
          v49 = result;
          do
          {
            v50 = *(_BYTE *)v49;
            *(_BYTE *)v49 = *(_BYTE *)v9;
            v49 = (unsigned __int16 *)((char *)v49 + 1);
            *(_BYTE *)v9 = v50;
            v9 = (unsigned __int16 *)((char *)v9 + 1);
            --v48;
          }
          while (v48);
        }
      }
      else
      {
        v47 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)v9;
        *(_QWORD *)v9 = v47;
      }
      v51 = 0;
      v52 = (unsigned __int16 *)((char *)result + a3);
      v53 = (_QWORD *)((char *)result + (a2 - 1) * a3);
      v54 = v53;
      v55 = (_QWORD *)((char *)result + a3);
      v56 = (_QWORD *)((char *)result + a3);
LABEL_96:
      while (v55 <= v54)
      {
        v57 = *(unsigned __int16 *)v55;
        v58 = *result;
        if (v57 > v58)
          break;
        if (v57 == v58)
        {
          if (v7)
          {
            v59 = 0;
            if (v6)
            {
              do
              {
                v60 = v56[v59];
                v56[v59] = v55[v59];
                v55[v59++] = v60;
              }
              while (v8 != v59);
            }
            else
            {
              do
              {
                v61 = *((_BYTE *)v56 + v59);
                *((_BYTE *)v56 + v59) = *((_BYTE *)v55 + v59);
                *((_BYTE *)v55 + v59++) = v61;
              }
              while (a3 != v59);
            }
          }
          else
          {
            v71 = *v56;
            *v56 = *v55;
            *v55 = v71;
          }
          v56 = (_QWORD *)((char *)v56 + a3);
          v51 = 1;
        }
        v55 = (_QWORD *)((char *)v55 + a3);
      }
      while (v55 <= v54)
      {
        v66 = *(unsigned __int16 *)v54;
        v67 = *result;
        if (v66 < v67)
        {
          if (v7)
          {
            v68 = 0;
            if (v6)
            {
              do
              {
                v69 = v55[v68];
                v55[v68] = v54[v68];
                v54[v68++] = v69;
              }
              while (v8 != v68);
            }
            else
            {
              do
              {
                v70 = *((_BYTE *)v55 + v68);
                *((_BYTE *)v55 + v68) = *((_BYTE *)v54 + v68);
                *((_BYTE *)v54 + v68++) = v70;
              }
              while (a3 != v68);
            }
          }
          else
          {
            v72 = *v55;
            *v55 = *v54;
            *v54 = v72;
          }
          v55 = (_QWORD *)((char *)v55 + a3);
          v54 = (_QWORD *)((char *)v54 + v4);
          v51 = 1;
          goto LABEL_96;
        }
        if (v66 == v67)
        {
          if (v7)
          {
            v62 = 0;
            if (v6)
            {
              do
              {
                v63 = v54[v62];
                v54[v62] = v53[v62];
                v53[v62++] = v63;
              }
              while (v8 != v62);
            }
            else
            {
              do
              {
                v64 = *((_BYTE *)v54 + v62);
                *((_BYTE *)v54 + v62) = *((_BYTE *)v53 + v62);
                *((_BYTE *)v53 + v62++) = v64;
              }
              while (a3 != v62);
            }
          }
          else
          {
            v65 = *v54;
            *v54 = *v53;
            *v53 = v65;
          }
          v53 = (_QWORD *)((char *)v53 + v4);
          v51 = 1;
        }
        v54 = (_QWORD *)((char *)v54 + v4);
      }
      v73 = (char *)result + a2 * a3;
      if (!v51)
        break;
      v74 = (char *)v55 - (char *)v56;
      if ((char *)v56 - (char *)result >= (char *)v55 - (char *)v56)
        v75 = (char *)v55 - (char *)v56;
      else
        v75 = (char *)v56 - (char *)result;
      if (v75)
      {
        if (v6)
        {
          v76 = (_QWORD *)((char *)v55 - v75);
          v77 = v75 >> 3;
          v78 = result;
          do
          {
            v79 = *(_QWORD *)v78;
            *(_QWORD *)v78 = *v76;
            v78 += 4;
            *v76++ = v79;
            --v77;
          }
          while (v77);
        }
        else
        {
          v80 = -(uint64_t)v75;
          v81 = result;
          do
          {
            v82 = *(_BYTE *)v81;
            *(_BYTE *)v81 = *((_BYTE *)v55 + v80);
            v81 = (unsigned __int16 *)((char *)v81 + 1);
            *((_BYTE *)v55 + v80) = v82;
            v20 = __CFADD__(v80++, 1);
          }
          while (!v20);
        }
      }
      v83 = (char *)v53 - (char *)v54;
      v84 = v73 - ((char *)v53 + a3);
      if ((char *)v53 - (char *)v54 < v84)
        v84 = (char *)v53 - (char *)v54;
      if (v84)
      {
        if (v6)
        {
          v85 = &v73[-v84];
          v86 = (unint64_t)v84 >> 3;
          do
          {
            v87 = *v55;
            *v55++ = *(_QWORD *)v85;
            *(_QWORD *)v85 = v87;
            v85 += 8;
            --v86;
          }
          while (v86);
        }
        else
        {
          v88 = -v84;
          do
          {
            v89 = *(_BYTE *)v55;
            *(_BYTE *)v55 = v73[v88];
            v55 = (_QWORD *)((char *)v55 + 1);
            v73[v88] = v89;
            v20 = __CFADD__(v88++, 1);
          }
          while (!v20);
        }
      }
      if (v74 > a3)
        result = (unsigned __int16 *)mrec_qsort_r<PelScoreCache>();
      if (v83 <= a3)
        return result;
      result = (unsigned __int16 *)&v73[-v83];
      a2 = v83 / (unint64_t)a3;
      v6 = ((((_BYTE)v73 - v83) | a3) & 7) == 0;
      if (((((_BYTE)v73 - v83) | a3) & 7) != 0)
        v7 = 2;
      else
        v7 = v5;
      if (a2 < 7)
        goto LABEL_157;
    }
    if ((uint64_t)(a2 * a3) > a3)
    {
      v101 = result;
      do
      {
        if (v52 > result)
        {
          v102 = v101;
          v103 = v52;
          do
          {
            v104 = v103;
            v103 = (unsigned __int16 *)((char *)v103 + v4);
            if (*v103 <= *v104)
              break;
            if (v7)
            {
              v105 = 0;
              v106 = (uint64_t)v102 + a3;
              if (v6)
              {
                do
                {
                  v107 = *(_QWORD *)(v106 + 8 * v105);
                  *(_QWORD *)(v106 + 8 * v105) = *(_QWORD *)&v102[4 * v105];
                  *(_QWORD *)&v102[4 * v105++] = v107;
                }
                while (v8 != v105);
              }
              else
              {
                do
                {
                  v108 = *(_BYTE *)(v106 + v105);
                  *(_BYTE *)(v106 + v105) = *((_BYTE *)v102 + v105);
                  *((_BYTE *)v102 + v105++) = v108;
                }
                while (a3 != v105);
              }
            }
            else
            {
              v109 = *(_QWORD *)v104;
              *(_QWORD *)v104 = *(_QWORD *)v103;
              *(_QWORD *)v103 = v109;
            }
            v102 = (unsigned __int16 *)((char *)v102 + v4);
          }
          while (v103 > result);
        }
        v52 = (unsigned __int16 *)((char *)v52 + a3);
        v101 = (unsigned __int16 *)((char *)v101 + a3);
      }
      while (v52 < (unsigned __int16 *)v73);
    }
  }
  return result;
}

unint64_t PelScoreCache::setCacheData(unint64_t this, const PelScoreCacheData *a2)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _WORD *v30;
  _WORD *v31;
  __int16 *v32;
  __int16 v33;
  __int16 v34;
  int v35;
  unsigned int v36;
  _DWORD *v37;

  if (a2)
  {
    v3 = this;
    *(_DWORD *)(this + 60) = -16;
    *(_DWORD *)(this + 88) = 0;
    *(_DWORD *)(this + 104) = 0;
    if (*(_BYTE *)(this + 492))
      *(_DWORD *)(this + 168) = 0;
    *(_DWORD *)(this + 480) = 0;
    v4 = *((unsigned int *)a2 + 4);
    v5 = (_QWORD *)(this + 112);
    v6 = *(_DWORD *)(this + 124);
    if (v4 > v6)
      DgnArray<DgnPrimArray<double>>::reallocElts(this + 112, v4 - v6, 0);
    v7 = *(unsigned int *)(v3 + 120);
    if (v7 <= v4)
    {
      if (v7 < v4)
      {
        v10 = v4 - v7;
        v11 = 16 * v7;
        do
        {
          v12 = (_QWORD *)(*v5 + v11);
          *v12 = 0;
          v12[1] = 0;
          v11 += 16;
          --v10;
        }
        while (v10);
      }
    }
    else if ((int)v7 > (int)v4)
    {
      v8 = (int)v7;
      v9 = 16 * (int)v7 - 16;
      do
      {
        --v8;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v5 + v9);
        v9 -= 16;
      }
      while (v8 > (int)v4);
    }
    *(_DWORD *)(v3 + 120) = v4;
    v13 = (_QWORD *)(v3 + 128);
    v14 = *(_DWORD *)(v3 + 140);
    if (v4 > v14)
      DgnArray<DgnPrimArray<double>>::reallocElts(v3 + 128, v4 - v14, 0);
    v15 = *(unsigned int *)(v3 + 136);
    if (v15 <= v4)
    {
      if (v15 < v4)
      {
        v18 = v4 - v15;
        v19 = 16 * v15;
        do
        {
          v20 = (_QWORD *)(*v13 + v19);
          *v20 = 0;
          v20[1] = 0;
          v19 += 16;
          --v18;
        }
        while (v18);
      }
    }
    else if ((int)v15 > (int)v4)
    {
      v16 = (int)v15;
      v17 = 16 * (int)v15 - 16;
      do
      {
        --v16;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v13 + v17);
        v17 -= 16;
      }
      while (v16 > (int)v4);
    }
    *(_DWORD *)(v3 + 136) = v4;
    if ((_DWORD)v4)
    {
      v21 = 0;
      v22 = *((_QWORD *)a2 + 1);
      do
      {
        v23 = *(_DWORD *)(v22 + 16 * v21 + 8);
        v24 = *v5 + 16 * v21;
        v25 = *(_DWORD *)(v24 + 12);
        v26 = v23;
        if (v23 > v25)
        {
          DgnPrimArray<short>::reallocElts(*v5 + 16 * v21, v23 - v25, 0);
          v22 = *((_QWORD *)a2 + 1);
          v26 = *(_DWORD *)(v22 + 16 * v21 + 8);
        }
        *(_DWORD *)(v24 + 8) = v23;
        v27 = *v13 + 16 * v21;
        v28 = *(_DWORD *)(v27 + 12);
        LODWORD(v29) = v26;
        if (v26 > v28)
        {
          DgnPrimArray<short>::reallocElts(*v13 + 16 * v21, v26 - v28, 0);
          v22 = *((_QWORD *)a2 + 1);
          LODWORD(v29) = *(_DWORD *)(v22 + 16 * v21 + 8);
        }
        *(_DWORD *)(v27 + 8) = v26;
        if ((_DWORD)v29)
        {
          v30 = *(_WORD **)(*v5 + 16 * v21);
          v31 = *(_WORD **)(*v13 + 16 * v21);
          v29 = v29;
          v32 = (__int16 *)(*(_QWORD *)(v22 + 16 * v21) + 2);
          do
          {
            v33 = *(v32 - 1);
            v34 = *v32;
            v32 += 2;
            *v30++ = v33;
            *v31++ = v34;
            --v29;
          }
          while (v29);
        }
        ++v21;
      }
      while (v21 != v4);
    }
    this = PelScoreCache::makeBestStats(v3);
    v35 = *(_DWORD *)(v3 + 272);
    v36 = *(_DWORD *)(v3 + 292);
    if (v4 <= v36)
    {
      *(_DWORD *)(v3 + 288) = v4;
      if (!(_DWORD)v4)
        return this;
    }
    else
    {
      this = DgnPrimArray<unsigned int>::reallocElts(v3 + 280, v4 - v36, 0);
      *(_DWORD *)(v3 + 288) = v4;
    }
    v37 = *(_DWORD **)(v3 + 280);
    do
    {
      *v37++ = v35;
      --v4;
    }
    while (v4);
  }
  return this;
}

uint64_t BaumWelchNet::reverseSil(BaumWelchNet *this, uint64_t a2)
{
  return a2;
}

uint64_t BaumWelchReverseNet::reverseSil(BaumWelchReverseNet *this, unsigned int a2)
{
  unsigned int v2;

  if (a2 == -50331651)
    v2 = -50331650;
  else
    v2 = a2;
  if (a2 == -50331650)
    return 4244635645;
  else
    return v2;
}

void BaumWelchNet::~BaumWelchNet(BaumWelchNet *this)
{
  NodeNet::~NodeNet(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t BaumWelchNet::recordNodeData(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  __int16 v5;
  __int128 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  char v17;
  int v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  __int16 v25;
  __int128 v26;

  v3 = result;
  v4 = *(_DWORD *)(result + 16);
  if (v4 >> 25 == 126)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 360))(result);
    v4 = result;
    v5 = 0;
    v6 = xmmword_209A593D0;
    v7 = 0x3FFF;
  }
  else
  {
    v7 = *(_WORD *)(result + 20);
    v5 = *(_WORD *)(result + 22);
    v6 = *(_OWORD *)(result + 24);
  }
  v23 = v4;
  v24 = v7;
  v25 = v5;
  v26 = v6;
  v8 = *(unsigned int *)(v3 + 168);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 8 * v8;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v3 + 160) + v9);
      if (*(_WORD *)(v11 + 18) != 20000)
      {
        result = NodeData::NodeData((uint64_t)&v14, v11 + 8, (int *)&v23, (uint64_t *)(v11 + 44), *(_WORD *)(v11 + 56), *(_WORD *)(v11 + 80));
        v12 = *(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 8);
        v13 = v15;
        *(_QWORD *)v12 = v14;
        *(_WORD *)(v12 + 8) = v13;
        *(_BYTE *)(v12 + 10) = v16;
        *(_BYTE *)(v12 + 11) = v17;
        *(_DWORD *)(v12 + 12) = v18;
        *(_DWORD *)(v12 + 16) = v19;
        *(_OWORD *)(v12 + 20) = v20;
        *(_QWORD *)(v12 + 36) = v21;
        *(_WORD *)(v12 + 44) = v22;
        ++*(_DWORD *)(a2 + 8);
      }
      v9 += 8;
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t BaumWelchReverseNet::recordNodeData(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned int v6;
  __int16 v7;
  __int128 v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  char v22;
  int v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  __int16 v30;
  __int128 v31;

  v5 = result;
  v6 = *(_DWORD *)(result + 16);
  if (v6 >> 25 == 126)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 360))(result);
    v6 = result;
    v7 = 0;
    v8 = xmmword_209A593D0;
    v9 = 0x3FFF;
  }
  else
  {
    v9 = *(_WORD *)(result + 20);
    v7 = *(_WORD *)(result + 22);
    v8 = *(_OWORD *)(result + 24);
  }
  v28 = v6;
  v29 = v9;
  v30 = v7;
  v31 = v8;
  v10 = *(unsigned int *)(v5 + 168);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 8 * v10;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v5 + 160) + v11);
      if (*(_WORD *)(v13 + 18) != 20000)
      {
        v14 = *(_WORD *)(v13 + 56);
        if ((v14 & 3) == 3)
          v15 = 1;
        else
          v15 = *(_WORD *)(v13 + 56) & 3;
        if ((v14 & 3) == 1)
          v16 = 3;
        else
          v16 = v15;
        NodeData::NodeData((uint64_t)&v19, v13 + 8, (int *)&v28, (uint64_t *)(v13 + 44), v16 | v14 & 0xFFFC, *(_WORD *)(v13 + 80));
        v17 = *(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 8);
        v18 = v20;
        *(_QWORD *)v17 = v19;
        *(_WORD *)(v17 + 8) = v18;
        *(_BYTE *)(v17 + 10) = v21;
        *(_BYTE *)(v17 + 11) = v22;
        *(_DWORD *)(v17 + 12) = v23;
        *(_DWORD *)(v17 + 16) = v24;
        *(_OWORD *)(v17 + 20) = v25;
        *(_QWORD *)(v17 + 36) = v26;
        *(_WORD *)(v17 + 44) = v27;
        ++*(_DWORD *)(a2 + 8);
        result = NodeNetNode::addAcousticsToScores((NodeNetNode *)v13, a3, *(PelScoreCache ***)(v5 + 8));
      }
      v11 += 8;
    }
    while (v12 != v11);
  }
  return result;
}

void BaumWelchReverseNet::~BaumWelchReverseNet(BaumWelchReverseNet *this)
{
  NodeNet::~NodeNet(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t BaumWelchReverseNet::pushEntryScore(BaumWelchReverseNet *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  result = (*(uint64_t (**)(BaumWelchReverseNet *, uint64_t))(*(_QWORD *)this + 344))(this, 4294967280);
  v3 = *((unsigned int *)this + 42);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 20) + v4);
      result = PredStruct::getBestPred((PredStruct *)(v6 + 32));
      v7 = *(__int16 *)(result + 8);
      if (v7 == 20000)
      {
        v8 = v6 + 8;
      }
      else
      {
        if (*(__int16 *)(v6 + 30) != -1 && *(_BYTE *)(v6 + 42))
        {
          v9 = *(__int16 *)(v6 + 24);
          if (v9 < 0)
            v10 = *(char *)(v6 + 29) + v9;
          else
            v10 = *(char *)(v6 + 29);
          v7 += v10;
        }
        v8 = v6 + 8;
        if (v7 != 20000)
        {
          *(_DWORD *)(v6 + 8) = *(_DWORD *)result;
          v11 = v7 + (*(_DWORD *)(v6 + 20) >> 8);
          *(_DWORD *)(v6 + 12) = *(_DWORD *)(result + 4) + *(__int16 *)(v6 + 26);
          goto LABEL_14;
        }
      }
      LOWORD(v11) = 20000;
      *(_WORD *)(v6 + 18) = 20000;
LABEL_14:
      *(_WORD *)(v8 + 8) = v11;
      v4 += 8;
    }
    while (v5 != v4);
  }
  return result;
}

void BaumWelchNet::newNode(BaumWelchNet *this, char a2)
{
  uint64_t *v3;

  v3 = MemChunkAlloc(0x60uLL, 0);
  TraceNode::TraceNode((TraceNode *)v3, a2);
}

uint64_t BaumWelchReverseNet::scoreNode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, _BYTE *a8, int a9, int a10, uint64_t a11, HmmNet *a12)
{
  return NodeNetNode::scoreNodeBWBack(a2, a3, a8, *(_QWORD *)(a1 + 8), a9, a10, a12);
}

uint64_t BaumWelchReverseNet::updateSilSeedTime(BaumWelchReverseNet *this, int a2, int a3)
{
  return AcousticNet::updateSilSeedTime((uint64_t)this, a2, a3 - 1);
}

uint64_t BaumWelchNet::isTraceNet(BaumWelchNet *this)
{
  return 1;
}

uint64_t PronCmp(unsigned int a1, unsigned int a2, const WordList *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t result;
  BOOL v16;

  v3 = *((_QWORD *)a3 + 4);
  v4 = *(unsigned __int16 *)(v3 + 2 * a1);
  v5 = *(unsigned __int16 *)(v3 + 2 * a2);
  if ((_DWORD)v4)
  {
    if (!(_DWORD)v5)
      return 1;
    LODWORD(v6) = 0;
    LODWORD(v7) = 0;
    v8 = *((_QWORD *)a3 + 1);
    v9 = *((_QWORD *)a3 + 6);
    v10 = *((_QWORD *)a3 + 9);
    v11 = v10 + 2 * *(unsigned int *)(v9 + 4 * a1);
    v12 = v10 + 2 * *(unsigned int *)(v9 + 4 * a2);
    while (1)
    {
      if (v6 >= v4)
      {
        v13 = 0xFFFF;
      }
      else
      {
        v6 = v6;
        while (1)
        {
          v13 = *(unsigned __int16 *)(*(_QWORD *)(v8 + 8) + 2 * *(unsigned __int16 *)(v11 + 2 * v6));
          if (v13 != 0xFFFF)
            break;
          if (v4 == ++v6)
          {
            v13 = 0xFFFF;
            LODWORD(v6) = v4;
            break;
          }
        }
      }
      if (v7 >= v5)
      {
        v14 = 0xFFFF;
      }
      else
      {
        v7 = v7;
        while (1)
        {
          v14 = *(unsigned __int16 *)(*(_QWORD *)(v8 + 8) + 2 * *(unsigned __int16 *)(v12 + 2 * v7));
          if (v14 != 0xFFFF)
            break;
          if (v5 == ++v7)
          {
            v14 = 0xFFFF;
            LODWORD(v7) = v5;
            break;
          }
        }
      }
      if ((_DWORD)v6 == (_DWORD)v4)
        break;
      if ((_DWORD)v7 == (_DWORD)v5)
        return 1;
      result = (v13 - v14);
      if (v13 != v14)
        return result;
      LODWORD(v6) = v6 + 1;
      LODWORD(v7) = v7 + 1;
    }
    v16 = (_DWORD)v7 == (_DWORD)v5;
  }
  else
  {
    v16 = (_DWORD)v5 == 0;
  }
  if (v16)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t WordIdPronCollArray::getInsertIndex(WordIdPronCollArray *this, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  const WordList *v7;
  int v8;
  uint64_t v9;
  signed int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;

  v3 = a3;
  v4 = *((_DWORD *)this + 2);
  if (v4)
    v5 = v4 <= (int)a3;
  else
    v5 = 1;
  if (!v5)
  {
    v7 = (const WordList *)*((_QWORD *)this + 2);
    v8 = v4 - 1;
    v9 = *(_QWORD *)this;
    v10 = a3;
    do
    {
      v11 = v10 + v8;
      if (v10 + v8 < 0 != __OFADD__(v10, v8))
        ++v11;
      v12 = v11 >> 1;
      if (v10 == v8 - 1)
        v13 = v8;
      else
        v13 = v12;
      v14 = *(_DWORD *)(v9 + 4 * v13);
      v15 = PronCmp(v14, a2, v7);
      v16 = v14 - a2;
      if (v15)
        v16 = v15;
      if (v16)
      {
        if ((v16 & 0x80000000) != 0)
          v10 = v13 + 1;
        else
          v8 = v13 - 1;
      }
      else
      {
        v17 = v8 == v10;
        v10 = v13;
        if (v17)
          goto LABEL_23;
      }
    }
    while (v10 <= v8);
    if (v10 == (_DWORD)v3)
      return v3;
    v13 = v10 - 1;
LABEL_23:
    if (v13 != -1)
      return v13 + 1;
  }
  return v3;
}

uint64_t mrec_qsort_r<WordIdPronCollArray>(uint64_t result, unint64_t a2, unint64_t a3, const WordList *a4)
{
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  BOOL v52;
  unsigned int *v53;
  int v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  unsigned int *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  char v69;
  int v70;
  _QWORD *v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char *v98;
  int64_t v99;
  unint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  unsigned int *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  char v107;
  BOOL v108;
  int64_t v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  int v116;
  unsigned int *v117;
  unsigned int *v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  unsigned int *v133;
  unsigned int *v134;
  unsigned int *v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int *v152;
  _BOOL4 v153;
  unint64_t v154;
  unsigned int *v155;
  unsigned int *v156;
  unsigned int *v157;
  BOOL v158;
  int v159;
  uint64_t v160;

  v5 = a2;
  v6 = (unsigned int *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v158 = ((result | a3) & 7) == 0;
  v159 = v8;
  v160 = -(uint64_t)a3;
  if (a2 < 7)
  {
LABEL_179:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v156 = (unsigned int *)((char *)v6 + v5 * a3);
      v117 = (unsigned int *)((char *)v6 + a3);
      v118 = v6;
      do
      {
        if (v117 > v6)
        {
          v119 = v118;
          v120 = v117;
          do
          {
            v121 = v120;
            v120 = (unsigned int *)((char *)v120 + v7);
            v122 = *v120;
            v123 = *v121;
            result = PronCmp(*v120, *v121, a4);
            v7 = v160;
            v124 = v122 - v123;
            if ((_DWORD)result)
              v124 = result;
            if (v124 < 1)
              break;
            if (v159)
            {
              if (v158)
              {
                v125 = 0;
                v126 = (uint64_t)v119 + a3;
                do
                {
                  v127 = *(_QWORD *)(v126 + 8 * v125);
                  *(_QWORD *)(v126 + 8 * v125) = *(_QWORD *)&v119[2 * v125];
                  *(_QWORD *)&v119[2 * v125++] = v127;
                }
                while (a3 >> 3 != v125);
              }
              else
              {
                v129 = 0;
                v130 = (uint64_t)v119 + a3;
                do
                {
                  v131 = *(_BYTE *)(v130 + v129);
                  *(_BYTE *)(v130 + v129) = *((_BYTE *)v119 + v129);
                  *((_BYTE *)v119 + v129++) = v131;
                }
                while (a3 != v129);
              }
            }
            else
            {
              v128 = *(_QWORD *)v121;
              *(_QWORD *)v121 = *(_QWORD *)v120;
              *(_QWORD *)v120 = v128;
            }
            v119 = (unsigned int *)((char *)v119 + v160);
          }
          while (v120 > v6);
        }
        v117 = (unsigned int *)((char *)v117 + a3);
        v118 = (unsigned int *)((char *)v118 + a3);
      }
      while (v117 < v156);
    }
    return result;
  }
  v153 = a3 != 8;
  v9 = a3 >> 3;
  while (1)
  {
    v10 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    v154 = v5;
    if (v5 == 7)
      goto LABEL_101;
    v155 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 > 0x28)
    {
      v11 = (v5 >> 3) * a3;
      v12 = *v6;
      v152 = (unsigned int *)((char *)v6 + v11);
      v13 = *(unsigned int *)((char *)v6 + v11);
      v14 = PronCmp(*v6, v13, a4);
      if (v14)
        v15 = v14;
      else
        v15 = v12 - v13;
      v16 = *(unsigned int *)((char *)v6 + 2 * v11);
      v17 = PronCmp(v13, v16, a4);
      v151 = v13;
      v18 = v13 - v16;
      if (v17)
        v18 = v17;
      if ((v15 & 0x80000000) != 0)
      {
        if (v18 < 0)
          goto LABEL_33;
        v27 = PronCmp(v12, v16, a4);
        v28 = v12 - v16;
        if (v27)
          v28 = v27;
        v29 = v28 < 0;
        if (v28 >= 0)
          v30 = v12;
        else
          v30 = v16;
        v151 = v30;
        v23 = (unsigned int *)((char *)v6 + 2 * v11);
        if (!v29)
          v23 = v6;
      }
      else
      {
        if (v18 > 0)
          goto LABEL_33;
        v19 = PronCmp(v12, v16, a4);
        v20 = v12 - v16;
        if (v19)
          v20 = v19;
        v21 = v20 < 0;
        if (v20 >= 0)
          v22 = v16;
        else
          v22 = v12;
        v151 = v22;
        v23 = (unsigned int *)((char *)v6 + 2 * v11);
        if (v21)
          v23 = v6;
      }
      v152 = v23;
LABEL_33:
      v31 = (unsigned int *)((char *)v10 + v11);
      v32 = *(unsigned int *)((char *)v10 - v11);
      v25 = *v10;
      v33 = PronCmp(v32, *v10, a4);
      v148 = v32;
      if (v33)
        v34 = v33;
      else
        v34 = v32 - v25;
      v35 = *v31;
      v36 = PronCmp(v25, *v31, a4);
      v37 = v25 - v35;
      if (v36)
        v37 = v36;
      if ((v34 & 0x80000000) != 0)
      {
        v38 = v155;
        if ((v37 & 0x80000000) == 0)
        {
          v41 = PronCmp(v148, v35, a4);
          v42 = v148 - v35;
          if (v41)
            v42 = v41;
          if (v42 >= 0)
            v25 = v148;
          else
            v25 = v35;
          if (v42 >= 0)
            v10 = (unsigned int *)((char *)v10 - v11);
          else
            v10 = (unsigned int *)((char *)v10 + v11);
        }
      }
      else
      {
        v38 = v155;
        if (v37 <= 0)
        {
          v39 = PronCmp(v148, v35, a4);
          v40 = v148 - v35;
          if (v39)
            v40 = v39;
          if (v40 >= 0)
            v25 = v35;
          else
            v25 = v148;
          if (v40 >= 0)
            v10 = (unsigned int *)((char *)v10 + v11);
          else
            v10 = (unsigned int *)((char *)v10 - v11);
        }
      }
      v43 = (unsigned int *)((char *)v38 - v11);
      v150 = (unsigned int *)((char *)v38 - 2 * v11);
      v44 = *v150;
      v26 = *v43;
      v45 = PronCmp(*v150, *v43, a4);
      v149 = v44;
      if (v45)
        v46 = v45;
      else
        v46 = v44 - v26;
      v47 = *v38;
      v48 = PronCmp(v26, v47, a4);
      v49 = v26 - v47;
      if (v48)
        v49 = v48;
      if ((v46 & 0x80000000) != 0)
      {
        if ((v49 & 0x80000000) == 0)
        {
          v54 = PronCmp(v149, v47, a4);
          v55 = v149 - v47;
          if (v54)
            v55 = v54;
          v56 = v55 < 0;
          if (v55 >= 0)
            v26 = v149;
          else
            v26 = v47;
          v53 = v155;
          if (!v56)
            v53 = v150;
          goto LABEL_80;
        }
      }
      else if (v49 <= 0)
      {
        v50 = PronCmp(v149, v47, a4);
        v51 = v149 - v47;
        if (v50)
          v51 = v50;
        v52 = v51 < 0;
        if (v51 >= 0)
          v26 = v47;
        else
          v26 = v149;
        v53 = v155;
        if (v52)
          v53 = v150;
LABEL_80:
        v155 = v53;
LABEL_82:
        v5 = v154;
        v24 = v151;
        goto LABEL_83;
      }
      v155 = v43;
      goto LABEL_82;
    }
    v24 = *v6;
    v25 = *v10;
    v152 = v6;
    v26 = *(unsigned int *)((char *)v6 + (v5 - 1) * a3);
LABEL_83:
    v57 = PronCmp(v24, v25, a4);
    v58 = v24;
    if (v57)
      v59 = v57;
    else
      v59 = v24 - v25;
    result = PronCmp(v25, v26, a4);
    v60 = v25 - v26;
    if ((_DWORD)result)
      v60 = result;
    if ((v59 & 0x80000000) != 0)
    {
      if ((v60 & 0x80000000) == 0)
      {
        result = PronCmp(v58, v26, a4);
        v62 = v58 - v26;
        if ((_DWORD)result)
          v62 = result;
        if (v62 >= 0)
          v10 = v152;
        else
          v10 = v155;
      }
    }
    else if (v60 <= 0)
    {
      result = PronCmp(v58, v26, a4);
      v61 = v58 - v26;
      if ((_DWORD)result)
        v61 = result;
      if (v61 >= 0)
        v10 = v155;
      else
        v10 = v152;
    }
LABEL_101:
    if (v159)
    {
      if (v158)
      {
        v63 = v6;
        v64 = a3 >> 3;
        do
        {
          v65 = *(_QWORD *)v63;
          *(_QWORD *)v63 = *(_QWORD *)v10;
          v63 += 2;
          *(_QWORD *)v10 = v65;
          v10 += 2;
          --v64;
        }
        while (v64);
      }
      else
      {
        v67 = a3;
        v68 = v6;
        do
        {
          v69 = *(_BYTE *)v68;
          *(_BYTE *)v68 = *(_BYTE *)v10;
          v68 = (unsigned int *)((char *)v68 + 1);
          *(_BYTE *)v10 = v69;
          v10 = (unsigned int *)((char *)v10 + 1);
          --v67;
        }
        while (v67);
      }
    }
    else
    {
      v66 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v66;
    }
    v70 = 0;
    v71 = (_QWORD *)((char *)v6 + a3);
    v72 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    v73 = v72;
    v74 = (unsigned int *)((char *)v6 + a3);
LABEL_110:
    while (v74 <= v73)
    {
      v75 = *v74;
      v76 = *v6;
      result = PronCmp(*v74, *v6, a4);
      v77 = v75 - v76;
      if ((_DWORD)result)
        v77 = result;
      if (v77 > 0)
        break;
      if (!v77)
      {
        if (v159)
        {
          if (v158)
          {
            v78 = 0;
            do
            {
              v79 = v71[v78];
              v71[v78] = *(_QWORD *)&v74[2 * v78];
              *(_QWORD *)&v74[2 * v78++] = v79;
            }
            while (v9 != v78);
          }
          else
          {
            v93 = 0;
            do
            {
              v94 = *((_BYTE *)v71 + v93);
              *((_BYTE *)v71 + v93) = *((_BYTE *)v74 + v93);
              *((_BYTE *)v74 + v93++) = v94;
            }
            while (a3 != v93);
          }
        }
        else
        {
          v92 = *v71;
          *v71 = *(_QWORD *)v74;
          *(_QWORD *)v74 = v92;
        }
        v71 = (_QWORD *)((char *)v71 + a3);
        v70 = 1;
      }
      v74 = (unsigned int *)((char *)v74 + a3);
    }
    while (v74 <= v73)
    {
      v86 = *v73;
      v87 = *v6;
      result = PronCmp(*v73, *v6, a4);
      v88 = v86 - v87;
      if ((_DWORD)result)
        v88 = result;
      if ((v88 & 0x80000000) != 0)
      {
        if (v159)
        {
          v89 = v160;
          if (v158)
          {
            v90 = 0;
            do
            {
              v91 = *(_QWORD *)&v74[2 * v90];
              *(_QWORD *)&v74[2 * v90] = *(_QWORD *)&v73[2 * v90];
              *(_QWORD *)&v73[2 * v90++] = v91;
            }
            while (v9 != v90);
          }
          else
          {
            v96 = 0;
            do
            {
              v97 = *((_BYTE *)v74 + v96);
              *((_BYTE *)v74 + v96) = *((_BYTE *)v73 + v96);
              *((_BYTE *)v73 + v96++) = v97;
            }
            while (a3 != v96);
          }
        }
        else
        {
          v95 = *(_QWORD *)v74;
          *(_QWORD *)v74 = *(_QWORD *)v73;
          *(_QWORD *)v73 = v95;
          v89 = v160;
        }
        v74 = (unsigned int *)((char *)v74 + a3);
        v73 = (unsigned int *)((char *)v73 + v89);
        v70 = 1;
        goto LABEL_110;
      }
      if (v88)
      {
        v80 = v160;
      }
      else
      {
        v80 = v160;
        if (v159)
        {
          if (v158)
          {
            v81 = 0;
            do
            {
              v82 = *(_QWORD *)&v73[2 * v81];
              *(_QWORD *)&v73[2 * v81] = *(_QWORD *)&v72[2 * v81];
              *(_QWORD *)&v72[2 * v81++] = v82;
            }
            while (v9 != v81);
          }
          else
          {
            v84 = 0;
            do
            {
              v85 = *((_BYTE *)v73 + v84);
              *((_BYTE *)v73 + v84) = *((_BYTE *)v72 + v84);
              *((_BYTE *)v72 + v84++) = v85;
            }
            while (a3 != v84);
          }
        }
        else
        {
          v83 = *(_QWORD *)v73;
          *(_QWORD *)v73 = *(_QWORD *)v72;
          *(_QWORD *)v72 = v83;
        }
        v72 = (unsigned int *)((char *)v72 + v160);
        v70 = 1;
      }
      v73 = (unsigned int *)((char *)v73 + v80);
    }
    v98 = (char *)v6 + v154 * a3;
    if (!v70)
      break;
    v99 = (char *)v74 - (char *)v71;
    if ((char *)v71 - (char *)v6 >= (char *)v74 - (char *)v71)
      v100 = (char *)v74 - (char *)v71;
    else
      v100 = (char *)v71 - (char *)v6;
    if (v100)
    {
      if (v158)
      {
        v101 = (_QWORD *)((char *)v74 - v100);
        v102 = v100 >> 3;
        v103 = v6;
        do
        {
          v104 = *(_QWORD *)v103;
          *(_QWORD *)v103 = *v101;
          v103 += 2;
          *v101++ = v104;
          --v102;
        }
        while (v102);
      }
      else
      {
        v105 = -(uint64_t)v100;
        v106 = v6;
        do
        {
          v107 = *(_BYTE *)v106;
          *(_BYTE *)v106 = *((_BYTE *)v74 + v105);
          v106 = (unsigned int *)((char *)v106 + 1);
          *((_BYTE *)v74 + v105) = v107;
          v108 = __CFADD__(v105++, 1);
        }
        while (!v108);
      }
    }
    v109 = (char *)v72 - (char *)v73;
    if ((char *)v72 - (char *)v73 >= v98 - ((char *)v72 + a3))
      v110 = v98 - ((char *)v72 + a3);
    else
      v110 = (char *)v72 - (char *)v73;
    if (v110)
    {
      if (v158)
      {
        v111 = &v98[-v110];
        v112 = v110 >> 3;
        do
        {
          v113 = *(_QWORD *)v74;
          *(_QWORD *)v74 = *(_QWORD *)v111;
          v74 += 2;
          *(_QWORD *)v111 = v113;
          v111 += 8;
          --v112;
        }
        while (v112);
      }
      else
      {
        v114 = -(uint64_t)v110;
        do
        {
          v115 = *(_BYTE *)v74;
          *(_BYTE *)v74 = v98[v114];
          v74 = (unsigned int *)((char *)v74 + 1);
          v98[v114] = v115;
          v108 = __CFADD__(v114++, 1);
        }
        while (!v108);
      }
    }
    if (v99 > (uint64_t)a3)
      result = mrec_qsort_r<WordIdPronCollArray>(v6, v99 / a3, a3, a4);
    v7 = v160;
    if (v109 <= (uint64_t)a3)
      return result;
    v6 = (unsigned int *)&v98[-v109];
    v5 = v109 / a3;
    v116 = v153;
    if (((((_DWORD)v98 - (_DWORD)v109) | a3) & 7) != 0)
      v116 = 2;
    v158 = ((((_DWORD)v98 - (_DWORD)v109) | a3) & 7) == 0;
    v159 = v116;
    if (v5 < 7)
      goto LABEL_179;
  }
  v132 = v160;
  v133 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v154 * a3) > (uint64_t)a3)
  {
    v134 = v6;
    do
    {
      v157 = v133;
      if (v133 > v6)
      {
        v135 = v134;
        v136 = v133;
        do
        {
          v137 = v136;
          v136 = (unsigned int *)((char *)v136 + v132);
          v138 = *v136;
          v139 = *v137;
          result = PronCmp(*v136, *v137, a4);
          v132 = v160;
          v140 = v138 - v139;
          if ((_DWORD)result)
            v140 = result;
          if (v140 < 1)
            break;
          if (v159)
          {
            if (v158)
            {
              v141 = 0;
              v142 = (uint64_t)v135 + a3;
              do
              {
                v143 = *(_QWORD *)(v142 + 8 * v141);
                *(_QWORD *)(v142 + 8 * v141) = *(_QWORD *)&v135[2 * v141];
                *(_QWORD *)&v135[2 * v141++] = v143;
              }
              while (v9 != v141);
            }
            else
            {
              v145 = 0;
              v146 = (uint64_t)v135 + a3;
              do
              {
                v147 = *(_BYTE *)(v146 + v145);
                *(_BYTE *)(v146 + v145) = *((_BYTE *)v135 + v145);
                *((_BYTE *)v135 + v145++) = v147;
              }
              while (a3 != v145);
            }
          }
          else
          {
            v144 = *(_QWORD *)v137;
            *(_QWORD *)v137 = *(_QWORD *)v136;
            *(_QWORD *)v136 = v144;
          }
          v135 = (unsigned int *)((char *)v135 + v160);
        }
        while (v136 > v6);
      }
      v133 = (unsigned int *)((char *)v157 + a3);
      v134 = (unsigned int *)((char *)v134 + a3);
    }
    while ((char *)v157 + a3 < v98);
  }
  return result;
}

uint64_t *WordIdPronCollArray::remove(uint64_t *this, int a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *((unsigned int *)this + 2);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *this;
    while (*(_DWORD *)(v4 + 4 * v3) != a2)
    {
      if (v2 == ++v3)
        goto LABEL_5;
    }
    LODWORD(v2) = v2 - 1;
    if (v2 > v3)
    {
      do
      {
        *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v4 + 4 * v3 + 4);
        v2 = (*((_DWORD *)this + 2) - 1);
        ++v3;
      }
      while (v3 < v2);
    }
  }
  else
  {
LABEL_5:
    LODWORD(v2) = v2 - 1;
  }
  *((_DWORD *)this + 2) = v2;
  return this;
}

uint64_t WordIdPronCollArray::add(WordIdPronCollArray *this, unsigned int a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  int *v9;
  int v10;

  result = WordIdPronCollArray::getInsertIndex(this, a2, 0);
  v5 = result;
  v6 = *((_DWORD *)this + 2);
  if (v6 == *((_DWORD *)this + 3))
  {
    result = DgnPrimArray<unsigned int>::reallocElts((uint64_t)this, 1, 1);
    v6 = *((_DWORD *)this + 2);
  }
  v7 = *(_QWORD *)this;
  if (v6 > v5)
  {
    v8 = (_DWORD *)(v7 + 4 * v6);
    v9 = (int *)(v7 + 4 * (v6 - 1));
    do
    {
      v10 = *v9--;
      *v8-- = v10;
      --v6;
    }
    while (v5 < v6);
  }
  *(_DWORD *)(v7 + 4 * v5) = a2;
  ++*((_DWORD *)this + 2);
  return result;
}

uint64_t WordIdPronCollArray::mergeLargeSortedArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  const WordList *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v28;
  uint64_t v29;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *((_DWORD *)a2 + 2);
  v28 = 0;
  v29 = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)&v28, (uint64_t *)a1, 0, v4);
  v6 = *((_DWORD *)a2 + 2);
  if ((v29 + v6) > HIDWORD(v29))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v28, (v29 + v6 - HIDWORD(v29)), 1);
    v6 = *((_DWORD *)a2 + 2);
  }
  v7 = v5 + v4;
  if (v6)
  {
    v8 = 0;
    v9 = *a2;
    v10 = v28;
    do
    {
      v10[(v8 + v29)] = *(_DWORD *)(v9 + 4 * v8);
      ++v8;
      v11 = *((unsigned int *)a2 + 2);
    }
    while (v8 < v11);
  }
  else
  {
    LODWORD(v11) = 0;
  }
  LODWORD(v29) = v29 + v11;
  v12 = *(_DWORD *)(a1 + 12);
  if (v7 > v12)
    DgnPrimArray<unsigned int>::reallocElts(a1, v7 - v12, 0);
  *(_DWORD *)(a1 + 8) = v7;
  v13 = v28;
  v14 = (unint64_t)&v28[v4];
  v15 = (unint64_t)&v28[v7];
  v16 = *(unsigned int **)a1;
  if ((_DWORD)v4 && v4 < v7)
  {
    v17 = *(const WordList **)(a1 + 16);
    v18 = &v28[v4];
    do
    {
      v19 = *v13;
      v20 = *v18;
      v21 = PronCmp(*v13, *v18, v17);
      v22 = v19 - v20;
      if (v21)
        v22 = v21;
      v13 += v22 < 1;
      v18 += v22 > 0;
      if (v22 >= 1)
        v23 = v20;
      else
        v23 = v19;
      *v16++ = v23;
    }
    while ((unint64_t)v13 < v14 && (unint64_t)v18 < v15);
  }
  else
  {
    v18 = &v28[v4];
  }
  while ((unint64_t)v13 < v14)
  {
    v25 = *v13++;
    *v16++ = v25;
  }
  while ((unint64_t)v18 < v15)
  {
    v26 = *v18++;
    *v16++ = v26;
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
}

void sub_209A376CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t WordIdPronCollArray::mergeSmallSortedArray(unsigned int *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t InsertIndex;
  unsigned int *v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v21;
  uint64_t v22;
  void *v23;

  v4 = a1[2];
  v5 = *((unsigned int *)a2 + 2);
  v21 = 0;
  v22 = 0;
  if ((_DWORD)v5 + (_DWORD)v4)
  {
    v23 = 0;
    HIDWORD(v22) = realloc_array(0, &v23, 4 * (v5 + v4), 0, 0, 1) >> 2;
    v6 = (unsigned int *)v23;
    v21 = (unsigned int *)v23;
  }
  else
  {
    v6 = 0;
  }
  LODWORD(v22) = v5 + v4;
  v7 = *(_QWORD **)a1;
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = *a2;
    v11 = v6;
    do
    {
      v12 = *(_DWORD *)(v10 + 4 * v8);
      InsertIndex = WordIdPronCollArray::getInsertIndex((WordIdPronCollArray *)a1, v12, v9);
      if (v9 < InsertIndex)
      {
        v14 = (unsigned int *)v7 + v9;
        v15 = InsertIndex - (unint64_t)v9;
        do
        {
          v16 = *v14++;
          *v11++ = v16;
          --v15;
        }
        while (v15);
        v12 = *(_DWORD *)(v10 + 4 * v8);
      }
      *v11++ = v12;
      ++v8;
      v9 = InsertIndex;
    }
    while (v8 != v5);
  }
  else
  {
    LODWORD(InsertIndex) = 0;
    v11 = v6;
  }
  if (InsertIndex < v4)
  {
    v17 = (unsigned int *)v7 + InsertIndex;
    v18 = v4 - InsertIndex;
    do
    {
      v19 = *v17++;
      *v11++ = v19;
      --v18;
    }
    while (v18);
    goto LABEL_18;
  }
  if (v7)
  {
LABEL_18:
    MemChunkFree(v7, 0);
    *(_QWORD *)a1 = 0;
    v6 = v21;
  }
  *(_QWORD *)a1 = v6;
  *((_QWORD *)a1 + 1) = v22;
  v21 = 0;
  v22 = 0;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
}

void sub_209A37840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordIdPronCollArray::removeSortedArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;
  unsigned int v6;
  const WordList *v7;
  signed int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  int v24;
  _QWORD v25[2];

  v4 = *(unsigned int *)(a1 + 8);
  v24 = *(_DWORD *)(a2 + 8);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = **(_DWORD **)a2;
    v7 = *(const WordList **)(a1 + 16);
    v8 = v4 - 1;
    v9 = *(_QWORD *)a1;
    do
    {
      v10 = v5 + v8;
      if (v5 + v8 < 0 != __OFADD__(v5, v8))
        ++v10;
      v11 = v10 >> 1;
      v12 = *(_DWORD *)(v9 + 4 * (v10 >> 1));
      v13 = PronCmp(v12, v6, v7);
      v14 = v12 - v6;
      if (v13)
        v14 = v13;
      if (v14)
      {
        if ((v14 & 0x80000000) != 0)
          v5 = v11 + 1;
        else
          v8 = v11 - 1;
      }
      else
      {
        v15 = v8 == v5;
        v8 = v11;
        if (v15)
          goto LABEL_16;
      }
    }
    while (v5 <= v8);
  }
  v11 = -1;
LABEL_16:
  v16 = v4 - v24;
  v25[0] = 0;
  v25[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v25, (uint64_t *)a1, 0, v4);
  if (v11 < v4)
  {
    v17 = 0;
    v18 = v25[0] + 4 * v4;
    v19 = (_DWORD *)(v25[0] + 4 * v11);
    v20 = (_DWORD *)(*(_QWORD *)a1 + 4 * v11);
    v21 = *(unsigned int **)a2;
    do
    {
      if (*v19 == v21[v17])
      {
        if ((v17 + 1) < *(_DWORD *)(a2 + 8))
          ++v17;
      }
      else
      {
        *v20++ = *v19;
      }
      ++v19;
    }
    while ((unint64_t)v19 < v18);
  }
  v22 = *(_DWORD *)(a1 + 12);
  if (v16 > v22)
    DgnPrimArray<unsigned int>::reallocElts(a1, v16 - v22, 0);
  *(_DWORD *)(a1 + 8) = v16;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
}

void sub_209A379C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordIdPronCollArray::addArray(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    v4 = result;
    v5 = *(_DWORD *)(result + 12);
    v6 = *(_DWORD *)(result + 8) + v2;
    if (v6 > v5)
    {
      DgnPrimArray<unsigned int>::reallocElts(result, v6 - v5, 0);
      v2 = *(_DWORD *)(a2 + 8);
    }
    v9 = 0;
    v10 = 0;
    DgnPrimArray<int>::copyArraySlice((unint64_t)&v9, (uint64_t *)a2, 0, v2);
    mrec_qsort_r<WordIdPronCollArray>(v9, v10, 4uLL, *(const WordList **)(v4 + 16));
    v7 = *(_DWORD *)(v4 + 8);
    if (v7 && (v8 = *(_DWORD *)(a2 + 8), onePlusHighestSet32(v7) * v8 <= *(_DWORD *)(v4 + 8)))
      WordIdPronCollArray::mergeSmallSortedArray((unsigned int *)v4, &v9);
    else
      WordIdPronCollArray::mergeLargeSortedArray(v4, &v9);
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v9);
  }
  return result;
}

void sub_209A37A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t WordIdPronCollArray::removeArray(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    v3 = result;
    v4 = 0;
    v5 = 0;
    DgnPrimArray<int>::copyArraySlice((unint64_t)&v4, (uint64_t *)a2, 0, v2);
    mrec_qsort_r<WordIdPronCollArray>(v4, v5, 4uLL, *(const WordList **)(v3 + 16));
    WordIdPronCollArray::removeSortedArray(v3, (uint64_t)&v4);
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v4);
  }
  return result;
}

void sub_209A37B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t WordIdPronCollArray::getWordsWithCommonPron(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;
  const WordList *v7;
  int v8;
  unsigned int v9;
  signed int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_DWORD *)(a3 + 8) = 0;
  v34 = 0;
  v35 = 0;
  WordList::lookupAll((uint64_t *)a1[2], a2, (uint64_t)&v34);
  v33 = v35;
  if ((_DWORD)v35)
  {
    v5 = 0;
    do
    {
      v6 = *(_DWORD *)(v34 + 4 * v5);
      v7 = (const WordList *)a1[2];
      v8 = *((_DWORD *)a1 + 2);
      v9 = v8 - 1;
      if (v8 < 1)
      {
        v14 = -1;
      }
      else
      {
        v32 = v5;
        v10 = 0;
        v11 = *a1;
        v12 = v8 - 1;
        while (1)
        {
          v13 = v10 + v12;
          if (v10 + v12 < 0 != __OFADD__(v10, v12))
            ++v13;
          v14 = v13 >> 1;
          v15 = *(_DWORD *)(v11 + 4 * (v13 >> 1));
          v16 = PronCmp(v15, v6, v7);
          v17 = v15 - v6;
          if (v16)
            v17 = v16;
          if (!v17)
            break;
          if (v17 >= 0)
            v12 = v14 - 1;
          else
            v10 = v14 + 1;
          if (v10 > v12)
          {
            v14 = -1;
            break;
          }
        }
        v5 = v32;
      }
      v18 = v14;
      v19 = v14 + 1;
      v20 = 4 * v14 - 4;
      while (v20 != -4)
      {
        v21 = PronCmp(v6, *(_DWORD *)(*a1 + v20), v7);
        --v19;
        v20 -= 4;
        if (v21)
          goto LABEL_22;
      }
      v19 = 0;
LABEL_22:
      if (v18 <= v9)
        v22 = v9;
      else
        v22 = v18;
      v23 = v18 - 1;
      while (v22 != v18)
      {
        v24 = PronCmp(v6, *(_DWORD *)(*a1 + 4 * v18 + 4), v7);
        ++v23;
        ++v18;
        if (v24)
          goto LABEL_30;
      }
      v23 = v22;
LABEL_30:
      if (v19 <= v23)
      {
        v25 = *(_DWORD *)(a3 + 8);
        do
        {
          v26 = *(_DWORD *)(*(_QWORD *)(a1[2] + 256) + 4 * *(unsigned int *)(*a1 + 4 * v19));
          if (!v25)
            goto LABEL_38;
          v27 = *(int **)a3;
          v28 = v25;
          v29 = 0xFFFFFFFFLL;
          while (1)
          {
            v30 = *v27++;
            if (v30 == v26)
              break;
            --v29;
            if (!--v28)
              goto LABEL_38;
          }
          if (!v29)
          {
LABEL_38:
            if (v25 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              v25 = *(_DWORD *)(a3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v25) = v26;
            v25 = *(_DWORD *)(a3 + 8) + 1;
            *(_DWORD *)(a3 + 8) = v25;
          }
          ++v19;
        }
        while (v19 <= v23);
        v33 = v35;
      }
      ++v5;
    }
    while (v5 < v33);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v34);
}

void sub_209A37D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t StartupSausageParamSpecMgr(void)
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;

  v0 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v0, (uint64_t)"SausageGenerationPruneGlobalThresh", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSausageGenerationPruneGlobalThreshDoubleHistory);
  v1 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v1, (uint64_t)"SausageGenerationMinEpsilonPostProb", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSausageGenerationMinEpsilonPostProbDoubleHistory);
  v2 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v2, (uint64_t)"SausageGenerationAbortOnNumLatticeLinks", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSausageGenerationAbortOnNumLatticeLinksIntHistory);
  v3 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v3, (uint64_t)"SausageGenerationNewAlgorithm", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sSausageGenerationNewAlgorithmBoolHistory);
  ParamSpecMgr::addParam(qword_253DF2868, (ParamSpec *)v2);
  ParamSpecMgr::addParam(qword_253DF2868, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_253DF2868, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_253DF2868, (ParamSpec *)v3);
  return ParamSpecMgr::sortParams((ParamSpecMgr *)qword_253DF2868);
}

_DWORD *SausageParamSet::SausageParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(_QWORD *)a1 = &off_24C2152E0;
  SausageParamSet::setDefaults((SausageParamSet *)a1, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

void sub_209A37EE4(_Unwind_Exception *a1)
{
  DgnString *v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t SausageParamSet::SausageParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)a1 = &off_24C2152E0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t SausageParamSet::setDefaults(SausageParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  *((_DWORD *)this + 10) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2868, 1, 0, 0, a5, a6, a7, a8);
  *((double *)this + 6) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2868, 2, 0, 0, v9, v10, v11, v12);
  *((double *)this + 7) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2868, 3, 0, 0, v13, v14, v15, v16);
  result = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2868, 4, 0, 0, v17, v18, v19, v20);
  *((_BYTE *)this + 64) = result;
  return result;
}

uint64_t SausageParamSet::sizeObject(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sizeObject(a1 + 8);
  v4 = 20;
  if (a2 == 3)
    v4 = 0;
  v5 = v4 | (a2 != 3);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 0;
  return v3 + 16 * (a2 != 3) + v5;
}

BOOL SausageParamSet::getBoolParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  int v10;
  const void *ParamByParamId;

  switch(a2)
  {
    case 1:
      v8 = "int";
      v9 = 1;
      goto LABEL_5;
    case 2:
      v8 = "double";
      v9 = 2;
      goto LABEL_5;
    case 3:
      v8 = "double";
      v9 = 3;
LABEL_5:
      throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
      return 0;
    case 4:
      if ((_DWORD)a3 == 1)
      {
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2868, 4, a3, a4, a5, a6, a7, a8);
        return v10 != 0;
      }
      if (!(_DWORD)a3)
      {
        v10 = *(unsigned __int8 *)(a1 + 64);
        return v10 != 0;
      }
      throwWrongQueryMode(a3, (uint64_t)"BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t SausageParamSet::getIntParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  const char *v9;
  char v10;
  const void *ParamByParamId;
  const void *v12;
  const void *v13;

  switch(a2)
  {
    case 1:
      switch((int)a3)
      {
        case 0:
          result = *(unsigned int *)(a1 + 40);
          break;
        case 1:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2868, 1, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v12 = (const void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2868, 1, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v13 = (const void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2868, 1, a3, a4, a5, a6, a7, a8);
          break;
        default:
          throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    case 2:
      v9 = "double";
      v10 = 2;
      goto LABEL_7;
    case 3:
      v9 = "double";
      v10 = 3;
      goto LABEL_7;
    case 4:
      v9 = "BOOL";
      v10 = 4;
LABEL_7:
      throwWrongTypeForParamId(v10, v9, "int", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

double SausageParamSet::getDoubleParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  double result;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  const void *ParamByParamId;
  const void *v18;
  const void *v19;

  switch(a2)
  {
    case 1:
      v8 = "int";
      v9 = 1;
      goto LABEL_9;
    case 2:
      switch((int)a3)
      {
        case 0:
          result = *(double *)(a1 + 48);
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2868;
          v12 = 2;
          goto LABEL_17;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2868;
          v14 = 2;
          goto LABEL_19;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2868;
          v16 = 2;
          goto LABEL_21;
        default:
          goto LABEL_12;
      }
      return result;
    case 3:
      switch((int)a3)
      {
        case 0:
          result = *(double *)(a1 + 56);
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2868;
          v12 = 3;
LABEL_17:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2868;
          v14 = 3;
LABEL_19:
          v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2868;
          v16 = 3;
LABEL_21:
          v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_12:
          throwWrongQueryMode(a3, (uint64_t)"double", a3, a4, a5, a6, a7, a8);
          return 0.0;
      }
      return result;
    case 4:
      v8 = "BOOL";
      v9 = 4;
LABEL_9:
      throwWrongTypeForParamId(v9, v8, "double", a4, a5, a6, a7, a8);
      return 0.0;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      return 0.0;
  }
}

uint64_t SausageParamSet::getStringParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 1:
      v8 = "int";
      v9 = 1;
      goto LABEL_7;
    case 2:
      v8 = "double";
      v9 = 2;
      goto LABEL_7;
    case 3:
      v8 = "double";
      v9 = 3;
      goto LABEL_7;
    case 4:
      v8 = "BOOL";
      v9 = 4;
LABEL_7:
      throwWrongTypeForParamId(v9, v8, "string", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

uint64_t SausageParamSet::getEnumParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 1:
      v8 = "int";
      v9 = 1;
      goto LABEL_7;
    case 2:
      v8 = "double";
      v9 = 2;
      goto LABEL_7;
    case 3:
      v8 = "double";
      v9 = 3;
      goto LABEL_7;
    case 4:
      v8 = "BOOL";
      v9 = 4;
LABEL_7:
      throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

void SausageParamSet::setBoolParameter(SausageParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      if (*((_DWORD *)this + 9))
        throwParamSetSetFailed("SausageGenerationNewAlgorithm", "BOOL", a3, a4, a5, a6, a7, a8);
      else
        *((_BYTE *)this + 64) = v9;
      break;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      break;
  }
}

void SausageParamSet::setIntParameter(SausageParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = a2;
  switch(a2)
  {
    case 1:
      v9 = a3;
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2868, 1, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId)
      IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v9, 0, 0, v12, v13, v14, v15);
      if (*((_DWORD *)this + 9))
        throwParamSetSetFailed("SausageGenerationAbortOnNumLatticeLinks", "int", v16, v17, v18, v19, v20, v21);
      else
        *((_DWORD *)this + 10) = v9;
      return;
    case 2:
      throwWrongTypeForParamId(2, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 3:
LABEL_7:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 4:
LABEL_8:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "int", a3, a4, a5, a6, a7, a8);
}

void SausageParamSet::setDoubleParameter(SausageParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;
  void *ParamByParamId;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v9 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_3;
    case 2:
LABEL_3:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2868, 2, a4, a5, a6, a7, a8, a9);
      if (ParamByParamId)
      DoubleParamSpec::validateValue((DoubleParamSpec *)ParamByParamId, a3, 0, 0, v13, v14, v15, v16, v17);
      if (*((_DWORD *)this + 9))
      {
        v24 = "SausageGenerationMinEpsilonPostProb";
        goto LABEL_11;
      }
      *((double *)this + 6) = a3;
      break;
    case 3:
      v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2868, 3, a4, a5, a6, a7, a8, a9);
      if (v25)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v25, a3, 0, 0, v26, v27, v28, v29, v30);
      if (*((_DWORD *)this + 9))
      {
        v24 = "SausageGenerationPruneGlobalThresh";
LABEL_11:
        throwParamSetSetFailed(v24, "double", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((double *)this + 7) = a3;
      }
      break;
    case 4:
      throwWrongTypeForParamId(4, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_13;
    default:
LABEL_13:
      throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
      return;
  }
}

void SausageParamSet::setStringParameter(SausageParamSet *this, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void SausageParamSet::setEnumParameter(SausageParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
}

void SausageParamSet::~SausageParamSet(SausageParamSet *this)
{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((SausageParamSet *)((char *)this + 8));
}

{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((SausageParamSet *)((char *)this + 8));
  JUMPOUT(0x20BD149A8);
}

uint64_t Sequence::scoreNoSkip(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8, int a9, _DWORD *a10, _DWORD *a11)
{
  return Node::scoreNodeSuccessors((const Node *)(a1 + 16), a2, a3, a4, a5, a6, *(unsigned __int16 *)(a1 + 10), a7, a8, a9, a10, a11);
}

uint64_t Sequence::scoreOneSkip(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8, int a9, _DWORD *a10, _DWORD *a11)
{
  return Node::scoreNodeSuccessorsSkipOne((unsigned __int16 *)(a1 + 16), a2, a3, a4, a5, a6, *(unsigned __int16 *)(a1 + 10), a7, a8, a9, a10, a11);
}

uint64_t Sequence::scoreMultiSkip(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8, int a9, _DWORD *a10, _DWORD *a11)
{
  return Node::scoreNodeSuccessorsSkipMany((unsigned __int16 *)(a1 + 16), a2, a3, a4, a5, a6, *(unsigned __int16 *)(a1 + 10), a7, a8, a9, a10, a11);
}

uint64_t Sequence::scoreNoSkipDeadSeq(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, PelScoreCache **a7, int a8, int a9, _DWORD *a10)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    v11 = a1 + 26;
    do
    {
      *(_DWORD *)(v11 - 2) = 1310740000;
      v11 += 24;
      --v10;
    }
    while (v10);
  }
  if (!a3)
    return 20000;
  ++*a10;
  return Node::scoreNodeInactiveCurrActiveSeed(a1 + 16, a2, a5, a6, a7, a8, a9, 0);
}

uint64_t Sequence::scoreOneSkipDeadSeq(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8, int a9, _DWORD *a10, _DWORD *a11)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;

  v12 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    v13 = a1 + 26;
    v14 = *(unsigned __int16 *)(a1 + 10);
    do
    {
      *(_DWORD *)(v13 - 2) = 1310740000;
      v13 += 24;
      --v14;
    }
    while (v14);
  }
  if (!a3)
    return 20000;
  v15 = (unsigned __int16 *)(a1 + 16);
  if (v12 >= 2)
    v16 = 2;
  else
    v16 = v12;
  return Node::scoreNodeSuccessorsSkipOne(v15, a2, 1, a4, a5, a6, v16, a7, a8, a9, a10, a11);
}

uint64_t Sequence::scoreMultiSkipDeadSeq(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8, int a9, _DWORD *a10, _DWORD *a11)
{
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;

  v13 = *(unsigned __int16 *)(a1 + 10);
  v14 = (unsigned __int16 *)(a1 + 16);
  if (v13)
  {
    v15 = a1 + 26;
    v16 = v13;
    do
    {
      *(_DWORD *)(v15 - 2) = 1310740000;
      v15 += 24;
      --v16;
    }
    while (v16);
  }
  return Node::scoreNodeSuccessorsSkipMany(v14, a2, a3, a4, a5, a6, v13, a7, a8, a9, a10, a11);
}

uint64_t Sequence::calcNumActiveNodes(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 *v4;
  int v5;

  v2 = *(unsigned __int16 *)(this + 10);
  if (!*(_WORD *)(this + 10))
    return 0;
  v3 = this;
  LODWORD(this) = 0;
  v4 = (__int16 *)(v3 + 26);
  do
  {
    v5 = *v4;
    v4 += 12;
    if (v5 > a2)
      this = this;
    else
      this = (this + 1);
    --v2;
  }
  while (v2);
  return this;
}

uint64_t Sequence::scoreNoSkipNBest(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8, int a9, _DWORD *a10, _DWORD *a11)
{
  return Node::scoreNodeSuccessorsNBest((unsigned __int16 *)(a1 + 16), a2, a3, a4, a5, a6, *(unsigned __int16 *)(a1 + 10), a7, a8, a9, a10, a11);
}

uint64_t Sequence::scoreOneSkipNBest(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8, int a9, _DWORD *a10, _DWORD *a11)
{
  return Node::scoreNodeSuccessorsSkipOneNBest((unsigned __int16 *)(a1 + 16), a2, a3, a4, a5, a6, *(unsigned __int16 *)(a1 + 10), a7, a8, a9, a10, a11);
}

uint64_t Sequence::scoreMultiSkipNBest(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8, int a9, _DWORD *a10, _DWORD *a11)
{
  return Node::scoreNodeSuccessorsSkipManyNBest((unsigned __int16 *)(a1 + 16), a2, a3, a4, a5, a6, *(unsigned __int16 *)(a1 + 10), a7, a8, a9, a10, a11);
}

uint64_t Sequence::scoreNoSkipDeadSeqNBest(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, int a8, int a9, _DWORD *a10)
{
  uint64_t v10;
  uint64_t v11;
  char v13;

  v10 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    v11 = a1 + 26;
    do
    {
      *(_DWORD *)(v11 - 2) = 1310740000;
      v11 += 24;
      --v10;
    }
    while (v10);
  }
  if (!a3)
    return 20000;
  v13 = 0;
  ++*a10;
  return Node::scoreNodeWithPatternNBest(a1 + 16, a2, *(_DWORD *)(a2 + 4), 32, a5, a6, a7, a8, a9, &v13, 0);
}

uint64_t Sequence::scoreOneSkipDeadSeqNBest(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8, int a9, _DWORD *a10, _DWORD *a11)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;

  v12 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    v13 = a1 + 26;
    v14 = *(unsigned __int16 *)(a1 + 10);
    do
    {
      *(_DWORD *)(v13 - 2) = 1310740000;
      v13 += 24;
      --v14;
    }
    while (v14);
  }
  if (!a3)
    return 20000;
  v15 = (unsigned __int16 *)(a1 + 16);
  if (v12 >= 2)
    v16 = 2;
  else
    v16 = v12;
  return Node::scoreNodeSuccessorsSkipOneNBest(v15, a2, 1, a4, a5, a6, v16, a7, a8, a9, a10, a11);
}

uint64_t Sequence::scoreMultiSkipDeadSeqNBest(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8, int a9, _DWORD *a10, _DWORD *a11)
{
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;

  v13 = *(unsigned __int16 *)(a1 + 10);
  v14 = (unsigned __int16 *)(a1 + 16);
  if (v13)
  {
    v15 = a1 + 26;
    v16 = v13;
    do
    {
      *(_DWORD *)(v15 - 2) = 1310740000;
      v15 += 24;
      --v16;
    }
    while (v16);
  }
  return Node::scoreNodeSuccessorsSkipManyNBest(v14, a2, a3, a4, a5, a6, v13, a7, a8, a9, a10, a11);
}

uint64_t Sequence::getBestScore(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10))
    return 20000;
  v3 = 0;
  v4 = a1 + 16;
  v5 = 20000;
  do
  {
    v6 = *(__int16 *)(v4 + 10);
    if ((int)v5 > (int)v6)
    {
      *a2 = v4;
      v2 = *(unsigned __int16 *)(a1 + 10);
      v5 = v6;
    }
    v4 += 24;
    ++v3;
  }
  while (v3 < v2);
  return v5;
}

uint64_t DgnFileStream::DgnFileStream(uint64_t a1, int a2, int a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  const FileSpec *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  const char *v14;
  FILE *v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  int v24;
  const char *v25;
  BOOL v26;
  const char *v27;
  const char *v28;
  const char *v29;
  FILE *v30;
  int *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  if (*(_DWORD *)(a4 + 8))
    v7 = *(const char **)a4;
  else
    v7 = (const char *)&unk_209A805F8;
  v8 = DgnStream::DgnStream(a1, a2, v7);
  *(_QWORD *)v8 = &off_24C214368;
  *(_QWORD *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 72) = 0;
  if (!FileSpec::isValid((char **)a4))
  {
    if (*(_DWORD *)(a1 + 24))
      v12 = *(void **)(a1 + 16);
    else
      v12 = &unk_209A805F8;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 72, (uint64_t)"dfutil/dfstream", 2, (uint64_t)"%.500s", v10, v11, (char)v12);
  }
  *(_DWORD *)(a1 + 48) = a3;
  v13 = *(_DWORD *)(a1 + 8);
  if (v13 == 1)
  {
    *(_DWORD *)(a1 + 52) = 1;
    *(_BYTE *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 96) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 52) = 0;
    *(_BYTE *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    if (!*(_DWORD *)(a1 + 72))
    {
      *(_QWORD *)(a1 + 64) = MemChunkAlloc(0x1000uLL, 0);
      *(_DWORD *)(a1 + 72) = 4096;
      v13 = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    if (v13 == 2 && !OsFile::fileExists((OsFile **)a4, v9))
    {
      if (*(_DWORD *)(a1 + 24))
        v14 = *(const char **)(a1 + 16);
      else
        v14 = (const char *)&unk_209A805F8;
      v15 = fopen(v14, "wb");
      if (!v15)
      {
        __error();
        v16 = __error();
        v17 = strerror(*v16);
        DgnString::DgnString((DgnString *)&v36, v17);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 107, (uint64_t)"dfutil/dfstream", 10, (uint64_t)"%.500s %.500s %d %.500s", v18, v19, (char)"fopen");
        DgnString::~DgnString((DgnString *)&v36);
      }
      if (fclose(v15))
      {
        if (*(_DWORD *)(a1 + 24))
          v22 = *(void **)(a1 + 16);
        else
          v22 = &unk_209A805F8;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 109, (uint64_t)"dfutil/dfstream", 1, (uint64_t)"%.500s", v20, v21, (char)v22);
      }
    }
  }
  v23 = "wb";
  v24 = *(_DWORD *)(a1 + 8);
  if (v24 != 1)
    v23 = "r+b";
  v25 = "r+";
  if (v24 == 1)
    v25 = "w";
  v26 = v24 == 0;
  v27 = "r";
  if (v26)
    v23 = "rb";
  else
    v27 = v25;
  if (*(_DWORD *)(a1 + 48))
    v28 = v27;
  else
    v28 = v23;
  *(_QWORD *)(a1 + 40) = 0;
  if (*(_DWORD *)(a1 + 24))
    v29 = *(const char **)(a1 + 16);
  else
    v29 = (const char *)&unk_209A805F8;
  v30 = fopen(v29, v28);
  *(_QWORD *)(a1 + 40) = v30;
  if (!v30)
  {
    __error();
    v31 = __error();
    v32 = strerror(*v31);
    DgnString::DgnString((DgnString *)&v36, v32);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 151, (uint64_t)"dfutil/dfstream", 10, (uint64_t)"%.500s %.500s %d %.500s", v33, v34, (char)"fopen");
    DgnString::~DgnString((DgnString *)&v36);
  }
  if (*(_DWORD *)(a1 + 8) == 2)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a1;
}

void sub_209A392CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  DgnStream *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v6);
  DgnStream::~DgnStream(v5);
  _Unwind_Resume(a1);
}

void DgnFileStream::~DgnFileStream(DgnFileStream *this)
{
  FILE *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_24C214368;
  v2 = (FILE *)*((_QWORD *)this + 5);
  if (v2 && fclose(v2))
  {
    if (*((_DWORD *)this + 6))
      v5 = (void *)*((_QWORD *)this + 2);
    else
      v5 = &unk_209A805F8;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 164, (uint64_t)"dfutil/dfstream", 1, (uint64_t)"%.500s", v3, v4, (char)v5);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 64);
  DgnStream::~DgnStream(this);
}

{
  DgnFileStream::~DgnFileStream(this);
  JUMPOUT(0x20BD149A8);
}

void DgnFileStream::printSize(DgnFileStream *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 176, (DgnString *)&v71);
  if (v72)
    v16 = (void *)v71;
  else
    v16 = &unk_209A805F8;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A805F8, a3, &unk_209A805F8, v16);
  DgnString::~DgnString((DgnString *)&v71);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A805F8);
  v70 = 0;
  v71 = 0;
  v69 = 0;
  DgnStream::printSize(this, 0xFFFFFFFFLL, (a3 + 1), &v71, &v70, &v69);
  *a4 += v71;
  *a5 += v70;
  *a6 += v69;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 180, (DgnString *)&v71);
  if (v72)
    v26 = (void *)v71;
  else
    v26 = &unk_209A805F8;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_209A805F8, (34 - a3), (34 - a3), v26, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += v21;
  *a5 += v21;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 182, (DgnString *)&v71);
  if (v72)
    v31 = (void *)v71;
  else
    v31 = &unk_209A805F8;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_209A805F8, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 184, (DgnString *)&v71);
  if (v72)
    v36 = (void *)v71;
  else
    v36 = &unk_209A805F8;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_209A805F8, (34 - a3), (34 - a3), v36, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 186, (DgnString *)&v71);
  if (v72)
    v41 = (void *)v71;
  else
    v41 = &unk_209A805F8;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_209A805F8, (34 - a3), (34 - a3), v41, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v71);
  ++*a4;
  ++*a5;
  v42 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v42 = 12;
  v43 = v42 + (*((_DWORD *)this + 18) & ~(*((int *)this + 18) >> 31));
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 188, (DgnString *)&v71);
  if (v72)
    v48 = (void *)v71;
  else
    v48 = &unk_209A805F8;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, (a3 + 1), &unk_209A805F8, (34 - a3), (34 - a3), v48, v43, v43, 0);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += v43;
  *a5 += v43;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 190, (DgnString *)&v71);
  if (v72)
    v53 = (void *)v71;
  else
    v53 = &unk_209A805F8;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, (a3 + 1), &unk_209A805F8, (34 - a3), (34 - a3), v53, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 192, (DgnString *)&v71);
  if (v72)
    v58 = (void *)v71;
  else
    v58 = &unk_209A805F8;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &unk_209A805F8, (34 - a3), (34 - a3), v58, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 194, (DgnString *)&v71);
  if (v72)
    v63 = (void *)v71;
  else
    v63 = &unk_209A805F8;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, (a3 + 1), &unk_209A805F8, (34 - a3), (34 - a3), v63, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 196, (DgnString *)&v71);
  if (v72)
    v68 = (void *)v71;
  else
    v68 = &unk_209A805F8;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, a3, &unk_209A805F8, (35 - a3), (35 - a3), v68, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v71);
}

void sub_209A398B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DgnFileStream::seekFromBeg(DgnFileStream *this, off_t a2)
{
  int *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*((_DWORD *)this + 2) != 1)
  {
    *((_DWORD *)this + 20) = 0;
    *((_QWORD *)this + 11) = 0;
  }
  if (fseeko(*((FILE **)this + 5), a2, 0))
  {
    __error();
    v3 = __error();
    v4 = strerror(*v3);
    DgnString::DgnString((DgnString *)&v7, v4);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 216, (uint64_t)"dfutil/dfstream", 10, (uint64_t)"%.500s %.500s %d %.500s", v5, v6, (char)"fseek");
    DgnString::~DgnString((DgnString *)&v7);
  }
  *((_BYTE *)this + 56) = 0;
}

void sub_209A399D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DgnFileStream::seekToEnd(DgnFileStream *this)
{
  int *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_DWORD *)this + 2) != 1)
  {
    *((_DWORD *)this + 20) = 0;
    *((_QWORD *)this + 11) = 0;
  }
  if (fseeko(*((FILE **)this + 5), 0, 2))
  {
    __error();
    v2 = __error();
    v3 = strerror(*v2);
    DgnString::DgnString((DgnString *)&v6, v3);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 232, (uint64_t)"dfutil/dfstream", 10, (uint64_t)"%.500s %.500s %d %.500s", v4, v5, (char)"fseek");
    DgnString::~DgnString((DgnString *)&v6);
  }
  *((_BYTE *)this + 56) = 0;
}

void sub_209A39AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

off_t DgnFileStream::tell(DgnFileStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 12) == 1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 241, (uint64_t)"dfutil/dfstream", 12, (uint64_t)"%s", a7, a8, (char)&unk_209A805F8);
  if (*((_DWORD *)this + 2) == 1 || !*((_QWORD *)this + 11))
    return DgnFileStream::basicTell(this, a2, a3, a4, a5, a6, a7, a8);
  else
    return *((_QWORD *)this + 12) + *((unsigned int *)this + 20);
}

off_t DgnFileStream::basicTell(DgnFileStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FILE *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  off_t v13;
  void *v14;

  v9 = (FILE *)*((_QWORD *)this + 5);
  if (!v9)
  {
    if (*((_DWORD *)this + 6))
      v10 = (void *)*((_QWORD *)this + 2);
    else
      v10 = &unk_209A805F8;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 429, (uint64_t)"dfutil/dfstream", 6, (uint64_t)"%.500s", a7, a8, (char)v10);
    v9 = (FILE *)*((_QWORD *)this + 5);
  }
  v13 = ftello(v9);
  if (v13 == -1)
  {
    if (*((_DWORD *)this + 6))
      v14 = (void *)*((_QWORD *)this + 2);
    else
      v14 = &unk_209A805F8;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 432, (uint64_t)"dfutil/dfstream", 7, (uint64_t)"%.500s", v11, v12, (char)v14);
  }
  return v13;
}

unint64_t DgnFileStream::tell32(DgnFileStream *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v3 = (*(uint64_t (**)(DgnFileStream *))(*(_QWORD *)this + 40))(this);
  if (HIDWORD(v3))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 254, (uint64_t)"dfutil/dfstream", 11, (uint64_t)"%s", v1, v2, (char)&errStr_dfutil_dfstream_E_STREAM_OVERFLOW);
  return v3;
}

uint64_t DgnFileStream::eof(DgnFileStream *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t DgnFileStream::peekForChar(DgnFileStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t result;
  char v11;

  if (*((_DWORD *)this + 2) == 1)
  {
    if (*((_DWORD *)this + 6))
      v9 = (void *)*((_QWORD *)this + 2);
    else
      v9 = &unk_209A805F8;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 272, (uint64_t)"dfutil/dfstream", 15, (uint64_t)"%.500s", a7, a8, (char)v9);
  }
  if (*((_QWORD *)this + 11))
    return *(unsigned __int8 *)(*((_QWORD *)this + 8) + *((unsigned int *)this + 20));
  v11 = *((_BYTE *)this + 56);
  DgnFileStream::fillInputBuffer(this, a2, a3, a4, a5, a6, a7, a8);
  if (*((_BYTE *)this + 56))
    result = 0xFFFFFFFFLL;
  else
    result = *(char *)(*((_QWORD *)this + 8) + *((unsigned int *)this + 20));
  *((_BYTE *)this + 56) = v11;
  return result;
}

size_t DgnFileStream::fillInputBuffer(DgnFileStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t result;
  BOOL v16;

  if (*((_DWORD *)this + 2) == 1)
  {
    if (*((_DWORD *)this + 6))
      v9 = (void *)*((_QWORD *)this + 2);
    else
      v9 = &unk_209A805F8;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 463, (uint64_t)"dfutil/dfstream", 15, (uint64_t)"%.500s", a7, a8, (char)v9);
  }
  if (*((_DWORD *)this + 13) == 1)
  {
    (*(void (**)(DgnFileStream *))(*(_QWORD *)this + 88))(this);
    *((_DWORD *)this + 13) = 0;
  }
  *((_QWORD *)this + 12) = DgnFileStream::basicTell(this, a2, a3, a4, a5, a6, a7, a8);
  result = DgnFileStream::basicRead(this, *((char **)this + 8), *((unsigned int *)this + 18), v10, v11, v12, v13, v14);
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 11) = result;
  if ((_DWORD)result)
    v16 = result >= *((_DWORD *)this + 18);
  else
    v16 = 1;
  if (!v16)
    *((_BYTE *)this + 56) = 0;
  return result;
}

size_t DgnFileStream::readWithMode(DgnFileStream *this, uint64_t __dst, size_t __n, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char *v10;
  void *v12;
  size_t v13;
  void *v14;
  unint64_t v16;
  unsigned int v17;
  const void *v18;
  uint64_t v19;

  v8 = a4;
  v10 = (char *)__dst;
  if (*((_DWORD *)this + 2) == 1
    && (!*((_DWORD *)this + 6) ? (v12 = &unk_209A805F8) : (v12 = (void *)*((_QWORD *)this + 2)),
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 307, (uint64_t)"dfutil/dfstream", 15, (uint64_t)"%.500s", a7, a8, (char)v12), *((_DWORD *)this + 2) == 1)|| *((_BYTE *)this + 56))
  {
    if (*((_DWORD *)this + 13) == 1)
    {
      (*(void (**)(DgnFileStream *))(*(_QWORD *)this + 88))(this);
      *((_DWORD *)this + 13) = 0;
    }
    v13 = DgnFileStream::basicRead(this, v10, __n, a4, a5, a6, a7, a8);
  }
  else if ((_DWORD)__n == 1)
  {
    if (*((_QWORD *)this + 11)
      || (DgnFileStream::fillInputBuffer(this, __dst, __n, a4, a5, a6, a7, a8), !*((_BYTE *)this + 56)))
    {
      *v10 = *(_BYTE *)(*((_QWORD *)this + 8) + (*((_DWORD *)this + 20))++);
      --*((_QWORD *)this + 11);
      v13 = 1;
    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    v16 = *((_QWORD *)this + 11);
    v17 = __n;
    if (v16)
      goto LABEL_23;
    while (1)
    {
      DgnFileStream::fillInputBuffer(this, __dst, v16, a4, a5, a6, a7, a8);
      if (*((_BYTE *)this + 56))
        break;
      v16 = *((_QWORD *)this + 11);
LABEL_23:
      v18 = (const void *)(*((_QWORD *)this + 8) + *((unsigned int *)this + 20));
      if (v16 >= v17)
      {
        memcpy(v10, v18, v17);
        *((_DWORD *)this + 20) += v17;
        *((_QWORD *)this + 11) -= v17;
        return __n;
      }
      memcpy(v10, v18, v16);
      v16 = 0;
      v19 = *((_QWORD *)this + 11);
      v10 += v19;
      v17 -= v19;
      *((_QWORD *)this + 11) = 0;
    }
    v13 = __n - v17;
  }
  if (v8 == 1 && v13 < __n)
  {
    if (*((_DWORD *)this + 6))
      v14 = (void *)*((_QWORD *)this + 2);
    else
      v14 = &unk_209A805F8;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 390, (uint64_t)"dfutil/dfstream", 13, (uint64_t)"%.500s %llu %llu", a7, a8, (char)v14);
  }
  return v13;
}

size_t DgnFileStream::basicRead(DgnFileStream *this, char *__ptr, size_t __nitems, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  FILE *v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v8 = __nitems;
  v11 = (FILE *)*((_QWORD *)this + 5);
  if (!v11)
  {
    if (*((_DWORD *)this + 6))
      v12 = (void *)*((_QWORD *)this + 2);
    else
      v12 = &unk_209A805F8;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 440, (uint64_t)"dfutil/dfstream", 4, (uint64_t)"%.500s", a7, a8, (char)v12);
    v11 = (FILE *)*((_QWORD *)this + 5);
  }
  v13 = fread(__ptr, 1uLL, v8, v11);
  if (v13 < v8)
  {
    if (!feof(*((FILE **)this + 5)) && ferror(*((FILE **)this + 5)))
    {
      if (*((_DWORD *)this + 6))
        v16 = (void *)*((_QWORD *)this + 2);
      else
        v16 = &unk_209A805F8;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 449, (uint64_t)"dfutil/dfstream", 9, (uint64_t)"%.500s %llu", v14, v15, (char)v16);
    }
    *((_BYTE *)this + 56) = 1;
  }
  return v13;
}

void DgnFileStream::writeBytes(DgnFileStream *this, const char *__ptr, size_t __nitems, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  void *v11;
  uint64_t v12;
  FILE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v8 = __nitems;
  if (!*((_DWORD *)this + 2))
  {
    if (*((_DWORD *)this + 6))
      v11 = (void *)*((_QWORD *)this + 2);
    else
      v11 = &unk_209A805F8;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 400, (uint64_t)"dfutil/dfstream", 14, (uint64_t)"%.500s", a7, a8, (char)v11);
  }
  if (v8)
  {
    if (!*((_DWORD *)this + 13))
    {
      v12 = (*(uint64_t (**)(DgnFileStream *))(*(_QWORD *)this + 40))(this);
      (*(void (**)(DgnFileStream *, uint64_t))(*(_QWORD *)this + 24))(this, v12);
      *((_DWORD *)this + 13) = 1;
    }
    v13 = (FILE *)*((_QWORD *)this + 5);
    if (!v13)
    {
      if (*((_DWORD *)this + 6))
        v14 = (void *)*((_QWORD *)this + 2);
      else
        v14 = &unk_209A805F8;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 409, (uint64_t)"dfutil/dfstream", 5, (uint64_t)"%.500s", a7, a8, (char)v14);
      v13 = (FILE *)*((_QWORD *)this + 5);
    }
    if (fwrite(__ptr, 1uLL, v8, v13) != v8)
    {
      if (*((_DWORD *)this + 6))
        v17 = (void *)*((_QWORD *)this + 2);
      else
        v17 = &unk_209A805F8;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 411, (uint64_t)"dfutil/dfstream", 8, (uint64_t)"%.500s", v15, v16, (char)v17);
    }
  }
}

void DgnFileStream::flush(DgnFileStream *this)
{
  FILE *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (FILE *)*((_QWORD *)this + 5);
  if (v2 && fflush(v2))
  {
    if (*((_DWORD *)this + 6))
      v5 = (void *)*((_QWORD *)this + 2);
    else
      v5 = &unk_209A805F8;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfstream.cpp", 421, (uint64_t)"dfutil/dfstream", 3, (uint64_t)"%.500s", v3, v4, (char)v5);
  }
}

void MrecInitModule_channel_channel(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugChannel)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugChannel", (const char *)&unk_209A8065F, (const char *)&unk_209A8065F, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugChannel = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugChannel);
  }
}

void FeatureGeneratorSpec::FeatureGeneratorSpec(FeatureGeneratorSpec *this)
{
  *(_WORD *)this = 1;
  *(_OWORD *)((char *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *((_DWORD *)this + 13) = 0;
  *((_WORD *)this + 28) = 1;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
}

uint64_t FeatureGeneratorSpec::writeObject(FeatureGeneratorSpec *this, DgnStream *a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  writeObject((uint64_t)a2, (unsigned __int16 *)this, a3);
  writeObject((uint64_t)a2, (int *)this + 1, a3);
  writeObject((uint64_t)a2, (int *)this + 2, a3);
  writeObject((uint64_t)a2, (int *)this + 3, a3);
  writeObject(a2, (const double *)this + 3, a3, v6, v7, v8, v9, v10);
  writeObject((uint64_t)a2, (int *)this + 8, a3);
  writeObject((uint64_t)a2, (int *)this + 9, a3);
  writeObject((uint64_t)a2, (int *)this + 10, a3);
  writeObject((uint64_t)a2, (int *)this + 11, a3);
  writeObject(a2, (const double *)this + 6, a3, v11, v12, v13, v14, v15);
  writeObject((uint64_t)a2, (unsigned __int16 *)this + 28, a3);
  writeObject(a2, (const double *)this + 8, a3, v16, v17, v18, v19, v20);
  return writeObject((uint64_t)a2, (int *)this + 18, a3);
}

uint64_t writeObject(DgnStream *a1, const FeatureGeneratorSpec *this, unsigned int *a3)
{
  return FeatureGeneratorSpec::writeObject(this, a1, a3);
}

void FeatureFilterSpec::FeatureFilterSpec(FeatureFilterSpec *this)
{
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

uint64_t FeatureFilterSpec::writeObject(FeatureFilterSpec *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (int *)this, a3);
  writeObject((uint64_t)a2, (int *)this + 1, a3);
  writeObject((uint64_t)a2, (int *)this + 2, a3);
  writeObject((uint64_t)a2, (int *)this + 3, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 16, a3);
  return writeObject((uint64_t)a2, (int *)this + 8, a3);
}

uint64_t writeObject(DgnStream *a1, const FeatureFilterSpec *this, unsigned int *a3)
{
  return FeatureFilterSpec::writeObject(this, a1, a3);
}

void FeatureSelectorSpec::FeatureSelectorSpec(FeatureSelectorSpec *this)
{
  BitArray *v2;

  DgnString::DgnString((FeatureSelectorSpec *)((char *)this + 8));
  *(_QWORD *)this = 0;
  BitArray::setSize(v2, 0);
}

void sub_209A3A61C(_Unwind_Exception *a1)
{
  BitArray *v1;

  BitArray::~BitArray(v1);
  _Unwind_Resume(a1);
}

uint64_t FeatureSelectorSpec::writeObject(FeatureSelectorSpec *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (int *)this, a3);
  writeObject((uint64_t)a2, (int *)this + 1, a3);
  return writeObject((uint64_t)a2, (uint64_t)this + 8, a3);
}

uint64_t writeObject(DgnStream *a1, const FeatureSelectorSpec *this, unsigned int *a3)
{
  return FeatureSelectorSpec::writeObject(this, a1, a3);
}

uint64_t FeatureScaleSpec::writeObject(FeatureScaleSpec *this, DgnStream *a2, unsigned int *a3)
{
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 16, a3);
  return writeObject((uint64_t)a2, (int *)this + 8, a3);
}

uint64_t FeatureScaleSpec::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sizeObject<unsigned int>(a1, a2);
  v5 = sizeObject<unsigned int>(a1 + 16, a2) + v4;
  return v5 + sizeObject(a1 + 32, a2);
}

uint64_t writeObject(DgnStream *a1, const FeatureScaleSpec *this, unsigned int *a3)
{
  return FeatureScaleSpec::writeObject(this, a1, a3);
}

uint64_t writeObject<WarpCoordinates>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  int v10;

  v10 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v10, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (int *)(*(_QWORD *)a2 + v7);
      writeObject(a1, v9, a3);
      result = writeObject(a1, v9 + 1, a3);
      ++v8;
      v7 += 8;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void ChanStatsSpec::ChanStatsSpec(ChanStatsSpec *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_WORD *)this = 1;
  *((_WORD *)this + 12) = 1;
  *((_WORD *)this + 40) = 1;
  *((_DWORD *)this + 26) = 0;
  *((_WORD *)this + 54) = 1;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
}

void ChanStatsSpec::~ChanStatsSpec(ChanStatsSpec *this)
{
  DgnArray<WarpChoice>::releaseAll((uint64_t)this + 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 88);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8);
}

uint64_t ChanStatsSpec::writeObject(ChanStatsSpec *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (unsigned __int16 *)this, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 8, a3);
  writeObject((uint64_t)a2, (unsigned __int16 *)this + 12, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 32, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 48, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 64, a3);
  writeObject((uint64_t)a2, (unsigned __int16 *)this + 40, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 88, a3);
  writeObject((uint64_t)a2, (int *)this + 26, a3);
  writeObject((uint64_t)a2, (unsigned __int16 *)this + 54, a3);
  writeObject((uint64_t)a2, (int *)this + 28, a3);
  writeObject((uint64_t)a2, (int *)this + 29, a3);
  writeObject((uint64_t)a2, (int *)this + 30, a3);
  writeObject((uint64_t)a2, (int *)this + 31, a3);
  return writeObject<WarpChoice>((uint64_t)a2, (uint64_t)this + 128, a3);
}

uint64_t writeObject<WarpChoice>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;

  v10 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v10, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (unsigned __int8 *)(*(_QWORD *)a2 + v7);
      writeObject(a1, v9, a3);
      result = writeObject<WarpCoordinates>(a1, (uint64_t)(v9 + 8), a3);
      ++v8;
      v7 += 24;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t ChanStatsSpec::sizeObject(uint64_t a1, int a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2 != 3;
  v5 = sizeObject<unsigned char>(a1 + 8, a2);
  v6 = sizeObject<unsigned char>(a1 + 32, a2);
  v7 = sizeObject<unsigned char>(a1 + 48, a2);
  v8 = sizeObject<unsigned char>(a1 + 64, a2);
  v9 = sizeObject<unsigned int>(a1 + 88, a2);
  return v5 + 4 * v4 + v6 + v7 + v8 + v9 + sizeObject<WarpChoice>(a1 + 128, a2) + (16 * v4 || 8 * v4);
}

uint64_t sizeObject<WarpChoice>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];

  v2 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  else
    v3 = 16;
  v9[0] = 0;
  v9[1] = 0;
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v2 = v3;
      goto LABEL_11;
    }
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 < 1)
    {
      v2 = v3;
      if (a2)
        goto LABEL_11;
    }
    else
    {
      v7 = v6 + 1;
      v2 = v3;
      do
        v2 += sizeObject<EnergyInfo>(*(_QWORD *)a1 + 24 * (v7-- - 2) + 8, a2) + 1;
      while (v7 > 1);
      if (a2)
        goto LABEL_11;
    }
    v2 += (v3 | 1) * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
LABEL_11:
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v9);
  return v2;
}

void sub_209A3AC08(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIArray<Utterance *>::~DgnIArray(v1);
  _Unwind_Resume(a1);
}

uint64_t writeObject(DgnStream *a1, const ChanStatsSpec *this, unsigned int *a3)
{
  return ChanStatsSpec::writeObject(this, a1, a3);
}

_QWORD *DgnArray<WarpChoice>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 24 * v2 - 16;
    do
    {
      DgnIArray<Utterance *>::~DgnIArray(*(_QWORD *)a1 + v3);
      v3 -= 24;
    }
    while (v3 != -16);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t MrecInitLibrary_net(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_history_net();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_netmgr_net();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughNet(void)
{
  MrecInitLibrarySet_throughUser();
  MrecInitLibrarySet_throughVoc();
  return MrecInitLibrary_net();
}

void TItnParamManager::TItnParamManager(TItnParamManager *this, TLocaleInfo *a2)
{
  _QWORD *v3;
  uint64_t v4;
  const __int32 *v5;
  uint64_t v6;
  const __int32 *v7;
  TParam *v8;
  std::vector<std::wstring> v9;
  std::vector<std::wstring> v10;
  void **v11[2];

  TParamManager::TParamManager(this, 1, a2);
  *v3 = &unk_24C215810;
  v8 = (TParam *)(v3 + 18);
  TStringParam::TStringParam(v3 + 18, &unk_209A80668, &unk_209A806A0, 0, &dword_209A80A34, &unk_209A80A38, &dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 1520), (uint64_t)&unk_209A80A6C, (uint64_t)&unk_209A80B0C, 0, 0, 100, 10, (uint64_t)&unk_209A80A38, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 1872), (uint64_t)&unk_209A80CF0, (uint64_t)&unk_209A80D40, 0, 0, 100, 20, (uint64_t)&unk_209A80A38, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 2224, (uint64_t)&unk_209A80E58, (uint64_t)&unk_209A80EBC, 0, 1, (uint64_t)&unk_209A81568, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 2472, (uint64_t)&unk_209A8159C, (uint64_t)&unk_209A81614, 0, 0, (uint64_t)&unk_209A81760, (uint64_t)&dword_209A80A34);
  TFloatParam::TFloatParam((uint64_t)this + 2720, (uint64_t)&unk_209A81794, (uint64_t)&unk_209A817C4, 0, (uint64_t)&unk_209A817F8, (uint64_t)&dword_209A80A34, 100.0);
  TFloatParam::TFloatParam((uint64_t)this + 3256, (uint64_t)&unk_209A8182C, (uint64_t)&unk_209A81868, 0, (uint64_t)&unk_209A817F8, (uint64_t)&dword_209A80A34, 300.0);
  TBoolParam::TBoolParam((uint64_t)this + 3792, (uint64_t)&unk_209A818AC, (uint64_t)&unk_209A818D4, 0, 0, (uint64_t)&unk_209A819D4, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 4040), (uint64_t)&unk_209A81A0C, (uint64_t)&unk_209A81AB8, 0, 1, 100, 10, (uint64_t)&unk_209A81C08, (uint64_t)&dword_209A80A34);
  TStringParam::TStringParam((char *)this + 4392, &unk_209A81C48, &unk_209A81CA8, 0, &unk_209A82800, &unk_209A82810, &dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 5768, (uint64_t)&unk_209A82848, (uint64_t)&unk_209A82898, 256, 0, (uint64_t)&unk_209A82A60, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 6016, (uint64_t)&unk_209A82AA0, (uint64_t)&unk_209A82AEC, 0, 0, (uint64_t)&unk_209A82C50, (uint64_t)&dword_209A80A34);
  TStringParam::TStringParam((char *)this + 6264, &unk_209A82C84, &unk_209A82CC4, 256, &dword_209A80A34, &unk_209A82C50, &dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 7640, (uint64_t)&unk_209A82F3C, (uint64_t)&unk_209A82F7C, 0, 0, (uint64_t)&unk_209A82C50, (uint64_t)&dword_209A80A34);
  TStringParam::TStringParam((char *)this + 7888, &unk_209A83010, &unk_209A83050, 0, &unk_209A830EC, &unk_209A830F4, &unk_209A8312C);
  TBoolParam::TBoolParam((uint64_t)this + 9264, (uint64_t)&unk_209A8316C, (uint64_t)&unk_209A831A4, 0, 1, (uint64_t)&unk_209A832E4, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 9512, (uint64_t)&unk_209A83318, (uint64_t)&unk_209A83334, 0, 0, (uint64_t)&unk_209A83410, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 9760), (uint64_t)&unk_209A83450, (uint64_t)&unk_209A834BC, 0, 0, 0x7FFFFFFF, 66017, (uint64_t)&unk_209A835C4, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 10112), (uint64_t)&unk_209A83604, (uint64_t)&unk_209A8367C, 0, 0, 30, 20, (uint64_t)&unk_209A835C4, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 10464), (uint64_t)&unk_209A83770, (uint64_t)&unk_209A837E0, 0, 0, 30, 8, (uint64_t)&unk_209A835C4, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 10816), (uint64_t)&unk_209A838F8, (uint64_t)&unk_209A8396C, 0, 0, 30, 9, (uint64_t)&unk_209A835C4, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 11168), (uint64_t)&unk_209A83A88, (uint64_t)&unk_209A83B00, 0, 0, 30, 10, (uint64_t)&unk_209A835C4, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 11520), (uint64_t)&unk_209A83C20, (uint64_t)&unk_209A83C8C, 0, 0, 30, 24, (uint64_t)&unk_209A835C4, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 11872), (uint64_t)&unk_209A83DA0, (uint64_t)&unk_209A83E10, 0, 0, 30, 26, (uint64_t)&unk_209A835C4, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 12224), (uint64_t)&unk_209A83F28, (uint64_t)&unk_209A83F88, 0, 0, 30, 25, (uint64_t)&unk_209A835C4, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 12576), (uint64_t)&unk_209A84090, (uint64_t)&unk_209A840FC, 0, 0, 30, 5, (uint64_t)&unk_209A835C4, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 12928), (uint64_t)&unk_209A84210, (uint64_t)&unk_209A84284, 0, 0, 30, 6, (uint64_t)&unk_209A835C4, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 13280), (uint64_t)&unk_209A843A0, (uint64_t)&unk_209A84408, 0, 0, 30, 7, (uint64_t)&unk_209A835C4, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 13632), (uint64_t)&unk_209A84518, (uint64_t)&unk_209A8458C, 0, 0, 30, 11, (uint64_t)&unk_209A8469C, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 13984), (uint64_t)&unk_209A846DC, (uint64_t)&unk_209A84750, 0, 0, 30, 12, (uint64_t)&unk_209A8469C, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 14336), (uint64_t)&unk_209A84860, (uint64_t)&unk_209A848CC, 0, 0, 30, 13, (uint64_t)&unk_209A8469C, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 14688), (uint64_t)&unk_209A849D4, (uint64_t)&unk_209A84A44, 0, 0, 30, 16, (uint64_t)&unk_209A84B3C, (uint64_t)&dword_209A80A34);
  TStringParam::TStringParam((char *)this + 15040, &unk_209A84B7C, &unk_209A84BFC, 0, &dword_209A80A34, &unk_209A8506C, &dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 16416, (uint64_t)&unk_209A850AC, (uint64_t)&unk_209A8513C, 0, 0, (uint64_t)&unk_209A852DC, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 16664, (uint64_t)&unk_209A8531C, (uint64_t)&unk_209A85364, 0, 1, (uint64_t)&unk_209A85654, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 16912, (uint64_t)&unk_209A8568C, (uint64_t)&unk_209A856F4, 0, 1, (uint64_t)&unk_209A85654, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 17160, (uint64_t)&unk_209A85A58, (uint64_t)&unk_209A85AA4, 0, 1, (uint64_t)&unk_209A85654, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 17408), (uint64_t)&unk_209A86194, (uint64_t)&unk_209A861EC, 0, -1, 50, 0, (uint64_t)&unk_209A86D24, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 17760, (uint64_t)&unk_209A86D64, (uint64_t)&unk_209A86D9C, 0, 0, (uint64_t)&unk_209A80A38, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 18008, (uint64_t)&unk_209A86EC4, (uint64_t)&unk_209A86EF8, 0, 0, (uint64_t)&unk_209A80A38, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 18256, (uint64_t)&unk_209A86FFC, (uint64_t)&unk_209A87050, 0, 0, (uint64_t)&unk_209A87368, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 18504, (uint64_t)&unk_209A8739C, (uint64_t)&unk_209A873DC, 0, 0, (uint64_t)&unk_209A8747C, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 18752, (uint64_t)&unk_209A874B0, (uint64_t)&unk_209A874F8, 0, 0, (uint64_t)&unk_209A8760C, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 19000, (uint64_t)&unk_209A87640, (uint64_t)&unk_209A87688, 0, 0, (uint64_t)&unk_209A87784, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 19248, (uint64_t)&unk_209A877BC, (uint64_t)&unk_209A87808, 0, 0, (uint64_t)&unk_209A87904, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 19496, (uint64_t)&unk_209A8793C, (uint64_t)&unk_209A87978, 32, 1, (uint64_t)&unk_209A87A2C, (uint64_t)&dword_209A80A34);
  TBoolParam::TBoolParam((uint64_t)this + 19744, (uint64_t)&unk_209A87A60, (uint64_t)&unk_209A87ABC, 288, 1, (uint64_t)&unk_209A87B98, (uint64_t)&dword_209A80A34);
  TStringParam::TStringParam((char *)this + 19992, &unk_209A87BD0, &unk_209A87978, 32, &dword_209A80A34, &unk_209A87A2C, &dword_209A80A34);
  TStringParam::TStringParam((char *)this + 21368, &unk_209A87C14, &unk_209A87ABC, 288, &dword_209A80A34, &unk_209A87B98, &dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 22744), (uint64_t)&unk_209A87C78, (uint64_t)&unk_209A87978, 32, -1, 10, 5, (uint64_t)&unk_209A87A2C, (uint64_t)&dword_209A80A34);
  TIntParam::TIntParam((TItnParamManager *)((char *)this + 23096), (uint64_t)&unk_209A87CB0, (uint64_t)&unk_209A87ABC, 288, -1, 10, 5, (uint64_t)&unk_209A87B98, (uint64_t)&dword_209A80A34);
  TStringParam::TStringParam((char *)this + 23448, &unk_209A87D08);
  TStringParam::TStringParam((char *)this + 24824, &unk_209A87D44);
  TFloatParam::TFloatParam((uint64_t)this + 26200, (uint64_t)&unk_209A87DA0, (uint64_t)&unk_209A87978, 32, (uint64_t)&unk_209A87A2C, (uint64_t)&dword_209A80A34, 0.0);
  TFloatParam::TFloatParam((uint64_t)this + 26736, (uint64_t)&unk_209A87DE0, (uint64_t)&unk_209A87ABC, 288, (uint64_t)&unk_209A87B98, (uint64_t)&dword_209A80A34, 0.0);
  TParamManager::add(this, v8);
  TParamManager::add(this, (TItnParamManager *)((char *)this + 1520));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 1872));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 2224));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 2472));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 2720));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 3256));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 3792));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 4040));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 4392));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 5768));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 6016));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 6264));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 7640));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 7888));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 9264));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 9512));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 9760));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 10112));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 10464));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 10816));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 11168));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 11520));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 11872));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 12224));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 12576));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 12928));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 13280));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 13632));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 13984));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 14336));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 14688));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 15040));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 16416));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 16664));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 16912));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 17160));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 17408));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 17760));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 18008));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 18256));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 18504));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 18752));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 19000));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 19248));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 19496));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 19744));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 19992));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 21368));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 22744));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 23096));
  MEMORY[0x20BD147A4]((char *)this + 23488, &unk_209A87978);
  MEMORY[0x20BD147A4]((char *)this + 23512, &unk_209A87A2C);
  MEMORY[0x20BD147A4]((char *)this + 23536, &dword_209A80A34);
  *((_QWORD *)this + 2945) |= 0x20uLL;
  std::vector<std::wstring>::vector(&v10, 4uLL);
  std::vector<std::wstring>::vector(&v9, 4uLL);
  v4 = 0;
  v5 = (const __int32 *)&unk_209A87E40;
  do
  {
    MEMORY[0x20BD147A4](&v10.__begin_[v4], v5);
    v5 += wcslen(v5) + 1;
    ++v4;
  }
  while (v4 != 4);
  TStringParam::setAllowables((uint64_t)this + 23448, (uint64_t)&v10, 0, 0);
  TStringParam::setOriginal((_QWORD *)this + 2931, 0, &dword_209A80A34);
  TParamManager::add(this, (TItnParamManager *)((char *)this + 23448));
  v11[0] = (void **)&v9;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](v11);
  v9.__begin_ = (std::vector<std::wstring>::pointer)&v10;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  MEMORY[0x20BD147A4]((char *)this + 24864, &unk_209A87ABC);
  MEMORY[0x20BD147A4]((char *)this + 24888, &unk_209A87B98);
  MEMORY[0x20BD147A4]((char *)this + 24912, &dword_209A80A34);
  *((_QWORD *)this + 3117) |= 0x120uLL;
  std::vector<std::wstring>::vector(&v10, 4uLL);
  std::vector<std::wstring>::vector(&v9, 4uLL);
  v6 = 0;
  v7 = (const __int32 *)&unk_209A87E40;
  do
  {
    MEMORY[0x20BD147A4](&v10.__begin_[v6], v7);
    v7 += wcslen(v7) + 1;
    ++v6;
  }
  while (v6 != 4);
  TStringParam::setAllowables((uint64_t)this + 24824, (uint64_t)&v10, 0, 0);
  TStringParam::setOriginal((_QWORD *)this + 3103, 0, &dword_209A80A34);
  TParamManager::add(this, (TItnParamManager *)((char *)this + 24824));
  v11[0] = (void **)&v9;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](v11);
  v9.__begin_ = (std::vector<std::wstring>::pointer)&v10;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  TParamManager::add(this, (TItnParamManager *)((char *)this + 26200));
  TParamManager::add(this, (TItnParamManager *)((char *)this + 26736));
  *((_QWORD *)this + 3410) = -1;
  *((_QWORD *)this + 3409) = -1;
}

void sub_209A3BDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32,void **a33,void **a34,void **a35,void **a36,void **a37,void **a38,void **a39,void **a40,void **a41,void **a42,void **a43,void **a44)
{
  TParamManager *v44;
  void **v45;
  void **v46;
  void **v47;
  void **v48;
  void **v49;
  void **v50;
  void **v51;
  uint64_t v52;

  *(_QWORD *)(v52 - 144) = v52 - 120;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 144));
  TParam::~TParam(v49);
  TParam::~TParam(v48);
  TStringParam::~TStringParam(v47);
  TStringParam::~TStringParam(v46);
  TParam::~TParam(v51);
  TParam::~TParam(v50);
  TStringParam::~TStringParam(v45);
  TStringParam::~TStringParam(a11);
  TBoolParam::~TBoolParam(a12);
  TBoolParam::~TBoolParam(a13);
  TBoolParam::~TBoolParam(a14);
  TBoolParam::~TBoolParam(a15);
  TBoolParam::~TBoolParam(a16);
  TBoolParam::~TBoolParam(a17);
  TBoolParam::~TBoolParam(a18);
  TBoolParam::~TBoolParam(a19);
  TBoolParam::~TBoolParam(a20);
  TParam::~TParam(a21);
  TBoolParam::~TBoolParam(a22);
  TBoolParam::~TBoolParam(a23);
  TBoolParam::~TBoolParam(a24);
  TBoolParam::~TBoolParam(a25);
  TStringParam::~TStringParam(a26);
  TParam::~TParam(a27);
  TParam::~TParam(a28);
  TParam::~TParam(a29);
  TParam::~TParam(a30);
  TParam::~TParam(a31);
  TParam::~TParam(a32);
  TParam::~TParam(a33);
  TParam::~TParam(a34);
  TParam::~TParam(a35);
  TParam::~TParam(a36);
  TParam::~TParam(a37);
  TParam::~TParam(a38);
  TParam::~TParam(a39);
  TParam::~TParam(a40);
  TParam::~TParam(a41);
  TBoolParam::~TBoolParam(a42);
  TBoolParam::~TBoolParam(a43);
  TStringParam::~TStringParam(a44);
  TBoolParam::~TBoolParam(*(void ***)(v52 - 256));
  TStringParam::~TStringParam(*(void ***)(v52 - 248));
  TBoolParam::~TBoolParam(*(void ***)(v52 - 240));
  TBoolParam::~TBoolParam(*(void ***)(v52 - 232));
  TStringParam::~TStringParam(*(void ***)(v52 - 224));
  TParam::~TParam(*(void ***)(v52 - 216));
  TBoolParam::~TBoolParam(*(void ***)(v52 - 208));
  TParam::~TParam(*(void ***)(v52 - 200));
  TParam::~TParam(*(void ***)(v52 - 192));
  TBoolParam::~TBoolParam(*(void ***)(v52 - 184));
  TBoolParam::~TBoolParam(*(void ***)(v52 - 176));
  TParam::~TParam(*(void ***)(v52 - 168));
  TParam::~TParam(*(void ***)(v52 - 160));
  TStringParam::~TStringParam(*(void ***)(v52 - 152));
  TParamManager::~TParamManager(v44);
  _Unwind_Resume(a1);
}

void TItnParamManager::initialize(TItnParamManager *this, TInputStream *a2, char a3)
{
  if (*((_BYTE *)a2 + 8))
  {
    if (*((_QWORD *)a2 + 12) <= 4uLL)
    {
      *((_QWORD *)this + 3409) = TParamManager::newConfig((uint64_t)this, dword_209A87E60, 1);
      *((_QWORD *)this + 3410) = TParamManager::newConfig((uint64_t)this, dword_209A87E7C, 1);
    }
    TParamManager::initialize(this, a2, a3);
  }
}

uint64_t TItnParamManager::initializeParamConfigs(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(_QWORD *)(this + 27272) == -1)
  {
    this = TParamManager::getConfig(this, dword_209A87E60);
    if (this == -1)
      v2 = 1;
    else
      v2 = this;
    *(_QWORD *)(v1 + 27272) = v2;
  }
  if (*(_QWORD *)(v1 + 27280) == -1)
  {
    this = TParamManager::getConfig(v1, dword_209A87E7C);
    if (this == -1)
      v3 = 1;
    else
      v3 = this;
    *(_QWORD *)(v1 + 27280) = v3;
  }
  return this;
}

void TItnParamManager::~TItnParamManager(void **this)
{
  TItnParamManager::~TItnParamManager(this);
  JUMPOUT(0x20BD149A8);
}

{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t n;
  uint64_t v20;
  uint64_t v21;
  uint64_t ii;
  uint64_t v23;
  uint64_t jj;
  uint64_t v25;
  uint64_t v26;
  uint64_t kk;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;

  *this = &unk_24C215810;
  TParam::~TParam(this + 3342);
  TParam::~TParam(this + 3275);
  this[3103] = &unk_24C214170;
  v32 = this + 3272;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 3269;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 3266;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  for (i = 0; i != -144; i -= 3)
  {
    if (SHIBYTE(this[i + 3265]) < 0)
      operator delete(this[i + 3263]);
  }
  TParam::~TParam(this + 3103);
  this[2931] = &unk_24C214170;
  v32 = this + 3100;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 3097;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 3094;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  for (j = 0; j != -144; j -= 3)
  {
    if (SHIBYTE(this[j + 3093]) < 0)
      operator delete(this[j + 3091]);
  }
  TParam::~TParam(this + 2931);
  TParam::~TParam(this + 2887);
  TParam::~TParam(this + 2843);
  this[2671] = &unk_24C214170;
  v32 = this + 2840;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 2837;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 2834;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  for (k = 0; k != -144; k -= 3)
  {
    if (SHIBYTE(this[k + 2833]) < 0)
      operator delete(this[k + 2831]);
  }
  TParam::~TParam(this + 2671);
  this[2499] = &unk_24C214170;
  v32 = this + 2668;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 2665;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 2662;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  for (m = 0; m != -144; m -= 3)
  {
    if (SHIBYTE(this[m + 2661]) < 0)
      operator delete(this[m + 2659]);
  }
  TParam::~TParam(this + 2499);
  v6 = 0;
  this[2468] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v6 + 2498]) < 0)
      operator delete(this[v6 + 2496]);
    v6 -= 3;
  }
  while (v6 != -6);
  TParam::~TParam(this + 2468);
  v7 = 0;
  this[2437] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v7 + 2467]) < 0)
      operator delete(this[v7 + 2465]);
    v7 -= 3;
  }
  while (v7 != -6);
  TParam::~TParam(this + 2437);
  v8 = 0;
  this[2406] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v8 + 2436]) < 0)
      operator delete(this[v8 + 2434]);
    v8 -= 3;
  }
  while (v8 != -6);
  TParam::~TParam(this + 2406);
  v9 = 0;
  this[2375] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v9 + 2405]) < 0)
      operator delete(this[v9 + 2403]);
    v9 -= 3;
  }
  while (v9 != -6);
  TParam::~TParam(this + 2375);
  v10 = 0;
  this[2344] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v10 + 2374]) < 0)
      operator delete(this[v10 + 2372]);
    v10 -= 3;
  }
  while (v10 != -6);
  TParam::~TParam(this + 2344);
  v11 = 0;
  this[2313] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v11 + 2343]) < 0)
      operator delete(this[v11 + 2341]);
    v11 -= 3;
  }
  while (v11 != -6);
  TParam::~TParam(this + 2313);
  v12 = 0;
  this[2282] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v12 + 2312]) < 0)
      operator delete(this[v12 + 2310]);
    v12 -= 3;
  }
  while (v12 != -6);
  TParam::~TParam(this + 2282);
  v13 = 0;
  this[2251] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v13 + 2281]) < 0)
      operator delete(this[v13 + 2279]);
    v13 -= 3;
  }
  while (v13 != -6);
  TParam::~TParam(this + 2251);
  v14 = 0;
  this[2220] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v14 + 2250]) < 0)
      operator delete(this[v14 + 2248]);
    v14 -= 3;
  }
  while (v14 != -6);
  TParam::~TParam(this + 2220);
  TParam::~TParam(this + 2176);
  v15 = 0;
  this[2145] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v15 + 2175]) < 0)
      operator delete(this[v15 + 2173]);
    v15 -= 3;
  }
  while (v15 != -6);
  TParam::~TParam(this + 2145);
  v16 = 0;
  this[2114] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v16 + 2144]) < 0)
      operator delete(this[v16 + 2142]);
    v16 -= 3;
  }
  while (v16 != -6);
  TParam::~TParam(this + 2114);
  v17 = 0;
  this[2083] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v17 + 2113]) < 0)
      operator delete(this[v17 + 2111]);
    v17 -= 3;
  }
  while (v17 != -6);
  TParam::~TParam(this + 2083);
  v18 = 0;
  this[2052] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v18 + 2082]) < 0)
      operator delete(this[v18 + 2080]);
    v18 -= 3;
  }
  while (v18 != -6);
  TParam::~TParam(this + 2052);
  this[1880] = &unk_24C214170;
  v32 = this + 2049;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 2046;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 2043;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  for (n = 0; n != -144; n -= 3)
  {
    if (SHIBYTE(this[n + 2042]) < 0)
      operator delete(this[n + 2040]);
  }
  TParam::~TParam(this + 1880);
  TParam::~TParam(this + 1836);
  TParam::~TParam(this + 1792);
  TParam::~TParam(this + 1748);
  TParam::~TParam(this + 1704);
  TParam::~TParam(this + 1660);
  TParam::~TParam(this + 1616);
  TParam::~TParam(this + 1572);
  TParam::~TParam(this + 1528);
  TParam::~TParam(this + 1484);
  TParam::~TParam(this + 1440);
  TParam::~TParam(this + 1396);
  TParam::~TParam(this + 1352);
  TParam::~TParam(this + 1308);
  TParam::~TParam(this + 1264);
  TParam::~TParam(this + 1220);
  v20 = 0;
  this[1189] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v20 + 1219]) < 0)
      operator delete(this[v20 + 1217]);
    v20 -= 3;
  }
  while (v20 != -6);
  TParam::~TParam(this + 1189);
  v21 = 0;
  this[1158] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v21 + 1188]) < 0)
      operator delete(this[v21 + 1186]);
    v21 -= 3;
  }
  while (v21 != -6);
  TParam::~TParam(this + 1158);
  this[986] = &unk_24C214170;
  v32 = this + 1155;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 1152;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 1149;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  for (ii = 0; ii != -144; ii -= 3)
  {
    if (SHIBYTE(this[ii + 1148]) < 0)
      operator delete(this[ii + 1146]);
  }
  TParam::~TParam(this + 986);
  v23 = 0;
  this[955] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v23 + 985]) < 0)
      operator delete(this[v23 + 983]);
    v23 -= 3;
  }
  while (v23 != -6);
  TParam::~TParam(this + 955);
  this[783] = &unk_24C214170;
  v32 = this + 952;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 949;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 946;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  for (jj = 0; jj != -144; jj -= 3)
  {
    if (SHIBYTE(this[jj + 945]) < 0)
      operator delete(this[jj + 943]);
  }
  TParam::~TParam(this + 783);
  v25 = 0;
  this[752] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v25 + 782]) < 0)
      operator delete(this[v25 + 780]);
    v25 -= 3;
  }
  while (v25 != -6);
  TParam::~TParam(this + 752);
  v26 = 0;
  this[721] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v26 + 751]) < 0)
      operator delete(this[v26 + 749]);
    v26 -= 3;
  }
  while (v26 != -6);
  TParam::~TParam(this + 721);
  this[549] = &unk_24C214170;
  v32 = this + 718;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 715;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 712;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  for (kk = 0; kk != -144; kk -= 3)
  {
    if (SHIBYTE(this[kk + 711]) < 0)
      operator delete(this[kk + 709]);
  }
  TParam::~TParam(this + 549);
  TParam::~TParam(this + 505);
  v28 = 0;
  this[474] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v28 + 504]) < 0)
      operator delete(this[v28 + 502]);
    v28 -= 3;
  }
  while (v28 != -6);
  TParam::~TParam(this + 474);
  TParam::~TParam(this + 407);
  TParam::~TParam(this + 340);
  v29 = 0;
  this[309] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v29 + 339]) < 0)
      operator delete(this[v29 + 337]);
    v29 -= 3;
  }
  while (v29 != -6);
  TParam::~TParam(this + 309);
  v30 = 0;
  this[278] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v30 + 308]) < 0)
      operator delete(this[v30 + 306]);
    v30 -= 3;
  }
  while (v30 != -6);
  TParam::~TParam(this + 278);
  TParam::~TParam(this + 234);
  TParam::~TParam(this + 190);
  this[18] = &unk_24C214170;
  v32 = this + 187;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 184;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = this + 181;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v32);
  v31 = 144;
  do
  {
    if (SHIBYTE(this[v31 + 36]) < 0)
      operator delete(this[v31 + 34]);
    v31 -= 3;
  }
  while (v31 * 8);
  TParam::~TParam(this + 18);
  TParamManager::~TParamManager((TParamManager *)this);
}

void MrecInitModule_history_net(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugShowFinalHistoryStats)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowFinalHistoryStats", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowFinalHistoryStats = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowFinalHistoryStats);
  }
}

uint64_t HistoryMgr::HistoryMgr(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  HashKEVTLT<unsigned int,History const*,HistoryMgr>::HashKEVTLT(a1 + 24, 0, 2040);
  *(_BYTE *)(a1 + 44) = 1;
  *(_QWORD *)(a1 + 128) = a1;
  return a1;
}

void sub_209A3CEE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIArray<Utterance *>::~DgnIArray(v1);
  _Unwind_Resume(a1);
}

void HistoryMgr::~HistoryMgr(HistoryMgr *this)
{
  char *v2;

  *((_DWORD *)this + 4) = 0;
  v2 = (char *)this + 24;
  HashKEVTLT<unsigned int,History const*,HistoryMgr>::releaseAllQuick((uint64_t)this + 24);
  HashKEVTLT<unsigned int,History const*,HistoryMgr>::~HashKEVTLT((uint64_t)v2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 8);
}

void HistoryMgr::printSize(HistoryMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/history.cpp", 225, (DgnString *)&v55);
  if ((_DWORD)v56)
    v16 = (char *)v55;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v55);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/history.cpp", 227, (DgnString *)&v55);
  if ((_DWORD)v56)
    v25 = (char *)v55;
  else
    v25 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v25, 4, 4, 0);
  v54 = a6;
  DgnString::~DgnString((DgnString *)&v55);
  *a4 += 4;
  *a5 += 4;
  v26 = sizeObject<History>((uint64_t)this + 8, 0);
  v27 = sizeObject<History>((uint64_t)this + 8, 1);
  v55 = 0x3FFFFAFFFFFFLL;
  v56 = xmmword_209A593D0;
  v57 = 0x1F0000001FLL;
  sizeObject((uint64_t)&v55, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/history.cpp", 229, (DgnString *)&v55);
  if ((_DWORD)v56)
    v32 = (char *)v55;
  else
    v32 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v32, v26, v27, 0);
  DgnString::~DgnString((DgnString *)&v55);
  *a4 += v26;
  *a5 += v27;
  v33 = (char *)this + 48;
  v34 = sizeObject((char *)this + 48);
  v35 = (char *)this + 104;
  v36 = sizeObject<DgnIFixArray<BucketLinkKEVTLT<unsigned int> *>>((uint64_t)v35, 0);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v37 = 8;
  else
    v37 = 16;
  v38 = v34 + v36 + v37 + 13;
  v39 = sizeObject(v33);
  v40 = sizeObject<DgnIFixArray<BucketLinkKEVTLT<unsigned int> *>>((uint64_t)v35, 1);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v41 = 8;
  else
    v41 = 16;
  v42 = v39 + v40 + v41 + 13;
  v43 = sizeObject(v33);
  v55 = 0;
  LODWORD(v56) = 0;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v55);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/history.cpp", 231, (DgnString *)&v55);
  if ((_DWORD)v56)
    v48 = (char *)v55;
  else
    v48 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v48, v38, v42, v43);
  DgnString::~DgnString((DgnString *)&v55);
  *a4 += v38;
  *a5 += v42;
  *v54 += v43;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/history.cpp", 232, (DgnString *)&v55);
  if ((_DWORD)v56)
    v53 = (char *)v55;
  else
    v53 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, a3, &byte_209A88803, (35 - a3), (35 - a3), v53, *a4, *a5, *v54);
  DgnString::~DgnString((DgnString *)&v55);
}

void sub_209A3D2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<History>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v10 = 0x3FFFFAFFFFFFLL;
  v11 = xmmword_209A593D0;
  v12 = 0x1F0000001FLL;
  v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 12;
  else
    v5 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = v4;
    v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      v8 = v7 + 1;
      do
        v5 += sizeObject(*(_QWORD *)a1 + 36 * (v8-- - 2), a2) + 12;
      while (v8 > 1);
    }
    if (!a2)
      v5 += (v6 + 12) * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
  return v5;
}

_QWORD *HashKEVTLT<unsigned int,History const*,HistoryMgr>::releaseAllQuick(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  *(_DWORD *)(a1 + 8) = 0;
  v1 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(a1 + 80);
    do
    {
      if (*(_DWORD *)(v3 + 16 * v2 + 8))
      {
        v4 = 0;
        do
        {
          *(_QWORD *)(*(_QWORD *)(v3 + 16 * v2) + 8 * v4++) = 0;
          v3 = *(_QWORD *)(a1 + 80);
        }
        while (v4 < *(unsigned int *)(v3 + 16 * v2 + 8));
      }
      ++v2;
    }
    while (v2 != v1);
  }
  return DgnPool::deleteAllWithoutDestroying((DgnPool *)(a1 + 24));
}

_QWORD *HistoryMgr::beginHistoryMgrSyncRecog(HistoryMgr *this)
{
  *((_DWORD *)this + 4) = 0;
  return HashKEVTLT<unsigned int,History const*,HistoryMgr>::releaseAllQuick((uint64_t)this + 24);
}

uint64_t HistoryMgr::copyAndOverrideToBigramHistories(HistoryMgr *this)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  char *v18;
  unsigned int v19;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1)
  {
    v3 = 0;
    v18 = (char *)this + 8;
    v4 = (char *)this + 24;
    do
    {
      v5 = *((_QWORD *)this + 1);
      v6 = *(_DWORD *)(v5 + v3);
      v7 = *(_WORD *)(v5 + v3 + 4);
      v8 = *(_WORD *)(v5 + v3 + 6);
      v9 = *(_QWORD *)(v5 + v3 + 8);
      v10 = *(_QWORD *)(v5 + v3 + 20);
      v12 = *(_DWORD *)(v5 + v3 + 28);
      v11 = *(_DWORD *)(v5 + v3 + 32);
      if (v11 == -2)
        v13 = -2;
      else
        v13 = v11 + v1;
      v14 = *((_DWORD *)this + 4);
      v15 = *((_DWORD *)this + 5);
      v19 = v14;
      if (v14 == v15)
      {
        DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v18, 1, 1);
        v14 = *((_DWORD *)this + 4);
        v5 = *((_QWORD *)this + 1);
      }
      v16 = v5 + 36 * v14;
      *(_DWORD *)v16 = v6;
      *(_WORD *)(v16 + 4) = v7;
      v3 += 36;
      *(_WORD *)(v16 + 6) = v8;
      *(_QWORD *)(v16 + 8) = v9;
      *(_DWORD *)(v16 + 16) = -83886084;
      *(_QWORD *)(v16 + 20) = v10;
      *(_DWORD *)(v16 + 28) = v12;
      *(_DWORD *)(v16 + 32) = v13;
      *((_DWORD *)this + 4) = v14 + 1;
      HashKEVTLT<unsigned int,History const*,HistoryMgr>::add((uint64_t)v4, &v19);
    }
    while (36 * v1 != v3);
  }
  return v1;
}

uint64_t HashKEVTLT<unsigned int,History const*,HistoryMgr>::add(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  _DWORD *v5;
  int v6;
  unint64_t v7;
  int v8;
  uint64_t result;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;

  v4 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v4 >> 1)
    HashKEVTLT<unsigned int,History const*,HistoryMgr>::upSize(a1, 2 * v4);
  v5 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 36 * *a2);
  v6 = v5[8];
  HIDWORD(v7) = v5[6];
  LODWORD(v7) = HIDWORD(v7);
  v8 = (v7 >> 19) + v5[7];
  result = CWIDAC::computeHash((uint64_t)v5);
  HIDWORD(v7) = v8;
  LODWORD(v7) = v8;
  v10 = v7 >> 19;
  HIDWORD(v7) = v6;
  LODWORD(v7) = v6;
  v11 = result + (v7 >> 19) + v10;
  v12 = *(_DWORD *)(a1 + 16);
  if (v12)
    v13 = (-1640531527 * v11) >> -(char)v12;
  else
    v13 = 0;
  v14 = v13 & 0x3FFFF;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 16 * (v13 >> 18));
  v16 = *(_QWORD *)(a1 + 32);
  if (!v16)
  {
    result = DgnPool::addChunk((DgnPool *)(a1 + 24));
    v16 = *(_QWORD *)(a1 + 32);
  }
  v17 = (_QWORD *)(v15 + 8 * v14);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v16;
  *(_DWORD *)(v16 + 8) = 0;
  v18 = *a2;
  *(_DWORD *)(v16 + 8) = v11;
  *(_DWORD *)(v16 + 12) = v18;
  ++*(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 20))
  {
    *(_QWORD *)v16 = *v17;
  }
  else
  {
    *(_QWORD *)v16 = 0;
    v19 = (_QWORD *)*v17;
    if (*v17)
    {
      do
      {
        v17 = v19;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
  }
  *v17 = v16;
  return result;
}

uint64_t HistoryMgr::extendHistory(uint64_t a1, int a2, int *a3, int a4, int a5, int a6, _BYTE *a7)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  __int128 v21;
  unint64_t v22;
  int v23;

  if (a6 == -32 || a5 == -32)
    v10 = -48;
  else
    v10 = a5;
  v11 = a3[1];
  v19 = *a3;
  v20 = v11;
  v21 = *(_OWORD *)(a3 + 2);
  if (!a4)
    v10 = a6;
  v22 = __PAIR64__(a6, v10);
  v23 = a2;
  v12 = a1 + 24;
  v18 = &v19;
  v13 = *HashKEVTLT<unsigned int,History const*,HistoryMgr>::findBucket(a1 + 24, (uint64_t *)&v18);
  if (v13)
  {
    *a7 = 0;
    return *(unsigned int *)(v13 + 12);
  }
  else
  {
    v15 = *(_DWORD *)(a1 + 16);
    v16 = *(_DWORD *)(a1 + 20);
    LODWORD(v18) = v15;
    if (v15 == v16)
    {
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(a1 + 8, 1, 1);
      v15 = *(_DWORD *)(a1 + 16);
    }
    v17 = *(_QWORD *)(a1 + 8) + 36 * v15;
    *(_DWORD *)v17 = v19;
    *(_DWORD *)(v17 + 4) = v20;
    *(_OWORD *)(v17 + 8) = v21;
    *(_QWORD *)(v17 + 24) = v22;
    *(_DWORD *)(v17 + 32) = v23;
    *(_DWORD *)(a1 + 16) = v15 + 1;
    HashKEVTLT<unsigned int,History const*,HistoryMgr>::add(v12, (unsigned int *)&v18);
    *a7 = 1;
    return v18;
  }
}

double HistoryMgr::getForwardContents(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 == -2)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = a2;
    v7 = a2;
    do
    {
      v5 = (v5 + 1);
      LODWORD(v7) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 36 * v7 + 32);
    }
    while ((_DWORD)v7 != -2);
    v8 = *(_DWORD *)(a3 + 12);
    if (v8 < v5)
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v5 - v8, 0);
    v10 = *(unsigned int *)(a3 + 8);
    if (v10 < v5)
    {
      v11 = v5 - v10;
      v12 = *(_QWORD *)a3 + 32 * v10;
      result = NAN;
      do
      {
        *(_QWORD *)v12 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v12 + 8) = xmmword_209A593D0;
        *(_QWORD *)(v12 + 24) = 0x1F0000001FLL;
        v12 += 32;
        --v11;
      }
      while (v11);
    }
    *(_DWORD *)(a3 + 8) = v5;
    if ((_DWORD)v5)
    {
      v13 = v5 - 1;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD *)a3;
      do
      {
        v16 = v14 + 36 * v6;
        v17 = v15 + 32 * v13;
        *(_DWORD *)v17 = *(_DWORD *)v16;
        *(_DWORD *)(v17 + 4) = *(_DWORD *)(v16 + 4);
        *(_OWORD *)(v17 + 8) = *(_OWORD *)(v16 + 8);
        result = *(double *)(v16 + 24);
        *(double *)(v17 + 24) = result;
        v6 = *(unsigned int *)(v16 + 32);
        --v13;
      }
      while ((_DWORD)v6 != -2);
    }
  }
  return result;
}

uint64_t HashKEVTLT<unsigned int,History const*,HistoryMgr>::HashKEVTLT(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C213598;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEVTLT<unsigned int,History const*,HistoryMgr>::initBuckets((uint64_t *)a1);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 12;
  else
    v7 = 16;
  *(_DWORD *)(a1 + 24) = 16;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  return a1;
}

void sub_209A3D93C(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnFixArray<DgnIFixArray<BucketLinkKEVTLT<unsigned int> *>>::releaseAll(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashKEVTLT<unsigned int,History const*,HistoryMgr>::~HashKEVTLT(uint64_t a1)
{
  HashKEVTLT<unsigned int,History const*,HistoryMgr>::~HashKEVTLT(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t HashKEVTLT<unsigned int,History const*,HistoryMgr>::computeDepth(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  unsigned int v9;

  v1 = *(unsigned int *)(a1 + 88);
  if (!(_DWORD)v1)
    return 0;
  v3 = 0;
  result = 0;
  v5 = *(_QWORD *)(a1 + 80);
  do
  {
    v6 = *(unsigned int *)(v5 + 16 * v3 + 8);
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        v8 = *(_QWORD **)(*(_QWORD *)(v5 + 16 * v3) + 8 * i);
        if (v8)
        {
          v9 = 0;
          do
          {
            v8 = (_QWORD *)*v8;
            ++v9;
          }
          while (v8);
          if (v9 <= result)
            result = result;
          else
            result = v9;
        }
      }
    }
    ++v3;
  }
  while (v3 != v1);
  return result;
}

uint64_t *HashKEVTLT<unsigned int,History const*,HistoryMgr>::initBuckets(uint64_t *result)
{
  uint64_t *v1;
  unsigned int v2;
  uint64_t *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;
  unint64_t v13;

  v1 = result;
  v2 = *((_DWORD *)result + 3);
  v3 = result + 10;
  v4 = *((_DWORD *)result + 22);
  if (v2 >= 0x40000)
  {
    if (v4
      || (result = DgnFixArray<DgnIFixArray<BucketLinkKEVTLT<unsigned int> *>>::allocElts((uint64_t)(result + 10), v2 >> 18), *((_DWORD *)v1 + 22)))
    {
      v5 = 0;
      v6 = *v3;
      do
      {
        v7 = v6 + 16 * v5;
        v9 = *(_DWORD *)(v7 + 8);
        v8 = (_DWORD *)(v7 + 8);
        if (v9
          || (result = MemChunkAlloc(0x200000uLL, 0),
              *(_QWORD *)(v6 + 16 * v5) = result,
              *v8 = 0x40000,
              v6 = *v3,
              *(_DWORD *)(*v3 + 16 * v5 + 8)))
        {
          v10 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)(v6 + 16 * v5) + 8 * v10++) = 0;
            v6 = *v3;
          }
          while (v10 < *(unsigned int *)(*v3 + 16 * v5 + 8));
        }
        ++v5;
      }
      while (v5 < *((unsigned int *)v1 + 22));
    }
    return result;
  }
  if (!v4)
  {
    result = MemChunkAlloc(0x10uLL, 0);
    v11 = result;
    v12 = 0;
    v1[10] = (uint64_t)result;
    *result = 0;
    *((_DWORD *)result + 2) = 0;
    *((_DWORD *)v1 + 22) = 1;
    v2 = *((_DWORD *)v1 + 3);
    if (!v2)
      goto LABEL_17;
LABEL_15:
    if (!v12)
    {
      result = MemChunkAlloc(8 * v2, 0);
      *v11 = (uint64_t)result;
      *((_DWORD *)v11 + 2) = v2;
      v11 = (uint64_t *)*v3;
      v12 = *(_DWORD *)(*v3 + 8);
    }
    goto LABEL_17;
  }
  v11 = (uint64_t *)*v3;
  v12 = *(_DWORD *)(*v3 + 8);
  if (v2)
    goto LABEL_15;
LABEL_17:
  if (v12)
  {
    v13 = 0;
    do
    {
      *(_QWORD *)(*v11 + 8 * v13++) = 0;
      v11 = (uint64_t *)*v3;
    }
    while (v13 < *(unsigned int *)(*v3 + 8));
  }
  return result;
}

uint64_t *DgnFixArray<DgnIFixArray<BucketLinkKEVTLT<unsigned int> *>>::allocElts(uint64_t a1, unsigned int a2)
{
  uint64_t *result;
  uint64_t v5;
  _DWORD *v6;

  result = MemChunkAlloc(16 * a2, 0);
  *(_QWORD *)a1 = result;
  if (a2)
  {
    v5 = a2;
    v6 = result + 1;
    do
    {
      *((_QWORD *)v6 - 1) = 0;
      *v6 = 0;
      v6 += 4;
      --v5;
    }
    while (v5);
  }
  *(_DWORD *)(a1 + 8) = a2;
  return result;
}

_QWORD *DgnFixArray<DgnIFixArray<BucketLinkKEVTLT<unsigned int> *>>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 16 * v2 - 16;
    do
    {
      DgnPrimFixArray<double>::~DgnPrimFixArray(*(_QWORD *)a1 + v3);
      v3 -= 16;
    }
    while (v3 != -16);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t HashKEVTLT<unsigned int,History const*,HistoryMgr>::~HashKEVTLT(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C213598;
  if (*(_DWORD *)(a1 + 8))
    HashKEVTLT<unsigned int,History const*,HistoryMgr>::removeAll(a1);
  DgnFixArray<DgnIFixArray<BucketLinkKEVTLT<unsigned int> *>>::releaseAll(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashKEVTLT<unsigned int,History const*,HistoryMgr>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t (*v9)(char *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(result + 80);
    do
    {
      if (*(_DWORD *)(v4 + 16 * v3 + 8))
      {
        v5 = 0;
        do
        {
          v6 = *(_QWORD *)(v4 + 16 * v3);
          v7 = *(char **)(v6 + 8 * v5);
          if (v7)
          {
            do
            {
              v8 = *(char **)v7;
              v9 = *(uint64_t (**)(char *))(v1 + 96);
              if (v9)
                result = v9(v7 + 12);
              *(_QWORD *)v7 = *(_QWORD *)(v1 + 32);
              *(_QWORD *)(v1 + 32) = v7;
              v7 = v8;
            }
            while (v8);
            v6 = *(_QWORD *)(*(_QWORD *)(v1 + 80) + 16 * v3);
          }
          *(_QWORD *)(v6 + 8 * v5++) = 0;
          v4 = *(_QWORD *)(v1 + 80);
        }
        while (v5 < *(unsigned int *)(v4 + 16 * v3 + 8));
        v2 = *(unsigned int *)(v1 + 88);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t sizeObject<DgnIFixArray<BucketLinkKEVTLT<unsigned int> *>>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v8;
  int v9;

  v2 = 0;
  v8 = 0;
  v9 = 0;
  if (a2 != 3)
  {
    v3 = 8;
    if (!gShadowDiagnosticShowIdealizedObjectSizes)
      v3 = 12;
    if ((a2 & 0xFFFFFFFE) == 2 || (v4 = *(unsigned int *)(a1 + 8), (int)v4 < 1))
    {
      v2 = v3;
    }
    else
    {
      v5 = 2;
      if (!gShadowDiagnosticShowIdealizedObjectSizes)
        v5 = 3;
      v6 = v4 + 1;
      v2 = v3;
      do
        v2 += ((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 16 * (v6-- - 2) + 8) << v5) + v3;
      while (v6 > 1);
    }
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v8);
  return v2;
}

_QWORD *HashKEVTLT<unsigned int,History const*,HistoryMgr>::upSize(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;

  v20 = 0;
  RoundUpToPowerOf2(a2, &v20);
  v18 = 0;
  v19 = 0;
  DgnFixArray<DgnIFixArray<BucketLinkKEVTLT<unsigned int> *>>::copyArraySlice(&v18, (_QWORD *)(a1 + 80), 0, *(_DWORD *)(a1 + 88));
  DgnFixArray<DgnIFixArray<BucketLinkKEVTLT<unsigned int> *>>::releaseAll(a1 + 80);
  v4 = v20;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = v4;
  HashKEVTLT<unsigned int,History const*,HistoryMgr>::initBuckets((uint64_t *)a1);
  v5 = v19;
  if (v19)
  {
    v6 = 0;
    v7 = v20;
    v8 = 32 - v20;
    v9 = v18;
    do
    {
      if (*(_DWORD *)(v9 + 16 * v6 + 8))
      {
        v10 = 0;
        do
        {
          v11 = *(uint64_t **)(*(_QWORD *)(v9 + 16 * v6) + 8 * v10);
          if (v11)
          {
            do
            {
              v12 = (uint64_t *)*v11;
              v13 = (-1640531527 * *((_DWORD *)v11 + 2)) >> v8;
              if (!v7)
                v13 = 0;
              v14 = 16 * (v13 >> 18);
              v15 = v13 & 0x3FFFF;
              v16 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + v14);
              *v11 = *(_QWORD *)(v16 + 8 * v15);
              *(_QWORD *)(v16 + 8 * v15) = v11;
              v11 = v12;
            }
            while (v12);
            v9 = v18;
          }
          ++v10;
        }
        while (v10 < *(unsigned int *)(v9 + 16 * v6 + 8));
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return DgnFixArray<DgnIFixArray<BucketLinkKEVTLT<unsigned int> *>>::releaseAll((uint64_t)&v18);
}

void sub_209A3DF04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnFixArray<DgnIFixArray<BucketLinkKEVTLT<unsigned int> *>>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *DgnFixArray<DgnIFixArray<BucketLinkKEVTLT<unsigned int> *>>::copyArraySlice(uint64_t *result, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;

  LODWORD(v4) = a4;
  v7 = result;
  if (!a4 || *((_DWORD *)result + 2))
  {
    if (!a4)
      return result;
  }
  else
  {
    DgnFixArray<DgnIFixArray<BucketLinkKEVTLT<unsigned int> *>>::allocElts((uint64_t)result, a4);
  }
  v8 = 0;
  v4 = v4;
  do
  {
    result = DgnIFixArray<BucketLinkKEV<unsigned int> *>::copyArraySlice((uint64_t *)(*v7 + v8), (_QWORD *)(*a2 + 16 * a3), 0, *(_DWORD *)(*a2 + 16 * a3 + 8));
    ++a3;
    v8 += 16;
    --v4;
  }
  while (v4);
  return result;
}

uint64_t *HashKEVTLT<unsigned int,History const*,HistoryMgr>::findBucket(uint64_t a1, uint64_t *a2)
{
  int v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;

  v4 = *(_DWORD *)(*a2 + 32);
  HIDWORD(v5) = *(_DWORD *)(*a2 + 24);
  LODWORD(v5) = HIDWORD(v5);
  v6 = (v5 >> 19) + *(_DWORD *)(*a2 + 28);
  v7 = CWIDAC::computeHash(*a2);
  HIDWORD(v5) = v6;
  LODWORD(v5) = v6;
  v8 = v5 >> 19;
  HIDWORD(v5) = v4;
  LODWORD(v5) = v4;
  v9 = v7 + (v5 >> 19) + v8;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
    v11 = (-1640531527 * v9) >> -(char)v10;
  else
    v11 = 0;
  v12 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 16 * (v11 >> 18)) + 8 * (v11 & 0x3FFFF));
  v13 = *v12;
  if (*v12)
  {
    do
    {
      v14 = (uint64_t *)v13;
      if (*(_DWORD *)(v13 + 8) == v9
        && History::operator==((_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 36 * *(unsigned int *)(v13 + 12)), (_DWORD *)*a2))
      {
        break;
      }
      v13 = *v14;
      v12 = v14;
    }
    while (*v14);
  }
  return v12;
}

BOOL History::operator==(_DWORD *a1, _DWORD *a2)
{
  _BOOL8 result;

  result = CWIDAC::operator==((uint64_t)a1, (uint64_t)a2);
  if (result)
    return a1[6] == a2[6] && a1[7] == a2[7] && a1[8] == a2[8];
  return result;
}

void MrecInitModule_crumb_kernel(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugCrumbBank)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugCrumbBank", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugCrumbBank = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugCrumbBank);
  }
}

uint64_t CWIDCrumbWACS::CWIDCrumbWACS(uint64_t a1, uint64_t a2, __int16 a3, _DWORD *a4, uint64_t *a5)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;

  *(_OWORD *)(a1 + 16) = 0u;
  v7 = (_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 8);
  *(_WORD *)(a1 + 56) = a3;
  *(_DWORD *)(a1 + 60) = *a4;
  *(_DWORD *)(a1 + 64) = a4[1];
  *(_DWORD *)(a1 + 68) = a4[2];
  v29 = 0;
  v30 = 0;
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)&v27, *((_DWORD *)a5 + 2));
  if (*((_DWORD *)a5 + 2))
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *a5;
      v11 = *a5 + v8;
      if (*(_DWORD *)(v11 + 8) == 1879048192)
      {
        *(_BYTE *)(v27 + v9) = -1;
      }
      else
      {
        v12 = DgnArray<HistoryAndBigScore>::find((unsigned int *)&v29, (_DWORD *)(*a5 + v8));
        if (v12 < 0)
        {
          *(_BYTE *)(v27 + v9) = v30;
          v13 = v30;
          if (v30 == (unint64_t)HIDWORD(v30))
          {
            DgnArray<RuleDesc>::reallocElts((uint64_t)&v29, 1, 1);
            v13 = v30;
          }
          v14 = (_DWORD *)(v29 + 12 * v13);
          *v14 = *(_DWORD *)(v10 + v8);
          v14[1] = *(_DWORD *)(v10 + v8 + 4);
          v14[2] = *(_DWORD *)(v11 + 8);
          LODWORD(v30) = v30 + 1;
        }
        else
        {
          *(_BYTE *)(v27 + v9) = v12;
        }
      }
      ++v9;
      v8 += 12;
    }
    while (v9 < *((unsigned int *)a5 + 2));
  }
  v15 = v28;
  if (*(_DWORD *)(a1 + 28) < v28)
  {
    v31 = 0;
    *(_DWORD *)(a1 + 28) = realloc_array(*(_QWORD **)(a1 + 16), &v31, v28, *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 24), 1);
    *(_QWORD *)(a1 + 16) = v31;
  }
  *(_DWORD *)(a1 + 24) = v15;
  if ((int)v15 >= 1)
  {
    v16 = v15 + 1;
    do
    {
      *(_BYTE *)(*v7 + (v16 - 2)) = *(_BYTE *)(v27 + (v16 - 2));
      --v16;
    }
    while (v16 > 1);
  }
  v17 = v30;
  v18 = *(_DWORD *)(a1 + 12);
  if (v30 > v18)
    DgnArray<RuleDesc>::reallocElts(a1, v30 - v18, 0);
  v19 = *(unsigned int *)(a1 + 8);
  if (v19 < v17)
  {
    v20 = v17 - v19;
    v21 = 12 * v19;
    do
    {
      v22 = *(_QWORD *)a1 + v21;
      *(_QWORD *)v22 = 0x70000000FFFFFFFELL;
      *(_DWORD *)(v22 + 8) = 1879048192;
      v21 += 12;
      --v20;
    }
    while (v20);
  }
  *(_DWORD *)(a1 + 8) = v17;
  if ((int)v17 >= 1)
  {
    v23 = v17 + 1;
    do
    {
      v24 = (_DWORD *)(v29 + 12 * (v23 - 2));
      v25 = (_DWORD *)(*(_QWORD *)a1 + 12 * (v23 - 2));
      *v25 = *v24;
      v25[2] = v24[2];
      v25[1] = v24[1];
      --v23;
    }
    while (v23 > 1);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v29);
  return a1;
}

void sub_209A3E3E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnIArray<Utterance *>::~DgnIArray(v2);
  _Unwind_Resume(a1);
}

uint64_t DgnArray<HistoryAndBigScore>::find(unsigned int *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *i;

  v2 = a1[2];
  if (!(_DWORD)v2)
    return 0xFFFFFFFFLL;
  result = 0;
  for (i = (_DWORD *)(*(_QWORD *)a1 + 8); *i != a2[2] || *(i - 1) != a2[1] || *(i - 2) != *a2; i += 3)
  {
    if (v2 == ++result)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CWIDCrumbWACS::mergeCrumb(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t i;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int j;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;

  v4 = *((__int16 *)a2 + 28);
  if (*(__int16 *)(a1 + 56) > v4)
    *(_WORD *)(a1 + 56) = v4;
  v5 = *((_DWORD *)a2 + 17);
  if (*(_DWORD *)(a1 + 68) > v5)
  {
    *(_DWORD *)(a1 + 60) = *((_DWORD *)a2 + 15);
    *(_DWORD *)(a1 + 68) = v5;
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  }
  v6 = *(_DWORD *)(a1 + 24);
  v7 = *((_DWORD *)a2 + 6);
  if (v6 <= v7)
    v8 = *((_DWORD *)a2 + 6);
  else
    v8 = *(_DWORD *)(a1 + 24);
  if (v6 >= v7)
    v9 = v7;
  else
    v9 = v6;
  v41 = 0;
  v42 = 0;
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)&v39, v8);
  if ((_DWORD)v9)
  {
    for (i = 0; v9 != i; ++i)
    {
      v11 = *(unsigned __int8 *)(a2[2] + i);
      if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + i) == 255)
      {
        if (v11 == 255)
        {
          *(_BYTE *)(v39 + i) = -1;
          continue;
        }
        v13 = DgnArray<HistoryAndBigScore>::find((unsigned int *)&v41, (_DWORD *)(*a2 + 12 * *(unsigned __int8 *)(a2[2] + i)));
        if (v13 < 0)
        {
          *(_BYTE *)(v39 + i) = v42;
          v14 = *(unsigned __int8 *)(a2[2] + i);
          v15 = *a2;
          v16 = v42;
          if (v42 != (unint64_t)HIDWORD(v42))
            goto LABEL_31;
          goto LABEL_30;
        }
      }
      else
      {
        v12 = *(_QWORD *)a1;
        if (v11 == 255)
        {
          v13 = DgnArray<HistoryAndBigScore>::find((unsigned int *)&v41, (_DWORD *)(v12 + 12 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + i)));
          if (v13 < 0)
          {
            *(_BYTE *)(v39 + i) = v42;
            v14 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + i);
            v15 = *(_QWORD *)a1;
            v16 = v42;
            if (v42 != (unint64_t)HIDWORD(v42))
              goto LABEL_31;
            goto LABEL_30;
          }
        }
        else if (*(_DWORD *)(v12 + 12 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + i) + 8) <= *(_DWORD *)(*a2 + 12 * *(unsigned __int8 *)(a2[2] + i) + 8))
        {
          v13 = DgnArray<HistoryAndBigScore>::find((unsigned int *)&v41, (_DWORD *)(v12 + 12 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + i)));
          if (v13 < 0)
          {
            *(_BYTE *)(v39 + i) = v42;
            v14 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + i);
            v15 = *(_QWORD *)a1;
            v16 = v42;
            if (v42 == (unint64_t)HIDWORD(v42))
              goto LABEL_30;
LABEL_31:
            v17 = (_DWORD *)(v41 + 12 * v16);
            *v17 = *(_DWORD *)(v15 + 12 * v14);
            v18 = v15 + 12 * v14;
            v17[1] = *(_DWORD *)(v18 + 4);
            v17[2] = *(_DWORD *)(v18 + 8);
            LODWORD(v42) = v42 + 1;
            continue;
          }
        }
        else
        {
          v13 = DgnArray<HistoryAndBigScore>::find((unsigned int *)&v41, (_DWORD *)(*a2 + 12 * *(unsigned __int8 *)(a2[2] + i)));
          if (v13 < 0)
          {
            *(_BYTE *)(v39 + i) = v42;
            v14 = *(unsigned __int8 *)(a2[2] + i);
            v15 = *a2;
            v16 = v42;
            if (v42 != (unint64_t)HIDWORD(v42))
              goto LABEL_31;
LABEL_30:
            DgnArray<RuleDesc>::reallocElts((uint64_t)&v41, 1, 1);
            v16 = v42;
            goto LABEL_31;
          }
        }
      }
      *(_BYTE *)(v39 + i) = v13;
    }
  }
  if (v9 < v8)
  {
    if (v6 <= v7)
      v19 = v7;
    else
      v19 = v6;
    for (j = v19 - v9; j; --j)
    {
      if (v7 <= v6)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v9) == 255)
        {
LABEL_46:
          *(_BYTE *)(v39 + v9) = -1;
          goto LABEL_50;
        }
        v21 = DgnArray<HistoryAndBigScore>::find((unsigned int *)&v41, (_DWORD *)(*(_QWORD *)a1 + 12 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v9)));
        if (v21 < 0)
        {
          *(_BYTE *)(v39 + v9) = v42;
          v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v9);
          v23 = *(_QWORD *)a1;
          v24 = v42;
          if (v42 == (unint64_t)HIDWORD(v42))
            goto LABEL_48;
          goto LABEL_49;
        }
      }
      else
      {
        if (*(unsigned __int8 *)(a2[2] + v9) == 255)
          goto LABEL_46;
        v21 = DgnArray<HistoryAndBigScore>::find((unsigned int *)&v41, (_DWORD *)(*a2 + 12 * *(unsigned __int8 *)(a2[2] + v9)));
        if (v21 < 0)
        {
          *(_BYTE *)(v39 + v9) = v42;
          v22 = *(unsigned __int8 *)(a2[2] + v9);
          v23 = *a2;
          v24 = v42;
          if (v42 == (unint64_t)HIDWORD(v42))
          {
LABEL_48:
            DgnArray<RuleDesc>::reallocElts((uint64_t)&v41, 1, 1);
            v24 = v42;
          }
LABEL_49:
          v25 = (_DWORD *)(v41 + 12 * v24);
          *v25 = *(_DWORD *)(v23 + 12 * v22);
          v26 = v23 + 12 * v22;
          v25[1] = *(_DWORD *)(v26 + 4);
          v25[2] = *(_DWORD *)(v26 + 8);
          LODWORD(v42) = v42 + 1;
          goto LABEL_50;
        }
      }
      *(_BYTE *)(v39 + v9) = v21;
LABEL_50:
      ++v9;
    }
  }
  v27 = v40;
  if (*(_DWORD *)(a1 + 28) < v40)
  {
    v43 = 0;
    *(_DWORD *)(a1 + 28) = realloc_array(*(_QWORD **)(a1 + 16), &v43, v40, *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 24), 1);
    *(_QWORD *)(a1 + 16) = v43;
  }
  *(_DWORD *)(a1 + 24) = v27;
  if ((int)v27 >= 1)
  {
    v28 = v27 + 1;
    do
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 16) + (v28 - 2)) = *(_BYTE *)(v39 + (v28 - 2));
      --v28;
    }
    while (v28 > 1);
  }
  v29 = v42;
  v30 = *(_DWORD *)(a1 + 12);
  if (v42 > v30)
    DgnArray<RuleDesc>::reallocElts(a1, v42 - v30, 0);
  v31 = *(unsigned int *)(a1 + 8);
  if (v31 < v29)
  {
    v32 = v29 - v31;
    v33 = 12 * v31;
    do
    {
      v34 = *(_QWORD *)a1 + v33;
      *(_QWORD *)v34 = 0x70000000FFFFFFFELL;
      *(_DWORD *)(v34 + 8) = 1879048192;
      v33 += 12;
      --v32;
    }
    while (v32);
  }
  *(_DWORD *)(a1 + 8) = v29;
  if ((int)v29 >= 1)
  {
    v35 = v29 + 1;
    do
    {
      v36 = (_DWORD *)(v41 + 12 * (v35 - 2));
      v37 = (_DWORD *)(*(_QWORD *)a1 + 12 * (v35 - 2));
      *v37 = *v36;
      v37[2] = v36[2];
      v37[1] = v36[1];
      --v35;
    }
    while (v35 > 1);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v41);
}

void sub_209A3E94C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *CWIDCrumbWACS::updateCrumbHistory(uint64_t *result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;

  v2 = *((_DWORD *)result + 15);
  if (v2 != -2)
    *((_DWORD *)result + 15) = v2 + a2;
  v3 = *((unsigned int *)result + 2);
  if ((int)v3 >= 1)
  {
    v4 = *result;
    v5 = v3 + 1;
    do
    {
      v6 = (_DWORD *)(v4 + 12 * (v5 - 2));
      if (*v6 != -2)
        *v6 += a2;
      --v5;
    }
    while (v5 > 1);
  }
  return result;
}

void CWIDCrumbWACSFrame::~CWIDCrumbWACSFrame(CWIDCrumbWACSFrame *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    (*(void (**)(_QWORD))*v2)(*((_QWORD *)this + 4));
    MemChunkFree(v2, 0);
  }
  DgnArray<CWIDCrumbWACS>::releaseAll((uint64_t)this);
}

__n128 CWIDCrumbWACSFrame::copy(__n128 *this, __n128 *a2)
{
  void (***v4)(unint64_t);
  __n128 result;

  DgnArray<CWIDCrumbWACS>::copyArraySlice((uint64_t)this, a2, 0, a2->n128_u32[2]);
  v4 = (void (***)(unint64_t))this[2].n128_u64[0];
  if (v4)
  {
    (**v4)(this[2].n128_u64[0]);
    MemChunkFree(v4, 0);
  }
  this[2].n128_u64[0] = 0;
  result = a2[1];
  this[1] = result;
  this[2].n128_u32[2] = a2[2].n128_u32[2];
  this[2].n128_u16[6] = a2[2].n128_u16[6];
  return result;
}

unsigned int *CWIDCrumbWACSFrame::mergeCrumbs(unsigned int *this, const HistoryMgr *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *Bucket;
  _QWORD *v10;
  int v11;

  v2 = this[2];
  if ((_DWORD)v2)
  {
    v3 = (uint64_t)this;
    v4 = (_DWORD *)(*(_QWORD *)this + 48);
    do
    {
      *v4 = -83886084;
      v4 += 18;
      --v2;
    }
    while (v2);
    v5 = MemChunkAlloc(0x70uLL, 0);
    Hash<CWIDAC,CWIDAC,CWIDAC,unsigned int>::Hash((uint64_t)v5, 0, 2 * *(_DWORD *)(v3 + 8));
    v6 = *(unsigned int *)(v3 + 8);
    if ((int)v6 >= 1)
    {
      do
      {
        --v6;
        v7 = *(_QWORD *)v3;
        v8 = *(_QWORD *)v3 + 72 * v6 + 32;
        if (*Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket((uint64_t)v5, v8))
        {
          Bucket = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket((uint64_t)v5, v8);
          CWIDCrumbWACS::mergeCrumb(*(_QWORD *)v3 + 72 * *(unsigned int *)(*Bucket + 36), (uint64_t *)(v7 + 72 * v6));
          *(_DWORD *)(*Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket((uint64_t)v5, *(_QWORD *)v3 + 72 * (*(_DWORD *)(v3 + 8) - 1) + 32)+ 36) = v6;
          DgnArray<CWIDCrumbWACS>::removeIndex(v3, v6);
        }
        else
        {
          v11 = v6;
          Hash<CWIDAC,CWIDAC,CWIDAC,unsigned int>::add((uint64_t)v5, v8, &v11);
        }
      }
      while ((unint64_t)(v6 + 1) > 1);
      LODWORD(v6) = *(_DWORD *)(v3 + 8);
    }
    this = (unsigned int *)mrec_qsort_r<CWIDCrumbWACS>(*(_QWORD *)v3, v6, 0x48uLL, 0);
    if (v5)
    {
      (*(void (**)(uint64_t *))*v5)(v5);
      this = (unsigned int *)MemChunkFree(v5, 0);
    }
    v10 = *(_QWORD **)(v3 + 32);
    if (v10)
    {
      (*(void (**)(_QWORD))*v10)(*(_QWORD *)(v3 + 32));
      this = (unsigned int *)MemChunkFree(v10, 0);
    }
    *(_QWORD *)(v3 + 32) = 0;
  }
  return this;
}

uint64_t Hash<CWIDAC,CWIDAC,CWIDAC,unsigned int>::add(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6;
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;

  v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1)
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v6);
  result = CWIDAC::computeHash(a2);
  v8 = result;
  v9 = *(_DWORD *)(a1 + 16);
  if (v9)
    v10 = (-1640531527 * result) >> -(char)v9;
  else
    v10 = 0;
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 32);
  if (!v12)
  {
    result = DgnPool::addChunk((DgnPool *)(a1 + 24));
    v12 = *(_QWORD *)(a1 + 32);
  }
  v13 = (_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v12;
  v14 = *(_DWORD *)a2;
  *(_DWORD *)(v12 + 8) = 0;
  *(_DWORD *)(v12 + 12) = v14;
  *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(v12 + 20) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(v12 + 36) = *a3;
  *(_DWORD *)(v12 + 8) = v8;
  ++*(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 20))
  {
    *(_QWORD *)v12 = *v13;
  }
  else
  {
    *(_QWORD *)v12 = 0;
    v15 = (_QWORD *)*v13;
    if (*v13)
    {
      do
      {
        v13 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
  }
  *v13 = v12;
  return result;
}

unint64_t DgnArray<CWIDCrumbWACS>::removeIndex(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  v3 = (*(_DWORD *)(a1 + 8) - 1);
  result = CWIDCrumbWACS::operator=(*(_QWORD *)a1 + 72 * a2, *(_QWORD *)a1 + 72 * v3);
  v5 = *(unsigned int *)(a1 + 8);
  if (v5 <= v3)
  {
    if (v5 < v3)
    {
      v6 = v3 - v5;
      v7 = 72 * v5 + 68;
      do
      {
        v8 = (_DWORD *)(*(_QWORD *)a1 + v7);
        *(_OWORD *)(v8 - 13) = 0uLL;
        *(_OWORD *)(v8 - 17) = 0uLL;
        *(v8 - 8) = 0x3FFF;
        *(_OWORD *)(v8 - 7) = xmmword_209A593D0;
        *((_WORD *)v8 - 6) = 20000;
        *((_QWORD *)v8 - 1) = 0x70000000FFFFFFFELL;
        *v8 = 1879048192;
        v7 += 72;
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    result = DgnArray<CWIDCrumbWACS>::destructAt(a1, v3, (int)v5 - (int)v3);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

uint64_t mrec_qsort_r<CWIDCrumbWACS>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BYTE *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _BYTE *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char v70;
  int v71;
  _QWORD *v72;
  _QWORD *v73;
  _BYTE *v74;
  _QWORD *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  int64_t v96;
  unint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char v104;
  BOOL v105;
  int64_t v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  int v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  int v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  _BOOL4 v144;
  unint64_t v145;
  BOOL v146;
  int v147;

  v5 = a2;
  v6 = result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v146 = ((result | a3) & 7) == 0;
  v147 = v8;
  if (a2 < 7)
  {
LABEL_185:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v114 = v6 + v5 * a3;
      v115 = v6 + a3;
      v116 = v6;
      do
      {
        if (v115 > v6)
        {
          v117 = v116;
          v118 = v115;
          do
          {
            v119 = (uint64_t *)v118;
            v118 += v7;
            v120 = *(unsigned __int16 *)(v118 + 56);
            v121 = *((unsigned __int16 *)v119 + 28);
            if (v120 == v121)
              result = CWIDAC::cmp(v118 + 32, (uint64_t)(v119 + 4));
            else
              result = ((__int16)v120 - (__int16)v121);
            if ((int)result < 1)
              break;
            if (v147)
            {
              if (v146)
              {
                v122 = 0;
                v123 = v117 + a3;
                do
                {
                  v124 = *(_QWORD *)(v123 + 8 * v122);
                  *(_QWORD *)(v123 + 8 * v122) = *(_QWORD *)(v117 + 8 * v122);
                  *(_QWORD *)(v117 + 8 * v122++) = v124;
                }
                while (a3 >> 3 != v122);
              }
              else
              {
                v126 = 0;
                v127 = v117 + a3;
                do
                {
                  v128 = *(_BYTE *)(v127 + v126);
                  *(_BYTE *)(v127 + v126) = *(_BYTE *)(v117 + v126);
                  *(_BYTE *)(v117 + v126++) = v128;
                }
                while (a3 != v126);
              }
            }
            else
            {
              v125 = *v119;
              *v119 = *(_QWORD *)v118;
              *(_QWORD *)v118 = v125;
            }
            v117 += v7;
          }
          while (v118 > v6);
        }
        v115 += a3;
        v116 += a3;
      }
      while (v115 < v114);
    }
    return result;
  }
  v9 = a3 >> 3;
  v144 = a3 != 8;
  while (1)
  {
    v10 = (_BYTE *)(v6 + (v5 >> 1) * a3);
    v145 = v5;
    if (v5 == 7)
      goto LABEL_106;
    v11 = v6 + (v5 - 1) * a3;
    if (v5 < 0x29)
    {
      v13 = v6;
      v17 = v6 + (v5 - 1) * a3;
      goto LABEL_82;
    }
    v12 = (v5 >> 3) * a3;
    v13 = v6 + v12;
    v14 = *(unsigned __int16 *)(v6 + 56);
    if (v14 == *(unsigned __int16 *)(v6 + v12 + 56))
    {
      v15 = CWIDAC::cmp(v6 + 32, v13 + 32);
      v16 = *(unsigned __int16 *)(v13 + 56);
    }
    else
    {
      v18 = (__int16)v14;
      v16 = *(unsigned __int16 *)(v6 + v12 + 56);
      v15 = v18 - *(__int16 *)(v6 + v12 + 56);
    }
    v19 = v6 + 2 * v12;
    v20 = *(__int16 *)(v19 + 56);
    if (v15 < 0)
    {
      if (v16 == *(unsigned __int16 *)(v19 + 56))
      {
        if ((CWIDAC::cmp(v13 + 32, v19 + 32) & 0x80000000) != 0)
          goto LABEL_33;
      }
      else if ((__int16)v16 - v20 < 0)
      {
        goto LABEL_33;
      }
      v25 = *(unsigned __int16 *)(v6 + 56);
      v26 = *(unsigned __int16 *)(v19 + 56);
      v27 = v25 == v26 ? CWIDAC::cmp(v6 + 32, v19 + 32) : (__int16)v25 - (__int16)v26;
      v13 = v27 >= 0 ? v6 : v6 + 2 * v12;
    }
    else
    {
      if (v16 == *(unsigned __int16 *)(v19 + 56))
        v21 = CWIDAC::cmp(v13 + 32, v19 + 32);
      else
        v21 = (__int16)v16 - v20;
      if (v21 <= 0)
      {
        v22 = *(unsigned __int16 *)(v6 + 56);
        v23 = *(unsigned __int16 *)(v19 + 56);
        if (v22 == v23)
          v24 = CWIDAC::cmp(v6 + 32, v19 + 32);
        else
          v24 = (__int16)v22 - (__int16)v23;
        if (v24 >= 0)
          v13 = v6 + 2 * v12;
        else
          v13 = v6;
      }
    }
LABEL_33:
    v28 = &v10[-v12];
    v29 = *(unsigned __int16 *)&v10[-v12 + 56];
    if (v29 == *((unsigned __int16 *)v10 + 28))
    {
      v30 = CWIDAC::cmp((uint64_t)(v28 + 32), (uint64_t)(v10 + 32));
      v31 = *((unsigned __int16 *)v10 + 28);
    }
    else
    {
      v32 = (__int16)v29;
      v31 = *((unsigned __int16 *)v10 + 28);
      v30 = v32 - *((__int16 *)v10 + 28);
    }
    v33 = &v10[v12];
    v34 = *(__int16 *)&v10[v12 + 56];
    if (v30 < 0)
    {
      if (v31 == *(unsigned __int16 *)&v10[v12 + 56])
      {
        if ((CWIDAC::cmp((uint64_t)(v10 + 32), (uint64_t)(v33 + 32)) & 0x80000000) != 0)
          goto LABEL_57;
      }
      else if ((__int16)v31 - v34 < 0)
      {
        goto LABEL_57;
      }
      v39 = *((unsigned __int16 *)v28 + 28);
      v40 = *((unsigned __int16 *)v33 + 28);
      v41 = v39 == v40 ? CWIDAC::cmp((uint64_t)(v28 + 32), (uint64_t)(v33 + 32)) : (__int16)v39 - (__int16)v40;
      if (v41 >= 0)
        v10 -= v12;
      else
        v10 += v12;
    }
    else
    {
      if (v31 == *(unsigned __int16 *)&v10[v12 + 56])
        v35 = CWIDAC::cmp((uint64_t)(v10 + 32), (uint64_t)(v33 + 32));
      else
        v35 = (__int16)v31 - v34;
      if (v35 <= 0)
      {
        v36 = *((unsigned __int16 *)v28 + 28);
        v37 = *((unsigned __int16 *)v33 + 28);
        if (v36 == v37)
          v38 = CWIDAC::cmp((uint64_t)(v28 + 32), (uint64_t)(v33 + 32));
        else
          v38 = (__int16)v36 - (__int16)v37;
        if (v38 >= 0)
          v10 += v12;
        else
          v10 -= v12;
      }
    }
LABEL_57:
    v42 = v11 - 2 * v12;
    v17 = v11 - v12;
    v43 = *(unsigned __int16 *)(v42 + 56);
    if (v43 == *(unsigned __int16 *)(v17 + 56))
    {
      v44 = CWIDAC::cmp(v42 + 32, v17 + 32);
      v45 = *(unsigned __int16 *)(v17 + 56);
    }
    else
    {
      v46 = (__int16)v43;
      v45 = *(unsigned __int16 *)(v17 + 56);
      v44 = v46 - *(__int16 *)(v17 + 56);
    }
    v47 = *(__int16 *)(v11 + 56);
    if ((v44 & 0x80000000) == 0)
    {
      if (v45 == *(unsigned __int16 *)(v11 + 56))
        v48 = CWIDAC::cmp(v17 + 32, v11 + 32);
      else
        v48 = (__int16)v45 - v47;
      if (v48 <= 0)
      {
        v49 = *(unsigned __int16 *)(v42 + 56);
        v50 = *(unsigned __int16 *)(v11 + 56);
        if (v49 == v50)
          v51 = CWIDAC::cmp(v42 + 32, v11 + 32);
        else
          v51 = (__int16)v49 - (__int16)v50;
        if (v51 >= 0)
          v17 = v11;
        else
          v17 = v42;
      }
      goto LABEL_81;
    }
    if (v45 == *(unsigned __int16 *)(v11 + 56))
    {
      if ((CWIDAC::cmp(v17 + 32, v11 + 32) & 0x80000000) == 0)
        goto LABEL_71;
    }
    else if ((((__int16)v45 - v47) & 0x80000000) == 0)
    {
LABEL_71:
      v52 = *(unsigned __int16 *)(v42 + 56);
      v53 = *(unsigned __int16 *)(v11 + 56);
      if (v52 == v53)
        v54 = CWIDAC::cmp(v42 + 32, v11 + 32);
      else
        v54 = (__int16)v52 - (__int16)v53;
      if (v54 >= 0)
        v17 = v42;
      else
        v17 = v11;
    }
LABEL_81:
    v5 = v145;
LABEL_82:
    v55 = *(unsigned __int16 *)(v13 + 56);
    if (v55 == *((unsigned __int16 *)v10 + 28))
    {
      v56 = CWIDAC::cmp(v13 + 32, (uint64_t)(v10 + 32));
      v57 = *((unsigned __int16 *)v10 + 28);
    }
    else
    {
      v58 = (__int16)v55;
      v57 = *((unsigned __int16 *)v10 + 28);
      v56 = v58 - *((__int16 *)v10 + 28);
    }
    v59 = *(__int16 *)(v17 + 56);
    if (v56 < 0)
    {
      if (v57 == *(unsigned __int16 *)(v17 + 56))
      {
        result = CWIDAC::cmp((uint64_t)(v10 + 32), v17 + 32);
        if ((result & 0x80000000) != 0)
          goto LABEL_106;
      }
      else
      {
        result = ((__int16)v57 - v59);
        if ((result & 0x80000000) != 0)
          goto LABEL_106;
      }
      v62 = *(unsigned __int16 *)(v13 + 56);
      v63 = *(unsigned __int16 *)(v17 + 56);
      result = v62 == v63 ? CWIDAC::cmp(v13 + 32, v17 + 32) : ((__int16)v62 - (__int16)v63);
      v10 = (_BYTE *)((int)result >= 0 ? v13 : v17);
    }
    else
    {
      if (v57 == *(unsigned __int16 *)(v17 + 56))
        result = CWIDAC::cmp((uint64_t)(v10 + 32), v17 + 32);
      else
        result = ((__int16)v57 - v59);
      if ((int)result <= 0)
      {
        v60 = *(unsigned __int16 *)(v13 + 56);
        v61 = *(unsigned __int16 *)(v17 + 56);
        if (v60 == v61)
          result = CWIDAC::cmp(v13 + 32, v17 + 32);
        else
          result = ((__int16)v60 - (__int16)v61);
        if ((int)result >= 0)
          v10 = (_BYTE *)v17;
        else
          v10 = (_BYTE *)v13;
      }
    }
LABEL_106:
    if (v147)
    {
      if (v146)
      {
        v64 = (uint64_t *)v6;
        v65 = a3 >> 3;
        do
        {
          v66 = *v64;
          *v64++ = *(_QWORD *)v10;
          *(_QWORD *)v10 = v66;
          v10 += 8;
          --v65;
        }
        while (v65);
      }
      else
      {
        v68 = a3;
        v69 = (char *)v6;
        do
        {
          v70 = *v69;
          *v69++ = *v10;
          *v10++ = v70;
          --v68;
        }
        while (v68);
      }
    }
    else
    {
      v67 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v67;
    }
    v71 = 0;
    v72 = (_QWORD *)(v6 + (v5 - 1) * a3);
    v73 = v72;
    v74 = (_BYTE *)(v6 + a3);
    v75 = (_QWORD *)(v6 + a3);
LABEL_115:
    while (v74 <= (_BYTE *)v73)
    {
      v76 = *((unsigned __int16 *)v74 + 28);
      v77 = *(unsigned __int16 *)(v6 + 56);
      result = v76 == v77 ? CWIDAC::cmp((uint64_t)(v74 + 32), v6 + 32) : ((__int16)v76 - (__int16)v77);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v147)
        {
          if (v146)
          {
            v78 = 0;
            do
            {
              v79 = v75[v78];
              v75[v78] = *(_QWORD *)&v74[8 * v78];
              *(_QWORD *)&v74[8 * v78++] = v79;
            }
            while (v9 != v78);
          }
          else
          {
            v88 = 0;
            do
            {
              v89 = *((_BYTE *)v75 + v88);
              *((_BYTE *)v75 + v88) = v74[v88];
              v74[v88++] = v89;
            }
            while (a3 != v88);
          }
        }
        else
        {
          v87 = *v75;
          *v75 = *(_QWORD *)v74;
          *(_QWORD *)v74 = v87;
        }
        v75 = (_QWORD *)((char *)v75 + a3);
        v71 = 1;
      }
      v74 += a3;
    }
    while (v74 <= (_BYTE *)v73)
    {
      v80 = *((unsigned __int16 *)v73 + 28);
      v81 = *(unsigned __int16 *)(v6 + 56);
      if (v80 == v81)
      {
        result = CWIDAC::cmp((uint64_t)(v73 + 4), v6 + 32);
        if ((result & 0x80000000) != 0)
          goto LABEL_147;
      }
      else
      {
        result = ((__int16)v80 - (__int16)v81);
        if ((result & 0x80000000) != 0)
        {
LABEL_147:
          if (v147)
          {
            if (v146)
            {
              v90 = 0;
              do
              {
                v91 = *(_QWORD *)&v74[8 * v90];
                *(_QWORD *)&v74[8 * v90] = v73[v90];
                v73[v90++] = v91;
              }
              while (v9 != v90);
            }
            else
            {
              v93 = 0;
              do
              {
                v94 = v74[v93];
                v74[v93] = *((_BYTE *)v73 + v93);
                *((_BYTE *)v73 + v93++) = v94;
              }
              while (a3 != v93);
            }
          }
          else
          {
            v92 = *(_QWORD *)v74;
            *(_QWORD *)v74 = *v73;
            *v73 = v92;
          }
          v74 += a3;
          v73 = (_QWORD *)((char *)v73 + v7);
          v71 = 1;
          goto LABEL_115;
        }
      }
      if (!(_DWORD)result)
      {
        if (v147)
        {
          if (v146)
          {
            v82 = 0;
            do
            {
              v83 = v73[v82];
              v73[v82] = v72[v82];
              v72[v82++] = v83;
            }
            while (v9 != v82);
          }
          else
          {
            v85 = 0;
            do
            {
              v86 = *((_BYTE *)v73 + v85);
              *((_BYTE *)v73 + v85) = *((_BYTE *)v72 + v85);
              *((_BYTE *)v72 + v85++) = v86;
            }
            while (a3 != v85);
          }
        }
        else
        {
          v84 = *v73;
          *v73 = *v72;
          *v72 = v84;
        }
        v72 = (_QWORD *)((char *)v72 + v7);
        v71 = 1;
      }
      v73 = (_QWORD *)((char *)v73 + v7);
    }
    v95 = v6 + v145 * a3;
    if (!v71)
      break;
    v96 = v74 - (_BYTE *)v75;
    if ((uint64_t)((uint64_t)v75 - v6) >= v74 - (_BYTE *)v75)
      v97 = v74 - (_BYTE *)v75;
    else
      v97 = (unint64_t)v75 - v6;
    if (v97)
    {
      if (v146)
      {
        v98 = (uint64_t *)&v74[-v97];
        v99 = v97 >> 3;
        v100 = (uint64_t *)v6;
        do
        {
          v101 = *v100;
          *v100++ = *v98;
          *v98++ = v101;
          --v99;
        }
        while (v99);
      }
      else
      {
        v102 = -(uint64_t)v97;
        v103 = (char *)v6;
        do
        {
          v104 = *v103;
          *v103++ = v74[v102];
          v74[v102] = v104;
          v105 = __CFADD__(v102++, 1);
        }
        while (!v105);
      }
    }
    v106 = (char *)v72 - (char *)v73;
    if (v106 >= (uint64_t)(v95 - ((_QWORD)v72 + a3)))
      v107 = v95 - ((_QWORD)v72 + a3);
    else
      v107 = v106;
    if (v107)
    {
      if (v146)
      {
        v108 = (_QWORD *)(v95 - v107);
        v109 = v107 >> 3;
        do
        {
          v110 = *(_QWORD *)v74;
          *(_QWORD *)v74 = *v108;
          v74 += 8;
          *v108++ = v110;
          --v109;
        }
        while (v109);
      }
      else
      {
        v111 = -(uint64_t)v107;
        do
        {
          v112 = *v74;
          *v74++ = *(_BYTE *)(v95 + v111);
          *(_BYTE *)(v95 + v111) = v112;
          v105 = __CFADD__(v111++, 1);
        }
        while (!v105);
      }
    }
    if (v96 > (uint64_t)a3)
      result = mrec_qsort_r<CWIDCrumbWACS>(v6, v96 / a3, a3, a4);
    if (v106 <= (uint64_t)a3)
      return result;
    v6 = v95 - v106;
    v5 = v106 / a3;
    v113 = v144;
    if (((((_DWORD)v95 - (_DWORD)v106) | a3) & 7) != 0)
      v113 = 2;
    v146 = ((((_DWORD)v95 - (_DWORD)v106) | a3) & 7) == 0;
    v147 = v113;
    if (v5 < 7)
      goto LABEL_185;
  }
  v129 = v6 + a3;
  if ((uint64_t)(v145 * a3) > (uint64_t)a3)
  {
    v130 = v6;
    do
    {
      if (v129 > v6)
      {
        v131 = v130;
        v132 = v129;
        do
        {
          v133 = (uint64_t *)v132;
          v132 += v7;
          v134 = *(unsigned __int16 *)(v132 + 56);
          v135 = *((unsigned __int16 *)v133 + 28);
          if (v134 == v135)
            result = CWIDAC::cmp(v132 + 32, (uint64_t)(v133 + 4));
          else
            result = ((__int16)v134 - (__int16)v135);
          if ((int)result < 1)
            break;
          if (v147)
          {
            if (v146)
            {
              v136 = 0;
              v137 = v131 + a3;
              do
              {
                v138 = *(_QWORD *)(v137 + 8 * v136);
                *(_QWORD *)(v137 + 8 * v136) = *(_QWORD *)(v131 + 8 * v136);
                *(_QWORD *)(v131 + 8 * v136++) = v138;
              }
              while (v9 != v136);
            }
            else
            {
              v140 = 0;
              v141 = v131 + a3;
              do
              {
                v142 = *(_BYTE *)(v141 + v140);
                *(_BYTE *)(v141 + v140) = *(_BYTE *)(v131 + v140);
                *(_BYTE *)(v131 + v140++) = v142;
              }
              while (a3 != v140);
            }
          }
          else
          {
            v139 = *v133;
            *v133 = *(_QWORD *)v132;
            *(_QWORD *)v132 = v139;
          }
          v131 += v7;
        }
        while (v132 > v6);
      }
      v129 += a3;
      v130 += a3;
    }
    while (v129 < v95);
  }
  return result;
}

uint64_t *CWIDCrumbWACSFrame::updateCrumbHistory(uint64_t *result, int a2)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  unint64_t v6;

  v3 = result;
  v4 = *((_DWORD *)result + 4);
  if (v4 != -2)
    *((_DWORD *)result + 4) = v4 + a2;
  if (*((_DWORD *)result + 2))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      result = CWIDCrumbWACS::updateCrumbHistory((uint64_t *)(*v3 + v5), a2);
      ++v6;
      v5 += 72;
    }
    while (v6 < *((unsigned int *)v3 + 2));
  }
  return result;
}

uint64_t CWIDCrumbWACSFrame::addCrumbWACSRecord(uint64_t a1, uint64_t a2, __int16 a3, _DWORD *a4, uint64_t *a5)
{
  unsigned int v6;
  _BYTE v8[16];
  uint64_t v9;

  CWIDCrumbWACS::CWIDCrumbWACS((uint64_t)v8, a2, a3, a4, a5);
  v6 = *(_DWORD *)(a1 + 8);
  if (v6 == *(_DWORD *)(a1 + 12))
  {
    DgnArray<LinearTransform>::reallocElts(a1, 1, 1);
    v6 = *(_DWORD *)(a1 + 8);
  }
  CWIDCrumbWACS::CWIDCrumbWACS(*(_QWORD *)a1 + 72 * v6, (uint64_t)v8);
  ++*(_DWORD *)(a1 + 8);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v9);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)v8);
}

void sub_209A3F974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CWIDCrumbWACSFrame::addCrumbWACSRecordEFst(uint64_t a1, uint64_t a2, __int16 a3, _DWORD *a4, uint64_t *a5, unsigned int a6)
{
  uint64_t v12;
  uint64_t result;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  _DWORD *v22;
  unsigned int v23;
  _QWORD **v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  _DWORD *v30;
  _DWORD *v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  _DWORD *v41;
  uint64_t v42;
  unsigned int v43;
  _DWORD *v44;
  uint64_t v45;
  void *v46[2];
  uint64_t v47;

  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
  {
    result = (uint64_t)Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(v12, a2);
    if (!*(_QWORD *)result)
      goto LABEL_17;
    v14 = *(_DWORD *)(*(_QWORD *)result + 36);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 8))
      goto LABEL_17;
    v15 = 0;
    v14 = -1;
    v16 = 32;
    do
    {
      result = CWIDAC::operator==(*(_QWORD *)a1 + v16, a2);
      if ((_DWORD)result)
        v14 = v15;
      ++v15;
      v16 += 72;
    }
    while (v15 < *(unsigned int *)(a1 + 8));
  }
  if (v14 != -1)
  {
    if (a6 != 0xFFFF)
    {
      v17 = *(_QWORD *)a1;
      v18 = v14;
      v19 = *(_QWORD *)a1 + 72 * v14;
      if (*(__int16 *)(v19 + 56) > a3)
        *(_WORD *)(v19 + 56) = a3;
      v20 = v17 + 72 * v14;
      v23 = *(_DWORD *)(v20 + 24);
      v22 = (_DWORD *)(v20 + 24);
      v21 = v23;
      v24 = (_QWORD **)(v22 - 2);
      if (v23 <= a6)
      {
        v33 = v17 + 72 * v18;
        v35 = *(_DWORD *)(v33 + 28);
        v34 = (_DWORD *)(v33 + 28);
        if (v35 <= a6)
        {
          v46[0] = 0;
          result = realloc_array(*v24, v46, a6 + 1, v21, v21, 1);
          *v34 = result;
          *v24 = v46[0];
        }
        *v22 = a6 + 1;
        v36 = a6 - v21 + 1;
        do
        {
          *((_BYTE *)*v24 + v21++) = -1;
          --v36;
        }
        while (v36);
        v37 = *a5;
        v38 = a6;
        v39 = (_DWORD *)(v37 + 12 * a6);
        v40 = *(_DWORD *)(v19 + 8);
        if (v40 == *(_DWORD *)(v19 + 12))
        {
          result = DgnArray<RuleDesc>::reallocElts(v19, 1, 1);
          v40 = *(_DWORD *)(v19 + 8);
        }
        v41 = (_DWORD *)(*(_QWORD *)v19 + 12 * v40);
        *v41 = *v39;
        v42 = v37 + 12 * v38;
        v41[1] = *(_DWORD *)(v42 + 4);
        v41[2] = *(_DWORD *)(v42 + 8);
        LODWORD(v41) = *(_DWORD *)(v19 + 8);
        *(_DWORD *)(v19 + 8) = (_DWORD)v41 + 1;
        *((_BYTE *)*v24 + v38) = (_BYTE)v41;
      }
      else
      {
        v25 = *a5;
        if (*((unsigned __int8 *)*v24 + a6) == 255)
        {
          v43 = *(_DWORD *)(v19 + 8);
          if (v43 == *(_DWORD *)(v19 + 12))
          {
            result = DgnArray<RuleDesc>::reallocElts(v19, 1, 1);
            v43 = *(_DWORD *)(v19 + 8);
          }
          v44 = (_DWORD *)(*(_QWORD *)v19 + 12 * v43);
          *v44 = *(_DWORD *)(v25 + 12 * a6);
          v45 = v25 + 12 * a6;
          v44[1] = *(_DWORD *)(v45 + 4);
          v44[2] = *(_DWORD *)(v45 + 8);
          LODWORD(v44) = *(_DWORD *)(v19 + 8);
          *(_DWORD *)(v19 + 8) = (_DWORD)v44 + 1;
          *((_BYTE *)*v24 + a6) = (_BYTE)v44;
        }
        else
        {
          v26 = *(_DWORD *)(v25 + 12 * a6 + 8);
          v27 = *(_QWORD *)v19 + 12 * *((unsigned __int8 *)*v24 + a6);
          v29 = *(_DWORD *)(v27 + 8);
          v28 = (_DWORD *)(v27 + 8);
          if (v26 < v29)
          {
            v30 = (_DWORD *)(*(_QWORD *)v19 + 12 * *((unsigned __int8 *)*v24 + a6));
            v31 = (_DWORD *)(v25 + 12 * a6);
            *v30 = *v31;
            *v28 = v26;
            v30[1] = v31[1];
          }
        }
      }
    }
    return result;
  }
LABEL_17:
  CWIDCrumbWACS::CWIDCrumbWACS((uint64_t)v46, a2, a3, a4, a5);
  v32 = *(_DWORD *)(a1 + 8);
  if (v32 == *(_DWORD *)(a1 + 12))
  {
    DgnArray<LinearTransform>::reallocElts(a1, 1, 1);
    v32 = *(_DWORD *)(a1 + 8);
  }
  CWIDCrumbWACS::CWIDCrumbWACS(*(_QWORD *)a1 + 72 * v32, (uint64_t)v46);
  ++*(_DWORD *)(a1 + 8);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v46);
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    LODWORD(v46[0]) = *(_DWORD *)(a1 + 8) - 1;
    return Hash<CWIDAC,CWIDAC,CWIDAC,unsigned int>::add(result, a2, v46);
  }
  return result;
}

void sub_209A3FCBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CWIDCrumbWACSFrame::maybeBuildHashTable(uint64_t this, MemChunkRegion *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  if (!*(_QWORD *)(this + 32))
  {
    v2 = this;
    Latch<MemChunkRegion,LatchAdapter>::Latch(&v8, (uint64_t)a2);
    v3 = MemChunkAlloc(0x70uLL, 0);
    *(_QWORD *)(v2 + 32) = Hash<CWIDAC,CWIDAC,CWIDAC,unsigned int>::Hash((uint64_t)v3, 0, 2 * *(_DWORD *)(v2 + 8));
    v4 = *(unsigned int *)(v2 + 8);
    if ((int)v4 >= 1)
    {
      do
      {
        --v4;
        v5 = *(_QWORD *)(v2 + 32);
        v6 = *(_QWORD *)v2 + 72 * v4 + 32;
        v7 = v4;
        Hash<CWIDAC,CWIDAC,CWIDAC,unsigned int>::add(v5, v6, &v7);
      }
      while ((unint64_t)(v4 + 1) > 1);
    }
    return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v8);
  }
  return this;
}

void sub_209A3FD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *CWIDCrumbWACSFrame::setTopChoiceWord(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7;
  uint64_t *result;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v7 = *(_QWORD *)(a2 + 8) + 36 * a3;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(v7 + 24) != *(_DWORD *)(v7 + 28);
  result = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(*(_QWORD *)(a1 + 32), v7);
  v9 = *(_DWORD *)(*result + 36);
  *(_DWORD *)(a1 + 40) = v9;
  if (a4)
  {
    v10 = *(_QWORD *)a1 + 72 * v9;
    v11 = *(_DWORD *)(v10 + 8);
    if (v11)
    {
      v12 = 12 * v11 - 12;
      while (v11 >= 1)
      {
        --v11;
        v13 = *(_DWORD *)(*(_QWORD *)v10 + v12);
        v12 -= 12;
        if (v13 == a3)
          goto LABEL_8;
      }
    }
    LOBYTE(v11) = -2;
LABEL_8:
    **(_BYTE **)(*(_QWORD *)a1 + 72 * v9 + 16) = v11;
    *(_BYTE *)(a1 + 44) = 0;
  }
  return result;
}

uint64_t CWIDCrumbWACSFrame::getHistScore(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;

  v5 = *(_DWORD *)(*Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(a1[4], *(_QWORD *)(a2 + 8) + 36 * a3) + 36);
  v6 = *a1 + 72 * v5;
  v7 = *(_DWORD *)(v6 + 8);
  if (v7)
  {
    v8 = 12 * v7 - 12;
    v9 = v7 + 1;
    while ((int)--v9 >= 1)
    {
      v10 = v8 - 12;
      v11 = *(_DWORD *)(*(_QWORD *)v6 + v8);
      v8 -= 12;
      if (v11 == a3)
      {
        v12 = (unsigned int *)(*(_QWORD *)v6 + v10 + 20);
        return *v12;
      }
    }
  }
  v12 = (unsigned int *)(*a1 + 72 * v5 + 68);
  return *v12;
}

unint64_t CWIDCrumbWACSFrame::getFrameInfo(unint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _OWORD *v32;
  _QWORD *v33;
  _QWORD *v34;

  v8 = result;
  if (a2)
  {
    if (*(_DWORD *)(result + 40) == -1)
    {
      *(_DWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
    else
    {
      if (!*(_DWORD *)(a3 + 12))
        result = DgnArray<CWIDAC>::reallocElts(a3, 1, 0);
      if (!*(_DWORD *)(a3 + 8))
      {
        v9 = *(_QWORD *)a3;
        *(_DWORD *)(v9 + 4) = 0x3FFF;
        *(_OWORD *)(v9 + 8) = xmmword_209A593D0;
      }
      *(_DWORD *)(a3 + 8) = 1;
      if (!*(_DWORD *)(a4 + 12))
        result = DgnPrimArray<unsigned int>::reallocElts(a4, 1, 0);
      *(_DWORD *)(a4 + 8) = 1;
      if (!*(_DWORD *)(a5 + 12))
        result = DgnArray<CWIDAC>::reallocElts(a5, 1, 0);
      if (!*(_DWORD *)(a5 + 8))
      {
        v10 = *(_QWORD **)a5;
        *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
      }
      *(_DWORD *)(a5 + 8) = 1;
      v11 = *(_DWORD *)(v8 + 40);
      v12 = *(_QWORD *)v8;
      v13 = *(_QWORD *)v8 + 72 * v11;
      v14 = *(_QWORD *)a3;
      *(_DWORD *)v14 = *(_DWORD *)(v13 + 32);
      *(_DWORD *)(v14 + 4) = *(_DWORD *)(v13 + 36);
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(v13 + 40);
      **(_DWORD **)a4 = *(_DWORD *)(v8 + 24) + *(__int16 *)(v13 + 56);
      if (*(_BYTE *)(v8 + 44))
      {
        v15 = 0;
        v16 = 0;
        v17 = v12 + 72 * v11 + 60;
      }
      else
      {
        v16 = v12 + 72 * v11;
        v17 = v16 + 60;
        v15 = v16 + 16;
        if (**(unsigned __int8 **)(v16 + 16) != 254)
          v17 = 0;
      }
      v34 = *(_QWORD **)a5;
      *v34 = v16;
      v34[1] = v15;
      v34[2] = v17;
    }
  }
  else
  {
    v18 = *(unsigned int *)(result + 8);
    v19 = *(_DWORD *)(a3 + 12);
    if (v18 > v19)
      result = DgnArray<CWIDAC>::reallocElts(a3, v18 - v19, 0);
    v20 = *(unsigned int *)(a3 + 8);
    if (v20 < v18)
    {
      v21 = v18 - v20;
      v22 = (_OWORD *)(*(_QWORD *)a3 + 24 * v20 + 8);
      do
      {
        *((_DWORD *)v22 - 1) = 0x3FFF;
        *v22 = xmmword_209A593D0;
        v22 = (_OWORD *)((char *)v22 + 24);
        --v21;
      }
      while (v21);
    }
    *(_DWORD *)(a3 + 8) = v18;
    v23 = *(_DWORD *)(a4 + 12);
    if (v18 > v23)
      result = DgnPrimArray<unsigned int>::reallocElts(a4, v18 - v23, 0);
    *(_DWORD *)(a4 + 8) = v18;
    v24 = *(_DWORD *)(a5 + 12);
    if (v18 > v24)
      result = DgnArray<CWIDAC>::reallocElts(a5, v18 - v24, 0);
    v25 = *(unsigned int *)(a5 + 8);
    if (v25 < v18)
    {
      v26 = v18 - v25;
      v27 = 24 * v25;
      do
      {
        v28 = (_QWORD *)(*(_QWORD *)a5 + v27);
        *v28 = 0;
        v28[1] = 0;
        v28[2] = 0;
        v27 += 24;
        --v26;
      }
      while (v26);
    }
    *(_DWORD *)(a5 + 8) = v18;
    if ((_DWORD)v18)
    {
      v29 = 0;
      v30 = *(_QWORD *)v8;
      v31 = *(_DWORD **)a4;
      v32 = (_OWORD *)(*(_QWORD *)a3 + 8);
      v33 = (_QWORD *)(*(_QWORD *)a5 + 8);
      do
      {
        *((_DWORD *)v32 - 2) = *(_DWORD *)(v30 + v29 + 32);
        *((_DWORD *)v32 - 1) = *(_DWORD *)(v30 + v29 + 36);
        *v32 = *(_OWORD *)(v30 + v29 + 40);
        v32 = (_OWORD *)((char *)v32 + 24);
        *v31++ = *(_DWORD *)(v8 + 24) + *(__int16 *)(v30 + v29 + 56);
        *(v33 - 1) = v30 + v29;
        *v33 = v30 + v29 + 16;
        v33[1] = v30 + v29 + 60;
        v29 += 72;
        v33 += 3;
      }
      while (72 * v18 != v29);
    }
  }
  return result;
}

uint64_t CWIDCrumbWACSFrame::getAccumHistScore(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;

  v6 = *(_QWORD *)(a2 + 8) + 36 * a3;
  v7 = *(_DWORD *)(*Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(a1[4], v6) + 36);
  v8 = *a1;
  if (*(_DWORD *)(v6 + 24) == *(_DWORD *)(v6 + 28))
  {
    v9 = v8 + 72 * v7;
    if (*(unsigned __int8 *)(*(_QWORD *)(v9 + 16) + a4) == 254)
      v10 = v9 + 60;
    else
      v10 = *(_QWORD *)(v8 + 72 * v7) + 12 * *(unsigned __int8 *)(*(_QWORD *)(v9 + 16) + a4);
    v11 = (unsigned int *)(v10 + 8);
  }
  else
  {
    v11 = (unsigned int *)(v8 + 72 * v7 + 68);
  }
  return *v11;
}

uint64_t CWIDCrumbWACSFrame::getHistory(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t *Bucket;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;

  Bucket = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(a1[4], a2);
  if (!*Bucket)
    return 4294967294;
  v6 = *(_DWORD *)(*Bucket + 36);
  v7 = *a1 + 72 * v6;
  if (*(_DWORD *)(v7 + 24) <= a3)
    return 4294967294;
  v8 = *a1 + 72 * v6;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 16) + a3);
  if (v9 == 254)
  {
    v11 = (unsigned int *)(v8 + 60);
    return *v11;
  }
  if (v9 == 255)
    return 4294967294;
  v10 = *(_QWORD *)v7;
  if (!v10)
    return 4294967294;
  v11 = (unsigned int *)(v10 + 12 * *(unsigned __int8 *)(*(_QWORD *)(v8 + 16) + a3));
  return *v11;
}

uint64_t sizeObject<CWIDCrumbWACS>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v10;
  __int128 v11;
  int v12;
  __int128 v13;
  __int16 v14;
  uint64_t v15;
  int v16;

  v10 = 0u;
  v11 = 0u;
  v12 = 0x3FFF;
  v13 = xmmword_209A593D0;
  v14 = 20000;
  v15 = 0x70000000FFFFFFFELL;
  v16 = 1879048192;
  v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3)
  {
    v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 12;
    else
      v5 = 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = v4;
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
          v5 += sizeObject(*(_QWORD *)a1 + 72 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2)
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v11);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v10);
  return v5;
}

void sub_209A40488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CWIDCrumbBank::CWIDCrumbBank(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 20) = 4294967280;
  *(_QWORD *)(a1 + 32) = a2;
  if (MemChunkRegion::smTlsID == -1)
    goto LABEL_5;
  v3 = (void **)pthread_getspecific(MemChunkRegion::smTlsID);
  if (!v3)
    goto LABEL_5;
  v4 = *v3;
  if (!*v3)
  {
    pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_5:
    v4 = &gGlobalMemChunkRegion;
  }
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

void sub_209A4052C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIOwnArray<CWIDCrumbWACSFrame *>::releaseAll(v1);
  _Unwind_Resume(a1);
}

double CWIDCrumbBank::copy(CWIDCrumbBank *this, const CWIDCrumbBank *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  double result;

  v4 = *((unsigned int *)a2 + 2);
  DgnIOwnArray<CWIDCrumbWACSFrame *>::releaseAll((uint64_t)this);
  v5 = *((_DWORD *)this + 3);
  if (v4 > v5)
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this, v4 - v5, 0);
  v6 = *((unsigned int *)this + 2);
  if (v6 <= v4)
  {
    if (v6 < v4)
    {
      do
        *(_QWORD *)(*(_QWORD *)this + 8 * v6++) = 0;
      while (v4 != v6);
    }
  }
  else
  {
    DgnIOwnArray<CWIDCrumbWACSFrame *>::destructAt(this, v4, v6 - v4);
  }
  *((_DWORD *)this + 2) = v4;
  if ((_DWORD)v4)
  {
    v7 = 0;
    v8 = 8 * v4;
    do
    {
      v9 = MemChunkAlloc(0x30uLL, 0);
      *v9 = 0;
      v9[1] = 0;
      *((_OWORD *)v9 + 1) = xmmword_209A87EE0;
      v9[4] = 0;
      *((_DWORD *)v9 + 10) = -1;
      *((_WORD *)v9 + 22) = 0;
      *(_QWORD *)(*(_QWORD *)this + v7) = v9;
      CWIDCrumbWACSFrame::copy(*(__n128 **)(*(_QWORD *)this + v7), *(__n128 **)(*(_QWORD *)a2 + v7));
      v7 += 8;
    }
    while (v8 != v7);
  }
  result = *((double *)a2 + 2);
  *((double *)this + 2) = result;
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  return result;
}

_DWORD *CWIDCrumbBank::ensureCrumbFrame(_DWORD *this, int a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int i;
  int v8;

  v2 = (uint64_t)this;
  v3 = this[5];
  v4 = a2 - v3;
  v5 = v3 - a2;
  if (this[6] == 1)
    v6 = v4;
  else
    v6 = v5;
  for (i = this[2]; i <= v6; *(_DWORD *)(v2 + 8) = i)
  {
    if (i == *(_DWORD *)(v2 + 12))
    {
      this = (_DWORD *)DgnPrimArray<unsigned long long>::reallocElts(v2, 1, 1);
      i = *(_DWORD *)(v2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v2 + 8 * i++) = 0;
  }
  v8 = *(_DWORD *)(v2 + 16);
  if (v8 <= (int)v6)
    v8 = v6;
  *(_DWORD *)(v2 + 16) = v8;
  return this;
}

uint64_t CWIDCrumbBank::getCrumbFrame(CWIDCrumbBank *this, int a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;

  v3 = *((_DWORD *)this + 5);
  v4 = a2 - v3;
  v5 = v3 - a2;
  if (*((_DWORD *)this + 6) == 1)
    v6 = v4;
  else
    v6 = v5;
  result = *(_QWORD *)(*(_QWORD *)this + 8 * v6);
  if (!result)
  {
    v8 = MemChunkAlloc(0x30uLL, 0);
    *v8 = 0;
    v8[1] = 0;
    *((_OWORD *)v8 + 1) = xmmword_209A87EE0;
    v8[4] = 0;
    *((_DWORD *)v8 + 10) = -1;
    *((_WORD *)v8 + 22) = 0;
    *(_QWORD *)(*(_QWORD *)this + 8 * v6) = v8;
    return *(_QWORD *)(*(_QWORD *)this + 8 * v6);
  }
  return result;
}

{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *((_DWORD *)this + 5);
  v3 = a2 - v2;
  v4 = v2 - a2;
  if (*((_DWORD *)this + 6) == 1)
    v5 = v3;
  else
    v5 = v4;
  return *(_QWORD *)(*(_QWORD *)this + 8 * v5);
}

_QWORD *CWIDCrumbBank::setFirstFrame(_QWORD *result, int *a2, int a3)
{
  _DWORD *v5;
  int v6;

  v5 = result;
  if (*((_DWORD *)result + 4) != -1)
    result = DgnIOwnArray<CWIDCrumbWACSFrame *>::releaseAll((uint64_t)result);
  v6 = *a2;
  v5[5] = a3;
  v5[6] = v6;
  v5[4] = -1;
  return result;
}

uint64_t CWIDCrumbBank::getLastFrame(CWIDCrumbBank *this)
{
  int v1;

  if (*((_DWORD *)this + 6) == 1)
    v1 = *((_DWORD *)this + 4);
  else
    v1 = -*((_DWORD *)this + 4);
  return (v1 + *((_DWORD *)this + 5));
}

uint64_t CWIDCrumbBank::setBestAccumScore(CWIDCrumbBank *this, int a2, int a3)
{
  uint64_t result;

  result = CWIDCrumbBank::getCrumbFrame(this, a2);
  *(_DWORD *)(result + 24) = a3;
  return result;
}

uint64_t CWIDCrumbBank::endCrumbFrame(CWIDCrumbBank *this, int a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;

  result = CWIDCrumbBank::getCrumbFrame(this, a2);
  v5 = result;
  v6 = *(unsigned int *)(result + 8);
  if ((_DWORD)v6)
    result = mrec_qsort_r<CWIDCrumbWACS>(*(_QWORD *)result, v6, 0x48uLL, 0);
  *(_DWORD *)(v5 + 28) = a3;
  return result;
}

uint64_t CWIDCrumbBank::addCrumbWACSRecord(CWIDCrumbBank *a1, int a2, uint64_t a3, __int16 a4, _DWORD *a5, uint64_t *a6)
{
  uint64_t CrumbFrame;

  CrumbFrame = CWIDCrumbBank::getCrumbFrame(a1, a2);
  return CWIDCrumbWACSFrame::addCrumbWACSRecord(CrumbFrame, a3, a4, a5, a6);
}

uint64_t CWIDCrumbBank::addCrumbWACSRecordEFst(CWIDCrumbBank *a1, int a2, uint64_t a3, __int16 a4, _DWORD *a5, uint64_t *a6, unsigned int a7)
{
  uint64_t CrumbFrame;

  CrumbFrame = CWIDCrumbBank::getCrumbFrame(a1, a2);
  return CWIDCrumbWACSFrame::addCrumbWACSRecordEFst(CrumbFrame, a3, a4, a5, a6, a7);
}

uint64_t CWIDCrumbBank::addFinalSilHABS(CWIDCrumbBank *a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t result;

  result = CWIDCrumbBank::getCrumbFrame(a1, a2);
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = a5;
  *(_BYTE *)(result + 45) = 1;
  return result;
}

uint64_t CWIDCrumbBank::addZeroFrameFinalSilHABS(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t CrumbFrame;
  uint64_t result;

  CWIDCrumbBank::ensureCrumbFrame((_DWORD *)a1, a2);
  CrumbFrame = CWIDCrumbBank::getCrumbFrame((CWIDCrumbBank *)a1, a2);
  *(_DWORD *)(CrumbFrame + 16) = a4;
  *(_DWORD *)(CrumbFrame + 20) = a5;
  *(_BYTE *)(CrumbFrame + 45) = 1;
  result = CWIDCrumbBank::endCrumbFrame((CWIDCrumbBank *)a1, a2, 0);
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

uint64_t *CWIDCrumbBank::setTopChoiceHistory(uint64_t *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t CrumbFrame;
  uint64_t v11;

  v2 = *(unsigned int *)(*(_QWORD *)(this[4] + 8) + 36 * a2 + 32);
  if ((_DWORD)v2 != -2)
  {
    v3 = (uint64_t)this;
    do
    {
      v4 = 9 * v2;
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 36 * v2;
      v6 = *(_DWORD *)(v5 + 28) - 1;
      v7 = *(_DWORD *)(v3 + 20);
      v8 = v6 - v7;
      v9 = v7 - v6;
      if (*(_DWORD *)(v3 + 24) != 1)
        v8 = v9;
      CWIDCrumbWACSFrame::maybeBuildHashTable(*(_QWORD *)(*(_QWORD *)v3 + 8 * v8), *(MemChunkRegion **)(v3 + 40));
      CrumbFrame = CWIDCrumbBank::getCrumbFrame((CWIDCrumbBank *)v3, v6);
      v11 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 4 * v4;
      *(_BYTE *)(CrumbFrame + 44) = *(_DWORD *)(v11 + 24) != *(_DWORD *)(v11 + 28);
      this = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(*(_QWORD *)(CrumbFrame + 32), v11);
      *(_DWORD *)(CrumbFrame + 40) = *(_DWORD *)(*this + 36);
      v2 = *(unsigned int *)(v5 + 32);
    }
    while ((_DWORD)v2 != -2);
  }
  return this;
}

BOOL CWIDCrumbBank::setTopChoiceHistoryExtendToEnd(CWIDCrumbBank *this, unsigned int a2, int a3)
{
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  int v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int HistScore;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *CrumbFrame;
  uint64_t v25;
  int v26;
  unsigned int i;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;

  v4 = a2;
  v6 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  v7 = *(_DWORD *)(v6 + 36 * a2 + 32);
  CWIDCrumbBank::ensureCrumbFrame(this, a3 - 1);
  v8 = 0;
  v9 = (int *)(v6 + 36 * v7 + 28);
  while (1)
  {
    v10 = v8;
    v11 = a3 + v8;
    v12 = *v9;
    v13 = a3 + v8 <= *v9;
    if (a3 + v8 <= *v9)
      break;
    if (*(_BYTE *)(CWIDCrumbBank::getCrumbFrame(this, --v8 + a3) + 45))
    {
      v14 = *((_DWORD *)this + 5);
      v15 = a3 - v14 + v8;
      v16 = v14 - a3 - v8;
      if (*((_DWORD *)this + 6) == 1)
        v17 = v15;
      else
        v17 = v16;
      v18 = *(_QWORD *)(*(_QWORD *)this + 8 * v17);
      v4 = *(_DWORD *)(v18 + 16);
      HistScore = *(_DWORD *)(v18 + 20);
      goto LABEL_12;
    }
  }
  v20 = *((_DWORD *)this + 5);
  v21 = v12 - 1 - v20;
  v22 = v20 - (v12 - 1);
  if (*((_DWORD *)this + 6) == 1)
    v23 = v21;
  else
    v23 = v22;
  CWIDCrumbWACSFrame::maybeBuildHashTable(*(_QWORD *)(*(_QWORD *)this + 8 * v23), *((MemChunkRegion **)this + 5));
  CrumbFrame = (_QWORD *)CWIDCrumbBank::getCrumbFrame(this, v12 - 1);
  HistScore = CWIDCrumbWACSFrame::getHistScore(CrumbFrame, *((_QWORD *)this + 4), v7);
LABEL_12:
  if (a3 + v10 < a3)
  {
    do
    {
      v25 = CWIDCrumbBank::getCrumbFrame(this, a3 + v10);
      v26 = *(_DWORD *)(v25 + 28);
      if (v26 == 1879048192)
        *(_DWORD *)(v25 + 28) = 0;
      else
        HistScore += v26;
      *(_DWORD *)(v25 + 16) = v4;
      *(_DWORD *)(v25 + 20) = HistScore;
      *(_BYTE *)(v25 + 45) = 1;
    }
    while (!__CFADD__(v10++, 1));
  }
  for (i = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 36 * v4 + 32); i != -2; i = *(_DWORD *)(v29 + 32))
  {
    v29 = *(_QWORD *)(*((_QWORD *)this + 4) + 8) + 36 * i;
    v30 = *(_DWORD *)(v29 + 28) - 1;
    v31 = *((_DWORD *)this + 5);
    v32 = v30 - v31;
    v33 = v31 - v30;
    if (*((_DWORD *)this + 6) == 1)
      v34 = v32;
    else
      v34 = v33;
    CWIDCrumbWACSFrame::maybeBuildHashTable(*(_QWORD *)(*(_QWORD *)this + 8 * v34), *((MemChunkRegion **)this + 5));
    v35 = CWIDCrumbBank::getCrumbFrame(this, v30);
    CWIDCrumbWACSFrame::setTopChoiceWord(v35, *((_QWORD *)this + 4), i, v13);
    v13 = 0;
  }
  return v11 <= v12;
}

uint64_t CWIDCrumbBank::getRightSilenceInfo(uint64_t this, int a2, unsigned int *a3, int *a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v4 = *(_DWORD *)(this + 20);
  v5 = a2 - v4;
  v6 = v4 - a2;
  if (*(_DWORD *)(this + 24) == 1)
    v7 = v5;
  else
    v7 = v6;
  v8 = *(_QWORD *)(*(_QWORD *)this + 8 * v7);
  *a4 = *(_DWORD *)(v8 + 20);
  *a3 = *(_DWORD *)(v8 + 16);
  return this;
}

unint64_t CWIDCrumbBank::getFrameInfo(unint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  v7 = *(_DWORD *)(result + 20);
  v6 = *(_DWORD *)(result + 24);
  v8 = *(_DWORD *)(result + 16);
  if (v6 != 1)
    v8 = -v8;
  v9 = v8 + v7;
  v10 = v8 < 0;
  if (v8 >= 0)
    v11 = v8 + v7;
  else
    v11 = *(_DWORD *)(result + 20);
  if (!v10)
    v9 = *(_DWORD *)(result + 20);
  if (a3 == -1 || (v9 <= a3 ? (v13 = __OFSUB__(v11, a3), v12 = v11 - a3 < 0) : (v13 = 0, v12 = 1), v12 ^ v13))
  {
    *(_DWORD *)(a4 + 8) = 0;
  }
  else
  {
    v14 = a3 - v7;
    v15 = v7 - a3;
    if (v6 == 1)
      v16 = v14;
    else
      v16 = v15;
    return CWIDCrumbWACSFrame::getFrameInfo(*(_QWORD *)(*(_QWORD *)result + 8 * v16), a2, a4, a5, a6);
  }
  return result;
}

uint64_t CWIDCrumbBank::getScore(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t *Bucket;

  v4 = *(_DWORD *)(a1 + 20);
  v5 = a3 - v4;
  v6 = v4 - a3;
  if (*(_DWORD *)(a1 + 24) == 1)
    v7 = v5;
  else
    v7 = v6;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v7);
  if (*(_DWORD *)(v8 + 8)
    && ((CWIDCrumbWACSFrame::maybeBuildHashTable(v8, *(MemChunkRegion **)(a1 + 40)),
         v11 = *(_DWORD *)(a1 + 20),
         v12 = a3 - v11,
         v13 = v11 - a3,
         *(_DWORD *)(a1 + 24) != 1)
      ? (v14 = v13)
      : (v14 = v12),
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14),
        Bucket = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(v15[4], a2),
        *Bucket))
  {
    return *(__int16 *)(*v15 + 72 * *(unsigned int *)(*Bucket + 36) + 56);
  }
  else
  {
    return 20000;
  }
}

void CWIDCrumbBank::getFrameInfoForBTLat(_DWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7, int a8)
{
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int Score;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  void *v24;

  CWIDCrumbBank::getFrameInfo((unint64_t)a1, a2, a3, a4, a5, a6);
  v13 = *(unsigned int *)(a4 + 8);
  if (*((_DWORD *)a7 + 3) < v13)
  {
    v24 = 0;
    *((_DWORD *)a7 + 3) = realloc_array(*a7, &v24, v13, *((unsigned int *)a7 + 2), *((unsigned int *)a7 + 2), 1);
    *a7 = v24;
  }
  *((_DWORD *)a7 + 2) = v13;
  if (a8 < 0)
  {
    if ((_DWORD)v13)
      bzero(*a7, v13);
  }
  else
  {
    if ((_DWORD)v13)
      memset(*a7, 1, v13);
    if (a8 && *(_DWORD *)(a4 + 8))
    {
      v14 = 0;
      v15 = -a8;
      do
      {
        v16 = *(_QWORD *)a4 + 24 * v14;
        Score = CWIDCrumbBank::getScore((uint64_t)a1, v16, a3);
        v18 = 0;
        v19 = 1;
        while (1)
        {
          if (v19 > a3)
            v20 = -1;
          else
            v20 = a3 + v18 - 1;
          v21 = a1[5];
          if (v20 >= v21)
          {
            if ((int)CWIDCrumbBank::getScore((uint64_t)a1, v16, v20) <= Score)
              break;
            v21 = a1[5];
          }
          v22 = a3 + v19;
          v23 = a1[6] == 1 ? a1[4] : -a1[4];
          if (v22 <= v23 + v21 && (int)CWIDCrumbBank::getScore((uint64_t)a1, v16, v22) < Score)
            break;
          ++v19;
          if (v15 == --v18)
            goto LABEL_24;
        }
        *((_BYTE *)*a7 + v14) = 0;
LABEL_24:
        ++v14;
      }
      while (v14 < *(unsigned int *)(a4 + 8));
    }
  }
}

uint64_t CWIDCrumbBank::hasRightSilenceCrumb(CWIDCrumbBank *this, int a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *((_DWORD *)this + 5);
  v3 = a2 - v2;
  v4 = v2 - a2;
  if (*((_DWORD *)this + 6) == 1)
    v5 = v3;
  else
    v5 = v4;
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)this + 8 * v5) + 45);
}

uint64_t CWIDCrumbBank::getAccumHistScore(CWIDCrumbBank *this, int a2, unsigned int a3, unsigned int a4)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v8 = *((_DWORD *)this + 5);
  v9 = a2 - v8;
  v10 = v8 - a2;
  if (*((_DWORD *)this + 6) == 1)
    v11 = v9;
  else
    v11 = v10;
  CWIDCrumbWACSFrame::maybeBuildHashTable(*(_QWORD *)(*(_QWORD *)this + 8 * v11), *((MemChunkRegion **)this + 5));
  v12 = *((_DWORD *)this + 5);
  v13 = a2 - v12;
  v14 = v12 - a2;
  if (*((_DWORD *)this + 6) == 1)
    v15 = v13;
  else
    v15 = v14;
  return CWIDCrumbWACSFrame::getAccumHistScore(*(uint64_t **)(*(_QWORD *)this + 8 * v15), *((_QWORD *)this + 4), a3, a4);
}

uint64_t CWIDCrumbBank::getHistory(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v8 = *(_DWORD *)(a1 + 20);
  v9 = a2 - v8;
  v10 = v8 - a2;
  if (*(_DWORD *)(a1 + 24) == 1)
    v11 = v9;
  else
    v11 = v10;
  CWIDCrumbWACSFrame::maybeBuildHashTable(*(_QWORD *)(*(_QWORD *)a1 + 8 * v11), *(MemChunkRegion **)(a1 + 40));
  v12 = *(_DWORD *)(a1 + 20);
  v13 = a2 - v12;
  v14 = v12 - a2;
  if (*(_DWORD *)(a1 + 24) == 1)
    v15 = v13;
  else
    v15 = v14;
  return CWIDCrumbWACSFrame::getHistory(*(_QWORD **)(*(_QWORD *)a1 + 8 * v15), a3, a4);
}

uint64_t CWIDCrumbBank::getSilHistory(uint64_t a1, int a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t *Bucket;

  v6 = *(_DWORD *)(a1 + 20);
  v7 = a2 - v6;
  v8 = v6 - a2;
  if (*(_DWORD *)(a1 + 24) == 1)
    v9 = v7;
  else
    v9 = v8;
  CWIDCrumbWACSFrame::maybeBuildHashTable(*(_QWORD *)(*(_QWORD *)a1 + 8 * v9), *(MemChunkRegion **)(a1 + 40));
  v10 = *(_DWORD *)(a1 + 20);
  v11 = a2 - v10;
  v12 = v10 - a2;
  if (*(_DWORD *)(a1 + 24) == 1)
    v13 = v11;
  else
    v13 = v12;
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
  Bucket = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(v14[4], a3);
  if (*Bucket)
    return *(unsigned int *)(*v14 + 72 * *(unsigned int *)(*Bucket + 36) + 60);
  else
    return 4294967294;
}

uint64_t CWIDCrumbBank::getFinalSilFrameScore(CWIDCrumbBank *this, int a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *((_DWORD *)this + 5);
  v3 = a2 - v2;
  v4 = v2 - a2;
  if (*((_DWORD *)this + 6) == 1)
    v5 = v3;
  else
    v5 = v4;
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 8 * v5) + 28);
}

unsigned int *CWIDCrumbBank::mergeCrumbs(unsigned int *this, const HistoryMgr *a2)
{
  uint64_t v2;
  unint64_t v3;

  if (this[2])
  {
    v2 = (uint64_t)this;
    v3 = 0;
    do
      this = CWIDCrumbWACSFrame::mergeCrumbs(*(unsigned int **)(*(_QWORD *)v2 + 8 * v3++), a2);
    while (v3 < *(unsigned int *)(v2 + 8));
  }
  return this;
}

uint64_t *CWIDCrumbBank::updateCrumbHistory(uint64_t *this, int a2)
{
  uint64_t v3;
  unint64_t v4;

  if (*((_DWORD *)this + 2))
  {
    v3 = (uint64_t)this;
    v4 = 0;
    do
      this = CWIDCrumbWACSFrame::updateCrumbHistory(*(uint64_t **)(*(_QWORD *)v3 + 8 * v4++), a2);
    while (v4 < *(unsigned int *)(v3 + 8));
  }
  return this;
}

void CWIDCrumbBank::printSize(CWIDCrumbBank *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int v53;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/crumb.cpp", 1584, (DgnString *)&v52);
  if (v53)
    v16 = v52;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v52);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = sizeObject<CWIDCrumbWACSFrame *>((uint64_t)this, 0);
  v22 = sizeObject<CWIDCrumbWACSFrame *>((uint64_t)this, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/crumb.cpp", 1586, (DgnString *)&v52);
  if (v53)
    v27 = v52;
  else
    v27 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v27, v21, v22, 0);
  DgnString::~DgnString((DgnString *)&v52);
  *a4 += v21;
  *a5 += v22;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/crumb.cpp", 1588, (DgnString *)&v52);
  if (v53)
    v32 = v52;
  else
    v32 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v52);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/crumb.cpp", 1589, (DgnString *)&v52);
  if (v53)
    v37 = v52;
  else
    v37 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v52);
  *a4 += 4;
  *a5 += 4;
  v38 = (char *)this + 24;
  v39 = sizeObject((uint64_t)this + 24, 0);
  v40 = sizeObject((uint64_t)v38, 1);
  v41 = sizeObject((uint64_t)v38, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/crumb.cpp", 1590, (DgnString *)&v52);
  if (v53)
    v46 = v52;
  else
    v46 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v46, v39, v40, v41);
  DgnString::~DgnString((DgnString *)&v52);
  *a4 += v39;
  *a5 += v40;
  *a6 += v41;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/crumb.cpp", 1591, (DgnString *)&v52);
  if (v53)
    v51 = v52;
  else
    v51 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, a3, &byte_209A88803, (35 - a3), (35 - a3), v51, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v52);
}

void sub_209A41468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<CWIDCrumbWACSFrame *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

double CWIDACRecogGermIterator::getCurrentGermInternal(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  double result;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = **(_QWORD **)(a1 + 40) + 24 * v2;
  *(_DWORD *)a2 = *(_DWORD *)v3;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(v3 + 4);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 8);
  *(_BYTE *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 26) = 1310720000;
  *(_WORD *)(a2 + 30) = 0;
  result = 3.10503915e231;
  *(_QWORD *)(a2 + 32) = 0x70000000FFFFFFFELL;
  *(_DWORD *)(a2 + 40) = v2;
  return result;
}

void CWIDACRecogGermIterator::~CWIDACRecogGermIterator(CWIDACRecogGermIterator *this)
{
  MrecInitModule_sdpres_sdapi();
  JUMPOUT(0x20BD149A8);
}

_QWORD *DgnArray<CWIDCrumbWACS>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnArray<CWIDCrumbWACS>::destructAt(a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnArray<CWIDCrumbWACS>::destructAt(uint64_t result, int a2, int a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a3 + a2;
  if (a3 + a2 > a2)
  {
    v4 = (_QWORD *)result;
    v5 = v3;
    v6 = a2;
    v7 = 72 * v3 - 72;
    do
    {
      --v5;
      v8 = *v4 + v7;
      DgnPrimArray<unsigned int>::~DgnPrimArray(v8 + 16);
      result = DgnIArray<Utterance *>::~DgnIArray(v8);
      v7 -= 72;
    }
    while (v5 > v6);
  }
  return result;
}

unint64_t DgnArray<CWIDCrumbWACS>::copyArraySlice(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  unint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  result = DgnArray<CWIDCrumbWACS>::destructAt(a1, 0, *(_DWORD *)(a1 + 8));
  *(_DWORD *)(a1 + 8) = 0;
  v9 = *(_DWORD *)(a1 + 12);
  if (a4 <= v9)
  {
    v10 = 0;
    v11 = 0;
    if (!a4)
      goto LABEL_8;
  }
  else
  {
    DgnArray<LinearTransform>::reallocElts(a1, a4 - v9, 0);
    v10 = *(_DWORD *)(a1 + 8);
  }
  v12 = 0;
  v11 = v10;
  do
  {
    result = CWIDCrumbWACS::CWIDCrumbWACS(*(_QWORD *)a1 + 72 * v11, *a2 + 72 * (a3 + v12));
    v11 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v11;
    ++v12;
  }
  while (a4 != v12);
  if (v11 > a4)
  {
    result = DgnArray<CWIDCrumbWACS>::destructAt(a1, a4, v11 - a4);
    goto LABEL_11;
  }
LABEL_8:
  if (v11 < a4)
  {
    v13 = a4 - (unint64_t)v11;
    v14 = 72 * v11 + 68;
    do
    {
      v15 = (_DWORD *)(*(_QWORD *)a1 + v14);
      *(_OWORD *)(v15 - 13) = 0uLL;
      *(_OWORD *)(v15 - 17) = 0uLL;
      *(v15 - 8) = 0x3FFF;
      *(_OWORD *)(v15 - 7) = xmmword_209A593D0;
      *((_WORD *)v15 - 6) = 20000;
      *((_QWORD *)v15 - 1) = 0x70000000FFFFFFFELL;
      *v15 = 1879048192;
      v14 += 72;
      --v13;
    }
    while (v13);
  }
LABEL_11:
  *(_DWORD *)(a1 + 8) = a4;
  return result;
}

unint64_t CWIDCrumbWACS::CWIDCrumbWACS(unint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  DgnArray<HistoryAndBigScore>::copyArraySlice(a1, (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  DgnPrimArray<unsigned char>::copyArraySlice(a1 + 16, (_QWORD *)(a2 + 16), 0, *(_DWORD *)(a2 + 24));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  return a1;
}

void sub_209A41870(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIArray<Utterance *>::~DgnIArray(v1);
  _Unwind_Resume(a1);
}

unint64_t DgnArray<HistoryAndBigScore>::copyArraySlice(unint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = result;
  *(_DWORD *)(result + 8) = 0;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    v9 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_6;
  }
  else
  {
    result = DgnArray<RuleDesc>::reallocElts(result, a4 - v8, 0);
    v9 = *(_DWORD *)(v7 + 8);
  }
  v11 = a4;
  v10 = v9;
  do
  {
    v12 = (_DWORD *)(*a2 + 12 * a3);
    v13 = (_DWORD *)(*(_QWORD *)v7 + 12 * v10);
    *v13 = *v12;
    v13[1] = v12[1];
    v13[2] = v12[2];
    v10 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v10;
    ++a3;
    --v11;
  }
  while (v11);
LABEL_6:
  if (v10 < a4)
  {
    v14 = a4 - (unint64_t)v10;
    v15 = 12 * v10;
    do
    {
      v16 = *(_QWORD *)v7 + v15;
      *(_QWORD *)v16 = 0x70000000FFFFFFFELL;
      *(_DWORD *)(v16 + 8) = 1879048192;
      v15 += 12;
      --v14;
    }
    while (v14);
  }
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

uint64_t Hash<CWIDAC,CWIDAC,CWIDAC,unsigned int>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD v11[2];
  __int128 v12;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218B30;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v11[1] = 0x3FFF;
  v12 = xmmword_209A593D0;
  v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  v8 = sizeObject((uint64_t)v11, 2);
  if (v7)
    v9 = 4;
  else
    v9 = 8;
  *(_DWORD *)(a1 + 24) = 48;
  *(_DWORD *)(a1 + 28) = v8 + v9 + 8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_209A41A5C(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<CWIDAC,CWIDAC,CWIDAC,unsigned int>::~Hash(uint64_t a1)
{
  Hash<CWIDAC,CWIDAC,CWIDAC,unsigned int>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<CWIDAC,CWIDAC,CWIDAC,unsigned int>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218B30;
  if (*(_DWORD *)(a1 + 8))
    Hash<CWIDAC,CWIDAC,CWIDAC,unsigned int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<CWIDAC,CWIDAC,CWIDAC,unsigned int>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t (*v7)(char *);
  uint64_t (*v8)(char *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = *(char **)v5;
          v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7)
            result = v7(v5 + 12);
          v8 = *(uint64_t (**)(char *))(v1 + 104);
          if (v8)
            result = v8(v5 + 36);
          *(_QWORD *)v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

unint64_t CWIDCrumbWACS::operator=(unint64_t a1, uint64_t a2)
{
  DgnArray<HistoryAndBigScore>::copyArraySlice(a1, (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8));
  DgnPrimArray<unsigned char>::copyArraySlice(a1 + 16, (_QWORD *)(a2 + 16), 0, *(_DWORD *)(a2 + 24));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

CWIDCrumbWACSFrame *DgnIOwnArray<CWIDCrumbWACSFrame *>::destructAt(CWIDCrumbWACSFrame *result, int a2, int a3)
{
  CWIDCrumbWACSFrame *v3;
  uint64_t v4;
  uint64_t v5;

  if (a3 + a2 > a2)
  {
    v3 = result;
    v4 = a2;
    v5 = a3 + a2 - 1;
    do
    {
      result = DgnDelete<CWIDCrumbWACSFrame>(*(CWIDCrumbWACSFrame **)(*(_QWORD *)v3 + 8 * v5));
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

void CollMgr::CollMgr(CollMgr *this, const CharInfo *a2)
{
  char *v3;
  _QWORD *v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  _OWORD *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  char *v14;
  char *v15;
  char *v16;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  v16 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  v15 = (char *)this + 40;
  *(_OWORD *)((char *)this + 56) = 0u;
  v14 = (char *)this + 56;
  *(_OWORD *)((char *)this + 72) = 0u;
  v3 = (char *)this + 72;
  *(_OWORD *)((char *)this + 88) = 0u;
  v4 = (_QWORD *)((char *)this + 88);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 8, 1, 1);
  *(_DWORD *)(*((_QWORD *)this + 1) + 4 * (*((_DWORD *)this + 4))++) = 0;
  v5 = *((_DWORD *)this + 8);
  if (v5 == *((_DWORD *)this + 9))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v16, 1, 1);
    v5 = *((_DWORD *)this + 8);
  }
  v6 = (_QWORD *)(*((_QWORD *)this + 3) + 16 * v5);
  *v6 = 0;
  v6[1] = 0;
  ++*((_DWORD *)this + 8);
  v7 = *((_DWORD *)this + 12);
  if (v7 == *((_DWORD *)this + 13))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v15, 1, 1);
    v7 = *((_DWORD *)this + 12);
  }
  v8 = (_QWORD *)(*((_QWORD *)this + 5) + 16 * v7);
  *v8 = 0;
  v8[1] = 0;
  ++*((_DWORD *)this + 12);
  v9 = *((_DWORD *)this + 16);
  if (v9 == *((_DWORD *)this + 17))
  {
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v14, 1, 1);
    v9 = *((_DWORD *)this + 16);
  }
  v10 = (_OWORD *)(*((_QWORD *)this + 7) + 32 * v9);
  *v10 = 0u;
  v10[1] = 0u;
  ++*((_DWORD *)this + 16);
  v11 = *((_DWORD *)this + 20);
  if (v11 == *((_DWORD *)this + 21))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v3, 1, 1);
    v11 = *((_DWORD *)this + 20);
  }
  v12 = (_QWORD *)(*((_QWORD *)this + 9) + 16 * v11);
  *v12 = 0;
  v12[1] = 0;
  ++*((_DWORD *)this + 20);
  v13 = *((_DWORD *)this + 24);
  if (v13 == *((_DWORD *)this + 25))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v4, 1, 1);
    v13 = *((_DWORD *)this + 24);
  }
  DgnString::DgnString((DgnString *)(*v4 + 16 * v13));
  ++*((_DWORD *)this + 24);
  *(_QWORD *)this = a2;
  *((_WORD *)this + 60) = 1;
  *((_WORD *)this + 104) = 0;
}

void sub_209A42034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  DgnPrimArray<unsigned int>::~DgnPrimArray(a13);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a14);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v21);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v20);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v25);
  DgnArray<DgnString>::releaseAll(v24);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a10);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a12);
  DgnArray<DgnString>::releaseAll(v23);
  DgnArray<DgnArray<ParseToken>>::releaseAll(v22);
  DgnArray<Uns32OneToOneMap>::releaseAll(a17);
  DgnArray<DgnArray<ParseToken>>::releaseAll(a18);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a19);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19);
  _Unwind_Resume(a1);
}

void CollMgr::~CollMgr(CollMgr *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 312);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 280);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 176);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 88);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 72);
  DgnArray<Uns32OneToOneMap>::releaseAll((uint64_t)this + 56);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 40);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8);
}

uint64_t CollMgr::flushPendingCollation(CollMgr *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 **a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  const char *v17;
  uint64_t result;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_DWORD *)(a3 + 8))
    v17 = *(const char **)a3;
  else
    v17 = (const char *)&unk_209A87F54;
  result = strcmp(v17, "TwoLevel");
  if ((_DWORD)result)
  {
    if (!strcmp(v17, "Char"))
    {
      if (*(_DWORD *)(a2 + 8))
        v20 = *(char **)a2;
      else
        v20 = (char *)&unk_209A87F54;
      result = CollMgr::newUns8Collation(a1, v20, a4, a5, a6, a7);
    }
    else
    {
      result = strcmp(v17, "WideChar");
      if (!(_DWORD)result)
      {
        if (*(_DWORD *)(a2 + 8))
          v19 = *(char **)a2;
        else
          v19 = (char *)&unk_209A87F54;
        result = CollMgr::newUns32Collation(a1, v19, (uint64_t *)a8, (uint64_t *)a9, (uint64_t *)a10, a11);
      }
    }
  }
  *(_DWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a6 + 8) = 0;
  *((_DWORD *)a7 + 2) = 0;
  *(_DWORD *)(a8 + 8) = 0;
  *(_DWORD *)(a9 + 8) = 0;
  *(_DWORD *)(a10 + 8) = 0;
  *(_DWORD *)(a11 + 8) = 0;
  v21 = *(unsigned int *)(a11 + 24);
  if ((int)v21 >= 1)
  {
    v22 = 16 * v21 - 16;
    do
    {
      result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)(a11 + 16) + v22);
      v22 -= 16;
    }
    while (v22 != -16);
  }
  *(_DWORD *)(a11 + 24) = 0;
  return result;
}

uint64_t CollMgr::newUns8Collation(CollMgr *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 **a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  uint64_t v31;
  unint64_t j;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t k;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t m;
  uint64_t n;
  unsigned __int8 *v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  _QWORD *v61;
  unsigned int v62;
  _QWORD *v63;
  unsigned int v64;
  uint64_t v65;
  _DWORD *v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  _DWORD *v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  _DWORD *v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int v87;
  unsigned __int8 **v89;
  char *__s;
  CollMgr *v91;
  uint64_t v92;
  unint64_t v93;
  _OWORD v94[16];
  _OWORD v95[16];
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  if ((checkValidCollName(a2) & 1) == 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1036, (uint64_t)"word/collmgr", 24, (uint64_t)"%.500s", v16, v17, (char)a2);
  if (CollMgr::lookupCollation(a1, a2, v12, v13, v14, v15, v16, v17))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1038, (uint64_t)"word/collmgr", 11, (uint64_t)"%.500s", v18, v19, (char)a2);
  if (**(_DWORD **)a1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1040, (uint64_t)"word/collmgr", 4, (uint64_t)"%s", v18, v19, (char)&errStr_word_collmgr_E_COLLATION_BAD_TYPE);
  __s = a2;
  v91 = a1;
  memset(v95, 0, sizeof(v95));
  memset(v94, 0, sizeof(v94));
  v89 = a6;
  if (*((_DWORD *)a6 + 2) != 256)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1051, (uint64_t)"word/collmgr", 19, (uint64_t)"%d", v18, v19, 0);
  v20 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v20)
  {
    v21 = (_QWORD *)a3;
    v22 = 0;
    v23 = 4;
    v24 = 1;
    do
    {
      v25 = (unsigned __int8 *)(*v21 + 4 * v22);
      *((_BYTE *)v95 + *v25) = 1;
      *((_BYTE *)v94 + v25[2]) = 1;
      *((_BYTE *)v94 + v25[3]) = 1;
      v92 = v23;
      v93 = v22 + 1;
      v26 = v24;
      if (v22 + 1 < v20)
      {
        do
        {
          if (*(unsigned __int8 *)(*(_QWORD *)a3 + v23) == *v25)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1061, (uint64_t)"word/collmgr", 12, (uint64_t)"%.500s", v18, v19, (char)"more than one oneToTwo.");
            v20 = *(unsigned int *)(a3 + 8);
          }
          ++v26;
          v23 += 4;
        }
        while (v26 < v20);
      }
      v27 = *(unsigned int *)(a4 + 8);
      if ((_DWORD)v27)
      {
        v28 = 0;
        for (i = 0; i < v27; ++i)
        {
          if (*(unsigned __int8 *)(*(_QWORD *)a4 + v28) == *v25)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1066, (uint64_t)"word/collmgr", 12, (uint64_t)"%.500s", v18, v19, (char)"both a oneToTwo and a twoToOne.");
            v27 = *(unsigned int *)(a4 + 8);
          }
          v28 += 4;
        }
      }
      v30 = *(unsigned int *)(a5 + 8);
      if ((_DWORD)v30)
      {
        v31 = 0;
        for (j = 0; j < v30; ++j)
        {
          if (*(unsigned __int8 *)(*(_QWORD *)a5 + v31) == *v25)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1071, (uint64_t)"word/collmgr", 12, (uint64_t)"%.500s", v18, v19, (char)"both a oneToTwo and a twoToTwo.");
            v30 = *(unsigned int *)(a5 + 8);
          }
          v31 += 4;
        }
      }
      v21 = (_QWORD *)a3;
      v20 = *(unsigned int *)(a3 + 8);
      ++v24;
      v22 = v93;
      v23 = v92 + 4;
    }
    while (v93 < v20);
  }
  v33 = *(unsigned int *)(a4 + 8);
  if (!(_DWORD)v33)
  {
    v42 = *(unsigned int *)(a5 + 8);
    if (!*(_DWORD *)(a5 + 8))
      goto LABEL_53;
    goto LABEL_45;
  }
  v34 = 0;
  v35 = 0;
  v36 = 1;
  do
  {
    v37 = (unsigned __int8 *)(*(_QWORD *)a4 + 4 * v35);
    *((_BYTE *)v95 + *v37) = 1;
    v38 = v37 + 1;
    *((_BYTE *)v95 + v37[1]) = 1;
    *((_BYTE *)v94 + v37[2]) = 1;
    ++v35;
    v39 = v34;
    v40 = v36;
    if (v35 < v33)
    {
      do
      {
        v41 = *(_QWORD *)a4 + v39;
        if (*(unsigned __int8 *)(v41 + 4) == *v37 && *(unsigned __int8 *)(v41 + 5) == *v38)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1084, (uint64_t)"word/collmgr", 13, (uint64_t)"%.500s", v18, v19, (char)"more than one twoToOne.");
          v33 = *(unsigned int *)(a4 + 8);
        }
        ++v40;
        v39 += 4;
      }
      while (v40 < v33);
    }
    v42 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v42)
    {
      v43 = 0;
      for (k = 0; k < v42; ++k)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)a5 + v43) == *v37 && *(unsigned __int8 *)(*(_QWORD *)a5 + v43 + 1) == *v38)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1090, (uint64_t)"word/collmgr", 13, (uint64_t)"%.500s", v18, v19, (char)"both a twoToOne and a twoToTwo.");
          v42 = *(unsigned int *)(a5 + 8);
        }
        v43 += 4;
      }
      v33 = *(unsigned int *)(a4 + 8);
    }
    else
    {
      v42 = 0;
    }
    ++v36;
    v34 += 4;
  }
  while (v35 < v33);
  if (v42)
  {
LABEL_45:
    v45 = 0;
    v46 = 0;
    v47 = 1;
    do
    {
      v48 = (unsigned __int8 *)(*(_QWORD *)a5 + 4 * v46);
      *((_BYTE *)v95 + *v48) = 1;
      *((_BYTE *)v95 + v48[1]) = 1;
      *((_BYTE *)v94 + v48[2]) = 1;
      *((_BYTE *)v94 + v48[3]) = 1;
      if (++v46 < v42)
      {
        v49 = v45;
        v50 = v47;
        do
        {
          v51 = *(_QWORD *)a5 + v49;
          if (*(unsigned __int8 *)(v51 + 4) == *v48 && *(unsigned __int8 *)(v51 + 5) == v48[1])
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1104, (uint64_t)"word/collmgr", 13, (uint64_t)"%.500s", v18, v19, (char)"more than one twoToTwo.");
            v42 = *(unsigned int *)(a5 + 8);
          }
          ++v50;
          v49 += 4;
        }
        while (v50 < v42);
      }
      ++v47;
      v45 += 4;
    }
    while (v46 < v42);
  }
LABEL_53:
  if (LOBYTE(v95[0]) | LOBYTE(v94[0]))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1108, (uint64_t)"word/collmgr", 16, (uint64_t)"%s", v18, v19, (char)&errStr_word_collmgr_E_FROM_OR_TO_IS_ZERO);
  for (m = 0; m != 256; ++m)
  {
    if (*((_BYTE *)v95 + m) && *((_BYTE *)v94 + m))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1111, (uint64_t)"word/collmgr", 17, (uint64_t)"%u", v18, v19, m);
  }
  for (n = 0; n != 256; ++n)
  {
    v54 = *v89;
    if (n)
    {
      if (!v54[n])
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1122, (uint64_t)"word/collmgr", 15, (uint64_t)"%u", v18, v19, n);
    }
    else
    {
      v55 = *v54;
      if (v55)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1118, (uint64_t)"word/collmgr", 14, (uint64_t)"%u", v18, v19, v55);
    }
  }
  v56 = *((_DWORD *)v91 + 28);
  if (v56)
  {
    v57 = v56 - 1;
    v58 = *(unsigned __int16 *)(*((_QWORD *)v91 + 13) + 2 * v57);
    *((_DWORD *)v91 + 28) = v57;
  }
  else
  {
    if (*((unsigned __int16 *)v91 + 60) >= 0x4000u)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1136, (uint64_t)"word/collmgr", 2, (uint64_t)"%s", v18, v19, (char)&errStr_word_collmgr_E_TOO_MANY);
    v59 = *((_DWORD *)v91 + 4);
    if (v59 == *((_DWORD *)v91 + 5))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v91 + 8, 1, 1);
      v59 = *((_DWORD *)v91 + 4);
    }
    *((_DWORD *)v91 + 4) = v59 + 1;
    v60 = *((_DWORD *)v91 + 8);
    if (v60 == *((_DWORD *)v91 + 9))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v91 + 24, 1, 1);
      v60 = *((_DWORD *)v91 + 8);
    }
    v61 = (_QWORD *)(*((_QWORD *)v91 + 3) + 16 * v60);
    *v61 = 0;
    v61[1] = 0;
    ++*((_DWORD *)v91 + 8);
    v62 = *((_DWORD *)v91 + 12);
    if (v62 == *((_DWORD *)v91 + 13))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v91 + 40, 1, 1);
      v62 = *((_DWORD *)v91 + 12);
    }
    v63 = (_QWORD *)(*((_QWORD *)v91 + 5) + 16 * v62);
    *v63 = 0;
    v63[1] = 0;
    ++*((_DWORD *)v91 + 12);
    v64 = *((_DWORD *)v91 + 24);
    if (v64 == *((_DWORD *)v91 + 25))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v91 + 88, 1, 1);
      v64 = *((_DWORD *)v91 + 24);
    }
    DgnString::DgnString((DgnString *)(*((_QWORD *)v91 + 11) + 16 * v64));
    ++*((_DWORD *)v91 + 24);
    v58 = *((unsigned __int16 *)v91 + 60);
    *((_WORD *)v91 + 60) = v58 + 1;
  }
  *(_DWORD *)(*((_QWORD *)v91 + 1) + 4 * v58) = 1;
  DgnPrimArray<unsigned char>::copyArraySlice(*((_QWORD *)v91 + 3) + 16 * v58, v89, 0, *((_DWORD *)v89 + 2));
  v65 = *((_QWORD *)v91 + 5) + 16 * v58;
  *(_DWORD *)(v65 + 8) = 0;
  v66 = (_DWORD *)(v65 + 8);
  v67 = *(_DWORD *)(a3 + 8);
  v68 = *(_DWORD *)(v65 + 12);
  if (v67 > v68)
  {
    DgnPrimArray<unsigned int>::reallocElts(v65, v67 - v68, 1);
    v67 = *(_DWORD *)(a3 + 8);
  }
  if (v67)
  {
    v69 = 0;
    do
    {
      *(_DWORD *)(*(_QWORD *)v65 + 4 * (v69 + *v66)) = *(_DWORD *)(*(_QWORD *)a3 + 4 * v69);
      ++v69;
      v70 = *(unsigned int *)(a3 + 8);
    }
    while (v69 < v70);
  }
  else
  {
    LODWORD(v70) = 0;
  }
  *v66 += v70;
  v71 = *((_QWORD *)v91 + 5) + 16 * v58;
  v72 = *(_DWORD *)(a4 + 8);
  v74 = *(_DWORD *)(v71 + 8);
  v73 = (_DWORD *)(v71 + 8);
  v75 = *(_DWORD *)(v71 + 12);
  v76 = v74 + v72 - v75;
  if (v74 + v72 > v75)
  {
    DgnPrimArray<unsigned int>::reallocElts(*((_QWORD *)v91 + 5) + 16 * v58, v76, 1);
    v72 = *(_DWORD *)(a4 + 8);
  }
  if (v72)
  {
    v77 = 0;
    do
    {
      *(_DWORD *)(*(_QWORD *)v71 + 4 * (v77 + *v73)) = *(_DWORD *)(*(_QWORD *)a4 + 4 * v77);
      ++v77;
      v78 = *(unsigned int *)(a4 + 8);
    }
    while (v77 < v78);
  }
  else
  {
    LODWORD(v78) = 0;
  }
  *v73 += v78;
  v79 = *((_QWORD *)v91 + 5) + 16 * v58;
  v80 = *(_DWORD *)(a5 + 8);
  v82 = *(_DWORD *)(v79 + 8);
  v81 = (_DWORD *)(v79 + 8);
  v83 = *(_DWORD *)(v79 + 12);
  v84 = v82 + v80 - v83;
  if (v82 + v80 > v83)
  {
    DgnPrimArray<unsigned int>::reallocElts(*((_QWORD *)v91 + 5) + 16 * v58, v84, 1);
    v80 = *(_DWORD *)(a5 + 8);
  }
  if (v80)
  {
    v85 = 0;
    do
    {
      *(_DWORD *)(*(_QWORD *)v79 + 4 * (v85 + *v81)) = *(_DWORD *)(*(_QWORD *)a5 + 4 * v85);
      ++v85;
      v86 = *(unsigned int *)(a5 + 8);
    }
    while (v85 < v86);
  }
  else
  {
    LODWORD(v86) = 0;
  }
  *v81 += v86;
  DgnString::operator=((DgnString *)(*((_QWORD *)v91 + 11) + 16 * v58), __s);
  v87 = *((_DWORD *)v91 + 56);
  if (v87 == *((_DWORD *)v91 + 57))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)v91 + 216, 1, 1);
    v87 = *((_DWORD *)v91 + 56);
  }
  *(_WORD *)(*((_QWORD *)v91 + 27) + 2 * v87) = v58;
  *((_DWORD *)v91 + 56) = v87 + 1;
  return v58;
}

uint64_t CollMgr::newUns32Collation(CollMgr *a1, char *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t i;
  unint64_t v35;
  uint64_t v36;
  unint64_t j;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  int v44;
  uint64_t v45;
  int *v46;
  int v47;
  uint64_t v48;
  int *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t k;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  int v62;
  uint64_t v63;
  int *v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  _OWORD *v90;
  unsigned int v91;
  _QWORD *v92;
  unsigned int v93;
  unint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  _DWORD *v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  _DWORD *v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unsigned int v120;
  uint64_t *v122;
  char *__s;
  CollMgr *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE v130[80];
  uint64_t *v131;
  _BYTE v132[80];
  uint64_t *v133;

  if ((checkValidCollName(a2) & 1) == 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1166, (uint64_t)"word/collmgr", 24, (uint64_t)"%.500s", v16, v17, (char)a2);
  if (CollMgr::lookupCollation(a1, a2, v12, v13, v14, v15, v16, v17))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1168, (uint64_t)"word/collmgr", 11, (uint64_t)"%.500s", v18, v19, (char)a2);
  if (!**(_DWORD **)a1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1170, (uint64_t)"word/collmgr", 4, (uint64_t)"%s", v18, v19, (char)&errStr_word_collmgr_E_COLLATION_BAD_TYPE);
  v124 = a1;
  v125 = a6;
  __s = a2;
  HashKEV<unsigned int,unsigned int,Uns32Scope>::HashKEV((uint64_t)v132, 0, 16);
  HashKEV<unsigned int,unsigned int,Uns32Scope>::HashKEV((uint64_t)v130, 0, 16);
  v128 = 0;
  v129 = 0;
  if (*((_DWORD *)a3 + 2))
  {
    v22 = 0;
    v127 = 1;
    v126 = 16;
    do
    {
      v23 = a3;
      v24 = *a3;
      v25 = v22;
      v26 = (int *)(v24 + 16 * v22);
      if (!*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)v132, v26))
      {
        HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v132, v26);
        v27 = *v26;
        v28 = v129;
        if (v129 == (unint64_t)HIDWORD(v129))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v128, 1, 1);
          v28 = v129;
        }
        *(_DWORD *)(v128 + 4 * v28) = v27;
        LODWORD(v129) = v129 + 1;
      }
      if (!*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)v130, (int *)(v24 + 16 * v25 + 8)))
        HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v130, (int *)(v24 + 16 * v25 + 8));
      if (!*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)v130, (int *)(v24 + 16 * v25 + 12)))
        HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v130, (int *)(v24 + 16 * v25 + 12));
      v29 = *((unsigned int *)v23 + 2);
      v30 = v126;
      v31 = v127;
      if (v25 + 1 < v29)
      {
        do
        {
          if (*(_DWORD *)(*v23 + v30) == *v26)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1194, (uint64_t)"word/collmgr", 12, (uint64_t)"%.500s", v20, v21, (char)"more than one oneToTwo.");
            v29 = *((unsigned int *)v23 + 2);
          }
          ++v31;
          v30 += 16;
        }
        while (v31 < v29);
      }
      v32 = *((unsigned int *)a4 + 2);
      if ((_DWORD)v32)
      {
        v33 = 0;
        for (i = 0; i < v32; ++i)
        {
          if (*(_DWORD *)(*a4 + v33) == *v26)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1199, (uint64_t)"word/collmgr", 12, (uint64_t)"%.500s", v20, v21, (char)"both a oneToTwo and a twoToOne.");
            v32 = *((unsigned int *)a4 + 2);
          }
          v33 += 16;
        }
      }
      v35 = *((unsigned int *)a5 + 2);
      if ((_DWORD)v35)
      {
        v36 = 0;
        for (j = 0; j < v35; ++j)
        {
          if (*(_DWORD *)(*a5 + v36) == *v26)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1204, (uint64_t)"word/collmgr", 12, (uint64_t)"%.500s", v20, v21, (char)"both a oneToTwo and a twoToTwo.");
            v35 = *((unsigned int *)a5 + 2);
          }
          v36 += 16;
        }
      }
      a3 = v23;
      v126 += 16;
      ++v127;
      v22 = v25 + 1;
    }
    while (v25 + 1 < (unint64_t)*((unsigned int *)v23 + 2));
  }
  v122 = a3;
  if (!*((_DWORD *)a4 + 2))
  {
    v41 = v125;
    if (!*((_DWORD *)a5 + 2))
      goto LABEL_80;
    goto LABEL_61;
  }
  v38 = 0;
  v39 = 0;
  v40 = 1;
  v41 = v125;
  do
  {
    v42 = *a4;
    v43 = (int *)(*a4 + 16 * v39);
    if (!*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)v132, v43))
    {
      HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v132, v43);
      v44 = *v43;
      v45 = v129;
      if (v129 == (unint64_t)HIDWORD(v129))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v128, 1, 1);
        v45 = v129;
      }
      *(_DWORD *)(v128 + 4 * v45) = v44;
      LODWORD(v129) = v129 + 1;
    }
    v46 = (int *)(v42 + 16 * v39 + 4);
    if (!*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)v132, v46))
    {
      HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v132, v46);
      v47 = *v43;
      v48 = v129;
      if (v129 == (unint64_t)HIDWORD(v129))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v128, 1, 1);
        v48 = v129;
      }
      *(_DWORD *)(v128 + 4 * v48) = v47;
      LODWORD(v129) = v129 + 1;
    }
    v49 = (int *)(v42 + 16 * v39 + 8);
    if (!*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)v130, v49))
      HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v130, v49);
    ++v39;
    v50 = *((unsigned int *)a4 + 2);
    v51 = v38;
    v52 = v40;
    if (v39 < v50)
    {
      do
      {
        v53 = *a4 + v51;
        if (*(_DWORD *)(v53 + 16) == *v43 && *(_DWORD *)(v53 + 20) == *v46)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1228, (uint64_t)"word/collmgr", 13, (uint64_t)"%.500s", v20, v21, (char)"more than one twoToOne.");
          v50 = *((unsigned int *)a4 + 2);
        }
        ++v52;
        v51 += 16;
      }
      while (v52 < v50);
    }
    v54 = *((unsigned int *)a5 + 2);
    if ((_DWORD)v54)
    {
      v55 = 0;
      for (k = 0; k < v54; ++k)
      {
        if (*(_DWORD *)(*a5 + v55) == *v43 && *(_DWORD *)(*a5 + v55 + 4) == *v46)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1234, (uint64_t)"word/collmgr", 13, (uint64_t)"%.500s", v20, v21, (char)"both a twoToOne and a twoToTwo.");
          v54 = *((unsigned int *)a5 + 2);
        }
        v55 += 16;
      }
      v50 = *((unsigned int *)a4 + 2);
    }
    else
    {
      v54 = 0;
    }
    ++v40;
    v38 += 16;
  }
  while (v39 < v50);
  if (v54)
  {
LABEL_61:
    v57 = 0;
    v58 = 0;
    v59 = 1;
    do
    {
      v60 = *a5;
      v61 = (int *)(*a5 + 16 * v58);
      if (!*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)v132, v61))
      {
        HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v132, v61);
        v62 = *v61;
        v63 = v129;
        if (v129 == (unint64_t)HIDWORD(v129))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v128, 1, 1);
          v63 = v129;
        }
        *(_DWORD *)(v128 + 4 * v63) = v62;
        LODWORD(v129) = v129 + 1;
      }
      v64 = (int *)(v60 + 16 * v58 + 4);
      if (!*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)v132, v64))
      {
        HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v132, v64);
        v65 = *v61;
        v66 = v129;
        if (v129 == (unint64_t)HIDWORD(v129))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v128, 1, 1);
          v66 = v129;
        }
        *(_DWORD *)(v128 + 4 * v66) = v65;
        LODWORD(v129) = v129 + 1;
      }
      if (!*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)v130, (int *)(v60 + 16 * v58 + 8)))
        HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v130, (int *)(v60 + 16 * v58 + 8));
      if (!*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)v130, (int *)(v60 + 16 * v58 + 12)))
        HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v130, (int *)(v60 + 16 * v58 + 12));
      ++v58;
      v67 = *((unsigned int *)a5 + 2);
      v68 = v57;
      v69 = v59;
      if (v58 < v67)
      {
        do
        {
          v70 = *a5 + v68;
          if (*(_DWORD *)(v70 + 16) == *v61 && *(_DWORD *)(v70 + 20) == *v64)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1262, (uint64_t)"word/collmgr", 13, (uint64_t)"%.500s", v20, v21, (char)"more than one twoToTwo.");
            v67 = *((unsigned int *)a5 + 2);
          }
          ++v69;
          v68 += 16;
        }
        while (v69 < v67);
      }
      ++v59;
      v57 += 16;
    }
    while (v58 < v67);
  }
LABEL_80:
  v71 = v133;
  while (1)
  {
    v71 = (uint64_t *)*v71;
    if (!v71)
      break;
    if (!*((_DWORD *)v71 + 2) && !*((_DWORD *)v71 + 3))
    {
LABEL_89:
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1267, (uint64_t)"word/collmgr", 16, (uint64_t)"%s", v20, v21, (char)&errStr_word_collmgr_E_FROM_OR_TO_IS_ZERO);
      goto LABEL_90;
    }
  }
  v72 = v131;
  while (1)
  {
    v72 = (uint64_t *)*v72;
    if (!v72)
      break;
    if (!*((_DWORD *)v72 + 2) && !*((_DWORD *)v72 + 3))
      goto LABEL_89;
  }
LABEL_90:
  if ((_DWORD)v129)
  {
    v73 = 0;
    v74 = 0;
    do
    {
      if (*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)v130, (int *)(v128 + v73)))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1271, (uint64_t)"word/collmgr", 17, (uint64_t)"%u", v20, v21, *(_DWORD *)(v128 + v73));
      ++v74;
      v73 += 4;
    }
    while (v74 < v129);
  }
  v75 = *(unsigned int *)(v41 + 8);
  if (!(_DWORD)v75)
    goto LABEL_108;
  v76 = 0;
  v77 = *(_QWORD *)(v41 + 16);
  do
  {
    if (!*(_DWORD *)(v77 + 16 * v76 + 8))
      goto LABEL_107;
    v78 = 0;
    do
    {
      v79 = *(_DWORD *)(*(_QWORD *)(v77 + 16 * v76) + 4 * v78);
      if ((_DWORD)v78 + *(_DWORD *)(*(_QWORD *)v41 + 4 * v76))
      {
        if (v79)
          goto LABEL_105;
        v80 = 15;
        v81 = 1286;
        v82 = "%u";
        v79 = v78 + *(_DWORD *)(*(_QWORD *)v41 + 4 * v76);
      }
      else
      {
        if (!v79)
          goto LABEL_105;
        v80 = 14;
        v81 = 1281;
        v82 = "%u";
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", v81, (uint64_t)"word/collmgr", v80, (uint64_t)v82, v20, v21, v79);
LABEL_105:
      ++v78;
      v77 = *(_QWORD *)(v41 + 16);
    }
    while (v78 < *(unsigned int *)(v77 + 16 * v76 + 8));
    v75 = *(unsigned int *)(v41 + 8);
LABEL_107:
    ++v76;
  }
  while (v76 < v75);
LABEL_108:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v128);
  HashKEV<unsigned int,unsigned int,Uns32Scope>::~HashKEV((uint64_t)v130);
  HashKEV<unsigned int,unsigned int,Uns32Scope>::~HashKEV((uint64_t)v132);
  v85 = *((_DWORD *)v124 + 28);
  if (v85)
  {
    v86 = v85 - 1;
    v87 = *(unsigned __int16 *)(*((_QWORD *)v124 + 13) + 2 * v86);
    *((_DWORD *)v124 + 28) = v86;
  }
  else
  {
    if (*((unsigned __int16 *)v124 + 60) >= 0x4000u)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1301, (uint64_t)"word/collmgr", 2, (uint64_t)"%s", v83, v84, (char)&errStr_word_collmgr_E_TOO_MANY);
    v88 = *((_DWORD *)v124 + 4);
    if (v88 == *((_DWORD *)v124 + 5))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v124 + 8, 1, 1);
      v88 = *((_DWORD *)v124 + 4);
    }
    *((_DWORD *)v124 + 4) = v88 + 1;
    v89 = *((_DWORD *)v124 + 16);
    if (v89 == *((_DWORD *)v124 + 17))
    {
      DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v124 + 56, 1, 1);
      v89 = *((_DWORD *)v124 + 16);
    }
    v90 = (_OWORD *)(*((_QWORD *)v124 + 7) + 32 * v89);
    *v90 = 0u;
    v90[1] = 0u;
    ++*((_DWORD *)v124 + 16);
    v91 = *((_DWORD *)v124 + 20);
    if (v91 == *((_DWORD *)v124 + 21))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v124 + 72, 1, 1);
      v91 = *((_DWORD *)v124 + 20);
    }
    v92 = (_QWORD *)(*((_QWORD *)v124 + 9) + 16 * v91);
    *v92 = 0;
    v92[1] = 0;
    ++*((_DWORD *)v124 + 20);
    v93 = *((_DWORD *)v124 + 24);
    if (v93 == *((_DWORD *)v124 + 25))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v124 + 88, 1, 1);
      v93 = *((_DWORD *)v124 + 24);
    }
    DgnString::DgnString((DgnString *)(*((_QWORD *)v124 + 11) + 16 * v93));
    ++*((_DWORD *)v124 + 24);
    v87 = *((unsigned __int16 *)v124 + 60);
    *((_WORD *)v124 + 60) = v87 + 1;
  }
  *(_DWORD *)(*((_QWORD *)v124 + 1) + 4 * v87) = 1;
  v94 = *((_QWORD *)v124 + 7) + 32 * v87;
  DgnPrimArray<int>::copyArraySlice(v94, (uint64_t *)v41, 0, *(_DWORD *)(v41 + 8));
  DgnArray<DgnPrimArray<unsigned int>>::copyArraySlice(v94 + 16, (_QWORD *)(v41 + 16), 0, *(_DWORD *)(v41 + 24));
  v95 = *((_QWORD *)v124 + 9) + 16 * v87;
  *(_DWORD *)(v95 + 8) = 0;
  v96 = (_DWORD *)(v95 + 8);
  v97 = *((_DWORD *)v122 + 2);
  v98 = *(_DWORD *)(v95 + 12);
  if (v97 > v98)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(v95, v97 - v98, 1);
    v97 = *((_DWORD *)v122 + 2);
  }
  if (v97)
  {
    v99 = 0;
    v100 = 0;
    do
    {
      *(_OWORD *)(*(_QWORD *)v95 + 16 * (v100++ + *v96)) = *(_OWORD *)(*v122 + v99);
      v101 = *((unsigned int *)v122 + 2);
      v99 += 16;
    }
    while (v100 < v101);
  }
  else
  {
    LODWORD(v101) = 0;
  }
  *v96 += v101;
  v102 = *((_QWORD *)v124 + 9) + 16 * v87;
  v103 = *((_DWORD *)a4 + 2);
  v105 = *(_DWORD *)(v102 + 8);
  v104 = (_DWORD *)(v102 + 8);
  v106 = *(_DWORD *)(v102 + 12);
  v107 = v105 + v103 - v106;
  if (v105 + v103 > v106)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(*((_QWORD *)v124 + 9) + 16 * v87, v107, 1);
    v103 = *((_DWORD *)a4 + 2);
  }
  if (v103)
  {
    v108 = 0;
    v109 = 0;
    do
    {
      *(_OWORD *)(*(_QWORD *)v102 + 16 * (v109++ + *v104)) = *(_OWORD *)(*a4 + v108);
      v110 = *((unsigned int *)a4 + 2);
      v108 += 16;
    }
    while (v109 < v110);
  }
  else
  {
    LODWORD(v110) = 0;
  }
  *v104 += v110;
  v111 = *((_QWORD *)v124 + 9) + 16 * v87;
  v112 = *((_DWORD *)a5 + 2);
  v114 = *(_DWORD *)(v111 + 8);
  v113 = (_DWORD *)(v111 + 8);
  v115 = *(_DWORD *)(v111 + 12);
  v116 = v114 + v112 - v115;
  if (v114 + v112 > v115)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(*((_QWORD *)v124 + 9) + 16 * v87, v116, 1);
    v112 = *((_DWORD *)a5 + 2);
  }
  if (v112)
  {
    v117 = 0;
    v118 = 0;
    do
    {
      *(_OWORD *)(*(_QWORD *)v111 + 16 * (v118++ + *v113)) = *(_OWORD *)(*a5 + v117);
      v119 = *((unsigned int *)a5 + 2);
      v117 += 16;
    }
    while (v118 < v119);
  }
  else
  {
    LODWORD(v119) = 0;
  }
  *v113 += v119;
  DgnString::operator=((DgnString *)(*((_QWORD *)v124 + 11) + 16 * v87), __s);
  v120 = *((_DWORD *)v124 + 56);
  if (v120 == *((_DWORD *)v124 + 57))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)v124 + 216, 1, 1);
    v120 = *((_DWORD *)v124 + 56);
  }
  *(_WORD *)(*((_QWORD *)v124 + 27) + 2 * v120) = v87;
  *((_DWORD *)v124 + 56) = v120 + 1;
  return v87;
}

void sub_209A43988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a18);
  HashKEV<unsigned int,unsigned int,Uns32Scope>::~HashKEV((uint64_t)&a20);
  HashKEV<unsigned int,unsigned int,Uns32Scope>::~HashKEV((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void CollMgr::loadCollMgrFromText(CollMgr *this, DFile *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char v65;
  char *LineFieldString;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int LineFieldUnsigned;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  const char *v99;
  uint64_t CurrentLine;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  int v109;
  const char *v110;
  const char *v111;
  int v112;
  const char *v113;
  const char *v114;
  const char *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const char *v150;
  unsigned int v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  unsigned int *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  unsigned int *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  unsigned int *v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  unsigned int v234;
  unsigned int v235;
  _QWORD *v236;
  unsigned int v237;
  uint64_t v238;
  char *__s1;
  unsigned int v240;
  const char *v241;
  unsigned int v242;
  const char *v243;
  unsigned int v244;
  const char *v245;
  int v246;
  char *v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned __int8 *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _BYTE v267[16];
  void *v268;
  int v269;
  const char *v270;
  uint64_t v271;
  _QWORD v272[2];
  _BYTE v273[240];

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v273);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v273, (uint64_t)a2, 0x5Bu, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v273, "Collation");
  v272[0] = 0;
  v272[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v273, sTCO_Versions, (uint64_t)v272, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v273, (unsigned int *)v272, v9, v10, v11, v12, v13, v14);
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v273, v15, v16, v17, v18, v19, v20, v21);
  v251 = 0uLL;
  DgnTextFile::getLineFieldNames((uint64_t)v273, (uint64_t)&v251);
  v270 = 0;
  v271 = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v273, (unint64_t)&v270);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v273, 9, v22, v23, v24, v25, v26, v27);
  v28 = v251;
  if (*(_DWORD *)(v251 + 8))
    v29 = *(const char **)v251;
  else
    v29 = (const char *)&unk_209A87F54;
  if (strcmp(v29, "CollName"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 412, (uint64_t)"word/collmgr", 8, (uint64_t)"%.500s %.500s", v30, v31, (char)"CollName");
    v28 = v251;
  }
  if (*(_DWORD *)v270)
  {
    if (*(_DWORD *)(v28 + 8))
      v32 = *(void **)v28;
    else
      v32 = &unk_209A87F54;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 415, (uint64_t)"word/collmgr", 9, (uint64_t)"%.500s %.500s", v30, v31, (char)v32);
    v28 = v251;
  }
  if (*(_DWORD *)(v28 + 24))
    v33 = *(const char **)(v28 + 16);
  else
    v33 = (const char *)&unk_209A87F54;
  if (strcmp(v33, "CollType"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 419, (uint64_t)"word/collmgr", 8, (uint64_t)"%.500s %.500s", v34, v35, (char)"CollType");
    v28 = v251;
  }
  if (*((_DWORD *)v270 + 1))
  {
    if (*(_DWORD *)(v28 + 24))
      v36 = *(void **)(v28 + 16);
    else
      v36 = &unk_209A87F54;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 422, (uint64_t)"word/collmgr", 9, (uint64_t)"%.500s %.500s", v34, v35, (char)v36);
    v28 = v251;
  }
  if (*(_DWORD *)(v28 + 40))
    v37 = *(const char **)(v28 + 32);
  else
    v37 = (const char *)&unk_209A87F54;
  if (strcmp(v37, "ComponentCollName1"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 426, (uint64_t)"word/collmgr", 8, (uint64_t)"%.500s %.500s", v38, v39, (char)"ComponentCollName1");
    v28 = v251;
  }
  if (*((_DWORD *)v270 + 2))
  {
    if (*(_DWORD *)(v28 + 40))
      v40 = *(void **)(v28 + 32);
    else
      v40 = &unk_209A87F54;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 429, (uint64_t)"word/collmgr", 9, (uint64_t)"%.500s %.500s", v38, v39, (char)v40);
    v28 = v251;
  }
  if (*(_DWORD *)(v28 + 56))
    v41 = *(const char **)(v28 + 48);
  else
    v41 = (const char *)&unk_209A87F54;
  if (strcmp(v41, "ComponentCollName2"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 433, (uint64_t)"word/collmgr", 8, (uint64_t)"%.500s %.500s", v42, v43, (char)"ComponentCollName2");
    v28 = v251;
  }
  if (*((_DWORD *)v270 + 3))
  {
    if (*(_DWORD *)(v28 + 56))
      v44 = *(void **)(v28 + 48);
    else
      v44 = &unk_209A87F54;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 436, (uint64_t)"word/collmgr", 9, (uint64_t)"%.500s %.500s", v42, v43, (char)v44);
    v28 = v251;
  }
  if (*(_DWORD *)(v28 + 72))
    v45 = *(const char **)(v28 + 64);
  else
    v45 = (const char *)&unk_209A87F54;
  if (strcmp(v45, "MapType"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 440, (uint64_t)"word/collmgr", 8, (uint64_t)"%.500s %.500s", v46, v47, (char)"MapType");
    v28 = v251;
  }
  if (*((_DWORD *)v270 + 4))
  {
    if (*(_DWORD *)(v28 + 72))
      v48 = *(void **)(v28 + 64);
    else
      v48 = &unk_209A87F54;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 443, (uint64_t)"word/collmgr", 9, (uint64_t)"%.500s %.500s", v46, v47, (char)v48);
    v28 = v251;
  }
  if (*(_DWORD *)(v28 + 88))
    v49 = *(const char **)(v28 + 80);
  else
    v49 = (const char *)&unk_209A87F54;
  if (strcmp(v49, "MapFrom1"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 447, (uint64_t)"word/collmgr", 8, (uint64_t)"%.500s %.500s", v50, v51, (char)"MapFrom1");
    v28 = v251;
  }
  if (*((_DWORD *)v270 + 5) != 3)
  {
    if (*(_DWORD *)(v28 + 88))
      v52 = *(void **)(v28 + 80);
    else
      v52 = &unk_209A87F54;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 450, (uint64_t)"word/collmgr", 9, (uint64_t)"%.500s %.500s", v50, v51, (char)v52);
    v28 = v251;
  }
  if (*(_DWORD *)(v28 + 104))
    v53 = *(const char **)(v28 + 96);
  else
    v53 = (const char *)&unk_209A87F54;
  if (strcmp(v53, "MapFrom2"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 454, (uint64_t)"word/collmgr", 8, (uint64_t)"%.500s %.500s", v54, v55, (char)"MapFrom2");
    v28 = v251;
  }
  if (*((_DWORD *)v270 + 6) != 3)
  {
    if (*(_DWORD *)(v28 + 104))
      v56 = *(void **)(v28 + 96);
    else
      v56 = &unk_209A87F54;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 457, (uint64_t)"word/collmgr", 9, (uint64_t)"%.500s %.500s", v54, v55, (char)v56);
    v28 = v251;
  }
  if (*(_DWORD *)(v28 + 120))
    v57 = *(const char **)(v28 + 112);
  else
    v57 = (const char *)&unk_209A87F54;
  if (strcmp(v57, "MapTo1"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 461, (uint64_t)"word/collmgr", 8, (uint64_t)"%.500s %.500s", v58, v59, (char)"MapTo1");
    v28 = v251;
  }
  if (*((_DWORD *)v270 + 7) != 3)
  {
    if (*(_DWORD *)(v28 + 120))
      v60 = *(void **)(v28 + 112);
    else
      v60 = &unk_209A87F54;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 464, (uint64_t)"word/collmgr", 9, (uint64_t)"%.500s %.500s", v58, v59, (char)v60);
    v28 = v251;
  }
  if (*(_DWORD *)(v28 + 136))
    v61 = *(const char **)(v28 + 128);
  else
    v61 = (const char *)&unk_209A87F54;
  if (strcmp(v61, "MapTo2"))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 468, (uint64_t)"word/collmgr", 8, (uint64_t)"%.500s %.500s", v62, v63, (char)"MapTo2");
  if (*((_DWORD *)v270 + 8) != 3)
  {
    if (*(_DWORD *)(v251 + 136))
      v64 = *(void **)(v251 + 128);
    else
      v64 = &unk_209A87F54;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 471, (uint64_t)"word/collmgr", 9, (uint64_t)"%.500s %.500s", v62, v63, (char)v64);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v270);
  DgnArray<DgnString>::releaseAll((uint64_t)&v251);
  DgnString::DgnString((DgnString *)&v270);
  DgnString::DgnString((DgnString *)&v268);
  DgnString::DgnString((DgnString *)v267);
  v238 = 0;
  v237 = 0;
  v265 = 0;
  v266 = 0;
  v263 = 0;
  v264 = 0;
  v261 = 0;
  v262 = 0;
  v65 = 1;
  v259 = 0;
  v260 = 0;
  v257 = 0;
  v258 = 0;
  v255 = 0;
  v256 = 0;
  v253 = 0;
  v254 = 0;
  v251 = 0u;
  v252 = 0u;
  v249 = 0;
  v250 = 0;
  while (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v273))
  {
    LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v273, 0);
    DgnString::DgnString((DgnString *)&v247, LineFieldString);
    v67 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v273, 1u);
    DgnString::DgnString((DgnString *)&v245, v67);
    v68 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v273, 2u);
    DgnString::DgnString((DgnString *)&v243, v68);
    v69 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v273, 3u);
    DgnString::DgnString((DgnString *)&v241, v69);
    v70 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v273, 4u);
    DgnString::DgnString((DgnString *)&__s1, v70);
    LineFieldUnsigned = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v273, 5u, v71, v72, v73, v74, v75, v76);
    v84 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v273, 6u, v78, v79, v80, v81, v82, v83);
    v91 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v273, 7u, v85, v86, v87, v88, v89, v90);
    v98 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v273, 8u, v92, v93, v94, v95, v96, v97);
    if ((v65 & 1) != 0)
    {
      DgnString::operator=((DgnString *)&v270, (DgnString *)&v247);
      DgnString::operator=((DgnString *)&v268, (DgnString *)&v245);
      DgnString::operator=((DgnString *)v267, (DgnString *)&__s1);
    }
    if (v248)
      v99 = v247;
    else
      v99 = (const char *)&unk_209A87F54;
    if ((checkValidCollName(v99) & 1) == 0)
    {
      CurrentLine = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
      if (*(_DWORD *)(CurrentLine + 8))
        v103 = *(void **)CurrentLine;
      else
        v103 = &unk_209A87F54;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 515, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v101, v102, (char)v103);
    }
    if (v246)
      v104 = v245;
    else
      v104 = (const char *)&unk_209A87F54;
    if (strcmp(v104, "TwoLevel") && strcmp(v104, "Char") && strcmp(v104, "WideChar"))
    {
      v105 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
      if (*(_DWORD *)(v105 + 8))
        v108 = *(void **)v105;
      else
        v108 = &unk_209A87F54;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 520, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v106, v107, (char)v108);
    }
    v109 = v248;
    v110 = v247;
    if (v248)
      v111 = v247;
    else
      v111 = (const char *)&unk_209A87F54;
    v112 = v271;
    v113 = v270;
    if ((_DWORD)v271)
      v114 = v270;
    else
      v114 = (const char *)&unk_209A87F54;
    if (!strcmp(v111, v114))
    {
      v115 = v246 ? v245 : (const char *)&unk_209A87F54;
      v116 = (const char *)(v269 ? v268 : &unk_209A87F54);
      if (strcmp(v115, v116))
      {
        v117 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
        if (*(_DWORD *)(v117 + 8))
          v120 = *(void **)v117;
        else
          v120 = &unk_209A87F54;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 524, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v118, v119, (char)v120);
        v109 = v248;
        v110 = v247;
        v112 = v271;
        v113 = v270;
      }
    }
    if (v109)
      v121 = v110;
    else
      v121 = (const char *)&unk_209A87F54;
    if (v112)
      v122 = v113;
    else
      v122 = (const char *)&unk_209A87F54;
    if (strcmp(v121, v122))
    {
      if ((_DWORD)v250)
      {
        v123 = DWORD2(v251);
        if (DWORD2(v251) == (unint64_t)HIDWORD(v251))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v251, 1, 1);
          v123 = DWORD2(v251);
        }
        *(_DWORD *)(v251 + 4 * v123) = HIDWORD(v238);
        ++DWORD2(v251);
        v124 = DWORD2(v252);
        if (DWORD2(v252) == (unint64_t)HIDWORD(v252))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v252, 1, 1);
          v124 = DWORD2(v252);
        }
        v125 = (_QWORD *)(v252 + 16 * v124);
        *v125 = 0;
        v125[1] = 0;
        DgnPrimArray<int>::copyArraySlice((unint64_t)v125, &v249, 0, v250);
        HIDWORD(v238) = 0;
        ++DWORD2(v252);
        LODWORD(v250) = 0;
      }
      CollMgr::flushPendingCollation(this, (uint64_t)&v270, (uint64_t)&v268, (uint64_t)&v265, (uint64_t)&v263, (uint64_t)&v261, &v259, (uint64_t)&v257, (uint64_t)&v255, (uint64_t)&v253, (uint64_t)&v251);
      v237 = 0;
      LOBYTE(v238) = 0;
    }
    if (v246)
      v126 = v245;
    else
      v126 = (const char *)&unk_209A87F54;
    if (!strcmp(v126, "TwoLevel"))
    {
      v145 = v244;
      if (v244 < 2 || v242 <= 1)
      {
        v146 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
        if (*(_DWORD *)(v146 + 8))
          v149 = *(void **)v146;
        else
          v149 = &unk_209A87F54;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 555, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v147, v148, (char)v149);
        v145 = v244;
      }
      if (v145)
        v150 = v243;
      else
        v150 = (const char *)&unk_209A87F54;
      v151 = CollMgr::lookupCollation(this, v150, v127, v128, v129, v130, v131, v132);
      if (v242)
        v152 = v241;
      else
        v152 = (const char *)&unk_209A87F54;
      if (!strcmp(v152, "_IDENTITY"))
        v159 = 65534;
      else
        v159 = CollMgr::lookupCollation(this, v152, v153, v154, v155, v156, v157, v158);
      if (v240 > 1 || LineFieldUnsigned || v84 || v91 || v98)
      {
        v172 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
        if (*(_DWORD *)(v172 + 8))
          v175 = *(void **)v172;
        else
          v175 = &unk_209A87F54;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 568, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v173, v174, (char)v175);
      }
      if (v248)
        v176 = v247;
      else
        v176 = (char *)&unk_209A87F54;
      CollMgr::newTwoLevelCollation(this, v176, v151, v159, v155, v156, v157, v158);
    }
    else if (!strcmp(v126, "Char"))
    {
      if (**(_DWORD **)this)
      {
        v160 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
        if (*(_DWORD *)(v160 + 8))
          v163 = *(void **)v160;
        else
          v163 = &unk_209A87F54;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 575, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v161, v162, (char)v163);
      }
      if (v244 > 1 || v242 >= 2)
      {
        v164 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
        if (*(_DWORD *)(v164 + 8))
          v167 = *(void **)v164;
        else
          v167 = &unk_209A87F54;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 579, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v165, v166, (char)v167);
      }
      if (v240 < 2
        || (v177 = __s1, strcmp(__s1, "OneToTwo"))
        && strcmp(v177, "TwoToOne")
        && strcmp(v177, "TwoToTwo")
        && strcmp(v177, "OneToOne"))
      {
        v168 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
        if (*(_DWORD *)(v168 + 8))
          v171 = *(void **)v168;
        else
          v171 = &unk_209A87F54;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 586, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v169, v170, (char)v171);
      }
      if (LineFieldUnsigned > 0xFF || v84 > 0xFF || v91 > 0xFF || v98 >= 0x100)
      {
        v178 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
        if (*(_DWORD *)(v178 + 8))
          v181 = *(void **)v178;
        else
          v181 = &unk_209A87F54;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 592, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v179, v180, (char)v181);
      }
      if (v240)
        v182 = __s1;
      else
        v182 = (char *)&unk_209A87F54;
      if (!strcmp(v182, "OneToTwo"))
      {
        if ((_DWORD)v264 || (_DWORD)v262 || (_DWORD)v260)
        {
          v187 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
          if (*(_DWORD *)(v187 + 8))
            v190 = *(void **)v187;
          else
            v190 = &unk_209A87F54;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 599, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v188, v189, (char)v190);
        }
        v191 = v266;
        if (v266 == (unint64_t)HIDWORD(v266))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v265, 1, 1);
          v191 = v266;
        }
        *(_DWORD *)(v265 + 4 * v191) = (v91 << 16) | (v98 << 24) | (v84 << 8) | LineFieldUnsigned;
        LODWORD(v266) = v266 + 1;
      }
      else if (!strcmp(v182, "TwoToOne"))
      {
        if (v262 | v260)
        {
          v208 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
          if (*(_DWORD *)(v208 + 8))
            v211 = *(void **)v208;
          else
            v211 = &unk_209A87F54;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 612, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v209, v210, (char)v211);
        }
        v212 = v264;
        if (v264 == (unint64_t)HIDWORD(v264))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v263, 1, 1);
          v212 = v264;
        }
        *(_DWORD *)(v263 + 4 * v212) = (v91 << 16) | (v98 << 24) | (v84 << 8) | LineFieldUnsigned;
        LODWORD(v264) = v264 + 1;
      }
      else if (!strcmp(v182, "TwoToTwo"))
      {
        if ((_DWORD)v260)
        {
          v219 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
          if (*(_DWORD *)(v219 + 8))
            v222 = *(void **)v219;
          else
            v222 = &unk_209A87F54;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 624, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v220, v221, (char)v222);
        }
        v223 = v262;
        if (v262 == (unint64_t)HIDWORD(v262))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v261, 1, 1);
          v223 = v262;
        }
        *(_DWORD *)(v261 + 4 * v223) = (v91 << 16) | (v98 << 24) | (v84 << 8) | LineFieldUnsigned;
        LODWORD(v262) = v262 + 1;
      }
      else if (!strcmp(v182, "OneToOne"))
      {
        if (LineFieldUnsigned != (_DWORD)v260 || v84 || v98)
        {
          v183 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
          if (*(_DWORD *)(v183 + 8))
            v186 = *(void **)v183;
          else
            v186 = &unk_209A87F54;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 638, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v184, v185, (char)v186);
          LineFieldUnsigned = v260;
        }
        if (LineFieldUnsigned == HIDWORD(v260))
        {
          DgnPrimArray<char>::reallocElts((uint64_t)&v259, 1, 1);
          LineFieldUnsigned = v260;
        }
        v259[LineFieldUnsigned] = v91;
        LODWORD(v260) = v260 + 1;
      }
    }
    else
    {
      if (strcmp(v126, "WideChar"))
        goto LABEL_211;
      if (!**(_DWORD **)this)
      {
        v133 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
        if (*(_DWORD *)(v133 + 8))
          v136 = *(void **)v133;
        else
          v136 = &unk_209A87F54;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 646, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v134, v135, (char)v136);
      }
      if (v244 > 1 || v242 >= 2)
      {
        v137 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
        if (*(_DWORD *)(v137 + 8))
          v140 = *(void **)v137;
        else
          v140 = &unk_209A87F54;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 650, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v138, v139, (char)v140);
      }
      if (v240 < 2
        || (v192 = __s1, strcmp(__s1, "OneToTwo"))
        && strcmp(v192, "TwoToOne")
        && strcmp(v192, "TwoToTwo")
        && strcmp(v192, "OneToOne"))
      {
        v141 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
        if (*(_DWORD *)(v141 + 8))
          v144 = *(void **)v141;
        else
          v144 = &unk_209A87F54;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 657, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v142, v143, (char)v144);
      }
      if (HIWORD(LineFieldUnsigned) || HIWORD(v84) || HIWORD(v91) || v98 >= 0x10000)
      {
        v193 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
        if (*(_DWORD *)(v193 + 8))
          v196 = *(void **)v193;
        else
          v196 = &unk_209A87F54;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 663, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v194, v195, (char)v196);
      }
      if (v240)
        v197 = __s1;
      else
        v197 = (char *)&unk_209A87F54;
      if (!strcmp(v197, "OneToTwo"))
      {
        if ((_DWORD)v256 || ((_DWORD)v254 != 0) | v238 & 1)
        {
          v202 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
          if (*(_DWORD *)(v202 + 8))
            v205 = *(void **)v202;
          else
            v205 = &unk_209A87F54;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 670, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v203, v204, (char)v205);
        }
        v206 = v258;
        if (v258 == (unint64_t)HIDWORD(v258))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v257, 1, 1);
          v206 = v258;
        }
        v207 = (unsigned int *)(v257 + 16 * v206);
        *v207 = LineFieldUnsigned;
        v207[1] = v84;
        v207[2] = v91;
        v207[3] = v98;
        LODWORD(v258) = v258 + 1;
      }
      else if (!strcmp(v197, "TwoToOne"))
      {
        if (((_DWORD)v254 != 0) | v238 & 1)
        {
          v213 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
          if (*(_DWORD *)(v213 + 8))
            v216 = *(void **)v213;
          else
            v216 = &unk_209A87F54;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 680, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v214, v215, (char)v216);
        }
        v217 = v256;
        if (v256 == (unint64_t)HIDWORD(v256))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v255, 1, 1);
          v217 = v256;
        }
        v218 = (unsigned int *)(v255 + 16 * v217);
        *v218 = LineFieldUnsigned;
        v218[1] = v84;
        v218[2] = v91;
        v218[3] = v98;
        LODWORD(v256) = v256 + 1;
      }
      else
      {
        if (strcmp(v197, "TwoToTwo"))
        {
          if (strcmp(v197, "OneToOne"))
            goto LABEL_211;
          if ((v238 & (v237 == 0)) != 0 || LineFieldUnsigned < v237 || v84 || v98)
          {
            v198 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
            if (*(_DWORD *)(v198 + 8))
              v201 = *(void **)v198;
            else
              v201 = &unk_209A87F54;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 702, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v199, v200, (char)v201);
          }
          v230 = v250;
          if ((_DWORD)v250)
          {
            if (LineFieldUnsigned != (_DWORD)v250 + HIDWORD(v238))
            {
              v231 = DWORD2(v251);
              if (DWORD2(v251) == (unint64_t)HIDWORD(v251))
              {
                DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v251, 1, 1);
                v231 = DWORD2(v251);
              }
              *(_DWORD *)(v251 + 4 * v231) = HIDWORD(v238);
              ++DWORD2(v251);
              v232 = DWORD2(v252);
              if (DWORD2(v252) == (unint64_t)HIDWORD(v252))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v252, 1, 1);
                v232 = DWORD2(v252);
              }
              v233 = (_QWORD *)(v252 + 16 * v232);
              *v233 = 0;
              v233[1] = 0;
              DgnPrimArray<int>::copyArraySlice((unint64_t)v233, &v249, 0, v250);
              v230 = 0;
              ++DWORD2(v252);
              LODWORD(v250) = 0;
              goto LABEL_326;
            }
          }
          else
          {
LABEL_326:
            HIDWORD(v238) = LineFieldUnsigned;
          }
          if (v230 == HIDWORD(v250))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v249, 1, 1);
            v230 = v250;
          }
          *(_DWORD *)(v249 + 4 * v230) = v91;
          LODWORD(v250) = v250 + 1;
          v237 = LineFieldUnsigned + 1;
          LOBYTE(v238) = 1;
          goto LABEL_211;
        }
        if ((v238 & 1) != 0)
        {
          v224 = DgnTextFile::getCurrentLine((DgnTextFile *)v273);
          if (*(_DWORD *)(v224 + 8))
            v227 = *(void **)v224;
          else
            v227 = &unk_209A87F54;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 689, (uint64_t)"word/collmgr", 10, (uint64_t)"%.500s", v225, v226, (char)v227);
        }
        v228 = v254;
        if (v254 == (unint64_t)HIDWORD(v254))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v253, 1, 1);
          v228 = v254;
        }
        v229 = (unsigned int *)(v253 + 16 * v228);
        *v229 = LineFieldUnsigned;
        v229[1] = v84;
        v229[2] = v91;
        v229[3] = v98;
        LODWORD(v254) = v254 + 1;
      }
    }
LABEL_211:
    DgnString::operator=((DgnString *)&v270, (DgnString *)&v247);
    DgnString::operator=((DgnString *)&v268, (DgnString *)&v245);
    DgnString::operator=((DgnString *)v267, (DgnString *)&__s1);
    DgnString::~DgnString((DgnString *)&__s1);
    DgnString::~DgnString((DgnString *)&v241);
    DgnString::~DgnString((DgnString *)&v243);
    DgnString::~DgnString((DgnString *)&v245);
    DgnString::~DgnString((DgnString *)&v247);
    v65 = 0;
  }
  if ((v65 & 1) == 0)
  {
    if ((_DWORD)v250)
    {
      v234 = DWORD2(v251);
      if (DWORD2(v251) == HIDWORD(v251))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v251, 1, 1);
        v234 = DWORD2(v251);
      }
      *(_DWORD *)(v251 + 4 * v234) = HIDWORD(v238);
      ++DWORD2(v251);
      v235 = DWORD2(v252);
      if (DWORD2(v252) == HIDWORD(v252))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v252, 1, 1);
        v235 = DWORD2(v252);
      }
      v236 = (_QWORD *)(v252 + 16 * v235);
      *v236 = 0;
      v236[1] = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)v236, &v249, 0, v250);
      ++DWORD2(v252);
      LODWORD(v250) = 0;
    }
    CollMgr::flushPendingCollation(this, (uint64_t)&v270, (uint64_t)&v268, (uint64_t)&v265, (uint64_t)&v263, (uint64_t)&v261, &v259, (uint64_t)&v257, (uint64_t)&v255, (uint64_t)&v253, (uint64_t)&v251);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v249);
  Uns32OneToOneMap::~Uns32OneToOneMap((Uns32OneToOneMap *)&v251);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v253);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v255);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v257);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v259);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v261);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v263);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v265);
  DgnString::~DgnString((DgnString *)v267);
  DgnString::~DgnString((DgnString *)&v268);
  DgnString::~DgnString((DgnString *)&v270);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v272);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v273);
}

void sub_209A45194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,char a53)
{
  DgnString::~DgnString((DgnString *)&a15);
  DgnString::~DgnString((DgnString *)&a17);
  DgnString::~DgnString((DgnString *)&a19);
  DgnString::~DgnString((DgnString *)&a21);
  DgnString::~DgnString((DgnString *)&a23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a25);
  Uns32OneToOneMap::~Uns32OneToOneMap((Uns32OneToOneMap *)&a27);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a31);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a33);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a35);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a37);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a39);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a41);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a43);
  DgnString::~DgnString((DgnString *)&a45);
  DgnString::~DgnString((DgnString *)&a47);
  DgnString::~DgnString((DgnString *)&a49);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a51);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)&a53);
  _Unwind_Resume(a1);
}

uint64_t checkValidCollName(const char *a1)
{
  uint64_t result;
  uint64_t v3;
  const char *v4;
  unsigned int v5;

  result = 0;
  v3 = *(unsigned __int8 *)a1;
  if (*a1 && v3 != 95)
  {
    v4 = a1 + 1;
    while ((v3 & 0x80) == 0 && ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v3 + 60) & 0x500) != 0 || v3 == 95))
    {
      v5 = *(unsigned __int8 *)v4++;
      v3 = v5;
      if (!v5)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t CollMgr::lookupCollation(CollMgr *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  const char *CollationName;

  if (!*((_DWORD *)this + 56))
    return 0;
  v10 = 0;
  while (1)
  {
    CollationName = (const char *)CollMgr::getCollationName(this, *(unsigned __int16 *)(*((_QWORD *)this + 27) + 2 * v10), a3, a4, a5, a6, a7, a8);
    if (!strcmp(CollationName, a2))
      break;
    if (++v10 >= (unint64_t)*((unsigned int *)this + 56))
      return 0;
  }
  return *(unsigned __int16 *)(*((_QWORD *)this + 27) + 2 * v10);
}

uint64_t CollMgr::newTwoLevelCollation(CollMgr *this, char *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t result;

  v9 = a3;
  CollMgr::verifyCollId((uint64_t)this, a3, 0, 2u, a5, a6, a7, a8);
  CollMgr::verifyCollId((uint64_t)this, a4, 2, 2u, v12, v13, v14, v15);
  if ((checkValidCollName(a2) & 1) == 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1329, (uint64_t)"word/collmgr", 24, (uint64_t)"%.500s", v20, v21, (char)a2);
  if (CollMgr::lookupCollation(this, a2, v16, v17, v18, v19, v20, v21))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1331, (uint64_t)"word/collmgr", 11, (uint64_t)"%.500s", v22, v23, (char)a2);
  if (a4 == 0xFFFF)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1333, (uint64_t)"word/collmgr", 23, (uint64_t)"%s", v22, v23, (char)&errStr_word_collmgr_E_CANT_USE_NOCOLLATION_AS_TWO_LEVEL_COMPONENT);
  v24 = *((_DWORD *)this + 50);
  if (v24)
  {
    v25 = v24 - 1;
    v26 = *(unsigned __int16 *)(*((_QWORD *)this + 24) + 2 * v25);
    *((_DWORD *)this + 50) = v25;
  }
  else
  {
    v27 = *((unsigned __int16 *)this + 104);
    if (v27 >> 14 || (v27 & 0xFFFFBFFF) == 0xBFFF)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1342, (uint64_t)"word/collmgr", 2, (uint64_t)"%s", v22, v23, (char)&errStr_word_collmgr_E_TOO_MANY);
    v28 = *((_DWORD *)this + 34);
    if (v28 == *((_DWORD *)this + 35))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 128, 1, 1);
      v28 = *((_DWORD *)this + 34);
    }
    *((_DWORD *)this + 34) = v28 + 1;
    v29 = *((_DWORD *)this + 38);
    if (v29 == *((_DWORD *)this + 39))
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 144, 1, 1);
      v29 = *((_DWORD *)this + 38);
    }
    *((_DWORD *)this + 38) = v29 + 1;
    v30 = *((_DWORD *)this + 42);
    if (v30 == *((_DWORD *)this + 43))
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 160, 1, 1);
      v30 = *((_DWORD *)this + 42);
    }
    *((_DWORD *)this + 42) = v30 + 1;
    v31 = *((_DWORD *)this + 46);
    if (v31 == *((_DWORD *)this + 47))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 176, 1, 1);
      v31 = *((_DWORD *)this + 46);
    }
    DgnString::DgnString((DgnString *)(*((_QWORD *)this + 22) + 16 * v31));
    ++*((_DWORD *)this + 46);
    v26 = *((unsigned __int16 *)this + 104);
    *((_WORD *)this + 104) = v26 + 1;
  }
  *(_DWORD *)(*((_QWORD *)this + 16) + 4 * v26) = 1;
  *(_WORD *)(*((_QWORD *)this + 18) + 2 * v26) = v9;
  *(_WORD *)(*((_QWORD *)this + 20) + 2 * v26) = a4;
  DgnString::operator=((DgnString *)(*((_QWORD *)this + 22) + 16 * v26), a2);
  v32 = *((_DWORD *)this + 56);
  if (v32 == *((_DWORD *)this + 57))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 216, 1, 1);
    v32 = *((_DWORD *)this + 56);
  }
  result = v26 | 0x4000;
  *(_WORD *)(*((_QWORD *)this + 27) + 2 * v32) = v26 | 0x4000;
  *((_DWORD *)this + 56) = v32 + 1;
  return result;
}

void CollMgr::loadCollMgr(CollMgr *this, char **a2, DFileChecksums *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  DgnStream *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t CurrentSubDirComponents;
  unsigned int v17;
  uint64_t v18;

  if (DFile::subFileExists((uint64_t)a2, 0x5Bu))
  {
    if ((a4 & 1) == 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 764, (uint64_t)"word/collmgr", 20, (uint64_t)"%s", v8, v9, (char)&unk_209A87F54);
    CollMgr::loadCollMgrFromText(this, (DFile *)a2);
  }
  else if (DFile::subFileExists((uint64_t)a2, 0xEu))
  {
    if (a4)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 770, (uint64_t)"word/collmgr", 22, (uint64_t)"%s", v10, v11, (char)&errStr_word_collmgr_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
    v18 = 0;
    v12 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0xEu, 1, "MRCOLL!?", (_DWORD *)&v18 + 1, &v18);
    if (*((_DWORD *)a2 + 6))
      v13 = a2[2];
    else
      v13 = (char *)&unk_209A87F54;
    MrecHeaderCheckVersions(v13, "MRCOLL!?", HIDWORD(v18), v18, 0x12u, 9u);
    MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRCOLL!?", SHIDWORD(v18), v18, 18, 9, v14, v15);
    v17 = 0;
    readObject<unsigned int>(v12, (uint64_t)this + 8, &v17);
    readObject<DgnPrimArray<unsigned char>>(v12, (uint64_t)this + 24, &v17);
    readObject<DgnArray<Uns8SpecialMapItem>>((uint64_t)v12, (uint64_t)this + 40, &v17);
    readObject<Uns32OneToOneMap>(v12, (uint64_t)this + 56, &v17);
    readObject<DgnArray<Uns32SpecialMapItem>>((uint64_t)v12, (uint64_t)this + 72, &v17);
    readObject<DgnString>(v12, (uint64_t)this + 88, &v17);
    readObject<unsigned short>(v12, (uint64_t)this + 104, &v17);
    readObject((uint64_t)v12, (unsigned __int16 *)this + 60, &v17);
    readObject<unsigned int>(v12, (uint64_t)this + 128, &v17);
    readObject<unsigned short>(v12, (uint64_t)this + 144, &v17);
    readObject<unsigned short>(v12, (uint64_t)this + 160, &v17);
    readObject<DgnString>(v12, (uint64_t)this + 176, &v17);
    readObject<unsigned short>(v12, (uint64_t)this + 192, &v17);
    readObject((uint64_t)v12, (unsigned __int16 *)this + 104, &v17);
    readObject<unsigned short>(v12, (uint64_t)this + 216, &v17);
    readObjectChecksumAndVerify(v12, v17);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents((DFile *)a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0xEu, v17);
    if (v12)
    {
      (**(void (***)(DgnStream *))v12)(v12);
      MemChunkFree(v12, 0);
    }
  }
}

unint64_t readObject<DgnArray<Uns8SpecialMapItem>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v17 = 0;
  result = readObject(a1, &v17, a3);
  v7 = v17;
  v8 = *(_DWORD *)(a2 + 12);
  if (v17 > v8)
    result = DgnArray<DgnPrimArray<double>>::reallocElts(a2, v17 - v8, 0);
  v9 = *(unsigned int *)(a2 + 8);
  if (v9 <= v7)
  {
    if (v9 < v7)
    {
      v12 = v7 - v9;
      v13 = 16 * v9;
      do
      {
        v14 = (_QWORD *)(*(_QWORD *)a2 + v13);
        *v14 = 0;
        v14[1] = 0;
        v13 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v9 > (int)v7)
  {
    v10 = (int)v9;
    v11 = 16 * (int)v9 - 16;
    do
    {
      --v10;
      result = DgnIArray<Utterance *>::~DgnIArray(*(_QWORD *)a2 + v11);
      v11 -= 16;
    }
    while (v10 > (int)v7);
  }
  *(_DWORD *)(a2 + 8) = v7;
  if ((_DWORD)v7)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      result = readObject<Uns8SpecialMapItem>(a1, *(_QWORD *)a2 + v15, a3);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void readObject<Uns32OneToOneMap>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v17 = 0;
  readObject((uint64_t)a1, &v17, a3);
  v6 = v17;
  v7 = *(_DWORD *)(a2 + 12);
  if (v17 > v7)
    DgnArray<PrefilterResultFrame>::reallocElts(a2, v17 - v7, 0);
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v11 = v6 - v8;
      v12 = 32 * v8;
      do
      {
        v13 = (_OWORD *)(*(_QWORD *)a2 + v12);
        *v13 = 0uLL;
        v13[1] = 0uLL;
        v12 += 32;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    v9 = (int)v8;
    v10 = 32 * (int)v8 - 32;
    do
    {
      --v9;
      Uns32OneToOneMap::~Uns32OneToOneMap((Uns32OneToOneMap *)(*(_QWORD *)a2 + v10));
      v10 -= 32;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if ((_DWORD)v6)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)a2 + v14;
      readObject<unsigned int>(a1, v16, a3);
      readObject<DgnPrimArray<unsigned int>>(a1, v16 + 16, a3);
      ++v15;
      v14 += 32;
    }
    while (v15 < *(unsigned int *)(a2 + 8));
  }
}

unint64_t readObject<DgnArray<Uns32SpecialMapItem>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v17 = 0;
  result = readObject(a1, &v17, a3);
  v7 = v17;
  v8 = *(_DWORD *)(a2 + 12);
  if (v17 > v8)
    result = DgnArray<DgnPrimArray<double>>::reallocElts(a2, v17 - v8, 0);
  v9 = *(unsigned int *)(a2 + 8);
  if (v9 <= v7)
  {
    if (v9 < v7)
    {
      v12 = v7 - v9;
      v13 = 16 * v9;
      do
      {
        v14 = (_QWORD *)(*(_QWORD *)a2 + v13);
        *v14 = 0;
        v14[1] = 0;
        v13 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v9 > (int)v7)
  {
    v10 = (int)v9;
    v11 = 16 * (int)v9 - 16;
    do
    {
      --v10;
      result = DgnIArray<Utterance *>::~DgnIArray(*(_QWORD *)a2 + v11);
      v11 -= 16;
    }
    while (v10 > (int)v7);
  }
  *(_DWORD *)(a2 + 8) = v7;
  if ((_DWORD)v7)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      result = readObject<Uns32SpecialMapItem>(a1, *(_QWORD *)a2 + v15, a3);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void CollMgr::saveCollMgrToText(CollMgr *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *CollationName;
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  int v57;
  char *v58;
  unint64_t v59;
  char *v60;
  unint64_t i;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _BYTE v86[16];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93[36];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v93);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v93, (uint64_t)a2, 0x5Bu, a3);
  v91 = 0;
  v92 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v93, sTCO_Versions, (uint64_t)&v91, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v93, "Collation", (_QWORD *)(v91 + 8 * (v92 - 1)));
  v89 = 0;
  v90 = 0;
  v87 = 0;
  v88 = 0;
  DgnString::DgnString((DgnString *)v86, "CollName");
  v11 = v88;
  if ((_DWORD)v88 == HIDWORD(v88))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v87, 1, 1);
    v11 = v88;
  }
  DgnString::DgnString((DgnString *)(v87 + 16 * v11), (const DgnString *)v86);
  LODWORD(v88) = v88 + 1;
  DgnString::~DgnString((DgnString *)v86);
  v12 = v90;
  if ((_DWORD)v90 == HIDWORD(v90))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v89, 1, 1);
    v12 = v90;
  }
  *(_DWORD *)(v89 + 4 * v12) = 0;
  LODWORD(v90) = v12 + 1;
  DgnString::DgnString((DgnString *)v86, "CollType");
  v13 = v88;
  if ((_DWORD)v88 == HIDWORD(v88))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v87, 1, 1);
    v13 = v88;
  }
  DgnString::DgnString((DgnString *)(v87 + 16 * v13), (const DgnString *)v86);
  LODWORD(v88) = v88 + 1;
  DgnString::~DgnString((DgnString *)v86);
  v14 = v90;
  if ((_DWORD)v90 == HIDWORD(v90))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v89, 1, 1);
    v14 = v90;
  }
  *(_DWORD *)(v89 + 4 * v14) = 0;
  LODWORD(v90) = v14 + 1;
  DgnString::DgnString((DgnString *)v86, "ComponentCollName1");
  v15 = v88;
  if ((_DWORD)v88 == HIDWORD(v88))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v87, 1, 1);
    v15 = v88;
  }
  DgnString::DgnString((DgnString *)(v87 + 16 * v15), (const DgnString *)v86);
  LODWORD(v88) = v88 + 1;
  DgnString::~DgnString((DgnString *)v86);
  v16 = v90;
  if ((_DWORD)v90 == HIDWORD(v90))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v89, 1, 1);
    v16 = v90;
  }
  *(_DWORD *)(v89 + 4 * v16) = 0;
  LODWORD(v90) = v16 + 1;
  DgnString::DgnString((DgnString *)v86, "ComponentCollName2");
  v17 = v88;
  if ((_DWORD)v88 == HIDWORD(v88))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v87, 1, 1);
    v17 = v88;
  }
  DgnString::DgnString((DgnString *)(v87 + 16 * v17), (const DgnString *)v86);
  LODWORD(v88) = v88 + 1;
  DgnString::~DgnString((DgnString *)v86);
  v18 = v90;
  if ((_DWORD)v90 == HIDWORD(v90))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v89, 1, 1);
    v18 = v90;
  }
  *(_DWORD *)(v89 + 4 * v18) = 0;
  LODWORD(v90) = v18 + 1;
  DgnString::DgnString((DgnString *)v86, "MapType");
  v19 = v88;
  if ((_DWORD)v88 == HIDWORD(v88))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v87, 1, 1);
    v19 = v88;
  }
  DgnString::DgnString((DgnString *)(v87 + 16 * v19), (const DgnString *)v86);
  LODWORD(v88) = v88 + 1;
  DgnString::~DgnString((DgnString *)v86);
  v20 = v90;
  if ((_DWORD)v90 == HIDWORD(v90))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v89, 1, 1);
    v20 = v90;
  }
  *(_DWORD *)(v89 + 4 * v20) = 0;
  LODWORD(v90) = v20 + 1;
  DgnString::DgnString((DgnString *)v86, "MapFrom1");
  v21 = v88;
  if ((_DWORD)v88 == HIDWORD(v88))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v87, 1, 1);
    v21 = v88;
  }
  DgnString::DgnString((DgnString *)(v87 + 16 * v21), (const DgnString *)v86);
  LODWORD(v88) = v88 + 1;
  DgnString::~DgnString((DgnString *)v86);
  v22 = v90;
  if ((_DWORD)v90 == HIDWORD(v90))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v89, 1, 1);
    v22 = v90;
  }
  *(_DWORD *)(v89 + 4 * v22) = 3;
  LODWORD(v90) = v22 + 1;
  DgnString::DgnString((DgnString *)v86, "MapFrom2");
  v23 = v88;
  if ((_DWORD)v88 == HIDWORD(v88))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v87, 1, 1);
    v23 = v88;
  }
  DgnString::DgnString((DgnString *)(v87 + 16 * v23), (const DgnString *)v86);
  LODWORD(v88) = v88 + 1;
  DgnString::~DgnString((DgnString *)v86);
  v24 = v90;
  if ((_DWORD)v90 == HIDWORD(v90))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v89, 1, 1);
    v24 = v90;
  }
  *(_DWORD *)(v89 + 4 * v24) = 3;
  LODWORD(v90) = v24 + 1;
  DgnString::DgnString((DgnString *)v86, "MapTo1");
  v25 = v88;
  if ((_DWORD)v88 == HIDWORD(v88))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v87, 1, 1);
    v25 = v88;
  }
  DgnString::DgnString((DgnString *)(v87 + 16 * v25), (const DgnString *)v86);
  LODWORD(v88) = v88 + 1;
  DgnString::~DgnString((DgnString *)v86);
  v26 = v90;
  if ((_DWORD)v90 == HIDWORD(v90))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v89, 1, 1);
    v26 = v90;
  }
  *(_DWORD *)(v89 + 4 * v26) = 3;
  LODWORD(v90) = v26 + 1;
  DgnString::DgnString((DgnString *)v86, "MapTo2");
  v27 = v88;
  if ((_DWORD)v88 == HIDWORD(v88))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v87, 1, 1);
    v27 = v88;
  }
  DgnString::DgnString((DgnString *)(v87 + 16 * v27), (const DgnString *)v86);
  LODWORD(v88) = v88 + 1;
  DgnString::~DgnString((DgnString *)v86);
  v28 = v90;
  if ((_DWORD)v90 == HIDWORD(v90))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v89, 1, 1);
    v28 = v90;
  }
  *(_DWORD *)(v89 + 4 * v28) = 3;
  LODWORD(v90) = v28 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v93, (uint64_t)&v89, (uint64_t)&v87);
  v35 = *((_DWORD *)this + 56);
  if (**(_DWORD **)this)
  {
    if (!v35)
      goto LABEL_81;
    v36 = 0;
    while (1)
    {
      v37 = *(unsigned __int16 *)(*((_QWORD *)this + 27) + 2 * v36);
      if ((v37 & 0x4000) == 0)
      {
        if (*(_DWORD *)(*((_QWORD *)this + 9) + 16 * v37 + 8))
        {
          v38 = 0;
          v39 = 0;
          while (1)
          {
            CollationName = (char *)CollMgr::getCollationName(this, v37, v29, v30, v31, v32, v33, v34);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 0, CollationName);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 1u, "WideChar");
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 2u, (char *)&unk_209A87F54);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 3u, (char *)&unk_209A87F54);
            v41 = *(_QWORD *)(*((_QWORD *)this + 9) + 16 * v37) + v38;
            v42 = *(_DWORD *)(v41 + 4);
            v43 = *(_DWORD *)(v41 + 12);
            if (v42)
              break;
            v44 = "OneToTwo";
            if (v43)
              goto LABEL_48;
LABEL_49:
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 5u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 16 * v37) + v38));
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 6u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 16 * v37) + v38 + 4));
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 7u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 16 * v37) + v38 + 8));
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 8u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 16 * v37) + v38 + 12));
            DgnTextFileWriter::writeNextLine(v93);
            ++v39;
            v38 += 16;
            if (v39 >= *(unsigned int *)(*((_QWORD *)this + 9) + 16 * v37 + 8))
              goto LABEL_50;
          }
          if (v43)
            v44 = "TwoToTwo";
          else
            v44 = "TwoToOne";
LABEL_48:
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 4u, v44);
          goto LABEL_49;
        }
LABEL_50:
        v45 = *((_QWORD *)this + 7);
        if (*(_DWORD *)(v45 + 32 * v37 + 8))
        {
          v46 = 0;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)(v45 + 32 * v37 + 16) + 16 * v46 + 8))
            {
              v47 = 0;
              do
              {
                v48 = (char *)CollMgr::getCollationName(this, v37, v29, v30, v31, v32, v33, v34);
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 0, v48);
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 1u, "WideChar");
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 2u, (char *)&unk_209A87F54);
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 3u, (char *)&unk_209A87F54);
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 4u, "OneToOne");
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 5u, v47 + *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 32 * v37) + 4 * v46));
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 6u, 0);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 7u, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 32 * v37 + 16) + 16 * v46) + 4 * v47));
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 8u, 0);
                DgnTextFileWriter::writeNextLine(v93);
                ++v47;
                v45 = *((_QWORD *)this + 7);
              }
              while (v47 < *(unsigned int *)(*(_QWORD *)(v45 + 32 * v37 + 16) + 16 * v46 + 8));
            }
            ++v46;
          }
          while (v46 < *(unsigned int *)(v45 + 32 * v37 + 8));
        }
      }
      ++v36;
      v49 = *((unsigned int *)this + 56);
      if (v36 >= v49)
        goto LABEL_74;
    }
  }
  if (!v35)
    goto LABEL_81;
  v50 = 0;
  do
  {
    v51 = *(unsigned __int16 *)(*((_QWORD *)this + 27) + 2 * v50);
    if ((v51 & 0x4000) == 0)
    {
      if (*(_DWORD *)(*((_QWORD *)this + 5) + 16 * v51 + 8))
      {
        v52 = 0;
        v53 = 0;
        while (1)
        {
          v54 = (char *)CollMgr::getCollationName(this, v51, v29, v30, v31, v32, v33, v34);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 0, v54);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 1u, "Char");
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 2u, (char *)&unk_209A87F54);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 3u, (char *)&unk_209A87F54);
          v55 = *(_QWORD *)(*((_QWORD *)this + 5) + 16 * v51) + v52;
          v56 = *(unsigned __int8 *)(v55 + 1);
          v57 = *(unsigned __int8 *)(v55 + 3);
          if (v56)
            break;
          v58 = "OneToTwo";
          if (v57)
            goto LABEL_68;
LABEL_69:
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 5u, *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 5) + 16 * v51) + v52));
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 6u, *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 5) + 16 * v51) + v52 + 1));
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 7u, *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 5) + 16 * v51) + v52 + 2));
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 8u, *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 5) + 16 * v51) + v52 + 3));
          DgnTextFileWriter::writeNextLine(v93);
          ++v53;
          v52 += 4;
          if (v53 >= *(unsigned int *)(*((_QWORD *)this + 5) + 16 * v51 + 8))
            goto LABEL_70;
        }
        if (v57)
          v58 = "TwoToTwo";
        else
          v58 = "TwoToOne";
LABEL_68:
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 4u, v58);
        goto LABEL_69;
      }
LABEL_70:
      if (*(_DWORD *)(*((_QWORD *)this + 3) + 16 * v51 + 8))
      {
        v59 = 0;
        do
        {
          v60 = (char *)CollMgr::getCollationName(this, v51, v29, v30, v31, v32, v33, v34);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 0, v60);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 1u, "Char");
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 2u, (char *)&unk_209A87F54);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 3u, (char *)&unk_209A87F54);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 4u, "OneToOne");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 5u, v59);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 6u, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 7u, *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16 * v51) + v59));
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 8u, 0);
          DgnTextFileWriter::writeNextLine(v93);
          ++v59;
        }
        while (v59 < *(unsigned int *)(*((_QWORD *)this + 3) + 16 * v51 + 8));
      }
    }
    ++v50;
    v49 = *((unsigned int *)this + 56);
  }
  while (v50 < v49);
LABEL_74:
  if (v49)
  {
    for (i = 0; i < v49; ++i)
    {
      v62 = *((_QWORD *)this + 27);
      v63 = *(unsigned __int16 *)(v62 + 2 * i);
      if ((v63 & 0x4000) != 0)
      {
        CollMgr::verifyCollId((uint64_t)this, *(unsigned __int16 *)(v62 + 2 * i), 0, 3u, v31, v32, v33, v34);
        v64 = *(unsigned __int16 *)(*((_QWORD *)this + 18) + 2 * ((unsigned __int16)v63 & 0xBFFF));
        v65 = *(unsigned __int16 *)(*((_QWORD *)this + 20) + 2 * ((unsigned __int16)v63 & 0xBFFF));
        v72 = (char *)CollMgr::getCollationName(this, v63, v66, v67, v68, v69, v70, v71);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 0, v72);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 1u, "TwoLevel");
        v79 = (char *)CollMgr::getCollationName(this, v64, v73, v74, v75, v76, v77, v78);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 2u, v79);
        v85 = "_IDENTITY";
        if (v65 != 65534)
          v85 = (char *)CollMgr::getCollationName(this, v65, (uint64_t)"_IDENTITY", v80, v81, v82, v83, v84);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 3u, v85);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v93, 4u, (char *)&unk_209A87F54);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 5u, 0);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 6u, 0);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 7u, 0);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v93, 8u, 0);
        DgnTextFileWriter::writeNextLine(v93);
        v49 = *((unsigned int *)this + 56);
      }
    }
  }
LABEL_81:
  DgnArray<DgnString>::releaseAll((uint64_t)&v87);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v89);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v91);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v93);
}

void sub_209A46810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

void *CollMgr::getCollationName(CollMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;

  CollMgr::verifyCollId((uint64_t)this, a2, 0, 4u, a5, a6, a7, a8);
  if ((a2 & 0x4000) != 0)
    v10 = (_DWORD *)(*((_QWORD *)this + 22) + 16 * ((unsigned __int16)a2 & 0xBFFF));
  else
    v10 = (_DWORD *)(*((_QWORD *)this + 11) + 16 * a2);
  if (v10[2])
    return *(void **)v10;
  else
    return &unk_209A87F54;
}

void CollMgr::saveCollMgr(CollMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  DgnStream *v8;
  uint64_t CurrentSubDirComponents;
  int v10;

  if (a4)
  {
    CollMgr::saveCollMgrToText(this, a2, a5);
  }
  else if (*((_WORD *)this + 60) != 1 || *((_WORD *)this + 104))
  {
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0xEu, a5, "MRCOLL!?", 18, 9);
    v10 = 0;
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 8, &v10);
    writeObject<DgnPrimArray<unsigned char>>((uint64_t)v8, (uint64_t)this + 24, &v10);
    writeObject<DgnArray<Uns8SpecialMapItem>>((uint64_t)v8, (uint64_t)this + 40, &v10);
    writeObject<Uns32OneToOneMap>((uint64_t)v8, (uint64_t)this + 56, &v10);
    writeObject<DgnArray<Uns32SpecialMapItem>>((uint64_t)v8, (uint64_t)this + 72, &v10);
    writeObject<DgnString>((uint64_t)v8, (uint64_t)this + 88, &v10);
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)this + 104, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 60, &v10);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 128, &v10);
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)this + 144, &v10);
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)this + 160, &v10);
    writeObject<DgnString>((uint64_t)v8, (uint64_t)this + 176, &v10);
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)this + 192, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 104, &v10);
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)this + 216, &v10);
    writeObjectChecksum((uint64_t)v8, &v10);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0xEu, v10);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
}

uint64_t writeObject<DgnArray<Uns8SpecialMapItem>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject<Uns8SpecialMapItem>(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<Uns32OneToOneMap>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;

  v10 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v10, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)a2 + v7;
      writeObject<unsigned int>(a1, v9, a3);
      result = writeObject<DgnPrimArray<unsigned int>>(a1, v9 + 16, a3);
      ++v8;
      v7 += 32;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<DgnArray<Uns32SpecialMapItem>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject<Uns32SpecialMapItem>(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void CollMgr::printSize(CollMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  int v154;
  unsigned int v155;
  BOOL v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  _OWORD v224[2];
  _QWORD v225[2];

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1010, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v16 = *(void **)&v224[0];
  else
    v16 = &unk_209A87F54;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A87F54, a3, &unk_209A87F54, v16);
  DgnString::~DgnString((DgnString *)v224);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A87F54);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  v22 = (a3 + 1);
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1011, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v28 = *(void **)&v224[0];
  else
    v28 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &unk_209A87F54, (34 - a3), (34 - a3), v28, v21, v21, 0);
  v223 = a3;
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v29 = 12;
  else
    v29 = 16;
  v30 = *((unsigned int *)this + 4);
  v31 = *((_DWORD *)this + 5);
  if (v31 >= v30)
  {
    v32 = 0;
    if ((int)v30 > 0)
      v29 += 4 * (v30 - 1) + 4;
    v33 = v29 + 4 * (v31 - v30);
  }
  else
  {
    v32 = 4 * v30;
    v33 = v29;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v38 = *(void **)&v224[0];
  else
    v38 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v22, &unk_209A87F54, v23, v23, v38, v33, v29, v32);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v33;
  *a5 += v29;
  *a6 += v32;
  v39 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 24, 0);
  v40 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 24, 1);
  v224[0] = 0uLL;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v224);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v45 = *(void **)&v224[0];
  else
    v45 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v41, v42, v43, v44, v22, &unk_209A87F54, v23, v23, v45, v39, v40, 0);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v39;
  *a5 += v40;
  v46 = sizeObject<DgnArray<PicNode>>((uint64_t)this + 40, 0);
  v47 = sizeObject<DgnArray<PicNode>>((uint64_t)this + 40, 1);
  v224[0] = 0uLL;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v224);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v52 = *(void **)&v224[0];
  else
    v52 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v22, &unk_209A87F54, v23, v23, v52, v46, v47, 0);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v46;
  *a5 += v47;
  v53 = sizeObject<Uns32OneToOneMap>((uint64_t)this + 56, 0);
  v54 = sizeObject<Uns32OneToOneMap>((uint64_t)this + 56, 1);
  memset(v224, 0, sizeof(v224));
  v225[0] = 0;
  v225[1] = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v225);
  Uns32OneToOneMap::~Uns32OneToOneMap((Uns32OneToOneMap *)v224);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v59 = *(void **)&v224[0];
  else
    v59 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v22, &unk_209A87F54, v23, v23, v59, v53, v54, 0);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v53;
  *a5 += v54;
  v60 = sizeObject<DgnArray<Uns32SpecialMapItem>>((uint64_t)this + 72, 0);
  v61 = sizeObject<DgnArray<Uns32SpecialMapItem>>((uint64_t)this + 72, 1);
  v224[0] = 0uLL;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v224);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v66 = *(void **)&v224[0];
  else
    v66 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v22, &unk_209A87F54, v23, v23, v66, v60, v61, 0);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v60;
  *a5 += v61;
  v67 = sizeObject<DgnString>((uint64_t)this + 88, 0);
  v68 = sizeObject<DgnString>((uint64_t)this + 88, 1);
  v69 = sizeObject<DgnString>((uint64_t)this + 88, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v74 = *(void **)&v224[0];
  else
    v74 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v22, &unk_209A87F54, v23, v23, v74, v67, v68, v69);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v67;
  *a5 += v68;
  *a6 += v69;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v75 = 12;
  else
    v75 = 16;
  v76 = *((unsigned int *)this + 28);
  v77 = *((_DWORD *)this + 29);
  if (v77 >= v76)
  {
    v78 = 0;
    if ((int)v76 > 0)
      v75 = (v75 | 2) + 2 * (v76 - 1);
    v79 = v75 + 2 * (v77 - v76);
  }
  else
  {
    v78 = 2 * v76;
    v79 = v75;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v84 = *(void **)&v224[0];
  else
    v84 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v22, &unk_209A87F54, v23, v23, v84, v79, v75, v78);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v79;
  *a5 += v75;
  *a6 += v78;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v89 = *(void **)&v224[0];
  else
    v89 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v22, &unk_209A87F54, v23, v23, v89, 2, 2, 0);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += 2;
  *a5 += 2;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v90 = 12;
  else
    v90 = 16;
  v91 = *((unsigned int *)this + 34);
  v92 = *((_DWORD *)this + 35);
  if (v92 >= v91)
  {
    v93 = 0;
    if ((int)v91 > 0)
      v90 += 4 * (v91 - 1) + 4;
    v94 = v90 + 4 * (v92 - v91);
  }
  else
  {
    v93 = 4 * v91;
    v94 = v90;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v99 = *(void **)&v224[0];
  else
    v99 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, v22, &unk_209A87F54, v23, v23, v99, v94, v90, v93);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v94;
  *a5 += v90;
  *a6 += v93;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v100 = 12;
  else
    v100 = 16;
  v101 = *((unsigned int *)this + 38);
  v102 = *((_DWORD *)this + 39);
  if (v102 >= v101)
  {
    v103 = 0;
    if ((int)v101 > 0)
      v100 = (v100 | 2) + 2 * (v101 - 1);
    v104 = v100 + 2 * (v102 - v101);
  }
  else
  {
    v103 = 2 * v101;
    v104 = v100;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v109 = *(void **)&v224[0];
  else
    v109 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v105, v106, v107, v108, v22, &unk_209A87F54, v23, v23, v109, v104, v100, v103);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v104;
  *a5 += v100;
  *a6 += v103;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v110 = 12;
  else
    v110 = 16;
  v111 = *((unsigned int *)this + 42);
  v112 = *((_DWORD *)this + 43);
  if (v112 >= v111)
  {
    v113 = 0;
    if ((int)v111 > 0)
      v110 = (v110 | 2) + 2 * (v111 - 1);
    v114 = v110 + 2 * (v112 - v111);
  }
  else
  {
    v113 = 2 * v111;
    v114 = v110;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v119 = *(void **)&v224[0];
  else
    v119 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v22, &unk_209A87F54, v23, v23, v119, v114, v110, v113);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v114;
  *a5 += v110;
  *a6 += v113;
  v120 = sizeObject<DgnString>((uint64_t)this + 176, 0);
  v121 = sizeObject<DgnString>((uint64_t)this + 176, 1);
  v122 = sizeObject<DgnString>((uint64_t)this + 176, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v127 = *(void **)&v224[0];
  else
    v127 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v123, v124, v125, v126, v22, &unk_209A87F54, v23, v23, v127, v120, v121, v122);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v120;
  *a5 += v121;
  *a6 += v122;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v128 = 12;
  else
    v128 = 16;
  v129 = *((unsigned int *)this + 50);
  v130 = *((_DWORD *)this + 51);
  if (v130 >= v129)
  {
    v131 = 0;
    if ((int)v129 > 0)
      v128 = (v128 | 2) + 2 * (v129 - 1);
    v132 = v128 + 2 * (v130 - v129);
  }
  else
  {
    v131 = 2 * v129;
    v132 = v128;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v137 = *(void **)&v224[0];
  else
    v137 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v133, v134, v135, v136, v22, &unk_209A87F54, v23, v23, v137, v132, v128, v131);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v132;
  *a5 += v128;
  *a6 += v131;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v142 = *(void **)&v224[0];
  else
    v142 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v138, v139, v140, v141, v22, &unk_209A87F54, v23, v23, v142, 2, 2, 0);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += 2;
  *a5 += 2;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v143 = 12;
  else
    v143 = 16;
  v144 = *((unsigned int *)this + 56);
  v145 = *((_DWORD *)this + 57);
  if (v145 >= v144)
  {
    v146 = 0;
    if ((int)v144 > 0)
      v143 = (v143 | 2) + 2 * (v144 - 1);
    v147 = v143 + 2 * (v145 - v144);
  }
  else
  {
    v146 = 2 * v144;
    v147 = v143;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1013, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v152 = *(void **)&v224[0];
  else
    v152 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v148, v149, v150, v151, v22, &unk_209A87F54, v23, v23, v152, v147, v143, v146);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v147;
  *a5 += v143;
  *a6 += v146;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v153 = 12;
  else
    v153 = 16;
  v154 = *((_DWORD *)this + 60);
  v155 = *((_DWORD *)this + 61);
  v156 = v155 >= v154;
  v157 = v155 - v154;
  if (v156)
  {
    v159 = v154 & ~(v154 >> 31);
    v154 = 0;
    v158 = v153 + v159;
    v153 += v159 + v157;
  }
  else
  {
    v158 = v153;
  }
  v160 = v154;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1014, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v165 = *(void **)&v224[0];
  else
    v165 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v161, v162, v163, v164, v22, &unk_209A87F54, v23, v23, v165, v153, v158, v160);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v153;
  *a5 += v158;
  *a6 += v160;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v166 = 12;
  else
    v166 = 16;
  v167 = *((_DWORD *)this + 64);
  v168 = *((_DWORD *)this + 65);
  v156 = v168 >= v167;
  v169 = v168 - v167;
  if (v156)
  {
    v171 = v167 & ~(v167 >> 31);
    v167 = 0;
    v170 = v166 + v171;
    v166 += v171 + v169;
  }
  else
  {
    v170 = v166;
  }
  v172 = v167;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1015, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v177 = *(void **)&v224[0];
  else
    v177 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v173, v174, v175, v176, v22, &unk_209A87F54, v23, v23, v177, v166, v170, v172);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v166;
  *a5 += v170;
  *a6 += v172;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v178 = 12;
  else
    v178 = 16;
  v179 = *((unsigned int *)this + 68);
  v180 = *((_DWORD *)this + 69);
  if (v180 >= v179)
  {
    v181 = 0;
    if ((int)v179 > 0)
      v178 += 4 * (v179 - 1) + 4;
    v182 = v178 + 4 * (v180 - v179);
  }
  else
  {
    v181 = 4 * v179;
    v182 = v178;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1016, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v187 = *(void **)&v224[0];
  else
    v187 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v183, v184, v185, v186, v22, &unk_209A87F54, v23, v23, v187, v182, v178, v181);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v182;
  *a5 += v178;
  *a6 += v181;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v188 = 12;
  else
    v188 = 16;
  v189 = *((unsigned int *)this + 72);
  v190 = *((_DWORD *)this + 73);
  if (v190 >= v189)
  {
    v191 = 0;
    if ((int)v189 > 0)
      v188 += 4 * (v189 - 1) + 4;
    v192 = v188 + 4 * (v190 - v189);
  }
  else
  {
    v191 = 4 * v189;
    v192 = v188;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1017, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v197 = *(void **)&v224[0];
  else
    v197 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v193, v194, v195, v196, v22, &unk_209A87F54, v23, v23, v197, v192, v188, v191);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v192;
  *a5 += v188;
  *a6 += v191;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v198 = 12;
  else
    v198 = 16;
  v199 = *((unsigned int *)this + 76);
  v200 = *((_DWORD *)this + 77);
  if (v200 >= v199)
  {
    v201 = 0;
    if ((int)v199 > 0)
      v198 += 4 * (v199 - 1) + 4;
    v202 = v198 + 4 * (v200 - v199);
  }
  else
  {
    v201 = 4 * v199;
    v202 = v198;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1018, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v207 = *(void **)&v224[0];
  else
    v207 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v203, v204, v205, v206, v22, &unk_209A87F54, v23, v23, v207, v202, v198, v201);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v202;
  *a5 += v198;
  *a6 += v201;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v208 = 12;
  else
    v208 = 16;
  v209 = *((unsigned int *)this + 80);
  v210 = *((_DWORD *)this + 81);
  if (v210 >= v209)
  {
    v211 = 0;
    if ((int)v209 > 0)
      v208 += 4 * (v209 - 1) + 4;
    v212 = v208 + 4 * (v210 - v209);
  }
  else
  {
    v211 = 4 * v209;
    v212 = v208;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1019, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v217 = *(void **)&v224[0];
  else
    v217 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v213, v214, v215, v216, v22, &unk_209A87F54, v23, v23, v217, v212, v208, v211);
  DgnString::~DgnString((DgnString *)v224);
  *a4 += v212;
  *a5 += v208;
  *a6 += v211;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1020, (DgnString *)v224);
  if (DWORD2(v224[0]))
    v222 = *(void **)&v224[0];
  else
    v222 = &unk_209A87F54;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v218, v219, v220, v221, v223, &unk_209A87F54, (35 - v223), (35 - v223), v222, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)v224);
}

void sub_209A47C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<Uns32OneToOneMap>(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];
  _QWORD v13[2];

  memset(v12, 0, sizeof(v12));
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  v13[0] = 0;
  v13[1] = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v13);
  v5 = 0;
  if (v4)
    v6 = 24;
  else
    v6 = 32;
  if (a2 != 3)
  {
    v5 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
        {
          v9 = *(_QWORD *)a1 + 32 * (v8 - 2);
          v10 = sizeObject<unsigned int>(v9, a2);
          v5 += v10 + sizeObject<DgnPrimArray<unsigned int>>(v9 + 16, a2);
          --v8;
        }
        while (v8 > 1);
      }
      if (!a2)
        v5 += v6 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  Uns32OneToOneMap::~Uns32OneToOneMap((Uns32OneToOneMap *)v12);
  return v5;
}

void sub_209A47DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Uns32OneToOneMap::~Uns32OneToOneMap((Uns32OneToOneMap *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnArray<Uns32SpecialMapItem>>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];

  v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  else
    v3 = 16;
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v2 = v3;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 8);
      v2 = v3;
      if ((int)v6 >= 1)
      {
        v7 = v6 + 1;
        v2 = v3;
        do
          v2 += sizeObject<Uns32SpecialMapItem>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2)
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v9);
  return v2;
}

void sub_209A47EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CollMgr::verifyCollId(uint64_t a1, unsigned int a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;

  if (a2 >= 0xFFFE && a3 == 0)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1764, (uint64_t)"word/collmgr", 6, (uint64_t)"%s", a7, a8, (char)&errStr_word_collmgr_E_COLLATION_BAD_USER_DEFINEDNESS);
    goto LABEL_9;
  }
  if (a2 <= 0xFFFD && a3 == 1)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1766, (uint64_t)"word/collmgr", 6, (uint64_t)"%s", a7, a8, (char)&errStr_word_collmgr_E_COLLATION_BAD_USER_DEFINEDNESS);
    goto LABEL_13;
  }
  if (a2 > 0xFFFD)
  {
LABEL_9:
    if (a4 != 3)
      return;
    v14 = &errStr_word_collmgr_E_COLLATION_BAD_TYPE;
    v12 = 1802;
    goto LABEL_11;
  }
LABEL_13:
  if ((a2 & 0x4000) != 0)
  {
    if (a4 <= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1774, (uint64_t)"word/collmgr", 4, (uint64_t)"%s", a7, a8, (char)&errStr_word_collmgr_E_COLLATION_BAD_TYPE);
    if ((a2 & 0xFFFFBFFF) >= *(unsigned __int16 *)(a1 + 208)
      || !*(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * (a2 & 0xFFFFBFFF)))
    {
      v14 = &errStr_word_collmgr_E_NO_SUCH_COLLATION;
      v12 = 1778;
      v13 = 5;
      goto LABEL_28;
    }
  }
  else
  {
    if (a4 == 3)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1783, (uint64_t)"word/collmgr", 4, (uint64_t)"%s", a7, a8, (char)&errStr_word_collmgr_E_COLLATION_BAD_TYPE);
    if (*(unsigned __int16 *)(a1 + 120) <= a2 || !*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", 1786, (uint64_t)"word/collmgr", 5, (uint64_t)"%s", a7, a8, (char)&errStr_word_collmgr_E_NO_SUCH_COLLATION);
    if (a4 == 1)
    {
      if (!**(_DWORD **)a1)
      {
        v14 = &errStr_word_collmgr_E_COLLATION_BAD_TYPE;
        v12 = 1792;
        goto LABEL_11;
      }
    }
    else if (!a4 && **(_DWORD **)a1)
    {
      v14 = &errStr_word_collmgr_E_COLLATION_BAD_TYPE;
      v12 = 1789;
LABEL_11:
      v13 = 4;
LABEL_28:
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/collmgr.cpp", v12, (uint64_t)"word/collmgr", v13, (uint64_t)"%s", a7, a8, (char)v14);
    }
  }
}

uint64_t CollMgr::getActiveCollations(CollMgr *this)
{
  return (uint64_t)this + 216;
}

uint64_t CollMgr::collationCanGetWordsWithPrefix(CollMgr *this, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  while (1)
  {
    CollMgr::verifyCollId((uint64_t)this, a2, 2, 4u, a5, a6, a7, a8);
    if (a2 == 65534)
      return 1;
    if (a2 == 0xFFFF)
      break;
    if ((a2 & 0x4000) == 0)
      return 1;
    CollMgr::verifyCollId((uint64_t)this, a2, 0, 3u, v10, v11, v12, v13);
    a2 = *(_WORD *)(*((_QWORD *)this + 18) + 2 * (a2 & 0xBFFF));
  }
  return 0;
}

uint64_t CollMgr::collStrcmpUns8(CollMgr *this, unsigned __int16 a2, CharInfo *a3, CharInfo *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unsigned int v20;
  const unsigned __int8 *v21;
  const unsigned __int8 *v22;
  int v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const unsigned int *v40;
  const unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  int v59;
  BOOL v60;
  const unsigned __int8 *v61;
  const unsigned __int8 *v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  BOOL v74;
  int v75;
  void *v76;

  while (1)
  {
    CollMgr::verifyCollId((uint64_t)this, a2, 2, 4u, a5, a6, a7, a8);
    if (a2 == 0xFFFF)
      return 0;
    if (a2 == 65534)
    {
      v20 = **(_DWORD **)this;
      if (v20)
      {
        v21 = 0;
        v22 = 0;
        v75 = 0;
        LODWORD(v76) = 0;
        do
        {
          v23 = CharInfo::decodeOneChar(a3, v22, &v76, v13, v14, v15, v16, v17);
          v29 = CharInfo::decodeOneChar(a4, v21, &v75, v24, v25, v26, v27, v28);
          result = (v23 - v29);
          if (!v29)
            break;
          v22 = (const unsigned __int8 *)((_DWORD)v76 + (_DWORD)v22);
          v21 = (const unsigned __int8 *)(v75 + (_DWORD)v21);
        }
        while (!(_DWORD)result);
      }
      else
      {
        do
        {
          v30 = *((unsigned __int8 *)a3 + v20);
          v31 = *((unsigned __int8 *)a4 + v20++);
          result = (v30 - v31);
          if (v31)
            v32 = v30 == v31;
          else
            v32 = 0;
        }
        while (v32);
      }
      return result;
    }
    if ((a2 & 0x4000) == 0)
      break;
    v18 = a2 & 0xBFFF;
    result = CollMgr::collStrcmpUns8(this, *(_WORD *)(*((_QWORD *)this + 18) + 2 * v18), (const unsigned __int8 *)a3, (const unsigned __int8 *)a4);
    if ((_DWORD)result)
      return result;
    a2 = *(_WORD *)(*((_QWORD *)this + 20) + 2 * v18);
  }
  v33 = a2;
  if (**(_DWORD **)this)
  {
    if (*(_DWORD *)(*((_QWORD *)this + 9) + 16 * a2 + 8))
    {
      CharInfo::decodeCharString(a3, (uint64_t)this + 264, v12, v13, v14, v15, v16, v17);
      CharInfo::decodeCharString(a4, (uint64_t)this + 280, v34, v35, v36, v37, v38, v39);
      v40 = (const unsigned int *)*((_QWORD *)this + 33);
      v41 = (const unsigned int *)*((_QWORD *)this + 35);
      v42 = (2 * Uns32StringLength((uint64_t)v40)) | 1;
      v43 = *((_DWORD *)this + 77);
      if (v42 > v43)
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 296, v42 - v43, 0);
      *((_DWORD *)this + 76) = v42;
      v44 = (2 * Uns32StringLength((uint64_t)v41)) | 1;
      v45 = *((_DWORD *)this + 81);
      if (v44 > v45)
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 312, v44 - v45, 0);
      *((_DWORD *)this + 80) = v44;
      v46 = (unsigned int *)*((_QWORD *)this + 37);
      v47 = (unsigned int *)*((_QWORD *)this + 39);
      CollMgr::collTransformUns32((uint64_t)this, a2, v40, v46);
      CollMgr::collTransformUns32((uint64_t)this, a2, v41, v47);
      v48 = 0;
      do
      {
        v49 = v46[v48];
        v50 = v47[v48++];
        result = v49 - v50;
        if (v50)
          v51 = v49 == v50;
        else
          v51 = 0;
      }
      while (v51);
      *((_DWORD *)this + 68) = 0;
      *((_DWORD *)this + 72) = 0;
      *((_DWORD *)this + 76) = 0;
      *((_DWORD *)this + 80) = 0;
    }
    else
    {
      v61 = 0;
      v62 = 0;
      v75 = 0;
      LODWORD(v76) = 0;
      do
      {
        v63 = CharInfo::decodeOneChar(a3, v62, &v76, v13, v14, v15, v16, v17);
        v69 = CharInfo::decodeOneChar(a4, v61, &v75, v64, v65, v66, v67, v68);
        v62 = (const unsigned __int8 *)((_DWORD)v76 + (_DWORD)v62);
        v61 = (const unsigned __int8 *)(v75 + (_DWORD)v61);
        LODWORD(v63) = Uns32OneToOneMap::getUns32OneToOne((unsigned int **)(*((_QWORD *)this + 7) + 32 * v33), v63);
        result = v63
               - Uns32OneToOneMap::getUns32OneToOne((unsigned int **)(*((_QWORD *)this + 7) + 32 * v33), v69);
        if ((_DWORD)result)
          v70 = 1;
        else
          v70 = (_DWORD)v69 == 0;
      }
      while (!v70);
    }
  }
  else
  {
    v52 = *(_DWORD *)(*((_QWORD *)this + 5) + 16 * a2 + 8);
    if (v52)
    {
      v53 = (2 * Uns8StringLength((uint64_t)a3)) | 1;
      if (*((_DWORD *)this + 61) < v53)
      {
        v76 = 0;
        *((_DWORD *)this + 61) = realloc_array(*((_QWORD **)this + 29), &v76, v53, *((unsigned int *)this + 60), *((unsigned int *)this + 60), 1);
        *((_QWORD *)this + 29) = v76;
      }
      *((_DWORD *)this + 60) = v53;
      v54 = (2 * Uns8StringLength((uint64_t)a4)) | 1;
      v55 = (unsigned __int8 *)*((_QWORD *)this + 31);
      if (*((_DWORD *)this + 65) < v54)
      {
        v76 = 0;
        *((_DWORD *)this + 65) = realloc_array(v55, &v76, v54, *((unsigned int *)this + 64), *((unsigned int *)this + 64), 1);
        v55 = (unsigned __int8 *)v76;
        *((_QWORD *)this + 31) = v76;
      }
      *((_DWORD *)this + 64) = v54;
      v56 = (unsigned __int8 *)*((_QWORD *)this + 29);
      CollMgr::collTransformUns8((uint64_t)this, a2, (const unsigned __int8 *)a3, v56);
      CollMgr::collTransformUns8((uint64_t)this, a2, (const unsigned __int8 *)a4, v55);
      v57 = 0;
      do
      {
        v58 = v56[v57];
        v59 = v55[v57++];
        result = (v58 - v59);
        if (v59)
          v60 = v58 == v59;
        else
          v60 = 0;
      }
      while (v60);
      *((_DWORD *)this + 60) = 0;
      *((_DWORD *)this + 64) = 0;
    }
    else
    {
      v71 = *(_QWORD *)(*((_QWORD *)this + 3) + 16 * a2);
      do
      {
        v72 = *((unsigned __int8 *)a4 + v52);
        v73 = *(unsigned __int8 *)(v71 + *((unsigned __int8 *)a3 + v52++));
        result = v73 - *(unsigned __int8 *)(v71 + v72);
        if (v72)
          v74 = v73 == *(unsigned __int8 *)(v71 + v72);
        else
          v74 = 0;
      }
      while (v74);
    }
  }
  return result;
}

uint64_t Uns32OneToOneMap::getUns32OneToOne(unsigned int **this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;

  v2 = *((unsigned int *)this + 2);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *this;
    v5 = 16 * v2;
    do
    {
      v6 = *v4++;
      v7 = a2 - v6;
      if (a2 < v6)
        break;
      v8 = this[2];
      if (v7 < v8[v3 / 4 + 2])
        return *(unsigned int *)(*(_QWORD *)&v8[v3 / 4] + 4 * v7);
      v3 += 16;
    }
    while (v5 != v3);
  }
  return a2;
}

uint64_t CollMgr::collTransformUns32(uint64_t this, unsigned int a2, const unsigned int *a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  v7 = *a3;
  if (a2 == 65534)
  {
    v8 = 0;
    if ((_DWORD)v7)
    {
      v9 = 1;
      do
      {
        a4[v8] = v7;
        v8 = v9;
        LODWORD(v7) = a3[v9++];
      }
      while ((_DWORD)v7);
    }
  }
  else
  {
    if ((_DWORD)v7)
    {
      v10 = this;
      v11 = 0;
      v12 = 0;
      v13 = a2;
      v14 = 16 * a2;
      do
      {
        v15 = *(_QWORD *)(v10 + 72);
        v16 = *(unsigned int *)(v15 + 16 * v13 + 8);
        if ((_DWORD)v16)
        {
          v17 = (v12 + 1);
          v18 = (unsigned int *)(*(_QWORD *)(v15 + v14) + 12);
          while (1)
          {
            if (*(v18 - 3) == (_DWORD)v7)
            {
              v19 = *(v18 - 2);
              if (!v19)
              {
                v20 = v11 + 1;
                a4[v11] = Uns32OneToOneMap::getUns32OneToOne((unsigned int **)(*(_QWORD *)(v10 + 56) + 32 * v13), *(v18 - 1));
                this = Uns32OneToOneMap::getUns32OneToOne((unsigned int **)(*(_QWORD *)(v10 + 56) + 32 * v13), *v18);
                v11 += 2;
                a4[v20] = this;
                goto LABEL_17;
              }
              if (v19 == a3[v17])
                break;
            }
            v18 += 4;
            if (!--v16)
              goto LABEL_16;
          }
          this = Uns32OneToOneMap::getUns32OneToOne((unsigned int **)(*(_QWORD *)(v10 + 56) + 32 * v13), *(v18 - 1));
          v21 = v11 + 1;
          a4[v11] = this;
          v22 = *v18;
          if ((_DWORD)v22)
          {
            this = Uns32OneToOneMap::getUns32OneToOne((unsigned int **)(*(_QWORD *)(v10 + 56) + 32 * v13), v22);
            a4[v21] = this;
            v21 = v11 + 2;
          }
          LODWORD(v17) = v12 + 2;
          v11 = v21;
        }
        else
        {
          LODWORD(v17) = v12 + 1;
LABEL_16:
          this = Uns32OneToOneMap::getUns32OneToOne((unsigned int **)(*(_QWORD *)(v10 + 56) + 32 * v13), v7);
          a4[v11++] = this;
        }
LABEL_17:
        v7 = a3[v17];
        v12 = v17;
      }
      while ((_DWORD)v7);
    }
    else
    {
      v11 = 0;
    }
    v8 = v11;
  }
  a4[v8] = 0;
  return this;
}

uint64_t CollMgr::collTransformUns8(uint64_t this, unsigned int a2, const unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;

  v4 = *a3;
  if (a2 == 65534)
  {
    v5 = 0;
    if (*a3)
    {
      v6 = 1;
      do
      {
        a4[v5] = v4;
        v5 = v6;
        v4 = a3[v6++];
      }
      while (v4);
    }
  }
  else
  {
    v7 = 0;
    if (*a3)
    {
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(this + 40);
        v10 = *(unsigned int *)(v9 + 16 * a2 + 8);
        if ((_DWORD)v10)
        {
          v11 = *(_QWORD *)(v9 + 16 * a2);
          v12 = (v8 + 1);
          v13 = (_BYTE *)(v11 + 3);
          while (1)
          {
            if (*(v13 - 3) == v4)
            {
              if (!*(v13 - 2))
              {
                v14 = v7 + 1;
                a4[v7] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 16 * a2) + *(v13 - 1));
                v7 += 2;
                a4[v14] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 16 * a2) + *v13);
                goto LABEL_17;
              }
              if (*(v13 - 2) == a3[v12])
                break;
            }
            v13 += 4;
            if (!--v10)
              goto LABEL_16;
          }
          v15 = v7 + 1;
          a4[v7] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 16 * a2) + *(v13 - 1));
          if (*v13)
          {
            a4[v15] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 16 * a2) + *v13);
            v15 = v7 + 2;
          }
          LODWORD(v12) = v8 + 2;
          v7 = v15;
        }
        else
        {
          LODWORD(v12) = v8 + 1;
LABEL_16:
          a4[v7++] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 16 * a2) + v4);
        }
LABEL_17:
        v4 = a3[v12];
        v8 = v12;
      }
      while (a3[v12]);
    }
    v5 = v7;
  }
  a4[v5] = 0;
  return this;
}

uint64_t CollMgr::collPrefixcmpUns8(CollMgr *this, unsigned int a2, CharInfo *a3, CharInfo *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t result;
  const unsigned __int8 *v20;
  const unsigned __int8 *v21;
  int v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const unsigned int *v36;
  const unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  int v52;
  unsigned int v53;
  const unsigned __int8 *v54;
  const unsigned __int8 *v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  void *v71;

  v10 = a2;
  CollMgr::verifyCollId((uint64_t)this, a2, 2, 4u, a5, a6, a7, a8);
  while (v10 != 0xFFFF)
  {
    v18 = *(unsigned __int8 *)a4;
    if (!*(_BYTE *)a4)
      break;
    if ((unsigned __int16)v10 == 65534)
    {
      if (**(_DWORD **)this)
      {
        v20 = 0;
        v21 = 0;
        v70 = 0;
        LODWORD(v71) = 0;
        do
        {
          v22 = CharInfo::decodeOneChar(a3, v21, &v71, v13, v14, v15, v16, v17);
          v28 = CharInfo::decodeOneChar(a4, v20, &v70, v23, v24, v25, v26, v27);
          result = (v22 - v28);
          if (!v28)
            break;
          if ((_DWORD)result)
            break;
          v20 = (const unsigned __int8 *)(v70 + (_DWORD)v20);
          v21 = (const unsigned __int8 *)((_DWORD)v71 + (_DWORD)v21);
        }
        while (*((_BYTE *)a4 + v20));
      }
      else
      {
        v46 = 1;
        do
        {
          v47 = *((unsigned __int8 *)a3 + (v46 - 1));
          result = v47 - v18;
          if (v47 != v18)
            break;
          v18 = *((unsigned __int8 *)a4 + v46++);
        }
        while (v18);
      }
      return result;
    }
    if ((v10 & 0x4000) == 0)
    {
      v29 = (unsigned __int16)v10;
      if (**(_DWORD **)this)
      {
        if (*(_DWORD *)(*((_QWORD *)this + 9) + 16 * (unsigned __int16)v10 + 8))
        {
          CharInfo::decodeCharString(a3, (uint64_t)this + 264, v12, v13, v14, v15, v16, v17);
          CharInfo::decodeCharString(a4, (uint64_t)this + 280, v30, v31, v32, v33, v34, v35);
          v36 = (const unsigned int *)*((_QWORD *)this + 33);
          v37 = (const unsigned int *)*((_QWORD *)this + 35);
          v38 = (2 * Uns32StringLength((uint64_t)v36)) | 1;
          v39 = *((_DWORD *)this + 77);
          if (v38 > v39)
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 296, v38 - v39, 0);
          *((_DWORD *)this + 76) = v38;
          v40 = (2 * Uns32StringLength((uint64_t)v37)) | 1;
          v41 = *((_DWORD *)this + 81);
          if (v40 > v41)
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 312, v40 - v41, 0);
          *((_DWORD *)this + 80) = v40;
          v42 = (unsigned int *)*((_QWORD *)this + 37);
          v43 = (unsigned int *)*((_QWORD *)this + 39);
          CollMgr::collTransformUns32((uint64_t)this, (unsigned __int16)v10, v36, v42);
          CollMgr::collTransformUns32((uint64_t)this, (unsigned __int16)v10, v37, v43);
          v44 = *v43;
          v45 = 1;
          do
          {
            result = v42[v45 - 1] - v44;
            if (!v44)
              break;
            if ((_DWORD)result)
              break;
            v44 = v43[v45++];
          }
          while (v44);
          *((_DWORD *)this + 68) = 0;
          *((_DWORD *)this + 72) = 0;
          *((_DWORD *)this + 76) = 0;
          *((_DWORD *)this + 80) = 0;
        }
        else
        {
          v54 = 0;
          v55 = 0;
          v70 = 0;
          LODWORD(v71) = 0;
          do
          {
            v56 = CharInfo::decodeOneChar(a3, v55, &v71, v13, v14, v15, v16, v17);
            v62 = CharInfo::decodeOneChar(a4, v54, &v70, v57, v58, v59, v60, v61);
            v64 = v70;
            v63 = (int)v71;
            LODWORD(v56) = Uns32OneToOneMap::getUns32OneToOne((unsigned int **)(*((_QWORD *)this + 7) + 32 * v29), v56);
            result = v56
                   - Uns32OneToOneMap::getUns32OneToOne((unsigned int **)(*((_QWORD *)this + 7) + 32 * v29), v62);
            if ((_DWORD)result)
              v65 = 1;
            else
              v65 = (_DWORD)v62 == 0;
            if (v65)
              break;
            v54 = (const unsigned __int8 *)(v64 + (_DWORD)v54);
            v55 = (const unsigned __int8 *)(v63 + (_DWORD)v55);
          }
          while (*((_BYTE *)a4 + v54));
        }
      }
      else if (*(_DWORD *)(*((_QWORD *)this + 5) + 16 * (unsigned __int16)v10 + 8))
      {
        v48 = (2 * Uns8StringLength((uint64_t)a3)) | 1;
        if (*((_DWORD *)this + 61) < v48)
        {
          v71 = 0;
          *((_DWORD *)this + 61) = realloc_array(*((_QWORD **)this + 29), &v71, v48, *((unsigned int *)this + 60), *((unsigned int *)this + 60), 1);
          *((_QWORD *)this + 29) = v71;
        }
        *((_DWORD *)this + 60) = v48;
        v49 = (2 * Uns8StringLength((uint64_t)a4)) | 1;
        v50 = (unsigned __int8 *)*((_QWORD *)this + 31);
        if (*((_DWORD *)this + 65) < v49)
        {
          v71 = 0;
          *((_DWORD *)this + 65) = realloc_array(v50, &v71, v49, *((unsigned int *)this + 64), *((unsigned int *)this + 64), 1);
          v50 = (unsigned __int8 *)v71;
          *((_QWORD *)this + 31) = v71;
        }
        *((_DWORD *)this + 64) = v49;
        v51 = (unsigned __int8 *)*((_QWORD *)this + 29);
        CollMgr::collTransformUns8((uint64_t)this, (unsigned __int16)v10, (const unsigned __int8 *)a3, v51);
        CollMgr::collTransformUns8((uint64_t)this, (unsigned __int16)v10, (const unsigned __int8 *)a4, v50);
        v52 = *v50;
        v53 = 1;
        do
        {
          result = v51[v53 - 1] - v52;
          if (!v52)
            break;
          if ((_DWORD)result)
            break;
          v52 = v50[v53++];
        }
        while (v52);
        *((_DWORD *)this + 60) = 0;
        *((_DWORD *)this + 64) = 0;
      }
      else
      {
        v66 = *(_QWORD *)(*((_QWORD *)this + 3) + 16 * (unsigned __int16)v10);
        v67 = 1;
        do
        {
          v68 = *(unsigned __int8 *)(v66 + *((unsigned __int8 *)a3 + (v67 - 1)));
          v69 = *(unsigned __int8 *)(v66 + v18);
          result = (v68 - v69);
          if (v68 != v69)
            break;
          v18 = *((unsigned __int8 *)a4 + v67++);
        }
        while (v18);
      }
      return result;
    }
    v10 = *(unsigned __int16 *)(*((_QWORD *)this + 18) + 2 * ((unsigned __int16)v10 & 0xBFFF));
    CollMgr::verifyCollId((uint64_t)this, v10, 2, 4u, v14, v15, v16, v17);
  }
  return 0;
}

void Uns32OneToOneMap::~Uns32OneToOneMap(Uns32OneToOneMap *this)
{
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this);
}

_QWORD *DgnArray<Uns32OneToOneMap>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 32 * v2 - 32;
    do
    {
      Uns32OneToOneMap::~Uns32OneToOneMap((Uns32OneToOneMap *)(*(_QWORD *)a1 + v3));
      v3 -= 32;
    }
    while (v3 != -32);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t readObject<Uns8SpecialMapItem>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v11 = 0;
  result = readObject(a1, &v11, a3);
  v7 = v11;
  v8 = *(_DWORD *)(a2 + 12);
  if (v11 <= v8)
  {
    *(_DWORD *)(a2 + 8) = v11;
    if (!v7)
      return result;
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a2, v11 - v8, 0);
    *(_DWORD *)(a2 + 8) = v7;
  }
  v9 = 0;
  v10 = 0;
  do
  {
    result = readObject(a1, (unsigned __int8 *)(*(_QWORD *)a2 + v9), a3);
    ++v10;
    v9 += 4;
  }
  while (v10 < *(unsigned int *)(a2 + 8));
  return result;
}

uint64_t readObject<Uns32SpecialMapItem>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v11 = 0;
  result = readObject(a1, &v11, a3);
  v7 = v11;
  v8 = *(_DWORD *)(a2 + 12);
  if (v11 <= v8)
  {
    *(_DWORD *)(a2 + 8) = v11;
    if (!v7)
      return result;
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v11 - v8, 0);
    *(_DWORD *)(a2 + 8) = v7;
  }
  v9 = 0;
  v10 = 0;
  do
  {
    result = readObject(a1, (_DWORD *)(*(_QWORD *)a2 + v9), a3);
    ++v10;
    v9 += 16;
  }
  while (v10 < *(unsigned int *)(a2 + 8));
  return result;
}

uint64_t writeObject<Uns8SpecialMapItem>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject(a1, (char *)(*(_QWORD *)a2 + v7), a3);
      ++v8;
      v7 += 4;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<Uns32SpecialMapItem>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject(a1, (int *)(*(_QWORD *)a2 + v7), a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t sizeObject<Uns32SpecialMapItem>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 == 3)
    return 0;
  v2 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v3 = *(unsigned int *)(a1 + 8);
    v4 = 16 * v3;
    if ((int)v3 <= 0)
      v4 = 0;
    v2 += v4;
    if (!a2)
      v2 += 16 * (*(_DWORD *)(a1 + 12) - v3);
  }
  return v2;
}

void MrecInitModule_treepref_prefilt(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;

  if (!gParDebugShowPrefiltererOperationTimes)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowPrefiltererOperationTimes", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowPrefiltererOperationTimes = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPrefiltererOperationTimes);
  }
  if (!gParDebugPrefiltererBuild)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugPrefiltererBuild", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugPrefiltererBuild = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPrefiltererBuild);
  }
  if (!gParDebugShowPrefiltererBuildShape)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugShowPrefiltererBuildShape", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugShowPrefiltererBuildShape = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPrefiltererBuildShape);
  }
  if (!gParDebugPrefiltererWatchTheseWords)
  {
    v6 = MemChunkAlloc(0x48uLL, 0);
    StringGlobalParamBase::StringGlobalParamBase((StringGlobalParamBase *)v6, "DebugPrefiltererWatchTheseWords", &byte_209A88803, &byte_209A88803, &byte_209A88803, 0, 0);
    *v7 = &unk_24C215D48;
    gParDebugPrefiltererWatchTheseWords = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPrefiltererWatchTheseWords);
  }
}

void TreePrefilterer::TreePrefilterer(TreePrefilterer *this)
{
  _QWORD *v2;

  Prefilterer::Prefilterer(this);
  *v2 = &off_24C2154A8;
  LexTreeNetScorer::LexTreeNetScorer((LexTreeNetScorer *)(v2 + 4));
  *(_OWORD *)((char *)this + 152312) = 0u;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 152232) = 0u;
  *((_BYTE *)this + 24) = 0;
  *(_OWORD *)((char *)this + 152264) = 0u;
  *(_OWORD *)((char *)this + 152280) = 0u;
  *((_DWORD *)this + 38064) = -1;
  *((_DWORD *)this + 38062) = 0;
  *((_QWORD *)this + 19037) = 0;
  *((_DWORD *)this + 38076) = 0;
  *((_BYTE *)this + 152216) = 0;
}

void sub_209A4928C(_Unwind_Exception *a1)
{
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void TreePrefilterer::~TreePrefilterer(TreePrefilterer *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)((char *)this + 152232);
  *(_QWORD *)this = &off_24C2154A8;
  *((_DWORD *)this + 38064) = -1;
  v3 = (_QWORD *)*((_QWORD *)this + 19029);
  if (v3)
  {
    (*(void (**)(_QWORD))(*v3 + 16))(*((_QWORD *)this + 19029));
    MemChunkFree(v3, 0);
  }
  *v2 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 152312);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 152280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 152264);
  LexTreeNetScorer::~LexTreeNetScorer((TreePrefilterer *)((char *)this + 32));
  MrecInitModule_sdpres_sdapi();
}

{
  TreePrefilterer::~TreePrefilterer(this);
  JUMPOUT(0x20BD149A8);
}

void TreePrefilterer::printSize(TreePrefilterer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103[2];
  int v104;
  __int16 v105;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 281, (DgnString *)v103);
  if (LODWORD(v103[1]))
    v16 = (char *)v103[0];
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)v103);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v102 = 0;
  v103[0] = 0;
  v101 = 0;
  Prefilterer::printSize(this, 0xFFFFFFFFLL, (a3 + 1), v103, &v102, &v101);
  *a4 += v103[0];
  *a5 += v102;
  *a6 += v101;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 284, (DgnString *)v103);
  if (LODWORD(v103[1]))
    v26 = (char *)v103[0];
  else
    v26 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v26, v21, v21, 0);
  DgnString::~DgnString((DgnString *)v103);
  *a4 += v21;
  *a5 += v21;
  v100 = (char *)this + 152232;
  v27 = *((_QWORD *)this + 19029);
  if (v27)
  {
    v102 = 0;
    v103[0] = 0;
    v101 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v27 + 32))(v27, 0xFFFFFFFFLL, (a3 + 1), v103, &v102, &v101);
    *a4 += v103[0];
    *a5 += v102;
    *a6 += v101;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v28 = 4;
  else
    v28 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 286, (DgnString *)v103);
  if (LODWORD(v103[1]))
    v33 = (char *)v103[0];
  else
    v33 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v33, v28, v28, 0);
  DgnString::~DgnString((DgnString *)v103);
  *a4 += v28;
  *a5 += v28;
  v102 = 0;
  v103[0] = 0;
  v101 = 0;
  LexTreeNetScorer::printSize((TreePrefilterer *)((char *)this + 32), 0xFFFFFFFFLL, (a3 + 1), v103, &v102, &v101);
  *a4 += v103[0];
  *a5 += v102;
  *a6 += v101;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 296, (DgnString *)v103);
  if (LODWORD(v103[1]))
    v38 = (char *)v103[0];
  else
    v38 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v38, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v103);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 4;
  else
    v39 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 297, (DgnString *)v103);
  if (LODWORD(v103[1]))
    v44 = (char *)v103[0];
  else
    v44 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v44, v39, v39, 0);
  DgnString::~DgnString((DgnString *)v103);
  *a4 += v39;
  *a5 += v39;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v45 = 4;
  else
    v45 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 298, (DgnString *)v103);
  if (LODWORD(v103[1]))
    v50 = (char *)v103[0];
  else
    v50 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v50, v45, v45, 0);
  DgnString::~DgnString((DgnString *)v103);
  *a4 += v45;
  *a5 += v45;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 300, (DgnString *)v103);
  if (LODWORD(v103[1]))
    v55 = (char *)v103[0];
  else
    v55 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v55, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v103);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 301, (DgnString *)v103);
  if (LODWORD(v103[1]))
    v60 = (char *)v103[0];
  else
    v60 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v60, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v103);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 303, (DgnString *)v103);
  if (LODWORD(v103[1]))
    v65 = (char *)v103[0];
  else
    v65 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v65, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v103);
  *a4 += 4;
  *a5 += 4;
  v66 = (char *)this + 152264;
  v67 = sizeObject<TreePhoneRec>((uint64_t)this + 152264, 0);
  v68 = sizeObject<TreePhoneRec>((uint64_t)v66, 1);
  v104 = 0xFFFF;
  v105 = 0x1FFF;
  *(_OWORD *)v103 = xmmword_209A6C800;
  TreePhoneRec::sizeObject((uint64_t)v103, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 305, (DgnString *)v103);
  if (LODWORD(v103[1]))
    v73 = (char *)v103[0];
  else
    v73 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v73, v67, v68, 0);
  DgnString::~DgnString((DgnString *)v103);
  *a4 += v67;
  *a5 += v68;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v74 = 12;
  else
    v74 = 16;
  v75 = *((unsigned int *)v100 + 14);
  v76 = *((_DWORD *)v100 + 15);
  if (v76 >= v75)
  {
    v77 = 0;
    if ((int)v75 > 0)
      v74 += 4 * (v75 - 1) + 4;
    v78 = v74 + 4 * (v76 - v75);
  }
  else
  {
    v77 = 4 * v75;
    v78 = v74;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 307, (DgnString *)v103);
  if (LODWORD(v103[1]))
    v83 = (char *)v103[0];
  else
    v83 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v83, v78, v74, v77);
  DgnString::~DgnString((DgnString *)v103);
  *a4 += v78;
  *a5 += v74;
  *a6 += v77;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v84 = 4;
  else
    v84 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 309, (DgnString *)v103);
  if (LODWORD(v103[1]))
    v89 = (char *)v103[0];
  else
    v89 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v89, v84, v84, 0);
  DgnString::~DgnString((DgnString *)v103);
  *a4 += v84;
  *a5 += v84;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 311, (DgnString *)v103);
  if (LODWORD(v103[1]))
    v94 = (char *)v103[0];
  else
    v94 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v94, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v103);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 312, (DgnString *)v103);
  if (LODWORD(v103[1]))
    v99 = (char *)v103[0];
  else
    v99 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, a3, &byte_209A88803, (35 - a3), (35 - a3), v99, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)v103);
}

void sub_209A49B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<TreePhoneRec>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v10;
  int v11;
  __int16 v12;

  v11 = 0xFFFF;
  v12 = 0x1FFF;
  v10 = xmmword_209A6C800;
  v4 = TreePhoneRec::sizeObject((uint64_t)&v10, 2);
  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 12;
  else
    v5 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = v4;
    v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      v8 = v7 + 1;
      do
        v5 += TreePhoneRec::sizeObject(*(_QWORD *)a1 + 24 * (v8-- - 2), a2);
      while (v8 > 1);
    }
    if (!a2)
      v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
  return v5;
}

uint64_t TreePrefilterer::setPrefiltererBuildParamSet(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 152296) = a2;
  *(_DWORD *)(result + 152304) = *(_DWORD *)(a2 + 72);
  return result;
}

uint64_t TreePrefilterer::getUserId(TreePrefilterer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 19028);
  if (v1)
    return *(unsigned __int16 *)(v1 + 184);
  else
    return 0xFFFFLL;
}

void TreePrefilterer::getPrefiltererStats(TreePrefilterer *this, PelStats *a2, PrefStats *a3, PelStats *a4, PrefStats *a5)
{
  LexTreeNetScorer::getPrefiltererStats((TreePrefilterer *)((char *)this + 32), a2, a3, a4, a5);
}

void LexTreeNetScorer::getPrefiltererStats(LexTreeNetScorer *this, PelStats *a2, PrefStats *a3, PelStats *a4, PrefStats *a5)
{
  _DWORD *v9;
  _DWORD *v10;
  char *v11;

  v9 = (_DWORD *)((char *)this + 152104);
  v10 = (_DWORD *)((char *)this + 151848);
  v11 = (char *)this + 151928;
  PelStats::operator=((uint64_t)a2, (uint64_t)this + 151928);
  PrefStats::operator=((uint64_t)a3, (uint64_t)v9);
  PelStats::operator=((uint64_t)a4, (uint64_t)this + 151672);
  PelStats::operator-=((uint64_t)a4, (uint64_t)v11);
  PrefStats::operator=((uint64_t)a5, (uint64_t)v10);
  *(_DWORD *)a5 = *v9;
  *((_DWORD *)a5 + 18) = v9[18];
  PrefStats::operator-=((uint64_t)a5, (uint64_t)v9);
  *(_DWORD *)a5 = *v10;
  *((_DWORD *)a5 + 18) = v10[18];
}

void TreePrefilterer::setSynchronousPrefiltererStats(TreePrefilterer *this)
{
  LexTreeNetScorer::setSynchronousPrefiltererStats((TreePrefilterer *)((char *)this + 32));
}

void LexTreeNetScorer::setSynchronousPrefiltererStats(LexTreeNetScorer *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v1 = (unsigned int *)((char *)this + 152104);
  v2 = (unsigned int *)((char *)this + 151848);
  PelStats::operator=((uint64_t)this + 151928, (uint64_t)this + 151672);
  v3 = *v1;
  v4 = *v2;
  v5 = v1[18];
  v6 = v2[18];
  PrefStats::operator=((uint64_t)v1, (uint64_t)v2);
  if (v3 <= v4)
    v7 = v4;
  else
    v7 = v3;
  *v1 = v7;
  *v2 = 0;
  if (v5 <= v6)
    v8 = v6;
  else
    v8 = v5;
  v1[18] = v8;
  v2[18] = 0;
}

uint64_t TreePrefilterer::getCurFrame(TreePrefilterer *this)
{
  return LexTreeNetScorer::getCurFrame((TreePrefilterer *)((char *)this + 32));
}

BOOL TreePrefilterer::needLookaheadToScoreFrame(TreePrefilterer *this)
{
  return LexTreeNetScorer::needLookaheadToScoreFrame((TreePrefilterer *)((char *)this + 32));
}

void TreePrefilterer::scoreFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, ReturnListQueue *a5)
{
  int v6;
  LexTreeNetScorer *v7;
  int NextFrameTime;
  int v9;
  unsigned int v10;
  uint64_t *v11;

  v6 = a2;
  v7 = (LexTreeNetScorer *)(a1 + 32);
  LexTreeNetScorer::scoreFrame(a1 + 32, a2, a3, a4);
  NextFrameTime = ReturnListQueue::getNextFrameTime(a5);
  if (NextFrameTime <= v6)
  {
    v9 = NextFrameTime;
    v10 = v6 - NextFrameTime + 1;
    do
    {
      if (!LexTreeNetScorer::isPrefilteringListAvailable(v7, v9))
        break;
      v11 = MemChunkAlloc(0x10uLL, 0);
      *v11 = 0;
      v11[1] = 0;
      LexTreeNetScorer::getList((uint64_t)v7, v9, (uint64_t)v11, v10);
      ReturnListQueue::enqueue((uint64_t)a5, v9++, (uint64_t)v11);
      --v10;
    }
    while (v10);
  }
}

PrefilterResult *TreePrefilterer::completeUtterance(TreePrefilterer *this, signed int a2, ReturnListQueue *a3)
{
  signed int NextFrameTime;
  unsigned int v7;
  char *v8;
  unsigned int v9;
  uint64_t *v10;

  NextFrameTime = ReturnListQueue::getNextFrameTime(a3);
  if (NextFrameTime <= a2)
  {
    v7 = NextFrameTime;
    v8 = (char *)this + 32;
    v9 = a2 - NextFrameTime + 1;
    do
    {
      v10 = MemChunkAlloc(0x10uLL, 0);
      *v10 = 0;
      v10[1] = 0;
      LexTreeNetScorer::getList((uint64_t)v8, v7, (uint64_t)v10, v9);
      ReturnListQueue::enqueue((uint64_t)a3, v7++, (uint64_t)v10);
      --v9;
    }
    while (v9);
  }
  return ReturnListQueue::setComplete(a3);
}

uint64_t TreePrefilterer::scoreFramesUntil(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, ReturnListQueue *a5, uint64_t a6)
{
  uint64_t v11;
  char i;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD v25[2];

  v11 = ((uint64_t (*)(_QWORD **))(*a1)[12])(a1);
  v25[0] = 0;
  v25[1] = 0;
  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  for (i = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a1[19029] + 72))(a1[19029], v11, a3, a6);
        (((int)ReturnListQueue::getNextFrameTime(a5) <= a2) & i) == 1;
        i = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a1[19029] + 72))(a1[19029], v11, a3, a6))
  {
    if (LexTreeNetScorer::needLookaheadToScoreFrame((LexTreeNetScorer *)(a1 + 4)) && *(_DWORD *)(a4 + 16) <= (int)v11)
    {
      i = 1;
      break;
    }
    v13 = LexTreeNetScorer::needLookaheadToScoreFrame((LexTreeNetScorer *)(a1 + 4));
    if (v13)
    {
      v14 = *(_QWORD *)(a4 + 8) + 16 * v11;
      DgnPrimFixArray<short>::copyArraySlice(&v23, (uint64_t *)v14, 0, *(_DWORD *)(v14 + 8));
      v15 = v11;
      if (*((_DWORD *)a5 + 1) == -16)
      {
        v16 = *(_DWORD *)(a4 + 4);
        if (v16 != -16 && v16 <= (int)v11)
        {
          *((_DWORD *)a5 + 1) = ReturnListQueue::getNextFrameTime(a5);
          ((void (*)(_QWORD **))(*a1)[11])(a1);
        }
      }
    }
    else
    {
      v15 = v11;
    }
    DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v25, (_QWORD *)(*(_QWORD *)(a3 + 8) + 16 * v15), 0, *(_DWORD *)(*(_QWORD *)(a3 + 8) + 16 * v15 + 8));
    if (v13)
      v17 = &v23;
    else
      v17 = &v21;
    TreePrefilterer::scoreFrame((uint64_t)a1, v11, (uint64_t)v25, v17, a5);
    v11 = (v11 + 1);
  }
  if (*(_DWORD *)(a3 + 16) <= (int)v11 && *(_BYTE *)a3)
  {
    if (*((_DWORD *)a5 + 1) == -16)
    {
      *((_DWORD *)a5 + 1) = ReturnListQueue::getNextFrameTime(a5);
      ((void (*)(_QWORD **))(*a1)[11])(a1);
    }
    TreePrefilterer::completeUtterance((TreePrefilterer *)a1, v11, a5);
    v18 = 0;
  }
  else if ((int)ReturnListQueue::getNextFrameTime(a5) <= a2)
  {
    if (LexTreeNetScorer::needLookaheadToScoreFrame((LexTreeNetScorer *)(a1 + 4)) && *(_DWORD *)(a4 + 16) <= (int)v11)
    {
      v18 = 3;
    }
    else if ((i & 1) != 0)
    {
      v18 = 0;
    }
    else
    {
      v18 = 2;
    }
  }
  else
  {
    v18 = 1;
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v21);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
  return v18;
}

void sub_209A4A224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t TreePrefilterer::initPrefilterer(TreePrefilterer *this, int ***a2, unsigned int a3, int a4, char a5)
{
  return TreePrefilterer::initPrefilterer(this, a2, a3, a4, a5, 0);
}

uint64_t TreePrefilterer::initPrefilterer(TreePrefilterer *this, int ***a2, unsigned int a3, int a4, char a5, int a6)
{
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int **v14;
  int v15;
  int v16;
  unint64_t v17;
  _DWORD *v18;
  int v19;
  unsigned int v20;
  unsigned __int16 v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  double v27;
  char v28;
  int v29;
  uint64_t v30;
  void *v32;
  uint64_t v33;
  void *v34;

  *((_DWORD *)this + 3) = a4;
  *((_WORD *)this + 4) = a3;
  v10 = (char *)this + 152216;
  *((_QWORD *)this + 2) = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * a3);
  *((_QWORD *)this + 19028) = a2;
  v11 = *((_QWORD *)this + 19037);
  if (*(_DWORD *)(v11 + 112))
    v12 = *(char **)(v11 + 104);
  else
    v12 = &byte_209A88803;
  if (*(_DWORD *)(v11 + 128))
    v13 = *(char **)(v11 + 120);
  else
    v13 = &byte_209A88803;
  *((_QWORD *)this + 19029) = User::newPelScorer((User *)a2, 0, *(double *)(v11 + 56), *(_BYTE *)(v11 + 80), *(double *)(v11 + 64), v12, v13, *(_DWORD *)(v11 + 136), *(_BYTE *)(v11 + 140) == 0);
  v14 = a2[6];
  *((_QWORD *)v10 + 3) = v14;
  v15 = **v14;
  v32 = 0;
  v33 = 0;
  v16 = v15 - 2;
  *((_DWORD *)v10 + 8) = v15 - 2;
  if (v15 == 2)
  {
    v20 = 0;
    LODWORD(v33) = 0;
  }
  else
  {
    v34 = 0;
    v17 = realloc_array(0, &v34, 4 * (v15 - 2), 0, 0, 1);
    v18 = v34;
    v32 = v34;
    v19 = *((_DWORD *)v10 + 8);
    LODWORD(v33) = v16;
    HIDWORD(v33) = v17 >> 2;
    v20 = 0;
    if (v19)
    {
      v21 = 0;
      v22 = *(_QWORD *)(*((_QWORD *)v10 + 3) + 16);
      do
      {
        v23 = *(unsigned __int8 *)(v22 + v21);
        v18[v21] = v23;
        if (v20 <= v23)
          v20 = v23;
        ++v21;
      }
      while (*((_DWORD *)v10 + 8) > v21);
    }
  }
  *((_DWORD *)v10 + 9) = 0xFE / v20;
  TreePrefilterer::populateUsingCwidList(this, a6);
  v24 = *((_QWORD *)v10 + 10);
  v25 = *(_DWORD *)(v24 + 44);
  v26 = *(_DWORD *)(v24 + 76);
  if (v26 == -1)
    v26 = 20000;
  v27 = *(double *)(v24 + 48);
  if (*(_DWORD *)(v24 + 144))
  {
    v28 = 1;
  }
  else
  {
    v29 = *(_DWORD *)(v24 + 148);
    v28 = v29 != 0;
    if (!v29)
    {
      v30 = 0;
      goto LABEL_21;
    }
  }
  v30 = *((_QWORD *)this + 2) + 352;
LABEL_21:
  LexTreeNetScorer::initScorer((unint64_t)this + 32, *((_WORD *)this + 4), a5, *((_QWORD *)v10 + 2), *((_QWORD *)v10 + 3), *((_DWORD *)v10 + 10), (uint64_t)this + 152264, (uint64_t)this + 152280, v27, (uint64_t)&v32, __SPAIR64__(v20, *((_DWORD *)v10 + 8)), v25, v26, v28, v30);
  *v10 = 1;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
}

void sub_209A4A474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TreePrefilterer::populateUsingCwidList(TreePrefilterer *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  _DWORD *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  unsigned int v55;
  _DWORD *v56;
  unint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  int i;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  _DWORD *v77;
  _DWORD *v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  __int16 *v93;
  __int16 v94;
  __int16 v95;
  unsigned int v96;
  unint64_t v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  _DWORD *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  _BOOL4 v110;
  uint64_t v111;
  _DWORD *v112;
  _DWORD *v113;
  unsigned int *v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  __int16 *v119;
  __int16 v120;
  int v121;
  __int16 v122;
  _BOOL4 v123;
  _QWORD *v124;
  unsigned int v125;
  char *v126;
  unint64_t v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  char *v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  unsigned int v141;
  uint64_t *v142;
  unsigned int v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  __int16 *v153;
  __int16 v154;
  __int16 v155;
  unsigned int v156;
  unint64_t v157;
  unsigned int *v158;
  unint64_t v159;
  unsigned int v160;
  unsigned __int16 *v161;
  unsigned int v162;
  unsigned int v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  unsigned __int16 *v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _DWORD *v174;
  _DWORD *v175;
  uint64_t v176;
  unsigned __int16 *v177;
  int v178;
  int v179;
  unsigned int v180;
  _BOOL4 v181;
  _DWORD *v182;
  _DWORD *v183;
  uint64_t v184;
  int v185;
  unsigned int v186;
  uint64_t v187;
  __int16 *v188;
  __int16 v189;
  int v190;
  __int16 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  char *v209;
  int v210;
  uint64_t *v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  _WORD *v216;
  __int16 v217;
  __int16 v218;
  BOOL v219;
  BOOL v220;
  uint64_t v222;
  unsigned int *v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  unsigned int v229[2];
  uint64_t v230;
  unsigned int v231;
  unsigned int *v232;
  void *v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  _DWORD *v237;
  uint64_t v238;
  unsigned int *v239;
  uint64_t v240;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v223, 0, a2);
  v4 = *((_QWORD *)this + 2);
  if (!*(_BYTE *)(v4 + 260) || *(_DWORD *)(v4 + 264) != *((_DWORD *)this + 3))
  {
    Voc::notifyPrefLmScoresBad((Voc *)v4);
    v12 = *((_QWORD *)this + 2);
    *(_DWORD *)(v12 + 264) = *((_DWORD *)this + 3);
    if (!*(_BYTE *)(v12 + 260))
      Voc::computePrefLmScores((Voc *)v12, v5, v6, v7, v8, v9, v10, v11);
  }
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v223);
  v13 = (char *)this + 152224;
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v223, 0, a2);
  v14 = (_DWORD *)*((_QWORD *)this + 19037);
  v15 = v14[18];
  v16 = *((_QWORD *)this + 2);
  if (!*(_BYTE *)(v16 + 288)
    || *(_DWORD *)(v16 + 300) != v15
    || *(_DWORD *)(v16 + 304) != *((_DWORD *)this + 3)
    || (v17 = *(_DWORD *)(v16 + 292), v17 != v14[36])
    || (v18 = *(_DWORD *)(v16 + 296), v18 != v14[37])
    || v18 | v17 && *(_DWORD *)(v16 + 308) != *(_DWORD *)(*(_QWORD *)v13 + 216))
  {
    Voc::notifyPrefWordIdsSortedByPronBad((Voc *)v16);
    v24 = *((_QWORD *)this + 2);
    *(_DWORD *)(v24 + 300) = v15;
    v25 = *((unsigned int *)this + 3);
    *(_DWORD *)(v24 + 304) = v25;
    v26 = *((_QWORD *)this + 19037);
    v27 = *(_DWORD *)(v26 + 144);
    *(_DWORD *)(v24 + 292) = v27;
    v28 = *(_DWORD *)(v26 + 148);
    *(_DWORD *)(v24 + 296) = v28;
    if (v27 | v28)
    {
      *(_DWORD *)(v24 + 308) = *(_DWORD *)(*(_QWORD *)v13 + 216);
      if (*(_BYTE *)(v24 + 288))
        goto LABEL_18;
      if (v27 | v28)
      {
        TreePrefilterer::computePicModelIds(this, (StateMgr **)v24, v25);
        v24 = *((_QWORD *)this + 2);
      }
    }
    else
    {
      *(_DWORD *)(v24 + 308) = 0;
      if (*(_BYTE *)(v24 + 288))
        goto LABEL_18;
    }
    Voc::computePrefWordIdsSortedByPron((Voc *)v24, v24, v25, v19, v20, v21, v22, v23);
  }
LABEL_18:
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v223);
  v239 = 0;
  v240 = 0;
  v29 = *((_QWORD *)this + 2);
  v30 = *(unsigned int *)(v29 + 424);
  if ((_DWORD)v30)
  {
    v223 = 0;
    v31 = realloc_array(0, (void **)&v223, 4 * v30, 0, 0, 1);
    v32 = v223;
    v239 = v223;
    v33 = *(_DWORD *)(v29 + 424);
    LODWORD(v240) = v30;
    HIDWORD(v240) = v31 >> 2;
    if (v33)
    {
      v34 = 0;
      v35 = *((unsigned __int16 *)this + 4) << 25;
      v36 = *(_QWORD *)(v29 + 416);
      do
      {
        v32[v34] = *(_DWORD *)(v36 + 4 * v34) & 0xFFFFFF | v35;
        ++v34;
      }
      while (v34 < *(unsigned int *)(v29 + 424));
    }
  }
  else
  {
    LODWORD(v240) = 0;
  }
  v237 = 0;
  v238 = 0;
  v235 = 0;
  v236 = 0;
  v233 = 0;
  v234 = 0;
  v37 = *((_QWORD *)this + 19037);
  if (*(_DWORD *)(v37 + 144) || *(_DWORD *)(v37 + 148))
  {
    v38 = *((_QWORD *)this + 2);
    if (*(_DWORD *)(v38 + 424))
    {
      v39 = 0;
      v40 = 0;
      v41 = 0;
      do
      {
        v42 = *(_DWORD *)(*(_QWORD *)(v38 + 416) + 4 * v39);
        v223 = 0;
        v229[0] = 0;
        Voc::getPrefPicModelIdPron(*((_QWORD **)this + 2), v42, (const unsigned int **)&v223, v229);
        v43 = v229[0];
        if (v40 >= v229[0])
          v44 = v229[0];
        else
          v44 = v40;
        if ((_DWORD)v44)
        {
          v45 = 0;
          while (v223[v45] == v41[v45])
          {
            if (v44 == ++v45)
              goto LABEL_37;
          }
          LODWORD(v44) = v45;
        }
LABEL_37:
        if (v44 < v229[0])
        {
          v46 = v44;
          do
          {
            v47 = v238;
            if (v46 >= v238)
            {
              do
              {
                if (v47 == HIDWORD(v238))
                {
                  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v237, 1, 1);
                  v47 = v238;
                }
                v48 = v237;
                v237[v47] = 0;
                LODWORD(v238) = v238 + 1;
                v47 = v238;
              }
              while (v46 >= v238);
            }
            else
            {
              v48 = v237;
            }
            ++v48[v46++];
            v43 = v229[0];
          }
          while (v46 < v229[0]);
        }
        v41 = v223;
        ++v39;
        v40 = v43;
      }
      while (v39 < *(unsigned int *)(v38 + 424));
      v49 = v238;
      v50 = v238;
      if (HIDWORD(v236) < v238)
      {
        v223 = 0;
        HIDWORD(v236) = realloc_array(v235, (void **)&v223, 4 * v238, 4 * v236, 4 * v236, 1) >> 2;
        v235 = v223;
        v50 = v238;
      }
      LODWORD(v236) = v49;
      v51 = v50;
      if (HIDWORD(v234) < v50)
      {
        v223 = 0;
        HIDWORD(v234) = realloc_array(v233, (void **)&v223, 4 * v50, 4 * v234, 4 * v234, 1) >> 2;
        v233 = v223;
        v51 = v238;
      }
      LODWORD(v234) = v50;
      if (v51)
      {
        v52 = 0;
        v53 = v235;
        v54 = v237;
        v55 = 1;
        v56 = v233;
        do
        {
          v53[v52] = v55;
          v55 += v54[v52];
          v56[v52++] = 0;
        }
        while (v52 < v238);
        goto LABEL_90;
      }
LABEL_89:
      v55 = 1;
      goto LABEL_90;
    }
LABEL_88:
    LODWORD(v236) = 0;
    goto LABEL_89;
  }
  v57 = v240;
  if (!(_DWORD)v240)
    goto LABEL_88;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  LODWORD(v61) = 0;
  v62 = 0;
  do
  {
    v63 = *(_QWORD **)(*((_QWORD *)this + 2) + 48);
    v64 = v239[v60] & 0xFFFFFF;
    v65 = v63[9] + 2 * *(unsigned int *)(v63[6] + 4 * v64);
    v66 = *(unsigned __int16 *)(v63[4] + 2 * v64);
    v67 = *((_DWORD *)this + 38076);
    if (v67 >= v66 || v67 == 0)
      v69 = v66;
    else
      v69 = *((_DWORD *)this + 38076);
    if (v61 >= v69)
      v61 = v69;
    else
      v61 = v61;
    if ((_DWORD)v61)
    {
      v70 = 0;
      while (*(unsigned __int16 *)(v65 + 2 * v70) == *(unsigned __int16 *)(v62 + 2 * v70))
      {
        if (v61 == ++v70)
          goto LABEL_71;
      }
      LODWORD(v61) = v70;
    }
LABEL_71:
    if (v61 < v69)
    {
      v71 = v61;
      do
      {
        for (i = v238; v71 >= v238; i = v238)
        {
          if (i == HIDWORD(v238))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v237, 1, 1);
            i = v238;
            v58 = v237;
            v59 = v237;
          }
          v59[i] = 0;
          LODWORD(v238) = v238 + 1;
        }
        ++v58[v71++];
        v59 = v58;
      }
      while (v69 != (_DWORD)v71);
      v57 = v240;
      v59 = v58;
    }
    ++v60;
    LODWORD(v61) = v69;
    v62 = v65;
  }
  while (v60 < v57);
  v73 = v238;
  v74 = v238;
  if (HIDWORD(v236) < v238)
  {
    v223 = 0;
    HIDWORD(v236) = realloc_array(v235, (void **)&v223, 4 * v238, 4 * v236, 4 * v236, 1) >> 2;
    v235 = v223;
    v74 = v238;
  }
  LODWORD(v236) = v73;
  v75 = v74;
  if (HIDWORD(v234) < v74)
  {
    v223 = 0;
    HIDWORD(v234) = realloc_array(v233, (void **)&v223, 4 * v74, 4 * v234, 4 * v234, 1) >> 2;
    v233 = v223;
    v75 = v238;
  }
  LODWORD(v234) = v74;
  if (!v75)
    goto LABEL_89;
  v76 = 0;
  v77 = v235;
  v78 = v237;
  v55 = 1;
  v79 = v233;
  do
  {
    v77[v76] = v55;
    v55 += v78[v76];
    v79[v76++] = 0;
  }
  while (v76 < v238);
LABEL_90:
  v80 = *((_QWORD *)this + 19037);
  if (*(_DWORD *)(v80 + 144) || *(_DWORD *)(v80 + 148))
  {
    v81 = *((_QWORD *)this + 2);
    v82 = (_QWORD *)((char *)this + 152264);
    v84 = *((_DWORD *)this + 38068);
    v83 = *((_DWORD *)this + 38069);
    *((_DWORD *)this + 38064) = v84;
    if (v55 > v83)
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 152264, v55 - v83, 0);
      v84 = *((_DWORD *)this + 38068);
    }
    if (v84 < v55)
    {
      v85 = v55 - (unint64_t)v84;
      v86 = 24 * v84;
      do
      {
        v87 = *v82 + v86;
        *(_DWORD *)(v87 + 16) = 0xFFFF;
        *(_WORD *)(v87 + 20) = 0x1FFF;
        *(_OWORD *)v87 = xmmword_209A6C800;
        v86 += 24;
        --v85;
      }
      while (v85);
    }
    *((_DWORD *)this + 38068) = v55;
    v88 = *((_DWORD *)this + 38064);
    v89 = *((_QWORD *)this + 19033);
    *(_WORD *)(v89 + 24 * v88 + 20) |= 0x8000u;
    v90 = v237;
    v91 = *v237;
    if (*v237)
    {
      v92 = v89 + 24 * v88;
      v95 = *(_WORD *)(v92 + 18);
      v93 = (__int16 *)(v92 + 18);
      v94 = v95;
      v96 = 1;
      do
      {
        if (v94)
        {
          ++v94;
        }
        else
        {
          *(_DWORD *)(v93 - 5) = v96;
          v91 = *v90;
          v94 = 1;
        }
        ++v96;
      }
      while (v96 <= v91);
      *v93 = v94;
    }
    v223 = 0;
    v224 = 0;
    if (*(_DWORD *)(v81 + 424))
    {
      v222 = v81;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = -1;
      do
      {
        v101 = *(_DWORD *)(*(_QWORD *)(v81 + 416) + 4 * v97);
        v232 = 0;
        v231 = 0;
        Voc::getPrefPicModelIdPron(*((_QWORD **)this + 2), v101, (const unsigned int **)&v232, &v231);
        v102 = v231;
        if (v98 >= v231)
          v103 = v231;
        else
          v103 = v98;
        if ((_DWORD)v103)
        {
          if (*v232 == *v99)
          {
            v104 = 0;
            v105 = v235;
            v106 = v233;
            while (v103 - 1 != v104)
            {
              v107 = v232[v104 + 1];
              v108 = v99[v104 + 1];
              ++v106;
              ++v105;
              ++v104;
              if (v107 != v108)
              {
                v109 = *(v105 - 1) + *(v106 - 1) - 1;
                goto LABEL_117;
              }
            }
            v109 = *v105 + *v106 - 1;
          }
          else
          {
            LODWORD(v104) = 0;
            v109 = -1;
LABEL_117:
            LODWORD(v103) = v104;
          }
        }
        else
        {
          v109 = -1;
        }
        v110 = v103 != v98;
        if ((_DWORD)v103 != v231)
          v110 = 1;
        if (v103 >= v231)
        {
          v116 = v109;
        }
        else
        {
          v111 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 72)
               + 2
               * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 48)
                                 + 4 * (*(_QWORD *)&v101 & 0xFFFFFFLL));
          v112 = v235;
          v114 = v232;
          v113 = v233;
          v115 = *v82;
          v103 = v103;
          do
          {
            v116 = v113[v103] + v112[v103];
            v117 = v115 + 24 * v116;
            *(_WORD *)(v117 + 16) = *(_WORD *)(v111 + 2 * v103);
            *(_DWORD *)(v117 + 12) = v114[v103];
            if (v103)
            {
              v118 = v115 + 24 * v109;
              v121 = *(unsigned __int16 *)(v118 + 18);
              v119 = (__int16 *)(v118 + 18);
              v120 = v121;
              if (v121)
              {
                v122 = v120 + 1;
              }
              else
              {
                *(_DWORD *)(v115 + 24 * v109 + 8) = v116;
                v122 = 1;
              }
              *v119 = v122;
            }
            ++v113[v103++];
            v102 = v231;
            v109 = v116;
          }
          while (v103 < v231);
        }
        v123 = v100 != -1 && v110;
        v98 = v102;
        if (v123)
        {
          v124 = v82;
          *(_QWORD *)v229 = 0;
          v230 = 0;
          v125 = v224;
          if ((_DWORD)v224)
          {
            v126 = 0;
            v125 = 0;
            v127 = 0;
            do
            {
              v128 = *((unsigned __int16 *)this + 4);
              v129 = v223[v127];
              if (v125 == HIDWORD(v230))
              {
                DgnPrimArray<unsigned int>::reallocElts((uint64_t)v229, 1, 1);
                v125 = v230;
                v126 = *(char **)v229;
              }
              *(_DWORD *)&v126[4 * v125] = v129 & 0xFFFFFF | (v128 << 25);
              v125 = v230 + 1;
              LODWORD(v230) = v230 + 1;
              ++v127;
            }
            while (v127 < v224);
          }
          else
          {
            v126 = 0;
          }
          mrec_qsort_r<SortCwidsByWordEndScope>(v126, v125, 4, (uint64_t)this);
          TreePrefilterer::checkAndAddEndingWords((uint64_t)this, v100, (uint64_t)v229, v130, v131, v132, v133, v134);
          LODWORD(v224) = 0;
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v229);
          v98 = v231;
          v82 = v124;
          v81 = v222;
        }
        v99 = v232;
        v135 = v224;
        if (v224 == (unint64_t)HIDWORD(v224))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v223, 1, 1);
          v135 = v224;
        }
        v223[v135] = v101;
        v136 = v224 + 1;
        LODWORD(v224) = v224 + 1;
        ++v97;
        v100 = v116;
      }
      while (v97 < *(unsigned int *)(v81 + 424));
      v13 = (char *)this + 152224;
      if (v116 != -1)
      {
        *(_QWORD *)v229 = 0;
        v230 = 0;
        if (v136)
        {
          v137 = 0;
          LODWORD(v138) = 0;
          v139 = 0;
          do
          {
            v140 = *((unsigned __int16 *)this + 4);
            v141 = v223[v139];
            if ((_DWORD)v138 == HIDWORD(v230))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)v229, 1, 1);
              LODWORD(v138) = v230;
              v137 = *(char **)v229;
            }
            *(_DWORD *)&v137[4 * v138] = v141 & 0xFFFFFF | (v140 << 25);
            v138 = (v230 + 1);
            LODWORD(v230) = v230 + 1;
            ++v139;
          }
          while (v139 < v224);
        }
        else
        {
          v138 = 0;
          v137 = 0;
        }
        mrec_qsort_r<SortCwidsByWordEndScope>(v137, v138, 4, (uint64_t)this);
        TreePrefilterer::checkAndAddEndingWords((uint64_t)this, v116, (uint64_t)v229, v202, v203, v204, v205, v206);
        LODWORD(v224) = 0;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v229);
      }
    }
  }
  else
  {
    v142 = (uint64_t *)((char *)this + 152264);
    v144 = *((_DWORD *)this + 38068);
    v143 = *((_DWORD *)this + 38069);
    *((_DWORD *)this + 38064) = v144;
    if (v55 > v143)
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 152264, v55 - v143, 0);
      v144 = *((_DWORD *)this + 38068);
    }
    if (v144 < v55)
    {
      v145 = v55 - (unint64_t)v144;
      v146 = 24 * v144;
      do
      {
        v147 = *v142 + v146;
        *(_DWORD *)(v147 + 16) = 0xFFFF;
        *(_WORD *)(v147 + 20) = 0x1FFF;
        *(_OWORD *)v147 = xmmword_209A6C800;
        v146 += 24;
        --v145;
      }
      while (v145);
    }
    *((_DWORD *)this + 38068) = v55;
    v148 = *((_DWORD *)this + 38064);
    v149 = *((_QWORD *)this + 19033);
    *(_WORD *)(v149 + 24 * v148 + 20) |= 0x8000u;
    v150 = v237;
    v151 = *v237;
    if (*v237)
    {
      v152 = v149 + 24 * v148;
      v155 = *(_WORD *)(v152 + 18);
      v153 = (__int16 *)(v152 + 18);
      v154 = v155;
      v156 = 1;
      do
      {
        if (v154)
        {
          ++v154;
        }
        else
        {
          *(_DWORD *)(v153 - 5) = v156;
          v151 = *v150;
          v154 = 1;
        }
        ++v156;
      }
      while (v156 <= v151);
      *v153 = v154;
    }
    v223 = 0;
    v224 = 0;
    if ((_DWORD)v240)
    {
      LODWORD(v157) = 0;
      v158 = 0;
      v159 = 0;
      v160 = 0;
      v161 = 0;
      v162 = -1;
      do
      {
        v163 = v239[v159];
        v164 = *(_QWORD **)(*((_QWORD *)this + 2) + 48);
        v165 = v164[9];
        v166 = *(unsigned int *)(v164[6] + 4 * (*(_QWORD *)&v163 & 0xFFFFFFLL));
        v167 = (unsigned __int16 *)(v165 + 2 * v166);
        v168 = *(unsigned __int16 *)(v164[4] + 2 * (*(_QWORD *)&v163 & 0xFFFFFFLL));
        v169 = *((_DWORD *)this + 38076);
        if (v169 >= v168 || v169 == 0)
          v171 = v168;
        else
          v171 = v169;
        if (v160 >= v171)
          v172 = v171;
        else
          v172 = v160;
        if ((_DWORD)v172)
        {
          if (*v167 == *v161)
          {
            v173 = 0;
            v174 = v235;
            v175 = v233;
            v176 = v165 + 2 * v166 + 2;
            v177 = v161 + 1;
            while (v172 - 1 != v173)
            {
              v178 = *(unsigned __int16 *)(v176 + 2 * v173);
              v179 = v177[v173];
              ++v175;
              ++v174;
              ++v173;
              if (v178 != v179)
              {
                v180 = *(v174 - 1) + *(v175 - 1) - 1;
                goto LABEL_184;
              }
            }
            v180 = *v174 + *v175 - 1;
          }
          else
          {
            LODWORD(v173) = 0;
            v180 = -1;
LABEL_184:
            LODWORD(v172) = v173;
          }
        }
        else
        {
          v180 = -1;
        }
        v181 = v172 != v160;
        if ((_DWORD)v172 != (_DWORD)v171)
          v181 = 1;
        if (v172 >= v171)
        {
          v186 = v180;
        }
        else
        {
          v182 = v235;
          v183 = v233;
          v172 = v172;
          v184 = *v142;
          do
          {
            v185 = v183[v172];
            v186 = v185 + v182[v172];
            *(_WORD *)(v184 + 24 * v186 + 16) = v167[v172];
            if (v172)
            {
              v187 = v184 + 24 * v180;
              v190 = *(unsigned __int16 *)(v187 + 18);
              v188 = (__int16 *)(v187 + 18);
              v189 = v190;
              if (v190)
              {
                v191 = v189 + 1;
              }
              else
              {
                *(_DWORD *)(v184 + 24 * v180 + 8) = v186;
                v185 = v183[v172];
                v191 = 1;
              }
              *v188 = v191;
            }
            v183[v172++] = v185 + 1;
            v180 = v186;
          }
          while (v171 != v172);
          LODWORD(v157) = v224;
        }
        if (v162 == -1)
          v181 = 0;
        if (v181)
        {
          mrec_qsort_r<SortCwidsByWordEndScope>((char *)v158, v157, 4, (uint64_t)this);
          TreePrefilterer::checkAndAddEndingWords((uint64_t)this, v162, (uint64_t)&v223, v192, v193, v194, v195, v196);
          LODWORD(v157) = 0;
          LODWORD(v224) = 0;
        }
        if ((_DWORD)v157 == HIDWORD(v224))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v223, 1, 1);
          LODWORD(v157) = v224;
        }
        v158 = v223;
        v223[v157] = v163;
        v157 = (v224 + 1);
        LODWORD(v224) = v224 + 1;
        ++v159;
        v162 = v186;
        v160 = v171;
        v161 = v167;
      }
      while (v159 < v240);
      if (v186 != -1)
      {
        mrec_qsort_r<SortCwidsByWordEndScope>((char *)v158, v157, 4, (uint64_t)this);
        TreePrefilterer::checkAndAddEndingWords((uint64_t)this, v186, (uint64_t)&v223, v197, v198, v199, v200, v201);
        LODWORD(v224) = 0;
      }
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v223);
  v207 = *((_QWORD *)v13 + 9);
  if (*(_BYTE *)(v207 + 40))
    v208 = *((_DWORD *)v13 + 7) - 1;
  else
    v208 = 0;
  v209 = v13;
  v210 = *(_DWORD *)(v207 + 44);
  v211 = (uint64_t *)(v209 + 40);
  LexTreePathIter::LexTreePathIter((uint64_t)&v223, (uint64_t)(v209 + 40), *((_DWORD *)v209 + 8));
  v212 = -1;
  while (v228)
  {
    v213 = *(_DWORD *)(v227 + 4 * (v228 - 1)) + *(_DWORD *)(v224 + 4 * (v225 - 1));
    v214 = *v211;
    if (*(__int16 *)(*v211
                    + 24
                    * (*(_DWORD *)(v227 + 4 * (v228 - 2))
                                   + *(_DWORD *)(v224 + 4 * (v225 - 2)))
                    + 20) < 0)
      v212 = v228;
    v215 = v214 + 24 * v213;
    v218 = *(_WORD *)(v215 + 20);
    v216 = (_WORD *)(v215 + 20);
    v217 = v218;
    if ((v218 & 0x2000) != 0
      || (*(_WORD *)(v214 + 24 * v213 + 18) == 1 ? (v219 = v228 - 1 == v210) : (v219 = 1),
          !v219 ? (v220 = v228 - v212 == v208) : (v220 = 1),
          v220))
    {
      *v216 = v217 | 0x8000;
    }
    LexTreePathIter::nextStandard((uint64_t **)&v223);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v227);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v226);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v224);
  TreePrefilterer::setAllPhoneRecBestLms((uint64_t)this);
  TreePrefilterer::setupAllEffectiveLms(this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v233);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v235);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v237);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v239);
}

void sub_209A4B330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14 - 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14 - 104);
  _Unwind_Resume(a1);
}

unint64_t TreePrefilterer::setInjectCwids(uint64_t a1, uint64_t a2)
{
  return ReturnListMgr::setInjectCwids(a1 + 151552, a2);
}

unsigned int *TreePrefilterer::makePelScoreCacheData(TreePrefilterer *this)
{
  return PelScoreCache::makePelScoreCacheData(*(PelScoreCache **)(*((_QWORD *)this + 19029) + 120));
}

unint64_t TreePrefilterer::setPelScoreCacheData(TreePrefilterer *this, const PelScoreCacheData *a2)
{
  return PelScoreCache::setCacheData(*(_QWORD *)(*((_QWORD *)this + 19029) + 120), a2);
}

void TreePrefilterer::beginPrefSyncRecog(TreePrefilterer *this, uint64_t a2, int a3, uint64_t a4, const CTFTMgr *a5, const PrefiltererSearchParamSet *a6)
{
  (*(void (**)(_QWORD, uint64_t, _QWORD, const CTFTMgr *, uint64_t, uint64_t, _QWORD, double))(**((_QWORD **)this + 19029) + 40))(*((_QWORD *)this + 19029), a4, 0, a5, 1, a2, *((unsigned __int8 *)a6 + 96), *((double *)a6 + 11));
  *((_BYTE *)this + 24) = 1;
  LexTreeNetScorer::beginScorerSyncRecog((TreePrefilterer *)((char *)this + 32), a3, a6);
}

uint64_t TreePrefilterer::endPrefSyncRecog(TreePrefilterer *this)
{
  uint64_t result;

  LexTreeNetScorer::endScorerSyncRecog((TreePrefilterer *)((char *)this + 32));
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19029) + 48))(*((_QWORD *)this + 19029));
  *((_BYTE *)this + 24) = 0;
  return result;
}

uint64_t TreePrefilterer::getPhoneStringFromCWID(TreePrefilterer *this, int a2, DgnString *a3)
{
  unint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
  v13 = 0;
  v14 = 0;
  WordList::getPron(v5, a2 & 0xFFFFFF, (uint64_t)&v13);
  v6 = *((_DWORD *)this + 38076);
  v7 = v14;
  if (v6)
    v8 = v6 >= v14;
  else
    v8 = 1;
  if (v8)
  {
    *((_DWORD *)a3 + 2) = 0;
    if (!v7)
      return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v13);
  }
  else
  {
    LODWORD(v14) = *((_DWORD *)this + 38076);
    *((_DWORD *)a3 + 2) = 0;
  }
  v9 = 0;
  do
  {
    if (v9)
      DgnString::operator+=(a3, " ");
    v10 = *(_QWORD *)(**((_QWORD **)this + 19030) + 8) + 16 * *(unsigned __int16 *)(v13 + 2 * v9);
    if (*(_DWORD *)(v10 + 8))
      v11 = *(char **)v10;
    else
      v11 = &byte_209A88803;
    DgnString::operator+=(a3, v11);
    ++v9;
  }
  while (v9 < v14);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v13);
}

void sub_209A4B5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TreePrefilterer::checkAndAddEndingWords(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int16 v18;
  uint64_t v19;
  int IndexForCwid;
  int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned __int16 v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v11 = *(_DWORD *)(a3 + 8);
  if (v11 >= 0x400)
  {
    v12 = *(_DWORD *)(*(_QWORD *)a3 + 4 * (v11 - 1));
    DgnString::DgnString((DgnString *)&v28);
    TreePrefilterer::getPhoneStringFromCWID((TreePrefilterer *)a1, v12, (DgnString *)&v28);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 918, (uint64_t)"prefilt/treepref", 3, (uint64_t)"%u %.500s 0x%08x %.500s %u", v13, v14, *(_DWORD *)(a3 + 8));
    DgnString::~DgnString((DgnString *)&v28);
    v11 = *(_DWORD *)(a3 + 8);
  }
  v15 = (_QWORD *)(a1 + 152264);
  v16 = *(_DWORD *)(a1 + 152288);
  if (v16 >= 0x400000)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/treepref.cpp", 929, (uint64_t)"prefilt/treepref", 4, (uint64_t)"%u 0x%08x %.500s %u", a7, a8, v16);
    v11 = *(_DWORD *)(a3 + 8);
  }
  if (v11 == 1)
  {
    v17 = **(_DWORD **)a3;
    v18 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 272) + 2 * (*(_QWORD *)&v17 & 0xFFFFFFLL));
    v19 = *v15 + 24 * a2;
    IndexForCwid = getIndexForCwid(*(unsigned __int16 *)(a1 + 8), v17);
    TreePhoneRec::setSingleEndingWord(v19, IndexForCwid, v18);
  }
  else
  {
    v21 = *(_DWORD *)(a1 + 152288);
    if (v11)
    {
      v22 = 0;
      do
      {
        v23 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v22);
        v24 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 272) + 2 * (*(_QWORD *)&v23 & 0xFFFFFFLL));
        v25 = getIndexForCwid(*(unsigned __int16 *)(a1 + 8), v23);
        v26 = *(unsigned int *)(a1 + 152288);
        if (v26 == *(_DWORD *)(a1 + 152292))
        {
          DgnPrimArray<unsigned int>::reallocElts(a1 + 152280, 1, 1);
          v26 = *(unsigned int *)(a1 + 152288);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 152280) + 4 * v26) = v25 & 0x3FFFFF | (v24 << 22);
        ++*(_DWORD *)(a1 + 152288);
        ++v22;
      }
      while (v22 < *(unsigned int *)(a3 + 8));
    }
    TreePhoneRec::setMultipleEndingWords(*v15 + 24 * a2, v21, v11);
  }
  if (*(_DWORD *)(a3 + 8))
  {
    v27 = 0;
    do
    {
      ReturnListMgr::setEffectiveLmForCwid((ReturnListMgr *)(a1 + 151552), *(_DWORD *)(*(_QWORD *)a3 + 4 * v27), *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 272) + 2 * (*(_DWORD *)(*(_QWORD *)a3 + 4 * v27) & 0xFFFFFF)));
      ++v27;
    }
    while (v27 < *(unsigned int *)(a3 + 8));
  }
}

void sub_209A4B874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t TreePrefilterer::setAllPhoneRecBestLms(uint64_t this)
{
  int v1;
  unsigned int v2;
  TreePrefilterer *v3;
  _WORD *v4;

  v1 = *(_DWORD *)(this + 152272);
  v2 = v1 - 1;
  if (v1 != 1)
  {
    v3 = (TreePrefilterer *)this;
    v4 = (_WORD *)(*(_QWORD *)(this + 152264) + 24 * v2 + 20);
    do
    {
      this = TreePrefilterer::calcBestLm(v3, v2);
      *v4 = *v4 & 0xE000 | this;
      v4 -= 12;
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t TreePrefilterer::calcBestLm(TreePrefilterer *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;

  v2 = *((_QWORD *)this + 19033);
  if ((*(_WORD *)(v2 + 24 * a2 + 20) & 0x2000) != 0)
  {
    v4 = (_DWORD *)(v2 + 24 * a2 + 4);
    if ((*(_WORD *)(v2 + 24 * a2 + 20) & 0x4000) == 0)
      v4 = (_DWORD *)(*((_QWORD *)this + 19035) + 4 * (*v4 & 0x3FFFFF));
    result = *v4 >> 22;
  }
  else
  {
    result = 0x7FFFFFFFLL;
  }
  v5 = *(unsigned __int16 *)(v2 + 24 * a2 + 18);
  if (*(_WORD *)(v2 + 24 * a2 + 18))
  {
    v6 = *(_DWORD *)(v2 + 24 * a2 + 8);
    do
    {
      if ((int)result >= (*(_WORD *)(v2 + 24 * v6 + 20) & 0x1FFF))
        result = *(_WORD *)(v2 + 24 * v6 + 20) & 0x1FFF;
      else
        result = result;
      ++v6;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t TreePrefilterer::computePicModelIds(TreePrefilterer *this, StateMgr **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t CollWords;
  unint64_t v14;
  unint64_t v15;
  StateMgr *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int i;
  int v22;
  uint64_t v23;
  StateMgr *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];

  v5 = (char *)this + 152240;
  Voc::clearPrefPicModels((Voc *)a2);
  v6 = *((_QWORD *)v5 + 7);
  v7 = *(_DWORD *)(v6 + 144);
  v8 = *(_DWORD *)(v6 + 148);
  CollWords = StateMgr::getCollWords(a2[7], a3, 0xFFFFu, 1, v9, v10, v11, v12);
  v32[0] = 0;
  v32[1] = 0;
  v30 = 0;
  v31 = 0;
  v14 = *(unsigned int *)(CollWords + 8);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = a2[6];
    v17 = (uint64_t *)((char *)v16 + 88);
    v25 = v16;
    v26 = CollWords;
    do
    {
      v18 = *(unsigned int *)(*(_QWORD *)CollWords + 4 * v15);
      if (*(_WORD *)(*((_QWORD *)v16 + 4) + 2 * v18))
      {
        v29 = 0;
        v28 = 0;
        Voc::getPrefPron((uint64_t)a2, v18, (const unsigned __int16 **)&v29, &v28);
        v27 = v18;
        v19 = *(_DWORD *)(*((_QWORD *)v16 + 6) + 4 * v18);
        LODWORD(v31) = 0;
        v20 = v28;
        if (v28)
        {
          for (i = 0; i < v28; ++i)
          {
            PicMgr::getPrefContextPelIdAndDurIds(*(_QWORD **)v5, v7, v8, v17, v19, (uint64_t)v29, v20, i, (uint64_t)v32);
            v22 = Voc::findOrAddPrefPicModel((uint64_t)a2, (unsigned int *)v32);
            v23 = v31;
            if (v31 == (unint64_t)HIDWORD(v31))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v30, 1, 1);
              v23 = v31;
            }
            *(_DWORD *)(v30 + 4 * v23) = v22;
            LODWORD(v31) = v31 + 1;
            v20 = v28;
          }
        }
        Voc::addPrefPicModelIdPron((unint64_t)a2, v27, &v30);
        v16 = v25;
        CollWords = v26;
        v14 = *(unsigned int *)(v26 + 8);
      }
      ++v15;
    }
    while (v15 < v14);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v30);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)v32);
}

void sub_209A4BB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

char *mrec_qsort_r<SortCwidsByWordEndScope>(char *result, unint64_t a2, int64_t a3, uint64_t a4)
{
  int64_t v6;
  _BOOL4 v7;
  BOOL v8;
  int v9;
  char *v10;
  char *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  int v43;
  char *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  int v54;
  unsigned int v56;
  int v57;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v74;
  BOOL v75;
  int v76;
  unsigned int v78;
  int v79;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  int64_t v85;
  char *v86;
  char v87;
  uint64_t v89;
  int v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  int64_t v119;
  unint64_t v120;
  char *v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char v127;
  int64_t v128;
  int64_t v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  int64_t v133;
  char v134;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  _DWORD *v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;

  v6 = -a3;
  v7 = a3 != 8;
  v8 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0)
    v9 = 2;
  else
    v9 = a3 != 8;
  if (a2 < 7)
  {
LABEL_5:
    if ((uint64_t)(a2 * a3) > a3)
    {
      v10 = &result[a2 * a3];
      v11 = &result[a3];
      v12 = result;
      do
      {
        if (v11 > result)
        {
          v13 = v12;
          v14 = v11;
          do
          {
            v15 = v14;
            v14 = (_DWORD *)((char *)v14 + v6);
            v16 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 272);
            v17 = *(__int16 *)(v16 + 2 * (*v14 & 0xFFFFFF));
            v18 = *(__int16 *)(v16 + 2 * (*v15 & 0xFFFFFF));
            if (v17 < v18)
              break;
            if (*v14 <= *v15 && v17 <= v18)
              break;
            if (v9)
            {
              v20 = 0;
              v21 = (uint64_t)v13 + a3;
              if (v8)
              {
                do
                {
                  v22 = *(_QWORD *)(v21 + 8 * v20);
                  *(_QWORD *)(v21 + 8 * v20) = *(_QWORD *)&v13[2 * v20];
                  *(_QWORD *)&v13[2 * v20++] = v22;
                }
                while ((unint64_t)a3 >> 3 != v20);
              }
              else
              {
                do
                {
                  v23 = *(_BYTE *)(v21 + v20);
                  *(_BYTE *)(v21 + v20) = *((_BYTE *)v13 + v20);
                  *((_BYTE *)v13 + v20++) = v23;
                }
                while (a3 != v20);
              }
            }
            else
            {
              v24 = *(_QWORD *)v15;
              *(_QWORD *)v15 = *(_QWORD *)v14;
              *(_QWORD *)v14 = v24;
            }
            v13 = (_DWORD *)((char *)v13 + v6);
          }
          while (v14 > (_DWORD *)result);
        }
        v11 += a3;
        v12 = (_DWORD *)((char *)v12 + a3);
      }
      while (v11 < v10);
    }
    return result;
  }
  v25 = (unint64_t)a3 >> 3;
  while (2)
  {
    v26 = &result[(a2 >> 1) * a3];
    if (a2 == 7)
      goto LABEL_133;
    v27 = &result[(a2 - 1) * a3];
    v28 = *(_QWORD *)(a4 + 16);
    if (a2 <= 0x28)
    {
      v34 = *(_QWORD *)(v28 + 272);
      v30 = result;
    }
    else
    {
      v29 = (a2 >> 3) * a3;
      v30 = &result[v29];
      v31 = &result[2 * v29];
      v32 = *(_DWORD *)result;
      v33 = *(_DWORD *)&result[v29];
      v34 = *(_QWORD *)(v28 + 272);
      v35 = *(__int16 *)(v34 + 2 * (*(_DWORD *)result & 0xFFFFFF));
      v36 = *(__int16 *)(v34 + 2 * (*(_QWORD *)&v33 & 0xFFFFFFLL));
      if (v35 < v36 || (v32 < v33 ? (v37 = v35 <= v36) : (v37 = 0), v37))
      {
        v42 = *(_DWORD *)v31;
        v43 = *(__int16 *)(v34 + 2 * (*(_DWORD *)v31 & 0xFFFFFF));
        if (v36 >= v43 && (v33 >= v42 || v36 > v43))
        {
          v30 = &result[2 * v29];
          if (v35 >= v43)
          {
            if (v35 > v43 || v32 >= v42)
              v30 = result;
            else
              v30 = &result[2 * v29];
          }
        }
      }
      else
      {
        v38 = *(_DWORD *)v31;
        v39 = *(__int16 *)(v34 + 2 * (*(_DWORD *)v31 & 0xFFFFFF));
        if (v36 < v39 || (v33 <= v38 ? (v40 = v36 <= v39) : (v40 = 0), v40))
        {
          v30 = result;
          if (v35 >= v39)
          {
            v41 = v35 > v39 || v32 >= v38;
            if (v41)
              v30 = &result[2 * v29];
            else
              v30 = result;
          }
        }
      }
      v46 = &v26[-v29];
      v47 = (unsigned int *)&v26[v29];
      v48 = *(_DWORD *)&v26[-v29];
      v49 = *(_DWORD *)v26;
      v50 = *(__int16 *)(v34 + 2 * (*(_QWORD *)&v48 & 0xFFFFFFLL));
      v51 = *(__int16 *)(v34 + 2 * (*(_DWORD *)v26 & 0xFFFFFF));
      if (v50 < v51 || (v48 < v49 ? (v52 = v50 <= v51) : (v52 = 0), v52))
      {
        v56 = *v47;
        v57 = *(__int16 *)(v34 + 2 * (*v47 & 0xFFFFFF));
        if (v51 >= v57 && (v49 >= v56 || v51 > v57))
        {
          v26 += v29;
          if (v50 >= v57)
          {
            if (v50 > v57 || v48 >= v56)
              v26 = v46;
            else
              v26 = (char *)v47;
          }
        }
      }
      else
      {
        v53 = *v47;
        v54 = *(__int16 *)(v34 + 2 * (*v47 & 0xFFFFFF));
        if (v51 < v54 || v49 <= v53 && v51 <= v54)
        {
          v26 -= v29;
          if (v50 >= v54)
          {
            if (v50 > v54 || v48 >= v53)
              v26 = (char *)v47;
            else
              v26 = v46;
          }
        }
      }
      v60 = (unsigned int *)&v27[-2 * v29];
      v61 = (unsigned int *)&v27[-v29];
      v62 = *v60;
      v63 = *v61;
      v64 = *(__int16 *)(v34 + 2 * (*v60 & 0xFFFFFF));
      v65 = *(__int16 *)(v34 + 2 * (*v61 & 0xFFFFFF));
      if (v64 >= v65 && (v62 >= v63 || v64 > v65))
      {
        v78 = *(_DWORD *)v27;
        v79 = *(__int16 *)(v34 + 2 * (*(_DWORD *)v27 & 0xFFFFFF));
        if (v65 < v79 || v63 <= v78 && v65 <= v79)
        {
          if (v64 >= v79)
          {
            if (v64 <= v79 && v62 < v78)
              v27 = (char *)v60;
          }
          else
          {
            v27 = (char *)v60;
          }
          goto LABEL_92;
        }
      }
      else
      {
        v66 = *(_DWORD *)v27;
        v67 = *(__int16 *)(v34 + 2 * (*(_DWORD *)v27 & 0xFFFFFF));
        if (v65 >= v67 && (v63 >= v66 || v65 > v67))
        {
          if (v64 >= v67 && (v64 > v67 || v62 >= v66))
            v27 = (char *)v60;
          goto LABEL_92;
        }
      }
      v27 = (char *)v61;
    }
LABEL_92:
    v68 = *(_DWORD *)v30;
    v69 = *(_DWORD *)v26;
    v70 = *(__int16 *)(v34 + 2 * (*(_DWORD *)v30 & 0xFFFFFF));
    v71 = *(__int16 *)(v34 + 2 * (*(_DWORD *)v26 & 0xFFFFFF));
    if (v70 < v71)
    {
      v72 = *(_DWORD *)v27;
      goto LABEL_107;
    }
    v72 = *(_DWORD *)v27;
    if (v68 < v69 && v70 <= v71)
    {
LABEL_107:
      v76 = *(__int16 *)(v34 + 2 * (v72 & 0xFFFFFF));
      if (v71 >= v76 && (v69 >= v72 || v71 > v76))
      {
        if (v70 >= v76)
        {
          if (v70 > v76 || v68 >= v72)
            v26 = v30;
          else
            v26 = v27;
          if (!v9)
            goto LABEL_148;
        }
        else
        {
          v26 = v27;
          if (!v9)
            goto LABEL_148;
        }
LABEL_134:
        if (v8)
        {
          v82 = result;
          v83 = (unint64_t)a3 >> 3;
          do
          {
            v84 = *(_QWORD *)v82;
            *(_QWORD *)v82 = *(_QWORD *)v26;
            v82 += 8;
            *(_QWORD *)v26 = v84;
            v26 += 8;
            --v83;
          }
          while (v83);
        }
        else
        {
          v85 = a3;
          v86 = result;
          do
          {
            v87 = *v86;
            *v86++ = *v26;
            *v26++ = v87;
            --v85;
          }
          while (v85);
        }
        goto LABEL_149;
      }
      goto LABEL_133;
    }
    v74 = *(__int16 *)(v34 + 2 * (*(_QWORD *)&v72 & 0xFFFFFFLL));
    if (v71 < v74 || (v69 <= v72 ? (v75 = v71 <= v74) : (v75 = 0), v75))
    {
      if (v70 < v74)
      {
        v26 = v30;
        if (v9)
          goto LABEL_134;
        goto LABEL_148;
      }
      if (v70 > v74 || v68 >= v72)
        v26 = v27;
      else
        v26 = v30;
    }
LABEL_133:
    if (v9)
      goto LABEL_134;
LABEL_148:
    v89 = *(_QWORD *)result;
    *(_QWORD *)result = *(_QWORD *)v26;
    *(_QWORD *)v26 = v89;
LABEL_149:
    v90 = 0;
    v91 = &result[a3];
    v92 = &result[(a2 - 1) * a3];
    v93 = v92;
    v94 = &result[a3];
    v95 = &result[a3];
    while (1)
    {
LABEL_150:
      if (v94 > v93)
        goto LABEL_171;
      v96 = *(_DWORD *)v94;
      v97 = *(_DWORD *)result;
      v98 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 272);
      v99 = *(__int16 *)(v98 + 2 * (*(_DWORD *)v94 & 0xFFFFFF));
      v100 = *(__int16 *)(v98 + 2 * (*(_DWORD *)result & 0xFFFFFF));
      if (v99 >= v100)
      {
        if (v99 > v100)
          goto LABEL_171;
        if (v96 >= v97)
          break;
      }
LABEL_183:
      v94 += a3;
    }
    if (v96 <= v97)
    {
      if (v9)
      {
        v101 = 0;
        if (v8)
        {
          do
          {
            v102 = *(_QWORD *)&v95[8 * v101];
            *(_QWORD *)&v95[8 * v101] = *(_QWORD *)&v94[8 * v101];
            *(_QWORD *)&v94[8 * v101++] = v102;
          }
          while (v25 != v101);
        }
        else
        {
          do
          {
            v103 = v95[v101];
            v95[v101] = v94[v101];
            v94[v101++] = v103;
          }
          while (a3 != v101);
        }
      }
      else
      {
        v116 = *(_QWORD *)v95;
        *(_QWORD *)v95 = *(_QWORD *)v94;
        *(_QWORD *)v94 = v116;
      }
      v95 += a3;
      v90 = 1;
      goto LABEL_183;
    }
LABEL_171:
    while (v94 <= v93)
    {
      v108 = *(_DWORD *)v93;
      v109 = *(_DWORD *)result;
      v110 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 272);
      v111 = *(__int16 *)(v110 + 2 * (*(_DWORD *)v93 & 0xFFFFFF));
      v112 = *(__int16 *)(v110 + 2 * (*(_DWORD *)result & 0xFFFFFF));
      if (v111 < v112)
        goto LABEL_175;
      if (v111 <= v112)
      {
        if (v108 < v109)
        {
LABEL_175:
          if (v9)
          {
            v113 = 0;
            if (v8)
            {
              do
              {
                v114 = *(_QWORD *)&v94[8 * v113];
                *(_QWORD *)&v94[8 * v113] = *(_QWORD *)&v93[8 * v113];
                *(_QWORD *)&v93[8 * v113++] = v114;
              }
              while (v25 != v113);
            }
            else
            {
              do
              {
                v115 = v94[v113];
                v94[v113] = v93[v113];
                v93[v113++] = v115;
              }
              while (a3 != v113);
            }
          }
          else
          {
            v117 = *(_QWORD *)v94;
            *(_QWORD *)v94 = *(_QWORD *)v93;
            *(_QWORD *)v93 = v117;
          }
          v94 += a3;
          v93 += v6;
          v90 = 1;
          goto LABEL_150;
        }
        if (v108 <= v109)
        {
          if (v9)
          {
            v104 = 0;
            if (v8)
            {
              do
              {
                v105 = *(_QWORD *)&v93[8 * v104];
                *(_QWORD *)&v93[8 * v104] = *(_QWORD *)&v92[8 * v104];
                *(_QWORD *)&v92[8 * v104++] = v105;
              }
              while (v25 != v104);
            }
            else
            {
              do
              {
                v106 = v93[v104];
                v93[v104] = v92[v104];
                v92[v104++] = v106;
              }
              while (a3 != v104);
            }
          }
          else
          {
            v107 = *(_QWORD *)v93;
            *(_QWORD *)v93 = *(_QWORD *)v92;
            *(_QWORD *)v92 = v107;
          }
          v92 += v6;
          v90 = 1;
        }
      }
      v93 += v6;
    }
    v118 = &result[a2 * a3];
    if (v90)
    {
      v119 = v94 - v95;
      if (v95 - result >= v94 - v95)
        v120 = v94 - v95;
      else
        v120 = v95 - result;
      if (v120)
      {
        if (v8)
        {
          v121 = &v94[-v120];
          v122 = v120 >> 3;
          v123 = result;
          do
          {
            v124 = *(_QWORD *)v123;
            *(_QWORD *)v123 = *(_QWORD *)v121;
            v123 += 8;
            *(_QWORD *)v121 = v124;
            v121 += 8;
            --v122;
          }
          while (v122);
        }
        else
        {
          v125 = -(uint64_t)v120;
          v126 = result;
          do
          {
            v127 = *v126;
            *v126++ = v94[v125];
            v94[v125] = v127;
            v41 = __CFADD__(v125++, 1);
          }
          while (!v41);
        }
      }
      v128 = v92 - v93;
      v129 = v118 - &v92[a3];
      if (v92 - v93 < v129)
        v129 = v92 - v93;
      if (v129)
      {
        if (v8)
        {
          v130 = &v118[-v129];
          v131 = (unint64_t)v129 >> 3;
          do
          {
            v132 = *(_QWORD *)v94;
            *(_QWORD *)v94 = *(_QWORD *)v130;
            v94 += 8;
            *(_QWORD *)v130 = v132;
            v130 += 8;
            --v131;
          }
          while (v131);
        }
        else
        {
          v133 = -v129;
          do
          {
            v134 = *v94;
            *v94++ = v118[v133];
            v118[v133] = v134;
            v41 = __CFADD__(v133++, 1);
          }
          while (!v41);
        }
      }
      if (v119 > a3)
        result = (char *)mrec_qsort_r<SortCwidsByWordEndScope>();
      if (v128 > a3)
      {
        result = &v118[-v128];
        a2 = v128 / (unint64_t)a3;
        v8 = ((((_BYTE)v118 - v128) | a3) & 7) == 0;
        if (((((_BYTE)v118 - v128) | a3) & 7) != 0)
          v9 = 2;
        else
          v9 = v7;
        if (a2 < 7)
          goto LABEL_5;
        continue;
      }
    }
    else if ((uint64_t)(a2 * a3) > a3)
    {
      v136 = result;
      do
      {
        if (v91 > result)
        {
          v137 = v136;
          v138 = v91;
          do
          {
            v139 = v138;
            v138 = (_DWORD *)((char *)v138 + v6);
            v140 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 272);
            v141 = *(__int16 *)(v140 + 2 * (*v138 & 0xFFFFFF));
            v142 = *(__int16 *)(v140 + 2 * (*v139 & 0xFFFFFF));
            if (v141 < v142)
              break;
            if (*v138 <= *v139 && v141 <= v142)
              break;
            if (v9)
            {
              v144 = 0;
              v145 = (uint64_t)v137 + a3;
              if (v8)
              {
                do
                {
                  v146 = *(_QWORD *)(v145 + 8 * v144);
                  *(_QWORD *)(v145 + 8 * v144) = *(_QWORD *)&v137[2 * v144];
                  *(_QWORD *)&v137[2 * v144++] = v146;
                }
                while (v25 != v144);
              }
              else
              {
                do
                {
                  v147 = *(_BYTE *)(v145 + v144);
                  *(_BYTE *)(v145 + v144) = *((_BYTE *)v137 + v144);
                  *((_BYTE *)v137 + v144++) = v147;
                }
                while (a3 != v144);
              }
            }
            else
            {
              v148 = *(_QWORD *)v139;
              *(_QWORD *)v139 = *(_QWORD *)v138;
              *(_QWORD *)v138 = v148;
            }
            v137 = (_DWORD *)((char *)v137 + v6);
          }
          while (v138 > (_DWORD *)result);
        }
        v91 += a3;
        v136 = (_DWORD *)((char *)v136 + a3);
      }
      while (v91 < v118);
    }
    return result;
  }
}

unint64_t LexTreePathIter::nextStandard(uint64_t **this)
{
  unint64_t result;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  int v19;

  v4 = this[1];
  result = (unint64_t)(this + 1);
  v3 = v4;
  v5 = *((_DWORD *)this + 4);
  v6 = v5 - 1;
  v7 = this[5];
  v8 = *((_DWORD *)this + 12);
  v9 = *((_DWORD *)v7 + (v8 - 1)) + *((_DWORD *)v4 + v5 - 1);
  v10 = **this;
  v11 = v10 + 24 * v9;
  v12 = *(unsigned __int16 *)(v11 + 18);
  if (*(_WORD *)(v11 + 18))
  {
    v13 = *(_DWORD *)(v10 + 24 * v9 + 8);
    if (v5 == *((_DWORD *)this + 5))
    {
      result = DgnPrimArray<unsigned int>::reallocElts(result, 1, 1);
      v5 = *((_DWORD *)this + 4);
      v3 = this[1];
      v12 = *(unsigned __int16 *)(**this + 24 * v9 + 18);
    }
    *((_DWORD *)v3 + v5) = v13;
    ++*((_DWORD *)this + 4);
    v14 = *((_DWORD *)this + 8);
    if (v14 == *((_DWORD *)this + 9))
    {
      result = DgnPrimArray<unsigned int>::reallocElts((uint64_t)(this + 3), 1, 1);
      v14 = *((_DWORD *)this + 8);
    }
    *((_DWORD *)this[3] + v14) = v12;
    ++*((_DWORD *)this + 8);
    v15 = *((_DWORD *)this + 12);
    if (v15 == *((_DWORD *)this + 13))
    {
      result = DgnPrimArray<unsigned int>::reallocElts((uint64_t)(this + 5), 1, 1);
      v15 = *((_DWORD *)this + 12);
    }
    *((_DWORD *)this[5] + v15) = 0;
    ++*((_DWORD *)this + 12);
  }
  else if (v8)
  {
    v16 = 0;
    v17 = 0;
    v18 = this[3];
    v19 = *((_DWORD *)this + 8) - 1;
    while (1)
    {
      result = *((unsigned int *)v18 + (v19 + v17));
      if (*((_DWORD *)v7 + (v8 + v17 - 1)) + 1 != (_DWORD)result)
        break;
      result = v6 + v17;
      *((_DWORD *)this + 4) = result;
      *((_DWORD *)this + 8) = v19 + v17;
      *((_DWORD *)this + 12) = v8 - 1 + v17--;
      if (v8 == (_DWORD)++v16)
        return result;
    }
    ++*((_DWORD *)v7 + (v8 + v17 - 1));
  }
  return result;
}

void LexTreePathIter::~LexTreePathIter(LexTreePathIter *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8);
}

uint64_t TreePrefilterer::setupAllEffectiveLms(TreePrefilterer *this)
{
  _QWORD *v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  __int16 v7;
  __int16 v8;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v16, 1, 1);
  *(_DWORD *)(v16 + 4 * v17) = 0;
  LODWORD(v17) = v17 + 1;
  v2 = (_QWORD *)((char *)this + 152264);
  LexTreePathIter::LexTreePathIter((uint64_t)&v10, (uint64_t)this + 152264, *((_DWORD *)this + 38064));
  while (v15)
  {
    v3 = *(_DWORD *)(v11 + 4 * (v12 - 1));
    v4 = *(_DWORD *)(v14 + 4 * (v15 - 1));
    v5 = v17;
    if (v17 > v15 - 1)
    {
      LODWORD(v17) = v15 - 1;
      v5 = v15 - 1;
    }
    v6 = v4 + v3;
    v7 = *(_WORD *)(*v2 + 24 * (v4 + v3) + 20);
    v8 = v7;
    if (v5 == HIDWORD(v17))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v16, 1, 1);
      v5 = v17;
      v8 = *(_WORD *)(*v2 + 24 * v6 + 20);
    }
    *(_DWORD *)(v16 + 4 * v5) = v7 & 0x1FFF;
    LODWORD(v17) = v17 + 1;
    if ((v8 & 0x2000) != 0)
      TreePrefilterer::setupEffectiveLms(this, v6, v7 & 0x1FFF);
    LexTreePathIter::nextStandard(&v10);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v14);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v13);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v11);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v16);
}

void sub_209A4C6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void TreePrefilterer::setupEffectiveLms(TreePrefilterer *this, unsigned int a2, int a3)
{
  int v5;
  uint64_t v6;
  __int16 v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int CwidForIndex;
  int v16;
  unsigned int v17;

  if (*(_DWORD *)(*((_QWORD *)this + 19037) + 76) == -1)
    v5 = 20000;
  else
    v5 = *(_DWORD *)(*((_QWORD *)this + 19037) + 76);
  v17 = 0;
  v6 = *((_QWORD *)this + 19033) + 24 * a2;
  v7 = *(_WORD *)(v6 + 20);
  v8 = *(_DWORD *)(v6 + 4);
  if ((v7 & 0x4000) != 0)
  {
    v17 = v8;
    v11 = &v17;
    v10 = 1;
  }
  else
  {
    if (v8 < 0x400000)
      return;
    v9 = *(_QWORD *)&v8 & 0x3FFFFFLL;
    v10 = v8 >> 22;
    v11 = (unsigned int *)(*((_QWORD *)this + 19035) + 4 * v9);
  }
  v12 = v10;
  do
  {
    v13 = *v11++;
    v14 = v13 >> 22;
    CwidForIndex = getCwidForIndex(*((unsigned __int16 *)this + 4), v13 & 0x3FFFFF);
    ReturnListMgr::setEffectiveLmForCwid((TreePrefilterer *)((char *)this + 151552), CwidForIndex, v13 >> 22);
    v16 = (v13 >> 22) - a3;
    if (v16 > v5)
      ReturnListMgr::setEffectiveLmForCwid((TreePrefilterer *)((char *)this + 151552), CwidForIndex, v14 + v5 - v16);
    --v12;
  }
  while (v12);
}

uint64_t LexTreePathIter::LexTreePathIter(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = a1 + 40;
  *(_QWORD *)a1 = a2;
  DgnPrimArray<unsigned int>::reallocElts(a1 + 8, 1, 1);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * (*(_DWORD *)(a1 + 16))++) = a3;
  v7 = *(_DWORD *)(a1 + 32);
  if (v7 == *(_DWORD *)(a1 + 36))
  {
    DgnPrimArray<unsigned int>::reallocElts(v5, 1, 1);
    v7 = *(_DWORD *)(a1 + 32);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v7) = 1;
  ++*(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 48);
  if (v8 == *(_DWORD *)(a1 + 52))
  {
    DgnPrimArray<unsigned int>::reallocElts(v6, 1, 1);
    v8 = *(_DWORD *)(a1 + 48);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v8) = 0;
  ++*(_DWORD *)(a1 + 48);
  LexTreePathIter::nextStandard((uint64_t **)a1);
  return a1;
}

void sub_209A4C8D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

uint64_t TreePrefilterer::getPrefiltererBuildParamSet(TreePrefilterer *this)
{
  return *((_QWORD *)this + 19037);
}

uint64_t TreePrefilterer::isScoring(TreePrefilterer *this)
{
  return 0;
}

uint64_t TreePrefilterer::maybeStartScoring()
{
  return 0;
}

uint64_t TreePrefilterer::maybeStopScoring(TreePrefilterer *this, BOOL a2, ReturnListQueue *a3)
{
  return 0;
}

uint64_t TreePrefilterer::isInUseByRecog(TreePrefilterer *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t TreePrefilterer::getPelScorer(TreePrefilterer *this)
{
  return *((_QWORD *)this + 19029);
}

uint64_t Prefilterer::getThreadId(Prefilterer *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t TreePrefilterer::getWordToScoreAndDurationHash(TreePrefilterer *this)
{
  return (uint64_t)this + 151608;
}

uint64_t TreePrefilterer::getEffectiveLms(TreePrefilterer *this)
{
  return (uint64_t)this + 151560;
}

_QWORD *Latch<MemChunkRegion,LatchAdapter>::Latch(_QWORD *a1, uint64_t a2, int a3)
{
  void **v5;
  void *v6;
  const void *v7;
  pthread_key_t v8;

  *a1 = 0;
  if (!a3)
    return a1;
  *a1 = a2;
  if (MemChunkRegion::smTlsID == -1)
  {
    v6 = &gGlobalMemChunkRegion;
  }
  else
  {
    v5 = (void **)pthread_getspecific(MemChunkRegion::smTlsID);
    if (v5)
    {
      v6 = *v5;
      if (*v5)
        goto LABEL_8;
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
    }
    v6 = &gGlobalMemChunkRegion;
  }
LABEL_8:
  if (v6 != (void *)a2 && (a2 || v6 != &gGlobalMemChunkRegion))
  {
    if (!a2 || (_UNKNOWN *)a2 == &gGlobalMemChunkRegion)
    {
      v8 = MemChunkRegion::smTlsID;
      v7 = 0;
    }
    else
    {
      v7 = (const void *)(a2 + 1288);
      *(_QWORD *)(a2 + 1288) = a2;
      v8 = MemChunkRegion::smTlsID;
    }
    pthread_setspecific(v8, v7);
  }
  *a1 = v6;
  return a1;
}

void MrecInitModule_hashbase_mrecutil(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugShowHashStatsOnDestruction)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowHashStatsOnDestruction", &byte_209A88803, &byte_209A88803, 0, SetShadowDebugShowHashStatsOnDestruction, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowHashStatsOnDestruction = (uint64_t)v1;
    gShadowDebugShowHashStatsOnDestruction = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowHashStatsOnDestruction);
  }
}

void HashBase::HashBase(HashBase *this, const char *a2)
{
  *(_QWORD *)this = off_24C219668;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 13) = 0;
}

uint64_t DgnPool::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  _BOOL4 v5;
  _DWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t active;
  int v10;
  uint64_t result;
  int v12;

  v4 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 16;
  v5 = a2 != 3;
  v6 = (_DWORD *)(a1 + 4);
  v7 = (_QWORD *)(a1 + 8);
  if (a2 == 3)
    v8 = 0;
  else
    v8 = v4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    active = sizeObject<ActiveWord *>(a1 + 16, a2);
    v8 += active + sizeObject<unsigned int>(a1 + 32, a2);
    if (!gShadowDiagnosticShowIdealizedObjectSizes)
      v6 = (_DWORD *)a1;
  }
  v10 = 1;
  do
  {
    v7 = (_QWORD *)*v7;
    --v10;
  }
  while (v7);
  result = v8 + 4 * v5;
  if ((a2 & 0xFFFFFFFD) != 0)
  {
    if (a2 != 1)
      return result;
    v12 = *(_DWORD *)(a1 + 48) + v10;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 48);
  }
  result += (v12 * *v6);
  return result;
}

void HashProbeBase::HashProbeBase(HashProbeBase *this, const char *a2)
{
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
}

void SetShadowDebugShowHashStatsOnDestruction(void)
{
  gShadowDebugShowHashStatsOnDestruction = *(_BYTE *)(gParDebugShowHashStatsOnDestruction + 41);
}

uint64_t StartupPronGuessParamSpecMgr(void)
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;

  v0 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v0, (uint64_t)"PronGuessLMPerBackoffWordPenalty", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPronGuessLMPerBackoffWordPenaltyIntHistory);
  v1 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v1, (uint64_t)"PronGuessFragmentSuffixTag", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPronGuessFragmentSuffixTagStringHistory);
  v2 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v2, (uint64_t)"PronGuessMinNewPronLength", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPronGuessMinNewPronLengthIntHistory);
  ParamSpecMgr::addParam(qword_253DF2860, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_253DF2860, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_253DF2860, (ParamSpec *)v2);
  return ParamSpecMgr::sortParams((ParamSpecMgr *)qword_253DF2860);
}

_DWORD *PronGuessParamSet::PronGuessParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(_QWORD *)a1 = &off_24C215CC8;
  DgnString::DgnString((DgnString *)(a1 + 10));
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
  return a1;
}

void sub_209A4CD30(_Unwind_Exception *a1)
{
  DgnString *v1;
  _QWORD *v2;
  DgnString *v3;
  uint64_t v4;

  DgnString::~DgnString(v3);
  *v2 = v4 + 16;
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t PronGuessParamSet::PronGuessParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)a1 = &off_24C215CC8;
  DgnString::DgnString((DgnString *)(a1 + 40));
  DgnString::operator=((DgnString *)(a1 + 40), (DgnString *)(a2 + 40));
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

void sub_209A4CDFC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  DgnString *v2;
  DgnString *v3;
  uint64_t v4;

  DgnString::~DgnString(v3);
  *v1 = v4 + 16;
  DgnString::~DgnString(v2);
  _Unwind_Resume(a1);
}

uint64_t PronGuessParamSet::setDefaults(PronGuessParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *Default_string;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  Default_string = (char *)ParamSpecMgr::ParamGetDefault_string((ParamSpecMgr *)qword_253DF2860, 1, 0, 0, a5, a6, a7, a8);
  DgnString::operator=((PronGuessParamSet *)((char *)this + 40), Default_string);
  *((_DWORD *)this + 14) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2860, 2, 0, 0, v10, v11, v12, v13);
  result = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2860, 3, 0, 0, v14, v15, v16, v17);
  *((_DWORD *)this + 15) = result;
  return result;
}

uint64_t PronGuessParamSet::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = sizeObject(a1 + 8) + 16 * (a2 != 3);
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v4 += 8 * (a2 != 3) + sizeObject(a1 + 40);
  return v4;
}

void PronGuessParamSet::setParamSetPronGuessFragmentSuffixTag(PronGuessParamSet *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 9))
    throwParamSetSetFailed("PronGuessFragmentSuffixTag", "string", a3, a4, a5, a6, a7, a8);
  else
    DgnString::operator=((PronGuessParamSet *)((char *)this + 40), a2);
}

uint64_t PronGuessParamSet::getBoolParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 3:
      v8 = "int";
      v9 = 3;
      break;
    case 2:
      v8 = "int";
      v9 = 2;
      break;
    case 1:
      v8 = "string";
      v9 = 1;
      break;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
  }
  throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
  return 0;
}

uint64_t PronGuessParamSet::getIntParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  ParamSpecMgr *v9;
  int v10;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  const void *ParamByParamId;
  const void *v16;
  const void *v17;

  if (a2 == 3)
  {
    switch((int)a3)
    {
      case 0:
        result = *(unsigned int *)(a1 + 60);
        break;
      case 1:
        v9 = (ParamSpecMgr *)qword_253DF2860;
        v10 = 3;
LABEL_17:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v9, v10, a3, a4, a5, a6, a7, a8);
        break;
      case 2:
        v11 = (ParamSpecMgr *)qword_253DF2860;
        v12 = 3;
LABEL_19:
        v16 = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
        break;
      case 3:
        v13 = (ParamSpecMgr *)qword_253DF2860;
        v14 = 3;
LABEL_21:
        v17 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
        break;
      default:
LABEL_10:
        throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
        return 0;
    }
  }
  else if (a2 == 2)
  {
    switch((int)a3)
    {
      case 0:
        result = *(unsigned int *)(a1 + 56);
        break;
      case 1:
        v9 = (ParamSpecMgr *)qword_253DF2860;
        v10 = 2;
        goto LABEL_17;
      case 2:
        v11 = (ParamSpecMgr *)qword_253DF2860;
        v12 = 2;
        goto LABEL_19;
      case 3:
        v13 = (ParamSpecMgr *)qword_253DF2860;
        v14 = 2;
        goto LABEL_21;
      default:
        goto LABEL_10;
    }
  }
  else
  {
    if (a2 == 1)
      throwWrongTypeForParamId(1, "string", "int", a4, a5, a6, a7, a8);
    else
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
    return 0;
  }
  return result;
}

double PronGuessParamSet::getDoubleParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 3:
      v8 = "int";
      v9 = 3;
      break;
    case 2:
      v8 = "int";
      v9 = 2;
      break;
    case 1:
      v8 = "string";
      v9 = 1;
      break;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      return 0.0;
  }
  throwWrongTypeForParamId(v9, v8, "double", a4, a5, a6, a7, a8);
  return 0.0;
}

char *PronGuessParamSet::getStringParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  const void *ParamByParamId;

  if (a2 == 3)
  {
    v9 = 3;
LABEL_11:
    throwWrongTypeForParamId(v9, "int", "string", a4, a5, a6, a7, a8);
    return 0;
  }
  if (a2 == 2)
  {
    v9 = 2;
    goto LABEL_11;
  }
  if (a2 != 1)
  {
    throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if ((_DWORD)a3 == 1)
  {
    ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2860, 1, a3, a4, a5, a6, a7, a8);
  }
  if ((_DWORD)a3)
  {
    throwWrongQueryMode(a3, (uint64_t)"string", a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (*(_DWORD *)(a1 + 48))
    return *(char **)(a1 + 40);
  else
    return &byte_209A88803;
}

uint64_t PronGuessParamSet::getEnumParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 3:
      v8 = "int";
      v9 = 3;
      break;
    case 2:
      v8 = "int";
      v9 = 2;
      break;
    case 1:
      v8 = "string";
      v9 = 1;
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      return 0;
  }
  throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
  return 0;
}

void PronGuessParamSet::setBoolParameter(PronGuessParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 3:
      goto LABEL_6;
    case 2:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    case 1:
      throwWrongTypeForParamId(1, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
  }
  throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
}

void PronGuessParamSet::setIntParameter(PronGuessParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  void *ParamByParamId;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = a3;
  if (a2 == 3)
  {
    ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2860, 3, a3, a4, a5, a6, a7, a8);
    if (ParamByParamId)
    IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v8, 0, 0, v23, v24, v25, v26);
    if (*((_DWORD *)this + 9))
    {
      v21 = "PronGuessMinNewPronLength";
      goto LABEL_13;
    }
    *((_DWORD *)this + 15) = v8;
  }
  else
  {
    if (a2 != 2)
    {
      if (a2 != 1)
      {
        throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
        return;
      }
      throwWrongTypeForParamId(1, "string", "int", a4, a5, a6, a7, a8);
    }
    v10 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2860, 2, a3, a4, a5, a6, a7, a8);
    if (v10)
    IntParamSpec::validateValue((IntParamSpec *)v10, v8, 0, 0, v11, v12, v13, v14);
    if (*((_DWORD *)this + 9))
    {
      v21 = "PronGuessLMPerBackoffWordPenalty";
LABEL_13:
      throwParamSetSetFailed(v21, "int", v15, v16, v17, v18, v19, v20);
      return;
    }
    *((_DWORD *)this + 14) = v8;
  }
}

void PronGuessParamSet::setDoubleParameter(PronGuessParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;

  v9 = a2;
  switch(a2)
  {
    case 3:
      goto LABEL_6;
    case 2:
LABEL_5:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
LABEL_6:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      break;
    case 1:
      throwWrongTypeForParamId(1, "string", "double", a5, a6, a7, a8, a9);
      goto LABEL_5;
  }
  throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
}

void PronGuessParamSet::setStringParameter(PronGuessParamSet *this, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 3:
      goto LABEL_6;
    case 2:
      throwWrongTypeForParamId(2, "int", "string", a4, a5, a6, a7, a8);
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      break;
    case 1:
      PronGuessParamSet::setParamSetPronGuessFragmentSuffixTag(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
  }
  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void PronGuessParamSet::setEnumParameter(PronGuessParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 3:
      goto LABEL_6;
    case 2:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    case 1:
      throwWrongTypeForParamId(1, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
  }
  throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
}

void PronGuessParamSet::~PronGuessParamSet(PronGuessParamSet *this)
{
  *(_QWORD *)this = &off_24C215CC8;
  DgnString::~DgnString((PronGuessParamSet *)((char *)this + 40));
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((PronGuessParamSet *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_24C215CC8;
  DgnString::~DgnString((PronGuessParamSet *)((char *)this + 40));
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((PronGuessParamSet *)((char *)this + 8));
  JUMPOUT(0x20BD149A8);
}

void OnlineConstrainedTransAccMgr::printSize(OnlineConstrainedTransAccMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  OnlineConstrainedTransAccMgr *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  int v66;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/ocntrnac.cpp", 149, (DgnString *)&v65);
  if (v66)
    v16 = v65;
  else
    v16 = &unk_209A8804C;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A8804C, a3, &unk_209A8804C, v16);
  DgnString::~DgnString((DgnString *)&v65);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A8804C);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/ocntrnac.cpp", 151, (DgnString *)&v65);
  if (v66)
    v27 = v65;
  else
    v27 = &unk_209A8804C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A8804C, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v65);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/ocntrnac.cpp", 151, (DgnString *)&v65);
  if (v66)
    v32 = v65;
  else
    v32 = &unk_209A8804C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A8804C, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v65);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/ocntrnac.cpp", 151, (DgnString *)&v65);
  if (v66)
    v37 = v65;
  else
    v37 = &unk_209A8804C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A8804C, (34 - a3), (34 - a3), v37, 4, 4, 0);
  v64 = a3;
  DgnString::~DgnString((DgnString *)&v65);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v38 = 12;
  else
    v38 = 16;
  v39 = *((unsigned int *)this + 6);
  v40 = *((_DWORD *)this + 7);
  v41 = this;
  if (v40 >= v39)
  {
    v42 = 0;
    if ((int)v39 > 0)
      v38 += 4 * (v39 - 1) + 4;
    v43 = v38 + 4 * (v40 - v39);
  }
  else
  {
    v42 = 4 * v39;
    v43 = v38;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/ocntrnac.cpp", 151, (DgnString *)&v65);
  if (v66)
    v48 = v65;
  else
    v48 = &unk_209A8804C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, v21, &unk_209A8804C, v22, v22, v48, v43, v38, v42);
  DgnString::~DgnString((DgnString *)&v65);
  *a4 += v43;
  *a5 += v38;
  *a6 += v42;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v49 = 12;
  else
    v49 = 16;
  v50 = *((unsigned int *)v41 + 10);
  v51 = *((_DWORD *)v41 + 11);
  if (v51 >= v50)
  {
    v52 = 0;
    if ((int)v50 > 0)
      v49 += 4 * (v50 - 1) + 4;
    v53 = v49 + 4 * (v51 - v50);
  }
  else
  {
    v52 = 4 * v50;
    v53 = v49;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/ocntrnac.cpp", 151, (DgnString *)&v65);
  if (v66)
    v58 = v65;
  else
    v58 = &unk_209A8804C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v21, &unk_209A8804C, v22, v22, v58, v53, v49, v52);
  DgnString::~DgnString((DgnString *)&v65);
  *a4 += v53;
  *a5 += v49;
  *a6 += v52;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/ocntrnac.cpp", 153, (DgnString *)&v65);
  if (v66)
    v63 = v65;
  else
    v63 = &unk_209A8804C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v64, &unk_209A8804C, (35 - v64), (35 - v64), v63, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v65);
}

void sub_209A4DB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void OnlineConstrainedTransAccMgr::saveOnlineConstrainedTransAcc(OnlineConstrainedTransAccMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  DgnStream *v8;
  uint64_t CurrentSubDirComponents;
  int v10;

  if (a4)
  {
    OnlineConstrainedTransAccMgr::saveOCT(this, a2, a5);
  }
  else
  {
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x33u, a5, "MROCB!? ", 19, 1);
    v10 = 0;
    writeObject((uint64_t)v8, (int *)this, &v10);
    writeObject((uint64_t)v8, (int *)this + 1, &v10);
    writeObject((uint64_t)v8, (int *)this + 2, &v10);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 16, &v10);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 32, &v10);
    writeObjectChecksum((uint64_t)v8, &v10);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x33u, v10);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
}

void OnlineConstrainedTransAccMgr::saveOCT(OnlineConstrainedTransAccMgr *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  int v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t i;
  char v23;
  int v24[2];
  _DWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30[35];
  _QWORD v31[3];
  void *v32[6];
  _QWORD v33[4];

  v33[2] = *MEMORY[0x24BDAC8D0];
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v30);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v30, (uint64_t)a2, 0x34u, a3);
  v28 = 0;
  v29 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v30, sOCT_Versions, (uint64_t)&v28, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v30, "OnlineConstrainedTransAcc", (_QWORD *)(v28 + 8 * (v29 - 1)));
  v32[0] = 0;
  v11 = realloc_array(0, v32, 0x14uLL, 0, 0, 1);
  v25 = v32[0];
  v26 = 5;
  v27 = v11 >> 2;
  DgnArray<DgnString>::DgnArray(v24, 5);
  *v25 = 0;
  DgnString::operator=(*(DgnString **)v24, "TableName");
  v25[1] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v24 + 16), "CurrentState");
  v25[2] = 0;
  DgnString::operator=((DgnString *)(*(_QWORD *)v24 + 32), "StrValue1");
  v25[3] = 0;
  DgnString::operator=((DgnString *)(*(_QWORD *)v24 + 48), "StrValue2");
  v25[4] = 1;
  DgnString::operator=((DgnString *)(*(_QWORD *)v24 + 64), "IntValue1");
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v30, (uint64_t)&v25, (uint64_t)v24);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v30, "NumberOfStates", *(unsigned int *)this);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v30, "StartState", *((unsigned int *)this + 1));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v30, "NumberOfAccumulateFactors", *((unsigned int *)this + 2));
  v12 = 0;
  v33[0] = "AutomatonTransition";
  v33[1] = "FrameSelection";
  v32[0] = "SilenceInitial";
  v32[1] = "SilenceAfterSilence";
  v32[2] = "SilenceAfterSpeech";
  v32[3] = "SpeechInitial";
  v32[4] = "SpeechAfterSilence";
  v32[5] = "SpeechAfterSpeech";
  v31[0] = "SilPel";
  v31[1] = "NonSilInitialPel";
  v31[2] = "NonSilNonInitialPel";
  v13 = 1;
  v14 = *(_DWORD *)this;
  do
  {
    v15 = v13;
    if (v14)
    {
      v16 = 0;
      v17 = 0;
      v18 = (char *)v33[v12];
      v23 = v13;
      if ((v13 & 1) != 0)
        v19 = 16;
      else
        v19 = 32;
      do
      {
        v20 = 0;
        v21 = v16;
        do
        {
          for (i = 0; i != 3; ++i)
          {
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v30, 0, v18);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v30, 1u, v17);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v30, 2u, (char *)v32[v20]);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v30, 3u, (char *)v31[i]);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v30, 4u, *(_DWORD *)(*(_QWORD *)((char *)this + v19) + 4 * (v21 + i)));
            DgnTextFileWriter::writeNextLine(v30);
          }
          ++v20;
          v21 += 3;
        }
        while (v20 != 6);
        ++v17;
        v14 = *(_DWORD *)this;
        v16 += 18;
      }
      while (v17 < *(_DWORD *)this);
      v15 = v23;
    }
    v13 = 0;
    v12 = 1;
  }
  while ((v15 & 1) != 0);
  DgnArray<DgnString>::releaseAll((uint64_t)v24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v25);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v28);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v30);
}

void sub_209A4DFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void MrecInitModule_progcall_dfutil(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugProgressCallbacks)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugProgressCallbacks", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugProgressCallbacks = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugProgressCallbacks);
  }
}

void ProgressCallbackHandler::ProgressCallbackHandler(ProgressCallbackHandler *this, void (*a2)(unsigned int, const void *), const void *a3)
{
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  if (a2)
    a2(0, a3);
}

void sub_209A4E134(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIArray<Utterance *>::~DgnIArray(v1);
  _Unwind_Resume(a1);
}

void ProgressCallbackHandler::~ProgressCallbackHandler(ProgressCallbackHandler *this)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = (uint64_t **)((char *)this + 56);
  v3 = *((unsigned int *)this + 16);
  if ((_DWORD)v3)
  {
    v4 = *v2;
    do
    {
      v5 = *v4++;
      *(_QWORD *)(v5 + 80) = 0;
      --v3;
    }
    while (v3);
  }
  *((_DWORD *)this + 16) = 0;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
}

uint64_t ProgressCallbackHandler::startReporting(uint64_t this, ProgressCallbackHandler *a2)
{
  uint64_t v2;
  unint64_t v3;

  if (this)
  {
    v2 = this;
    if (*(_DWORD *)(this + 64))
    {
      v3 = 0;
      do
        DFileProgressInfo::resetReportedInfo(*(void ***)(*(_QWORD *)(v2 + 56) + 8 * v3++));
      while (v3 < *(unsigned int *)(v2 + 64));
    }
    return ProgressCallbackHandler::updateTotals(v2);
  }
  return this;
}

uint64_t ProgressCallbackHandler::updateTotals(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  v1 = *(unsigned int *)(this + 64);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = *(uint64_t **)(this + 56);
    do
    {
      v7 = *v6++;
      v5 += *(_QWORD *)(v7 + 56);
      v4 += *(_QWORD *)(v7 + 64);
      v3 += *(unsigned int *)(v7 + 16);
      v2 += *(unsigned int *)(v7 + 72);
      --v1;
    }
    while (v1);
    *(_QWORD *)(this + 16) = v5;
    *(_QWORD *)(this + 24) = v3;
    *(_QWORD *)(this + 32) = v4;
    *(_QWORD *)(this + 40) = v2;
  }
  return this;
}

uint64_t ProgressCallbackHandler::addProgress(uint64_t this, ProgressCallbackHandler *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (this)
  {
    v2 = this;
    this = ProgressCallbackHandler::updateTotals(this);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
      LODWORD(v3) = ((double)*(unint64_t *)(v2 + 32) / (double)v3 * 1000.0);
    if (v3 >= 0x3E7)
      v4 = 999;
    else
      v4 = v3;
    if (*(_QWORD *)(v2 + 48) < v4)
    {
      if (*(_QWORD *)v2)
        this = (*(uint64_t (**)(unint64_t, _QWORD))v2)(v4, *(_QWORD *)(v2 + 8));
      *(_QWORD *)(v2 + 48) = v4;
    }
  }
  return this;
}

uint64_t ProgressCallbackHandler::addDFileProgressInfoPtr(uint64_t this, DFileProgressInfo *a2, DFileProgressInfo *a3)
{
  if (this)
    return ProgressCallbackHandler::addDFileProgressInfoPtr(this, a2);
  return this;
}

unint64_t ProgressCallbackHandler::addDFileProgressInfoPtr(unint64_t this, DFileProgressInfo *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 64);
  if (v4 == *(_DWORD *)(this + 68))
  {
    this = DgnPrimArray<unsigned long long>::reallocElts(this + 56, 1, 1);
    v4 = *(_DWORD *)(v3 + 64);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4) = a2;
  *(_DWORD *)(v3 + 64) = v4 + 1;
  return this;
}

void MrecInitModule_param_mrecutil(void)
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;

  if (!gParDebugShowParameterSettings)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    v0[2] = (uint64_t)"DebugShowParameterSettings";
    v0[3] = (uint64_t)&byte_209A88803;
    v0[4] = (uint64_t)&byte_209A88803;
    *v0 = (uint64_t)&unk_24C214CE8;
    v0[1] = (uint64_t)SetShadowDebugShowParameterSettings;
    *((_WORD *)v0 + 20) = 0;
    gParDebugShowParameterSettings = (uint64_t)v0;
    gShadowDebugShowParameterSettings = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowParameterSettings);
  }
  if (!gParDebugShowEffectiveParameterSettings)
  {
    v1 = MemChunkAlloc(0x30uLL, 0);
    v1[2] = (uint64_t)"DebugShowEffectiveParameterSettings";
    v1[3] = (uint64_t)&byte_209A88803;
    v1[4] = (uint64_t)&byte_209A88803;
    *v1 = (uint64_t)&unk_24C214CE8;
    v1[1] = (uint64_t)SetShadowDebugShowEffectiveParameterSettings;
    *((_WORD *)v1 + 20) = 0;
    gParDebugShowEffectiveParameterSettings = (uint64_t)v1;
    gShadowDebugShowEffectiveParameterSettings = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowEffectiveParameterSettings);
  }
  if (!gParDebugShowDefaultToDefaultParameterSettings)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    v2[2] = (uint64_t)"DebugShowDefaultToDefaultParameterSettings";
    v2[3] = (uint64_t)&byte_209A88803;
    v2[4] = (uint64_t)&byte_209A88803;
    *v2 = (uint64_t)&unk_24C214CE8;
    v2[1] = (uint64_t)SetShadowDebugShowDefaultToDefaultParameterSettings;
    *((_WORD *)v2 + 20) = 0;
    gParDebugShowDefaultToDefaultParameterSettings = (uint64_t)v2;
    gShadowDebugShowDefaultToDefaultParameterSettings = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowDefaultToDefaultParameterSettings);
  }
  if (!gParDebugParCacheGet)
  {
    v3 = MemChunkAlloc(0x30uLL, 0);
    v3[2] = (uint64_t)"DebugParCacheGet";
    v3[3] = (uint64_t)&byte_209A88803;
    v3[4] = (uint64_t)&byte_209A88803;
    *v3 = (uint64_t)&unk_24C214CE8;
    v3[1] = 0;
    *((_WORD *)v3 + 20) = 0;
    gParDebugParCacheGet = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugParCacheGet);
  }
}

void LoadSaveTracker::LoadSaveTracker(LoadSaveTracker *this)
{
  DgnThreadMgr::beginFileLoadOrSave((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr);
}

void LoadSaveTracker::~LoadSaveTracker(LoadSaveTracker *this)
{
  DgnThreadMgr::endFileLoadOrSave((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr);
}

void GlobalParam::getDescription(GlobalParam *this, DgnString *a2)
{
  DgnString *v4;
  _BYTE v5[16];

  *((_DWORD *)a2 + 2) = 0;
  if (**((_BYTE **)this + 3))
  {
    DgnString::DgnString((DgnString *)v5);
    FileSpec::getRelativeSourceFileName(*((FileSpec **)this + 3), (DgnString *)v5, v4);
    DgnString::operator+=(a2, "[");
    DgnString::operator+=(a2, (uint64_t)v5);
    DgnString::operator+=(a2, "] ");
    DgnString::operator+=(a2, *((char **)this + 4));
    DgnString::~DgnString((DgnString *)v5);
  }
}

void sub_209A4E5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

unint64_t GlobalParamMgr::startupGlobalParamMgr(GlobalParamMgr *this)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t result;

  v1 = MemChunkAlloc(8uLL, 0);
  v2 = MemChunkAlloc(0x10uLL, 0);
  *v2 = 0;
  v2[1] = 0;
  *v1 = (uint64_t)v2;
  result = DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v2, 800, 0);
  GlobalParamMgr::smpGlobalParamMgr = (uint64_t)v1;
  return result;
}

uint64_t sizeObjectSpecial(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t i;
  _QWORD *v8;

  v4 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 8;
  if ((_DWORD)a2 == 3)
    v5 = 0;
  else
    v5 = v4;
  if (a1 && (_DWORD)a2 != 2)
    v5 += sizeObject<ActiveWord *>(a1, a2);
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    for (i = 0; i < v6; ++i)
    {
      if ((_DWORD)a2 != 2)
      {
        v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * i);
        if (v8)
        {
          if (*v8)
          {
            v5 += (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 16))(*v8, a2);
            v6 = *(unsigned int *)(a1 + 8);
          }
        }
      }
    }
  }
  return v5;
}

void GlobalParamMgr::printSize(GlobalParamMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int v35;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 358, (DgnString *)&v34);
  if (v35)
    v16 = v34;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v34);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v21 = sizeObjectSpecial(*(_QWORD *)this, 0);
    v22 = sizeObjectSpecial(*(_QWORD *)this, 1);
    v23 = sizeObjectSpecial(*(_QWORD *)this, 3);
    getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 367, (DgnString *)&v34);
    if (v35)
      v28 = v34;
    else
      v28 = &byte_209A88803;
    xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v28, v21, v22, v23);
    DgnString::~DgnString((DgnString *)&v34);
    *a4 += v21;
    *a5 += v22;
    *a6 += v23;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 369, (DgnString *)&v34);
  if (v35)
    v33 = v34;
  else
    v33 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, a3, &byte_209A88803, (35 - a3), (35 - a3), v33, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v34);
}

void sub_209A4E8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t *GlobalParamMgr::addParam(uint64_t *this, GlobalParam **a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *this;
  v4 = *(_DWORD *)(*this + 8);
  if (v4 == *(_DWORD *)(*this + 12))
  {
    this = (uint64_t *)DgnPrimArray<unsigned long long>::reallocElts(*this, 1, 1);
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
  *(_DWORD *)(v3 + 8) = v4 + 1;
  return this;
}

uint64_t GlobalParamMgr::resetAll(uint64_t **this)
{
  uint64_t result;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  result = mrec_qsort_r<GlobalParamMgr>(**this, *((unsigned int *)*this + 2), (const char *)8, 0);
  v3 = *this;
  if (*((_DWORD *)*this + 2))
  {
    v4 = 0;
    do
    {
      v5 = **(_QWORD **)(*v3 + 8 * v4);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
      v3 = *this;
    }
    while (v4 < *((unsigned int *)*this + 2));
  }
  return result;
}

uint64_t mrec_qsort_r<GlobalParamMgr>(uint64_t result, unint64_t a2, const char *a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  const char *v17;
  int v18;
  const char *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  int v24;
  const char *v25;
  int v26;
  const char *v27;
  _BYTE *v28;
  int v29;
  const char *v30;
  int v31;
  int v32;
  const char *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  char v40;
  int v41;
  char *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  char v57;
  uint64_t v58;
  const char *v59;
  char v60;
  int64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  BOOL v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  int v80;
  unint64_t v81;
  const char *v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  const char *v92;
  char v93;
  const char *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  const char *v104;
  char v105;
  _BYTE *v106;
  _BOOL4 v108;
  unint64_t v109;
  BOOL v110;
  int v111;

  v5 = a2;
  v6 = result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != (const char *)8;
  v110 = ((result | a3) & 7) == 0;
  v111 = v8;
  if (a2 < 7)
  {
LABEL_120:
    if ((uint64_t)(v5 * (_QWORD)a3) > (uint64_t)a3)
    {
      v81 = v6 + v5 * (_QWORD)a3;
      v82 = &a3[v6];
      v83 = v6;
      do
      {
        if ((unint64_t)v82 > v6)
        {
          v84 = v83;
          v85 = (char *)v82;
          do
          {
            v86 = v85;
            v85 += v7;
            result = DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v85 + 16), *(const char **)(**(_QWORD **)v86 + 16), a3);
            if ((int)result < 1)
              break;
            if (v111)
            {
              if (v110)
              {
                v87 = 0;
                v88 = &a3[v84];
                do
                {
                  v89 = *(_QWORD *)&v88[8 * v87];
                  *(_QWORD *)&v88[8 * v87] = *(_QWORD *)(v84 + 8 * v87);
                  *(_QWORD *)(v84 + 8 * v87++) = v89;
                }
                while ((unint64_t)a3 >> 3 != v87);
              }
              else
              {
                v91 = 0;
                v92 = &a3[v84];
                do
                {
                  v93 = v91[(_QWORD)v92];
                  v91[(_QWORD)v92] = v91[v84];
                  (v91++)[v84] = v93;
                }
                while (a3 != v91);
              }
            }
            else
            {
              v90 = *(_QWORD *)v86;
              *(_QWORD *)v86 = *(_QWORD *)v85;
              *(_QWORD *)v85 = v90;
            }
            v84 += v7;
          }
          while ((unint64_t)v85 > v6);
        }
        v82 = &a3[(_QWORD)v82];
        v83 += (unint64_t)a3;
      }
      while ((unint64_t)v82 < v81);
    }
  }
  else
  {
    v9 = (unint64_t)a3 >> 3;
    v108 = a3 != (const char *)8;
    while (1)
    {
      v10 = (_BYTE *)(v6 + (v5 >> 1) * (_QWORD)a3);
      if (v5 != 7)
      {
        v11 = v5;
        v12 = (_BYTE *)(v6 + (v5 - 1) * (_QWORD)a3);
        if (v11 < 0x29)
        {
          v20 = (_BYTE *)v6;
          v21 = v12;
          v5 = v11;
        }
        else
        {
          v109 = v11;
          v13 = (v11 >> 3) * (_QWORD)a3;
          v14 = v6 + v13;
          v15 = v6 + 2 * v13;
          v16 = DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v6 + 16), *(const char **)(**(_QWORD **)(v6 + v13) + 16), a3);
          v18 = DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)(v6 + v13) + 16), *(const char **)(**(_QWORD **)v15 + 16), v17);
          if (v16 < 0)
          {
            if ((v18 & 0x80000000) == 0)
            {
              if ((int)DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v6 + 16), *(const char **)(**(_QWORD **)v15 + 16), v19) >= 0)v14 = v6;
              else
                v14 = v6 + 2 * v13;
            }
          }
          else if (v18 <= 0)
          {
            if ((int)DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v6 + 16), *(const char **)(**(_QWORD **)v15 + 16), v19) >= 0)v14 = v6 + 2 * v13;
            else
              v14 = v6;
          }
          v106 = (_BYTE *)v14;
          v22 = &v10[-v13];
          v23 = &v10[v13];
          v24 = DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)&v10[-v13] + 16), *(const char **)(**(_QWORD **)v10 + 16), v19);
          v26 = DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v10 + 16), *(const char **)(**(_QWORD **)&v10[v13] + 16), v25);
          if (v24 < 0)
          {
            if ((v26 & 0x80000000) == 0)
            {
              if ((int)DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v22 + 16), *(const char **)(**(_QWORD **)v23 + 16), v27) >= 0)v10 -= v13;
              else
                v10 += v13;
            }
          }
          else if (v26 <= 0)
          {
            if ((int)DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v22 + 16), *(const char **)(**(_QWORD **)v23 + 16), v27) >= 0)v10 += v13;
            else
              v10 -= v13;
          }
          v28 = &v12[-2 * v13];
          v21 = &v12[-v13];
          v29 = DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v28 + 16), *(const char **)(**(_QWORD **)&v12[-v13] + 16), v27);
          v31 = DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)&v12[-v13] + 16), *(const char **)(**(_QWORD **)v12 + 16), v30);
          if (v29 < 0)
          {
            if ((v31 & 0x80000000) == 0)
            {
              if ((int)DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v28 + 16), *(const char **)(**(_QWORD **)v12 + 16), a3) >= 0)v21 = &v12[-2 * v13];
              else
                v21 = v12;
            }
          }
          else if (v31 <= 0)
          {
            if ((int)DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v28 + 16), *(const char **)(**(_QWORD **)v12 + 16), a3) >= 0)v21 = v12;
            else
              v21 = &v12[-2 * v13];
          }
          v5 = v109;
          v20 = v106;
        }
        v32 = DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v20 + 16), *(const char **)(**(_QWORD **)v10 + 16), a3);
        result = DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v10 + 16), *(const char **)(**(_QWORD **)v21 + 16), v33);
        if (v32 < 0)
        {
          if ((result & 0x80000000) == 0)
          {
            result = DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v20 + 16), *(const char **)(**(_QWORD **)v21 + 16), a3);
            if ((int)result >= 0)
              v10 = v20;
            else
              v10 = v21;
          }
        }
        else if ((int)result <= 0)
        {
          result = DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v20 + 16), *(const char **)(**(_QWORD **)v21 + 16), a3);
          if ((int)result >= 0)
            v10 = v21;
          else
            v10 = v20;
        }
      }
      if (v111)
      {
        if (v110)
        {
          v34 = (uint64_t *)v6;
          v35 = (unint64_t)a3 >> 3;
          do
          {
            v36 = *v34;
            *v34++ = *(_QWORD *)v10;
            *(_QWORD *)v10 = v36;
            v10 += 8;
            --v35;
          }
          while (v35);
        }
        else
        {
          v38 = a3;
          v39 = (char *)v6;
          do
          {
            v40 = *v39;
            *v39++ = *v10;
            *v10++ = v40;
            --v38;
          }
          while (v38);
        }
      }
      else
      {
        v37 = *(_QWORD *)v6;
        *(_QWORD *)v6 = *(_QWORD *)v10;
        *(_QWORD *)v10 = v37;
      }
      v41 = 0;
      v42 = (char *)&a3[v6];
      v43 = v6 + (v5 - 1) * (_QWORD)a3;
      v44 = (char *)v43;
      v45 = (char *)&a3[v6];
LABEL_55:
      while (v45 <= v44)
      {
        result = DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v45 + 16), *(const char **)(**(_QWORD **)v6 + 16), a3);
        if ((int)result > 0)
          break;
        if (!(_DWORD)result)
        {
          if (v111)
          {
            if (v110)
            {
              v46 = 0;
              do
              {
                v47 = *(_QWORD *)&v42[8 * v46];
                *(_QWORD *)&v42[8 * v46] = *(_QWORD *)&v45[8 * v46];
                *(_QWORD *)&v45[8 * v46++] = v47;
              }
              while (v9 != v46);
            }
            else
            {
              v56 = 0;
              do
              {
                v57 = v56[(_QWORD)v42];
                v56[(_QWORD)v42] = v56[(_QWORD)v45];
                (v56++)[(_QWORD)v45] = v57;
              }
              while (a3 != v56);
            }
          }
          else
          {
            v55 = *(_QWORD *)v42;
            *(_QWORD *)v42 = *(_QWORD *)v45;
            *(_QWORD *)v45 = v55;
          }
          v42 = (char *)&a3[(_QWORD)v42];
          v41 = 1;
        }
        v45 = (char *)&a3[(_QWORD)v45];
      }
      while (v45 <= v44)
      {
        result = DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v44 + 16), *(const char **)(**(_QWORD **)v6 + 16), a3);
        if ((result & 0x80000000) != 0)
        {
          if (v111)
          {
            if (v110)
            {
              v53 = 0;
              do
              {
                v54 = *(_QWORD *)&v45[8 * v53];
                *(_QWORD *)&v45[8 * v53] = *(_QWORD *)&v44[8 * v53];
                *(_QWORD *)&v44[8 * v53++] = v54;
              }
              while (v9 != v53);
            }
            else
            {
              v59 = 0;
              do
              {
                v60 = v59[(_QWORD)v45];
                v59[(_QWORD)v45] = v59[(_QWORD)v44];
                (v59++)[(_QWORD)v44] = v60;
              }
              while (a3 != v59);
            }
          }
          else
          {
            v58 = *(_QWORD *)v45;
            *(_QWORD *)v45 = *(_QWORD *)v44;
            *(_QWORD *)v44 = v58;
          }
          v45 = (char *)&a3[(_QWORD)v45];
          v44 += v7;
          v41 = 1;
          goto LABEL_55;
        }
        if (!(_DWORD)result)
        {
          if (v111)
          {
            if (v110)
            {
              v48 = 0;
              do
              {
                v49 = *(_QWORD *)&v44[8 * v48];
                *(_QWORD *)&v44[8 * v48] = *(_QWORD *)(v43 + 8 * v48);
                *(_QWORD *)(v43 + 8 * v48++) = v49;
              }
              while (v9 != v48);
            }
            else
            {
              v51 = 0;
              do
              {
                v52 = v51[(_QWORD)v44];
                v51[(_QWORD)v44] = v51[v43];
                (v51++)[v43] = v52;
              }
              while (a3 != v51);
            }
          }
          else
          {
            v50 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v43;
            *(_QWORD *)v43 = v50;
          }
          v43 += v7;
          v41 = 1;
        }
        v44 += v7;
      }
      v61 = v5 * (_QWORD)a3;
      v62 = v6 + v5 * (_QWORD)a3;
      if (!v41)
        break;
      v63 = v45 - v42;
      if ((uint64_t)&v42[-v6] >= v45 - v42)
        v64 = (char *)(v45 - v42);
      else
        v64 = &v42[-v6];
      if (v64)
      {
        if (v110)
        {
          v65 = (char *)(v45 - v64);
          v66 = (unint64_t)v64 >> 3;
          v67 = (uint64_t *)v6;
          do
          {
            v68 = *v67;
            *v67++ = *(_QWORD *)v65;
            *(_QWORD *)v65 = v68;
            v65 += 8;
            --v66;
          }
          while (v66);
        }
        else
        {
          v69 = -(uint64_t)v64;
          v70 = (char *)v6;
          do
          {
            v71 = *v70;
            *v70++ = v45[v69];
            v45[v69] = v71;
            v72 = __CFADD__(v69++, 1);
          }
          while (!v72);
        }
      }
      v73 = v43 - (_QWORD)v44;
      if ((uint64_t)(v43 - (_QWORD)v44) >= (uint64_t)(v62 - (_QWORD)&a3[v43]))
        v74 = v62 - (_QWORD)&a3[v43];
      else
        v74 = v43 - (_QWORD)v44;
      if (v74)
      {
        if (v110)
        {
          v75 = (_QWORD *)(v62 - v74);
          v76 = v74 >> 3;
          do
          {
            v77 = *(_QWORD *)v45;
            *(_QWORD *)v45 = *v75;
            v45 += 8;
            *v75++ = v77;
            --v76;
          }
          while (v76);
        }
        else
        {
          v78 = -(uint64_t)v74;
          do
          {
            v79 = *v45;
            *v45++ = *(_BYTE *)(v62 + v78);
            *(_BYTE *)(v62 + v78) = v79;
            v72 = __CFADD__(v78++, 1);
          }
          while (!v72);
        }
      }
      if (v63 > (uint64_t)a3)
        result = mrec_qsort_r<GlobalParamMgr>(v6, v63 / (unint64_t)a3, a3, a4);
      if (v73 <= (uint64_t)a3)
        return result;
      v6 = v62 - v73;
      v5 = v73 / (unint64_t)a3;
      if (((v6 | a3) & 7) != 0)
        v80 = 2;
      else
        v80 = v108;
      v110 = ((v6 | a3) & 7) == 0;
      v111 = v80;
      if (v5 < 7)
        goto LABEL_120;
    }
    v94 = &a3[v6];
    if (v61 > (uint64_t)a3)
    {
      v95 = v6;
      do
      {
        if ((unint64_t)v94 > v6)
        {
          v96 = v95;
          v97 = (char *)v94;
          do
          {
            v98 = v97;
            v97 += v7;
            result = DgnString::compareNoCase(*(DgnString **)(**(_QWORD **)v97 + 16), *(const char **)(**(_QWORD **)v98 + 16), a3);
            if ((int)result < 1)
              break;
            if (v111)
            {
              if (v110)
              {
                v99 = 0;
                v100 = &a3[v96];
                do
                {
                  v101 = *(_QWORD *)&v100[8 * v99];
                  *(_QWORD *)&v100[8 * v99] = *(_QWORD *)(v96 + 8 * v99);
                  *(_QWORD *)(v96 + 8 * v99++) = v101;
                }
                while (v9 != v99);
              }
              else
              {
                v103 = 0;
                v104 = &a3[v96];
                do
                {
                  v105 = v103[(_QWORD)v104];
                  v103[(_QWORD)v104] = v103[v96];
                  (v103++)[v96] = v105;
                }
                while (a3 != v103);
              }
            }
            else
            {
              v102 = *(_QWORD *)v98;
              *(_QWORD *)v98 = *(_QWORD *)v97;
              *(_QWORD *)v97 = v102;
            }
            v96 += v7;
          }
          while ((unint64_t)v97 > v6);
        }
        v94 = &a3[(_QWORD)v94];
        v95 += (unint64_t)a3;
      }
      while ((unint64_t)v94 < v62);
    }
  }
  return result;
}

void IntGlobalParamBase::setVal(IntGlobalParamBase *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v11)(void);

  if (*((_DWORD *)this + 10) != a2 && (*((_DWORD *)this + 12) > a2 || *((_DWORD *)this + 13) < a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 792, (uint64_t)"mrecutil/param", 2, (uint64_t)"%.500s", a7, a8, *((_QWORD *)this + 2));
  *((_DWORD *)this + 11) = a2;
  if (a3)
  {
    v11 = (void (*)(void))*((_QWORD *)this + 1);
    if (v11)
      v11();
  }
}

void DoubleGlobalParamBase::setVal(DoubleGlobalParamBase *this, double a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (*v12)(void);

  if (*((double *)this + 5) != a2 && (*((double *)this + 7) > a2 || *((double *)this + 8) < a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 1074, (uint64_t)"mrecutil/param", 2, (uint64_t)"%.500s", a8, a9, *((_QWORD *)this + 2));
  *((double *)this + 6) = a2;
  if (a3)
  {
    v12 = (void (*)(void))*((_QWORD *)this + 1);
    if (v12)
      v12();
  }
}

void GlobalParamMgr::ParamGetAllParamNames(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE v11[16];

  v4 = *(unsigned int *)(a2 + 8);
  if ((int)v4 >= 1)
  {
    v5 = 16 * v4 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*(_QWORD *)a2 + v5));
      v5 -= 16;
    }
    while (v5 != -16);
  }
  *(_DWORD *)(a2 + 8) = 0;
  v6 = *(_QWORD **)a1;
  v7 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  v8 = *(_DWORD *)(a2 + 12);
  if (v7 > v8)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v7 - v8, 0);
    v6 = *(_QWORD **)a1;
    v7 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  }
  if (v7)
  {
    v9 = 0;
    do
    {
      DgnString::DgnString((DgnString *)v11, *(const char **)(**(_QWORD **)(*v6 + 8 * v9) + 16));
      v10 = *(unsigned int *)(a2 + 8);
      if (v10 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts(a2, 1, 1);
        v10 = *(unsigned int *)(a2 + 8);
      }
      DgnString::DgnString((DgnString *)(*(_QWORD *)a2 + 16 * v10), (const DgnString *)v11);
      ++*(_DWORD *)(a2 + 8);
      DgnString::~DgnString((DgnString *)v11);
      ++v9;
      v6 = *(_QWORD **)a1;
    }
    while (v9 < *(unsigned int *)(*(_QWORD *)a1 + 8));
  }
}

void sub_209A4F464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

uint64_t GlobalParamMgr::ParamGetParId(GlobalParamMgr *this, const char *__s2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = 0;
  v4 = *(_QWORD **)this;
  v5 = *(unsigned int *)(*(_QWORD *)this + 8);
  while (v5 != v3)
  {
    if (!strcmp(*(const char **)(**(_QWORD **)(*v4 + 8 * v3++) + 16), __s2))
      return (unsigned __int16)v3;
  }
  LOWORD(v3) = -1;
  return (unsigned __int16)v3;
}

uint64_t GlobalParamMgr::ParamGetType(GlobalParamMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void **v8;
  const void *v9;

  if ((a2 - 1) >= *(_DWORD *)(*(_QWORD *)this + 8)
    || (v8 = *(const void ***)(**(_QWORD **)this + 8 * (a2 - 1)), (v9 = *v8) == 0))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 577, (uint64_t)"mrecutil/param", 4, (uint64_t)&errStr_mrecutil_param_E_INVALID_HANDLE, a7, a8, a2);
    return 1;
  }
  {
    return 2;
  }
  {
    return 4;
  }
  {
    return 5;
  }
  return 3;
}

uint64_t GlobalParamMgr::ParamGetBoolValue(GlobalParamMgr *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  const void **v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = a2;
  if ((a2 - 1) < *(_DWORD *)(*(_QWORD *)this + 8)
    && (v10 = *(const void ***)(**(_QWORD **)this + 8 * (a2 - 1)), (v11 = *v10) != 0))
  {
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 611, (uint64_t)"mrecutil/param", 4, (uint64_t)&errStr_mrecutil_param_E_INVALID_HANDLE, a7, a8, a2);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 612, (uint64_t)"mrecutil/param", 5, (uint64_t)"%d", v15, v16, v9);
    v14 = 0;
  }
  v17 = 40;
  if (!a3)
    v17 = 41;
  return v14[v17];
}

uint64_t GlobalParamMgr::ParamGetIntValue(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  const void **v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v9 = a2;
  if ((a2 - 1) < *(_DWORD *)(*(_QWORD *)a1 + 8)
    && (v10 = *(const void ***)(**(_QWORD **)a1 + 8 * (a2 - 1)), (v11 = *v10) != 0))
  {
    {
      goto LABEL_7;
    }
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 619, (uint64_t)"mrecutil/param", 4, (uint64_t)&errStr_mrecutil_param_E_INVALID_HANDLE, a7, a8, a2);
    v11 = 0;
  }
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 620, (uint64_t)"mrecutil/param", 5, (uint64_t)"%d", v12, v13, v9);
LABEL_7:
  switch(a3)
  {
    case 0:
      break;
    case 1:
      break;
    case 2:
      break;
    case 3:
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

char *GlobalParamMgr::ParamGetStringValue(GlobalParamMgr *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  const void **v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  EnumGlobalParamBase *v18;
  uint64_t v19;

  v9 = a2;
  if ((a2 - 1) >= *(_DWORD *)(*(_QWORD *)this + 8)
    || (v10 = *(const void ***)(**(_QWORD **)this + 8 * (a2 - 1)), (v11 = *v10) == 0))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 640, (uint64_t)"mrecutil/param", 4, (uint64_t)&errStr_mrecutil_param_E_INVALID_HANDLE, a7, a8, a2);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 643, (uint64_t)"mrecutil/param", 5, (uint64_t)"%d", v16, v17, v9);
    v18 = 0;
LABEL_11:
    v19 = 44;
    if (a3)
      v19 = 40;
    return EnumGlobalParamBase::getNameForEnumItem(v18, *(_DWORD *)((char *)v18 + v19));
  }
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 643, (uint64_t)"mrecutil/param", 5, (uint64_t)"%d", v12, v13, v9);
  }
  if (!v14)
  {
    goto LABEL_11;
  }
  if (a3)
  {
    if (v14[12])
    {
      v15 = (char *)(v14 + 10);
      return *(char **)v15;
    }
  }
  else if (v14[16])
  {
    v15 = (char *)(v14 + 14);
    return *(char **)v15;
  }
  return &byte_209A88803;
}

_BYTE *EnumGlobalParamBase::getNameForEnumItem(EnumGlobalParamBase *this, int a2)
{
  uint64_t v2;
  _BYTE *result;
  _DWORD *i;
  int v5;

  v2 = *((_QWORD *)this + 6);
  result = *(_BYTE **)(v2 + 8);
  if (!*result)
    return 0;
  if (*(_DWORD *)(v2 + 16) != a2)
  {
    for (i = (_DWORD *)(v2 + 48); ; i += 8)
    {
      result = (_BYTE *)*((_QWORD *)i - 1);
      if (!*result)
        break;
      v5 = *i;
      if (v5 == a2)
        return result;
    }
    return 0;
  }
  return result;
}

double GlobalParamMgr::ParamGetDoubleValue(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  const void **v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double result;

  v9 = a2;
  if ((a2 - 1) < *(_DWORD *)(*(_QWORD *)a1 + 8)
    && (v10 = *(const void ***)(**(_QWORD **)a1 + 8 * (a2 - 1)), (v11 = *v10) != 0))
  {
    {
      goto LABEL_7;
    }
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 688, (uint64_t)"mrecutil/param", 4, (uint64_t)&errStr_mrecutil_param_E_INVALID_HANDLE, a7, a8, a2);
    v11 = 0;
  }
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 689, (uint64_t)"mrecutil/param", 5, (uint64_t)"%d", v12, v13, v9);
LABEL_7:
  switch(a3)
  {
    case 0:
      goto LABEL_13;
    case 1:
      goto LABEL_13;
    case 2:
      goto LABEL_13;
    case 3:
LABEL_13:
      result = *v14;
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

uint64_t IntGlobalParamBase::IntGlobalParamBase(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6, uint64_t a7)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = a4;
  *(_QWORD *)result = &off_24C2165D0;
  *(_QWORD *)(result + 8) = a7;
  *(_QWORD *)(result + 48) = *a6;
  *(_DWORD *)(result + 40) = a5;
  *(_DWORD *)(result + 44) = a5;
  return result;
}

void IntGlobalParamBase::~IntGlobalParamBase(IntGlobalParamBase *this)
{
  JUMPOUT(0x20BD149A8);
}

uint64_t IntGlobalParamBase::sizeObject(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 32;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 48;
  if (a2 == 3)
    return 0;
  else
    return v2;
}

void IntGlobalParamBase::reset(IntGlobalParamBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  IntGlobalParamBase::setVal(this, *((_DWORD *)this + 10), 1, a4, a5, a6, a7, a8);
}

uint64_t IntGlobalParamBase::getDescription(IntGlobalParamBase *this, DgnString *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  GlobalParam::getDescription(this, a2);
  return DgnString::printfAppend(a2, " ==> Range %d to %d", v4, v5, v6, *((unsigned int *)this + 12), *((unsigned int *)this + 13));
}

_BYTE *GetNameForEnumItem(uint64_t a1, int a2)
{
  _BYTE *result;
  _DWORD *i;
  int v5;

  result = *(_BYTE **)(a1 + 8);
  if (!*result)
    return 0;
  if (*(_DWORD *)(a1 + 16) != a2)
  {
    for (i = (_DWORD *)(a1 + 48); ; i += 8)
    {
      result = (_BYTE *)*((_QWORD *)i - 1);
      if (!*result)
        break;
      v5 = *i;
      if (v5 == a2)
        return result;
    }
    return 0;
  }
  return result;
}

__n128 EnumGlobalParamBase::EnumGlobalParamBase(__n128 *a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int32 a5, __n128 *a6, unint64_t a7)
{
  __n128 result;

  a1[1].n128_u64[0] = a2;
  a1[1].n128_u64[1] = a3;
  a1[2].n128_u64[0] = a4;
  a1->n128_u64[0] = (unint64_t)&off_24C216B28;
  a1->n128_u64[1] = a7;
  result = *a6;
  a1[3] = *a6;
  a1[2].n128_u32[2] = a5;
  a1[2].n128_u32[3] = a5;
  return result;
}

void EnumGlobalParamBase::~EnumGlobalParamBase(EnumGlobalParamBase *this)
{
  JUMPOUT(0x20BD149A8);
}

uint64_t EnumGlobalParamBase::sizeObject(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 36;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 56;
  if (a2 == 3)
    return 0;
  else
    return v2;
}

void EnumGlobalParamBase::setVal(EnumGlobalParamBase *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v11)(void);

  if (*((_DWORD *)this + 10) != a2 && (*((_DWORD *)this + 14) > a2 || *((_DWORD *)this + 15) < a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/param.cpp", 906, (uint64_t)"mrecutil/param", 2, (uint64_t)"%.500s", a7, a8, *((_QWORD *)this + 2));
  *((_DWORD *)this + 11) = a2;
  if (a3)
  {
    v11 = (void (*)(void))*((_QWORD *)this + 1);
    if (v11)
      v11();
  }
}

void EnumGlobalParamBase::reset(EnumGlobalParamBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  EnumGlobalParamBase::setVal(this, *((_DWORD *)this + 10), 1, a4, a5, a6, a7, a8);
}

DgnString *EnumGlobalParamBase::getDescription(EnumGlobalParamBase *this, DgnString *a2)
{
  DgnString *result;
  uint64_t v5;
  char *v6;
  char **v7;

  GlobalParam::getDescription(this, a2);
  result = DgnString::operator+=(a2, " ==> LegalVals: ");
  v5 = *((_QWORD *)this + 6);
  v6 = *(char **)(v5 + 8);
  if (*v6)
  {
    v7 = (char **)(v5 + 24);
    do
    {
      DgnString::operator+=(a2, v6);
      result = DgnString::operator+=(a2, " ");
      if (*v7)
      {
        if (**v7)
        {
          DgnString::operator+=(a2, "[");
          DgnString::operator+=(a2, *v7);
          result = DgnString::operator+=(a2, "] ");
        }
      }
      v6 = v7[2];
      v7 += 4;
    }
    while (*v6);
  }
  return result;
}

void BoolGlobalParamBase::BoolGlobalParamBase(BoolGlobalParamBase *this, const char *a2, const char *a3, const char *a4, char a5, void (*a6)(void), const char *a7)
{
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 4) = a4;
  *(_QWORD *)this = &off_24C216AF0;
  *((_QWORD *)this + 1) = a6;
  *((_BYTE *)this + 41) = a5;
  *((_BYTE *)this + 40) = a5;
}

void BoolGlobalParamBase::~BoolGlobalParamBase(BoolGlobalParamBase *this)
{
  JUMPOUT(0x20BD149A8);
}

uint64_t BoolGlobalParamBase::sizeObject(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 18;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 34;
  if (a2 == 3)
    return 0;
  else
    return v2;
}

uint64_t (*BoolGlobalParamBase::reset(BoolGlobalParamBase *this))(void)
{
  uint64_t (*result)(void);

  *((_BYTE *)this + 41) = *((_BYTE *)this + 40);
  result = (uint64_t (*)(void))*((_QWORD *)this + 1);
  if (result)
    return (uint64_t (*)(void))result();
  return result;
}

uint64_t DoubleGlobalParamBase::DoubleGlobalParamBase(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, double a7)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = a4;
  *(_QWORD *)result = &off_24C217250;
  *(_QWORD *)(result + 8) = a6;
  *(_OWORD *)(result + 56) = *a5;
  *(double *)(result + 40) = a7;
  *(double *)(result + 48) = a7;
  return result;
}

void DoubleGlobalParamBase::~DoubleGlobalParamBase(DoubleGlobalParamBase *this)
{
  JUMPOUT(0x20BD149A8);
}

uint64_t DoubleGlobalParamBase::sizeObject(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 48;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 64;
  if (a2 == 3)
    return 0;
  else
    return v2;
}

void DoubleGlobalParamBase::reset(DoubleGlobalParamBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  DoubleGlobalParamBase::setVal(this, *((double *)this + 5), 1, a3, a4, a5, a6, a7, a8);
}

void DoubleGlobalParamBase::getDescription(DoubleGlobalParamBase *this, DgnString *a2)
{
  _BYTE v4[16];

  GlobalParam::getDescription(this, a2);
  DgnString::operator+=(a2, " ==> Range ");
  DgnString::formatFloat((DgnString *)0xE, *((double *)this + 7), (DgnString *)v4);
  DgnString::operator+=(a2, (uint64_t)v4);
  DgnString::~DgnString((DgnString *)v4);
  DgnString::operator+=(a2, " to ");
  DgnString::formatFloat((DgnString *)0xE, *((double *)this + 8), (DgnString *)v4);
  DgnString::operator+=(a2, (uint64_t)v4);
  DgnString::~DgnString((DgnString *)v4);
}

void sub_209A50080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

void StringGlobalParamBase::StringGlobalParamBase(StringGlobalParamBase *this, const char *a2, const char *a3, const char *a4, char *a5, void (*a6)(void), const char *a7)
{
  DgnString *v9;

  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 4) = a4;
  *(_QWORD *)this = &off_24C2174E8;
  *((_QWORD *)this + 1) = a6;
  v9 = (StringGlobalParamBase *)((char *)this + 40);
  DgnString::DgnString((StringGlobalParamBase *)((char *)this + 40));
  DgnString::DgnString((StringGlobalParamBase *)((char *)this + 56));
  DgnString::preAllocate((unint64_t)this + 56, 512);
  DgnString::operator=((StringGlobalParamBase *)((char *)this + 56), a5);
  DgnString::operator=(v9, a5);
}

void sub_209A50114(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void StringGlobalParamBase::~StringGlobalParamBase(StringGlobalParamBase *this)
{
  DgnString *v1;

  *(_QWORD *)this = &off_24C2174E8;
  v1 = (StringGlobalParamBase *)((char *)this + 40);
  DgnString::~DgnString((StringGlobalParamBase *)((char *)this + 56));
  DgnString::~DgnString(v1);
}

{
  DgnString *v1;

  *(_QWORD *)this = &off_24C2174E8;
  v1 = (StringGlobalParamBase *)((char *)this + 40);
  DgnString::~DgnString((StringGlobalParamBase *)((char *)this + 56));
  DgnString::~DgnString(v1);
}

{
  DgnString *v1;

  *(_QWORD *)this = &off_24C2174E8;
  v1 = (StringGlobalParamBase *)((char *)this + 40);
  DgnString::~DgnString((StringGlobalParamBase *)((char *)this + 56));
  DgnString::~DgnString(v1);
  JUMPOUT(0x20BD149A8);
}

uint64_t StringGlobalParamBase::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 16;
  else
    v4 = 32;
  v5 = sizeObject(a1 + 40);
  v6 = a2 == 3;
  if (a2 == 3)
    v7 = 0;
  else
    v7 = v4;
  v8 = v7 + v5;
  if (!v6)
    v8 += sizeObject(a1 + 56);
  return v8;
}

uint64_t (*StringGlobalParamBase::reset(StringGlobalParamBase *this))(void)
{
  char *v2;
  uint64_t (*result)(void);

  if (*((_DWORD *)this + 12))
    v2 = (char *)*((_QWORD *)this + 5);
  else
    v2 = &byte_209A88803;
  DgnString::operator=((StringGlobalParamBase *)((char *)this + 56), v2);
  result = (uint64_t (*)(void))*((_QWORD *)this + 1);
  if (result)
    return (uint64_t (*)(void))result();
  return result;
}

void SetShadowDebugShowParameterSettings(void)
{
  gShadowDebugShowParameterSettings = *(_BYTE *)(gParDebugShowParameterSettings + 41);
}

void SetShadowDebugShowEffectiveParameterSettings(void)
{
  gShadowDebugShowEffectiveParameterSettings = *(_BYTE *)(gParDebugShowEffectiveParameterSettings + 41);
}

void SetShadowDebugShowDefaultToDefaultParameterSettings(void)
{
  gShadowDebugShowDefaultToDefaultParameterSettings = *(_BYTE *)(gParDebugShowDefaultToDefaultParameterSettings + 41);
}

uint64_t StartupPrefiltererSearchParamSpecMgr(void)
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v24 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v24, (uint64_t)"PrefiltererPelScoreScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererPelScoreScaleDoubleHistory);
  v22 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v22, (uint64_t)"PrefiltererPelScoreUseBestCompScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererPelScoreUseBestCompScoreBoolHistory);
  v17 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v17, (uint64_t)"PrefiltererDecimationType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererDecimationTypeEnumHistory);
  v23 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v23, (uint64_t)"PrefiltererThreshScoreWhenSilenceBest", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererThreshScoreWhenSilenceBestIntHistory);
  v21 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v21, (uint64_t)"PrefiltererThreshScoreIncrementWhenNonSilenceBest", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererThreshScoreIncrementWhenNonSilenceBestIntHistory);
  v20 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v20, (uint64_t)"PrefiltererReturnListThreshScoreDecrement", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererReturnListThreshScoreDecrementIntHistory);
  v19 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v19, (uint64_t)"PrefiltererPelBackoffThreshScoreDecrement", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererPelBackoffThreshScoreDecrementIntHistory);
  v15 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v15, (uint64_t)"PrefiltererActiveNodeCountLimit", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererActiveNodeCountLimitIntHistory);
  v18 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v18, (uint64_t)"PrefiltererAdjustThreshScoreType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererAdjustThreshScoreTypeEnumHistory);
  v16 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v16, (uint64_t)"PrefiltererSeedScoreIncludeWordEndScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererSeedScoreIncludeWordEndScoreBoolHistory);
  v14 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v14, (uint64_t)"PrefiltererMaxSeedScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererMaxSeedScoreIntHistory);
  v13 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v13, (uint64_t)"PrefiltererMinNodeScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererMinNodeScoreIntHistory);
  v12 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v12, (uint64_t)"PrefiltererNodeSkippingType", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererNodeSkippingTypeEnumHistory);
  v11 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v11, (uint64_t)"PrefiltererAllowFirstNodeSkipping", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererAllowFirstNodeSkippingBoolHistory);
  v0 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v0, (uint64_t)"PrefiltererBestScorePerAdditionalPhonemeScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererBestScorePerAdditionalPhonemeScoreIntHistory);
  v1 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v1, (uint64_t)"PrefiltererLookaheadSequenceFirstPhonemeLMScale", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererLookaheadSequenceFirstPhonemeLMScaleDoubleHistory);
  v2 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v2, (uint64_t)"PrefiltererLookaheadThreshScore", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererLookaheadThreshScoreIntHistory);
  v3 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v3, (uint64_t)"PrefiltererLookaheadApplyOnReseed", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererLookaheadApplyOnReseedBoolHistory);
  v10 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v10, (uint64_t)"PrefiltererReturnDistanceMaxFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererReturnDistanceMaxFramesIntHistory);
  v4 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v4, (uint64_t)"PrefiltererReturnDistancePerFramePenalty", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererReturnDistancePerFramePenaltyIntHistory);
  v5 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v5, (uint64_t)"PrefiltererReturnDistanceWordDurationFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererReturnDistanceWordDurationFactorDoubleHistory);
  v6 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v6, (uint64_t)"PrefiltererReturnDistanceAdjustDuration", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererReturnDistanceAdjustDurationBoolHistory);
  v7 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v7, (uint64_t)"PrefiltererReturnListMaxLength", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererReturnListMaxLengthIntHistory);
  v8 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v8, (uint64_t)"PrefiltererFmpeWindowTruncateUnavailableFrames", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sPrefiltererFmpeWindowTruncateUnavailableFramesBoolHistory);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v15);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v17);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v2);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v3);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v14);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v13);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v12);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v11);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v24);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v22);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v10);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v4);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v5);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v6);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v7);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v16);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v23);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v21);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v20);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v19);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v18);
  ParamSpecMgr::addParam(qword_253DF2858, (ParamSpec *)v8);
  return ParamSpecMgr::sortParams((ParamSpecMgr *)qword_253DF2858);
}

_DWORD *PrefiltererSearchParamSet::PrefiltererSearchParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(_QWORD *)a1 = &off_24C218050;
  PrefiltererSearchParamSet::setDefaults((PrefiltererSearchParamSet *)a1, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

void sub_209A50918(_Unwind_Exception *a1)
{
  DgnString *v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t PrefiltererSearchParamSet::PrefiltererSearchParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)a1 = &off_24C218050;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 100) = *(_QWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 132) = *(_OWORD *)(a2 + 132);
  return a1;
}

uint64_t PrefiltererSearchParamSet::setDefaults(PrefiltererSearchParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;

  *((_DWORD *)this + 10) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2858, 1, 0, 0, a5, a6, a7, a8);
  *((_DWORD *)this + 11) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2858, 2, 0, 0, v9, v10, v11, v12);
  *((_DWORD *)this + 12) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2858, 3, v13, v14, v15, v16, v17, v18);
  *((double *)this + 7) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2858, 4, 0, 0, v19, v20, v21, v22);
  *((_DWORD *)this + 16) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2858, 5, 0, 0, v23, v24, v25, v26);
  *((_BYTE *)this + 68) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2858, 6, 0, 0, v27, v28, v29, v30);
  *((_DWORD *)this + 18) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2858, 7, 0, 0, v31, v32, v33, v34);
  *((_DWORD *)this + 19) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2858, 8, 0, 0, v35, v36, v37, v38);
  *((_DWORD *)this + 20) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_253DF2858, 9, v39, v40, v41, v42, v43, v44);
  *((_BYTE *)this + 84) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2858, 10, 0, 0, v45, v46, v47, v48);
  *((double *)this + 11) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2858, 11, 0, 0, v49, v50, v51, v52);
  *((_BYTE *)this + 96) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2858, 12, 0, 0, v53, v54, v55, v56);
  *((_DWORD *)this + 25) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2858, 13, 0, 0, v57, v58, v59, v60);
  *((_DWORD *)this + 26) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2858, 14, 0, 0, v61, v62, v63, v64);
  *((double *)this + 14) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2858, 15, 0, 0, v65, v66, v67, v68);
  *((_BYTE *)this + 120) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2858, 16, 0, 0, v69, v70, v71, v72);
  *((_DWORD *)this + 31) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2858, 17, 0, 0, v73, v74, v75, v76);
  *((_BYTE *)this + 128) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2858, 18, 0, 0, v77, v78, v79, v80);
  *((_DWORD *)this + 33) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2858, 19, 0, 0, v81, v82, v83, v84);
  *((_DWORD *)this + 34) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2858, 20, 0, 0, v85, v86, v87, v88);
  *((_DWORD *)this + 35) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2858, 21, 0, 0, v89, v90, v91, v92);
  result = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2858, 22, 0, 0, v93, v94, v95, v96);
  *((_DWORD *)this + 36) = result;
  return result;
}

uint64_t PrefiltererSearchParamSet::sizeObject(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = sizeObject(a1 + 8) + 16 * (a2 != 3);
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v4 = 5;
    if (a2 == 3)
      v4 = 0;
    v5 = 24;
    if (a2 == 3)
      v5 = 0;
    result += (v4 | (16 * (a2 != 3))) + v5 + 40 * (a2 != 3);
  }
  return result;
}

BOOL PrefiltererSearchParamSet::getBoolParameter(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  int v10;
  ParamSpecMgr *v12;
  int v13;
  const void *ParamByParamId;

  switch(a2)
  {
    case 1:
      v8 = "int";
      v9 = 1;
      goto LABEL_36;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_36;
    case 3:
      v8 = "enum";
      v9 = 3;
      goto LABEL_36;
    case 4:
      v8 = "double";
      v9 = 4;
      goto LABEL_36;
    case 5:
      v8 = "int";
      v9 = 5;
      goto LABEL_36;
    case 6:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2858;
        v13 = 6;
        goto LABEL_44;
      }
      if ((_DWORD)a3)
        goto LABEL_31;
      v10 = a1[68];
      return v10 != 0;
    case 7:
      v8 = "int";
      v9 = 7;
      goto LABEL_36;
    case 8:
      v8 = "int";
      v9 = 8;
      goto LABEL_36;
    case 9:
      v8 = "enum";
      v9 = 9;
      goto LABEL_36;
    case 10:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2858;
        v13 = 10;
        goto LABEL_44;
      }
      if ((_DWORD)a3)
        goto LABEL_31;
      v10 = a1[84];
      return v10 != 0;
    case 11:
      v8 = "double";
      v9 = 11;
      goto LABEL_36;
    case 12:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2858;
        v13 = 12;
        goto LABEL_44;
      }
      if ((_DWORD)a3)
        goto LABEL_31;
      v10 = a1[96];
      return v10 != 0;
    case 13:
      v8 = "int";
      v9 = 13;
      goto LABEL_36;
    case 14:
      v8 = "int";
      v9 = 14;
      goto LABEL_36;
    case 15:
      v8 = "double";
      v9 = 15;
      goto LABEL_36;
    case 16:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2858;
        v13 = 16;
        goto LABEL_44;
      }
      if ((_DWORD)a3)
        goto LABEL_31;
      v10 = a1[120];
      return v10 != 0;
    case 17:
      v8 = "int";
      v9 = 17;
      goto LABEL_36;
    case 18:
      if ((_DWORD)a3 == 1)
      {
        v12 = (ParamSpecMgr *)qword_253DF2858;
        v13 = 18;
LABEL_44:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v12, v13, a3, a4, a5, a6, a7, a8);
        return v10 != 0;
      }
      if (!(_DWORD)a3)
      {
        v10 = a1[128];
        return v10 != 0;
      }
LABEL_31:
      throwWrongQueryMode(a3, (uint64_t)"BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
    case 19:
      v8 = "int";
      v9 = 19;
      goto LABEL_36;
    case 20:
      v8 = "int";
      v9 = 20;
      goto LABEL_36;
    case 21:
      v8 = "int";
      v9 = 21;
      goto LABEL_36;
    case 22:
      v8 = "int";
      v9 = 22;
LABEL_36:
      throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t PrefiltererSearchParamSet::getIntParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  const char *v9;
  char v10;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  const void *ParamByParamId;
  const void *v18;
  const void *v19;

  switch(a2)
  {
    case 1:
      switch((int)a3)
      {
        case 0:
          result = a1[10];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 1;
          goto LABEL_75;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 1;
          goto LABEL_77;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 1;
          goto LABEL_79;
        default:
          goto LABEL_40;
      }
      return result;
    case 2:
      switch((int)a3)
      {
        case 0:
          result = a1[11];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 2;
          goto LABEL_75;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 2;
          goto LABEL_77;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 2;
          goto LABEL_79;
        default:
          goto LABEL_40;
      }
      return result;
    case 3:
      v9 = "enum";
      v10 = 3;
      goto LABEL_29;
    case 4:
      v9 = "double";
      v10 = 4;
      goto LABEL_29;
    case 5:
      switch((int)a3)
      {
        case 0:
          result = a1[16];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 5;
          goto LABEL_75;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 5;
          goto LABEL_77;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 5;
          goto LABEL_79;
        default:
          goto LABEL_40;
      }
      return result;
    case 6:
      v9 = "BOOL";
      v10 = 6;
      goto LABEL_29;
    case 7:
      switch((int)a3)
      {
        case 0:
          result = a1[18];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 7;
          goto LABEL_75;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 7;
          goto LABEL_77;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 7;
          goto LABEL_79;
        default:
          goto LABEL_40;
      }
      return result;
    case 8:
      switch((int)a3)
      {
        case 0:
          result = a1[19];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 8;
          goto LABEL_75;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 8;
          goto LABEL_77;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 8;
          goto LABEL_79;
        default:
          goto LABEL_40;
      }
      return result;
    case 9:
      v9 = "enum";
      v10 = 9;
      goto LABEL_29;
    case 10:
      v9 = "BOOL";
      v10 = 10;
      goto LABEL_29;
    case 11:
      v9 = "double";
      v10 = 11;
      goto LABEL_29;
    case 12:
      v9 = "BOOL";
      v10 = 12;
      goto LABEL_29;
    case 13:
      switch((int)a3)
      {
        case 0:
          result = a1[25];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 13;
          goto LABEL_75;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 13;
          goto LABEL_77;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 13;
          goto LABEL_79;
        default:
          goto LABEL_40;
      }
      return result;
    case 14:
      switch((int)a3)
      {
        case 0:
          result = a1[26];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 14;
          goto LABEL_75;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 14;
          goto LABEL_77;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 14;
          goto LABEL_79;
        default:
          goto LABEL_40;
      }
      return result;
    case 15:
      v9 = "double";
      v10 = 15;
      goto LABEL_29;
    case 16:
      v9 = "BOOL";
      v10 = 16;
      goto LABEL_29;
    case 17:
      switch((int)a3)
      {
        case 0:
          result = a1[31];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 17;
          goto LABEL_75;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 17;
          goto LABEL_77;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 17;
          goto LABEL_79;
        default:
          goto LABEL_40;
      }
      return result;
    case 18:
      v9 = "BOOL";
      v10 = 18;
LABEL_29:
      throwWrongTypeForParamId(v10, v9, "int", a4, a5, a6, a7, a8);
      return 0;
    case 19:
      switch((int)a3)
      {
        case 0:
          result = a1[33];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 19;
          goto LABEL_75;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 19;
          goto LABEL_77;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 19;
          goto LABEL_79;
        default:
          goto LABEL_40;
      }
      return result;
    case 20:
      switch((int)a3)
      {
        case 0:
          result = a1[34];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 20;
          goto LABEL_75;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 20;
          goto LABEL_77;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 20;
          goto LABEL_79;
        default:
          goto LABEL_40;
      }
      return result;
    case 21:
      switch((int)a3)
      {
        case 0:
          result = a1[35];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 21;
          goto LABEL_75;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 21;
          goto LABEL_77;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 21;
          goto LABEL_79;
        default:
          goto LABEL_40;
      }
      return result;
    case 22:
      switch((int)a3)
      {
        case 0:
          result = a1[36];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 22;
LABEL_75:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 22;
LABEL_77:
          v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 22;
LABEL_79:
          v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_40:
          throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

double PrefiltererSearchParamSet::getDoubleParameter(double *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  double result;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  const void *ParamByParamId;
  const void *v18;
  const void *v19;

  switch(a2)
  {
    case 1:
      v8 = "int";
      v9 = 1;
      goto LABEL_28;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_28;
    case 3:
      v8 = "enum";
      v9 = 3;
      goto LABEL_28;
    case 4:
      switch((int)a3)
      {
        case 0:
          result = a1[7];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 4;
          goto LABEL_39;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 4;
          goto LABEL_41;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 4;
          goto LABEL_43;
        default:
          goto LABEL_31;
      }
      return result;
    case 5:
      v8 = "int";
      v9 = 5;
      goto LABEL_28;
    case 6:
      v8 = "BOOL";
      v9 = 6;
      goto LABEL_28;
    case 7:
      v8 = "int";
      v9 = 7;
      goto LABEL_28;
    case 8:
      v8 = "int";
      v9 = 8;
      goto LABEL_28;
    case 9:
      v8 = "enum";
      v9 = 9;
      goto LABEL_28;
    case 10:
      v8 = "BOOL";
      v9 = 10;
      goto LABEL_28;
    case 11:
      switch((int)a3)
      {
        case 0:
          result = a1[11];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 11;
          goto LABEL_39;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 11;
          goto LABEL_41;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 11;
          goto LABEL_43;
        default:
          goto LABEL_31;
      }
      return result;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_28;
    case 13:
      v8 = "int";
      v9 = 13;
      goto LABEL_28;
    case 14:
      v8 = "int";
      v9 = 14;
      goto LABEL_28;
    case 15:
      switch((int)a3)
      {
        case 0:
          result = a1[14];
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 15;
LABEL_39:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 15;
LABEL_41:
          v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 15;
LABEL_43:
          v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_31:
          throwWrongQueryMode(a3, (uint64_t)"double", a3, a4, a5, a6, a7, a8);
          return 0.0;
      }
      return result;
    case 16:
      v8 = "BOOL";
      v9 = 16;
      goto LABEL_28;
    case 17:
      v8 = "int";
      v9 = 17;
      goto LABEL_28;
    case 18:
      v8 = "BOOL";
      v9 = 18;
      goto LABEL_28;
    case 19:
      v8 = "int";
      v9 = 19;
      goto LABEL_28;
    case 20:
      v8 = "int";
      v9 = 20;
      goto LABEL_28;
    case 21:
      v8 = "int";
      v9 = 21;
      goto LABEL_28;
    case 22:
      v8 = "int";
      v9 = 22;
LABEL_28:
      throwWrongTypeForParamId(v9, v8, "double", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0.0;
}

uint64_t PrefiltererSearchParamSet::getStringParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 1:
      v8 = "int";
      v9 = 1;
      goto LABEL_25;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_25;
    case 3:
      v8 = "enum";
      v9 = 3;
      goto LABEL_25;
    case 4:
      v8 = "double";
      v9 = 4;
      goto LABEL_25;
    case 5:
      v8 = "int";
      v9 = 5;
      goto LABEL_25;
    case 6:
      v8 = "BOOL";
      v9 = 6;
      goto LABEL_25;
    case 7:
      v8 = "int";
      v9 = 7;
      goto LABEL_25;
    case 8:
      v8 = "int";
      v9 = 8;
      goto LABEL_25;
    case 9:
      v8 = "enum";
      v9 = 9;
      goto LABEL_25;
    case 10:
      v8 = "BOOL";
      v9 = 10;
      goto LABEL_25;
    case 11:
      v8 = "double";
      v9 = 11;
      goto LABEL_25;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_25;
    case 13:
      v8 = "int";
      v9 = 13;
      goto LABEL_25;
    case 14:
      v8 = "int";
      v9 = 14;
      goto LABEL_25;
    case 15:
      v8 = "double";
      v9 = 15;
      goto LABEL_25;
    case 16:
      v8 = "BOOL";
      v9 = 16;
      goto LABEL_25;
    case 17:
      v8 = "int";
      v9 = 17;
      goto LABEL_25;
    case 18:
      v8 = "BOOL";
      v9 = 18;
      goto LABEL_25;
    case 19:
      v8 = "int";
      v9 = 19;
      goto LABEL_25;
    case 20:
      v8 = "int";
      v9 = 20;
      goto LABEL_25;
    case 21:
      v8 = "int";
      v9 = 21;
      goto LABEL_25;
    case 22:
      v8 = "int";
      v9 = 22;
LABEL_25:
      throwWrongTypeForParamId(v9, v8, "string", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

uint64_t PrefiltererSearchParamSet::getEnumParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;
  uint64_t result;
  ParamSpecMgr *v11;
  int v12;
  ParamSpecMgr *v13;
  int v14;
  ParamSpecMgr *v15;
  int v16;
  void *ParamByParamId;
  void *v18;
  void *v19;

  switch(a2)
  {
    case 1:
      v8 = "int";
      v9 = 1;
      goto LABEL_23;
    case 2:
      v8 = "int";
      v9 = 2;
      goto LABEL_23;
    case 3:
      switch((int)a3)
      {
        case 0:
          result = *(unsigned int *)(a1 + 48);
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 3;
          goto LABEL_35;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 3;
          goto LABEL_39;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 3;
          goto LABEL_43;
        default:
          goto LABEL_30;
      }
      return result;
    case 4:
      v8 = "double";
      v9 = 4;
      goto LABEL_23;
    case 5:
      v8 = "int";
      v9 = 5;
      goto LABEL_23;
    case 6:
      v8 = "BOOL";
      v9 = 6;
      goto LABEL_23;
    case 7:
      v8 = "int";
      v9 = 7;
      goto LABEL_23;
    case 8:
      v8 = "int";
      v9 = 8;
      goto LABEL_23;
    case 9:
      switch((int)a3)
      {
        case 0:
          result = *(unsigned int *)(a1 + 80);
          break;
        case 1:
          v11 = (ParamSpecMgr *)qword_253DF2858;
          v12 = 9;
LABEL_35:
          ParamByParamId = (void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          if (ParamByParamId)
          result = EnumParamSpec::getDefault((EnumParamSpec *)ParamByParamId);
          break;
        case 2:
          v13 = (ParamSpecMgr *)qword_253DF2858;
          v14 = 9;
LABEL_39:
          v18 = (void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          if (v18)
          result = EnumParamSpec::getMinVal((EnumParamSpec *)v18);
          break;
        case 3:
          v15 = (ParamSpecMgr *)qword_253DF2858;
          v16 = 9;
LABEL_43:
          v19 = (void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          if (v19)
          result = EnumParamSpec::getMaxVal((EnumParamSpec *)v19);
          break;
        default:
LABEL_30:
          throwWrongQueryMode(a3, (uint64_t)"enum", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    case 10:
      v8 = "BOOL";
      v9 = 10;
      goto LABEL_23;
    case 11:
      v8 = "double";
      v9 = 11;
      goto LABEL_23;
    case 12:
      v8 = "BOOL";
      v9 = 12;
      goto LABEL_23;
    case 13:
      v8 = "int";
      v9 = 13;
      goto LABEL_23;
    case 14:
      v8 = "int";
      v9 = 14;
      goto LABEL_23;
    case 15:
      v8 = "double";
      v9 = 15;
      goto LABEL_23;
    case 16:
      v8 = "BOOL";
      v9 = 16;
      goto LABEL_23;
    case 17:
      v8 = "int";
      v9 = 17;
      goto LABEL_23;
    case 18:
      v8 = "BOOL";
      v9 = 18;
      goto LABEL_23;
    case 19:
      v8 = "int";
      v9 = 19;
      goto LABEL_23;
    case 20:
      v8 = "int";
      v9 = 20;
      goto LABEL_23;
    case 21:
      v8 = "int";
      v9 = 21;
      goto LABEL_23;
    case 22:
      v8 = "int";
      v9 = 22;
LABEL_23:
      throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

void PrefiltererSearchParamSet::setBoolParameter(PrefiltererSearchParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  const char *v11;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      if (*((_DWORD *)this + 9))
      {
        v11 = "PrefiltererLookaheadApplyOnReseed";
        goto LABEL_28;
      }
      *((_BYTE *)this + 68) = v9;
      return;
    case 7:
      throwWrongTypeForParamId(7, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 8:
LABEL_11:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 9:
LABEL_12:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 10:
LABEL_13:
      if (*((_DWORD *)this + 9))
      {
        v11 = "PrefiltererAllowFirstNodeSkipping";
        goto LABEL_28;
      }
      *((_BYTE *)this + 84) = v9;
      return;
    case 11:
      throwWrongTypeForParamId(11, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 12:
LABEL_17:
      if (*((_DWORD *)this + 9))
      {
        v11 = "PrefiltererPelScoreUseBestCompScore";
        goto LABEL_28;
      }
      *((_BYTE *)this + 96) = v9;
      return;
    case 13:
      throwWrongTypeForParamId(13, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 14:
LABEL_20:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 15:
LABEL_21:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 16:
LABEL_22:
      if (*((_DWORD *)this + 9))
      {
        v11 = "PrefiltererReturnDistanceAdjustDuration";
        goto LABEL_28;
      }
      *((_BYTE *)this + 120) = v9;
      break;
    case 17:
      throwWrongTypeForParamId(17, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 18:
LABEL_26:
      if (*((_DWORD *)this + 9))
      {
        v11 = "PrefiltererSeedScoreIncludeWordEndScore";
LABEL_28:
        throwParamSetSetFailed(v11, "BOOL", a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *((_BYTE *)this + 128) = v9;
      }
      break;
    case 19:
      throwWrongTypeForParamId(19, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 20:
LABEL_30:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 21:
LABEL_31:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 22:
LABEL_32:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_33;
    default:
LABEL_33:
      throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void PrefiltererSearchParamSet::setIntParameter(PrefiltererSearchParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 1, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId)
      IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v9, 0, 0, v12, v13, v14, v15);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererActiveNodeCountLimit";
        goto LABEL_64;
      }
      *((_DWORD *)this + 10) = v9;
      return;
    case 2:
      v23 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 2, a3, a4, a5, a6, a7, a8);
      if (v23)
      IntParamSpec::validateValue((IntParamSpec *)v23, v9, 0, 0, v24, v25, v26, v27);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererBestScorePerAdditionalPhonemeScore";
        goto LABEL_64;
      }
      *((_DWORD *)this + 11) = v9;
      return;
    case 3:
      throwWrongTypeForParamId(3, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 4:
LABEL_12:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 5:
LABEL_13:
      v28 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 5, a3, a4, a5, a6, a7, a8);
      if (v28)
      IntParamSpec::validateValue((IntParamSpec *)v28, v9, 0, 0, v29, v30, v31, v32);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererLookaheadThreshScore";
        goto LABEL_64;
      }
      *((_DWORD *)this + 16) = v9;
      return;
    case 6:
      throwWrongTypeForParamId(6, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 7:
LABEL_19:
      v33 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 7, a3, a4, a5, a6, a7, a8);
      if (v33)
      IntParamSpec::validateValue((IntParamSpec *)v33, v9, 0, 0, v34, v35, v36, v37);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererMaxSeedScore";
        goto LABEL_64;
      }
      *((_DWORD *)this + 18) = v9;
      return;
    case 8:
      v38 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 8, a3, a4, a5, a6, a7, a8);
      if (v38)
      IntParamSpec::validateValue((IntParamSpec *)v38, v9, 0, 0, v39, v40, v41, v42);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererMinNodeScore";
        goto LABEL_64;
      }
      *((_DWORD *)this + 19) = v9;
      return;
    case 9:
      throwWrongTypeForParamId(9, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 10:
LABEL_28:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 11:
LABEL_29:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 12:
LABEL_30:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 13:
LABEL_31:
      v43 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 13, a3, a4, a5, a6, a7, a8);
      if (v43)
      IntParamSpec::validateValue((IntParamSpec *)v43, v9, 0, 0, v44, v45, v46, v47);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererReturnDistanceMaxFrames";
        goto LABEL_64;
      }
      *((_DWORD *)this + 25) = v9;
      return;
    case 14:
      v48 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 14, a3, a4, a5, a6, a7, a8);
      if (v48)
      IntParamSpec::validateValue((IntParamSpec *)v48, v9, 0, 0, v49, v50, v51, v52);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererReturnDistancePerFramePenalty";
        goto LABEL_64;
      }
      *((_DWORD *)this + 26) = v9;
      return;
    case 15:
      throwWrongTypeForParamId(15, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 16:
LABEL_41:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 17:
LABEL_42:
      v53 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 17, a3, a4, a5, a6, a7, a8);
      if (v53)
      IntParamSpec::validateValue((IntParamSpec *)v53, v9, 0, 0, v54, v55, v56, v57);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererReturnListMaxLength";
        goto LABEL_64;
      }
      *((_DWORD *)this + 31) = v9;
      return;
    case 18:
      throwWrongTypeForParamId(18, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 19:
LABEL_48:
      v58 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 19, a3, a4, a5, a6, a7, a8);
      if (v58)
      IntParamSpec::validateValue((IntParamSpec *)v58, v9, 0, 0, v59, v60, v61, v62);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererThreshScoreWhenSilenceBest";
        goto LABEL_64;
      }
      *((_DWORD *)this + 33) = v9;
      return;
    case 20:
      v63 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 20, a3, a4, a5, a6, a7, a8);
      if (v63)
      IntParamSpec::validateValue((IntParamSpec *)v63, v9, 0, 0, v64, v65, v66, v67);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererThreshScoreIncrementWhenNonSilenceBest";
        goto LABEL_64;
      }
      *((_DWORD *)this + 34) = v9;
      return;
    case 21:
      v68 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 21, a3, a4, a5, a6, a7, a8);
      if (v68)
      IntParamSpec::validateValue((IntParamSpec *)v68, v9, 0, 0, v69, v70, v71, v72);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererReturnListThreshScoreDecrement";
        goto LABEL_64;
      }
      *((_DWORD *)this + 35) = v9;
      break;
    case 22:
      v73 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 22, a3, a4, a5, a6, a7, a8);
      if (v73)
      IntParamSpec::validateValue((IntParamSpec *)v73, v9, 0, 0, v74, v75, v76, v77);
      if (*((_DWORD *)this + 9))
      {
        v22 = "PrefiltererPelBackoffThreshScoreDecrement";
LABEL_64:
        throwParamSetSetFailed(v22, "int", v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *((_DWORD *)this + 36) = v9;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void PrefiltererSearchParamSet::setDoubleParameter(PrefiltererSearchParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;
  void *ParamByParamId;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v9 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_5;
    case 4:
LABEL_5:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 4, a4, a5, a6, a7, a8, a9);
      if (ParamByParamId)
      DoubleParamSpec::validateValue((DoubleParamSpec *)ParamByParamId, a3, 0, 0, v13, v14, v15, v16, v17);
      if (*((_DWORD *)this + 9))
      {
        v24 = "PrefiltererLookaheadSequenceFirstPhonemeLMScale";
        goto LABEL_28;
      }
      *((double *)this + 7) = a3;
      return;
    case 5:
      throwWrongTypeForParamId(5, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_11;
    case 6:
LABEL_11:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_12;
    case 7:
LABEL_12:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_13;
    case 8:
LABEL_13:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_14;
    case 9:
LABEL_14:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_15;
    case 10:
LABEL_15:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_16;
    case 11:
LABEL_16:
      v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 11, a4, a5, a6, a7, a8, a9);
      if (v25)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v25, a3, 0, 0, v26, v27, v28, v29, v30);
      if (*((_DWORD *)this + 9))
      {
        v24 = "PrefiltererPelScoreScale";
        goto LABEL_28;
      }
      *((double *)this + 11) = a3;
      break;
    case 12:
      throwWrongTypeForParamId(12, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_22;
    case 13:
LABEL_22:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_23;
    case 14:
LABEL_23:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_24;
    case 15:
LABEL_24:
      v31 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 15, a4, a5, a6, a7, a8, a9);
      if (v31)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v31, a3, 0, 0, v32, v33, v34, v35, v36);
      if (*((_DWORD *)this + 9))
      {
        v24 = "PrefiltererReturnDistanceWordDurationFactor";
LABEL_28:
        throwParamSetSetFailed(v24, "double", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((double *)this + 14) = a3;
      }
      break;
    case 16:
      throwWrongTypeForParamId(16, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_31;
    case 17:
LABEL_31:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_32;
    case 18:
LABEL_32:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_33;
    case 19:
LABEL_33:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_34;
    case 20:
LABEL_34:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_35;
    case 21:
LABEL_35:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_36;
    case 22:
LABEL_36:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_37;
    default:
LABEL_37:
      throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
      return;
  }
}

void PrefiltererSearchParamSet::setStringParameter(PrefiltererSearchParamSet *this, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 20:
LABEL_21:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void PrefiltererSearchParamSet::setEnumParameter(PrefiltererSearchParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  void *ParamByParamId;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = a2;
  v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 3, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId)
      EnumParamSpec::validateValue((EnumParamSpec *)ParamByParamId, v9, v12, v13, v14, v15, v16, v17);
      if (*((_DWORD *)this + 9))
      {
        v24 = "PrefiltererDecimationType";
        goto LABEL_18;
      }
      *((_DWORD *)this + 12) = v9;
      break;
    case 4:
      throwWrongTypeForParamId(4, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 5:
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 6:
LABEL_11:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 7:
LABEL_12:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 8:
LABEL_13:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 9:
LABEL_14:
      v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2858, 9, a3, a4, a5, a6, a7, a8);
      if (v25)
      EnumParamSpec::validateValue((EnumParamSpec *)v25, v9, v26, v27, v28, v29, v30, v31);
      if (*((_DWORD *)this + 9))
      {
        v24 = "PrefiltererNodeSkippingType";
LABEL_18:
        throwParamSetSetFailed(v24, "enum", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((_DWORD *)this + 20) = v9;
      }
      break;
    case 10:
      throwWrongTypeForParamId(10, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 11:
LABEL_21:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 12:
LABEL_22:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 13:
LABEL_23:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 14:
LABEL_24:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 15:
LABEL_25:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 16:
LABEL_26:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 17:
LABEL_27:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 18:
LABEL_28:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 19:
LABEL_29:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 20:
LABEL_30:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 21:
LABEL_31:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 22:
LABEL_32:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_33;
    default:
LABEL_33:
      throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void PrefiltererSearchParamSet::~PrefiltererSearchParamSet(PrefiltererSearchParamSet *this)
{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((PrefiltererSearchParamSet *)((char *)this + 8));
}

{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((PrefiltererSearchParamSet *)((char *)this + 8));
  JUMPOUT(0x20BD149A8);
}

uint64_t TCollation::setCollation(TCollation *this)
{
  uint64_t v2;
  char *v3;
  uint64_t result;

  v3 = (char *)this + 16;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 4) = *((_QWORD *)v3 + 1);
  if (v2)
    MEMORY[0x20BD14990](v2, 0x1000C8052888210);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  result = *((_QWORD *)this + 1);
  if (result)
    result = MEMORY[0x20BD14990](result, 0x1000C8052888210);
  *((_QWORD *)this + 1) = 0;
  return result;
}

void TCollation::TCollation(TCollation *this)
{
  *((_QWORD *)this + 5) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  TCollation::setCollation(this);
}

void TCollation::setCollation(TCollation *this, TInputStream *a2)
{
  uint64_t v4;
  uint64_t Attribute;
  const TFileObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  _QWORD *v25;
  std::string *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  _QWORD *exception;
  std::string *v31;
  const char *v32;
  _QWORD *v33;
  std::string *v34;
  __int128 v35;
  const char *v36;
  _QWORD *v37;
  std::string *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  _BYTE __p[24];
  uint64_t v45;
  _BYTE v46[24];
  uint64_t v47;
  _BYTE v48[24];
  uint64_t v49;
  _BYTE v50[24];
  uint64_t v51;

  TCollation::setCollation(this);
  if (TInputStream::verifyHeader((uint64_t)a2, "Collation", (uint64_t)&pCollationVersion, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v48, &byte_209A88803);
    *(_QWORD *)v50 = aPpx;
    if ((v48[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v50[8], *(const std::string::value_type **)v48, *(std::string::size_type *)&v48[8]);
    }
    else
    {
      *(_OWORD *)&v50[8] = *(_OWORD *)v48;
      v51 = *(_QWORD *)&v48[16];
    }
    *(_QWORD *)v50 = &unk_24C214BA0;
    if (v51 >= 0)
      v29 = &v50[8];
    else
      v29 = *(const char **)&v50[8];
    conditionalAssert(v29, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/collation.cpp", 172, v20, v21);
    *(_QWORD *)v50 = aPpx;
    if (SHIBYTE(v51) < 0)
      operator delete(*(void **)&v50[8]);
    if ((v48[23] & 0x80000000) != 0)
      operator delete(*(void **)v48);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v50, &byte_209A88803);
    *exception = aPpx;
    v31 = (std::string *)(exception + 1);
    if ((v50[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v31, *(const std::string::value_type **)v50, *(std::string::size_type *)&v50[8]);
    }
    else
    {
      v39 = *(_OWORD *)v50;
      exception[3] = *(_QWORD *)&v50[16];
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v39;
    }
    *exception = &unk_24C214BA0;
  }
  TFileObjectParser::TFileObjectParser((TFileObjectParser *)v50, a2);
  v4 = *(_QWORD *)v50;
  *(_QWORD *)v48 = dword_209A88648;
  *(_OWORD *)&v48[8] = xmmword_209A57D80;
  v49 = -1;
  if (TFileObject::verify(*(uint64_t *)v50, (uint64_t)v48, 1uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *(_QWORD *)v46 = aPpx;
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v46[8], *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      *(_OWORD *)&v46[8] = *(_OWORD *)__p;
      v47 = *(_QWORD *)&__p[16];
    }
    *(_QWORD *)v46 = &unk_24C216908;
    if (v47 >= 0)
      v32 = &v46[8];
    else
      v32 = *(const char **)&v46[8];
    conditionalAssert(v32, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/collation.cpp", 182, v22, v23);
    *(_QWORD *)v46 = aPpx;
    if (SHIBYTE(v47) < 0)
      operator delete(*(void **)&v46[8]);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v33 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, &byte_209A88803);
    *v33 = aPpx;
    v34 = (std::string *)(v33 + 1);
    if ((v46[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)v46, *(std::string::size_type *)&v46[8]);
    }
    else
    {
      v40 = *(_OWORD *)v46;
      v33[3] = *(_QWORD *)&v46[16];
      *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v40;
    }
    *v33 = &unk_24C216908;
  }
  Attribute = TFileObject::getAttribute(v4, dword_209A88648);
  v6 = (const TFileObject *)Attribute;
  if (Attribute)
  {
    *(_QWORD *)v46 = &unk_209A88640;
    *(_OWORD *)&v46[8] = xmmword_209A57DB0;
    v47 = -1;
    if (TFileObject::verify(Attribute, (uint64_t)v46, 1uLL, 1))
    {
      std::string::basic_string[abi:ne180100]<0>(v42, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v43) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v42[0], (std::string::size_type)v42[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v42;
        v45 = v43;
      }
      *(_QWORD *)__p = &unk_24C216908;
      if (v45 >= 0)
        v36 = &__p[8];
      else
        v36 = *(const char **)&__p[8];
      conditionalAssert(v36, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/collation.cpp", 190, v27, v28);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v45) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v43) < 0)
        operator delete(v42[0]);
      v37 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *v37 = aPpx;
      v38 = (std::string *)(v37 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v41 = *(_OWORD *)__p;
        v37[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v41;
      }
      *v37 = &unk_24C216908;
    }
    TCollation::initSerializedTable(this, v6);
    TCollation::initCharacterClasses(this);
    v11 = *(_QWORD *)this + 1;
    v12 = *((_QWORD *)this + 2);
    for (i = 4; i != 0x40000; i += 4)
    {
      if (!*(_DWORD *)(v12 + i))
      {
        if (v11 >= 0x10000)
        {
          tknPrintf("Error: Invalid collation table. Should have %llu classes of characters/string max.\n", v7, v8, v9, v10, 0xFFFFLL);
          std::string::basic_string[abi:ne180100]<0>(v42, &byte_209A88803);
          *(_QWORD *)__p = aPpx;
          if (SHIBYTE(v43) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v42[0], (std::string::size_type)v42[1]);
          }
          else
          {
            *(_OWORD *)&__p[8] = *(_OWORD *)v42;
            v45 = v43;
          }
          *(_QWORD *)__p = &unk_24C216908;
          if (v45 >= 0)
            v24 = &__p[8];
          else
            v24 = *(const char **)&__p[8];
          conditionalAssert(v24, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/collation.cpp", 209, v18, v19);
          *(_QWORD *)__p = aPpx;
          if (SHIBYTE(v45) < 0)
            operator delete(*(void **)&__p[8]);
          if (SHIBYTE(v43) < 0)
            operator delete(v42[0]);
          v25 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *v25 = aPpx;
          v26 = (std::string *)(v25 + 1);
          if ((__p[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
          }
          else
          {
            v35 = *(_OWORD *)__p;
            v25[3] = *(_QWORD *)&__p[16];
            *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v35;
          }
          *v25 = &unk_24C216908;
        }
        *(_DWORD *)(v12 + i) = v11++;
      }
    }
    v14 = *((_QWORD *)this + 3);
    v15 = (uint64_t *)*((_QWORD *)this + 4);
    v16 = 126 - 2 * __clz(((uint64_t)v15 - v14) >> 4);
    *(_QWORD *)__p = sortCollationPair;
    if (v15 == (uint64_t *)v14)
      v17 = 0;
    else
      v17 = v16;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*,false>(v14, v15, (uint64_t (**)(uint64_t *, uint64_t *))__p, v17, 1);
  }
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v50);
}

void sub_209A537F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,int a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,void *a44,int a45,__int16 a46,char a47,char a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;
  int v53;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v53 & 1) == 0)
    {
LABEL_6:
      TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&a43);
      _Unwind_Resume(a1);
    }
  }
  else if (!v53)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v52);
  goto LABEL_6;
}

void TCollation::~TCollation(TCollation *this)
{
  void *v2;

  TCollation::setCollation(this);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

__int32 *TCollation::initSerializedTable(TCollation *this, const TFileObject *a2)
{
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  TFileObject *j;
  uint64_t v9;
  int *v10;
  __int32 *v12;
  size_t v13;
  __int32 *v14;
  __int32 *result;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  _QWORD *v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  const char *v26;
  _QWORD *exception;
  std::string *v28;
  const char *v29;
  _QWORD *v30;
  std::string *v31;
  __int128 v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  _BYTE __p[24];
  uint64_t v37;
  void *v38;
  int64x2_t v39;
  uint64_t v40;
  __int32 *v41;
  __int128 v42;
  _BYTE v43[1024];
  char v44;

  v41 = (__int32 *)v43;
  v42 = xmmword_209A57DD0;
  v44 = 1;
  for (i = *((_QWORD *)a2 + 3); i; i = *(_QWORD *)(i + 16))
  {
    v38 = &unk_209A88640;
    v39 = vdupq_n_s64(1uLL);
    v40 = -1;
    if (TFileObject::verify(i, (uint64_t)&v38, 1uLL, 1))
    {
      std::string::basic_string[abi:ne180100]<0>(v34, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v35) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v34[0], (std::string::size_type)v34[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v34;
        v37 = v35;
      }
      *(_QWORD *)__p = &unk_24C216908;
      if (v37 >= 0)
        v26 = &__p[8];
      else
        v26 = *(const char **)&__p[8];
      conditionalAssert(v26, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/collation.cpp", 104, v21, v22);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v37) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v35) < 0)
        operator delete(v34[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *exception = aPpx;
      v28 = (std::string *)(exception + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v32 = *(_OWORD *)__p;
        exception[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v32;
      }
      *exception = &unk_24C216908;
    }
    if (*(_QWORD *)this >= 0xFFFFuLL)
    {
      tknPrintf("Error: Invalid collation table. Should have %llu classes of characters/strings max.\n", v4, v5, v6, v7, 0xFFFFLL);
      std::string::basic_string[abi:ne180100]<0>(v34, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v35) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v34[0], (std::string::size_type)v34[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v34;
        v37 = v35;
      }
      *(_QWORD *)__p = &unk_24C216908;
      if (v37 >= 0)
        v29 = &__p[8];
      else
        v29 = *(const char **)&__p[8];
      conditionalAssert(v29, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/collation.cpp", 110, v23, v24);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v37) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v35) < 0)
        operator delete(v34[0]);
      v30 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *v30 = aPpx;
      v31 = (std::string *)(v30 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v31, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v33 = *(_OWORD *)__p;
        v30[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v33;
      }
      *v30 = &unk_24C216908;
    }
    for (j = *(TFileObject **)(i + 24); j; j = (TFileObject *)*((_QWORD *)j + 2))
    {
      if (TFileObject::verify(j, 0, 0))
      {
        std::string::basic_string[abi:ne180100]<0>(v34, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v35) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v34[0], (std::string::size_type)v34[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v34;
          v37 = v35;
        }
        *(_QWORD *)__p = &unk_24C216908;
        if (v37 >= 0)
          v18 = &__p[8];
        else
          v18 = *(const char **)&__p[8];
        conditionalAssert(v18, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/collation.cpp", 117, v16, v17);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v37) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v35) < 0)
          operator delete(v34[0]);
        v19 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *v19 = aPpx;
        v20 = (std::string *)(v19 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v25 = *(_OWORD *)__p;
          v19[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v25;
        }
        *v19 = &unk_24C216908;
      }
      v9 = 0;
      v10 = (int *)*((_QWORD *)j + 3);
      while (v10[v9++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v41, *((unint64_t *)&v42 + 1), v10, v9 - 1);
      *(_DWORD *)__p = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v41, *((unint64_t *)&v42 + 1), (int *)__p, 1uLL);
    }
    *(_DWORD *)__p = 0;
    TBuffer<wchar_t>::insert((uint64_t)&v41, *((unint64_t *)&v42 + 1), (int *)__p, 1uLL);
    ++*(_QWORD *)this;
  }
  v12 = (__int32 *)operator new[]();
  *((_QWORD *)this + 1) = v12;
  v13 = *((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1) >= (unint64_t)v42)
  {
    if (v44)
    {
      LODWORD(v38) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v41, *((unint64_t *)&v42 + 1), (int *)&v38, 1uLL);
      v14 = v41;
      v13 = --*((_QWORD *)&v42 + 1);
    }
    else
    {
      v14 = v41;
      if ((_QWORD)v42)
        v41[(_QWORD)v42 - 1] = 0;
    }
  }
  else
  {
    v14 = v41;
    v41[*((_QWORD *)&v42 + 1)] = 0;
  }
  result = wmemcpy(v12, v14, v13);
  if (v44)
  {
    result = v41;
    if (v41 != (__int32 *)v43)
    {
      if (v41)
        return (__int32 *)MEMORY[0x20BD149A8]();
    }
  }
  return result;
}

void sub_209A53F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, void *a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;
  int v25;
  uint64_t v26;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (LOBYTE(STACK[0x478]))
      {
        if (a24 != v26 && a24 != 0)
          MEMORY[0x20BD149A8]();
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void TCollation::initCharacterClasses(TCollation *this)
{
  void *v2;
  unint64_t v3;
  char **v4;
  const __int32 *v5;
  unint64_t v6;
  __int32 v7;
  unint64_t v8;
  const __int32 **v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  const __int32 **v16;
  char *v17;
  char *v18;
  const __int32 **v19;
  const __int32 *v20;
  __int32 v21;

  v2 = (void *)operator new[]();
  *((_QWORD *)this + 2) = v2;
  bzero(v2, 0x40000uLL);
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = (char **)((char *)this + 24);
    v5 = (const __int32 *)*((_QWORD *)this + 1);
    v6 = 1;
    do
    {
      v7 = *v5;
      if (*v5)
      {
        do
        {
          if (wcslen(v5) == 1)
          {
            *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v7) = v6;
          }
          else
          {
            v9 = (const __int32 **)*((_QWORD *)this + 4);
            v8 = *((_QWORD *)this + 5);
            if ((unint64_t)v9 >= v8)
            {
              v11 = ((char *)v9 - *v4) >> 4;
              v12 = v11 + 1;
              if ((unint64_t)(v11 + 1) >> 60)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v13 = v8 - (_QWORD)*v4;
              if (v13 >> 3 > v12)
                v12 = v13 >> 3;
              if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
                v14 = 0xFFFFFFFFFFFFFFFLL;
              else
                v14 = v12;
              if (v14)
                v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)this + 40, v14);
              else
                v15 = 0;
              v16 = (const __int32 **)&v15[16 * v11];
              *v16 = v5;
              v16[1] = (const __int32 *)v6;
              v18 = (char *)*((_QWORD *)this + 3);
              v17 = (char *)*((_QWORD *)this + 4);
              v19 = v16;
              if (v17 != v18)
              {
                do
                {
                  *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
                  v19 -= 2;
                  v17 -= 16;
                }
                while (v17 != v18);
                v17 = *v4;
              }
              v10 = v16 + 2;
              *((_QWORD *)this + 3) = v19;
              *((_QWORD *)this + 4) = v16 + 2;
              *((_QWORD *)this + 5) = &v15[16 * v14];
              if (v17)
                operator delete(v17);
            }
            else
            {
              *v9 = v5;
              v9[1] = (const __int32 *)v6;
              v10 = v9 + 2;
            }
            *((_QWORD *)this + 4) = v10;
          }
          v20 = &v5[wcslen(v5)];
          v21 = v20[1];
          v5 = v20 + 1;
          v7 = v21;
        }
        while (v21);
        v3 = *(_QWORD *)this;
      }
      ++v5;
    }
    while (v3 > v6++);
  }
}

uint64_t sortCollationPair(const __int32 **a1, const __int32 **a2)
{
  return wcscmp(*a1, *a2) >> 31;
}

uint64_t TCollation::collateCharSlow(uint64_t a1, unsigned int *a2, unint64_t *a3)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  unint64_t v20;

  *a3 = 1;
  result = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  if (WORD1(result))
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    result = *(unsigned int *)(v5 + 4 * result);
  v9 = a1 + 24;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(v9 + 8);
  v10 = v8 - v7;
  if (v8 != v7)
  {
    v11 = 0;
    v12 = v10 >> 4;
    if (v12 <= 1)
      v12 = 1;
    v13 = 1;
    do
    {
      v14 = *(int **)(v7 + 16 * v11);
      v15 = *v14;
      if (*v14)
      {
        v16 = v14 + 1;
        v17 = (int *)a2;
        do
        {
          v18 = *v17;
          if (!*v17)
            break;
          if (v15 != v18)
          {
            if (v15 > v18)
              return result;
            goto LABEL_20;
          }
          ++v17;
          v19 = *v16++;
          v15 = v19;
        }
        while (v19);
      }
      else
      {
        v17 = (int *)a2;
      }
      v20 = ((char *)v17 - (char *)a2) >> 2;
      if (v20 > v13)
      {
        *a3 = v20;
        result = *(unsigned int *)(v7 + 16 * v11 + 8);
        v13 = v20;
      }
LABEL_20:
      ++v11;
    }
    while (v11 != v12);
  }
  return result;
}

uint64_t TCollation::collprefixcmp(_QWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  unint64_t v16;

  v6 = 0;
  while (1)
  {
    v8 = *a2++;
    v7 = v8;
    if (!v8)
      break;
    v16 = 1;
    v9 = (unsigned int *)(a3 + 4 * v6);
    v10 = *v9;
    v11 = a1[3] == a1[4] || (_DWORD)v10 == 0;
    if (v11 || !v9[1])
    {
      v13 = a1[2];
      if (WORD1(v10))
        v14 = 1;
      else
        v14 = v13 == 0;
      if (!v14)
        LODWORD(v10) = *(_DWORD *)(v13 + 4 * v10);
      v12 = 1;
    }
    else
    {
      LODWORD(v10) = TCollation::collateCharSlow((uint64_t)a1, v9, &v16);
      v12 = v16;
    }
    v6 += v12;
    result = (v7 - v10);
    if ((_DWORD)result)
      return result;
  }
  return 0;
}

uint64_t TCollation::collate(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  result = *a2;
  if ((_DWORD)result)
  {
    v6 = a2;
    v7 = 0;
    do
    {
      v10 = 0;
      if (a1[3] == a1[4] || !a2[1])
      {
        if (!WORD1(result))
        {
          v9 = a1[2];
          if (v9)
            LODWORD(result) = *(_DWORD *)(v9 + 4 * result);
        }
        v8 = 1;
      }
      else
      {
        LODWORD(result) = TCollation::collateCharSlow((uint64_t)a1, a2, &v10);
        v8 = v10;
      }
      v11 = result;
      TBuffer<wchar_t>::insert(a3, *(_QWORD *)(a3 + 16), &v11, 1uLL);
      v7 += v8;
      a2 = &v6[v7];
      result = *a2;
    }
    while ((_DWORD)result);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(a2 - 2, (uint64_t *)v9);
        if ((_DWORD)result)
        {
          v20 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(a2 - 2);
          *(a2 - 2) = v20;
          LODWORD(v20) = *(_DWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)v9, (uint64_t *)(v9 + 16), a2 - 2, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 2), a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v9, v9 + 16, v9 + 32, v9 + 48, (uint64_t)(a2 - 2), a3);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v9, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v9, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 16 * (v13 >> 1);
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)(v9 + 16 * (v13 >> 1)), (uint64_t *)v9, a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)v9, (uint64_t *)(v9 + 16 * (v13 >> 1)), a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)(v9 + 16), (uint64_t *)(v15 - 16), a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)(v9 + 32), (uint64_t *)(v9 + 16 + 16 * v14), a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)(v15 - 16), (uint64_t *)v15, (uint64_t *)(v9 + 16 + 16 * v14), a3);
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            LODWORD(v16) = *(_DWORD *)(v9 + 8);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v15 + 8);
            *(_DWORD *)(v15 + 8) = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)((uint64_t *)(v9 - 16), (uint64_t *)v9) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&)>((uint64_t *)v9, (unint64_t)a2, (uint64_t (**)(__int128 *, uint64_t *))a3);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&)>((uint64_t *)v9, (unint64_t)a2, (uint64_t (**)(uint64_t *, __int128 *))a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v9, v17, a3);
          v9 = (uint64_t)(v17 + 2);
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t)(v17 + 2), a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v17 + 2);
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if ((uint64_t *)v9 != a2)
          return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*,std::pair<wchar_t const*,wchar_t>*>(v9, (uint64_t)a2, (uint64_t)a2, (unsigned int (**)(uint64_t, uint64_t))a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  if ((_OWORD *)result != a2)
  {
    v16 = v3;
    v17 = v4;
    v6 = result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = 0;
      v10 = (_OWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v15 = *v10;
          v12 = v9;
          while (1)
          {
            v13 = v6 + v12;
            *(_QWORD *)(v13 + 16) = *(_QWORD *)(v6 + v12);
            *(_DWORD *)(v13 + 24) = *(_DWORD *)(v6 + v12 + 8);
            if (!v12)
              break;
            v12 -= 16;
            result = (*a3)(&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              v14 = v6 + v12 + 16;
              goto LABEL_10;
            }
          }
          v14 = v6;
LABEL_10:
          *(_QWORD *)v14 = v15;
          *(_DWORD *)(v14 + 8) = DWORD2(v15);
        }
        v7 = v10 + 1;
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if ((_OWORD *)result != a2)
  {
    v13 = v3;
    v14 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = result - 16;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12 = *v6;
          v11 = v9;
          do
          {
            *(_QWORD *)(v11 + 32) = *(_QWORD *)(v11 + 16);
            *(_DWORD *)(v11 + 40) = *(_DWORD *)(v11 + 24);
            result = (*a3)(&v12, v11);
            v11 -= 16;
          }
          while ((result & 1) != 0);
          *(_QWORD *)(v11 + 32) = v12;
          *(_DWORD *)(v11 + 40) = DWORD2(v12);
        }
        v7 = v6 + 1;
        v9 += 16;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      v11 = (int *)(a3 + 1);
      result = 1;
      v12 = (int *)(a1 + 1);
LABEL_9:
      v14 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    v16 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v16;
    if ((*a4)(a3, a2))
    {
      v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      v11 = (int *)(a3 + 1);
      result = 2;
      v12 = (int *)(a2 + 1);
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v14 = (int *)(a2 + 1);
    LODWORD(v13) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = v13;
    if ((*a4)(a2, a1))
    {
      v15 = *a1;
      *a1 = *a2;
      v12 = (int *)(a1 + 1);
      *a2 = v15;
      result = 2;
LABEL_10:
      v18 = *v12;
      *v12 = *v14;
      *v14 = v18;
      return result;
    }
  }
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&)>(uint64_t *a1, unint64_t a2, uint64_t (**a3)(__int128 *, uint64_t *))
{
  unint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  __int128 v11;

  v4 = a2;
  v11 = *(_OWORD *)a1;
  if (((*a3)(&v11, (uint64_t *)(a2 - 16)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 += 2;
    while (((*a3)(&v11, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 2;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = (*a3)(&v11, v7);
      v7 = v6 + 2;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 16;
    while (((*a3)(&v11, (uint64_t *)v4) & 1) != 0);
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *v6;
    *v6 = *(_QWORD *)v4;
    *(_QWORD *)v4 = v9;
    LODWORD(v9) = *((_DWORD *)v6 + 2);
    *((_DWORD *)v6 + 2) = *(_DWORD *)(v4 + 8);
    *(_DWORD *)(v4 + 8) = v9;
    do
      v6 += 2;
    while (!(*a3)(&v11, v6));
    do
      v4 -= 16;
    while (((*a3)(&v11, (uint64_t *)v4) & 1) != 0);
  }
  if (v6 - 2 != a1)
  {
    *a1 = *(v6 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v6 - 2);
  }
  *(v6 - 2) = v11;
  *((_DWORD *)v6 - 2) = DWORD2(v11);
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&)>(uint64_t *a1, unint64_t a2, uint64_t (**a3)(uint64_t *, __int128 *))
{
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *result;
  __int128 v12;

  v6 = 0;
  v12 = *(_OWORD *)a1;
  do
    v6 += 2;
  while (((*a3)(&a1[v6], &v12) & 1) != 0);
  v7 = (unint64_t)&a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v7 >= a2)
        break;
      a2 -= 16;
    }
    while (((*a3)((uint64_t *)a2, &v12) & 1) == 0);
  }
  else
  {
    do
      a2 -= 16;
    while (!(*a3)((uint64_t *)a2, &v12));
  }
  v8 = (__int128 *)&a1[v6];
  if (v7 < a2)
  {
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)v8;
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_QWORD *)v9 = v10;
      LODWORD(v10) = *((_DWORD *)v8 + 2);
      *((_DWORD *)v8 + 2) = *(_DWORD *)(v9 + 8);
      *(_DWORD *)(v9 + 8) = v10;
      do
        ++v8;
      while (((*a3)((uint64_t *)v8, &v12) & 1) != 0);
      do
        v9 -= 16;
      while (!(*a3)((uint64_t *)v9, &v12));
    }
    while ((unint64_t)v8 < v9);
  }
  result = (uint64_t *)(v8 - 1);
  if (v8 - 1 != (__int128 *)a1)
  {
    *a1 = *((_QWORD *)v8 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v8 - 2);
  }
  *((_QWORD *)v8 - 2) = v12;
  *((_DWORD *)v8 - 2) = DWORD2(v12);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v6 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, (uint64_t *)a1))
      {
        v8 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        LODWORD(v8) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)a1, (uint64_t *)(a1 + 16), a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2), a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 2), a3);
      return 1;
    default:
      v9 = (uint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), a3);
      v10 = (uint64_t *)(a1 + 48);
      if ((uint64_t *)(a1 + 48) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v10, v9))
    {
      v16 = *(_OWORD *)v10;
      v13 = v11;
      while (1)
      {
        v14 = a1 + v13;
        *(_QWORD *)(v14 + 48) = *(_QWORD *)(a1 + v13 + 32);
        *(_DWORD *)(v14 + 56) = *(_DWORD *)(a1 + v13 + 40);
        if (v13 == -32)
          break;
        v13 -= 16;
        if (((*a3)((uint64_t *)&v16, (uint64_t *)(v14 + 16)) & 1) == 0)
        {
          v15 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *(_QWORD *)v15 = v16;
      *(_DWORD *)(v15 + 8) = DWORD2(v16);
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3, a5);
  result = (*a5)((uint64_t *)a4, (uint64_t *)a3);
  if ((_DWORD)result)
  {
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v11;
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v11;
    result = (*a5)((uint64_t *)a3, (uint64_t *)a2);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
      LODWORD(v12) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v12;
      result = (*a5)((uint64_t *)a2, (uint64_t *)a1);
      if ((_DWORD)result)
      {
        v13 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a2, a3, a4, a6);
  result = (*a6)((uint64_t *)a5, (uint64_t *)a4);
  if ((_DWORD)result)
  {
    v13 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v13;
    LODWORD(v13) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v13;
    result = (*a6)((uint64_t *)a4, (uint64_t *)a3);
    if ((_DWORD)result)
    {
      v14 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v14;
      LODWORD(v14) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v14;
      result = (*a6)((uint64_t *)a3, (uint64_t *)a2);
      if ((_DWORD)result)
      {
        v15 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v15;
        LODWORD(v15) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v15;
        result = (*a6)((uint64_t *)a2, (uint64_t *)a1);
        if ((_DWORD)result)
        {
          v16 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v16;
          LODWORD(v16) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v16;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*,std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__int128 *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if ((*a4)(v14, a1))
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          LODWORD(v15) = *(_DWORD *)(v14 + 8);
          *(_DWORD *)(v14 + 8) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a4, v9, (__int128 *)a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      v17 = a2 - 16;
      do
      {
        v18 = *(_QWORD *)a1;
        v19 = *(_DWORD *)(a1 + 8);
        v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a4, v16);
        if (v17 == v20)
        {
          *(_QWORD *)v20 = v18;
          *(_DWORD *)(v20 + 8) = v19;
        }
        else
        {
          *(_QWORD *)v20 = *(_QWORD *)v17;
          *(_DWORD *)(v20 + 8) = *(_DWORD *)(v17 + 8);
          *(_QWORD *)v17 = v18;
          *(_DWORD *)(v17 + 8) = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, v20 + 16, (uint64_t (**)(uint64_t, uint64_t))a4, (v20 + 16 - a1) >> 4);
        }
        v17 -= 16;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t result, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v20 = v4;
    v21 = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v12 = ((uint64_t)a4 - result) >> 3;
      v13 = v12 + 1;
      v14 = result + 16 * (v12 + 1);
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 16))
      {
        v14 += 16;
        v13 = v15;
      }
      result = ((uint64_t (*)(uint64_t, __int128 *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v19 = *v7;
        do
        {
          v16 = v14;
          *(_QWORD *)v7 = *(_QWORD *)v14;
          *((_DWORD *)v7 + 2) = *(_DWORD *)(v14 + 8);
          if (v9 < v13)
            break;
          v17 = (2 * v13) | 1;
          v14 = v8 + 16 * v17;
          v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 16 * v17, v14 + 16))
            {
              v14 += 16;
              v17 = v18;
            }
          }
          result = ((uint64_t (*)(uint64_t, __int128 *))*a2)(v14, &v19);
          v7 = (__int128 *)v16;
          v13 = v17;
        }
        while (!(_DWORD)result);
        *(_QWORD *)v16 = v19;
        *(_DWORD *)(v16 + 8) = DWORD2(v19);
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 16 * v6 + 16;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 16 * v6 + 16, a1 + 16 * v6 + 32))
    {
      v9 += 16;
      v10 = v11;
    }
    *(_QWORD *)a1 = *(_QWORD *)v9;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v9 + 8);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v14 = v4;
    v15 = v5;
    v8 = result;
    v9 = v6 >> 1;
    v10 = result + 16 * (v6 >> 1);
    v11 = (__int128 *)(a2 - 16);
    result = (*a3)(v10, a2 - 16);
    if ((_DWORD)result)
    {
      v13 = *v11;
      do
      {
        v12 = v10;
        *(_QWORD *)v11 = *(_QWORD *)v10;
        *((_DWORD *)v11 + 2) = *(_DWORD *)(v10 + 8);
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = v8 + 16 * v9;
        result = (*a3)(v10, (uint64_t)&v13);
        v11 = (__int128 *)v12;
      }
      while ((result & 1) != 0);
      *(_QWORD *)v12 = v13;
      *(_DWORD *)(v12 + 8) = DWORD2(v13);
    }
  }
  return result;
}

uint64_t ThreadedRecogController::ThreadedRecogController(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = &off_24C217A48;
  v12 = MemChunkAlloc(0x628uLL, 0);
  v13 = (_QWORD *)DgnThread<RecogCtlThreadWorker>::DgnThread((uint64_t)v12, a2, 0, "RecogController");
  *v13 = &off_24C214AE8;
  v14 = v13[2];
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v14;
  v15 = v13[7];
  *(_QWORD *)(v15 + 264) = a3;
  *(_BYTE *)(v15 + 272) = a4;
  *(_QWORD *)(v15 + 280) = a5;
  *(_QWORD *)(v15 + 288) = a6;
  DgnThreadClient::startup(*(DgnThreadClient **)(a1 + 8));
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 256);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v16;
  return a1;
}

void ThreadedRecogController::~ThreadedRecogController(ThreadedRecogController *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_24C217A48;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    *(_BYTE *)(*(_QWORD *)(v2 + 424) + 419) = 0;
    *(_BYTE *)(v2 + 419) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  if (DgnThreadClient::isLive(*((DgnThreadClient **)this + 1))
    && !DgnThreadClient::hasErrored(*((DgnThreadClient **)this + 1)))
  {
    DgnThreadClient::shutdown(*((DgnThreadClient **)this + 1), v3, v4, v5, v6, v7, v8, v9);
  }
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v10 = (_QWORD *)*((_QWORD *)this + 1);
  if (v10)
  {
    (*(void (**)(_QWORD))*v10)(*((_QWORD *)this + 1));
    MemChunkFree(v10, 0);
  }
  *((_QWORD *)this + 1) = 0;
  DgnDelete<ReproMgr>(*((ReproMgr **)this + 5));
  *((_QWORD *)this + 5) = 0;
}

{
  ThreadedRecogController::~ThreadedRecogController(this);
  JUMPOUT(0x20BD149A8);
}

void ThreadedRecogController::printSize(ThreadedRecogController *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  ReproMgr *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 290, (DgnString *)&v60);
  if (v61)
    v16 = (char *)v60;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v60);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = (ReproMgr *)*((_QWORD *)this + 5);
  if (v21)
  {
    v59 = 0;
    v60 = 0;
    v22 = (a3 + 1);
    v58 = 0;
    ReproMgr::printSize(v21, 0xFFFFFFFFLL, v22, &v60, &v59, &v58);
    *a4 += v60;
    *a5 += v59;
    *a6 += v58;
  }
  else
  {
    v22 = (a3 + 1);
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v23 = 4;
  else
    v23 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 293, (DgnString *)&v60);
  if (v61)
    v28 = (char *)v60;
  else
    v28 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v22, &byte_209A88803, (34 - a3), (34 - a3), v28, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v60);
  *a4 += v23;
  *a5 += v23;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v29 = 4;
  else
    v29 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 294, (DgnString *)&v60);
  if (v61)
    v34 = (char *)v60;
  else
    v34 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, v22, &byte_209A88803, (34 - a3), (34 - a3), v34, v29, v29, 0);
  DgnString::~DgnString((DgnString *)&v60);
  *a4 += v29;
  *a5 += v29;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v35 = 4;
  else
    v35 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 295, (DgnString *)&v60);
  if (v61)
    v40 = (char *)v60;
  else
    v40 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, v22, &byte_209A88803, (34 - a3), (34 - a3), v40, v35, v35, 0);
  DgnString::~DgnString((DgnString *)&v60);
  *a4 += v35;
  *a5 += v35;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v41 = 4;
  else
    v41 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 296, (DgnString *)&v60);
  if (v61)
    v46 = (char *)v60;
  else
    v46 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v22, &byte_209A88803, (34 - a3), (34 - a3), v46, v41, v41, 0);
  DgnString::~DgnString((DgnString *)&v60);
  *a4 += v41;
  *a5 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v47 = 4;
  else
    v47 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 297, (DgnString *)&v60);
  if (v61)
    v52 = (char *)v60;
  else
    v52 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v22, &byte_209A88803, (34 - a3), (34 - a3), v52, v47, v47, 0);
  DgnString::~DgnString((DgnString *)&v60);
  *a4 += v47;
  *a5 += v47;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 300, (DgnString *)&v60);
  if (v61)
    v57 = (char *)v60;
  else
    v57 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, a3, &byte_209A88803, (35 - a3), (35 - a3), v57, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v60);
}

void sub_209A559E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedRecogController::setupRecognizers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v18;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v18, *(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a2, a3, a4, a5, a6, a7, a8, a9);
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v18);
}

void sub_209A55AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedRecogController::recognizeOneSingleLayer(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, uint64_t a12, uint64_t a13, __int16 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19;
  _QWORD v28[2];

  Latch<MemChunkRegion,LatchAdapter>::Latch(v28, *(_QWORD *)(a1 + 16));
  v19 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, __int16, uint64_t, uint64_t, __int16, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)v28);
  return v19;
}

void sub_209A55BC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  Latch<MemChunkRegion,LatchAdapter>::release(v1 - 96);
  _Unwind_Resume(a1);
}

uint64_t ThreadedRecogController::haveCompletePrefilterResult(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 168))(*((_QWORD *)this + 3));
}

uint64_t *ThreadedRecogController::extractPrefilterResult(ThreadedRecogController *this)
{
  PrefilterResult *v2;
  uint64_t *v3;
  uint64_t v5;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v5, *((_QWORD *)this + 2));
  v2 = (PrefilterResult *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 176))(*((_QWORD *)this + 3));
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v5);
  v3 = PrefilterResult::clone(v2);
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v5, *((_QWORD *)this + 2));
  DgnDelete<PrefilterResult>(v2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v5);
  return v3;
}

void sub_209A55C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedRecogController::startRecognizeOne(uint64_t a1, uint64_t a2, Utterance *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int16 a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t VocOrThrow;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  VocOrThrow = ModelMgr::getVocOrThrow((ModelMgr *)ModelMgr::smpModelMgr, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!Voc::isThreadedRecogAllowed((Voc *)VocOrThrow))
  {
    if (*(_DWORD *)(VocOrThrow + 112))
      v35 = *(char **)(VocOrThrow + 104);
    else
      v35 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 451, (uint64_t)"recogctl/trecogctl", 1, (uint64_t)"%.500s", v33, v34, (char)v35);
  }
  StateMgr::cacheAllWordInStateInfo(*(_QWORD *)(VocOrThrow + 56));
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v44, *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 32) = 0;
  if (a3)
  {
    v36 = MemChunkAlloc(0x1B8uLL, 0);
    Utterance::Utterance((Utterance *)v36, a3);
    *(_QWORD *)(a1 + 32) = v36;
    if (*(_BYTE *)(v36[53] + 416))
    {
      ChannelMgr::setRecogCtlUtterance((ChannelMgr *)ChannelMgr::smpChannelMgr, (Utterance *)v36, v37, v38, v39, v40, v41, v42);
      v36 = *(uint64_t **)(a1 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 312) = v36;
  }
  else
  {
    v36 = 0;
  }
  *(_QWORD *)(a1 + 40) = a22;
  (*(void (**)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a2, v36, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    0,
    a23,
    a24);
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v44);
}

void sub_209A55E60(_Unwind_Exception *a1)
{
  uint64_t v1;

  Latch<MemChunkRegion,LatchAdapter>::release(v1 - 88);
  _Unwind_Resume(a1);
}

BOOL Voc::isThreadedRecogAllowed(Voc *this)
{
  return !FileSpec::isValid((char **)this + 13)
      || *((_DWORD *)this + 32) != -1
      && *(_DWORD *)(DgnSharedMemSet::getSetCacheDir(*((DgnSharedMemSet **)this + 15)) + 8) < 2u
      || *((_QWORD *)this + 12) == -1
      && (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9));
}

uint64_t ThreadedRecogController::recognizeOneDone(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::maybeStartRecogController(ThreadedRecogController *this, DgnEvent *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int ThreadId;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 56) + 320) = a2;
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    if (*(_BYTE *)(*(_QWORD *)(v8 + 424) + 416))
    {
      ThreadId = ChannelMgr::getThreadId((ChannelMgr *)ChannelMgr::smpChannelMgr, *(_DWORD *)v8, a3, a4, a5, a6, a7, a8);
      if (ThreadId != -1)
      {
        v17 = DgnThreadMgr::smpThreadMgr;
        if (*(_DWORD *)(DgnThreadMgr::smpThreadMgr + 16) <= ThreadId
          || (v18 = *(_QWORD *)(*(_QWORD *)(DgnThreadMgr::smpThreadMgr + 8) + 8 * ThreadId)) == 0)
        {
          v19 = ThreadId;
          DgnThreadMgr::throwBadDgnThreadId((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr, ThreadId, v11, v12, v13, v14, v15, v16);
          v18 = *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v19);
        }
        *(_DWORD *)(v18 + 64) = *(_DWORD *)(*((_QWORD *)this + 3) + 928);
      }
    }
  }
  return 1;
}

void ThreadedRecogController::recognizeOneDoFrames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  DgnThreadClient *v8;
  uint64_t v9;

  v8 = *(DgnThreadClient **)(a1 + 8);
  v9 = *((_QWORD *)v8 + 7);
  *(_BYTE *)(v9 + 308) = a2;
  *(_DWORD *)(v9 + 304) = a3;
  *(_QWORD *)(v9 + 296) = a4;
  *(_BYTE *)(v9 + 309) = 1;
  DgnThreadClient::play(v8, a2, a3, a4, a5, a6, a7, a8);
}

void ThreadedRecogController::maybeStopRecogController(ThreadedRecogController *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  MemChunkRegion *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Utterance *v22;
  ChannelMgr *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int ThreadId;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (!DgnThreadClient::isPaused(*((DgnThreadClient **)this + 1)))
    DgnThreadClient::pause(*((DgnThreadClient **)this + 1), v2, v3, v4, v5, v6, v7, v8);
  if (*((_QWORD *)this + 4))
  {
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3)))
    {
      Latch<MemChunkRegion,LatchAdapter>::Latch(&v40, *((_QWORD *)this + 2));
      RecogController::doAtEndOfRecognition(*((RecogController **)this + 3), v15, v16, v17, v18, v19, v20, v21);
      Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v40);
    }
    v22 = (Utterance *)*((_QWORD *)this + 4);
    if (*(_BYTE *)(*((_QWORD *)v22 + 53) + 416))
    {
      v23 = (ChannelMgr *)ChannelMgr::smpChannelMgr;
      ChannelMgr::maybeSyncRecogCtlUtterance((ChannelMgr *)ChannelMgr::smpChannelMgr, v22, v9, v10, v11, v12, v13, v14);
      ThreadId = ChannelMgr::getThreadId(v23, **((_DWORD **)this + 4), v24, v25, v26, v27, v28, v29);
      if (ThreadId != -1)
      {
        v37 = DgnThreadMgr::smpThreadMgr;
        if (*(_DWORD *)(DgnThreadMgr::smpThreadMgr + 16) <= ThreadId
          || (v38 = *(_QWORD *)(*(_QWORD *)(DgnThreadMgr::smpThreadMgr + 8) + 8 * ThreadId)) == 0)
        {
          v39 = ThreadId;
          DgnThreadMgr::throwBadDgnThreadId((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr, ThreadId, v31, v32, v33, v34, v35, v36);
          v38 = *(_QWORD *)(*(_QWORD *)(v37 + 8) + 8 * v39);
        }
        *(_DWORD *)(v38 + 64) = -1;
      }
    }
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3)))
    {
      Utterance::syncAfterRecognitionDone(*((_QWORD *)this + 4));
      *((_QWORD *)this + 4) = 0;
    }
  }
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 56) + 320) = 0;
}

void sub_209A560F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedRecogController::finishRecognizeOne(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v5, *(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24), a2);
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v5);
}

void sub_209A5615C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedRecogController::getReproMgr(ThreadedRecogController *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t ThreadedRecogController::getNumRecogLayers(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::calledStartRecognizeOne(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 96))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::calledFinishRecognizeOne(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::calledExtractPrefilterResult(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 112))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::abortRecognizeOne(ThreadedRecogController *this)
{
  uint64_t v3;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v3, *((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3));
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v3);
}

void sub_209A56208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedRecogController::makePartialResult(ThreadedRecogController *this)
{
  uint64_t v3;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v3, *((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 128))(*((_QWORD *)this + 3));
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v3);
}

void sub_209A5626C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedRecogController::getPartialResult(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 136))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::getPartialTokenConfidences(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 144))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::getPartialResultScore(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 152))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::getPartialResultMicrosecPerRecogFrame(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 160))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::getContinuationInterval(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 184))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::isUsingPrefilterer(ThreadedRecogController *this, const Prefilterer *a2)
{
  return (*(uint64_t (**)(_QWORD, const Prefilterer *))(**((_QWORD **)this + 3) + 192))(*((_QWORD *)this + 3), a2);
}

uint64_t ThreadedRecogController::getUser(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 200))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::getOnlineCTPelScorer(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 208))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::getPrefPelScores(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 232))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::getRecogPelScores(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 240))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::getRecogStats(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 248))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::getPrefiltererSearchParamSet(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 256))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::getSearchCrossLayerParamSet(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 264))(*((_QWORD *)this + 3));
}

uint64_t ThreadedRecogController::getSearchParamSet(ThreadedRecogController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 272))(*((_QWORD *)this + 3));
}

uint64_t RecogCtlThreadWorker::onStartup(RecogCtlThreadWorker *this)
{
  uint64_t *v2;
  DgnThreadMgr *v3;
  uint64_t result;

  v2 = MemChunkAlloc(0x420uLL, 0);
  v3 = RecogController::RecogController((RecogController *)v2, *((const RecogSpec **)this + 33), *((_BYTE *)this + 272), *((PrefiltererSearchParamSet **)this + 35), *((SearchCrossLayerParamSet **)this + 36));
  *((_QWORD *)this + 32) = v3;
  result = DgnThreadMgr::getCurrentThreadId(v3);
  *((_DWORD *)v2 + 232) = result;
  return result;
}

uint64_t RecogCtlThreadWorker::playOne(RecogCtlThreadWorker *this)
{
  DgnEvent *v3;
  char v4;

  v3 = (DgnEvent *)*((_QWORD *)this + 40);
  v4 = 1;
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 32) + 64))(*((_QWORD *)this + 32), *((unsigned __int8 *)this + 308), *((unsigned int *)this + 76), *((_QWORD *)this + 37));
  *((_BYTE *)this + 309) = 0;
  if (*((_BYTE *)this + 136))
    DgnThreadTrace::add((uint64_t)this + 144, -1, 13);
  DgnEvent::signal(v3);
  v4 = 0;
  if (*((_BYTE *)this + 136))
    DgnThreadTrace::add((uint64_t)this + 144, -1, 6);
  DgnEventLatch::~DgnEventLatch(&v3);
  return 4;
}

void sub_209A56450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, DgnEvent *a9)
{
  DgnEventLatch::~DgnEventLatch(&a9);
  _Unwind_Resume(a1);
}

Utterance *RecogCtlThreadWorker::releaseAll(RecogCtlThreadWorker *this)
{
  _QWORD *v2;
  Utterance *result;

  v2 = (_QWORD *)*((_QWORD *)this + 32);
  if (v2)
  {
    (*(void (**)(_QWORD))*v2)(*((_QWORD *)this + 32));
    MemChunkFree(v2, 0);
    *((_QWORD *)this + 32) = 0;
  }
  result = (Utterance *)*((_QWORD *)this + 39);
  if (result && *((_QWORD *)result + 53))
    result = DgnDelete<Utterance>(result);
  *((_QWORD *)this + 39) = 0;
  return result;
}

void RecogCtlThreadWorker::printSize(Utterance **this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Utterance *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  Utterance *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 798, (DgnString *)&v61);
  if (v62)
    v16 = (char *)v61;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v61);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v60 = 0;
  v61 = 0;
  v59 = 0;
  DgnThreadWorker::printSize((DgnThreadWorker *)this, 0xFFFFFFFFLL, (a3 + 1), &v61, &v60, &v59);
  *a4 += v61;
  *a5 += v60;
  *a6 += v59;
  v21 = this[32];
  if (v21)
  {
    v60 = 0;
    v61 = 0;
    v59 = 0;
    (*(void (**)(Utterance *, uint64_t, _QWORD, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v21 + 280))(v21, 0xFFFFFFFFLL, (a3 + 1), &v61, &v60, &v59);
    *a4 += v61;
    *a5 += v60;
    *a6 += v59;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v22 = 4;
  else
    v22 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 802, (DgnString *)&v61);
  if (v62)
    v27 = (char *)v61;
  else
    v27 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v27, v22, v22, 0);
  DgnString::~DgnString((DgnString *)&v61);
  *a4 += v22;
  *a5 += v22;
  v28 = this[39];
  if (v28)
  {
    v60 = 0;
    v61 = 0;
    v59 = 0;
    Utterance::printSize(v28, 0xFFFFFFFFLL, (a3 + 1), &v61, &v60, &v59);
    *a4 += v61;
    *a5 += v60;
    *a6 += v59;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v29 = 4;
  else
    v29 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 804, (DgnString *)&v61);
  if (v62)
    v34 = (char *)v61;
  else
    v34 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v34, v29, v29, 0);
  DgnString::~DgnString((DgnString *)&v61);
  *a4 += v29;
  *a5 += v29;
  v35 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v35 = 8;
  v36 = (3 * v35) | 1;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 806, (DgnString *)&v61);
  if (v62)
    v41 = (char *)v61;
  else
    v41 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v41, v36, v36, 0);
  DgnString::~DgnString((DgnString *)&v61);
  *a4 += v36;
  *a5 += v36;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v42 = 10;
  else
    v42 = 14;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 808, (DgnString *)&v61);
  if (v62)
    v47 = (char *)v61;
  else
    v47 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v47, v42, v42, 0);
  DgnString::~DgnString((DgnString *)&v61);
  *a4 += v42;
  *a5 += v42;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v48 = 4;
  else
    v48 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 810, (DgnString *)&v61);
  if (v62)
    v53 = (char *)v61;
  else
    v53 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v53, v48, v48, 0);
  DgnString::~DgnString((DgnString *)&v61);
  *a4 += v48;
  *a5 += v48;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 812, (DgnString *)&v61);
  if (v62)
    v58 = (char *)v61;
  else
    v58 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, a3, &byte_209A88803, (35 - a3), (35 - a3), v58, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v61);
}

void sub_209A56968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void RecogCtlThread::printSize(RecogCtlThread *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  int v30;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 827, (DgnString *)&v29);
  if (v30)
    v16 = v29;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v29);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v27 = 0;
  v28 = 0;
  v26 = 0;
  DgnThreadClient::printSize(this, a2, (a3 + 1), &v28, &v26, &v27);
  *a4 += v28;
  *a5 += v26;
  *a6 += v27;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/trecogctl.cpp", 835, (DgnString *)&v29);
  if (v30)
    v25 = v29;
  else
    v25 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, a3, &byte_209A88803, (35 - a3), (35 - a3), v25, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v29);
}

void sub_209A56B18(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 80));
  _Unwind_Resume(a1);
}

void RecogCtlThreadWorker::~RecogCtlThreadWorker(RecogCtlThreadWorker *this)
{
  RecogCtlThreadWorker::~RecogCtlThreadWorker(this);
  JUMPOUT(0x20BD149A8);
}

{
  *(_QWORD *)this = off_24C217020;
  RecogCtlThreadWorker::releaseAll(this);
  DgnThreadWorker::~DgnThreadWorker(this);
}

void RecogCtlThread::~RecogCtlThread(RecogCtlThread *this)
{
  DgnThreadClient::~DgnThreadClient(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t *DgnThread<RecogCtlThreadWorker>::newWorker(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v4;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v4, *(_QWORD *)(a1 + 16));
  v2 = MemChunkAlloc(0x148uLL, *(MemChunkRegion **)(a1 + 16));
  DgnThreadWorker::DgnThreadWorker((uint64_t)v2, *(_DWORD *)(a1 + 12), a1, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 28));
  *v2 = (uint64_t)off_24C217020;
  v2[35] = 0;
  v2[36] = 0;
  *((_BYTE *)v2 + 309) = 0;
  v2[32] = 0;
  v2[33] = 0;
  *((_BYTE *)v2 + 272) = 0;
  v2[39] = 0;
  v2[40] = 0;
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v4);
  return v2;
}

void sub_209A56C08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedRecogController::isThreaded(ThreadedRecogController *this)
{
  return 1;
}

uint64_t DgnThread<RecogCtlThreadWorker>::DgnThread(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  _QWORD *v5;

  v5 = (_QWORD *)DgnThreadClient::DgnThreadClient(a1, a2, a3, a4);
  *v5 = &unk_24C2198B8;
  *(_QWORD *)(a1 + 56) = DgnThread<RecogCtlThreadWorker>::newWorker((uint64_t)v5);
  return a1;
}

void sub_209A56C64(_Unwind_Exception *a1)
{
  DgnThreadClient *v1;

  DgnThreadClient::~DgnThreadClient(v1);
  _Unwind_Resume(a1);
}

void DgnThread<RecogCtlThreadWorker>::~DgnThread(DgnThreadClient *a1)
{
  DgnThreadClient::~DgnThreadClient(a1);
  JUMPOUT(0x20BD149A8);
}

void DgnEventLatch::~DgnEventLatch(DgnEvent **this)
{
  if (*((_BYTE *)this + 8))
    DgnEvent::signal(*this);
}

void Prefilterer::Prefilterer(Prefilterer *this)
{
  *(_QWORD *)this = off_24C213B00;
}

void Prefilterer::printSize(Prefilterer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  int v36;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/prefilt.cpp", 68, (DgnString *)&v35);
  if (v36)
    v15 = v35;
  else
    v15 = &unk_209A886DC;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A886DC, a3, &unk_209A886DC, v15);
  DgnString::~DgnString((DgnString *)&v35);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A886DC);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/prefilt.cpp", 69, (DgnString *)&v35);
  if (v36)
    v24 = v35;
  else
    v24 = &unk_209A886DC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v20, v21, v22, v23, (a3 + 1), &unk_209A886DC, (34 - a3), (34 - a3), v24, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v35);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/prefilt.cpp", 70, (DgnString *)&v35);
  if (v36)
    v29 = v35;
  else
    v29 = &unk_209A886DC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, (a3 + 1), &unk_209A886DC, (34 - a3), (34 - a3), v29, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v35);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/prefilt.cpp", 71, (DgnString *)&v35);
  if (v36)
    v34 = v35;
  else
    v34 = &unk_209A886DC;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, a3, &unk_209A886DC, (35 - a3), (35 - a3), v34, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v35);
}

void sub_209A56F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t *Prefilterer::makePrefilterer(Prefilterer *this, const PrefiltererBuildParamSet *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;

  if (*((_BYTE *)this + 96))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/prefilt.cpp", 84, (uint64_t)"prefilt/prefilt", 1, (uint64_t)"%s", a7, a8, (char)&unk_209A886DC);
    v9 = 0;
  }
  else
  {
    v10 = *((unsigned int *)this + 23);
    if ((_DWORD)v10)
    {
      v9 = MemChunkAlloc(0x40uLL, 0);
      ThreadedTreePrefilterer::ThreadedTreePrefilterer(v9, v10);
    }
    else
    {
      v9 = MemChunkAlloc(0x25308uLL, 0);
      TreePrefilterer::TreePrefilterer((TreePrefilterer *)v9);
    }
  }
  (*(void (**)(uint64_t *, Prefilterer *))(*v9 + 24))(v9, this);
  return v9;
}

uint64_t Prefilterer::maybeMakeLookaheadScorer(Prefilterer *this, const User *a2, const PrefiltererBuildParamSet *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v9;

  v3 = *((_QWORD *)this + 18);
  if (!v3)
    return 0;
  v4 = *((_QWORD *)this + 2);
  v5 = *((unsigned int *)a2 + 21);
  v6 = *((unsigned int *)a2 + 22);
  if ((_DWORD)v6)
  {
    v7 = MemChunkAlloc(0x10uLL, 0);
    return ThreadedLookaheadScorer::ThreadedLookaheadScorer(v7, v6, v3, v4, v5);
  }
  else
  {
    v9 = MemChunkAlloc(0x88uLL, 0);
    return SimpleLookaheadScorer::SimpleLookaheadScorer(v9, v3, v4, v5);
  }
}

void TParam::TParam()
{
  void **v0;
  uint64_t v1;
  void **v2;
  void **v3;
  int v4;

  OUTLINED_FUNCTION_2();
  if (v4 < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 39) < 0)
    OUTLINED_FUNCTION_0(*v0);
  else
    OUTLINED_FUNCTION_1();
}

uint64_t TSegmenter::findSegmentEnd(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (result != a2 && result != 0)
    return MEMORY[0x20BD149A8]();
  return result;
}

void *saveDump(void *a1, uint64_t a2)
{
  void *result;

  result = __cxa_begin_catch(a1);
  if (a2)
    return (void *)OUTLINED_FUNCTION_1_0();
  return result;
}

uint64_t TPToken_Tokenize_cold_1(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (result != a2 && result != 0)
    OUTLINED_FUNCTION_0_0();
  return result;
}

uint64_t TWord::TWord(uint64_t a1)
{
  uint64_t result;
  BOOL v2;

  result = OUTLINED_FUNCTION_1_1(a1);
  v2 = v2 || result == 0;
  if (!v2)
    OUTLINED_FUNCTION_0_1();
  return result;
}

_QWORD *callBackSync(_QWORD *a1)
{
  _QWORD *result;
  _QWORD *v2;

  v2 = a1 + 3;
  result = (_QWORD *)*a1;
  if (result != v2 && result != 0)
    OUTLINED_FUNCTION_0_1();
  return result;
}

void TGraph::TGraph(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  void *v6;

  v5 = *a1;
  if (v5)
  {
    *(_QWORD *)(a3 + 112) = v5;
    operator delete(v5);
  }
  v6 = *a2;
  if (*a2)
  {
    *(_QWORD *)(a3 + 88) = v6;
    operator delete(v6);
  }
}

uint64_t TResult::TResult(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (result != a2 && result != 0)
    OUTLINED_FUNCTION_0_2();
  return result;
}

uint64_t tokenizerResultToFsa(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (result != a2 && result != 0)
    OUTLINED_FUNCTION_0_2();
  return result;
}

void TTag::TTag(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t TFormatter::makeBlockForWord(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (result != a2 && result != 0)
    return MEMORY[0x20BD149A8]();
  return result;
}

uint64_t TPItn_GetResultText_cold_1(uint64_t a1)
{
  uint64_t result;
  BOOL v2;

  result = OUTLINED_FUNCTION_0_3(a1);
  v2 = v2 || result == 0;
  if (!v2)
    OUTLINED_FUNCTION_0_0();
  return result;
}

uint64_t TPItn_GetResultAlignment_cold_1(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (result != a2 && result != 0)
    OUTLINED_FUNCTION_0_2();
  return result;
}

void WordLanguageModel::loadDynamic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_4(a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", a3, (uint64_t)"lm/wordlm", a5, (uint64_t)"%s", a7, a8, (char)&errStr_lm_wordlm_E_NO_STATIC_VOC);
  __break(1u);
}

uint64_t buildRegExp(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (result != a2 && result != 0)
    OUTLINED_FUNCTION_0_1();
  return result;
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x24BEDA9B8](this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC68](this, __str, __pos, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

std::wstring *__cdecl std::wstring::append(std::wstring *this, const std::wstring::value_type *__s)
{
  return (std::wstring *)MEMORY[0x24BEDAD18](this, __s);
}

std::wstring *__cdecl std::wstring::assign(std::wstring *this, const std::wstring::value_type *__s)
{
  return (std::wstring *)MEMORY[0x24BEDAD28](this, __s);
}

void std::wstring::resize(std::wstring *this, std::wstring::size_type __n, std::wstring::value_type __c)
{
  MEMORY[0x24BEDAD40](this, __n, *(_QWORD *)&__c);
}

void std::wstring::push_back(std::wstring *this, std::wstring::value_type __c)
{
  MEMORY[0x24BEDAD50](this, *(_QWORD *)&__c);
}

std::wstring *__cdecl std::wstring::basic_string(std::wstring *this, const std::wstring *__str, std::wstring::size_type __pos, std::wstring::size_type __n, std::allocator<wchar_t> *__a)
{
  return (std::wstring *)MEMORY[0x24BEDAD60](this, __str, __pos, __n, __a);
}

std::wstring *__cdecl std::wstring::operator=(std::wstring *this, const std::wstring *__str)
{
  return (std::wstring *)MEMORY[0x24BEDAD70](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x24BEDADD8]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x24BEDADF8]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x24BEDAE28]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x24BEDAE38]();
}

uint64_t std::istream::getline()
{
  return MEMORY[0x24BEDAE58]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::wistream::~wistream()
{
  return MEMORY[0x24BEDAED0]();
}

uint64_t std::wistream::operator>>()
{
  return MEMORY[0x24BEDAED8]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x24BEDAEF0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF28]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF60]();
}

uint64_t std::wostream::~wostream()
{
  return MEMORY[0x24BEDAFB0]();
}

uint64_t std::wostream::operator<<()
{
  return MEMORY[0x24BEDAFB8]();
}

{
  return MEMORY[0x24BEDAFC0]();
}

{
  return MEMORY[0x24BEDAFD0]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

uint64_t std::wstreambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB058]();
}

uint64_t std::wstreambuf::~wstreambuf()
{
  return MEMORY[0x24BEDB060]();
}

const std::locale *std::locale::classic(void)
{
  return (const std::locale *)MEMORY[0x24BEDB430]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x24BEDB438](this, a2);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x24BEDB450](this, a2);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

std::locale std::ios_base::imbue(std::ios_base *this, const std::locale *__loc)
{
  return (std::locale)MEMORY[0x24BEDB538](this, __loc);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

uint64_t std::wios::~wios()
{
  return MEMORY[0x24BEDB5F0]();
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24C20FE10();
}

void operator delete(void *__p)
{
  off_24C20FE18(__p);
}

uint64_t operator delete()
{
  return off_24C20FE20();
}

uint64_t operator new[]()
{
  return off_24C20FE28();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24C20FE30(__sz);
}

uint64_t operator new()
{
  return off_24C20FE38();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x24BEDB968](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC938](*(_QWORD *)&a1);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x24BDAD038](a1, *(_QWORD *)&a2);
}

double atof(const char *a1)
{
  double result;

  MEMORY[0x24BDAD250](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x24BDAD258](a1);
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x24BDAD260](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  return MEMORY[0x24BEDF1C0](crc, buf, *(_QWORD *)&len);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x24BEDF1C8](strm, *(_QWORD *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x24BEDF1D8](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x24BEDF1E0](strm, *(_QWORD *)&level, *(_QWORD *)&method, *(_QWORD *)&windowBits, *(_QWORD *)&memLevel, *(_QWORD *)&strategy, version, *(_QWORD *)&stream_size);
}

void exit(int a1)
{
  MEMORY[0x24BDAE268](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x24BDAE270](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x24BDAE328](a1);
}

int ferror(FILE *a1)
{
  return MEMORY[0x24BDAE330](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x24BDAE350](a1);
}

const char *__cdecl fmtcheck(const char *a1, const char *a2)
{
  return (const char *)MEMORY[0x24BDAE400](a1, a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE448](__ptr, __size, __nitems, __stream);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x24BDAE4D8](a1, a2, *(_QWORD *)&a3);
}

int fseeko(FILE *__stream, off_t a2, int __whence)
{
  return MEMORY[0x24BDAE4E0](__stream, a2, *(_QWORD *)&__whence);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x24BDAE508](*(_QWORD *)&a1, a2);
}

int fstatvfs(int a1, statvfs *a2)
{
  return MEMORY[0x24BDAE520](*(_QWORD *)&a1, a2);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x24BDAE530](a1);
}

off_t ftello(FILE *__stream)
{
  return MEMORY[0x24BDAE538](__stream);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x24BDAE548](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

int gethostname(char *a1, size_t a2)
{
  return MEMORY[0x24BDAE650](a1, a2);
}

pid_t getpid(void)
{
  return MEMORY[0x24BDAE6D0]();
}

int getrusage(int a1, rusage *a2)
{
  return MEMORY[0x24BDAE738](*(_QWORD *)&a1, a2);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x24BDAE780](a1, a2);
}

int glob(const char *a1, int a2, int (__cdecl *a3)(const char *, int), glob_t *a4)
{
  return MEMORY[0x24BDAE7A0](a1, *(_QWORD *)&a2, a3, a4);
}

void globfree(glob_t *a1)
{
  MEMORY[0x24BDAE7A8](a1);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x24BEDF260](strm, *(_QWORD *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x24BEDF268](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x24BEDF270](strm, *(_QWORD *)&windowBits, version, *(_QWORD *)&stream_size);
}

int kill(pid_t a1, int a2)
{
  return MEMORY[0x24BDAE978](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x24BDAEA98](a1);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

long double log1p(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAC0](__x);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x24BDAEB20](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x24BDAEB30]();
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x24BDAEFA8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  long double result;

  MEMORY[0x24BDAEFB0](__y, __x);
  return result;
}

int mprotect(void *a1, size_t a2, int a3)
{
  return MEMORY[0x24BDAEFC8](a1, a2, *(_QWORD *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x24BDAEFF0](a1, a2);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x24BDAF010](__rqtp, __rmtp);
}

locale_t newlocale(int a1, const char *a2, locale_t a3)
{
  return (locale_t)MEMORY[0x24BDAF108](*(_QWORD *)&a1, a2, a3);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAF228](a1, *(_QWORD *)&a2);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7D0](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x24BDAF7D8](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7E0](a1);
}

int pthread_cond_timedwait(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x24BDAF7F0](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x24BDAF800](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x24BDAF818](a1, a2, a3, a4);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x24BDAF860](a1);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x24BDAF880](a1, a2);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x24BDAF888](a1, a2);
}

int pthread_kill(pthread_t a1, int a2)
{
  return MEMORY[0x24BDAF8A0](a1, *(_QWORD *)&a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8C0](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x24BDAF8C8](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x24BDAF8E8](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x24BDAF8F0](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x24BDAF908](a1, *(_QWORD *)&a2);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x24BDAF930](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x24BDAF938](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x24BDAF940](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x24BDAF958](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x24BDAF960](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x24BDAF978]();
}

int pthread_setcancelstate(int a1, int *a2)
{
  return MEMORY[0x24BDAF988](*(_QWORD *)&a1, a2);
}

int pthread_setcanceltype(int a1, int *a2)
{
  return MEMORY[0x24BDAF990](*(_QWORD *)&a1, a2);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x24BDAF9A8](a1, a2);
}

void pthread_yield_np(void)
{
  MEMORY[0x24BDAF9D0]();
}

int rand(void)
{
  return MEMORY[0x24BDAFA38]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x24BDAFA80](*(_QWORD *)&a1, a2, a3);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x24BDAFB38](__p, __ec);
}

sem_t *sem_open(const char *a1, int a2, ...)
{
  return (sem_t *)MEMORY[0x24BDAFC80](a1, *(_QWORD *)&a2);
}

int sem_post(sem_t *a1)
{
  return MEMORY[0x24BDAFC88](a1);
}

int sem_trywait(sem_t *a1)
{
  return MEMORY[0x24BDAFC90](a1);
}

int shm_open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAFDA0](a1, *(_QWORD *)&a2);
}

int shm_unlink(const char *a1)
{
  return MEMORY[0x24BDAFDA8](a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFE60](a1, a2);
}

void srand(unsigned int a1)
{
  MEMORY[0x24BDAFE80](*(_QWORD *)&a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFEA0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x24BDAFED0](a1, a2);
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFEE0](__s1, __s2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFEE8](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x24BDAFF00](__dst, __src);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x24BDAFF18](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFFA8](__s, *(_QWORD *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFFC8](__s1, __s2);
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x24BDB00F0](*(_QWORD *)&a1);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x24BDB0100](a1, a2, a3, a4, a5);
}

time_t time(time_t *a1)
{
  return MEMORY[0x24BDB0240](a1);
}

int uname(utsname *a1)
{
  return MEMORY[0x24BDB02A8](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x24BDB02B0](a1);
}

locale_t uselocale(locale_t a1)
{
  return (locale_t)MEMORY[0x24BDB02E0](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x24BDB02E8](*(_QWORD *)&a1);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x24BDB0448](__str, __size, __format, a4);
}

int wcscasecmp(const __int32 *a1, const __int32 *a2)
{
  return MEMORY[0x24BDB04A0](a1, a2);
}

__int32 *__cdecl wcscat(__int32 *a1, const __int32 *a2)
{
  return (__int32 *)MEMORY[0x24BDB04A8](a1, a2);
}

__int32 *__cdecl wcschr(__int32 *__s, __int32 __c)
{
  return (__int32 *)MEMORY[0x24BDB04B0](__s, *(_QWORD *)&__c);
}

int wcscmp(const __int32 *a1, const __int32 *a2)
{
  return MEMORY[0x24BDB04B8](a1, a2);
}

__int32 *__cdecl wcscpy(__int32 *a1, const __int32 *a2)
{
  return (__int32 *)MEMORY[0x24BDB04C0](a1, a2);
}

size_t wcslen(const __int32 *a1)
{
  return MEMORY[0x24BDB04D0](a1);
}

int wcsncmp(const __int32 *a1, const __int32 *a2, size_t a3)
{
  return MEMORY[0x24BDB04E0](a1, a2, a3);
}

__int32 *__cdecl wcsncpy(__int32 *a1, const __int32 *a2, size_t a3)
{
  return (__int32 *)MEMORY[0x24BDB04E8](a1, a2, a3);
}

__int32 *__cdecl wcsstr(__int32 *__s1, const __int32 *__s2)
{
  return (__int32 *)MEMORY[0x24BDB04F0](__s1, __s2);
}

int wmemcmp(const __int32 *a1, const __int32 *a2, size_t a3)
{
  return MEMORY[0x24BDB0520](a1, a2, a3);
}

__int32 *__cdecl wmemcpy(__int32 *a1, const __int32 *a2, size_t a3)
{
  return (__int32 *)MEMORY[0x24BDB0528](a1, a2, a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x24BDB0558](*(_QWORD *)&__fd, __buf, __nbyte);
}

