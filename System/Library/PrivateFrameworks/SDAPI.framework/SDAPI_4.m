void sub_20992FBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a23);
  DgnArray<DgnString>::releaseAll((uint64_t)&a25);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a27);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)&a29);
  _Unwind_Resume(a1);
}

uint64_t WordList::getValidIdCount(WordList *this)
{
  return *((unsigned int *)this + 72);
}

uint64_t WordList::getAllByRootId(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v4 = *(unsigned int *)(a2 + 8);
  if ((int)v4 >= 1)
  {
    v5 = 16 * v4 - 16;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a2 + v5);
      v5 -= 16;
    }
    while (v5 != -16);
  }
  v6 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  v7 = *(unsigned int *)(a1 + 388);
  v8 = *(_DWORD *)(a2 + 12);
  if (v7 <= v8
    || (DgnArray<DgnPrimArray<double>>::reallocElts(a2, v7 - v8, 0),
        v6 = *(_DWORD *)(a2 + 8),
        v6 <= v7))
  {
    if (v6 < v7)
    {
      v11 = v7 - v6;
      v12 = 16 * v6;
      do
      {
        v13 = (_QWORD *)(*(_QWORD *)a2 + v12);
        *v13 = 0;
        v13[1] = 0;
        v12 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v6 > (int)v7)
  {
    v9 = (int)v6;
    v10 = 16 * (int)v6 - 16;
    do
    {
      --v9;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a2 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v7);
  }
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_BYTE *)(a1 + 272) && *(__int16 *)(a1 + 274) == -2)
    v14 = a1 + 280;
  else
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 524272);
  v21 = 0;
  v22 = 0;
  if (*(_DWORD *)(v14 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0xFFFFFFLL;
    do
    {
      v18 = *(unsigned int *)(*(_QWORD *)v14 + 4 * v16);
      v19 = *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v18);
      if (v19 != v17 && v15)
      {
        DgnPrimArray<int>::copyArraySlice(*(_QWORD *)a2 + 16 * v17, &v21, 0, v15);
        v15 = 0;
        LODWORD(v22) = 0;
      }
      if (v15 == HIDWORD(v22))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
        v15 = v22;
      }
      *(_DWORD *)(v21 + 4 * v15) = v18;
      v15 = v22 + 1;
      LODWORD(v22) = v22 + 1;
      ++v16;
      v17 = v19;
    }
    while (v16 < *(unsigned int *)(v14 + 8));
    if (v15)
      DgnPrimArray<int>::copyArraySlice(*(_QWORD *)a2 + 16 * v19, &v21, 0, v15);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
}

void sub_20992FF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t WordList::getPronPredecessorSeedCategory(WordList *this, unsigned int a2)
{
  if (*((_DWORD *)this + 98) < 2u)
    return 0;
  else
    return *(unsigned __int8 *)(*((_QWORD *)this + 53) + a2);
}

uint64_t WordList::getPronSuccessorSeedCategory(WordList *this, unsigned int a2)
{
  if (*((_DWORD *)this + 99) < 2u)
    return 0;
  else
    return *(unsigned __int8 *)(*((_QWORD *)this + 55) + a2);
}

uint64_t WordList::getHumanReadablePron(WordList *this, unsigned int a2, DgnString *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  WordList::getPronWithWB(this, a2, (uint64_t)&v6);
  *((_DWORD *)a3 + 2) = 0;
  if ((_DWORD)v7)
    WordList::phonemesToStr(this, (uint64_t)&v6, a3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v6);
}

void sub_209930018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

DgnString *tagBitsToTagString(uint64_t a1, _QWORD *a2, DgnString *a3)
{
  DgnString *result;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  *((_DWORD *)a3 + 2) = 0;
  v10 = a1;
  v9 = *(_DWORD *)(a1 + 8);
  v8 = 0;
  result = (DgnString *)BitArrayIterator::scanForNextSetBitOrStop((BitArrayIterator *)&v8);
  if (HIDWORD(v8) < v9)
  {
    v6 = result;
    v7 = (char *)&unk_209A7AB86;
    do
    {
      DgnString::operator+=(a3, v7);
      DgnString::operator+=(a3, *a2 + 16 * v6);
      ++HIDWORD(v8);
      result = (DgnString *)BitArrayIterator::scanForNextSetBitOrStop((BitArrayIterator *)&v8);
      v6 = result;
      v7 = ",";
    }
    while (HIDWORD(v8) < v9);
  }
  if (*((_DWORD *)a3 + 2) <= 1u)
    return DgnString::operator=(a3, "0");
  return result;
}

void WordList::saveBinary(WordList *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v7;
  uint64_t CurrentSubDirComponents;
  unsigned int v9;

  v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x2Fu, a4, "MRWORD!?", 24, 43);
  v9 = 0;
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 32, &v9);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 48, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 72, &v9);
  writeObject((uint64_t)v7, (uint64_t)this + 88, &v9);
  writeObject<unsigned char>((uint64_t)v7, (uint64_t)this + 104, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 120, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 136, &v9);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 200, &v9);
  writeObject<char>((uint64_t)v7, (uint64_t)this + 224, &v9);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 240, &v9);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 256, &v9);
  DgnCollArray<unsigned int,WordList>::writeObject((unsigned __int8 *)this + 272, (uint64_t)v7, &v9);
  PrefiltererWordIdPronCollArray::writeObject((WordList *)((char *)this + 352), v7, &v9);
  writeObject((uint64_t)v7, (int *)this + 94, &v9);
  writeObject((uint64_t)v7, (int *)this + 95, &v9);
  writeObject((uint64_t)v7, (int *)this + 96, &v9);
  writeObject((uint64_t)v7, (int *)this + 97, &v9);
  writeObject((uint64_t)v7, (int *)this + 98, &v9);
  writeObject((uint64_t)v7, (int *)this + 99, &v9);
  writeObject<DgnPrimArray<BOOL>>(v7, (uint64_t)this + 400, &v9);
  writeObject((uint64_t)v7, (char *)this + 416, &v9);
  writeObject((uint64_t)v7, (char *)this + 417, &v9);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 418, &v9);
  writeObject((uint64_t)v7, (char *)this + 419, &v9);
  writeObject((uint64_t)v7, (char *)this + 420, &v9);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 421, &v9);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 422, &v9);
  writeObject<unsigned char>((uint64_t)v7, (uint64_t)this + 424, &v9);
  writeObject<unsigned char>((uint64_t)v7, (uint64_t)this + 440, &v9);
  writeObject((uint64_t)v7, (uint64_t)this + 624, &v9);
  writeObject((uint64_t)v7, (uint64_t)this + 640, &v9);
  writeObject((uint64_t)v7, (int *)this + 114, &v9);
  writeObject((uint64_t)v7, (int *)this + 115, &v9);
  writeObject((uint64_t)v7, (uint64_t)this + 464, &v9);
  writeObject((uint64_t)v7, (uint64_t)this + 480, &v9);
  writeObject((uint64_t)v7, (uint64_t)this + 496, &v9);
  writeObject((uint64_t)v7, (uint64_t)this + 576, &v9);
  writeObject(v7, (WordList *)((char *)this + 512), &v9);
  EnvMgr::saveEnvMgrToStream(*((EnvMgr **)this + 3), v7, &v9, 1, 0);
  writeObjectChecksum((uint64_t)v7, (int *)&v9);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x2Fu, v9);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
}

uint64_t writeObject<DgnPrimArray<BOOL>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject((uint64_t)a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject<BOOL>(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void WordList::saveWordList(WordList *this, DFile *a2, DFileChecksums *a3, int a4, DFileChecksums *a5)
{
  if (a4)
    WordList::saveTwl(this, a2, (int)a5);
  else
    WordList::saveBinary(this, a2, a3, (int)a5);
}

void WordList::printSize(WordList *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  EnvMgr *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  void *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void *v308;
  uint64_t v309;
  int v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  uint64_t v321;
  int v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  void *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  void *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  void *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  void *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  void *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  void *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  void *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  void *v390;
  uint64_t v391;
  uint64_t v392;
  unsigned int v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unsigned int v397;
  unsigned int v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  void *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  void *v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  void *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  void *v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2279, (DgnString *)&v435);
  if ((_DWORD)v436)
    v16 = (void *)v435;
  else
    v16 = &unk_209A7AB86;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7AB86, a3, &unk_209A7AB86, v16);
  DgnString::~DgnString((DgnString *)&v435);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7AB86);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  v22 = (a3 + 1);
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2280, (DgnString *)&v435);
  if ((_DWORD)v436)
    v28 = (void *)v435;
  else
    v28 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &unk_209A7AB86, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v29 = 4;
  else
    v29 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2281, (DgnString *)&v435);
  if ((_DWORD)v436)
    v34 = (void *)v435;
  else
    v34 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &unk_209A7AB86, (34 - a3), (34 - a3), v34, v29, v29, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v29;
  *a5 += v29;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v35 = 4;
  else
    v35 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2282, (DgnString *)&v435);
  if ((_DWORD)v436)
    v40 = (void *)v435;
  else
    v40 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, (a3 + 1), &unk_209A7AB86, (34 - a3), (34 - a3), v40, v35, v35, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v35;
  *a5 += v35;
  v41 = (EnvMgr *)*((_QWORD *)this + 3);
  if (v41)
  {
    v434 = 0;
    v435 = 0;
    v433 = 0;
    EnvMgr::printSize(v41, 0xFFFFFFFFLL, (a3 + 1), &v435, &v434, &v433);
    *a4 += v435;
    *a5 += v434;
    *a6 += v433;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v42 = 4;
  else
    v42 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2284, (DgnString *)&v435);
  if ((_DWORD)v436)
    v47 = (void *)v435;
  else
    v47 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), &unk_209A7AB86, (34 - a3), (34 - a3), v47, v42, v42, 0);
  v432 = a3;
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v42;
  *a5 += v42;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v48 = 12;
  else
    v48 = 16;
  v49 = *((unsigned int *)this + 10);
  v50 = *((_DWORD *)this + 11);
  if (v50 >= v49)
  {
    v51 = 0;
    if ((int)v49 > 0)
      v48 = (v48 | 2) + 2 * (v49 - 1);
    v52 = v48 + 2 * (v50 - v49);
  }
  else
  {
    v51 = 2 * v49;
    v52 = v48;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v57 = (void *)v435;
  else
    v57 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v22, &unk_209A7AB86, v23, v23, v57, v52, v48, v51);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v52;
  *a5 += v48;
  *a6 += v51;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v58 = 12;
  else
    v58 = 16;
  v59 = *((unsigned int *)this + 14);
  v60 = *((_DWORD *)this + 15);
  if (v60 >= v59)
  {
    v61 = 0;
    if ((int)v59 > 0)
      v58 += 4 * (v59 - 1) + 4;
    v62 = v58 + 4 * (v60 - v59);
  }
  else
  {
    v61 = 4 * v59;
    v62 = v58;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v67 = (void *)v435;
  else
    v67 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, v22, &unk_209A7AB86, v23, v23, v67, v62, v58, v61);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v62;
  *a5 += v58;
  *a6 += v61;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v72 = (void *)v435;
  else
    v72 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v22, &unk_209A7AB86, v23, v23, v72, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 12;
  else
    v73 = 16;
  v74 = *((unsigned int *)this + 20);
  v75 = *((_DWORD *)this + 21);
  if (v75 >= v74)
  {
    v76 = 0;
    if ((int)v74 > 0)
      v73 = (v73 | 2) + 2 * (v74 - 1);
    v77 = v73 + 2 * (v75 - v74);
  }
  else
  {
    v76 = 2 * v74;
    v77 = v73;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v82 = (void *)v435;
  else
    v82 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v22, &unk_209A7AB86, v23, v23, v82, v77, v73, v76);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v77;
  *a5 += v73;
  *a6 += v76;
  v83 = BitArray::sizeObject((uint64_t)this + 88, 0);
  v84 = BitArray::sizeObject((uint64_t)this + 88, 1);
  v85 = BitArray::sizeObject((uint64_t)this + 88, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v90 = (void *)v435;
  else
    v90 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, v22, &unk_209A7AB86, v23, v23, v90, v83, v84, v85);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v83;
  *a5 += v84;
  *a6 += v85;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v91 = 12;
  else
    v91 = 16;
  v92 = *((_DWORD *)this + 28);
  v93 = *((_DWORD *)this + 29);
  v94 = v93 >= v92;
  v95 = v93 - v92;
  if (v94)
  {
    v97 = v92 & ~(v92 >> 31);
    v92 = 0;
    v96 = v91 + v97;
    v91 += v97 + v95;
  }
  else
  {
    v96 = v91;
  }
  v98 = v92;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v103 = (void *)v435;
  else
    v103 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v99, v100, v101, v102, v22, &unk_209A7AB86, v23, v23, v103, v91, v96, v98);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v91;
  *a5 += v96;
  *a6 += v98;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v104 = 12;
  else
    v104 = 16;
  v105 = *((unsigned int *)this + 32);
  v106 = *((_DWORD *)this + 33);
  if (v106 >= v105)
  {
    v107 = 0;
    if ((int)v105 > 0)
      v104 = (v104 | 2) + 2 * (v105 - 1);
    v108 = v104 + 2 * (v106 - v105);
  }
  else
  {
    v107 = 2 * v105;
    v108 = v104;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v113 = (void *)v435;
  else
    v113 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v22, &unk_209A7AB86, v23, v23, v113, v108, v104, v107);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v108;
  *a5 += v104;
  *a6 += v107;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v114 = 12;
  else
    v114 = 16;
  v115 = *((unsigned int *)this + 36);
  v116 = *((_DWORD *)this + 37);
  if (v116 >= v115)
  {
    v117 = 0;
    if ((int)v115 > 0)
      v114 = (v114 | 2) + 2 * (v115 - 1);
    v118 = v114 + 2 * (v116 - v115);
  }
  else
  {
    v117 = 2 * v115;
    v118 = v114;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v123 = (void *)v435;
  else
    v123 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v22, &unk_209A7AB86, v23, v23, v123, v118, v114, v117);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v118;
  *a5 += v114;
  *a6 += v117;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v124 = 12;
  else
    v124 = 16;
  v125 = *((unsigned int *)this + 40);
  v126 = *((_DWORD *)this + 41);
  if (v126 >= v125)
  {
    v127 = 0;
    if ((int)v125 > 0)
      v124 = (v124 | 2) + 2 * (v125 - 1);
    v128 = v124 + 2 * (v126 - v125);
  }
  else
  {
    v127 = 2 * v125;
    v128 = v124;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v133 = (void *)v435;
  else
    v133 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v129, v130, v131, v132, v22, &unk_209A7AB86, v23, v23, v133, v128, v124, v127);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v128;
  *a5 += v124;
  *a6 += v127;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v134 = 12;
  else
    v134 = 16;
  v135 = *((unsigned int *)this + 44);
  v136 = *((_DWORD *)this + 45);
  if (v136 >= v135)
  {
    v137 = 0;
    if ((int)v135 > 0)
      v134 = (v134 | 2) + 2 * (v135 - 1);
    v138 = v134 + 2 * (v136 - v135);
  }
  else
  {
    v137 = 2 * v135;
    v138 = v134;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v143 = (void *)v435;
  else
    v143 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v139, v140, v141, v142, v22, &unk_209A7AB86, v23, v23, v143, v138, v134, v137);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v138;
  *a5 += v134;
  *a6 += v137;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v144 = 12;
  else
    v144 = 16;
  v145 = *((unsigned int *)this + 48);
  v146 = *((_DWORD *)this + 49);
  if (v146 >= v145)
  {
    v147 = 0;
    if ((int)v145 > 0)
      v144 = (v144 | 2) + 2 * (v145 - 1);
    v148 = v144 + 2 * (v146 - v145);
  }
  else
  {
    v147 = 2 * v145;
    v148 = v144;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v153 = (void *)v435;
  else
    v153 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v149, v150, v151, v152, v22, &unk_209A7AB86, v23, v23, v153, v148, v144, v147);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v148;
  *a5 += v144;
  *a6 += v147;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v154 = 12;
  else
    v154 = 16;
  v155 = *((unsigned int *)this + 52);
  v156 = *((_DWORD *)this + 53);
  if (v156 >= v155)
  {
    v157 = 0;
    if ((int)v155 > 0)
      v154 += 4 * (v155 - 1) + 4;
    v158 = v154 + 4 * (v156 - v155);
  }
  else
  {
    v157 = 4 * v155;
    v158 = v154;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v163 = (void *)v435;
  else
    v163 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v159, v160, v161, v162, v22, &unk_209A7AB86, v23, v23, v163, v158, v154, v157);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v158;
  *a5 += v154;
  *a6 += v157;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v168 = (void *)v435;
  else
    v168 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v164, v165, v166, v167, v22, &unk_209A7AB86, v23, v23, v168, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v169 = 12;
  else
    v169 = 16;
  v170 = *((_DWORD *)this + 58);
  v171 = *((_DWORD *)this + 59);
  v94 = v171 >= v170;
  v172 = v171 - v170;
  if (v94)
  {
    v174 = v170 & ~(v170 >> 31);
    v170 = 0;
    v173 = v169 + v174;
    v169 += v174 + v172;
  }
  else
  {
    v173 = v169;
  }
  v175 = v170;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v180 = (void *)v435;
  else
    v180 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v176, v177, v178, v179, v22, &unk_209A7AB86, v23, v23, v180, v169, v173, v175);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v169;
  *a5 += v173;
  *a6 += v175;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v181 = 12;
  else
    v181 = 16;
  v182 = *((unsigned int *)this + 62);
  v183 = *((_DWORD *)this + 63);
  if (v183 >= v182)
  {
    v184 = 0;
    if ((int)v182 > 0)
      v181 += 4 * (v182 - 1) + 4;
    v185 = v181 + 4 * (v183 - v182);
  }
  else
  {
    v184 = 4 * v182;
    v185 = v181;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v190 = (void *)v435;
  else
    v190 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v186, v187, v188, v189, v22, &unk_209A7AB86, v23, v23, v190, v185, v181, v184);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v185;
  *a5 += v181;
  *a6 += v184;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v191 = 12;
  else
    v191 = 16;
  v192 = *((unsigned int *)this + 66);
  v193 = *((_DWORD *)this + 67);
  if (v193 >= v192)
  {
    v194 = 0;
    if ((int)v192 > 0)
      v191 += 4 * (v192 - 1) + 4;
    v195 = v191 + 4 * (v193 - v192);
  }
  else
  {
    v194 = 4 * v192;
    v195 = v191;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v200 = (void *)v435;
  else
    v200 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v196, v197, v198, v199, v22, &unk_209A7AB86, v23, v23, v200, v195, v191, v194);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v195;
  *a5 += v191;
  *a6 += v194;
  v201 = DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::sizeObject((uint64_t)this + 272, 0);
  v202 = DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::sizeObject((uint64_t)this + 272, 1);
  v203 = DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::sizeObject((uint64_t)this + 272, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v208 = (void *)v435;
  else
    v208 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v204, v205, v206, v207, v22, &unk_209A7AB86, v23, v23, v208, v201, v202, v203);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v201;
  *a5 += v202;
  *a6 += v203;
  v209 = PrefiltererWordIdPronCollArray::sizeObject((uint64_t)this + 352, 0);
  v210 = PrefiltererWordIdPronCollArray::sizeObject((uint64_t)this + 352, 1);
  v211 = PrefiltererWordIdPronCollArray::sizeObject((uint64_t)this + 352, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v216 = (void *)v435;
  else
    v216 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v212, v213, v214, v215, v22, &unk_209A7AB86, v23, v23, v216, v209, v210, v211);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v209;
  *a5 += v210;
  *a6 += v211;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v221 = (void *)v435;
  else
    v221 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v217, v218, v219, v220, v22, &unk_209A7AB86, v23, v23, v221, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v226 = (void *)v435;
  else
    v226 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v222, v223, v224, v225, v22, &unk_209A7AB86, v23, v23, v226, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v231 = (void *)v435;
  else
    v231 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v227, v228, v229, v230, v22, &unk_209A7AB86, v23, v23, v231, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v236 = (void *)v435;
  else
    v236 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v232, v233, v234, v235, v22, &unk_209A7AB86, v23, v23, v236, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v237 = 12;
  else
    v237 = 16;
  v238 = *((unsigned int *)this + 150);
  v239 = *((_DWORD *)this + 151);
  if (v239 >= v238)
  {
    v240 = 0;
    if ((int)v238 > 0)
      v237 = (v237 | 2) + 2 * (v238 - 1);
    v241 = v237 + 2 * (v239 - v238);
  }
  else
  {
    v240 = 2 * v238;
    v241 = v237;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v246 = (void *)v435;
  else
    v246 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v242, v243, v244, v245, v22, &unk_209A7AB86, v23, v23, v246, v241, v237, v240);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v241;
  *a5 += v237;
  *a6 += v240;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v247 = 12;
  else
    v247 = 16;
  v248 = *((unsigned int *)this + 154);
  v249 = *((_DWORD *)this + 155);
  if (v249 >= v248)
  {
    v250 = 0;
    if ((int)v248 > 0)
      v247 = (v247 | 2) + 2 * (v248 - 1);
    v251 = v247 + 2 * (v249 - v248);
  }
  else
  {
    v250 = 2 * v248;
    v251 = v247;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v256 = (void *)v435;
  else
    v256 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v252, v253, v254, v255, v22, &unk_209A7AB86, v23, v23, v256, v251, v247, v250);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v251;
  *a5 += v247;
  *a6 += v250;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v261 = (void *)v435;
  else
    v261 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v257, v258, v259, v260, v22, &unk_209A7AB86, v23, v23, v261, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v266 = (void *)v435;
  else
    v266 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v262, v263, v264, v265, v22, &unk_209A7AB86, v23, v23, v266, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  v267 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 400, 0);
  v268 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 400, 1);
  v435 = 0;
  v436 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v435);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v273 = (void *)v435;
  else
    v273 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v269, v270, v271, v272, v22, &unk_209A7AB86, v23, v23, v273, v267, v268, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v267;
  *a5 += v268;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v278 = (void *)v435;
  else
    v278 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v274, v275, v276, v277, v22, &unk_209A7AB86, v23, v23, v278, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v435);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v283 = (void *)v435;
  else
    v283 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v279, v280, v281, v282, v22, &unk_209A7AB86, v23, v23, v283, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v435);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v288 = (void *)v435;
  else
    v288 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v284, v285, v286, v287, v22, &unk_209A7AB86, v23, v23, v288, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v435);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v293 = (void *)v435;
  else
    v293 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v289, v290, v291, v292, v22, &unk_209A7AB86, v23, v23, v293, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v435);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v298 = (void *)v435;
  else
    v298 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v294, v295, v296, v297, v22, &unk_209A7AB86, v23, v23, v298, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v435);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v303 = (void *)v435;
  else
    v303 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v299, v300, v301, v302, v22, &unk_209A7AB86, v23, v23, v303, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v435);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v308 = (void *)v435;
  else
    v308 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v304, v305, v306, v307, v22, &unk_209A7AB86, v23, v23, v308, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v435);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v309 = 12;
  else
    v309 = 16;
  v310 = *((_DWORD *)this + 108);
  v311 = *((_DWORD *)this + 109);
  v94 = v311 >= v310;
  v312 = v311 - v310;
  if (v94)
  {
    v314 = v310 & ~(v310 >> 31);
    v310 = 0;
    v313 = v309 + v314;
    v309 += v314 + v312;
  }
  else
  {
    v313 = v309;
  }
  v315 = v310;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v320 = (void *)v435;
  else
    v320 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v316, v317, v318, v319, v22, &unk_209A7AB86, v23, v23, v320, v309, v313, v315);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v309;
  *a5 += v313;
  *a6 += v315;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v321 = 12;
  else
    v321 = 16;
  v322 = *((_DWORD *)this + 112);
  v323 = *((_DWORD *)this + 113);
  v94 = v323 >= v322;
  v324 = v323 - v322;
  if (v94)
  {
    v326 = v322 & ~(v322 >> 31);
    v322 = 0;
    v325 = v321 + v326;
    v321 += v326 + v324;
  }
  else
  {
    v325 = v321;
  }
  v327 = v322;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v332 = (void *)v435;
  else
    v332 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v328, v329, v330, v331, v22, &unk_209A7AB86, v23, v23, v332, v321, v325, v327);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v321;
  *a5 += v325;
  *a6 += v327;
  v333 = BitArray::sizeObject((uint64_t)this + 624, 0);
  v334 = BitArray::sizeObject((uint64_t)this + 624, 1);
  v335 = BitArray::sizeObject((uint64_t)this + 624, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v340 = (void *)v435;
  else
    v340 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v336, v337, v338, v339, v22, &unk_209A7AB86, v23, v23, v340, v333, v334, v335);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v333;
  *a5 += v334;
  *a6 += v335;
  v341 = BitArray::sizeObject((uint64_t)this + 640, 0);
  v342 = BitArray::sizeObject((uint64_t)this + 640, 1);
  v343 = BitArray::sizeObject((uint64_t)this + 640, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v348 = (void *)v435;
  else
    v348 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v344, v345, v346, v347, v22, &unk_209A7AB86, v23, v23, v348, v341, v342, v343);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v341;
  *a5 += v342;
  *a6 += v343;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v353 = (void *)v435;
  else
    v353 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v349, v350, v351, v352, v22, &unk_209A7AB86, v23, v23, v353, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v358 = (void *)v435;
  else
    v358 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v354, v355, v356, v357, v22, &unk_209A7AB86, v23, v23, v358, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  v359 = sizeObject((char *)this + 464);
  v360 = sizeObject((char *)this + 464);
  v361 = sizeObject((char *)this + 464);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v366 = (void *)v435;
  else
    v366 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v362, v363, v364, v365, v22, &unk_209A7AB86, v23, v23, v366, v359, v360, v361);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v359;
  *a5 += v360;
  *a6 += v361;
  v367 = sizeObject((char *)this + 480);
  v368 = sizeObject((char *)this + 480);
  v369 = sizeObject((char *)this + 480);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v374 = (void *)v435;
  else
    v374 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v370, v371, v372, v373, v22, &unk_209A7AB86, v23, v23, v374, v367, v368, v369);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v367;
  *a5 += v368;
  *a6 += v369;
  v375 = sizeObject((char *)this + 496);
  v376 = sizeObject((char *)this + 496);
  v377 = sizeObject((char *)this + 496);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v382 = (void *)v435;
  else
    v382 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v378, v379, v380, v381, v22, &unk_209A7AB86, v23, v23, v382, v375, v376, v377);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v375;
  *a5 += v376;
  *a6 += v377;
  v383 = BitArray::sizeObject((uint64_t)this + 576, 0);
  v384 = BitArray::sizeObject((uint64_t)this + 576, 1);
  v385 = BitArray::sizeObject((uint64_t)this + 576, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v390 = (void *)v435;
  else
    v390 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v386, v387, v388, v389, v22, &unk_209A7AB86, v23, v23, v390, v383, v384, v385);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v383;
  *a5 += v384;
  *a6 += v385;
  v391 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v391 = 16;
  v392 = *((unsigned int *)this + 132);
  v393 = *((_DWORD *)this + 133);
  v394 = v391;
  if (v393 >= v392)
  {
    v395 = v391 + 4 * (v392 - 1) + 4;
    if ((int)v392 <= 0)
      v395 = v391;
    v394 = v395 + 4 * (v393 - v392);
  }
  v396 = v394 + 4;
  v397 = *((_DWORD *)this + 136);
  v398 = *((_DWORD *)this + 137);
  v399 = v397 & ~((int)v397 >> 31);
  v400 = v391;
  if (v398 >= v397)
    v400 = v391 + v399 + v398 - v397;
  v401 = v396 + v400;
  if (v393 >= v392)
  {
    v402 = v391 + 4;
    if ((int)v392 > 0)
      v391 += 4 + 4 * (v392 - 1);
  }
  else
  {
    v402 = v391 + 4;
  }
  if (v393 >= v392)
    v403 = 0;
  else
    v403 = 4 * v392;
  if (v398 >= v397)
    v404 = v399;
  else
    v404 = 0;
  v405 = v402 + v404 + v391;
  if (v398 >= v397)
    v406 = 0;
  else
    v406 = v397;
  v407 = v403 + v406;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v412 = (void *)v435;
  else
    v412 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v408, v409, v410, v411, v22, &unk_209A7AB86, v23, v23, v412, v401, v405, v407);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v401;
  *a5 += v405;
  *a6 += v407;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v417 = (void *)v435;
  else
    v417 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v413, v414, v415, v416, v22, &unk_209A7AB86, v23, v23, v417, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  v418 = (char *)this + 560;
  v419 = BitArray::sizeObject((uint64_t)this + 560, 0);
  v420 = BitArray::sizeObject((uint64_t)v418, 1);
  v421 = BitArray::sizeObject((uint64_t)v418, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if ((_DWORD)v436)
    v426 = (void *)v435;
  else
    v426 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v422, v423, v424, v425, v22, &unk_209A7AB86, v23, v23, v426, v419, v420, v421);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v419;
  *a5 += v420;
  *a6 += v421;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2287, (DgnString *)&v435);
  if ((_DWORD)v436)
    v431 = (void *)v435;
  else
    v431 = &unk_209A7AB86;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v427, v428, v429, v430, v432, &unk_209A7AB86, (35 - v432), (35 - v432), v431, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v435);
}

void sub_2099323B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

unint64_t WordList::lookupAll(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t *v10;
  unint64_t result;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  __int16 v19;
  char v20;

  *(_DWORD *)(a3 + 8) = 0;
  v9 = *a1;
  v18[0] = a2;
  v18[1] = a1;
  v18[2] = v9;
  v19 = -2;
  v20 = 0;
  if (*((_BYTE *)a1 + 272) && *((__int16 *)a1 + 137) == -2)
    v10 = a1 + 35;
  else
    v10 = *(uint64_t **)(a1[37] + 524272);
  result = DgnPrimArray<unsigned int>::searchFirstEqual(v10, 0, *((_DWORD *)v10 + 2), (uint64_t)v18, (uint64_t (*)(uint64_t, uint64_t))WordIdCollSearchCmp);
  if ((_DWORD)result == -1 || result >= *((_DWORD *)v10 + 2))
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = result;
    v15 = *(unsigned int *)(*v10 + 4 * result);
    do
    {
      v16 = *(unsigned int *)(*v10 + 4 * v14);
      if (*((_DWORD *)a1 + 97) <= v16
        || !*(_BYTE *)(a1[13] + v16)
        || *(_DWORD *)(a1[25] + 4 * v16) != *(_DWORD *)(a1[25] + 4 * v15))
      {
        break;
      }
      v17 = *(unsigned int *)(a3 + 8);
      if (v17 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v17 = *(unsigned int *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v17) = v16;
      ++*(_DWORD *)(a3 + 8);
      if ((*(_DWORD *)(a1[80] + ((v16 >> 3) & 0x1FFFFFFC)) & (1 << v16)) != 0)
        ++v13;
      else
        ++v12;
      ++v14;
    }
    while (v14 < *((unsigned int *)v10 + 2));
  }
  if (a4)
    *a4 = v13;
  if (a5)
    *a5 = v12;
  return result;
}

uint64_t WordList::lookupAllClientAddedProns(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  WordList::lookupAll(a1, a2, (uint64_t)&v10, 0, 0);
  v5 = v11;
  if ((_DWORD)v11)
  {
    v6 = 0;
    do
    {
      v7 = *(unsigned int *)(v10 + 4 * v6);
      if (((*(_DWORD *)(a1[80] + ((v7 >> 3) & 0x1FFFFFFC)) >> v7) & 1) == 0)
      {
        v8 = *(unsigned int *)(a3 + 8);
        if (v8 == *(_DWORD *)(a3 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
          v8 = *(unsigned int *)(a3 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a3 + 4 * v8) = v7;
        ++*(_DWORD *)(a3 + 8);
        v5 = v11;
      }
      ++v6;
    }
    while (v6 < v5);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v10);
}

void sub_2099326E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t WordList::lookupAll(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  return WordList::lookupAll(a1, a1[28] + *(unsigned int *)(a1[25] + 4 * *(unsigned int *)(a1[32] + 4 * a2)), a3, 0, 0);
}

unint64_t WordList::getAllGuessedWordsByOptionalTag(unint64_t this, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  *(_DWORD *)(a2 + 8) = 0;
  if (*(_BYTE *)(this + 272) && *(__int16 *)(this + 274) == -2)
    v4 = this + 280;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(this + 296) + 524272);
  if (*(_DWORD *)(v4 + 8))
  {
    v5 = 0;
    do
    {
      v6 = *(unsigned int *)(*(_QWORD *)v4 + 4 * v5);
      if (*(_DWORD *)(v3 + 528) > v6 && *(_DWORD *)(*(_QWORD *)(v3 + 520) + 4 * v6) != -1)
      {
        this = WordList::isGuessedWordByOptionalTag((WordList *)v3, *(_DWORD *)(*(_QWORD *)v4 + 4 * v5));
        if ((_DWORD)this)
        {
          v7 = *(unsigned int *)(a2 + 8);
          if (v7 == *(_DWORD *)(a2 + 12))
          {
            this = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
            v7 = *(unsigned int *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v7) = v6;
          ++*(_DWORD *)(a2 + 8);
        }
      }
      ++v5;
    }
    while (v5 < *(unsigned int *)(v4 + 8));
  }
  return this;
}

uint64_t WordList::numAltProns(WordList *this, const char *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  WordList::lookupAll((uint64_t *)this, (uint64_t)a2, (uint64_t)&v4, 0, 0);
  v2 = v5;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v4);
  return v2;
}

void sub_209932848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t WordList::getColls(WordList *this)
{
  return (uint64_t)this + 312;
}

void WordList::getWordsWithPrefix(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v14;
  uint64_t v15;

  v14 = (_BYTE *)(a1 + 272);
  if ((_DWORD)a2 != 65534
    && (DgnCollArray<unsigned int,WordList>::checkCollIdExposed(a1 + 272, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8),
        (_DWORD)a2 == 0xFFFF)
    || *v14 && *(unsigned __int16 *)(a1 + 274) == (_DWORD)a2)
  {
    v15 = a1 + 280;
  }
  else
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * a2);
  }
  WordList::getWordsWithPrefix(a1, v15, a2, a3, a4, a5, a6, a8);
}

void WordList::getWordsWithPrefix(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  CollMgr *v17;
  uint64_t EqualWithLastEqualBounds;
  unsigned int v19;
  CollMgr *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  CollMgr *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t i;
  uint64_t v40;
  uint64_t v41;
  unsigned int Equal;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _QWORD v48[3];
  __int16 v49;
  char v50;
  void *v51;
  int v52;
  _QWORD v53[3];
  __int16 v54;
  char v55;
  uint64_t v56;
  _QWORD v57[3];
  __int16 v58;
  char v59;

  v8 = (_BYTE *)a7;
  if (!*a4)
  {
    if (*a5)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2538, (uint64_t)"word/wordlist", 75, (uint64_t)"%s", a7, a8, (char)&errStr_word_wordlist_E_EMPTY_PREFIX1_WITH_NONEMPTY_PREFIX2);
    v38 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v38)
    {
      for (i = 0; i < v38; ++i)
      {
        v40 = *(unsigned int *)(*(_QWORD *)a2 + 4 * i);
        if (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * v40) == (_DWORD)v40)
        {
          v41 = *(unsigned int *)(a6 + 8);
          if (v41 == *(_DWORD *)(a6 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
            v41 = *(unsigned int *)(a6 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a6 + 4 * v41) = v40;
          ++*(_DWORD *)(a6 + 8);
          v38 = *(unsigned int *)(a2 + 8);
        }
      }
    }
    goto LABEL_47;
  }
  v14 = a3;
  if ((CollMgr::collationCanGetWordsWithPrefix(*(CollMgr **)a1, a3, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8) & 1) == 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2552, (uint64_t)"word/wordlist", 13, (uint64_t)"%s", v15, v16, (char)&errStr_word_wordlist_E_BAD_COLLATION);
  v17 = *(CollMgr **)a1;
  v57[0] = a4;
  v57[1] = a1;
  v57[2] = v17;
  v58 = v14;
  v59 = 1;
  v56 = 0;
  EqualWithLastEqualBounds = DgnPrimArray<unsigned int>::searchFirstEqualWithLastEqualBounds((_QWORD *)a2, 0, *(_DWORD *)(a2 + 8), (uint64_t)v57, (uint64_t (*)(uint64_t, uint64_t))WordIdCollSearchCmp, (_DWORD *)&v56 + 1, (int *)&v56);
  if ((_DWORD)EqualWithLastEqualBounds == -1)
  {
LABEL_47:
    *v8 = 0;
    return;
  }
  v19 = EqualWithLastEqualBounds;
  if (!*a5)
  {
    Equal = DgnPrimArray<unsigned int>::searchLastEqual((_QWORD *)a2, HIDWORD(v56), v56, (uint64_t)v57, (uint64_t (*)(uint64_t, uint64_t))WordIdCollSearchCmp);
    if (v19 <= Equal)
    {
      v43 = Equal;
      do
      {
        v44 = *(unsigned int *)(*(_QWORD *)a2 + 4 * v19);
        if (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * v44) == (_DWORD)v44)
        {
          v45 = *(unsigned int *)(a6 + 8);
          if (v45 == *(_DWORD *)(a6 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
            v45 = *(unsigned int *)(a6 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a6 + 4 * v45) = v44;
          ++*(_DWORD *)(a6 + 8);
        }
        ++v19;
      }
      while (v19 <= v43);
    }
    goto LABEL_47;
  }
  v20 = *(CollMgr **)a1;
  v53[0] = a4;
  v53[1] = a1;
  v53[2] = v20;
  v54 = v14;
  v55 = 0;
  v21 = DgnPrimArray<unsigned int>::searchLastEqual((_QWORD *)a2, EqualWithLastEqualBounds, v56, (uint64_t)v53, (uint64_t (*)(uint64_t, uint64_t))WordIdCollSearchCmp);
  if (v21 != -1)
  {
    while (v19 <= v21)
    {
      v22 = *(unsigned int *)(*(_QWORD *)a2 + 4 * v19);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * v22) == (_DWORD)v22)
      {
        v23 = *(unsigned int *)(a6 + 8);
        if (v23 == *(_DWORD *)(a6 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
          v23 = *(unsigned int *)(a6 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a6 + 4 * v23) = v22;
        ++*(_DWORD *)(a6 + 8);
      }
      ++v19;
    }
  }
  DgnString::DgnString((DgnString *)&v51, a4);
  DgnString::operator+=((DgnString *)&v51, a5);
  if (v52)
    v24 = v51;
  else
    v24 = &unk_209A7AB86;
  v25 = *(CollMgr **)a1;
  v48[0] = v24;
  v48[1] = a1;
  v48[2] = v25;
  v49 = v14;
  v50 = 1;
  v47 = 0;
  v26 = DgnPrimArray<unsigned int>::searchFirstEqualWithLastEqualBounds((_QWORD *)a2, v19, v56, (uint64_t)v48, (uint64_t (*)(uint64_t, uint64_t))WordIdCollSearchCmp, (_DWORD *)&v47 + 1, (int *)&v47);
  v31 = v26;
  if (v21 == -1)
    v32 = v19;
  else
    v32 = v21 + 1;
  if (v26 == -1)
    goto LABEL_49;
  v46 = v8;
  v33 = DgnPrimArray<unsigned int>::searchLastEqual((_QWORD *)a2, HIDWORD(v47), v47, (uint64_t)v48, (uint64_t (*)(uint64_t, uint64_t))WordIdCollSearchCmp);
  if (v31 <= v33)
  {
    v34 = v31;
    do
    {
      v35 = *(unsigned int *)(*(_QWORD *)a2 + 4 * v34);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * v35) == (_DWORD)v35)
      {
        v36 = *(unsigned int *)(a6 + 8);
        if (v36 == *(_DWORD *)(a6 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
          v36 = *(unsigned int *)(a6 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a6 + 4 * v36) = v35;
        ++*(_DWORD *)(a6 + 8);
      }
      ++v34;
    }
    while (v34 <= v33);
  }
  if (v31 <= v32)
  {
    v32 = v33 + 1;
    v8 = v46;
LABEL_49:
    v37 = v32 < *(_DWORD *)(a2 + 8)
       && CollMgr::collPrefixcmpUns8(*(CollMgr **)a1, v14, (CharInfo *)(*(_QWORD *)(a1 + 224)+ *(unsigned int *)(*(_QWORD *)(a1 + 200)+ 4 * *(unsigned int *)(*(_QWORD *)a2 + 4 * v32))), (CharInfo *)a4, v27, v28, v29, v30) == 0;
    goto LABEL_52;
  }
  v37 = 1;
  v8 = v46;
LABEL_52:
  *v8 = v37;
  DgnString::~DgnString((DgnString *)&v51);
}

void sub_209932D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t DgnPrimArray<unsigned int>::searchFirstEqualWithLastEqualBounds(_QWORD *a1, int a2, int a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), _DWORD *a6, int *a7)
{
  uint64_t v7;
  int v10;
  uint64_t v14;
  int v15;
  int v16;

  v7 = 0xFFFFFFFFLL;
  if (a3)
  {
    v10 = a2;
    *a6 = -1;
    *a7 = a3;
    if (a3 > a2)
    {
      v14 = (a3 - 1);
      do
      {
        v15 = v14 + v10;
        if ((int)v14 + v10 < 0 != __OFADD__((_DWORD)v14, v10))
          ++v15;
        v7 = (v15 >> 1);
        v16 = a5(*a1 + 4 * v7, a4);
        if (v16)
        {
          if (v16 < 0)
          {
            v10 = v7 + 1;
            v7 = v14;
          }
          else
          {
            *a7 = v7;
            v7 = (v7 - 1);
          }
        }
        else
        {
          if ((int)v7 > *a6)
            *a6 = v7;
          if ((_DWORD)v14 == v10)
            return v7;
        }
        v14 = v7;
      }
      while (v10 <= (int)v7);
      return 0xFFFFFFFFLL;
    }
  }
  return v7;
}

uint64_t DgnPrimArray<unsigned int>::searchLastEqual(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = 0xFFFFFFFFLL;
  if (a3)
  {
    v6 = a2;
    if (a3 > (int)a2)
    {
      v10 = a3 - 1;
      do
      {
        v11 = v10 + v6;
        if (v10 + (int)v6 < 0 != __OFADD__(v10, (_DWORD)v6))
          ++v11;
        v12 = v11 >> 1;
        if ((_DWORD)v6 == v10 - 1)
          v5 = v10;
        else
          v5 = v12;
        v13 = a5(*a1 + 4 * v5, a4);
        if (v13)
        {
          if (v13 < 0)
          {
            v5 = (v5 + 1);
          }
          else
          {
            v10 = v5 - 1;
            v5 = v6;
          }
        }
        else if (v10 == (_DWORD)v6)
        {
          return v5;
        }
        v6 = v5;
      }
      while ((int)v5 <= v10);
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

uint64_t WordList::getWordsWithCommonPron(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return WordIdPronCollArray::getWordsWithCommonPron((uint64_t *)(a1 + 352), a2, a3);
}

void WordList::verifyValid(WordList *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 97) <= a2 || !*(_BYTE *)(*((_QWORD *)this + 13) + a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2699, (uint64_t)"word/wordlist", 2, (uint64_t)"%d", a7, a8, a2);
}

void WordList::verifyVisible(WordList *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 97) <= a2
    || !*(_BYTE *)(*((_QWORD *)this + 13) + a2)
    || *(_DWORD *)(*((_QWORD *)this + 32) + 4 * a2) != a2)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2704, (uint64_t)"word/wordlist", 2, (uint64_t)"%d", a7, a8, a2);
  }
}

void WordList::verifyModifiable(WordList *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = a2;
  if (*(_WORD *)(*((_QWORD *)this + 19) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2711, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"modify");
  if (*(_WORD *)(*((_QWORD *)this + 21) + 2 * v9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2713, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"modify");
  if (*(_WORD *)(*((_QWORD *)this + 23) + 2 * v9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2715, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"modify");
}

void WordList::verifyDeletable(WordList *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = a2;
  if (*(_WORD *)(*((_QWORD *)this + 15) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2721, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete");
  if (*(_WORD *)(*((_QWORD *)this + 17) + 2 * v9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2723, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete");
  if (*(_WORD *)(*((_QWORD *)this + 19) + 2 * v9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2725, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete");
  if (*(_WORD *)(*((_QWORD *)this + 21) + 2 * v9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2727, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete");
  if (*(_WORD *)(*((_QWORD *)this + 23) + 2 * v9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2729, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete");
}

uint64_t WordList::addWord(WordList *this, CharInfo *a2, uint64_t a3, char a4, char a5, const char *a6)
{
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  v6 = WordList::addWordInternal((uint64_t)this, (const unsigned __int8 *)1, 0xFFFFFFLL, (unsigned int *)0xFFFFFF, 0xFFFFFFFFLL, a2, a3, (uint64_t)v8, a4, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v8);
  return v6;
}

void sub_2099332B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordList::getFreeId(WordList *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v2 = *((_DWORD *)this + 62);
  if (v2)
  {
    v3 = v2 - 1;
    v4 = *(unsigned int *)(*((_QWORD *)this + 30) + 4 * v3);
    *((_DWORD *)this + 62) = v3;
    v5 = *((_DWORD *)this + 97);
    if ((_DWORD)v4 != v5)
      return v4;
  }
  else
  {
    v4 = *((unsigned int *)this + 97);
    v5 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 97) = v5 + 1;
  v6 = *((_DWORD *)this + 66);
  if (v6 == *((_DWORD *)this + 67))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 256, 1, 1);
    v6 = *((_DWORD *)this + 66);
  }
  *((_DWORD *)this + 66) = v6 + 1;
  v7 = *((_DWORD *)this + 28);
  if (v7 == *((_DWORD *)this + 29))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 104, 1, 1);
    v7 = *((_DWORD *)this + 28);
  }
  *((_DWORD *)this + 28) = v7 + 1;
  v8 = *((_DWORD *)this + 52);
  if (v8 == *((_DWORD *)this + 53))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 200, 1, 1);
    v8 = *((_DWORD *)this + 52);
  }
  *((_DWORD *)this + 52) = v8 + 1;
  v9 = *((_DWORD *)this + 14);
  if (v9 == *((_DWORD *)this + 15))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 48, 1, 1);
    v9 = *((_DWORD *)this + 14);
  }
  *((_DWORD *)this + 14) = v9 + 1;
  v10 = *((_DWORD *)this + 10);
  if (v10 == *((_DWORD *)this + 11))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 32, 1, 1);
    v10 = *((_DWORD *)this + 10);
  }
  *((_DWORD *)this + 10) = v10 + 1;
  BitArray::add((WordList *)((char *)this + 624), 0);
  BitArray::add((WordList *)((char *)this + 640), 0);
  if (*((_DWORD *)this + 98) >= 2u)
  {
    v11 = *((_DWORD *)this + 108);
    if (v11 == *((_DWORD *)this + 109))
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 424, 1, 1);
      v11 = *((_DWORD *)this + 108);
    }
    *(_BYTE *)(*((_QWORD *)this + 53) + v11) = -2;
    ++*((_DWORD *)this + 108);
  }
  if (*((_DWORD *)this + 99) >= 2u)
  {
    v12 = *((_DWORD *)this + 112);
    if (v12 == *((_DWORD *)this + 113))
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 440, 1, 1);
      v12 = *((_DWORD *)this + 112);
    }
    *(_BYTE *)(*((_QWORD *)this + 55) + v12) = -2;
    ++*((_DWORD *)this + 112);
  }
  v13 = *((_DWORD *)this + 138);
  if (v13)
    BitArray::addSize((WordList *)((char *)this + 576), v13);
  v14 = *((_DWORD *)this + 32);
  if (v14 == *((_DWORD *)this + 33))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 120, 1, 1);
    v14 = *((_DWORD *)this + 32);
  }
  *((_DWORD *)this + 32) = v14 + 1;
  v15 = *((_DWORD *)this + 36);
  if (v15 == *((_DWORD *)this + 37))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 136, 1, 1);
    v15 = *((_DWORD *)this + 36);
  }
  *((_DWORD *)this + 36) = v15 + 1;
  v16 = *((_DWORD *)this + 150);
  if (v16 == *((_DWORD *)this + 151))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 592, 1, 1);
    v16 = *((_DWORD *)this + 150);
  }
  *((_DWORD *)this + 150) = v16 + 1;
  v17 = *((_DWORD *)this + 154);
  if (v17 == *((_DWORD *)this + 155))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 608, 1, 1);
    v17 = *((_DWORD *)this + 154);
  }
  *((_DWORD *)this + 154) = v17 + 1;
  v18 = *((_DWORD *)this + 40);
  if (v18 == *((_DWORD *)this + 41))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 152, 1, 1);
    v18 = *((_DWORD *)this + 40);
  }
  *((_DWORD *)this + 40) = v18 + 1;
  v19 = *((_DWORD *)this + 44);
  if (v19 == *((_DWORD *)this + 45))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 168, 1, 1);
    v19 = *((_DWORD *)this + 44);
  }
  *((_DWORD *)this + 44) = v19 + 1;
  v20 = *((_DWORD *)this + 48);
  if (v20 == *((_DWORD *)this + 49))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 184, 1, 1);
    v20 = *((_DWORD *)this + 48);
  }
  *((_DWORD *)this + 48) = v20 + 1;
  WordList::invalidateId(this, v5);
  return v4;
}

void WordList::getTagBits(WordList *this, unsigned int a2, int a3, BitArray *a4)
{
  if (a3)
    BitArray::getBitsFromRange((WordList *)((char *)this + 576), a4, *((_DWORD *)this + 138) * a2, *((_DWORD *)this + 138) * a2 + *((_DWORD *)this + 138));
  else
    TagBitsAndStrings::getTagBits((WordList *)((char *)this + 512), a2, a4);
}

uLong WordList::setPron(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uLong result;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  *(_DWORD *)(a1 + 380) ^= WordList::computeWordIdPronChecksum((WordList *)a1, a2);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= 0x3FFF)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 3447, (uint64_t)"word/wordlist", 8, (uint64_t)"%u %u", v16, v17, a2);
  v36 = a4;
  v37 = a5;
  if (a7)
  {
    if (v18 <= 1)
      goto LABEL_10;
  }
  else if (!(_DWORD)v18)
  {
    goto LABEL_10;
  }
  if (!**(_WORD **)a3 || !*(_WORD *)(*(_QWORD *)a3 + 2 * (v18 - 1)))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 3454, (uint64_t)"word/wordlist", 37, (uint64_t)"%u", v16, v17, a2);
LABEL_10:
  v19 = a2;
  PhnMgr::verifyPhonemePron2(*(_QWORD *)(a1 + 16), a3, *(_QWORD *)(a1 + 224) + *(unsigned int *)(*(_QWORD *)(a1 + 200) + 4 * a2), 0, v14, v15, v16, v17);
  if (a6)
    WordIdPronCollArray::remove((uint64_t *)(a1 + 352), a2);
  v38 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * a2) = *(_DWORD *)(a1 + 80);
  *(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * a2) = v18;
  if ((_DWORD)v18)
  {
    v20 = 0;
    v21 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 60);
    v22 = 2 * v18;
    do
    {
      v23 = *(unsigned __int16 *)(*(_QWORD *)a3 + v20);
      if (v23 == v21)
      {
        --*(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v19);
        *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * ((*(_DWORD *)(a1 + 80) - 1) >> 5)) |= 1 << (*(_BYTE *)(a1 + 80) - 1);
      }
      else
      {
        v24 = *(_DWORD *)(a1 + 80);
        if (v24 == *(_DWORD *)(a1 + 84))
        {
          DgnPrimArray<short>::reallocElts(a1 + 72, 1, 1);
          v24 = *(_DWORD *)(a1 + 80);
        }
        *(_WORD *)(*(_QWORD *)(a1 + 72) + 2 * v24) = v23;
        *(_DWORD *)(a1 + 80) = v24 + 1;
        BitArray::add((BitArray *)(a1 + 88), 0);
      }
      v20 += 2;
    }
    while (v22 != v20);
  }
  WordList::setEndPhonesInfo((_QWORD *)a1, v38);
  if ((a6 & 1) != 0)
    WordIdPronCollArray::add((WordIdPronCollArray *)(a1 + 352), v38);
  WordList::setPronPredecessorSeedCategory((WordList *)a1, v38, v36, v25, v26, v27, v28, v29);
  WordList::setPronSuccessorSeedCategory((WordList *)a1, v38, v37, v30, v31, v32, v33, v34);
  result = WordList::computeWordIdPronChecksum((WordList *)a1, v38);
  *(_DWORD *)(a1 + 380) ^= result;
  return result;
}

uint64_t WordList::addClientPronsAvoidDuplicates(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6, _QWORD *a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  CharInfo *v41;
  int v42;
  uint64_t v43;
  int v44;
  int v46;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  _QWORD v52[2];
  uint64_t v53;
  uint64_t v54;

  v13 = a2;
  v53 = 0;
  v54 = 0;
  WordList::lookupAll(a1, a1[28] + *(unsigned int *)(a1[25] + 4 * *(unsigned int *)(a1[32] + 4 * a2)), (uint64_t)&v53, 0, 0);
  v15 = *(unsigned int *)(a1[25] + 4 * v13);
  v16 = a1[28];
  v46 = v54;
  v52[0] = 0;
  v52[1] = 0;
  v17 = *(unsigned __int16 *)(a1[4] + 2 * v13);
  v51[0] = 0;
  v51[1] = 0;
  if (*((_DWORD *)a5 + 2))
  {
    v18 = 0;
    v19 = 0;
    v20 = a10;
    v41 = (CharInfo *)(v16 + v15);
    v44 = ~(1 << (char)v13);
    v43 = v13 >> 5;
    v42 = v17;
    do
    {
      v21 = *a5;
      v22 = (uint64_t *)(*a5 + 16 * v18);
      if (v17 || v18)
      {
        if (v19 == a8 || v19 + v46 == 254)
          break;
        v25 = a3;
        v26 = a5;
        v27 = v13;
        v28 = a4;
        v49 = 0;
        v50 = 0;
        if ((_DWORD)v54)
        {
          v29 = 0;
          v30 = (_DWORD *)(v21 + 16 * v18 + 8);
          while (1)
          {
            WordList::getPronWithWB(a1, *(_DWORD *)(v53 + 4 * v29), (uint64_t)&v49);
            if (&v49 == v22)
              break;
            v31 = v50;
            if ((_DWORD)v50 == *v30)
            {
              while ((int)v31 >= 1)
              {
                v32 = *(unsigned __int16 *)(v49 - 2 + 2 * v31);
                v33 = *(unsigned __int16 *)(*v22 - 2 + 2 * v31--);
                if (v32 != v33)
                  goto LABEL_20;
              }
              break;
            }
LABEL_20:
            if (++v29 >= (unint64_t)v54)
              goto LABEL_21;
          }
          a4 = v28;
          v13 = v27;
          a5 = v26;
          a3 = v25;
          v17 = v42;
        }
        else
        {
LABEL_21:
          a4 = v28;
          v13 = v27;
          a5 = v26;
          a3 = v25;
          v17 = v42;
          if (a10)
          {
            v34 = *(unsigned int *)(a10 + 8);
            if (v34 == *(_DWORD *)(a10 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a10, 1, 1);
              v34 = *(unsigned int *)(a10 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a10 + 4 * v34) = v18;
            ++*(_DWORD *)(a10 + 8);
          }
          v35 = v19 + 1;
          if (v42)
            v36 = v19 + 1;
          else
            v36 = v19;
          v37 = WordList::addWordInternal((uint64_t)a1, (const unsigned __int8 *)1, 0xFFFFFFLL, v13, 0xFFFFFFFFLL, v41, (v36 + v46), (uint64_t)v51, 1, 1);
          v38 = *(unsigned int *)(a4 + 8);
          if (v38 == *(_DWORD *)(a4 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(a4, 1, 1);
            v38 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v38) = v37;
          ++*(_DWORD *)(a4 + 8);
          v39 = v54;
          if (v54 == (unint64_t)HIDWORD(v54))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v53, 1, 1);
            v39 = v54;
          }
          *(_DWORD *)(v53 + 4 * v39) = v37;
          LODWORD(v54) = v54 + 1;
          WordList::setPron((uint64_t)a1, v37, (uint64_t)v22, *(unsigned __int8 *)(*a6 + v18), *(unsigned __int8 *)(*a7 + v18), 1, 1);
          v19 = v35;
        }
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v49);
        v20 = a10;
      }
      else
      {
        if (v20)
        {
          v23 = *(unsigned int *)(v20 + 8);
          if (v23 == *(_DWORD *)(v20 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(v20, 1, 1);
            v23 = *(unsigned int *)(v20 + 8);
          }
          *(_DWORD *)(*(_QWORD *)v20 + 4 * v23) = 0;
          ++*(_DWORD *)(v20 + 8);
        }
        v24 = *(unsigned int *)(a3 + 8);
        if (v24 == *(_DWORD *)(a3 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
          v24 = *(unsigned int *)(a3 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a3 + 4 * v24) = (_DWORD)v13;
        ++*(_DWORD *)(a3 + 8);
        WordList::setPron((uint64_t)a1, v13, (uint64_t)v22, *(unsigned __int8 *)*a6, *(unsigned __int8 *)*a7, 1, 1);
        ++v19;
        *(_DWORD *)(a1[80] + 4 * v43) &= v44;
      }
      ++v18;
    }
    while (v18 < *((unsigned int *)a5 + 2));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v51);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v52);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v53);
}

void sub_209933C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  va_list va2;

  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v11 - 96);
  _Unwind_Resume(a1);
}

_QWORD *WordList::getPronWithWB(_QWORD *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  unsigned int v12;
  __int16 v13;

  v3 = *(unsigned __int16 *)(result[4] + 2 * a2);
  *(_DWORD *)(a3 + 8) = 0;
  if (v3)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    v8 = a2;
    v9 = result[9] + 2 * *(unsigned int *)(result[6] + 4 * a2);
    do
    {
      v10 = *(_WORD *)(v9 + 2 * v7);
      if (v6 == *(_DWORD *)(a3 + 12))
      {
        result = (_QWORD *)DgnPrimArray<short>::reallocElts(a3, 1, 1);
        v6 = *(_DWORD *)(a3 + 8);
      }
      v11 = *(_QWORD *)a3;
      *(_WORD *)(*(_QWORD *)a3 + 2 * v6++) = v10;
      *(_DWORD *)(a3 + 8) = v6;
      v12 = v7 + *(_DWORD *)(v5[6] + 4 * v8);
      if (((*(_DWORD *)(v5[11] + 4 * (v12 >> 5)) >> v12) & 1) != 0)
      {
        v13 = *(_WORD *)(v5[2] + 60);
        if (v6 == *(_DWORD *)(a3 + 12))
        {
          result = (_QWORD *)DgnPrimArray<short>::reallocElts(a3, 1, 1);
          v6 = *(_DWORD *)(a3 + 8);
          v11 = *(_QWORD *)a3;
        }
        *(_WORD *)(v11 + 2 * v6++) = v13;
        *(_DWORD *)(a3 + 8) = v6;
      }
      ++v7;
    }
    while (v3 != v7);
  }
  return result;
}

uint64_t WordList::getNumClientProns(WordList *this, unsigned int a2)
{
  uint64_t v2;
  _QWORD v4[2];
  unsigned int v5;

  if (!*(_WORD *)(*((_QWORD *)this + 4) + 2 * a2))
    return 0;
  v5 = 0;
  v4[0] = 0;
  v4[1] = 0;
  WordList::lookupAll((uint64_t *)this, *((_QWORD *)this + 28) + *(unsigned int *)(*((_QWORD *)this + 25) + 4 * a2), (uint64_t)v4, 0, &v5);
  v2 = v5;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v4);
  return v2;
}

void sub_209933DFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordList::deleteWordClientProns(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v19;
  unsigned int v20;
  int v21;
  void *v24[2];
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v13 = *(_QWORD *)(a1 + 224) + *(unsigned int *)(*(_QWORD *)(a1 + 200) + 4 * a2);
  WordList::verifyModifiable((WordList *)a1, a2, a3, a4, a5, a6, a7, a8);
  v27 = 0;
  v28 = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)&v27, (uint64_t *)a3, 0, *(_DWORD *)(a3 + 8));
  v14 = v28;
  v25 = 0;
  v26 = 0;
  WordList::lookupAll((uint64_t *)a1, v13, (uint64_t)&v25, 0, 0);
  if ((_DWORD)v26 == v14)
  {
    if (v14 >= 2)
    {
      v15 = *(_DWORD *)(a5 + 8);
      v16 = v14 - 1;
      do
      {
        v17 = *((_DWORD *)v25 + v16);
        if (v15 == *(_DWORD *)(a5 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
          v15 = *(_DWORD *)(a5 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a5 + 4 * v15) = v17;
        v15 = *(_DWORD *)(a5 + 8) + 1;
        *(_DWORD *)(a5 + 8) = v15;
      }
      while ((unint64_t)(v16-- & 0xFFFFFFFE));
      if (!HIDWORD(v26))
      {
        v24[0] = 0;
        HIDWORD(v26) = realloc_array(v25, v24, 4uLL, 4 * v26, 4 * v26, 1) >> 2;
        v25 = v24[0];
      }
      v14 = 1;
      LODWORD(v26) = 1;
    }
    DgnPrimArray<int>::copyArraySlice(a4, (uint64_t *)&v25, 0, v14);
    v24[0] = 0;
    v24[1] = 0;
    WordList::setPron(a1, a2, (uint64_t)v24, *(unsigned __int8 *)(a1 + 419), *(unsigned __int8 *)(a1 + 420), 1, 1);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v24);
  }
  else if (v14)
  {
    v19 = *(_DWORD *)(a5 + 8);
    v20 = v14 - 1;
    do
    {
      v21 = *(_DWORD *)(v27 + 4 * v20);
      if (v19 == *(_DWORD *)(a5 + 12))
      {
        DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v19 = *(_DWORD *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v19) = v21;
      v19 = *(_DWORD *)(a5 + 8) + 1;
      *(_DWORD *)(a5 + 8) = v19;
    }
    while ((unint64_t)v20--);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v25);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
}

void sub_209933FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void WordList::invalidateId(WordList *this, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;

  *(_DWORD *)(*((_QWORD *)this + 32) + 4 * a2) = 0xFFFFFF;
  *(_BYTE *)(*((_QWORD *)this + 13) + a2) = 0;
  *(_DWORD *)(*((_QWORD *)this + 25) + 4 * a2) = 0;
  *(_DWORD *)(*((_QWORD *)this + 6) + 4 * a2) = 0;
  v4 = a2;
  *(_WORD *)(*((_QWORD *)this + 4) + 2 * a2) = 0;
  if (*((_DWORD *)this + 98) >= 2u)
    *(_BYTE *)(*((_QWORD *)this + 53) + a2) = *((_BYTE *)this + 419);
  if (*((_DWORD *)this + 99) >= 2u)
    *(_BYTE *)(*((_QWORD *)this + 55) + a2) = *((_BYTE *)this + 420);
  v5 = a2 >> 5;
  *(_DWORD *)(*((_QWORD *)this + 78) + 4 * v5) &= ~(1 << a2);
  *(_DWORD *)(*((_QWORD *)this + 80) + 4 * v5) &= ~(1 << a2);
  v6 = *((_DWORD *)this + 138);
  if (v6)
    BitArray::clearRange((WordList *)((char *)this + 576), v6 * a2, v6 * a2 + v6);
  if (*((_DWORD *)this + 132) > a2)
  {
    v7 = *((_QWORD *)this + 65);
    if (*(_DWORD *)(v7 + 4 * v4) != -1)
    {
      *(_DWORD *)(v7 + 4 * v4) = -1;
      *((_BYTE *)this + 512) = 1;
    }
  }
  *(_WORD *)(*((_QWORD *)this + 15) + 2 * v4) = 0;
  *(_WORD *)(*((_QWORD *)this + 17) + 2 * v4) = 0;
  *(_WORD *)(*((_QWORD *)this + 74) + 2 * v4) = -1;
  *(_WORD *)(*((_QWORD *)this + 76) + 2 * v4) = -1;
  *(_WORD *)(*((_QWORD *)this + 19) + 2 * v4) = 0;
  *(_WORD *)(*((_QWORD *)this + 21) + 2 * v4) = 0;
  *(_WORD *)(*((_QWORD *)this + 23) + 2 * v4) = 0;
}

uint64_t WordList::resetWordList(WordList *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 32);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((_QWORD *)this + 32) = 0;
  }
  *((_QWORD *)this + 33) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 13);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((_QWORD *)this + 13) = 0;
  }
  *((_QWORD *)this + 14) = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 25);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((_QWORD *)this + 25) = 0;
  }
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 54) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 28);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((_QWORD *)this + 28) = 0;
  }
  *((_QWORD *)this + 29) = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 4);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((_QWORD *)this + 4) = 0;
  }
  *((_QWORD *)this + 5) = 0;
  v7 = (_QWORD *)*((_QWORD *)this + 6);
  if (v7)
  {
    MemChunkFree(v7, 0);
    *((_QWORD *)this + 6) = 0;
  }
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  v8 = (_QWORD *)*((_QWORD *)this + 9);
  if (v8)
  {
    MemChunkFree(v8, 0);
    *((_QWORD *)this + 9) = 0;
  }
  *((_QWORD *)this + 10) = 0;
  BitArray::releaseAll((uint64_t)this + 88);
  v9 = (_QWORD *)*((_QWORD *)this + 74);
  if (v9)
  {
    MemChunkFree(v9, 0);
    *((_QWORD *)this + 74) = 0;
  }
  *((_QWORD *)this + 75) = 0;
  v10 = (_QWORD *)*((_QWORD *)this + 76);
  if (v10)
  {
    MemChunkFree(v10, 0);
    *((_QWORD *)this + 76) = 0;
  }
  *((_QWORD *)this + 77) = 0;
  BitArray::releaseAll((uint64_t)this + 576);
  TagBitsAndStrings::reInit((WordList *)((char *)this + 512));
  v11 = (_QWORD *)*((_QWORD *)this + 15);
  if (v11)
  {
    MemChunkFree(v11, 0);
    *((_QWORD *)this + 15) = 0;
  }
  *((_QWORD *)this + 16) = 0;
  v12 = (_QWORD *)*((_QWORD *)this + 17);
  if (v12)
  {
    MemChunkFree(v12, 0);
    *((_QWORD *)this + 17) = 0;
  }
  *((_QWORD *)this + 18) = 0;
  v13 = (_QWORD *)*((_QWORD *)this + 19);
  if (v13)
  {
    MemChunkFree(v13, 0);
    *((_QWORD *)this + 19) = 0;
  }
  *((_QWORD *)this + 20) = 0;
  v14 = (_QWORD *)*((_QWORD *)this + 21);
  if (v14)
  {
    MemChunkFree(v14, 0);
    *((_QWORD *)this + 21) = 0;
  }
  *((_QWORD *)this + 22) = 0;
  v15 = (_QWORD *)*((_QWORD *)this + 23);
  if (v15)
  {
    MemChunkFree(v15, 0);
    *((_QWORD *)this + 23) = 0;
  }
  *((_QWORD *)this + 24) = 0;
  v16 = (_QWORD *)*((_QWORD *)this + 30);
  if (v16)
  {
    MemChunkFree(v16, 0);
    *((_QWORD *)this + 30) = 0;
  }
  *((_QWORD *)this + 31) = 0;
  return PrefiltererWordIdPronCollArray::removeAll((uint64_t)this + 352);
}

void WordList::deleteWords(EnvMgr **this, uint64_t a2, BOOL *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  unsigned int v12;
  unsigned int ItemEnvId;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  EnvMgr *v27;
  EnvMgr *v28;
  uint64_t v29;
  int v30;

  if (*(_DWORD *)(a2 + 8))
  {
    v11 = 0;
    do
    {
      v12 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v11);
      WordList::verifyValid((WordList *)this, v12, (uint64_t)a3, a4, a5, a6, a7, a8);
      ItemEnvId = EnvMgr::getItemEnvId(this[3], v12);
      if (ItemEnvId)
      {
        EnvMgr::killEnv(this[3], ItemEnvId, v14, v15, v16, v17, v18, v19);
        EnvMgr::setItemEnvId(this[3], v12, 0, v20, v21, v22, v23, v24);
      }
      *((_DWORD *)this + 94) ^= WordList::computeWordIdNameChecksum((WordList *)this, v12);
      *((_DWORD *)this + 95) ^= WordList::computeWordIdPronChecksum((WordList *)this, v12);
      ++v11;
    }
    while (v11 < *(unsigned int *)(a2 + 8));
  }
  WordIdPronCollArray::removeArray((uint64_t)(this + 44), a2);
  DgnCollArray<unsigned int,WordList>::removeArray((uint64_t)(this + 34), a2);
  if (*(_DWORD *)(a2 + 8))
  {
    v25 = 0;
    do
    {
      v26 = *(unsigned int *)(*(_QWORD *)a2 + 4 * v25);
      *((_DWORD *)this + 16) += *((unsigned __int16 *)this[4] + v26);
      if (*((_DWORD *)this[32] + v26) == (_DWORD)v26)
      {
        --*((_DWORD *)this + 96);
        v27 = this[25];
        v28 = this[28];
        *((_DWORD *)this + 54) += strlen((const char *)v28 + *((unsigned int *)v27 + v26)) + 1;
        *((_BYTE *)v28 + *((unsigned int *)v27 + v26)) = 0;
        if (*((_WORD *)this[4] + v26))
          *((_WORD *)this[9] + *((unsigned int *)this[6] + v26)) = *((_WORD *)this[2] + 28);
      }
      WordList::invalidateId((WordList *)this, v26);
      v29 = *((unsigned int *)this + 62);
      if (v29 == *((_DWORD *)this + 63))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)(this + 30), 1, 1);
        v29 = *((unsigned int *)this + 62);
      }
      *((_DWORD *)this[30] + v29) = v26;
      ++*((_DWORD *)this + 62);
      ++v25;
    }
    while (v25 < *(unsigned int *)(a2 + 8));
  }
  if (*((_WORD *)this + 109) || *((_DWORD *)this + 16) >= 0x10000u)
  {
    WordList::compact((uint64_t)this);
    if (*((_BYTE *)this + 512))
      TagBitsAndStrings::compact((TagBitsAndStrings *)(this + 64));
  }
  v30 = *((_DWORD *)this + 72);
  if (!v30)
    WordList::resetWordList((WordList *)this);
  *a3 = v30 == 0;
}

uint64_t *WordList::getNumProns(uint64_t *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  _QWORD v4[2];

  if (*(_WORD *)(this[4] + 2 * a2))
  {
    v4[0] = 0;
    v4[1] = 0;
    WordList::lookupAll(this, this[28] + *(unsigned int *)(this[25] + 4 * a2), (uint64_t)v4, a3, a4);
    return (uint64_t *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v4);
  }
  else
  {
    *a3 = 0;
    *a4 = 0;
  }
  return this;
}

void sub_209934580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t WordList::getPron(unint64_t result, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  __int16 *v8;
  _WORD *v9;
  __int16 v10;

  v4 = result;
  v5 = a2;
  v6 = *(unsigned __int16 *)(*(_QWORD *)(result + 32) + 2 * a2);
  v7 = *(_DWORD *)(a3 + 12);
  if (v6 > v7)
    result = DgnPrimArray<short>::reallocElts(a3, v6 - v7, 0);
  *(_DWORD *)(a3 + 8) = v6;
  if ((_DWORD)v6)
  {
    v8 = (__int16 *)(*(_QWORD *)(v4 + 72) + 2 * *(unsigned int *)(*(_QWORD *)(v4 + 48) + 4 * v5));
    v9 = *(_WORD **)a3;
    do
    {
      v10 = *v8++;
      *v9++ = v10;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t WordList::getWordFamilyCollatedSeedableProns(uint64_t a1, unsigned int a2, int a3, unsigned int a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = 0;
  v26 = 0;
  WordList::lookupAll((uint64_t *)a1, *(_QWORD *)(a1 + 224)+ *(unsigned int *)(*(_QWORD *)(a1 + 200) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * a2)), (uint64_t)&v25, 0, 0);
  v9 = v26;
  if ((_DWORD)v26)
  {
    v10 = 0;
    v11 = a4;
    do
    {
      v12 = *(unsigned int *)(v25 + 4 * v10);
      if (!a3
        || (*(_DWORD *)(a1 + 392) < 2u ? (v13 = 0) : (v13 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 424) + v12)),
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 400) + 16 * v13) + v11)))
      {
        v23 = 0;
        v24 = 0;
        WordList::getPronWithWB((_QWORD *)a1, v12, (uint64_t)&v23);
        v14 = *(unsigned int *)(a5 + 8);
        if (v14 == *(_DWORD *)(a5 + 12))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(a5, 1, 1);
          v14 = *(unsigned int *)(a5 + 8);
        }
        v15 = (_QWORD *)(*(_QWORD *)a5 + 16 * v14);
        *v15 = 0;
        v15[1] = 0;
        ++*(_DWORD *)(a5 + 8);
        v16 = v24;
        if ((_DWORD)v24)
        {
          v17 = 0;
          do
          {
            v18 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)
                                      + 2 * *(unsigned __int16 *)(v23 + 2 * v17));
            if (v18 != 0xFFFF)
            {
              v19 = *(_QWORD *)a5 + 16 * (*(_DWORD *)(a5 + 8) - 1);
              v21 = (unsigned int *)(v19 + 8);
              v20 = *(_DWORD *)(v19 + 8);
              if (v20 == *(_DWORD *)(v19 + 12))
              {
                DgnPrimArray<short>::reallocElts(*(_QWORD *)a5 + 16 * (*(_DWORD *)(a5 + 8) - 1), 1, 1);
                v20 = *v21;
              }
              *(_WORD *)(*(_QWORD *)v19 + 2 * v20) = v18;
              *v21 = v20 + 1;
              v16 = v24;
            }
            ++v17;
          }
          while (v17 < v16);
        }
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v23);
        v9 = v26;
      }
      ++v10;
    }
    while (v10 < v9);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v25);
}

void sub_2099347C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordList::getRequiredWordTagsVersion(WordList *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t WordList::getOptionalWordTagsVersion(WordList *this)
{
  return *((unsigned int *)this + 115);
}

uint64_t WordList::addIncludingStateRef(uint64_t this, unsigned int a2)
{
  ++*(_WORD *)(*(_QWORD *)(this + 120) + 2 * a2);
  return this;
}

uint64_t WordList::removeIncludingStateRef(uint64_t this, unsigned int a2)
{
  --*(_WORD *)(*(_QWORD *)(this + 120) + 2 * a2);
  return this;
}

uint64_t WordList::getIncludingStateRefCount(WordList *this, unsigned int a2)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 15) + 2 * a2);
}

uint64_t WordList::addIncludingRuleRef(uint64_t this, unsigned int a2)
{
  ++*(_WORD *)(*(_QWORD *)(this + 136) + 2 * a2);
  return this;
}

uint64_t WordList::removeIncludingRuleRef(uint64_t this, unsigned int a2)
{
  --*(_WORD *)(*(_QWORD *)(this + 136) + 2 * a2);
  return this;
}

uint64_t WordList::getIncludingRuleRefCount(WordList *this, unsigned int a2)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 17) + 2 * a2);
}

uint64_t WordList::getIncludingLatticeRefCount(WordList *this, unsigned int a2)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 19) + 2 * a2);
}

uint64_t WordList::addIncludingPrefilterResultRef(uint64_t this, unsigned int a2)
{
  ++*(_WORD *)(*(_QWORD *)(this + 168) + 2 * a2);
  return this;
}

uint64_t WordList::removeIncludingPrefilterResultRef(uint64_t this, unsigned int a2)
{
  --*(_WORD *)(*(_QWORD *)(this + 168) + 2 * a2);
  return this;
}

uint64_t WordList::getIncludingPrefilterResultRefCount(WordList *this, unsigned int a2)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 21) + 2 * a2);
}

uint64_t WordList::addIncludingSausageRef(uint64_t this, unsigned int a2)
{
  ++*(_WORD *)(*(_QWORD *)(this + 184) + 2 * a2);
  return this;
}

uint64_t WordList::removeIncludingSausageRef(uint64_t this, unsigned int a2)
{
  --*(_WORD *)(*(_QWORD *)(this + 184) + 2 * a2);
  return this;
}

uint64_t WordList::getIncludingSausageRefCount(WordList *this, unsigned int a2)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 23) + 2 * a2);
}

DgnString *WordList::phonemesToStr(DgnString *result, uint64_t a2, DgnString *this)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;

  *((_DWORD *)this + 2) = 0;
  if (*(_DWORD *)(a2 + 8))
  {
    v5 = (uint64_t)result;
    v6 = 0;
    do
    {
      if (v6)
        DgnString::operator+=(this, ".");
      v7 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 16 * *(unsigned __int16 *)(*(_QWORD *)a2 + 2 * v6);
      if (*(_DWORD *)(v7 + 8))
        v8 = *(char **)v7;
      else
        v8 = (char *)&unk_209A7AB86;
      result = DgnString::operator+=(this, v8);
      ++v6;
    }
    while (v6 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t WordList::compareElements(CollMgr **this, unsigned int *a2, unsigned int *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CollMgr *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;

  v8 = *this;
  v9 = *((unsigned __int16 *)this + 8);
  v10 = *a2;
  v11 = *a3;
  result = CollMgr::collStrcmpUns8(this[1], v9, (CharInfo *)(*((_QWORD *)*this + 28) + *(unsigned int *)(*((_QWORD *)*this + 25) + 4 * v10)), (CharInfo *)(*((_QWORD *)*this + 28) + *(unsigned int *)(*((_QWORD *)*this + 25) + 4 * v11)), a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    if (v9 > 0xFFFD)
      return *(unsigned __int8 *)(*((_QWORD *)v8 + 13) + v10)
           - *(unsigned __int8 *)(*((_QWORD *)v8 + 13) + v11);
    v13 = *((_QWORD *)v8 + 32);
    v14 = *(_DWORD *)(v13 + 4 * v10);
    LODWORD(v13) = *(_DWORD *)(v13 + 4 * v11);
    result = (v14 - v13);
    if (v14 == (_DWORD)v13)
      return *(unsigned __int8 *)(*((_QWORD *)v8 + 13) + v10)
           - *(unsigned __int8 *)(*((_QWORD *)v8 + 13) + v11);
  }
  return result;
}

uint64_t HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::HashNCHV(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C219708;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 12;
  else
    v7 = 16;
  *(_DWORD *)(a1 + 24) = 16;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_209934AA8(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::~HashNCHV(uint64_t a1)
{
  HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::~HashNCHV(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::~HashNCHV(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C219708;
  if (*(_DWORD *)(a1 + 8))
    HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t (*v7)(_QWORD *);
  uint64_t (*v8)(char *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = *(char **)v5;
          v7 = *(uint64_t (**)(_QWORD *))(v1 + 96);
          if (v7)
            result = v7((_QWORD *)v5 + 1);
          v8 = *(uint64_t (**)(char *))(v1 + 104);
          if (v8)
            result = v8(v5 + 12);
          *(_QWORD *)v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t *HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::reInit(uint64_t a1, int a2)
{
  _QWORD *v4;
  int v5;
  uint64_t *result;

  if (*(_DWORD *)(a1 + 8))
    HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(a1);
  v4 = *(_QWORD **)(a1 + 80);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_DWORD *)(a1 + 88) = 0;
  DgnPool::deleteAllWithoutDestroying((DgnPool *)(a1 + 24));
  v5 = RoundUpToPowerOf2(a2, (unsigned int *)(a1 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v5;
  result = HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  return result;
}

uint64_t HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::add(uint64_t result, int *a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = result;
  v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1)
    result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  v7 = *a2;
  v8 = *(_DWORD *)(v5 + 16);
  if (v8)
    v9 = (-1640531527 * *a2) >> -(char)v8;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v5 + 80);
  v11 = *(_QWORD *)(v5 + 32);
  if (!v11)
  {
    result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    v11 = *(_QWORD *)(v5 + 32);
    v7 = *a2;
  }
  v12 = (_QWORD *)(v10 + 8 * v9);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)v11;
  *(_DWORD *)(v11 + 8) = v7;
  *(_DWORD *)(v11 + 12) = *a3;
  ++*(_DWORD *)(v5 + 8);
  if (*(_BYTE *)(v5 + 20))
  {
    *(_QWORD *)v11 = *v12;
  }
  else
  {
    *(_QWORD *)v11 = 0;
    v13 = (_QWORD *)*v12;
    if (*v12)
    {
      do
      {
        v12 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
  }
  *v12 = v11;
  return result;
}

void DummyLanguageModel::DummyLanguageModel(DummyLanguageModel *this, int a2, const WordList *a3)
{
  _QWORD *v3;

  LanguageModel::LanguageModel(this, a2, a3);
  *v3 = &off_24C2162E0;
}

void DummyLanguageModel::printSize(DummyLanguageModel *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/dummylm.cpp", 56, (DgnString *)&v28);
  if (v29)
    v16 = (void *)v28;
  else
    v16 = &unk_209A7AC0C;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7AC0C, a3, &unk_209A7AC0C, v16);
  DgnString::~DgnString((DgnString *)&v28);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7AC0C);
  v27 = 0;
  v28 = 0;
  v26 = 0;
  LanguageModel::printSize(this, 0xFFFFFFFFLL, (a3 + 1), &v28, &v27, &v26);
  *a4 += v28;
  *a5 += v27;
  *a6 += v26;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/dummylm.cpp", 60, (DgnString *)&v28);
  if (v29)
    v25 = (void *)v28;
  else
    v25 = &unk_209A7AC0C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, a3, &unk_209A7AC0C, (35 - a3), (35 - a3), v25, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v28);
}

void sub_209934EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DummyLanguageModel::dumpWordLM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/dummylm.cpp", 79, (uint64_t)"lm/dummylm", 1, (uint64_t)"%s", a7, a8, (char)&unk_209A7AC0C);
}

void DummyLanguageModel::getWordTransducer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/dummylm.cpp", 88, (uint64_t)"lm/dummylm", 2, (uint64_t)"%s", a7, a8, (char)&errStr_lm_dummylm_E_DUMMY_WORD_LM_WTRANS);
}

uint64_t DummyLanguageModel::languageScore(DummyLanguageModel *this, unsigned int a2, unsigned int a3, LMStats *a4, LMContextData *a5, LMScoreDetails *a6, BOOL a7, BOOL a8, BOOL *a9)
{
  *a9 = 1;
  if (a6)
    LMScoreDetails::addDetails((unint64_t)a6, 0, 7, 0);
  return 0;
}

uint64_t DummyLanguageModel::languageScoreForSearch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  *a7 = 1;
  return 0;
}

void DummyLanguageModel::languageScoreForPrefilterer(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a3 + 12);
  v7 = v5;
  if (v5 > v6)
  {
    DgnPrimArray<short>::reallocElts(a3, v5 - v6, 0);
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(a3 + 8) = v5;
  if (v7)
    bzero(*(void **)a3, 2 * v7);
}

uint64_t DummyLanguageModel::isFinalSilenceScoredVerify(DummyLanguageModel *this)
{
  return 0;
}

uint64_t DummyLanguageModel::canSaveAsText(DummyLanguageModel *this)
{
  return 1;
}

uint64_t DummyLanguageModel::setLMScale(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t DummyLanguageModel::recentBufferUsesWord(DummyLanguageModel *this)
{
  return 1;
}

void DummyLanguageModel::~DummyLanguageModel(RecentBuffer **this)
{
  LanguageModel::~LanguageModel(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t *LanguageModel::createContextData(LanguageModel *this)
{
  uint64_t *result;

  if (!*((_QWORD *)this + 1))
    return 0;
  result = MemChunkAlloc(0x10uLL, 0);
  *result = (uint64_t)&unk_24C2145C8;
  *((_DWORD *)result + 2) = 16777212;
  return result;
}

uint64_t DummyLanguageModel::getRecentBufferLanguageModel(DummyLanguageModel *this)
{
  return 0;
}

void LMContextData::~LMContextData(LMContextData *this)
{
  JUMPOUT(0x20BD149A8);
}

uint64_t LMContextData::sizeObject(uint64_t a1, int a2)
{
  return 4 * (a2 != 3);
}

void MrecInitModule_osfile_mrecutil(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;

  if (!gParDebugOsFile)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugOsFile", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugOsFile = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugOsFile);
  }
  if (!gParDiagnosticShowTestReadFileInfo)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DiagnosticShowTestReadFileInfo", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDiagnosticShowTestReadFileInfo = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticShowTestReadFileInfo);
  }
  if (!gParDiagnosticShowTestReadFileDetails)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DiagnosticShowTestReadFileDetails", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDiagnosticShowTestReadFileDetails = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticShowTestReadFileDetails);
  }
  if (!gParDiagnosticOsFileSimulateReadFailure)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DiagnosticOsFileSimulateReadFailure", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDiagnosticOsFileSimulateReadFailure = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticOsFileSimulateReadFailure);
  }
}

void OsFile::OsFile(OsFile *this, const FileSpec *a2, int a3)
{
  DgnString *v6;

  v6 = FileSpec::FileSpec(this);
  FileSpec::operator=(v6, a2);
  *((_DWORD *)this + 4) = a3;
  *((_QWORD *)this + 3) = 0;
}

void sub_20993530C(_Unwind_Exception *a1)
{
  FileSpec *v1;

  FileSpec::~FileSpec(v1);
  _Unwind_Resume(a1);
}

void OsFile::~OsFile(OsFile *this)
{
  int v2;
  int *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x80000000) == 0)
  {
    *((_DWORD *)this + 4) = -1;
    if (close(v2))
    {
      __error();
      v3 = __error();
      v4 = strerror(*v3);
      DgnString::DgnString((DgnString *)&v7, v4);
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 125, (uint64_t)"mrecutil/osfile", 1, (uint64_t)"%.500s %.500s %d %.500s", v5, v6, (char)"close");
      DgnString::~DgnString((DgnString *)&v7);
    }
  }
  FileSpec::~FileSpec(this);
}

uint64_t OsFile::sizeObject(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = FileSpec::sizeObject(a1);
  v4 = 12;
  if (a2 == 3)
    v4 = 0;
  return v4 + v3;
}

BOOL OsFile::deleteFileAndCleanUp(OsFile *this, std::error_code *a2)
{
  int v3;
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  const std::__fs::filesystem::path *v8;
  uint64_t v10;

  v3 = *((_DWORD *)this + 4);
  if ((v3 & 0x80000000) == 0)
  {
    *((_DWORD *)this + 4) = -1;
    if (close(v3))
    {
      __error();
      v4 = __error();
      v5 = strerror(*v4);
      DgnString::DgnString((DgnString *)&v10, v5);
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 148, (uint64_t)"mrecutil/osfile", 1, (uint64_t)"%.500s %.500s %d %.500s", v6, v7, (char)"close");
      DgnString::~DgnString((DgnString *)&v10);
    }
  }
  if (*((_DWORD *)this + 2))
    v8 = *(const std::__fs::filesystem::path **)this;
  else
    v8 = (const std::__fs::filesystem::path *)&byte_209A88803;
  return remove(v8, a2);
}

void sub_20993551C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void OsFile::seekFromBeg(OsFile *this, off_t a2)
{
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*((_QWORD *)this + 3) != a2)
  {
    if (lseek(*((_DWORD *)this + 4), a2, 0) < 0)
    {
      __error();
      v4 = __error();
      v5 = strerror(*v4);
      DgnString::DgnString((DgnString *)&v8, v5);
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 173, (uint64_t)"mrecutil/osfile", 2, (uint64_t)"%.500s %.500s %llu %d %.500s", v6, v7, (char)"lseek");
      DgnString::~DgnString((DgnString *)&v8);
    }
    *((_QWORD *)this + 3) = a2;
  }
}

void sub_209935618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void OsFile::seekFromBegGrowWithZeros(OsFile *this, off_t a2)
{
  if (*((_QWORD *)this + 3) != a2)
    OsFile::seekFromBeg(this, a2);
}

void OsFile::seekToEnd(OsFile *this)
{
  int *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  off_t v6;
  int *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (lseek(*((_DWORD *)this + 4), 0, 2) < 0)
  {
    __error();
    v2 = __error();
    v3 = strerror(*v2);
    DgnString::DgnString((DgnString *)&v11, v3);
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 221, (uint64_t)"mrecutil/osfile", 2, (uint64_t)"%.500s %.500s %llu %d %.500s", v4, v5, (char)"lseek");
    DgnString::~DgnString((DgnString *)&v11);
  }
  v6 = lseek(*((_DWORD *)this + 4), 0, 1);
  if (v6 < 0)
  {
    __error();
    v7 = __error();
    v8 = strerror(*v7);
    DgnString::DgnString((DgnString *)&v11, v8);
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 225, (uint64_t)"mrecutil/osfile", 1, (uint64_t)"%.500s %.500s %d %.500s", v9, v10, (char)"tell");
    DgnString::~DgnString((DgnString *)&v11);
  }
  *((_QWORD *)this + 3) = v6;
}

void sub_2099357C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t OsFile::tell(OsFile *this)
{
  return *((_QWORD *)this + 3);
}

ssize_t OsFile::readBytes(OsFile *this, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v10;
  ssize_t v11;
  int *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v10 = a3;
  if (*(_BYTE *)(gParDiagnosticOsFileSimulateReadFailure + 41))
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 257, (uint64_t)"mrecutil/osfile", 2, (uint64_t)"%.500s %.500s %llu %d %.500s", a7, a8, (char)"read");
  v11 = read(*((_DWORD *)this + 4), a2, v10);
  if (v11 == -1)
  {
    __error();
    v12 = __error();
    v13 = strerror(*v12);
    DgnString::DgnString((DgnString *)&v17, v13);
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 261, (uint64_t)"mrecutil/osfile", 2, (uint64_t)"%.500s %.500s %llu %d %.500s", v14, v15, (char)"read");
    DgnString::~DgnString((DgnString *)&v17);
  }
  *((_QWORD *)this + 3) += v11;
  return v11;
}

void sub_20993594C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void OsFile::writeBytes(OsFile *this, const char *a2, size_t __nbyte)
{
  uint64_t v4;
  int *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = __nbyte;
  if (write(*((_DWORD *)this + 4), a2, __nbyte) == -1)
  {
    __error();
    v5 = __error();
    v6 = strerror(*v5);
    DgnString::DgnString((DgnString *)&v9, v6);
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 303, (uint64_t)"mrecutil/osfile", 2, (uint64_t)"%.500s %.500s %llu %d %.500s", v7, v8, (char)"write");
    DgnString::~DgnString((DgnString *)&v9);
  }
  *((_QWORD *)this + 3) += v4;
}

void sub_209935A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

off_t OsFile::getFileSize(OsFile *this)
{
  int *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  stat v7;

  if (fstat(*((_DWORD *)this + 4), &v7))
  {
    __error();
    v1 = __error();
    v2 = strerror(*v1);
    DgnString::DgnString((DgnString *)&v6, v2);
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 334, (uint64_t)"mrecutil/osfile", 1, (uint64_t)"%.500s %.500s %d %.500s", v3, v4, (char)"fstat");
    DgnString::~DgnString((DgnString *)&v6);
  }
  return v7.st_size;
}

void sub_209935B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void OsFile::shrinkSize(OsFile *this, off_t a2)
{
  int *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  off_t v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (ftruncate(*((_DWORD *)this + 4), a2) < 0)
  {
    __error();
    v3 = __error();
    v4 = strerror(*v3);
    DgnString::DgnString((DgnString *)&v12, v4);
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 345, (uint64_t)"mrecutil/osfile", 2, (uint64_t)"%.500s %.500s %llu %d %.500s", v5, v6, (char)"ftruncate");
    DgnString::~DgnString((DgnString *)&v12);
  }
  v7 = lseek(*((_DWORD *)this + 4), 0, 1);
  if (v7 < 0)
  {
    __error();
    v8 = __error();
    v9 = strerror(*v8);
    DgnString::DgnString((DgnString *)&v12, v9);
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 362, (uint64_t)"mrecutil/osfile", 1, (uint64_t)"%.500s %.500s %d %.500s", v10, v11, (char)"tell");
    DgnString::~DgnString((DgnString *)&v12);
  }
  *((_QWORD *)this + 3) = v7;
}

void sub_209935CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void OsFile::openOsFile(const FileSpec *a1, int a2)
{
  int v3;
  const char *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  uint64_t *v10;

  if ((a2 - 1) > 3)
    v3 = 0;
  else
    v3 = dword_209A7AC70[a2 - 1];
  if (*((_DWORD *)a1 + 2))
    v4 = *(const char **)a1;
  else
    v4 = &byte_209A88803;
  v5 = open(v4, v3, 438);
  v8 = v5;
  if (v5 > 2)
  {
    if ((v5 & 0x80000000) != 0)
      return;
  }
  else
  {
    if (*((_DWORD *)a1 + 2))
      v9 = *(char **)a1;
    else
      v9 = &byte_209A88803;
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 405, (uint64_t)"mrecutil/osfile", 4, (uint64_t)"%.500s %d", v6, v7, (char)v9);
  }
  v10 = MemChunkAlloc(0x20uLL, 0);
  OsFile::OsFile((OsFile *)v10, a1, v8);
}

BOOL OsFile::fileExists(OsFile **this, const FileSpec *a2)
{
  OsFile *v2;

  if (*((_DWORD *)this + 2))
    v2 = *this;
  else
    v2 = (OsFile *)&byte_209A88803;
  return OsFile::fileExists(v2, (const char *)a2);
}

BOOL OsFile::fileExists(OsFile *this, const char *a2)
{
  int v2;
  int *v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = access((const char *)this, 0);
  if (v2)
  {
    v3 = __error();
    if (*v3 > 0x16 || ((1 << *v3) & 0x402004) == 0)
    {
      v5 = strerror(*v3);
      DgnString::DgnString((DgnString *)&v9, v5);
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 441, (uint64_t)"mrecutil/osfile", 1, (uint64_t)"%.500s %.500s %d %.500s", v6, v7, (char)"access");
      DgnString::~DgnString((DgnString *)&v9);
    }
  }
  return v2 == 0;
}

void sub_209935EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

BOOL OsFile::dirExists(OsFile *this, const char *a2)
{
  stat v4;

  return !stat((const char *)this, &v4) && (v4.st_mode & 0xF000) == 0x4000;
}

OsFile *DgnDelete<OsFile>(OsFile *result)
{
  _QWORD *v1;

  if (result)
  {
    OsFile::~OsFile(result);
    return (OsFile *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t OsFile::compareElements(OsFile *this, unsigned int *a2, unsigned int *a3, const void *a4)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)this + 16 * *a2;
  if (*(_DWORD *)(v5 + 8))
    v6 = *(const char **)v5;
  else
    v6 = &byte_209A88803;
  v7 = v4 + 16 * *a3;
  if (*(_DWORD *)(v7 + 8))
    v8 = *(const char **)v7;
  else
    v8 = &byte_209A88803;
  return strcmp(v6, v8);
}

uint64_t FindMatchingFiles(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  const char *v6;
  uint64_t result;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  const char *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  stat v31;
  glob_t v32;
  uint64_t v33;
  unsigned int v34;
  void *v35;
  unsigned int v36;

  if (*(_DWORD *)(a1 + 8))
    v6 = *(const char **)a1;
  else
    v6 = &byte_209A88803;
  result = glob(v6, 36, 0, &v32);
  if ((_DWORD)result)
    v8 = (_DWORD)result == -3;
  else
    v8 = 1;
  if (v8)
  {
    if (v32.gl_pathc)
    {
      v9 = 0;
      v10 = 1;
      do
      {
        v11 = a2[2];
        if (v11 == a2[3])
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a2, 1, 1);
          v11 = a2[2];
        }
        FileSpec::FileSpec((FileSpec *)(*(_QWORD *)a2 + 16 * v11));
        v12 = a2[2];
        a2[2] = v12 + 1;
        FileSpec::fillFromName((FileSpec *)(*(_QWORD *)a2 + 16 * v12), v32.gl_pathv[v9]);
        if (a3)
        {
          v13 = *(_QWORD *)a2 + 16 * (a2[2] - 1);
          if (*(_DWORD *)(v13 + 8))
            v14 = *(const char **)v13;
          else
            v14 = &byte_209A88803;
          if (stat(v14, &v31))
            v15 = 0;
          else
            v15 = (v31.st_mode & 0xF000) == 0x4000;
          v16 = v15;
          v17 = *(_DWORD *)(a3 + 8);
          if (v17 == *(_DWORD *)(a3 + 12))
          {
            DgnPrimArray<char>::reallocElts(a3, 1, 1);
            v17 = *(_DWORD *)(a3 + 8);
          }
          *(_BYTE *)(*(_QWORD *)a3 + v17) = v16;
          *(_DWORD *)(a3 + 8) = v17 + 1;
        }
        v9 = v10;
      }
      while (v32.gl_pathc > v10++);
    }
    globfree(&v32);
    if (*(_DWORD *)(a1 + 8))
      v19 = *(const char **)a1;
    else
      v19 = &byte_209A88803;
    v20 = strlen(v19);
    if (v20 > 2 && v19[v20 - 3] != 47)
    {
      v21 = v20 - 2;
      if (v19[v21] == 46 && v19[v20 - 1] == 42)
      {
        v22 = MemChunkAlloc(v20 + 1, 0);
        v23 = strcpy((char *)v22, v19);
        v23[v21] = 0;
        if (!stat(v23, &v31))
        {
          DgnArray<FileSpec>::add((uint64_t)a2);
          FileSpec::fillFromName((FileSpec *)(*(_QWORD *)a2 + 16 * (a2[2] - 1)), (char *)v22);
          if (a3)
            DgnPrimArray<BOOL>::add(a3, (v31.st_mode & 0xF000) == 0x4000);
        }
        MemChunkFree(v22, 0);
      }
    }
    v24 = a2[2];
    *(_QWORD *)&v31.st_dev = 0;
    v31.st_ino = 0;
    if ((_DWORD)v24)
    {
      v35 = 0;
      v25 = realloc_array(0, &v35, 4 * v24, 0, 0, 1);
      v26 = 0;
      v27 = v35;
      *(_QWORD *)&v31.st_dev = v35;
      LODWORD(v31.st_ino) = v24;
      HIDWORD(v31.st_ino) = v25 >> 2;
      do
      {
        v27[v26] = v26;
        ++v26;
      }
      while (v24 != v26);
      v28 = v24;
    }
    else
    {
      v27 = 0;
      v28 = 0;
    }
    mrec_qsort_r<OsFile>((uint64_t)v27, v28, 4uLL, (OsFile *)a2);
    DgnArray<FileSpec>::DgnArray(&v35, v24);
    DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)&v33, v24);
    if ((_DWORD)v24)
    {
      v29 = 0;
      v30 = 0;
      do
      {
        FileSpec::operator=((DgnString *)((char *)v35 + v29), (DgnString *)(*(_QWORD *)a2 + 16 * *(unsigned int *)(*(_QWORD *)&v31.st_dev + 4 * v30)));
        if (a3)
          *(_BYTE *)(v33 + v30) = *(_BYTE *)(*(_QWORD *)a3 + *(unsigned int *)(*(_QWORD *)&v31.st_dev + 4 * v30));
        ++v30;
        v29 += 16;
      }
      while (v28 != v30);
    }
    DgnArray<FileSpec>::releaseAll((uint64_t)a2);
    DgnArray<FileSpec>::copyArraySlice((uint64_t)a2, &v35, 0, v36);
    if (a3)
      DgnPrimArray<BOOL>::copyArraySlice(a3, &v33, 0, v34);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v33);
    DgnArray<FileSpec>::releaseAll((uint64_t)&v35);
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v31);
  }
  return result;
}

void sub_2099362C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  DgnArray<FileSpec>::releaseAll(v2 - 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

FileSpec *DgnArray<FileSpec>::add(uint64_t a1)
{
  unsigned int v2;
  FileSpec *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 == *(_DWORD *)(a1 + 12))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1, 1, 1);
    v2 = *(_DWORD *)(a1 + 8);
  }
  result = FileSpec::FileSpec((FileSpec *)(*(_QWORD *)a1 + 16 * v2));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t DgnPrimArray<BOOL>::add(unint64_t result, char a2)
{
  unint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 == *(_DWORD *)(result + 12))
  {
    result = DgnPrimArray<char>::reallocElts(result, 1, 1);
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_BYTE *)(*(_QWORD *)v3 + v4) = a2;
  *(_DWORD *)(v3 + 8) = v4 + 1;
  return result;
}

uint64_t mrec_qsort_r<OsFile>(uint64_t result, unint64_t a2, unint64_t a3, OsFile *a4)
{
  OsFile *v4;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  int v16;
  const void *v17;
  int v18;
  const void *v19;
  unsigned int *v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int *v23;
  int v24;
  const void *v25;
  int v26;
  const void *v27;
  int v28;
  const void *v29;
  int v30;
  int v31;
  const void *v32;
  unsigned int *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  char v39;
  int v40;
  _QWORD *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int *v60;
  int64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  char v69;
  BOOL v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  int v78;
  OsFile *v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  unsigned int *v104;
  unint64_t v105;
  unsigned int *v106;
  _BOOL4 v107;
  unsigned int *v108;
  unsigned int *v109;
  unint64_t v110;
  unsigned int *v111;
  BOOL v113;
  int v114;

  v4 = a4;
  v6 = a2;
  v7 = (unsigned int *)result;
  v8 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v9 = 2;
  else
    v9 = a3 != 8;
  v113 = ((result | a3) & 7) == 0;
  v114 = v9;
  if (a2 < 7)
  {
LABEL_117:
    if ((uint64_t)(v6 * a3) > (uint64_t)a3)
    {
      v79 = v4;
      v111 = (unsigned int *)((char *)v7 + v6 * a3);
      v80 = (unsigned int *)((char *)v7 + a3);
      v81 = v7;
      do
      {
        if (v80 > v7)
        {
          v82 = v81;
          v83 = v80;
          do
          {
            v84 = v83;
            v83 = (unsigned int *)((char *)v83 + v8);
            result = OsFile::compareElements(v79, v83, v84, a4);
            if ((int)result < 1)
              break;
            if (v114)
            {
              if (v113)
              {
                v85 = 0;
                v86 = (uint64_t)v82 + a3;
                do
                {
                  v87 = *(_QWORD *)(v86 + 8 * v85);
                  *(_QWORD *)(v86 + 8 * v85) = *(_QWORD *)&v82[2 * v85];
                  *(_QWORD *)&v82[2 * v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                v89 = 0;
                v90 = (uint64_t)v82 + a3;
                do
                {
                  v91 = *(_BYTE *)(v90 + v89);
                  *(_BYTE *)(v90 + v89) = *((_BYTE *)v82 + v89);
                  *((_BYTE *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              v88 = *(_QWORD *)v84;
              *(_QWORD *)v84 = *(_QWORD *)v83;
              *(_QWORD *)v83 = v88;
            }
            v82 = (unsigned int *)((char *)v82 + v8);
          }
          while (v83 > v7);
        }
        v80 = (unsigned int *)((char *)v80 + a3);
        v81 = (unsigned int *)((char *)v81 + a3);
      }
      while (v80 < v111);
    }
    return result;
  }
  v107 = a3 != 8;
  v10 = a3 >> 3;
  while (1)
  {
    v11 = (unsigned int *)((char *)v7 + (v6 >> 1) * a3);
    if (v6 == 7)
      goto LABEL_44;
    v12 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
    if (v6 >= 0x29)
    {
      v108 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
      v13 = (v6 >> 3) * a3;
      v14 = (unsigned int *)((char *)v7 + v13);
      v105 = v13;
      v15 = (unsigned int *)((char *)v7 + 2 * v13);
      v16 = OsFile::compareElements(v4, v7, (unsigned int *)((char *)v7 + v13), a4);
      v109 = v14;
      v18 = OsFile::compareElements(v4, v14, v15, v17);
      if (v16 < 0)
      {
        if ((v18 & 0x80000000) == 0)
        {
          if ((int)OsFile::compareElements(v4, v7, v15, v19) >= 0)
            v20 = v7;
          else
            v20 = v15;
          goto LABEL_18;
        }
      }
      else if (v18 <= 0)
      {
        if ((int)OsFile::compareElements(v4, v7, v15, v19) >= 0)
          v20 = v15;
        else
          v20 = v7;
LABEL_18:
        v109 = v20;
      }
      v22 = (v6 >> 3) * a3;
      v23 = (unsigned int *)((char *)v11 + v105);
      v104 = (unsigned int *)((char *)v11 - v105);
      v24 = OsFile::compareElements(v4, (unsigned int *)((char *)v11 - v105), (unsigned int *)((char *)v7 + (v6 >> 1) * a3), v19);
      v26 = OsFile::compareElements(v4, (unsigned int *)((char *)v7 + (v6 >> 1) * a3), (unsigned int *)((char *)v11 + v105), v25);
      if (v24 < 0)
      {
        if ((v26 & 0x80000000) == 0)
        {
          v11 = (unsigned int *)((char *)v11 - v105);
          if ((int)OsFile::compareElements(v4, v104, v23, v27) < 0)
            v11 = v23;
        }
      }
      else if (v26 <= 0)
      {
        v11 = (unsigned int *)((char *)v11 - v105);
        if ((int)OsFile::compareElements(v4, v104, v23, v27) >= 0)
          v11 = v23;
      }
      v12 = (unsigned int *)((char *)v108 - v105);
      v106 = (unsigned int *)((char *)v108 - 2 * v105);
      v28 = OsFile::compareElements(v4, (unsigned int *)((char *)v108 - 2 * v22), (unsigned int *)((char *)v108 - v22), v27);
      v30 = OsFile::compareElements(v4, (unsigned int *)((char *)v108 - v22), v108, v29);
      if (v28 < 0)
      {
        v21 = v109;
        if ((v30 & 0x80000000) == 0)
        {
          v12 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
          if ((int)OsFile::compareElements(v4, v106, v108, a4) >= 0)
            v12 = v106;
        }
      }
      else
      {
        v21 = v109;
        if (v30 <= 0)
        {
          v12 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
          if ((int)OsFile::compareElements(v4, v106, v108, a4) < 0)
            v12 = v106;
        }
      }
      goto LABEL_35;
    }
    v21 = v7;
LABEL_35:
    v31 = OsFile::compareElements(v4, v21, v11, a4);
    result = OsFile::compareElements(v4, v11, v12, v32);
    if (v31 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = OsFile::compareElements(v4, v21, v12, a4);
        if ((int)result >= 0)
          v11 = v21;
        else
          v11 = v12;
      }
    }
    else if ((int)result <= 0)
    {
      result = OsFile::compareElements(v4, v21, v12, a4);
      if ((int)result >= 0)
        v11 = v12;
      else
        v11 = v21;
    }
LABEL_44:
    if (v114)
    {
      if (v113)
      {
        v33 = v7;
        v34 = a3 >> 3;
        do
        {
          v35 = *(_QWORD *)v33;
          *(_QWORD *)v33 = *(_QWORD *)v11;
          v33 += 2;
          *(_QWORD *)v11 = v35;
          v11 += 2;
          --v34;
        }
        while (v34);
      }
      else
      {
        v37 = a3;
        v38 = v7;
        do
        {
          v39 = *(_BYTE *)v38;
          *(_BYTE *)v38 = *(_BYTE *)v11;
          v38 = (unsigned int *)((char *)v38 + 1);
          *(_BYTE *)v11 = v39;
          v11 = (unsigned int *)((char *)v11 + 1);
          --v37;
        }
        while (v37);
      }
    }
    else
    {
      v36 = *(_QWORD *)v7;
      *(_QWORD *)v7 = *(_QWORD *)v11;
      *(_QWORD *)v11 = v36;
    }
    v40 = 0;
    v41 = (_QWORD *)((char *)v7 + a3);
    v110 = v6;
    v42 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
    v43 = v42;
    v44 = (unsigned int *)((char *)v7 + a3);
LABEL_53:
    while (v44 <= v43)
    {
      result = OsFile::compareElements(v4, v44, v7, a4);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v114)
        {
          if (v113)
          {
            v45 = 0;
            do
            {
              v46 = v41[v45];
              v41[v45] = *(_QWORD *)&v44[2 * v45];
              *(_QWORD *)&v44[2 * v45++] = v46;
            }
            while (v10 != v45);
          }
          else
          {
            v55 = 0;
            do
            {
              v56 = *((_BYTE *)v41 + v55);
              *((_BYTE *)v41 + v55) = *((_BYTE *)v44 + v55);
              *((_BYTE *)v44 + v55++) = v56;
            }
            while (a3 != v55);
          }
        }
        else
        {
          v54 = *v41;
          *v41 = *(_QWORD *)v44;
          *(_QWORD *)v44 = v54;
        }
        v41 = (_QWORD *)((char *)v41 + a3);
        v40 = 1;
      }
      v44 = (unsigned int *)((char *)v44 + a3);
    }
    while (v44 <= v43)
    {
      result = OsFile::compareElements(v4, v43, v7, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v114)
        {
          if (v113)
          {
            v52 = 0;
            do
            {
              v53 = *(_QWORD *)&v44[2 * v52];
              *(_QWORD *)&v44[2 * v52] = *(_QWORD *)&v43[2 * v52];
              *(_QWORD *)&v43[2 * v52++] = v53;
            }
            while (v10 != v52);
          }
          else
          {
            v58 = 0;
            do
            {
              v59 = *((_BYTE *)v44 + v58);
              *((_BYTE *)v44 + v58) = *((_BYTE *)v43 + v58);
              *((_BYTE *)v43 + v58++) = v59;
            }
            while (a3 != v58);
          }
        }
        else
        {
          v57 = *(_QWORD *)v44;
          *(_QWORD *)v44 = *(_QWORD *)v43;
          *(_QWORD *)v43 = v57;
        }
        v44 = (unsigned int *)((char *)v44 + a3);
        v43 = (unsigned int *)((char *)v43 + v8);
        v40 = 1;
        goto LABEL_53;
      }
      if (!(_DWORD)result)
      {
        if (v114)
        {
          if (v113)
          {
            v47 = 0;
            do
            {
              v48 = *(_QWORD *)&v43[2 * v47];
              *(_QWORD *)&v43[2 * v47] = *(_QWORD *)&v42[2 * v47];
              *(_QWORD *)&v42[2 * v47++] = v48;
            }
            while (v10 != v47);
          }
          else
          {
            v50 = 0;
            do
            {
              v51 = *((_BYTE *)v43 + v50);
              *((_BYTE *)v43 + v50) = *((_BYTE *)v42 + v50);
              *((_BYTE *)v42 + v50++) = v51;
            }
            while (a3 != v50);
          }
        }
        else
        {
          v49 = *(_QWORD *)v43;
          *(_QWORD *)v43 = *(_QWORD *)v42;
          *(_QWORD *)v42 = v49;
        }
        v42 = (unsigned int *)((char *)v42 + v8);
        v40 = 1;
      }
      v43 = (unsigned int *)((char *)v43 + v8);
    }
    v60 = (unsigned int *)((char *)v7 + v110 * a3);
    if (!v40)
      break;
    v61 = (char *)v44 - (char *)v41;
    if ((char *)v41 - (char *)v7 >= (char *)v44 - (char *)v41)
      v62 = (char *)v44 - (char *)v41;
    else
      v62 = (char *)v41 - (char *)v7;
    if (v62)
    {
      if (v113)
      {
        v63 = (_QWORD *)((char *)v44 - v62);
        v64 = v62 >> 3;
        v65 = v7;
        do
        {
          v66 = *(_QWORD *)v65;
          *(_QWORD *)v65 = *v63;
          v65 += 2;
          *v63++ = v66;
          --v64;
        }
        while (v64);
      }
      else
      {
        v67 = -(uint64_t)v62;
        v68 = v7;
        do
        {
          v69 = *(_BYTE *)v68;
          *(_BYTE *)v68 = *((_BYTE *)v44 + v67);
          v68 = (unsigned int *)((char *)v68 + 1);
          *((_BYTE *)v44 + v67) = v69;
          v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    v71 = (char *)v42 - (char *)v43;
    if ((char *)v42 - (char *)v43 >= (char *)v60 - ((char *)v42 + a3))
      v72 = (char *)v60 - ((char *)v42 + a3);
    else
      v72 = (char *)v42 - (char *)v43;
    if (v72)
    {
      if (v113)
      {
        v73 = (char *)v60 - v72;
        v74 = v72 >> 3;
        do
        {
          v75 = *(_QWORD *)v44;
          *(_QWORD *)v44 = *(_QWORD *)v73;
          v44 += 2;
          *(_QWORD *)v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        v76 = -(uint64_t)v72;
        do
        {
          v77 = *(_BYTE *)v44;
          *(_BYTE *)v44 = *((_BYTE *)v60 + v76);
          v44 = (unsigned int *)((char *)v44 + 1);
          *((_BYTE *)v60 + v76) = v77;
          v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3)
      result = mrec_qsort_r<OsFile>(v7, v61 / a3, a3, a4);
    if (v71 <= (uint64_t)a3)
      return result;
    v7 = (unsigned int *)((char *)v60 - v71);
    v6 = v71 / a3;
    v78 = v107;
    if (((((_DWORD)v60 - (_DWORD)v71) | a3) & 7) != 0)
      v78 = 2;
    v113 = ((((_DWORD)v60 - (_DWORD)v71) | a3) & 7) == 0;
    v114 = v78;
    v4 = a4;
    if (v6 < 7)
      goto LABEL_117;
  }
  v92 = (unsigned int *)((char *)v7 + a3);
  if ((uint64_t)(v110 * a3) > (uint64_t)a3)
  {
    v93 = v7;
    do
    {
      if (v92 > v7)
      {
        v94 = v93;
        v95 = v92;
        do
        {
          v96 = v95;
          v95 = (unsigned int *)((char *)v95 + v8);
          result = OsFile::compareElements(a4, v95, v96, a4);
          if ((int)result < 1)
            break;
          if (v114)
          {
            if (v113)
            {
              v97 = 0;
              v98 = (uint64_t)v94 + a3;
              do
              {
                v99 = *(_QWORD *)(v98 + 8 * v97);
                *(_QWORD *)(v98 + 8 * v97) = *(_QWORD *)&v94[2 * v97];
                *(_QWORD *)&v94[2 * v97++] = v99;
              }
              while (v10 != v97);
            }
            else
            {
              v101 = 0;
              v102 = (uint64_t)v94 + a3;
              do
              {
                v103 = *(_BYTE *)(v102 + v101);
                *(_BYTE *)(v102 + v101) = *((_BYTE *)v94 + v101);
                *((_BYTE *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            v100 = *(_QWORD *)v96;
            *(_QWORD *)v96 = *(_QWORD *)v95;
            *(_QWORD *)v95 = v100;
          }
          v94 = (unsigned int *)((char *)v94 + v8);
        }
        while (v95 > v7);
      }
      v92 = (unsigned int *)((char *)v92 + a3);
      v93 = (unsigned int *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

_QWORD *DgnArray<FileSpec>::DgnArray(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if ((_DWORD)a2)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a1, a2, 0);
    v4 = *((_DWORD *)a1 + 2);
    if (v4 > v2)
    {
      if ((int)v4 > (int)v2)
      {
        v5 = (int)v4;
        v6 = 16 * (int)v4 - 16;
        do
        {
          --v5;
          FileSpec::~FileSpec((FileSpec *)(*a1 + v6));
          v6 -= 16;
        }
        while (v5 > (int)v2);
      }
      goto LABEL_11;
    }
  }
  else
  {
    v4 = 0;
  }
  v7 = v2 - v4;
  if (v2 > v4)
  {
    v8 = 16 * v4;
    do
    {
      FileSpec::FileSpec((FileSpec *)(*a1 + v8));
      v8 += 16;
      --v7;
    }
    while (v7);
  }
LABEL_11:
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

void DgnArray<FileSpec>::copyArraySlice(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 >= 1)
  {
    v9 = 16 * v8 - 16;
    do
    {
      FileSpec::~FileSpec((FileSpec *)(*(_QWORD *)a1 + v9));
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 12);
  if (a4 <= v10)
  {
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_14;
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1, a4 - v10, 0);
    v11 = *(_DWORD *)(a1 + 8);
  }
  v13 = 0;
  v12 = v11;
  do
  {
    FileSpec::FileSpec((FileSpec *)(*(_QWORD *)a1 + 16 * v12), (const FileSpec *)(*a2 + 16 * (a3 + v13)));
    v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      v14 = (int)v12;
      v15 = 16 * (int)v12 - 16;
      do
      {
        --v14;
        FileSpec::~FileSpec((FileSpec *)(*(_QWORD *)a1 + v15));
        v15 -= 16;
      }
      while (v14 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  v16 = a4 - v12;
  if (a4 > v12)
  {
    v17 = 16 * v12;
    do
    {
      FileSpec::FileSpec((FileSpec *)(*(_QWORD *)a1 + v17));
      v17 += 16;
      --v16;
    }
    while (v16);
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = a4;
}

void MrecInitModule_retlist_prefilt(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;

  if (!gParDebugShowPrefiltererReturnLists)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowPrefiltererReturnLists", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowPrefiltererReturnLists = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPrefiltererReturnLists);
  }
  if (!gParDiagnosticPrefiltererReturnListSortByScore)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DiagnosticPrefiltererReturnListSortByScore", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDiagnosticPrefiltererReturnListSortByScore = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticPrefiltererReturnListSortByScore);
  }
}

void ReturnListMgr::ReturnListMgr(ReturnListMgr *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_WORD *)this = 127;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
}

void ReturnListMgr::~ReturnListMgr(ReturnListMgr *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 88);
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)this + 56);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8);
}

void ReturnListMgr::printSize(ReturnListMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 129, (DgnString *)&v94);
  if ((_DWORD)v95)
    v16 = v94;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v94);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 130, (DgnString *)&v94);
  if ((_DWORD)v95)
    v27 = v94;
  else
    v27 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v27, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += 2;
  *a5 += 2;
  v28 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 8, 0);
  v29 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 8, 1);
  v94 = 0;
  v95 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v94);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 132, (DgnString *)&v94);
  if ((_DWORD)v95)
    v34 = v94;
  else
    v34 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v34, v28, v29, 0);
  v93 = a3;
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += v28;
  *a5 += v29;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v35 = 12;
  else
    v35 = 16;
  v36 = *((unsigned int *)this + 8);
  v37 = *((_DWORD *)this + 9);
  if (v37 >= v36)
  {
    v38 = 0;
    if ((int)v36 > 0)
      v35 += 4 * (v36 - 1) + 4;
    v39 = v35 + 4 * (v37 - v36);
  }
  else
  {
    v38 = 4 * v36;
    v39 = v35;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 133, (DgnString *)&v94);
  if ((_DWORD)v95)
    v44 = v94;
  else
    v44 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v21, &byte_209A88803, v22, v22, v44, v39, v35, v38);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += v39;
  *a5 += v35;
  *a6 += v38;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v45 = 4;
  else
    v45 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 135, (DgnString *)&v94);
  if ((_DWORD)v95)
    v50 = v94;
  else
    v50 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v21, &byte_209A88803, v22, v22, v50, v45, v45, 0);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += v45;
  *a5 += v45;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 136, (DgnString *)&v94);
  if ((_DWORD)v95)
    v55 = v94;
  else
    v55 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, v21, &byte_209A88803, v22, v22, v55, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 137, (DgnString *)&v94);
  if ((_DWORD)v95)
    v60 = v94;
  else
    v60 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, v21, &byte_209A88803, v22, v22, v60, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += 4;
  *a5 += 4;
  v61 = sizeObject<Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int> *>((uint64_t)this + 56, 0);
  v62 = sizeObject<Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int> *>((uint64_t)this + 56, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 139, (DgnString *)&v94);
  if ((_DWORD)v95)
    v67 = v94;
  else
    v67 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, v21, &byte_209A88803, v22, v22, v67, v61, v62, 0);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += v61;
  *a5 += v62;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v68 = 12;
  else
    v68 = 16;
  v69 = *((unsigned int *)this + 24);
  v70 = *((_DWORD *)this + 25);
  if (v70 >= v69)
  {
    v71 = 0;
    if ((int)v69 > 0)
      v68 = (v68 | 2) + 2 * (v69 - 1);
    v72 = v68 + 2 * (v70 - v69);
  }
  else
  {
    v71 = 2 * v69;
    v72 = v68;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 141, (DgnString *)&v94);
  if ((_DWORD)v95)
    v77 = v94;
  else
    v77 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v73, v74, v75, v76, v21, &byte_209A88803, v22, v22, v77, v72, v68, v71);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += v72;
  *a5 += v68;
  *a6 += v71;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v78 = 12;
  else
    v78 = 16;
  v79 = *((unsigned int *)this + 28);
  v80 = *((_DWORD *)this + 29);
  if (v80 >= v79)
  {
    v81 = 0;
    if ((int)v79 > 0)
      v78 = (v78 | 2) + 2 * (v79 - 1);
    v82 = v78 + 2 * (v80 - v79);
  }
  else
  {
    v81 = 2 * v79;
    v82 = v78;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 143, (DgnString *)&v94);
  if ((_DWORD)v95)
    v87 = v94;
  else
    v87 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &byte_209A88803, v22, v22, v87, v82, v78, v81);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += v82;
  *a5 += v78;
  *a6 += v81;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 144, (DgnString *)&v94);
  if ((_DWORD)v95)
    v92 = v94;
  else
    v92 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v93, &byte_209A88803, (35 - v93), (35 - v93), v92, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v94);
}

void sub_2099374F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t ReturnListMgr::setReturnScoreAndDuration(uint64_t this, unsigned int a2, int a3, __int16 a4, __int16 a5)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;

  v7 = this;
  v20 = a3;
  v8 = *(_DWORD *)(this + 96);
  if (v8 <= a2)
  {
    v10 = *(_QWORD *)(this + 88);
    v9 = *(_QWORD *)(this + 104);
    v11 = *(_DWORD *)(this + 112);
    do
    {
      *(_WORD *)(v10 + 2 * v8++) = 20000;
      *(_WORD *)(v9 + 2 * v11++) = 20000;
    }
    while (v8 <= a2);
    *(_DWORD *)(this + 96) = v8;
    *(_DWORD *)(this + 112) = v11;
  }
  else
  {
    v9 = *(_QWORD *)(this + 104);
  }
  v12 = a4;
  if (a4 <= *(__int16 *)(v9 + 2 * a2))
  {
    v13 = a2;
    v14 = *(_QWORD *)(*(_QWORD *)(this + 56) + 8 * a2);
    v15 = *(_DWORD *)(v14 + 16);
    if (v15)
      v16 = (-1640531527 * a3) >> -(char)v15;
    else
      v16 = 0;
    v17 = *(_QWORD *)(v14 + 80) + 8 * v16;
    while (1)
    {
      v17 = *(_QWORD *)v17;
      if (!v17)
        break;
      if (*(_DWORD *)(v17 + 8) == a3)
      {
        if (a4 < *(__int16 *)(v17 + 12))
        {
          *(_WORD *)(v17 + 12) = a4;
          *(_WORD *)(v17 + 14) = a5;
        }
        goto LABEL_19;
      }
    }
    if (*(_DWORD *)(v14 + 12) >= *(_DWORD *)(this + 72) && *(_DWORD *)(v14 + 8) >= *(_DWORD *)(this + 76))
      *(_WORD *)(*(_QWORD *)(this + 104) + 2 * a2) = ReturnListMgr::makeRoomInHash(this, *(_QWORD *)(*(_QWORD *)(this + 56) + 8 * a2), *(_DWORD *)(this + 80));
    LOWORD(v19) = a4;
    HIWORD(v19) = a5;
    this = HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::add(v14, &v20, &v19);
LABEL_19:
    v18 = *(_QWORD *)(v7 + 88);
    if (v12 < *(__int16 *)(v18 + 2 * v13))
      *(_WORD *)(v18 + 2 * v13) = a4;
  }
  return this;
}

uint64_t ReturnListMgr::makeRoomInHash(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t CutoffScore;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  unsigned int v16;

  CutoffScore = ReturnListMgr::getCutoffScore(a1, a2, a3, &v16, &v15);
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD **)(a2 + 80);
    v7 = (uint64_t *)*v6;
    if (!*v6)
    {
      v8 = 0;
      v9 = v6 + 1;
      while (v5 - 1 != v8)
      {
        v7 = (uint64_t *)v9[v8++];
        if (v7)
          goto LABEL_9;
      }
      return CutoffScore;
    }
  }
  else
  {
    v7 = 0;
  }
  LODWORD(v8) = 0;
LABEL_9:
  while (v8 < v5)
  {
    v14 = *((_DWORD *)v7 + 2);
    v10 = (uint64_t *)*v7;
    if (!*v7)
    {
      v8 = (v8 + 1);
      if (v8 >= v5)
      {
        v10 = v7;
      }
      else
      {
        v11 = *(_QWORD *)(a2 + 80);
        v10 = *(uint64_t **)(v11 + 8 * v8);
        if (!v10)
        {
          v12 = v8 + 1;
          while (v5 != v12)
          {
            v10 = *(uint64_t **)(v11 + 8 * v12);
            LODWORD(v8) = v8 + 1;
            ++v12;
            if (v10)
              goto LABEL_18;
          }
          v10 = 0;
          LODWORD(v8) = v5;
        }
      }
    }
LABEL_18:
    if (*((__int16 *)v7 + 6) > (int)CutoffScore)
    {
      HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::remove(a2, &v14);
      LODWORD(v5) = *(_DWORD *)(a2 + 12);
    }
    v7 = v10;
  }
  return CutoffScore;
}

uint64_t ReturnListMgr::compareElements(ReturnListMgr *this, _WORD *a2, _WORD *a3, const void *a4)
{
  __int16 v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  __int16 v12;
  BOOL v13;
  unsigned int v14;

  v4 = a2[2];
  v5 = *(unsigned int *)a2;
  v6 = *((_DWORD *)this + 4);
  if (*(_DWORD *)a2 >> 25 < v6)
  {
    v7 = *((_QWORD *)this + 1) + 16 * (v5 >> 25);
    if ((v5 & 0xFFFFFF) < *(_DWORD *)(v7 + 8))
    {
      v8 = *(_WORD *)(*(_QWORD *)v7 + 2 * (v5 & 0xFFFFFF));
      if (v8 != 20000)
        v4 += v8;
    }
  }
  v9 = a3[2];
  v10 = *(unsigned int *)a3;
  if (*(_DWORD *)a3 >> 25 < v6)
  {
    v11 = *((_QWORD *)this + 1) + 16 * (v10 >> 25);
    if ((v10 & 0xFFFFFF) < *(_DWORD *)(v11 + 8))
    {
      v12 = *(_WORD *)(*(_QWORD *)v11 + 2 * (v10 & 0xFFFFFF));
      if (v12 != 20000)
        v9 += v12;
    }
  }
  v13 = v5 >= v10;
  v14 = v5 > v10;
  if (!v13)
    v14 = -1;
  if (v4 > v9)
    v14 = 1;
  if (v4 >= v9)
    return v14;
  else
    return 0xFFFFFFFFLL;
}

uint64_t ReturnListMgr::finishList(uint64_t this, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;

  v6 = this;
  if (*(_DWORD *)(this + 64) > a2 && *(_QWORD *)(*(_QWORD *)(this + 56) + 8 * a2))
  {
    v8 = *(unsigned int *)(this + 32);
    if ((int)v8 >= 1)
    {
      v9 = v8 + 1;
      do
        ReturnListMgr::setReturnScoreAndDuration(v6, a2, *(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * (v9-- - 2)), *(_WORD *)(*(_QWORD *)(v6 + 88) + 2 * a2), -1);
      while (v9 > 1);
    }
    this = ReturnListMgr::returnGerms(v6, a2, a3, a4);
    v10 = *(_QWORD *)(v6 + 56);
    v11 = *(_QWORD **)(v10 + 8 * a2);
    if (v11)
    {
      (*(void (**)(_QWORD *))*v11)(v11);
      this = MemChunkFree(v11, 0);
      v10 = *(_QWORD *)(v6 + 56);
    }
    *(_QWORD *)(v10 + 8 * a2) = 0;
  }
  else
  {
    *(_DWORD *)(a3 + 8) = 0;
    v12 = *(_DWORD *)(this + 32);
    if (v12)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        v14 = *(unsigned int *)(*(_QWORD *)(v6 + 24) + 4 * v13);
        if (v12 == *(_DWORD *)(a3 + 12))
        {
          this = DgnPrimArray<unsigned long long>::reallocElts(a3, 1, 1);
          v12 = *(_DWORD *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v14;
        v12 = *(_DWORD *)(a3 + 8) + 1;
        *(_DWORD *)(a3 + 8) = v12;
        ++v13;
      }
      while (v13 < *(unsigned int *)(v6 + 32));
    }
    *a4 = v12;
  }
  if (*(_BYTE *)(gParDiagnosticPrefiltererReturnListSortByScore + 41))
    return mrec_qsort_r<ReturnListMgr>(*(_QWORD *)a3, *(unsigned int *)(a3 + 8), 8uLL, (ReturnListMgr *)v6);
  return this;
}

uint64_t ReturnListMgr::returnGerms(uint64_t result, unsigned int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  __int16 *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unsigned __int16 *v41;
  unsigned __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;

  v6 = result;
  v7 = *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * a2);
  v8 = *(unsigned int *)(v7 + 8);
  v9 = *(_DWORD *)(result + 80);
  if (v8 > v9)
  {
    v51 = 0;
    result = ReturnListMgr::getCutoffScore(result, v7, v9, (unsigned int *)&v51, (_DWORD *)&v51 + 1);
    v10 = result;
    v11 = v51;
    v12 = *(_DWORD *)(a3 + 12);
    if (v51 > v12)
      result = DgnPrimArray<unsigned long long>::reallocElts(a3, v51 - v12, 0);
    v13 = *(unsigned int *)(a3 + 8);
    if (v13 < v11)
    {
      v14 = v11 - v13;
      v15 = *(_QWORD *)a3 + 8 * v13 + 6;
      do
      {
        *(_QWORD *)(v15 - 6) = 4211081215;
        v15 += 8;
        --v14;
      }
      while (v14);
    }
    *(_DWORD *)(a3 + 8) = v11;
    v16 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v16)
    {
      v17 = *(uint64_t ***)(v7 + 80);
      v18 = *v17;
      if (*v17)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        v22 = 1;
        while (v16 != v22)
        {
          v18 = v17[v22++];
          if (v18)
          {
            LODWORD(v16) = v22 - 1;
            goto LABEL_24;
          }
        }
        v18 = 0;
      }
    }
    else
    {
      v18 = 0;
    }
LABEL_24:
    v24 = 0;
    if ((_DWORD)v11)
    {
      v25 = 0;
      do
      {
        if (v18)
          v26 = (__int16 *)v18 + 6;
        else
          v26 = 0;
        v27 = *v26;
        if (v27 <= v10)
        {
          v28 = *((unsigned int *)v18 + 2);
          if (*((_DWORD *)v18 + 2) >> 25 < *(_DWORD *)(v6 + 16))
          {
            v29 = *(_QWORD *)(v6 + 8) + 16 * (v28 >> 25);
            result = *(unsigned int *)(v29 + 8);
            if ((v28 & 0xFFFFFF) < result)
            {
              v30 = *(_WORD *)(*(_QWORD *)v29 + 2 * (v28 & 0xFFFFFF));
              if (v30 != 20000)
                LOWORD(v27) = v27 - v30;
            }
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v25++) = ((unint64_t)(unsigned __int16)v26[1] << 48) | ((unint64_t)(unsigned __int16)v27 << 32) | v28;
        }
        v31 = (uint64_t *)*v18;
        if (!*v18)
        {
          v16 = (v16 + 1);
          v32 = *(unsigned int *)(v7 + 12);
          if (v16 >= v32)
          {
            v31 = v18;
          }
          else
          {
            v33 = *(_QWORD *)(v7 + 80);
            v31 = *(uint64_t **)(v33 + 8 * v16);
            if (!v31)
            {
              v34 = v16 + 1;
              while (v32 != v34)
              {
                v31 = *(uint64_t **)(v33 + 8 * v34);
                LODWORD(v16) = v16 + 1;
                ++v34;
                if (v31)
                  goto LABEL_43;
              }
              v31 = 0;
              LODWORD(v16) = *(_DWORD *)(v7 + 12);
            }
          }
        }
LABEL_43:
        ++v24;
        v18 = v31;
      }
      while (v25 < v11);
    }
    *a4 = v24;
    return result;
  }
  v19 = *(unsigned int *)(v7 + 12);
  if ((_DWORD)v19)
  {
    v20 = *(uint64_t ***)(v7 + 80);
    v21 = *v20;
    if (*v20)
    {
      LODWORD(v19) = 0;
    }
    else
    {
      v23 = 1;
      while (v19 != v23)
      {
        v21 = v20[v23++];
        if (v21)
        {
          LODWORD(v19) = v23 - 1;
          goto LABEL_48;
        }
      }
      v21 = 0;
    }
  }
  else
  {
    v21 = 0;
  }
LABEL_48:
  v35 = *(_DWORD *)(a3 + 12);
  if (v8 > v35)
    result = DgnPrimArray<unsigned long long>::reallocElts(a3, v8 - v35, 0);
  v36 = *(unsigned int *)(a3 + 8);
  if (v36 < v8)
  {
    v37 = v8 - v36;
    v38 = *(_QWORD *)a3 + 8 * v36 + 6;
    do
    {
      *(_QWORD *)(v38 - 6) = 4211081215;
      v38 += 8;
      --v37;
    }
    while (v37);
  }
  *(_DWORD *)(a3 + 8) = v8;
  if (v19 >= *(_DWORD *)(v7 + 12))
    goto LABEL_72;
  v39 = 0;
  while (1)
  {
    v40 = *((unsigned int *)v21 + 2);
    if (v21)
      v41 = (unsigned __int16 *)v21 + 6;
    else
      v41 = 0;
    v42 = *v41;
    if (*((_DWORD *)v21 + 2) >> 25 < *(_DWORD *)(v6 + 16))
    {
      v43 = *(_QWORD *)(v6 + 8) + 16 * (v40 >> 25);
      if ((v40 & 0xFFFFFF) < *(_DWORD *)(v43 + 8))
      {
        v44 = *(_WORD *)(*(_QWORD *)v43 + 2 * (v40 & 0xFFFFFF));
        if (v44 != 20000)
          v42 -= v44;
      }
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v39) = ((unint64_t)v41[1] << 48) | ((unint64_t)v42 << 32) | v40;
    v45 = (uint64_t *)*v21;
    v46 = *(unsigned int *)(v7 + 12);
    if (*v21)
      goto LABEL_70;
    v19 = (v19 + 1);
    if (v19 >= v46)
    {
      v45 = v21;
      goto LABEL_70;
    }
    v47 = *(_QWORD *)(v7 + 80);
    v45 = *(uint64_t **)(v47 + 8 * v19);
    if (!v45)
      break;
LABEL_70:
    ++v39;
    v21 = v45;
    if (v19 >= v46)
      goto LABEL_71;
  }
  v48 = (uint64_t *)(v47 + 8 * v19 + 8);
  v49 = ~v19 + v46;
  while (v49)
  {
    v50 = (uint64_t *)*v48++;
    v45 = v50;
    LODWORD(v19) = v19 + 1;
    --v49;
    if (v50)
      goto LABEL_70;
  }
LABEL_71:
  LODWORD(v8) = *(_DWORD *)(a3 + 8);
LABEL_72:
  *a4 = v8;
  return result;
}

uint64_t mrec_qsort_r<ReturnListMgr>(uint64_t result, unint64_t a2, unint64_t a3, ReturnListMgr *a4)
{
  ReturnListMgr *v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  const void *v17;
  int v18;
  const void *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  int v24;
  const void *v25;
  int v26;
  const void *v27;
  int v28;
  const void *v29;
  int v30;
  int v31;
  const void *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char v39;
  int v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char *v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  BOOL v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  int v78;
  ReturnListMgr *v79;
  char *v80;
  _WORD *v81;
  _WORD *v82;
  _WORD *v83;
  _WORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char *v92;
  _WORD *v93;
  _WORD *v94;
  _WORD *v95;
  _WORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char *v104;
  unint64_t v105;
  char *v106;
  _BOOL4 v107;
  char *v108;
  char *v109;
  unint64_t v110;
  char *v111;
  BOOL v113;
  int v114;

  v4 = a4;
  v6 = a2;
  v7 = (char *)result;
  v8 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v9 = 2;
  else
    v9 = a3 != 8;
  v113 = ((result | a3) & 7) == 0;
  v114 = v9;
  if (a2 < 7)
  {
LABEL_117:
    if ((uint64_t)(v6 * a3) > (uint64_t)a3)
    {
      v79 = v4;
      v111 = &v7[v6 * a3];
      v80 = &v7[a3];
      v81 = v7;
      do
      {
        if (v80 > v7)
        {
          v82 = v81;
          v83 = v80;
          do
          {
            v84 = v83;
            v83 = (_WORD *)((char *)v83 + v8);
            result = ReturnListMgr::compareElements(v79, v83, v84, a4);
            if ((int)result < 1)
              break;
            if (v114)
            {
              if (v113)
              {
                v85 = 0;
                v86 = (uint64_t)v82 + a3;
                do
                {
                  v87 = *(_QWORD *)(v86 + 8 * v85);
                  *(_QWORD *)(v86 + 8 * v85) = *(_QWORD *)&v82[4 * v85];
                  *(_QWORD *)&v82[4 * v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                v89 = 0;
                v90 = (uint64_t)v82 + a3;
                do
                {
                  v91 = *(_BYTE *)(v90 + v89);
                  *(_BYTE *)(v90 + v89) = *((_BYTE *)v82 + v89);
                  *((_BYTE *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              v88 = *(_QWORD *)v84;
              *(_QWORD *)v84 = *(_QWORD *)v83;
              *(_QWORD *)v83 = v88;
            }
            v82 = (_WORD *)((char *)v82 + v8);
          }
          while (v83 > (_WORD *)v7);
        }
        v80 += a3;
        v81 = (_WORD *)((char *)v81 + a3);
      }
      while (v80 < v111);
    }
    return result;
  }
  v107 = a3 != 8;
  v10 = a3 >> 3;
  while (1)
  {
    v11 = &v7[(v6 >> 1) * a3];
    if (v6 == 7)
      goto LABEL_44;
    v12 = &v7[(v6 - 1) * a3];
    if (v6 >= 0x29)
    {
      v108 = &v7[(v6 - 1) * a3];
      v13 = (v6 >> 3) * a3;
      v14 = &v7[v13];
      v105 = v13;
      v15 = &v7[2 * v13];
      v16 = ReturnListMgr::compareElements(v4, v7, &v7[v13], a4);
      v109 = v14;
      v18 = ReturnListMgr::compareElements(v4, v14, v15, v17);
      if (v16 < 0)
      {
        if ((v18 & 0x80000000) == 0)
        {
          if ((int)ReturnListMgr::compareElements(v4, v7, v15, v19) >= 0)
            v20 = v7;
          else
            v20 = v15;
          goto LABEL_18;
        }
      }
      else if (v18 <= 0)
      {
        if ((int)ReturnListMgr::compareElements(v4, v7, v15, v19) >= 0)
          v20 = v15;
        else
          v20 = v7;
LABEL_18:
        v109 = v20;
      }
      v22 = (v6 >> 3) * a3;
      v23 = &v11[v105];
      v104 = &v11[-v105];
      v24 = ReturnListMgr::compareElements(v4, &v11[-v105], &v7[(v6 >> 1) * a3], v19);
      v26 = ReturnListMgr::compareElements(v4, &v7[(v6 >> 1) * a3], &v11[v105], v25);
      if (v24 < 0)
      {
        if ((v26 & 0x80000000) == 0)
        {
          v11 -= v105;
          if ((int)ReturnListMgr::compareElements(v4, v104, v23, v27) < 0)
            v11 = v23;
        }
      }
      else if (v26 <= 0)
      {
        v11 -= v105;
        if ((int)ReturnListMgr::compareElements(v4, v104, v23, v27) >= 0)
          v11 = v23;
      }
      v12 = &v108[-v105];
      v106 = &v108[-2 * v105];
      v28 = ReturnListMgr::compareElements(v4, &v108[-2 * v22], &v108[-v22], v27);
      v30 = ReturnListMgr::compareElements(v4, &v108[-v22], v108, v29);
      if (v28 < 0)
      {
        v21 = v109;
        if ((v30 & 0x80000000) == 0)
        {
          v12 = &v7[(v6 - 1) * a3];
          if ((int)ReturnListMgr::compareElements(v4, v106, v108, a4) >= 0)
            v12 = v106;
        }
      }
      else
      {
        v21 = v109;
        if (v30 <= 0)
        {
          v12 = &v7[(v6 - 1) * a3];
          if ((int)ReturnListMgr::compareElements(v4, v106, v108, a4) < 0)
            v12 = v106;
        }
      }
      goto LABEL_35;
    }
    v21 = v7;
LABEL_35:
    v31 = ReturnListMgr::compareElements(v4, v21, v11, a4);
    result = ReturnListMgr::compareElements(v4, v11, v12, v32);
    if (v31 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = ReturnListMgr::compareElements(v4, v21, v12, a4);
        if ((int)result >= 0)
          v11 = v21;
        else
          v11 = v12;
      }
    }
    else if ((int)result <= 0)
    {
      result = ReturnListMgr::compareElements(v4, v21, v12, a4);
      if ((int)result >= 0)
        v11 = v12;
      else
        v11 = v21;
    }
LABEL_44:
    if (v114)
    {
      if (v113)
      {
        v33 = v7;
        v34 = a3 >> 3;
        do
        {
          v35 = *(_QWORD *)v33;
          *(_QWORD *)v33 = *(_QWORD *)v11;
          v33 += 8;
          *(_QWORD *)v11 = v35;
          v11 += 8;
          --v34;
        }
        while (v34);
      }
      else
      {
        v37 = a3;
        v38 = v7;
        do
        {
          v39 = *v38;
          *v38++ = *v11;
          *v11++ = v39;
          --v37;
        }
        while (v37);
      }
    }
    else
    {
      v36 = *(_QWORD *)v7;
      *(_QWORD *)v7 = *(_QWORD *)v11;
      *(_QWORD *)v11 = v36;
    }
    v40 = 0;
    v41 = &v7[a3];
    v110 = v6;
    v42 = &v7[(v6 - 1) * a3];
    v43 = v42;
    v44 = &v7[a3];
LABEL_53:
    while (v44 <= v43)
    {
      result = ReturnListMgr::compareElements(v4, v44, v7, a4);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v114)
        {
          if (v113)
          {
            v45 = 0;
            do
            {
              v46 = *(_QWORD *)&v41[8 * v45];
              *(_QWORD *)&v41[8 * v45] = *(_QWORD *)&v44[8 * v45];
              *(_QWORD *)&v44[8 * v45++] = v46;
            }
            while (v10 != v45);
          }
          else
          {
            v55 = 0;
            do
            {
              v56 = v41[v55];
              v41[v55] = v44[v55];
              v44[v55++] = v56;
            }
            while (a3 != v55);
          }
        }
        else
        {
          v54 = *(_QWORD *)v41;
          *(_QWORD *)v41 = *(_QWORD *)v44;
          *(_QWORD *)v44 = v54;
        }
        v41 += a3;
        v40 = 1;
      }
      v44 += a3;
    }
    while (v44 <= v43)
    {
      result = ReturnListMgr::compareElements(v4, v43, v7, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v114)
        {
          if (v113)
          {
            v52 = 0;
            do
            {
              v53 = *(_QWORD *)&v44[8 * v52];
              *(_QWORD *)&v44[8 * v52] = *(_QWORD *)&v43[8 * v52];
              *(_QWORD *)&v43[8 * v52++] = v53;
            }
            while (v10 != v52);
          }
          else
          {
            v58 = 0;
            do
            {
              v59 = v44[v58];
              v44[v58] = v43[v58];
              v43[v58++] = v59;
            }
            while (a3 != v58);
          }
        }
        else
        {
          v57 = *(_QWORD *)v44;
          *(_QWORD *)v44 = *(_QWORD *)v43;
          *(_QWORD *)v43 = v57;
        }
        v44 += a3;
        v43 += v8;
        v40 = 1;
        goto LABEL_53;
      }
      if (!(_DWORD)result)
      {
        if (v114)
        {
          if (v113)
          {
            v47 = 0;
            do
            {
              v48 = *(_QWORD *)&v43[8 * v47];
              *(_QWORD *)&v43[8 * v47] = *(_QWORD *)&v42[8 * v47];
              *(_QWORD *)&v42[8 * v47++] = v48;
            }
            while (v10 != v47);
          }
          else
          {
            v50 = 0;
            do
            {
              v51 = v43[v50];
              v43[v50] = v42[v50];
              v42[v50++] = v51;
            }
            while (a3 != v50);
          }
        }
        else
        {
          v49 = *(_QWORD *)v43;
          *(_QWORD *)v43 = *(_QWORD *)v42;
          *(_QWORD *)v42 = v49;
        }
        v42 += v8;
        v40 = 1;
      }
      v43 += v8;
    }
    v60 = &v7[v110 * a3];
    if (!v40)
      break;
    v61 = v44 - v41;
    if (v41 - v7 >= v44 - v41)
      v62 = v44 - v41;
    else
      v62 = v41 - v7;
    if (v62)
    {
      if (v113)
      {
        v63 = &v44[-v62];
        v64 = v62 >> 3;
        v65 = v7;
        do
        {
          v66 = *(_QWORD *)v65;
          *(_QWORD *)v65 = *(_QWORD *)v63;
          v65 += 8;
          *(_QWORD *)v63 = v66;
          v63 += 8;
          --v64;
        }
        while (v64);
      }
      else
      {
        v67 = -(uint64_t)v62;
        v68 = v7;
        do
        {
          v69 = *v68;
          *v68++ = v44[v67];
          v44[v67] = v69;
          v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    v71 = v42 - v43;
    if (v42 - v43 >= v60 - &v42[a3])
      v72 = v60 - &v42[a3];
    else
      v72 = v42 - v43;
    if (v72)
    {
      if (v113)
      {
        v73 = &v60[-v72];
        v74 = v72 >> 3;
        do
        {
          v75 = *(_QWORD *)v44;
          *(_QWORD *)v44 = *(_QWORD *)v73;
          v44 += 8;
          *(_QWORD *)v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        v76 = -(uint64_t)v72;
        do
        {
          v77 = *v44;
          *v44++ = v60[v76];
          v60[v76] = v77;
          v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3)
      result = mrec_qsort_r<ReturnListMgr>(v7, v61 / a3, a3, a4);
    if (v71 <= (uint64_t)a3)
      return result;
    v7 = &v60[-v71];
    v6 = v71 / a3;
    v78 = v107;
    if (((((_DWORD)v60 - (_DWORD)v71) | a3) & 7) != 0)
      v78 = 2;
    v113 = ((((_DWORD)v60 - (_DWORD)v71) | a3) & 7) == 0;
    v114 = v78;
    v4 = a4;
    if (v6 < 7)
      goto LABEL_117;
  }
  v92 = &v7[a3];
  if ((uint64_t)(v110 * a3) > (uint64_t)a3)
  {
    v93 = v7;
    do
    {
      if (v92 > v7)
      {
        v94 = v93;
        v95 = v92;
        do
        {
          v96 = v95;
          v95 = (_WORD *)((char *)v95 + v8);
          result = ReturnListMgr::compareElements(a4, v95, v96, a4);
          if ((int)result < 1)
            break;
          if (v114)
          {
            if (v113)
            {
              v97 = 0;
              v98 = (uint64_t)v94 + a3;
              do
              {
                v99 = *(_QWORD *)(v98 + 8 * v97);
                *(_QWORD *)(v98 + 8 * v97) = *(_QWORD *)&v94[4 * v97];
                *(_QWORD *)&v94[4 * v97++] = v99;
              }
              while (v10 != v97);
            }
            else
            {
              v101 = 0;
              v102 = (uint64_t)v94 + a3;
              do
              {
                v103 = *(_BYTE *)(v102 + v101);
                *(_BYTE *)(v102 + v101) = *((_BYTE *)v94 + v101);
                *((_BYTE *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            v100 = *(_QWORD *)v96;
            *(_QWORD *)v96 = *(_QWORD *)v95;
            *(_QWORD *)v95 = v100;
          }
          v94 = (_WORD *)((char *)v94 + v8);
        }
        while (v95 > (_WORD *)v7);
      }
      v92 += a3;
      v93 = (_WORD *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

uint64_t ReturnListMgr::getCutoffScore(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, _DWORD *a5)
{
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  unsigned int v26;
  void *v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;

  v31 = 0;
  v9 = realloc_array(0, &v31, 4uLL, 0, 0, 1) >> 2;
  v10 = v31;
  v28 = v31;
  v29 = 1;
  v30 = v9;
  *(_DWORD *)v31 = 0;
  v11 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(a2 + 80);
    v13 = (uint64_t *)*v12;
    if (!*v12)
    {
      v14 = 0;
      v15 = v12 + 1;
      while (v11 - 1 != v14)
      {
        v13 = (uint64_t *)v15[v14++];
        if (v13)
          goto LABEL_9;
      }
      goto LABEL_28;
    }
  }
  else
  {
    v13 = 0;
  }
  LODWORD(v14) = 0;
LABEL_9:
  if (v14 >= v11)
  {
LABEL_28:
    v25 = 0;
    goto LABEL_29;
  }
  while (1)
  {
    v16 = *((__int16 *)v13 + 6);
    if ((int)v16 < 1)
    {
      v18 = v10;
    }
    else
    {
      v17 = v29;
      if (v29 <= v16)
      {
        if (v30 <= v16)
        {
          v31 = 0;
          v30 = realloc_array(v10, &v31, 4 * (v16 + 1), 4 * v29, 4 * v29, 1) >> 2;
          v10 = v31;
          v28 = v31;
          v17 = v29;
        }
        while (v17 <= v16)
        {
          *((_DWORD *)v10 + v17) = 0;
          v17 = ++v29;
        }
      }
      v18 = (_DWORD *)v10 + v16;
    }
    ++*v18;
    v19 = (uint64_t *)*v13;
    v20 = *(unsigned int *)(a2 + 12);
    if (*v13)
      goto LABEL_26;
    v14 = (v14 + 1);
    if (v14 >= v20)
    {
      v19 = v13;
      goto LABEL_26;
    }
    v21 = *(_QWORD *)(a2 + 80);
    v19 = *(uint64_t **)(v21 + 8 * v14);
    if (!v19)
      break;
LABEL_26:
    v13 = v19;
    if (v14 >= v20)
      goto LABEL_27;
  }
  v22 = (uint64_t *)(v21 + 8 * v14 + 8);
  v23 = ~v14 + v20;
  while (v23)
  {
    v24 = (uint64_t *)*v22++;
    v19 = v24;
    LODWORD(v14) = v14 + 1;
    --v23;
    if (v24)
      goto LABEL_26;
  }
LABEL_27:
  v25 = *(_DWORD *)v10;
LABEL_29:
  *a4 = v25;
  if (v25 >= a3)
  {
    v26 = 0;
  }
  else
  {
    v26 = 0;
    do
    {
      v25 += *((_DWORD *)v10 + ++v26);
      *a4 = v25;
    }
    while (v25 < a3);
  }
  *a5 = *((_DWORD *)v10 + v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  return (__int16)v26;
}

void sub_2099386F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ReturnListMgr::addToReturnList(ReturnListMgr *this, signed int a2, int a3, unsigned int a4, int a5)
{
  __int16 v5;
  __int16 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t result;
  signed int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  signed int v32;
  uint64_t *v33;
  BOOL v34;
  __int16 v35;
  int v36;
  unsigned int v38;
  signed int v39;

  v5 = a5;
  v8 = a3 - a2;
  v9 = *((_DWORD *)this + 13);
  v10 = *((_DWORD *)this + 12) * (__int16)(a3 - a2);
  v11 = *(_DWORD *)(*((_QWORD *)this + 5) + 100);
  v12 = *(_DWORD *)(*((_QWORD *)this + 5) + 104);
  v13 = v11 < v10 >> 8;
  v14 = v10 >> 8;
  if (!v13)
    v11 = v14;
  if (a5 + v11 * v12 <= v9 || v11 == 0)
  {
    v16 = v11;
  }
  else
  {
    v17 = a5 + v12 * (v11 - 1);
    do
    {
      v16 = v11 - 1;
      if (v17 <= v9)
        break;
      v17 -= v12;
      --v11;
    }
    while (v11);
  }
  if (a2 >= v16)
    v18 = a2 - v16;
  else
    v18 = 0;
  v19 = v16 + a2;
  v20 = (_QWORD *)((char *)this + 56);
  if ((v16 + a2) >= *((_DWORD *)this + 16))
  {
    v21 = v19 + 1;
    v22 = *((_DWORD *)this + 17);
    if (v19 + 1 > v22)
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 56, v19 + 1 - v22, 1);
    v23 = *((_DWORD *)this + 25);
    if (v21 > v23)
      DgnPrimArray<short>::reallocElts((uint64_t)this + 88, v21 - v23, 1);
    v24 = *((_DWORD *)this + 29);
    if (v21 > v24)
      DgnPrimArray<short>::reallocElts((uint64_t)this + 104, v21 - v24, 1);
    v25 = *((_DWORD *)this + 16);
    if (v25 <= v19)
    {
      do
        *(_QWORD *)(*v20 + 8 * v25++) = 0;
      while (v25 <= v19);
      *((_DWORD *)this + 16) = v25;
    }
  }
  result = getCwidForIndex(*(unsigned __int16 *)this, a4);
  v38 = result;
  v39 = v16 + a2;
  if ((int)v18 <= (int)v19)
  {
    v27 = a2;
    v28 = v5 + (a2 - v18) * v12;
    v29 = v16 + a3;
    if (v16 > a2)
      v27 = v16;
    v30 = v29 - v27;
    v31 = (v29 - v27) << 16;
    do
    {
      v32 = v18;
      if (!*(_QWORD *)(*v20 + 8 * v18))
      {
        v33 = MemChunkAlloc(0x70uLL, 0);
        *(_QWORD *)(*v20 + 8 * v18) = HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::HashNCHV((uint64_t)v33, 0, 32);
      }
      v34 = __OFSUB__(v31, 0x10000);
      v31 -= 0x10000;
      if (v31 < 0 != v34)
        v35 = 1;
      else
        v35 = v30;
      if (*(_BYTE *)(*((_QWORD *)this + 5) + 120))
        v8 = v35;
      result = ReturnListMgr::setReturnScoreAndDuration((uint64_t)this, v18, v38, v28, v8);
      if ((int)v18 >= a2)
        LOWORD(v36) = v12;
      else
        v36 = -v12;
      v28 += v36;
      ++v18;
      --v30;
    }
    while (v32 < v39);
  }
  return result;
}

_WORD *ReturnListMgr::initReturnLists(_WORD *this, __int16 a2)
{
  *this = a2;
  return this;
}

unint64_t ReturnListMgr::setInjectCwids(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  *(_DWORD *)(result + 32) = 0;
  if (a2)
  {
    v17 = *(unsigned int *)(a2 + 8);
    if ((int)v17 >= 1)
    {
      v3 = result;
      v4 = 0;
      v5 = 0;
      v6 = (int **)(result + 24);
      do
      {
        v7 = *(_QWORD *)a2 + 16 * v5;
        v8 = *(unsigned int *)(v7 + 8);
        if ((int)v8 >= 1)
        {
          for (i = 0; i != v8; ++i)
          {
            v10 = *(unsigned int *)(*(_QWORD *)v7 + 4 * i);
            v11 = v10 & 0xFFFFFF;
            v12 = *(_DWORD *)(*(_QWORD *)v7 + 4 * i) >> 25 == 125 || v11 > 0xFFFFF3;
            if (!v12
              && *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * (v10 >> 25)) + 48)
                                      + 32)
                          + 2 * v11))
            {
              if (!v4)
                goto LABEL_17;
              v13 = *v6;
              v14 = v4;
              v15 = 0xFFFFFFFFLL;
              while (1)
              {
                v16 = *v13++;
                if (v16 == (_DWORD)v10)
                  break;
                --v15;
                if (!--v14)
                  goto LABEL_17;
              }
              if (!v15)
              {
LABEL_17:
                if (v4 == *(_DWORD *)(v3 + 36))
                {
                  result = DgnPrimArray<unsigned int>::reallocElts((uint64_t)v6, 1, 1);
                  v4 = *(_DWORD *)(v3 + 32);
                }
                *(_DWORD *)(*(_QWORD *)(v3 + 24) + 4 * v4) = v10;
                v4 = *(_DWORD *)(v3 + 32) + 1;
                *(_DWORD *)(v3 + 32) = v4;
              }
            }
          }
        }
        ++v5;
      }
      while (v5 != v17);
    }
  }
  return result;
}

void ReturnListMgr::beginRetListSyncRecog(ReturnListMgr *this, const PrefiltererSearchParamSet *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;

  *((_QWORD *)this + 5) = a2;
  v9 = *((_DWORD *)a2 + 33);
  v10 = *((_DWORD *)a2 + 34);
  v11 = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 12) = vcvtd_n_s64_f64(*((double *)a2 + 14), 8uLL);
  *((_DWORD *)this + 13) = v10 + v9 - v11;
  if (v10 + v9 - v11 < 0)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 574, (uint64_t)"prefilt/retlist", 1, (uint64_t)"%d %d %d %d", a7, a8, v10 + v9 - v11);
    a2 = (const PrefiltererSearchParamSet *)*((_QWORD *)this + 5);
  }
  v12 = *((_DWORD *)a2 + 31);
  if (v12 == -1)
  {
    *((_DWORD *)this + 20) = 100000000;
    v13 = 500000000;
  }
  else
  {
    *((_DWORD *)this + 20) = v12;
    v13 = 5 * v12;
    if (v13 < 4)
    {
      v14 = 2;
      goto LABEL_8;
    }
  }
  v14 = 2 * RoundUpToPowerOf2(v13 >> 2, 0);
LABEL_8:
  if (v14 <= 0x20)
    v14 = 32;
  *((_DWORD *)this + 18) = v14;
  *((_DWORD *)this + 19) = (v14 >> 1) - 1;
}

uint64_t ReturnListMgr::endRetListSyncRecog(ReturnListMgr *this)
{
  uint64_t result;

  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_DWORD *)this + 28) = 0;
  result = DgnIOwnArray<ParamSetBase *>::destructAt((uint64_t)this + 56, 0, *((_DWORD *)this + 16));
  *((_DWORD *)this + 16) = 0;
  return result;
}

void ReturnListMgr::setEffectiveLmForCwid(ReturnListMgr *this, unsigned int a2, __int16 a3)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v4 = a2 >> 25;
  v5 = a2 & 0xFFFFFF;
  v6 = (_QWORD *)((char *)this + 8);
  LODWORD(v7) = *((_DWORD *)this + 4);
  if (v7 <= a2 >> 25)
  {
    v9 = v4 + 1;
    v10 = *((_DWORD *)this + 5);
    if (v4 >= v10)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 8, v9 - v10, 1);
      v9 = v9 - v7 + *((_DWORD *)this + 4);
      LODWORD(v7) = *((_DWORD *)this + 4);
    }
    if (v7 <= v9)
    {
      if (v7 < v9)
      {
        v12 = v9 - (unint64_t)v7;
        v13 = 16 * v7;
        do
        {
          v14 = (_QWORD *)(*v6 + v13);
          *v14 = 0;
          v14[1] = 0;
          v13 += 16;
          --v12;
        }
        while (v12);
      }
    }
    else if ((int)v7 > (int)v9)
    {
      v7 = (int)v7;
      v11 = 16 * (int)v7 - 16;
      do
      {
        --v7;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v6 + v11);
        v11 -= 16;
      }
      while (v7 > (int)v9);
    }
    *((_DWORD *)this + 4) = v9;
  }
  v15 = *v6 + 16 * v4;
  v16 = *(unsigned int *)(v15 + 8);
  if (v5 >= v16)
  {
    v18 = v5 + 1;
    v19 = *(_DWORD *)(v15 + 12);
    if (v5 >= v19)
    {
      DgnPrimArray<short>::reallocElts(*v6 + 16 * v4, v18 - v19, 1);
      v18 = v18 - v16 + *(_DWORD *)(v15 + 8);
    }
    *(_DWORD *)(v15 + 8) = v18;
    v17 = *(_QWORD *)(*v6 + 16 * v4);
    memset_pattern16((void *)(v17 + 2 * v16), &unk_209A75B40, 2 * (v5 - v16) + 2);
  }
  else
  {
    v17 = *(_QWORD *)v15;
  }
  *(_WORD *)(v17 + 2 * v5) = a3;
}

uint64_t HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::remove(uint64_t result, int *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  char **v6;

  v2 = *a2;
  v3 = *(_DWORD *)(result + 16);
  if (v3)
    v4 = (-1640531527 * *a2) >> -(char)v3;
  else
    v4 = 0;
  v5 = *(_QWORD *)(result + 80) + 8 * v4;
  while (1)
  {
    v6 = (char **)v5;
    v5 = *(_QWORD *)v5;
    if (!v5)
      break;
    if (*(_DWORD *)(v5 + 8) == v2)
      return HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::removeBucket(result, v6);
  }
  return result;
}

uint64_t HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::HashNCHV(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C219730;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 12;
  else
    v7 = 16;
  *(_DWORD *)(a1 + 24) = 16;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_209938DDC(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::~HashNCHV(uint64_t a1)
{
  HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::~HashNCHV(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::~HashNCHV(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C219730;
  if (*(_DWORD *)(a1 + 8))
    HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::removeBucket(uint64_t result, char **a2)
{
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD *);
  uint64_t (*v5)(char *);

  v2 = result;
  v3 = *a2;
  *a2 = *(char **)*a2;
  v4 = *(uint64_t (**)(_QWORD *))(result + 96);
  if (v4)
    result = v4((_QWORD *)v3 + 1);
  v5 = *(uint64_t (**)(char *))(v2 + 104);
  if (v5)
    result = v5(v3 + 12);
  *(_QWORD *)v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  --*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t MrecInitLibrary_pel(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_fmpe_pel();
  MrecInitModule_genclass_pel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_pel_pel();
  MrecInitModule_pelsc_pel();
  MrecInitModule_scrcache_pel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_hiersc_pel();
  MrecInitModule_gpuscsm_pel();
  MrecInitModule_pelsrvsm_pel();
  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughPel(void)
{
  MrecInitLibrarySet_throughSigproc();
  MrecInitLibrarySet_throughNeuralN();
  return MrecInitLibrary_pel();
}

void TPItn_Open(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  TTokenizer *v14;
  TLexicon *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  TEnvManager *DataManager;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  TEnvManager *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  std::string *v29;
  _QWORD *v30;
  std::string *v31;
  _QWORD *v32;
  std::string *v33;
  _QWORD *exception;
  std::string *v35;
  _QWORD *v36;
  std::string *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _BYTE v45[23];
  char v46;

  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v46, "TPItn_Open");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v45);
  MrecInitModule_sdpres_sdapi();
  if (g_bInitialized)
  {
    if (a3 != -1)
    {
      if (a1 | a2)
      {
        if (a5 == -1)
          v14 = 0;
        else
          v14 = (TTokenizer *)verifyTokenizerHandle(a5, "Bad input tokenizer handle");
        v15 = (TLexicon *)verifyLexiconHandle(a4, "Bad input lexicon handle");
        verifyPointerArgument<TPItnHandle_fake **>(a6, 0, "Bad output ITN handle pointer", v16, v17);
        DataManager = makeDataManager(a1, 1uLL, v18, v19, v20);
        v25 = makeDataManager(a2, 1uLL, v22, v23, v24);
        if (!v14 || *((TLexicon **)v14 + 5) == v15)
        {
          if (a3 == 1)
            createFormatter(DataManager, v25, v15, v14);
          if (v25)
            (*(void (**)(TEnvManager *))(*(_QWORD *)v25 + 8))(v25);
          conditionalAssert("Bad input formatter tool type", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 106, v26, v27);
          exception = __cxa_allocate_exception(0x28uLL);
          std::string::basic_string[abi:ne180100]<0>(&v43, "Bad input formatter tool type");
          *exception = aPpx;
          v35 = (std::string *)(exception + 1);
          if (SHIBYTE(v44) < 0)
          {
            std::string::__init_copy_ctor_external(v35, (const std::string::value_type *)v43, *((std::string::size_type *)&v43 + 1));
          }
          else
          {
            v41 = v43;
            exception[3] = v44;
            *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v41;
          }
          *exception = &unk_24C2148C0;
          exception[4] = 3;
        }
        conditionalAssert("Lexicon handle does not match tokenizer lexicon", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 97, v26, v27);
        v36 = __cxa_allocate_exception(0x28uLL);
        std::string::basic_string[abi:ne180100]<0>(&v43, "Lexicon handle does not match tokenizer lexicon");
        *v36 = aPpx;
        v37 = (std::string *)(v36 + 1);
        if (SHIBYTE(v44) < 0)
        {
          std::string::__init_copy_ctor_external(v37, (const std::string::value_type *)v43, *((std::string::size_type *)&v43 + 1));
        }
        else
        {
          v42 = v43;
          v36[3] = v44;
          *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v42;
        }
        *v36 = &unk_24C2148C0;
        v36[4] = 3;
      }
      conditionalAssert("Bad model", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 74, v12, v13);
      v32 = __cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(&v43, "Bad model");
      *v32 = aPpx;
      v33 = (std::string *)(v32 + 1);
      if (SHIBYTE(v44) < 0)
      {
        std::string::__init_copy_ctor_external(v33, (const std::string::value_type *)v43, *((std::string::size_type *)&v43 + 1));
      }
      else
      {
        v40 = v43;
        v32[3] = v44;
        *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v40;
      }
      *v32 = &unk_24C2148C0;
      v32[4] = 3;
    }
    conditionalAssert("Bad input tool type", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 73, v12, v13);
    v30 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v43, "Bad input tool type");
    *v30 = aPpx;
    v31 = (std::string *)(v30 + 1);
    if (SHIBYTE(v44) < 0)
    {
      std::string::__init_copy_ctor_external(v31, (const std::string::value_type *)v43, *((std::string::size_type *)&v43 + 1));
    }
    else
    {
      v39 = v43;
      v30[3] = v44;
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v39;
    }
    *v30 = &unk_24C2148C0;
    v30[4] = 3;
  }
  conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 71, v12, v13);
  v28 = __cxa_allocate_exception(0x28uLL);
  std::string::basic_string[abi:ne180100]<0>(&v43, "Not initialized");
  *v28 = aPpx;
  v29 = (std::string *)(v28 + 1);
  if (SHIBYTE(v44) < 0)
  {
    std::string::__init_copy_ctor_external(v29, (const std::string::value_type *)v43, *((std::string::size_type *)&v43 + 1));
  }
  else
  {
    v38 = v43;
    v28[3] = v44;
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v38;
  }
  *v28 = &unk_24C2148C0;
  v28[4] = 4;
}

void sub_2099393F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _BYTE *v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v22)
  {
LABEL_6:
    if (a2 != 3)
    {
      MrecInitModule_sdpres_sdapi();
      TLocaleHandler::~TLocaleHandler(&a20);
      TReentrancyHandler::ms_bIn = 0;
      switch(a2)
      {
        case 7:
          v27 = (char *)__cxa_begin_catch(a1);
          v28 = v27 + 8;
          if (v27[31] < 0)
            v28 = *(_BYTE **)v28;
          handleException(v28, (uint64_t)"TPItn_Open", *((_QWORD *)v27 + 4), v25, v26);
          break;
        case 6:
          v31 = (char *)__cxa_begin_catch(a1);
          v32 = v31 + 8;
          if (v31[31] < 0)
            v32 = *(_BYTE **)v32;
          handleException(v32, (uint64_t)"TPItn_Open", 6, v29, v30);
          break;
        case 5:
          v35 = (char *)__cxa_begin_catch(a1);
          v36 = v35 + 8;
          if (v35[31] < 0)
            v36 = *(_BYTE **)v36;
          handleException(v36, (uint64_t)"TPItn_Open", 2, v33, v34);
          break;
        case 4:
          v39 = (char *)__cxa_begin_catch(a1);
          v40 = v39 + 8;
          if (v39[31] < 0)
            v40 = *(_BYTE **)v40;
          handleException(v40, (uint64_t)"TPItn_Open", 11, v37, v38);
          break;
        case 2:
          v41 = __cxa_begin_catch(a1);
          v42 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
          handleException(v42, (uint64_t)"TPItn_Open", 1, v43, v44);
          break;
        default:
          if (a2 != 1)
            _Unwind_Resume(a1);
          v45 = __cxa_begin_catch(a1);
          v46 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
          handleException(v46, (uint64_t)"TPItn_Open", 2, v47, v48);
          break;
      }
      __cxa_end_catch();
      JUMPOUT(0x209939078);
    }
    __cxa_begin_catch(a1);
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    __cxa_rethrow();
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void sub_209939694(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2099396A0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2099396AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2099396B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2099396C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2099396D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2099396DC()
{
  __cxa_end_catch();
  JUMPOUT(0x2099394D4);
}

void sub_2099396EC()
{
  __cxa_end_catch();
  JUMPOUT(0x2099396F4);
}

uint64_t verifyPointerArgument<TPItnHandle_fake **>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *exception;
  std::string *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    *exception = aPpx;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  return result;
}

void sub_2099397D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPItn_Close(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *exception;
  std::string *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  locale_t v11[2];
  char v12;

  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v12, "TPItn_Close");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v11);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 129, v2, v3);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, "Not initialized");
    *exception = aPpx;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  v4 = verifyFormatterHandle(a1, "Bad input ITN handle");
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v11);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_209939954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  void *v20;
  int v21;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  char *v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v26 = (char *)__cxa_begin_catch(a1);
        v27 = v26 + 8;
        if (v26[31] < 0)
          v27 = *(_BYTE **)v27;
        handleException(v27, (uint64_t)"TPItn_Close", *((_QWORD *)v26 + 4), v24, v25);
        break;
      case 6:
        v30 = (char *)__cxa_begin_catch(a1);
        v31 = v30 + 8;
        if (v30[31] < 0)
          v31 = *(_BYTE **)v31;
        handleException(v31, (uint64_t)"TPItn_Close", 6, v28, v29);
        break;
      case 5:
        v34 = (char *)__cxa_begin_catch(a1);
        v35 = v34 + 8;
        if (v34[31] < 0)
          v35 = *(_BYTE **)v35;
LABEL_17:
        handleException(v35, (uint64_t)"TPItn_Close", 2, v32, v33);
        break;
      case 4:
        v38 = (char *)__cxa_begin_catch(a1);
        v39 = v38 + 8;
        if (v38[31] < 0)
          v39 = *(_BYTE **)v39;
        handleException(v39, (uint64_t)"TPItn_Close", 11, v36, v37);
        break;
      case 3:
        v40 = (char *)__cxa_begin_catch(a1);
        v35 = v40 + 8;
        if (v40[31] < 0)
          v35 = *(_BYTE **)v35;
        goto LABEL_17;
      case 2:
        v41 = __cxa_begin_catch(a1);
        v42 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPItn_Close", 1, v43, v44);
        break;
      default:
        if (a2 != 1)
          _Unwind_Resume(a1);
        v45 = __cxa_begin_catch(a1);
        v46 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPItn_Close", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x209939894);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t verifyFormatterHandle(unint64_t a1, const char *a2)
{
  uint64_t Registry;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *exception;
  char *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  Registry = TRegisterable<TIFormatter>::getRegistry();
  v5 = TBaseRegistry<TTokenizer *>::find(Registry, a1);
  if (*(_QWORD **)(Registry + 16) == v5)
  {
    conditionalAssert(a2, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 47, v6, v7);
    exception = __cxa_allocate_exception(0x28uLL);
    v10 = (char *)a2;
    v11 = exception;
    std::string::basic_string[abi:ne180100]<0>(&v14, v10);
    *v11 = aPpx;
    v12 = (std::string *)(v11 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v13 = v14;
      v11[3] = v15;
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    *v11 = &unk_24C2148C0;
    v11[4] = 3;
  }
  return *v5;
}

void sub_209939CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t verifyStringStreamArgument(uint64_t result, unint64_t a2, char a3, char *a4, uint64_t a5)
{
  _QWORD *exception;
  std::string *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (!result && (a3 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 326, (uint64_t)a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a4);
    *exception = aPpx;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  return result;
}

void sub_209939DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_209939F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t TPItn_WordSequenceToResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, const char *a12)
{
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  TLexicon **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int32 *v50;
  const __int32 *v51;
  __int32 **v52;
  __int32 **v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  __int32 **v58;
  __int32 **v59;
  __int32 **v60;
  __int32 *v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int DirSep;
  unint64_t j;
  unsigned int *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  TEnvManager *DataManager;
  int v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v88;
  std::string *v89;
  _QWORD *v90;
  std::string *v91;
  _QWORD *v92;
  std::string *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _QWORD *v97;
  std::string *v98;
  _QWORD *exception;
  std::string *v100;
  _QWORD *v101;
  std::string *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  _QWORD v112[2];
  _BYTE v113[24];
  _BYTE v114[1024];
  char v115;
  _QWORD *v116[3];
  char *v117;
  __int32 **v118;
  __int32 **v119;
  _BYTE v120[24];
  _BYTE v121[1024];
  char v122;
  _BYTE v123[47];
  locale_t v124[2];
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132[1024];
  _QWORD v133[130];

  v12 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v110 = v14;
  v111 = v13;
  v16 = v15;
  v18 = v17;
  v109 = v19;
  v21 = v20;
  v23 = v22;
  v24 = v12;
  v133[128] = *MEMORY[0x24BDAC8D0];
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v125, "TPItn_WordSequenceToResult");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v124);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 671, v25, v26);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v120, "Not initialized");
    *exception = aPpx;
    v100 = (std::string *)(exception + 1);
    if ((v120[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v100, *(const std::string::value_type **)v120, *(std::string::size_type *)&v120[8]);
    }
    else
    {
      v104 = *(_OWORD *)v120;
      exception[3] = *(_QWORD *)&v120[16];
      *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v104;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  v108 = v21;
  v27 = (TLexicon **)verifyFormatterHandle(v24, "Bad input ITN handle");
  v30 = (*((uint64_t (**)(TLexicon **))*v27 + 8))(v27);
  if (!v30)
  {
    conditionalAssert("Results not supported", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 675, v28, v29);
    v101 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v120, "Results not supported");
    *v101 = aPpx;
    v102 = (std::string *)(v101 + 1);
    if ((v120[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v102, *(const std::string::value_type **)v120, *(std::string::size_type *)&v120[8]);
    }
    else
    {
      v105 = *(_OWORD *)v120;
      v101[3] = *(_QWORD *)&v120[16];
      *(_OWORD *)&v102->__r_.__value_.__l.__data_ = v105;
    }
    *v101 = &unk_24C2148C0;
    v101[4] = 13;
  }
  v31 = (*((uint64_t (**)(TLexicon **))*v27 + 4))(v27);
  if (!v23 || ((uint64_t)(*(_QWORD *)(v31 + 80) - *(_QWORD *)(v31 + 72)) >> 5) - 1 < v23)
  {
    conditionalAssert("Bad input parameter configuration handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 678, v32, v33);
    v97 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v120, "Bad input parameter configuration handle");
    *v97 = aPpx;
    v98 = (std::string *)(v97 + 1);
    if ((v120[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v98, *(const std::string::value_type **)v120, *(std::string::size_type *)&v120[8]);
    }
    else
    {
      v103 = *(_OWORD *)v120;
      v97[3] = *(_QWORD *)&v120[16];
      *(_OWORD *)&v98->__r_.__value_.__l.__data_ = v103;
    }
    *v97 = &unk_24C2148C0;
    v97[4] = 3;
  }
  v34 = (*((uint64_t (**)(TLexicon **))*v27 + 4))(v27);
  v106 = *(_QWORD *)(v34 + 136);
  v107 = v34;
  *(_QWORD *)(v34 + 136) = v23;
  verifyPointerArgument<TPItnResultHandle_fake **,unsigned int>(v108, v111, 1, "Bad input result array", v35);
  if (v111)
  {
    v37 = v111;
    v36 = (_QWORD *)v108;
    do
    {
      if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 128))(v30, *v36) & 1) == 0)
      {
        conditionalAssert("Bad input result handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 685, v38, v39);
        v88 = __cxa_allocate_exception(0x28uLL);
        std::string::basic_string[abi:ne180100]<0>(v120, "Bad input result handle");
        *v88 = aPpx;
        v89 = (std::string *)(v88 + 1);
        if ((v120[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v89, *(const std::string::value_type **)v120, *(std::string::size_type *)&v120[8]);
        }
        else
        {
          v94 = *(_OWORD *)v120;
          v88[3] = *(_QWORD *)&v120[16];
          *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v94;
        }
        *v88 = &unk_24C2148C0;
        v88[4] = 3;
      }
      ++v36;
      --v37;
    }
    while (v37);
  }
  verifyRange(v109, 0, v111, 0, "Bad input replaced range");
  verifyStringStreamArgument((uint64_t)v18, v110, 0, "Bad input word stream", v40);
  TAllocator::TAllocator((TAllocator *)v123, 2048);
  *(_OWORD *)&v120[8] = xmmword_209A57DD0;
  v122 = 1;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  *(_QWORD *)v120 = v121;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)&v117, v110);
  if (v110)
  {
    for (i = 0; i != v110; ++i)
    {
      TBuffer<wchar_t>::resize((uint64_t)v120, 0);
      if (TLocaleInfo::multiByteToUnicode((uint64_t)v27[4] + 240, v18, (uint64_t)v120))
      {
        conditionalAssert("Bad input wordname encoding", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 701, v43, v44);
        v90 = __cxa_allocate_exception(0x28uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "Bad input wordname encoding");
        *v90 = aPpx;
        v91 = (std::string *)(v90 + 1);
        if ((v113[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v91, *(const std::string::value_type **)v113, *(std::string::size_type *)&v113[8]);
        }
        else
        {
          v95 = *(_OWORD *)v113;
          v90[3] = *(_QWORD *)&v113[16];
          *(_OWORD *)&v91->__r_.__value_.__l.__data_ = v95;
        }
        *v90 = &unk_24C2148C0;
        v90[4] = 3;
      }
      v45 = (uint64_t)v27[4];
      if (*(_QWORD *)&v120[16] >= *(_QWORD *)&v120[8])
      {
        if (v122)
        {
          *(_DWORD *)v113 = 0;
          TBuffer<wchar_t>::insert((uint64_t)v120, *(unint64_t *)&v120[16], (int *)v113, 1uLL);
          --*(_QWORD *)&v120[16];
          v46 = *(int **)v120;
        }
        else
        {
          v46 = *(int **)v120;
          if (*(_QWORD *)&v120[8])
            *(_DWORD *)(*(_QWORD *)v120 + 4 * *(_QWORD *)&v120[8] - 4) = 0;
        }
      }
      else
      {
        v46 = *(int **)v120;
        *(_DWORD *)(*(_QWORD *)v120 + 4 * *(_QWORD *)&v120[16]) = 0;
      }
      if (TLexicon::checkName(v45, v46, 0, 0xFFFFFFFFFFFFFFFFLL))
      {
        conditionalAssert("Bad input wordname format", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 703, v47, v48);
        v92 = __cxa_allocate_exception(0x28uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "Bad input wordname format");
        *v92 = aPpx;
        v93 = (std::string *)(v92 + 1);
        if ((v113[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v93, *(const std::string::value_type **)v113, *(std::string::size_type *)&v113[8]);
        }
        else
        {
          v96 = *(_OWORD *)v113;
          v92[3] = *(_QWORD *)&v113[16];
          *(_OWORD *)&v93->__r_.__value_.__l.__data_ = v96;
        }
        *v92 = &unk_24C2148C0;
        v92[4] = 3;
      }
      if ((unint64_t)(*(_QWORD *)&v120[16] + 1) >> 62)
        v49 = -1;
      else
        v49 = 4 * (*(_QWORD *)&v120[16] + 1);
      v50 = (__int32 *)TAllocator::allocate((TAllocator *)v123, v49);
      if (*(_QWORD *)&v120[16] >= *(_QWORD *)&v120[8])
      {
        if (v122)
        {
          *(_DWORD *)v113 = 0;
          TBuffer<wchar_t>::insert((uint64_t)v120, *(unint64_t *)&v120[16], (int *)v113, 1uLL);
          --*(_QWORD *)&v120[16];
          v51 = *(const __int32 **)v120;
        }
        else
        {
          v51 = *(const __int32 **)v120;
          if (*(_QWORD *)&v120[8])
            *(_DWORD *)(*(_QWORD *)v120 + 4 * *(_QWORD *)&v120[8] - 4) = 0;
        }
      }
      else
      {
        v51 = *(const __int32 **)v120;
        *(_DWORD *)(*(_QWORD *)v120 + 4 * *(_QWORD *)&v120[16]) = 0;
      }
      wcscpy(v50, v51);
      v52 = v118;
      if (v118 >= v119)
      {
        v54 = ((char *)v118 - v117) >> 3;
        if ((unint64_t)(v54 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v55 = ((char *)v119 - v117) >> 2;
        if (v55 <= v54 + 1)
          v55 = v54 + 1;
        if ((unint64_t)((char *)v119 - v117) >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v55;
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v119, v56);
        else
          v57 = 0;
        v58 = (__int32 **)&v57[8 * v54];
        *v58 = v50;
        v53 = v58 + 1;
        v60 = (__int32 **)v117;
        v59 = v118;
        if (v118 != (__int32 **)v117)
        {
          do
          {
            v61 = *--v59;
            *--v58 = v61;
          }
          while (v59 != v60);
          v59 = (__int32 **)v117;
        }
        v117 = (char *)v58;
        v118 = v53;
        v119 = (__int32 **)&v57[8 * v56];
        if (v59)
          operator delete(v59);
      }
      else
      {
        *v118 = v50;
        v53 = v52 + 1;
      }
      v118 = v53;
      v18 += strlen((const char *)v18) + 1;
    }
  }
  if (v16 != 0 && v110 != 0)
    v62 = v110 - 1;
  else
    v62 = 0;
  verifyPointerArgument<unsigned int,unsigned int>(v16, v62, 1, "Bad input pause duration array", v41);
  v63 = (_QWORD *)a10;
  verifyPointerArgument<TPItnResultHandle_fake **>(a10, 0, "Bad output result handle pointer", v64, v65);
  v66 = (_DWORD *)a11;
  verifyPointerArgument<TPRange>(a11, 0, "Bad output real replaced range", v67, v68);
  v69 = a9;
  if (a12)
  {
    DirSep = getDirSep();
    sprintf((char *)v133, "%s%citn.txt", a12, DirSep);
    std::ofstream::basic_ofstream(&v129);
    TOutputStream::TOutputStream(v116, &v129, (uint64_t)v133, (uint64_t)v27[4] + 240);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)"NumInResult=", 12);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)"NumReplacementStart=", 20);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)"NumReplacementLength=", 21);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)"NumToken=", 9);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)"TokenSequence=", 14);
    *(_QWORD *)v113 = v114;
    *(_OWORD *)&v113[8] = xmmword_209A57DD0;
    v115 = 1;
    if (v110)
    {
      for (j = 0; j != v110; ++j)
      {
        if (j)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)" ", 1);
        TBuffer<wchar_t>::resize((uint64_t)v113, 0);
        tildeEscape(*(_QWORD *)&v117[8 * j], (uint64_t)v113);
        if (*(_QWORD *)&v113[16] >= *(_QWORD *)&v113[8])
        {
          if (v115)
          {
            LODWORD(v126) = 0;
            TBuffer<wchar_t>::insert((uint64_t)v113, *(unint64_t *)&v113[16], (int *)&v126, 1uLL);
            v72 = *(unsigned int **)v113;
            --*(_QWORD *)&v113[16];
          }
          else
          {
            v72 = *(unsigned int **)v113;
            if (*(_QWORD *)&v113[8])
              *(_DWORD *)(*(_QWORD *)v113 + 4 * *(_QWORD *)&v113[8] - 4) = 0;
          }
        }
        else
        {
          v72 = *(unsigned int **)v113;
          *(_DWORD *)(*(_QWORD *)v113 + 4 * *(_QWORD *)&v113[16]) = 0;
        }
        TOutputStream::operator<<((uint64_t)v116, v72);
        if (v16 && j < v110 - 1 && *(_DWORD *)(v16 + 4 * j))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)" [", 2);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)"]", 1);
        }
      }
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)"\n", 1);
    v69 = a9;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)"NumFlags=", 9);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116[0], (uint64_t)"\n", 1);
    v73 = getDirSep();
    sprintf((char *)v133, "%s%citn_d.enh", a12, v73);
    v112[0] = 1;
    v112[1] = v133;
    DataManager = makeDataManager((uint64_t)v112, 6uLL, v74, v75, v76);
    (*((void (**)(TLexicon **, TEnvManager *, _QWORD))*v27 + 2))(v27, DataManager, 0);
    if (DataManager)
      (*(void (**)(TEnvManager *))(*(_QWORD *)DataManager + 8))(DataManager);
    v78 = getDirSep();
    sprintf(v132, "%s%cgeneral.voc", a12, v78);
    TLexicon::save(v27[4], 0, (FileSpec *)v132);
    v79 = getDirSep();
    sprintf((char *)v133, "%s%citn.res", a12, v79);
    std::ofstream::basic_ofstream(&v126);
    if (v111)
    {
      v81 = v111;
      v80 = (_QWORD *)v108;
      do
      {
        v82 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v30 + 112))(v30, *v80, 0, 0);
        v83 = operator new[]();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v30 + 112))(v30, *v80, v83, v82);
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        MEMORY[0x20BD14990](v83, 0x1000C8077774924);
        ++v80;
        --v81;
      }
      while (v81);
    }
    v126 = *MEMORY[0x24BEDB7E8];
    v84 = v126;
    v85 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
    *(uint64_t *)((char *)&v126 + *(_QWORD *)(v126 - 24)) = v85;
    MEMORY[0x20BD147F8](&v127);
    std::ostream::~ostream();
    MEMORY[0x20BD1496C](&v128);
    if (v115 && *(_BYTE **)v113 != v114 && *(_QWORD *)v113)
      MEMORY[0x20BD149A8]();
    v129 = v84;
    *(uint64_t *)((char *)&v129 + *(_QWORD *)(v84 - 24)) = v85;
    MEMORY[0x20BD147F8](&v130);
    std::ostream::~ostream();
    MEMORY[0x20BD1496C](&v131);
    v66 = (_DWORD *)a11;
    v63 = (_QWORD *)a10;
  }
  *(_QWORD *)v113 = 0;
  v133[0] = 0;
  *v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char **, uint64_t, uint64_t, _BYTE *, _QWORD *))(*(_QWORD *)v30 + 16))(v30, v108, v108 + 8 * *v109, v108 + 8 * v109[1], v108 + 8 * v111, &v117, v16, v69, v113, v133);
  v86 = (unint64_t)(v133[0] - v108) >> 3;
  *v66 = (unint64_t)(*(_QWORD *)v113 - v108) >> 3;
  v66[1] = v86;
  TLexicon::cleanCache(v27[4]);
  if (v117)
  {
    v118 = (__int32 **)v117;
    operator delete(v117);
  }
  if (v122 && *(_BYTE **)v120 != v121 && *(_QWORD *)v120)
    MEMORY[0x20BD149A8](*(_QWORD *)v120, 0x1000C4052888210);
  TAllocator::clear((TAllocator *)v123);
  *(_QWORD *)(v107 + 136) = v106;
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v124);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_20993AE10(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  void *v3;
  int v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  char *v23;
  void *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;

  if (SLOBYTE(STACK[0x4FF]) < 0)
  {
    operator delete(*(void **)(v2 + 48));
    if ((v4 & 1) == 0)
      goto LABEL_7;
  }
  else if (!v4)
  {
LABEL_7:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler((locale_t *)&STACK[0x938]);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v9 = (char *)__cxa_begin_catch(a1);
        v10 = v9 + 8;
        if (v9[31] < 0)
          v10 = *(_BYTE **)v10;
        handleException(v10, (uint64_t)"TPItn_WordSequenceToResult", *((_QWORD *)v9 + 4), v7, v8);
        __cxa_end_catch();
        break;
      case 6:
        v13 = (char *)__cxa_begin_catch(a1);
        v14 = v13 + 8;
        if (v13[31] < 0)
          v14 = *(_BYTE **)v14;
        handleException(v14, (uint64_t)"TPItn_WordSequenceToResult", 6, v11, v12);
        __cxa_end_catch();
        break;
      case 5:
        v17 = (char *)__cxa_begin_catch(a1);
        v18 = v17 + 8;
        if (v17[31] < 0)
          v18 = *(_BYTE **)v18;
LABEL_18:
        handleException(v18, (uint64_t)"TPItn_WordSequenceToResult", 2, v15, v16);
        __cxa_end_catch();
        break;
      case 4:
        v21 = (char *)__cxa_begin_catch(a1);
        v22 = v21 + 8;
        if (v21[31] < 0)
          v22 = *(_BYTE **)v22;
        handleException(v22, (uint64_t)"TPItn_WordSequenceToResult", 11, v19, v20);
        __cxa_end_catch();
        break;
      case 3:
        v23 = (char *)__cxa_begin_catch(a1);
        v18 = v23 + 8;
        if (v23[31] < 0)
          v18 = *(_BYTE **)v18;
        goto LABEL_18;
      case 2:
        v24 = __cxa_begin_catch(a1);
        v25 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v24 + 16))(v24);
        handleException(v25, (uint64_t)"TPItn_WordSequenceToResult", 1, v26, v27);
        __cxa_end_catch();
        break;
      default:
        if (a2 != 1)
          _Unwind_Resume(a1);
        v28 = __cxa_begin_catch(a1);
        v29 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        handleException(v29, (uint64_t)"TPItn_WordSequenceToResult", 2, v30, v31);
        __cxa_end_catch();
        break;
    }
    JUMPOUT(0x20993A9D0);
  }
  __cxa_free_exception(v3);
  goto LABEL_7;
}

void sub_20993AE68(void *a1, int a2)
{
  if (a2 == 3)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x20993B010);
}

void sub_20993AE88()
{
  __cxa_end_catch();
  JUMPOUT(0x20993B010);
}

void sub_20993AEA8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20993AEB0);
  __clang_call_terminate(a1);
}

void sub_20993AED0()
{
  JUMPOUT(0x20993B0ACLL);
}

void sub_20993AEDC()
{
  JUMPOUT(0x20993B0B4);
}

void sub_20993AEE8()
{
  JUMPOUT(0x20993B0C0);
}

void sub_20993AEF4(void *a1, int a2)
{
  uint64_t v2;

  if (a2 == 3)
  {
    saveDump(a1, v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x20993B010);
}

void sub_20993AF18()
{
  __cxa_end_catch();
  JUMPOUT(0x20993B010);
}

void sub_20993AF38(void *a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler((TLocaleHandler *)&STACK[0x938]);
  TReentrancyHandler::ms_bIn = 0;
  switch(a2)
  {
    case 7:
      v4 = __cxa_begin_catch(a1);
      v5 = v4 + 1;
      if (*((char *)v4 + 31) < 0)
        v5 = (_QWORD *)*v5;
      handleException(v5, "TPItn_WordSequenceToResult", v4[4]);
      __cxa_end_catch();
      break;
    case 6:
      v6 = (char *)__cxa_begin_catch(a1);
      v7 = v6 + 8;
      if (v6[31] < 0)
        v7 = (_QWORD *)*v7;
      handleException(v7, "TPItn_WordSequenceToResult", 6);
      __cxa_end_catch();
      break;
    case 5:
      v8 = (char *)__cxa_begin_catch(a1);
      v9 = v8 + 8;
      if (v8[31] < 0)
        v9 = (_QWORD *)*v9;
LABEL_12:
      handleException(v9, "TPItn_WordSequenceToResult", 2);
      __cxa_end_catch();
      break;
    case 4:
      v10 = (char *)__cxa_begin_catch(a1);
      v11 = v10 + 8;
      if (v10[31] < 0)
        v11 = (_QWORD *)*v11;
      handleException(v11, "TPItn_WordSequenceToResult", 11);
      __cxa_end_catch();
      break;
    case 3:
      v12 = (char *)__cxa_begin_catch(a1);
      v9 = v12 + 8;
      if (v12[31] < 0)
        v9 = (_QWORD *)*v9;
      goto LABEL_12;
    case 2:
      v13 = __cxa_begin_catch(a1);
      v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 16))(v13);
      handleException(v14, "TPItn_WordSequenceToResult", 1);
      __cxa_end_catch();
      break;
    case 1:
      v15 = __cxa_begin_catch(a1);
      v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 16))(v15);
      handleException(v16, "TPItn_WordSequenceToResult", 2);
      __cxa_end_catch();
      break;
    default:
      JUMPOUT(0x20993AEB0);
  }
  JUMPOUT(0x20993A9D0);
}

void sub_20993AF44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;

  if (a33 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v34)
  {
LABEL_6:
    JUMPOUT(0x20993B054);
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void sub_20993AF88()
{
  uint64_t v0;
  void *v1;
  int v2;

  if (SLOBYTE(STACK[0x4FF]) < 0)
  {
    operator delete(*(void **)(v0 + 48));
    if ((v2 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v2)
  {
LABEL_6:
    JUMPOUT(0x20993B09CLL);
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void sub_20993AFC4()
{
  JUMPOUT(0x20993B040);
}

void sub_20993AFE0()
{
  JUMPOUT(0x20993B09CLL);
}

void sub_20993AFF0()
{
  std::ofstream::~ofstream(&STACK[0x950]);
  JUMPOUT(0x20993B010);
}

void sub_20993B008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  _QWORD *v28;
  void *v29;
  uint64_t v30;

  if (LOBYTE(STACK[0x4B0]) && a28 != a11 && a28)
    MEMORY[0x20BD149A8]();
  std::ofstream::~ofstream(&STACK[0xB88]);
  v29 = (void *)v28[3];
  if (v29)
  {
    v28[4] = v29;
    operator delete(v29);
  }
  if (LOBYTE(STACK[0x900]))
  {
    v30 = v28[6];
    if (v30 != a17)
    {
      if (v30)
        MEMORY[0x20BD149A8](v30, 0x1000C4052888210);
    }
  }
  TAllocator::clear((TAllocator *)&STACK[0x908]);
  *(_QWORD *)(a20 + 136) = a19;
  JUMPOUT(0x20993B0A4);
}

void sub_20993B270(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20993B27C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20993B288(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20993B294(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20993B2A0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20993B2AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20993B2B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20993B2CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t verifyPointerArgument<TPItnResultHandle_fake **,unsigned int>(uint64_t result, int a2, int a3, char *a4, uint64_t a5)
{
  BOOL v5;
  _QWORD *exception;
  std::string *v8;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (!result && a2 && a3)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 269, (uint64_t)a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *exception = aPpx;
    v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v12;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  if (a2)
    v5 = result == 0;
  else
    v5 = 1;
  if (v5 && (a3 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 270, (uint64_t)a4, a5);
    v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *v10 = aPpx;
    v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *v10 = &unk_24C2148C0;
    v10[4] = 3;
  }
  return result;
}

void sub_20993B460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

unsigned int *verifyRange(unsigned int *result, unsigned int a2, unsigned int a3, uint64_t a4, char *a5)
{
  unsigned int v6;
  _QWORD *exception;
  std::string *v8;
  _QWORD *v9;
  std::string *v10;
  _QWORD *v11;
  std::string *v12;
  _QWORD *v13;
  std::string *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (!result && (a4 & 1) == 0)
  {
    conditionalAssert(a5, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 349, a4, (uint64_t)a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, a5);
    *exception = aPpx;
    v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v20) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
    }
    else
    {
      v15 = v19;
      exception[3] = v20;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v15;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  if (result)
  {
    v6 = result[1];
    if (*result > v6)
    {
      conditionalAssert(a5, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 352, a4, (uint64_t)a5);
      v9 = __cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(&v19, a5);
      *v9 = aPpx;
      v10 = (std::string *)(v9 + 1);
      if (SHIBYTE(v20) < 0)
      {
        std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
      }
      else
      {
        v16 = v19;
        v9[3] = v20;
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v16;
      }
      *v9 = &unk_24C2148C0;
      v9[4] = 3;
    }
    if (*result < a2)
    {
      conditionalAssert(a5, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 353, a4, (uint64_t)a5);
      v11 = __cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(&v19, a5);
      *v11 = aPpx;
      v12 = (std::string *)(v11 + 1);
      if (SHIBYTE(v20) < 0)
      {
        std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
      }
      else
      {
        v17 = v19;
        v11[3] = v20;
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v17;
      }
      *v11 = &unk_24C2148C0;
      v11[4] = 3;
    }
    if (v6 > a3)
    {
      conditionalAssert(a5, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 354, a4, (uint64_t)a5);
      v13 = __cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(&v19, a5);
      *v13 = aPpx;
      v14 = (std::string *)(v13 + 1);
      if (SHIBYTE(v20) < 0)
      {
        std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
      }
      else
      {
        v18 = v19;
        v13[3] = v20;
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v18;
      }
      *v13 = &unk_24C2148C0;
      v13[4] = 3;
    }
  }
  return result;
}

void sub_20993B76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t verifyPointerArgument<TPItnResultHandle_fake **>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *exception;
  std::string *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    *exception = aPpx;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  return result;
}

void sub_20993B888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t verifyPointerArgument<TPRange>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *exception;
  std::string *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    *exception = aPpx;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  return result;
}

void sub_20993B994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPItn_DeleteResult(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  std::string *v15;
  _QWORD *v16;
  std::string *v17;
  _QWORD *v18;
  std::string *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  locale_t v25[2];
  char v26;

  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v26, "TPItn_DeleteResult");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v25);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1087, v4, v5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v23, "Not initialized");
    *exception = aPpx;
    v15 = (std::string *)(exception + 1);
    if (SHIBYTE(v24) < 0)
    {
      std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v23, *((std::string::size_type *)&v23 + 1));
    }
    else
    {
      v20 = v23;
      exception[3] = v24;
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v20;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  v6 = verifyFormatterHandle(a1, "Bad input ITN handle");
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
  v10 = v7;
  if (!v7)
  {
    conditionalAssert("Results not supported", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1091, v8, v9);
    v16 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v23, "Results not supported");
    *v16 = aPpx;
    v17 = (std::string *)(v16 + 1);
    if (SHIBYTE(v24) < 0)
    {
      std::string::__init_copy_ctor_external(v17, (const std::string::value_type *)v23, *((std::string::size_type *)&v23 + 1));
    }
    else
    {
      v21 = v23;
      v16[3] = v24;
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v21;
    }
    *v16 = &unk_24C2148C0;
    v16[4] = 13;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 128))(v7, a2) & 1) == 0)
  {
    conditionalAssert("Bad input result handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1094, v11, v12);
    v18 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v23, "Bad input result handle");
    *v18 = aPpx;
    v19 = (std::string *)(v18 + 1);
    if (SHIBYTE(v24) < 0)
    {
      std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)v23, *((std::string::size_type *)&v23 + 1));
    }
    else
    {
      v22 = v23;
      v18[3] = v24;
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v22;
    }
    *v18 = &unk_24C2148C0;
    v18[4] = 3;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 64))(v10, a2);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v25);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_20993BC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  void *v20;
  int v21;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  char *v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v26 = (char *)__cxa_begin_catch(a1);
        v27 = v26 + 8;
        if (v26[31] < 0)
          v27 = *(_BYTE **)v27;
        handleException(v27, (uint64_t)"TPItn_DeleteResult", *((_QWORD *)v26 + 4), v24, v25);
        break;
      case 6:
        v30 = (char *)__cxa_begin_catch(a1);
        v31 = v30 + 8;
        if (v30[31] < 0)
          v31 = *(_BYTE **)v31;
        handleException(v31, (uint64_t)"TPItn_DeleteResult", 6, v28, v29);
        break;
      case 5:
        v34 = (char *)__cxa_begin_catch(a1);
        v35 = v34 + 8;
        if (v34[31] < 0)
          v35 = *(_BYTE **)v35;
LABEL_17:
        handleException(v35, (uint64_t)"TPItn_DeleteResult", 2, v32, v33);
        break;
      case 4:
        v38 = (char *)__cxa_begin_catch(a1);
        v39 = v38 + 8;
        if (v38[31] < 0)
          v39 = *(_BYTE **)v39;
        handleException(v39, (uint64_t)"TPItn_DeleteResult", 11, v36, v37);
        break;
      case 3:
        v40 = (char *)__cxa_begin_catch(a1);
        v35 = v40 + 8;
        if (v40[31] < 0)
          v35 = *(_BYTE **)v35;
        goto LABEL_17;
      case 2:
        v41 = __cxa_begin_catch(a1);
        v42 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPItn_DeleteResult", 1, v43, v44);
        break;
      default:
        if (a2 != 1)
          _Unwind_Resume(a1);
        v45 = __cxa_begin_catch(a1);
        v46 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPItn_DeleteResult", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x20993BA88);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t TPItn_GetResultText(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *exception;
  std::string *v21;
  _QWORD *v22;
  std::string *v23;
  _QWORD *v24;
  std::string *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  locale_t v29[2];
  char v30;
  char v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v30, "TPItn_GetResultText");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v29);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1143, v10, v11);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v32, "Not initialized");
    *exception = aPpx;
    v21 = (std::string *)(exception + 1);
    if (SHIBYTE(v33) < 0)
    {
      std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)v32, *((std::string::size_type *)&v32 + 1));
    }
    else
    {
      v26 = v32;
      exception[3] = v33;
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v26;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  v12 = verifyFormatterHandle(a1, "Bad input ITN handle");
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 64))(v12);
  v16 = v13;
  if (!v13)
  {
    conditionalAssert("Results not supported", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1147, v14, v15);
    v22 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v32, "Results not supported");
    *v22 = aPpx;
    v23 = (std::string *)(v22 + 1);
    if (SHIBYTE(v33) < 0)
    {
      std::string::__init_copy_ctor_external(v23, (const std::string::value_type *)v32, *((std::string::size_type *)&v32 + 1));
    }
    else
    {
      v27 = v32;
      v22[3] = v33;
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v27;
    }
    *v22 = &unk_24C2148C0;
    v22[4] = 13;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 128))(v13, a2) & 1) == 0)
  {
    conditionalAssert("Bad input result handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1150, v17, v18);
    v24 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v32, "Bad input result handle");
    *v24 = aPpx;
    v25 = (std::string *)(v24 + 1);
    if (SHIBYTE(v33) < 0)
    {
      std::string::__init_copy_ctor_external(v25, (const std::string::value_type *)v32, *((std::string::size_type *)&v32 + 1));
    }
    else
    {
      v28 = v32;
      v24[3] = v33;
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v28;
    }
    *v24 = &unk_24C2148C0;
    v24[4] = 3;
  }
  verifyPointerArgument<char,unsigned int>(a3, a4, 1, "Bad output text buffer", v18);
  *(_QWORD *)&v32 = a3;
  *((_QWORD *)&v32 + 1) = a4;
  v33 = 0;
  v35 = 0;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v16 + 96))(v16, a2, &v32);
  if (v33 >= *((_QWORD *)&v32 + 1))
  {
    if (v35)
    {
      v31 = 0;
      TBuffer<char>::insert((uint64_t)&v32, v33--, &v31, 1uLL);
    }
    else if (*((_QWORD *)&v32 + 1))
    {
      *(_BYTE *)(*((_QWORD *)&v32 + 1) + v32 - 1) = 0;
    }
  }
  else
  {
    *(_BYTE *)(v32 + v33) = 0;
  }
  if (a5)
    *a5 = v33 + 1;
  if (v35 && (uint64_t *)v32 != &v34 && (_QWORD)v32)
    MEMORY[0x20BD149A8]();
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v29);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_20993C2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, locale_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  int v56;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _BYTE *v74;
  char *v75;
  void *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v56 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v56)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a14);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v61 = (char *)__cxa_begin_catch(a1);
        v62 = v61 + 8;
        if (v61[31] < 0)
          v62 = *(_BYTE **)v62;
        handleException(v62, (uint64_t)"TPItn_GetResultText", *((_QWORD *)v61 + 4), v59, v60);
        __cxa_end_catch();
        break;
      case 6:
        v65 = (char *)__cxa_begin_catch(a1);
        v66 = v65 + 8;
        if (v65[31] < 0)
          v66 = *(_BYTE **)v66;
        handleException(v66, (uint64_t)"TPItn_GetResultText", 6, v63, v64);
        __cxa_end_catch();
        break;
      case 5:
        v69 = (char *)__cxa_begin_catch(a1);
        v70 = v69 + 8;
        if (v69[31] < 0)
          v70 = *(_BYTE **)v70;
LABEL_17:
        handleException(v70, (uint64_t)"TPItn_GetResultText", 2, v67, v68);
        __cxa_end_catch();
        break;
      case 4:
        v73 = (char *)__cxa_begin_catch(a1);
        v74 = v73 + 8;
        if (v73[31] < 0)
          v74 = *(_BYTE **)v74;
        handleException(v74, (uint64_t)"TPItn_GetResultText", 11, v71, v72);
        __cxa_end_catch();
        break;
      case 3:
        v75 = (char *)__cxa_begin_catch(a1);
        v70 = v75 + 8;
        if (v75[31] < 0)
          v70 = *(_BYTE **)v70;
        goto LABEL_17;
      case 2:
        v76 = __cxa_begin_catch(a1);
        v77 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v76 + 16))(v76);
        handleException(v77, (uint64_t)"TPItn_GetResultText", 1, v78, v79);
        __cxa_end_catch();
        break;
      default:
        if (a2 != 1)
          _Unwind_Resume(a1);
        v80 = __cxa_begin_catch(a1);
        v81 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v80 + 16))(v80);
        handleException(v81, (uint64_t)"TPItn_GetResultText", 2, v82, v83);
        __cxa_end_catch();
        break;
    }
    JUMPOUT(0x20993C0B0);
  }
  __cxa_free_exception(v55);
  goto LABEL_6;
}

uint64_t TPItn_GetResultAlignment(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, _DWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *exception;
  std::string *v28;
  _QWORD *v29;
  std::string *v30;
  _QWORD *v31;
  std::string *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[24];
  _BYTE v37[2048];
  char v38;
  locale_t v39[2];
  char v40;

  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v40, "TPItn_GetResultAlignment");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v39);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1172, v12, v13);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v36, "Not initialized");
    *exception = aPpx;
    v28 = (std::string *)(exception + 1);
    if ((v36[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v36, *(std::string::size_type *)&v36[8]);
    }
    else
    {
      v33 = *(_OWORD *)v36;
      exception[3] = *(_QWORD *)&v36[16];
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v33;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  v14 = verifyFormatterHandle(a1, "Bad input ITN handle");
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 64))(v14);
  v18 = v15;
  if (!v15)
  {
    conditionalAssert("Results not supported", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1176, v16, v17);
    v29 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v36, "Results not supported");
    *v29 = aPpx;
    v30 = (std::string *)(v29 + 1);
    if ((v36[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)v36, *(std::string::size_type *)&v36[8]);
    }
    else
    {
      v34 = *(_OWORD *)v36;
      v29[3] = *(_QWORD *)&v36[16];
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v34;
    }
    *v29 = &unk_24C2148C0;
    v29[4] = 13;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 128))(v15, a2) & 1) == 0)
  {
    conditionalAssert("Bad input result handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1179, v19, v20);
    v31 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v36, "Bad input result handle");
    *v31 = aPpx;
    v32 = (std::string *)(v31 + 1);
    if ((v36[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)v36, *(std::string::size_type *)&v36[8]);
    }
    else
    {
      v35 = *(_OWORD *)v36;
      v31[3] = *(_QWORD *)&v36[16];
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v35;
    }
    *v31 = &unk_24C2148C0;
    v31[4] = 3;
  }
  verifyPointerArgument<unsigned int,unsigned int>(a3, a5, 1, "Bad output relative-text buffer", v20);
  verifyPointerArgument<unsigned int,unsigned int>(a4, a5, 1, "Bad output relative-word buffer", v21);
  *(_QWORD *)v36 = v37;
  *(_OWORD *)&v36[8] = xmmword_209A57DD0;
  v38 = 1;
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v18 + 120))(v18, a2, v36);
  v22 = *(_QWORD *)&v36[16];
  if (a5 && *(_QWORD *)&v36[16])
  {
    v23 = 0;
    v24 = 0;
    v25 = *(_QWORD *)v36;
    do
    {
      if (a3)
        *(_DWORD *)(a3 + 4 * v23) = *(_QWORD *)(v25 + 8 * v24);
      if (a4)
        *(_DWORD *)(a4 + 4 * v23) = *(_QWORD *)(v25 + 8 * v24 + 8);
      if (++v23 >= (unint64_t)a5)
        break;
      v24 += 2;
    }
    while (v24 < v22);
  }
  if (a6)
    *a6 = v22 >> 1;
  if (v38 && *(_BYTE **)v36 != v37 && *(_QWORD *)v36)
    MEMORY[0x20BD149A8]();
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v39);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_20993C988(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _BYTE *v34;
  char *v35;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v15)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler((locale_t *)(v16 - 104));
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v21 = (char *)__cxa_begin_catch(a1);
        v22 = v21 + 8;
        if (v21[31] < 0)
          v22 = *(_BYTE **)v22;
        handleException(v22, (uint64_t)"TPItn_GetResultAlignment", *((_QWORD *)v21 + 4), v19, v20);
        break;
      case 6:
        v25 = (char *)__cxa_begin_catch(a1);
        v26 = v25 + 8;
        if (v25[31] < 0)
          v26 = *(_BYTE **)v26;
        handleException(v26, (uint64_t)"TPItn_GetResultAlignment", 6, v23, v24);
        break;
      case 5:
        v29 = (char *)__cxa_begin_catch(a1);
        v30 = v29 + 8;
        if (v29[31] < 0)
          v30 = *(_BYTE **)v30;
LABEL_17:
        handleException(v30, (uint64_t)"TPItn_GetResultAlignment", 2, v27, v28);
        break;
      case 4:
        v33 = (char *)__cxa_begin_catch(a1);
        v34 = v33 + 8;
        if (v33[31] < 0)
          v34 = *(_BYTE **)v34;
        handleException(v34, (uint64_t)"TPItn_GetResultAlignment", 11, v31, v32);
        break;
      case 3:
        v35 = (char *)__cxa_begin_catch(a1);
        v30 = v35 + 8;
        if (v35[31] < 0)
          v30 = *(_BYTE **)v30;
        goto LABEL_17;
      case 2:
        v36 = __cxa_begin_catch(a1);
        v37 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v36 + 16))(v36);
        handleException(v37, (uint64_t)"TPItn_GetResultAlignment", 1, v38, v39);
        break;
      default:
        if (a2 != 1)
          _Unwind_Resume(a1);
        v40 = __cxa_begin_catch(a1);
        v41 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
        handleException(v41, (uint64_t)"TPItn_GetResultAlignment", 2, v42, v43);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x20993C76CLL);
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t OUTLINED_FUNCTION_0_3(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t MrecInitLibrary_sdapi(void)
{
  MrecInitModule_apist_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughSdapi(void)
{
  MrecInitLibrarySet_throughRecogctl();
  MrecInitLibrarySet_throughFstgraph();
  return MrecInitLibrary_sdapi();
}

void ParentFirstStateIdIterator::ParentFirstStateIdIterator(ParentFirstStateIdIterator *this, const StateMgr *a2)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue((uint64_t)this + 8, 0);
}

void sub_20993CD0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void ParentFirstStateIdIterator::addChildStatesToQueue(StateMgr **this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t ChildStates;
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;

  ChildStates = StateMgr::getChildStates(*this, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(unsigned int *)(ChildStates + 8);
  if ((_DWORD)v10)
  {
    v11 = ChildStates;
    for (i = 0; i < v10; ++i)
    {
      v13 = *(unsigned int *)(*(_QWORD *)v11 + 4 * i);
      if (*((_DWORD *)*this + 180) > v13)
      {
        if (*(_BYTE *)(*((_QWORD *)*this + 70) + v13))
        {
          DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue((uint64_t)(this + 1), v13);
          v10 = *(unsigned int *)(v11 + 8);
        }
      }
    }
  }
}

void TextStateRule::TextStateRule(TextStateRule *this)
{
  *(_QWORD *)((char *)this + 20) = -1;
  *(_QWORD *)((char *)this + 12) = -1;
  *(_QWORD *)((char *)this + 4) = -1;
  *((_DWORD *)this + 7) = -1;
  DgnString::DgnString((TextStateRule *)((char *)this + 40));
}

void TextStateRule::~TextStateRule(TextStateRule *this)
{
  DgnString::~DgnString((TextStateRule *)((char *)this + 40));
}

uint64_t TextStateRule::parseHeader(TextStateRule *this, DgnTextFileParser *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t FileVersion;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 v36[4];
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];

  DgnTextFileParser::verifyMatchingFileType(a2, "TSR");
  v40[0] = 0;
  v40[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)a2, sTSR_Versions, (uint64_t)v40, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)a2, (unsigned int *)v40, v9, v10, v11, v12, v13, v14);
  FileVersion = DgnTextFile::getFileVersion(a2);
  v16 = HIDWORD(FileVersion) == 12;
  if ((_DWORD)FileVersion != 19)
    v16 = 0;
  if ((_DWORD)FileVersion == 20)
    v16 = HIDWORD(FileVersion) == 13;
  if ((_DWORD)FileVersion == 23)
    v16 = HIDWORD(FileVersion) == 14;
  *((_BYTE *)this + 32) = v16;
  v38 = 0;
  v39 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)a2, (uint64_t)&v38);
  v37[0] = 0;
  v37[1] = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)a2, (unint64_t)v37);
  if ((int)v39 >= 1)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      if (*(_DWORD *)(v38 + v19 + 8))
        v21 = *(const char **)(v38 + v19);
      else
        v21 = &byte_209A88803;
      if (!strcmp(v21, "Type"))
      {
        if (*(_DWORD *)(v37[0] + 4 * v20))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 252, (uint64_t)"voc/tsr", 25, (uint64_t)"%.500s %.500s", v17, v18, (char)v21);
        *((_DWORD *)this + 1) = v20;
      }
      else if (*((_BYTE *)this + 32) && !strcmp(v21, "VocName"))
      {
        if (*(_DWORD *)(v37[0] + 4 * v20))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 260, (uint64_t)"voc/tsr", 25, (uint64_t)"%.500s %.500s", v17, v18, (char)v21);
        *((_DWORD *)this + 2) = v20;
      }
      else if (!strcmp(v21, "IntValue1"))
      {
        if (*(_DWORD *)(v37[0] + 4 * v20) != 1)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 268, (uint64_t)"voc/tsr", 25, (uint64_t)"%.500s %.500s", v17, v18, (char)v21);
        *((_DWORD *)this + 3) = v20;
      }
      else if (!strcmp(v21, "StrValue1"))
      {
        if (*(_DWORD *)(v37[0] + 4 * v20))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 276, (uint64_t)"voc/tsr", 25, (uint64_t)"%.500s %.500s", v17, v18, (char)v21);
        *((_DWORD *)this + 4) = v20;
      }
      else if (!strcmp(v21, "StrValue2"))
      {
        if (*(_DWORD *)(v37[0] + 4 * v20))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 284, (uint64_t)"voc/tsr", 25, (uint64_t)"%.500s %.500s", v17, v18, (char)v21);
        *((_DWORD *)this + 5) = v20;
      }
      else if (!strcmp(v21, "StrValue3"))
      {
        if (*(_DWORD *)(v37[0] + 4 * v20))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 292, (uint64_t)"voc/tsr", 25, (uint64_t)"%.500s %.500s", v17, v18, (char)v21);
        *((_DWORD *)this + 6) = v20;
      }
      else if (!strcmp(v21, "IntValue2"))
      {
        if (*(_DWORD *)(v37[0] + 4 * v20) != 1)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 300, (uint64_t)"voc/tsr", 25, (uint64_t)"%.500s %.500s", v17, v18, (char)v21);
        *((_DWORD *)this + 7) = v20;
      }
      else
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 306, (uint64_t)"voc/tsr", 2, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
      }
      ++v20;
      v19 += 16;
    }
    while (v20 < (int)v39);
  }
  if (*((_DWORD *)this + 1) == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 309, (uint64_t)"voc/tsr", 3, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
  if (*((_BYTE *)this + 32) && *((_DWORD *)this + 2) == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 311, (uint64_t)"voc/tsr", 3, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
  if (*((_DWORD *)this + 3) == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 313, (uint64_t)"voc/tsr", 3, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
  if (*((_DWORD *)this + 4) == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 315, (uint64_t)"voc/tsr", 3, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
  if (*((_DWORD *)this + 5) == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 317, (uint64_t)"voc/tsr", 3, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
  if (*((_DWORD *)this + 6) == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 319, (uint64_t)"voc/tsr", 3, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
  if (*((_DWORD *)this + 7) == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 321, (uint64_t)"voc/tsr", 3, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
  if (*((_BYTE *)this + 32))
  {
    *(_DWORD *)&v36[2] = 0;
    DgnTextFile::getHeaderFieldUnsigned(a2, "NumberOfVocs", (unsigned int *)&v36[2], 1, 0, 0xFFFFFFFF);
    if (*(_DWORD *)&v36[2] != 1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 329, (uint64_t)"voc/tsr", 30, (uint64_t)"%u %u", v27, v28, *((_DWORD *)a2 + 25));
  }
  else
  {
    *(_QWORD *)v36 = 0;
    DgnTextFile::getHeaderFieldUnsigned(a2, "MaxStateId", (unsigned int *)&v36[2], 1, 0, 0xFFFFFFFF);
    DgnTextFile::getHeaderFieldUnsigned(a2, "MaxRuleId", (unsigned int *)v36, 1, 0, 0xFFFFFFFF);
    StateMgr::preAllocToEnsureStateId(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), *(unsigned int *)&v36[2], v29, v30, v31, v32, v33, v34);
    RuleMgr::preAllocToEnsureRuleId(*(RuleMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64), v36[0]);
  }
  DgnTextFileParser::verifyNoUnknownHeaderFields(a2, v22, v23, v24, v25, v26, v27, v28);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v37);
  DgnArray<DgnString>::releaseAll((uint64_t)&v38);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)v40);
}

void sub_20993D4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void TextStateRule::parseBody(TextStateRule *this, DgnTextFileParser *a2)
{
  uint64_t FileVersion;
  uint64_t v5;
  uint64_t v6;
  char *LineFieldString;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  int v15;
  const char *v16;
  char *v17;
  const char *v18;
  char *v19;
  const char *v20;
  char *v21;
  const char *v22;
  char *v23;
  char *v24;
  const char *v25;
  char *v26;
  const char *v27;
  char *v28;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  int v33;
  const char *v34;
  const char *v35;
  char *v36;
  const char *v37;
  char *v38;
  const char *v39;
  char *v40;
  const char *v41;
  char *v42;
  const char *v43;
  char *v44;
  const char *v45;
  char *v46;
  int v47;
  const char *v48;
  const char *v49;
  char *v50;
  const char *v51;
  char *v52;
  const char *v53;
  char *v54;
  int v55;
  const char *v56;
  const char *v57;
  char *v58;
  const char *v59;
  char *v60;
  int v61;
  const char *v62;
  const char *v63;
  char *v64;
  const char *v65;
  char *v66;
  const char *v67;
  char *v68;
  const char *v69;
  char *v70;
  const char *v71;
  char *v72;
  const char *v73;
  char *v74;
  const char *v75;
  char *v76;
  const char *v77;
  char *v78;
  const char *v79;
  char *v80;
  const char *v81;
  char *v82;
  const char *v83;
  char *v84;
  const char *v85;
  char *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  int v91;

  FileVersion = DgnTextFile::getFileVersion(a2);
  if ((DgnTextFileParser::parseNextLine(a2) & 1) == 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 358, (uint64_t)"voc/tsr", 22, (uint64_t)"%u", v5, v6, *((_DWORD *)a2 + 25));
  LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
  DgnString::DgnString((DgnString *)&v90, LineFieldString);
  v8 = v90;
  if (*((_BYTE *)this + 32))
  {
    v9 = v91;
    if (v91)
      v10 = v90;
    else
      v10 = &byte_209A88803;
    if (strcmp(v10, "VocMaxIdInfo"))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 364, (uint64_t)"voc/tsr", 19, (uint64_t)"%u", v11, v12, *((_DWORD *)a2 + 25));
      v9 = v91;
      v8 = v90;
    }
    if (v9)
      v13 = v8;
    else
      v13 = &byte_209A88803;
    if (!strcmp(v13, "VocMaxIdInfo"))
    {
      TextStateRule::parseVocMaxIdInfo(this, a2);
      if ((DgnTextFileParser::atEof(a2) & 1) != 0)
        v14 = "None";
      else
        v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::operator=((DgnString *)&v90, v14);
      v8 = v90;
    }
  }
  v15 = v91;
  if (v91)
    v16 = v8;
  else
    v16 = &byte_209A88803;
  if (!strcmp(v16, "StateDefinition"))
  {
    TextStateRule::parseStateDefinition(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v17 = "None";
    else
      v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v17);
    v15 = v91;
    v8 = v90;
  }
  if (v15)
    v18 = v8;
  else
    v18 = &byte_209A88803;
  if (!strcmp(v18, "StateName"))
  {
    TextStateRule::parseStateName(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v19 = "None";
    else
      v19 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v19);
    v15 = v91;
    v8 = v90;
  }
  if (v15)
    v20 = v8;
  else
    v20 = &byte_209A88803;
  if (!strcmp(v20, "StateAllowLM"))
  {
    TextStateRule::parseStateAllowLM(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v21 = "None";
    else
      v21 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v21);
    v15 = v91;
    v8 = v90;
  }
  if (v15)
    v22 = v8;
  else
    v22 = &byte_209A88803;
  if (!strcmp(v22, "StateWeightsName"))
  {
    TextStateRule::parseStateWeightsName(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v23 = "None";
    else
      v23 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v23);
    v15 = v91;
    v8 = v90;
  }
  if (!v15)
    v8 = &byte_209A88803;
  if (!strcmp(v8, "StateWordPenalty"))
  {
    TextStateRule::parseStateWordPenalty(this, a2, v8);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v24 = "None";
    else
      v24 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v24);
  }
  if (FileVersion != 0xC00000013)
  {
    if (v91)
      v25 = v90;
    else
      v25 = &byte_209A88803;
    if (!strcmp(v25, "StateMinStartTime"))
    {
      TextStateRule::parseStateMinStartTime(this, a2);
      if ((DgnTextFileParser::atEof(a2) & 1) != 0)
        v26 = "None";
      else
        v26 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::operator=((DgnString *)&v90, v26);
    }
    if (v91)
      v27 = v90;
    else
      v27 = &byte_209A88803;
    if (!strcmp(v27, "StateMaxStartTime"))
    {
      TextStateRule::parseStateMaxStartTime(this, a2);
      if ((DgnTextFileParser::atEof(a2) & 1) != 0)
        v28 = "None";
      else
        v28 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::operator=((DgnString *)&v90, v28);
    }
    if (v91)
      v29 = v90;
    else
      v29 = &byte_209A88803;
    if (!strcmp(v29, "StateMinEndTime"))
    {
      TextStateRule::parseStateMinEndTime(this, a2);
      if ((DgnTextFileParser::atEof(a2) & 1) != 0)
        v30 = "None";
      else
        v30 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::operator=((DgnString *)&v90, v30);
    }
    if (v91)
      v31 = v90;
    else
      v31 = &byte_209A88803;
    if (!strcmp(v31, "StateMaxEndTime"))
    {
      TextStateRule::parseStateMaxEndTime(this, a2);
      if ((DgnTextFileParser::atEof(a2) & 1) != 0)
        v32 = "None";
      else
        v32 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::operator=((DgnString *)&v90, v32);
    }
  }
  v33 = v91;
  v34 = v90;
  if (v91)
    v35 = v90;
  else
    v35 = &byte_209A88803;
  if (!strcmp(v35, "StateCollapsible"))
  {
    TextStateRule::parseStateCollapsible(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v36 = "None";
    else
      v36 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v36);
    v33 = v91;
    v34 = v90;
  }
  if (v33)
    v37 = v34;
  else
    v37 = &byte_209A88803;
  if (!strcmp(v37, "StateAllowCoart"))
  {
    TextStateRule::parseStateAllowCoart(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v38 = "None";
    else
      v38 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v38);
    v33 = v91;
    v34 = v90;
  }
  if (v33)
    v39 = v34;
  else
    v39 = &byte_209A88803;
  if (!strcmp(v39, "StateAllowSkip"))
  {
    TextStateRule::parseStateAllowSkip(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v40 = "None";
    else
      v40 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v40);
    v33 = v91;
    v34 = v90;
  }
  if (v33)
    v41 = v34;
  else
    v41 = &byte_209A88803;
  if (!strcmp(v41, "StateAllowLeftWordBoundary"))
  {
    TextStateRule::parseStateAllowLeftWordBoundary(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v42 = "None";
    else
      v42 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v42);
    v33 = v91;
    v34 = v90;
  }
  if (v33)
    v43 = v34;
  else
    v43 = &byte_209A88803;
  if (!strcmp(v43, "StateAllowRightWordBoundary"))
  {
    TextStateRule::parseStateAllowRightWordBoundary(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v44 = "None";
    else
      v44 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v44);
  }
  if ((_DWORD)FileVersion == 19)
  {
    if (HIDWORD(FileVersion) != 12)
      goto LABEL_141;
  }
  else if (FileVersion != 0xD00000014)
  {
    goto LABEL_141;
  }
  if (v91)
    v45 = v90;
  else
    v45 = &byte_209A88803;
  if (!strcmp(v45, "StateAllowPrecedingNonAcousticWords"))
  {
    TextStateRule::parseStateAllowPrecedingNonAcousticWords(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v46 = "None";
    else
      v46 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v46);
  }
LABEL_141:
  v47 = v91;
  v48 = v90;
  if (v91)
    v49 = v90;
  else
    v49 = &byte_209A88803;
  if (!strcmp(v49, "StateAllowPrefiltering"))
  {
    TextStateRule::parseStateAllowPrefiltering(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v50 = "None";
    else
      v50 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v50);
    v47 = v91;
    v48 = v90;
  }
  if (v47)
    v51 = v48;
  else
    v51 = &byte_209A88803;
  if (!strcmp(v51, "StateAllowEndOfUtt"))
  {
    TextStateRule::parseStateAllowEndOfUtt(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v52 = "None";
    else
      v52 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v52);
    v47 = v91;
    v48 = v90;
  }
  if (v47)
    v53 = v48;
  else
    v53 = &byte_209A88803;
  if (!strcmp(v53, "StateAliasState"))
  {
    TextStateRule::parseStateAliasState(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v54 = "None";
    else
      v54 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v54);
  }
  if ((_DWORD)FileVersion == 19)
  {
    if (HIDWORD(FileVersion) == 12)
      goto LABEL_185;
  }
  else if (FileVersion == 0xD00000014)
  {
    goto LABEL_185;
  }
  v55 = v91;
  v56 = v90;
  if (v91)
    v57 = v90;
  else
    v57 = &byte_209A88803;
  if (!strcmp(v57, "StatePrecedingNonAcousticWordState"))
  {
    TextStateRule::parseStatePrecedingNonAcousticWordState(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v58 = "None";
    else
      v58 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v58);
    v55 = v91;
    v56 = v90;
  }
  if (v55)
    v59 = v56;
  else
    v59 = &byte_209A88803;
  if (!strcmp(v59, "StatePrecedingNonAcousticWordRequired"))
  {
    TextStateRule::parseStatePrecedingNonAcousticWordRequired(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v60 = "None";
    else
      v60 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v60);
  }
LABEL_185:
  v61 = v91;
  v62 = v90;
  if (v91)
    v63 = v90;
  else
    v63 = &byte_209A88803;
  if (!strcmp(v63, "StateIncludedWord"))
  {
    TextStateRule::parseStateIncludedWord(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v64 = "None";
    else
      v64 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v64);
    v61 = v91;
    v62 = v90;
  }
  if (v61)
    v65 = v62;
  else
    v65 = &byte_209A88803;
  if (!strcmp(v65, "StateTransitionState"))
  {
    TextStateRule::parseStateTransitionState(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v66 = "None";
    else
      v66 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v66);
    v61 = v91;
    v62 = v90;
  }
  if (v61)
    v67 = v62;
  else
    v67 = &byte_209A88803;
  if (!strcmp(v67, "StateAllowedCollations"))
  {
    TextStateRule::parseStateAllowedCollations(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v68 = "None";
    else
      v68 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v68);
    v61 = v91;
    v62 = v90;
  }
  if (v61)
    v69 = v62;
  else
    v69 = &byte_209A88803;
  if (!strcmp(v69, "StateEnv"))
  {
    TextStateRule::parseStateEnv(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v70 = "None";
    else
      v70 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v70);
    v61 = v91;
    v62 = v90;
  }
  if (v61)
    v71 = v62;
  else
    v71 = &byte_209A88803;
  if (!strcmp(v71, "StateIncludedWordEnv"))
  {
    TextStateRule::parseStateIncludedWordEnv(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v72 = "None";
    else
      v72 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v72);
    v61 = v91;
    v62 = v90;
  }
  if (v61)
    v73 = v62;
  else
    v73 = &byte_209A88803;
  if (!strcmp(v73, "RuleDefinition"))
  {
    TextStateRule::parseRuleDefinition(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v74 = "None";
    else
      v74 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v74);
    v61 = v91;
    v62 = v90;
  }
  if (v61)
    v75 = v62;
  else
    v75 = &byte_209A88803;
  if (!strcmp(v75, "RuleName"))
  {
    TextStateRule::parseRuleName(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v76 = "None";
    else
      v76 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v76);
    v61 = v91;
    v62 = v90;
  }
  if (v61)
    v77 = v62;
  else
    v77 = &byte_209A88803;
  if (!strcmp(v77, "RuleAllowLM"))
  {
    TextStateRule::parseRuleAllowLM(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v78 = "None";
    else
      v78 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v78);
    v61 = v91;
    v62 = v90;
  }
  if (v61)
    v79 = v62;
  else
    v79 = &byte_209A88803;
  if (!strcmp(v79, "RuleAllowCoart"))
  {
    TextStateRule::parseRuleAllowCoart(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v80 = "None";
    else
      v80 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v80);
    v61 = v91;
    v62 = v90;
  }
  if (v61)
    v81 = v62;
  else
    v81 = &byte_209A88803;
  if (!strcmp(v81, "RuleAllowPrefiltering"))
  {
    TextStateRule::parseRuleAllowPrefiltering(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v82 = "None";
    else
      v82 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v82);
    v61 = v91;
    v62 = v90;
  }
  if (v61)
    v83 = v62;
  else
    v83 = &byte_209A88803;
  if (!strcmp(v83, "RuleDescription"))
  {
    TextStateRule::parseRuleDescription(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v84 = "None";
    else
      v84 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v84);
    v61 = v91;
    v62 = v90;
  }
  if (v61)
    v85 = v62;
  else
    v85 = &byte_209A88803;
  if (!strcmp(v85, "RuleEnv"))
  {
    TextStateRule::parseRuleEnv(this, a2);
    if ((DgnTextFileParser::atEof(a2) & 1) != 0)
      v86 = "None";
    else
      v86 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)&v90, v86);
    v61 = v91;
    v62 = v90;
  }
  if (v61)
    v87 = v62;
  else
    v87 = &byte_209A88803;
  if (strcmp(v87, "None"))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 628, (uint64_t)"voc/tsr", 23, (uint64_t)"%u", v88, v89, *((_DWORD *)a2 + 25));
  DgnString::~DgnString((DgnString *)&v90);
}

void sub_20993E288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void TextStateRule::parseVocMaxIdInfo(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString *v4;
  int v5;
  char *LineFieldString;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned int LineFieldInteger;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  const char *v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[8];
  unsigned int v43;
  _BYTE v44[8];
  unsigned int v45;
  _BYTE v46[16];
  const char *v47;
  int v48;

  v4 = (TextStateRule *)((char *)this + 40);
  v5 = 1;
  do
  {
    DgnString::DgnString((DgnString *)&v47);
    DgnString::DgnString((DgnString *)v46);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v46, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v47, v13);
      DgnString::operator=(v4, (DgnString *)&v47);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v7, v8, v9, v10, v11, v12);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v44, v15);
    v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v42, v16);
    v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v40, v17);
    v24 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v18, v19, v20, v21, v22, v23);
    if (*((_DWORD *)this + 12))
      v25 = *(const char **)v4;
    else
      v25 = &byte_209A88803;
    if (v48)
      v26 = v47;
    else
      v26 = &byte_209A88803;
    if (strcmp(v25, v26))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 680, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v31, v32, *((_DWORD *)a2 + 25));
    if (v45 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 682, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    if (v43 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 684, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 686, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    if ((LineFieldInteger & 0x80000000) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 688, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    if (v24 < 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 690, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    StateMgr::preAllocToEnsureStateId(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v27, v28, v29, v30, v31, v32);
    RuleMgr::preAllocToEnsureRuleId(*(RuleMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64), (unsigned __int16)v24);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      v33 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v38, v33);
      if (v39)
        v34 = v38;
      else
        v34 = &byte_209A88803;
      v35 = strcmp(v34, "VocMaxIdInfo") != 0;
      DgnString::~DgnString((DgnString *)&v38);
    }
    else
    {
      v35 = 1;
    }
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)v46);
    DgnString::~DgnString((DgnString *)&v47);
    --v5;
  }
  while (!v35);
  if (v5)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 708, (uint64_t)"voc/tsr", 21, (uint64_t)"%u", v36, v37, *((_DWORD *)a2 + 25));
}

void sub_20993E648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  va_list va3;

  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  DgnString::~DgnString((DgnString *)(v7 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateDefinition(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  signed int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  const char *v33;
  int v34;
  const char *v35;
  int v36;
  _BYTE v37[8];
  unsigned int v38;
  _BYTE v39[8];
  unsigned int v40;
  _BYTE v41[8];
  unsigned int v42;
  _BYTE v43[16];
  const char *v44;
  int v45;
  uint64_t v46;
  unsigned int v47;

  DgnString::DgnString((DgnString *)&v46);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v44);
    DgnString::DgnString((DgnString *)v43);
    DgnString::DgnString((DgnString *)v41);
    DgnString::DgnString((DgnString *)v39);
    DgnString::DgnString((DgnString *)v37);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v43, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v44, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v41, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v39, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v37, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v45)
      v24 = v44;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 723, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    if (v42 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 725, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v40 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 727, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v38 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 729, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if ((int)LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 734, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v22 <= 0 && v22 != -1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 739, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v22 == -1)
      v22 = 0;
    if (v47 < (int)LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v46, LineFieldInteger + 1);
    v30 = LineFieldInteger >> 5;
    v31 = *(_DWORD *)(v46 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 759, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v46 + 4 * v30) = v31 | (1 << LineFieldInteger);
    StateMgr::newState(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), v22, LineFieldInteger, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v32 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v35, v32);
    if (v36)
      v33 = v35;
    else
      v33 = &byte_209A88803;
    v34 = strcmp(v33, "StateDefinition");
    DgnString::~DgnString((DgnString *)&v35);
    DgnString::~DgnString((DgnString *)v37);
    DgnString::~DgnString((DgnString *)v39);
    DgnString::~DgnString((DgnString *)v41);
    DgnString::~DgnString((DgnString *)v43);
    DgnString::~DgnString((DgnString *)&v44);
    if (v34)
      goto LABEL_37;
  }
  DgnString::~DgnString((DgnString *)v37);
  DgnString::~DgnString((DgnString *)v39);
  DgnString::~DgnString((DgnString *)v41);
  DgnString::~DgnString((DgnString *)v43);
  DgnString::~DgnString((DgnString *)&v44);
LABEL_37:
  StateMgr::doneEnsureStateId(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this)
                                        + 56));
  BitArray::~BitArray((BitArray *)&v46);
}

void sub_20993EAA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  BitArray::~BitArray((BitArray *)(v1 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateName(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  signed int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  char *v33;
  const char *v34;
  int v35;
  const char *v36;
  int v37;
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  char *v42;
  int v43;
  _BYTE v44[16];
  const char *v45;
  int v46;
  uint64_t v47;
  unsigned int v48;

  DgnString::DgnString((DgnString *)&v47);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v45);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)&v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v44, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v45, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v42, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v40, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v38, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v46)
      v24 = v45;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 794, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 796, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 798, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v22)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 800, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 805, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v48 < LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v47, LineFieldInteger + 1);
    v30 = LineFieldInteger >> 5;
    v31 = *(_DWORD *)(v47 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 818, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v47 + 4 * v30) = v31 | (1 << LineFieldInteger);
    v32 = v43 ? v42 : &byte_209A88803;
    StateMgr::setName(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v32, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v33 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v36, v33);
    if (v37)
      v34 = v36;
    else
      v34 = &byte_209A88803;
    v35 = strcmp(v34, "StateName");
    DgnString::~DgnString((DgnString *)&v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)&v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)&v45);
    if (v35)
      goto LABEL_35;
  }
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)&v42);
  DgnString::~DgnString((DgnString *)v44);
  DgnString::~DgnString((DgnString *)&v45);
LABEL_35:
  BitArray::~BitArray((BitArray *)&v47);
}

void sub_20993EEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowLM(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  const char *v32;
  int v33;
  const char *v34;
  int v35;
  _BYTE v36[8];
  unsigned int v37;
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[16];
  const char *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;

  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v44)
      v24 = v43;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 848, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 850, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 852, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v37 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 854, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v22 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 857, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if ((int)LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 862, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v46 < (int)LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    v29 = LineFieldInteger >> 5;
    v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 875, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    StateMgr::setLMAllowed(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35)
      v32 = v34;
    else
      v32 = &byte_209A88803;
    v33 = strcmp(v32, "StateAllowLM");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_20993F308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateWeightsName(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  const char *v36;
  int v37;
  const char *v38;
  int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[8];
  unsigned int v43;
  _BYTE v44[8];
  unsigned int v45;
  _BYTE v46[16];
  const char *v47;
  int v48;
  uint64_t v49;
  unsigned int v50;

  DgnString::DgnString((DgnString *)&v49);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v47);
    DgnString::DgnString((DgnString *)v46);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v46, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v47, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v44, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v42, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v40, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v48)
      v24 = v47;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 905, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v25, v26, *((_DWORD *)a2 + 25));
    if (v43 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 907, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 909, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v22)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 911, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if ((int)LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 916, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v50 < (int)LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v49, LineFieldInteger + 1);
    v27 = LineFieldInteger >> 5;
    v28 = *(_DWORD *)(v49 + 4 * v27);
    if ((v28 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 929, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v25, v26, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v49 + 4 * v27) = v28 | (1 << LineFieldInteger);
    if (v45 >= 2)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 72);
      v34 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v29 + 664))(v29, v44);
      if ((_DWORD)v34 == 0xFFFF)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 944, (uint64_t)"voc/tsr", 27, (uint64_t)"%u %.500s %u %u", v32, v33, *((_DWORD *)a2 + 25));
      StateMgr::setWeights(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v34, 1, v30, v31, v32, v33);
    }
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v35 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v38, v35);
    if (v39)
      v36 = v38;
    else
      v36 = &byte_209A88803;
    v37 = strcmp(v36, "StateWeightsName");
    DgnString::~DgnString((DgnString *)&v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)v46);
    DgnString::~DgnString((DgnString *)&v47);
    if (v37)
      goto LABEL_36;
  }
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)v44);
  DgnString::~DgnString((DgnString *)v46);
  DgnString::~DgnString((DgnString *)&v47);
LABEL_36:
  BitArray::~BitArray((BitArray *)&v49);
}

void sub_20993F78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateWordPenalty(TextStateRule *this, DgnTextFileParser *a2, const char *a3)
{
  char *LineFieldString;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t LineFieldInteger;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  const char *v34;
  int v35;
  const char *v36;
  int v37;
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[8];
  unsigned int v43;
  _BYTE v44[16];
  const char *v45;
  int v46;
  uint64_t v47;
  unsigned int v48;

  DgnString::DgnString((DgnString *)&v47);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v45);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v44, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v45, v13);
      if (!strcmp(a3, "VocMaxIdInfo"))
        DgnString::operator=((TextStateRule *)((char *)this + 40), (DgnString *)&v45);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v7, v8, v9, v10, v11, v12);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v42, v15);
    v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v40, v16);
    v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v38, v17);
    v24 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v18, v19, v20, v21, v22, v23);
    if (*((_DWORD *)this + 12))
      v25 = (const char *)*((_QWORD *)this + 5);
    else
      v25 = &byte_209A88803;
    if (v46)
      v26 = v45;
    else
      v26 = &byte_209A88803;
    if (strcmp(v25, v26))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 970, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v29, v30, *((_DWORD *)a2 + 25));
    if (v43 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 972, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v29, v30, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 974, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v29, v30, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 976, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v29, v30, *((_DWORD *)a2 + 25));
    if ((int)LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 980, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v29, v30, *((_DWORD *)a2 + 25));
    if (v48 < (int)LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v47, LineFieldInteger + 1);
    v31 = LineFieldInteger >> 5;
    v32 = *(_DWORD *)(v47 + 4 * v31);
    if ((v32 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 993, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v29, v30, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v47 + 4 * v31) = v32 | (1 << LineFieldInteger);
    if ((v24 - 1001) <= 0xFFFFF82E)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1003, (uint64_t)"voc/tsr", 26, (uint64_t)"%u %500s %d", v29, v30, *((_DWORD *)a2 + 25));
    StateMgr::setWordPenalty(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v24, 1, v27, v28, v29, v30);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v33 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v36, v33);
    if (v37)
      v34 = v36;
    else
      v34 = &byte_209A88803;
    v35 = strcmp(v34, a3);
    DgnString::~DgnString((DgnString *)&v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)&v45);
    if (v35)
      goto LABEL_35;
  }
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)v44);
  DgnString::~DgnString((DgnString *)&v45);
LABEL_35:
  BitArray::~BitArray((BitArray *)&v47);
}

void sub_20993FBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateMinStartTime(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  signed int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  const char *v32;
  _BOOL4 v33;
  const char *v34;
  int v35;
  unsigned int v36[2];
  unsigned int v37[2];
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[8];
  unsigned int v43;
  _BYTE v44[16];
  const char *v45;
  int v46;
  uint64_t v47;
  unsigned int v48;

  DgnString::DgnString((DgnString *)&v47);
  do
  {
    DgnString::DgnString((DgnString *)&v45);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v44, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v45, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v42, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v40, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v38, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v46)
      v24 = v45;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1027, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v25, v26, *((_DWORD *)a2 + 25));
    if (v43 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1029, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1031, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1033, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1037, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v48 < LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v47, LineFieldInteger + 1);
    v27 = LineFieldInteger >> 5;
    v28 = *(_DWORD *)(v47 + 4 * v27);
    if ((v28 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1050, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v25, v26, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v47 + 4 * v27) = v28 | (1 << LineFieldInteger);
    if (v22 - 268435201 <= 0xF00000FD)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1060, (uint64_t)"voc/tsr", 28, (uint64_t)"%u %500s %d %u", v25, v26, *((_DWORD *)a2 + 25));
    *(_QWORD *)v36 = 0;
    *(_QWORD *)v37 = 0;
    StateMgr::getTimeConstraint(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, &v37[1], v37, &v36[1], v36, v25, v26);
    v37[1] = v22;
    StateMgr::setTimeConstraint(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22, v37[0], v36[1], v36[0], v29, v30);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v34, v31);
      if (v35)
        v32 = v34;
      else
        v32 = &byte_209A88803;
      v33 = strcmp(v32, "StateMinStartTime") != 0;
      DgnString::~DgnString((DgnString *)&v34);
    }
    else
    {
      v33 = 1;
    }
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)&v45);
  }
  while (!v33);
  BitArray::~BitArray((BitArray *)&v47);
}

void sub_209940074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  va_list va2;
  uint64_t v20;
  va_list va3;

  va_start(va3, a10);
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v18 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  DgnString::~DgnString((DgnString *)(v10 - 120));
  BitArray::~BitArray((BitArray *)(v10 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateMaxStartTime(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  signed int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  const char *v32;
  _BOOL4 v33;
  const char *v34;
  int v35;
  unsigned int v36[2];
  unsigned int v37[2];
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[8];
  unsigned int v43;
  _BYTE v44[16];
  const char *v45;
  int v46;
  uint64_t v47;
  unsigned int v48;

  DgnString::DgnString((DgnString *)&v47);
  do
  {
    DgnString::DgnString((DgnString *)&v45);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v44, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v45, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v42, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v40, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v38, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v46)
      v24 = v45;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1091, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v25, v26, *((_DWORD *)a2 + 25));
    if (v43 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1093, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1095, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1097, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1101, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v48 < LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v47, LineFieldInteger + 1);
    v27 = LineFieldInteger >> 5;
    v28 = *(_DWORD *)(v47 + 4 * v27);
    if ((v28 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1114, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v25, v26, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v47 + 4 * v27) = v28 | (1 << LineFieldInteger);
    if (v22 - 268435201 <= 0xF00000FD)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1124, (uint64_t)"voc/tsr", 28, (uint64_t)"%u %500s %d %u", v25, v26, *((_DWORD *)a2 + 25));
    *(_QWORD *)v36 = 0;
    *(_QWORD *)v37 = 0;
    StateMgr::getTimeConstraint(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, &v37[1], v37, &v36[1], v36, v25, v26);
    v37[0] = v22;
    StateMgr::setTimeConstraint(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v37[1], v22, v36[1], v36[0], v29, v30);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v34, v31);
      if (v35)
        v32 = v34;
      else
        v32 = &byte_209A88803;
      v33 = strcmp(v32, "StateMaxStartTime") != 0;
      DgnString::~DgnString((DgnString *)&v34);
    }
    else
    {
      v33 = 1;
    }
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)&v45);
  }
  while (!v33);
  BitArray::~BitArray((BitArray *)&v47);
}

void sub_2099404F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  va_list va2;
  uint64_t v20;
  va_list va3;

  va_start(va3, a10);
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v18 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  DgnString::~DgnString((DgnString *)(v10 - 120));
  BitArray::~BitArray((BitArray *)(v10 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateMinEndTime(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  signed int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  const char *v32;
  _BOOL4 v33;
  const char *v34;
  int v35;
  unsigned int v36[2];
  unsigned int v37[2];
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[8];
  unsigned int v43;
  _BYTE v44[16];
  const char *v45;
  int v46;
  uint64_t v47;
  unsigned int v48;

  DgnString::DgnString((DgnString *)&v47);
  do
  {
    DgnString::DgnString((DgnString *)&v45);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v44, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v45, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v42, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v40, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v38, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v46)
      v24 = v45;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1155, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v25, v26, *((_DWORD *)a2 + 25));
    if (v43 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1157, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1159, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1161, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1165, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v48 < LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v47, LineFieldInteger + 1);
    v27 = LineFieldInteger >> 5;
    v28 = *(_DWORD *)(v47 + 4 * v27);
    if ((v28 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1178, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v25, v26, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v47 + 4 * v27) = v28 | (1 << LineFieldInteger);
    if ((v22 - 268435201) <= 0xF00000FD)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1188, (uint64_t)"voc/tsr", 28, (uint64_t)"%u %500s %d %u", v25, v26, *((_DWORD *)a2 + 25));
    *(_QWORD *)v36 = 0;
    *(_QWORD *)v37 = 0;
    StateMgr::getTimeConstraint(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, &v37[1], v37, &v36[1], v36, v25, v26);
    v36[1] = v22;
    StateMgr::setTimeConstraint(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v37[1], v37[0], v22, v36[0], v29, v30);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v34, v31);
      if (v35)
        v32 = v34;
      else
        v32 = &byte_209A88803;
      v33 = strcmp(v32, "StateMinEndTime") != 0;
      DgnString::~DgnString((DgnString *)&v34);
    }
    else
    {
      v33 = 1;
    }
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)&v45);
  }
  while (!v33);
  BitArray::~BitArray((BitArray *)&v47);
}

void sub_20994096C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  va_list va2;
  uint64_t v20;
  va_list va3;

  va_start(va3, a10);
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v18 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  DgnString::~DgnString((DgnString *)(v10 - 120));
  BitArray::~BitArray((BitArray *)(v10 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateMaxEndTime(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  signed int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  const char *v32;
  _BOOL4 v33;
  const char *v34;
  int v35;
  unsigned int v36[2];
  unsigned int v37[2];
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[8];
  unsigned int v43;
  _BYTE v44[16];
  const char *v45;
  int v46;
  uint64_t v47;
  unsigned int v48;

  DgnString::DgnString((DgnString *)&v47);
  do
  {
    DgnString::DgnString((DgnString *)&v45);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v44, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v45, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v42, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v40, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v38, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v46)
      v24 = v45;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1219, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v25, v26, *((_DWORD *)a2 + 25));
    if (v43 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1221, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1223, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1225, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1229, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v48 < LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v47, LineFieldInteger + 1);
    v27 = LineFieldInteger >> 5;
    v28 = *(_DWORD *)(v47 + 4 * v27);
    if ((v28 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1242, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v25, v26, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v47 + 4 * v27) = v28 | (1 << LineFieldInteger);
    if ((v22 - 268435201) <= 0xF00000FD)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1252, (uint64_t)"voc/tsr", 28, (uint64_t)"%u %500s %d %u", v25, v26, *((_DWORD *)a2 + 25));
    *(_QWORD *)v36 = 0;
    *(_QWORD *)v37 = 0;
    StateMgr::getTimeConstraint(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, &v37[1], v37, &v36[1], v36, v25, v26);
    v36[0] = v22;
    StateMgr::setTimeConstraint(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v37[1], v37[0], v36[1], v22, v29, v30);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v34, v31);
      if (v35)
        v32 = v34;
      else
        v32 = &byte_209A88803;
      v33 = strcmp(v32, "StateMaxEndTime") != 0;
      DgnString::~DgnString((DgnString *)&v34);
    }
    else
    {
      v33 = 1;
    }
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)&v45);
  }
  while (!v33);
  BitArray::~BitArray((BitArray *)&v47);
}

void sub_209940DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  va_list va2;
  uint64_t v20;
  va_list va3;

  va_start(va3, a10);
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v18 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  DgnString::~DgnString((DgnString *)(v10 - 120));
  BitArray::~BitArray((BitArray *)(v10 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateCollapsible(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  const char *v33;
  int v34;
  const char *v35;
  int v36;
  _BYTE v37[8];
  unsigned int v38;
  _BYTE v39[8];
  unsigned int v40;
  _BYTE v41[8];
  unsigned int v42;
  _BYTE v43[16];
  const char *v44;
  int v45;
  uint64_t v46;
  unsigned int v47;

  DgnString::DgnString((DgnString *)&v46);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v44);
    DgnString::DgnString((DgnString *)v43);
    DgnString::DgnString((DgnString *)v41);
    DgnString::DgnString((DgnString *)v39);
    DgnString::DgnString((DgnString *)v37);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v43, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v44, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v41, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v39, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v37, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v45)
      v24 = v44;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1283, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    if (v42 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1285, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v40 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1287, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v38 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1289, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v22 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1292, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if ((int)LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1297, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v47 < (int)LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v46, LineFieldInteger + 1);
    v30 = LineFieldInteger >> 5;
    v31 = *(_DWORD *)(v46 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1310, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v46 + 4 * v30) = v31 | (1 << LineFieldInteger);
    StateMgr::setCollapsible(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v32 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v35, v32);
    if (v36)
      v33 = v35;
    else
      v33 = &byte_209A88803;
    v34 = strcmp(v33, "StateCollapsible");
    DgnString::~DgnString((DgnString *)&v35);
    DgnString::~DgnString((DgnString *)v37);
    DgnString::~DgnString((DgnString *)v39);
    DgnString::~DgnString((DgnString *)v41);
    DgnString::~DgnString((DgnString *)v43);
    DgnString::~DgnString((DgnString *)&v44);
    if (v34)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v37);
  DgnString::~DgnString((DgnString *)v39);
  DgnString::~DgnString((DgnString *)v41);
  DgnString::~DgnString((DgnString *)v43);
  DgnString::~DgnString((DgnString *)&v44);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v46);
}

void sub_209941230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowCoart(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  const char *v32;
  int v33;
  const char *v34;
  int v35;
  _BYTE v36[8];
  unsigned int v37;
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[16];
  const char *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;

  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v44)
      v24 = v43;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1340, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1342, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1344, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v37 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1346, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v22 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1349, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if ((int)LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1354, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v46 < (int)LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    v29 = LineFieldInteger >> 5;
    v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1367, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    StateMgr::setCoartAllowed(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35)
      v32 = v34;
    else
      v32 = &byte_209A88803;
    v33 = strcmp(v32, "StateAllowCoart");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_209941678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowSkip(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  signed int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  const char *v32;
  int v33;
  const char *v34;
  int v35;
  _BYTE v36[8];
  unsigned int v37;
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[16];
  const char *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;

  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v44)
      v24 = v43;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1398, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1400, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1402, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v37 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1404, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v22 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1407, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1412, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v46 < LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    v29 = LineFieldInteger >> 5;
    v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1425, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    StateMgr::setSkipAllowed(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35)
      v32 = v34;
    else
      v32 = &byte_209A88803;
    v33 = strcmp(v32, "StateAllowSkip");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_209941AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowLeftWordBoundary(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  signed int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  const char *v32;
  int v33;
  const char *v34;
  int v35;
  _BYTE v36[8];
  unsigned int v37;
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[16];
  const char *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;

  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v44)
      v24 = v43;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1457, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1459, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1461, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v37 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1463, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v22 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1466, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1471, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v46 < LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    v29 = LineFieldInteger >> 5;
    v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1484, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    StateMgr::setLeftWBAllowed(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35)
      v32 = v34;
    else
      v32 = &byte_209A88803;
    v33 = strcmp(v32, "StateAllowLeftWordBoundary");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_209941F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowRightWordBoundary(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  signed int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  const char *v32;
  int v33;
  const char *v34;
  int v35;
  _BYTE v36[8];
  unsigned int v37;
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[16];
  const char *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;

  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v44)
      v24 = v43;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1516, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1518, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1520, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v37 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1522, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v22 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1525, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1530, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v46 < LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    v29 = LineFieldInteger >> 5;
    v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1543, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    StateMgr::setRightWBAllowed(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35)
      v32 = v34;
    else
      v32 = &byte_209A88803;
    v33 = strcmp(v32, "StateAllowRightWordBoundary");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_209942350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowPrecedingNonAcousticWords(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  char *v30;
  const char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  int v40;
  _BYTE v41[8];
  unsigned int v42;
  _BYTE v43[8];
  unsigned int v44;
  _BYTE v45[8];
  unsigned int v46;
  _BYTE v47[16];
  const char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;

  DgnString::DgnString((DgnString *)&v52);
  v50 = 0;
  v51 = 0;
  while (1)
  {
    DgnString::DgnString((DgnString *)&v48);
    DgnString::DgnString((DgnString *)v47);
    DgnString::DgnString((DgnString *)v45);
    DgnString::DgnString((DgnString *)v43);
    DgnString::DgnString((DgnString *)v41);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v47, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v48, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v45, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v43, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v41, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v49)
      v24 = v48;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1577, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v25, v26, *((_DWORD *)a2 + 25));
    if (v46 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1579, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v44 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1581, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v42 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1583, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v22 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1586, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1591, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    if (v53 < LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v52, LineFieldInteger + 1);
    v27 = LineFieldInteger >> 5;
    v28 = *(_DWORD *)(v52 + 4 * v27);
    if ((v28 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1605, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v25, v26, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v52 + 4 * v27) = v28 | (1 << LineFieldInteger);
    v29 = v51;
    while (v29 < LineFieldInteger + 1)
    {
      if (v29 == HIDWORD(v51))
      {
        DgnPrimArray<char>::reallocElts((uint64_t)&v50, 1, 1);
        v29 = v51;
      }
      *(_BYTE *)(v50 + v29) = 0;
      v29 = v51 + 1;
      LODWORD(v51) = v51 + 1;
    }
    *(_BYTE *)(v50 + LineFieldInteger) = v22;
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v30 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v39, v30);
    if (v40)
      v31 = v39;
    else
      v31 = &byte_209A88803;
    v32 = strcmp(v31, "StateAllowPrecedingNonAcousticWords");
    DgnString::~DgnString((DgnString *)&v39);
    DgnString::~DgnString((DgnString *)v41);
    DgnString::~DgnString((DgnString *)v43);
    DgnString::~DgnString((DgnString *)v45);
    DgnString::~DgnString((DgnString *)v47);
    DgnString::~DgnString((DgnString *)&v48);
    if (v32)
      goto LABEL_39;
  }
  DgnString::~DgnString((DgnString *)v41);
  DgnString::~DgnString((DgnString *)v43);
  DgnString::~DgnString((DgnString *)v45);
  DgnString::~DgnString((DgnString *)v47);
  DgnString::~DgnString((DgnString *)&v48);
LABEL_39:
  if ((_DWORD)v51)
    StateMgr::upgradePrecedingNonAcousticWordsAllowed(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), (unsigned int *)&v50, v33, v34, v35, v36, v37, v38);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v50);
  BitArray::~BitArray((BitArray *)&v52);
}

void sub_2099427F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 120);
  BitArray::~BitArray((BitArray *)(v1 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowPrefiltering(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  const char *v32;
  int v33;
  const char *v34;
  int v35;
  _BYTE v36[8];
  unsigned int v37;
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[16];
  const char *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;

  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v44)
      v24 = v43;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1650, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1652, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1654, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v37 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1656, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v22 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1659, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if ((int)LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1664, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v46 < (int)LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    v29 = LineFieldInteger >> 5;
    v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1677, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    StateMgr::setPrefilteringAllowed(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35)
      v32 = v34;
    else
      v32 = &byte_209A88803;
    v33 = strcmp(v32, "StateAllowPrefiltering");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_209942C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowEndOfUtt(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  signed int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  const char *v32;
  int v33;
  const char *v34;
  int v35;
  _BYTE v36[8];
  unsigned int v37;
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[16];
  const char *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;

  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v44)
      v24 = v43;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1708, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1710, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1712, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v37 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1714, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v22 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1717, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1722, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v46 < LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    v29 = LineFieldInteger >> 5;
    v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1735, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    StateMgr::setEndOfUtteranceAllowed(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35)
      v32 = v34;
    else
      v32 = &byte_209A88803;
    v33 = strcmp(v32, "StateAllowEndOfUtt");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_209943090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAliasState(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  signed int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  signed int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  const char *v32;
  int v33;
  const char *v34;
  int v35;
  _BYTE v36[8];
  unsigned int v37;
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[16];
  const char *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;

  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v44)
      v24 = v43;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1767, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1769, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1771, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v37 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1773, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1778, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v22 <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1782, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v46 < LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    v29 = LineFieldInteger >> 5;
    v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1796, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    StateMgr::setWordAliasState(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35)
      v32 = v34;
    else
      v32 = &byte_209A88803;
    v33 = strcmp(v32, "StateAliasState");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_2099434D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStatePrecedingNonAcousticWordState(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  const char *v32;
  int v33;
  const char *v34;
  int v35;
  _BYTE v36[8];
  unsigned int v37;
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[16];
  const char *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;

  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v44)
      v24 = v43;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1829, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1831, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1833, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v37 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1835, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if ((int)LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1840, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if ((int)v22 <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1844, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v46 < (int)LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    v29 = LineFieldInteger >> 5;
    v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1860, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    StateMgr::setPrecedingNonAcousticWordState(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35)
      v32 = v34;
    else
      v32 = &byte_209A88803;
    v33 = strcmp(v32, "StatePrecedingNonAcousticWordState");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_209943918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStatePrecedingNonAcousticWordRequired(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  const char *v32;
  int v33;
  const char *v34;
  int v35;
  _BYTE v36[8];
  unsigned int v37;
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  _BYTE v42[16];
  const char *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;

  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v44)
      v24 = v43;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1895, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1897, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1899, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v37 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1901, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v22 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1904, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if ((int)LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1909, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v46 < (int)LineFieldInteger + 1)
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    v29 = LineFieldInteger >> 5;
    v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1923, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    StateMgr::setPrecedingNonAcousticWordRequired(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35)
      v32 = v34;
    else
      v32 = &byte_209A88803;
    v33 = strcmp(v32, "StatePrecedingNonAcousticWordRequired");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_209943D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

uint64_t TextStateRule::parseStateIncludedWord(TextStateRule *this, DgnTextFileParser *a2)
{
  unsigned int v4;
  uint64_t v5;
  char *LineFieldString;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  signed int LineFieldInteger;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  unsigned int v31;
  unsigned __int16 v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int WordId;
  unsigned __int16 v41;
  uint64_t v42;
  int v43;
  WordList *v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  const char *v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  const char *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[8];
  unsigned int v65;
  _BYTE v66[8];
  unsigned int v67;
  const char *v68;
  int v69;
  _BYTE v70[16];
  const char *v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;

  v75 = 0;
  v76 = 0;
  DgnString::DgnString((DgnString *)&v73);
  v4 = 0;
  LOWORD(v5) = 127;
  do
  {
    DgnString::DgnString((DgnString *)&v71);
    DgnString::DgnString((DgnString *)v70);
    DgnString::DgnString((DgnString *)&v68);
    DgnString::DgnString((DgnString *)v66);
    DgnString::DgnString((DgnString *)v64);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v70, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v71, v13);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v7, v8, v9, v10, v11, v12);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v68, v15);
    v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v66, v16);
    v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v64, v17);
    v24 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v18, v19, v20, v21, v22, v23);
    if (*((_DWORD *)this + 12))
      v25 = (const char *)*((_QWORD *)this + 5);
    else
      v25 = &byte_209A88803;
    if (v72)
      v26 = v71;
    else
      v26 = &byte_209A88803;
    if (strcmp(v25, v26))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1959, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    if (v67 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1961, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v65 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1963, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v24)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1965, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1970, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    v29 = v4 == 0;
    v30 = (unsigned __int16)v5 == 127;
    if (v29 && v30)
      v31 = LineFieldInteger;
    else
      v31 = v4;
    if (v29 && v30)
      v32 = *(_WORD *)this;
    else
      v32 = v5;
    if (v69)
      v33 = v68;
    else
      v33 = &byte_209A88803;
    WordId = GetWordId(*(unsigned __int16 *)this, v33, "StateIncludedWord", ".tsr", 0, 0, v27, v28);
    if (LineFieldInteger != v31 || (v41 = v32, *(unsigned __int16 *)this != v32))
    {
      if (v74 < v31 + 1)
        BitArray::setSize((BitArray *)&v73, v31 + 1);
      v42 = v31 >> 5;
      v43 = *(_DWORD *)(v73 + 4 * v42);
      if ((v43 & (1 << v31)) != 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1994, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v38, v39, *((_DWORD *)a2 + 25));
      else
        *(_DWORD *)(v73 + 4 * v42) = v43 | (1 << v31);
      StateMgr::addWordIdArray(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v32) + 56), v31, (uint64_t)&v75, 1, v36, v37, v38, v39);
      LODWORD(v76) = 0;
      v41 = *(_WORD *)this;
    }
    v62 = 0;
    v63 = 0;
    v44 = *(WordList **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v41) + 48);
    WordList::verifyVisible(v44, WordId, v34, v35, v36, v37, v38, v39);
    WordList::lookupAll((uint64_t *)v44, WordId, (uint64_t)&v62);
    v45 = v63;
    if ((v76 + v63) > HIDWORD(v76))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v75, (v76 + v63 - HIDWORD(v76)), 1);
      v45 = v63;
    }
    if (v45)
    {
      v46 = 0;
      v47 = v62;
      v48 = v75;
      do
      {
        *(_DWORD *)(v48 + 4 * (v46 + v76)) = *(_DWORD *)(v47 + 4 * v46);
        ++v46;
        v49 = v63;
      }
      while (v46 < v63);
    }
    else
    {
      v49 = 0;
    }
    LODWORD(v76) = v76 + v49;
    if (DgnTextFileParser::parseNextLine(a2))
    {
      v50 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v60, v50);
      if (v61)
        v51 = v60;
      else
        v51 = &byte_209A88803;
      v52 = strcmp(v51, "StateIncludedWord") != 0;
      DgnString::~DgnString((DgnString *)&v60);
    }
    else
    {
      v52 = 1;
    }
    v5 = *(unsigned __int16 *)this;
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v62);
    DgnString::~DgnString((DgnString *)v64);
    DgnString::~DgnString((DgnString *)v66);
    DgnString::~DgnString((DgnString *)&v68);
    DgnString::~DgnString((DgnString *)v70);
    DgnString::~DgnString((DgnString *)&v71);
    v4 = LineFieldInteger;
  }
  while (!v52);
  if (v74 < LineFieldInteger + 1)
    BitArray::setSize((BitArray *)&v73, LineFieldInteger + 1);
  v57 = LineFieldInteger >> 5;
  v58 = *(_DWORD *)(v73 + 4 * v57);
  if ((v58 & (1 << LineFieldInteger)) != 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2035, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v55, v56, *((_DWORD *)a2 + 25));
  else
    *(_DWORD *)(v73 + 4 * v57) = v58 | (1 << LineFieldInteger);
  StateMgr::addWordIdArray(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v5) + 56), LineFieldInteger, (uint64_t)&v75, 1, v53, v54, v55, v56);
  BitArray::~BitArray((BitArray *)&v73);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v75);
}

void sub_209944344(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 104);
  _Unwind_Resume(a1);
}

uint64_t TextStateRule::parseStateTransitionState(TextStateRule *this, DgnTextFileParser *a2)
{
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *LineFieldString;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  signed int LineFieldInteger;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  const char *v37;
  signed int v38;
  StateMgr *v39;
  _BOOL4 RightWBAllowed;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  StateMgr *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  const char *v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  StateMgr *v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL4 v75;
  unint64_t v76;
  int v78;
  const char *v79;
  int v80;
  _BYTE v81[8];
  unsigned int v82;
  _BYTE v83[8];
  unsigned int v84;
  char *v85;
  int v86;
  _BYTE v87[16];
  const char *v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;

  v92 = 0;
  v93 = 0;
  DgnString::DgnString((DgnString *)&v90);
  v4 = 0;
  LODWORD(v5) = 127;
  v6 = "StateTransitionState";
  do
  {
    DgnString::DgnString((DgnString *)&v88);
    DgnString::DgnString((DgnString *)v87);
    DgnString::DgnString((DgnString *)&v85);
    DgnString::DgnString((DgnString *)v83);
    DgnString::DgnString((DgnString *)v81);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v87, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v88, v14);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v8, v9, v10, v11, v12, v13);
    v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v85, v16);
    v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v83, v17);
    v18 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v81, v18);
    v25 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v19, v20, v21, v22, v23, v24);
    if (*((_DWORD *)this + 12))
      v26 = (const char *)*((_QWORD *)this + 5);
    else
      v26 = &byte_209A88803;
    if (v89)
      v27 = v88;
    else
      v27 = &byte_209A88803;
    if (strcmp(v26, v27))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2062, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v31, v32, *((_DWORD *)a2 + 25));
    if (v84 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2064, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    if (v82 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2066, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2071, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    if (v25 <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2075, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    if (!v4 && (_DWORD)v5 == 127)
    {
      LODWORD(v5) = *(unsigned __int16 *)this;
      v4 = LineFieldInteger;
    }
    if (!*((_BYTE *)this + 32))
    {
      v33 = v86 ? v85 : &byte_209A88803;
      if (*v33)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2088, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    }
    if (v4 == LineFieldInteger && (_DWORD)v5 == *(unsigned __int16 *)this)
    {
      v34 = v93;
    }
    else
    {
      if (v91 < v4 + 1)
        BitArray::setSize((BitArray *)&v90, v4 + 1);
      v35 = v4 >> 5;
      v36 = *(_DWORD *)(v90 + 4 * v35);
      if ((v36 & (1 << v4)) != 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2105, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v31, v32, *((_DWORD *)a2 + 25));
      else
        *(_DWORD *)(v90 + 4 * v35) = v36 | (1 << v4);
      v78 = v25;
      v37 = v6;
      v38 = LineFieldInteger;
      v39 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v5) + 56);
      RightWBAllowed = StateMgr::getRightWBAllowed(v39, v4, 1, v28, v29, v30, v31, v32);
      if (StateMgr::getSkipAllowed(v39, v4, 1, v41, v42, v43, v44, v45)
        && RightWBAllowed != StateMgr::getLeftWBAllowed(v39, v4, 1, v46, v47, v48, v49, v50))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2122, (uint64_t)"voc/tsr", 9, (uint64_t)"%u %u", v49, v50, *((_DWORD *)a2 + 25));
      }
      if ((_DWORD)v93)
      {
        v51 = 0;
        do
        {
          v52 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56);
          if (RightWBAllowed != StateMgr::getLeftWBAllowed(v52, *(_DWORD *)(v92 + 4 * v51), 1, v46, v47, v48, v49, v50))
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2132, (uint64_t)"voc/tsr", 6, (uint64_t)"%u %u %u", v56, v57, *((_DWORD *)a2 + 25));
          if (StateMgr::getSkipAllowed(v52, *(_DWORD *)(v92 + 4 * v51), 1, v53, v54, v55, v56, v57)
            && RightWBAllowed != StateMgr::getRightWBAllowed(v52, *(_DWORD *)(v92 + 4 * v51), 1, v46, v47, v48, v49, v50))
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2139, (uint64_t)"voc/tsr", 9, (uint64_t)"%u %u", v49, v50, *((_DWORD *)a2 + 25));
          }
          ++v51;
        }
        while (v51 < v93);
      }
      StateMgr::addStateTransition((unint64_t)v39, v4, &v92, 1, 0, 0, v49, v50);
      v34 = 0;
      LODWORD(v93) = 0;
      LineFieldInteger = v38;
      v6 = v37;
      v25 = v78;
    }
    if (v34 == HIDWORD(v93))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v92, 1, 1);
      v34 = v93;
    }
    *(_DWORD *)(v92 + 4 * v34) = v25;
    LODWORD(v93) = v93 + 1;
    if (DgnTextFileParser::parseNextLine(a2))
    {
      v58 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v79, v58);
      if (v80)
        v59 = v79;
      else
        v59 = &byte_209A88803;
      v60 = strcmp(v59, v6) != 0;
      DgnString::~DgnString((DgnString *)&v79);
    }
    else
    {
      v60 = 1;
    }
    v5 = *(unsigned __int16 *)this;
    DgnString::~DgnString((DgnString *)v81);
    DgnString::~DgnString((DgnString *)v83);
    DgnString::~DgnString((DgnString *)&v85);
    DgnString::~DgnString((DgnString *)v87);
    DgnString::~DgnString((DgnString *)&v88);
    v4 = LineFieldInteger;
  }
  while (!v60);
  if (v91 < LineFieldInteger + 1)
    BitArray::setSize((BitArray *)&v90, LineFieldInteger + 1);
  v66 = LineFieldInteger >> 5;
  v67 = *(_DWORD *)(v90 + 4 * v66);
  if ((v67 & (1 << LineFieldInteger)) != 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2171, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v64, v65, *((_DWORD *)a2 + 25));
  else
    *(_DWORD *)(v90 + 4 * v66) = v67 | (1 << LineFieldInteger);
  v68 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v5) + 56);
  v69 = StateMgr::getRightWBAllowed(v68, LineFieldInteger, 1, v61, v62, v63, v64, v65);
  if ((_DWORD)v93)
  {
    v75 = v69;
    v76 = 0;
    do
    {
      if (v75 != StateMgr::getLeftWBAllowed(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), *(_DWORD *)(v92 + 4 * v76), 1, v70, v71, v72, v73, v74))errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2188, (uint64_t)"voc/tsr", 6, (uint64_t)"%u %u %u", v73, v74, *((_DWORD *)a2 + 25));
      ++v76;
    }
    while (v76 < v93);
  }
  StateMgr::addStateTransition((unint64_t)v68, LineFieldInteger, &v92, 1, 0, 0, v73, v74);
  BitArray::~BitArray((BitArray *)&v90);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v92);
}

void sub_209944B44(_Unwind_Exception *a1)
{
  uint64_t v1;

  BitArray::~BitArray((BitArray *)(v1 - 120));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 104);
  _Unwind_Resume(a1);
}

uint64_t TextStateRule::parseStateAllowedCollations(TextStateRule *this, DgnTextFileParser *a2)
{
  unsigned int v4;
  uint64_t v5;
  char *LineFieldString;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  signed int LineFieldInteger;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  char *v40;
  const char *v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  const char *v50;
  int v51;
  _BYTE v52[16];
  _BYTE v53[8];
  unsigned int v54;
  const char *v55;
  int v56;
  _BYTE v57[16];
  const char *v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;

  v62 = 0;
  v63 = 0;
  DgnString::DgnString((DgnString *)&v60);
  v4 = 0;
  LODWORD(v5) = 127;
  do
  {
    DgnString::DgnString((DgnString *)&v58);
    DgnString::DgnString((DgnString *)v57);
    DgnString::DgnString((DgnString *)&v55);
    DgnString::DgnString((DgnString *)v53);
    DgnString::DgnString((DgnString *)v52);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v57, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v58, v13);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v7, v8, v9, v10, v11, v12);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v55, v15);
    v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v53, v16);
    v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v52, v17);
    v24 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v18, v19, v20, v21, v22, v23);
    if (*((_DWORD *)this + 12))
      v25 = (const char *)*((_QWORD *)this + 5);
    else
      v25 = &byte_209A88803;
    if (v59)
      v26 = v58;
    else
      v26 = &byte_209A88803;
    if (strcmp(v25, v26))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2210, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    if (v54 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2212, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (v24)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2214, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2219, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if (!v4 && (_DWORD)v5 == 127)
    {
      LODWORD(v5) = *(unsigned __int16 *)this;
      v4 = LineFieldInteger;
    }
    if (v56)
      v29 = v55;
    else
      v29 = &byte_209A88803;
    if (!strcmp(v29, "_IDENTITY"))
      v36 = -2;
    else
      v36 = CollMgr::lookupCollation(*(CollMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 16), v29, v30, v31, v32, v33, v34, v35);
    if (v4 == LineFieldInteger && (_DWORD)v5 == *(unsigned __int16 *)this)
    {
      v37 = v63;
    }
    else
    {
      if (v61 < v4 + 1)
        BitArray::setSize((BitArray *)&v60, v4 + 1);
      v38 = v4 >> 5;
      v39 = *(_DWORD *)(v60 + 4 * v38);
      if ((v39 & (1 << v4)) != 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2246, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v34, v35, *((_DWORD *)a2 + 25));
      else
        *(_DWORD *)(v60 + 4 * v38) = v39 | (1 << v4);
      StateMgr::setColls(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v5) + 56), v4, (uint64_t)&v62, 1, v32, v33, v34, v35);
      v37 = 0;
      LODWORD(v63) = 0;
    }
    if (v37 == HIDWORD(v63))
    {
      DgnPrimArray<short>::reallocElts((uint64_t)&v62, 1, 1);
      v37 = v63;
    }
    *(_WORD *)(v62 + 2 * v37) = v36;
    LODWORD(v63) = v37 + 1;
    if (DgnTextFileParser::parseNextLine(a2))
    {
      v40 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v50, v40);
      if (v51)
        v41 = v50;
      else
        v41 = &byte_209A88803;
      v42 = strcmp(v41, "StateAllowedCollations") != 0;
      DgnString::~DgnString((DgnString *)&v50);
    }
    else
    {
      v42 = 1;
    }
    v5 = *(unsigned __int16 *)this;
    DgnString::~DgnString((DgnString *)v52);
    DgnString::~DgnString((DgnString *)v53);
    DgnString::~DgnString((DgnString *)&v55);
    DgnString::~DgnString((DgnString *)v57);
    DgnString::~DgnString((DgnString *)&v58);
    v4 = LineFieldInteger;
  }
  while (!v42);
  if (v61 < LineFieldInteger + 1)
    BitArray::setSize((BitArray *)&v60, LineFieldInteger + 1);
  v47 = LineFieldInteger >> 5;
  v48 = *(_DWORD *)(v60 + 4 * v47);
  if ((v48 & (1 << LineFieldInteger)) != 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2282, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v45, v46, *((_DWORD *)a2 + 25));
  else
    *(_DWORD *)(v60 + 4 * v47) = v48 | (1 << LineFieldInteger);
  StateMgr::setColls(*(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v5) + 56), LineFieldInteger, (uint64_t)&v62, 1, v43, v44, v45, v46);
  BitArray::~BitArray((BitArray *)&v60);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v62);
}

void sub_2099450AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 104);
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateEnv(TextStateRule *this, DgnTextFileParser *a2)
{
  unsigned int v4;
  int v5;
  char *LineFieldString;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t LineFieldInteger;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  StateMgr *v35;
  EnvMgr *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int ItemEnvIdMaybeNew;
  uint64_t v45;
  uint64_t v46;
  EnvMgr *v47;
  char *v48;
  const char *v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  const char *v55;
  int v56;
  _BYTE v57[8];
  unsigned int v58;
  _BYTE v59[8];
  unsigned int v60;
  EnvMgr *v61;
  unsigned int v62;
  _BYTE v63[16];
  const char *v64;
  int v65;
  const unsigned __int8 *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;

  DgnString::DgnString((DgnString *)&v68);
  v4 = 0;
  v66 = 0;
  v67 = 0;
  v5 = 127;
  do
  {
    DgnString::DgnString((DgnString *)&v64);
    DgnString::DgnString((DgnString *)v63);
    DgnString::DgnString((DgnString *)&v61);
    DgnString::DgnString((DgnString *)v59);
    DgnString::DgnString((DgnString *)v57);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v63, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v64, v13);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v7, v8, v9, v10, v11, v12);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v61, v15);
    v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v59, v16);
    v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v57, v17);
    v24 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v18, v19, v20, v21, v22, v23);
    if (*((_DWORD *)this + 12))
      v25 = (const char *)*((_QWORD *)this + 5);
    else
      v25 = &byte_209A88803;
    if (v65)
      v26 = v64;
    else
      v26 = &byte_209A88803;
    if (strcmp(v25, v26))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2307, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v31, v32, *((_DWORD *)a2 + 25));
    if (v58 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2309, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    if (v24)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2311, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    if ((int)LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2316, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    if ((v4 || v5 != 127) && ((_DWORD)LineFieldInteger != v4 || *(unsigned __int16 *)this != v5))
    {
      if (v69 < v4 + 1)
        BitArray::setSize((BitArray *)&v68, v4 + 1);
      v33 = v4 >> 5;
      v34 = *(_DWORD *)(v68 + 4 * v33);
      if ((v34 & (1 << v4)) != 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2338, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v31, v32, *((_DWORD *)a2 + 25));
      else
        *(_DWORD *)(v68 + 4 * v33) = v34 | (1 << v4);
    }
    v35 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56);
    StateMgr::verifyVisible(v35, LineFieldInteger, v27, v28, v29, v30, v31, v32);
    v36 = (EnvMgr *)*((_QWORD *)v35 + 94);
    ItemEnvIdMaybeNew = EnvMgr::getItemEnvIdMaybeNew(v36, LineFieldInteger, 1, v37, v38, v39, v40, v41);
    if (v62 <= 1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2353, (uint64_t)"voc/tsr", 15, (uint64_t)"%u", v42, v43, *((_DWORD *)a2 + 25));
    if (v60 <= 1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2355, (uint64_t)"voc/tsr", 16, (uint64_t)"%u", v42, v43, *((_DWORD *)a2 + 25));
    DgnTextFile::convertFromEnvValueFormat((uint64_t)v59, (uint64_t **)&v66);
    if (v62)
      v47 = v61;
    else
      v47 = (EnvMgr *)&byte_209A88803;
    EnvMgr::setData(v36, ItemEnvIdMaybeNew, v47, v66, v67, 1, v45, v46);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      v48 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v55, v48);
      if (v56)
        v49 = v55;
      else
        v49 = &byte_209A88803;
      v50 = strcmp(v49, "StateEnv") != 0;
      DgnString::~DgnString((DgnString *)&v55);
    }
    else
    {
      v50 = 1;
    }
    v5 = *(unsigned __int16 *)this;
    DgnString::~DgnString((DgnString *)v57);
    DgnString::~DgnString((DgnString *)v59);
    DgnString::~DgnString((DgnString *)&v61);
    DgnString::~DgnString((DgnString *)v63);
    DgnString::~DgnString((DgnString *)&v64);
    v4 = LineFieldInteger;
  }
  while (!v50);
  if (v69 < (int)LineFieldInteger + 1)
    BitArray::setSize((BitArray *)&v68, LineFieldInteger + 1);
  v53 = LineFieldInteger >> 5;
  v54 = *(_DWORD *)(v68 + 4 * v53);
  if ((v54 & (1 << LineFieldInteger)) != 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2383, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v51, v52, *((_DWORD *)a2 + 25));
  else
    *(_DWORD *)(v68 + 4 * v53) = v54 | (1 << LineFieldInteger);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v66);
  BitArray::~BitArray((BitArray *)&v68);
}

void sub_209945600(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v1 - 120);
  BitArray::~BitArray((BitArray *)(v1 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateIncludedWordEnv(TextStateRule *this, DgnTextFileParser *a2)
{
  unsigned int v4;
  int v5;
  char *LineFieldString;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t LineFieldInteger;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const char *v31;
  uint64_t WordId;
  uint64_t v33;
  WordList *v34;
  StateMgr *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  EnvMgr *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int ItemPairEnvIdMaybeNew;
  uint64_t v56;
  uint64_t v57;
  EnvMgr *v58;
  char *v59;
  const char *v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  const char *v66;
  int v67;
  _BYTE v68[8];
  unsigned int v69;
  EnvMgr *v70;
  unsigned int v71;
  const char *v72;
  int v73;
  _BYTE v74[16];
  const char *v75;
  int v76;
  const unsigned __int8 *v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;

  DgnString::DgnString((DgnString *)&v79);
  v4 = 0;
  v77 = 0;
  v78 = 0;
  v5 = 127;
  do
  {
    DgnString::DgnString((DgnString *)&v75);
    DgnString::DgnString((DgnString *)v74);
    DgnString::DgnString((DgnString *)&v72);
    DgnString::DgnString((DgnString *)&v70);
    DgnString::DgnString((DgnString *)v68);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v74, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v75, v13);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v7, v8, v9, v10, v11, v12);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v72, v15);
    v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)&v70, v16);
    v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v68, v17);
    v24 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v18, v19, v20, v21, v22, v23);
    if (*((_DWORD *)this + 12))
      v25 = (const char *)*((_QWORD *)this + 5);
    else
      v25 = &byte_209A88803;
    if (v76)
      v26 = v75;
    else
      v26 = &byte_209A88803;
    if (strcmp(v25, v26))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2407, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    if (v24)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2409, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if ((int)LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2414, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    if ((v4 || v5 != 127) && ((_DWORD)LineFieldInteger != v4 || *(unsigned __int16 *)this != v5))
    {
      if (v80 < v4 + 1)
        BitArray::setSize((BitArray *)&v79, v4 + 1);
      v29 = v4 >> 5;
      v30 = *(_DWORD *)(v79 + 4 * v29);
      if ((v30 & (1 << v4)) != 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2436, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
      else
        *(_DWORD *)(v79 + 4 * v29) = v30 | (1 << v4);
    }
    if (v73)
      v31 = v72;
    else
      v31 = &byte_209A88803;
    WordId = GetWordId(*(unsigned __int16 *)this, v31, "StateIncludedWordEnv word", ".tsr", 0, 0, v27, v28);
    v4 = LineFieldInteger;
    v33 = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this);
    v34 = *(WordList **)(v33 + 48);
    v35 = *(StateMgr **)(v33 + 56);
    StateMgr::verifyVisible(v35, LineFieldInteger, v36, v37, v38, v39, v40, v41);
    WordList::verifyVisible(v34, WordId, v42, v43, v44, v45, v46, v47);
    v48 = (EnvMgr *)*((_QWORD *)v35 + 95);
    ItemPairEnvIdMaybeNew = EnvMgr::getItemPairEnvIdMaybeNew(v48, LineFieldInteger, WordId, 1, v49, v50, v51, v52);
    if (v71 <= 1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2456, (uint64_t)"voc/tsr", 16, (uint64_t)"%u", v53, v54, *((_DWORD *)a2 + 25));
    if (v69 <= 1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2458, (uint64_t)"voc/tsr", 24, (uint64_t)"%u", v53, v54, *((_DWORD *)a2 + 25));
    DgnTextFile::convertFromEnvValueFormat((uint64_t)v68, (uint64_t **)&v77);
    if (v71)
      v58 = v70;
    else
      v58 = (EnvMgr *)&byte_209A88803;
    EnvMgr::setData(v48, ItemPairEnvIdMaybeNew, v58, v77, v78, 1, v56, v57);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      v59 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v66, v59);
      if (v67)
        v60 = v66;
      else
        v60 = &byte_209A88803;
      v61 = strcmp(v60, "StateIncludedWordEnv") != 0;
      DgnString::~DgnString((DgnString *)&v66);
    }
    else
    {
      v61 = 1;
    }
    v5 = *(unsigned __int16 *)this;
    DgnString::~DgnString((DgnString *)v68);
    DgnString::~DgnString((DgnString *)&v70);
    DgnString::~DgnString((DgnString *)&v72);
    DgnString::~DgnString((DgnString *)v74);
    DgnString::~DgnString((DgnString *)&v75);
  }
  while (!v61);
  if (v80 < (int)LineFieldInteger + 1)
    BitArray::setSize((BitArray *)&v79, LineFieldInteger + 1);
  v64 = LineFieldInteger >> 5;
  v65 = *(_DWORD *)(v79 + 4 * v64);
  if ((v65 & (1 << LineFieldInteger)) != 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2486, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v62, v63, *((_DWORD *)a2 + 25));
  else
    *(_DWORD *)(v79 + 4 * v64) = v65 | (1 << LineFieldInteger);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v77);
  BitArray::~BitArray((BitArray *)&v79);
}

void sub_209945B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v1 - 120);
  BitArray::~BitArray((BitArray *)(v1 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::parseRuleDefinition(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  const char *v33;
  int v34;
  const char *v35;
  int v36;
  _BYTE v37[8];
  unsigned int v38;
  _BYTE v39[8];
  unsigned int v40;
  _BYTE v41[8];
  unsigned int v42;
  _BYTE v43[16];
  const char *v44;
  int v45;
  uint64_t v46;
  unsigned int v47;

  DgnString::DgnString((DgnString *)&v46);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v44);
    DgnString::DgnString((DgnString *)v43);
    DgnString::DgnString((DgnString *)v41);
    DgnString::DgnString((DgnString *)v39);
    DgnString::DgnString((DgnString *)v37);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v43, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v44, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v41, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v39, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v37, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v45)
      v24 = v44;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2506, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    if (v42 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2508, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v40 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2510, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v38 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2512, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2517, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if ((v22 & 0x80000000) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2522, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v47 <= (unsigned __int16)LineFieldInteger)
      BitArray::setSize((BitArray *)&v46, (unsigned __int16)LineFieldInteger + 1);
    v30 = (unsigned __int16)LineFieldInteger >> 5;
    v31 = *(_DWORD *)(v46 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2542, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v46 + 4 * v30) = v31 | (1 << LineFieldInteger);
    RuleMgr::newRule(*(RuleMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64), v22, (unsigned __int16)LineFieldInteger, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v32 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v35, v32);
    if (v36)
      v33 = v35;
    else
      v33 = &byte_209A88803;
    v34 = strcmp(v33, "RuleDefinition");
    DgnString::~DgnString((DgnString *)&v35);
    DgnString::~DgnString((DgnString *)v37);
    DgnString::~DgnString((DgnString *)v39);
    DgnString::~DgnString((DgnString *)v41);
    DgnString::~DgnString((DgnString *)v43);
    DgnString::~DgnString((DgnString *)&v44);
    if (v34)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v37);
  DgnString::~DgnString((DgnString *)v39);
  DgnString::~DgnString((DgnString *)v41);
  DgnString::~DgnString((DgnString *)v43);
  DgnString::~DgnString((DgnString *)&v44);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v46);
}

void sub_209945FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  uint64_t v18;
  va_list va3;
  uint64_t v20;
  va_list va4;

  va_start(va4, a7);
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v18 = va_arg(va4, _QWORD);
  v20 = va_arg(va4, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  DgnString::~DgnString((DgnString *)va4);
  BitArray::~BitArray((BitArray *)(v7 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseRuleName(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  char *v33;
  const char *v34;
  int v35;
  const char *v36;
  int v37;
  _BYTE v38[8];
  unsigned int v39;
  _BYTE v40[8];
  unsigned int v41;
  char *v42;
  int v43;
  _BYTE v44[16];
  const char *v45;
  int v46;
  uint64_t v47;
  unsigned int v48;

  DgnString::DgnString((DgnString *)&v47);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v45);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)&v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v44, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v45, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v42, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v40, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v38, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v46)
      v24 = v45;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2575, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    if (v41 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2577, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v39 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2579, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v22)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2581, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2586, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v48 <= (unsigned __int16)LineFieldInteger)
      BitArray::setSize((BitArray *)&v47, (unsigned __int16)LineFieldInteger + 1);
    v30 = (unsigned __int16)LineFieldInteger >> 5;
    v31 = *(_DWORD *)(v47 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2599, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v47 + 4 * v30) = v31 | (1 << LineFieldInteger);
    v32 = v43 ? v42 : &byte_209A88803;
    RuleMgr::setName(*(RuleMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64), (unsigned __int16)LineFieldInteger, v32, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v33 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v36, v33);
    if (v37)
      v34 = v36;
    else
      v34 = &byte_209A88803;
    v35 = strcmp(v34, "RuleName");
    DgnString::~DgnString((DgnString *)&v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)&v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)&v45);
    if (v35)
      goto LABEL_35;
  }
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)&v42);
  DgnString::~DgnString((DgnString *)v44);
  DgnString::~DgnString((DgnString *)&v45);
LABEL_35:
  BitArray::~BitArray((BitArray *)&v47);
}

void sub_2099463D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseRuleAllowLM(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  const char *v33;
  int v34;
  const char *v35;
  int v36;
  _BYTE v37[8];
  unsigned int v38;
  _BYTE v39[8];
  unsigned int v40;
  _BYTE v41[8];
  unsigned int v42;
  _BYTE v43[16];
  const char *v44;
  int v45;
  uint64_t v46;
  unsigned int v47;

  DgnString::DgnString((DgnString *)&v46);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v44);
    DgnString::DgnString((DgnString *)v43);
    DgnString::DgnString((DgnString *)v41);
    DgnString::DgnString((DgnString *)v39);
    DgnString::DgnString((DgnString *)v37);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v43, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v44, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v41, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v39, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v37, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v45)
      v24 = v44;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2629, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    if (v42 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2631, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v40 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2633, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v38 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2635, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v22 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2638, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2643, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v47 <= (unsigned __int16)LineFieldInteger)
      BitArray::setSize((BitArray *)&v46, (unsigned __int16)LineFieldInteger + 1);
    v30 = (unsigned __int16)LineFieldInteger >> 5;
    v31 = *(_DWORD *)(v46 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2656, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v46 + 4 * v30) = v31 | (1 << LineFieldInteger);
    RuleMgr::setLMAllowed(*(RuleMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64), (unsigned __int16)LineFieldInteger, v22 == 1, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v32 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v35, v32);
    if (v36)
      v33 = v35;
    else
      v33 = &byte_209A88803;
    v34 = strcmp(v33, "RuleAllowLM");
    DgnString::~DgnString((DgnString *)&v35);
    DgnString::~DgnString((DgnString *)v37);
    DgnString::~DgnString((DgnString *)v39);
    DgnString::~DgnString((DgnString *)v41);
    DgnString::~DgnString((DgnString *)v43);
    DgnString::~DgnString((DgnString *)&v44);
    if (v34)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v37);
  DgnString::~DgnString((DgnString *)v39);
  DgnString::~DgnString((DgnString *)v41);
  DgnString::~DgnString((DgnString *)v43);
  DgnString::~DgnString((DgnString *)&v44);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v46);
}

void sub_209946820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseRuleAllowCoart(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  const char *v33;
  int v34;
  const char *v35;
  int v36;
  _BYTE v37[8];
  unsigned int v38;
  _BYTE v39[8];
  unsigned int v40;
  _BYTE v41[8];
  unsigned int v42;
  _BYTE v43[16];
  const char *v44;
  int v45;
  uint64_t v46;
  unsigned int v47;

  DgnString::DgnString((DgnString *)&v46);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v44);
    DgnString::DgnString((DgnString *)v43);
    DgnString::DgnString((DgnString *)v41);
    DgnString::DgnString((DgnString *)v39);
    DgnString::DgnString((DgnString *)v37);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v43, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v44, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v41, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v39, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v37, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v45)
      v24 = v44;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2686, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    if (v42 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2688, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v40 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2690, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v38 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2692, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v22 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2695, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2700, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v47 <= (unsigned __int16)LineFieldInteger)
      BitArray::setSize((BitArray *)&v46, (unsigned __int16)LineFieldInteger + 1);
    v30 = (unsigned __int16)LineFieldInteger >> 5;
    v31 = *(_DWORD *)(v46 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2713, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v46 + 4 * v30) = v31 | (1 << LineFieldInteger);
    RuleMgr::setCoartAllowed(*(RuleMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64), (unsigned __int16)LineFieldInteger, v22 == 1, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v32 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v35, v32);
    if (v36)
      v33 = v35;
    else
      v33 = &byte_209A88803;
    v34 = strcmp(v33, "RuleAllowCoart");
    DgnString::~DgnString((DgnString *)&v35);
    DgnString::~DgnString((DgnString *)v37);
    DgnString::~DgnString((DgnString *)v39);
    DgnString::~DgnString((DgnString *)v41);
    DgnString::~DgnString((DgnString *)v43);
    DgnString::~DgnString((DgnString *)&v44);
    if (v34)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v37);
  DgnString::~DgnString((DgnString *)v39);
  DgnString::~DgnString((DgnString *)v41);
  DgnString::~DgnString((DgnString *)v43);
  DgnString::~DgnString((DgnString *)&v44);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v46);
}

void sub_209946C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseRuleAllowPrefiltering(TextStateRule *this, DgnTextFileParser *a2)
{
  char *LineFieldString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int LineFieldInteger;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  const char *v33;
  int v34;
  const char *v35;
  int v36;
  _BYTE v37[8];
  unsigned int v38;
  _BYTE v39[8];
  unsigned int v40;
  _BYTE v41[8];
  unsigned int v42;
  _BYTE v43[16];
  const char *v44;
  int v45;
  uint64_t v46;
  unsigned int v47;

  DgnString::DgnString((DgnString *)&v46);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v44);
    DgnString::DgnString((DgnString *)v43);
    DgnString::DgnString((DgnString *)v41);
    DgnString::DgnString((DgnString *)v39);
    DgnString::DgnString((DgnString *)v37);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v43, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v44, v11);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v41, v13);
    v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v39, v14);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v37, v15);
    v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12))
      v23 = (const char *)*((_QWORD *)this + 5);
    else
      v23 = &byte_209A88803;
    if (v45)
      v24 = v44;
    else
      v24 = &byte_209A88803;
    if (strcmp(v23, v24))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2744, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    if (v42 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2746, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v40 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2748, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v38 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2750, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v22 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2753, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2758, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if (v47 <= (unsigned __int16)LineFieldInteger)
      BitArray::setSize((BitArray *)&v46, (unsigned __int16)LineFieldInteger + 1);
    v30 = (unsigned __int16)LineFieldInteger >> 5;
    v31 = *(_DWORD *)(v46 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2771, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    else
      *(_DWORD *)(v46 + 4 * v30) = v31 | (1 << LineFieldInteger);
    RuleMgr::setPrefilteringAllowed(*(RuleMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64), (unsigned __int16)LineFieldInteger, v22 == 1, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2))
      break;
    v32 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v35, v32);
    if (v36)
      v33 = v35;
    else
      v33 = &byte_209A88803;
    v34 = strcmp(v33, "RuleAllowPrefiltering");
    DgnString::~DgnString((DgnString *)&v35);
    DgnString::~DgnString((DgnString *)v37);
    DgnString::~DgnString((DgnString *)v39);
    DgnString::~DgnString((DgnString *)v41);
    DgnString::~DgnString((DgnString *)v43);
    DgnString::~DgnString((DgnString *)&v44);
    if (v34)
      goto LABEL_34;
  }
  DgnString::~DgnString((DgnString *)v37);
  DgnString::~DgnString((DgnString *)v39);
  DgnString::~DgnString((DgnString *)v41);
  DgnString::~DgnString((DgnString *)v43);
  DgnString::~DgnString((DgnString *)&v44);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v46);
}

void sub_2099470B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

uint64_t TextStateRule::parseRuleDescription(TextStateRule *this, DgnTextFileParser *a2)
{
  int WordId;
  unsigned __int16 v5;
  uint64_t v6;
  char *LineFieldString;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int LineFieldInteger;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  const char *v41;
  char *v42;
  const char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int *v49;
  char *v50;
  const char *v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  const char *v61;
  int v62;
  const char *v63;
  unsigned int v64;
  char *v65;
  int v66;
  char *v67;
  int v68;
  _BYTE v69[16];
  const char *v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;

  v74 = 0;
  v75 = 0;
  DgnString::DgnString((DgnString *)&v72);
  v5 = 0;
  LODWORD(v6) = 127;
  do
  {
    DgnString::DgnString((DgnString *)&v70);
    DgnString::DgnString((DgnString *)v69);
    DgnString::DgnString((DgnString *)&v67);
    DgnString::DgnString((DgnString *)&v65);
    DgnString::DgnString((DgnString *)&v63);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v69, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v70, v14);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v8, v9, v10, v11, v12, v13);
    v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v67, v16);
    v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)&v65, v17);
    v18 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)&v63, v18);
    v25 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v19, v20, v21, v22, v23, v24);
    if (*((_DWORD *)this + 12))
      v26 = (const char *)*((_QWORD *)this + 5);
    else
      v26 = &byte_209A88803;
    if (v71)
      v27 = v70;
    else
      v27 = &byte_209A88803;
    if (strcmp(v26, v27))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2805, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    if (v64 >= 2)
    {
      v30 = v68 ? v67 : &byte_209A88803;
      if (strcmp(v30, "Word"))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2809, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v25)
    {
      v31 = v68 ? v67 : &byte_209A88803;
      if (strcmp(v31, "State") && strcmp(v31, "Rule") && strcmp(v31, "Word"))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2815, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2820, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    if ((_DWORD)v6 == 127 && !v5)
    {
      LODWORD(v6) = *(unsigned __int16 *)this;
      v5 = LineFieldInteger;
    }
    if (v68)
      v32 = v67;
    else
      v32 = &byte_209A88803;
    if (!strcmp(v32, "StartOperation"))
    {
      v40 = 3;
    }
    else
    {
      if (strcmp(v32, "EndOperation"))
      {
        if (strcmp(v32, "Word"))
        {
          if (!strcmp(v32, "State"))
          {
            if (!*((_BYTE *)this + 32))
            {
              v44 = v66 ? v65 : &byte_209A88803;
              if (*v44)
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2894, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v38, v39, *((_DWORD *)a2 + 25));
            }
            if (v25 <= 0)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2900, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v38, v39, *((_DWORD *)a2 + 25));
            v40 = 1;
            WordId = v25;
          }
          else
          {
            if (strcmp(v32, "Rule"))
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2923, (uint64_t)"voc/tsr", 15, (uint64_t)"%u", v38, v39, *((_DWORD *)a2 + 25));
              v25 = 0;
              v40 = 3;
              goto LABEL_84;
            }
            if (!*((_BYTE *)this + 32))
            {
              v45 = v66 ? v65 : &byte_209A88803;
              if (*v45)
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2910, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v38, v39, *((_DWORD *)a2 + 25));
            }
            if (v25 <= 0)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2916, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v38, v39, *((_DWORD *)a2 + 25));
            WordId = WordId & 0xFFFF0000 | (unsigned __int16)v25;
            v40 = 2;
          }
LABEL_83:
          v25 = 0;
          goto LABEL_84;
        }
        if ((v25 - 1001) <= 0xFFFFF82E)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2871, (uint64_t)"voc/tsr", 26, (uint64_t)"%u %500s %d", v33, v34, *((_DWORD *)a2 + 25));
        if (!*((_BYTE *)this + 32))
        {
          v42 = v66 ? v65 : &byte_209A88803;
          if (*v42)
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2878, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v33, v34, *((_DWORD *)a2 + 25));
        }
        if (v64)
          v43 = v63;
        else
          v43 = &byte_209A88803;
        WordId = GetWordId(*(unsigned __int16 *)this, v43, "RuleDescription word", ".tsr", 0, 0, v33, v34);
        v40 = 4;
        goto LABEL_84;
      }
      v40 = 0;
    }
    if (v66)
      v41 = v65;
    else
      v41 = &byte_209A88803;
    if (!strcmp(v41, "Sequence"))
    {
      WordId = 0;
      goto LABEL_83;
    }
    if (!strcmp(v41, "Alternative"))
    {
      v25 = 0;
      WordId = 1;
    }
    else if (!strcmp(v41, "Repeat"))
    {
      v25 = 0;
      WordId = 2;
    }
    else if (!strcmp(v41, "Optional"))
    {
      v25 = 0;
      WordId = 3;
    }
    else
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2862, (uint64_t)"voc/tsr", 16, (uint64_t)"%u", v38, v39, *((_DWORD *)a2 + 25));
      WordId = 0;
      v25 = 0;
    }
LABEL_84:
    if (*(unsigned __int16 *)this == (_DWORD)v6 && v5 == (unsigned __int16)LineFieldInteger)
    {
      v46 = v75;
    }
    else
    {
      if (v73 <= v5)
        BitArray::setSize((BitArray *)&v72, v5 + 1);
      v47 = v5 >> 5;
      v48 = *(_DWORD *)(v72 + 4 * v47);
      if ((v48 & (1 << v5)) != 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2938, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v38, v39, *((_DWORD *)a2 + 25));
      else
        *(_DWORD *)(v72 + 4 * v47) = v48 | (1 << v5);
      RuleMgr::setDesc(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v6) + 64), v5, (uint64_t)&v74, v35, v36, v37, v38, v39);
      v46 = 0;
      LODWORD(v75) = 0;
    }
    if (v46 == HIDWORD(v75))
    {
      DgnArray<RuleDesc>::reallocElts((uint64_t)&v74, 1, 1);
      LODWORD(v46) = v75;
    }
    v49 = (int *)(v74 + 12 * v46);
    *v49 = v40;
    v49[1] = v25;
    v49[2] = WordId;
    LODWORD(v75) = v75 + 1;
    if (DgnTextFileParser::parseNextLine(a2))
    {
      v50 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v61, v50);
      if (v62)
        v51 = v61;
      else
        v51 = &byte_209A88803;
      v52 = strcmp(v51, "RuleDescription") != 0;
      DgnString::~DgnString((DgnString *)&v61);
    }
    else
    {
      v52 = 1;
    }
    v6 = *(unsigned __int16 *)this;
    DgnString::~DgnString((DgnString *)&v63);
    DgnString::~DgnString((DgnString *)&v65);
    DgnString::~DgnString((DgnString *)&v67);
    DgnString::~DgnString((DgnString *)v69);
    DgnString::~DgnString((DgnString *)&v70);
    v5 = LineFieldInteger;
  }
  while (!v52);
  if (v73 <= (unsigned __int16)LineFieldInteger)
    BitArray::setSize((BitArray *)&v72, (unsigned __int16)LineFieldInteger + 1);
  v58 = (unsigned __int16)LineFieldInteger >> 5;
  v59 = *(_DWORD *)(v72 + 4 * v58);
  if ((v59 & (1 << LineFieldInteger)) != 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2973, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v56, v57, *((_DWORD *)a2 + 25));
  else
    *(_DWORD *)(v72 + 4 * v58) = v59 | (1 << LineFieldInteger);
  RuleMgr::setDesc(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v6) + 64), (unsigned __int16)LineFieldInteger, (uint64_t)&v74, v53, v54, v55, v56, v57);
  BitArray::~BitArray((BitArray *)&v72);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v74);
}

void sub_2099479C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  va_list va2;
  uint64_t v18;
  uint64_t v19;
  va_list va3;
  uint64_t v21;
  va_list va4;

  va_start(va4, a8);
  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v16 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v19 = va_arg(va4, _QWORD);
  v21 = va_arg(va4, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  DgnString::~DgnString((DgnString *)va4);
  BitArray::~BitArray((BitArray *)(v8 - 120));
  DgnIArray<Utterance *>::~DgnIArray(v8 - 104);
  _Unwind_Resume(a1);
}

void TextStateRule::parseRuleEnv(TextStateRule *this, DgnTextFileParser *a2)
{
  unsigned __int16 v4;
  int v5;
  char *LineFieldString;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int LineFieldInteger;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  RuleMgr *v34;
  EnvMgr *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int ItemEnvIdMaybeNew;
  uint64_t v44;
  uint64_t v45;
  EnvMgr *v46;
  char *v47;
  const char *v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  int v53;
  _BYTE v54[8];
  unsigned int v55;
  _BYTE v56[8];
  unsigned int v57;
  EnvMgr *v58;
  unsigned int v59;
  _BYTE v60[16];
  const char *v61;
  int v62;
  const unsigned __int8 *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;

  DgnString::DgnString((DgnString *)&v65);
  v4 = 0;
  v63 = 0;
  v64 = 0;
  v5 = 127;
  do
  {
    DgnString::DgnString((DgnString *)&v61);
    DgnString::DgnString((DgnString *)v60);
    DgnString::DgnString((DgnString *)&v58);
    DgnString::DgnString((DgnString *)v56);
    DgnString::DgnString((DgnString *)v54);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v60, LineFieldString);
    if (*((_BYTE *)this + 32))
    {
      v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v61, v13);
    }
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v7, v8, v9, v10, v11, v12);
    v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v58, v15);
    v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v56, v16);
    v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v54, v17);
    v24 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v18, v19, v20, v21, v22, v23);
    if (*((_DWORD *)this + 12))
      v25 = (const char *)*((_QWORD *)this + 5);
    else
      v25 = &byte_209A88803;
    if (v62)
      v26 = v61;
    else
      v26 = &byte_209A88803;
    if (strcmp(v25, v26))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2998, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v30, v31, *((_DWORD *)a2 + 25));
    if (v55 >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3000, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v30, v31, *((_DWORD *)a2 + 25));
    if (v24)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3002, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v30, v31, *((_DWORD *)a2 + 25));
    if (LineFieldInteger <= 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3007, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v30, v31, *((_DWORD *)a2 + 25));
    if (!v4 && v5 == 127)
    {
      v5 = *(unsigned __int16 *)this;
      v4 = LineFieldInteger;
    }
    if ((unsigned __int16)LineFieldInteger != v4 || *(unsigned __int16 *)this != v5)
    {
      if (v66 <= v4)
        BitArray::setSize((BitArray *)&v65, v4 + 1);
      v32 = v4 >> 5;
      v33 = *(_DWORD *)(v65 + 4 * v32);
      if ((v33 & (1 << v4)) != 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3028, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v30, v31, *((_DWORD *)a2 + 25));
      else
        *(_DWORD *)(v65 + 4 * v32) = v33 | (1 << v4);
    }
    v34 = *(RuleMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64);
    RuleMgr::verifyRule(v34, (unsigned __int16)LineFieldInteger, 1, v27, v28, v29, v30, v31);
    v35 = (EnvMgr *)*((_QWORD *)v34 + 10);
    ItemEnvIdMaybeNew = EnvMgr::getItemEnvIdMaybeNew(v35, (unsigned __int16)LineFieldInteger, 1, v36, v37, v38, v39, v40);
    if (v59 <= 1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3043, (uint64_t)"voc/tsr", 15, (uint64_t)"%u", v41, v42, *((_DWORD *)a2 + 25));
    if (v57 <= 1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3045, (uint64_t)"voc/tsr", 16, (uint64_t)"%u", v41, v42, *((_DWORD *)a2 + 25));
    DgnTextFile::convertFromEnvValueFormat((uint64_t)v56, (uint64_t **)&v63);
    if (v59)
      v46 = v58;
    else
      v46 = (EnvMgr *)&byte_209A88803;
    EnvMgr::setData(v35, ItemEnvIdMaybeNew, v46, v63, v64, 1, v44, v45);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      v47 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v52, v47);
      if (v53)
        v48 = v52;
      else
        v48 = &byte_209A88803;
      v49 = strcmp(v48, "RuleEnv") != 0;
      DgnString::~DgnString((DgnString *)&v52);
    }
    else
    {
      v49 = 1;
    }
    v5 = *(unsigned __int16 *)this;
    DgnString::~DgnString((DgnString *)v54);
    DgnString::~DgnString((DgnString *)v56);
    DgnString::~DgnString((DgnString *)&v58);
    DgnString::~DgnString((DgnString *)v60);
    DgnString::~DgnString((DgnString *)&v61);
    v4 = LineFieldInteger;
  }
  while (!v49);
  if (v66 <= (unsigned __int16)LineFieldInteger)
    BitArray::setSize((BitArray *)&v65, (unsigned __int16)LineFieldInteger + 1);
  if (((*(_DWORD *)(v65 + 4 * ((unsigned __int16)LineFieldInteger >> 5)) >> LineFieldInteger) & 1) != 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3071, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v50, v51, *((_DWORD *)a2 + 25));
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v63);
  BitArray::~BitArray((BitArray *)&v65);
}

void sub_209947F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v1 - 120);
  BitArray::~BitArray((BitArray *)(v1 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::loadStatesAndRules(TextStateRule *this, DFile *a2, __int16 a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[16];
  _BYTE v9[232];

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v9);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v9, (uint64_t)a2, 0x61u, 1);
  *(_WORD *)this = a3;
  DgnString::DgnString((DgnString *)v8);
  TextStateRule::parseHeader(this, (DgnTextFileParser *)v9);
  TextStateRule::parseBody(this, (DgnTextFileParser *)v9);
  if (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3084, (uint64_t)"voc/tsr", 23, (uint64_t)"%u", v6, v7, v9[100]);
  DgnString::~DgnString((DgnString *)v8);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v9);
}

void sub_209948064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va);
  _Unwind_Resume(a1);
}

void TextStateRule::saveStatesAndRules(TextStateRule *this, DFile *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  RuleMgr *v11;
  uint64_t v12;
  const StateMgr *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int Parent;
  int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *Name;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL4 LMAllowed;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  char *v81;
  unsigned int v82;
  unsigned int v83;
  StateMgr *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int WordPenalty;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BOOL4 Collapsible;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _BOOL4 CoartAllowed;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _BOOL4 SkipAllowed;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _BOOL4 LeftWBAllowed;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _BOOL4 RightWBAllowed;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _BOOL4 PrefilteringAllowed;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _BOOL4 EndOfUtteranceAllowed;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  int WordAliasState;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  int PrecedingNonAcousticWordState;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int v318;
  unsigned int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _BOOL4 PrecedingNonAcousticWordRequired;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  uint64_t CollWords;
  unint64_t v338;
  unint64_t i;
  uint64_t v340;
  uint64_t v341;
  char *WordName;
  char *v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  uint64_t StateTransition;
  unint64_t v355;
  int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  CollMgr *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  uint64_t Colls;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  unsigned int v377;
  const char *CollationName;
  char *v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int v382;
  EnvMgr *v383;
  unint64_t v384;
  unsigned int v385;
  unsigned int ItemEnvId;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t NameIds;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t Values;
  _QWORD *v401;
  uint64_t v402;
  unint64_t v403;
  char *v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  int v411;
  char *v412;
  unsigned int ItemPairEnvId;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  _QWORD *v428;
  uint64_t v429;
  unint64_t v430;
  char *v431;
  char *v432;
  char *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unsigned int v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t ChildRules;
  unint64_t v448;
  int v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  unsigned int v467;
  const char *v468;
  char *v469;
  unsigned int v470;
  unsigned int v471;
  unsigned int v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  unsigned int v487;
  unsigned int v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  int v495;
  unsigned int v496;
  unsigned int v497;
  unsigned int v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  unsigned int v513;
  unsigned int v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  unsigned int v522;
  unsigned int v523;
  unsigned int v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  unsigned int v539;
  unsigned int v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  int v547;
  unsigned int v548;
  unsigned int v549;
  unsigned int v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  _QWORD *v564;
  unint64_t v565;
  unsigned int v566;
  uint64_t Desc;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  unsigned int v571;
  unsigned int v572;
  char *v573;
  unsigned int v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  char *v579;
  int v580;
  unsigned int v581;
  unsigned int v582;
  unsigned int v583;
  EnvMgr *v584;
  unint64_t v585;
  unsigned int v586;
  unsigned int v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  _QWORD *v602;
  uint64_t v603;
  unint64_t v604;
  char *v605;
  char *v606;
  StateMgr *v607;
  uint64_t v608;
  RuleMgr *v610;
  RuleMgr *v611;
  char *v612;
  int v613;
  _QWORD v614[2];
  char *v615;
  int v616;
  void *v617;
  uint64_t v618;
  void *v619;
  uint64_t v620;
  unsigned int v621;
  uint64_t v622;
  int v623;
  _QWORD v624[2];
  _DWORD *v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  void *v629[36];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v629);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v629, (uint64_t)a2, 0x61u, 1);
  v627 = 0;
  v628 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v629, sTSR_Versions, (uint64_t)&v627, v5, v6, v7, v8, v9);
  DgnTextFileWriter::setFileType((uint64_t)v629, "TSR", (_QWORD *)(v627 + 8 * (v628 - 1)));
  *((_DWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 12) = xmmword_209A7ACD0;
  *((_DWORD *)this + 7) = 5;
  v625 = 0;
  v626 = 0;
  v619 = 0;
  v10 = realloc_array(0, &v619, 0x18uLL, 0, 0, 1);
  v625 = v619;
  LODWORD(v626) = 6;
  HIDWORD(v626) = v10 >> 2;
  DgnArray<DgnString>::DgnArray(v624, 6);
  DgnString::operator=((DgnString *)(v624[0] + 16 * *((unsigned int *)this + 1)), "Type");
  v625[*((unsigned int *)this + 1)] = 0;
  DgnString::operator=((DgnString *)(v624[0] + 16 * *((unsigned int *)this + 3)), "IntValue1");
  v625[*((unsigned int *)this + 3)] = 1;
  DgnString::operator=((DgnString *)(v624[0] + 16 * *((unsigned int *)this + 4)), "StrValue1");
  v625[*((unsigned int *)this + 4)] = 0;
  DgnString::operator=((DgnString *)(v624[0] + 16 * *((unsigned int *)this + 5)), "StrValue2");
  v625[*((unsigned int *)this + 5)] = 0;
  DgnString::operator=((DgnString *)(v624[0] + 16 * *((unsigned int *)this + 6)), "StrValue3");
  v625[*((unsigned int *)this + 6)] = 0;
  DgnString::operator=((DgnString *)(v624[0] + 16 * *((unsigned int *)this + 7)), "IntValue2");
  v625[*((unsigned int *)this + 7)] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v629, (uint64_t)&v625, (uint64_t)v624);
  v11 = *(RuleMgr **)(**(_QWORD **)VocMgr::smpVocMgr + 8 * a3);
  v12 = *(unsigned __int16 *)(*((_QWORD *)v11 + 8) + 32);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v629, "MaxStateId", *(int *)(*((_QWORD *)v11 + 7) + 720));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v629, "MaxRuleId", v12);
  v13 = (const StateMgr *)*((_QWORD *)v11 + 7);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v13);
  while (v623)
  {
    v20 = v622;
    v21 = v620;
    v22 = *(_DWORD *)(v620 + 4 * v622);
    if (v22)
    {
      Parent = StateMgr::getParent(v13, *(_DWORD *)(v620 + 4 * v622), v14, v15, v16, v17, v18, v19);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateDefinition");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v22);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      if (Parent)
        v24 = Parent;
      else
        v24 = -1;
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), v24);
      DgnTextFileWriter::writeNextLine(v629);
      v20 = v622;
      v21 = v620;
      v25 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v25 = 0;
    }
    *(_DWORD *)(v21 + 4 * v20) = 0;
    v26 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v26 >= v621;
      v29 = v26 - v621;
      if (v28)
        LODWORD(v622) = v29;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v25, v14, v15, v16, v17, v18, v19);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v13);
  while (v623)
  {
    v36 = v622;
    v37 = v620;
    v38 = *(_DWORD *)(v620 + 4 * v622);
    if (v38)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateName");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v38);
      v39 = *((_DWORD *)this + 4);
      Name = (char *)StateMgr::getName(v13, v38, v40, v41, v42, v43, v44, v45);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, v39, Name);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
      DgnTextFileWriter::writeNextLine(v629);
      v36 = v622;
      v37 = v620;
      v47 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v47 = 0;
    }
    *(_DWORD *)(v37 + 4 * v36) = 0;
    v48 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v48 >= v621;
      v49 = v48 - v621;
      if (v28)
        LODWORD(v622) = v49;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v47, v30, v31, v32, v33, v34, v35);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v13);
  while (v623)
  {
    v56 = v622;
    v57 = v620;
    v58 = *(_DWORD *)(v620 + 4 * v622);
    if (v58)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowLM");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v58);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      v59 = *((_DWORD *)this + 7);
      LMAllowed = StateMgr::getLMAllowed(v13, v58, 1, v60, v61, v62, v63, v64);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v59, LMAllowed);
      DgnTextFileWriter::writeNextLine(v629);
      v56 = v622;
      v57 = v620;
      v66 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v66 = 0;
    }
    *(_DWORD *)(v57 + 4 * v56) = 0;
    v67 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v67 >= v621;
      v68 = v67 - v621;
      if (v28)
        LODWORD(v622) = v68;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v66, v50, v51, v52, v53, v54, v55);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  v610 = v11;
  v69 = *((_QWORD *)v11 + 9);
  v607 = v13;
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v13);
  while (v623)
  {
    v76 = v622;
    v77 = v620;
    v78 = *(_DWORD *)(v620 + 4 * v622);
    if (v78)
    {
      if (StateMgr::getWeights(v607, *(_DWORD *)(v620 + 4 * v622), 1, v71, v72, v73, v74, v75) == 0xFFFF)v79 = 0;
      else
        v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 672))(v69);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateWeightsName");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v78);
      if (v79 && *(_DWORD *)(v79 + 8))
        v81 = *(char **)v79;
      else
        v81 = &byte_209A88803;
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), v81);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
      DgnTextFileWriter::writeNextLine(v629);
      v76 = v622;
      v77 = v620;
      v80 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v80 = 0;
    }
    *(_DWORD *)(v77 + 4 * v76) = 0;
    v82 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v82 >= v621;
      v83 = v82 - v621;
      if (v28)
        LODWORD(v622) = v83;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v80, v70, v71, v72, v73, v74, v75);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  v84 = v607;
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v91 = v622;
    v92 = v620;
    v93 = *(_DWORD *)(v620 + 4 * v622);
    if (v93)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateWordPenalty");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v93);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      v94 = *((_DWORD *)this + 7);
      WordPenalty = StateMgr::getWordPenalty(v607, v93, 1, v95, v96, v97, v98, v99);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v94, WordPenalty);
      DgnTextFileWriter::writeNextLine(v629);
      v91 = v622;
      v92 = v620;
      v101 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v101 = 0;
    }
    *(_DWORD *)(v92 + 4 * v91) = 0;
    v102 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v102 >= v621;
      v103 = v102 - v621;
      if (v28)
        LODWORD(v622) = v103;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v101, v85, v86, v87, v88, v89, v90);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v110 = v622;
    v111 = v620;
    v112 = *(unsigned int *)(v620 + 4 * v622);
    if ((_DWORD)v112)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateMinStartTime");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v112);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), *(_DWORD *)(*((_QWORD *)v607 + 50) + 4 * v112));
      DgnTextFileWriter::writeNextLine(v629);
      v110 = v622;
      v111 = v620;
      v113 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v113 = 0;
    }
    *(_DWORD *)(v111 + 4 * v110) = 0;
    v114 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v114 >= v621;
      v115 = v114 - v621;
      if (v28)
        LODWORD(v622) = v115;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v113, v104, v105, v106, v107, v108, v109);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v122 = v622;
    v123 = v620;
    v124 = *(unsigned int *)(v620 + 4 * v622);
    if ((_DWORD)v124)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateMaxStartTime");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v124);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), *(_DWORD *)(*((_QWORD *)v607 + 52) + 4 * v124));
      DgnTextFileWriter::writeNextLine(v629);
      v122 = v622;
      v123 = v620;
      v125 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v125 = 0;
    }
    *(_DWORD *)(v123 + 4 * v122) = 0;
    v126 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v126 >= v621;
      v127 = v126 - v621;
      if (v28)
        LODWORD(v622) = v127;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v125, v116, v117, v118, v119, v120, v121);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v134 = v622;
    v135 = v620;
    v136 = *(unsigned int *)(v620 + 4 * v622);
    if ((_DWORD)v136)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateMinEndTime");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v136);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), *(_DWORD *)(*((_QWORD *)v607 + 54) + 4 * v136));
      DgnTextFileWriter::writeNextLine(v629);
      v134 = v622;
      v135 = v620;
      v137 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v137 = 0;
    }
    *(_DWORD *)(v135 + 4 * v134) = 0;
    v138 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v138 >= v621;
      v139 = v138 - v621;
      if (v28)
        LODWORD(v622) = v139;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v137, v128, v129, v130, v131, v132, v133);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v146 = v622;
    v147 = v620;
    v148 = *(unsigned int *)(v620 + 4 * v622);
    if ((_DWORD)v148)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateMaxEndTime");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v148);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), *(_DWORD *)(*((_QWORD *)v607 + 56) + 4 * v148));
      DgnTextFileWriter::writeNextLine(v629);
      v146 = v622;
      v147 = v620;
      v149 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v149 = 0;
    }
    *(_DWORD *)(v147 + 4 * v146) = 0;
    v150 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v150 >= v621;
      v151 = v150 - v621;
      if (v28)
        LODWORD(v622) = v151;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v149, v140, v141, v142, v143, v144, v145);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v158 = v622;
    v159 = v620;
    v160 = *(_DWORD *)(v620 + 4 * v622);
    if (v160)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateCollapsible");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v160);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      v161 = *((_DWORD *)this + 7);
      Collapsible = StateMgr::getCollapsible(v607, v160, v162, v163, v164, v165, v166, v167);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v161, Collapsible);
      DgnTextFileWriter::writeNextLine(v629);
      v158 = v622;
      v159 = v620;
      v169 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v169 = 0;
    }
    *(_DWORD *)(v159 + 4 * v158) = 0;
    v170 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v170 >= v621;
      v171 = v170 - v621;
      if (v28)
        LODWORD(v622) = v171;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v169, v152, v153, v154, v155, v156, v157);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v178 = v622;
    v179 = v620;
    v180 = *(_DWORD *)(v620 + 4 * v622);
    if (v180)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowCoart");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v180);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      v181 = *((_DWORD *)this + 7);
      CoartAllowed = StateMgr::getCoartAllowed(v607, v180, 1, v182, v183, v184, v185, v186);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v181, CoartAllowed);
      DgnTextFileWriter::writeNextLine(v629);
      v178 = v622;
      v179 = v620;
      v188 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v188 = 0;
    }
    *(_DWORD *)(v179 + 4 * v178) = 0;
    v189 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v189 >= v621;
      v190 = v189 - v621;
      if (v28)
        LODWORD(v622) = v190;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v188, v172, v173, v174, v175, v176, v177);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v197 = v622;
    v198 = v620;
    v199 = *(_DWORD *)(v620 + 4 * v622);
    if (v199)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowSkip");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v199);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      v200 = *((_DWORD *)this + 7);
      SkipAllowed = StateMgr::getSkipAllowed(v607, v199, 1, v201, v202, v203, v204, v205);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v200, SkipAllowed);
      DgnTextFileWriter::writeNextLine(v629);
      v197 = v622;
      v198 = v620;
      v207 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v207 = 0;
    }
    *(_DWORD *)(v198 + 4 * v197) = 0;
    v208 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v208 >= v621;
      v209 = v208 - v621;
      if (v28)
        LODWORD(v622) = v209;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v207, v191, v192, v193, v194, v195, v196);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v216 = v622;
    v217 = v620;
    v218 = *(_DWORD *)(v620 + 4 * v622);
    if (v218)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowLeftWordBoundary");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v218);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      v219 = *((_DWORD *)this + 7);
      LeftWBAllowed = StateMgr::getLeftWBAllowed(v607, v218, 1, v220, v221, v222, v223, v224);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v219, LeftWBAllowed);
      DgnTextFileWriter::writeNextLine(v629);
      v216 = v622;
      v217 = v620;
      v226 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v226 = 0;
    }
    *(_DWORD *)(v217 + 4 * v216) = 0;
    v227 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v227 >= v621;
      v228 = v227 - v621;
      if (v28)
        LODWORD(v622) = v228;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v226, v210, v211, v212, v213, v214, v215);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v235 = v622;
    v236 = v620;
    v237 = *(_DWORD *)(v620 + 4 * v622);
    if (v237)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowRightWordBoundary");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v237);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      v238 = *((_DWORD *)this + 7);
      RightWBAllowed = StateMgr::getRightWBAllowed(v607, v237, 1, v239, v240, v241, v242, v243);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v238, RightWBAllowed);
      DgnTextFileWriter::writeNextLine(v629);
      v235 = v622;
      v236 = v620;
      v245 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v245 = 0;
    }
    *(_DWORD *)(v236 + 4 * v235) = 0;
    v246 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v246 >= v621;
      v247 = v246 - v621;
      if (v28)
        LODWORD(v622) = v247;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v245, v229, v230, v231, v232, v233, v234);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v254 = v622;
    v255 = v620;
    v256 = *(_DWORD *)(v620 + 4 * v622);
    if (v256)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowPrefiltering");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v256);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      v257 = *((_DWORD *)this + 7);
      PrefilteringAllowed = StateMgr::getPrefilteringAllowed(v607, v256, v258, v259, v260, v261, v262, v263);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v257, PrefilteringAllowed);
      DgnTextFileWriter::writeNextLine(v629);
      v254 = v622;
      v255 = v620;
      v265 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v265 = 0;
    }
    *(_DWORD *)(v255 + 4 * v254) = 0;
    v266 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v266 >= v621;
      v267 = v266 - v621;
      if (v28)
        LODWORD(v622) = v267;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v265, v248, v249, v250, v251, v252, v253);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v274 = v622;
    v275 = v620;
    v276 = *(_DWORD *)(v620 + 4 * v622);
    if (v276)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowEndOfUtt");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v276);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      v277 = *((_DWORD *)this + 7);
      EndOfUtteranceAllowed = StateMgr::getEndOfUtteranceAllowed(v607, v276, v278, v279, v280, v281, v282, v283);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v277, EndOfUtteranceAllowed);
      DgnTextFileWriter::writeNextLine(v629);
      v274 = v622;
      v275 = v620;
      v285 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v285 = 0;
    }
    *(_DWORD *)(v275 + 4 * v274) = 0;
    v286 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v286 >= v621;
      v287 = v286 - v621;
      if (v28)
        LODWORD(v622) = v287;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v285, v268, v269, v270, v271, v272, v273);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v294 = *(_DWORD *)(v620 + 4 * v622);
    if (v294)
    {
      WordAliasState = StateMgr::getWordAliasState(v607, *(_DWORD *)(v620 + 4 * v622), 1, v289, v290, v291, v292, v293);
      if (WordAliasState)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAliasState");
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v294);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), WordAliasState);
        DgnTextFileWriter::writeNextLine(v629);
      }
    }
    v296 = *(_DWORD *)(v620 + 4 * v622);
    *(_DWORD *)(v620 + 4 * v622) = 0;
    v297 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v297 >= v621;
      v298 = v297 - v621;
      if (v28)
        LODWORD(v622) = v298;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v296, v288, v289, v290, v291, v292, v293);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v305 = *(_DWORD *)(v620 + 4 * v622);
    if (v305)
    {
      PrecedingNonAcousticWordState = StateMgr::getPrecedingNonAcousticWordState(v607, *(_DWORD *)(v620 + 4 * v622), v299, v300, v301, v302, v303, v304);
      if (PrecedingNonAcousticWordState)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StatePrecedingNonAcousticWordState");
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v305);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), PrecedingNonAcousticWordState);
        DgnTextFileWriter::writeNextLine(v629);
      }
    }
    v307 = *(_DWORD *)(v620 + 4 * v622);
    *(_DWORD *)(v620 + 4 * v622) = 0;
    v308 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v308 >= v621;
      v309 = v308 - v621;
      if (v28)
        LODWORD(v622) = v309;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v307, v299, v300, v301, v302, v303, v304);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v316 = v622;
    v317 = v620;
    v318 = *(_DWORD *)(v620 + 4 * v622);
    if (v318)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StatePrecedingNonAcousticWordRequired");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v318);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
      v319 = *((_DWORD *)this + 7);
      PrecedingNonAcousticWordRequired = StateMgr::getPrecedingNonAcousticWordRequired(v607, v318, v320, v321, v322, v323, v324, v325);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v319, PrecedingNonAcousticWordRequired);
      DgnTextFileWriter::writeNextLine(v629);
      v316 = v622;
      v317 = v620;
      v327 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      v327 = 0;
    }
    *(_DWORD *)(v317 + 4 * v316) = 0;
    v328 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v328 >= v621;
      v329 = v328 - v621;
      if (v28)
        LODWORD(v622) = v329;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v327, v310, v311, v312, v313, v314, v315);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v336 = *(_DWORD *)(v620 + 4 * v622);
    if (v336)
    {
      CollWords = StateMgr::getCollWords(v607, *(_DWORD *)(v620 + 4 * v622), 0xFFFFu, 1, v332, v333, v334, v335);
      v338 = *(unsigned int *)(CollWords + 8);
      if ((_DWORD)v338)
      {
        for (i = 0; i < v338; ++i)
        {
          v340 = *(unsigned int *)(*(_QWORD *)CollWords + 4 * i);
          v341 = *((_QWORD *)v610 + 6);
          if (*(_DWORD *)(v341 + 388) > v340
            && *(_BYTE *)(*(_QWORD *)(v341 + 104) + v340)
            && *(_DWORD *)(*(_QWORD *)(v341 + 256) + 4 * v340) == (_DWORD)v340)
          {
            WordName = GetWordName(a3, v340, 0, 0, v332, v333, v334, v335);
            DgnString::DgnString((DgnString *)&v617, WordName);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateIncludedWord");
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v336);
            if ((_DWORD)v618)
              v343 = (char *)v617;
            else
              v343 = &byte_209A88803;
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), v343);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
            DgnTextFileWriter::writeNextLine(v629);
            DgnString::~DgnString((DgnString *)&v617);
            v338 = *(unsigned int *)(CollWords + 8);
          }
        }
      }
    }
    v344 = *(_DWORD *)(v620 + 4 * v622);
    *(_DWORD *)(v620 + 4 * v622) = 0;
    v345 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v345 >= v621;
      v346 = v345 - v621;
      if (v28)
        LODWORD(v622) = v346;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v344, v330, v331, v332, v333, v334, v335);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v353 = *(_DWORD *)(v620 + 4 * v622);
    if (v353)
    {
      StateTransition = StateMgr::getStateTransition(v607, *(_DWORD *)(v620 + 4 * v622), 1, v348, v349, v350, v351, v352);
      if (*(_DWORD *)(StateTransition + 8))
      {
        v355 = 0;
        do
        {
          v356 = *(_DWORD *)(*(_QWORD *)StateTransition + 4 * v355);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateTransitionState");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v353);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), v356);
          DgnTextFileWriter::writeNextLine(v629);
          ++v355;
        }
        while (v355 < *(unsigned int *)(StateTransition + 8));
      }
    }
    v357 = *(_DWORD *)(v620 + 4 * v622);
    *(_DWORD *)(v620 + 4 * v622) = 0;
    v358 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v358 >= v621;
      v359 = v358 - v621;
      if (v28)
        LODWORD(v622) = v359;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v357, v347, v348, v349, v350, v351, v352);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  v360 = (CollMgr *)*((_QWORD *)v610 + 2);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    v367 = v622;
    v368 = v620;
    v369 = *(_DWORD *)(v620 + 4 * v622);
    if (v369)
    {
      Colls = StateMgr::getColls(v84, *(_DWORD *)(v620 + 4 * v622), 1, v362, v363, v364, v365, v366);
      v617 = 0;
      v618 = 0;
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)&v617, (uint64_t *)Colls, 0, *(_DWORD *)(Colls + 8));
      if ((_DWORD)v618)
      {
        v376 = 0;
        do
        {
          v377 = *((unsigned __int16 *)v617 + v376);
          CollationName = "_IDENTITY";
          if (v377 != 65534)
            CollationName = (const char *)CollMgr::getCollationName(v360, v377, (uint64_t)"_IDENTITY", v371, v372, v373, v374, v375);
          DgnString::DgnString((DgnString *)&v615, CollationName);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowedCollations");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v369);
          if (v616)
            v379 = v615;
          else
            v379 = &byte_209A88803;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), v379);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
          DgnTextFileWriter::writeNextLine(v629);
          DgnString::~DgnString((DgnString *)&v615);
          ++v376;
        }
        while (v376 < v618);
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v617);
      v367 = v622;
      v368 = v620;
      v380 = *(_DWORD *)(v620 + 4 * v622);
      v84 = v607;
    }
    else
    {
      v380 = 0;
    }
    *(_DWORD *)(v368 + 4 * v367) = 0;
    v381 = v622 + 1;
    v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      v622 = 0;
    }
    else
    {
      v28 = v381 >= v621;
      v382 = v381 - v621;
      if (v28)
        LODWORD(v622) = v382;
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v380, v361, v362, v363, v364, v365, v366);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  v383 = (EnvMgr *)*((_QWORD *)v84 + 94);
  v617 = 0;
  v618 = 0;
  EnvMgr::getItemsWithEnv((unint64_t)v383, (uint64_t)&v617);
  DgnString::DgnString((DgnString *)&v615);
  if ((_DWORD)v618)
  {
    v384 = 0;
    do
    {
      v385 = *((_DWORD *)v617 + v384);
      ItemEnvId = EnvMgr::getItemEnvId(v383, v385);
      NameIds = EnvMgr::getNameIds(v383, ItemEnvId, v387, v388, v389, v390, v391, v392);
      Values = EnvMgr::getValues(v383, ItemEnvId, v394, v395, v396, v397, v398, v399);
      if (*(_DWORD *)(NameIds + 8))
      {
        v401 = (_QWORD *)Values;
        v402 = 0;
        v403 = 0;
        do
        {
          v404 = (char *)EnvMgr::getName(v383, *(unsigned __int16 *)(*(_QWORD *)NameIds + 2 * v403));
          DgnTextFile::convertToEnvValueFormat(*v401 + v402, (DgnString *)&v615);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateEnv");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v385);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), v404);
          if (v616)
            v405 = v615;
          else
            v405 = &byte_209A88803;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), v405);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
          DgnTextFileWriter::writeNextLine(v629);
          ++v403;
          v402 += 16;
        }
        while (v403 < *(unsigned int *)(NameIds + 8));
      }
      ++v384;
    }
    while (v384 < v618);
  }
  if (v617)
  {
    MemChunkFree(v617, 0);
    v617 = 0;
  }
  v618 = 0;
  v614[0] = 0;
  v614[1] = 0;
  EnvMgr::getItemPairsWithEnv((unint64_t)v383, (uint64_t)&v617, (uint64_t)v614);
  if ((_DWORD)v618)
  {
    v410 = 0;
    do
    {
      v411 = *((_DWORD *)v617 + v410);
      v412 = GetWordName(a3, *(_DWORD *)(v614[0] + 4 * v410), 0, 0, v406, v407, v408, v409);
      DgnString::DgnString((DgnString *)&v619, v412);
      ItemPairEnvId = EnvMgr::getItemPairEnvId(v383, *((_DWORD *)v617 + v410), *(_DWORD *)(v614[0] + 4 * v410));
      v420 = EnvMgr::getNameIds(v383, ItemPairEnvId, v414, v415, v416, v417, v418, v419);
      v427 = EnvMgr::getValues(v383, ItemPairEnvId, v421, v422, v423, v424, v425, v426);
      if (*(_DWORD *)(v420 + 8))
      {
        v428 = (_QWORD *)v427;
        v429 = 0;
        v430 = 0;
        do
        {
          v431 = (char *)EnvMgr::getName(v383, *(unsigned __int16 *)(*(_QWORD *)v420 + 2 * v430));
          DgnTextFile::convertToEnvValueFormat(*v428 + v429, (DgnString *)&v615);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateIncludedWordEnv");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v411);
          if ((_DWORD)v620)
            v432 = (char *)v619;
          else
            v432 = &byte_209A88803;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), v432);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), v431);
          if (v616)
            v433 = v615;
          else
            v433 = &byte_209A88803;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), v433);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
          DgnTextFileWriter::writeNextLine(v629);
          ++v430;
          v429 += 16;
        }
        while (v430 < *(unsigned int *)(v420 + 8));
      }
      DgnString::~DgnString((DgnString *)&v619);
      ++v410;
    }
    while (v410 < v618);
  }
  v611 = (RuleMgr *)*((_QWORD *)v610 + 8);
  if (!RuleMgr::isEmpty(v611))
  {
    ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
    while (v623)
    {
      v440 = *(_DWORD *)(v620 + 4 * v622);
      ChildRules = StateMgr::getChildRules(v607, v440, v434, v435, v436, v437, v438, v439);
      if (*(_DWORD *)(ChildRules + 8))
      {
        v448 = 0;
        do
        {
          v449 = *(unsigned __int16 *)(*(_QWORD *)ChildRules + 2 * v448);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "RuleDefinition");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v449);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), v440);
          DgnTextFileWriter::writeNextLine(v629);
          ++v448;
        }
        while (v448 < *(unsigned int *)(ChildRules + 8));
      }
      v450 = *(_DWORD *)(v620 + 4 * v622);
      *(_DWORD *)(v620 + 4 * v622) = 0;
      v451 = v622 + 1;
      v27 = v623 == 1;
      LODWORD(v622) = v622 + 1;
      --v623;
      if (v27)
      {
        v622 = 0;
      }
      else
      {
        v28 = v451 >= v621;
        v452 = v451 - v621;
        if (v28)
          LODWORD(v622) = v452;
      }
      ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v450, v441, v442, v443, v444, v445, v446);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  }
  if (!RuleMgr::isEmpty(v611))
  {
    ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
    while (v623)
    {
      v465 = StateMgr::getChildRules(v607, *(_DWORD *)(v620 + 4 * v622), v453, v454, v455, v456, v457, v458);
      if (*(_DWORD *)(v465 + 8))
      {
        v466 = 0;
        do
        {
          v467 = *(unsigned __int16 *)(*(_QWORD *)v465 + 2 * v466);
          v468 = (const char *)RuleMgr::getName(v611, v467, v459, v460, v461, v462, v463, v464);
          DgnString::DgnString((DgnString *)&v612, v468);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "RuleName");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v467);
          if (v613)
            v469 = v612;
          else
            v469 = &byte_209A88803;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), v469);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
          DgnTextFileWriter::writeNextLine(v629);
          DgnString::~DgnString((DgnString *)&v612);
          ++v466;
        }
        while (v466 < *(unsigned int *)(v465 + 8));
      }
      v470 = *(_DWORD *)(v620 + 4 * v622);
      *(_DWORD *)(v620 + 4 * v622) = 0;
      v471 = v622 + 1;
      v27 = v623 == 1;
      LODWORD(v622) = v622 + 1;
      --v623;
      if (v27)
      {
        v622 = 0;
      }
      else
      {
        v28 = v471 >= v621;
        v472 = v471 - v621;
        if (v28)
          LODWORD(v622) = v472;
      }
      ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v470, v459, v460, v461, v462, v463, v464);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  }
  if (!RuleMgr::isEmpty(v611))
  {
    ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
    while (v623)
    {
      v485 = StateMgr::getChildRules(v607, *(_DWORD *)(v620 + 4 * v622), v473, v474, v475, v476, v477, v478);
      if (*(_DWORD *)(v485 + 8))
      {
        v486 = 0;
        do
        {
          v487 = *(unsigned __int16 *)(*(_QWORD *)v485 + 2 * v486);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "RuleAllowLM");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v487);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
          v488 = *((_DWORD *)this + 7);
          v495 = RuleMgr::getLMAllowed(v611, v487, v489, v490, v491, v492, v493, v494);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v488, v495);
          DgnTextFileWriter::writeNextLine(v629);
          ++v486;
        }
        while (v486 < *(unsigned int *)(v485 + 8));
      }
      v496 = *(_DWORD *)(v620 + 4 * v622);
      *(_DWORD *)(v620 + 4 * v622) = 0;
      v497 = v622 + 1;
      v27 = v623 == 1;
      LODWORD(v622) = v622 + 1;
      --v623;
      if (v27)
      {
        v622 = 0;
      }
      else
      {
        v28 = v497 >= v621;
        v498 = v497 - v621;
        if (v28)
          LODWORD(v622) = v498;
      }
      ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v496, v479, v480, v481, v482, v483, v484);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  }
  if (!RuleMgr::isEmpty(v611))
  {
    ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
    while (v623)
    {
      v511 = StateMgr::getChildRules(v607, *(_DWORD *)(v620 + 4 * v622), v499, v500, v501, v502, v503, v504);
      if (*(_DWORD *)(v511 + 8))
      {
        v512 = 0;
        do
        {
          v513 = *(unsigned __int16 *)(*(_QWORD *)v511 + 2 * v512);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "RuleAllowCoart");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v513);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
          v514 = *((_DWORD *)this + 7);
          v521 = RuleMgr::getCoartAllowed(v611, v513, v515, v516, v517, v518, v519, v520);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v514, v521);
          DgnTextFileWriter::writeNextLine(v629);
          ++v512;
        }
        while (v512 < *(unsigned int *)(v511 + 8));
      }
      v522 = *(_DWORD *)(v620 + 4 * v622);
      *(_DWORD *)(v620 + 4 * v622) = 0;
      v523 = v622 + 1;
      v27 = v623 == 1;
      LODWORD(v622) = v622 + 1;
      --v623;
      if (v27)
      {
        v622 = 0;
      }
      else
      {
        v28 = v523 >= v621;
        v524 = v523 - v621;
        if (v28)
          LODWORD(v622) = v524;
      }
      ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v522, v505, v506, v507, v508, v509, v510);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  }
  if (!RuleMgr::isEmpty(v611))
  {
    ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
    while (v623)
    {
      v537 = StateMgr::getChildRules(v607, *(_DWORD *)(v620 + 4 * v622), v525, v526, v527, v528, v529, v530);
      if (*(_DWORD *)(v537 + 8))
      {
        v538 = 0;
        do
        {
          v539 = *(unsigned __int16 *)(*(_QWORD *)v537 + 2 * v538);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "RuleAllowPrefiltering");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v539);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_209A88803);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
          v540 = *((_DWORD *)this + 7);
          v547 = RuleMgr::getPrefilteringAllowed(v611, v539, v541, v542, v543, v544, v545, v546);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v540, v547);
          DgnTextFileWriter::writeNextLine(v629);
          ++v538;
        }
        while (v538 < *(unsigned int *)(v537 + 8));
      }
      v548 = *(_DWORD *)(v620 + 4 * v622);
      *(_DWORD *)(v620 + 4 * v622) = 0;
      v549 = v622 + 1;
      v27 = v623 == 1;
      LODWORD(v622) = v622 + 1;
      --v623;
      if (v27)
      {
        v622 = 0;
      }
      else
      {
        v28 = v549 >= v621;
        v550 = v549 - v621;
        if (v28)
          LODWORD(v622) = v550;
      }
      ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v548, v531, v532, v533, v534, v535, v536);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  }
  if (!RuleMgr::isEmpty(v611))
  {
    ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
    while (v623)
    {
      v557 = StateMgr::getChildRules(v607, *(_DWORD *)(v620 + 4 * v622), v551, v552, v553, v554, v555, v556);
      v564 = (_QWORD *)v557;
      if (*(_DWORD *)(v557 + 8))
      {
        v565 = 0;
        v608 = v557;
        do
        {
          v566 = *(unsigned __int16 *)(*v564 + 2 * v565);
          Desc = RuleMgr::getDesc(v611, v566, v558, v559, v560, v561, v562, v563);
          if (*(_DWORD *)(Desc + 8))
          {
            v568 = 0;
            v569 = 0;
            do
            {
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "RuleDescription");
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v566);
              v570 = *(_QWORD *)Desc;
              switch(*(_DWORD *)(*(_QWORD *)Desc + v568))
              {
                case 0:
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), "EndOperation");
                  v571 = *((_DWORD *)this + 5);
                  v572 = *(_DWORD *)(v570 + v568 + 8);
                  v573 = "Optional";
                  if (v572 <= 2)
                    goto LABEL_374;
                  goto LABEL_375;
                case 1:
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), "State");
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
                  v580 = *(_DWORD *)(v570 + v568 + 8);
                  goto LABEL_377;
                case 2:
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), "Rule");
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
                  v580 = *(unsigned __int16 *)(v570 + v568 + 8);
                  goto LABEL_377;
                case 3:
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), "StartOperation");
                  v571 = *((_DWORD *)this + 5);
                  v572 = *(_DWORD *)(v570 + v568 + 8);
                  v573 = "Optional";
                  if (v572 < 3)
LABEL_374:
                    v573 = off_24C21F328[v572];
LABEL_375:
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, v571, v573);
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
                  v580 = 0;
                  goto LABEL_377;
                case 4:
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), "Word");
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_209A88803);
                  v574 = *((_DWORD *)this + 6);
                  v579 = GetWordName(a3, *(_DWORD *)(v570 + v568 + 8), 0, 0, v575, v576, v577, v578);
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, v574, v579);
                  v580 = *(_DWORD *)(v570 + v568 + 4);
LABEL_377:
                  DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), v580);
                  break;
                default:
                  break;
              }
              DgnTextFileWriter::writeNextLine(v629);
              ++v569;
              v568 += 12;
            }
            while (v569 < *(unsigned int *)(Desc + 8));
          }
          ++v565;
          v564 = (_QWORD *)v608;
        }
        while (v565 < *(unsigned int *)(v608 + 8));
      }
      v581 = *(_DWORD *)(v620 + 4 * v622);
      *(_DWORD *)(v620 + 4 * v622) = 0;
      v582 = v622 + 1;
      v27 = v623 == 1;
      LODWORD(v622) = v622 + 1;
      --v623;
      if (v27)
      {
        v622 = 0;
      }
      else
      {
        v28 = v582 >= v621;
        v583 = v582 - v621;
        if (v28)
          LODWORD(v622) = v583;
      }
      ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v581, v558, v559, v560, v561, v562, v563);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  }
  v584 = (EnvMgr *)*((_QWORD *)v611 + 10);
  v619 = 0;
  v620 = 0;
  EnvMgr::getItemsWithEnv((unint64_t)v584, (uint64_t)&v619);
  if ((_DWORD)v620)
  {
    v585 = 0;
    do
    {
      v586 = *((_DWORD *)v619 + v585);
      v587 = EnvMgr::getItemEnvId(v584, v586);
      v594 = EnvMgr::getNameIds(v584, v587, v588, v589, v590, v591, v592, v593);
      v601 = EnvMgr::getValues(v584, v587, v595, v596, v597, v598, v599, v600);
      if (*(_DWORD *)(v594 + 8))
      {
        v602 = (_QWORD *)v601;
        v603 = 0;
        v604 = 0;
        do
        {
          v605 = (char *)EnvMgr::getName(v584, *(unsigned __int16 *)(*(_QWORD *)v594 + 2 * v604));
          DgnTextFile::convertToEnvValueFormat(*v602 + v603, (DgnString *)&v615);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "RuleEnv");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), (unsigned __int16)v586);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), v605);
          if (v616)
            v606 = v615;
          else
            v606 = &byte_209A88803;
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), v606);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_209A88803);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
          DgnTextFileWriter::writeNextLine(v629);
          ++v604;
          v603 += 16;
        }
        while (v604 < *(unsigned int *)(v594 + 8));
      }
      ++v585;
    }
    while (v585 < v620);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v619);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v614);
  DgnString::~DgnString((DgnString *)&v615);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v617);
  DgnArray<DgnString>::releaseAll((uint64_t)v624);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v625);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v627);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v629);
}

void sub_20994A990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a16);
  DgnString::~DgnString((DgnString *)&a18);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a20);
  DgnArray<DgnString>::releaseAll((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a29);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a31);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)&a33);
  _Unwind_Resume(a1);
}

uint64_t *UserMgr::startupUserMgr(uint64_t a1)
{
  uint64_t *result;

  result = MemChunkAlloc(8uLL, 0);
  *result = a1;
  UserMgr::smpUserMgr = (uint64_t)result;
  return result;
}

void UserMgr::printSize(UserMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/usermgr.cpp", 61, (DgnString *)&v31);
  if (v32)
    v15 = v31;
  else
    v15 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_209A88803, a3, &byte_209A88803, v15);
  DgnString::~DgnString((DgnString *)&v31);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_209A88803);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v20 = 4;
  else
    v20 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/usermgr.cpp", 62, (DgnString *)&v31);
  if (v32)
    v25 = v31;
  else
    v25 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v25, v20, v20, 0);
  DgnString::~DgnString((DgnString *)&v31);
  *a4 += v20;
  *a5 += v20;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/usermgr.cpp", 63, (DgnString *)&v31);
  if (v32)
    v30 = v31;
  else
    v30 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, a3, &byte_209A88803, (35 - a3), (35 - a3), v30, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v31);
}

void sub_20994AE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MrecInitModule_btlat_kernel(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;

  if (!gParDebugLatticeConstruction)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugLatticeConstruction", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugLatticeConstruction = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugLatticeConstruction);
  }
  if (!gParDebugLatticeWatchTheseWords)
  {
    v2 = MemChunkAlloc(0x48uLL, 0);
    StringGlobalParamBase::StringGlobalParamBase((StringGlobalParamBase *)v2, "DebugLatticeWatchTheseWords", &byte_209A88803, &byte_209A88803, &byte_209A88803, 0, 0);
    *v3 = &unk_24C215D48;
    gParDebugLatticeWatchTheseWords = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugLatticeWatchTheseWords);
  }
}

uint64_t BackTraceItem::computeHash(_DWORD *a1)
{
  unint64_t v2;

  HIDWORD(v2) = CWIDAC::computeHash((uint64_t)a1);
  LODWORD(v2) = HIDWORD(v2);
  HIDWORD(v2) = (v2 >> 19) + a1[6];
  LODWORD(v2) = HIDWORD(v2);
  HIDWORD(v2) = (v2 >> 19) + a1[7];
  LODWORD(v2) = HIDWORD(v2);
  HIDWORD(v2) = (v2 >> 19) + a1[8];
  LODWORD(v2) = HIDWORD(v2);
  HIDWORD(v2) = (v2 >> 19) + a1[9];
  LODWORD(v2) = HIDWORD(v2);
  HIDWORD(v2) = (v2 >> 19) + a1[10];
  LODWORD(v2) = HIDWORD(v2);
  HIDWORD(v2) = (v2 >> 19) + a1[11];
  LODWORD(v2) = HIDWORD(v2);
  HIDWORD(v2) = (v2 >> 19) + a1[13];
  LODWORD(v2) = HIDWORD(v2);
  return (v2 >> 19) + a1[14];
}

uint64_t BackTraceNodeCache::sizeObject(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sizeObject<unsigned int>(a1 + 8, a2);
  v4 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 8;
  if (a2 == 3)
  {
    v4 = 0;
    v5 = v3;
  }
  else
  {
    v5 = v3 + 1;
  }
  return v5 + v4;
}

uint64_t BackTraceNodeCache::createNodeCache(int a1, uint64_t a2, char a3, char a4)
{
  uint64_t *v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  switch(a1)
  {
    case 0:
      v7 = MemChunkAlloc(0x98uLL, 0);
      result = BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::BtNodeCacheType((uint64_t)v7, a2, a3, a4);
      break;
    case 1:
      v9 = MemChunkAlloc(0x98uLL, 0);
      result = BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::BtNodeCacheType((uint64_t)v9, a2, a3, a4);
      break;
    case 2:
      v10 = MemChunkAlloc(0x98uLL, 0);
      result = BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::BtNodeCacheType((uint64_t)v10, a2, a3, a4);
      break;
    case 3:
      v11 = MemChunkAlloc(0x98uLL, 0);
      result = BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::BtNodeCacheType((uint64_t)v11, a2, a3, a4);
      break;
    case 4:
      v12 = MemChunkAlloc(0x98uLL, 0);
      result = BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::BtNodeCacheType((uint64_t)v12, a2, a3, 0);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t BtNBestResult::init(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;

  v6 = *a1;
  if (v6)
    DgnDelete<NetNBestAlg>(v6);
  v7 = MemChunkAlloc(0x98uLL, 0);
  result = NetNBestAlg::NetNBestAlg((uint64_t)v7, a2, a3);
  *a1 = result;
  return result;
}

uint64_t DgnDelete<NetNBestAlg>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnPrimArray<unsigned int>::~DgnPrimArray(result + 136);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v1 + 13));
    DgnPriorityQueue<NBestQueueItem>::~DgnPriorityQueue((uint64_t)(v1 + 4));
    BitArray::~BitArray((BitArray *)(v1 + 2));
    return MemChunkFree(v1, 0);
  }
  return result;
}

void BtNBestResult::prepare(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  int v5;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  if (*(_BYTE *)(a1 + 93))
  {
    v5 = *a3;
    *(_DWORD *)(a1 + 8) = *a3;
    *(_DWORD *)(a1 + 12) = a3[1];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a3 + 2);
    if (!*(_BYTE *)(a1 + 94) && v5 != -50331650)
    {
      v9 = *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + (((unint64_t)*a3 >> 22) & 0x3F8)) + 184);
      BitArray::setSizeNoGrow((BitArray *)(a1 + 40), 0);
      BitArray::setSize((BitArray *)(a1 + 40), v9);
      *(_BYTE *)(a1 + 92) = 0;
      *(_QWORD *)(a1 + 32) = a2;
      *(_DWORD *)(a1 + 88) = a4;
      v10 = *(_DWORD *)(a1 + 64);
      if (v10 >= 1)
      {
        v11 = (_DWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v12 = *(unsigned int *)(a1 + 64);
        do
        {
          *v11 = 0;
          v11 += 4;
          --v12;
        }
        while (v12);
      }
      while (v10 < v9)
      {
        if (v10 == *(_DWORD *)(a1 + 68))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 56, 1, 1);
          v10 = *(_DWORD *)(a1 + 64);
        }
        v13 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v10);
        *v13 = 0;
        v13[1] = 0;
        v10 = *(_DWORD *)(a1 + 64) + 1;
        *(_DWORD *)(a1 + 64) = v10;
      }
      *(_DWORD *)(a1 + 80) = 0;
    }
  }
}

uint64_t sizeObject<HistoryAndBigScore>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;

  v10 = 0x70000000FFFFFFFELL;
  v11 = 1879048192;
  v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 12;
  else
    v5 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = v4;
    v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      v8 = v7 + 1;
      do
        v5 += sizeObject(*(_QWORD *)a1 + 12 * (v8-- - 2), a2);
      while (v8 > 1);
    }
    if (!a2)
      v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
  return v5;
}

uint64_t BackTraceLatticeBuilder::BackTraceLatticeBuilder(uint64_t a1, Constraint *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7, int a8, double a9, int a10, int a11, int a12, unsigned int a13, int a14, int a15, int a16, char a17, char a18, char a19, int a20,int a21,char a22,char a23,char a24,uint64_t a25,int a26)
{
  uint64_t v31;
  const Constraint *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;

  *(_BYTE *)a1 = a19;
  *(_QWORD *)(a1 + 4) = 0x7000000000000000;
  v31 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = v31;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a5;
  *(_BYTE *)(a1 + 64) = a6;
  Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::Hash(a1 + 72, 0, 128);
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 196) = 0x3FFF;
  *(_OWORD *)(a1 + 200) = xmmword_209A593D0;
  *(_QWORD *)(a1 + 216) = 0;
  DgnString::DgnString((DgnString *)(a1 + 224));
  *(_BYTE *)(a1 + 277) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = -16;
  *(_QWORD *)(a1 + 340) = 0x3FFFFCFFFFFDLL;
  *(_OWORD *)(a1 + 348) = xmmword_209A593D0;
  *(_BYTE *)(a1 + 364) = 0;
  *(_DWORD *)(a1 + 366) = 1310720000;
  *(_WORD *)(a1 + 370) = 0;
  *(_DWORD *)(a1 + 372) = -2;
  *(_QWORD *)(a1 + 376) = 1879048192;
  *(double *)(a1 + 384) = a9;
  *(_DWORD *)(a1 + 392) = a8;
  *(_DWORD *)(a1 + 396) = a10;
  *(_DWORD *)(a1 + 400) = a11;
  *(_DWORD *)(a1 + 404) = a12;
  *(_DWORD *)(a1 + 408) = a13;
  *(_DWORD *)(a1 + 412) = a14;
  *(_DWORD *)(a1 + 416) = a15;
  *(_DWORD *)(a1 + 420) = a16;
  *(_BYTE *)(a1 + 424) = a17;
  *(_BYTE *)(a1 + 425) = a18;
  *(_DWORD *)(a1 + 432) = a20;
  *(_DWORD *)(a1 + 436) = a21;
  *(_BYTE *)(a1 + 440) = a22;
  *(_BYTE *)(a1 + 441) = a23;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 512) = a24;
  *(_QWORD *)(a1 + 520) = a25;
  *(_DWORD *)(a1 + 528) = a26;
  *(_DWORD *)(a1 + 532) = a7;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 560) = 0;
  if (MemChunkRegion::isObjectFromCurrentRegion<Constraint>(a2, (const void *)a13))
  {
    v33 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    Constraint::cloneConstraint(a2, v32);
    v33 = v34;
    *(_QWORD *)(a1 + 40) = v34;
    *(_QWORD *)(a1 + 48) = v34;
  }
  *(_QWORD *)(a1 + 280) = BackTraceNodeCache::createNodeCache(*(_DWORD *)(a1 + 532), v33, *(_BYTE *)(a1 + 64), a23);
  if (*(_BYTE *)(a1 + 425))
  {
    v35 = MemChunkAlloc(0x70uLL, 0);
    *(_QWORD *)(a1 + 560) = Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::Hash((uint64_t)v35, 0, 128);
  }
  v36 = MemChunkAlloc(0x68uLL, 0);
  *(_QWORD *)(a1 + 288) = HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::HashKEV((uint64_t)v36, 0, 128);
  if (*(_BYTE *)(a1 + 512))
    *(_BYTE *)(*(_QWORD *)(a1 + 56) + 50) = 0;
  return a1;
}

{
  return BackTraceLatticeBuilder::BackTraceLatticeBuilder(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

void sub_20994B5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, BackTraceItemCache *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::~Hash(v12);
  _Unwind_Resume(a1);
}

BOOL MemChunkRegion::isObjectFromCurrentRegion<Constraint>(MemChunkRegion *a1, const void *a2)
{
  void **v3;
  void *v4;

  if (MemChunkRegion::smTlsID == -1)
    goto LABEL_5;
  v3 = (void **)pthread_getspecific(MemChunkRegion::smTlsID);
  if (!v3)
    goto LABEL_5;
  v4 = *v3;
  if (!*v3)
  {
    pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_5:
    v4 = &gGlobalMemChunkRegion;
  }
  return v4 == (void *)MemChunkRegion::getBlockRegion(a1, a2);
}

void BackTraceLatticeBuilder::~BackTraceLatticeBuilder(Constraint **this)
{
  Constraint *v2;
  Constraint *v3;

  DgnDelete<Constraint>(this[5]);
  this[5] = 0;
  v2 = this[35];
  if (v2)
  {
    (**(void (***)(Constraint *))v2)(this[35]);
    MemChunkFree(v2, 0);
  }
  this[35] = 0;
  v3 = this[70];
  if (v3)
  {
    (**(void (***)(Constraint *))v3)(this[70]);
    MemChunkFree(v3, 0);
  }
  this[70] = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 67));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 62));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 60));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 58));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 56));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 39));
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)(this + 37));
  BackTraceItemCache::~BackTraceItemCache((BackTraceItemCache *)(this + 36));
  BtNBestResult::~BtNBestResult((BtNBestResult *)(this + 23));
  Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::~Hash((uint64_t)(this + 9));
}

uint64_t BackTraceLatticeBuilder::getLatticeType(BackTraceLatticeBuilder *this, int a2, int a3, int a4, BOOL a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  v8 = (int)this;
  if (a3 == 2)
  {
    if ((_DWORD)this)
    {
      if ((a2 & 1) == 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/btlat.cpp", 501, (uint64_t)"kernel/btlat", 2, (uint64_t)"%.500s", a7, a8, (char)"Bigram lattice, node creation use right word, with no coarticulation");
      return 0;
    }
    else if (a2)
    {
      return 2;
    }
    else
    {
      return 3;
    }
  }
  else if (a3 == 3)
  {
    if ((a2 & 1) == 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/btlat.cpp", 481, (uint64_t)"kernel/btlat", 2, (uint64_t)"%.500s", a7, a8, (char)"Trigram lattice with no coarticulation");
    return v8 ^ 1u;
  }
  else
  {
    if (a4)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/btlat.cpp", 519, (uint64_t)"kernel/btlat", 2, (uint64_t)"%.500s", a7, a8, (char)"Unigram lattice does not work with SearchLatticeComputeOnlyBestTimes set to True");
    return 4;
  }
}

uint64_t BackTraceLatticeBuilder::getLMScore(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, LMStats *a5)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t WeightsForState;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v34;
  void *v35;
  char v36;
  void *v37;
  uint64_t v38;
  _DWORD v39[2];
  __int128 v40;
  unsigned int v41;
  int v42;
  __int128 v43;

  if (*(_BYTE *)(a1 + 512))
    *(_BYTE *)(*(_QWORD *)(a1 + 56) + 50) = 1;
  v10 = *(_DWORD *)(a2 + 4);
  v39[0] = *(_DWORD *)a2;
  v39[1] = v10;
  v40 = *(_OWORD *)(a2 + 8);
  v11 = *(_DWORD *)(a3 + 4);
  v41 = *(_DWORD *)a3;
  v42 = v11;
  v43 = *(_OWORD *)(a3 + 8);
  v12 = *Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::findBucket(a1 + 72, (uint64_t)v39);
  if (v12)
  {
    if (a4)
      *a4 = *(_DWORD *)(v12 + 64);
    if (*(_BYTE *)(a1 + 512))
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + 50) = 0;
    v13 = *(unsigned int *)(v12 + 60);
    goto LABEL_45;
  }
  v37 = 0;
  v38 = 0;
  if (*(_DWORD *)a3 == -50331651)
    v14 = (unsigned int *)a2;
  else
    v14 = (unsigned int *)a3;
  v15 = *(_QWORD *)(a1 + 48);
  if ((*(_DWORD *)(v15 + 68) & 0xFFFFFFFD) != 0)
  {
    v16 = 0;
  }
  else
  {
    WeightsForState = Constraint::getWeightsForState(v15, v14);
    v17 = WeightsForState;
    if ((*(_DWORD *)(*(_QWORD *)(a1 + 48) + 68) & 0xFFFFFFFD) != 0)
    {
      v16 = 0;
      goto LABEL_32;
    }
    if ((_DWORD)WeightsForState != 0xFFFF)
    {
      v19 = (unint64_t)*v14 >> 25;
      v20 = v19 + 1;
      if (HIDWORD(v38) <= v19)
      {
        v35 = 0;
        HIDWORD(v38) = realloc_array(v37, &v35, 16 * v20, 16 * v38, 16 * v38, 1) >> 4;
        v37 = v35;
      }
      v34 = v19;
      if (v38 <= v20)
      {
        if (v38 <= v19)
        {
          v23 = v19 - v38 + 1;
          v24 = 16 * v38;
          do
          {
            v25 = (char *)v37 + v24;
            *v25 = 0;
            v25[1] = 0;
            v24 += 16;
            --v23;
          }
          while (v23);
        }
      }
      else
      {
        v21 = (int)v38;
        if ((int)v38 > (int)v20)
        {
          v22 = 16 * (int)v38 - 16;
          do
          {
            --v21;
            DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v37 + v22);
            v22 -= 16;
          }
          while (v21 > (v19 + 1));
        }
      }
      LODWORD(v38) = v19 + 1;
      v26 = (char *)v37 + 16 * v19;
      v27 = (char *)v37 + 16 * v34;
      v30 = *((_DWORD *)v27 + 2);
      v29 = (unsigned int *)(v27 + 8);
      v28 = v30;
      if (v30 == *((_DWORD *)v26 + 3))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)v37 + 16 * v34, 1, 1);
        v28 = *v29;
      }
      *(_DWORD *)(*(_QWORD *)v26 + 4 * v28) = v17;
      ++*v29;
      v16 = &v37;
      goto LABEL_32;
    }
    v16 = &v37;
  }
  v17 = 0xFFFFLL;
LABEL_32:
  if (*(_DWORD *)(a3 + 20) == -83886084)
  {
    v35 = *(void **)(a1 + 56);
    v36 = 1;
    SearchLMScorer::setContext((uint64_t)v35, 4211081212, (unsigned int *)a2, 0, 1, (uint64_t)v16, a5, 0, 0xFAFFFFFC, 0xFAFFFFFC);
    if (*(_DWORD *)a3 == -50331651)
    {
      v13 = SearchLMScorer::lmScoreFinalSilence(*(SearchLMScorer **)(a1 + 56), a5);
    }
    else if ((*(_DWORD *)a3 & 0xFFFFFF) == 0xFFFFF8)
    {
      v13 = 0;
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 432)
          + SearchLMScorer::lmScoreNonSilCwidac(*(_QWORD *)(a1 + 56), (unsigned int *)a3, a5);
    }
    SearchLMContext::~SearchLMContext((SearchLMContext *)&v35);
    v31 = 0;
  }
  else
  {
    v35 = *(void **)(a1 + 56);
    v36 = 1;
    SearchLMScorer::setContext((uint64_t)v35, 4211081212, (unsigned int *)a2, 0, 1, (uint64_t)v16, a5, 0, 0xFAFFFFFC, 0xFAFFFFFC);
    v31 = SearchLMScorer::lmScoreNonAcousticWord(*(SearchLMScorer **)(a1 + 56), *(_DWORD *)(a3 + 20), v17, a5);
    SearchLMContext::~SearchLMContext((SearchLMContext *)&v35);
    v32 = *(_DWORD *)(a3 + 20);
    v35 = *(void **)(a1 + 56);
    v36 = 1;
    SearchLMScorer::setContext((uint64_t)v35, 4211081212, (unsigned int *)a2, 0, 1, (uint64_t)v16, a5, 1, v32, 0xFAFFFFFC);
    v13 = SearchLMScorer::lmScoreNonSilCwidac(*(_QWORD *)(a1 + 56), (unsigned int *)a3, a5)
        + v31
        + *(_DWORD *)(a1 + 432);
    SearchLMContext::~SearchLMContext((SearchLMContext *)&v35);
  }
  v35 = (void *)__PAIR64__(v31, v13);
  Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::add(a1 + 72, (uint64_t)v39, &v35);
  if (a4)
    *a4 = v31;
  if (*(_BYTE *)(a1 + 512))
    *(_BYTE *)(*(_QWORD *)(a1 + 56) + 50) = 0;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v37);
LABEL_45:
  MrecInitModule_sdpres_sdapi();
  return v13;
}

void sub_20994BD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::add(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1)
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v6);
  v7 = CWIDACPair::computeHash(a2);
  v8 = *(_DWORD *)(a1 + 16);
  if (v8)
    v9 = (-1640531527 * v7) >> -(char)v8;
  else
    v9 = 0;
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 32);
  if (!v11)
  {
    DgnPool::addChunk((DgnPool *)(a1 + 24));
    v11 = *(_QWORD *)(a1 + 32);
  }
  v12 = (_QWORD *)(v10 + 8 * v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v11;
  *(_DWORD *)(v11 + 8) = 0;
  CWIDACPair::CWIDACPair(v11 + 12, a2);
  *(_QWORD *)(v11 + 60) = *a3;
  *(_DWORD *)(v11 + 8) = v7;
  ++*(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 20))
  {
    *(_QWORD *)v11 = *v12;
  }
  else
  {
    *(_QWORD *)v11 = 0;
    v13 = (_QWORD *)*v12;
    if (*v12)
    {
      do
      {
        v12 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
  }
  *v12 = v11;
}

uint64_t BackTraceLatticeBuilder::bootStrap(BackTraceNodeCache **this, WordLattice *a2, PelScorer *a3, BOOL a4, LMStats *a5)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int32x2_t v10;
  uint64_t v11;
  int FinalSilFrameScore;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v24;
  unsigned int v25[2];

  result = BackTraceNodeCache::createEndNode(this[35], a2);
  v24 = result;
  v7 = *((unsigned int *)this + 1);
  v8 = v7 - 1;
  *((_DWORD *)this + 82) = v7 - 1;
  if ((int)v7 >= 1)
  {
    v9 = 0;
    if (!*((_BYTE *)this[2] + 48))
      v8 = v7;
    v10 = vdup_n_s32(v8);
    do
    {
      v11 = v7 - 1;
      result = CWIDCrumbBank::hasRightSilenceCrumb(this[2], (int)v7 - 1);
      if (!(_DWORD)result)
        break;
      FinalSilFrameScore = CWIDCrumbBank::getFinalSilFrameScore(this[2], (int)v7 - 1);
      *(_QWORD *)v25 = 0;
      result = CWIDCrumbBank::getRightSilenceInfo((uint64_t)this[2], (int)v7 - 1, &v25[1], (int *)v25);
      v13 = *((_QWORD *)this[3] + 1);
      v14 = *(_DWORD *)(v13 + 36 * v25[1] + 32);
      v15 = *(_DWORD *)(v13 + 36 * v14 + 28);
      v9 += FinalSilFrameScore;
      v16 = *((unsigned __int8 *)this + 424);
      if (*((_BYTE *)this + 424) && (_DWORD)v11 != v15)
        goto LABEL_14;
      v17 = *(_DWORD *)(*((_QWORD *)a2 + 10) + 24 * v24);
      v18 = *((_BYTE *)this + 512) ? v25[1] : v14;
      v19 = (uint64_t)this[37] + 16 * v11;
      v21 = (unsigned int *)(v19 + 8);
      v20 = *(_DWORD *)(v19 + 8);
      if (v20 == *(_DWORD *)(v19 + 12))
      {
        result = DgnArray<BackTraceItem>::reallocElts((uint64_t)this[37] + 16 * v11, 1, 1);
        v20 = *v21;
        v16 = *((unsigned __int8 *)this + 424);
      }
      v22 = *(_QWORD *)v19 + ((unint64_t)v20 << 6);
      *(_QWORD *)v22 = 0x3FFFFCFFFFFDLL;
      *(_OWORD *)(v22 + 8) = xmmword_209A593D0;
      *(int32x2_t *)(v22 + 24) = v10;
      *(_DWORD *)(v22 + 32) = 0;
      *(_DWORD *)(v22 + 36) = v9;
      *(_QWORD *)(v22 + 40) = 0x7000000070000000;
      *(_DWORD *)(v22 + 48) = v24;
      *(_DWORD *)(v22 + 52) = v17;
      *(_DWORD *)(v22 + 56) = v18;
      *(_BYTE *)(v22 + 60) = 0;
      *v21 = v20 + 1;
      ++*((_DWORD *)this + 83);
      if (v16)
      {
LABEL_14:
        if ((_DWORD)v11 == v15)
        {
          *((_DWORD *)this + 82) = v7 - 1;
          return result;
        }
      }
      --v7;
    }
    while ((unint64_t)(v11 + 1) > 1);
  }
  return result;
}

uint64_t BackTraceNodeCache::createEndNode(BackTraceNodeCache *this, WordLattice *a2)
{
  uint64_t Node;
  unsigned int v4;

  Node = Lattice<WordLatticeLC>::createNode((uint64_t)a2);
  v4 = *((_DWORD *)this + 4);
  if (v4 == *((_DWORD *)this + 5))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 8, 1, 1);
    v4 = *((_DWORD *)this + 4);
  }
  *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v4) = 0;
  ++*((_DWORD *)this + 4);
  return Node;
}

double BackTraceLatticeBuilder::assembleRightGerms(BackTraceLatticeBuilder *this, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  __int16 v14;
  __int16 v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  char *v20;
  __int16 v21;
  __int16 v22;
  __n128 v23;

  *((_DWORD *)this + 84) = -2;
  v2 = *((unsigned int *)this + 82);
  v3 = *((_QWORD *)this + 37);
  if (*(_DWORD *)(v3 + 16 * v2 + 8))
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v20 = (char *)this + 312;
    v8 = 1879048192;
    v9 = -2;
    do
    {
      v10 = (int *)(*(_QWORD *)(v3 + 16 * v2) + v5);
      v11 = *v10;
      v12 = v10[9];
      v13 = v10[14];
      if (*v10 == -50331651)
      {
        *((_DWORD *)this + 84) = v10[12];
        v8 = v12;
        v9 = v13;
      }
      else
      {
        v14 = *((_WORD *)v10 + 2);
        v15 = *((_WORD *)v10 + 3);
        a2 = *(__n128 *)(v10 + 2);
        v16 = *((_BYTE *)v10 + 60);
        v17 = *((_DWORD *)this + 80);
        if (v17 == *((_DWORD *)this + 81))
        {
          v21 = v15;
          v22 = v14;
          v23 = a2;
          DgnArray<RecogGerm>::reallocElts((uint64_t)v20, 1, 1);
          v15 = v21;
          v14 = v22;
          a2 = v23;
          v17 = *((_DWORD *)this + 80);
          v2 = *((unsigned int *)this + 82);
          v3 = *((_QWORD *)this + 37);
        }
        v18 = *((_QWORD *)this + 39) + 44 * v17;
        *(_DWORD *)v18 = v11;
        *(_WORD *)(v18 + 4) = v14;
        *(_WORD *)(v18 + 6) = v15;
        *(__n128 *)(v18 + 8) = a2;
        *(_BYTE *)(v18 + 24) = v16;
        *(_DWORD *)(v18 + 26) = 1310720000;
        *(_WORD *)(v18 + 30) = 0;
        *(_DWORD *)(v18 + 32) = v13;
        *(_DWORD *)(v18 + 36) = v12;
        *(_DWORD *)(v18 + 40) = v7;
        *((_DWORD *)this + 80) = v17 + 1;
        ++v7;
      }
      ++v6;
      v5 += 64;
    }
    while (v6 < *(unsigned int *)(v3 + 16 * v2 + 8));
    if (*((_DWORD *)this + 84) != -2)
    {
      *((_DWORD *)this + 85) = -50331651;
      *((_DWORD *)this + 86) = 0x3FFF;
      a2.n128_u64[0] = 0xFFFFFFFE00000000;
      *(_OWORD *)((char *)this + 348) = xmmword_209A593D0;
      *((_BYTE *)this + 364) = 0;
      *(_DWORD *)((char *)this + 366) = 1310720000;
      *((_WORD *)this + 185) = 0;
      *((_DWORD *)this + 95) = v7;
      *((_DWORD *)this + 94) = v8;
      *((_DWORD *)this + 93) = v9;
    }
  }
  return a2.n128_f64[0];
}

uint64_t BackTraceLatticeBuilder::seedOneInContext(unint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, int a5, int a6, int a7, int a8, uint64_t a9, LMStats *a10, uint64_t a11, char a12)
{
  VocMgr *v19;
  unint64_t v20;
  unint64_t v21;
  int AccumHistScore;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int LMScore;
  uint64_t v37;
  _DWORD *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  _DWORD *v54;
  const WordLatticeLC *v55;
  signed int v56;
  int v57;
  int v58;
  int v59;
  signed int v60;
  signed int v61;
  _QWORD *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  _QWORD *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  unsigned int Link;
  char v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  _QWORD *v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  int *v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v130;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  unsigned int v136;
  VocMgr *v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  int v144;
  int v145;
  BOOL v146;
  unsigned int v147;
  uint64_t v148;
  __int128 v149;
  _BYTE v150[32];
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  unsigned int v155;
  __int16 v156;
  __int16 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  int v163;
  char v164;
  unsigned int v165;
  void (**v166)(WordLatticeLC *__hidden);
  __int128 v167;
  int v168;
  unsigned int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  __int128 v176;
  int v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  unint64_t v181;
  int v182;
  __int32 v183;
  char v184;
  unsigned int Root;
  unsigned int v186;
  unint64_t v187;
  int32x2_t v188;
  _DWORD v189[4];
  uint64_t v190;
  int v191[3];

  v19 = (VocMgr *)VocMgr::smpVocMgr;
  v20 = *a3;
  if (*a3 >> 25 == 126)
    v143 = 0;
  else
    v143 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * (v20 >> 25)) + 56);
  if (!BackTraceLatticeBuilder::canSeedInAcousticContext(a1, a4, (uint64_t)a3))
    return 0;
  v137 = v19;
  v144 = a8;
  v145 = a6;
  v133 = a7;
  v21 = *a4;
  if ((_DWORD)v21 == -50331650)
  {
    v146 = 0;
    AccumHistScore = 0;
    v23 = a4[9];
    v24 = v20;
    v136 = v23;
  }
  else
  {
    v25 = a4[8];
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v27 = (_DWORD *)(v26 + 36 * v25);
    v28 = v27[8];
    v29 = v26 + 36 * v28;
    v146 = v27[6] != v27[7];
    if ((*(_DWORD *)(*(_QWORD *)(a1 + 48) + 68) & 0xFFFFFFFD) != 0)
    {
      v30 = 0;
      LODWORD(v31) = a4[2];
    }
    else
    {
      v31 = a4[2];
      v30 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)v19 + ((v21 >> 22) & 0x3F8)) + 56) + 288)
                       + 4 * v31);
    }
    v166 = *(void (***)(WordLatticeLC *__hidden))a4;
    *(_QWORD *)((char *)&v167 + 4) = *(_QWORD *)(a4 + 3);
    v32 = a4[5];
    LODWORD(v167) = v31;
    HIDWORD(v167) = v32;
    v148 = *(_QWORD *)v29;
    v149 = *(_OWORD *)(v29 + 8);
    if (*(_BYTE *)(a1 + 512))
    {
      v33 = *(_DWORD *)(a1 + 528);
      v34 = v26 + 36 * (v25 - v33);
      v166 = *(void (***)(WordLatticeLC *__hidden))v34;
      v167 = *(_OWORD *)(v34 + 8);
      v35 = v26 + 36 * (v28 - v33);
      v148 = *(_QWORD *)v35;
      v149 = *(_OWORD *)(v35 + 8);
    }
    LMScore = BackTraceLatticeBuilder::getLMScore(a1, (uint64_t)&v148, (uint64_t)&v166, 0, a10);
    if (*(_BYTE *)(a1 + 512))
    {
      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v38 = (_DWORD *)(v37 + 36 * a4[8]);
      v39 = v38[8];
      v40 = v39 - *(_DWORD *)(a1 + 528);
      if (*v38 == -50331650)
        v41 = 0;
      else
        v41 = *(_DWORD *)(v37 + 36 * v39 + 28);
      v46 = *a4;
      if (v46 >> 25 == 126 || (v46 & 0xFFFFFF) == 0xFFFFF8)
        v47 = 0;
      else
        v47 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                                      + ((v46 >> 22) & 0x3F8))
                                                          + 48)
                                              + 592)
                                  + 2 * (v46 & 0xFFFFFF));
      AccumHistScore = CWIDCrumbBank::getAccumHistScore(*(CWIDCrumbBank **)(a1 + 520), v41 - 1, v40, v47);
    }
    else
    {
      v42 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v43 = (_DWORD *)(v42 + 36 * a4[8]);
      v44 = v43[8];
      if (*v43 == -50331650)
        v45 = 0;
      else
        v45 = *(_DWORD *)(v42 + 36 * v44 + 28);
      v48 = v45 - 1;
      v49 = *a4;
      if (v49 >> 25 == 126 || (v49 & 0xFFFFFF) == 0xFFFFF8)
        v50 = 0;
      else
        v50 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                                      + ((v49 >> 22) & 0x3F8))
                                                          + 48)
                                              + 592)
                                  + 2 * (v49 & 0xFFFFFF));
      AccumHistScore = CWIDCrumbBank::getAccumHistScore(*(CWIDCrumbBank **)(a1 + 16), v48, v44, v50);
    }
    v23 = a4[9];
    v136 = v23 - (LMScore + v30) - AccumHistScore;
    v24 = *a3;
  }
  v51 = 0;
  if (v24 >> 25 != 126 && (v24 & 0xFFFFFF) != 0xFFFFF8)
    v51 = *(_DWORD *)(a1 + 432);
  v132 = AccumHistScore;
  if (v24 == -50331651)
  {
    v52 = 0;
  }
  else
  {
    v52 = a3[10];
    if (*(_DWORD *)(a1 + 336) != -2)
      ++v52;
  }
  v53 = *(unsigned int *)(a1 + 328);
  v54 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 16 * v53) + ((unint64_t)v52 << 6));
  v55 = (const WordLatticeLC *)v54[12];
  v139 = v54[6];
  v140 = v54[7] - v139;
  if (v140)
    v141 = *(_DWORD *)(a1 + 436);
  else
    v141 = 0;
  v56 = a3[9];
  v57 = v54[10];
  if (v24 != -50331651)
  {
    if (*(_BYTE *)(a1 + 512))
    {
      if (a12)
      {
        v58 = v57 - (v56 + v145 + v54[11]);
        v59 = v58 - a5;
        if (v58 < a5)
        {
          if (a3[5] == -83886084)
            v59 = 0;
          v144 += v59;
          a5 = v57 - (v56 + v145 + v54[11]);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 64))
  {
    if (v24 != -50331651 && !*(_BYTE *)(a1 + 440))
    {
      v60 = v57 - (v23 + v145 + a5);
      if (v60 >= v56)
      {
        if (a12)
          v61 = v57 - (v23 + v145 + a5);
        else
          v61 = v60 + 1;
        if (!*(_BYTE *)(a1 + 512))
          v61 = v60 + 1;
        if (v60 != v56)
          v56 = v61;
      }
      else
      {
        ++v56;
      }
    }
  }
  else
  {
    v56 = 0;
  }
  v142 = v51;
  v138 = v54[8];
  v62 = *(_QWORD **)(a1 + 280);
  v63 = a5 + v145 + v56 + *(_DWORD *)(v62[1] + 4 * *(unsigned int *)(*(_QWORD *)(a9 + 80) + 24 * v55));
  v64 = v63 + v23;
  v191[0] = v64;
  v65 = *(_DWORD *)(a1 + 8);
  v66 = 1879048192;
  v67 = 1879048192;
  if (v65 != 1879048192)
  {
    v66 = *(_DWORD *)(a1 + 8);
    if (*((unsigned __int8 *)a3 + 24) | *((unsigned __int8 *)a4 + 24))
      v66 = *(_DWORD *)(a1 + 404) + v65;
    if (v64 > v66)
      return 0;
    v67 = v66 - v63;
  }
  v68 = *a4;
  v134 = v67;
  if (*(_BYTE *)(a1 + 425))
  {
    if (v68 == -50331650)
    {
      v69 = -1;
    }
    else
    {
      v70 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v71 = *(_DWORD *)(v70 + 36 * a4[8] + 32);
      if (*(_DWORD *)(v70 + 36 * v71) == -50331650)
        v69 = 0;
      else
        v69 = *(_DWORD *)(v70 + 36 * *(unsigned int *)(v70 + 36 * v71 + 32) + 28);
    }
    v72 = a4[1];
    LODWORD(v166) = *a4;
    HIDWORD(v166) = v72;
    v167 = *(_OWORD *)(a4 + 2);
    LOBYTE(v168) = v146;
    v169 = v24;
    v170 = v69;
    v171 = (int)v55;
    v73 = *Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::findBucket(*(_QWORD *)(a1 + 560), (uint64_t)&v166);
    if (!v73)
    {
      Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::add(*(_QWORD *)(a1 + 560), (uint64_t)&v166, v191);
      goto LABEL_76;
    }
    if (*(_DWORD *)(v73 + 52) > v191[0])
    {
      *(_DWORD *)(v73 + 52) = v191[0];
LABEL_76:
      v68 = *a4;
      v24 = *a3;
      v62 = *(_QWORD **)(a1 + 280);
      v53 = *(unsigned int *)(a1 + 328);
      goto LABEL_77;
    }
    return 0;
  }
LABEL_77:
  v130 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v131 = a4[8];
  v75 = a4[1];
  v76 = a4[2];
  v189[0] = v68;
  v189[1] = v75;
  v190 = *((_QWORD *)a4 + 2);
  v77 = a3[1];
  v78 = a3[2];
  Root = v24;
  v186 = v77;
  v188 = *(int32x2_t *)(a3 + 4);
  v189[2] = v76;
  v189[3] = -2;
  v187 = v78 | 0xFFFFFFFE00000000;
  v184 = 0;
  v135 = v130 + 36 * v131;
  v147 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _DWORD *, BOOL, unsigned int *, char *))(*v62 + 40))(v62, a9, v53, v189, *(_DWORD *)(v135 + 24) != *(_DWORD *)(v135 + 28), &Root, &v184);
  if (v184)
  {
    v80 = *(_DWORD *)(a1 + 420);
    if (v80)
    {
      if (*(_DWORD *)(a9 + 24) > v80)
        return 1;
    }
    v81 = *(_DWORD *)(a1 + 412);
    if (v81)
    {
      v82 = *(_DWORD *)(a1 + 328);
      if (v82 != -16)
      {
        v83 = *(_DWORD *)(a1 + 4) - v82;
        if (v83 >= 0x32)
        {
          LODWORD(v79) = *(_DWORD *)(a9 + 24);
          if ((double)v79 / (double)v83 > (double)v81 / 100.0)
            return 1;
        }
      }
    }
  }
  v84 = *(unsigned int *)(*(_QWORD *)(a9 + 80) + 24 * v147);
  v85 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 8);
  if (*(_DWORD *)(v85 + 4 * v84) > v63)
    *(_DWORD *)(v85 + 4 * v84) = v63;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 48) + 68) & 0xFFFFFFFD) == 0
    && Root >> 25 != 126
    && (_DWORD)v187
    && *(_BYTE *)(*(_QWORD *)(v143 + 384) + v187))
  {
    Root = v20 & 0xFE000000 | 0xFFFFFB;
    v188 = vdup_n_s32(0xFAFFFFFC);
    LOWORD(v186) = 0x3FFF;
  }
  v86 = v142;
  if (*(_BYTE *)a1 && (Root & 0xFFFFFF) != 0xFFFFFB)
  {
    Root = VocMgr::getRoot(v137, Root);
    v86 = v142;
  }
  if (*(_DWORD *)(a1 + 532) == 4)
  {
    v87 = -83886084;
    v188.i32[0] = -83886084;
  }
  else
  {
    v87 = v188.i32[0];
  }
  DWORD2(v167) = *(_DWORD *)(a1 + 328);
  HIDWORD(v167) = v139 - DWORD2(v167);
  v168 = v140;
  v169 = a5 - (v144 + v86);
  v170 = v144;
  v171 = v145;
  v172 = v86;
  v173 = v56 - v141 - v138;
  v174 = v138;
  v175 = v141;
  v176 = xmmword_209A6C7F0;
  v177 = 0;
  v178 = -1;
  v166 = &off_24C2149F8;
  *(_QWORD *)&v167 = 0xBFF0000000000000;
  v179 = Root;
  v180 = v186;
  v181 = v187;
  v182 = v87;
  v183 = v188.i32[1];
  v165 = 0;
  if ((int)Lattice<WordLatticeLC>::maybeCreateAndConnectOrUpdateLink((uint64_t *)a9, v147, v55, (WordLatticeLC *)&v166, 0, &v165) >= 1&& ((v89 = *(_DWORD *)(a1 + 416)) != 0 && *(_DWORD *)(a9 + 104) > v89|| (v90 = *(_DWORD *)(a1 + 408)) != 0&& (v91 = *(_DWORD *)(a1 + 328), v91 != -16)&& (v92 = *(_DWORD *)(a1 + 4) - v91, v92 >= 0x32)&& (LODWORD(v88) = *(_DWORD *)(a9 + 104), (double)v88 / (double)v92 > (double)v90 / 100.0)))
  {
    v74 = 1;
  }
  else
  {
    if (*(_DWORD *)(a1 + 396))
      BackTraceLatticeBuilder::updateLinkBestPathScore(a1, v191[0], *(_DWORD *)(*(_QWORD *)(a9 + 128) + 136 * v165 + 112));
    if (*a4 == -50331650)
    {
      if (v184)
      {
        v93 = *(_QWORD **)(a1 + 280);
        v94 = *(_DWORD *)(v93[1] + 4 * *(unsigned int *)(*(_QWORD *)(a9 + 80) + 24 * v147)) + v136;
        if (v94 <= v66)
        {
          v148 = 0x3FFFFAFFFFFFLL;
          v149 = xmmword_209A593D0;
          v159 = 0x3FFFFCFFFFFELL;
          v160 = xmmword_209A593D0;
          v95 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t *, _QWORD, uint64_t *, char *))(*v93 + 40))(v93, a9, 0, &v148, 0, &v159, &v184);
          v96 = *(_DWORD *)(v135 + 24);
          v97 = *(_DWORD *)(v135 + 28) - v96;
          DWORD2(v149) = 0;
          HIDWORD(v149) = v96;
          *(_DWORD *)v150 = v97;
          *(_OWORD *)&v150[4] = 0uLL;
          *(_DWORD *)&v150[20] = v136;
          *(_QWORD *)&v150[24] = 0;
          v151 = 0;
          v152 = 1879048192;
          v153 = 0;
          v154 = -1;
          v148 = (uint64_t)&off_24C2149F8;
          *(_QWORD *)&v149 = 0xBFF0000000000000;
          v155 = *a4;
          v156 = *((_WORD *)a4 + 2);
          v157 = *((_WORD *)a4 + 3);
          v158 = *(_OWORD *)(a4 + 2);
          Link = Lattice<WordLatticeLC>::createLink(a9, v95, v147, (WordLatticeLC *)&v148);
          Lattice<WordLatticeLC>::connectInLinkUnordered((uint64_t *)a9, Link);
          Lattice<WordLatticeLC>::connectOutLinkUnordered((uint64_t *)a9, Link);
          if (*(_DWORD *)(a1 + 396))
            BackTraceLatticeBuilder::updateLinkBestPathScore(a1, v94, *(_DWORD *)(*(_QWORD *)(a9 + 128) + 136 * Link + 112));
          WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v148);
        }
      }
      else if (*(_DWORD *)(a1 + 396))
      {
        v126 = *(unsigned int *)(*(_QWORD *)(a9 + 80) + 24 * v147 + 16);
        if ((_DWORD)v126 != -2)
        {
          v127 = *(_QWORD *)(a9 + 128);
          do
          {
            v128 = v127 + 136 * v126;
            BackTraceLatticeBuilder::updateLinkBestPathScore(a1, vaddvq_s32(*(int32x4_t *)(v128 + 28))+ *(_DWORD *)(v128 + 44)+ *(_DWORD *)(v128 + 48)+ *(_DWORD *)(v128 + 52)+ *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 8)+ 4 * *(unsigned int *)(*(_QWORD *)(a9 + 80) + 24 * v147)), *(_DWORD *)(v128 + 112));
            v127 = *(_QWORD *)(a9 + 128);
            v126 = *(unsigned int *)(v127 + 136 * v126 + 124);
          }
          while ((_DWORD)v126 != -2);
        }
      }
    }
    else
    {
      v99 = (*((unsigned __int8 *)a4 + 24) | *((unsigned __int8 *)a3 + 24)) != 0;
      v100 = *(_QWORD *)(v135 + 24);
      v101 = a4[9];
      v102 = *(_DWORD *)(*(_QWORD *)(a9 + 80) + 24 * v147);
      v103 = v131;
      if (!*(_BYTE *)(a1 + 512))
        v103 = *(_DWORD *)(v130 + 36 * v131 + 32);
      v104 = a4[1];
      LODWORD(v148) = *a4;
      HIDWORD(v148) = v104;
      v149 = *(_OWORD *)(a4 + 2);
      *(_QWORD *)v150 = v100;
      *(_DWORD *)&v150[8] = v133;
      *(_DWORD *)&v150[12] = v136;
      *(_DWORD *)&v150[16] = v101;
      *(_DWORD *)&v150[20] = v132;
      *(_DWORD *)&v150[24] = v147;
      *(_DWORD *)&v150[28] = v102;
      LODWORD(v151) = v103;
      BYTE4(v151) = v99;
      if (v184 || BackTraceItemCache::needCreateBTItem((uint64_t *)(a1 + 288), (uint64_t)&v148))
      {
        v105 = (_QWORD *)(a1 + 296);
        v106 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        if (*(_DWORD *)(v106 + 36 * v131) == -50331650)
          v107 = 0;
        else
          v107 = *(_DWORD *)(v106 + 36 * *(unsigned int *)(v106 + 36 * v131 + 32) + 28);
        v108 = *v105 + 16 * v107;
        v110 = (unsigned int *)(v108 + 8);
        v109 = *(_DWORD *)(v108 + 8);
        v111 = v109;
        if (v109 == *(_DWORD *)(v108 + 12))
        {
          DgnArray<BackTraceItem>::reallocElts(*v105 + 16 * v107, 1, 1);
          v111 = *v110;
        }
        v112 = *(_QWORD *)v108 + ((unint64_t)v111 << 6);
        *(_QWORD *)v112 = v148;
        *(_OWORD *)(v112 + 8) = v149;
        *(_OWORD *)(v112 + 24) = *(_OWORD *)v150;
        *(_OWORD *)(v112 + 40) = *(_OWORD *)&v150[16];
        *(_DWORD *)(v112 + 56) = v151;
        *(_BYTE *)(v112 + 60) = BYTE4(v151);
        *v110 = v111 + 1;
        ++*(_DWORD *)(a1 + 332);
        v113 = *(_QWORD *)(a1 + 288);
        if (v113)
        {
          v159 = a1 + 296;
          *(_QWORD *)&v160 = __PAIR64__(v109, v107);
          HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::add(v113, (uint64_t)&v159);
        }
        if (*(_BYTE *)(a1 + 277))
        {
          if (a11)
          {
            if (!*(_BYTE *)(a1 + 278))
            {
              v114 = *(_DWORD *)(a11 + 8);
              if (v114 >= 1)
              {
                v115 = v114 + 1;
                v116 = *(_QWORD *)a11 + 8;
                v117 = (int *)v116;
                do
                {
                  v119 = *v117;
                  v117 += 3;
                  v118 = v119;
                  if (v119 > v134)
                    break;
                  v120 = *(_DWORD *)(v116 - 8);
                  v121 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 36 * v120 + 28);
                  BackTraceLatticeBuilder::getBackTraceItem((_QWORD *)a1, a9, a4, v99, v135, v120, v118, 0, (uint64_t)&v159, v147, a10);
                  v122 = *v105 + 16 * v121;
                  v124 = (unsigned int *)(v122 + 8);
                  v123 = *(_DWORD *)(v122 + 8);
                  if (v123 == *(_DWORD *)(v122 + 12))
                  {
                    DgnArray<BackTraceItem>::reallocElts(v122, 1, 1);
                    v123 = *v124;
                  }
                  v125 = *(_QWORD *)v122 + ((unint64_t)v123 << 6);
                  *(_QWORD *)v125 = v159;
                  *(_OWORD *)(v125 + 8) = v160;
                  *(_OWORD *)(v125 + 24) = v161;
                  *(_OWORD *)(v125 + 40) = v162;
                  *(_DWORD *)(v125 + 56) = v163;
                  *(_BYTE *)(v125 + 60) = v164;
                  *v124 = v123 + 1;
                  ++*(_DWORD *)(a1 + 332);
                  --v115;
                  v116 = (uint64_t)v117;
                }
                while (v115 > 1);
              }
            }
          }
        }
      }
    }
    v74 = 0;
  }
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v166);
  return v74;
}

void sub_20994D034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&a26);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)(v26 - 256));
  _Unwind_Resume(a1);
}

BOOL BackTraceLatticeBuilder::canSeedInAcousticContext(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  _BOOL8 result;

  result = 1;
  if (*(_BYTE *)(a1 + 440))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 36 * a2[8];
    if (*(_DWORD *)(v3 + 24) != *(_DWORD *)(v3 + 28)
      || *(_DWORD *)a3 >> 25 == 126
      || (v4 = *a2, v4 >> 25 == 126))
    {
      v5 = 0;
    }
    else
    {
      v5 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                                   + ((v4 >> 22) & 0x3F8))
                                                       + 48)
                                           + 608)
                               + 2 * (v4 & 0xFFFFFF));
    }
    if (v5 != *(unsigned __int16 *)(a3 + 6))
      return 0;
  }
  return result;
}

void Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::add(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1)
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v6);
  HIDWORD(v7) = CWIDAC::computeHash(a2);
  LODWORD(v7) = HIDWORD(v7);
  HIDWORD(v7) = (v7 >> 19) + *(_DWORD *)(a2 + 28);
  LODWORD(v7) = HIDWORD(v7);
  HIDWORD(v7) = (v7 >> 19) + *(_DWORD *)(a2 + 32);
  LODWORD(v7) = HIDWORD(v7);
  HIDWORD(v7) = (v7 >> 19) + *(_DWORD *)(a2 + 36);
  LODWORD(v7) = HIDWORD(v7);
  v8 = (v7 >> 19) + *(unsigned __int8 *)(a2 + 24);
  v9 = *(_DWORD *)(a1 + 16);
  if (v9)
    v10 = (-1640531527 * v8) >> -(char)v9;
  else
    v10 = 0;
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD **)(a1 + 32);
  if (!v12)
  {
    DgnPool::addChunk((DgnPool *)(a1 + 24));
    v12 = *(_QWORD **)(a1 + 32);
  }
  v13 = (_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)(a1 + 32) = *v12;
  BucketLink<BackTraceLinkPair,int>::BucketLink((uint64_t)v12, (int *)a2, a3);
  *(_DWORD *)(v14 + 8) = v8;
  ++*(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 20))
  {
    *(_QWORD *)v14 = *v13;
  }
  else
  {
    *(_QWORD *)v14 = 0;
    v15 = (_QWORD *)*v13;
    if (*v13)
    {
      do
      {
        v13 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
  }
  *v13 = v14;
}

uint64_t Lattice<WordLatticeLC>::maybeCreateAndConnectOrUpdateLink(uint64_t *a1, unsigned int a2, const WordLatticeLC *a3, WordLatticeLC *a4, int a5, _DWORD *a6)
{
  int v9;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const WordLatticeLC *Link;
  const WordLatticeLC *v16;
  int v18;
  uint64_t v19;

  v9 = (int)a3;
  v12 = *(unsigned int *)(a1[10] + 24 * a2 + 20);
  if ((_DWORD)v12 == -2)
  {
LABEL_6:
    Link = (const WordLatticeLC *)Lattice<WordLatticeLC>::createLink((uint64_t)a1, a2, v9, a4);
    v16 = Link;
    if (a6)
      *a6 = (_DWORD)Link;
    if (a5)
    {
      Lattice<WordLatticeLC>::connectInLink(a1, Link);
      Lattice<WordLatticeLC>::connectOutLink(a1, v16);
    }
    else
    {
      Lattice<WordLatticeLC>::connectInLinkUnordered(a1, Link);
      Lattice<WordLatticeLC>::connectOutLinkUnordered(a1, v16);
    }
    return 1;
  }
  else
  {
    v13 = a1[16];
    while (1)
    {
      if (*(_DWORD *)(v13 + 136 * v12 + 120) == v9)
      {
        v14 = WordLatticeLC::cmpForDuplicateCheck(a4, (const WordLatticeLC *)(v13 + 136 * v12), a3);
        v13 = a1[16];
        if (!v14)
          break;
      }
      v12 = *(unsigned int *)(v13 + 136 * v12 + 128);
      if ((_DWORD)v12 == -2)
        goto LABEL_6;
    }
    v18 = WordLatticeLC::cmpForSameLinkWithDifferentScoresCheck(a4, (const WordLatticeLC *)(v13 + 136 * v12), a3);
    if (v18 >= 1)
    {
      v19 = a1[16] + 136 * v12;
      BaseWordLatticeLC::operator=(v19, (uint64_t)a4);
      *(_DWORD *)(v19 + 88) = *((_DWORD *)a4 + 22);
      *(_DWORD *)(v19 + 92) = *((_DWORD *)a4 + 23);
      *(_OWORD *)(v19 + 96) = *((_OWORD *)a4 + 6);
    }
    if (a6)
      *a6 = v12;
    if (v18 <= 0)
      return 0;
    else
      return 0xFFFFFFFFLL;
  }
}

unint64_t BackTraceLatticeBuilder::updateLinkBestPathScore(unint64_t this, int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;

  v5 = this;
  v6 = (uint64_t *)(this + 536);
  v7 = *(_DWORD *)(this + 544);
  if (v7 <= a3)
  {
    do
    {
      if (v7 == *(_DWORD *)(v5 + 548))
      {
        this = DgnPrimArray<unsigned int>::reallocElts((uint64_t)v6, 1, 1);
        v7 = *(_DWORD *)(v5 + 544);
      }
      v8 = *(_QWORD *)(v5 + 536);
      *(_DWORD *)(v8 + 4 * v7) = 0x7FFFFFFF;
      v7 = *(_DWORD *)(v5 + 544) + 1;
      *(_DWORD *)(v5 + 544) = v7;
    }
    while (v7 <= a3);
  }
  else
  {
    v8 = *v6;
  }
  v9 = a2 - *(_DWORD *)(v5 + 12);
  if (v9 < *(_DWORD *)(v8 + 4 * a3))
  {
    *(_DWORD *)(v8 + 4 * a3) = v9;
    if (*(_DWORD *)(v5 + 552) < v9)
      *(_DWORD *)(v5 + 552) = v9;
  }
  return this;
}

uint64_t BackTraceItemCache::needCreateBTItem(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (result)
  {
    v4 = *HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::findBucket(result, (_DWORD *)a2);
    if (v4)
    {
      result = 0;
      if (*(_BYTE *)(a2 + 60))
        *(_BYTE *)(*(_QWORD *)(**(_QWORD **)(v4 + 16) + 16 * *(unsigned int *)(v4 + 24))
                 + ((unint64_t)*(unsigned int *)(v4 + 28) << 6)
                 + 60) = 1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

double BackTraceLatticeBuilder::getBackTraceItem@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, unsigned int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, unsigned int a10, LMStats *a11)
{
  int v17;
  unint64_t v18;
  int AccumHistScore;
  int v20;
  uint64_t v22;
  CWIDCrumbBank *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  double result;
  int v28;
  uint64_t v29;
  char v30;

  v17 = -50331650;
  v18 = *a3;
  if ((_DWORD)v18 == -50331650)
  {
    AccumHistScore = 0;
    v20 = a7;
  }
  else
  {
    v22 = *(_QWORD *)(a1[3] + 8) + 36 * a6;
    if ((*(_DWORD *)(a1[6] + 68) & 0xFFFFFFFD) != 0)
      v28 = 0;
    else
      v28 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v18 >> 22) & 0x3F8))
                                               + 56)
                                   + 288)
                       + 4 * a3[2]);
    v23 = (CWIDCrumbBank *)a1[2];
    v30 = a4;
    v29 = a5;
    if (v18 >> 25 == 126 || (v18 & 0xFFFFFF) == 0xFFFFF8)
      v24 = 0;
    else
      v24 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                                    + ((v18 >> 22) & 0x3F8))
                                                        + 48)
                                            + 592)
                                + 2 * (v18 & 0xFFFFFF));
    AccumHistScore = CWIDCrumbBank::getAccumHistScore(v23, *(_DWORD *)(v22 + 28) - 1, a6, v24);
    v20 = a7 - (v28 + BackTraceLatticeBuilder::getLMScore((uint64_t)a1, v22, (uint64_t)a3, 0, a11)) - AccumHistScore;
    v17 = *a3;
    a4 = v30;
    a5 = v29;
  }
  v25 = *(_DWORD *)(*(_QWORD *)(a2 + 80) + 24 * a10);
  v26 = a3[1];
  *(_DWORD *)a9 = v17;
  *(_DWORD *)(a9 + 4) = v26;
  *(_OWORD *)(a9 + 8) = *(_OWORD *)(a3 + 2);
  result = *(double *)(a5 + 24);
  *(double *)(a9 + 24) = result;
  *(_DWORD *)(a9 + 32) = a8;
  *(_DWORD *)(a9 + 36) = v20;
  *(_DWORD *)(a9 + 40) = a7;
  *(_DWORD *)(a9 + 44) = AccumHistScore;
  *(_DWORD *)(a9 + 48) = a10;
  *(_DWORD *)(a9 + 52) = v25;
  *(_DWORD *)(a9 + 56) = a6;
  *(_BYTE *)(a9 + 60) = a4;
  return result;
}

uint64_t BackTraceLatticeBuilder::stackDecode(BackTraceLatticeBuilder *this, WordLattice *a2, int a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, LMStats *a8)
{
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  __n128 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void (**v27)(CWIDACRecogGermIterator *__hidden);
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v36;
  uint64_t *v37;
  char *v39;
  void **v40;
  char *v41;
  char *v42;
  uint64_t v45;
  __int128 v46;
  char v47;
  int v48;
  __int16 v49;
  uint64_t v50;

  if (*((_DWORD *)this + 83))
  {
    v12 = (char *)this + 448;
    v41 = (char *)this + 480;
    v42 = (char *)this + 464;
    v40 = (void **)((char *)this + 496);
    v36 = (char *)this + 312;
    v37 = (uint64_t *)((char *)this + 288);
    v13 = (char *)this + 184;
    v39 = (char *)this + 448;
    do
    {
      v14 = *((_QWORD *)this + 37);
      v15 = *((unsigned int *)this + 82);
      if (!*(_DWORD *)(v14 + 16 * v15 + 8))
      {
        do
          LODWORD(v15) = v15 - 1;
        while (!*(_DWORD *)(v14 + 16 * v15 + 8));
        *((_DWORD *)this + 82) = v15;
      }
      CWIDCrumbBank::getFrameInfoForBTLat(*((_DWORD **)this + 2), *((unsigned __int8 *)this + 424), v15 - 1, (uint64_t)v12, (uint64_t)v42, (uint64_t)v41, v40, *((_DWORD *)this + 100));
      v16 = *((_DWORD *)this + 107);
      v17 = *(_DWORD *)(CWIDCrumbBank::getCrumbFrame(*((CWIDCrumbBank **)this + 2), *((_DWORD *)this + 82) - 1) + 24);
      v18 = *((_QWORD *)this + 37) + 16 * *((unsigned int *)this + 82);
      *((_DWORD *)this + 83) -= *(_DWORD *)(v18 + 8);
      if (*((_DWORD *)this + 114))
      {
        BackTraceItemCache::clearCache(v37);
        BackTraceLatticeBuilder::assembleRightGerms(this, v19);
        v20 = MemChunkAlloc(0x30uLL, 0);
        *((_DWORD *)v20 + 2) = 0;
        *((_BYTE *)v20 + 32) = 0;
        v20[3] = 0;
        *v20 = (uint64_t)&off_24C218850;
        v20[5] = (uint64_t)v36;
        *((_DWORD *)v20 + 3) = *((_DWORD *)this + 80);
        Constraint::prunePreList(*((Constraint **)this + 6), (RecogGermIterator *)v20, 1, v21, v22, v23, v24, v25);
        v26 = MemChunkAlloc(0x30uLL, 0);
        *((_DWORD *)v26 + 2) = 0;
        v26[3] = 0;
        v27 = &off_24C2177C0;
        *v26 = (uint64_t)&off_24C2177C0;
        v26[5] = (uint64_t)v12;
        v28 = *((_DWORD *)this + 114);
        *((_DWORD *)v26 + 3) = v28;
        *a5 += v28;
        v45 = 0x3FFFFAFFFFFFLL;
        v46 = xmmword_209A593D0;
        v47 = 0;
        v48 = 1310720000;
        v49 = 0;
        v50 = 0x70000000FFFFFFFELL;
        *((_BYTE *)v26 + 32) = 0;
        *((_DWORD *)v26 + 2) = 0;
        if (*((_DWORD *)v26 + 3))
        {
          v29 = v17 + v16;
          while (1)
          {
            (*(void (**)(uint64_t *, uint64_t *))(*v26 + 16))(v26, &v45);
            v30 = *((_DWORD *)v26 + 2);
            BtNBestResult::prepare((uint64_t)v13, *((_QWORD *)this + 60) + 24 * v30, (unsigned int *)&v45, v29);
            if (BackTraceLatticeBuilder::seedAllRightGerms((unint64_t)this, (unsigned int *)&v45, v30, (uint64_t)a2, 0, a4, a6, a7, a8)|| (BackTraceLatticeBuilder::seedFinalSilence((unint64_t)this, (unsigned int *)&v45, v30, (uint64_t)a2, a3, a7, a8) & 1) != 0)
            {
              break;
            }
            v31 = *((_DWORD *)v26 + 2) + 1;
            *((_DWORD *)v26 + 2) = v31;
            if (*((_BYTE *)v26 + 32))
            {
              (*(void (**)(uint64_t *))(*v26 + 24))(v26);
              v31 = *((_DWORD *)v26 + 2);
            }
            if (v31 == *((_DWORD *)v26 + 3))
            {
              v32 = 0;
              goto LABEL_19;
            }
          }
          v32 = 1;
LABEL_19:
          v12 = v39;
          v27 = (void (**)(CWIDACRecogGermIterator *__hidden))*v26;
        }
        else
        {
          v32 = 0;
          v12 = v39;
        }
        (*v27)((CWIDACRecogGermIterator *)v26);
        MemChunkFree(v26, 0);
        (*(void (**)(uint64_t *))*v20)(v20);
        MemChunkFree(v20, 0);
        v33 = *((_QWORD *)this + 37) + 16 * *((unsigned int *)this + 82);
        if (*(_QWORD *)v33)
        {
          MemChunkFree(*(_QWORD **)v33, 0);
          *(_QWORD *)v33 = 0;
        }
        *(_QWORD *)(v33 + 8) = 0;
        *((_DWORD *)this + 80) = 0;
      }
      else
      {
        if (*(_QWORD *)v18)
        {
          MemChunkFree(*(_QWORD **)v18, 0);
          *(_QWORD *)v18 = 0;
        }
        v32 = 0;
        *(_QWORD *)(v18 + 8) = 0;
        v12 = v39;
      }
    }
    while (*((_DWORD *)this + 83) && !v32);
    if ((v32 & 1) != 0)
      return 1;
  }
  WordLattice::resortLatticeLinks(a2);
  return 0;
}

uint64_t *BackTraceItemCache::clearCache(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *this;
  if (*this)
  {
    *(_DWORD *)(v1 + 8) = 0;
    v2 = *(unsigned int *)(v1 + 88);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        *(_QWORD *)(*(_QWORD *)(v1 + 80) + v3) = 0;
        v3 += 8;
      }
      while (v4 != v3);
    }
    return DgnPool::deleteAllWithoutDestroying((DgnPool *)(v1 + 24));
  }
  return this;
}

BOOL BackTraceLatticeBuilder::seedAllRightGerms(unint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, uint64_t a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, LMStats *a9)
{
  int v13;
  unsigned int *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t HistAndScore;
  int v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  _QWORD **v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v31;
  _DWORD *v32;
  _BOOL4 v33;
  char v34;
  _BOOL4 v35;
  _BOOL4 v36;
  _BOOL4 v37;
  unsigned int v38;
  int LMScore;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  _BOOL4 v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  BOOL v59;
  _QWORD *Legal;
  BOOL v62;
  unint64_t v63;
  AcousticContextScores *v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  unsigned int *v68;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  unsigned int *v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  __int128 v80;
  unsigned int v81;
  unsigned int v82;
  __int128 v83;
  int v84;
  _QWORD v85[2];
  int v86[3];

  v86[0] = 0;
  v85[0] = 0;
  v85[1] = 0;
  if (*(_DWORD *)(a1 + 320))
  {
    Legal = Constraint::getLegal(*(_QWORD *)(a1 + 48), a2, 0, 0, v86, *(_DWORD *)(a1 + 328), a6, 0, 0, (uint64_t)v85, 1);
    v13 = v86[0];
    if (v86[0])
    {
      v64 = (AcousticContextScores *)(*(_QWORD *)(a1 + 480) + 24 * a3);
      v14 = (unsigned int *)*((_QWORD *)v64 + 2);
      if (v14 && v14[2] != 1879048192)
      {
        v66 = BtNBestResult::maybeGetNBest<true>(a1 + 184);
        v73 = 1;
        v13 = v86[0];
      }
      else
      {
        v73 = 0;
        v66 = 0;
      }
      *a7 += v13;
      v63 = *((unsigned __int16 *)Legal + 4);
      if (*((_WORD *)Legal + 4))
      {
        v15 = 0;
        v16 = 1;
        v72 = a3;
        v68 = v14;
        do
        {
          HistAndScore = AcousticContextScores::getHistAndScore(v64, (unsigned __int16)v15);
          v62 = v16;
          v75 = (unsigned int *)HistAndScore;
          if (HistAndScore)
          {
            v18 = *(_DWORD *)(HistAndScore + 8);
            v19 = v73;
            if (v18 != 1879048192)
              v19 = 1;
            if ((v19 & 1) == 0)
              goto LABEL_73;
            if (v18 != 1879048192)
            {
              v65 = BtNBestResult::maybeGetNBest<false>(a1 + 184, (unsigned __int16)v15);
              goto LABEL_17;
            }
          }
          else if ((v73 & 1) == 0)
          {
            goto LABEL_73;
          }
          v65 = 0;
LABEL_17:
          v76 = *Legal + 16 * v15;
          if (*(_DWORD *)(v76 + 8))
          {
            v20 = 0;
            v21 = 0;
            v71 = v15;
            while (2)
            {
              v22 = *(_QWORD *)v76;
              v23 = (unsigned int *)(*(_QWORD *)v76 + v20);
              v24 = (_QWORD **)VocMgr::smpVocMgr;
              v25 = (unint64_t)*v23 >> 25;
              if ((_DWORD)v25 == 126)
                v26 = 0;
              else
                v26 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v25) + 56);
              v27 = v23[2];
              if ((_DWORD)v27 && *(_WORD *)(*(_QWORD *)(v26 + 528) + 2 * v27) != 127)
                *(_DWORD *)(v22 + v20 + 20) = -83886084;
              v28 = *a2;
              v29 = v28 >> 25 != 126 && a2[2] == (_DWORD)v27;
              if ((!v29
                 || *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**v24 + ((v28 >> 22) & 0x3F8)) + 56) + 528)
                             + 2 * v27) == 127)
                && !BackTraceLatticeBuilder::canSeedInLMContext(a1, a2, v23))
              {
                goto LABEL_72;
              }
              if (*(_BYTE *)(a1 + 512))
              {
                v30 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
                v31 = *(_DWORD *)(v30 + 36 * *(unsigned int *)(v22 + v20 + 32) + 32);
                if (CWIDAC::operator==(v30 + 36 * v31, (uint64_t)a2))
                {
                  v32 = (_DWORD *)AcousticContextScores::getHistAndScore((AcousticContextScores *)(*(_QWORD *)(a1 + 480) + 24 * v72), (unsigned __int16)v15);
                  if (v32)
                  {
                    v33 = v31 == *v32;
                    if (!v68)
                    {
LABEL_41:
                      v36 = 0;
                      v37 = 1;
                      goto LABEL_43;
                    }
                  }
                  else
                  {
                    v33 = 0;
                    if (!v68)
                      goto LABEL_41;
                  }
                  if (v68[2] == 1879048192)
                    goto LABEL_41;
                  v37 = v31 != *v68;
                  v36 = v31 == *v68;
LABEL_43:
                  if (v33 || !v37)
                  {
                    v34 = 0;
                    v74 = 0;
                  }
                  else
                  {
                    v38 = v31 - *(_DWORD *)(a1 + 528);
                    v34 = v38 == CWIDCrumbBank::getHistory(*(_QWORD *)(a1 + 520), *(_DWORD *)(a1 + 328) - 1, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 36 * v38, (unsigned __int16)v15);
                    v74 = v38 == CWIDCrumbBank::getSilHistory(*(_QWORD *)(a1 + 520), *(_DWORD *)(a1 + 328) - 1, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 36 * v38);
                  }
                }
                else
                {
                  v34 = 0;
                  v74 = 0;
                  v36 = 1;
                }
                v35 = v36;
              }
              else
              {
                v34 = 0;
                v74 = 0;
                v35 = 1;
              }
              v77 = *(__int16 *)(v22 + v20 + 26);
              v84 = 0;
              LMScore = 1879048192;
              if (v75)
              {
                v40 = v75[2];
                if (v40 != 1879048192)
                {
                  a2[9] = v40;
                  v41 = *v75;
                  a2[8] = *v75;
                  *((_BYTE *)a2 + 24) = *(_BYTE *)(*(_QWORD *)(a1 + 496) + v72);
                  if (*(_BYTE *)(a1 + 277))
                    v67 = 0;
                  else
                    v67 = v75[1];
                  v42 = a2[1];
                  v81 = *a2;
                  v82 = v42;
                  v83 = *(_OWORD *)(a2 + 2);
                  v78 = *(_DWORD *)(v22 + v20);
                  v79 = *(_DWORD *)(v22 + v20 + 4);
                  v80 = *(_OWORD *)(v23 + 2);
                  if (*(_BYTE *)(a1 + 512))
                  {
                    v43 = *(_DWORD *)(a1 + 528);
                    v44 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
                    v45 = v44 + 36 * (v41 - v43);
                    v81 = *(_DWORD *)v45;
                    v82 = *(_DWORD *)(v45 + 4);
                    v83 = *(_OWORD *)(v45 + 8);
                    v46 = (int *)(v44 + 36 * (*(_DWORD *)(v22 + v20 + 32) - v43));
                    v78 = *v46;
                    v79 = v46[1];
                    v80 = *(_OWORD *)(v46 + 2);
                  }
                  LMScore = BackTraceLatticeBuilder::getLMScore(a1, (uint64_t)&v81, (uint64_t)&v78, (unsigned int *)&v84, a9);
                  ++*a8;
                  if ((BackTraceLatticeBuilder::seedOneInContext(a1, 0, v23, a2, LMScore, v77, v67, v84, a4, a9, v65, v34) & 1) != 0)goto LABEL_76;
                }
              }
              if (v73)
              {
                v47 = *v23;
                if (v47 >> 25 == 126
                  || (v48 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v47 >> 22) & 0x3F8)) + 48),
                      v49 = v47 & 0xFFFFFF,
                      *(_WORD *)(*(_QWORD *)(v48 + 32) + 2 * v49) != 1)
                  || *(_WORD *)(*(_QWORD *)(v48 + 592) + 2 * v49))
                {
                  a2[9] = v68[2];
                  v50 = *v68;
                  a2[8] = *v68;
                  *((_BYTE *)a2 + 24) = *(_BYTE *)(*(_QWORD *)(a1 + 496) + v72);
                  if (*(_BYTE *)(a1 + 277))
                    v51 = 0;
                  else
                    v51 = v68[1];
                  v52 = *(unsigned __int8 *)(a1 + 512);
                  if (*(_BYTE *)(a1 + 512))
                    v53 = v35;
                  else
                    v53 = 0;
                  if (LMScore == 1879048192 || v53)
                  {
                    v54 = a2[1];
                    v81 = *a2;
                    v82 = v54;
                    v83 = *(_OWORD *)(a2 + 2);
                    v78 = *(_DWORD *)(v22 + v20);
                    v79 = *(_DWORD *)(v22 + v20 + 4);
                    v80 = *(_OWORD *)(v23 + 2);
                    if (v52)
                    {
                      v55 = *(_DWORD *)(a1 + 528);
                      v56 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
                      v57 = v56 + 36 * (v50 - v55);
                      v81 = *(_DWORD *)v57;
                      v82 = *(_DWORD *)(v57 + 4);
                      v83 = *(_OWORD *)(v57 + 8);
                      v58 = (int *)(v56 + 36 * (*(_DWORD *)(v22 + v20 + 32) - v55));
                      v78 = *v58;
                      v79 = v58[1];
                      v80 = *(_OWORD *)(v58 + 2);
                    }
                    LMScore = BackTraceLatticeBuilder::getLMScore(a1, (uint64_t)&v81, (uint64_t)&v78, (unsigned int *)&v84, a9);
                  }
                  ++*a8;
                  if ((BackTraceLatticeBuilder::seedOneInContext(a1, 0, v23, a2, LMScore, v77, v51, v84, a4, a9, (uint64_t)v66, v74) & 1) != 0)
                  {
LABEL_76:
                    v59 = v62;
                    goto LABEL_75;
                  }
                }
              }
              v15 = v71;
LABEL_72:
              ++v21;
              v20 += 44;
              if (v21 >= *(unsigned int *)(v76 + 8))
                break;
              continue;
            }
          }
LABEL_73:
          v16 = ++v15 < v63;
        }
        while (v15 != v63);
      }
    }
  }
  v59 = 0;
LABEL_75:
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v85);
  return v59;
}

void sub_20994E144(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnIArray<Utterance *>::~DgnIArray(v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t BackTraceLatticeBuilder::seedFinalSilence(unint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, int a5, _DWORD *a6, LMStats *a7)
{
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char CanSeedFinalSilence;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 **v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t result;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int LMScore;
  int v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  __int128 v39;

  v14 = *a2;
  v15 = v14 & 0xFFFFFF;
  v16 = (v14 & 0xFFFFFF) == 0xFFFFF8 || (v14 & 0xFE000000) == -67108864;
  if (v16
    || (v17 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v14 >> 22) & 0x3F8)) + 48),
        *(_WORD *)(*(_QWORD *)(v17 + 32) + 2 * v15) != 1)
    || *(_WORD *)(*(_QWORD *)(v17 + 592) + 2 * v15))
  {
    CanSeedFinalSilence = Constraint::getCanSeedFinalSilence(*(_QWORD *)(a1 + 48), a2, *(_DWORD *)(a1 + 328));
  }
  else
  {
    CanSeedFinalSilence = 0;
  }
  v19 = *(_QWORD *)(a1 + 480);
  v20 = a3;
  v21 = v19 + 24 * a3;
  v22 = *(unsigned __int8 ***)(v21 + 8);
  if (v22 && *((_DWORD *)v22 + 2) && (v23 = **v22, v23 != 255))
  {
    if (v23 == 254)
      v24 = *(unsigned int **)(v19 + 24 * a3 + 16);
    else
      v24 = (unsigned int *)(**(_QWORD **)v21 + 12 * v23);
  }
  else
  {
    v24 = 0;
  }
  if (*(_DWORD *)(a1 + 336) == -2)
    return 0;
  if ((CanSeedFinalSilence & 1) != 0)
  {
    if (!v24)
      return 0;
  }
  else
  {
    result = 0;
    if (!a5 || !v24)
      return result;
  }
  if (v24[2] == 1879048192)
    return 0;
  v36 = *(_BYTE *)(a1 + 512)
     && (v26 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8),
         v27 = *(_DWORD *)(v26 + 36 * *(unsigned int *)(a1 + 372) + 32),
         v28 = v26 + 36 * v27,
         CWIDAC::operator==(v28, (uint64_t)a2))
     && *(_DWORD *)(v28 + 28) == *(_DWORD *)(a1 + 328)
     && v27 != *v24;
  a2[9] = v24[2];
  v29 = *v24;
  a2[8] = *v24;
  *((_BYTE *)a2 + 24) = *(_BYTE *)(*(_QWORD *)(a1 + 496) + v20);
  if (*(_BYTE *)(a1 + 277))
    v30 = 0;
  else
    v30 = v24[1];
  v31 = a2[1];
  v37 = *a2;
  v38 = v31;
  v39 = *(_OWORD *)(a2 + 2);
  if (*(_BYTE *)(a1 + 512))
  {
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 36 * (v29 - *(_DWORD *)(a1 + 528));
    v37 = *(_DWORD *)v32;
    v38 = *(_DWORD *)(v32 + 4);
    v39 = *(_OWORD *)(v32 + 8);
  }
  LMScore = BackTraceLatticeBuilder::getLMScore(a1, (uint64_t)&v37, a1 + 340, 0, a7);
  v34 = *(__int16 *)(a1 + 366);
  ++*a6;
  v35 = BtNBestResult::maybeGetNBest<false>(a1 + 184, 0);
  return BackTraceLatticeBuilder::seedOneInContext(a1, 0, (unsigned int *)(a1 + 340), a2, LMScore, v34, v30, 0, a4, a7, v35, v36);
}

_QWORD *BtNBestResult::maybeGetNBest<true>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t NBest;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  _DWORD *v14;

  if (!*(_BYTE *)(a1 + 93) || *(_DWORD *)(a1 + 8) == -50331650 || *(_BYTE *)(a1 + 94))
    return 0;
  if (*(_BYTE *)(a1 + 92))
    return (_QWORD *)(a1 + 72);
  NBest = NetNBestAlg::getNBest(*(NetNBestAlg **)a1, **(unsigned int **)(*(_QWORD *)(a1 + 32) + 16), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 4), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 8), *(_DWORD *)(a1 + 88));
  v2 = (_QWORD *)(a1 + 72);
  v5 = *(unsigned int *)(NBest + 8);
  v6 = *(_DWORD *)(a1 + 84);
  if (v5 > v6)
    DgnArray<RuleDesc>::reallocElts(a1 + 72, v5 - v6, 0);
  v7 = *(unsigned int *)(a1 + 80);
  if (v7 < v5)
  {
    v8 = v5 - v7;
    v9 = 12 * v7;
    do
    {
      v10 = *v2 + v9;
      *(_QWORD *)v10 = 0x70000000FFFFFFFELL;
      *(_DWORD *)(v10 + 8) = 1879048192;
      v9 += 12;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)(a1 + 80) = v5;
  if ((_DWORD)v5)
  {
    v11 = 0;
    do
    {
      v12 = (int *)(*(_QWORD *)NBest + v11);
      v13 = *v12;
      LODWORD(v12) = v12[2];
      v14 = (_DWORD *)(*v2 + v11);
      v14[1] = -1;
      v14[2] = (_DWORD)v12;
      *v14 = v13;
      v11 += 12;
    }
    while (12 * v5 != v11);
  }
  *(_BYTE *)(a1 + 92) = 1;
  return v2;
}

uint64_t AcousticContextScores::getHistAndScore(AcousticContextScores *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  if (*(_DWORD *)(v2 + 8) <= a2)
    return 0;
  v3 = *(unsigned __int8 *)(*(_QWORD *)v2 + a2);
  if (v3 == 255)
    return 0;
  if (v3 == 254)
    return *((_QWORD *)this + 2);
  return **(_QWORD **)this + 12 * v3;
}

uint64_t BtNBestResult::maybeGetNBest<false>(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  unsigned int *HistAndScore;
  uint64_t NBest;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  _DWORD *v24;

  if (!*(_BYTE *)(a1 + 93) || *(_DWORD *)(a1 + 8) == -50331650 || *(_BYTE *)(a1 + 94))
    return 0;
  v6 = a2 >> 5;
  v7 = 1 << a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v6) & (1 << a2)) != 0)
    return *(_QWORD *)(a1 + 56) + 16 * a2;
  HistAndScore = (unsigned int *)AcousticContextScores::getHistAndScore(*(AcousticContextScores **)(a1 + 32), a2);
  NBest = NetNBestAlg::getNBest(*(NetNBestAlg **)a1, *HistAndScore, HistAndScore[1], HistAndScore[2], *(_DWORD *)(a1 + 88));
  v10 = *(_QWORD *)(a1 + 56);
  v11 = a2;
  v3 = v10 + 16 * a2;
  v12 = *(unsigned int *)(NBest + 8);
  v13 = *(_DWORD *)(v3 + 12);
  if (v12 > v13)
    DgnArray<RuleDesc>::reallocElts(v3, v12 - v13, 0);
  v14 = v10 + 16 * v11;
  v17 = *(_DWORD *)(v14 + 8);
  v15 = (_DWORD *)(v14 + 8);
  v16 = v17;
  if (v17 < v12)
  {
    v18 = v12 - v16;
    v19 = 12 * v16;
    do
    {
      v20 = *(_QWORD *)v3 + v19;
      *(_QWORD *)v20 = 0x70000000FFFFFFFELL;
      *(_DWORD *)(v20 + 8) = 1879048192;
      v19 += 12;
      --v18;
    }
    while (v18);
  }
  *v15 = v12;
  if ((_DWORD)v12)
  {
    v21 = 0;
    do
    {
      v22 = (int *)(*(_QWORD *)NBest + v21);
      v23 = *v22;
      LODWORD(v22) = v22[2];
      v24 = (_DWORD *)(*(_QWORD *)v3 + v21);
      v24[1] = -1;
      v24[2] = (_DWORD)v22;
      *v24 = v23;
      v21 += 12;
    }
    while (12 * v12 != v21);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v6) |= v7;
  return v3;
}

BOOL BackTraceLatticeBuilder::canSeedInLMContext(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v6;
  int Root;
  unint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  unsigned int v20;
  unsigned int *v21;
  _QWORD *v23;
  uint64_t v24;
  void *v25;

  v6 = a3[4];
  Root = VocMgr::getRoot((VocMgr *)VocMgr::smpVocMgr, *a2);
  if (Root != -50331650 && v6 != -83886084 && v6 != Root)
    return 0;
  v23 = 0;
  v24 = 0;
  v10 = *a3;
  if (v10 >> 25 == 126 || (v10 & 0xFFFFFF) == 0xFFFFF8)
    v11 = 0;
  else
    v11 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                                  + ((v10 >> 22) & 0x3F8))
                                                      + 48)
                                          + 592)
                              + 2 * (v10 & 0xFFFFFF));
  v13 = v11 + 1;
  v25 = 0;
  HIDWORD(v24) = realloc_array(0, &v25, (16 * v13), 0, 0, 1) >> 4;
  v23 = v25;
  if (v24 <= v13)
  {
    if (v24 <= v11)
    {
      v16 = v11 - (unint64_t)v24 + 1;
      v17 = 2 * v24;
      do
      {
        v18 = &v23[v17];
        *v18 = 0;
        v18[1] = 0;
        v17 += 2;
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    v14 = (int)v24;
    if ((int)v24 > (int)v13)
    {
      v15 = 16 * (int)v24 - 16;
      do
      {
        --v14;
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)v23 + v15);
        v15 -= 16;
      }
      while (v14 > v13);
    }
  }
  LODWORD(v24) = v11 + 1;
  v19 = (char *)&v23[2 * v11];
  v21 = (unsigned int *)(v19 + 8);
  v20 = *((_DWORD *)v19 + 2);
  if (v20 == *((_DWORD *)v19 + 3))
  {
    DgnArray<RecogGerm>::reallocElts((uint64_t)&v23[2 * v11], 1, 1);
    v20 = *v21;
  }
  RecogGerm::operator=(*(_QWORD *)v19 + 44 * v20, (uint64_t)a3);
  ++*v21;
  SearchLMScorer::setContext(*(_QWORD *)(a1 + 56), 4211081212, a2, (uint64_t)&v23, 0, 0, 0, a3[5] != -83886084, a3[5], 0xFAFFFFFC);
  v12 = RecogGerm::operator==(v23[2 * v11], (uint64_t)a3);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)&v23);
  return v12;
}

void sub_20994E968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

void BackTraceLatticeBuilder::maybeEnableNBestGeneration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;

  if (a2 && (*(_QWORD *)(a2 + 16) || *(_DWORD *)(a2 + 32)))
  {
    if (*(_BYTE *)(a1 + 512))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/btlat.cpp", 2797, (uint64_t)"kernel/btlat", 1, (uint64_t)"%.500s", a7, a8, (char)"TrigramsWithBigramLattice");
    if ((*(_DWORD *)(a1 + 400) & 0x80000000) == 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/btlat.cpp", 2800, (uint64_t)"kernel/btlat", 1, (uint64_t)"%.500s", a7, a8, (char)"LatticeBestCrumbDistancemaxFrames");
    *(_BYTE *)(a1 + 277) = 1;
    v11 = *(unsigned __int8 *)(a1 + 424);
    *(_BYTE *)(a1 + 278) = v11;
    if (!v11)
      BtNBestResult::init((uint64_t *)(a1 + 184), a2, a3);
  }
}

_DWORD *BackTraceLatticeBuilder::pruneLinks(_DWORD *this, WordLattice *a2, int a3, double a4)
{
  unsigned int v4;
  _DWORD *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  void *v20;
  uint64_t v21;
  void *v22;

  LODWORD(a4) = this[99];
  v4 = ((double)(this[1] * a3) / 1000000.0 * (double)*(unint64_t *)&a4);
  if (*((_DWORD *)a2 + 26) > v4)
  {
    v6 = this;
    v7 = this[138];
    v20 = 0;
    v21 = 0;
    v8 = (v7 + 1);
    if (v7 == -1)
    {
      v9 = 0;
      LODWORD(v21) = v8;
    }
    else
    {
      v22 = 0;
      v10 = realloc_array(0, &v22, 4 * (v7 + 1), 0, 0, 1);
      v11 = 0;
      v9 = v22;
      v20 = v22;
      LODWORD(v21) = v8;
      HIDWORD(v21) = v10 >> 2;
      do
        v9[v11++] = 0;
      while (v11 < v8);
    }
    v12 = (uint64_t *)(v6 + 134);
    if (v6[136])
    {
      v13 = 0;
      v14 = *v12;
      while (1)
      {
        v15 = *(unsigned int *)(v14 + 4 * v13);
        v16 = v9;
        if ((int)v15 < 1)
          goto LABEL_11;
        if ((_DWORD)v15 != 0x7FFFFFFF)
          break;
LABEL_12:
        if (++v13 >= (unint64_t)v6[136])
          goto LABEL_13;
      }
      v16 = &v9[v15];
LABEL_11:
      ++*v16;
      goto LABEL_12;
    }
LABEL_13:
    if ((_DWORD)v8)
    {
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = v9[v17];
        if (v19)
        {
          v18 += v19;
          if (v18 >= v4)
            break;
        }
        if (v8 == ++v17)
          return (_DWORD *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
      }
      Lattice<WordLatticeLC>::pruneLinks((unint64_t)a2, v17, v12);
    }
    return (_DWORD *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
  }
  return this;
}

void sub_20994EBCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Lattice<WordLatticeLC>::pruneLinks(unint64_t a1, int a2, _QWORD *a3)
{
  unint64_t v4;
  uint64_t v7;
  unsigned int v8;
  unint64_t i;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v4 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v4)
  {
    v7 = 0;
    v8 = 0;
    for (i = 0; i < v4; ++i)
    {
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * i);
      if (*(_DWORD *)(*a3 + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 128) + 136 * v10 + 112)) > a2)
      {
        if (v8 == HIDWORD(v24))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
          v8 = v24;
          v7 = v23;
        }
        *(_DWORD *)(v7 + 4 * v8) = v10;
        v8 = v24 + 1;
        LODWORD(v24) = v24 + 1;
        v4 = *(unsigned int *)(a1 + 104);
      }
    }
  }
  while ((_DWORD)v24)
  {
    v11 = *(_DWORD *)(v23 + 4 * (v24 - 1));
    LODWORD(v24) = v24 - 1;
    Lattice<WordLatticeLC>::disconnectAndDestroyLink(a1, v11);
  }
  v21 = 0;
  v22 = 0;
  v12 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = *(unsigned int *)(a1 + 56);
    v17 = v16;
    do
    {
      if (v17)
      {
        v18 = 0;
        v19 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v15);
        do
        {
          if (v19 == *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v18))
          {
            if (v14 == HIDWORD(v22))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
              v14 = v22;
              v13 = v21;
            }
            *(_DWORD *)(v13 + 4 * v14) = v19;
            v14 = v22 + 1;
            LODWORD(v22) = v22 + 1;
            v16 = *(unsigned int *)(a1 + 56);
          }
          ++v18;
        }
        while (v18 < v16);
        v12 = *(unsigned int *)(a1 + 40);
        v17 = v16;
      }
      ++v15;
    }
    while (v15 < v12);
    if (v14)
      Lattice<WordLatticeLC>::destroyNodesUsingGcMarks(a1, (uint64_t)&v21);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v23);
}

void sub_20994ED7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *BackTraceLatticeBuilder::makeLattice(BackTraceLatticeBuilder *this, __int16 a2, PelScorer *a3, int a4, char a5, int a6, LatticeStats *a7, int a8, unsigned int a9, unsigned int a10, char a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  int LMScore;
  int v33;
  int v34;
  unsigned int *v35;
  int v36;
  double v37;
  int v38;
  uint64_t *v39;
  LMStats *v40;
  PelScorer *v41;
  LMStats *v42;
  int v43;
  double v44;
  unsigned int *v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _DWORD *v57;
  PelScorer *v58;
  LMStats *v59;
  char v60;
  char v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int *v65;
  uint64_t v67;
  __int128 v68;
  int v69;
  unsigned int v70;

  *((_DWORD *)this + 107) = a8;
  *((_DWORD *)this + 1) = CWIDCrumbBank::getLastFrame(*((CWIDCrumbBank **)this + 2)) + 1;
  BackTraceLatticeBuilder::maybeEnableNBestGeneration((uint64_t)this, *((_QWORD *)this + 4), *((_QWORD *)this + 3), v16, v17, v18, v19, v20);
  *((_DWORD *)this + 83) = 0;
  v21 = (_QWORD *)((char *)this + 296);
  v22 = *((unsigned int *)this + 1);
  v23 = *((_DWORD *)this + 77);
  if (v22 > v23)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 296, v22 - v23, 0);
  v24 = *((unsigned int *)this + 76);
  if (v24 <= v22)
  {
    if (v24 < v22)
    {
      v27 = v22 - v24;
      v28 = 16 * v24;
      do
      {
        v29 = (_QWORD *)(*v21 + v28);
        *v29 = 0;
        v29[1] = 0;
        v28 += 16;
        --v27;
      }
      while (v27);
    }
  }
  else if ((int)v24 > (int)v22)
  {
    v25 = (int)v24;
    v26 = 16 * (int)v24 - 16;
    do
    {
      --v25;
      DgnIArray<Utterance *>::~DgnIArray(*v21 + v26);
      v26 -= 16;
    }
    while (v25 > (int)v22);
  }
  *((_DWORD *)this + 76) = v22;
  if ((_DWORD)v22)
  {
    v30 = (_DWORD *)(*v21 + 8);
    do
    {
      *v30 = 0;
      v30 += 4;
      --v22;
    }
    while (v22);
  }
  v69 = 1879048192;
  v70 = -2;
  CWIDCrumbBank::getRightSilenceInfo(*((_QWORD *)this + 2), *((_DWORD *)this + 1) - 1, &v70, &v69);
  if ((a5 & 1) != 0)
  {
    v31 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)
        + 36 * *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 36 * v70 + 32);
    v67 = 0x3FFFFCFFFFFDLL;
    v68 = xmmword_209A593D0;
    LMScore = BackTraceLatticeBuilder::getLMScore((uint64_t)this, v31, (uint64_t)&v67, 0, (LatticeStats *)((char *)a7 + 48));
    v33 = v69 + LMScore;
    v69 += LMScore;
  }
  else
  {
    v33 = v69;
  }
  *((_DWORD *)this + 3) = v33;
  *((_DWORD *)this + 138) = 0x80000000;
  if (a6)
  {
    v34 = *((_DWORD *)this + 98);
    if (v34 < 0)
    {
      v35 = (unsigned int *)a7;
      v37 = fround(*((double *)this + 48), 3);
      if (v69 < 0)
        v37 = -v37;
      v36 = (int)((v37 + (double)*((int *)this + 1)) * (double)v69 / (double)*((int *)this + 1));
    }
    else
    {
      v35 = (unsigned int *)a7;
      v36 = v34 + v33;
    }
  }
  else
  {
    v35 = (unsigned int *)a7;
    v36 = 1879048192;
  }
  *((_DWORD *)this + 2) = v36;
  v38 = *((_DWORD *)this + 1) - *(char *)(*((_QWORD *)this + 2) + 48);
  v39 = MemChunkAlloc(0x120uLL, 0);
  WordLattice::WordLattice((WordLattice *)v39, v38, a9, a10, a2, *((_BYTE *)this + 64), a11, 0, *(_BYTE *)this == 0);
  v40 = (LMStats *)(v35 + 12);
  BackTraceLatticeBuilder::bootStrap((BackTraceNodeCache **)this, (WordLattice *)v39, v41, 0, v42);
  v65 = v35;
  v43 = BackTraceLatticeBuilder::stackDecode(this, (WordLattice *)v39, a4, v35, v35 + 1, v35 + 2, v35 + 3, (LMStats *)(v35 + 12));
  if (!v43)
  {
    v46 = v35;
    goto LABEL_48;
  }
  v63 = v35 + 2;
  v64 = v35 + 1;
  if (v39)
  {
    (*(void (**)(uint64_t *))(*v39 + 48))(v39);
    MemChunkFree(v39, 0);
  }
  v39 = MemChunkAlloc(0x120uLL, 0);
  WordLattice::WordLattice((WordLattice *)v39, v38, a9, a10, a2, *((_BYTE *)this + 64), a11, 1, *(_BYTE *)this == 0);
  v45 = v35 + 3;
  v46 = v35;
  if (*((_BYTE *)this + 425))
    Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::removeAll(*((_QWORD *)this + 70));
  *((_BYTE *)this + 424) = 1;
  *((_BYTE *)this + 277) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  v47 = *((unsigned int *)this + 76);
  if ((int)v47 >= 1)
  {
    v48 = 16 * v47 - 16;
    do
    {
      DgnIArray<Utterance *>::~DgnIArray(*v21 + v48);
      v48 -= 16;
    }
    while (v48 != -16);
  }
  v49 = 0;
  *((_DWORD *)this + 76) = 0;
  *((_DWORD *)this + 83) = 0;
  v50 = *((unsigned int *)this + 1);
  v51 = *((_DWORD *)this + 77);
  if (v50 <= v51
    || (DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 296, v50 - v51, 0),
        v49 = *((_DWORD *)this + 76),
        v49 <= v50))
  {
    if (v49 < v50)
    {
      v54 = v50 - v49;
      v55 = 16 * v49;
      do
      {
        v56 = (_QWORD *)(*v21 + v55);
        *v56 = 0;
        v56[1] = 0;
        v55 += 16;
        --v54;
      }
      while (v54);
    }
  }
  else
  {
    if ((int)v49 <= (int)v50)
    {
      *((_DWORD *)this + 76) = v50;
LABEL_45:
      v57 = (_DWORD *)(*v21 + 8);
      do
      {
        *v57 = 0;
        v57 += 4;
        --v50;
      }
      while (v50);
      goto LABEL_47;
    }
    v52 = (int)v49;
    v53 = 16 * (int)v49 - 16;
    do
    {
      --v52;
      DgnIArray<Utterance *>::~DgnIArray(*v21 + v53);
      v53 -= 16;
    }
    while (v52 > (int)v50);
  }
  *((_DWORD *)this + 76) = v50;
  if ((_DWORD)v50)
    goto LABEL_45;
LABEL_47:
  (*(void (**)(_QWORD))(**((_QWORD **)this + 35) + 24))(*((_QWORD *)this + 35));
  *(_DWORD *)(*((_QWORD *)this + 35) + 16) = 0;
  BackTraceItemCache::clearCache((uint64_t *)this + 36);
  BackTraceLatticeBuilder::bootStrap((BackTraceNodeCache **)this, (WordLattice *)v39, v58, 0, v59);
  BackTraceLatticeBuilder::stackDecode(this, (WordLattice *)v39, a4, v65, v64, v63, v45, v40);
  LOBYTE(v43) = v62;
LABEL_48:
  if (*((_DWORD *)this + 99))
    v60 = v43;
  else
    v60 = 1;
  if ((v60 & 1) == 0)
    BackTraceLatticeBuilder::pruneLinks(this, (WordLattice *)v39, a10, v44);
  WordLattice::getLatticeStats((uint64_t)v39, v46 + 4, v46 + 5, (unint64_t *)v46 + 3, (unint64_t *)v46 + 4);
  v46[10] += *((_DWORD *)this + 20);
  Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::removeAll((uint64_t)this + 72);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 35) + 24))(*((_QWORD *)this + 35));
  Lattice<WordLatticeLC>::gc(v39);
  Lattice<WordLatticeLC>::topSortInternal((uint64_t)v39, 0);
  return v39;
}

uint64_t Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t (*v7)(char *);
  uint64_t (*v8)(char *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = *(char **)v5;
          v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7)
            result = v7(v5 + 12);
          v8 = *(uint64_t (**)(char *))(v1 + 104);
          if (v8)
            result = v8(v5 + 52);
          *(_QWORD *)v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  char *v5;
  char *v6;
  void (*v7)(char *);
  void (*v8)(char *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = *(char **)v5;
          v7 = *(void (**)(char *))(v1 + 96);
          if (v7)
            v7(v5 + 12);
          v8 = *(void (**)(char *))(v1 + 104);
          if (v8)
            v8(v5 + 60);
          result = MrecInitModule_sdpres_sdapi();
          *(_QWORD *)v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t *BackTraceLatticeBuilder::makeSilentLattice(BackTraceLatticeBuilder *this, int a2, int a3, int a4, int a5, uint64_t a6, LatticeStats *a7)
{
  char v7;
  char v9;
  __int16 v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int Node;
  int v18;
  int v19;
  unsigned int Link;
  unsigned int v21;
  _QWORD v23[2];
  int v24;
  int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  __int128 v34;
  _QWORD v35[2];
  int v36;
  _BOOL4 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;

  v7 = (char)a7;
  v9 = a5;
  v12 = (__int16)this;
  if (a2 == -16)
    v13 = a5;
  else
    v13 = 1;
  if (v13)
    v14 = a2;
  else
    v14 = 2;
  v15 = MemChunkAlloc(0x120uLL, 0);
  WordLattice::WordLattice((WordLattice *)v15, v14, a3, a4, v12, v9, v7, 1, 1);
  Node = Lattice<WordLatticeLC>::createNode(v16);
  v18 = Lattice<WordLatticeLC>::createNode((uint64_t)v15);
  v19 = Lattice<WordLatticeLC>::createNode((uint64_t)v15);
  v36 = v14 - (v14 > 1);
  v37 = v14 > 1;
  v38 = 0u;
  v39 = 0u;
  v40 = 0;
  v41 = 1879048192;
  v42 = 0;
  v35[0] = &off_24C2149F8;
  v35[1] = 0xBFF0000000000000;
  v43 = -1;
  v44 = 0x3FFFFCFFFFFDLL;
  v45 = xmmword_209A593D0;
  Link = Lattice<WordLatticeLC>::createLink((uint64_t)v15, v18, Node, (WordLatticeLC *)v35);
  Lattice<WordLatticeLC>::connectInLinkUnordered(v15, Link);
  Lattice<WordLatticeLC>::connectOutLinkUnordered(v15, Link);
  v24 = 0;
  v25 = v14 - (v14 > 1);
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  v29 = 1879048192;
  v30 = 0;
  v31 = -1;
  v23[0] = &off_24C2149F8;
  v23[1] = 0xBFF0000000000000;
  v32 = -50331650;
  v33 = 0x3FFF;
  v34 = xmmword_209A593D0;
  v21 = Lattice<WordLatticeLC>::createLink((uint64_t)v15, v19, v18, (WordLatticeLC *)v23);
  Lattice<WordLatticeLC>::connectInLinkUnordered(v15, v21);
  Lattice<WordLatticeLC>::connectOutLinkUnordered(v15, v21);
  WordLattice::getLatticeStats((uint64_t)v15, (unsigned int *)(a6 + 16), (unsigned int *)(a6 + 20), (unint64_t *)(a6 + 24), (unint64_t *)(a6 + 32));
  Lattice<WordLatticeLC>::topSortInternal((uint64_t)v15, 0);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v23);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v35);
  return v15;
}

void sub_20994F610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&a27);
  _Unwind_Resume(a1);
}

void StringGlobalParam::~StringGlobalParam(StringGlobalParam *this)
{
  StringGlobalParamBase::~StringGlobalParamBase(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t NetNBestAlg::NetNBestAlg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BitArray *v5;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  DgnString::DgnString((DgnString *)(a1 + 16));
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 32) = 0xC00000010;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  BitArray::setSize(v5, *(_DWORD *)(a3 + 16));
  return a1;
}

void sub_20994F6EC(_Unwind_Exception *a1)
{
  BitArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnPriorityQueue<NBestQueueItem>::~DgnPriorityQueue(v2);
  BitArray::~BitArray(v1);
  _Unwind_Resume(a1);
}

void DgnPriorityQueue<NBestQueueItem>::~DgnPriorityQueue(uint64_t a1)
{
  _QWORD *Min;

  for (; *(_DWORD *)(a1 + 64); *(_QWORD *)(a1 + 8) = Min)
  {
    Min = (_QWORD *)DgnHeap<NBestQueueItem>::extractMin(a1 + 56);
    *Min = *(_QWORD *)(a1 + 8);
  }
  DgnIArray<Utterance *>::~DgnIArray(a1 + 56);
  DgnPool::~DgnPool((DgnPool *)a1);
}

uint64_t DgnHeap<NBestQueueItem>::extractMin(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 8) - 1;
  v2 = **(_QWORD **)a1;
  if (v1 < 1)
  {
    *(_DWORD *)(a1 + 8) = 0;
  }
  else
  {
    **(_QWORD **)a1 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v1);
    *(_DWORD *)(a1 + 8) = v1;
    DgnHeap<NBestQueueItem>::heapifyDown(a1, 0);
  }
  return v2;
}

uint64_t DgnHeap<NBestQueueItem>::heapifyDown(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    v3 = (2 * (_DWORD)a2) | 1u;
    if ((int)v3 >= v2
      || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v3) + 8) >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * a2)
                                                                                             + 8))
    {
      v3 = a2;
    }
    v4 = (2 * a2 + 2);
    if ((int)v4 >= v2
      || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v4) + 8) >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v3)
                                                                                             + 8))
    {
      v4 = v3;
    }
    if ((_DWORD)v4 == (_DWORD)a2)
      break;
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * a2) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v5;
    a2 = v4;
  }
  return a2;
}

uint64_t HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::HashKEV(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C2190A8;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 20;
  else
    v7 = 28;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20994F8FC(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::~HashKEV(uint64_t a1)
{
  HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::~HashKEV(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::~HashKEV(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C2190A8;
  if (*(_DWORD *)(a1 + 8))
    HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(_QWORD **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = (_QWORD *)*v5;
          v7 = *(uint64_t (**)(_QWORD *))(v1 + 96);
          if (v7)
            result = v7(v5 + 2);
          *v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

void BackTraceItemCache::~BackTraceItemCache(BackTraceItemCache *this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    (*(void (**)(_QWORD))*v1)(*(_QWORD *)this);
    MemChunkFree(v1, 0);
  }
}

void BtNBestResult::~BtNBestResult(BtNBestResult *this)
{
  DgnDelete<NetNBestAlg>(*(_QWORD *)this);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56);
  BitArray::~BitArray((BtNBestResult *)((char *)this + 40));
}

void SearchLMContext::~SearchLMContext(SearchLMContext *this)
{
  if (*((_BYTE *)this + 8))
    SearchLMScorer::unsetContext(*(_QWORD *)this);
}

uint64_t *HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::findBucket(uint64_t a1, _DWORD *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;

  v4 = BackTraceItem::computeHash(a2);
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
    v6 = (-1640531527 * v4) >> -(char)v5;
  else
    v6 = 0;
  v7 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 8 * v6);
  v8 = *v7;
  if (*v7)
  {
    v9 = v4;
    do
    {
      v10 = (uint64_t *)v8;
      if (*(_DWORD *)(v8 + 8) == v9
        && BackTraceItem::operator==(a2, (_DWORD *)(*(_QWORD *)(**(_QWORD **)(v8 + 16) + 16 * *(unsigned int *)(v8 + 24))+ ((unint64_t)*(unsigned int *)(v8 + 28) << 6))))
      {
        break;
      }
      v8 = *v10;
      v7 = v10;
    }
    while (*v10);
  }
  return v7;
}

BOOL BackTraceItem::operator==(_DWORD *a1, _DWORD *a2)
{
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  result = CWIDAC::operator==((uint64_t)a1, (uint64_t)a2);
  if (result)
    return a1[6] == a2[6]
        && a1[7] == a2[7]
        && a1[8] == a2[8]
        && a1[9] == a2[9]
        && a1[10] == a2[10]
        && a1[11] == a2[11]
        && a1[12] == a2[12]
        && a1[13] == a2[13]
        && a1[14] == a2[14];
  return result;
}

uint64_t HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::add(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v4 >> 1)
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v4);
  result = BackTraceItem::computeHash((_DWORD *)(*(_QWORD *)(**(_QWORD **)a2 + 16 * *(unsigned int *)(a2 + 8))
                                               + ((unint64_t)*(unsigned int *)(a2 + 12) << 6)));
  v6 = result;
  v7 = *(_DWORD *)(a1 + 16);
  if (v7)
    v8 = (-1640531527 * result) >> -(char)v7;
  else
    v8 = 0;
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 32);
  if (!v10)
  {
    result = DgnPool::addChunk((DgnPool *)(a1 + 24));
    v10 = *(_QWORD *)(a1 + 32);
  }
  v11 = (_QWORD *)(v9 + 8 * v8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v10;
  *(_DWORD *)(v10 + 8) = 0;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a2;
  *(_DWORD *)(v10 + 8) = v6;
  ++*(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 20))
  {
    *(_QWORD *)v10 = *v11;
  }
  else
  {
    *(_QWORD *)v10 = 0;
    v12 = (_QWORD *)*v11;
    if (*v11)
    {
      do
      {
        v11 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
  }
  *v11 = v10;
  return result;
}

BOOL RecogGerm::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = CWIDAC::operator==(a1, a2);
  if (result)
    return *(unsigned __int16 *)(a1 + 26) == *(unsigned __int16 *)(a2 + 26)
        && *(unsigned __int16 *)(a1 + 28) == *(unsigned __int16 *)(a2 + 28)
        && *(unsigned __int16 *)(a1 + 30) == *(unsigned __int16 *)(a2 + 30)
        && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
        && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
        && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  return result;
}

uint64_t BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::BtNodeCacheType(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 33) = a4;
  *(_QWORD *)a1 = &unk_24C214DE0;
  HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::HashNCHV(a1 + 40, 0, 128);
  return a1;
}

void sub_20994FE38(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  _Unwind_Resume(a1);
}

_QWORD *BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::~BtNodeCacheType(_QWORD *a1)
{
  *a1 = &unk_24C214DE0;
  HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  return a1;
}

void BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::~BtNodeCacheType(_QWORD *a1)
{
  *a1 = &unk_24C214DE0;
  HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  JUMPOUT(0x20BD149A8);
}

BOOL BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::isEmpty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 0;
}

uint64_t BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::removeAll(uint64_t a1)
{
  return HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::removeAll(a1 + 40);
}

uint64_t BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sizeObject<unsigned int>(a1 + 8, a2);
  v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 8;
  if (a2 == 3)
    v6 = 0;
  else
    v6 = v5;
  if (a2 == 3)
    v7 = v4;
  else
    v7 = v4 + 1;
  return v7 + Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(a1 + 40, a2) + v6;
}

uint64_t BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::findOrCreateNode(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, char a5, int *a6, char *a7)
{
  unint64_t v13;
  int v14;
  BOOL v15;
  char v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *Bucket;
  char v22;
  unsigned int *p_Node;
  unsigned int v24;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  BOOL v31;
  int Node;
  _DWORD v33[2];
  __int128 v34;
  int v35;
  int v36;
  char v37;

  v13 = *a4;
  v14 = v13 & 0xFE000000;
  if (*(_BYTE *)(a1 + 32))
    v15 = v14 == -100663296;
  else
    v15 = 1;
  if (v15 || v14 == -67108864)
    goto LABEL_9;
  v27 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v13 >> 22) & 0x3F8)) + 48);
  v28 = *(_QWORD *)(a1 + 24);
  v29 = (*(_DWORD *)(v28 + 68) & 0xFFFFFFFD) != 0 || Constraint::isCoartAllowedForState(v28, a4);
  v30 = v13 & 0xFFFFFF;
  v31 = (_DWORD)v30 == 16777208 || !v29;
  if (v31
    || !*(_WORD *)(*(_QWORD *)(v27 + 592) + 2 * v30) && !*(_WORD *)(*(_QWORD *)(v27 + 608) + 2 * v30))
  {
    if (v29)
      goto LABEL_29;
LABEL_9:
    v17 = 0;
    v18 = -83886084;
    goto LABEL_10;
  }
  if (!*(_BYTE *)(a1 + 33))
    goto LABEL_9;
LABEL_29:
  v18 = *a6;
  v17 = 1;
LABEL_10:
  v19 = a4[1];
  v33[0] = *a4;
  v33[1] = v19;
  v34 = *(_OWORD *)(a4 + 2);
  v35 = v18;
  v36 = a3;
  v37 = v17 & a5;
  v20 = a1 + 40;
  Bucket = HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::findBucket(a1 + 40, (uint64_t)v33);
  if (*Bucket)
  {
    v22 = 0;
    p_Node = (unsigned int *)(*Bucket + 44);
  }
  else
  {
    Node = Lattice<WordLatticeLC>::createNode(a2);
    v24 = *(_DWORD *)(a1 + 16);
    if (v24 == *(_DWORD *)(a1 + 20))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 8, 1, 1);
      v24 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v24) = 1879048192;
    ++*(_DWORD *)(a1 + 16);
    p_Node = (unsigned int *)&Node;
    HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::add(v20, (uint64_t)v33, &Node);
    v22 = 1;
  }
  result = *p_Node;
  *a7 = v22;
  return result;
}

uint64_t HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::HashNCHV(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD v11[2];
  __int128 v12;
  unint64_t v13;
  char v14;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C2196B8;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v11[1] = 0x3FFF;
  v12 = xmmword_209A593D0;
  v13 = 0xFFFFFFF0FAFFFFFFLL;
  v14 = 0;
  v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  v8 = sizeObject((uint64_t)v11, 2);
  if (v7)
    v9 = 4;
  else
    v9 = 8;
  *(_DWORD *)(a1 + 24) = 48;
  *(_DWORD *)(a1 + 28) = v8 + v9 + 13;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_209950228(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::~HashNCHV(uint64_t a1)
{
  HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::~HashNCHV(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::~HashNCHV(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C2196B8;
  if (*(_DWORD *)(a1 + 8))
    HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t (*v7)(_QWORD *);
  uint64_t (*v8)(char *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = *(char **)v5;
          v7 = *(uint64_t (**)(_QWORD *))(v1 + 96);
          if (v7)
            result = v7((_QWORD *)v5 + 1);
          v8 = *(uint64_t (**)(char *))(v1 + 104);
          if (v8)
            result = v8(v5 + 44);
          *(_QWORD *)v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::add(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1)
    HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::upSize(a1, 2 * v6);
  result = CWIDAC::computeHash(a2);
  HIDWORD(v8) = result;
  LODWORD(v8) = result;
  HIDWORD(v8) = (v8 >> 19) + *(_DWORD *)(a2 + 28);
  LODWORD(v8) = HIDWORD(v8);
  HIDWORD(v8) = (v8 >> 19) + *(unsigned __int8 *)(a2 + 32);
  LODWORD(v8) = HIDWORD(v8);
  v9 = *(_DWORD *)(a1 + 16);
  v10 = (-1640531527 * ((v8 >> 19) + *(_DWORD *)(a2 + 24))) >> -(char)v9;
  if (v9)
    v11 = v10;
  else
    v11 = 0;
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13)
  {
    result = DgnPool::addChunk((DgnPool *)(a1 + 24));
    v13 = *(_QWORD *)(a1 + 32);
  }
  v14 = (_QWORD *)(v12 + 8 * v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v13;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)a2;
  *(_DWORD *)(v13 + 12) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(v13 + 40) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(v13 + 32) = v15;
  *(_DWORD *)(v13 + 44) = *a3;
  ++*(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 20))
  {
    *(_QWORD *)v13 = *v14;
  }
  else
  {
    *(_QWORD *)v13 = 0;
    v16 = (_QWORD *)*v14;
    if (*v14)
    {
      do
      {
        v14 = v16;
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
  }
  *v14 = v13;
  return result;
}

_QWORD *HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::findBucket(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;

  HIDWORD(v4) = CWIDAC::computeHash(a2);
  LODWORD(v4) = HIDWORD(v4);
  HIDWORD(v4) = (v4 >> 19) + *(_DWORD *)(a2 + 28);
  LODWORD(v4) = HIDWORD(v4);
  HIDWORD(v4) = (v4 >> 19) + *(unsigned __int8 *)(a2 + 32);
  LODWORD(v4) = HIDWORD(v4);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = (-1640531527 * ((v4 >> 19) + *(_DWORD *)(a2 + 24))) >> -(char)v5;
  if (!v5)
    v6 = 0;
  v7 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v6);
  do
  {
    v8 = v7;
    v7 = (_QWORD *)*v7;
  }
  while (v7 && !BtTrigramNodeHashKey::equalKeys((uint64_t)(v7 + 1), a2));
  return v8;
}

BOOL BtTrigramNodeHashKey::equalKeys(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (*(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
    return 0;
  result = CWIDAC::operator==(a1, a2);
  if (!result)
    return result;
  return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32) && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

uint64_t HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::upSize(uint64_t a1, int a2)
{
  uint64_t *v4;
  _QWORD *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v17 = 0;
  RoundUpToPowerOf2(a2, &v17);
  v4 = (uint64_t *)(a1 + 80);
  v15 = 0;
  v16 = 0;
  DgnIFixArray<BucketLinkKEV<unsigned int> *>::copyArraySlice(&v15, (_QWORD *)(a1 + 80), 0, *(_DWORD *)(a1 + 88));
  v5 = *(_QWORD **)(a1 + 80);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *v4 = 0;
  }
  *(_DWORD *)(a1 + 88) = 0;
  v6 = v17;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  v7 = v16;
  if (v16)
  {
    v8 = 0;
    do
    {
      v9 = *(uint64_t **)(v15 + 8 * v8);
      if (v9)
      {
        do
        {
          v10 = (uint64_t *)*v9;
          HIDWORD(v11) = CWIDAC::computeHash((uint64_t)(v9 + 1));
          LODWORD(v11) = HIDWORD(v11);
          HIDWORD(v11) = *((_DWORD *)v9 + 9) + (v11 >> 19);
          LODWORD(v11) = HIDWORD(v11);
          HIDWORD(v11) = (v11 >> 19) + *((unsigned __int8 *)v9 + 40);
          LODWORD(v11) = HIDWORD(v11);
          v12 = (-1640531527 * ((v11 >> 19) + *((_DWORD *)v9 + 8))) >> -(char)v17;
          if (!v17)
            v12 = 0;
          v13 = *v4;
          *v9 = *(_QWORD *)(*v4 + 8 * v12);
          *(_QWORD *)(v13 + 8 * v12) = v9;
          v9 = v10;
        }
        while (v10);
        v7 = v16;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v15);
}

void sub_2099506A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::BtNodeCacheType(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 33) = a4;
  *(_QWORD *)a1 = &unk_24C214D20;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::HashNCHV(a1 + 40, 0, 128);
  return a1;
}

void sub_209950710(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  _Unwind_Resume(a1);
}

_QWORD *BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::~BtNodeCacheType(_QWORD *a1)
{
  *a1 = &unk_24C214D20;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  return a1;
}

void BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::~BtNodeCacheType(_QWORD *a1)
{
  *a1 = &unk_24C214D20;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  JUMPOUT(0x20BD149A8);
}

BOOL BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::isEmpty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 0;
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::removeAll(uint64_t a1)
{
  return HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::removeAll(a1 + 40);
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sizeObject<unsigned int>(a1 + 8, a2);
  v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 8;
  if (a2 == 3)
    v6 = 0;
  else
    v6 = v5;
  if (a2 == 3)
    v7 = v4;
  else
    v7 = v4 + 1;
  return v7 + Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(a1 + 40, a2) + v6;
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::findOrCreateNode(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, char a5, unsigned int *a6, char *a7)
{
  unint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  _QWORD *Bucket;
  char v19;
  unsigned int *p_Node;
  unsigned int v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int Node;
  _BYTE v28[32];

  if (!*(_BYTE *)(a1 + 32)
    || ((v14 = *a4, (v14 & 0xFE000000) != 0xFA000000) ? (v15 = (v14 & 0xFE000000) == -67108864) : (v15 = 1), v15))
  {
    v16 = 0;
  }
  else
  {
    v23 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v14 >> 22) & 0x3F8)) + 48);
    v24 = *(_QWORD *)(a1 + 24);
    v16 = (*(_DWORD *)(v24 + 68) & 0xFFFFFFFD) != 0 || Constraint::isCoartAllowedForState(v24, a4);
    v25 = v14 & 0xFFFFFF;
    if ((_DWORD)v25 != 16777208 && v16 != 0)
      v16 = !*(_WORD *)(*(_QWORD *)(v23 + 592) + 2 * v25)
         && !*(_WORD *)(*(_QWORD *)(v23 + 608) + 2 * v25)
         || *(_BYTE *)(a1 + 33) != 0;
  }
  BtNodeKeyGenerator<false,true>::getKey(a3, (int *)a4, a5, a6, v16, (uint64_t)v28);
  v17 = a1 + 40;
  Bucket = HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::findBucket(a1 + 40, (uint64_t)v28);
  if (*Bucket)
  {
    v19 = 0;
    p_Node = (unsigned int *)(*Bucket + 40);
  }
  else
  {
    Node = Lattice<WordLatticeLC>::createNode(a2);
    v21 = *(_DWORD *)(a1 + 16);
    if (v21 == *(_DWORD *)(a1 + 20))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 8, 1, 1);
      v21 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v21) = 1879048192;
    ++*(_DWORD *)(a1 + 16);
    p_Node = (unsigned int *)&Node;
    HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::add(v17, (uint64_t)v28, &Node);
    v19 = 1;
  }
  result = *p_Node;
  *a7 = v19;
  return result;
}

uint64_t HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::HashNCHV(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD v11[2];
  __int128 v12;
  int v13;
  char v14;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C219690;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v11[1] = 0x3FFF;
  v12 = xmmword_209A593D0;
  v13 = -16;
  v14 = 0;
  v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  v8 = sizeObject((uint64_t)v11, 2);
  if (v7)
    v9 = 4;
  else
    v9 = 8;
  *(_DWORD *)(a1 + 24) = 48;
  *(_DWORD *)(a1 + 28) = v8 + v9 + 11;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_209950AF0(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV(uint64_t a1)
{
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C219690;
  if (*(_DWORD *)(a1 + 8))
    HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD *);
  uint64_t (*v8)(_QWORD *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(_QWORD **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = (_QWORD *)*v5;
          v7 = *(uint64_t (**)(_QWORD *))(v1 + 96);
          if (v7)
            result = v7(v5 + 1);
          v8 = *(uint64_t (**)(_QWORD *))(v1 + 104);
          if (v8)
            result = v8(v5 + 5);
          *v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t BtNodeKeyGenerator<false,true>::getKey@<X0>(uint64_t result@<X0>, int *a2@<X1>, char a3@<W2>, unsigned int *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v6;
  __int16 v7;
  __int16 v8;
  __int128 v9;
  __int16 v10;
  unint64_t v11;

  v6 = *a2;
  v7 = *((_WORD *)a2 + 2);
  v8 = *((_WORD *)a2 + 3);
  v9 = *(_OWORD *)(a2 + 2);
  v10 = 0;
  if (a5)
  {
    if ((a3 & 1) == 0)
    {
      v11 = *a4;
      if ((v6 & 0xFE000000) != 0xFC000000 && (v11 & 0xFE000000) != -67108864)
        v10 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v11 >> 22) & 0x3F8))
                                               + 48)
                                   + 592)
                       + 2 * (v11 & 0xFFFFFF));
    }
  }
  else
  {
    a3 = 0;
  }
  *(_DWORD *)a6 = v6;
  *(_WORD *)(a6 + 4) = v7;
  *(_WORD *)(a6 + 6) = v8;
  *(_OWORD *)(a6 + 8) = v9;
  *(_DWORD *)(a6 + 24) = result;
  *(_WORD *)(a6 + 28) = v10;
  *(_BYTE *)(a6 + 30) = a3;
  return result;
}

uint64_t HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::add(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;

  v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1)
    HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::upSize(a1, 2 * v6);
  result = CWIDAC::computeHash(a2);
  HIDWORD(v8) = result;
  LODWORD(v8) = result;
  HIDWORD(v8) = (v8 >> 19) + *(_DWORD *)(a2 + 24);
  LODWORD(v8) = HIDWORD(v8);
  HIDWORD(v8) = (v8 >> 19) + *(unsigned __int8 *)(a2 + 30);
  LODWORD(v8) = HIDWORD(v8);
  v9 = *(_DWORD *)(a1 + 16);
  v10 = (-1640531527 * ((v8 >> 19) + *(unsigned __int16 *)(a2 + 28))) >> -(char)v9;
  if (v9)
    v11 = v10;
  else
    v11 = 0;
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13)
  {
    result = DgnPool::addChunk((DgnPool *)(a1 + 24));
    v13 = *(_QWORD *)(a1 + 32);
  }
  v14 = (_QWORD *)(v12 + 8 * v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v13;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)a2;
  *(_DWORD *)(v13 + 12) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(a2 + 8);
  v15 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v13 + 35) = *(_DWORD *)(a2 + 27);
  *(_DWORD *)(v13 + 32) = v15;
  *(_DWORD *)(v13 + 40) = *a3;
  ++*(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 20))
  {
    *(_QWORD *)v13 = *v14;
  }
  else
  {
    *(_QWORD *)v13 = 0;
    v16 = (_QWORD *)*v14;
    if (*v14)
    {
      do
      {
        v14 = v16;
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
  }
  *v14 = v13;
  return result;
}

_QWORD *HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::findBucket(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;

  HIDWORD(v4) = CWIDAC::computeHash(a2);
  LODWORD(v4) = HIDWORD(v4);
  HIDWORD(v4) = (v4 >> 19) + *(_DWORD *)(a2 + 24);
  LODWORD(v4) = HIDWORD(v4);
  HIDWORD(v4) = (v4 >> 19) + *(unsigned __int8 *)(a2 + 30);
  LODWORD(v4) = HIDWORD(v4);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = (-1640531527 * ((v4 >> 19) + *(unsigned __int16 *)(a2 + 28))) >> -(char)v5;
  if (!v5)
    v6 = 0;
  v7 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v6);
  do
  {
    v8 = v7;
    v7 = (_QWORD *)*v7;
  }
  while (v7 && !BtNodeHashKey::equalKeys((uint64_t)(v7 + 1), a2));
  return v8;
}

BOOL BtNodeHashKey::equalKeys(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
    return 0;
  result = CWIDAC::operator==(a1, a2);
  if (!result)
    return result;
  return *(unsigned __int8 *)(a1 + 30) == *(unsigned __int8 *)(a2 + 30)
      && *(unsigned __int16 *)(a1 + 28) == *(unsigned __int16 *)(a2 + 28);
}

uint64_t HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::upSize(uint64_t a1, int a2)
{
  uint64_t *v4;
  _QWORD *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v17 = 0;
  RoundUpToPowerOf2(a2, &v17);
  v4 = (uint64_t *)(a1 + 80);
  v15 = 0;
  v16 = 0;
  DgnIFixArray<BucketLinkKEV<unsigned int> *>::copyArraySlice(&v15, (_QWORD *)(a1 + 80), 0, *(_DWORD *)(a1 + 88));
  v5 = *(_QWORD **)(a1 + 80);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *v4 = 0;
  }
  *(_DWORD *)(a1 + 88) = 0;
  v6 = v17;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  v7 = v16;
  if (v16)
  {
    v8 = 0;
    do
    {
      v9 = *(uint64_t **)(v15 + 8 * v8);
      if (v9)
      {
        do
        {
          v10 = (uint64_t *)*v9;
          HIDWORD(v11) = CWIDAC::computeHash((uint64_t)(v9 + 1));
          LODWORD(v11) = HIDWORD(v11);
          HIDWORD(v11) = *((_DWORD *)v9 + 8) + (v11 >> 19);
          LODWORD(v11) = HIDWORD(v11);
          HIDWORD(v11) = (v11 >> 19) + *((unsigned __int8 *)v9 + 38);
          LODWORD(v11) = HIDWORD(v11);
          v12 = (-1640531527 * ((v11 >> 19) + *((unsigned __int16 *)v9 + 18))) >> -(char)v17;
          if (!v17)
            v12 = 0;
          v13 = *v4;
          *v9 = *(_QWORD *)(*v4 + 8 * v12);
          *(_QWORD *)(v13 + 8 * v12) = v9;
          v9 = v10;
        }
        while (v10);
        v7 = v16;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v15);
}

void sub_209951004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::BtNodeCacheType(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 33) = a4;
  *(_QWORD *)a1 = &unk_24C214D60;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::HashNCHV(a1 + 40, 0, 128);
  return a1;
}

void sub_209951074(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  _Unwind_Resume(a1);
}

_QWORD *BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::~BtNodeCacheType(_QWORD *a1)
{
  *a1 = &unk_24C214D60;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  return a1;
}

void BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::~BtNodeCacheType(_QWORD *a1)
{
  *a1 = &unk_24C214D60;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  JUMPOUT(0x20BD149A8);
}

BOOL BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::isEmpty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 0;
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::removeAll(uint64_t a1)
{
  return HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::removeAll(a1 + 40);
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sizeObject<unsigned int>(a1 + 8, a2);
  v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 8;
  if (a2 == 3)
    v6 = 0;
  else
    v6 = v5;
  if (a2 == 3)
    v7 = v4;
  else
    v7 = v4 + 1;
  return v7 + Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(a1 + 40, a2) + v6;
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::findOrCreateNode(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  int v16;
  uint64_t v17;
  _QWORD *Bucket;
  char v19;
  unsigned int *p_Node;
  unsigned int v21;
  uint64_t result;
  uint64_t v23;
  int Node;
  _DWORD v25[2];
  uint64_t v26;
  int32x2_t v27;
  int v28;
  __int16 v29;
  char v30;

  v12 = *(_DWORD *)a4;
  v13 = *(_DWORD *)a4 & 0xFE000000;
  if (*(_BYTE *)(a1 + 32))
    v14 = v13 == -100663296;
  else
    v14 = 1;
  if (!v14 && v13 != -67108864)
  {
    v23 = *(_QWORD *)(a1 + 24);
    if ((*(_DWORD *)(v23 + 68) & 0xFFFFFFFD) == 0)
    {
      Constraint::isCoartAllowedForState(v23, (unsigned int *)a4);
      v12 = *(_DWORD *)a4;
    }
  }
  v16 = *(_DWORD *)(a4 + 4);
  v25[0] = v12;
  v25[1] = v16;
  v26 = *(_QWORD *)(a4 + 8);
  v27 = vdup_n_s32(0xFAFFFFFC);
  v28 = a3;
  v29 = 0;
  v30 = 0;
  v17 = a1 + 40;
  Bucket = HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::findBucket(a1 + 40, (uint64_t)v25);
  if (*Bucket)
  {
    v19 = 0;
    p_Node = (unsigned int *)(*Bucket + 40);
  }
  else
  {
    Node = Lattice<WordLatticeLC>::createNode(a2);
    v21 = *(_DWORD *)(a1 + 16);
    if (v21 == *(_DWORD *)(a1 + 20))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 8, 1, 1);
      v21 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v21) = 1879048192;
    ++*(_DWORD *)(a1 + 16);
    p_Node = (unsigned int *)&Node;
    HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::add(v17, (uint64_t)v25, &Node);
    v19 = 1;
  }
  result = *p_Node;
  *a7 = v19;
  return result;
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::BtNodeCacheType(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 33) = a4;
  *(_QWORD *)a1 = &unk_24C214DA0;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::HashNCHV(a1 + 40, 0, 128);
  return a1;
}

void sub_209951348(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  _Unwind_Resume(a1);
}

_QWORD *BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::~BtNodeCacheType(_QWORD *a1)
{
  *a1 = &unk_24C214DA0;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  return a1;
}

void BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::~BtNodeCacheType(_QWORD *a1)
{
  *a1 = &unk_24C214DA0;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  JUMPOUT(0x20BD149A8);
}

BOOL BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::isEmpty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 0;
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::removeAll(uint64_t a1)
{
  return HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::removeAll(a1 + 40);
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sizeObject<unsigned int>(a1 + 8, a2);
  v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 8;
  if (a2 == 3)
    v6 = 0;
  else
    v6 = v5;
  if (a2 == 3)
    v7 = v4;
  else
    v7 = v4 + 1;
  return v7 + Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(a1 + 40, a2) + v6;
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::findOrCreateNode(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, __int8 a5, unsigned int *a6, char *a7)
{
  unint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  _QWORD *Bucket;
  char v19;
  unsigned int *p_Node;
  unsigned int v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int Node;
  int32x2_t v28[4];

  if (!*(_BYTE *)(a1 + 32)
    || ((v14 = a4->u32[0], (v14 & 0xFE000000) != 0xFA000000) ? (v15 = (v14 & 0xFE000000) == -67108864) : (v15 = 1), v15))
  {
    v16 = 0;
  }
  else
  {
    v23 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v14 >> 22) & 0x3F8)) + 48);
    v24 = *(_QWORD *)(a1 + 24);
    v16 = (*(_DWORD *)(v24 + 68) & 0xFFFFFFFD) != 0 || Constraint::isCoartAllowedForState(v24, (unsigned int *)a4);
    v25 = v14 & 0xFFFFFF;
    if ((_DWORD)v25 != 16777208 && v16 != 0)
      v16 = !*(_WORD *)(*(_QWORD *)(v23 + 592) + 2 * v25)
         && !*(_WORD *)(*(_QWORD *)(v23 + 608) + 2 * v25)
         || *(_BYTE *)(a1 + 33) != 0;
  }
  BtNodeKeyGenerator<true,true>::getKey(a3, a4, a5, a6, v16, v28);
  v17 = a1 + 40;
  Bucket = HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::findBucket(a1 + 40, (uint64_t)v28);
  if (*Bucket)
  {
    v19 = 0;
    p_Node = (unsigned int *)(*Bucket + 40);
  }
  else
  {
    Node = Lattice<WordLatticeLC>::createNode(a2);
    v21 = *(_DWORD *)(a1 + 16);
    if (v21 == *(_DWORD *)(a1 + 20))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 8, 1, 1);
      v21 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v21) = 1879048192;
    ++*(_DWORD *)(a1 + 16);
    p_Node = (unsigned int *)&Node;
    HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::add(v17, (uint64_t)v28, &Node);
    v19 = 1;
  }
  result = *p_Node;
  *a7 = v19;
  return result;
}

uint64_t BtNodeKeyGenerator<true,true>::getKey@<X0>(uint64_t result@<X0>, int32x2_t *a2@<X1>, __int8 a3@<W2>, unsigned int *a4@<X3>, int a5@<W4>, int32x2_t *a6@<X8>)
{
  __int32 v6;
  __int16 v7;
  __int16 v8;
  int32x2_t v9;
  __int16 v10;
  unint64_t v11;

  v6 = a2->i32[0];
  v7 = a2->i16[2];
  v8 = a2->i16[3];
  v9 = a2[1];
  v10 = 0;
  if (a5)
  {
    if ((a3 & 1) == 0)
    {
      v11 = *a4;
      if ((v6 & 0xFE000000) != 0xFC000000 && (v11 & 0xFE000000) != -67108864)
        v10 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v11 >> 22) & 0x3F8))
                                               + 48)
                                   + 592)
                       + 2 * (v11 & 0xFFFFFF));
    }
  }
  else
  {
    a3 = 0;
  }
  a6->i32[0] = v6;
  a6->i16[2] = v7;
  a6->i16[3] = v8;
  a6[1] = v9;
  a6[2] = vdup_n_s32(0xFAFFFFFC);
  a6[3].i32[0] = result;
  a6[3].i16[2] = v10;
  a6[3].i8[6] = a3;
  return result;
}

uint64_t BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::BtNodeCacheType(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 33) = a4;
  *(_QWORD *)a1 = &unk_24C214E20;
  HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::HashNCHV(a1 + 40, 0, 128);
  return a1;
}

void sub_209951730(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  _Unwind_Resume(a1);
}

_QWORD *BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::~BtNodeCacheType(_QWORD *a1)
{
  *a1 = &unk_24C214E20;
  HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  return a1;
}

void BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::~BtNodeCacheType(_QWORD *a1)
{
  *a1 = &unk_24C214E20;
  HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = off_24C216180;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  JUMPOUT(0x20BD149A8);
}

BOOL BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::isEmpty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 0;
}

uint64_t BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::removeAll(uint64_t a1)
{
  return HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::removeAll(a1 + 40);
}

uint64_t BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sizeObject<unsigned int>(a1 + 8, a2);
  v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v5 = 8;
  if (a2 == 3)
    v6 = 0;
  else
    v6 = v5;
  if (a2 == 3)
    v7 = v4;
  else
    v7 = v4 + 1;
  return v7 + Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(a1 + 40, a2) + v6;
}

uint64_t BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::findOrCreateNode(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, uint64_t a5, uint64_t a6, char *a7)
{
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v16;
  uint64_t v17;
  _QWORD *Bucket;
  char v19;
  unsigned int *p_Node;
  unsigned int v21;
  uint64_t result;
  uint64_t v23;
  int Node;
  unint64_t v25;
  unsigned int v26;

  v12 = *a4;
  v13 = *a4 & 0xFE000000;
  if (*(_BYTE *)(a1 + 32))
    v14 = v13 == -100663296;
  else
    v14 = 1;
  if (!v14 && v13 != -67108864)
  {
    v23 = *(_QWORD *)(a1 + 24);
    if ((*(_DWORD *)(v23 + 68) & 0xFFFFFFFD) == 0)
    {
      Constraint::isCoartAllowedForState(v23, a4);
      v12 = *a4;
    }
  }
  v16 = a4[2];
  v25 = a3 | ((unint64_t)(v12 >> 25) << 32);
  v26 = v16;
  v17 = a1 + 40;
  Bucket = HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::findBucket(a1 + 40, (uint64_t)&v25);
  if (*Bucket)
  {
    v19 = 0;
    p_Node = (unsigned int *)(*Bucket + 20);
  }
  else
  {
    Node = Lattice<WordLatticeLC>::createNode(a2);
    v21 = *(_DWORD *)(a1 + 16);
    if (v21 == *(_DWORD *)(a1 + 20))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 8, 1, 1);
      v21 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v21) = 1879048192;
    ++*(_DWORD *)(a1 + 16);
    p_Node = (unsigned int *)&Node;
    HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::add(v17, (uint64_t *)&v25, &Node);
    v19 = 1;
  }
  result = *p_Node;
  *a7 = v19;
  return result;
}

uint64_t HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::HashNCHV(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C2196E0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 18;
  else
    v7 = 22;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_209951A48(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::~HashNCHV(uint64_t a1)
{
  HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::~HashNCHV(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::~HashNCHV(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C2196E0;
  if (*(_DWORD *)(a1 + 8))
    HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t (*v7)(_QWORD *);
  uint64_t (*v8)(char *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = *(char **)v5;
          v7 = *(uint64_t (**)(_QWORD *))(v1 + 96);
          if (v7)
            result = v7((_QWORD *)v5 + 1);
          v8 = *(uint64_t (**)(char *))(v1 + 104);
          if (v8)
            result = v8(v5 + 20);
          *(_QWORD *)v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::add(uint64_t result, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  v5 = result;
  v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1)
    result = HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::upSize(result, 2 * v6);
  HIDWORD(v7) = *(_DWORD *)a2;
  LODWORD(v7) = *(_DWORD *)a2;
  HIDWORD(v7) = (v7 >> 19) + *((unsigned __int16 *)a2 + 2);
  LODWORD(v7) = HIDWORD(v7);
  v8 = *(_DWORD *)(v5 + 16);
  v9 = (-1640531527 * ((v7 >> 19) + *((_DWORD *)a2 + 2))) >> -(char)v8;
  if (v8)
    v10 = v9;
  else
    v10 = 0;
  v11 = *(_QWORD *)(v5 + 80);
  v12 = *(_QWORD *)(v5 + 32);
  if (!v12)
  {
    result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    v12 = *(_QWORD *)(v5 + 32);
  }
  v13 = (_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)v12;
  v14 = *a2;
  *(_DWORD *)(v12 + 16) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(v12 + 8) = v14;
  *(_DWORD *)(v12 + 20) = *a3;
  ++*(_DWORD *)(v5 + 8);
  if (*(_BYTE *)(v5 + 20))
  {
    *(_QWORD *)v12 = *v13;
  }
  else
  {
    *(_QWORD *)v12 = 0;
    v15 = (_QWORD *)*v13;
    if (*v13)
    {
      do
      {
        v13 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
  }
  *v13 = v12;
  return result;
}

_QWORD *HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::findBucket(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *result;

  v2 = *(unsigned __int16 *)(a2 + 4);
  HIDWORD(v3) = *(_DWORD *)a2;
  LODWORD(v3) = *(_DWORD *)a2;
  HIDWORD(v3) = (v3 >> 19) + v2;
  LODWORD(v3) = HIDWORD(v3);
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = (-1640531527 * ((v3 >> 19) + v4)) >> -(char)v5;
  if (!v5)
    v6 = 0;
  v7 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v6);
  v8 = (uint64_t *)*v7;
  if (!*v7)
    return v7;
  do
  {
    result = v7;
    v7 = v8;
    if (*((_DWORD *)v8 + 2) == *(_DWORD *)a2 && *((unsigned __int16 *)v8 + 6) == v2 && *((_DWORD *)v8 + 4) == v4)
      break;
    v8 = (uint64_t *)*v8;
    result = v7;
  }
  while (*v7);
  return result;
}

uint64_t HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::upSize(uint64_t a1, int a2)
{
  uint64_t *v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v19 = 0;
  RoundUpToPowerOf2(a2, &v19);
  v4 = (uint64_t *)(a1 + 80);
  v17 = 0;
  v18 = 0;
  DgnIFixArray<BucketLinkKEV<unsigned int> *>::copyArraySlice(&v17, (_QWORD *)(a1 + 80), 0, *(_DWORD *)(a1 + 88));
  v5 = *(_QWORD **)(a1 + 80);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *v4 = 0;
  }
  *(_DWORD *)(a1 + 88) = 0;
  v6 = v19;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  v7 = v18;
  if (v18)
  {
    v8 = 0;
    v9 = v19;
    v10 = 32 - v19;
    do
    {
      v11 = *(uint64_t **)(v17 + 8 * v8);
      if (v11)
      {
        do
        {
          v12 = (uint64_t *)*v11;
          HIDWORD(v13) = *((_DWORD *)v11 + 2);
          LODWORD(v13) = HIDWORD(v13);
          HIDWORD(v13) = (v13 >> 19) + *((unsigned __int16 *)v11 + 6);
          LODWORD(v13) = HIDWORD(v13);
          v14 = (-1640531527 * ((v13 >> 19) + *((_DWORD *)v11 + 4))) >> v10;
          if (!v9)
            v14 = 0;
          v15 = *v4;
          *v11 = *(_QWORD *)(*v4 + 8 * v14);
          *(_QWORD *)(v15 + 8 * v14) = v11;
          v11 = v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != v7);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v17);
}

void sub_209951E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _DWORD v12[2];
  __int128 v13;
  int v14;
  __int128 v15;
  int v16;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218950;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v12[1] = 0x3FFF;
  v13 = xmmword_209A593D0;
  v14 = 0x3FFF;
  v15 = xmmword_209A593D0;
  v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  v8 = sizeObject((uint64_t)v12, 2);
  v9 = sizeObject((uint64_t)&v16, 2);
  if (v7)
    v10 = 8;
  else
    v10 = 12;
  *(_DWORD *)(a1 + 24) = 80;
  *(_DWORD *)(a1 + 28) = v10 + v8 + v9;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  MrecInitModule_sdpres_sdapi();
  return a1;
}

void sub_209951F44(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  MrecInitModule_sdpres_sdapi();
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::~Hash(uint64_t a1)
{
  Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218950;
  if (*(_DWORD *)(a1 + 8))
    Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD v11[2];
  __int128 v12;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218AE0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v11[1] = 0x3FFF;
  v12 = xmmword_209A593D0;
  v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  v8 = sizeObject((uint64_t)v11, 2);
  if (v7)
    v9 = 4;
  else
    v9 = 8;
  *(_DWORD *)(a1 + 24) = 64;
  *(_DWORD *)(a1 + 28) = v8 + v9 + 21;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2099520D4(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::~Hash(uint64_t a1)
{
  Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218AE0;
  if (*(_DWORD *)(a1 + 8))
    Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

_QWORD *Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::findBucket(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;

  v4 = CWIDACPair::computeHash(a2);
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
    v6 = (-1640531527 * v4) >> -(char)v5;
  else
    v6 = 0;
  v7 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v6);
  v8 = *v7;
  if (!*v7)
    return v7;
  v9 = v4;
  do
  {
    v10 = v7;
    v7 = (_QWORD *)v8;
    if (*(_DWORD *)(v8 + 8) == v9 && CWIDAC::operator==(v8 + 12, a2) && CWIDAC::operator==((uint64_t)v7 + 36, a2 + 24))
      break;
    v8 = *v7;
    v10 = v7;
  }
  while (*v7);
  return v10;
}

__n128 CWIDACPair::CWIDACPair(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

unint64_t DgnArray<BackTraceItem>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, (unint64_t)v6 << 6, v5 << 6, v5 << 6, 1);
  *(_DWORD *)(a1 + 12) = result >> 6;
  *(_QWORD *)a1 = v8;
  return result;
}

uint64_t *Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::findBucket(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  HIDWORD(v4) = CWIDAC::computeHash(a2);
  LODWORD(v4) = HIDWORD(v4);
  HIDWORD(v4) = (v4 >> 19) + *(_DWORD *)(a2 + 28);
  LODWORD(v4) = HIDWORD(v4);
  HIDWORD(v4) = (v4 >> 19) + *(_DWORD *)(a2 + 32);
  LODWORD(v4) = HIDWORD(v4);
  HIDWORD(v4) = (v4 >> 19) + *(_DWORD *)(a2 + 36);
  LODWORD(v4) = HIDWORD(v4);
  v5 = (v4 >> 19) + *(unsigned __int8 *)(a2 + 24);
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
    v7 = (-1640531527 * v5) >> -(char)v6;
  else
    v7 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 8 * v7);
  v9 = *v8;
  if (*v8)
  {
    do
    {
      v10 = (uint64_t *)v9;
      if (*(_DWORD *)(v9 + 8) == v5 && BackTraceLinkPair::operator==(v9 + 12, a2))
        break;
      v9 = *v10;
      v8 = v10;
    }
    while (*v10);
  }
  return v8;
}

BOOL BackTraceLinkPair::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = CWIDAC::operator==(a1, a2);
  if (result)
    return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
        && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
        && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
        && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36);
  return result;
}

double BucketLink<BackTraceLinkPair,int>::BucketLink(uint64_t a1, int *a2, _DWORD *a3)
{
  int v3;
  double result;

  v3 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 2);
  *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 24);
  result = *(double *)(a2 + 7);
  *(double *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 48) = a2[9];
  *(_DWORD *)(a1 + 52) = *a3;
  return result;
}

double BaseWordLatticeLC::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  result = *(double *)(a2 + 64);
  *(double *)(a1 + 64) = result;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return result;
}

void UserDelta::printSize(UserDelta *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  UserDelta *v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  int v91;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 77, (DgnString *)&v90);
  if (v91)
    v16 = v90;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v90);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91)
    v27 = v90;
  else
    v27 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91)
    v32 = v90;
  else
    v32 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91)
    v37 = v90;
  else
    v37 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91)
    v42 = v90;
  else
    v42 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91)
    v47 = v90;
  else
    v47 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v47, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91)
    v52 = v90;
  else
    v52 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v52, 4, 4, 0);
  v89 = a3;
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 12;
  else
    v53 = 16;
  v54 = *((_DWORD *)this + 8);
  v55 = *((_DWORD *)this + 9);
  v56 = this;
  v57 = v55 >= v54;
  v58 = v55 - v54;
  if (v57)
  {
    v60 = v54 & ~(v54 >> 31);
    v54 = 0;
    v59 = v53 + v60;
    v53 += v60 + v58;
  }
  else
  {
    v59 = v53;
  }
  v61 = v54;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91)
    v66 = v90;
  else
    v66 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v21, &byte_209A88803, v22, v22, v66, v53, v59, v61);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += v53;
  *a5 += v59;
  *a6 += v61;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91)
    v71 = v90;
  else
    v71 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v21, &byte_209A88803, v22, v22, v71, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v72 = 12;
  else
    v72 = 16;
  v73 = *((_DWORD *)v56 + 14);
  v74 = *((_DWORD *)v56 + 15);
  v57 = v74 >= v73;
  v75 = v74 - v73;
  if (v57)
  {
    v77 = v73 & ~(v73 >> 31);
    v73 = 0;
    v76 = v72 + v77;
    v72 += v77 + v75;
  }
  else
  {
    v76 = v72;
  }
  v78 = v73;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91)
    v83 = v90;
  else
    v83 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, v21, &byte_209A88803, v22, v22, v83, v72, v76, v78);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += v72;
  *a5 += v76;
  *a6 += v78;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 80, (DgnString *)&v90);
  if (v91)
    v88 = v90;
  else
    v88 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, v89, &byte_209A88803, (35 - v89), (35 - v89), v88, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v90);
}

void sub_2099529E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void UserDelta::saveUserDelta(UserDelta *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v7;
  uint64_t CurrentSubDirComponents;
  int v9;

  v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x64u, a4, "MRUDL!?", 23, 2);
  v9 = 0;
  writeObject((uint64_t)v7, (int *)this, &v9);
  writeObject((uint64_t)v7, (int *)this + 1, &v9);
  writeObject((uint64_t)v7, (int *)this + 2, &v9);
  writeObject((uint64_t)v7, (int *)this + 3, &v9);
  writeObject((uint64_t)v7, (int *)this + 4, &v9);
  writeObject((uint64_t)v7, (int *)this + 5, &v9);
  writeObject<char>((uint64_t)v7, (uint64_t)this + 24, &v9);
  writeObject((uint64_t)v7, (int *)this + 10, &v9);
  writeObject<unsigned char>((uint64_t)v7, (uint64_t)this + 48, &v9);
  writeObjectChecksum((uint64_t)v7, &v9);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x64u, v9);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
}

uint64_t MrecInitLibrarySet_throughPhoneme(void)
{
  MrecInitLibrarySet_throughFileutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  return MrecInitModule_sdpres_sdapi();
}

void EmptyNet::~EmptyNet(EmptyNet *this)
{
  HmmNet::~HmmNet(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t EmptyNet::sizeObject(unsigned int *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  v4 = HmmNet::sizeObject(a1, a2);
  v5 = sizeObject((uint64_t)(a1 + 29), v2);
  v6 = sizeObject((uint64_t)(a1 + 32), v2);
  if (v2 == 3)
    v7 = v4;
  else
    v7 = v4 + 1;
  return v7 + v5 + v6;
}

uint64_t EmptyNet::getExitContext(EmptyNet *this)
{
  return *((_QWORD *)this + 1) + 40;
}

uint64_t EmptyNet::getExitContextPtr(EmptyNet *this)
{
  return 0;
}

uint64_t EmptyNet::getBestScore(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = *(__int16 *)(a1 + 138);
  if ((_DWORD)result != 20000)
    *a2 = a1 + 128;
  return result;
}

uint64_t EmptyNet::scoreNetInternal(uint64_t this, int a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = this;
  v5 = *(__int16 *)(this + 124);
  v6 = 20000;
  if (v5 != 20000)
  {
    v7 = *(unsigned __int16 *)(*(_QWORD *)(this + 8) + 244);
    if (v7 == 20000)
      LOWORD(v7) = 0;
    v8 = v5 - (__int16)v7;
    if (v8 <= a4)
      v6 = v8;
    else
      v6 = 20000;
  }
  *(_QWORD *)(this + 128) = *(_QWORD *)(this + 116);
  *(_WORD *)(this + 136) = v6;
  *(_WORD *)(this + 138) = v6;
  v9 = *(_QWORD *)(this + 8);
  if (v6 != 20000)
  {
    if (*(_DWORD *)(v9 + 224) >= v6)
    {
      this = BestData::newOrTiedBestNode(v9 + 192, v6, (const Node *)(this + 128), 0);
      v9 = *(_QWORD *)(v4 + 8);
    }
    v10 = v9 + 4 * (v6 + 5000);
    ++*(_DWORD *)(v10 + 151392);
    ++*(_DWORD *)(v9 + 302468);
    ++*(_DWORD *)(v10 + 320);
    ++*(_DWORD *)(v9 + 302464);
  }
  *(_WORD *)(v4 + 108) = v6;
  *(_WORD *)(v4 + 110) = v6;
  if (v6 < *(__int16 *)(v9 + 246))
    *(_WORD *)(v9 + 246) = v6;
  return this;
}

uint64_t EmptyNet::thresholdNetInternal(uint64_t this, int a2, int a3)
{
  int v3;

  if (*(__int16 *)(this + 110) <= a3)
  {
    v3 = 1;
  }
  else
  {
    v3 = 0;
    *(_WORD *)(this + 110) = 20000;
  }
  *(_DWORD *)(this + 104) = v3;
  return this;
}

uint64_t EmptyNet::calcNumActiveNodes(EmptyNet *this)
{
  return *((unsigned int *)this + 26);
}

uint64_t EmptyNet::unpackEmptySequence(uint64_t this, Node **a2, Node **a3)
{
  *(_DWORD *)(this + 136) = 1310740000;
  *(_QWORD *)(this + 140) = 0;
  *(_DWORD *)(this + 148) = -65536;
  *(_BYTE *)(this + 152) = 1;
  *a3 = (Node *)(this + 128);
  *a2 = (Node *)(this + 128);
  return this;
}

uint64_t EmptyNet::attachInPort(uint64_t this, unsigned int a2, Node *a3)
{
  *(_QWORD *)(*(_QWORD *)(this + 56) + 8 * a2) = this + 116;
  return this;
}

uint64_t HmmNet::isAcoustic(HmmNet *this)
{
  return 0;
}

void Imelda::printSize(Imelda *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  int v41;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/ldt.cpp", 76, (DgnString *)&v40);
  if (v41)
    v16 = v40;
  else
    v16 = &unk_209A7B050;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7B050, a3, &unk_209A7B050, v16);
  DgnString::~DgnString((DgnString *)&v40);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7B050);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/ldt.cpp", 78, (DgnString *)&v40);
  if (v41)
    v25 = v40;
  else
    v25 = &unk_209A7B050;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &unk_209A7B050, (34 - a3), (34 - a3), v25, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += 4;
  *a5 += 4;
  v26 = (char *)this + 8;
  v27 = LinearTransform::sizeObject((uint64_t)this + 8, 0);
  v28 = LinearTransform::sizeObject((uint64_t)v26, 1);
  v29 = LinearTransform::sizeObject((uint64_t)v26, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/ldt.cpp", 78, (DgnString *)&v40);
  if (v41)
    v34 = v40;
  else
    v34 = &unk_209A7B050;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &unk_209A7B050, (34 - a3), (34 - a3), v34, v27, v28, v29);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += v27;
  *a5 += v28;
  *a6 += v29;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/ldt.cpp", 79, (DgnString *)&v40);
  if (v41)
    v39 = v40;
  else
    v39 = &unk_209A7B050;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, a3, &unk_209A7B050, (35 - a3), (35 - a3), v39, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v40);
}

void sub_209952FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void Imelda::saveImelda(Imelda *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  DgnStream *v8;
  uint64_t CurrentSubDirComponents;
  unsigned int v10;

  if (a4)
  {
    Imelda::saveImeldaText(this, a2, a5);
  }
  else
  {
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x1Fu, a5, "MRLDB!?", 19, 3);
    v10 = 0;
    writeObject((uint64_t)v8, (int *)this, &v10);
    LinearTransform::writeObject((Imelda *)((char *)this + 8), v8, &v10);
    writeObjectChecksum((uint64_t)v8, (int *)&v10);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x1Fu, v10);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
}

void Imelda::saveImeldaText(Imelda *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  _QWORD v18[2];
  void *v19[2];
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24[35];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v24);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v24, (uint64_t)a2, 0x20u, a3);
  v22 = 0;
  v23 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v24, sLDT_Versions, (uint64_t)&v22, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v24, "LinearDiscriminantTransform", (_QWORD *)(v22 + 8 * (v23 - 1)));
  v20 = 0;
  v21 = 0;
  v19[0] = 0;
  v11 = realloc_array(0, v19, 0x10uLL, 0, 0, 1);
  v20 = v19[0];
  LODWORD(v21) = 4;
  HIDWORD(v21) = v11 >> 2;
  DgnArray<DgnString>::DgnArray(v19, 4);
  DgnString::operator=((DgnString *)v19[0], "TableName");
  *v20 = 0;
  DgnString::operator=((DgnString *)((char *)v19[0] + 16), "RowIndex");
  v20[1] = 3;
  DgnString::operator=((DgnString *)((char *)v19[0] + 32), "ColumnIndex");
  v20[2] = 3;
  DgnString::operator=((DgnString *)((char *)v19[0] + 48), "TableEntryInt");
  v20[3] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v24, (uint64_t)&v20, (uint64_t)v19);
  v13 = *((unsigned int *)this + 2);
  v12 = *((unsigned int *)this + 3);
  v14 = *((_DWORD *)this + 12);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "InputFeatureDim", v13);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "OutputFeatureDim", v12);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "ModelFeatureDim", *(unsigned int *)this);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "TransformIntScale", 1 << v14);
  if ((_DWORD)v12)
  {
    for (i = 0; i != v12; ++i)
    {
      if ((_DWORD)v13)
      {
        for (j = 0; j != v13; ++j)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v24, 0, "LDAMatrix");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 1u, i);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 2u, j);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v24, 3u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 16 * i) + 4 * j));
          DgnTextFileWriter::writeNextLine(v24);
        }
      }
    }
  }
  v18[0] = 0;
  v18[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v18, (uint64_t *)this + 2, 0, *((_DWORD *)this + 6));
  if ((_DWORD)v12)
  {
    for (k = 0; k != v12; ++k)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v24, 0, "LDAOffset");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 1u, k);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 2u, 0);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v24, 3u, *(_DWORD *)(v18[0] + 4 * k));
      DgnTextFileWriter::writeNextLine(v24);
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  DgnArray<DgnString>::releaseAll((uint64_t)v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v22);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v24);
}

void sub_2099533D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

void MrecInitModule_utteranc_channel(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugUttAddFrame)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugUttAddFrame", byte_209A7B06D, byte_209A7B06D, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugUttAddFrame = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugUttAddFrame);
  }
}

void PerFrameUttInfo::~PerFrameUttInfo(PerFrameUttInfo *this)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 32);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this);
}

uint64_t Utterance::getMicrosecPerFrame(Utterance *this)
{
  return AcousticFormat::getMicrosecPerFrame((Utterance *)((char *)this + 40));
}

unint64_t DgnArray<EnergyInfo>::copyArraySlice(unint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;

  v7 = result;
  *(_DWORD *)(result + 8) = 0;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    v9 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_6;
  }
  else
  {
    result = DgnPrimArray<unsigned long long>::reallocElts(result, a4 - v8, 0);
    v9 = *(_DWORD *)(v7 + 8);
  }
  v11 = a4;
  v10 = v9;
  do
  {
    *(_QWORD *)(*(_QWORD *)v7 + 8 * v10) = *(_QWORD *)(*a2 + 8 * a3);
    v10 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v10;
    ++a3;
    --v11;
  }
  while (v11);
LABEL_6:
  if (v10 < a4)
  {
    v12 = a4 - (unint64_t)v10;
    v13 = *(_QWORD *)v7 + 8 * v10 + 6;
    do
    {
      *(_QWORD *)(v13 - 6) = 1;
      v13 += 8;
      --v12;
    }
    while (v12);
  }
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

unint64_t DgnArray<PitchInfo>::copyArraySlice(unint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  _QWORD *v13;

  v7 = result;
  *(_DWORD *)(result + 8) = 0;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    v9 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_6;
  }
  else
  {
    result = DgnPrimArray<unsigned long long>::reallocElts(result, a4 - v8, 0);
    v9 = *(_DWORD *)(v7 + 8);
  }
  v11 = a4;
  v10 = v9;
  do
  {
    *(_QWORD *)(*(_QWORD *)v7 + 8 * v10) = *(_QWORD *)(*a2 + 8 * a3);
    v10 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v10;
    ++a3;
    --v11;
  }
  while (v11);
LABEL_6:
  if (v10 < a4)
  {
    v12 = a4 - (unint64_t)v10;
    v13 = (_QWORD *)(*(_QWORD *)v7 + 8 * v10);
    do
    {
      *v13++ = 0xFFFFFFFF00000000;
      --v12;
    }
    while (v12);
  }
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

void DgnArray<DgnPrimArray<double>>::copyArraySlice(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 >= 1)
  {
    v9 = 16 * v8 - 16;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a1 + v9);
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 12);
  if (a4 <= v10)
  {
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_14;
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1, a4 - v10, 0);
    v11 = *(_DWORD *)(a1 + 8);
  }
  v13 = 0;
  v12 = v11;
  do
  {
    v14 = *a2 + 16 * (a3 + v13);
    v15 = (_QWORD *)(*(_QWORD *)a1 + 16 * v12);
    *v15 = 0;
    v15[1] = 0;
    DgnPrimArray<double>::copyArraySlice((uint64_t)v15, (uint64_t *)v14, 0, *(_DWORD *)(v14 + 8));
    v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      v16 = (int)v12;
      v17 = 16 * (int)v12 - 16;
      do
      {
        --v16;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a1 + v17);
        v17 -= 16;
      }
      while (v16 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    v18 = a4 - (unint64_t)v12;
    v19 = 16 * v12;
    do
    {
      v20 = (_QWORD *)(*(_QWORD *)a1 + v19);
      *v20 = 0;
      v20[1] = 0;
      v19 += 16;
      --v18;
    }
    while (v18);
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = a4;
}

void Utterance::~Utterance(Utterance *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_BYTE *)this + 416))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 270, (uint64_t)"channel/utteranc", 1, (uint64_t)"%s", a7, a8, (char)&errStr_channel_utteranc_E_DEL);
  if (!*((_QWORD *)this + 53))
  {
    DgnDelete<EnvMgr>(*((EnvMgr **)this + 40));
    *((_QWORD *)this + 40) = 0;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 288);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 272);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 256);
  DgnIOwnArray<WaveData *>::releaseAll((uint64_t)this + 240);
  DgnIOwnArray<WaveData *>::releaseAll((uint64_t)this + 224);
  DgnIOwnArray<SynchronizedArray<DgnPrimArray<unsigned char>> *>::releaseAll((uint64_t)this + 200);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 168);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 152);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 120);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 104);
}

void Utterance::printSize(Utterance *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  EnvMgr *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 286, (DgnString *)&v276);
  if ((_DWORD)v277)
    v16 = (void *)v276;
  else
    v16 = &unk_209A7B06D;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7B06D, a3, &unk_209A7B06D, v16);
  DgnString::~DgnString((DgnString *)&v276);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7B06D);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 287, (DgnString *)&v276);
  if ((_DWORD)v277)
    v27 = (void *)v276;
  else
    v27 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A7B06D, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 288, (DgnString *)&v276);
  if ((_DWORD)v277)
    v32 = (void *)v276;
  else
    v32 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A7B06D, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 290, (DgnString *)&v276);
  if ((_DWORD)v277)
    v37 = (void *)v276;
  else
    v37 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A7B06D, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 292, (DgnString *)&v276);
  if ((_DWORD)v277)
    v42 = (void *)v276;
  else
    v42 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A7B06D, (34 - a3), (34 - a3), v42, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 294, (DgnString *)&v276);
  if ((_DWORD)v277)
    v47 = (void *)v276;
  else
    v47 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), &unk_209A7B06D, (34 - a3), (34 - a3), v47, 8, 8, 0);
  v273 = a3;
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 295, (DgnString *)&v276);
  if ((_DWORD)v277)
    v52 = (void *)v276;
  else
    v52 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_209A7B06D, (34 - a3), (34 - a3), v52, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 8;
  *a5 += 8;
  v53 = sizeObject((uint64_t)this + 40, 0);
  v54 = sizeObject((uint64_t)this + 40, 1);
  v55 = sizeObject((uint64_t)this + 40, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 297, (DgnString *)&v276);
  if ((_DWORD)v277)
    v60 = (void *)v276;
  else
    v60 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, v21, &unk_209A7B06D, v22, v22, v60, v53, v54, v55);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v53;
  *a5 += v54;
  *a6 += v55;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 298, (DgnString *)&v276);
  if ((_DWORD)v277)
    v65 = (void *)v276;
  else
    v65 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, v21, &unk_209A7B06D, v22, v22, v65, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 300, (DgnString *)&v276);
  if ((_DWORD)v277)
    v70 = (void *)v276;
  else
    v70 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v21, &unk_209A7B06D, v22, v22, v70, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 302, (DgnString *)&v276);
  if ((_DWORD)v277)
    v75 = (void *)v276;
  else
    v75 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, v21, &unk_209A7B06D, v22, v22, v75, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 304, (DgnString *)&v276);
  if ((_DWORD)v277)
    v80 = (void *)v276;
  else
    v80 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, v21, &unk_209A7B06D, v22, v22, v80, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  v81 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 104, 0);
  v82 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 104, 1);
  v276 = 0;
  v277 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v276);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 305, (DgnString *)&v276);
  if ((_DWORD)v277)
    v87 = (void *)v276;
  else
    v87 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A7B06D, v22, v22, v87, v81, v82, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v81;
  *a5 += v82;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v88 = 12;
  else
    v88 = 16;
  v89 = *((unsigned int *)this + 44);
  v90 = *((_DWORD *)this + 45);
  if (v90 >= v89)
  {
    v91 = 0;
    if ((int)v89 > 0)
      v88 = (v88 | 2) + 2 * (v89 - 1);
    v92 = v88 + 2 * (v90 - v89);
  }
  else
  {
    v91 = 2 * v89;
    v92 = v88;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 307, (DgnString *)&v276);
  if ((_DWORD)v277)
    v97 = (void *)v276;
  else
    v97 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A7B06D, v22, v22, v97, v92, v88, v91);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v92;
  *a5 += v88;
  *a6 += v91;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v98 = 12;
  else
    v98 = 16;
  v99 = *((unsigned int *)this + 48);
  v100 = *((_DWORD *)this + 49);
  if (v100 >= v99)
  {
    v101 = 0;
    if ((int)v99 > 0)
      v98 += 4 * (v99 - 1) + 4;
    v102 = v98 + 4 * (v100 - v99);
  }
  else
  {
    v101 = 4 * v99;
    v102 = v98;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 309, (DgnString *)&v276);
  if ((_DWORD)v277)
    v107 = (void *)v276;
  else
    v107 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v103, v104, v105, v106, v21, &unk_209A7B06D, v22, v22, v107, v102, v98, v101);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v102;
  *a5 += v98;
  *a6 += v101;
  v108 = sizeObject<SynchronizedArray<DgnPrimArray<unsigned char>> *>((uint64_t)this + 200, 0);
  v109 = sizeObject<SynchronizedArray<DgnPrimArray<unsigned char>> *>((uint64_t)this + 200, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 311, (DgnString *)&v276);
  if ((_DWORD)v277)
    v114 = (void *)v276;
  else
    v114 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v21, &unk_209A7B06D, v22, v22, v114, v108, v109, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v108;
  *a5 += v109;
  v115 = sizeObject((uint64_t)this + 120, 0);
  v116 = sizeObject((uint64_t)this + 120, 1);
  v117 = sizeObject((uint64_t)this + 120, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 313, (DgnString *)&v276);
  if ((_DWORD)v277)
    v122 = (void *)v276;
  else
    v122 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v118, v119, v120, v121, v21, &unk_209A7B06D, v22, v22, v122, v115, v116, v117);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v115;
  *a5 += v116;
  *a6 += v117;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 315, (DgnString *)&v276);
  if ((_DWORD)v277)
    v127 = (void *)v276;
  else
    v127 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v123, v124, v125, v126, v21, &unk_209A7B06D, v22, v22, v127, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 317, (DgnString *)&v276);
  if ((_DWORD)v277)
    v132 = (void *)v276;
  else
    v132 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v128, v129, v130, v131, v21, &unk_209A7B06D, v22, v22, v132, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 319, (DgnString *)&v276);
  if ((_DWORD)v277)
    v137 = (void *)v276;
  else
    v137 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v133, v134, v135, v136, v21, &unk_209A7B06D, v22, v22, v137, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 321, (DgnString *)&v276);
  if ((_DWORD)v277)
    v142 = (void *)v276;
  else
    v142 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v138, v139, v140, v141, v21, &unk_209A7B06D, v22, v22, v142, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  v143 = sizeObject<WaveData *>((uint64_t)this + 224, 0);
  v144 = sizeObject<WaveData *>((uint64_t)this + 224, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 322, (DgnString *)&v276);
  if ((_DWORD)v277)
    v149 = (void *)v276;
  else
    v149 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v21, &unk_209A7B06D, v22, v22, v149, v143, v144, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v143;
  *a5 += v144;
  v150 = sizeObject<WaveData *>((uint64_t)this + 240, 0);
  v151 = sizeObject<WaveData *>((uint64_t)this + 240, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 324, (DgnString *)&v276);
  if ((_DWORD)v277)
    v156 = (void *)v276;
  else
    v156 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v152, v153, v154, v155, v21, &unk_209A7B06D, v22, v22, v156, v150, v151, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v150;
  *a5 += v151;
  v157 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 256, 0);
  v158 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 256, 1);
  v276 = 0;
  v277 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v276);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 326, (DgnString *)&v276);
  if ((_DWORD)v277)
    v163 = (void *)v276;
  else
    v163 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v159, v160, v161, v162, v21, &unk_209A7B06D, v22, v22, v163, v157, v158, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v157;
  *a5 += v158;
  v164 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 272, 0);
  v165 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 272, 1);
  v276 = 0;
  v277 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v276);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 327, (DgnString *)&v276);
  if ((_DWORD)v277)
    v170 = (void *)v276;
  else
    v170 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v166, v167, v168, v169, v21, &unk_209A7B06D, v22, v22, v170, v164, v165, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v164;
  *a5 += v165;
  v171 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 288, 0);
  v172 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 288, 1);
  v276 = 0;
  v277 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v276);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 329, (DgnString *)&v276);
  if ((_DWORD)v277)
    v177 = (void *)v276;
  else
    v177 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v173, v174, v175, v176, v21, &unk_209A7B06D, v22, v22, v177, v171, v172, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v171;
  *a5 += v172;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v178 = 12;
  else
    v178 = 16;
  v179 = *((unsigned int *)this + 78);
  v180 = *((_DWORD *)this + 79);
  if (v180 >= v179)
  {
    v181 = 0;
    if ((int)v179 > 0)
      v178 = (v178 | 2) + 2 * (v179 - 1);
    v182 = v178 + 2 * (v180 - v179);
  }
  else
  {
    v181 = 2 * v179;
    v182 = v178;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 330, (DgnString *)&v276);
  if ((_DWORD)v277)
    v187 = (void *)v276;
  else
    v187 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v183, v184, v185, v186, v21, &unk_209A7B06D, v22, v22, v187, v182, v178, v181);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v182;
  *a5 += v178;
  *a6 += v181;
  v188 = (EnvMgr *)*((_QWORD *)this + 40);
  if (v188)
  {
    v275 = 0;
    v276 = 0;
    v274 = 0;
    EnvMgr::printSize(v188, 0xFFFFFFFFLL, v21, &v276, &v275, &v274);
    *a4 += v276;
    *a5 += v275;
    *a6 += v274;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v189 = 4;
  else
    v189 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 331, (DgnString *)&v276);
  if ((_DWORD)v277)
    v194 = (void *)v276;
  else
    v194 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v190, v191, v192, v193, v21, &unk_209A7B06D, v22, v22, v194, v189, v189, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v189;
  *a5 += v189;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 332, (DgnString *)&v276);
  if ((_DWORD)v277)
    v199 = (void *)v276;
  else
    v199 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v195, v196, v197, v198, v21, &unk_209A7B06D, v22, v22, v199, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 334, (DgnString *)&v276);
  if ((_DWORD)v277)
    v204 = (void *)v276;
  else
    v204 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v200, v201, v202, v203, v21, &unk_209A7B06D, v22, v22, v204, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 335, (DgnString *)&v276);
  if ((_DWORD)v277)
    v209 = (void *)v276;
  else
    v209 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v205, v206, v207, v208, v21, &unk_209A7B06D, v22, v22, v209, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  v210 = SnapTime::sizeObject((uint64_t)this + 352, 0);
  v211 = SnapTime::sizeObject((uint64_t)this + 352, 1);
  v212 = SnapTime::sizeObject((uint64_t)this + 352, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 336, (DgnString *)&v276);
  if ((_DWORD)v277)
    v217 = (void *)v276;
  else
    v217 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v213, v214, v215, v216, v21, &unk_209A7B06D, v22, v22, v217, v210, v211, v212);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v210;
  *a5 += v211;
  *a6 += v212;
  v218 = SnapTime::sizeObject((uint64_t)this + 384, 0);
  v219 = SnapTime::sizeObject((uint64_t)this + 384, 1);
  v220 = SnapTime::sizeObject((uint64_t)this + 384, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 337, (DgnString *)&v276);
  if ((_DWORD)v277)
    v225 = (void *)v276;
  else
    v225 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v221, v222, v223, v224, v21, &unk_209A7B06D, v22, v22, v225, v218, v219, v220);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v218;
  *a5 += v219;
  *a6 += v220;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 339, (DgnString *)&v276);
  if ((_DWORD)v277)
    v230 = (void *)v276;
  else
    v230 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v226, v227, v228, v229, v21, &unk_209A7B06D, v22, v22, v230, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 341, (DgnString *)&v276);
  if ((_DWORD)v277)
    v235 = (void *)v276;
  else
    v235 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v231, v232, v233, v234, v21, &unk_209A7B06D, v22, v22, v235, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 343, (DgnString *)&v276);
  if ((_DWORD)v277)
    v240 = (void *)v276;
  else
    v240 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v236, v237, v238, v239, v21, &unk_209A7B06D, v22, v22, v240, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 345, (DgnString *)&v276);
  if ((_DWORD)v277)
    v245 = (void *)v276;
  else
    v245 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v241, v242, v243, v244, v21, &unk_209A7B06D, v22, v22, v245, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 347, (DgnString *)&v276);
  if ((_DWORD)v277)
    v250 = (void *)v276;
  else
    v250 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v246, v247, v248, v249, v21, &unk_209A7B06D, v22, v22, v250, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v251 = 4;
  else
    v251 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 349, (DgnString *)&v276);
  if ((_DWORD)v277)
    v256 = (void *)v276;
  else
    v256 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v252, v253, v254, v255, v21, &unk_209A7B06D, v22, v22, v256, v251, v251, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v251;
  *a5 += v251;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v257 = 4;
  else
    v257 = 8;
  v258 = *((_QWORD *)this + 54);
  if (v258)
  {
    v259 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v258 + 104))(v258, 0) + v257;
    v260 = *((_QWORD *)this + 54);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v257 = 4;
    else
      v257 = 8;
    if (v260
      && (v257 += (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v260 + 104))(v260, 1),
          (v261 = *((_QWORD *)this + 54)) != 0))
    {
      v262 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v261 + 104))(v261, 3);
    }
    else
    {
      v262 = 0;
    }
  }
  else
  {
    v262 = 0;
    v259 = v257;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 351, (DgnString *)&v276);
  if ((_DWORD)v277)
    v267 = (void *)v276;
  else
    v267 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v263, v264, v265, v266, v21, &unk_209A7B06D, v22, v22, v267, v259, v257, v262);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v259;
  *a5 += v257;
  *a6 += v262;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 352, (DgnString *)&v276);
  if ((_DWORD)v277)
    v272 = (void *)v276;
  else
    v272 = &unk_209A7B06D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v268, v269, v270, v271, v273, &unk_209A7B06D, (35 - v273), (35 - v273), v272, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v276);
}

void sub_209954D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<SynchronizedArray<DgnPrimArray<unsigned char>> *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject<DgnPrimArray<unsigned char>>(v10 + 8, a2) + 5;
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t sizeObject<WaveData *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

EnvMgr *Utterance::getEnvMgr(Utterance *this)
{
  EnvMgr *result;
  uint64_t *v3;

  result = (EnvMgr *)*((_QWORD *)this + 40);
  if (!result)
  {
    v3 = MemChunkAlloc(0x110uLL, 0);
    result = EnvMgr::EnvMgr((EnvMgr *)v3, 5u);
    *((_QWORD *)this + 40) = result;
  }
  return result;
}

uint64_t Utterance::getFeaturesPerFrame(Utterance *this)
{
  return *((unsigned int *)this + 18);
}

_QWORD *DgnIOwnArray<WaveData *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<WaveData>(*(WaveData **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

unint64_t Utterance::setTransformedFrames(unint64_t result, __int16 a2, int a3, uint64_t a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v7 = result;
  v8 = *(_DWORD *)(result + 176);
  if (v8 == *(_DWORD *)(result + 180))
  {
    result = DgnPrimArray<short>::reallocElts(result + 168, 1, 1);
    v8 = *(_DWORD *)(v7 + 176);
  }
  *(_WORD *)(*(_QWORD *)(v7 + 168) + 2 * v8) = a2;
  *(_DWORD *)(v7 + 176) = v8 + 1;
  v9 = *(_DWORD *)(v7 + 192);
  if (v9 == *(_DWORD *)(v7 + 196))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(v7 + 184, 1, 1);
    v9 = *(_DWORD *)(v7 + 192);
  }
  *(_DWORD *)(*(_QWORD *)(v7 + 184) + 4 * v9) = a3;
  ++*(_DWORD *)(v7 + 192);
  v10 = *(_DWORD *)(v7 + 208);
  if (v10 == *(_DWORD *)(v7 + 212))
  {
    result = DgnPrimArray<unsigned long long>::reallocElts(v7 + 200, 1, 1);
    v10 = *(_DWORD *)(v7 + 208);
  }
  *(_QWORD *)(*(_QWORD *)(v7 + 200) + 8 * v10) = a4;
  *(_DWORD *)(v7 + 208) = v10 + 1;
  return result;
}

uint64_t Utterance::getTransformedFrames(uint64_t this, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  while (1)
  {
    if (*(_BYTE *)(this + 416))
      return 0;
    v3 = *(unsigned int *)(this + 176);
    if ((_DWORD)v3)
      break;
LABEL_7:
    this = *(_QWORD *)(this + 424);
    if (!this)
      return this;
  }
  v4 = 0;
  while (*(unsigned __int16 *)(*(_QWORD *)(this + 168) + 2 * v4) != a2
       || *(_DWORD *)(*(_QWORD *)(this + 184) + 4 * v4) != a3)
  {
    if (v3 == ++v4)
      goto LABEL_7;
  }
  return *(_QWORD *)(*(_QWORD *)(this + 200) + 8 * v4);
}

uint64_t Utterance::numCompleteRecogFrames(Utterance *this, unsigned int a2)
{
  unsigned int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 28);
  result = 268435200;
  if (v2 != 268435200)
    return v2 / a2;
  return result;
}

void Utterance::Utterance(Utterance *this, Utterance *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  const WaveData *v9;
  uint64_t *v10;
  unsigned int v11;
  unint64_t v12;
  const WaveData *v13;
  uint64_t *v14;
  unsigned int v15;

  *(_QWORD *)this = *(_QWORD *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  AcousticFormat::AcousticFormat((uint64_t)this + 40, (uint64_t)a2 + 40);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  DgnArray<DgnPrimArray<unsigned char>>::copyArraySlice((uint64_t)this + 104, (_QWORD *)a2 + 13, 0, *((_DWORD *)a2 + 28));
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  DgnArray<EnergyInfo>::copyArraySlice((unint64_t)this + 120, (_QWORD *)a2 + 15, 0, *((_DWORD *)a2 + 32));
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  DgnArray<PitchInfo>::copyArraySlice((unint64_t)this + 136, (_QWORD *)a2 + 17, 0, *((_DWORD *)a2 + 36));
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  DgnArray<FrameTypeInfo>::copyArraySlice((uint64_t)this + 152, (uint64_t *)a2 + 19, 0, *((_DWORD *)a2 + 40));
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  v4 = *((_DWORD *)a2 + 54);
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 54) = v4;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 16) = 0u;
  DgnArray<DgnPrimArray<double>>::copyArraySlice((uint64_t)this + 256, (_QWORD *)a2 + 32, 0, *((_DWORD *)a2 + 66));
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  DgnArray<DgnPrimArray<double>>::copyArraySlice((uint64_t)this + 272, (_QWORD *)a2 + 34, 0, *((_DWORD *)a2 + 70));
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  DgnArray<DgnPrimArray<double>>::copyArraySlice((uint64_t)this + 288, (_QWORD *)a2 + 36, 0, *((_DWORD *)a2 + 74));
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 304, (uint64_t *)a2 + 38, 0, *((_DWORD *)a2 + 78));
  *((_QWORD *)this + 40) = *((_QWORD *)a2 + 40);
  *((_DWORD *)this + 82) = *((_DWORD *)a2 + 82);
  *((_QWORD *)this + 42) = *((_QWORD *)a2 + 42);
  *((_DWORD *)this + 86) = *((_DWORD *)a2 + 86);
  v5 = *((_OWORD *)a2 + 23);
  *((_OWORD *)this + 22) = *((_OWORD *)a2 + 22);
  *((_OWORD *)this + 23) = v5;
  v6 = *((_OWORD *)a2 + 25);
  *((_OWORD *)this + 24) = *((_OWORD *)a2 + 24);
  *((_OWORD *)this + 25) = v6;
  *((_BYTE *)this + 416) = *((_BYTE *)a2 + 416);
  *((_BYTE *)this + 417) = *((_BYTE *)a2 + 417);
  *((_BYTE *)this + 418) = *((_BYTE *)a2 + 418);
  *((_BYTE *)this + 419) = 1;
  *((_BYTE *)this + 420) = 0;
  v7 = *((_QWORD *)a2 + 54);
  *((_QWORD *)this + 53) = a2;
  *((_QWORD *)this + 54) = v7;
  *((_BYTE *)a2 + 419) = 1;
  if (*((_DWORD *)a2 + 58))
  {
    v8 = 0;
    do
    {
      v9 = *(const WaveData **)(*((_QWORD *)a2 + 28) + 8 * v8);
      v10 = MemChunkAlloc(0x40uLL, 0);
      WaveData::WaveData((WaveData *)v10, v9);
      v11 = *((_DWORD *)this + 58);
      if (v11 == *((_DWORD *)this + 59))
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 224, 1, 1);
        v11 = *((_DWORD *)this + 58);
      }
      *(_QWORD *)(*((_QWORD *)this + 28) + 8 * v11) = v10;
      *((_DWORD *)this + 58) = v11 + 1;
      ++v8;
    }
    while (v8 < *((unsigned int *)a2 + 58));
  }
  if (*((_DWORD *)a2 + 62))
  {
    v12 = 0;
    do
    {
      v13 = *(const WaveData **)(*((_QWORD *)a2 + 30) + 8 * v12);
      v14 = MemChunkAlloc(0x40uLL, 0);
      WaveData::WaveData((WaveData *)v14, v13);
      v15 = *((_DWORD *)this + 62);
      if (v15 == *((_DWORD *)this + 63))
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 240, 1, 1);
        v15 = *((_DWORD *)this + 62);
      }
      *(_QWORD *)(*((_QWORD *)this + 30) + 8 * v15) = v14;
      *((_DWORD *)this + 62) = v15 + 1;
      ++v12;
    }
    while (v12 < *((unsigned int *)a2 + 62));
  }
}

void sub_2099554F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  PerFrameUttInfo *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a14);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a13);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a12);
  DgnIOwnArray<WaveData *>::releaseAll(v17);
  DgnIOwnArray<WaveData *>::releaseAll(v16);
  DgnIOwnArray<SynchronizedArray<DgnPrimArray<unsigned char>> *>::releaseAll(v15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a10);
  PerFrameUttInfo::~PerFrameUttInfo(v14);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a11);
  _Unwind_Resume(a1);
}

unint64_t Utterance::syncAfterRecognitionDone(unint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;

  v1 = this;
  *(_BYTE *)(*(_QWORD *)(this + 424) + 419) = 0;
  if (*(_DWORD *)(this + 176))
  {
    v2 = 0;
    do
    {
      v3 = MemChunkAlloc(0x18uLL, 0);
      v4 = SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray((uint64_t)v3);
      SynchronizedArray<DgnPrimArray<unsigned char>>::update(v4, *(_QWORD *)(*(_QWORD *)(v1 + 200) + 8 * v2));
      this = Utterance::setTransformedFrames(*(_QWORD *)(v1 + 424), *(_WORD *)(*(_QWORD *)(v1 + 168) + 2 * v2), *(_DWORD *)(*(_QWORD *)(v1 + 184) + 4 * v2), (uint64_t)v3);
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 176));
  }
  *(_BYTE *)(v1 + 419) = 0;
  return this;
}

uint64_t UttFeatureArraySynchronizedArray::update(uint64_t this, const Utterance *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = this;
  v4 = *((unsigned int *)a2 + 28);
  v5 = (_QWORD *)(this + 8);
  v7 = *(_DWORD *)(this + 16);
  v6 = *(_DWORD *)(this + 20);
  v8 = v7;
  if (v4 > v6)
  {
    this = DgnArray<DgnPrimArray<double>>::reallocElts(this + 8, v4 - v6, 0);
    v8 = *(_DWORD *)(v3 + 16);
  }
  if (v8 <= v4)
  {
    if (v8 < v4)
    {
      v11 = 16 * v8;
      v12 = v4 - v8;
      do
      {
        v13 = (_QWORD *)(*v5 + v11);
        *v13 = 0;
        v13[1] = 0;
        v11 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v8 > (int)v4)
  {
    v9 = (int)v8;
    v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      this = DgnPrimArray<unsigned int>::~DgnPrimArray(*v5 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v4);
  }
  *(_DWORD *)(v3 + 16) = v4;
  if ((int)v7 < (int)v4)
  {
    do
    {
      v14 = *((_QWORD *)a2 + 13) + 16 * v7;
      this = DgnPrimArray<unsigned char>::copyArraySlice(*v5 + 16 * v7++, (_QWORD *)v14, 0, *(_DWORD *)(v14 + 8));
    }
    while ((_DWORD)v4 != v7);
  }
  if (!*((_BYTE *)a2 + 416))
    *(_BYTE *)v3 = 1;
  return this;
}

void DgnArray<FrameTypeInfo>::copyArraySlice(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  *(_DWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 12);
  if (a4 <= v8)
  {
    v9 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_6;
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a1, a4 - v8, 0);
    v9 = *(_DWORD *)(a1 + 8);
  }
  v11 = *a2;
  v12 = *(_QWORD *)a1;
  v13 = a4;
  v10 = v9;
  do
  {
    *(_DWORD *)(v12 + 4 * v10++) = *(_DWORD *)(v11 + 4 * a3++);
    --v13;
  }
  while (v13);
LABEL_6:
  if (v10 < a4)
    bzero((void *)(*(_QWORD *)a1 + 4 * v10), 4 * (~v10 + a4) + 4);
  *(_DWORD *)(a1 + 8) = a4;
}

_QWORD *DgnIOwnArray<SynchronizedArray<DgnPrimArray<unsigned char>> *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<UttFeatureArraySynchronizedArray>(*(_QWORD *)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void SigProcDescriptor::SigProcDescriptor(SigProcDescriptor *this)
{
  _QWORD *v2;

  FeatureGeneratorSpec::FeatureGeneratorSpec(this);
  v2[10] = 0;
  v2[11] = 0;
  CharInfo::CharInfo((CharInfo *)(v2 + 12));
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  FeatureSelectorSpec::FeatureSelectorSpec((SigProcDescriptor *)((char *)this + 120));
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 44) = 0;
  *((_OWORD *)this + 10) = 0u;
  ChanStatsSpec::ChanStatsSpec((SigProcDescriptor *)((char *)this + 184));
  *(_QWORD *)((char *)this + 332) = 0;
}

void sub_2099558E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  BitArray::~BitArray((BitArray *)(v1 + 128));
  DgnArray<FeatureFilterSpec>::releaseAll(v3);
  DgnArray<FeatureFilterSpec>::releaseAll(v2);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void SigProcDescriptor::~SigProcDescriptor(SigProcDescriptor *this)
{
  ChanStatsSpec::~ChanStatsSpec((SigProcDescriptor *)((char *)this + 184));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144);
  BitArray::~BitArray((SigProcDescriptor *)((char *)this + 128));
  DgnArray<FeatureFilterSpec>::releaseAll((uint64_t)this + 104);
  DgnArray<FeatureFilterSpec>::releaseAll((uint64_t)this + 80);
  MrecInitModule_sdpres_sdapi();
}

uint64_t sizeObject<FeatureFilterSpec>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[16];
  uint64_t v11;

  FeatureFilterSpec::FeatureFilterSpec((FeatureFilterSpec *)v10);
  v4 = sizeObject((uint64_t)v10, 2);
  if (a2 == 3)
  {
    v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 12;
    else
      v5 = 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = v4;
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
          v5 += sizeObject(*(_QWORD *)a1 + 40 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2)
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v11);
  return v5;
}

void sub_209955B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void SigProcDescriptor::saveSPD(SigProcDescriptor *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15;
  int v16;
  char *v17;
  const char *v18;
  int v19;
  char *v20;
  const char *v21;
  unsigned int v22;
  const char *v23;
  int v24;
  char *v25;
  const char *v26;
  int v27;
  char *v28;
  const char *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  int *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t j;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t k;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t m;
  int v87;
  char v88;
  char v89;
  int *v90;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  unsigned int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  int v101;
  int v102;
  int v103[2];
  const char *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  void *v108[35];
  void *v109;

  v6 = *((unsigned int *)this + 22);
  v7 = *((unsigned int *)this + 28);
  v96 = *((_DWORD *)this + 1);
  v8 = *((unsigned int *)this + 31);
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v108);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v108, (uint64_t)a2, 0x57u, a3);
  v106 = 0;
  v107 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v108, sSPD_Versions, (uint64_t)&v106, v9, v10, v11, v12, v13);
  DgnTextFileWriter::setFileType((uint64_t)v108, "SignalProcessorDescriptor", (_QWORD *)(v106 + 8 * (v107 - 1)));
  DgnString::DgnString((DgnString *)&v104);
  if ((unsigned __int16)(*(_WORD *)this - 1) < 4u)
    DgnString::operator=((DgnString *)&v104, off_24C21F340[(__int16)(*(_WORD *)this - 1)]);
  if (v105)
    v14 = v104;
  else
    v14 = (const char *)&unk_209A7B0A6;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v108, "BasicFeatureType", v14);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "MelLowFreqCutoff", *((unsigned int *)this + 8));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "MelHighFreqCutoff", *((unsigned int *)this + 9));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "MelCenterFreqLinearSpacing", *((unsigned int *)this + 10));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "MelCenterFreqLinearSpacingHighCutoff", *((unsigned int *)this + 11));
  DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v108, "MelCenterFreqGeometricScale", *((double *)this + 6));
  v15 = *(unsigned __int16 *)this;
  if (v15 != 3)
  {
    if (v15 != 2)
      goto LABEL_10;
    DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v108, "PLPExponent", *((double *)this + 8));
  }
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "LPCOrder", *((unsigned int *)this + 18));
LABEL_10:
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "SampleRateMin", *((unsigned int *)this + 2));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "SampleRateMax", *((unsigned int *)this + 3));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "FrameLengthInMicrosec", *((unsigned int *)this + 83));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "AnalysisWindowLengthInMicrosec", *((unsigned int *)this + 84));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "NumberOfSpectralWarpChoices", *((unsigned int *)this + 80));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "BasicFeatureDim", *((unsigned int *)this + 1));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "AntialiasFeatureFilters", v6);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "AntialiasDecimationFactor", *((unsigned int *)this + 24));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "BasicFeatureFilters", v7);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "FinalFeatureDim", v8);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "ModelFeatureDim", *((unsigned int *)this + 82));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "FeatureScaleAndOffsetIntScale", 1 << *((_DWORD *)this + 44));
  DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v108, "PreemphCoeff", *((double *)this + 3));
  v16 = *((unsigned __int16 *)this + 92);
  if (v16 == 1)
  {
    v17 = "NoMeansNorm";
  }
  else
  {
    if (v16 != 2)
      goto LABEL_15;
    v17 = "ChannelMeansSubtraction";
  }
  DgnString::operator=((DgnString *)&v104, v17);
LABEL_15:
  if (v105)
    v18 = v104;
  else
    v18 = (const char *)&unk_209A7B0A6;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v108, "ChannelMeansNormalizationType", v18);
  v19 = *((unsigned __int16 *)this + 104);
  if (v19 == 1)
  {
    v20 = "NoVarianceNorm";
  }
  else
  {
    if (v19 != 2)
      goto LABEL_23;
    v20 = "ChannelVarianceNorm";
  }
  DgnString::operator=((DgnString *)&v104, v20);
LABEL_23:
  if (v105)
    v21 = v104;
  else
    v21 = (const char *)&unk_209A7B0A6;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v108, "ChannelVarianceNormalizationType", v21);
  v22 = *((unsigned __int16 *)this + 132) - 1;
  if (v22 <= 2)
    DgnString::operator=((DgnString *)&v104, off_24C21F360[(__int16)v22]);
  if (v105)
    v23 = v104;
  else
    v23 = (const char *)&unk_209A7B0A6;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v108, "CDFNormalizationType", v23);
  if (*((_WORD *)this + 132) != 1)
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "CDFNormalizationSum", *((unsigned int *)this + 72));
  v24 = *((unsigned __int16 *)this + 146);
  if (v24 == 1)
  {
    v25 = "NoMaximumNorm";
  }
  else
  {
    if (v24 != 2)
      goto LABEL_38;
    v25 = "C0MaximumNorm";
  }
  DgnString::operator=((DgnString *)&v104, v25);
LABEL_38:
  if (v105)
    v26 = v104;
  else
    v26 = (const char *)&unk_209A7B0A6;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v108, "ChannelMaxNormalizationType", v26);
  v27 = *((unsigned __int16 *)this + 28);
  if (v27 == 1)
  {
    v28 = "SplitRadixFloat";
  }
  else
  {
    if (v27 != 2)
      goto LABEL_46;
    v28 = "SplitRadixInteger";
  }
  DgnString::operator=((DgnString *)&v104, v28);
LABEL_46:
  if (v105)
    v29 = v104;
  else
    v29 = (const char *)&unk_209A7B0A6;
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v108, "FourierTransformType", v29);
  DgnArray<DgnString>::DgnArray(v103, 4);
  v98 = v6;
  v109 = 0;
  v30 = realloc_array(0, &v109, 0x10uLL, 0, 0, 1);
  v100 = v109;
  v101 = 4;
  v102 = v30 >> 2;
  DgnString::operator=(*(DgnString **)v103, "Type");
  *v100 = 0;
  DgnString::operator=((DgnString *)(*(_QWORD *)v103 + 16), "UnsVal1");
  v100[1] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v103 + 32), "IntVal1");
  v100[2] = 1;
  DgnString::operator=((DgnString *)(*(_QWORD *)v103 + 48), "IntVal2");
  v100[3] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v108, (uint64_t)&v100, (uint64_t)v103);
  v97 = v7;
  if ((_DWORD)v7)
  {
    v99 = *((unsigned int *)this + 80);
    if ((_DWORD)v99)
    {
      v31 = 0;
      v32 = 0;
      do
      {
        v33 = *((_QWORD *)this + 39);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "WarpChoiceInfo");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v32);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(unsigned __int8 *)(v33 + v31));
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, *(_DWORD *)(v33 + v31 + 16));
        DgnTextFileWriter::writeNextLine(v108);
        ++v32;
        v31 += 24;
      }
      while (24 * v99 != v31);
      for (i = 0; i != v99; ++i)
      {
        v35 = *((_QWORD *)this + 39);
        v36 = v35 + 24 * i;
        v38 = *(_DWORD *)(v36 + 16);
        v37 = (unsigned int *)(v36 + 16);
        if (v38)
        {
          v39 = 0;
          v40 = 0;
          v41 = (_QWORD *)(v35 + 24 * i + 8);
          do
          {
            v42 = (int *)(*v41 + v39);
            v44 = *v42;
            v43 = v42[1];
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "SpectralWarpChoiceCoordinates");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, i);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, v44);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, v43);
            DgnTextFileWriter::writeNextLine(v108);
            ++v40;
            v39 += 8;
          }
          while (v40 < *v37);
        }
      }
    }
  }
  if ((_DWORD)v98)
  {
    v45 = 0;
    v46 = 0;
    do
    {
      v47 = *((_QWORD *)this + 10);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "AntialiasFeatureFilterInput");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v46);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(_DWORD *)(v47 + v45 + 12) / *(_DWORD *)(v47 + v45));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine(v108);
      ++v46;
      v45 += 40;
    }
    while (40 * v98 != v45);
    v48 = 0;
    v49 = 32;
    do
    {
      v50 = *((_QWORD *)this + 10);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "AntialiasFeatureFilterInverseScale");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v48);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(_DWORD *)(v50 + v49));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine(v108);
      ++v48;
      v49 += 40;
    }
    while (v98 != v48);
    v51 = 0;
    v52 = 0;
    do
    {
      v53 = *((_QWORD *)this + 10) + v51;
      v55 = *(_DWORD *)(v53 + 4);
      v54 = *(_DWORD *)(v53 + 8);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "AntialiasFeatureFilterRange");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v52);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, -v54);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, v55 + ~v54);
      DgnTextFileWriter::writeNextLine(v108);
      v51 += 40;
      ++v52;
    }
    while (40 * v98 != v51);
    for (j = 0; j != v98; ++j)
    {
      v57 = *((_QWORD *)this + 10);
      v58 = v57 + 40 * j;
      v60 = *(_DWORD *)(v58 + 4);
      v59 = (unsigned int *)(v58 + 4);
      if (v60)
      {
        v61 = 0;
        v62 = v57 + 40 * j;
        v63 = (_DWORD *)(v62 + 8);
        v64 = (_QWORD *)(v62 + 16);
        do
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "AntialiasFeatureFilterCoeff");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, j);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, v61 - *v63);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, *(_DWORD *)(*v64 + 4 * v61));
          DgnTextFileWriter::writeNextLine(v108);
          ++v61;
        }
        while (v61 < *v59);
      }
    }
  }
  if ((_DWORD)v97)
  {
    v65 = 0;
    v66 = 0;
    do
    {
      v67 = *((_QWORD *)this + 13);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "BasicFeatureFilterInput");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v66);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(_DWORD *)(v67 + v65 + 12) / *(_DWORD *)(v67 + v65));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine(v108);
      ++v66;
      v65 += 40;
    }
    while (40 * v97 != v65);
    v68 = 0;
    v69 = 32;
    do
    {
      v70 = *((_QWORD *)this + 13);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "BasicFeatureFilterInverseScale");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v68);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(_DWORD *)(v70 + v69));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine(v108);
      ++v68;
      v69 += 40;
    }
    while (v97 != v68);
    v71 = 0;
    v72 = 0;
    do
    {
      v73 = *((_QWORD *)this + 13) + v71;
      v75 = *(_DWORD *)(v73 + 4);
      v74 = *(_DWORD *)(v73 + 8);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "BasicFeatureFilterRange");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v72);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, -v74);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, v75 + ~v74);
      DgnTextFileWriter::writeNextLine(v108);
      v71 += 40;
      ++v72;
    }
    while (40 * v97 != v71);
    for (k = 0; k != v97; ++k)
    {
      v77 = *((_QWORD *)this + 13);
      v78 = v77 + 40 * k;
      v80 = *(_DWORD *)(v78 + 4);
      v79 = (unsigned int *)(v78 + 4);
      if (v80)
      {
        v81 = 0;
        v82 = v77 + 40 * k;
        v83 = (_DWORD *)(v82 + 8);
        v84 = (_QWORD *)(v82 + 16);
        do
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "BasicFeatureFilterCoeff");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, k);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, v81 - *v83);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, *(_DWORD *)(*v84 + 4 * v81));
          DgnTextFileWriter::writeNextLine(v108);
          ++v81;
        }
        while (v81 < *v79);
      }
    }
  }
  v85 = (v96 + v96 * v97);
  if ((_DWORD)v85)
  {
    for (m = 0; m != v85; ++m)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "FeatureScaleAndOffset");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, m);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(_DWORD *)(*((_QWORD *)this + 18) + 4 * m));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, *(_DWORD *)(*((_QWORD *)this + 20) + 4 * m));
      DgnTextFileWriter::writeNextLine(v108);
    }
  }
  if (*((_WORD *)this + 146) == 2)
  {
    v87 = 0;
    v88 = 1;
    do
    {
      v89 = v88;
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "ChannelMaxNormInitialCoordinates");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v87);
      if ((v89 & 1) != 0)
      {
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *((_DWORD *)this + 74));
        v90 = (int *)((char *)this + 300);
      }
      else
      {
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *((_DWORD *)this + 76));
        v90 = (int *)((char *)this + 308);
      }
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, *v90);
      DgnTextFileWriter::writeNextLine(v108);
      v88 = 0;
      v87 = 1;
    }
    while ((v89 & 1) != 0);
  }
  if (*((_WORD *)this + 92) != 1 && (_DWORD)v85)
  {
    for (n = 0; n != v85; ++n)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "ChannelMeansTarget");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, n);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(unsigned __int8 *)(*((_QWORD *)this + 24) + n));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine(v108);
    }
  }
  if (*((_WORD *)this + 104) != 1 && (_DWORD)v85)
  {
    for (ii = 0; ii != v85; ++ii)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "ChannelVarianceTarget");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, ii);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(unsigned __int8 *)(*((_QWORD *)this + 27) + ii));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine(v108);
    }
    for (jj = 0; jj != v85; ++jj)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "ChannelVarianceRange");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, jj);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(unsigned __int8 *)(*((_QWORD *)this + 29) + jj));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, *(unsigned __int8 *)(*((_QWORD *)this + 31) + jj));
      DgnTextFileWriter::writeNextLine(v108);
    }
  }
  if (*((_WORD *)this + 132) != 1)
  {
    for (kk = 0; kk != 256; ++kk)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "CDFNormalizationTargetHistogram");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, kk);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(_DWORD *)(*((_QWORD *)this + 34) + 4 * kk));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine(v108);
    }
  }
  if ((_DWORD)v85)
  {
    v95 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "FeatureSelector");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v95);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, (*(_DWORD *)(*((_QWORD *)this + 16) + 4 * (v95 >> 5)) >> v95) & 1);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine(v108);
      ++v95;
    }
    while ((_DWORD)v85 != v95);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v100);
  DgnArray<DgnString>::releaseAll((uint64_t)v103);
  DgnString::~DgnString((DgnString *)&v104);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v106);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v108);
}

void sub_209956950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

void SigProcDescriptor::saveSigProcDescriptor(SigProcDescriptor *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  DgnStream *v8;
  uint64_t CurrentSubDirComponents;
  unsigned int v10;

  if (a4)
  {
    SigProcDescriptor::saveSPD(this, a2, a5);
  }
  else
  {
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x56u, a5, "MRSPD!?", 24, 6);
    v10 = 0;
    writeObject(v8, this, &v10);
    writeObject<FeatureFilterSpec>(v8, (uint64_t)this + 80, &v10);
    writeObject(v8, (char *)this + 96, &v10);
    writeObject<FeatureFilterSpec>(v8, (uint64_t)this + 104, &v10);
    writeObject(v8, (SigProcDescriptor *)((char *)this + 120), &v10);
    writeObject(v8, (SigProcDescriptor *)((char *)this + 144), &v10);
    writeObject(v8, (SigProcDescriptor *)((char *)this + 184), &v10);
    writeObject((uint64_t)v8, (int *)this + 82, &v10);
    writeObject((uint64_t)v8, (int *)this + 83, &v10);
    writeObject((uint64_t)v8, (int *)this + 84, &v10);
    writeObjectChecksum((uint64_t)v8, (int *)&v10);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x56u, v10);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
}

uint64_t writeObject<FeatureFilterSpec>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject((uint64_t)a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject(a1, (const FeatureFilterSpec *)(*(_QWORD *)a2 + v7), a3);
      ++v8;
      v7 += 40;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void SigProcDescriptor::printSize(SigProcDescriptor *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  void *v101;
  int v102;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1365, (DgnString *)&v101);
  if (v102)
    v16 = v101;
  else
    v16 = &unk_209A7B0A6;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7B0A6, a3, &unk_209A7B0A6, v16);
  DgnString::~DgnString((DgnString *)&v101);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7B0A6);
  v21 = sizeObject((uint64_t)this, 0);
  v22 = sizeObject((uint64_t)this, 1);
  v23 = sizeObject((uint64_t)this, 3);
  v24 = (a3 + 1);
  v100 = a3;
  v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102)
    v30 = v101;
  else
    v30 = &unk_209A7B0A6;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_209A7B0A6, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  v31 = sizeObject<FeatureFilterSpec>((uint64_t)this + 80, 0);
  v32 = sizeObject<FeatureFilterSpec>((uint64_t)this + 80, 1);
  v33 = sizeObject<FeatureFilterSpec>((uint64_t)this + 80, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102)
    v38 = v101;
  else
    v38 = &unk_209A7B0A6;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v24, &unk_209A7B0A6, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v31;
  *a5 += v32;
  *a6 += v33;
  v39 = sizeObject((uint64_t)this + 96, 0);
  v40 = sizeObject((uint64_t)this + 96, 1);
  v41 = sizeObject((uint64_t)this + 96, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102)
    v46 = v101;
  else
    v46 = &unk_209A7B0A6;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v24, &unk_209A7B0A6, v25, v25, v46, v39, v40, v41);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v39;
  *a5 += v40;
  *a6 += v41;
  v47 = sizeObject<FeatureFilterSpec>((uint64_t)this + 104, 0);
  v48 = sizeObject<FeatureFilterSpec>((uint64_t)this + 104, 1);
  v49 = sizeObject<FeatureFilterSpec>((uint64_t)this + 104, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102)
    v54 = v101;
  else
    v54 = &unk_209A7B0A6;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v24, &unk_209A7B0A6, v25, v25, v54, v47, v48, v49);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v47;
  *a5 += v48;
  *a6 += v49;
  v55 = sizeObject((uint64_t)this + 120, 0);
  v56 = sizeObject((uint64_t)this + 120, 1);
  v57 = sizeObject((uint64_t)this + 120, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102)
    v62 = v101;
  else
    v62 = &unk_209A7B0A6;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v24, &unk_209A7B0A6, v25, v25, v62, v55, v56, v57);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v55;
  *a5 += v56;
  *a6 += v57;
  v63 = sizeObject((char *)this + 144, 0);
  v64 = sizeObject((char *)this + 144, 1);
  v65 = sizeObject((char *)this + 144, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102)
    v70 = v101;
  else
    v70 = &unk_209A7B0A6;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v24, &unk_209A7B0A6, v25, v25, v70, v63, v64, v65);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v63;
  *a5 += v64;
  *a6 += v65;
  v71 = (char *)this + 184;
  v72 = sizeObject((char *)this + 184, 0);
  v73 = sizeObject(v71, 1);
  v74 = sizeObject(v71, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102)
    v79 = v101;
  else
    v79 = &unk_209A7B0A6;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v24, &unk_209A7B0A6, v25, v25, v79, v72, v73, v74);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v72;
  *a5 += v73;
  *a6 += v74;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102)
    v84 = v101;
  else
    v84 = &unk_209A7B0A6;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v24, &unk_209A7B0A6, v25, v25, v84, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102)
    v89 = v101;
  else
    v89 = &unk_209A7B0A6;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v24, &unk_209A7B0A6, v25, v25, v89, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102)
    v94 = v101;
  else
    v94 = &unk_209A7B0A6;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, v24, &unk_209A7B0A6, v25, v25, v94, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1368, (DgnString *)&v101);
  if (v102)
    v99 = v101;
  else
    v99 = &unk_209A7B0A6;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, v100, &unk_209A7B0A6, (35 - v100), (35 - v100), v99, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v101);
}

void sub_2099572B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

_QWORD *DgnArray<FeatureFilterSpec>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 40 * v2 - 24;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a1 + v3);
      v3 -= 40;
    }
    while (v3 != -24);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnSharedMemStream::DgnSharedMemStream(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8;
  FileSpec *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  char *v19;
  int v20;

  v8 = DgnStream::DgnStream(a1, a4, 0);
  *(_QWORD *)v8 = &off_24C216260;
  *(_DWORD *)(v8 + 56) = a3;
  *(_QWORD *)(v8 + 64) = a2;
  *(_QWORD *)(v8 + 72) = 0;
  v9 = (FileSpec *)(v8 + 16);
  FileSpec::setEmpty((FileSpec *)(v8 + 16));
  DgnSharedMemSet::getMappedDSMName(*(DgnSharedMemSet **)(a1 + 64), a3, (DgnString *)&v19);
  if (v20)
    v10 = v19;
  else
    v10 = (char *)&unk_209A7B0E9;
  FileSpec::fillFromName(v9, v10);
  DgnString::~DgnString((DgnString *)&v19);
  if (a4 == 2)
  {
    if (*(_DWORD *)(a1 + 24))
      v16 = *(void **)v9;
    else
      v16 = &unk_209A7B0E9;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 58, (uint64_t)"dfutil/dsmstream", 2, (uint64_t)"%.500s", v14, v15, (char)v16);
  }
  if (a4)
    v17 = 4;
  else
    v17 = 3;
  DgnSharedMemStream::openDSM(a1, v17, -1, v11, v12, v13, v14, v15);
  return a1;
}

void sub_209957458(_Unwind_Exception *a1)
{
  DgnStream *v1;

  DgnStream::~DgnStream(v1);
  _Unwind_Resume(a1);
}

char *DgnSharedMemStream::openDSM(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  char *result;
  int v12;
  uint64_t v13;

  v13 = a3;
  if (*(_QWORD *)(a1 + 72))
  {
    if (*(_DWORD *)(a1 + 24))
      v10 = *(void **)(a1 + 16);
    else
      v10 = &unk_209A7B0E9;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 79, (uint64_t)"dfutil/dsmstream", 6, (uint64_t)"%.500s", a7, a8, (char)v10);
  }
  result = DgnSharedMemSet::openDSMWithSizeEx(*(DSMSetData ***)(a1 + 64), *(unsigned int *)(a1 + 56), a2, &v13);
  if (!a2)
  {
    *(_QWORD *)(a1 + 72) = -1;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = 0;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
LABEL_10:
    v12 = 1;
    goto LABEL_11;
  }
  v12 = 0;
LABEL_11:
  *(_DWORD *)(a1 + 8) = v12;
  return result;
}

void DgnSharedMemStream::DgnSharedMemStream(DgnSharedMemStream *this, DgnSharedMemSet *a2, unsigned int a3)
{
  uint64_t v6;
  FileSpec *v7;
  char *v8;
  char *v9;
  int v10;

  v6 = DgnStream::DgnStream((uint64_t)this, 0, 0);
  *(_QWORD *)v6 = &off_24C216260;
  *(_DWORD *)(v6 + 56) = a3;
  *(_QWORD *)(v6 + 64) = a2;
  *(_QWORD *)(v6 + 72) = 0;
  v7 = (FileSpec *)(v6 + 16);
  FileSpec::setEmpty((FileSpec *)(v6 + 16));
  DgnSharedMemSet::getMappedDSMName(*((DgnSharedMemSet **)this + 8), a3, (DgnString *)&v9);
  if (v10)
    v8 = v9;
  else
    v8 = (char *)&unk_209A7B0E9;
  FileSpec::fillFromName(v7, v8);
  DgnString::~DgnString((DgnString *)&v9);
}

void sub_2099575E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnStream *v9;

  DgnString::~DgnString((DgnString *)&a9);
  DgnStream::~DgnStream(v9);
  _Unwind_Resume(a1);
}

uint64_t DgnSharedMemStream::closeDSM(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_QWORD *)(this + 72))
    this = DgnSharedMemSet::closeDSMEx(*(DgnSharedMemSet **)(this + 64), *(_DWORD *)(this + 56));
  *(_QWORD *)(v1 + 72) = 0;
  return this;
}

void DgnSharedMemStream::~DgnSharedMemStream(DgnSharedMemStream *this)
{
  *(_QWORD *)this = &off_24C216260;
  if (*((_QWORD *)this + 9))
    DgnSharedMemSet::closeDSMEx(*((DgnSharedMemSet **)this + 8), *((_DWORD *)this + 14));
  DgnStream::~DgnStream(this);
}

{
  DgnSharedMemStream::~DgnSharedMemStream(this);
  JUMPOUT(0x20BD149A8);
}

void DgnSharedMemStream::seekFromBeg(DgnSharedMemStream *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;

  if (!*((_QWORD *)this + 9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 137, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_209A7B0E9);
  if (*((_QWORD *)this + 5) < a2)
  {
    if (*((_QWORD *)this + 9) == -1)
    {
      *((_QWORD *)this + 5) = a2;
    }
    else
    {
      if (*((_DWORD *)this + 6))
        v10 = (void *)*((_QWORD *)this + 2);
      else
        v10 = &unk_209A7B0E9;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 148, (uint64_t)"dfutil/dsmstream", 3, (uint64_t)"%.500s %llu %llu", a7, a8, (char)v10);
    }
  }
  *((_QWORD *)this + 6) = a2;
}

void DgnSharedMemStream::seekToEnd(DgnSharedMemStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((_QWORD *)this + 9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 157, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_209A7B0E9);
  *((_QWORD *)this + 6) = *((_QWORD *)this + 5);
}

uint64_t DgnSharedMemStream::tell(DgnSharedMemStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((_QWORD *)this + 9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 166, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_209A7B0E9);
  return *((_QWORD *)this + 6);
}

unint64_t DgnSharedMemStream::tell32(DgnSharedMemStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  void *v10;

  if (!*((_QWORD *)this + 9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 173, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_209A7B0E9);
  v9 = *((_QWORD *)this + 6);
  if (HIDWORD(v9))
  {
    if (*((_DWORD *)this + 6))
      v10 = (void *)*((_QWORD *)this + 2);
    else
      v10 = &unk_209A7B0E9;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 176, (uint64_t)"dfutil/dsmstream", 5, (uint64_t)"%.500s", a7, a8, (char)v10);
  }
  return v9;
}

BOOL DgnSharedMemStream::eof(DgnSharedMemStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((_QWORD *)this + 9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 183, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_209A7B0E9);
  return *((_QWORD *)this + 6) == *((_QWORD *)this + 5);
}

uint64_t DgnSharedMemStream::peekForChar(DgnSharedMemStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  if (!*((_QWORD *)this + 9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 198, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_209A7B0E9);
  v9 = *((_QWORD *)this + 6);
  if (v9 >= *((_QWORD *)this + 5))
    return 0xFFFFFFFFLL;
  else
    return *(char *)(*((_QWORD *)this + 9) + v9);
}

size_t DgnSharedMemStream::readWithMode(uint64_t a1, void *__dst, size_t __n, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v9;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  void *v15;

  v9 = __n;
  if (*(_QWORD *)(a1 + 72))
  {
    if (!(_DWORD)__n)
      return v9;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 213, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_209A7B0E9);
    if (!(_DWORD)v9)
      return v9;
  }
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 40) - v12;
  v14 = v9;
  if (v13 < v9)
  {
    if (a4 == 1)
    {
      if (*(_DWORD *)(a1 + 24))
        v15 = *(void **)(a1 + 16);
      else
        v15 = &unk_209A7B0E9;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 226, (uint64_t)"dfutil/dsmstream", 3, (uint64_t)"%.500s %llu %llu", a7, a8, (char)v15);
      LODWORD(v12) = *(_DWORD *)(a1 + 48);
    }
    v14 = v13;
    v9 = v13;
  }
  memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 72) + v12), v14);
  *(_QWORD *)(a1 + 48) += v14;
  return v9;
}

void DgnSharedMemStream::writeBytes(DgnSharedMemStream *this, const char *__src, size_t __n, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  void *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;

  v8 = __n;
  if (!*((_QWORD *)this + 9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 239, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_209A7B0E9);
  if (*((_DWORD *)this + 2))
  {
    if (!v8)
      return;
  }
  else
  {
    if (*((_DWORD *)this + 6))
      v11 = (void *)*((_QWORD *)this + 2);
    else
      v11 = &unk_209A7B0E9;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 241, (uint64_t)"dfutil/dsmstream", 4, (uint64_t)"%.500s", a7, a8, (char)v11);
    if (!v8)
      return;
  }
  v12 = *((_QWORD *)this + 9);
  if (v12 == -1)
  {
    v17 = *((_QWORD *)this + 5);
    v18 = *((_QWORD *)this + 6) + v8;
    *((_QWORD *)this + 6) = v18;
    if (v17 < v18)
      *((_QWORD *)this + 5) = v18;
  }
  else
  {
    v13 = v8;
    v14 = *((_QWORD *)this + 6);
    v15 = v14 + v8;
    if (v15 > *((_QWORD *)this + 5))
    {
      if (*((_DWORD *)this + 6))
        v16 = (void *)*((_QWORD *)this + 2);
      else
        v16 = &unk_209A7B0E9;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 260, (uint64_t)"dfutil/dsmstream", 3, (uint64_t)"%.500s %llu %llu", a7, a8, (char)v16);
      v12 = *((_QWORD *)this + 9);
      LODWORD(v14) = *((_DWORD *)this + 12);
    }
    memcpy((void *)(v12 + v14), __src, v13);
    *((_QWORD *)this + 6) = v15;
  }
}

uint64_t DgnSharedMemStream::writeSharedBytes(DgnSharedMemStream *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  if (!*((_QWORD *)this + 9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 272, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_209A7B0E9);
  if (*((_DWORD *)this + 2))
  {
    if (!(_DWORD)a3)
      return 0;
  }
  else
  {
    if (*((_DWORD *)this + 6))
      v11 = (void *)*((_QWORD *)this + 2);
    else
      v11 = &unk_209A7B0E9;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 274, (uint64_t)"dfutil/dsmstream", 4, (uint64_t)"%.500s", a7, a8, (char)v11);
    if (!(_DWORD)a3)
      return 0;
  }
  v12 = *((_QWORD *)this + 6) + 15;
  v13 = v12 & 0xFFFFFFFFFFFFFFF0;
  v14 = ((_DWORD)a3 + 3) & 0xFFFFFFFC;
  v15 = *((_QWORD *)this + 9);
  v16 = (v12 & 0xFFFFFFFFFFFFFFF0) + v14;
  if (v15 == -1)
  {
    *((_QWORD *)this + 6) = v16;
    if (*((_QWORD *)this + 5) >= v16)
      return 0;
    v18 = 0;
    *((_QWORD *)this + 5) = v16;
  }
  else
  {
    if (v16 > *((_QWORD *)this + 5))
    {
      if (*((_DWORD *)this + 6))
        v17 = (void *)*((_QWORD *)this + 2);
      else
        v17 = &unk_209A7B0E9;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 305, (uint64_t)"dfutil/dsmstream", 3, (uint64_t)"%.500s %llu %llu", a7, a8, (char)v17);
      v15 = *((_QWORD *)this + 9);
    }
    v18 = v15 + (v12 & 0xFFFFFFF0);
    *((_QWORD *)this + 6) = v13;
    (*(void (**)(DgnSharedMemStream *, const char *, uint64_t))(*(_QWORD *)this + 80))(this, a2, a3);
    if ((_DWORD)v14 != (_DWORD)a3)
    {
      v19 = a3 - v14;
      do
      {
        v20 = *((_QWORD *)this + 9);
        v21 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v21 + 1;
        *(_BYTE *)(v20 + v21) = 0;
      }
      while (!__CFADD__(v19++, 1));
    }
  }
  return v18;
}

uint64_t DgnSharedMemStream::readSharedBytes(DgnSharedMemStream *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;

  if (!*((_QWORD *)this + 9))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 328, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_209A7B0E9);
    if (a2)
      goto LABEL_3;
    return 0;
  }
  if (!a2)
    return 0;
LABEL_3:
  v10 = *((_QWORD *)this + 6) + 15;
  v11 = *((_QWORD *)this + 9) + (v10 & 0xFFFFFFF0);
  v12 = (v10 & 0xFFFFFFFFFFFFFFF0) + ((a2 + 3) & 0xFFFFFFFC);
  if (v12 > *((_QWORD *)this + 5))
  {
    if (*((_DWORD *)this + 6))
      v13 = (void *)*((_QWORD *)this + 2);
    else
      v13 = &unk_209A7B0E9;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 343, (uint64_t)"dfutil/dsmstream", 3, (uint64_t)"%.500s %llu %llu", a7, a8, (char)v13);
  }
  *((_QWORD *)this + 6) = v12;
  return v11;
}

void VocCompatData::loadVocCompatDataText(VocCompatData *this, DFile *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t FileVersion;
  int v16;
  unint64_t v17;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  int v35;
  _QWORD v36[2];
  _BYTE v37[232];

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v37);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v37, (uint64_t)a2, 0x68u, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v37, "VocCompatibility");
  v36[0] = 0;
  v36[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v37, sVCC_Versions, (uint64_t)v36, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v37, (unsigned int *)v36, v9, v10, v11, v12, v13, v14);
  FileVersion = DgnTextFile::getFileVersion((DgnTextFile *)v37);
  v16 = FileVersion;
  v17 = HIDWORD(FileVersion);
  if (HIDWORD(FileVersion) == 7 && (_DWORD)FileVersion == 19)
    v19 = "TreeLMPerWordPenalty";
  else
    v19 = "PrefiltererPerWordPenalty";
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v37, v19, (unsigned int *)this, 1, 0, 0x3E8u);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v37, "LMScale", (unsigned int *)this + 1, 1, 1u, 0x100u);
  if (v16 == 19)
  {
    if ((_DWORD)v17 != 7)
      goto LABEL_16;
  }
  else if (v16 != 22 || (_DWORD)v17 != 8)
  {
    goto LABEL_16;
  }
  DgnString::DgnString((DgnString *)&v34);
  DgnTextFile::getHeaderField((DgnTextFile *)v37, "VocName", (DgnString *)&v34, 1);
  if (v35)
    v20 = v34;
  else
    v20 = (const char *)&unk_209A7B10C;
  VerifyVocName(v20, ".vcc");
  DgnString::~DgnString((DgnString *)&v34);
LABEL_16:
  DgnTextFile::getHeaderFieldUnsigned64((DgnTextFile *)v37, "LMStaticizationNoGroupingSize", (unint64_t *)this + 1, 1, 0, 0xFFFFFFFFuLL);
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v37, v21, v22, v23, v24, v25, v26, v27);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v37, 0, v28, v29, v30, v31, v32, v33);
  DgnTextFileParser::verifyNoBodyLines((DgnTextFileParser *)v37);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v36);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v37);
}

void sub_2099580D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va1);
  _Unwind_Resume(a1);
}

void VocCompatData::saveVocCompatDataText(VocCompatData *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[280];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v15);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v15, (uint64_t)a2, 0x68u, a3);
  v13 = 0;
  v14 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v15, sVCC_Versions, (uint64_t)&v13, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v15, "VocCompatibility", (_QWORD *)(v13 + 8 * (v14 - 1)));
  v12[0] = 0;
  v12[1] = 0;
  v11[0] = 0;
  v11[1] = 0;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v15, (uint64_t)v12, (uint64_t)v11);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v15, "PrefiltererPerWordPenalty", *(unsigned int *)this);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v15, "LMScale", *((unsigned int *)this + 1));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v15, "LMStaticizationNoGroupingSize", *((_QWORD *)this + 1));
  DgnArray<DgnString>::releaseAll((uint64_t)v11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v12);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v13);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v15);
}

void sub_20995820C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va);
  _Unwind_Resume(a1);
}

void VocCompatData::loadVocCompatData(VocCompatData *this, char **a2, DFileChecksums *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  DgnStream *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  char *v17;
  uint64_t CurrentSubDirComponents;
  _BYTE v19[20];
  unsigned int v20;
  uint64_t v21;

  if (DFile::subFileExists((uint64_t)a2, 0x68u))
  {
    VocCompatData::loadVocCompatDataText(this, (DFile *)a2);
  }
  else
  {
    if (a4)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vcc.cpp", 209, (uint64_t)"voc/vcc", 3, (uint64_t)"%s", v8, v9, (char)&unk_209A7B10C);
    v21 = 0;
    v10 = 1;
    v11 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x67u, 1, "MRVCCD!?", (_DWORD *)&v21 + 1, &v21);
    v20 = 0;
    DgnString::DgnString((DgnString *)v19);
    v14 = HIDWORD(v21) == 18 && (_DWORD)v21 == 1;
    v15 = v14;
    if (v14)
    {
      v16 = 18;
    }
    else
    {
      if (*((_DWORD *)a2 + 6))
        v17 = a2[2];
      else
        v17 = (char *)&unk_209A7B10C;
      MrecHeaderCheckVersions(v17, "MRVCCD!?", HIDWORD(v21), v21, 0x18u, 2u);
      v10 = v21;
      v16 = HIDWORD(v21);
    }
    MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRVCCD!?", v16, v10, 24, 2, v12, v13);
    readObject((uint64_t)v11, this, &v20);
    readObject((uint64_t)v11, (_DWORD *)this + 1, &v20);
    if (v15)
      readObject(v11, (DgnString *)v19, &v20);
    readObject((uint64_t)v11, (_QWORD *)this + 1, &v20);
    readObjectChecksumAndVerify(v11, v20);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents((DFile *)a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x67u, v20);
    if (v11)
    {
      (**(void (***)(DgnStream *))v11)(v11);
      MemChunkFree(v11, 0);
    }
    DgnString::~DgnString((DgnString *)v19);
  }
}

void sub_209958428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void VocCompatData::saveVocCompatData(VocCompatData *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  DgnStream *v8;
  uint64_t CurrentSubDirComponents;
  int v10;

  if (a4)
  {
    VocCompatData::saveVocCompatDataText(this, a2, a5);
  }
  else
  {
    v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x67u, a5, "MRVCCD!?", 24, 2);
    v10 = 0;
    writeObject((uint64_t)v8, (int *)this, &v10);
    writeObject((uint64_t)v8, (int *)this + 1, &v10);
    writeObject((uint64_t)v8, (uint64_t *)this + 1, &v10);
    writeObjectChecksum((uint64_t)v8, &v10);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x67u, v10);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
  }
}

void VocCompatData::printSize(VocCompatData *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  int v41;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vcc.cpp", 277, (DgnString *)&v40);
  if (v41)
    v15 = v40;
  else
    v15 = &unk_209A7B10C;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A7B10C, a3, &unk_209A7B10C, v15);
  DgnString::~DgnString((DgnString *)&v40);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A7B10C);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vcc.cpp", 279, (DgnString *)&v40);
  if (v41)
    v24 = v40;
  else
    v24 = &unk_209A7B10C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v20, v21, v22, v23, (a3 + 1), &unk_209A7B10C, (34 - a3), (34 - a3), v24, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vcc.cpp", 279, (DgnString *)&v40);
  if (v41)
    v29 = v40;
  else
    v29 = &unk_209A7B10C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, (a3 + 1), &unk_209A7B10C, (34 - a3), (34 - a3), v29, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vcc.cpp", 279, (DgnString *)&v40);
  if (v41)
    v34 = v40;
  else
    v34 = &unk_209A7B10C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &unk_209A7B10C, (34 - a3), (34 - a3), v34, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vcc.cpp", 281, (DgnString *)&v40);
  if (v41)
    v39 = v40;
  else
    v39 = &unk_209A7B10C;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, a3, &unk_209A7B10C, (35 - a3), (35 - a3), v39, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v40);
}

void sub_209958794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void SvcCompatData::SvcCompatData(SvcCompatData *this)
{
  *(_QWORD *)this = 0;
}

void SvcCompatData::SvcCompatData(SvcCompatData *this, const SvcCompatData *a2)
{
  *(_QWORD *)this = *(_QWORD *)a2;
}

_DWORD *SvcCompatData::SvcCompatData(_DWORD *result, int a2, int a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

void SvcCompatData::loadSvcCompatData(SvcCompatData *this, DFile *a2, DFileChecksums *a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t CurrentSubDirComponents;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v12 = 0;
  v13 = 0;
  v6 = (_QWORD *)OpenAndReadMrecHeader((uint64_t)a2, 0x51u, 0, "SCCBIN", &v13, &v12);
  if (*((_DWORD *)a2 + 6))
    v7 = (char *)*((_QWORD *)a2 + 2);
  else
    v7 = (char *)&unk_209A7B10C;
  MrecHeaderCheckVersions(v7, "SCCBIN", v13, v12, 0x11u, 2u);
  MrecHeaderCheckLatestVersionIfShared(a2, "SCCBIN", v13, v12, 17, 2, v8, v9);
  v11 = 0;
  v14 = 0;
  readObject((uint64_t)v6, &v14, &v11);
  *(_DWORD *)this = v14;
  readObject((uint64_t)v6, (_DWORD *)this + 1, &v11);
  if (a3)
  {
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x51u, v11);
  }
  if (v6)
  {
    (*(void (**)(_QWORD *))*v6)(v6);
    MemChunkFree(v6, 0);
  }
}

void SvcCompatData::saveSvcCompatData(SvcCompatData *this, DFile *a2, DFileChecksums *a3)
{
  DgnStream *v6;
  int v7;
  uint64_t CurrentSubDirComponents;
  int v9;
  int v10;

  v6 = OpenAndWriteMrecHeader((uint64_t)a2, 0x51u, 0, "SCCBIN", 17, 2);
  v7 = *(_DWORD *)this;
  v9 = 0;
  v10 = v7;
  writeObject((uint64_t)v6, &v10, &v9);
  writeObject((uint64_t)v6, (int *)this + 1, &v9);
  if (a3)
  {
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x51u, v9);
  }
  if (v6)
  {
    (**(void (***)(DgnStream *))v6)(v6);
    MemChunkFree(v6, 0);
  }
}

void PrefiltererThreadWorker::printSize(PrefiltererThreadWorker *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 263, (DgnString *)&v102);
  if ((_DWORD)v103)
    v16 = v102;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v102);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  v97 = a2;
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  v22 = (a3 + 1);
  v98 = a3;
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 265, (DgnString *)&v102);
  if ((_DWORD)v103)
    v28 = v102;
  else
    v28 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v22, &byte_209A88803, v23, v23, v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v21;
  *a5 += v21;
  v29 = sizeObject((char *)this + 264, 0);
  v30 = sizeObject((char *)this + 264, 1);
  v31 = sizeObject((char *)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 266, (DgnString *)&v102);
  if ((_DWORD)v103)
    v36 = v102;
  else
    v36 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v22, &byte_209A88803, v23, v23, v36, v29, v30, v31);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v29;
  *a5 += v30;
  *a6 += v31;
  v37 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 360, 0) + 5;
  v38 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 360, 1) + 5;
  v102 = 0;
  v103 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v102);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 267, (DgnString *)&v102);
  if ((_DWORD)v103)
    v43 = v102;
  else
    v43 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, v22, &byte_209A88803, v23, v23, v43, v37, v38, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v37;
  *a5 += v38;
  v44 = sizeObject<ScoreFixArray>((uint64_t)this + 384, 0) + 5;
  v45 = sizeObject<ScoreFixArray>((uint64_t)this + 384, 1) + 5;
  v102 = 0;
  LODWORD(v103) = 0;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v102);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 269, (DgnString *)&v102);
  if ((_DWORD)v103)
    v50 = v102;
  else
    v50 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v22, &byte_209A88803, v23, v23, v50, v44, v45, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v44;
  *a5 += v45;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v51 = 12;
  else
    v51 = 16;
  v52 = *((_DWORD *)this + 102);
  v53 = *((_DWORD *)this + 103);
  v54 = v53 >= v52;
  v55 = v53 - v52;
  if (v54)
  {
    v57 = v52 & ~(v52 >> 31);
    v52 = 0;
    v56 = v51 + v57;
    v51 += v57 + v55;
  }
  else
  {
    v56 = v51;
  }
  v58 = v52;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 270, (DgnString *)&v102);
  if ((_DWORD)v103)
    v63 = v102;
  else
    v63 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v22, &byte_209A88803, v23, v23, v63, v51, v56, v58);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v51;
  *a5 += v56;
  *a6 += v58;
  v64 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v64 = 12;
  v65 = *((unsigned int *)this + 106);
  if ((int)v65 <= 0)
    v66 = 0;
  else
    v66 = 2 * v65;
  v67 = v66 + v64;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 272, (DgnString *)&v102);
  if ((_DWORD)v103)
    v72 = v102;
  else
    v72 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v22, &byte_209A88803, v23, v23, v72, v67, v67, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v67;
  *a5 += v67;
  v73 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 12;
  v74 = *((unsigned int *)this + 110);
  if ((int)v74 <= 0)
    v75 = 0;
  else
    v75 = 2 * v74;
  v76 = v75 + v73;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 274, (DgnString *)&v102);
  if ((_DWORD)v103)
    v81 = v102;
  else
    v81 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v22, &byte_209A88803, v23, v23, v81, v76, v76, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v76;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 275, (DgnString *)&v102);
  if ((_DWORD)v103)
    v86 = v102;
  else
    v86 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v82, v83, v84, v85, v22, &byte_209A88803, v23, v23, v86, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 276, (DgnString *)&v102);
  if ((_DWORD)v103)
    v91 = v102;
  else
    v91 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v22, &byte_209A88803, v23, v23, v91, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += 8;
  *a5 += 8;
  v100 = 0;
  v101 = 0;
  v99 = 0;
  DgnThreadWorker::printSize(this, v97, v22, &v101, &v99, &v100);
  *a4 += v101;
  *a5 += v99;
  *a6 += v100;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 284, (DgnString *)&v102);
  if ((_DWORD)v103)
    v96 = v102;
  else
    v96 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v98, &byte_209A88803, (35 - v98), (35 - v98), v96, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v102);
}

void sub_20995902C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t PrefiltererThreadWorker::PrefiltererThreadWorker(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v6;

  DgnThreadWorker::DgnThreadWorker(a1, a2, a3, a4, a5);
  *v6 = off_24C217940;
  ReturnListQueue::ReturnListQueue((ReturnListQueue *)(v6 + 33), 0, 127);
  SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray(a1 + 352);
  SynchronizedArray<ScoreFixArray>::SynchronizedArray(a1 + 376);
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 448) = 4294967280;
  *(_DWORD *)(a1 + 456) = 0;
  return a1;
}

void sub_2099590E8(_Unwind_Exception *a1)
{
  DgnThreadWorker *v1;
  ReturnListQueue *v2;

  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v1 + 360);
  ReturnListQueue::~ReturnListQueue(v2);
  DgnThreadWorker::~DgnThreadWorker(v1);
  _Unwind_Resume(a1);
}

void PrefiltererThreadWorker::~PrefiltererThreadWorker(PrefiltererThreadWorker *this)
{
  *(_QWORD *)this = off_24C217940;
  PrefiltererThreadWorker::reset(this);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 432);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 416);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 400);
  DgnArray<DgnVector>::releaseAll((uint64_t)this + 384);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 360);
  ReturnListQueue::~ReturnListQueue((PrefiltererThreadWorker *)((char *)this + 264));
  DgnThreadWorker::~DgnThreadWorker(this);
}

{
  PrefiltererThreadWorker::~PrefiltererThreadWorker(this);
  JUMPOUT(0x20BD149A8);
}

void PrefiltererThreadWorker::reset(PrefiltererThreadWorker *this)
{
  *((_QWORD *)this + 56) = 4294967280;
  *((_DWORD *)this + 114) = 0;
  SynchronizedArray<DgnPrimArray<unsigned char>>::reset((uint64_t)this + 352);
  SynchronizedArray<ScoreFixArray>::reset((uint64_t)this + 376);
  ReturnListQueue::reset((PrefiltererThreadWorker *)((char *)this + 264));
  *((_DWORD *)this + 102) = 0;
}

uint64_t SynchronizedArray<ScoreFixArray>::reset(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 4) = -16;
  v2 = *(unsigned int *)(result + 16);
  if ((int)v2 >= 1)
  {
    v3 = 16 * v2 - 16;
    do
    {
      result = DgnPrimFixArray<double>::~DgnPrimFixArray(*(_QWORD *)(v1 + 8) + v3);
      v3 -= 16;
    }
    while (v3 != -16);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

TreePrefilterer *PrefiltererThreadWorker::onStartup(PrefiltererThreadWorker *this)
{
  uint64_t *v2;
  TreePrefilterer *result;

  v2 = MemChunkAlloc(0x25308uLL, 0);
  result = TreePrefilterer::TreePrefilterer((TreePrefilterer *)v2);
  *((_QWORD *)this + 32) = result;
  return result;
}

void PrefiltererThreadWorker::onShutdown(PrefiltererThreadWorker *this)
{
  _QWORD *v2;

  PrefiltererThreadWorker::reset(this);
  v2 = (_QWORD *)*((_QWORD *)this + 32);
  if (v2)
  {
    (*(void (**)(_QWORD *))*v2)(v2);
    MemChunkFree(v2, 0);
  }
}

uint64_t PrefiltererThreadWorker::onPlay(PrefiltererThreadWorker *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 6);
  *((_DWORD *)this + 112) = *(_DWORD *)(v2 + 1592);
  if (!*((_BYTE *)this + 352))
    SynchronizedArray<DgnPrimArray<unsigned char>>::update((unint64_t)this + 352, *(_QWORD *)(v2 + 1576));
  v3 = *(_QWORD *)(v2 + 1584);
  if (v3 && !*((_BYTE *)this + 376))
    SynchronizedArray<ScoreFixArray>::update((unint64_t)this + 376, v3);
  ReturnListQueue::clear((PrefiltererThreadWorker *)((char *)this + 264));
  *(_QWORD *)((char *)this + 452) = 0;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 96))(*((_QWORD *)this + 32));
  *((_DWORD *)this + 113) = result;
  return result;
}

unint64_t SynchronizedArray<ScoreFixArray>::update(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int v4;
  _QWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = (_QWORD *)(result + 8);
  v7 = *(_DWORD *)(result + 16);
  v6 = *(_DWORD *)(result + 20);
  if (v6 > 0x1F3)
  {
    v8 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    result = DgnArray<DgnPrimArray<double>>::reallocElts(result + 8, 500 - v6, 0);
    v8 = *(_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(v3 + 20);
  }
  if (v8 > v6)
    result = DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v5, v8 - v6, 0);
  v9 = *(unsigned int *)(v3 + 16);
  if (v9 <= v8)
  {
    if (v9 < v8)
    {
      v12 = v8 - v9;
      v13 = (_DWORD *)(*v5 + 16 * v9 + 8);
      do
      {
        *((_QWORD *)v13 - 1) = 0;
        *v13 = 0;
        v13 += 4;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v9 > (int)v8)
  {
    v10 = (int)v9;
    v11 = 16 * (int)v9 - 16;
    do
    {
      --v10;
      result = DgnPrimFixArray<double>::~DgnPrimFixArray(*v5 + v11);
      v11 -= 16;
    }
    while (v10 > (int)v8);
  }
  *(_DWORD *)(v3 + 16) = v8;
  if ((int)v7 < v4)
  {
    do
    {
      v14 = *(_QWORD *)(a2 + 8) + 16 * v7;
      result = (unint64_t)DgnPrimFixArray<short>::copyArraySlice((uint64_t *)(*v5 + 16 * v7++), (uint64_t *)v14, 0, *(_DWORD *)(v14 + 8));
    }
    while (v4 != v7);
  }
  if (*(_BYTE *)a2)
    *(_BYTE *)v3 = 1;
  if (*(_DWORD *)(v3 + 4) == -16)
    *(_DWORD *)(v3 + 4) = *(_DWORD *)(a2 + 4);
  return result;
}

uint64_t PrefiltererThreadWorker::playOne(PrefiltererThreadWorker *this)
{
  uint64_t result;
  ReturnListQueue *v3;
  signed int v4;
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int NextFrameTime;

  if (*((_BYTE *)this + 264))
    return 4;
  v3 = (PrefiltererThreadWorker *)((char *)this + 264);
  v4 = *((_DWORD *)this + 113);
  if (*((_DWORD *)this + 92) <= v4)
  {
    if (*((_BYTE *)this + 352))
    {
      if (*((_DWORD *)this + 67) == -16)
      {
        *((_DWORD *)this + 67) = ReturnListQueue::getNextFrameTime((PrefiltererThreadWorker *)((char *)this + 264));
        (*(void (**)(_QWORD))(**((_QWORD **)this + 32) + 88))(*((_QWORD *)this + 32));
        v4 = *((_DWORD *)this + 113);
      }
      TreePrefilterer::completeUtterance(*((TreePrefilterer **)this + 32), v4, v3);
      return 4;
    }
    v12 = 2;
    goto LABEL_25;
  }
  v5 = TreePrefilterer::needLookaheadToScoreFrame(*((TreePrefilterer **)this + 32));
  v6 = *((unsigned int *)this + 113);
  if (!v5)
    goto LABEL_11;
  if (*((_DWORD *)this + 98) <= (int)v6)
  {
    v12 = 3;
LABEL_25:
    *((_DWORD *)this + 114) = v12;
    return 4;
  }
  DgnPrimFixArray<short>::copyArraySlice((uint64_t *)this + 52, (uint64_t *)(*((_QWORD *)this + 48) + 16 * v6), 0, *(_DWORD *)(*((_QWORD *)this + 48) + 16 * v6 + 8));
  LODWORD(v6) = *((_DWORD *)this + 113);
  if (*((_DWORD *)this + 67) == -16)
  {
    v7 = *((_DWORD *)this + 95);
    if (v7 != -16 && v7 <= (int)v6)
    {
      *((_DWORD *)this + 67) = ReturnListQueue::getNextFrameTime(v3);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 32) + 88))(*((_QWORD *)this + 32));
      LODWORD(v6) = *((_DWORD *)this + 113);
    }
  }
LABEL_11:
  v8 = *((_QWORD *)this + 45) + 16 * v6;
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 400, (_QWORD *)v8, 0, *(_DWORD *)(v8 + 8));
  v9 = 432;
  if (v5)
    v9 = 416;
  TreePrefilterer::scoreFrame(*((_QWORD *)this + 32), *((unsigned int *)this + 113), (uint64_t)this + 400, (uint64_t *)((char *)this + v9), v3);
  v10 = *((_DWORD *)this + 113) + 1;
  *((_DWORD *)this + 113) = v10;
  if (*((_BYTE *)this + 352) && *((_DWORD *)this + 92) <= v10)
    return 0;
  v11 = *((_DWORD *)this + 112);
  if (v11 == -16)
    return 1;
  NextFrameTime = ReturnListQueue::getNextFrameTime(v3);
  result = 1;
  if (v11 < NextFrameTime)
  {
    *((_DWORD *)this + 114) = 1;
    return 4;
  }
  return result;
}

void PrefiltererThread::printSize(PrefiltererThread *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  PrefiltererThread *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  int v53;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 461, (DgnString *)&v52);
  if (v53)
    v16 = v52;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  v48 = this;
  DgnString::~DgnString((DgnString *)&v52);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 463, (DgnString *)&v52);
  if (v53)
    v26 = v52;
  else
    v26 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v26, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v52);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v27 = 4;
  else
    v27 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 464, (DgnString *)&v52);
  if (v53)
    v32 = v52;
  else
    v32 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v32, v27, v27, 0);
  DgnString::~DgnString((DgnString *)&v52);
  *a4 += v27;
  *a5 += v27;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 465, (DgnString *)&v52);
  if (v53)
    v37 = v52;
  else
    v37 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v52);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 466, (DgnString *)&v52);
  if (v53)
    v42 = v52;
  else
    v42 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v42, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v52);
  *a4 += 8;
  *a5 += 8;
  v50 = 0;
  v51 = 0;
  v49 = 0;
  DgnThreadClient::printSize(v48, a2, (a3 + 1), &v51, &v49, &v50);
  *a4 += v51;
  *a5 += v49;
  *a6 += v50;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 474, (DgnString *)&v52);
  if (v53)
    v47 = v52;
  else
    v47 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, a3, &byte_209A88803, (35 - a3), (35 - a3), v47, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v52);
}

void sub_2099599AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t PrefiltererThread::reset(PrefiltererThread *this)
{
  uint64_t v3;

  *((_QWORD *)this + 199) = 4294967280;
  *((_DWORD *)this + 400) = 0;
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v3, *((_QWORD *)this + 2));
  PrefiltererThreadWorker::reset(*((PrefiltererThreadWorker **)this + 7));
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v3);
}

void sub_209959A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

void PrefiltererThread::scoreUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ReturnListQueue *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;

  *(_DWORD *)(a1 + 1592) = a2;
  v10 = (_OWORD *)(a1 + 1576);
  *(_QWORD *)(a1 + 1576) = a3;
  *(_QWORD *)(a1 + 1584) = a4;
  DgnThreadClient::playAllUntilWorkerPauses((DgnThreadClient *)a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  *v10 = 0u;
  DgnThreadClient::pause((DgnThreadClient *)a1, v11, v12, v13, v14, v15, v16, v17);
  v18 = *(_DWORD **)(a1 + 56);
  v19 = v18[114];
  *(_DWORD *)(a1 + 1596) = v18[113];
  *(_DWORD *)(a1 + 1600) = v19;
  ReturnListQueue::copyIntoQueue((ReturnListQueue *)(v18 + 66), a5);
}

uint64_t ThreadedTreePrefilterer::ThreadedTreePrefilterer(uint64_t a1, int a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;

  Prefilterer::Prefilterer((Prefilterer *)a1);
  *v4 = &off_24C217B80;
  v5 = MemChunkAlloc(0x648uLL, 0);
  v6 = DgnThread<PrefiltererThreadWorker>::DgnThread((uint64_t)v5, a2, 0, "Prefilterer");
  *(_QWORD *)v6 = &off_24C215C90;
  *(_QWORD *)(v6 + 1592) = 4294967280;
  *(_DWORD *)(v6 + 1600) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v6 + 16);
  *(_WORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  DgnThreadClient::startup((DgnThreadClient *)v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56) + 256);
  return a1;
}

void sub_209959B44(_Unwind_Exception *a1)
{
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void ThreadedTreePrefilterer::~ThreadedTreePrefilterer(DgnThreadClient **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  DgnThreadClient *v9;

  *this = (DgnThreadClient *)&off_24C217B80;
  if (DgnThreadClient::isLive(this[3]) && !DgnThreadClient::hasErrored(this[3]))
    DgnThreadClient::shutdown(this[3], v2, v3, v4, v5, v6, v7, v8);
  this[4] = 0;
  this[5] = 0;
  v9 = this[3];
  if (v9)
  {
    (**(void (***)(DgnThreadClient *))v9)(this[3]);
    MemChunkFree(v9, 0);
  }
  this[3] = 0;
  MrecInitModule_sdpres_sdapi();
}

{
  ThreadedTreePrefilterer::~ThreadedTreePrefilterer(this);
  JUMPOUT(0x20BD149A8);
}

void ThreadedTreePrefilterer::printSize(ThreadedTreePrefilterer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 567, (DgnString *)&v72);
  if (v73)
    v16 = (char *)v72;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v72);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v71 = 0;
  v72 = 0;
  v70 = 0;
  Prefilterer::printSize(this, 0xFFFFFFFFLL, (a3 + 1), &v72, &v71, &v70);
  *a4 += v72;
  *a5 += v71;
  *a6 += v70;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 570, (DgnString *)&v72);
  if (v73)
    v25 = (char *)v72;
  else
    v25 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v25, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v72);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 571, (DgnString *)&v72);
  if (v73)
    v30 = (char *)v72;
  else
    v30 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v30, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v72);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v31 = 4;
  else
    v31 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 572, (DgnString *)&v72);
  if (v73)
    v36 = (char *)v72;
  else
    v36 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v36, v31, v31, 0);
  DgnString::~DgnString((DgnString *)&v72);
  *a4 += v31;
  *a5 += v31;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v37 = 4;
  else
    v37 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 573, (DgnString *)&v72);
  if (v73)
    v42 = (char *)v72;
  else
    v42 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v42, v37, v37, 0);
  DgnString::~DgnString((DgnString *)&v72);
  *a4 += v37;
  *a5 += v37;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 4;
  else
    v43 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 574, (DgnString *)&v72);
  if (v73)
    v48 = (char *)v72;
  else
    v48 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v48, v43, v43, 0);
  DgnString::~DgnString((DgnString *)&v72);
  *a4 += v43;
  *a5 += v43;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 576, (DgnString *)&v72);
  if (v73)
    v53 = (char *)v72;
  else
    v53 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v53, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v72);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 578, (DgnString *)&v72);
  if (v73)
    v58 = (char *)v72;
  else
    v58 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v58, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v72);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v59 = 4;
  else
    v59 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 579, (DgnString *)&v72);
  if (v73)
    v64 = (char *)v72;
  else
    v64 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v64, v59, v59, 0);
  DgnString::~DgnString((DgnString *)&v72);
  *a4 += v59;
  *a5 += v59;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 581, (DgnString *)&v72);
  if (v73)
    v69 = (char *)v72;
  else
    v69 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, a3, &byte_209A88803, (35 - a3), (35 - a3), v69, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v72);
}

void sub_20995A100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::scoreFramesUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ReturnListQueue *this)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 17) || (int)ReturnListQueue::getNextFrameTime(this) > (int)a2)
    return 0;
  *(_BYTE *)(a1 + 16) = 1;
  PrefiltererThread::scoreUntil(*(_QWORD *)(a1 + 24), a2, a3, a4, this, v10, v11, v12);
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)this;
  return *(unsigned int *)(*(_QWORD *)(a1 + 24) + 1600);
}

uint64_t ThreadedTreePrefilterer::maybeStartScoring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  _OWORD *v11;

  if (*(_BYTE *)(a1 + 16))
    return 1;
  if (*(_BYTE *)(a1 + 17))
    return 0;
  v10 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v10 + 1592) = -16;
  v11 = (_OWORD *)(v10 + 1576);
  *(_QWORD *)(v10 + 1576) = a2;
  *(_QWORD *)(v10 + 1584) = a3;
  DgnThreadClient::play((DgnThreadClient *)v10, a2, a3, a4, a5, a6, a7, a8);
  *v11 = 0u;
  result = 1;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t ThreadedTreePrefilterer::maybeStopScoring(ThreadedTreePrefilterer *this, uint64_t a2, ReturnListQueue *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _DWORD *v11;
  int v12;

  if (!*((_BYTE *)this + 16)
    || (_DWORD)a2 && DgnThreadClient::getThreadState(*((DgnThreadClient **)this + 3)) != 4)
  {
    return 0;
  }
  v10 = *((_QWORD *)this + 3);
  DgnThreadClient::pause((DgnThreadClient *)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = *(_DWORD **)(v10 + 56);
  v12 = v11[114];
  *(_DWORD *)(v10 + 1596) = v11[113];
  *(_DWORD *)(v10 + 1600) = v12;
  ReturnListQueue::copyIntoQueue((ReturnListQueue *)(v11 + 66), a3);
  *((_BYTE *)this + 17) = *(_BYTE *)a3;
  *((_BYTE *)this + 16) = 0;
  return *(unsigned int *)(*((_QWORD *)this + 3) + 1600);
}

uint64_t ThreadedTreePrefilterer::setInjectCwids(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v5, *(_QWORD *)(a1 + 40));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), a2);
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v5);
}

void sub_20995A310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::beginPrefSyncRecog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v13, *(_QWORD *)(a1 + 40));
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6);
  *(_BYTE *)(a1 + 49) = 1;
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v13);
}

void sub_20995A3B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::endPrefSyncRecog(ThreadedTreePrefilterer *this)
{
  uint64_t result;
  uint64_t v3;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v3, *((_QWORD *)this + 5));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4));
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v3);
  result = PrefiltererThread::reset(*((PrefiltererThread **)this + 3));
  *((_BYTE *)this + 17) = 0;
  *((_BYTE *)this + 49) = 0;
  return result;
}

void sub_20995A428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::makePelScoreCacheData(ThreadedTreePrefilterer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 64))(*((_QWORD *)this + 4));
}

uint64_t ThreadedTreePrefilterer::setPelScoreCacheData(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v5, *(_QWORD *)(a1 + 40));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32), a2);
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v5);
}

void sub_20995A4A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::initPrefilterer(ThreadedTreePrefilterer *this, int ***a2, unsigned int a3, int a4, char a5)
{
  uint64_t v11;

  *((_QWORD *)this + 7) = a2;
  *((_WORD *)this + 4) = a3;
  *((_DWORD *)this + 3) = a4;
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v11, *((_QWORD *)this + 5));
  TreePrefilterer::initPrefilterer(*((TreePrefilterer **)this + 4), a2, a3, a4, a5, 1);
  *((_BYTE *)this + 48) = 1;
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v11);
}

void sub_20995A548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::getUserId(ThreadedTreePrefilterer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    return *(unsigned __int16 *)(v1 + 184);
  else
    return 0xFFFFLL;
}

uint64_t ThreadedTreePrefilterer::getPrefiltererStats(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32));
}

uint64_t ThreadedTreePrefilterer::setSynchronousPrefiltererStats(ThreadedTreePrefilterer *this)
{
  uint64_t v3;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v3, *((_QWORD *)this + 5));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 88))(*((_QWORD *)this + 4));
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v3);
}

void sub_20995A5D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::getCurFrame(ThreadedTreePrefilterer *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 3) + 1596);
}

uint64_t ThreadedTreePrefilterer::getPelScorer(ThreadedTreePrefilterer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 160))(*((_QWORD *)this + 4));
}

uint64_t ThreadedTreePrefilterer::getThreadId(ThreadedTreePrefilterer *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 3) + 28);
}

void PrefiltererThread::~PrefiltererThread(PrefiltererThread *this)
{
  DgnThreadClient::~DgnThreadClient(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t *DgnThread<PrefiltererThreadWorker>::newWorker(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v4;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v4, *(_QWORD *)(a1 + 16));
  v2 = MemChunkAlloc(0x1D0uLL, *(MemChunkRegion **)(a1 + 16));
  PrefiltererThreadWorker::PrefiltererThreadWorker((uint64_t)v2, *(_DWORD *)(a1 + 12), a1, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 28));
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v4);
  return v2;
}

void sub_20995A6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::setPrefiltererBuildParamSet(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
}

uint64_t ThreadedTreePrefilterer::getPrefiltererBuildParamSet(ThreadedTreePrefilterer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4));
}

uint64_t ThreadedTreePrefilterer::isScoring(ThreadedTreePrefilterer *this)
{
  return *((unsigned __int8 *)this + 16);
}

uint64_t ThreadedTreePrefilterer::isInUseByRecog(ThreadedTreePrefilterer *this)
{
  return *((unsigned __int8 *)this + 49);
}

uint64_t Prefilterer::getWordToScoreAndDurationHash(Prefilterer *this)
{
  return 0;
}

uint64_t Prefilterer::getEffectiveLms(Prefilterer *this)
{
  return 0;
}

uint64_t DgnThread<PrefiltererThreadWorker>::DgnThread(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  _QWORD *v5;

  v5 = (_QWORD *)DgnThreadClient::DgnThreadClient(a1, a2, a3, a4);
  *v5 = &unk_24C2198F0;
  *(_QWORD *)(a1 + 56) = DgnThread<PrefiltererThreadWorker>::newWorker((uint64_t)v5);
  return a1;
}

void sub_20995A734(_Unwind_Exception *a1)
{
  DgnThreadClient *v1;

  DgnThreadClient::~DgnThreadClient(v1);
  _Unwind_Resume(a1);
}

void DgnThread<PrefiltererThreadWorker>::~DgnThread(DgnThreadClient *a1)
{
  DgnThreadClient::~DgnThreadClient(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t sizeObject<ScoreFixArray>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;

  v2 = 0;
  v9 = 0;
  v10 = 0;
  v3 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  if (a2 != 3)
  {
    v2 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v4 = *(unsigned int *)(a1 + 8);
      if ((int)v4 >= 1)
      {
        v5 = v4 + 1;
        do
        {
          v6 = *(unsigned int *)(*(_QWORD *)a1 + 16 * (v5 - 2) + 8);
          if ((int)v6 <= 0)
            v7 = 0;
          else
            v7 = 2 * v6;
          v2 += v3 + v7;
          --v5;
        }
        while (v5 > 1);
      }
      if (!a2)
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - v4);
    }
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v9);
  return v2;
}

uint64_t SynchronizedArray<ScoreFixArray>::SynchronizedArray(uint64_t a1)
{
  *(_DWORD *)(a1 + 4) = -16;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  SynchronizedArray<ScoreFixArray>::reset(a1);
  return a1;
}

void sub_20995A870(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnArray<DgnVector>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void ParamValue::~ParamValue(ParamValue *this)
{
  _QWORD *v1;

  if (*((_BYTE *)this + 32))
  {
    v1 = (_QWORD *)*((_QWORD *)this + 3);
    if (v1)
      MemChunkFree(v1, 0);
  }
}

void ParamValue::ParamValue(ParamValue *this, const ParamValue *a2)
{
  int v3;
  const char *v4;
  int v7;
  uint64_t *v8;
  char *v9;

  *(_DWORD *)this = *(_DWORD *)a2;
  *((_BYTE *)this + 4) = *((_BYTE *)a2 + 4);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  v3 = *((unsigned __int8 *)a2 + 32);
  v4 = (const char *)*((_QWORD *)a2 + 3);
  if ((*(_DWORD *)a2 & 0xFFFFFFFE) == 4 && v3 != 0)
  {
    if (v4)
    {
      v7 = strlen(*((const char **)a2 + 3));
      v8 = MemChunkAlloc((v7 + 1), 0);
      v9 = strcpy((char *)v8, v4);
      LOBYTE(v3) = *((_BYTE *)a2 + 32);
      v4 = v9;
    }
    else
    {
      LOBYTE(v3) = 1;
    }
  }
  *((_QWORD *)this + 3) = v4;
  *((_BYTE *)this + 32) = v3;
}

uint64_t DynamicParamSet::DynamicParamSet(uint64_t a1, char *a2, int a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  ParamSpecMgr *v12;
  unsigned int NumParamIds;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t ParamByParamId;
  char Default_BOOL;
  uint64_t v32;
  int Default_int;
  _DWORD *v34;
  double Default_double;
  uint64_t v36;
  const char *Default_string;
  char *Default_enumAsString;

  DgnString::DgnString((DgnString *)a1);
  *(_QWORD *)(v10 + 32) = 0;
  v11 = (_QWORD *)(v10 + 32);
  *(_QWORD *)(v10 + 40) = 0;
  *(_DWORD *)(v10 + 24) = a3;
  DgnString::operator=((DgnString *)v10, a2);
  *(_QWORD *)(a1 + 16) = a4;
  v12 = (ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[a3];
  NumParamIds = ParamSpecMgr::getNumParamIds(v12);
  v20 = NumParamIds;
  v21 = *(_DWORD *)(a1 + 44);
  if (NumParamIds > v21)
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)v11, NumParamIds - v21, 0);
  v22 = *(unsigned int *)(a1 + 40);
  if (v22 <= v20)
  {
    if (v22 < v20)
    {
      v25 = v20 - v22;
      v26 = 40 * v22;
      do
      {
        v27 = *v11 + v26;
        *(_DWORD *)v27 = 0;
        *(_BYTE *)(v27 + 4) = 0;
        *(_DWORD *)(v27 + 8) = 0;
        *(_QWORD *)(v27 + 16) = 0;
        *(_QWORD *)(v27 + 24) = 0;
        *(_BYTE *)(v27 + 32) = 0;
        v26 += 40;
        --v25;
      }
      while (v25);
    }
  }
  else if ((int)v22 > (int)v20)
  {
    v23 = (int)v22;
    v24 = 40 * (int)v22 - 40;
    do
    {
      --v23;
      ParamValue::~ParamValue((ParamValue *)(*v11 + v24));
      v24 -= 40;
    }
    while (v23 > v20);
  }
  *(_DWORD *)(a1 + 40) = v20;
  if (*(_DWORD *)(a5 + 8))
  {
    v28 = 0;
    do
    {
      v29 = *(unsigned __int16 *)(*(_QWORD *)a5 + 2 * v28);
      ParamByParamId = ParamSpecMgr::getParamByParamId(v12, v29, v14, v15, v16, v17, v18, v19);
      switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)ParamByParamId + 24))(ParamByParamId))
      {
        case 1u:
          Default_BOOL = ParamSpecMgr::ParamGetDefault_BOOL(v12, v29, a4, HIDWORD(a4), v16, v17, v18, v19);
          v32 = *v11 + 40 * v29;
          *(_DWORD *)v32 = 1;
          *(_BYTE *)(v32 + 4) = Default_BOOL;
          break;
        case 2u:
          Default_int = ParamSpecMgr::ParamGetDefault_int(v12, v29, a4, HIDWORD(a4), v16, v17, v18, v19);
          v34 = (_DWORD *)(*v11 + 40 * v29);
          *v34 = 2;
          v34[2] = Default_int;
          break;
        case 3u:
          Default_double = ParamSpecMgr::ParamGetDefault_double(v12, v29, a4, HIDWORD(a4), v16, v17, v18, v19);
          v36 = *v11 + 40 * v29;
          *(_DWORD *)v36 = 3;
          *(double *)(v36 + 16) = Default_double;
          break;
        case 4u:
          Default_string = (const char *)ParamSpecMgr::ParamGetDefault_string(v12, v29, a4, HIDWORD(a4), v16, v17, v18, v19);
          DynamicParamSet::setStringParameter(a1, v29, Default_string, 0);
          break;
        case 5u:
          Default_enumAsString = ParamSpecMgr::ParamGetDefault_enumAsString(v12, v29, a4, HIDWORD(a4), v16, v17, v18, v19);
          DynamicParamSet::setEnumParameter(a1, v29, Default_enumAsString, 0);
          break;
        default:
          break;
      }
      ++v28;
    }
    while (v28 < *(unsigned int *)(a5 + 8));
  }
  return a1;
}

void sub_20995ABD8(_Unwind_Exception *a1)
{
  DgnString *v1;
  uint64_t v2;

  DgnArray<ParamValue>::releaseAll(v2);
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t DynamicParamSet::setBoolParameter(uint64_t this, unsigned int a2, char a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 32) + 40 * a2;
  *(_DWORD *)v3 = 1;
  *(_BYTE *)(v3 + 4) = a3;
  return this;
}

uint64_t DynamicParamSet::setIntParameter(uint64_t this, unsigned int a2, int a3)
{
  _DWORD *v3;

  v3 = (_DWORD *)(*(_QWORD *)(this + 32) + 40 * a2);
  *v3 = 2;
  v3[2] = a3;
  return this;
}

uint64_t DynamicParamSet::setDoubleParameter(uint64_t this, unsigned int a2, double a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 32) + 40 * a2;
  *(_DWORD *)v3 = 3;
  *(double *)(v3 + 16) = a3;
  return this;
}

uint64_t DynamicParamSet::setStringParameter(uint64_t this, unsigned int a2, const char *__s, int a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = __s;
  v6 = this;
  v7 = *(_QWORD *)(this + 32);
  v9 = (_DWORD *)(v7 + 40 * a2);
  if (*v9 != 4 || (this = strcmp(*(const char **)(v7 + 40 * a2 + 24), __s), (_DWORD)this))
  {
    *v9 = 4;
    if (*(_BYTE *)(v7 + 40 * a2 + 32))
    {
      this = *(_QWORD *)(v7 + 40 * a2 + 24);
      if (this)
        this = MemChunkFree((_QWORD *)this, 0);
    }
    if (a4)
    {
      if (v5)
      {
        v10 = strlen(v5);
        v11 = MemChunkAlloc((v10 + 1), 0);
        this = (uint64_t)strcpy((char *)v11, v5);
        v5 = (const char *)this;
      }
    }
    v12 = *(_QWORD *)(v6 + 32) + 40 * a2;
    *(_QWORD *)(v12 + 24) = v5;
    *(_BYTE *)(v12 + 32) = a4;
  }
  return this;
}

uint64_t DynamicParamSet::setEnumParameter(uint64_t this, unsigned int a2, const char *__s, int a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = __s;
  v6 = this;
  v7 = *(_QWORD *)(this + 32);
  v9 = (_DWORD *)(v7 + 40 * a2);
  if (*v9 != 5 || (this = strcmp(*(const char **)(v7 + 40 * a2 + 24), __s), (_DWORD)this))
  {
    *v9 = 5;
    if (*(_BYTE *)(v7 + 40 * a2 + 32))
    {
      this = *(_QWORD *)(v7 + 40 * a2 + 24);
      if (this)
        this = MemChunkFree((_QWORD *)this, 0);
    }
    if (a4)
    {
      if (v5)
      {
        v10 = strlen(v5);
        v11 = MemChunkAlloc((v10 + 1), 0);
        this = (uint64_t)strcpy((char *)v11, v5);
        v5 = (const char *)this;
      }
    }
    v12 = *(_QWORD *)(v6 + 32) + 40 * a2;
    *(_QWORD *)(v12 + 24) = v5;
    *(_BYTE *)(v12 + 32) = a4;
  }
  return this;
}

void DynamicParamSet::DynamicParamSet(DynamicParamSet *this, const DynamicParamSet *a2)
{
  uint64_t v4;
  uint64_t v5;

  DgnString::DgnString(this);
  *(_QWORD *)(v4 + 32) = 0;
  v5 = v4 + 32;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 24) = *((_DWORD *)a2 + 6);
  DgnString::operator=((DgnString *)v4, a2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  DgnArray<ParamValue>::copyArraySlice(v5, (_QWORD *)a2 + 4, 0, *((_DWORD *)a2 + 10));
}

void sub_20995AE80(_Unwind_Exception *a1)
{
  DgnString *v1;
  uint64_t v2;

  DgnArray<ParamValue>::releaseAll(v2);
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t DynamicParamSet::setBoolParameter(DynamicParamSet *this, const char *a2, char a3)
{
  uint64_t result;
  uint64_t v6;

  result = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);
  v6 = *((_QWORD *)this + 4) + 40 * result;
  *(_DWORD *)v6 = 1;
  *(_BYTE *)(v6 + 4) = a3;
  return result;
}

uint64_t DynamicParamSet::setIntParameter(DynamicParamSet *this, const char *a2, int a3)
{
  uint64_t result;
  _DWORD *v6;

  result = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);
  v6 = (_DWORD *)(*((_QWORD *)this + 4) + 40 * result);
  *v6 = 2;
  v6[2] = a3;
  return result;
}

uint64_t DynamicParamSet::setDoubleParameter(DynamicParamSet *this, const char *a2, double a3)
{
  uint64_t result;
  uint64_t v6;

  result = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);
  v6 = *((_QWORD *)this + 4) + 40 * result;
  *(_DWORD *)v6 = 3;
  *(double *)(v6 + 16) = a3;
  return result;
}

uint64_t DynamicParamSet::setStringParameter(DynamicParamSet *this, const char *a2, const char *a3, int a4)
{
  unsigned int ParamId;

  ParamId = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);
  return DynamicParamSet::setStringParameter((uint64_t)this, ParamId, a3, a4);
}

uint64_t DynamicParamSet::setEnumParameter(DynamicParamSet *this, const char *a2, const char *a3, int a4)
{
  unsigned int ParamId;

  ParamId = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);
  return DynamicParamSet::setEnumParameter((uint64_t)this, ParamId, a3, a4);
}

uint64_t DynamicParamSet::getBoolParameter(DynamicParamSet *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  uint64_t ParamByParamId;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = *((_QWORD *)this + 4);
  v10 = *(_DWORD *)(v8 + 40 * a2);
  if (v10 != 1)
  {
    if (!v10)
    {
      ParamByParamId = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 341, (uint64_t)"dfutil/dynparset", 2, (uint64_t)"%.500s %.500s", v14, v15, *(_QWORD *)(ParamByParamId + 8));
    }
    v16 = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 347, (uint64_t)"dfutil/dynparset", 1, (uint64_t)"%.500s %.500s %.500s", v17, v18, *(_QWORD *)(v16 + 8));
    v8 = *((_QWORD *)this + 4);
  }
  return *(unsigned __int8 *)(v8 + 40 * a2 + 4);
}

uint64_t DynamicParamSet::getIntParameter(DynamicParamSet *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  uint64_t ParamByParamId;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = *((_QWORD *)this + 4);
  v10 = *(_DWORD *)(v8 + 40 * a2);
  if (v10 != 2)
  {
    if (!v10)
    {
      ParamByParamId = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 358, (uint64_t)"dfutil/dynparset", 2, (uint64_t)"%.500s %.500s", v14, v15, *(_QWORD *)(ParamByParamId + 8));
    }
    v16 = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 364, (uint64_t)"dfutil/dynparset", 1, (uint64_t)"%.500s %.500s %.500s", v17, v18, *(_QWORD *)(v16 + 8));
    v8 = *((_QWORD *)this + 4);
  }
  return *(unsigned int *)(v8 + 40 * a2 + 8);
}

double DynamicParamSet::getDoubleParameter(DynamicParamSet *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  uint64_t ParamByParamId;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = *((_QWORD *)this + 4);
  v10 = *(_DWORD *)(v8 + 40 * a2);
  if (v10 != 3)
  {
    if (!v10)
    {
      ParamByParamId = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 375, (uint64_t)"dfutil/dynparset", 2, (uint64_t)"%.500s %.500s", v14, v15, *(_QWORD *)(ParamByParamId + 8));
    }
    v16 = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 381, (uint64_t)"dfutil/dynparset", 1, (uint64_t)"%.500s %.500s %.500s", v17, v18, *(_QWORD *)(v16 + 8));
    v8 = *((_QWORD *)this + 4);
  }
  return *(double *)(v8 + 40 * a2 + 16);
}

uint64_t DynamicParamSet::getStringParameter(DynamicParamSet *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  uint64_t ParamByParamId;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = *((_QWORD *)this + 4);
  v10 = *(_DWORD *)(v8 + 40 * a2);
  if (v10 != 4)
  {
    if (!v10)
    {
      ParamByParamId = ParamSpecMgr::getParamByParamId((ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[*((unsigned int *)this + 6)], a2, a3, a4, a5, a6, a7, a8);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 392, (uint64_t)"dfutil/dynparset", 2, (uint64_t)"%.500s %.500s", v14, v15, *(_QWORD *)(ParamByParamId + 8));
    }
    v16 = ParamSpecMgr::getParamByParamId((ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[*((unsigned int *)this + 6)], a2, a3, a4, a5, a6, a7, a8);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 398, (uint64_t)"dfutil/dynparset", 1, (uint64_t)"%.500s %.500s %.500s", v17, v18, *(_QWORD *)(v16 + 8));
    v8 = *((_QWORD *)this + 4);
  }
  return *(_QWORD *)(v8 + 40 * a2 + 24);
}

uint64_t DynamicParamSet::getEnumParameter(DynamicParamSet *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  uint64_t ParamByParamId;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = *((_QWORD *)this + 4);
  v10 = *(_DWORD *)(v8 + 40 * a2);
  if (v10 != 5)
  {
    if (!v10)
    {
      ParamByParamId = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 409, (uint64_t)"dfutil/dynparset", 2, (uint64_t)"%.500s %.500s", v14, v15, *(_QWORD *)(ParamByParamId + 8));
    }
    v16 = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 415, (uint64_t)"dfutil/dynparset", 1, (uint64_t)"%.500s %.500s %.500s", v17, v18, *(_QWORD *)(v16 + 8));
    v8 = *((_QWORD *)this + 4);
  }
  return *(_QWORD *)(v8 + 40 * a2 + 24);
}

uint64_t DynamicParamSet::getBoolParameter(DynamicParamSet *this, const char *a2)
{
  unsigned int ParamId;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  ParamId = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);
  return DynamicParamSet::getBoolParameter(this, ParamId, v4, v5, v6, v7, v8, v9);
}

uint64_t DynamicParamSet::getIntParameter(DynamicParamSet *this, const char *a2)
{
  unsigned int ParamId;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  ParamId = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);
  return DynamicParamSet::getIntParameter(this, ParamId, v4, v5, v6, v7, v8, v9);
}

double DynamicParamSet::getDoubleParameter(DynamicParamSet *this, const char *a2)
{
  unsigned int ParamId;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  ParamId = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);
  return DynamicParamSet::getDoubleParameter(this, ParamId, v4, v5, v6, v7, v8, v9);
}

uint64_t DynamicParamSet::getEnumParameter(DynamicParamSet *this, const char *a2)
{
  unsigned int ParamId;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  ParamId = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);
  return DynamicParamSet::getEnumParameter(this, ParamId, v4, v5, v6, v7, v8, v9);
}

_QWORD *DynamicParamSet::removeParameter(_QWORD *this, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v4;

  v2 = this[4];
  if (*(_BYTE *)(v2 + 40 * a2 + 32))
  {
    v4 = this;
    this = *(_QWORD **)(v2 + 40 * a2 + 24);
    if (this)
    {
      this = (_QWORD *)MemChunkFree(this, 0);
      v2 = v4[4];
    }
    *(_QWORD *)(v2 + 40 * a2 + 24) = 0;
  }
  *(_DWORD *)(v2 + 40 * a2) = 0;
  return this;
}

_QWORD *DynamicParamSet::removeParameter(DynamicParamSet *this, const char *a2)
{
  unsigned int ParamId;

  ParamId = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);
  return DynamicParamSet::removeParameter(this, ParamId);
}

uint64_t DynamicParamSet::validateSelf(DynamicParamSet *this)
{
  uint64_t v2;
  ParamSpecMgr *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  const void *ParamByParamId;
  int v13;
  char *EnumParameter;
  EnumParamSpec *v15;
  int IntParameter;
  IntParamSpec *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double DoubleParameter;
  DoubleParamSpec *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t i;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v39;
  uint64_t v40;

  v2 = *((unsigned int *)this + 5);
  v3 = (ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[*((unsigned int *)this + 6)];
  v39 = 0;
  v40 = 0;
  ParamSpecMgr::getAllParamIdsSortedByName((unint64_t)v3, (uint64_t)&v39, *((unsigned int *)this + 4), v2);
  if ((_DWORD)v40)
  {
    v10 = 0;
    do
    {
      v11 = v39[v10];
      ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v3, v11, v4, v5, v6, v7, v8, v9);
      v13 = (*(uint64_t (**)(const void *))(*(_QWORD *)ParamByParamId + 24))(ParamByParamId);
      switch(v13)
      {
        case 2:
          IntParameter = DynamicParamSet::getIntParameter(this, v11, v4, v5, v6, v7, v8, v9);
          IntParamSpec::validateValue(v17, IntParameter, *((_DWORD *)this + 4), *((_DWORD *)this + 5), v18, v19, v20, v21);
          break;
        case 3:
          DoubleParameter = DynamicParamSet::getDoubleParameter(this, v11, v4, v5, v6, v7, v8, v9);
          DoubleParamSpec::validateValue(v23, DoubleParameter, *((_DWORD *)this + 4), *((_DWORD *)this + 5), v24, v25, v26, v27, v28);
          break;
        case 5:
          EnumParameter = (char *)DynamicParamSet::getEnumParameter(this, v11, v4, v5, v6, v7, v8, v9);
          EnumParamSpec::checkStringEnumValue(v15, EnumParameter, *((_DWORD *)this + 4), *((_DWORD *)this + 5));
          break;
      }
      ++v10;
    }
    while (v10 < v40);
  }
  v29 = *((unsigned int *)this + 10);
  if ((_DWORD)v29)
  {
    for (i = 0; i < v29; ++i)
    {
      if (*(_DWORD *)(*((_QWORD *)this + 4) + 40 * i))
      {
        v31 = v40;
        if (!(_DWORD)v40)
          goto LABEL_19;
        v32 = v39;
        v33 = 0xFFFFFFFFLL;
        while (1)
        {
          v34 = *v32++;
          if (v34 == (unsigned __int16)i)
            break;
          --v33;
          if (!--v31)
            goto LABEL_19;
        }
        if (!v33)
        {
LABEL_19:
          v35 = ParamSpecMgr::getParamByParamId((ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[*((unsigned int *)this + 6)], (unsigned __int16)i, v4, v5, v6, v7, v8, v9);
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 532, (uint64_t)"dfutil/dynparset", 3, (uint64_t)"%.500s", v36, v37, *(_QWORD *)(v35 + 8));
          v29 = *((unsigned int *)this + 10);
        }
      }
    }
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
}

void sub_20995B90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void DgnArray<ParamValue>::copyArraySlice(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= 1)
  {
    v9 = 40 * v8 - 40;
    do
    {
      ParamValue::~ParamValue((ParamValue *)(*(_QWORD *)a1 + v9));
      v9 -= 40;
    }
    while (v9 != -40);
  }
  *(_DWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 12);
  if (a4 <= v10)
  {
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_14;
  }
  else
  {
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(a1, a4 - v10, 0);
    v11 = *(_DWORD *)(a1 + 8);
  }
  v13 = 0;
  v12 = v11;
  do
  {
    ParamValue::ParamValue((ParamValue *)(*(_QWORD *)a1 + 40 * v12), (const ParamValue *)(*a2 + 40 * (a3 + v13)));
    v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      v14 = (int)v12;
      v15 = 40 * (int)v12 - 40;
      do
      {
        --v14;
        ParamValue::~ParamValue((ParamValue *)(*(_QWORD *)a1 + v15));
        v15 -= 40;
      }
      while (v14 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    v16 = a4 - (unint64_t)v12;
    v17 = 40 * v12;
    do
    {
      v18 = *(_QWORD *)a1 + v17;
      *(_DWORD *)v18 = 0;
      *(_BYTE *)(v18 + 4) = 0;
      *(_DWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)(v18 + 24) = 0;
      *(_BYTE *)(v18 + 32) = 0;
      v17 += 40;
      --v16;
    }
    while (v16);
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = a4;
}

uint64_t sdGetAndValidateParamSet(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ParamSetHolderMgr *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ParamSetHolder *ParamSetHolder;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ParamSet;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v9 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
  v10 = *a1;
  if (HIDWORD(*a1))
    throwBadSdapiArgument("SDhParamSetHolder", v10, a3, a4, a5, a6, a7, a8);
  if ((v10 + 1) <= 1)
    throwBadSdapiArgument("SDhParamSetHolder", v10, a3, a4, a5, a6, a7, a8);
  ParamSetHolder = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(v9, v10, a3, a4, a5, a6, a7, a8);
  v18 = a1[1];
  switch(v18)
  {
    case 1uLL:
      v19 = a1[2];
      if (HIDWORD(v19))
        throwBadSdapiArgument("SDhAdapterParamSet", v19, v11, v12, v13, v14, v15, v16);
      if ((v19 + 1) <= 1)
        throwBadSdapiArgument("SDhAdapterParamSet", v19, v11, v12, v13, v14, v15, v16);
      ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v19, v11, v12, v13, v14, v15, v16);
      goto LABEL_71;
    case 2uLL:
      v23 = a1[3];
      if (HIDWORD(v23))
        throwBadSdapiArgument("SDhChannelParamSet", v23, v11, v12, v13, v14, v15, v16);
      if ((v23 + 1) <= 1)
        throwBadSdapiArgument("SDhChannelParamSet", v23, v11, v12, v13, v14, v15, v16);
      ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v23, v11, v12, v13, v14, v15, v16);
      v24 = 2;
      break;
    case 3uLL:
      v25 = a1[4];
      if (HIDWORD(v25))
        throwBadSdapiArgument("SDhConfidenceParamSet", v25, v11, v12, v13, v14, v15, v16);
      if ((v25 + 1) <= 1)
        throwBadSdapiArgument("SDhConfidenceParamSet", v25, v11, v12, v13, v14, v15, v16);
      ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v25, v11, v12, v13, v14, v15, v16);
      v24 = 3;
      break;
    case 4uLL:
      v26 = a1[5];
      if (HIDWORD(v26))
        throwBadSdapiArgument("SDhLatticeNBestParamSet", v26, v11, v12, v13, v14, v15, v16);
      if ((v26 + 1) <= 1)
        throwBadSdapiArgument("SDhLatticeNBestParamSet", v26, v11, v12, v13, v14, v15, v16);
      ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v26, v11, v12, v13, v14, v15, v16);
      v24 = 4;
      break;
    case 5uLL:
      v27 = a1[6];
      if (HIDWORD(v27))
        throwBadSdapiArgument("SDhLatticePostProbParamSet", v27, v11, v12, v13, v14, v15, v16);
      if ((v27 + 1) <= 1)
        throwBadSdapiArgument("SDhLatticePostProbParamSet", v27, v11, v12, v13, v14, v15, v16);
      ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v27, v11, v12, v13, v14, v15, v16);
      v24 = 5;
      break;
    case 6uLL:
      v28 = a1[7];
      if (HIDWORD(v28))
        throwBadSdapiArgument("SDhPrefiltererBuildParamSet", v28, v11, v12, v13, v14, v15, v16);
      if ((v28 + 1) <= 1)
        throwBadSdapiArgument("SDhPrefiltererBuildParamSet", v28, v11, v12, v13, v14, v15, v16);
      ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v28, v11, v12, v13, v14, v15, v16);
      v24 = 6;
      break;
    case 7uLL:
      v29 = a1[8];
      if (HIDWORD(v29))
        throwBadSdapiArgument("SDhPrefiltererSearchParamSet", v29, v11, v12, v13, v14, v15, v16);
      if ((v29 + 1) <= 1)
        throwBadSdapiArgument("SDhPrefiltererSearchParamSet", v29, v11, v12, v13, v14, v15, v16);
      ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v29, v11, v12, v13, v14, v15, v16);
      v24 = 7;
      break;
    case 8uLL:
      v30 = a1[9];
      if (HIDWORD(v30))
        throwBadSdapiArgument("SDhPronGuessParamSet", v30, v11, v12, v13, v14, v15, v16);
      if ((v30 + 1) <= 1)
        throwBadSdapiArgument("SDhPronGuessParamSet", v30, v11, v12, v13, v14, v15, v16);
      ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v30, v11, v12, v13, v14, v15, v16);
      v24 = 8;
      break;
    case 9uLL:
      v31 = a1[10];
      if (HIDWORD(v31))
        throwBadSdapiArgument("SDhSausageParamSet", v31, v11, v12, v13, v14, v15, v16);
      if ((v31 + 1) <= 1)
        throwBadSdapiArgument("SDhSausageParamSet", v31, v11, v12, v13, v14, v15, v16);
      ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v31, v11, v12, v13, v14, v15, v16);
      v24 = 9;
      break;
    case 0xAuLL:
      v32 = a1[11];
      if (HIDWORD(v32))
        throwBadSdapiArgument("SDhSearchParamSet", v32, v11, v12, v13, v14, v15, v16);
      if ((v32 + 1) <= 1)
        throwBadSdapiArgument("SDhSearchParamSet", v32, v11, v12, v13, v14, v15, v16);
      ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v32, v11, v12, v13, v14, v15, v16);
      v24 = 10;
      break;
    case 0xBuLL:
      v33 = a1[12];
      if (HIDWORD(v33))
        throwBadSdapiArgument("SDhSearchCrossLayerParamSet", v33, v11, v12, v13, v14, v15, v16);
      if ((v33 + 1) <= 1)
        throwBadSdapiArgument("SDhSearchCrossLayerParamSet", v33, v11, v12, v13, v14, v15, v16);
      ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v33, v11, v12, v13, v14, v15, v16);
      v24 = 11;
      break;
    case 0xCuLL:
      v34 = a1[13];
      if (HIDWORD(v34))
        throwBadSdapiArgument("SDhUserDeltaParamSet", v34, v11, v12, v13, v14, v15, v16);
      if ((v34 + 1) <= 1)
        throwBadSdapiArgument("SDhUserDeltaParamSet", v34, v11, v12, v13, v14, v15, v16);
      ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v34, v11, v12, v13, v14, v15, v16);
      v24 = 12;
      break;
    default:
      throwBadSdapiArgument("SDParamSetContainerType", a1[1], v11, v12, v13, v14, v15, v16);
      v41 = a1[11];
      if (HIDWORD(v41))
        throwBadSdapiArgument("SDhSearchParamSet", v41, v35, v36, v37, v38, v39, v40);
      if ((v41 + 1) <= 1)
        throwBadSdapiArgument("SDhSearchParamSet", v41, v35, v36, v37, v38, v39, v40);
      ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v41, v35, v36, v37, v38, v39, v40);
      throwBadSdapiArgument("SDParamSetContainerType", v18, v42, v43, v44, v45, v46, v47);
LABEL_71:
      v24 = 1;
      break;
  }
  if (v24 != *(_DWORD *)(ParamSet + 24))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdparamsetparam.cpp", 60, (uint64_t)"sdapi/sdparamsetparam", 1, (uint64_t)"%s", v20, v21, (char)&unk_209A7B1C4);
  return ParamSet;
}

uint64_t SDParamSetParam_GetHandle(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int ParamIdByParamName;
  uint64_t v15;
  _BYTE v17[152];

  v4 = SdapiInsurance::SdapiInsurance(v17, "SDParamSetParam_GetHandle", 1, 1, 193);
  if (v17[97])
  {
    if (!a2)
      throwBadStringPointer(v4, v5, v6, v7, v8, v9, v10, v11);
    v17[151] = 0;
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v12 = a1;
      else
        v12 = 0;
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, '%.500s')\n", v5, v6, v7, v8, "SDParamSetParam_GetHandle", v12, a2);
    }
    v13 = *(_QWORD *)(a1 + 8);
    if (v13 - 1 >= 0xC)
    {
      throwBadSdapiArgument("SDParamSetContainerType", v13, v6, v7, v8, v9, v10, v11);
      v13 = 1;
    }
    ParamIdByParamName = ParamSpecMgr::getParamIdByParamName((ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[v13], a2);
    if (ParamIdByParamName == 0xFFFF)
      v15 = -1;
    else
      v15 = ParamIdByParamName;
  }
  else
  {
    v15 = -1;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v17);
  return v15;
}

void sub_20995C0E0()
{
  __cxa_end_catch();
  JUMPOUT(0x20995C0ECLL);
}

uint64_t SDParamSetParam_GetType(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  ParamSpecMgr *v14;
  uint64_t ParamByParamId;
  _BYTE v17[144];

  v4 = 1;
  SdapiInsurance::SdapiInsurance(v17, "SDParamSetParam_GetType", 1, 1, 194);
  if (v17[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v12 = a1;
      else
        v12 = 0;
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, <Masked:SDh %lld>)\n", v5, v6, v7, v8, "SDParamSetParam_GetType", v12, a2);
    }
    v13 = *(_QWORD *)(a1 + 8);
    if (v13 - 1 >= 0xC)
    {
      throwBadSdapiArgument("SDParamSetContainerType", v13, v6, v7, v8, v9, v10, v11);
      v13 = 1;
    }
    v14 = (ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[v13];
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhParamSetParam", a2, v6, v7, v8, v9, v10, v11);
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2)
        throwBadSdapiArgument("SDhParamSetParam", a2, v6, v7, v8, v9, v10, v11);
    }
    ParamByParamId = ParamSpecMgr::getParamByParamId(v14, (unsigned __int16)a2, v6, v7, v8, v9, v10, v11);
    switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)ParamByParamId + 24))(ParamByParamId))
    {
      case 1u:
        v4 = 2;
        break;
      case 2u:
        v4 = 3;
        break;
      case 3u:
        v4 = 4;
        break;
      case 4u:
        v4 = 5;
        break;
      case 5u:
        v4 = 6;
        break;
      default:
        v4 = 1;
        break;
    }
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v17);
  return v4;
}

void sub_20995C2C8()
{
  __cxa_end_catch();
  JUMPOUT(0x20995C2D4);
}

void SDParamSetParam_SetBoolValue(unint64_t *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[144];

  SdapiInsurance::SdapiInsurance(v22, "SDParamSetParam_SetBoolValue", 1, 1, 202);
  if (v22[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v13 = a1;
      else
        v13 = 0;
      v14 = "SD_TRUE";
      if (!a3)
        v14 = "SD_FALSE";
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, <Masked:SDh %lld>, %.500s)\n", v6, v7, v8, v9, "SDParamSetParam_SetBoolValue", v13, a2, v14);
    }
    v21 = sdGetAndValidateParamSet(a1, v6, v7, v8, v9, v10, v11, v12);
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhParamSetParam", a2, v15, v16, v17, v18, v19, v20);
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2)
        throwBadSdapiArgument("SDhParamSetParam", a2, v15, v16, v17, v18, v19, v20);
    }
    if (a3 >= 2)
      throwBadSdapiArgument("SDBool", (int)a3, v15, v16, v17, v18, v19, v20);
    (*(void (**)(uint64_t, _QWORD, BOOL))(*(_QWORD *)v21 + 64))(v21, (unsigned __int16)a2, a3 == 1);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v22);
}

void sub_20995C42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  ApiState *v14;
  DgnException *v15;
  void *v16;

  if (a2 == 2)
  {
    v14 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v14, v15);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a13);
      _Unwind_Resume(a1);
    }
    v16 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v16);
  }
  __cxa_end_catch();
  JUMPOUT(0x20995C410);
}

void SDParamSetParam_SetIntValue(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[144];

  SdapiInsurance::SdapiInsurance(v21, "SDParamSetParam_SetIntValue", 1, 1, 203);
  if (v21[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v13 = a1;
      else
        v13 = 0;
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, <Masked:SDh %lld>, %lld)\n", v6, v7, v8, v9, "SDParamSetParam_SetIntValue", v13, a2, (int)a3);
    }
    v20 = sdGetAndValidateParamSet(a1, v6, v7, v8, v9, v10, v11, v12);
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhParamSetParam", a2, v14, v15, v16, v17, v18, v19);
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2)
        throwBadSdapiArgument("SDhParamSetParam", a2, v14, v15, v16, v17, v18, v19);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 72))(v20, (unsigned __int16)a2, a3);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v21);
}

void sub_20995C59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  ApiState *v14;
  DgnException *v15;
  void *v16;

  if (a2 == 2)
  {
    v14 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v14, v15);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a13);
      _Unwind_Resume(a1);
    }
    v16 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v16);
  }
  __cxa_end_catch();
  JUMPOUT(0x20995C580);
}

void SDParamSetParam_SetDoubleValue(unint64_t *a1, unint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  int v28;
  _BYTE v29[144];

  SdapiInsurance::SdapiInsurance(v29, "SDParamSetParam_SetDoubleValue", 1, 1, 204);
  if (v29[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v13 = a1;
      else
        v13 = 0;
      v14 = eround(a3, 14);
      DgnString::formatFloat((DgnString *)0xE, v14, (DgnString *)&v27);
      if (v28)
        v19 = v27;
      else
        v19 = &unk_209A7B1C4;
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, <Masked:SDh %lld>, %.500s)\n", v15, v16, v17, v18, "SDParamSetParam_SetDoubleValue", v13, a2, v19);
      DgnString::~DgnString((DgnString *)&v27);
    }
    v26 = sdGetAndValidateParamSet(a1, v6, v7, v8, v9, v10, v11, v12);
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhParamSetParam", a2, v20, v21, v22, v23, v24, v25);
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2)
        throwBadSdapiArgument("SDhParamSetParam", a2, v20, v21, v22, v23, v24, v25);
    }
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v26 + 80))(v26, (unsigned __int16)a2, a3);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v29);
}

void sub_20995C750(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  ApiState *v8;
  DgnException *v9;
  void *v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  if (a2 == 2)
  {
    v8 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v8, v9);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)va1);
      _Unwind_Resume(a1);
    }
    v10 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v10);
  }
  __cxa_end_catch();
  JUMPOUT(0x20995C72CLL);
}

void SDParamSetParam_SetStringValue(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[152];

  v6 = SdapiInsurance::SdapiInsurance(v22, "SDParamSetParam_SetStringValue", 1, 1, 205);
  if (v22[97])
  {
    if (!a3)
      throwBadStringPointer(v6, v7, v8, v9, v10, v11, v12, v13);
    v22[151] = 0;
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v14 = a1;
      else
        v14 = 0;
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, <Masked:SDh %lld>, '%.500s')\n", v7, v8, v9, v10, "SDParamSetParam_SetStringValue", v14, a2, a3);
    }
    v21 = sdGetAndValidateParamSet(a1, v7, v8, v9, v10, v11, v12, v13);
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhParamSetParam", a2, v15, v16, v17, v18, v19, v20);
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2)
        throwBadSdapiArgument("SDhParamSetParam", a2, v15, v16, v17, v18, v19, v20);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v21 + 88))(v21, (unsigned __int16)a2, a3);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v22);
}

void sub_20995C8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  ApiState *v15;
  DgnException *v16;
  void *v17;

  if (a2 == 2)
  {
    v15 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v15, v16);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a14);
      _Unwind_Resume(a1);
    }
    v17 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v17);
  }
  __cxa_end_catch();
  JUMPOUT(0x20995C8CCLL);
}

void SDParamSetParam_SetEnumValue(unint64_t *a1, unint64_t a2, const char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  ParamSpecMgr *v23;
  unint64_t v24;
  unsigned __int16 v25;
  void *ParamByParamId;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[152];

  v6 = SdapiInsurance::SdapiInsurance(v40, "SDParamSetParam_SetEnumValue", 1, 1, 206);
  if (v40[97])
  {
    if (!a3)
      throwBadStringPointer(v6, v7, v8, v9, v10, v11, v12, v13);
    v40[151] = 0;
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v14 = a1;
      else
        v14 = 0;
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, <Masked:SDh %lld>, '%.500s')\n", v7, v8, v9, v10, "SDParamSetParam_SetEnumValue", v14, a2, a3);
    }
    v21 = sdGetAndValidateParamSet(a1, v7, v8, v9, v10, v11, v12, v13);
    v22 = a1[1];
    if (v22 - 1 >= 0xC)
    {
      throwBadSdapiArgument("SDParamSetContainerType", v22, v15, v16, v17, v18, v19, v20);
      v22 = 1;
    }
    v23 = (ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[v22];
    v24 = HIDWORD(a2);
    if (a2 == -1)
    {
      v25 = -1;
    }
    else
    {
      if (v24 || (a2 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhParamSetParam", a2, v15, v16, v17, v18, v19, v20);
      if ((unsigned __int16)a2 != 0xFFFF && (_WORD)a2)
      {
        v25 = a2;
      }
      else
      {
        throwBadSdapiArgument("SDhParamSetParam", a2, v15, v16, v17, v18, v19, v20);
        v25 = a2;
      }
    }
    ParamByParamId = (void *)ParamSpecMgr::getParamByParamId(v23, v25, v15, v16, v17, v18, v19, v20);
    if (ParamByParamId)
    v39 = EnumParamSpec::convertEnumStringToInt((EnumParamSpec *)ParamByParamId, a3, v27, v28, v29, v30, v31, v32);
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else
    {
      if (v24 || (a2 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhParamSetParam", a2, v33, v34, v35, v36, v37, v38);
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2)
        throwBadSdapiArgument("SDhParamSetParam", a2, v33, v34, v35, v36, v37, v38);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v21 + 96))(v21, (unsigned __int16)a2, v39);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v40);
}

void sub_20995CB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  ApiState *v15;
  DgnException *v16;
  void *v17;

  if (a2 == 2)
  {
    v15 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v15, v16);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a14);
      _Unwind_Resume(a1);
    }
    v17 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v17);
  }
  __cxa_end_catch();
  JUMPOUT(0x20995CB0CLL);
}

_DWORD *DFileChecksumBucket::DFileChecksumBucket(_DWORD *a1, _DWORD *a2)
{
  DgnString *v4;

  DgnString::DgnString((DgnString *)(a1 + 2));
  *a1 = *a2;
  DgnString::operator=(v4, (DgnString *)(a2 + 2));
  return a1;
}

void sub_20995CBD8(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

BOOL DFileChecksumBucket::operator==(uint64_t a1, uint64_t a2)
{
  const char *v2;
  const char *v3;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  if (*(_DWORD *)(a1 + 16))
    v2 = *(const char **)(a1 + 8);
  else
    v2 = &byte_209A88803;
  if (*(_DWORD *)(a2 + 16))
    v3 = *(const char **)(a2 + 8);
  else
    v3 = &byte_209A88803;
  return strcmp(v2, v3) == 0;
}

void DFileChecksums::DFileChecksums(DFileChecksums *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
}

void DFileChecksums::~DFileChecksums(DFileChecksums *this)
{
  DgnArray<DFileChecksumBucket>::releaseAll((uint64_t)this);
}

uint64_t DFileChecksums::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  DgnArray<DFileChecksumBucket>::copyArraySlice(a1, (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8));
  return a1;
}

uint64_t DFileChecksums::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
    return DgnArray<DFileChecksumBucket>::operator==(a1, (uint64_t *)a2);
  else
    return 0;
}

uint64_t DgnArray<DFileChecksumBucket>::operator==(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  BOOL v9;

  if ((uint64_t *)a1 == a2)
    return 1;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 != *((_DWORD *)a2 + 2))
    return 0;
  v4 = *a2;
  v5 = v3 + 1;
  v6 = 24 * v3 - 24;
  do
  {
    v7 = --v5 < 1;
    if (v5 < 1)
      break;
    v8 = v6 - 24;
    v9 = DFileChecksumBucket::operator==(*(_QWORD *)a1 + v6, v4 + v6);
    v6 = v8;
  }
  while (v9);
  return v7;
}

void DFileChecksums::addChecksum(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  char *SubFileExtensionString;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  char *v17;
  char *v18;
  int v19;

  SubFileExtensionString = GetSubFileExtensionString(a3);
  DgnString::DgnString((DgnString *)&v18);
  DFile::makeSubFileName(a2, SubFileExtensionString, (DgnString *)&v18);
  v9 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 12);
  v10 = v9 + 1;
  v11 = v9;
  if (v9 + 1 > v8)
  {
    DgnArray<CWIDAC>::reallocElts(a1, v9 + 1 - v8, 0);
    v11 = *(_DWORD *)(a1 + 8);
  }
  if (v11 <= v10)
  {
    if (v11 < v10)
    {
      v14 = v9 - v11 + 1;
      v15 = 24 * v11 + 8;
      do
      {
        DgnString::DgnString((DgnString *)(*(_QWORD *)a1 + v15));
        v15 += 24;
        --v14;
      }
      while (v14);
    }
  }
  else if ((int)v11 > (int)v10)
  {
    v12 = (int)v11;
    v13 = 24 * (int)v11 - 16;
    do
    {
      --v12;
      DgnString::~DgnString((DgnString *)(*(_QWORD *)a1 + v13));
      v13 -= 24;
    }
    while (v12 > (int)v10);
  }
  *(_DWORD *)(a1 + 8) = v10;
  v16 = (_DWORD *)(*(_QWORD *)a1 + 24 * v9);
  if (v19)
    v17 = v18;
  else
    v17 = &byte_209A88803;
  *v16 = a4;
  DgnString::operator=((DgnString *)(v16 + 2), v17);
  *(_DWORD *)(a1 + 16) ^= a4;
  DgnString::~DgnString((DgnString *)&v18);
}

void sub_20995CEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

BOOL DFileChecksums::present(DFileChecksums *this, const char *a2)
{
  return DFileChecksums::find(this, a2) != -1;
}

uint64_t DFileChecksums::find(DFileChecksums *this, const char *__s2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *i;
  const char *v6;

  v2 = *((unsigned int *)this + 2);
  if (!(_DWORD)v2)
    return 0xFFFFFFFFLL;
  v4 = 0;
  for (i = (_DWORD *)(*(_QWORD *)this + 16); ; i += 6)
  {
    v6 = *i ? (const char *)*((_QWORD *)i - 1) : &byte_209A88803;
    if (!strcmp(v6, __s2))
      break;
    if (v2 == ++v4)
      return 0xFFFFFFFFLL;
  }
  return v4;
}

uint64_t DFileChecksums::getChecksum(DFileChecksums *this, const char *a2)
{
  return *(unsigned int *)(*(_QWORD *)this + 24 * DFileChecksums::find(this, a2));
}

uint64_t DFileChecksums::getChecksum(DFileChecksums *this, unsigned int a2)
{
  return *(unsigned int *)(*(_QWORD *)this + 24 * a2);
}

char *DFileChecksums::getSubFileName(DFileChecksums *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)this + 24 * a2;
  if (*(_DWORD *)(v2 + 16))
    return *(char **)(v2 + 8);
  else
    return &byte_209A88803;
}

uint64_t writeObject<DFileChecksumBucket>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  int v10;

  v10 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v10, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (int *)(*(_QWORD *)a2 + v7);
      writeObject(a1, v9, a3);
      result = writeObject(a1, (uint64_t)(v9 + 2), a3);
      ++v8;
      v7 += 24;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void readObject<DFileChecksumBucket>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  unsigned int v16;

  v16 = 0;
  readObject((uint64_t)a1, &v16, a3);
  v6 = v16;
  v7 = *(_DWORD *)(a2 + 12);
  if (v16 > v7)
    DgnArray<CWIDAC>::reallocElts(a2, v16 - v7, 0);
  v8 = *(_DWORD *)(a2 + 8);
  v9 = (int)v8;
  if (v6 >= v8)
  {
    if (v6 > v8)
    {
      v11 = v6 - v8;
      v12 = 24 * v8 + 8;
      do
      {
        DgnString::DgnString((DgnString *)(*(_QWORD *)a2 + v12));
        v12 += 24;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    v10 = 24 * (int)v8 - 16;
    do
    {
      --v9;
      DgnString::~DgnString((DgnString *)(*(_QWORD *)a2 + v10));
      v10 -= 24;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if (v6)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_DWORD *)(*(_QWORD *)a2 + v13);
      readObject((uint64_t)a1, v15, a3);
      readObject(a1, (DgnString *)(v15 + 2), a3);
      ++v14;
      v13 += 24;
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
}

uint64_t readObject(DgnStream *a1, DFileChecksums *a2, unsigned int *a3)
{
  readObject<DFileChecksumBucket>(a1, (uint64_t)a2, a3);
  return readObject((uint64_t)a1, (_DWORD *)a2 + 4, a3);
}

_QWORD *DgnArray<DFileChecksumBucket>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 24 * v2 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*(_QWORD *)a1 + v3));
      v3 -= 24;
    }
    while (v3 != -16);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void DgnArray<DFileChecksumBucket>::copyArraySlice(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= 1)
  {
    v9 = 24 * v8 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*(_QWORD *)a1 + v9));
      v9 -= 24;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 12);
  if (a4 <= v10)
  {
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_14;
  }
  else
  {
    DgnArray<CWIDAC>::reallocElts(a1, a4 - v10, 0);
    v11 = *(_DWORD *)(a1 + 8);
  }
  v13 = 0;
  v12 = v11;
  do
  {
    DFileChecksumBucket::DFileChecksumBucket((_DWORD *)(*(_QWORD *)a1 + 24 * v12), (_DWORD *)(*a2 + 24 * (a3 + v13)));
    v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      v14 = (int)v12;
      v15 = 24 * (int)v12 - 16;
      do
      {
        --v14;
        DgnString::~DgnString((DgnString *)(*(_QWORD *)a1 + v15));
        v15 -= 24;
      }
      while (v14 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  v16 = a4 - v12;
  if (a4 > v12)
  {
    v17 = 24 * v12 + 8;
    do
    {
      DgnString::DgnString((DgnString *)(*(_QWORD *)a1 + v17));
      v17 += 24;
      --v16;
    }
    while (v16);
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = a4;
}

void throwDecodeSuccessorOverflow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/huffutil.cpp", 44, (uint64_t)"fileutil/huffutil", 1, (uint64_t)"%s", a7, a8, (char)&errStr_fileutil_huffutil_E_DECODE_SUCCESSOR_OVERFLOW);
}

void throwDecodeEndOfData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/huffutil.cpp", 50, (uint64_t)"fileutil/huffutil", 2, (uint64_t)"%s", a7, a8, (char)&errStr_fileutil_huffutil_E_DECODE_END_OF_DATA);
}

void throwTableCodeLimitExceeded(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/huffutil.cpp", 56, (uint64_t)"fileutil/huffutil", 3, (uint64_t)&errStr_fileutil_huffutil_E_TABLE_CODE_LIMIT_EXCEEDED, a7, a8, a1);
}

void throwTableGenerationFailed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/huffutil.cpp", 62, (uint64_t)"fileutil/huffutil", 4, (uint64_t)"%s", a7, a8, (char)&errStr_fileutil_huffutil_E_TABLE_GENERATION_FAILED);
}

void throwEncodeUnknownSymbol(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/huffutil.cpp", 68, (uint64_t)"fileutil/huffutil", 5, (uint64_t)&errStr_fileutil_huffutil_E_ENCODE_UNKNOWN_SYMBOL, a7, a8, a1);
}

unint64_t HuffmanEncoder<unsigned short,unsigned int>::sortElements(uint64_t a1)
{
  return mrec_qsort_r<EncodeBuildAlphabetCountsUns16Cmp>(*(_QWORD *)(a1 + 120), *(unsigned int *)(a1 + 128), 8);
}

unint64_t mrec_qsort_r<EncodeBuildAlphabetCountsUns16Cmp>(unint64_t result, unint64_t a2, int64_t a3)
{
  int64_t v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  BOOL v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  char *v74;
  char v75;
  int v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _BYTE *v80;
  _QWORD *v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  BOOL v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  BOOL v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int64_t v106;
  unint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char v114;
  BOOL v115;
  int64_t v116;
  unint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  BOOL v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char v135;

  v4 = -a3;
  v5 = a3 != 8;
  v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0)
    v7 = 2;
  else
    v7 = a3 != 8;
  if (a2 < 7)
  {
LABEL_5:
    if ((uint64_t)(a2 * a3) > a3)
    {
      v8 = result + a2 * a3;
      v9 = result + a3;
      v10 = result;
      do
      {
        if (v9 > result)
        {
          v11 = v10;
          v12 = v9;
          do
          {
            v13 = v12;
            v12 += v4;
            v14 = *(_QWORD *)v12;
            v15 = *(_QWORD *)v13;
            v16 = *(_DWORD *)(*(_QWORD *)v12 + 4);
            v17 = *(_DWORD *)(*(_QWORD *)v13 + 4);
            v18 = v16 > v17;
            if (v16 == v17)
              v18 = *(unsigned __int16 *)(v14 + 8) > *(unsigned __int16 *)(v15 + 8);
            if (!v18)
              break;
            if (v7)
            {
              v19 = 0;
              v20 = v11 + a3;
              if (v6)
              {
                do
                {
                  v21 = *(_QWORD *)(v20 + 8 * v19);
                  *(_QWORD *)(v20 + 8 * v19) = *(_QWORD *)(v11 + 8 * v19);
                  *(_QWORD *)(v11 + 8 * v19++) = v21;
                }
                while ((unint64_t)a3 >> 3 != v19);
              }
              else
              {
                do
                {
                  v22 = *(_BYTE *)(v20 + v19);
                  *(_BYTE *)(v20 + v19) = *(_BYTE *)(v11 + v19);
                  *(_BYTE *)(v11 + v19++) = v22;
                }
                while (a3 != v19);
              }
            }
            else
            {
              *(_QWORD *)v13 = v14;
              *(_QWORD *)v12 = v15;
            }
            v11 += v4;
          }
          while (v12 > result);
        }
        v9 += a3;
        v10 += a3;
      }
      while (v9 < v8);
    }
    return result;
  }
  v23 = (unint64_t)a3 >> 3;
  while (2)
  {
    v24 = (_BYTE *)(result + (a2 >> 1) * a3);
    if (a2 == 7)
      goto LABEL_106;
    v25 = result + (a2 - 1) * a3;
    if (a2 < 0x29)
    {
      v27 = (_BYTE *)result;
      goto LABEL_35;
    }
    v26 = (a2 >> 3) * a3;
    v27 = (_BYTE *)(result + v26);
    v28 = result + 2 * v26;
    v29 = *(_QWORD *)result;
    v30 = *(_QWORD *)(result + v26);
    v31 = *(_DWORD *)(*(_QWORD *)result + 4);
    v32 = *(_DWORD *)(v30 + 4);
    if (v31 == v32)
    {
      if (*(unsigned __int16 *)(v29 + 8) >= *(unsigned __int16 *)(v30 + 8))
        goto LABEL_28;
LABEL_37:
      v37 = *(_QWORD *)v28;
      v38 = *(_DWORD *)(*(_QWORD *)v28 + 4);
      if (v32 == v38)
      {
        if (*(unsigned __int16 *)(v30 + 8) < *(unsigned __int16 *)(v37 + 8))
          goto LABEL_48;
      }
      else if (v32 <= v38)
      {
        goto LABEL_48;
      }
      if (v31 == v38)
      {
        v27 = (_BYTE *)(result + 2 * v26);
        if (*(unsigned __int16 *)(v29 + 8) < *(unsigned __int16 *)(v37 + 8))
          goto LABEL_48;
      }
      else
      {
        v27 = (_BYTE *)(result + 2 * v26);
        if (v31 <= v38)
          goto LABEL_48;
      }
      v27 = (_BYTE *)result;
      goto LABEL_48;
    }
    if (v31 <= v32)
      goto LABEL_37;
LABEL_28:
    v33 = *(_QWORD *)v28;
    v34 = *(_DWORD *)(*(_QWORD *)v28 + 4);
    v35 = v32 > v34;
    if (v32 == v34)
      v35 = *(unsigned __int16 *)(v30 + 8) > *(unsigned __int16 *)(v33 + 8);
    if (!v35)
    {
      if (v31 == v34)
      {
        v27 = (_BYTE *)result;
        if (*(unsigned __int16 *)(v29 + 8) < *(unsigned __int16 *)(v33 + 8))
          goto LABEL_48;
      }
      else
      {
        v27 = (_BYTE *)result;
        if (v31 <= v34)
          goto LABEL_48;
      }
      v27 = (_BYTE *)(result + 2 * v26);
    }
LABEL_48:
    v39 = &v24[-v26];
    v40 = &v24[v26];
    v41 = *(_QWORD *)&v24[-v26];
    v42 = *(_QWORD *)v24;
    v43 = *(_DWORD *)(v41 + 4);
    v44 = *(_DWORD *)(*(_QWORD *)v24 + 4);
    if (v43 == v44)
    {
      if (*(unsigned __int16 *)(v41 + 8) >= *(unsigned __int16 *)(v42 + 8))
        goto LABEL_50;
LABEL_57:
      v48 = *(_QWORD *)v40;
      v49 = *(_DWORD *)(*(_QWORD *)v40 + 4);
      if (v44 == v49)
      {
        if (*(unsigned __int16 *)(v42 + 8) < *(unsigned __int16 *)(v48 + 8))
          goto LABEL_68;
      }
      else if (v44 <= v49)
      {
        goto LABEL_68;
      }
      if (v43 == v49)
      {
        v24 += v26;
        if (*(unsigned __int16 *)(v41 + 8) < *(unsigned __int16 *)(v48 + 8))
          goto LABEL_68;
      }
      else
      {
        v24 += v26;
        if (v43 <= v49)
          goto LABEL_68;
      }
      v24 = v39;
      goto LABEL_68;
    }
    if (v43 <= v44)
      goto LABEL_57;
LABEL_50:
    v45 = *(_QWORD *)v40;
    v46 = *(_DWORD *)(*(_QWORD *)v40 + 4);
    v47 = v44 > v46;
    if (v44 == v46)
      v47 = *(unsigned __int16 *)(v42 + 8) > *(unsigned __int16 *)(v45 + 8);
    if (!v47)
    {
      if (v43 == v46)
      {
        v24 -= v26;
        if (*(unsigned __int16 *)(v41 + 8) < *(unsigned __int16 *)(v45 + 8))
          goto LABEL_68;
      }
      else
      {
        v24 -= v26;
        if (v43 <= v46)
          goto LABEL_68;
      }
      v24 = v40;
    }
LABEL_68:
    v50 = -(uint64_t)v26;
    v36 = (_BYTE *)(v25 - 2 * v26);
    v51 = (_BYTE *)(v25 + v50);
    v52 = *(_QWORD *)v36;
    v53 = *(_QWORD *)v51;
    v54 = *(_DWORD *)(*(_QWORD *)v36 + 4);
    v55 = *(_DWORD *)(*(_QWORD *)v51 + 4);
    if (v54 == v55)
    {
      if (*(unsigned __int16 *)(v52 + 8) >= *(unsigned __int16 *)(v53 + 8))
        goto LABEL_70;
LABEL_74:
      v58 = *(_QWORD *)v25;
      v59 = *(_DWORD *)(*(_QWORD *)v25 + 4);
      if (v55 == v59)
      {
        if (*(unsigned __int16 *)(v53 + 8) < *(unsigned __int16 *)(v58 + 8))
          goto LABEL_85;
      }
      else if (v55 <= v59)
      {
        goto LABEL_85;
      }
      if (v54 == v59)
      {
        if (*(unsigned __int16 *)(v52 + 8) < *(unsigned __int16 *)(v58 + 8))
          goto LABEL_35;
      }
      else if (v54 <= v59)
      {
        goto LABEL_35;
      }
      goto LABEL_86;
    }
    if (v54 <= v55)
      goto LABEL_74;
LABEL_70:
    v56 = *(_QWORD *)v25;
    v57 = *(_DWORD *)(*(_QWORD *)v25 + 4);
    if (v55 == v57)
    {
      if (*(unsigned __int16 *)(v53 + 8) > *(unsigned __int16 *)(v56 + 8))
        goto LABEL_85;
      goto LABEL_78;
    }
    if (v55 > v57)
    {
LABEL_85:
      v36 = v51;
      goto LABEL_86;
    }
LABEL_78:
    if (v54 == v57)
    {
      if (*(unsigned __int16 *)(v52 + 8) < *(unsigned __int16 *)(v56 + 8))
        goto LABEL_86;
LABEL_35:
      v36 = (_BYTE *)(result + (a2 - 1) * a3);
      goto LABEL_86;
    }
    if (v54 > v57)
      goto LABEL_35;
LABEL_86:
    v60 = *(_QWORD *)v27;
    v61 = *(_QWORD *)v24;
    v62 = *(_DWORD *)(*(_QWORD *)v27 + 4);
    v63 = *(_DWORD *)(*(_QWORD *)v24 + 4);
    if (v62 != v63)
    {
      if (v62 > v63)
        goto LABEL_88;
LABEL_95:
      v67 = *(_QWORD *)v36;
      v68 = *(_DWORD *)(*(_QWORD *)v36 + 4);
      if (v63 == v68)
      {
        if (*(unsigned __int16 *)(v61 + 8) < *(unsigned __int16 *)(v67 + 8))
          goto LABEL_106;
      }
      else if (v63 <= v68)
      {
        goto LABEL_106;
      }
      if (v62 == v68)
      {
        v24 = v36;
        if (*(unsigned __int16 *)(v60 + 8) < *(unsigned __int16 *)(v67 + 8))
          goto LABEL_106;
      }
      else
      {
        v24 = v36;
        if (v62 <= v68)
          goto LABEL_106;
      }
      v24 = v27;
      goto LABEL_106;
    }
    if (*(unsigned __int16 *)(v60 + 8) < *(unsigned __int16 *)(v61 + 8))
      goto LABEL_95;
LABEL_88:
    v64 = *(_QWORD *)v36;
    v65 = *(_DWORD *)(*(_QWORD *)v36 + 4);
    v66 = v63 > v65;
    if (v63 == v65)
      v66 = *(unsigned __int16 *)(v61 + 8) > *(unsigned __int16 *)(v64 + 8);
    if (v66)
      goto LABEL_106;
    if (v62 == v65)
    {
      v24 = v27;
      if (*(unsigned __int16 *)(v60 + 8) < *(unsigned __int16 *)(v64 + 8))
        goto LABEL_106;
      goto LABEL_103;
    }
    v24 = v27;
    if (v62 > v65)
LABEL_103:
      v24 = v36;
LABEL_106:
    if (v7)
    {
      if (v6)
      {
        v69 = (uint64_t *)result;
        v70 = (unint64_t)a3 >> 3;
        do
        {
          v71 = *v69;
          *v69++ = *(_QWORD *)v24;
          *(_QWORD *)v24 = v71;
          v24 += 8;
          --v70;
        }
        while (v70);
      }
      else
      {
        v73 = a3;
        v74 = (char *)result;
        do
        {
          v75 = *v74;
          *v74++ = *v24;
          *v24++ = v75;
          --v73;
        }
        while (v73);
      }
    }
    else
    {
      v72 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)v24;
      *(_QWORD *)v24 = v72;
    }
    v76 = 0;
    v77 = result + a3;
    v78 = (_QWORD *)(result + (a2 - 1) * a3);
    v79 = v78;
    v80 = (_BYTE *)(result + a3);
    v81 = (_QWORD *)(result + a3);
    while (1)
    {
LABEL_115:
      if (v80 > (_BYTE *)v79)
        goto LABEL_130;
      v82 = *(_QWORD *)v80;
      v83 = *(_DWORD *)(*(_QWORD *)v80 + 4);
      v84 = *(_DWORD *)(*(_QWORD *)result + 4);
      v85 = v83 > v84;
      if (v83 != v84)
        break;
      v86 = *(unsigned __int16 *)(v82 + 8);
      v87 = *(unsigned __int16 *)(*(_QWORD *)result + 8);
      v85 = v86 > v87;
      if (v86 != v87)
        break;
      if (v7)
      {
        v88 = 0;
        if (v6)
        {
          do
          {
            v89 = v81[v88];
            v81[v88] = *(_QWORD *)&v80[8 * v88];
            *(_QWORD *)&v80[8 * v88++] = v89;
          }
          while (v23 != v88);
        }
        else
        {
          do
          {
            v90 = *((_BYTE *)v81 + v88);
            *((_BYTE *)v81 + v88) = v80[v88];
            v80[v88++] = v90;
          }
          while (a3 != v88);
        }
      }
      else
      {
        v103 = *v81;
        *v81 = v82;
        *(_QWORD *)v80 = v103;
      }
      v81 = (_QWORD *)((char *)v81 + a3);
      v76 = 1;
LABEL_148:
      v80 += a3;
    }
    if (!v85)
      goto LABEL_148;
LABEL_130:
    while (v80 <= (_BYTE *)v79)
    {
      v91 = *v79;
      v92 = *(_DWORD *)(*v79 + 4);
      v93 = *(_DWORD *)(*(_QWORD *)result + 4);
      v94 = v92 > v93;
      if (v92 == v93
        && (v95 = *(unsigned __int16 *)(v91 + 8),
            v96 = *(unsigned __int16 *)(*(_QWORD *)result + 8),
            v94 = v95 > v96,
            v95 == v96))
      {
        if (v7)
        {
          v97 = 0;
          if (v6)
          {
            do
            {
              v98 = v79[v97];
              v79[v97] = v78[v97];
              v78[v97++] = v98;
            }
            while (v23 != v97);
          }
          else
          {
            do
            {
              v99 = *((_BYTE *)v79 + v97);
              *((_BYTE *)v79 + v97) = *((_BYTE *)v78 + v97);
              *((_BYTE *)v78 + v97++) = v99;
            }
            while (a3 != v97);
          }
        }
        else
        {
          *v79 = *v78;
          *v78 = v91;
        }
        v78 = (_QWORD *)((char *)v78 + v4);
        v76 = 1;
      }
      else if (!v94)
      {
        if (v7)
        {
          v100 = 0;
          if (v6)
          {
            do
            {
              v101 = *(_QWORD *)&v80[8 * v100];
              *(_QWORD *)&v80[8 * v100] = v79[v100];
              v79[v100++] = v101;
            }
            while (v23 != v100);
          }
          else
          {
            do
            {
              v102 = v80[v100];
              v80[v100] = *((_BYTE *)v79 + v100);
              *((_BYTE *)v79 + v100++) = v102;
            }
            while (a3 != v100);
          }
        }
        else
        {
          v104 = *(_QWORD *)v80;
          *(_QWORD *)v80 = v91;
          *v79 = v104;
        }
        v80 += a3;
        v79 = (_QWORD *)((char *)v79 + v4);
        v76 = 1;
        goto LABEL_115;
      }
      v79 = (_QWORD *)((char *)v79 + v4);
    }
    v105 = result + a2 * a3;
    if (v76)
    {
      v106 = v80 - (_BYTE *)v81;
      if ((uint64_t)((uint64_t)v81 - result) >= v80 - (_BYTE *)v81)
        v107 = v80 - (_BYTE *)v81;
      else
        v107 = (unint64_t)v81 - result;
      if (v107)
      {
        if (v6)
        {
          v108 = (uint64_t *)&v80[-v107];
          v109 = v107 >> 3;
          v110 = (uint64_t *)result;
          do
          {
            v111 = *v110;
            *v110++ = *v108;
            *v108++ = v111;
            --v109;
          }
          while (v109);
        }
        else
        {
          v112 = -(uint64_t)v107;
          v113 = (char *)result;
          do
          {
            v114 = *v113;
            *v113++ = v80[v112];
            v80[v112] = v114;
            v115 = __CFADD__(v112++, 1);
          }
          while (!v115);
        }
      }
      v116 = (char *)v78 - (char *)v79;
      v117 = v105 - ((_QWORD)v78 + a3);
      if ((char *)v78 - (char *)v79 < (uint64_t)v117)
        v117 = (char *)v78 - (char *)v79;
      if (v117)
      {
        if (v6)
        {
          v118 = (_QWORD *)(v105 - v117);
          v119 = v117 >> 3;
          do
          {
            v120 = *(_QWORD *)v80;
            *(_QWORD *)v80 = *v118;
            v80 += 8;
            *v118++ = v120;
            --v119;
          }
          while (v119);
        }
        else
        {
          v121 = -(uint64_t)v117;
          do
          {
            v122 = *v80;
            *v80++ = *(_BYTE *)(v105 + v121);
            *(_BYTE *)(v105 + v121) = v122;
            v115 = __CFADD__(v121++, 1);
          }
          while (!v115);
        }
      }
      if (v106 > a3)
        result = mrec_qsort_r<EncodeBuildAlphabetCountsUns16Cmp>();
      if (v116 > a3)
      {
        result = v105 - v116;
        a2 = v116 / (unint64_t)a3;
        v6 = (((v105 - v116) | a3) & 7) == 0;
        if ((((v105 - v116) | a3) & 7) != 0)
          v7 = 2;
        else
          v7 = v5;
        if (a2 < 7)
          goto LABEL_5;
        continue;
      }
    }
    else if ((uint64_t)(a2 * a3) > a3)
    {
      v123 = result;
      do
      {
        if (v77 > result)
        {
          v124 = v123;
          v125 = v77;
          do
          {
            v126 = v125;
            v125 += v4;
            v127 = *(_QWORD *)v125;
            v128 = *(_QWORD *)v126;
            v129 = *(_DWORD *)(*(_QWORD *)v125 + 4);
            v130 = *(_DWORD *)(*(_QWORD *)v126 + 4);
            v131 = v129 > v130;
            if (v129 == v130)
              v131 = *(unsigned __int16 *)(v127 + 8) > *(unsigned __int16 *)(v128 + 8);
            if (!v131)
              break;
            if (v7)
            {
              v132 = 0;
              v133 = v124 + a3;
              if (v6)
              {
                do
                {
                  v134 = *(_QWORD *)(v133 + 8 * v132);
                  *(_QWORD *)(v133 + 8 * v132) = *(_QWORD *)(v124 + 8 * v132);
                  *(_QWORD *)(v124 + 8 * v132++) = v134;
                }
                while (v23 != v132);
              }
              else
              {
                do
                {
                  v135 = *(_BYTE *)(v133 + v132);
                  *(_BYTE *)(v133 + v132) = *(_BYTE *)(v124 + v132);
                  *(_BYTE *)(v124 + v132++) = v135;
                }
                while (a3 != v132);
              }
            }
            else
            {
              *(_QWORD *)v126 = v127;
              *(_QWORD *)v125 = v128;
            }
            v124 += v4;
          }
          while (v125 > result);
        }
        v77 += a3;
        v123 += a3;
      }
      while (v77 < v105);
    }
    return result;
  }
}

void ForwardLatticeNodeIterator<WordLatticeLC>::next(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = (uint64_t)(a1 + 3);
  v3 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::dequeue((uint64_t)(a1 + 3));
  v4 = *a1;
  v5 = *(unsigned int *)(*(_QWORD *)(*a1 + 80) + 24 * *(unsigned int *)(*(_QWORD *)(*a1 + 16) + 4 * v3) + 20);
  if ((_DWORD)v5 != -2)
  {
    v6 = *(_QWORD *)(v4 + 128);
    do
    {
      v7 = *(unsigned int *)(*(_QWORD *)(v4 + 80) + 24 * *(unsigned int *)(v6 + 136 * v5 + 120));
      v8 = a1[1];
      v9 = *(_DWORD *)(v8 + 4 * v7) - 1;
      *(_DWORD *)(v8 + 4 * v7) = v9;
      if (!v9)
      {
        DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue(v2, v7);
        v4 = *a1;
        v6 = *(_QWORD *)(*a1 + 128);
      }
      v5 = *(unsigned int *)(v6 + 136 * v5 + 128);
    }
    while ((_DWORD)v5 != -2);
  }
}

void WordLattice::~WordLattice(WordLattice *this)
{
  char *v2;

  *(_QWORD *)this = off_24C213D08;
  v2 = (char *)this + 224;
  DgnString::~DgnString((WordLattice *)((char *)this + 272));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  Lattice<WordLatticeLC>::~Lattice(this);
}

{
  WordLattice::~WordLattice(this);
  JUMPOUT(0x20BD149A8);
}

_QWORD *Lattice<WordLatticeLC>::~Lattice(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C219198;
  v2 = (uint64_t)(a1 + 16);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 22));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 20));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 18));
  DgnArray<LatticeLink<WordLatticeLC>>::releaseAll(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 14));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 12));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(a1 + 10));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 8));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 6));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 4));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 2));
  return a1;
}

_QWORD *DgnArray<LatticeLink<WordLatticeLC>>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 136 * v2 - 136;
    do
    {
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a1 + v3));
      v3 -= 136;
    }
    while (v3 != -136);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t ForwardLatticeNodeIterator<WordLatticeLC>::ForwardLatticeNodeIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = 0;
    *(_QWORD *)(a1 + 8) = MemChunkAlloc(4 * v4, 0);
    *(_DWORD *)(a1 + 16) = v4;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
      v7 = *(_QWORD *)(*(_QWORD *)a1 + 80);
      v8 = *(_DWORD *)(v7 + 24 * *(unsigned int *)(v6 + 4 * v5) + 8);
      *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v5) = v8;
      if (!v8)
        DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue(v3, *(_DWORD *)(v7 + 24 * *(unsigned int *)(v6 + 4 * v5)));
      ++v5;
    }
    while (v5 < *(unsigned int *)(a1 + 16));
  }
  return a1;
}

void sub_20995E088(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v1);
  _Unwind_Resume(a1);
}

void MrecInitModule_lexnet_prefilt(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;

  if (!gParDebugShowPrefiltererStats)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowPrefiltererStats", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowPrefiltererStats = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPrefiltererStats);
  }
  if (!gParDebugPrefiltererProcessing)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugPrefiltererProcessing", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugPrefiltererProcessing = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPrefiltererProcessing);
  }
  if (!gParDebugShowPrefiltererBestActiveSeqs)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugShowPrefiltererBestActiveSeqs", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugShowPrefiltererBestActiveSeqs = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPrefiltererBestActiveSeqs);
  }
  if (!gParDebugShowPrefiltererEarliestTheory)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugShowPrefiltererEarliestTheory", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDebugShowPrefiltererEarliestTheory = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPrefiltererEarliestTheory);
  }
}

void HmmDurationPenalties::initDurationsLookups(HmmDurationPenalties *this, double a2)
{
  long double v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  long double v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  double v18;

  *((double *)this + 1) = a2;
  if (a2 <= 0.0)
  {
    *((_DWORD *)this + 4) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    *((_DWORD *)this + 4) = 25;
    v3 = DgnExp(-25.5 / a2);
    *((long double *)this + 3) = 1.0 / (1.0 - v3);
    *((long double *)this + 4) = 1.0 / v3;
    v4 = *((unsigned int *)this + 4);
    v5 = v4 + 1;
    v6 = *((_DWORD *)this + 13);
    if ((int)v4 + 1 > v6)
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 40, (_DWORD)v4 + 1 - v6, 0);
    *((_DWORD *)this + 12) = v5;
    v7 = *((_DWORD *)this + 17);
    if (v5 > v7)
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 56, v5 - v7, 0);
    *((_DWORD *)this + 16) = v5;
    if (v4 <= 0x7FFFFFFE)
    {
      v8 = v4 + 2;
      v9 = v4;
      do
      {
        v10 = DgnExp(-((double)v9 + 0.5) / *((double *)this + 1));
        *(long double *)(*((_QWORD *)this + 5) + 8 * v9) = 1.0 / v10;
        *(long double *)(*((_QWORD *)this + 7) + 8 * v9) = 1.0 / (1.0 - v10);
        --v8;
        --v9;
      }
      while (v8 > 1);
    }
    v11 = *((_DWORD *)this + 21);
    if (v5 > v11)
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 72, v5 - v11, 0);
    *((_DWORD *)this + 20) = v5;
    if (v4 <= 0x7FFFFFFE)
    {
      v12 = 0;
      v13 = *((_QWORD *)this + 5);
      v14 = *((_QWORD *)this + 9);
      do
      {
        v15 = v12;
        v16 = *((_DWORD *)this + 12);
        if (v16 <= v15 + 1)
          v16 = v15 + 1;
        v12 = v16 - 1;
        while (v12 != v15)
        {
          v17 = v15 + 1;
          v18 = *(double *)(*((_QWORD *)this + 7) + 8 * v15++);
          if (*(double *)(v13 + 8 * v4) >= v18)
          {
            v12 = v17 - 1;
            break;
          }
        }
        *(_DWORD *)(v14 + 4 * v4) = v12;
      }
      while ((int)v4-- > 0);
    }
  }
  *(_BYTE *)this = 1;
}

uint64_t HmmDurationPenalties::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sizeObject<unsigned long long>(a1 + 40, a2);
  v5 = sizeObject<unsigned long long>(a1 + 56, a2);
  v6 = sizeObject<unsigned int>(a1 + 72, a2);
  v7 = 24;
  if (a2 == 3)
    v7 = 0;
  return (v7 | (a2 != 3) | (4 * (a2 != 3))) + v4 + v5 + v6;
}

uint64_t PrefStats::sizeObject(uint64_t a1, int a2)
{
  if (a2 == 3)
    return 0;
  else
    return 72;
}

double PrefStats::resetStats(PrefStats *this)
{
  double result;

  *(_DWORD *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  return result;
}

__n128 PrefStats::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return result;
}

int32x4_t PrefStats::operator-=(uint64_t a1, uint64_t a2)
{
  int32x4_t result;

  *(_DWORD *)a1 -= *(_DWORD *)a2;
  *(int64x2_t *)(a1 + 8) = vsubq_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(a2 + 8));
  *(int64x2_t *)(a1 + 24) = vsubq_s64(*(int64x2_t *)(a1 + 24), *(int64x2_t *)(a2 + 24));
  *(int64x2_t *)(a1 + 40) = vsubq_s64(*(int64x2_t *)(a1 + 40), *(int64x2_t *)(a2 + 40));
  result = vsubq_s32(*(int32x4_t *)(a1 + 56), *(int32x4_t *)(a2 + 56));
  *(int32x4_t *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 72) -= *(_DWORD *)(a2 + 72);
  return result;
}

void LexTreeNetScorer::LexTreeNetScorer(LexTreeNetScorer *this)
{
  char *v2;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int i;

  *((_BYTE *)this + 64) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = (char *)this + 151340;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_QWORD *)((char *)this + 220) = 0xF0000000FLL;
  *((_DWORD *)this + 57) = 0;
  *((_OWORD *)this + 9461) = 0u;
  v3 = (char *)this + 151376;
  *((_OWORD *)this + 9469) = 0u;
  *((_OWORD *)this + 9462) = 0u;
  *((_OWORD *)this + 9463) = 0u;
  *((_OWORD *)this + 9464) = 0u;
  *((_OWORD *)this + 9465) = 0u;
  *((_OWORD *)this + 9466) = 0u;
  ReturnListMgr::ReturnListMgr((LexTreeNetScorer *)((char *)this + 151520));
  *((_OWORD *)this + 9489) = 0u;
  *((_OWORD *)this + 9488) = 0u;
  *((_OWORD *)this + 9487) = 0u;
  *((_OWORD *)this + 9486) = 0u;
  *((_OWORD *)this + 9485) = 0u;
  *((_OWORD *)this + 9484) = 0u;
  *((_OWORD *)this + 9483) = 0u;
  *((_OWORD *)this + 9482) = 0u;
  PelStats::resetStats((LexTreeNetScorer *)((char *)this + 151672));
  *((_DWORD *)this + 37962) = 0;
  *((_OWORD *)this + 9491) = 0u;
  *((_OWORD *)this + 9492) = 0u;
  *((_OWORD *)this + 9493) = 0u;
  *((_OWORD *)this + 9494) = 0u;
  *((_DWORD *)this + 37980) = 0;
  *((_OWORD *)this + 9498) = 0u;
  *((_OWORD *)this + 9499) = 0u;
  *((_OWORD *)this + 9500) = 0u;
  *((_OWORD *)this + 9501) = 0u;
  *((_OWORD *)this + 9502) = 0u;
  *((_OWORD *)this + 9503) = 0u;
  *((_OWORD *)this + 9504) = 0u;
  *((_OWORD *)this + 9505) = 0u;
  PelStats::resetStats((LexTreeNetScorer *)((char *)this + 151928));
  *((_DWORD *)this + 38026) = 0;
  *((_OWORD *)this + 9507) = 0u;
  *((_OWORD *)this + 9508) = 0u;
  *((_OWORD *)this + 9509) = 0u;
  *((_OWORD *)this + 9510) = 0u;
  *((_DWORD *)this + 38044) = 0;
  v2[300] = 0;
  *((_QWORD *)this + 18956) = 0;
  *(_OWORD *)((char *)this + 151656) = 0u;
  *((_DWORD *)v2 + 3) = -1;
  *((_OWORD *)this + 9460) = 0u;
  v4 = *((_DWORD *)v2 + 11);
  if (v4 == *((_DWORD *)v2 + 12))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v3, 1, 1);
    v4 = *((_DWORD *)v2 + 11);
  }
  v5 = *(_QWORD *)(v2 + 36);
  *(_DWORD *)(v5 + 4 * v4) = 0;
  v6 = *((_DWORD *)v2 + 11) + 1;
  *((_DWORD *)v2 + 11) = v6;
  for (i = 35; i != 2585; i += 10)
  {
    if (v6 == *((_DWORD *)v2 + 12))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v3, 1, 1);
      v6 = *((_DWORD *)v2 + 11);
      v5 = *(_QWORD *)(v2 + 36);
    }
    *(_DWORD *)(v5 + 4 * v6) = i & 0x7FFFFFFC;
    v6 = *((_DWORD *)v2 + 11) + 1;
    *((_DWORD *)v2 + 11) = v6;
  }
  *((_DWORD *)v2 + 33) = 0;
  *(_QWORD *)(v2 + 140) = 0;
  v2[148] = 0;
  *(_QWORD *)(v2 + 156) = 0;
  *((_DWORD *)this + 55) = 0;
  *((_DWORD *)this + 56) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_QWORD *)this + 30) = 0xFFFF00000000;
  *((_WORD *)this + 126) = -1;
  *((_QWORD *)this + 32) = 0x4E2000000000;
  bzero((char *)this + 264, 0x24E24uLL);
  *(_QWORD *)v2 = 20000;
  *((_DWORD *)v2 + 2) = 0;
  *((_WORD *)this + 16) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
}

void sub_20995E7B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  HmmDurationPenalties *v2;
  uint64_t v3;
  uint64_t v4;
  ReturnListMgr *v5;

  ReturnListMgr::~ReturnListMgr(v5);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 151456);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 151440);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v1 + 151424);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v1 + 151408);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 151392);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 152);
  HmmDurationPenalties::~HmmDurationPenalties(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void HmmDurationPenalties::~HmmDurationPenalties(HmmDurationPenalties *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40);
}

void LexTreeNetScorer::~LexTreeNetScorer(LexTreeNetScorer *this)
{
  ReturnListMgr::~ReturnListMgr((LexTreeNetScorer *)((char *)this + 151520));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 151504);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 151456);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 151440);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 151424);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 151408);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 151392);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 151376);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this);
}

void LexTreeNetScorer::printSize(LexTreeNetScorer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  LexTreeNetScorer *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  char *v376;
  uint64_t v377;
  unsigned int *v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  uint64_t v382;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 600, (DgnString *)&v381);
  if ((_DWORD)v382)
    v16 = (char *)v381;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v381);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 16;
  v22 = *((unsigned int *)this + 2);
  v23 = *((_DWORD *)this + 3);
  v24 = v21 + 4 * (v22 - 1) + 4;
  if ((int)v22 <= 0)
    v24 = v21;
  if (v23 >= v22)
    v25 = v24;
  else
    v25 = v21;
  if (v23 >= v22)
    v26 = v24 + 4 * (v23 - v22);
  else
    v26 = v21;
  v27 = this;
  if (v23 >= v22)
    v28 = 0;
  else
    v28 = 4 * v22;
  v29 = (a3 + 1);
  v377 = a3;
  v30 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 601, (DgnString *)&v381);
  if ((_DWORD)v382)
    v35 = (char *)v381;
  else
    v35 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, v29, &byte_209A88803, v30, v30, v35, v26, v25, v28);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v26;
  *a5 += v25;
  *a6 += v28;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v36 = 12;
  else
    v36 = 16;
  v37 = *((unsigned int *)v27 + 6);
  v38 = *((_DWORD *)v27 + 7);
  v39 = (unsigned int *)v27;
  if (v38 >= v37)
  {
    v40 = 0;
    if ((int)v37 > 0)
      v36 += 4 * (v37 - 1) + 4;
    v41 = v36 + 4 * (v38 - v37);
  }
  else
  {
    v40 = 4 * v37;
    v41 = v36;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 603, (DgnString *)&v381);
  if ((_DWORD)v382)
    v46 = (char *)v381;
  else
    v46 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v29, &byte_209A88803, v30, v30, v46, v41, v36, v40);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v41;
  *a5 += v36;
  *a6 += v40;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 605, (DgnString *)&v381);
  if ((_DWORD)v382)
    v51 = (char *)v381;
  else
    v51 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, v29, &byte_209A88803, v30, v30, v51, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v381);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 607, (DgnString *)&v381);
  if ((_DWORD)v382)
    v56 = (char *)v381;
  else
    v56 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v29, &byte_209A88803, v30, v30, v56, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v381);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 609, (DgnString *)&v381);
  if ((_DWORD)v382)
    v61 = (char *)v381;
  else
    v61 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, v29, &byte_209A88803, v30, v30, v61, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 610, (DgnString *)&v381);
  if ((_DWORD)v382)
    v66 = (char *)v381;
  else
    v66 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v29, &byte_209A88803, v30, v30, v66, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 612, (DgnString *)&v381);
  if ((_DWORD)v382)
    v71 = (char *)v381;
  else
    v71 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v29, &byte_209A88803, v30, v30, v71, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 614, (DgnString *)&v381);
  if ((_DWORD)v382)
    v76 = (char *)v381;
  else
    v76 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v29, &byte_209A88803, v30, v30, v76, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 616, (DgnString *)&v381);
  if ((_DWORD)v382)
    v81 = (char *)v381;
  else
    v81 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v29, &byte_209A88803, v30, v30, v81, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  v82 = HmmDurationPenalties::sizeObject((uint64_t)(v39 + 16), 0);
  v83 = HmmDurationPenalties::sizeObject((uint64_t)(v39 + 16), 1);
  v84 = HmmDurationPenalties::sizeObject((uint64_t)(v39 + 16), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 617, (DgnString *)&v381);
  if ((_DWORD)v382)
    v89 = (char *)v381;
  else
    v89 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v29, &byte_209A88803, v30, v30, v89, v82, v83, v84);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v82;
  *a5 += v83;
  *a6 += v84;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v90 = 12;
  else
    v90 = 16;
  v91 = v39[40];
  v92 = v39[41];
  if (v92 >= v91)
  {
    v93 = 0;
    if ((int)v91 > 0)
      v90 += 6 * (v91 - 1) + 6;
    v94 = v90 + 6 * (v92 - v91);
  }
  else
  {
    v93 = 6 * v91;
    v94 = v90;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 619, (DgnString *)&v381);
  if ((_DWORD)v382)
    v99 = (char *)v381;
  else
    v99 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, v29, &byte_209A88803, v30, v30, v99, v94, v90, v93);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v94;
  *a5 += v90;
  *a6 += v93;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v100 = 12;
  else
    v100 = 16;
  v101 = v39[44];
  v102 = v39[45];
  if (v102 >= v101)
  {
    v103 = 0;
    if ((int)v101 > 0)
      v100 = (v100 | 2) + 2 * (v101 - 1);
    v104 = v100 + 2 * (v102 - v101);
  }
  else
  {
    v103 = 2 * v101;
    v104 = v100;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 620, (DgnString *)&v381);
  if ((_DWORD)v382)
    v109 = (char *)v381;
  else
    v109 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v105, v106, v107, v108, v29, &byte_209A88803, v30, v30, v109, v104, v100, v103);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v104;
  *a5 += v100;
  *a6 += v103;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v110 = 12;
  else
    v110 = 16;
  v111 = v39[48];
  v112 = v39[49];
  if (v112 >= v111)
  {
    v113 = 0;
    if ((int)v111 > 0)
      v110 += 4 * (v111 - 1) + 4;
    v114 = v110 + 4 * (v112 - v111);
  }
  else
  {
    v113 = 4 * v111;
    v114 = v110;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 622, (DgnString *)&v381);
  if ((_DWORD)v382)
    v119 = (char *)v381;
  else
    v119 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v29, &byte_209A88803, v30, v30, v119, v114, v110, v113);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v114;
  *a5 += v110;
  *a6 += v113;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 624, (DgnString *)&v381);
  if ((_DWORD)v382)
    v124 = (char *)v381;
  else
    v124 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v120, v121, v122, v123, v29, &byte_209A88803, v30, v30, v124, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 626, (DgnString *)&v381);
  if ((_DWORD)v382)
    v129 = (char *)v381;
  else
    v129 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v125, v126, v127, v128, v29, &byte_209A88803, v30, v30, v129, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 628, (DgnString *)&v381);
  if ((_DWORD)v382)
    v134 = (char *)v381;
  else
    v134 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v29, &byte_209A88803, v30, v30, v134, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 630, (DgnString *)&v381);
  if ((_DWORD)v382)
    v139 = (char *)v381;
  else
    v139 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v29, &byte_209A88803, v30, v30, v139, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 631, (DgnString *)&v381);
  if ((_DWORD)v382)
    v144 = (char *)v381;
  else
    v144 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v140, v141, v142, v143, v29, &byte_209A88803, v30, v30, v144, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 632, (DgnString *)&v381);
  if ((_DWORD)v382)
    v149 = (char *)v381;
  else
    v149 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v29, &byte_209A88803, v30, v30, v149, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 634, (DgnString *)&v381);
  if ((_DWORD)v382)
    v154 = (char *)v381;
  else
    v154 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v150, v151, v152, v153, v29, &byte_209A88803, v30, v30, v154, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 636, (DgnString *)&v381);
  if ((_DWORD)v382)
    v159 = (char *)v381;
  else
    v159 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v155, v156, v157, v158, v29, &byte_209A88803, v30, v30, v159, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 637, (DgnString *)&v381);
  if ((_DWORD)v382)
    v164 = (char *)v381;
  else
    v164 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v160, v161, v162, v163, v29, &byte_209A88803, v30, v30, v164, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 639, (DgnString *)&v381);
  if ((_DWORD)v382)
    v169 = (char *)v381;
  else
    v169 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v165, v166, v167, v168, v29, &byte_209A88803, v30, v30, v169, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 641, (DgnString *)&v381);
  if ((_DWORD)v382)
    v174 = (char *)v381;
  else
    v174 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v170, v171, v172, v173, v29, &byte_209A88803, v30, v30, v174, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 642, (DgnString *)&v381);
  if ((_DWORD)v382)
    v179 = (char *)v381;
  else
    v179 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v175, v176, v177, v178, v29, &byte_209A88803, v30, v30, v179, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 650, (DgnString *)&v381);
  if ((_DWORD)v382)
    v184 = (char *)v381;
  else
    v184 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v180, v181, v182, v183, v29, &byte_209A88803, v30, v30, v184, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 652, (DgnString *)&v381);
  if ((_DWORD)v382)
    v189 = (char *)v381;
  else
    v189 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v185, v186, v187, v188, v29, &byte_209A88803, v30, v30, v189, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 654, (DgnString *)&v381);
  if ((_DWORD)v382)
    v194 = (char *)v381;
  else
    v194 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v190, v191, v192, v193, v29, &byte_209A88803, v30, v30, v194, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 673, (DgnString *)&v381);
  if ((_DWORD)v382)
    v199 = (char *)v381;
  else
    v199 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v195, v196, v197, v198, v29, &byte_209A88803, v30, v30, v199, 151072, 151072, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 151072;
  *a5 += 151072;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 675, (DgnString *)&v381);
  if ((_DWORD)v382)
    v204 = (char *)v381;
  else
    v204 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v200, v201, v202, v203, v29, &byte_209A88803, v30, v30, v204, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 677, (DgnString *)&v381);
  if ((_DWORD)v382)
    v209 = (char *)v381;
  else
    v209 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v205, v206, v207, v208, v29, &byte_209A88803, v30, v30, v209, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 678, (DgnString *)&v381);
  if ((_DWORD)v382)
    v214 = (char *)v381;
  else
    v214 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v210, v211, v212, v213, v29, &byte_209A88803, v30, v30, v214, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 679, (DgnString *)&v381);
  if ((_DWORD)v382)
    v219 = (char *)v381;
  else
    v219 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v215, v216, v217, v218, v29, &byte_209A88803, v30, v30, v219, 4, 4, 0);
  v378 = v39;
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 680, (DgnString *)&v381);
  if ((_DWORD)v382)
    v224 = (char *)v381;
  else
    v224 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v29, &byte_209A88803, v30, v30, v224, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v225 = 4;
  else
    v225 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 681, (DgnString *)&v381);
  if ((_DWORD)v382)
    v230 = (char *)v381;
  else
    v230 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v226, v227, v228, v229, v29, &byte_209A88803, v30, v30, v230, v225, v225, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v225;
  *a5 += v225;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v231 = 4;
  else
    v231 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 682, (DgnString *)&v381);
  if ((_DWORD)v382)
    v236 = (char *)v381;
  else
    v236 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v232, v233, v234, v235, v29, &byte_209A88803, v30, v30, v236, v231, v231, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v231;
  *a5 += v231;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v237 = 12;
  else
    v237 = 16;
  v238 = v378[37846];
  v239 = v378[37847];
  if (v239 >= v238)
  {
    v240 = 0;
    if ((int)v238 > 0)
      v237 += 4 * (v238 - 1) + 4;
    v241 = v237 + 4 * (v239 - v238);
  }
  else
  {
    v240 = 4 * v238;
    v241 = v237;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 684, (DgnString *)&v381);
  if ((_DWORD)v382)
    v246 = (char *)v381;
  else
    v246 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v242, v243, v244, v245, v29, &byte_209A88803, v30, v30, v246, v241, v237, v240);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v241;
  *a5 += v237;
  *a6 += v240;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v247 = 12;
  else
    v247 = 16;
  v248 = v378[37850];
  v249 = v378[37851];
  if (v249 >= v248)
  {
    v250 = 0;
    if ((int)v248 > 0)
      v247 += 4 * (v248 - 1) + 4;
    v251 = v247 + 4 * (v249 - v248);
  }
  else
  {
    v250 = 4 * v248;
    v251 = v247;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 686, (DgnString *)&v381);
  if ((_DWORD)v382)
    v256 = (char *)v381;
  else
    v256 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v252, v253, v254, v255, v29, &byte_209A88803, v30, v30, v256, v251, v247, v250);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v251;
  *a5 += v247;
  *a6 += v250;
  v257 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)(v378 + 37852), 0);
  v258 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)(v378 + 37852), 1);
  v381 = 0;
  v382 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v381);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 688, (DgnString *)&v381);
  if ((_DWORD)v382)
    v263 = (char *)v381;
  else
    v263 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v259, v260, v261, v262, v29, &byte_209A88803, v30, v30, v263, v257, v258, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v257;
  *a5 += v258;
  v264 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v378 + 37856), 0);
  v265 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v378 + 37856), 1);
  v381 = 0;
  v382 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v381);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 690, (DgnString *)&v381);
  if ((_DWORD)v382)
    v270 = (char *)v381;
  else
    v270 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v266, v267, v268, v269, v29, &byte_209A88803, v30, v30, v270, v264, v265, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v264;
  *a5 += v265;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v271 = 12;
  else
    v271 = 16;
  v272 = v378[37862];
  v273 = v378[37863];
  if (v273 >= v272)
  {
    v274 = 0;
    if ((int)v272 > 0)
      v271 += 4 * (v272 - 1) + 4;
    v275 = v271 + 4 * (v273 - v272);
  }
  else
  {
    v274 = 4 * v272;
    v275 = v271;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 691, (DgnString *)&v381);
  if ((_DWORD)v382)
    v280 = (char *)v381;
  else
    v280 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v276, v277, v278, v279, v29, &byte_209A88803, v30, v30, v280, v275, v271, v274);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v275;
  *a5 += v271;
  *a6 += v274;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v281 = 12;
  else
    v281 = 16;
  v282 = v378[37866];
  v283 = v378[37867];
  if (v283 >= v282)
  {
    v284 = 0;
    if ((int)v282 > 0)
      v281 += 4 * (v282 - 1) + 4;
    v285 = v281 + 4 * (v283 - v282);
  }
  else
  {
    v284 = 4 * v282;
    v285 = v281;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 693, (DgnString *)&v381);
  if ((_DWORD)v382)
    v290 = (char *)v381;
  else
    v290 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v286, v287, v288, v289, v29, &byte_209A88803, v30, v30, v290, v285, v281, v284);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v285;
  *a5 += v281;
  *a6 += v284;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 695, (DgnString *)&v381);
  if ((_DWORD)v382)
    v295 = (char *)v381;
  else
    v295 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v291, v292, v293, v294, v29, &byte_209A88803, v30, v30, v295, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v296 = 4;
  else
    v296 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 697, (DgnString *)&v381);
  if ((_DWORD)v382)
    v301 = (char *)v381;
  else
    v301 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v297, v298, v299, v300, v29, &byte_209A88803, v30, v30, v301, v296, v296, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v296;
  *a5 += v296;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 699, (DgnString *)&v381);
  if ((_DWORD)v382)
    v306 = (char *)v381;
  else
    v306 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v302, v303, v304, v305, v29, &byte_209A88803, v30, v30, v306, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v381);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v307 = 4;
  else
    v307 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 701, (DgnString *)&v381);
  if ((_DWORD)v382)
    v312 = (char *)v381;
  else
    v312 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v308, v309, v310, v311, v29, &byte_209A88803, v30, v30, v312, v307, v307, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v307;
  *a5 += v307;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v313 = 12;
  else
    v313 = 16;
  v314 = v378[37878];
  v315 = v378[37879];
  if (v315 >= v314)
  {
    v316 = 0;
    if ((int)v314 > 0)
      v313 += 4 * (v314 - 1) + 4;
    v317 = v313 + 4 * (v315 - v314);
  }
  else
  {
    v316 = 4 * v314;
    v317 = v313;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 703, (DgnString *)&v381);
  if ((_DWORD)v382)
    v322 = (char *)v381;
  else
    v322 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v318, v319, v320, v321, v29, &byte_209A88803, v30, v30, v322, v317, v313, v316);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v317;
  *a5 += v313;
  *a6 += v316;
  v381 = 0;
  v379 = 0;
  v380 = 0;
  ReturnListMgr::printSize((ReturnListMgr *)(v378 + 37880), 0xFFFFFFFFLL, v29, &v381, &v380, &v379);
  *a4 += v381;
  *a5 += v380;
  *a6 += v379;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 706, (DgnString *)&v381);
  if ((_DWORD)v382)
    v327 = (char *)v381;
  else
    v327 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v323, v324, v325, v326, v29, &byte_209A88803, v30, v30, v327, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v381);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v328 = 4;
  else
    v328 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 707, (DgnString *)&v381);
  if ((_DWORD)v382)
    v333 = (char *)v381;
  else
    v333 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v329, v330, v331, v332, v29, &byte_209A88803, v30, v30, v333, v328, v328, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v328;
  *a5 += v328;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v334 = 4;
  else
    v334 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 708, (DgnString *)&v381);
  if ((_DWORD)v382)
    v339 = (char *)v381;
  else
    v339 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v335, v336, v337, v338, v29, &byte_209A88803, v30, v30, v339, v334, v334, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v334;
  *a5 += v334;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v340 = 4;
  else
    v340 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 709, (DgnString *)&v381);
  if ((_DWORD)v382)
    v345 = (char *)v381;
  else
    v345 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v341, v342, v343, v344, v29, &byte_209A88803, v30, v30, v345, v340, v340, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v340;
  *a5 += v340;
  v346 = PelStats::sizeObject((uint64_t)(v378 + 37918), 0);
  v347 = PelStats::sizeObject((uint64_t)(v378 + 37918), 1);
  v348 = PelStats::sizeObject((uint64_t)(v378 + 37918), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 723, (DgnString *)&v381);
  if ((_DWORD)v382)
    v353 = (char *)v381;
  else
    v353 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v349, v350, v351, v352, v29, &byte_209A88803, v30, v30, v353, v346, v347, v348);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v346;
  *a5 += v347;
  *a6 += v348;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 724, (DgnString *)&v381);
  if ((_DWORD)v382)
    v358 = (char *)v381;
  else
    v358 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v354, v355, v356, v357, v29, &byte_209A88803, v30, v30, v358, 72, 72, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 72;
  *a5 += 72;
  v359 = PelStats::sizeObject((uint64_t)(v378 + 37982), 0);
  v360 = PelStats::sizeObject((uint64_t)(v378 + 37982), 1);
  v361 = PelStats::sizeObject((uint64_t)(v378 + 37982), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 726, (DgnString *)&v381);
  if ((_DWORD)v382)
    v366 = (char *)v381;
  else
    v366 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v362, v363, v364, v365, v29, &byte_209A88803, v30, v30, v366, v359, v360, v361);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v359;
  *a5 += v360;
  *a6 += v361;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 728, (DgnString *)&v381);
  if ((_DWORD)v382)
    v371 = (char *)v381;
  else
    v371 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v367, v368, v369, v370, v29, &byte_209A88803, v30, v30, v371, 72, 72, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 72;
  *a5 += 72;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 729, (DgnString *)&v381);
  if ((_DWORD)v382)
    v376 = (char *)v381;
  else
    v376 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v372, v373, v374, v375, v377, &byte_209A88803, (35 - v377), (35 - v377), v376, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v381);
}

void sub_209960604(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

_QWORD *LexTreeNetScorer::fillPens(_QWORD *result, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13[2];

  v3 = *(unsigned __int16 *)(result[21] + 2 * a2);
  v4 = *(unsigned __int8 *)(result[18957] + 8);
  v5 = result[19];
  v6 = *(unsigned __int16 *)(v5 + 6 * a2);
  if (v6 == 0xFFFF || v6 == 0 || (_DWORD)v3 == 0xFFFF || v4 == 0)
  {
    *(_DWORD *)(v5 + 6 * a2 + 2) = 0;
  }
  else
  {
    v11 = result;
    *(_QWORD *)v13 = 0;
    result = (_QWORD *)HmmDurationPenalties::durationToPens((uint64_t)(result + 8), *(__int16 *)(*a3 + 2 * v3), v4, &v13[1], v13);
    v12 = v11[19] + 6 * a2;
    *(_WORD *)(v12 + 2) = v13[0];
    *(_WORD *)(v12 + 4) = v13[1];
  }
  return result;
}

uint64_t HmmDurationPenalties::durationToPens(uint64_t this, int a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v5;
  double v6;
  uint64_t v7;
  unsigned int v8;
  double v9;

  v5 = *(_DWORD *)(this + 16);
  if (v5)
  {
    v6 = (double)(int)(a3 + a2) / (double)a3;
    if (v6 <= *(double *)(this + 24))
      v6 = *(double *)(this + 24);
    if (v6 > *(double *)(this + 32))
      v6 = *(double *)(this + 32);
    LODWORD(v7) = -1;
    do
      v7 = (v7 + 1);
    while (*(double *)(*(_QWORD *)(this + 40) + 8 * v7) < v6);
    *a4 = v7;
    v8 = *(_DWORD *)(*(_QWORD *)(this + 72) + 4 * v7);
    do
      v9 = *(double *)(*(_QWORD *)(this + 56) + 8 * v8++);
    while (v9 > v6);
    v5 = v8 - 1;
  }
  else
  {
    *a4 = 0;
  }
  *a5 = v5;
  return this;
}

void LexTreeNetScorer::initScorer(unint64_t a1, __int16 a2, char a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15)
{
  unint64_t v20;
  _QWORD *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  _DWORD *v36;
  uint64_t v40;
  unsigned int v41;

  v20 = a1 + 151352;
  ReturnListMgr::initReturnLists((_WORD *)(a1 + 151520), a2);
  *(_BYTE *)(v20 + 288) = a3;
  *(_QWORD *)(v20 + 296) = a4;
  *(_QWORD *)(v20 + 304) = a5;
  DgnPrimArray<int>::copyArraySlice(a1, (uint64_t *)a10, 0, *(_DWORD *)(a10 + 8));
  *(_QWORD *)(a1 + 48) = a11;
  *(_DWORD *)(a1 + 56) = a12;
  *(_DWORD *)(a1 + 212) = a13;
  *(_DWORD *)v20 = a6;
  *(_QWORD *)(v20 + 8) = a7;
  *(_QWORD *)(v20 + 16) = a8;
  HmmDurationPenalties::initDurationsLookups((HmmDurationPenalties *)(a1 + 64), a9);
  *(_BYTE *)(v20 + 136) = a14;
  *(_QWORD *)(v20 + 144) = a15;
  if ((a14 & 1) == 0)
  {
    v21 = (_QWORD *)(a1 + 152);
    v22 = *(_DWORD *)(a1 + 52);
    v23 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 48) * v22;
    v24 = *(_DWORD *)(a1 + 164);
    v25 = v23;
    v26 = v23 >= v24;
    v27 = v23 - v24;
    if ((_DWORD)v27 != 0 && v26)
    {
      DgnPrimStructArray<PelIdAndStayAndPassPen>::reallocElts(a1 + 152, v27, 0);
      v22 = *(_DWORD *)(a1 + 52);
      v25 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 48) * v22;
    }
    *(_DWORD *)(a1 + 160) = v23;
    v28 = (_QWORD *)(a1 + 168);
    v29 = *(_DWORD *)(a1 + 180);
    v26 = v25 >= v29;
    v30 = v25 - v29;
    if ((_DWORD)v30 != 0 && v26)
    {
      DgnPrimArray<short>::reallocElts(a1 + 168, v30, 0);
      v22 = *(_DWORD *)(a1 + 52);
    }
    *(_DWORD *)(a1 + 176) = v25;
    PicMgr::getRightAndDoubleGenericPicNodes(*(_QWORD *)(v20 + 304), v22, &v40);
    v31 = v41;
    if (v41)
    {
      v32 = 0;
      v33 = v40;
      v34 = 2;
      do
      {
        v35 = *(_WORD **)(v33 + 8 * v32);
        if (v35)
        {
          *(_WORD *)(*v21 + v34 - 2) = *v35;
          *(_WORD *)(*v28 + 2 * v32) = v35[1];
        }
        else
        {
          v36 = (_DWORD *)(*v21 + v34);
          *((_WORD *)v36 - 1) = -1;
          *(_WORD *)(*v28 + 2 * v32) = -1;
          *v36 = 0;
        }
        ++v32;
        v34 += 6;
      }
      while (v31 != v32);
    }
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v40);
  }
}

unint64_t LexTreeNetScorer::updateScorerDurations(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _WORD *v12;
  unsigned int v13;
  unsigned int v14[2];

  v3 = result;
  if (*(_BYTE *)(result + 151488))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(result + 151656) + 8);
    v5 = (_QWORD *)(result + 184);
    v6 = *(_DWORD *)(a2 + 8);
    v7 = *(_DWORD *)(result + 196);
    v8 = v6;
    if (v6 > v7)
    {
      result = DgnPrimArray<unsigned int>::reallocElts(result + 184, v6 - v7, 0);
      v8 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(v3 + 192) = v6;
    if (v8)
    {
      v9 = 0;
      v10 = 0;
      v11 = v3 + 64;
      do
      {
        if (v4)
        {
          *(_QWORD *)v14 = 0;
          result = HmmDurationPenalties::durationToPens(v11, *(__int16 *)(*(_QWORD *)a2 + 2 * v10), v4, &v14[1], v14);
          v12 = (_WORD *)(*v5 + v9);
          *v12 = v14[0];
          v12[1] = v14[1];
          v8 = *(_DWORD *)(a2 + 8);
        }
        else
        {
          *(_DWORD *)(*v5 + v9) = 0;
        }
        ++v10;
        v9 += 4;
      }
      while (v10 < v8);
    }
  }
  else if (*(_DWORD *)(result + 160))
  {
    v13 = 0;
    do
      result = (unint64_t)LexTreeNetScorer::fillPens((_QWORD *)v3, v13++, (_QWORD *)a2);
    while (v13 < *(_DWORD *)(v3 + 160));
  }
  return result;
}

void LexTreeNetScorer::beginScorerSyncRecog(LexTreeNetScorer *this, int a2, const PrefiltererSearchParamSet *a3)
{
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  double v29;
  unsigned int v30;
  uint64_t v31;
  int64x2_t v32;
  uint64_t v33;
  int64x2_t v34;
  unsigned int v35;
  int v36;
  _QWORD *v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v5 = (char *)this + 152104;
  v6 = (char *)this + 151648;
  v7 = (char *)this + 151340;
  *((_QWORD *)this + 18935) = a3;
  v8 = *((_QWORD *)this + 18957);
  v9 = v8 + 56;
  v10 = v8 + 72;
  if (*((_DWORD *)a3 + 12) == 1)
    v11 = v10;
  else
    v11 = v9;
  LexTreeNetScorer::updateScorerDurations((unint64_t)this, v11);
  ReturnListMgr::beginRetListSyncRecog((LexTreeNetScorer *)((char *)this + 151520), *(const PrefiltererSearchParamSet **)(v7 + 140), v12, v13, v14, v15, v16, v17);
  v18 = *(_QWORD *)v6;
  v19 = ***((_DWORD ***)v6 + 1) - 2;
  *((_DWORD *)v7 + 33) = a2;
  v20 = *(_QWORD *)(v18 + 120);
  *((_QWORD *)v6 + 2) = v20;
  PelScoreCache::addCacheClient(v20, this);
  PelStats::resetStats((LexTreeNetScorer *)((char *)this + 151672));
  *((_DWORD *)v6 + 50) = 0;
  *((_OWORD *)this + 9491) = 0u;
  *((_OWORD *)this + 9492) = 0u;
  *((_OWORD *)this + 9493) = 0u;
  *((_OWORD *)this + 9494) = 0u;
  *((_DWORD *)this + 37980) = 0;
  PelStats::resetStats((LexTreeNetScorer *)((char *)this + 151928));
  *(_DWORD *)v5 = 0;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_DWORD *)v5 + 18) = 0;
  v23 = *(_DWORD **)(v7 + 140);
  *((_DWORD *)this + 50) = v23[10];
  v24 = v23[36];
  if (v24 == -1)
  {
    *((_DWORD *)this + 51) = 5000;
  }
  else
  {
    v25 = v23[33];
    v26 = v23[34];
    *((_DWORD *)this + 51) = v25 - v24 + v26;
    if (v25 - v24 + v26 < 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 935, (uint64_t)"prefilt/lexnet", 1, (uint64_t)"%d %d %d %d", v21, v22, v25 - v24 + v26);
  }
  *((_DWORD *)this + 52) = *((_DWORD *)v7 + 58);
  v27 = *((_DWORD *)v7 + 44);
  if (v19 > v27)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 151504, v19 - v27, 0);
  *((_DWORD *)v7 + 43) = v19;
  *((_DWORD *)this + 55) = 0;
  *((_DWORD *)this + 56) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_WORD *)this + 126) = -1;
  *((_QWORD *)this + 32) = 0x4E2000000000;
  *((_DWORD *)v7 + 2) = 0;
  bzero((char *)this + 264, 0x24E24uLL);
  *(_QWORD *)v7 = 20000;
  v28 = *(_QWORD *)(v7 + 140);
  *((_BYTE *)this + 32) = *(_BYTE *)(v28 + 84);
  *((_BYTE *)this + 33) = *(_BYTE *)(v28 + 68);
  v29 = 0.0;
  if (*(_DWORD *)(v28 + 64) != -1 && v7[300])
    v29 = *(double *)(v28 + 56);
  *((double *)this + 5) = v29;
  v30 = *((_DWORD *)this + 7);
  if (v30 <= 0x7D0)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 16, 2001 - v30, 0);
    v29 = *((double *)this + 5);
  }
  v31 = 0;
  *((_DWORD *)this + 6) = 2001;
  v32 = (int64x2_t)xmmword_209A57D60;
  v33 = *((_QWORD *)this + 2);
  v34 = vdupq_n_s64(2uLL);
  do
  {
    if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x7D1uLL), (uint64x2_t)v32)).u8[0] & 1) != 0)
      *(_DWORD *)(v33 + 4 * v31) = (v29 * (double)v31);
    if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x7D1uLL), *(uint64x2_t *)&v32)).i32[1] & 1) != 0)
      *(_DWORD *)(v33 + 4 * v31 + 4) = (v29 * (double)(v31 + 1));
    v31 += 2;
    v32 = vaddq_s64(v32, v34);
  }
  while (v31 != 2002);
  v35 = *((_DWORD *)v7 + 15);
  v36 = 256;
  do
  {
    if (v35 == *((_DWORD *)v7 + 16))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v7 + 52), 1, 1);
      v35 = *((_DWORD *)v7 + 15);
    }
    *(_DWORD *)(*(_QWORD *)(v7 + 52) + 4 * v35) = 0;
    v35 = *((_DWORD *)v7 + 15) + 1;
    *((_DWORD *)v7 + 15) = v35;
    --v36;
  }
  while (v36);
  v37 = v7 + 68;
  v38 = *((_DWORD *)v7 + 20);
  if (v38 <= 0xFF)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)(v7 + 68), 256 - v38, 0);
  v39 = *((unsigned int *)v7 + 19);
  if (v39 <= 0x100)
  {
    if ((_DWORD)v39 != 256)
    {
      v41 = 16 * v39;
      do
      {
        v42 = (_QWORD *)(*v37 + v41);
        *v42 = 0;
        v42[1] = 0;
        v41 += 16;
      }
      while (v41 != 4096);
    }
  }
  else if ((int)v39 >= 257)
  {
    v40 = 16 * v39 - 16;
    do
    {
      --v39;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v37 + v40);
      v40 -= 16;
    }
    while (v39 > 0x100);
  }
  *((_DWORD *)v7 + 19) = 256;
  v43 = v7 + 84;
  v44 = *((_DWORD *)v7 + 24);
  if (v44 <= 0xFF)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)(v7 + 84), 256 - v44, 0);
  v45 = *((unsigned int *)v7 + 23);
  if (v45 <= 0x100)
  {
    if ((_DWORD)v45 != 256)
    {
      v47 = 16 * v45;
      do
      {
        v48 = (_QWORD *)(*v43 + v47);
        *v48 = 0;
        v48[1] = 0;
        v47 += 16;
      }
      while (v47 != 4096);
    }
  }
  else if ((int)v45 >= 257)
  {
    v46 = 16 * v45 - 16;
    do
    {
      --v45;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v43 + v46);
      v46 -= 16;
    }
    while (v45 > 0x100);
  }
  *((_DWORD *)v7 + 23) = 256;
}

uint64_t LexTreeNetScorer::endScorerSyncRecog(LexTreeNetScorer *this)
{
  PelScoreCache **v2;
  uint64_t v3;
  PelScoreCache *v4;
  PelScoreCache *v5;
  PelScoreCache *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v2 = (PelScoreCache **)((char *)this + 151360);
  PelScoreCache::removeCacheClientOfFramesFromTimeOn(*((_QWORD *)this + 18958), *((_DWORD *)this + 55), (void *)1, this);
  PelScoreCache::removeCacheClient(v2[38], this);
  v2[38] = 0;
  *((_DWORD *)v2 + 38) = 0;
  *((_WORD *)this + 16) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  v3 = *((unsigned int *)v2 + 22);
  if ((int)v3 >= 1)
  {
    v4 = v2[10];
    v5 = v2[2];
    v6 = v2[6];
    v7 = *(_QWORD *)*v2;
    v8 = v3 + 1;
    do
    {
      v9 = *((unsigned int *)v4 + (v8 - 2));
      *(_DWORD *)(v7
                + 24
                * *(unsigned int *)(*((_QWORD *)v6 + 2 * (v9 >> 24))
                                  + *((_DWORD *)v5 + (v9 >> 24)) * (v9 & 0xFFFFFF))) = 0;
      --v8;
    }
    while (v8 > 1);
  }
  *((_DWORD *)v2 + 22) = 0;
  *((_DWORD *)v2 + 10) = 0;
  v10 = *((unsigned int *)v2 + 14);
  if ((int)v10 >= 1)
  {
    v11 = 16 * v10 - 16;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v2[6] + v11);
      v11 -= 16;
    }
    while (v11 != -16);
  }
  *((_DWORD *)v2 + 14) = 0;
  v12 = *((unsigned int *)v2 + 18);
  if ((int)v12 >= 1)
  {
    v13 = 16 * v12 - 16;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v2[8] + v13);
      v13 -= 16;
    }
    while (v13 != -16);
  }
  *((_DWORD *)v2 + 18) = 0;
  result = ReturnListMgr::endRetListSyncRecog((LexTreeNetScorer *)((char *)this + 151520));
  v2[15] = 0;
  return result;
}

uint64_t LexTreeNetScorer::getCurFrame(LexTreeNetScorer *this)
{
  return *((unsigned int *)this + 55);
}

BOOL LexTreeNetScorer::isPrefilteringListAvailable(LexTreeNetScorer *this, int a2)
{
  int v2;

  v2 = *(_DWORD *)(*((_QWORD *)this + 18935) + 100) + a2;
  return *((_DWORD *)this + 62) + *((_DWORD *)this + 56) > v2 && *((_DWORD *)this + 55) > v2;
}

BOOL LexTreeNetScorer::needLookaheadToScoreFrame(LexTreeNetScorer *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 18935) + 64) != -1
      && *((_BYTE *)this + 151640)
      && *((__int16 *)this + 126) != -1;
}

uint64_t LexTreeNetScorer::scoreFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = a1 + 151480;
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 151648) + 56))(*(_QWORD *)(a1 + 151648), a2, 0, a3, a1 + 151672, 0);
  LexTreeNetScorer::initTreeThresholds((LexTreeNetScorer *)a1, (unsigned int *)(a1 + 151848), (unint64_t *)(a1 + 151856));
  LexTreeNetScorer::initLookaheadThresholds(a1, v7, a4);
  LexTreeNetScorer::initSeqsAndStats((int32x2_t *)a1);
  if (*(_DWORD *)(*(_QWORD *)v6 + 80) == 1)
    LexTreeNetScorer::updateTree_Skip((LexTreeNetScorer *)a1);
  else
    LexTreeNetScorer::updateTree_NoSkip((LexTreeNetScorer *)a1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v6 + 168) + 64))(*(_QWORD *)(v6 + 168), *(unsigned int *)(a1 + 220), a1 + 151672);
  result = PelScoreCache::removeCacheClientOfFrame(*(_QWORD *)(v6 + 184), *(_DWORD *)(a1 + 220), (void *)a1);
  ++*(_DWORD *)(a1 + 220);
  return result;
}

uint64_t LexTreeNetScorer::initTreeThresholds(LexTreeNetScorer *this, unsigned int *a2, unint64_t *a3)
{
  unsigned int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  int v11;

  v5 = (unsigned int *)((char *)this + 151336);
  v6 = *((_QWORD *)this + 18935);
  v7 = *(_DWORD *)(v6 + 132);
  v8 = *((unsigned __int16 *)this + 126);
  if ((_DWORD)v8 == 0xFFFF)
    v8 = 0;
  else
    v7 += *(_DWORD *)(v6 + 136);
  v9 = *a2;
  if (*a2 <= *v5)
    v9 = *v5;
  *a2 = v9;
  *a3 += *v5;
  *v5 = 0;
  *((_DWORD *)this + 59) = 0;
  result = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 18958), v8);
  v11 = *((_DWORD *)this + 59) + result;
  *((_DWORD *)this + 58) = v7;
  *((_DWORD *)this + 59) = v11;
  return result;
}

uint64_t LexTreeNetScorer::initLookaheadThresholds(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;

  v3 = *(_QWORD *)(result + 151480);
  if (*(_DWORD *)(v3 + 64) == -1 || !*(_BYTE *)(result + 151640) || *(__int16 *)(result + 252) == -1)
  {
    if (*(_DWORD *)(result + 151512))
    {
      v9 = 0;
      v10 = *(_QWORD *)(result + 151504);
      do
        *(_DWORD *)(v10 + 4 * (unsigned __int16)v9++) = *(_DWORD *)(result + 232);
      while (*(_DWORD *)(result + 151512) > (unsigned __int16)v9);
    }
    *(_DWORD *)(result + 216) = *(_DWORD *)(result + 232);
  }
  else
  {
    *(_DWORD *)(result + 216) = 0;
    if (*(_DWORD *)(result + 151512))
    {
      v4 = 0;
      v5 = *a3;
      do
      {
        if (v4)
        {
          if (*(unsigned __int16 *)(**(_QWORD **)(result + 151656) + 56) == v4)
          {
            *(_DWORD *)(*(_QWORD *)(result + 151504) + 4 * v4) = *(_DWORD *)(result + 232);
          }
          else
          {
            v6 = *(_DWORD *)(v3 + 64);
            if (v6 == -1)
              v7 = 5000;
            else
              v7 = v6 - *(__int16 *)(v5 + 2 * v4);
            if (v7 <= -5000)
              v7 = -5000;
            *(_DWORD *)(*(_QWORD *)(result + 151504) + 4 * v4) = v7;
            if (v7 > *(_DWORD *)(result + 216))
              *(_DWORD *)(result + 216) = v7;
          }
        }
        else
        {
          **(_DWORD **)(result + 151504) = *(_DWORD *)(result + 232);
        }
        ++v4;
      }
      while (*(_DWORD *)(result + 151512) > v4);
      v8 = *(_DWORD *)(result + 216);
    }
    else
    {
      v8 = 0;
    }
    v11 = *(_DWORD *)(result + 232);
    if (v8 > v11)
      *(_DWORD *)(result + 216) = v11;
  }
  return result;
}

int32x2_t LexTreeNetScorer::initSeqsAndStats(int32x2_t *this)
{
  int32x2_t v1;
  int v2;
  __int32 v3;
  __int32 v4;
  __int32 v5;
  __int32 v6;
  int32x2_t result;

  v1 = this[18935];
  v2 = *(_DWORD *)(*(_QWORD *)&v1 + 72);
  if (v2 == -1)
    v2 = 5000;
  if (this[32].i32[1] < v2)
    v2 = this[32].i32[1];
  v3 = this[28].i32[0];
  v4 = this[27].i32[1] - v3;
  this[30].i32[0] = v2;
  v5 = *(_DWORD *)(*(_QWORD *)&v1 + 76);
  if (v2 > v5)
    v5 = v2;
  this[30].i32[0] = v5;
  this[30].i32[1] = v4;
  v6 = this[31].i32[0];
  this[31].i32[0] = (unsigned __int16)(v4 - v6);
  this[28].i32[0] = v6 + v3;
  this[28].i32[1] = v6;
  this[31].i16[2] = -1;
  result = vdup_n_s32(0x4E20u);
  this[32] = result;
  return result;
}

uint64_t LexTreeNetScorer::updateTree_Skip(LexTreeNetScorer *this)
{
  PelScoreCache **v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _WORD *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int ScoreAllowBackoff_updateNodeInSequence;
  __int16 v36;
  int v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  PelScoreCache *v47;
  PelScoreCache *v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  char *v58;
  char *v59;
  int v60;
  unsigned int *v61;
  int v62;
  int v63;
  PelScoreCache **v64;
  unsigned __int16 v65;
  int v66;
  int v67;

  v2 = (PelScoreCache **)((char *)this + 151344);
  v67 = *((_DWORD *)this + 58);
  v3 = *((_DWORD *)this + 60);
  v62 = *((_DWORD *)this + 59);
  v63 = *((_DWORD *)this + 51);
  if (v3 <= *((_DWORD *)this + 54))
    LexTreeNetScorer::seedSuccessors((unint64_t)this, *((_DWORD *)this + 37838), 0, 0, *(unsigned __int16 *)(**((_QWORD **)this + 18957) + 56), v3, *((_DWORD *)this + 61));
  v4 = *((_DWORD *)v2 + 26);
  if (!v4)
  {
    v65 = -1;
    v5 = 20000;
    goto LABEL_52;
  }
  v58 = (char *)(v2 + 15);
  v59 = (char *)(v2 + 14);
  v65 = -1;
  v66 = 20000;
  v5 = 20000;
  v64 = v2;
  do
  {
    v6 = v4 - 1;
    v7 = *((unsigned int *)v2[12] + v6);
    *((_DWORD *)v2 + 26) = v6;
    v8 = 16 * (v7 >> 24);
    v9 = (unsigned int *)(*(_QWORD *)((char *)v2[8] + v8)
                        + *((_DWORD *)v2[4] + (v7 >> 24)) * (v7 & 0xFFFFFF));
    v10 = *((unsigned __int8 *)v9 + 19);
    if (*((unsigned __int8 *)v9 + 18) + 1 == v10)
    {
      if (*((_WORD *)v9 + 7))
      {
        v11 = (char *)v9 + 10 * *((unsigned __int8 *)v9 + 19);
        v12 = *((__int16 *)v11 + 13);
        v13 = *((unsigned __int16 *)v11 + 11);
        v14 = *((unsigned __int16 *)v11 + 6) + *((__int16 *)v11 + 8);
        v15 = v14 >= v12 ? *((__int16 *)v11 + 13) : *((unsigned __int16 *)v11 + 6) + *((__int16 *)v11 + 8);
        if (v15 + v13 <= *((_DWORD *)this + 54))
        {
          v16 = v11 + 20;
          if (v14 >= v12)
            v17 = 0;
          else
            v17 = -1;
          LexTreeNetScorer::seedSuccessors((unint64_t)this, v9[1], *((unsigned __int16 *)v9 + 5), *((unsigned __int16 *)v9 + 6), *(unsigned __int16 *)(*(_QWORD *)v2[2] + 24 * v9[1] + 16), v15 + v13, *(_WORD *)&v16[10 * v17 + 8]);
          v9 = (unsigned int *)(*(_QWORD *)((char *)v2[8] + v8)
                              + *((_DWORD *)v2[4] + (v7 >> 24)) * (v7 & 0xFFFFFF));
        }
      }
    }
    else
    {
      ++v10;
    }
    v18 = *((unsigned __int8 *)v9 + 16);
    v19 = *((unsigned __int16 *)v9 + 4);
    v2[68] = (PelScoreCache *)((char *)v2[68] + 1);
    v2[69] = (PelScoreCache *)((char *)v2[69] + v10);
    if (!v10)
      goto LABEL_47;
    v60 = v7;
    v61 = v9;
    v20 = 0;
    v21 = v19 + (v10 - 1) * v18;
    v22 = (_WORD *)v9 + 5 * v10 + 14;
    v23 = -1;
    do
    {
      v24 = (__int16)*(v22 - 6);
      v25 = (unsigned __int16)*(v22 - 8);
      v26 = v25 + v24;
      if (*((_BYTE *)this + 32))
      {
        if (v10 <= 1)
          goto LABEL_26;
      }
      else if (v10 < 3)
      {
LABEL_26:
        v30 = -1;
        goto LABEL_27;
      }
      v27 = (unsigned __int16)*(v22 - 13) + (__int16)*(v22 - 11);
      v28 = v27 + v25;
      v29 = v27 < v24;
      if (v27 < v24)
        v26 = v28;
      v30 = -2;
      if (!v29)
        v30 = -1;
LABEL_27:
      v31 = (unsigned __int16)*(v22 - 2) + (__int16)*(v22 - 1);
      if (v31 >= v26)
        v32 = v26;
      else
        v32 = (unsigned __int16)*(v22 - 2) + (__int16)*(v22 - 1);
      if (v32 <= v67)
      {
        if (v31 <= v26)
          v33 = 0;
        else
          v33 = v30;
        v34 = (unsigned __int16)*(v22 - 4);
        ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(v64[40], (unsigned __int16)*(v22 - 4), v32 - v62, v63);
        v36 = v22[5 * v33] - *((_WORD *)this + 114);
        *(v22 - 1) = ScoreAllowBackoff_updateNodeInSequence;
        *v22 = v36;
        ++*((_DWORD *)this + (ScoreAllowBackoff_updateNodeInSequence + 5000) + 66);
        if (ScoreAllowBackoff_updateNodeInSequence < v66 || ScoreAllowBackoff_updateNodeInSequence == v66 && v34 < v65)
        {
          v65 = v34;
          v66 = ScoreAllowBackoff_updateNodeInSequence;
        }
        if (ScoreAllowBackoff_updateNodeInSequence + v21 < v5)
          v5 = ScoreAllowBackoff_updateNodeInSequence + v21;
        v20 += v10 & v23;
        v23 = 0;
      }
      else
      {
        *(v22 - 1) = 20000;
      }
      v21 -= v18;
      v22 -= 5;
      --v10;
    }
    while (v10);
    if (!v20)
    {
      v2 = v64;
      v9 = v61;
LABEL_47:
      v41 = *(_QWORD *)v2[2];
      v42 = 24 * *v9;
      v43 = *(unsigned int *)(v41 + v42);
      *(_DWORD *)(v41 + v42) = 0;
      v37 = v43 & 0xFFFFFF;
      v40 = (uint64_t)v2[10] + ((v43 >> 20) & 0xFF0);
      v39 = (char *)(v40 + 8);
      v38 = *(unsigned int *)(v40 + 8);
      if (v38 != *(_DWORD *)(v40 + 12))
        goto LABEL_49;
LABEL_48:
      DgnPrimArray<unsigned int>::reallocElts(v40, 1, 1);
      v38 = *(unsigned int *)v39;
      goto LABEL_49;
    }
    v37 = v60;
    *((_BYTE *)v61 + 19) = v20;
    v2 = v64;
    v38 = *((unsigned int *)v64 + 30);
    v39 = v58;
    v40 = (uint64_t)v59;
    if (v38 == *((_DWORD *)v64 + 31))
      goto LABEL_48;
LABEL_49:
    *(_DWORD *)(*(_QWORD *)v40 + 4 * v38) = v37;
    ++*(_DWORD *)v39;
    v4 = *((_DWORD *)v2 + 26);
  }
  while (v4);
LABEL_52:
  *((_WORD *)this + 126) = v65;
  *((_DWORD *)this + 64) = v5;
  v44 = *((_DWORD *)v2 + 30);
  v45 = *((_DWORD *)v2 + 27);
  v46 = v44;
  if (v44 > v45)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v2 + 12), v44 - v45, 0);
    v46 = *((_DWORD *)v2 + 30);
  }
  *((_DWORD *)v2 + 26) = v44;
  if (v46 >= 1)
  {
    v47 = v2[14];
    v48 = v2[12];
    v49 = v46 - 1;
    do
    {
      *(_DWORD *)v48 = *((_DWORD *)v47 + v49);
      v48 = (PelScoreCache *)((char *)v48 + 4);
      --v49;
    }
    while (v49 != -1);
  }
  *((_DWORD *)v2 + 30) = 0;
  v50 = *((_DWORD *)this + 60);
  v51 = *((_DWORD *)v2 + 1);
  if (v50 < v51)
  {
    *(_DWORD *)v2 = *((_DWORD *)this + 61) - *((_DWORD *)this + 57);
    *((_DWORD *)v2 + 1) = v50;
    v51 = v50;
  }
  if (v51 <= 19999)
  {
    v52 = *((_DWORD *)v2 + 1) + PelScoreCache::getScoreNoBackoff(v2[40], 0) - *((_DWORD *)this + 59);
    v53 = *((_DWORD *)this + 64);
    v54 = v52 - v53;
    v55 = 20000;
    if (v52 >= 20000)
      v54 = 20000;
    if (v53 <= 19999)
      v56 = v54;
    else
      v56 = v52;
    if (v56 <= *((_DWORD *)this + 58))
    {
      if (v52 < v53)
      {
        *((_DWORD *)this + 64) = v52;
        *((_WORD *)this + 126) = -1;
        if (v52 >= 20000)
          v54 = 20000;
        else
          v54 = 0;
        v53 = v52;
      }
      if (v53 <= 19999)
        v55 = v54;
      else
        v55 = v52;
    }
    *((_DWORD *)v2 + 1) = v55;
  }
  return LexTreeNetScorer::updateTrueBestPel((uint64_t)this);
}

uint64_t LexTreeNetScorer::updateTree_NoSkip(LexTreeNetScorer *this)
{
  LexTreeNetScorer *v1;
  PelScoreCache **v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _WORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  LexTreeNetScorer *v23;
  uint64_t v24;
  unsigned int v25;
  int ScoreAllowBackoff_updateNodeInSequence;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  PelScoreCache *v39;
  PelScoreCache *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  char *v50;
  char *v51;
  int v52;
  unsigned int *v53;
  int v54;
  int v55;
  PelScoreCache **v56;
  unsigned __int16 v57;
  int v58;
  int v59;

  v1 = this;
  v2 = (PelScoreCache **)((char *)this + 151344);
  v3 = *((_DWORD *)this + 58);
  v54 = *((_DWORD *)this + 59);
  v55 = *((_DWORD *)this + 51);
  v4 = *((_DWORD *)this + 60);
  if (v4 <= *((_DWORD *)this + 54))
    LexTreeNetScorer::seedSuccessors((unint64_t)this, *((_DWORD *)this + 37838), 0, 0, *(unsigned __int16 *)(**((_QWORD **)this + 18957) + 56), v4, *((_DWORD *)this + 61));
  v5 = *((_DWORD *)v2 + 26);
  if (v5)
  {
    v50 = (char *)(v2 + 15);
    v51 = (char *)(v2 + 14);
    v57 = -1;
    v58 = 20000;
    v59 = 20000;
    v56 = v2;
    while (1)
    {
      v6 = v5 - 1;
      v7 = *((unsigned int *)v2[12] + v6);
      *((_DWORD *)v2 + 26) = v6;
      v8 = v7 & 0xFFFFFF;
      v9 = 16 * (v7 >> 24);
      v10 = *(_QWORD *)((char *)v2[8] + v9) + *((_DWORD *)v2[4] + (v7 >> 24)) * (v7 & 0xFFFFFF);
      v11 = *(unsigned __int8 *)(v10 + 19);
      if (*(unsigned __int8 *)(v10 + 18) + 1 == v11)
      {
        if (*(_WORD *)(v10 + 14))
        {
          v12 = *(unsigned __int16 *)(v10 + 10 * *(unsigned __int8 *)(v10 + 19) + 22)
              + *(__int16 *)(v10 + 10 * *(unsigned __int8 *)(v10 + 19) + 26);
          if (v12 <= *((_DWORD *)v1 + 54))
          {
            LexTreeNetScorer::seedSuccessors((unint64_t)v1, *(_DWORD *)(v10 + 4), *(unsigned __int16 *)(v10 + 10), *(unsigned __int16 *)(v10 + 12), *(unsigned __int16 *)(*(_QWORD *)v2[2] + 24 * *(unsigned int *)(v10 + 4) + 16), v12, *(_WORD *)(v10 + 10 * *(unsigned __int8 *)(v10 + 19) + 28));
            v13 = (unsigned int *)(*(_QWORD *)((char *)v2[8] + v9) + (*((_DWORD *)v2[4] + (v7 >> 24)) * v8));
            goto LABEL_11;
          }
        }
      }
      else
      {
        ++v11;
      }
      v13 = (unsigned int *)(*(_QWORD *)((char *)v2[8] + v9) + (*((_DWORD *)v2[4] + (v7 >> 24)) * v8));
LABEL_11:
      v14 = *((unsigned __int8 *)v13 + 16);
      v15 = *((unsigned __int16 *)v13 + 4);
      v2[68] = (PelScoreCache *)((char *)v2[68] + 1);
      v2[69] = (PelScoreCache *)((char *)v2[69] + v11);
      if (v11)
      {
        v52 = v7;
        v53 = v13;
        v16 = 0;
        v17 = v15 + (v11 - 1) * v14;
        v18 = (_WORD *)v13 + 5 * v11 + 14;
        v19 = -1;
        do
        {
          v20 = (unsigned __int16)*(v18 - 8) + (__int16)*(v18 - 6);
          v21 = (unsigned __int16)*(v18 - 2) + (__int16)*(v18 - 1);
          if (v21 >= v20)
            v22 = (unsigned __int16)*(v18 - 8) + (__int16)*(v18 - 6);
          else
            v22 = (unsigned __int16)*(v18 - 2) + (__int16)*(v18 - 1);
          if (v22 <= v3)
          {
            v23 = v1;
            if (v21 <= v20)
              v24 = 0;
            else
              v24 = -1;
            v25 = (unsigned __int16)*(v18 - 4);
            ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(v56[40], (unsigned __int16)*(v18 - 4), v22 - v54, v55);
            v27 = 10 * v24;
            v1 = v23;
            LOWORD(v27) = *(_WORD *)((char *)v18 + v27) - *((_WORD *)v23 + 114);
            *(v18 - 1) = ScoreAllowBackoff_updateNodeInSequence;
            *v18 = v27;
            ++*((_DWORD *)v23 + (ScoreAllowBackoff_updateNodeInSequence + 5000) + 66);
            if (ScoreAllowBackoff_updateNodeInSequence < v58
              || ScoreAllowBackoff_updateNodeInSequence == v58 && v25 < v57)
            {
              v57 = v25;
              v58 = ScoreAllowBackoff_updateNodeInSequence;
            }
            v28 = v59;
            if (ScoreAllowBackoff_updateNodeInSequence + v17 < v59)
              v28 = ScoreAllowBackoff_updateNodeInSequence + v17;
            v59 = v28;
            v16 += v11 & v19;
            v19 = 0;
          }
          else
          {
            *(v18 - 1) = 20000;
          }
          v17 -= v14;
          v18 -= 5;
          --v11;
        }
        while (v11);
        if (v16)
        {
          v29 = v52;
          *((_BYTE *)v53 + 19) = v16;
          v2 = v56;
          v30 = *((unsigned int *)v56 + 30);
          v31 = v50;
          v32 = (uint64_t)v51;
          if (v30 != *((_DWORD *)v56 + 31))
            goto LABEL_35;
LABEL_34:
          DgnPrimArray<unsigned int>::reallocElts(v32, 1, 1);
          v30 = *(unsigned int *)v31;
          goto LABEL_35;
        }
        v2 = v56;
        v13 = v53;
      }
      v33 = *(_QWORD *)v2[2];
      v34 = 24 * *v13;
      v35 = *(unsigned int *)(v33 + v34);
      *(_DWORD *)(v33 + v34) = 0;
      v29 = v35 & 0xFFFFFF;
      v32 = (uint64_t)v2[10] + ((v35 >> 20) & 0xFF0);
      v31 = (char *)(v32 + 8);
      v30 = *(unsigned int *)(v32 + 8);
      if (v30 == *(_DWORD *)(v32 + 12))
        goto LABEL_34;
LABEL_35:
      *(_DWORD *)(*(_QWORD *)v32 + 4 * v30) = v29;
      ++*(_DWORD *)v31;
      v5 = *((_DWORD *)v2 + 26);
      if (!v5)
        goto LABEL_38;
    }
  }
  v57 = -1;
  v59 = 20000;
LABEL_38:
  *((_WORD *)v1 + 126) = v57;
  *((_DWORD *)v1 + 64) = v59;
  v36 = *((_DWORD *)v2 + 30);
  v37 = *((_DWORD *)v2 + 27);
  v38 = v36;
  if (v36 > v37)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v2 + 12), v36 - v37, 0);
    v38 = *((_DWORD *)v2 + 30);
  }
  *((_DWORD *)v2 + 26) = v36;
  if (v38 >= 1)
  {
    v39 = v2[14];
    v40 = v2[12];
    v41 = v38 - 1;
    do
    {
      *(_DWORD *)v40 = *((_DWORD *)v39 + v41);
      v40 = (PelScoreCache *)((char *)v40 + 4);
      --v41;
    }
    while (v41 != -1);
  }
  *((_DWORD *)v2 + 30) = 0;
  v42 = *((_DWORD *)v1 + 60);
  v43 = *((_DWORD *)v2 + 1);
  if (v42 < v43)
  {
    *(_DWORD *)v2 = *((_DWORD *)v1 + 61) - *((_DWORD *)v1 + 57);
    *((_DWORD *)v2 + 1) = v42;
    v43 = v42;
  }
  if (v43 <= 19999)
  {
    v44 = *((_DWORD *)v2 + 1) + PelScoreCache::getScoreNoBackoff(v2[40], 0) - *((_DWORD *)v1 + 59);
    v45 = *((_DWORD *)v1 + 64);
    v46 = v44 - v45;
    v47 = 20000;
    if (v44 >= 20000)
      v46 = 20000;
    if (v45 <= 19999)
      v48 = v46;
    else
      v48 = v44;
    if (v48 <= *((_DWORD *)v1 + 58))
    {
      if (v44 < v45)
      {
        *((_DWORD *)v1 + 64) = v44;
        *((_WORD *)v1 + 126) = -1;
        if (v44 >= 20000)
          v46 = 20000;
        else
          v46 = 0;
        v45 = v44;
      }
      if (v45 <= 19999)
        v47 = v46;
      else
        v47 = v44;
    }
    *((_DWORD *)v2 + 1) = v47;
  }
  return LexTreeNetScorer::updateTrueBestPel((uint64_t)v1);
}

uint64_t LexTreeNetScorer::getList(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  _DWORD *v6;
  uint64_t result;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v6 = (_DWORD *)(a1 + 151904);
  v11 = 0;
  result = ReturnListMgr::finishList(a1 + 151520, a2, a3, &v11);
  v8 = v6[1] + *(_DWORD *)(a3 + 8);
  ++*v6;
  v6[1] = v8;
  v9 = v6[3] + a4;
  v6[2] += v11;
  v6[3] = v9;
  v10 = v6[4];
  if (v10 <= a4)
    v10 = a4;
  v6[4] = v10;
  return result;
}

uint64_t LexTreeNetScorer::seedTreeAndEndWords(uint64_t result, uint64_t a2, int a3, signed int a4)
{
  _DWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  __int16 v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;

  v6 = (_DWORD *)result;
  v7 = *(_QWORD *)(result + 151480);
  v8 = *(unsigned __int8 *)(v7 + 128);
  if (!*(_BYTE *)(v7 + 128) && *(_DWORD *)(result + 260) > a3)
    *(_DWORD *)(result + 260) = a3;
  v9 = *(unsigned __int16 *)(a2 + 10);
  v10 = *(_DWORD *)(a2 + 4);
  v21 = 0;
  v11 = **(_QWORD **)(result + 151360) + 24 * v10;
  v12 = *(_WORD *)(v11 + 20);
  v13 = *(_DWORD *)(v11 + 4);
  if ((v12 & 0x4000) != 0)
  {
    v21 = v13;
    v15 = 1;
    v16 = &v21;
  }
  else
  {
    if (v13 < 0x400000)
      return result;
    v14 = *(_QWORD *)&v13 & 0x3FFFFFLL;
    v15 = v13 >> 22;
    v16 = (unsigned int *)(**(_QWORD **)(result + 151368) + 4 * v14);
  }
  v17 = v15;
  do
  {
    v18 = (*v16 >> 22) - v9;
    if (v18 >= v6[53])
      v18 = v6[53];
    v19 = v18 + a3;
    if (v8 && v19 < v6[65])
      v6[65] = v19;
    if (v19 > v6[52])
      break;
    v20 = *v16++;
    result = ReturnListMgr::addToReturnList((ReturnListMgr *)(v6 + 37880), a4, v6[55], v20 & 0x3FFFFF, v19);
    --v17;
  }
  while (v17);
  return result;
}

unint64_t LexTreeNetScorer::seedSuccessors(unint64_t this, unsigned int a2, int a3, unsigned int a4, int a5, int a6, __int16 a7)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  __int16 v60;
  unint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  __int16 *v67;
  __int16 v68;
  _WORD *v69;
  __int16 v70;
  uint64_t v71;
  __int16 *v72;
  __int16 v73;
  __int16 v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  _WORD *v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  __int16 *v84;
  __int16 v85;
  __int16 v86;
  int v87;
  BOOL v88;
  int v89;
  unsigned int *v90;
  int v91;
  __int16 v92;
  char v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  uint64_t v99;
  unsigned int v100;
  int v101;

  v8 = this;
  v9 = this + 151360;
  v10 = **(_QWORD **)(this + 151360);
  v11 = a2;
  v12 = *(unsigned __int16 *)(v10 + 24 * a2 + 18);
  v13 = *(_DWORD *)(this + 151452);
  v14 = *(_DWORD *)(this + 151448) + v12;
  if (v14 > v13)
  {
    v15 = a6;
    this = DgnPrimArray<unsigned int>::reallocElts(this + 151440, v14 - v13, 1);
    a6 = v15;
    v10 = **(_QWORD **)v9;
    v12 = *(unsigned __int16 *)(v10 + 24 * v11 + 18);
  }
  *(_QWORD *)(v9 + 504) += v12;
  if (v12)
  {
    v89 = a6;
    v101 = a3;
    v100 = v11;
    do
    {
      v16 = v12 - 1;
      v17 = (*(_DWORD *)(v10 + 24 * v11 + 8) + v12 - 1);
      v18 = *(unsigned int *)(v10 + 24 * v17);
      if ((_DWORD)v18)
      {
        if (!*(_BYTE *)(v8 + 33)
          || *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * ((*(_WORD *)(v10 + 24 * v17 + 20) & 0x1FFFu) - a3))
           + a6 <= *(_DWORD *)(*(_QWORD *)(v9 + 144) + 4 * *(unsigned __int16 *)(v10 + 24 * v17 + 16)))
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * (v18 >> 24))
              + *(_DWORD *)(*(_QWORD *)(v9 + 16) + 4 * (v18 >> 24)) * (v18 & 0xFFFFFF);
          *(_WORD *)(v19 + 26) = a6;
          *(_WORD *)(v19 + 28) = a7;
        }
      }
      else
      {
        v20 = v10 + 24 * v17;
        v21 = *(_WORD *)(v20 + 20);
        v22 = v21 & 0x1FFF;
        v23 = (v21 & 0x1FFF) - a3;
        v24 = *(unsigned __int16 *)(v20 + 16);
        if (*(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v23) + a6 <= *(_DWORD *)(*(_QWORD *)(v9 + 144) + 4 * v24))
        {
          v25 = v21;
          v26 = *(_QWORD *)v8;
          v27 = *(_DWORD *)(*(_QWORD *)v8 + 4 * v24);
          v28 = 1;
          if (v25 < 0)
          {
            v31 = v17;
            LODWORD(v29) = v17;
          }
          else
          {
            v29 = v17;
            do
            {
              LODWORD(v29) = *(_DWORD *)(v10 + 24 * v29 + 8);
              ++v28;
              v30 = v10 + 24 * v29;
              v27 += *(_DWORD *)(v26 + 4 * *(unsigned __int16 *)(v30 + 16));
            }
            while ((*(__int16 *)(v30 + 20) & 0x80000000) == 0);
            v31 = v29;
          }
          ++*(_QWORD *)(v9 + 512);
          *(_QWORD *)(v9 + 520) += v27;
          v32 = *(_DWORD *)(v8 + 56);
          if (v32 <= a4)
          {
            v35 = *(_DWORD *)(*(_QWORD *)(v9 + 120) + 44);
            v36 = v35 * (a4 + 1 - v32);
            if (v36 >= 20000)
              v34 = 20000;
            else
              v34 = v36;
            v37 = v35 * v28;
            if (v34 + v35 * v28 > 20000)
              v37 = 20000 - v34;
            v33 = v37 / v27;
          }
          else
          {
            LOBYTE(v33) = 0;
            LOWORD(v34) = 0;
          }
          v38 = v27 + 1;
          v39 = *(_DWORD *)(*(_QWORD *)(v9 + 16) + 4 * v38);
          v40 = *(_WORD *)(v10 + 24 * v29 + 18);
          v41 = *(_QWORD *)(v9 + 64);
          v42 = v41 + 16 * v38;
          v45 = *(_DWORD *)(v42 + 8);
          v43 = (unsigned int *)(v42 + 8);
          v44 = v45;
          v46 = 16 * v38;
          if (v45)
          {
            v47 = v44 - 1;
            v48 = *(_DWORD *)(*(_QWORD *)(v41 + 16 * v38) + 4 * v47);
            *v43 = v47;
          }
          else
          {
            v99 = 16 * v38;
            v49 = *(_QWORD *)(v9 + 48) + 16 * v38;
            v50 = *(_DWORD *)(v49 + 8);
            v51 = *(_DWORD *)(v49 + 12);
            v52 = (unsigned int *)(v49 + 8);
            v53 = v50 + v39;
            if (v53 > v51)
            {
              v94 = v34;
              v95 = v31;
              v97 = v12;
              v96 = v22;
              v92 = *(_WORD *)(v10 + 24 * v29 + 18);
              v93 = v33;
              v91 = *(_DWORD *)(*(_QWORD *)(v9 + 16) + 4 * v38);
              v90 = v52;
              DgnPrimArray<char>::reallocElts(*(_QWORD *)(v9 + 48) + 16 * v38, v53 - v51, 1);
              v52 = v90;
              v39 = v91;
              v40 = v92;
              LOBYTE(v33) = v93;
              LOWORD(v34) = v94;
              v31 = v95;
              v22 = v96;
              v38 = v27 + 1;
              v12 = v97;
              a6 = v89;
              v53 = *v90 + v91;
              v10 = **(_QWORD **)v9;
              v26 = *(_QWORD *)v8;
            }
            *v52 = v53;
            v54 = *(_QWORD *)(v9 + 32);
            v48 = *(_DWORD *)(v54 + 4 * v38);
            *(_DWORD *)(v54 + 4 * v38) = v48 + 1;
            v46 = v99;
          }
          v55 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + v46) + (v48 * v39);
          v56 = (*(unsigned __int16 *)(v10 + 24 * v29 + 20) >> 13) & 1;
          *(_DWORD *)v55 = v17;
          *(_DWORD *)(v55 + 4) = v31;
          *(_WORD *)(v55 + 8) = v34;
          *(_WORD *)(v55 + 10) = v22;
          *(_WORD *)(v55 + 12) = v28 + a4;
          *(_WORD *)(v55 + 14) = v40;
          *(_BYTE *)(v55 + 16) = v33;
          *(_BYTE *)(v55 + 17) = v56;
          *(_BYTE *)(v55 + 18) = v38 - 2;
          *(_QWORD *)(v55 + 20) = 0x4E2000000000FFFFLL;
          *(_BYTE *)(v55 + 19) = -1;
          *(_WORD *)(v55 + 28) = -1;
          v57 = v10 + 24 * v17;
          this = *(unsigned __int16 *)(v57 + 16);
          LODWORD(v58) = *(_DWORD *)(v26 + 4 * this);
          if (v23)
          {
            v59 = v23 / v58;
            if (v58 < 2)
            {
              v60 = 0;
            }
            else
            {
              v23 -= v23 / v58 * (v58 - 1);
              v60 = v59;
            }
          }
          else
          {
            v60 = 0;
          }
          a3 = v101;
          v11 = v100;
          v61 = v55 + 30;
          v62 = *(unsigned __int8 *)(v9 + 128);
          if (v58 <= 1)
            v58 = 1;
          else
            v58 = v58;
          if (*(_BYTE *)(v9 + 128))
          {
            v63 = v16;
            v64 = v12;
            LODWORD(this) = *(_DWORD *)(v10 + 24 * v17 + 12) & 0xFFFFFF;
            v65 = **(_QWORD **)(v9 + 136);
            v66 = *(_QWORD *)(v8 + 184);
            do
            {
              v67 = (__int16 *)(v65 + 4 * this);
              v68 = *v67;
              v69 = (_WORD *)(v66 + 4 * (unsigned __int16)v67[1]);
              v70 = v69[1];
              LOWORD(v69) = *v69;
              *(_WORD *)v61 = v68;
              *(_WORD *)(v61 + 2) = v70 + v23;
              *(_WORD *)(v61 + 4) = (_WORD)v69;
              *(_DWORD *)(v61 + 6) = -45536;
              v61 += 10;
              this = (this + 1);
              LOWORD(v23) = v60;
              --v58;
            }
            while (v58);
            v12 = v64;
            v16 = v63;
          }
          else
          {
            LODWORD(this) = (this + *(_DWORD *)(v8 + 48) * a5) * *(_DWORD *)(v8 + 52);
            v71 = *(_QWORD *)(v8 + 152);
            do
            {
              v72 = (__int16 *)(v71 + 6 * this);
              v73 = *v72;
              v74 = v72[2] + v23;
              LOWORD(v72) = v72[1];
              *(_WORD *)v61 = v73;
              *(_WORD *)(v61 + 2) = v74;
              *(_WORD *)(v61 + 4) = (_WORD)v72;
              *(_DWORD *)(v61 + 6) = -45536;
              v61 += 10;
              this = (this + 1);
              LOWORD(v23) = v60;
              --v58;
            }
            while (v58);
          }
          while (v61 <= v55 + 20 + 10 * (int)v27)
          {
            v75 = *(_DWORD *)(v10 + 24 * v17 + 8);
            v76 = *(unsigned __int16 *)(v10 + 24 * v75 + 16);
            LODWORD(this) = *(_DWORD *)(v26 + 4 * v76);
            if (v62)
            {
              v77 = *(_DWORD *)(v10 + 24 * v75 + 12) & 0xFFFFFF;
              v78 = **(_QWORD **)(v9 + 136);
              v79 = *(_QWORD *)(v8 + 184);
              if (this <= 1)
                this = 1;
              else
                this = this;
              do
              {
                v80 = (_WORD *)(v78 + 4 * v77);
                HIDWORD(v81) = *(_DWORD *)(v79 + 4 * (unsigned __int16)v80[1]);
                LODWORD(v81) = HIDWORD(v81);
                *(_WORD *)v61 = *v80;
                *(_DWORD *)(v61 + 2) = v81 >> 16;
                *(_DWORD *)(v61 + 6) = -45536;
                v61 += 10;
                ++v77;
                --this;
              }
              while (this);
            }
            else
            {
              v82 = (v76 + *(_DWORD *)(v8 + 48) * *(unsigned __int16 *)(v10 + 24 * v17 + 16))
                  * *(_DWORD *)(v8 + 52);
              v83 = *(_QWORD *)(v8 + 152);
              if (this <= 1)
                this = 1;
              else
                this = this;
              do
              {
                v84 = (__int16 *)(v83 + 6 * v82);
                v85 = *v84;
                v86 = v84[2];
                LOWORD(v84) = v84[1];
                *(_WORD *)v61 = v85;
                *(_WORD *)(v61 + 2) = v86;
                *(_WORD *)(v61 + 4) = (_WORD)v84;
                *(_DWORD *)(v61 + 6) = -45536;
                v61 += 10;
                ++v82;
                --this;
              }
              while (this);
            }
            LODWORD(v17) = v75;
          }
          v87 = v48 | ((v27 + 1) << 24);
          *(_DWORD *)v57 = v87;
          *(_DWORD *)(*(_QWORD *)(v9 + 80) + 4 * (*(_DWORD *)(v9 + 88))++) = v87;
          *(_WORD *)(v55 + 26) = a6;
          *(_WORD *)(v55 + 28) = a7;
          *(_BYTE *)(v55 + 19) = 0;
        }
      }
      v88 = v12 <= 1;
      v12 = v16;
    }
    while (!v88);
  }
  return this;
}

uint64_t LexTreeNetScorer::updateTrueBestPel(uint64_t this)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int i;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  __int16 *v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  char *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  int v49;
  int v50;

  v1 = (_DWORD *)this;
  v2 = this + 151336;
  v3 = *(_QWORD *)(this + 151480);
  v4 = *(_DWORD *)(v3 + 76);
  v50 = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(this + 151340) = 20000;
  v5 = *(_DWORD *)(this + 200);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = (_DWORD *)(this + 264);
    v10 = -5000;
    v11 = 37768;
    do
    {
      if (*v9)
      {
        this = v1[58];
        if (v10 - v1[64] > (int)this)
          break;
        v6 += *v9;
        *v9 = 0;
        if (v6 < v5)
          v12 = v8;
        else
          v12 = v10;
        if (v7)
        {
          v7 = 1;
        }
        else
        {
          v8 = v12;
          v7 = v6 >= v5;
        }
      }
      ++v10;
      ++v9;
      --v11;
    }
    while (v11);
    if (v7)
    {
      v13 = v8 - v1[64];
      *(_DWORD *)(v2 + 4) = v13;
      if (v13 < v1[58])
        v1[58] = v13;
    }
  }
  for (i = *(_DWORD *)(v2 + 112); i; i = *(_DWORD *)(v2 + 112))
  {
    v15 = i - 1;
    v16 = *(unsigned int *)(*(_QWORD *)(v2 + 104) + 4 * v15);
    *(_DWORD *)(v2 + 112) = v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 40) + 4 * (v16 >> 24)) * (v16 & 0xFFFFFF);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + 16 * (v16 >> 24));
    v19 = (unsigned int *)(v18 + v17);
    v20 = *(unsigned __int8 *)(v18 + v17 + 19);
    if (!*(_BYTE *)(v18 + v17 + 19))
      goto LABEL_39;
    v21 = 0;
    v22 = v1[64];
    v23 = v1[58];
    v24 = (__int16 *)(v18 + v17 + 10 * *(unsigned __int8 *)(v18 + v17 + 19) + 26);
    v25 = -1;
    do
    {
      v26 = *v24;
      v27 = v26 - v22;
      if (v26 >= 20000)
        v27 = 20000;
      if (v22 <= 19999)
        v26 = v27;
      if (v26 <= v23)
      {
        if (v26 <= v4)
          LOWORD(v26) = v4;
        *v24 = v26;
        v28 = (unsigned __int16)v24[1];
        if (v1[62] > v28)
          v1[62] = v28;
        ++*(_DWORD *)v2;
        v21 += v25 & v20;
        v25 = 0;
      }
      else
      {
        *v24 = 20000;
      }
      v24 -= 5;
      --v20;
    }
    while (v20);
    if (v21)
    {
      *((_BYTE *)v19 + 19) = v21;
      *((_WORD *)v19 + 13) = 20000;
      v29 = *(unsigned int *)(v2 + 128);
      if (v29 == *(_DWORD *)(v2 + 132))
      {
        this = DgnPrimArray<unsigned int>::reallocElts(v2 + 120, 1, 1);
        v29 = *(unsigned int *)(v2 + 128);
      }
      *(_DWORD *)(*(_QWORD *)(v2 + 120) + 4 * v29) = v16;
      ++*(_DWORD *)(v2 + 128);
      if (*((_BYTE *)v19 + 17))
      {
        v30 = *((unsigned __int8 *)v19 + 18);
        if (v21 == v30 + 1)
        {
          v31 = (char *)v19 + 10 * v21;
          v32 = *((__int16 *)v31 + 13);
          v33 = *((unsigned __int16 *)v31 + 11);
          v34 = v33 + v32;
          if (v50 == 1)
          {
            v35 = *((unsigned __int16 *)v19 + 5 * *((unsigned __int8 *)v19 + 18) + 11)
                + *((__int16 *)v19 + 5 * *((unsigned __int8 *)v19 + 18) + 13);
            v36 = v35 + v33;
            if (v35 >= v32)
              v30 = v21;
            else
              v34 = v36;
          }
          else
          {
            v30 = v21;
          }
          this = LexTreeNetScorer::seedTreeAndEndWords((uint64_t)v1, (uint64_t)v19, v34, v1[56] + *((unsigned __int16 *)v19 + 5 * v30 + 14));
        }
      }
    }
    else
    {
LABEL_39:
      v37 = **(_QWORD **)(v2 + 24);
      v38 = 24 * *v19;
      v39 = *(unsigned int *)(v37 + v38);
      *(_DWORD *)(v37 + v38) = 0;
      v40 = *(_QWORD *)(v2 + 88) + ((v39 >> 20) & 0xFF0);
      v42 = (_DWORD *)(v40 + 8);
      v41 = *(unsigned int *)(v40 + 8);
      if (v41 == *(_DWORD *)(v40 + 12))
      {
        this = DgnPrimArray<unsigned int>::reallocElts(*(_QWORD *)(v2 + 88) + ((v39 >> 20) & 0xFF0), 1, 1);
        v41 = *v42;
      }
      *(_DWORD *)(*(_QWORD *)v40 + 4 * v41) = v39 & 0xFFFFFF;
      ++*v42;
    }
  }
  v43 = *(_DWORD *)(v2 + 128);
  v44 = *(_DWORD *)(v2 + 116);
  v45 = v43;
  if (v43 > v44)
  {
    this = DgnPrimArray<unsigned int>::reallocElts(v2 + 104, v43 - v44, 0);
    v45 = *(_DWORD *)(v2 + 128);
  }
  *(_DWORD *)(v2 + 112) = v43;
  if (v45 >= 1)
  {
    v46 = *(_QWORD *)(v2 + 120);
    v47 = *(_DWORD **)(v2 + 104);
    v48 = v45 - 1;
    do
      *v47++ = *(_DWORD *)(v46 + 4 * v48--);
    while (v48 != -1);
  }
  *(_DWORD *)(v2 + 128) = 0;
  v49 = *(_DWORD *)(v2 + 12);
  if (v49 < v1[65])
    v1[65] = v49;
  return this;
}

unint64_t DgnPrimStructArray<PelIdAndStayAndPassPen>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 6 * v6, 6 * v5, 6 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 6;
  *(_QWORD *)a1 = v8;
  return result;
}

void MrecInitModule_memchunk_mrecutil(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;

  if (!gParDiagnosticVirtualCalculationInterval)
  {
    v0 = MemChunkAlloc(0x38uLL, 0);
    v10 = 0x3E8FFFFFFFFLL;
    v1 = (_QWORD *)IntGlobalParamBase::IntGlobalParamBase((uint64_t)v0, (uint64_t)"DiagnosticVirtualCalculationInterval", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, 16, &v10, (uint64_t)SetShadowDiagnosticVirtualCalculationInterval);
    *v1 = &unk_24C214A58;
    gParDiagnosticVirtualCalculationInterval = (uint64_t)v1;
    gShadowDiagnosticVirtualCalculationInterval = 16;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticVirtualCalculationInterval);
  }
  if (!gParShowActualMemoryAndChunkOverheadStats)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "ShowActualMemoryAndChunkOverheadStats", &byte_209A88803, &byte_209A88803, 0, SetShadowShowActualMemoryAndChunkOverheadStats, 0);
    *v3 = &unk_24C214CE8;
    gParShowActualMemoryAndChunkOverheadStats = (uint64_t)v3;
    gShadowShowActualMemoryAndChunkOverheadStats = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParShowActualMemoryAndChunkOverheadStats);
  }
  if (!gParShowMemChunkStatsOnThreadExit)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "ShowMemChunkStatsOnThreadExit", &byte_209A88803, &byte_209A88803, 0, SetShadowShowMemChunkStatsOnThreadExit, 0);
    *v5 = &unk_24C214CE8;
    gParShowMemChunkStatsOnThreadExit = (uint64_t)v5;
    gShadowShowMemChunkStatsOnThreadExit = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParShowMemChunkStatsOnThreadExit);
  }
  if (!gParShowMemStatsOnThreadExit)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "ShowMemStatsOnThreadExit", &byte_209A88803, &byte_209A88803, 0, SetShadowShowMemStatsOnThreadExit, 0);
    *v7 = &unk_24C214CE8;
    gParShowMemStatsOnThreadExit = (uint64_t)v7;
    gShadowShowMemStatsOnThreadExit = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParShowMemStatsOnThreadExit);
  }
  if (!gParShowVirtualPrivateDetailsOnCalc)
  {
    v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "ShowVirtualPrivateDetailsOnCalc", &byte_209A88803, &byte_209A88803, 0, SetShadowShowVirtualPrivateDetailsOnCalc, 0);
    *v9 = &unk_24C214CE8;
    gParShowVirtualPrivateDetailsOnCalc = (uint64_t)v9;
    gShadowShowVirtualPrivateDetailsOnCalc = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParShowVirtualPrivateDetailsOnCalc);
  }
}

uint64_t GetRegionChecksum(MemChunkRegion *a1)
{
  MemChunkRegion **v2;

  if (!a1)
  {
    if (MemChunkRegion::smTlsID != -1)
    {
      v2 = (MemChunkRegion **)pthread_getspecific(MemChunkRegion::smTlsID);
      if (v2)
      {
        a1 = *v2;
        if (a1)
          return MemChunkRegion::calculateChecksum(a1);
        pthread_setspecific(MemChunkRegion::smTlsID, 0);
      }
    }
    a1 = (MemChunkRegion *)&gGlobalMemChunkRegion;
  }
  return MemChunkRegion::calculateChecksum(a1);
}

uint64_t MemChunkRegion::calculateChecksum(MemChunkRegion *this)
{
  int8x16_t *v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  int8x16_t v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x8_t v8;
  int8x16_t *v9;
  int v10;

  v1 = (int8x16_t *)*((_QWORD *)this + 162);
  if (!v1)
    return 0;
  result = 0;
  do
  {
    v3 = ((v1[1].i64[1] * (v1[2].i64[0] + 16) + 31) & 0x3FFFF0000) + 0x10000;
    if ((v3 & 0x3FFFF0000) != 0)
    {
      v4 = (v3 >> 2) & 0xFFFFC000;
      if (v4)
      {
        v5 = (int8x16_t)result;
        v6 = v1;
        do
        {
          v7 = *v6++;
          v5 = veorq_s8(v7, v5);
          v4 -= 4;
        }
        while (v4);
        v8 = veor_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
        result = (v8.i32[0] ^ v8.i32[1]);
      }
      else
      {
        v9 = v1;
        do
        {
          v10 = v9->i32[0];
          v9 = (int8x16_t *)((char *)v9 + 4);
          result = v10 ^ result;
          --v4;
        }
        while (v4);
      }
    }
    v1 = (int8x16_t *)v1->i64[1];
  }
  while (v1);
  return result;
}

void ShowDeltaMemSummary(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;

  if (!a1)
  {
    if (MemChunkRegion::smTlsID == -1)
      goto LABEL_6;
    v7 = pthread_getspecific(MemChunkRegion::smTlsID);
    if (!v7)
      goto LABEL_6;
    a1 = (_QWORD *)*v7;
    if (!a1)
    {
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_6:
      a1 = &gGlobalMemChunkRegion;
    }
  }
  xlprintf("%-30.30s dT %9lld, dC %9lld, dM %8lld\n", a2, (uint64_t)a3, a4, a5, a2, a1[33540] - *a3, a1[33541] - a3[1], a1[33542] - a3[2]);
}

void MemStatsDisplayFromRef(MemChunkRegion *a1, uint64_t a2, int a3, BOOL a4, const char *a5, uint64_t a6, uint64_t a7)
{
  MemChunkRegion *v12;
  MemChunkRegion **v13;

  v12 = a1;
  if (!a1)
  {
    if (MemChunkRegion::smTlsID != -1)
    {
      v13 = (MemChunkRegion **)pthread_getspecific(MemChunkRegion::smTlsID);
      if (v13)
      {
        v12 = *v13;
        if (*v13)
          goto LABEL_7;
        pthread_setspecific(MemChunkRegion::smTlsID, 0);
      }
    }
    v12 = (MemChunkRegion *)&gGlobalMemChunkRegion;
  }
LABEL_7:
  if (a3)
    MrecInitModule_sdpres_sdapi();
  MemChunkRegion::memStatsDisplayFromRef(v12, a2, 0, 0, a5, a6, a7, &byte_209A88803);
}

void MemChunkRegion::memStatsDisplayFromRef(MemChunkRegion *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, const char *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v16 = *((_QWORD *)this + 33541);
  v17 = *((_QWORD *)this + 33544);
  xlprintf("%sAlloc: %s\n", a2, a3, a4, (uint64_t)a5, a8, "------------------------------------------------------------------------");
  if (a5)
    xgenprintf(1, a2, "%sAlloc: %s\n", v18, v19, a8, a5);
  MemChunkRegion::printSomeStats(this, 1, a2, a3, a4, (v16 | a6 | v17 | a7) != 0, a6, a7, a8);
}

uint64_t *MemChunkRegion::newMemChunkRegion(MemChunkRegion *this, const char *a2)
{
  uint64_t *v3;
  _QWORD *v4;

  v3 = MemChunkAlloc(0x418B0uLL, (MemChunkRegion *)&gGlobalMemChunkRegion);
  bzero(v3, 0x418B0uLL);
  MemChunkRegion::initMemChunkRegion((MemChunkRegion *)v3, (const char *)this);
  v4 = MemChunkRegion::smpMemChunkRegions;
  v3[160] = (uint64_t)MemChunkRegion::smpMemChunkRegions;
  v4[159] = v3;
  MemChunkRegion::smpMemChunkRegions = v3;
  return v3;
}

void MemChunkRegion::initMemChunkRegion(MemChunkRegion *this, const char *a2)
{
  size_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t i;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  _QWORD *v20;

  *((_BYTE *)this + 1264) = 0;
  DgnPRandom::initialize((uint64_t)this + 4, 0);
  *(_OWORD *)((char *)this + 1272) = 0u;
  *(_OWORD *)((char *)this + 1288) = 0u;
  bzero((char *)this + 6424, 0x3FF98uLL);
  v4 = strlen(a2);
  if (v4 + 1 < 0x401)
    v5 = v4 + 1;
  else
    v5 = 1024;
  strcpy((char *)this + 240, a2)[v5] = 0;
  v6 = (_QWORD *)((char *)this + 1304);
  for (i = 8; i != 20; i += 4)
  {
    MemChunkAddChunk(i, 1024, v6, (uint64_t)this);
    v6 += 5;
  }
  v8 = (_QWORD *)((char *)this + 1424);
  do
  {
    MemChunkAddChunk(i, 512, v8, (uint64_t)this);
    v8 += 5;
    i += 4;
  }
  while (i != 36);
  v9 = (_QWORD *)((char *)this + 1584);
  do
  {
    MemChunkAddChunk(i, 256, v9, (uint64_t)this);
    v9 += 5;
    i += 4;
  }
  while (i != 68);
  v10 = 0;
  v11 = 15;
  v12 = 80;
  v13 = 16;
  v14 = 128;
  do
  {
    v15 = 0;
    v16 = v13;
    v17 = v12;
    v18 = v11;
    v19 = v12;
    do
    {
      if (v10 == 4 && v15 == 3)
        break;
      MemChunkAddChunk(v19, v14, (_QWORD *)this + 5 * v18 + 5 * v15++ + 163, (uint64_t)this);
      v19 += v16;
    }
    while (v15 != 4);
    v11 = v18 + v15;
    v12 = 2 * v17;
    v13 = 2 * v16;
    if (v14 < 4)
      v14 = 1;
    else
      v14 >>= 1;
    ++v10;
  }
  while (v10 != 5);
  MemChunkAddChunk(0x800uLL, 4, (_QWORD *)this + 5 * v11 + 163, (uint64_t)this);
  MemChunkAddChunk(0xC00uLL, 4, (_QWORD *)this + 5 * v11 + 168, (uint64_t)this);
  MemChunkAddChunk(0x1000uLL, 4, (_QWORD *)this + 5 * v11 + 173, (uint64_t)this);
  MemChunkAddChunk(0x1800uLL, 4, (_QWORD *)this + 5 * v11 + 178, (uint64_t)this);
  MemChunkAddChunk(0x2000uLL, 4, (_QWORD *)this + 5 * v11 + 183, (uint64_t)this);
  MemChunkAddChunk(0x3000uLL, 4, (_QWORD *)this + 5 * v11 + 188, (uint64_t)this);
  MemChunkAddChunk(0x3C00uLL, 4, (_QWORD *)this + 5 * v11 + 193, (uint64_t)this);
  MemChunkAddChunk(0x5400uLL, 3, (_QWORD *)this + 5 * v11 + 198, (uint64_t)this);
  v20 = (_QWORD *)((char *)this + 40 * v11 + 1624);
  MemChunkAddChunk(0x7C00uLL, 2, v20, (uint64_t)this);
  *((_BYTE *)this + 1264) = 1;
  if (v20[4] != 32736)
    errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/memchunk.cpp", 2544, "mrecutil/memchunk", 2, "%llu %llu", v20[4], 32736);
}

__n128 MemChunkRegion::getRegionStats@<Q0>(MemChunkRegion *this@<X0>, uint64_t a2@<X8>)
{
  MemChunkRegion **v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  if (!this)
  {
    if (MemChunkRegion::smTlsID == -1)
      goto LABEL_6;
    v4 = (MemChunkRegion **)pthread_getspecific(MemChunkRegion::smTlsID);
    if (!v4)
      goto LABEL_6;
    this = *v4;
    if (!this)
    {
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_6:
      this = (MemChunkRegion *)&gGlobalMemChunkRegion;
    }
  }
  v5 = *((_OWORD *)this + 16773);
  *(_OWORD *)(a2 + 32) = *((_OWORD *)this + 16772);
  *(_OWORD *)(a2 + 48) = v5;
  v6 = *((_OWORD *)this + 16775);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 16774);
  *(_OWORD *)(a2 + 80) = v6;
  result = *((__n128 *)this + 16770);
  v8 = *((_OWORD *)this + 16771);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v8;
  return result;
}

_QWORD *MemChunkRegion::resetInternalLocalMaxAllocBytes(_QWORD *this, MemChunkRegion *a2)
{
  uint64_t *v2;

  if (!this)
  {
    if (MemChunkRegion::smTlsID == -1)
      goto LABEL_6;
    v2 = (uint64_t *)pthread_getspecific(MemChunkRegion::smTlsID);
    if (!v2)
      goto LABEL_6;
    this = (_QWORD *)*v2;
    if (!this)
    {
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_6:
      this = &gGlobalMemChunkRegion;
    }
  }
  this[33550] = this[33541];
  return this;
}

uint64_t MemChunkRegion::getAndResetInternalLocalMaxAllocBytes(MemChunkRegion *this, MemChunkRegion *a2)
{
  MemChunkRegion **v2;
  _QWORD *v3;
  uint64_t result;

  if (!this)
  {
    if (MemChunkRegion::smTlsID == -1)
      goto LABEL_6;
    v2 = (MemChunkRegion **)pthread_getspecific(MemChunkRegion::smTlsID);
    if (!v2)
      goto LABEL_6;
    this = *v2;
    if (!this)
    {
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_6:
      this = (MemChunkRegion *)&gGlobalMemChunkRegion;
    }
  }
  v3 = (_QWORD *)((char *)this + 268328);
  result = *((_QWORD *)this + 33550);
  v3[9] = *v3;
  return result;
}

void MemChunkRegion::deleteMemChunkRegion(MemChunkRegion *this, MemChunkRegion *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  MemChunkRegion *v6;

  if (this != (MemChunkRegion *)&gGlobalMemChunkRegion)
  {
    v3 = *((_QWORD *)this + 160);
    if (v3)
      *(_QWORD *)(v3 + 1272) = *((_QWORD *)this + 159);
    v4 = *((_QWORD *)this + 159);
    if (v4)
      v5 = (_QWORD *)(v4 + 1280);
    else
      v5 = &MemChunkRegion::smpMemChunkRegions;
    *v5 = v3;
    MemChunkRegion::shutdown(this, 0, 0, 0, 0, &byte_209A88803);
    if (this)
      MemChunkFree(this, v6);
  }
}

void MemChunkRegion::shutdown(MemChunkRegion *this, uint64_t a2, _BOOL4 a3, int a4, BOOL a5, const char *a6)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _BOOL4 v20;

  if ((_DWORD)a2 && a4)
    haveTerminatedSuccessfully();
  v10 = (uint64_t *)*((_QWORD *)this + 162);
  if (*((_QWORD *)this + 161))
    *((_QWORD *)this + 161) = 0;
  if (!v10)
  {
    v17 = 0;
    *((_QWORD *)this + 803) = 0;
LABEL_26:
    bzero((char *)this + 8 * v17 + 6432, 261880 - 8 * v17);
    goto LABEL_27;
  }
  do
  {
    while (1)
    {
      v11 = v10;
      v10 = (uint64_t *)v10[1];
      v12 = *v11;
      if (*v11)
        break;
LABEL_13:
      *((_QWORD *)this + 162) = v10;
      if (!v10)
        goto LABEL_16;
    }
    if (*(_DWORD *)(v12 + 24) || *(_QWORD *)(v12 + 16))
    {
      if (this != (MemChunkRegion *)&gGlobalMemChunkRegion)
      {
        v13 = ((v11[3] * (v11[4] + 16) + 31) & 0xFFFFFFFFFFFF0000) + 0x10000;
        do
        {
          *v11 = *(_QWORD *)(v12 + 16);
          munmap((void *)v12, v13);
          v12 = *v11;
        }
        while (*v11);
      }
      goto LABEL_13;
    }
    *((_QWORD *)this + 162) = v10;
    v14 = ((v11[3] * (v11[4] + 16) + 31) & 0xFFFFFFFFFFFF0000) + 0x10000;
    munmap((void *)v12, v14);
    *((_QWORD *)this + 33541) -= v14;
    --*((_QWORD *)this + 33544);
  }
  while (v10);
LABEL_16:
  v15 = *((_QWORD *)this + 162);
  *((_QWORD *)this + 803) = 0;
  if (!v15)
  {
    v17 = 0;
    goto LABEL_26;
  }
  v16 = 0;
  do
  {
    v17 = *(_QWORD *)(v15 + 32);
    if (v16 + 1 < v17)
    {
      v18 = ~v16 + v17;
      v19 = (_QWORD *)((char *)this + 8 * v16 + 6432);
      do
      {
        *v19++ = v15;
        --v18;
      }
      while (v18);
    }
    v15 = *(_QWORD *)(v15 + 8);
    v16 = v17;
  }
  while (v15);
  if ((v17 + 1) >> 5 <= 0x3FE)
    goto LABEL_26;
LABEL_27:
  *((_BYTE *)this + 1264) = 0;
  v20 = gShadowShowMemStatsOnThreadExit != 0;
  if ((_DWORD)a2)
    v20 = a3;
  if (v20)
  {
    if ((_DWORD)a2)
    {
      if (haveTerminatedSuccessfully())
        MrecInitModule_sdpres_sdapi();
    }
    MemChunkRegion::memStatsDisplayFromRef(this, 0, a2, 1, (const char *)this + 240, 0, 0, a6);
  }
}

uint64_t MemChunkRegion::getBlockRegion(MemChunkRegion *this, const void *a2)
{
  uint64_t v2;
  char *v3;

  v2 = *((_QWORD *)this - 1);
  if (v2 == -3)
    v3 = (char *)this - 16;
  else
    v3 = (char *)(*(_QWORD *)(v2 + 8) + 16);
  return *(_QWORD *)v3;
}

unint64_t MemChunkSuggestAllocExtraItems(unint64_t a1, unint64_t a2, MemChunkRegion *a3)
{
  MemChunkRegion **v5;
  unint64_t v6;

  if (a3)
    goto LABEL_7;
  if (MemChunkRegion::smTlsID != -1)
  {
    v5 = (MemChunkRegion **)pthread_getspecific(MemChunkRegion::smTlsID);
    if (v5)
    {
      a3 = *v5;
      if (*v5)
        goto LABEL_7;
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
    }
  }
  a3 = (MemChunkRegion *)&gGlobalMemChunkRegion;
LABEL_7:
  if (a1 > 0x7FE0)
    v6 = (a1 + 287) & 0xFFFFFFFFFFFFF000 | 0xEE0;
  else
    v6 = *(_QWORD *)(*((_QWORD *)a3 + a1 + 803) + 32);
  return (v6 - a1) / a2;
}

_QWORD *GetMemChunkRegionAndSuggestSize(_QWORD *a1, unint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  void **v6;
  void **v7;
  _QWORD *result;
  unint64_t v9;

  if (a1)
  {
    v5 = *(a1 - 1);
    if (v5 == -3)
      v6 = (void **)(a1 - 2);
    else
      v6 = (void **)(*(_QWORD *)(v5 + 8) + 16);
    result = *v6;
  }
  else
  {
    if (MemChunkRegion::smTlsID != -1)
    {
      v7 = (void **)pthread_getspecific(MemChunkRegion::smTlsID);
      if (v7)
      {
        result = *v7;
        if (result)
          goto LABEL_11;
        pthread_setspecific(MemChunkRegion::smTlsID, 0);
      }
    }
    result = &gGlobalMemChunkRegion;
  }
LABEL_11:
  if (a2 > 0x7FE0)
    v9 = (a2 + 287) & 0xFFFFFFFFFFFFF000 | 0xEE0;
  else
    v9 = *(_QWORD *)(result[a2 + 803] + 32);
  *a3 = v9;
  return result;
}

uint64_t *MemChunkAlloc(unint64_t a1, MemChunkRegion *a2)
{
  MemChunkRegion *v2;
  MemChunkRegion **v4;
  _QWORD *v5;
  char **v6;
  char *v7;
  uint64_t *v8;
  int v9;
  unint64_t v10;
  int64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v2 = a2;
  if (!a2)
  {
    if (MemChunkRegion::smTlsID != -1)
    {
      v4 = (MemChunkRegion **)pthread_getspecific(MemChunkRegion::smTlsID);
      if (v4)
      {
        v2 = *v4;
        if (*v4)
          goto LABEL_7;
        pthread_setspecific(MemChunkRegion::smTlsID, 0);
      }
    }
    v2 = (MemChunkRegion *)&gGlobalMemChunkRegion;
  }
LABEL_7:
  v5 = (_QWORD *)((char *)v2 + 268320);
  if (a1 > 0x7FE0)
  {
    v10 = (a1 + 31) & 0xFFFFFFFFFFFFF000;
    v11 = v10 + 4096;
    v12 = (char *)mmap(0, v10 + 4096, 3, 4098, -1, 0);
    if (v12 == (char *)-1)
      ThrowNewFailure((uint64_t)v2, v10 + 4096);
    v13 = *((_QWORD *)v2 + 33544);
    v14 = *((_QWORD *)v2 + 33543) + 1;
    *((_QWORD *)v2 + 33543) = v14;
    *((_QWORD *)v2 + 33544) = v13 + 1;
    if (v13 >= *((_QWORD *)v2 + 33545))
    {
      *((_QWORD *)v2 + 33545) = v13 + 1;
      *((_QWORD *)v2 + 33548) = v14;
    }
    if (*((_QWORD *)v2 + 33546) < v11)
    {
      *((_QWORD *)v2 + 33546) = v11;
      *((_QWORD *)v2 + 33549) = v14;
    }
    v15 = *((_QWORD *)v2 + 33541) + v11;
    *v5 += v11;
    *((_QWORD *)v2 + 33541) = v15;
    if (v15 > *((_QWORD *)v2 + 33550))
      *((_QWORD *)v2 + 33550) = v15;
    if (v15 > *((_QWORD *)v2 + 33551))
      *((_QWORD *)v2 + 33551) = v15;
    if (v15 > *((_QWORD *)v2 + 33542))
    {
      *((_QWORD *)v2 + 33542) = v15;
      *((_QWORD *)v2 + 33547) = v14;
    }
    v16 = &v12[16
             * DgnPRandom::normalizedNext((MemChunkRegion *)((char *)v2 + 4), ((v10 - a1 + 4064) >> 4) + 1)];
    v8 = (uint64_t *)(v16 + 32);
    *((_QWORD *)v16 + 2) = v2;
    *((_QWORD *)v16 + 3) = -3;
    *((_DWORD *)v16 + 3) = v11;
  }
  else
  {
    v6 = (char **)*((_QWORD *)v2 + a1 + 803);
    v7 = *v6;
    if (*v6)
    {
      v8 = *(uint64_t **)v7;
      v9 = *((_DWORD *)v7 + 6) + 1;
    }
    else
    {
      v17 = v6[4];
      v18 = v17 + 16;
      v19 = (((_QWORD)v6[3] * (_QWORD)(v17 + 16) + 31) & 0xFFFFFFFFFFFF0000) + 0x10000;
      v7 = (char *)mmap(0, v19, 3, 4098, -1, 0);
      if (v7 == (char *)-1)
        ThrowNewFailure((uint64_t)v2, v19);
      v20 = *((_QWORD *)v2 + 33544);
      v21 = *((_QWORD *)v2 + 33543) + 1;
      *((_QWORD *)v2 + 33543) = v21;
      *((_QWORD *)v2 + 33544) = v20 + 1;
      if (v20 >= *((_QWORD *)v2 + 33545))
      {
        *((_QWORD *)v2 + 33545) = v20 + 1;
        *((_QWORD *)v2 + 33548) = v21;
      }
      if (*((_QWORD *)v2 + 33546) < v19)
      {
        *((_QWORD *)v2 + 33546) = v19;
        *((_QWORD *)v2 + 33549) = v21;
      }
      v22 = *((_QWORD *)v2 + 33541) + v19;
      *v5 += v19;
      *((_QWORD *)v2 + 33541) = v22;
      if (v22 > *((_QWORD *)v2 + 33550))
        *((_QWORD *)v2 + 33550) = v22;
      if (v22 > *((_QWORD *)v2 + 33551))
        *((_QWORD *)v2 + 33551) = v22;
      if (v22 > *((_QWORD *)v2 + 33542))
      {
        *((_QWORD *)v2 + 33542) = v22;
        *((_QWORD *)v2 + 33547) = v21;
      }
      *((_DWORD *)v7 + 6) = 0;
      v8 = (uint64_t *)(v7 + 48);
      v23 = (_QWORD)(v6[3] - 1) * (_QWORD)v18;
      v24 = &v7[v23 + 48];
      if ((v23 & 0x8000000000000000) == 0)
      {
        v25 = v7 + 64;
        do
        {
          *((_QWORD *)v25 - 3) = v7;
          *((_QWORD *)v25 - 2) = &v17[(_QWORD)v25];
          v25 = &v18[(_QWORD)v25];
        }
        while (v25 - 16 <= v24);
      }
      *(_QWORD *)v24 = 0;
      *(_QWORD *)v7 = v8;
      *((_QWORD *)v7 + 1) = v6;
      v26 = *v6;
      *v6 = v7;
      *((_QWORD *)v7 + 2) = v26;
      v9 = 1;
    }
    *((_DWORD *)v7 + 6) = v9;
    v27 = *v8;
    *(_QWORD *)v7 = *v8;
    if (!v27)
      *v6 = (char *)*((_QWORD *)v7 + 2);
  }
  return v8;
}

uint64_t MemChunkFree(_QWORD *a1, MemChunkRegion *a2)
{
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = *(a1 - 1);
  if (result == -3)
  {
    v9 = *((unsigned int *)a1 - 5);
    v10 = (_QWORD *)(*(a1 - 2) + 268328);
    result = (unint64_t)(a1 - 4) & 0xFFFFFFFFFFFFF000;
    goto LABEL_14;
  }
  v4 = *(uint64_t **)(result + 8);
  v5 = v4[2];
  v6 = *(_DWORD *)(result + 24) - 1;
  *(_DWORD *)(result + 24) = v6;
  if (!v6)
  {
    v11 = *v4;
    if (*v4 == result)
    {
      v13 = *(_QWORD *)(result + 16);
      if (!v13)
        goto LABEL_3;
      *v4 = v13;
    }
    else
    {
      while (v11)
      {
        v12 = v11;
        v11 = *(_QWORD *)(v11 + 16);
        if (v11 == result)
        {
          *(_QWORD *)(v12 + 16) = *(_QWORD *)(result + 16);
          break;
        }
      }
    }
    v10 = (_QWORD *)(v5 + 268328);
    v9 = ((v4[3] * (v4[4] + 16) + 31) & 0xFFFFFFFFFFFF0000) + 0x10000;
LABEL_14:
    result = munmap((void *)result, v9);
    *v10 -= v9;
    --v10[3];
    return result;
  }
LABEL_3:
  v7 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
    v8 = *v4;
    *v4 = result;
    *(_QWORD *)(result + 16) = v8;
  }
  *a1 = v7;
  *(_QWORD *)result = a1;
  return result;
}

void MemChunkRegion::printSomeStats(MemChunkRegion *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, const char *a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if ((a2 & 1) != 0 || (_DWORD)a3)
  {
    v11 = *((_QWORD *)this + 33541);
    v31 = *((_QWORD *)this + 33543);
    v12 = *((_QWORD *)this + 33545);
    v33 = *((_QWORD *)this + 33544);
    v13 = *((_QWORD *)this + 33546);
    v16 = *((_QWORD *)this + 33548);
    v32 = *((_QWORD *)this + 33549);
    v17 = a4;
    v30 = a5;
    xgenprintf(a2, a3, "%sAlloc: Memory alloc bytes: Tot %lldK, Max %lldK (at alloc #%lld)\n", a4, a5, a9, *((_QWORD *)this + 33540) / 1024, *((_QWORD *)this + 33542) / 1024, *((_QWORD *)this + 33547));
    xgenprintf(a2, a3, "%sAlloc: Memory alloc items: Tot %lld, Max %lld (at alloc #%lld)\n", v18, v19, a9, v31, v12, v16);
    xgenprintf(a2, a3, "%sAlloc: Memory alloc largest: %lldK (alloc #%lld)\n", v20, v21, a9, v13 / 1024, v32);
    if (v30)
    {
      if (v17 && (haveTerminatedSuccessfully() & 1) == 0 && a6)
      {
        xgenprintf(a2, a3, "%sAlloc: Finalize not called -- leaks detected.\n", v22, v23, a9);
      }
      else
      {
        if (!a6)
        {
          xgenprintf(a2, a3, "%sAlloc: Detected no leaks.\n", v22, v23, a9, v27, v28, v29);
          return;
        }
        xgenprintf(a2, a3, "%sAlloc: **** Leaks detected! ****\n", v22, v23, a9);
      }
    }
    v24 = v11 - a7;
    if (v11 < a7)
      v24 = v11 - a7 + 1023;
    xgenprintf(a2, a3, "%sAlloc: Memory alloc bytes: Cur %lldK, Ini %lldK, C-I %lldK\n", v22, v23, a9, v11 / 1024, a7 / 1024, v24 >> 10);
    xgenprintf(a2, a3, "%sAlloc: Memory alloc items: Cur %lld, Ini %lld, C-I %lld\n", v25, v26, a9, v33, a8, v33 - a8);
  }
}

void MemChunkInit(void)
{
  int v0;
  pthread_key_t v1;
  pthread_key_t v2;

  v2 = 0;
  v0 = pthread_key_create(&v2, 0);
  v1 = v2;
  if (v0)
    v1 = -1;
  MemChunkRegion::smTlsID = v1;
  MemChunkRegion::initMemChunkRegion((MemChunkRegion *)&gGlobalMemChunkRegion, "MREC first construction -> MREC last destruction:");
}

double MemChunkRegion::resetMaxAlloc(MemChunkRegion *this)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = *((_QWORD *)this + 33541);
  *((_QWORD *)this + 33542) = v1;
  v2 = *((_QWORD *)this + 33543);
  *((_QWORD *)this + 33545) = *((_QWORD *)this + 33544);
  *((_QWORD *)this + 33546) = 0;
  *((_QWORD *)this + 33547) = v2;
  *((_QWORD *)this + 33548) = v2;
  *((_QWORD *)this + 33549) = v2;
  *((_QWORD *)this + 33550) = v1;
  *((_QWORD *)this + 33551) = v1;
  result = 0.0;
  *((_OWORD *)this + 16776) = 0u;
  *((_OWORD *)this + 16777) = 0u;
  *((_OWORD *)this + 16778) = 0u;
  return result;
}

void MemChunkAddChunk(unint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (((a1 + 15) & 0xFFFFFFFFFFFFFFF0) == a1)
  {
    v6 = (uint64_t *)(a4 + 1296);
    v7 = *(_QWORD *)(a4 + 1296);
    if (v7 && *(_QWORD *)(v7 + 32) < a1)
    {
      do
      {
        v8 = v7;
        v7 = *(_QWORD *)(v7 + 8);
      }
      while (v7 && *(_QWORD *)(v7 + 32) < a1);
      v6 = (uint64_t *)(v8 + 8);
    }
    v9 = ((a1 + 16) * a2 + 31) & 0xFFFFFFFFFFFF0000 | 0xFFE0;
    v10 = v9 / (a1 + 16);
    v11 = ((v9 % (a1 + 16) / v10) & 0xFFFFFFFFFFFFFFF0) + a1;
    if (v11 >= 0x7FE1)
    {
      errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/memchunk.cpp", 2335, "mrecutil/memchunk", 1, "%llu %llu", v11, 32736);
      v7 = *v6;
    }
    a3[2] = a4;
    a3[3] = v10;
    a3[4] = v11;
    *a3 = 0;
    a3[1] = v7;
    *v6 = (uint64_t)a3;
    if ((v11 & 0x8000000000000000) == 0)
    {
      do
      {
        v12 = a4 + 8 * v11;
        if (*(_QWORD *)(v12 + 6424))
          break;
        *(_QWORD *)(v12 + 6424) = a3;
      }
      while ((uint64_t)v11-- > 0);
    }
  }
}

void SetShadowDiagnosticVirtualCalculationInterval(void)
{
  gShadowDiagnosticVirtualCalculationInterval = *(_DWORD *)(gParDiagnosticVirtualCalculationInterval + 44);
}

void SetShadowShowActualMemoryAndChunkOverheadStats(void)
{
  gShadowShowActualMemoryAndChunkOverheadStats = *(_BYTE *)(gParShowActualMemoryAndChunkOverheadStats + 41);
}

void SetShadowShowMemChunkStatsOnThreadExit(void)
{
  gShadowShowMemChunkStatsOnThreadExit = *(_BYTE *)(gParShowMemChunkStatsOnThreadExit + 41);
}

void SetShadowShowMemStatsOnThreadExit(void)
{
  gShadowShowMemStatsOnThreadExit = *(_BYTE *)(gParShowMemStatsOnThreadExit + 41);
}

void SetShadowShowVirtualPrivateDetailsOnCalc(void)
{
  gShadowShowVirtualPrivateDetailsOnCalc = *(_BYTE *)(gParShowVirtualPrivateDetailsOnCalc + 41);
}

uint64_t MrecInitLibrary_frame(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_wavedata_frame();
  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughFrame(void)
{
  MrecInitLibrarySet_throughFileutil();
  return MrecInitLibrary_frame();
}

void ChannelMgr::ChannelMgr(ChannelMgr *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;

  *(_QWORD *)this = 0x10000001DLL;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0x10000001DLL;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 18) = 1;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 14) = 0;
  v17 = (char *)this + 112;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0x10000001DLL;
  *((_QWORD *)this + 18) = 0;
  *((_OWORD *)this + 11) = 0u;
  v2 = (char *)this + 176;
  *((_DWORD *)this + 34) = 1;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_OWORD *)this + 12) = 0u;
  v3 = (char *)this + 192;
  *((_OWORD *)this + 13) = 0u;
  v4 = (char *)this + 208;
  *((_OWORD *)this + 14) = 0u;
  v5 = (char *)this + 224;
  *((_OWORD *)this + 15) = 0u;
  v6 = (char *)this + 240;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  v7 = (char *)this + 304;
  DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 48, 1, 1);
  v8 = *((_DWORD *)this + 50);
  v9 = *((_DWORD *)this + 51);
  v10 = *((unsigned int *)this + 14);
  *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v10) = 0;
  *((_DWORD *)this + 14) = v10 + 1;
  if (v8 == v9)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v3, 1, 1);
    v8 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 24) + 4 * v8) = 0;
  ++*((_DWORD *)this + 50);
  v11 = *((_DWORD *)this + 54);
  if (v11 == *((_DWORD *)this + 55))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v4, 1, 1);
    v11 = *((_DWORD *)this + 54);
  }
  *(_DWORD *)(*((_QWORD *)this + 26) + 4 * v11) = 0;
  ++*((_DWORD *)this + 54);
  v12 = *((_DWORD *)this + 58);
  if (v12 == *((_DWORD *)this + 59))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v5, 1, 1);
    v12 = *((_DWORD *)this + 58);
  }
  *(_DWORD *)(*((_QWORD *)this + 28) + 4 * v12) = 0;
  ++*((_DWORD *)this + 58);
  v13 = *((_DWORD *)this + 62);
  if (v13 == *((_DWORD *)this + 63))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v6, 1, 1);
    v13 = *((_DWORD *)this + 62);
  }
  *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v13) = 0;
  ++*((_DWORD *)this + 62);
  v14 = *((_DWORD *)this + 30);
  if (v14 == *((_DWORD *)this + 31))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v17, 1, 1);
    v14 = *((_DWORD *)this + 30);
  }
  *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v14) = 0;
  *((_DWORD *)this + 30) = v14 + 1;
  v15 = *((_DWORD *)this + 46);
  if (v15 == *((_DWORD *)this + 47))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v2, 1, 1);
    v15 = *((_DWORD *)this + 46);
  }
  *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v15) = 0;
  *((_DWORD *)this + 46) = v15 + 1;
  v16 = *((_DWORD *)this + 78);
  if (v16 == *((_DWORD *)this + 79))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v7, 1, 1);
    v16 = *((_DWORD *)this + 78);
  }
  *(_QWORD *)(*((_QWORD *)this + 38) + 8 * v16) = 0;
  *((_DWORD *)this + 78) = v16 + 1;
}

void sub_2099640C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  DgnIOwnArray<ParamSetBase *>::releaseAll(v16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a13);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v22);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v21);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v20);
  DgnIOwnArray<SigProc *>::releaseAll(v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a12);
  DgnIOwnArray<Utterance *>::releaseAll(a14);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a11);
  DgnIOwnArray<Channel *>::releaseAll(v15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a10);
  _Unwind_Resume(a1);
}

void ChannelMgr::closeChannel(ChannelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  ChannelMgr::validateChannelId(this, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * a2);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 160))(v10))
  {
    ChannelMgr::validateChannelId(this, a2, v11, v12, v13, v14, v15, v16);
    v17 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * a2);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 96))(v17);
  }
  v18 = *((unsigned int *)this + 30);
  if ((_DWORD)v18)
  {
    v19 = 0;
    v20 = *((_QWORD *)this + 14);
    do
    {
      v21 = *(_DWORD **)(v20 + 8 * v19);
      if (v21 && *v21 == a2)
      {
        --*(_DWORD *)(*((_QWORD *)this + 24) + 4 * a2);
        *v21 = -1;
        v18 = *((unsigned int *)this + 30);
      }
      ++v19;
    }
    while (v19 < v18);
  }
  *(_DWORD *)(*((_QWORD *)this + 26) + 4 * a2) = 0;
  *(_DWORD *)(*((_QWORD *)this + 28) + 4 * a2) = 0;
  *(_DWORD *)(*((_QWORD *)this + 30) + 4 * a2) = 0;
  ChannelMgr::validateChannelId(this, a2, v11, v12, v13, v14, v15, v16);
  v22 = *((_QWORD *)this + 6);
  v23 = *(_QWORD **)(v22 + 8 * a2);
  if (v23)
  {
    (*(void (**)(_QWORD *))(*v23 + 72))(v23);
    MemChunkFree(v23, 0);
    v22 = *((_QWORD *)this + 6);
  }
  *(_QWORD *)(v22 + 8 * a2) = 0;
  *(_DWORD *)(*((_QWORD *)this + 24) + 4 * a2) = 0;
  v24 = *((_QWORD *)this + 38);
  v25 = *(_QWORD *)(v24 + 8 * a2);
  if (v25)
  {
    --*(_DWORD *)(v25 + 36);
    *(_QWORD *)(v24 + 8 * a2) = 0;
  }
  IdMgr<unsigned int>::recycleId((unsigned int *)this, a2);
}

void ChannelMgr::startupChannelMgr(ChannelMgr *this)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = MemChunkAlloc(0x140uLL, 0);
  ChannelMgr::ChannelMgr((ChannelMgr *)v1);
  ChannelMgr::smpChannelMgr = v2;
}

void ChannelMgr::validateChannelId(ChannelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 14) <= a2
    || !*(_QWORD *)(*((_QWORD *)this + 6) + 8 * a2)
    || !*(_QWORD *)(*((_QWORD *)this + 38) + 8 * a2))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 295, (uint64_t)"channel/chanmgr", 2, (uint64_t)"%u", a7, a8, a2);
  }
}

uint64_t ChannelMgr::getChannelType(ChannelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ChannelMgr::validateChannelId(this, a2, a3, a4, a5, a6, a7, a8);
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 6) + 8 * a2) + 68);
}

uint64_t ChannelMgr::sourceHasFeatData(ChannelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  ChannelMgr::validateChannelId(this, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 192))(v10);
}

uint64_t ChannelMgr::getUtterance(ChannelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (*((_DWORD *)this + 30) <= a2 || (result = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * a2)) == 0)
  {
    v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 522, (uint64_t)"channel/chanmgr", 1, (uint64_t)"%u", a7, a8, a2);
    return *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v10);
  }
  return result;
}

ChannelMgr *ChannelMgr::collectAvailableDataForUtt(ChannelMgr *this, Utterance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  ChannelMgr *v10;
  uint64_t v11;

  v8 = *(unsigned int *)a2;
  if ((v8 - 1) <= 0xFFFFFFFD)
  {
    v10 = this;
    ChannelMgr::validateChannelId(this, *(_DWORD *)a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_QWORD *)(*((_QWORD *)v10 + 6) + 8 * v8);
    return (ChannelMgr *)(*(uint64_t (**)(uint64_t, Utterance *))(*(_QWORD *)v11 + 200))(v11, a2);
  }
  return this;
}

double ChannelMgr::collectThroughUttFrame@<D0>(ChannelMgr *this@<X0>, Utterance *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v9;
  uint64_t v13;
  double result;

  v9 = *(unsigned int *)a2;
  if ((v9 - 1) > 0xFFFFFFFD)
  {
    result = 0.0;
    *a9 = 0u;
    a9[1] = 0u;
  }
  else
  {
    ChannelMgr::validateChannelId(this, *(_DWORD *)a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v9);
    (*(void (**)(uint64_t, Utterance *, uint64_t))(*(_QWORD *)v13 + 224))(v13, a2, a3);
  }
  return result;
}

uint64_t ChannelMgr::setRecogCtlUtterance(ChannelMgr *this, Utterance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *(unsigned int *)a2;
  ChannelMgr::validateChannelId(this, *(_DWORD *)a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v10);
  return (*(uint64_t (**)(uint64_t, Utterance *))(*(_QWORD *)v11 + 232))(v11, a2);
}

uint64_t ChannelMgr::maybeSyncRecogCtlUtterance(ChannelMgr *this, Utterance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *(unsigned int *)a2;
  ChannelMgr::validateChannelId(this, *(_DWORD *)a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v10);
  return (*(uint64_t (**)(uint64_t, Utterance *))(*(_QWORD *)v11 + 240))(v11, a2);
}

uint64_t ChannelMgr::maybeStartCollectingDataForUtt(ChannelMgr *this, Utterance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;

  v8 = *(unsigned int *)a2;
  if ((v8 - 1) > 0xFFFFFFFD)
    return 0;
  ChannelMgr::validateChannelId(this, *(_DWORD *)a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v8);
  return (*(uint64_t (**)(uint64_t, Utterance *))(*(_QWORD *)v11 + 248))(v11, a2);
}

double ChannelMgr::maybeStopCollectingDataForUtt@<D0>(ChannelMgr *this@<X0>, Utterance *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v9;
  uint64_t v12;
  double result;

  v9 = *(unsigned int *)a2;
  if ((v9 - 1) > 0xFFFFFFFD)
  {
    result = 0.0;
    *a9 = 0u;
    a9[1] = 0u;
  }
  else
  {
    ChannelMgr::validateChannelId(this, *(_DWORD *)a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v9);
    (*(void (**)(uint64_t, Utterance *))(*(_QWORD *)v12 + 256))(v12, a2);
  }
  return result;
}

Utterance *DgnDelete<Utterance>(Utterance *result)
{
  _QWORD *v1;

  if (result)
  {
    Utterance::~Utterance(result);
    return (Utterance *)MemChunkFree(v1, 0);
  }
  return result;
}

void ChannelMgr::saveSigProc(ChannelMgr *a1, unsigned int a2, uint64_t a3, _DWORD *a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t SigProc;
  char v19;

  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v19);
  SigProc = ChannelMgr::getSigProc(a1, a2, v12, v13, v14, v15, v16, v17);
  SigProc::saveSigProc(SigProc, a3, a4, a5, a6);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v19);
}

void sub_2099646DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t ChannelMgr::getSigProc(ChannelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (*((_DWORD *)this + 46) <= a2 || (result = *(_QWORD *)(*((_QWORD *)this + 22) + 8 * a2)) == 0)
  {
    v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 734, (uint64_t)"channel/chanmgr", 3, (uint64_t)"%u", a7, a8, a2);
    return *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v10);
  }
  return result;
}

SigProc *DgnDelete<SigProc>(SigProc *result)
{
  _QWORD *v1;

  if (result)
  {
    SigProc::~SigProc(result);
    return (SigProc *)MemChunkFree(v1, 0);
  }
  return result;
}

void ChannelMgr::printSize(ChannelMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  unint64_t *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  int v201;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 850, (DgnString *)&v200);
  if (v201)
    v16 = (void *)v200;
  else
    v16 = &unk_209A7B22D;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7B22D, a3, &unk_209A7B22D, v16);
  v196 = a6;
  DgnString::~DgnString((DgnString *)&v200);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7B22D);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 851, (DgnString *)&v200);
  if (v201)
    v25 = (void *)v200;
  else
    v25 = &unk_209A7B22D;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v21, v22, v23, v24, (a3 + 1), &unk_209A7B22D, (a3 + 1), &unk_209A7B22D, v25);
  DgnString::~DgnString((DgnString *)&v200);
  v197 = (a3 + 1);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v26, v27, v28, v29, v197, &unk_209A7B22D);
  v30 = *((unsigned int *)this + 14);
  if ((_DWORD)v30)
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    do
    {
      v35 = *((_QWORD *)this + 6);
      if (*(_QWORD *)(v35 + 8 * v31))
      {
        v200 = 0;
        v198 = 0;
        v199 = 0;
        (*(void (**)(_QWORD, unint64_t, _QWORD, unint64_t *, unint64_t *, unint64_t *))(**(_QWORD **)(v35 + 8 * v31) + 288))(*(_QWORD *)(v35 + 8 * v31), v31, (a3 + 2), &v200, &v199, &v198);
        v34 += v200;
        v33 += v199;
        v32 += v198;
        v30 = *((unsigned int *)this + 14);
      }
      ++v31;
    }
    while (v31 < v30);
  }
  else
  {
    v34 = 0;
    v33 = 0;
    v32 = 0;
    v30 = 0;
  }
  v36 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v36 = 16;
  v37 = v36 + v34;
  v38 = v36 + v33;
  v39 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 3;
  v40 = v37 + ((unint64_t)*((unsigned int *)this + 15) << v39);
  v41 = v38 + (v30 << v39);
  v42 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 851, (DgnString *)&v200);
  if (v201)
    v47 = (void *)v200;
  else
    v47 = &unk_209A7B22D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, v197, &unk_209A7B22D, (34 - a3), (34 - a3), v47, v40, v41, v32);
  DgnString::~DgnString((DgnString *)&v200);
  *a4 += v40;
  *a5 += v41;
  *v196 += v32;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 852, (DgnString *)&v200);
  if (v201)
    v52 = (void *)v200;
  else
    v52 = &unk_209A7B22D;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v48, v49, v50, v51, v197, &unk_209A7B22D, v197, &unk_209A7B22D, v52);
  v195 = a3;
  DgnString::~DgnString((DgnString *)&v200);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v53, v54, v55, v56, v197, &unk_209A7B22D);
  v57 = *((unsigned int *)this + 30);
  if ((_DWORD)v57)
  {
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    do
    {
      v62 = *((_QWORD *)this + 14);
      if (*(_QWORD *)(v62 + 8 * v58))
      {
        v200 = 0;
        v198 = 0;
        v199 = 0;
        Utterance::printSize(*(Utterance **)(v62 + 8 * v58), v58, (v195 + 2), &v200, &v199, &v198);
        v61 += v200;
        v60 += v199;
        v59 += v198;
        v57 = *((unsigned int *)this + 30);
      }
      ++v58;
    }
    while (v58 < v57);
  }
  else
  {
    v61 = 0;
    v60 = 0;
    v59 = 0;
    v57 = 0;
  }
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = v63 + v61;
  v65 = v63 + v60;
  v66 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v66 = 3;
  v67 = v64 + ((unint64_t)*((unsigned int *)this + 31) << v66);
  v68 = v65 + (v57 << v66);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 852, (DgnString *)&v200);
  if (v201)
    v73 = (void *)v200;
  else
    v73 = &unk_209A7B22D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, v197, &unk_209A7B22D, v42, v42, v73, v67, v68, v59);
  DgnString::~DgnString((DgnString *)&v200);
  *a4 += v67;
  *a5 += v68;
  *v196 += v59;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 853, (DgnString *)&v200);
  if (v201)
    v78 = (void *)v200;
  else
    v78 = &unk_209A7B22D;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v74, v75, v76, v77, v197, &unk_209A7B22D, v197, &unk_209A7B22D, v78);
  DgnString::~DgnString((DgnString *)&v200);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v79, v80, v81, v82, v197, &unk_209A7B22D);
  v83 = *((unsigned int *)this + 46);
  if ((_DWORD)v83)
  {
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = v196;
    do
    {
      v89 = *((_QWORD *)this + 22);
      if (*(_QWORD *)(v89 + 8 * v84))
      {
        v200 = 0;
        v198 = 0;
        v199 = 0;
        SigProc::printSize(*(SigProc **)(v89 + 8 * v84), v84, (v195 + 2), &v200, &v199, &v198);
        v87 += v200;
        v86 += v199;
        v85 += v198;
        v83 = *((unsigned int *)this + 46);
      }
      ++v84;
    }
    while (v84 < v83);
  }
  else
  {
    v87 = 0;
    v86 = 0;
    v85 = 0;
    v83 = 0;
    v88 = v196;
  }
  v90 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v90 = 16;
  v91 = v90 + v87;
  v92 = v90 + v86;
  v93 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v93 = 3;
  v94 = v91 + ((unint64_t)*((unsigned int *)this + 47) << v93);
  v95 = v92 + (v83 << v93);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 853, (DgnString *)&v200);
  if (v201)
    v100 = (void *)v200;
  else
    v100 = &unk_209A7B22D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v96, v97, v98, v99, v197, &unk_209A7B22D, v42, v42, v100, v94, v95, v85);
  DgnString::~DgnString((DgnString *)&v200);
  *a4 += v94;
  *a5 += v95;
  *v88 += v85;
  v101 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v101 = 16;
  v102 = *((_DWORD *)this + 6);
  v103 = *((_DWORD *)this + 7);
  v104 = v101 + 4 * (v102 - 1) + 4;
  if (v102 <= 0)
    v104 = v101;
  v105 = v103 >= v102;
  v106 = v104 + 4 * (v103 - v102);
  if (v105)
    v101 = v106;
  v107 = v101 + 24;
  v108 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 4, 1u) + 12;
  v109 = *((unsigned int *)this + 6);
  if (v109 <= *((_DWORD *)this + 7))
    v110 = 0;
  else
    v110 = 4 * v109;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 855, (DgnString *)&v200);
  if (v201)
    v115 = (void *)v200;
  else
    v115 = &unk_209A7B22D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v111, v112, v113, v114, v197, &unk_209A7B22D, v42, v42, v115, v107, v108, v110);
  DgnString::~DgnString((DgnString *)&v200);
  *a4 += v107;
  *a5 += v108;
  *v88 += v110;
  v116 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v116 = 16;
  v117 = *((_DWORD *)this + 22);
  v118 = *((_DWORD *)this + 23);
  v105 = v118 >= v117;
  v119 = v118 - v117;
  if (v105)
  {
    if (v117 > 0)
      v116 += 4 * (v117 - 1) + 4;
    v116 += 4 * v119;
  }
  v120 = v116 + 24;
  v121 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 20, 1u) + 12;
  v122 = *((unsigned int *)this + 22);
  if (v122 <= *((_DWORD *)this + 23))
    v123 = 0;
  else
    v123 = 4 * v122;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 856, (DgnString *)&v200);
  if (v201)
    v128 = (void *)v200;
  else
    v128 = &unk_209A7B22D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v124, v125, v126, v127, v197, &unk_209A7B22D, v42, v42, v128, v120, v121, v123);
  DgnString::~DgnString((DgnString *)&v200);
  *a4 += v120;
  *a5 += v121;
  *v88 += v123;
  v129 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v129 = 16;
  v130 = *((_DWORD *)this + 38);
  v131 = *((_DWORD *)this + 39);
  v105 = v131 >= v130;
  v132 = v131 - v130;
  if (v105)
  {
    if (v130 > 0)
      v129 += 4 * (v130 - 1) + 4;
    v129 += 4 * v132;
  }
  v133 = v129 + 24;
  v134 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 36, 1u) + 12;
  v135 = *((unsigned int *)this + 38);
  if (v135 <= *((_DWORD *)this + 39))
    v136 = 0;
  else
    v136 = 4 * v135;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 858, (DgnString *)&v200);
  if (v201)
    v141 = (void *)v200;
  else
    v141 = &unk_209A7B22D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, v197, &unk_209A7B22D, v42, v42, v141, v133, v134, v136);
  DgnString::~DgnString((DgnString *)&v200);
  *a4 += v133;
  *a5 += v134;
  *v88 += v136;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v142 = 12;
  else
    v142 = 16;
  v143 = *((unsigned int *)this + 50);
  v144 = *((_DWORD *)this + 51);
  if (v144 >= v143)
  {
    v145 = 0;
    if ((int)v143 > 0)
      v142 += 4 * (v143 - 1) + 4;
    v146 = v142 + 4 * (v144 - v143);
  }
  else
  {
    v145 = 4 * v143;
    v146 = v142;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 860, (DgnString *)&v200);
  if (v201)
    v151 = (void *)v200;
  else
    v151 = &unk_209A7B22D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v147, v148, v149, v150, v197, &unk_209A7B22D, v42, v42, v151, v146, v142, v145);
  DgnString::~DgnString((DgnString *)&v200);
  *a4 += v146;
  *a5 += v142;
  *v88 += v145;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v152 = 12;
  else
    v152 = 16;
  v153 = *((unsigned int *)this + 54);
  v154 = *((_DWORD *)this + 55);
  if (v154 >= v153)
  {
    v155 = 0;
    if ((int)v153 > 0)
      v152 += 4 * (v153 - 1) + 4;
    v156 = v152 + 4 * (v154 - v153);
  }
  else
  {
    v155 = 4 * v153;
    v156 = v152;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 862, (DgnString *)&v200);
  if (v201)
    v161 = (void *)v200;
  else
    v161 = &unk_209A7B22D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v157, v158, v159, v160, v197, &unk_209A7B22D, v42, v42, v161, v156, v152, v155);
  DgnString::~DgnString((DgnString *)&v200);
  *a4 += v156;
  *a5 += v152;
  *v88 += v155;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v162 = 12;
  else
    v162 = 16;
  v163 = *((unsigned int *)this + 58);
  v164 = *((_DWORD *)this + 59);
  if (v164 >= v163)
  {
    v165 = 0;
    if ((int)v163 > 0)
      v162 += 4 * (v163 - 1) + 4;
    v166 = v162 + 4 * (v164 - v163);
  }
  else
  {
    v165 = 4 * v163;
    v166 = v162;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 864, (DgnString *)&v200);
  if (v201)
    v171 = (void *)v200;
  else
    v171 = &unk_209A7B22D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v167, v168, v169, v170, v197, &unk_209A7B22D, v42, v42, v171, v166, v162, v165);
  DgnString::~DgnString((DgnString *)&v200);
  *a4 += v166;
  *a5 += v162;
  *v88 += v165;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v172 = 12;
  else
    v172 = 16;
  v173 = *((unsigned int *)this + 62);
  v174 = *((_DWORD *)this + 63);
  if (v174 >= v173)
  {
    v175 = 0;
    if ((int)v173 > 0)
      v172 += 4 * (v173 - 1) + 4;
    v176 = v172 + 4 * (v174 - v173);
  }
  else
  {
    v175 = 4 * v173;
    v176 = v172;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 866, (DgnString *)&v200);
  if (v201)
    v181 = (void *)v200;
  else
    v181 = &unk_209A7B22D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v177, v178, v179, v180, v197, &unk_209A7B22D, v42, v42, v181, v176, v172, v175);
  DgnString::~DgnString((DgnString *)&v200);
  *a4 += v176;
  *a5 += v172;
  *v88 += v175;
  v182 = (char *)this + 304;
  v183 = sizeObject<ParamSetBase *>((uint64_t)this + 304, 0);
  v184 = sizeObject<ParamSetBase *>((uint64_t)v182, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 868, (DgnString *)&v200);
  if (v201)
    v189 = (void *)v200;
  else
    v189 = &unk_209A7B22D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v185, v186, v187, v188, v197, &unk_209A7B22D, v42, v42, v189, v183, v184, 0);
  DgnString::~DgnString((DgnString *)&v200);
  *a4 += v183;
  *a5 += v184;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 869, (DgnString *)&v200);
  if (v201)
    v194 = (void *)v200;
  else
    v194 = &unk_209A7B22D;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v190, v191, v192, v193, v195, &unk_209A7B22D, (35 - v195), (35 - v195), v194, *a4, *a5, *v88);
  DgnString::~DgnString((DgnString *)&v200);
}

void sub_2099653A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t ChannelMgr::getThreadId(ChannelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  ChannelMgr::validateChannelId(this, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 296))(v10);
}

_QWORD *DgnIOwnArray<Channel *>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnIOwnArray<Channel *>::destructAt(a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnIOwnArray<Channel *>::destructAt(uint64_t result, int a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (a3 + a2 > a2)
  {
    v3 = (uint64_t *)result;
    v4 = a2;
    v5 = a3 + a2 - 1;
    do
    {
      v6 = *v3;
      v7 = *(_QWORD **)(*v3 + 8 * v5);
      if (v7)
      {
        (*(void (**)(_QWORD))(*v7 + 72))(*(_QWORD *)(*v3 + 8 * v5));
        result = MemChunkFree(v7, 0);
        v6 = *v3;
      }
      *(_QWORD *)(v6 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

_QWORD *DgnIOwnArray<Utterance *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<Utterance>(*(Utterance **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnIOwnArray<SigProc *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<SigProc>(*(SigProc **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void WordDummySpec::WordDummySpec(WordDummySpec *this)
{
  *(_QWORD *)((char *)this + 6) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

uint64_t WordDummySpec::readObject(WordDummySpec *this, DgnStream *a2, unsigned int *a3)
{
  readObject((uint64_t)a2, (_DWORD *)this + 2, a3);
  readObject(a2, (double *)this, a3);
  readObject((uint64_t)a2, (BOOL *)this + 12, a3);
  readObject((uint64_t)a2, (BOOL *)this + 13, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 4, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 5, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 6, a3);
  return readObject((uint64_t)a2, (_DWORD *)this + 7, a3);
}

void WordNgramBuildSpec::WordNgramBuildSpec(WordNgramBuildSpec *this, const WordDummySpec *a2)
{
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_WORD *)this + 6) = *((_WORD *)a2 + 6);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
}

void WordNgramBuildSpec::loadWordDummySpecText(WordNgramBuildSpec *this, DFile *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  _BYTE v34[32];

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v34);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v34, (uint64_t)a2, 0x6Du, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v34, "WordDummySpec");
  v33[0] = 0;
  v33[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v34, sWDS_Versions, (uint64_t)v33, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v34, (unsigned int *)v33, v9, v10, v11, v12, v13, v14);
  v15 = (_DWORD *)((char *)this + 8);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v34, "Depth", (unsigned int *)this + 2, 1, 1u, 4u);
  if (*((_DWORD *)this + 2) >= 4u)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 225, (uint64_t)"lm/wordt", 11, (uint64_t)"%u %.500s", v16, v17, *v15);
  DgnTextFile::getHeaderFieldReal((DgnTextFile *)v34, "AlienWordMinimumCount", (double *)this, 1, -1.0, 1.0);
  if (*(double *)this != -1.0 && *(double *)this < 0.0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 233, (uint64_t)"lm/wordt", 10, (uint64_t)"%.500s", v18, v19, (char)"AlienWordMinimumCount");
  DgnTextFile::getHeaderFieldBool((DgnTextFile *)v34, "AllowNewWordCloning", (BOOL *)this + 12, 1);
  DgnTextFile::getHeaderFieldBool((DgnTextFile *)v34, "UseIgnoreInContextLmId", (BOOL *)this + 13, 1);
  if (*v15 >= 2u)
  {
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumBigramCountToDiscount", (int *)this + 4, 1, -1, 0x7FFFFFFF);
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumNumBigramRecords", (int *)this + 5, 1, -1, 0x7FFFFFFF);
    if (*v15 >= 3u)
    {
      DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumTrigramCountToDiscount", (int *)this + 6, 1, -1, 0x7FFFFFFF);
      DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumNumTrigramRecords", (int *)this + 7, 1, -1, 0x7FFFFFFF);
    }
  }
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v34, v20, v21, v22, v23, v24, v25, v26);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v34, 0, v27, v28, v29, v30, v31, v32);
  DgnTextFileParser::verifyNoBodyLines((DgnTextFileParser *)v34);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v33);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v34);
}

void sub_2099658E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va);
  _Unwind_Resume(a1);
}

void WordNgramBuildSpec::loadWordNgramBuildSpecText(WordNgramBuildSpec *this, DFile *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  _BYTE v34[32];

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v34);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v34, (uint64_t)a2, 0x6Bu, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v34, "WordNGramBuildSpec");
  v33[0] = 0;
  v33[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v34, sWBS_Versions, (uint64_t)v33, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v34, (unsigned int *)v33, v9, v10, v11, v12, v13, v14);
  v15 = (_DWORD *)((char *)this + 8);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v34, "Depth", (unsigned int *)this + 2, 1, 1u, 4u);
  if (*((_DWORD *)this + 2) >= 4u)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 289, (uint64_t)"lm/wordt", 13, (uint64_t)"%u %.500s", v16, v17, *v15);
  DgnTextFile::getHeaderFieldReal((DgnTextFile *)v34, "AlienWordMinimumCount", (double *)this, 1, -1.0, 1.0);
  if (*(double *)this != -1.0 && *(double *)this < 0.0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 297, (uint64_t)"lm/wordt", 12, (uint64_t)"%.500s", v18, v19, (char)"AlienWordMinimumCount");
  DgnTextFile::getHeaderFieldBool((DgnTextFile *)v34, "AllowNewWordCloning", (BOOL *)this + 12, 1);
  DgnTextFile::getHeaderFieldBool((DgnTextFile *)v34, "UseIgnoreInContextLmId", (BOOL *)this + 13, 1);
  if (*v15 >= 2u)
  {
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumBigramCountToDiscount", (int *)this + 4, 1, -1, 0x7FFFFFFF);
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumNumBigramRecords", (int *)this + 5, 1, -1, 0x7FFFFFFF);
    if (*v15 >= 3u)
    {
      DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumTrigramCountToDiscount", (int *)this + 6, 1, -1, 0x7FFFFFFF);
      DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumNumTrigramRecords", (int *)this + 7, 1, -1, 0x7FFFFFFF);
    }
  }
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v34, v20, v21, v22, v23, v24, v25, v26);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v34, 0, v27, v28, v29, v30, v31, v32);
  DgnTextFileParser::verifyNoBodyLines((DgnTextFileParser *)v34);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v33);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v34);
}

void sub_209965B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va);
  _Unwind_Resume(a1);
}

void WordNgramBuildSpec::loadWordNgramBuildSpecBinary(WordNgramBuildSpec *this, DFile *a2, DFileChecksums *a3)
{
  DgnStream *v6;
  char *v7;
  uint64_t CurrentSubDirComponents;
  unsigned int v9;
  uint64_t v10;

  v10 = 0;
  v6 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x6Au, 1, "LMWBSBIN", (_DWORD *)&v10 + 1, &v10);
  if (*((_DWORD *)a2 + 6))
    v7 = (char *)*((_QWORD *)a2 + 2);
  else
    v7 = &byte_209A88803;
  MrecHeaderCheckVersions(v7, "LMWBSBIN", HIDWORD(v10), v10, 0x18u, 1u);
  v9 = 0;
  readObject((uint64_t)v6, (_DWORD *)this + 2, &v9);
  readObject(v6, (double *)this, &v9);
  readObject((uint64_t)v6, (BOOL *)this + 12, &v9);
  readObject((uint64_t)v6, (BOOL *)this + 13, &v9);
  readObject((uint64_t)v6, (_DWORD *)this + 4, &v9);
  readObject((uint64_t)v6, (_DWORD *)this + 5, &v9);
  readObject((uint64_t)v6, (_DWORD *)this + 6, &v9);
  readObject((uint64_t)v6, (_DWORD *)this + 7, &v9);
  readObjectChecksumAndVerify(v6, v9);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x6Au, v9);
  if (v6)
  {
    (**(void (***)(DgnStream *))v6)(v6);
    MemChunkFree(v6, 0);
  }
}

void WordNgramBuildSpec::loadWordNgramBuildSpec(WordNgramBuildSpec *this, DFile *a2, DFileChecksums *a3, int a4)
{
  if (a4)
    WordNgramBuildSpec::loadWordNgramBuildSpecText(this, a2);
  else
    WordNgramBuildSpec::loadWordNgramBuildSpecBinary(this, a2, a3);
}

void WordNgramBuildSpec::saveWordNgramBuildSpecText(WordNgramBuildSpec *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[280];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v15);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v15, (uint64_t)a2, 0x6Bu, a3);
  v13 = 0;
  v14 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v15, sWBS_Versions, (uint64_t)&v13, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v15, "WordNGramBuildSpec", (_QWORD *)(v13 + 8 * (v14 - 1)));
  v12[0] = 0;
  v12[1] = 0;
  v11[0] = 0;
  v11[1] = 0;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v15, (uint64_t)v12, (uint64_t)v11);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v15, "Depth", *((unsigned int *)this + 2));
  DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v15, "AlienWordMinimumCount", *(double *)this);
  DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v15, "AllowNewWordCloning", *((unsigned __int8 *)this + 12));
  DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v15, "UseIgnoreInContextLmId", *((unsigned __int8 *)this + 13));
  if (*((_DWORD *)this + 2) >= 2u)
  {
    DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v15, "BuildMaximumBigramCountToDiscount", *((_DWORD *)this + 4));
    DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v15, "BuildMaximumNumBigramRecords", *((_DWORD *)this + 5));
    if (*((_DWORD *)this + 2) >= 3u)
    {
      DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v15, "BuildMaximumTrigramCountToDiscount", *((_DWORD *)this + 6));
      DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v15, "BuildMaximumNumTrigramRecords", *((_DWORD *)this + 7));
    }
  }
  DgnArray<DgnString>::releaseAll((uint64_t)v11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v12);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v13);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v15);
}

void sub_209965E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va);
  _Unwind_Resume(a1);
}

void WordNgramBuildSpec::saveWordNgramBuildSpecBinary(WordNgramBuildSpec *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t CurrentSubDirComponents;
  unsigned int v14;

  v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x6Au, a4, "LMWBSBIN", 24, 1);
  v14 = 0;
  writeObject((uint64_t)v7, (int *)this + 2, &v14);
  writeObject(v7, (const double *)this, &v14, v8, v9, v10, v11, v12);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 12, &v14);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 13, &v14);
  writeObject((uint64_t)v7, (int *)this + 4, &v14);
  writeObject((uint64_t)v7, (int *)this + 5, &v14);
  writeObject((uint64_t)v7, (int *)this + 6, &v14);
  writeObject((uint64_t)v7, (int *)this + 7, &v14);
  writeObjectChecksum((uint64_t)v7, (int *)&v14);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x6Au, v14);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
}

void WordNgramBuildSpec::saveWordNgramBuildSpec(WordNgramBuildSpec *this, DFile *a2, DFileChecksums *a3, int a4, DFileChecksums *a5)
{
  if (a4)
    WordNgramBuildSpec::saveWordNgramBuildSpecText(this, a2, (int)a5);
  else
    WordNgramBuildSpec::saveWordNgramBuildSpecBinary(this, a2, a3, (int)a5);
}

uint64_t WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId(WordIdToHeadCloneWordIdMap *this, unsigned int a2)
{
  int v2;
  uint64_t **Bucket;
  int *v5;
  unsigned int v6;

  v6 = a2;
  if (*((_DWORD *)this + 2) <= a2 && *((_DWORD *)this + 3) >= a2)
    return 0xFFFFFFLL;
  if (a2 >> 4 < *((_DWORD *)this + 34))
  {
    v2 = (*(_DWORD *)(*((_QWORD *)this + 16) + 4 * (a2 >> 4)) >> (2 * (a2 & 0xF))) & 3;
    if (v2)
      return a2 - v2;
  }
  Bucket = HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this + 16, (int *)&v6);
  if (*Bucket)
    v5 = (int *)(*Bucket + 2);
  else
    v5 = (int *)&v6;
  return *v5;
}

uint64_t WordIdToHeadCloneWordIdMap::getHeadCloneForWordId(WordIdToHeadCloneWordIdMap *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 388) > a2 && *(_BYTE *)(*(_QWORD *)(v2 + 104) + a2))
    return WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId(this, *(_DWORD *)(*(_QWORD *)(v2 + 256) + 4 * a2));
  else
    return 0xFFFFFFLL;
}

uint64_t WordIdToHeadCloneWordIdMap::addVisibleWordIdMap(WordIdToHeadCloneWordIdMap *this, unsigned int a2, unsigned int a3)
{
  BOOL v4;
  unsigned int v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;

  v7 = a3;
  v8 = a2;
  v4 = a2 >= a3;
  v5 = a2 - a3;
  if (v5 == 0 || !v4)
    return Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::add((uint64_t)this + 16, (int *)&v8, &v7);
  result = WordIdToHeadCloneWordIdMap::setDecrementForWordId(this, a2, v5);
  if ((result & 1) == 0)
    return Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::add((uint64_t)this + 16, (int *)&v8, &v7);
  return result;
}

BOOL WordIdToHeadCloneWordIdMap::setDecrementForWordId(WordIdToHeadCloneWordIdMap *this, unsigned int a2, unsigned int a3)
{
  char v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (a3 <= 3)
  {
    v4 = a2;
    v6 = a2 >> 4;
    v7 = *((_DWORD *)this + 34);
    if (a3 || v7 > v6)
    {
      if (v7 <= v6)
      {
        do
        {
          if (v7 == *((_DWORD *)this + 35))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 128, 1, 1);
            v7 = *((_DWORD *)this + 34);
          }
          v8 = *((_QWORD *)this + 16);
          *(_DWORD *)(v8 + 4 * v7) = 0;
          v7 = *((_DWORD *)this + 34) + 1;
          *((_DWORD *)this + 34) = v7;
        }
        while (v7 <= v6);
      }
      else
      {
        v8 = *((_QWORD *)this + 16);
      }
      *(_DWORD *)(v8 + 4 * v6) = *(_DWORD *)(v8 + 4 * v6) & ~(3 << (2 * (v4 & 0xF))) | (a3 << (2 * (v4 & 0xF)));
    }
  }
  return a3 < 4;
}

uint64_t Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::add(uint64_t result, int *a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = result;
  v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1)
    result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  v7 = *a2;
  v8 = *(_DWORD *)(v5 + 16);
  if (v8)
    v9 = (-1640531527 * *a2) >> -(char)v8;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v5 + 80);
  v11 = *(_QWORD *)(v5 + 32);
  if (!v11)
  {
    result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    v11 = *(_QWORD *)(v5 + 32);
  }
  v12 = (_QWORD *)(v10 + 8 * v9);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)v11;
  *(_DWORD *)(v11 + 8) = 0;
  *(_DWORD *)(v11 + 12) = *a2;
  *(_DWORD *)(v11 + 16) = *a3;
  *(_DWORD *)(v11 + 8) = v7;
  ++*(_DWORD *)(v5 + 8);
  if (*(_BYTE *)(v5 + 20))
  {
    *(_QWORD *)v11 = *v12;
  }
  else
  {
    *(_QWORD *)v11 = 0;
    v13 = (_QWORD *)*v12;
    if (*v12)
    {
      do
      {
        v12 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
  }
  *v12 = v11;
  return result;
}

BOOL WordIdToHeadCloneWordIdMap::isHeadCloneWordId(WordIdToHeadCloneWordIdMap *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int v5;

  v5 = a2;
  v2 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 388) <= a2
    || !*(_BYTE *)(*(_QWORD *)(v2 + 104) + a2)
    || *(_DWORD *)(*(_QWORD *)(v2 + 256) + 4 * a2) != a2
    || a2 >> 4 < *((_DWORD *)this + 34)
    && ((*(_DWORD *)(*((_QWORD *)this + 16) + 4 * (a2 >> 4)) >> (2 * (a2 & 0xF))) & 3) != 0
    || *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this + 16, (int *)&v5))
  {
    return 0;
  }
  if (v5 >= *((_DWORD *)this + 2))
    return v5 > *((_DWORD *)this + 3);
  return 1;
}

uint64_t WordIdToHeadCloneWordIdMap::deleteWord(WordIdToHeadCloneWordIdMap *this, unsigned int a2)
{
  uint64_t result;
  char v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  int i;
  unsigned int v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;

  v42 = a2;
  result = WordIdToHeadCloneWordIdMap::isHeadCloneWordId(this, a2);
  if (!(_DWORD)result)
  {
    v14 = *(_QWORD *)this;
    if (*(_DWORD *)(*(_QWORD *)this + 388) > a2
      && *(_BYTE *)(*(_QWORD *)(v14 + 104) + a2)
      && *(_DWORD *)(*(_QWORD *)(v14 + 256) + 4 * a2) == a2)
    {
      WordIdToHeadCloneWordIdMap::setDecrementForWordId(this, a2, 0);
      return Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeIfPresent((uint64_t)this + 16, (int *)&v42);
    }
    return result;
  }
  v5 = 2 * a2 + 2;
  v6 = 1;
  v7 = 0xFFFFFF;
  do
  {
    v8 = a2 + v6;
    v9 = (a2 + v6) >> 4;
    if (v9 >= *((_DWORD *)this + 34))
    {
      v8 = 0xFFFFFF;
    }
    else if (v6 == ((*(_DWORD *)(*((_QWORD *)this + 16) + 4 * v9) >> (v5 & 0x1E)) & 3))
    {
      v7 = a2 + v6;
    }
    else
    {
      v8 = 0xFFFFFF;
    }
    if (v6 > 2)
      break;
    ++v6;
    v5 += 2;
  }
  while (v8 == 0xFFFFFF);
  v10 = *((unsigned int *)this + 7);
  if ((_DWORD)v10)
  {
    v11 = (_QWORD *)*((_QWORD *)this + 12);
    v12 = (uint64_t *)*v11;
    if (*v11)
    {
      LODWORD(v13) = 0;
    }
    else
    {
      v13 = 0;
      v15 = v11 + 1;
      do
      {
        if (v10 - 1 == v13)
          goto LABEL_35;
        v12 = (uint64_t *)v15[v13++];
      }
      while (!v12);
    }
  }
  else
  {
    LODWORD(v13) = 0;
    v12 = 0;
  }
  while (v13 < v10 && v7 == 0xFFFFFF)
  {
    if (*((_DWORD *)v12 + 4) == a2)
      v7 = *((_DWORD *)v12 + 3);
    else
      v7 = 0xFFFFFF;
    if (*v12)
    {
      v12 = (uint64_t *)*v12;
    }
    else
    {
      v13 = (v13 + 1);
      if (v13 < v10)
      {
        v16 = *((_QWORD *)this + 12);
        v12 = *(uint64_t **)(v16 + 8 * v13);
        if (!v12)
        {
          v17 = (uint64_t **)(v16 + 8 * v13 + 8);
          v18 = v10 - 1 - v13;
          while (v18)
          {
            v19 = *v17++;
            v12 = v19;
            LODWORD(v13) = v13 + 1;
            --v18;
            if (v19)
              goto LABEL_33;
          }
          break;
        }
      }
    }
LABEL_33:
    ;
  }
LABEL_35:
  v41 = v7;
  if (v7 == 0xFFFFFF)
    return result;
  WordIdToHeadCloneWordIdMap::setDecrementForWordId(this, v7, 0);
  v20 = 2 * a2 + 2;
  for (i = 1; i != 4; ++i)
  {
    v22 = (a2 + i) >> 4;
    if (v22 < *((_DWORD *)this + 34)
      && i == ((*(_DWORD *)(*((_QWORD *)this + 16) + 4 * v22) >> (v20 & 0x1E)) & 3)
      && a2 - v7 + i != 0)
    {
      WordIdToHeadCloneWordIdMap::setDecrementForWordId(this, a2 + i, 0);
      WordIdToHeadCloneWordIdMap::addVisibleWordIdMap(this, a2 + i, v7);
    }
    v20 += 2;
  }
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeIfPresent((uint64_t)this + 16, (int *)&v41);
  v39 = 0;
  v40 = 0;
  v24 = *((unsigned int *)this + 7);
  if ((_DWORD)v24)
  {
    v25 = (_QWORD *)*((_QWORD *)this + 12);
    v26 = (uint64_t *)*v25;
    if (!*v25)
    {
      v27 = 0;
      v28 = v25 + 1;
      do
      {
        if (v24 - 1 == v27)
          return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
        v26 = (uint64_t *)v28[v27++];
      }
      while (!v26);
      goto LABEL_52;
    }
  }
  else
  {
    v26 = 0;
  }
  LODWORD(v27) = 0;
LABEL_52:
  if (v27 >= v24)
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
  v29 = 0;
  v30 = 0;
  while (1)
  {
    v31 = *((_DWORD *)v26 + 3);
    if (v31 != v41 && *((_DWORD *)v26 + 4) == a2)
    {
      if (v30 == HIDWORD(v40))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v39, 1, 1);
        v30 = v40;
        v29 = v39;
      }
      *(_DWORD *)(v29 + 4 * v30) = v31;
      v30 = v40 + 1;
      LODWORD(v40) = v40 + 1;
      LODWORD(v24) = *((_DWORD *)this + 7);
    }
    v32 = (uint64_t *)*v26;
    if (*v26)
      goto LABEL_67;
    v27 = (v27 + 1);
    if (v27 >= v24)
    {
      v32 = v26;
      goto LABEL_67;
    }
    v33 = *((_QWORD *)this + 12);
    v32 = *(uint64_t **)(v33 + 8 * v27);
    if (!v32)
      break;
LABEL_67:
    v26 = v32;
    if (v27 >= v24)
      goto LABEL_68;
  }
  v34 = (uint64_t *)(v33 + 8 * v27 + 8);
  v35 = ~v27 + v24;
  while (v35)
  {
    v36 = (uint64_t *)*v34++;
    v32 = v36;
    LODWORD(v27) = v27 + 1;
    --v35;
    if (v36)
      goto LABEL_67;
  }
LABEL_68:
  if (v30)
  {
    v37 = 0;
    do
    {
      v38 = 0;
      v38 = *(_DWORD *)(v39 + 4 * v37);
      Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::remove((uint64_t)this + 16, (int *)&v38);
      WordIdToHeadCloneWordIdMap::addVisibleWordIdMap(this, v38, v41);
      ++v37;
    }
    while (v37 < v40);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
}

void sub_209966728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeIfPresent(uint64_t a1, int *a2)
{
  char **Bucket;
  char *v4;

  Bucket = (char **)HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(a1, a2);
  v4 = *Bucket;
  if (*Bucket)
    Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeBucket(a1, Bucket);
  return v4 != 0;
}

uint64_t **Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::remove(uint64_t a1, int *a2)
{
  uint64_t **result;

  result = HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(a1, a2);
  if (*result)
    return (uint64_t **)Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeBucket(a1, (char **)result);
  return result;
}

uint64_t writeObject<unsigned int,unsigned int,WordIdScope,unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD **v11;
  int *v12;
  int *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;

  v21 = *(_DWORD *)(a2 + 8);
  writeObject(a1, &v21, a3);
  v20 = *(_DWORD *)(a2 + 12);
  writeObject(a1, &v20, a3);
  v19 = *(unsigned __int8 *)(a2 + 20);
  result = writeObject(a1, &v19, a3);
  v7 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v7)
  {
    v9 = 0;
    goto LABEL_8;
  }
  v8 = *(_QWORD ***)(a2 + 80);
  v9 = *v8;
  if (*v8)
  {
LABEL_8:
    LODWORD(v10) = 0;
    goto LABEL_9;
  }
  v10 = 0;
  v11 = v8 + 1;
  while (v7 - 1 != v10)
  {
    v9 = v11[v10++];
    if (v9)
    {
LABEL_9:
      while (v10 < v7)
      {
        if (v9)
          v12 = (int *)v9 + 3;
        else
          v12 = 0;
        if (v9)
          v13 = (int *)(v9 + 2);
        else
          v13 = 0;
        writeObject(a1, v12, a3);
        result = writeObject(a1, v13, a3);
        v14 = (_QWORD *)*v9;
        v7 = *(unsigned int *)(a2 + 12);
        if (!*v9)
        {
          v10 = (v10 + 1);
          if (v10 >= v7)
          {
            v14 = v9;
          }
          else
          {
            v15 = *(_QWORD *)(a2 + 80);
            v14 = *(_QWORD **)(v15 + 8 * v10);
            if (!v14)
            {
              v16 = (_QWORD *)(v15 + 8 * v10 + 8);
              v17 = ~v10 + v7;
              while (v17)
              {
                v18 = (_QWORD *)*v16++;
                v14 = v18;
                LODWORD(v10) = v10 + 1;
                --v17;
                if (v18)
                  goto LABEL_24;
              }
              return result;
            }
          }
        }
LABEL_24:
        v9 = v14;
      }
      return result;
    }
  }
  return result;
}

void WordNgramTemplate::WordNgramTemplate(WordNgramTemplate *this, const WordList *a2, int a3, int a4)
{
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::Hash((uint64_t)this + 32, 0, 16);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
  *((_DWORD *)this + 7) = a4;
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 20) = a2;
  *((_QWORD *)this + 21) = 0;
}

void WordNgramTemplate::WordNgramTemplate(WordNgramTemplate *this, const WordList *a2, int a3, int a4, const WordLanguageModel *a5)
{
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::Hash((uint64_t)this + 32, 0, 16);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
  *((_DWORD *)this + 7) = a4;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = a2;
  *((_QWORD *)this + 21) = a5;
  WordNgramTemplate::fillInFromTemplateLanguageModel(this);
}

void sub_209966AD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::~Hash(v1);
  _Unwind_Resume(a1);
}

uint64_t WordNgramTemplate::fillInFromTemplateLanguageModel(WordNgramTemplate *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int LmId;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  int HeadCloneForVisibleWordId;
  uint64_t v11;
  int HeadCloneForWordId;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD v17[2];
  _QWORD v18[2];

  v2 = *((_QWORD *)this + 21);
  *(_BYTE *)this = *(_BYTE *)(v2 + 80);
  v18[0] = 0;
  v18[1] = 0;
  v17[0] = 0;
  v17[1] = 0;
  WordLanguageModel::constructLmIdToWordIdMapping(v2, (uint64_t)v18, (uint64_t)v17);
  v3 = *((_QWORD *)this + 20);
  if (*(_DWORD *)(v3 + 388))
  {
    v4 = 0;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(v3 + 104) + v4))
      {
        if (v4 == *(_DWORD *)(*(_QWORD *)(v3 + 256) + 4 * v4))
        {
          LmId = WordLanguageModel::getLmId(*((WordLanguageModel **)this + 21), v4);
          if (LmId != -1)
          {
            v6 = *(unsigned int *)(v18[0] + 4 * LmId);
            if (v4 != v6)
              WordIdToHeadCloneWordIdMap::addVisibleWordIdMap((WordNgramTemplate *)((char *)this + 16), v4, v6);
          }
        }
      }
      ++v4;
      v3 = *((_QWORD *)this + 20);
    }
    while (v4 < *(unsigned int *)(v3 + 388));
  }
  *((_DWORD *)this + 1) = 16777212;
  v7 = (unsigned int *)*((_QWORD *)this + 21);
  v8 = v7[28];
  if ((_DWORD)v8 != -1)
  {
    v9 = *(_DWORD *)(v18[0] + 4 * v8);
    HeadCloneForVisibleWordId = 16777214;
    if (v9 != 16777214)
    {
      HeadCloneForVisibleWordId = WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId((WordNgramTemplate *)((char *)this + 16), v9);
      v7 = (unsigned int *)*((_QWORD *)this + 21);
    }
    *((_DWORD *)this + 1) = HeadCloneForVisibleWordId;
  }
  *((_DWORD *)this + 2) = 0xFFFFFF;
  v11 = v7[29];
  if ((_DWORD)v11 != -1)
  {
    HeadCloneForWordId = 16777213;
    v13 = *(_DWORD *)(v18[0] + 4 * v11);
    if (v13 != 16777213)
    {
      HeadCloneForWordId = WordIdToHeadCloneWordIdMap::getHeadCloneForWordId((WordNgramTemplate *)((char *)this + 16), v13);
      v7 = (unsigned int *)*((_QWORD *)this + 21);
    }
    *((_DWORD *)this + 2) = HeadCloneForWordId;
  }
  *((_DWORD *)this + 3) = 16777212;
  v14 = v7[25];
  if ((_DWORD)v14 != -1)
  {
    v15 = *(_DWORD *)(v18[0] + 4 * v14);
    if (v15 != 0xFFFFFF)
      *((_DWORD *)this + 3) = WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId((WordNgramTemplate *)((char *)this + 16), v15);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v17);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
}

void sub_209966C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t WordNgramTemplate::getHeadCloneForBuildWordId(WordNgramTemplate *this, uint64_t a2)
{
  switch((_DWORD)a2)
  {
    case 0xFFFFFF:
      return a2;
    case 0xFFFFFE:
      return *((unsigned int *)this + 1);
    case 0xFFFFFD:
      return *((unsigned int *)this + 2);
  }
  return WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId((WordNgramTemplate *)((char *)this + 16), a2);
}

uint64_t WordNgramTemplate::getHeadCloneForWordId(WordNgramTemplate *this, unsigned int a2)
{
  return WordIdToHeadCloneWordIdMap::getHeadCloneForWordId((WordNgramTemplate *)((char *)this + 16), a2);
}

BOOL WordNgramTemplate::isHeadCloneWordId(WordNgramTemplate *this, unsigned int a2)
{
  return WordIdToHeadCloneWordIdMap::isHeadCloneWordId((WordNgramTemplate *)((char *)this + 16), a2);
}

BOOL WordNgramTemplate::isFinalSilenceScoredVerify(WordNgramTemplate *this)
{
  return *((_DWORD *)this + 2) != 0xFFFFFF;
}

uint64_t WordNgramTemplate::addWord(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  WordIdToHeadCloneWordIdMap *v5;
  unsigned int HeadCloneForWordId;

  v3 = *(_QWORD *)(this + 160);
  if (*(_DWORD *)(v3 + 388) > a2
    && *(_BYTE *)(*(_QWORD *)(v3 + 104) + a2)
    && *(_DWORD *)(*(_QWORD *)(v3 + 256) + 4 * a2) == a2
    && a3 != 0xFFFFFF)
  {
    if (*(_BYTE *)this)
    {
      v5 = (WordIdToHeadCloneWordIdMap *)(this + 16);
      HeadCloneForWordId = WordIdToHeadCloneWordIdMap::getHeadCloneForWordId((WordIdToHeadCloneWordIdMap *)(this + 16), a3);
      return WordIdToHeadCloneWordIdMap::addVisibleWordIdMap(v5, a2, HeadCloneForWordId);
    }
  }
  return this;
}

uint64_t WordNgramTemplate::deleteWord(WordNgramTemplate *this, unsigned int a2)
{
  WordIdToHeadCloneWordIdMap *v4;

  v4 = (WordNgramTemplate *)((char *)this + 16);
  if (WordIdToHeadCloneWordIdMap::isHeadCloneWordId((WordNgramTemplate *)((char *)this + 16), a2))
  {
    if (*((_DWORD *)this + 1) == a2)
      *((_DWORD *)this + 1) = 16777212;
    if (*((_DWORD *)this + 2) == a2)
      *((_DWORD *)this + 2) = 0xFFFFFF;
    if (*((_DWORD *)this + 3) == a2)
      *((_DWORD *)this + 3) = 16777212;
  }
  return WordIdToHeadCloneWordIdMap::deleteWord(v4, a2);
}

void WordNgramTemplate::loadWordNgramTemplate(WordNgramTemplate *this, DFile *a2, DFileChecksums *a3, int a4)
{
  if (a4)
    WordNgramTemplate::loadWordNgramTemplateText(this, a2);
  else
    WordNgramTemplate::loadWordNgramTemplateBinary(this, a2, a3);
}

void WordNgramTemplate::loadWordNgramTemplateText(WordNgramTemplate *this, DFile *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  const char **v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  char *LineFieldString;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int LineFieldUnsigned;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t CurrentLine;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  WordNgramTemplate *v65;
  uint64_t v66;
  uint64_t v67;
  int HeadCloneForVisibleWordId;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  const char *v76;
  int v77;
  _QWORD v78[2];
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  _QWORD v84[2];
  _BYTE v85[240];

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v85);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v85, (uint64_t)a2, 0x76u, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v85, "WordNGramTemplateText");
  v84[0] = 0;
  v84[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v85, sWTT_Versions, (uint64_t)v84, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v85, (unsigned int *)v84, v9, v10, v11, v12, v13, v14);
  v83 = 0;
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v85, "BegWordId", &v83, 1, -3, 16777203);
  v17 = v83;
  if (v83 < 0xFFFFF4)
    goto LABEL_5;
  if (v83 == -3)
  {
    *((_DWORD *)this + 1) = 16777213;
LABEL_8:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1223, (uint64_t)"lm/wordt", 9, (uint64_t)"%.500s", v15, v16, (char)"BegWordId");
    goto LABEL_9;
  }
  if (v83 == -2)
  {
    v17 = 16777214;
LABEL_5:
    *((_DWORD *)this + 1) = v17;
    goto LABEL_9;
  }
  *((_DWORD *)this + 1) = 16777212;
  if (v17 != -1)
    goto LABEL_8;
LABEL_9:
  v82 = 0;
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v85, "EndWordId", &v82, 1, -3, 16777203);
  v20 = v82;
  if (v82 < 0xFFFFF4)
  {
LABEL_14:
    *((_DWORD *)this + 2) = v20;
    goto LABEL_17;
  }
  if (v82 == -3)
  {
    v20 = 16777213;
    goto LABEL_14;
  }
  if (v82 == -2)
  {
    *((_DWORD *)this + 2) = 16777214;
  }
  else
  {
    *((_DWORD *)this + 2) = 0xFFFFFF;
    if (v20 == -1)
      goto LABEL_17;
  }
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1233, (uint64_t)"lm/wordt", 9, (uint64_t)"%.500s", v18, v19, (char)"EndWordId");
LABEL_17:
  DgnTextFile::getHeaderFieldBool((DgnTextFile *)v85, "AllowNewWordCloning", (BOOL *)this, 1);
  v81 = 0;
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v85, "IgnoreInContextWordId", &v81, 1, -1, 16777203);
  v28 = v81;
  if (v81 == -1)
    v28 = 16777212;
  *((_DWORD *)this + 3) = v28;
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v85, v21, v22, v23, v24, v25, v26, v27);
  v79 = 0;
  v80 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v85, (uint64_t)&v79);
  v78[0] = 0;
  v78[1] = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v85, (unint64_t)v78);
  if ((_DWORD)v80)
  {
    v31 = 0;
    v32 = 0;
    v74 = -1;
    v75 = -1;
    v33 = -1;
    while (1)
    {
      v34 = (const char **)(v79 + v31);
      if (*(_DWORD *)(v79 + v31 + 8))
      {
        v35 = (char *)*v34;
        if (!strcmp(*v34, "TableName"))
        {
          if (*(_DWORD *)(v78[0] + 4 * v32))
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1265, (uint64_t)"lm/wordt", 7, (uint64_t)"%.500s %.500s", v29, v30, (char)v35);
          v33 = v32;
          goto LABEL_36;
        }
        if (!strcmp(v35, "Index1"))
        {
          if (*(_DWORD *)(v78[0] + 4 * v32) != 3)
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1273, (uint64_t)"lm/wordt", 7, (uint64_t)"%.500s %.500s", v29, v30, (char)v35);
          v75 = v32;
          goto LABEL_36;
        }
        if (!strcmp(v35, "EntryValue1"))
        {
          if (*(_DWORD *)(v78[0] + 4 * v32) != 3)
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1281, (uint64_t)"lm/wordt", 7, (uint64_t)"%.500s %.500s", v29, v30, (char)v35);
          v74 = v32;
          goto LABEL_36;
        }
      }
      else
      {
        v35 = &byte_209A88803;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1285, (uint64_t)"lm/wordt", 6, (uint64_t)"%.500s", v29, v30, (char)v35);
LABEL_36:
      ++v32;
      v31 += 16;
      if (v32 >= v80)
        goto LABEL_39;
    }
  }
  v33 = -1;
  v74 = -1;
  v75 = -1;
LABEL_39:
  v36 = 0xFFFFFF;
  while (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v85))
  {
    DgnString::DgnString((DgnString *)&v76);
    LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v85, v33);
    DgnString::operator=((DgnString *)&v76, LineFieldString);
    LineFieldUnsigned = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v85, v75, v40, v41, v42, v43, v44, v45);
    v53 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v85, v74, v47, v48, v49, v50, v51, v52);
    if (v77)
      v54 = v76;
    else
      v54 = &byte_209A88803;
    if (strcmp(v54, "WordIdToHeadCloneWordId"))
    {
      CurrentLine = DgnTextFile::getCurrentLine((DgnTextFile *)v85);
      if (*(_DWORD *)(CurrentLine + 8))
        v60 = *(char **)CurrentLine;
      else
        v60 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1301, (uint64_t)"lm/wordt", 8, (uint64_t)"%.500s", v58, v59, (char)v60);
    }
    if (v36 != 0xFFFFFF && LineFieldUnsigned <= v36)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1307, (uint64_t)"lm/wordt", 4, (uint64_t)"%u", v55, v56, LineFieldUnsigned);
    if (LineFieldUnsigned == v53)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1310, (uint64_t)"lm/wordt", 5, (uint64_t)"%u", v55, v56, LineFieldUnsigned);
    v61 = *((_QWORD *)this + 20);
    v62 = *(_DWORD *)(v61 + 388);
    if (v62 <= LineFieldUnsigned
      || !*(_BYTE *)(*(_QWORD *)(v61 + 104) + LineFieldUnsigned)
      || *(_DWORD *)(*(_QWORD *)(v61 + 256) + 4 * LineFieldUnsigned) != LineFieldUnsigned)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1313, (uint64_t)"lm/wordt", 1, (uint64_t)"%u", v55, v56, LineFieldUnsigned);
      v61 = *((_QWORD *)this + 20);
      v62 = *(_DWORD *)(v61 + 388);
    }
    if (v62 <= v53
      || !*(_BYTE *)(*(_QWORD *)(v61 + 104) + v53)
      || *(_DWORD *)(*(_QWORD *)(v61 + 256) + 4 * v53) != v53)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1316, (uint64_t)"lm/wordt", 1, (uint64_t)"%u", v55, v56, v53);
    }
    if (!WordIdToHeadCloneWordIdMap::isHeadCloneWordId((WordNgramTemplate *)((char *)this + 16), v53))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1320, (uint64_t)"lm/wordt", 3, (uint64_t)"%u", v63, v64, v53);
    WordIdToHeadCloneWordIdMap::addVisibleWordIdMap((WordNgramTemplate *)((char *)this + 16), LineFieldUnsigned, v53);
    DgnString::~DgnString((DgnString *)&v76);
    v36 = LineFieldUnsigned;
  }
  v65 = this;
  v66 = *((unsigned int *)this + 1);
  if ((v66 | 2) != 0xFFFFFE)
  {
    v67 = *((_QWORD *)this + 20);
    if (*(_DWORD *)(v67 + 388) <= v66
      || !*(_BYTE *)(*(_QWORD *)(v67 + 104) + v66)
      || *(_DWORD *)(*(_QWORD *)(v67 + 256) + 4 * v66) != (_DWORD)v66)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1333, (uint64_t)"lm/wordt", 2, (uint64_t)"%u %.500s", v37, v38, *((_DWORD *)this + 1));
      LODWORD(v66) = *((_DWORD *)this + 1);
    }
    HeadCloneForVisibleWordId = WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId((WordNgramTemplate *)((char *)this + 16), v66);
    v65 = this;
    *((_DWORD *)this + 1) = HeadCloneForVisibleWordId;
  }
  v69 = *((unsigned int *)v65 + 2);
  if ((v69 | 2) != 0xFFFFFF)
  {
    v70 = *((_QWORD *)v65 + 20);
    if (*(_DWORD *)(v70 + 388) <= v69
      || !*(_BYTE *)(*(_QWORD *)(v70 + 104) + v69)
      || *(_DWORD *)(*(_QWORD *)(v70 + 256) + 4 * v69) != (_DWORD)v69)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1343, (uint64_t)"lm/wordt", 2, (uint64_t)"%u %.500s", v37, v38, *((_DWORD *)v65 + 2));
      LODWORD(v69) = *((_DWORD *)this + 2);
    }
    v71 = WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId((WordNgramTemplate *)((char *)this + 16), v69);
    v65 = this;
    *((_DWORD *)this + 2) = v71;
  }
  v72 = *((unsigned int *)v65 + 3);
  if ((_DWORD)v72 != 16777212)
  {
    v73 = *((_QWORD *)v65 + 20);
    if (*(_DWORD *)(v73 + 388) <= v72
      || !*(_BYTE *)(*(_QWORD *)(v73 + 104) + v72)
      || *(_DWORD *)(*(_QWORD *)(v73 + 256) + 4 * v72) != (_DWORD)v72)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1353, (uint64_t)"lm/wordt", 2, (uint64_t)"%u %.500s", v37, v38, *((_DWORD *)v65 + 3));
      LODWORD(v72) = *((_DWORD *)this + 3);
    }
    *((_DWORD *)this + 3) = WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId((WordNgramTemplate *)((char *)this + 16), v72);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v78);
  DgnArray<DgnString>::releaseAll((uint64_t)&v79);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v84);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v85);
}

void sub_2099675F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va1);
  _Unwind_Resume(a1);
}

void WordNgramTemplate::loadWordNgramTemplateBinary(WordNgramTemplate *this, DFile *a2, DFileChecksums *a3)
{
  DgnStream *v6;
  char *v7;
  uint64_t CurrentSubDirComponents;
  unsigned int v9;
  uint64_t v10;

  v10 = 0;
  v6 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x75u, 1, "LMWTTBIN", (_DWORD *)&v10 + 1, &v10);
  if (*((_DWORD *)a2 + 6))
    v7 = (char *)*((_QWORD *)a2 + 2);
  else
    v7 = &byte_209A88803;
  MrecHeaderCheckVersions(v7, "LMWTTBIN", HIDWORD(v10), v10, 0x18u, 1u);
  v9 = 0;
  readObject((uint64_t)v6, (BOOL *)this, &v9);
  readObject((uint64_t)v6, (_DWORD *)this + 1, &v9);
  readObject((uint64_t)v6, (_DWORD *)this + 2, &v9);
  readObject((uint64_t)v6, (_DWORD *)this + 3, &v9);
  readObject<unsigned int,unsigned int,WordIdScope,unsigned int>((uint64_t)v6, (uint64_t)this + 32, &v9);
  readObject<unsigned int>(v6, (uint64_t)this + 144, &v9);
  readObjectChecksumAndVerify(v6, v9);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x75u, v9);
  if (v6)
  {
    (**(void (***)(DgnStream *))v6)(v6);
    MemChunkFree(v6, 0);
  }
}

void WordNgramTemplate::saveWordNgramTemplate(WordNgramTemplate *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  if (a4)
    WordNgramTemplate::saveWordNgramTemplateText(this, a2, a5);
  else
    WordNgramTemplate::saveWordNgramTemplateBinary(this, a2, a3, a5);
}

void WordNgramTemplate::saveWordNgramTemplateText(WordNgramTemplate *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[280];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v33);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v33, (uint64_t)a2, 0x76u, a3);
  v31 = 0;
  v32 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v33, sWTT_Versions, (uint64_t)&v31, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v33, "WordNGramTemplateText", (_QWORD *)(v31 + 8 * (v32 - 1)));
  v11 = *((_DWORD *)this + 1);
  if (v11 == 16777214)
    v12 = -2;
  else
    v12 = -1;
  if (v11 == 16777213)
    v12 = -3;
  if (v11 >= 0xFFFFF4)
    v13 = v12;
  else
    v13 = *((_DWORD *)this + 1);
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v33, "BegWordId", v13);
  v14 = *((_DWORD *)this + 2);
  if (v14 == 16777214)
    v15 = -2;
  else
    v15 = -1;
  if (v14 == 16777213)
    v15 = -3;
  if (v14 >= 0xFFFFF4)
    v16 = v15;
  else
    v16 = *((_DWORD *)this + 2);
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v33, "EndWordId", v16);
  DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v33, "AllowNewWordCloning", *(unsigned __int8 *)this);
  if (*((_DWORD *)this + 3) == 16777212)
    v17 = -1;
  else
    v17 = *((_DWORD *)this + 3);
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v33, "IgnoreInContextWordId", v17);
  v29 = 0;
  v30 = 0;
  v27 = 0;
  v28 = 0;
  DgnString::DgnString((DgnString *)v26, "TableName");
  v18 = v30;
  if ((_DWORD)v30 == HIDWORD(v30))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v29, 1, 1);
    v18 = v30;
  }
  DgnString::DgnString((DgnString *)(v29 + 16 * v18), (const DgnString *)v26);
  LODWORD(v30) = v30 + 1;
  DgnString::~DgnString((DgnString *)v26);
  v19 = v28;
  if ((_DWORD)v28 == HIDWORD(v28))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v27, 1, 1);
    v19 = v28;
  }
  *(_DWORD *)(v27 + 4 * v19) = 0;
  LODWORD(v28) = v19 + 1;
  v20 = v30;
  DgnString::DgnString((DgnString *)v26, "Index1");
  v21 = v30;
  if ((_DWORD)v30 == HIDWORD(v30))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v29, 1, 1);
    v21 = v30;
  }
  DgnString::DgnString((DgnString *)(v29 + 16 * v21), (const DgnString *)v26);
  LODWORD(v30) = v30 + 1;
  DgnString::~DgnString((DgnString *)v26);
  v22 = v28;
  if ((_DWORD)v28 == HIDWORD(v28))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v27, 1, 1);
    v22 = v28;
  }
  *(_DWORD *)(v27 + 4 * v22) = 3;
  LODWORD(v28) = v22 + 1;
  v23 = v30;
  DgnString::DgnString((DgnString *)v26, "EntryValue1");
  v24 = v30;
  if ((_DWORD)v30 == HIDWORD(v30))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v29, 1, 1);
    v24 = v30;
  }
  DgnString::DgnString((DgnString *)(v29 + 16 * v24), (const DgnString *)v26);
  LODWORD(v30) = v30 + 1;
  DgnString::~DgnString((DgnString *)v26);
  v25 = v28;
  if ((_DWORD)v28 == HIDWORD(v28))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v27, 1, 1);
    v25 = v28;
  }
  *(_DWORD *)(v27 + 4 * v25) = 3;
  LODWORD(v28) = v25 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v33, (uint64_t)&v27, (uint64_t)&v29);
  WordNgramTemplate::writeWordIdToHeadCloneWordId(this, (WordNgramTemplate *)((char *)this + 16), (DgnTextFileWriter *)v33, 0, v20, v23, "WordIdToHeadCloneWordId");
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  DgnArray<DgnString>::releaseAll((uint64_t)&v29);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v31);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v33);
}

void sub_209967AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

void WordNgramTemplate::saveWordNgramTemplateBinary(WordNgramTemplate *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v7;
  uint64_t CurrentSubDirComponents;
  int v9;

  v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x75u, a4, "LMWTTBIN", 24, 1);
  v9 = 0;
  writeObject((uint64_t)v7, (unsigned __int8 *)this, &v9);
  writeObject((uint64_t)v7, (int *)this + 1, &v9);
  writeObject((uint64_t)v7, (int *)this + 2, &v9);
  writeObject((uint64_t)v7, (int *)this + 3, &v9);
  writeObject<unsigned int,unsigned int,WordIdScope,unsigned int>((uint64_t)v7, (uint64_t)this + 32, &v9);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 144, &v9);
  writeObjectChecksum((uint64_t)v7, &v9);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x75u, v9);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
}

void WordNgramTemplate::writeWordIdToHeadCloneWordId(WordNgramTemplate *this, const WordIdToHeadCloneWordIdMap *a2, DgnTextFileWriter *a3, unsigned int a4, unsigned int a5, unsigned int a6, char *a7)
{
  unint64_t v14;
  uint64_t v15;
  int HeadCloneForVisibleWordId;
  int v17;

  if (*(_DWORD *)(*(_QWORD *)a2 + 388))
  {
    v14 = 0;
    do
    {
      v15 = *((_QWORD *)this + 20);
      if (v14 < *(unsigned int *)(v15 + 388))
      {
        if (*(_BYTE *)(*(_QWORD *)(v15 + 104) + v14))
        {
          if (v14 == *(_DWORD *)(*(_QWORD *)(v15 + 256) + 4 * v14))
          {
            HeadCloneForVisibleWordId = WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId(a2, v14);
            if (HeadCloneForVisibleWordId != 0xFFFFFF)
            {
              v17 = HeadCloneForVisibleWordId;
              if (v14 != HeadCloneForVisibleWordId)
              {
                DgnTextFileWriter::setLineFieldValue(a3, a4, a7);
                DgnTextFileWriter::setLineFieldUnsignedValue(a3, a5, v14);
                DgnTextFileWriter::setLineFieldUnsignedValue(a3, a6, v17);
                DgnTextFileWriter::writeNextLine((void **)a3);
              }
            }
          }
        }
      }
      ++v14;
    }
    while (v14 < *(unsigned int *)(*(_QWORD *)a2 + 388));
  }
}

void WordNgramTemplate::printSize(WordNgramTemplate *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1389, (DgnString *)&v69);
  if (v70)
    v16 = v69;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v69);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1392, (DgnString *)&v69);
  if (v70)
    v25 = v69;
  else
    v25 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v25, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v69);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1392, (DgnString *)&v69);
  if (v70)
    v30 = v69;
  else
    v30 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v30, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1392, (DgnString *)&v69);
  if (v70)
    v35 = v69;
  else
    v35 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v35, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1392, (DgnString *)&v69);
  if (v70)
    v40 = v69;
  else
    v40 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v40, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += 4;
  *a5 += 4;
  v41 = sizeObject((char *)this + 56);
  v42 = 8;
  v43 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v44 = 8;
  else
    v44 = 12;
  v45 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v45 = 3;
  v46 = (unint64_t)*((unsigned int *)this + 30) << v45;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v42 = 16;
    v43 = 16;
  }
  v47 = *((_DWORD *)this + 38);
  v48 = *((_DWORD *)this + 39);
  v49 = v48 >= v47;
  v50 = v48 - v47;
  if (v49)
  {
    if (v47 > 0)
      v43 += 4 * (v47 - 1) + 4;
    v43 += 4 * v50;
  }
  v51 = v41 + v42 + v44 + v46 + v43 + 13;
  v52 = sizeObject((char *)this + 56);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 8;
  else
    v53 = 12;
  v54 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v54 = 3;
  v55 = (unint64_t)*((unsigned int *)this + 30) << v54;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v56 = 8;
  else
    v56 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v57 = 12;
  else
    v57 = 16;
  v58 = *((_DWORD *)this + 38);
  if (v58 <= *((_DWORD *)this + 39) && v58 > 0)
    v57 += 4 * (v58 - 1) + 4;
  v59 = v52 + v56 + v53 + v55 + v57 + 13;
  v60 = sizeObject((char *)this + 56);
  v61 = *((unsigned int *)this + 38);
  if (v61 <= *((_DWORD *)this + 39))
    v62 = 0;
  else
    v62 = 4 * v61;
  v63 = v62 + v60;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1392, (DgnString *)&v69);
  if (v70)
    v68 = v69;
  else
    v68 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v68, v51, v59, v63);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v51;
  *a5 += v59;
  *a6 += v63;
}

void sub_209968164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218C20;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 16;
  else
    v7 = 20;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_209968238(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

uint64_t Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeBucket(uint64_t result, char **a2)
{
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(char *);
  uint64_t (*v5)(_QWORD *);

  v2 = result;
  v3 = *a2;
  *a2 = *(char **)*a2;
  v4 = *(uint64_t (**)(char *))(result + 96);
  if (v4)
    result = v4(v3 + 12);
  v5 = *(uint64_t (**)(_QWORD *))(v2 + 104);
  if (v5)
    result = v5((_QWORD *)v3 + 2);
  *(_QWORD *)v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  --*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t *Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::reInit(uint64_t a1, int a2)
{
  _QWORD *v4;
  int v5;
  uint64_t *result;

  if (*(_DWORD *)(a1 + 8))
    Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(a1);
  v4 = *(_QWORD **)(a1 + 80);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_DWORD *)(a1 + 88) = 0;
  DgnPool::deleteAllWithoutDestroying((DgnPool *)(a1 + 24));
  v5 = RoundUpToPowerOf2(a2, (unsigned int *)(a1 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v5;
  result = HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  return result;
}

uint64_t TBlock::TBlock(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5, _QWORD *a6)
{
  uint64_t v9;
  void **v10;
  __int128 v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v9 = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v10 = (void **)(a1 + 120);
  *(_QWORD *)&v11 = -1;
  *((_QWORD *)&v11 + 1) = -1;
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v11;
  *(_BYTE *)a1 = a3;
  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  MEMORY[0x20BD147A4](a1 + 48);
  if (a5)
    v12 = a5;
  else
    v12 = &unk_209A7B2D0;
  MEMORY[0x20BD147A4](v9, v12);
  if (a6)
  {
    std::vector<TPItnTagHandle_fake **>::reserve(v10, a6[2]);
    v15 = (_QWORD *)*a6;
    v13 = a6 + 1;
    v14 = v15;
    if (v15 != v13)
    {
      v16 = (_QWORD *)(a1 + 136);
      v17 = *(char **)(a1 + 128);
      do
      {
        if ((unint64_t)v17 >= *v16)
        {
          v18 = (v17 - (_BYTE *)*v10) >> 3;
          if ((unint64_t)(v18 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v19 = *v16 - (_QWORD)*v10;
          v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1))
            v20 = v18 + 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 136, v21);
          else
            v22 = 0;
          v23 = &v22[8 * v18];
          *(_QWORD *)v23 = v14[4];
          v17 = v23 + 8;
          v25 = *(char **)(a1 + 120);
          v24 = *(char **)(a1 + 128);
          if (v24 != v25)
          {
            do
            {
              v26 = *((_QWORD *)v24 - 1);
              v24 -= 8;
              *((_QWORD *)v23 - 1) = v26;
              v23 -= 8;
            }
            while (v24 != v25);
            v24 = (char *)*v10;
          }
          *(_QWORD *)(a1 + 120) = v23;
          *(_QWORD *)(a1 + 128) = v17;
          *(_QWORD *)(a1 + 136) = &v22[8 * v21];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *(_QWORD *)v17 = v14[4];
          v17 += 8;
        }
        *(_QWORD *)(a1 + 128) = v17;
        v27 = (_QWORD *)v14[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD *)v14[2];
            v29 = *v28 == (_QWORD)v14;
            v14 = v28;
          }
          while (!v29);
        }
        v14 = v28;
      }
      while (v28 != v13);
    }
  }
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  return a1;
}

void sub_2099684FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 128) = v6;
    operator delete(v6);
  }
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*(void **)(v1 + 72));
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t TBlock::setRule(uint64_t this, const TItnRule *a2)
{
  *(_QWORD *)(this + 40) = a2;
  if (a2)
  {
    if (*((_BYTE *)a2 + 144))
      JUMPOUT(0x20BD147A4);
  }
  return this;
}

uint64_t TBlock::getMultiWordSeparator(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  int v6;
  unsigned __int8 v7;
  TLocaleInfo *v10;
  char *v11;
  __int32 *v12;
  unsigned int *i;
  unsigned __int8 v14;
  __int32 v15;
  unsigned int v16;
  TLocaleInfo *v17;
  uint64_t v18;
  int v19;
  unsigned __int8 v20;
  TLocaleInfo *v22;

  if (*a1)
    return 0;
  v5 = (int *)(a1 + 48);
  if ((char)a1[71] < 0)
    v5 = *(int **)v5;
  while (1)
  {
    v6 = *v5;
    {
      v10 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v10);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v10;
    }
    if (v6 > 159)
      break;
    if (v6 > 0x20 || ((1 << v6) & 0x100002600) == 0)
      goto LABEL_25;
LABEL_22:
    ++v5;
  }
  if (v6 >= 12288)
  {
    if (v6 != 65279 && v6 != 12288)
      goto LABEL_25;
    goto LABEL_22;
  }
  if (v6 == 160 || v6 == 8203)
    goto LABEL_22;
LABEL_25:
  v11 = TStringParam::get((TStringParam *)(a2 + 4392));
  v2 = *v5;
  if ((_DWORD)v2)
  {
    v12 = (__int32 *)v11;
    for (i = (unsigned int *)v5; ; ++i)
    {
      if ((v14 & 1) == 0
      {
        v17 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v17);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v17;
      }
      v15 = TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v2);
      if (wcschr(v12, v15))
        break;
      v16 = i[1];
      v2 = v16;
      if (!v16)
        return v2;
    }
    if (v5 == (int *)i)
      return 0;
    v18 = 1;
    do
      v19 = i[v18++];
    while (v19 == (_DWORD)v2);
    if (!v19)
    {
      return 0;
    }
    else
    {
      if ((v20 & 1) == 0
      {
        v22 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v22);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v22;
      }
      if (v19 > 159)
      {
        if (v19 >= 12288)
        {
          if (v19 == 65279 || v19 == 12288)
            return 0;
        }
        else if (v19 == 160 || v19 == 8203)
        {
          return 0;
        }
      }
      else if (v19 <= 0x20 && ((1 << v19) & 0x100002600) != 0)
      {
        return 0;
      }
    }
  }
  return v2;
}

void sub_2099687F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TBlock::format(uint64_t a1, unsigned int *a2, TLocaleInfo **a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TLocaleInfo *v9;
  TLocaleInfo *v10;
  TLocaleInfo *v11;
  TLocaleInfo *v12;
  unint64_t v13;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned int *v17;
  unsigned int *v18;
  int v19;
  unsigned __int8 v20;
  unsigned int v21;
  unsigned __int8 v22;
  int v23;
  unsigned int *v24;
  unsigned __int8 v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  unsigned int v30;
  unsigned __int8 v31;
  unsigned int DigitExtended;
  unsigned int *v33;
  unsigned __int8 v34;
  unsigned int v35;
  unsigned int v36;
  unsigned __int8 v37;
  unsigned int *v39;
  int *WideNewLine;
  uint64_t v41;
  TLocaleInfo *v43;
  TLocaleInfo *v44;
  TLocaleInfo *v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  unsigned __int8 v49;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t ActiveConfigHandle;
  uint64_t v58;
  int v59;
  unsigned __int8 v60;
  unint64_t v61;
  int v62;
  unsigned __int8 v63;
  TLocaleInfo *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t ValidConfig;
  int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 v75;
  int v76;
  unsigned __int8 v77;
  int v80;
  uint64_t v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  unsigned __int8 v86;
  int v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  int v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  int v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  TLocaleInfo *v98;
  TLocaleInfo *v99;
  TLocaleInfo *v100;
  TLocaleInfo *v101;
  TLocaleInfo *v102;
  TLocaleInfo *v103;
  TLocaleInfo *v104;
  TLocaleInfo *v105;
  TLocaleInfo *v106;
  TLocaleInfo *v107;
  TLocaleInfo *v108;
  TLocaleInfo *v109;
  unsigned __int8 v110;
  uint64_t v111;
  TLocaleInfo *v113;
  TLocaleInfo *v114;
  TLocaleInfo *v115;
  TLocaleInfo *v116;
  TLocaleInfo *v117;
  TLocaleInfo *v118;
  TLocaleInfo *v119;
  TLocaleInfo *v120;
  TLocaleInfo *v121;
  int *v122;
  TLocaleInfo *v123;
  TLocaleInfo *v127;
  TLocaleInfo *v128;
  uint64_t v130;
  int v131;
  int v133;
  _BYTE *v134;
  __int128 v135;
  _BYTE v136[785];
  char v137;
  unsigned int *v138;
  __int128 v139;
  _BYTE v140[1024];
  char v141;
  unsigned int *v142;
  int v143[3];

  v9 = a3[4];
  if (v9 == (TLocaleInfo *)-1)
    v9 = *a3;
  v127 = v9;
  v10 = a3[6];
  if (v10 == (TLocaleInfo *)-1)
    v10 = a3[2];
  v123 = v10;
  if (a3[5] == (TLocaleInfo *)-1)
    v11 = a3[1];
  else
    v11 = a3[5];
  if (a3[7] == (TLocaleInfo *)-1)
    v12 = a3[3];
  else
    v12 = a3[7];
  v13 = *(_QWORD *)(a9 + 16);
  v142 = a2;
  v138 = (unsigned int *)v140;
  v139 = xmmword_209A57DD0;
  v141 = 1;
  if (v12 == (TLocaleInfo *)-1)
    goto LABEL_65;
  if (*(char *)(a1 + 119) < 0)
  {
    if (*(_QWORD *)(a1 + 104))
      goto LABEL_22;
  }
  else if (*(_BYTE *)(a1 + 119))
  {
    goto LABEL_22;
  }
  v15 = *a2;
  {
    v116 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v116);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v116;
  }
  if (v15 - 65382 >= 0x38 && v15 - 12449 >= 0x56 && v15 - 12443 >= 4 && v15 - 12540 >= 3 && v15 - 65438 > 1)
    goto LABEL_65;
LABEL_22:
  v17 = (unsigned int *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    if (*(_QWORD *)(a1 + 104))
    {
      v17 = *(unsigned int **)v17;
      goto LABEL_28;
    }
  }
  else if (*(_BYTE *)(a1 + 119))
  {
    goto LABEL_28;
  }
  v17 = v142;
LABEL_28:
  v122 = (int *)v17;
  v18 = v142;
  v19 = *v142;
  if (!*v142)
    goto LABEL_65;
  while (1)
  {
    if ((v20 & 1) == 0
    {
      v120 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v120);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v120;
    }
    if (v19 <= 159)
    {
      if (v19 > 0x20 || ((1 << v19) & 0x100002600) == 0)
        goto LABEL_40;
      goto LABEL_42;
    }
    if (v19 >= 12288)
      break;
    if (v19 != 160 && v19 != 8203)
      goto LABEL_40;
LABEL_42:
    v23 = v18[1];
    ++v18;
    v19 = v23;
    if (!v23)
      goto LABEL_65;
  }
  if (v19 == 12288 || v19 == 65279)
    goto LABEL_42;
LABEL_40:
  v21 = *v18;
  {
    v121 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v121);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v121;
  }
  if (TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v21))
    goto LABEL_42;
  if (!*v18)
    goto LABEL_65;
  if (v12 == (TLocaleInfo *)12)
  {
    if ((v28 & 1) == 0
    {
      v119 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v119);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v119;
    }
    TLocaleInfo::katakanaToRomaji(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v122, &v138);
    v26 = *((_QWORD *)&v139 + 1);
    v27 = v139;
    if (*((_QWORD *)&v139 + 1) >= (unint64_t)v139)
    {
      if (v141)
      {
LABEL_61:
        LODWORD(v134) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v138, v26, (int *)&v134, 1uLL);
        v24 = v138;
        --*((_QWORD *)&v139 + 1);
        goto LABEL_64;
      }
LABEL_62:
      v24 = v138;
      if (v27)
        v138[v27 - 1] = 0;
      goto LABEL_64;
    }
LABEL_59:
    v24 = v138;
    v138[v26] = 0;
LABEL_64:
    v142 = v24;
    goto LABEL_65;
  }
  if (v12 == (TLocaleInfo *)11)
  {
    if ((v25 & 1) == 0
    {
      v118 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v118);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v118;
    }
    TLocaleInfo::katakanaToHiragana(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v122, (uint64_t)&v138);
    v26 = *((_QWORD *)&v139 + 1);
    v27 = v139;
    if (*((_QWORD *)&v139 + 1) >= (unint64_t)v139)
    {
      if (v141)
        goto LABEL_61;
      goto LABEL_62;
    }
    goto LABEL_59;
  }
  if (v12 == (TLocaleInfo *)10)
  {
    v24 = (unsigned int *)v122;
    goto LABEL_64;
  }
LABEL_65:
  v29 = *(_QWORD *)(a8 + 128);
  v30 = *v142;
  if (*v142)
  {
    while (2)
    {
      if ((v31 & 1) == 0
      {
        v43 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v43);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v43;
      }
      DigitExtended = v30 - 48;
      if ((int)v30 < 48)
        goto LABEL_76;
      if (v30 <= 0x39)
      {
LABEL_71:
        if (DigitExtended == -1 || v11 != (TLocaleInfo *)9)
          goto LABEL_76;
        v33 = v142;
        if ((v34 & 1) == 0
        {
          v45 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v45);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v45;
        }
        v35 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v33, &v142);
        if (arabicToRoman(v35, a9))
          TBuffer<wchar_t>::insert(a9, *(_QWORD *)(a9 + 16), (int *)v33, v142 - v33);
      }
      else
      {
        if (v30 >= 0x660)
        {
          DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v30);
          goto LABEL_71;
        }
LABEL_76:
        v36 = *v142;
        if ((v37 & 1) == 0
        {
          v44 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v44);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v44;
        }
        if (v36 == 13 || v36 == 10)
        {
          v39 = v142;
          if (*v142 == 13 && v142[1] == 10)
            v39 = v142 + 1;
          v142 = v39 + 1;
          WideNewLine = (int *)TStringParam::get((TStringParam *)(a7 + 144));
          if (!*WideNewLine)
            WideNewLine = (int *)getWideNewLine();
          v41 = 0;
          while (WideNewLine[v41++])
            ;
          TBuffer<wchar_t>::insert(a9, *(_QWORD *)(a9 + 16), WideNewLine, v41 - 1);
        }
        else
        {
          if (*v142 == 223
            && !wcscmp(*(const __int32 **)(v29 + 8), dword_209A7B2D4)
            && !wcscmp(*(const __int32 **)v29, dword_209A7B2E4))
          {
            TBuffer<wchar_t>::insert(a9, *(_QWORD *)(a9 + 16), dword_209A7B2F4, 2uLL);
          }
          else
          {
            LODWORD(v134) = *v142;
            TBuffer<wchar_t>::insert(a9, *(_QWORD *)(a9 + 16), (int *)&v134, 1uLL);
          }
          ++v142;
        }
      }
      v30 = *v142;
      if (!*v142)
        break;
      continue;
    }
  }
  if (v127 == (TLocaleInfo *)4)
  {
    if (v13 < *(_QWORD *)(a9 + 16))
    {
      v54 = *(_QWORD *)a9;
      v55 = v13;
      do
      {
        v56 = TLocaleInfo::toLower(v29, *(unsigned int *)(v54 + 4 * v55));
        v54 = *(_QWORD *)a9;
        *(_DWORD *)(*(_QWORD *)a9 + 4 * v55++) = v56;
      }
      while (v55 < *(_QWORD *)(a9 + 16));
    }
    goto LABEL_162;
  }
  if (v127 == (TLocaleInfo *)5)
  {
    v134 = v136;
    v135 = xmmword_209A57DD0;
    v137 = 1;
    if (v13 < *(_QWORD *)(a9 + 16))
    {
      v52 = v13;
      do
      {
        v53 = *(unsigned int *)(*(_QWORD *)a9 + 4 * v52);
        if ((_DWORD)v53 == 223)
        {
          TBuffer<wchar_t>::insert((uint64_t)&v134, *((unint64_t *)&v135 + 1), dword_209A7B300, 2uLL);
        }
        else
        {
          v143[0] = TLocaleInfo::toUpper(v29, v53);
          TBuffer<wchar_t>::insert((uint64_t)&v134, *((unint64_t *)&v135 + 1), v143, 1uLL);
        }
        ++v52;
      }
      while (v52 < *(_QWORD *)(a9 + 16));
    }
    TBuffer<wchar_t>::resize(a9, v13);
    TBuffer<wchar_t>::operator+=(a9, (uint64_t)&v134);
    if (v137 && v134 != v136 && v134)
      MEMORY[0x20BD149A8]();
    goto LABEL_162;
  }
  if (v127 != (TLocaleInfo *)6)
    goto LABEL_162;
  v130 = v29;
  v46 = v13 + 1;
  v47 = 4 * v13;
  while (2)
  {
    v48 = *(_DWORD *)(*(_QWORD *)a9 + v47);
    if ((v49 & 1) == 0
    {
      v128 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v128);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v128;
    }
    if (v48 <= 159)
    {
      if (v48 > 0x20 || ((1 << v48) & 0x100002600) == 0)
        break;
      goto LABEL_124;
    }
    if (v48 >= 12288)
    {
      if (v48 != 65279 && v48 != 12288)
        break;
      goto LABEL_124;
    }
    if (v48 == 160 || v48 == 8203)
    {
LABEL_124:
      ++v46;
      v47 += 4;
      continue;
    }
    break;
  }
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(a7 + 17408));
  v29 = v130;
  v58 = *(int *)(a7 + 4 * TParam::getValidConfig((TParam *)(a7 + 17408), ActiveConfigHandle) + 17568);
  if (!(_DWORD)v58)
    goto LABEL_153;
  v59 = *(_DWORD *)(*(_QWORD *)a9 + v47);
  {
    v117 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v117);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v117;
    v29 = v130;
  }
  if ((TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v59) & 1) == 0)
  {
    if ((_DWORD)v58 == -1 || (v61 = v58 + v46, v61 > *(_QWORD *)(a9 + 16)))
      v61 = *(_QWORD *)(a9 + 16);
    while (v46 < v61)
    {
      v62 = *(_DWORD *)(*(_QWORD *)a9 + 4 * v46);
      if ((v63 & 1) == 0
      {
        v64 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v64);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v64;
        v29 = v130;
      }
      ++v46;
      if ((TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v62) & 1) != 0)
        goto LABEL_162;
    }
    if (wcscmp(*(const __int32 **)v29, dword_209A7B30C))
      goto LABEL_161;
LABEL_153:
    v66 = *(_QWORD *)(a9 + 8);
    v65 = *(_QWORD *)(a9 + 16);
    if (v65 >= v66)
    {
      if (*(_BYTE *)(a9 + 1048))
      {
        LODWORD(v134) = 0;
        TBuffer<wchar_t>::insert(a9, v65, (int *)&v134, 1uLL);
        --*(_QWORD *)(a9 + 16);
        v67 = *(_QWORD *)a9;
      }
      else
      {
        v67 = *(_QWORD *)a9;
        if (v66)
          *(_DWORD *)(v67 + 4 * v66 - 4) = 0;
      }
    }
    else
    {
      v67 = *(_QWORD *)a9;
      *(_DWORD *)(*(_QWORD *)a9 + 4 * v65) = 0;
    }
    if (!wcsncmp((const __int32 *)(v67 + v47), dword_209A7B31C, 2uLL))
      *(_QWORD *)(*(_QWORD *)a9 + v47) = 0x4A00000049;
    else
LABEL_161:
      *(_DWORD *)(*(_QWORD *)a9 + v47) = TLocaleInfo::toUpper(v29, *(unsigned int *)(*(_QWORD *)a9 + v47));
  }
LABEL_162:
  v68 = a6;
  if (*(_DWORD *)(v29 + 64) == 2)
  {
    v69 = TParam::getActiveConfigHandle((TParam *)(a7 + 16912));
    ValidConfig = TParam::getValidConfig((TParam *)(a7 + 16912), v69);
    v71 = *(unsigned __int8 *)(a7 + ValidConfig + 17064);
    v72 = *(_BYTE *)(a7 + ValidConfig + 17064) != 0;
    v73 = TParam::getActiveConfigHandle((TParam *)(a7 + 16664));
    v131 = *(unsigned __int8 *)(a7 + TParam::getValidConfig((TParam *)(a7 + 16664), v73) + 16816);
    v74 = TParam::getActiveConfigHandle((TParam *)(a7 + 17160));
    v133 = *(unsigned __int8 *)(a7 + TParam::getValidConfig((TParam *)(a7 + 17160), v74) + 17312);
    if ((v75 & 1) == 0
    {
      v114 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v114);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v114;
      v68 = a6;
    }
    v76 = 1;
    if ((v68 - 32) >= 0x5F
      && ((v68 - 162) > 0xD || ((1 << (v68 + 94)) & 0x241B) == 0)
      && (v68 - 10629) >= 2
      && v68 != 8361)
    {
      v76 = 0;
    }
    if ((v77 & 1) == 0
    {
      v115 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v115);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v115;
      v68 = a6;
    }
    if (v13 < *(_QWORD *)(a9 + 16))
    {
      v80 = (v68 - 65281) < 0x60 || (v68 - 65504) < 7 || v68 == 12288;
      do
      {
        v81 = *(unsigned int *)(*(_QWORD *)a9 + 4 * v13);
        if ((v82 & 1) == 0
        {
          v98 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v98);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v98;
        }
        if ((TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v81) & 1) == 0)
        {
          if ((v83 & 1) == 0
          {
            v100 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v100);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v100;
          }
          if ((int)v81 > 159)
          {
            if ((int)v81 >= 12288)
            {
              if ((_DWORD)v81 != 65279 && (_DWORD)v81 != 12288)
                goto LABEL_207;
            }
            else if ((_DWORD)v81 != 160 && (_DWORD)v81 != 8203)
            {
LABEL_207:
              if ((v88 & 1) == 0
              {
                v102 = (TLocaleInfo *)operator new();
                TLocaleInfo::TLocaleInfo(v102);
                TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v102;
              }
              if ((int)v81 < 48
                || v81 >= 0x3A
                && (v81 < 0x660
                 || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v81) == -1))
              {
                if ((v91 & 1) == 0
                {
                  v103 = (TLocaleInfo *)operator new();
                  TLocaleInfo::TLocaleInfo(v103);
                  TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v103;
                }
                if (TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v81))
                {
                  v76 |= (v133 != 0) & (v80 ^ 1);
                  v80 = v76 ^ 1;
                  if (((v76 ^ 1) & 1) != 0)
                  {
                    if ((v92 & 1) == 0
                    {
                      v108 = (TLocaleInfo *)operator new();
                      TLocaleInfo::TLocaleInfo(v108);
                      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v108;
                    }
                    v93 = TLocaleInfo::toWide(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v81);
                  }
                  else
                  {
                    if ((v92 & 1) == 0
                    {
                      v107 = (TLocaleInfo *)operator new();
                      TLocaleInfo::TLocaleInfo(v107);
                      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v107;
                    }
                    v93 = TLocaleInfo::toNarrow(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v81);
                  }
                  *(_DWORD *)(*(_QWORD *)a9 + 4 * v13) = v93;
                }
                else
                {
                  if ((v94 & 1) == 0
                  {
                    v104 = (TLocaleInfo *)operator new();
                    TLocaleInfo::TLocaleInfo(v104);
                    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v104;
                  }
                  v76 = 1;
                  if ((v81 - 32) >= 0x5F
                    && ((v81 - 162) > 0xD || ((1 << (v81 + 94)) & 0x241B) == 0)
                    && (v81 - 10629) >= 2
                    && (_DWORD)v81 != 8361)
                  {
                    v76 = 0;
                  }
                  if ((v95 & 1) == 0
                  {
                    v105 = (TLocaleInfo *)operator new();
                    TLocaleInfo::TLocaleInfo(v105);
                    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v105;
                  }
                  v80 = (v81 - 65281) < 0x60 || (v81 - 65504) < 7 || (_DWORD)v81 == 12288;
                }
              }
              else
              {
                if (v131)
                {
                  if ((v89 & 1) == 0
                  {
                    v106 = (TLocaleInfo *)operator new();
                    TLocaleInfo::TLocaleInfo(v106);
                    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v106;
                  }
                  v90 = TLocaleInfo::toNarrow(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v81);
                }
                else
                {
                  if ((v89 & 1) == 0
                  {
                    v109 = (TLocaleInfo *)operator new();
                    TLocaleInfo::TLocaleInfo(v109);
                    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v109;
                  }
                  v90 = TLocaleInfo::toWide(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v81);
                }
                *(_DWORD *)(*(_QWORD *)a9 + 4 * v13) = v90;
                v80 = v131 == 0;
                v76 = v131 != 0;
              }
              goto LABEL_205;
            }
          }
          else if (v81 > 0x20 || ((1 << v81) & 0x100002600) == 0)
          {
            goto LABEL_207;
          }
        }
        if (v71)
        {
          if ((v86 & 1) == 0
          {
            v99 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v99);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v99;
          }
          v87 = TLocaleInfo::toNarrow(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v81);
        }
        else
        {
          if ((v86 & 1) == 0
          {
            v101 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v101);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v101;
          }
          v87 = TLocaleInfo::toWide(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v81);
        }
        *(_DWORD *)(*(_QWORD *)a9 + 4 * v13) = v87;
        v76 = v72;
        v80 = v71 == 0;
LABEL_205:
        ++v13;
      }
      while (v13 < *(_QWORD *)(a9 + 16));
    }
  }
  {
    v113 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v113);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v113;
  }
  v111 = a5;
  if (a4 > 159)
  {
    if (a4 >= 12288)
    {
      if (a4 != 65279 && a4 != 12288)
        goto LABEL_280;
    }
    else if (a4 != 160 && a4 != 8203)
    {
      goto LABEL_280;
    }
  }
  else if (a4 > 0x20 || ((1 << a4) & 0x100002600) == 0)
  {
    goto LABEL_280;
  }
  if ((unint64_t)v123 - 1 < 3)
    v111 = (uint64_t)v123 - 1;
LABEL_280:
  if (v141 && v138 != (unsigned int *)v140 && v138)
    MEMORY[0x20BD149A8]();
  return v111;
}

void sub_209969B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  MEMORY[0x20BD149A8](v14, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x8A0]))
  {
    if (STACK[0x488] != a14 && STACK[0x488] != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t TBlock::applyControls(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int32 *v6;
  int v7;
  unsigned __int8 v8;
  char isUpper;
  __int128 v10;
  uint64_t MultiWordSeparator;
  unsigned __int8 v12;
  char i;
  int v14;
  uint64_t v15;
  int v16;
  unsigned __int8 v17;
  int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  uint64_t ActiveConfigHandle;
  TLocaleInfo *ValidConfig;
  uint64_t GlobalLocaleInfo;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int32 *v28;
  unsigned __int8 v29;
  int v30;
  int v31;
  uint64_t v32;
  __int32 v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  int v40;
  int v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  TLocaleInfo *v44;
  TLocaleInfo *v45;
  TLocaleInfo *v46;
  TLocaleInfo *v47;
  TLocaleInfo *v48;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int *v62;
  __int32 v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  TLocaleInfo *v70;
  TLocaleInfo *v71;
  TLocaleInfo *v72;
  uint64_t result;
  uint64_t v74;
  TLocaleInfo *v75;
  TLocaleInfo *v76;
  TLocaleInfo *v77;
  TLocaleInfo *v78;
  TLocaleInfo *v79;
  TLocaleInfo *v80;
  TLocaleInfo *v81;
  TLocaleInfo *v82;
  TLocaleInfo *v83;
  TLocaleInfo *v84;
  TLocaleInfo *v85;
  TLocaleInfo *v86;
  int v87;
  uint64_t v89;
  unsigned int *v91;
  __int128 v92;
  _BYTE v93[849];
  char v94;
  _OWORD v95[4];
  _BYTE *v96;
  __int128 v97;
  _BYTE v98[1024];
  char v99;
  int v100[3];

  v96 = v98;
  v97 = xmmword_209A57DD0;
  v99 = 1;
  v6 = (__int32 *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v6 = *(__int32 **)v6;
  v7 = *v6;
  {
    v75 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v75);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v75;
  }
  isUpper = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7);
  *(_QWORD *)&v10 = -1;
  *((_QWORD *)&v10 + 1) = -1;
  v95[3] = v10;
  v95[2] = v10;
  v95[1] = v10;
  v95[0] = v10;
  v89 = a1;
  MultiWordSeparator = TBlock::getMultiWordSeparator((_BYTE *)a1, a3);
  if ((_DWORD)MultiWordSeparator)
  {
    if (*(_DWORD *)(*(_QWORD *)(a4 + 128) + 64) != 2)
      goto LABEL_30;
    if ((v12 & 1) == 0
    {
      v78 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v78);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v78;
    }
    if ((int)MultiWordSeparator > 159)
    {
      if ((int)MultiWordSeparator >= 12288)
      {
        if ((_DWORD)MultiWordSeparator == 12288)
          goto LABEL_18;
        v14 = 65279;
      }
      else
      {
        if ((_DWORD)MultiWordSeparator == 160)
          goto LABEL_18;
        v14 = 8203;
      }
      if ((_DWORD)MultiWordSeparator == v14)
        goto LABEL_18;
    }
    else if (MultiWordSeparator <= 0x20 && ((1 << MultiWordSeparator) & 0x100002600) != 0)
    {
      goto LABEL_18;
    }
    if ((v19 & 1) == 0
    {
      v82 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v82);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v82;
    }
    if (!TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, MultiWordSeparator))
    {
      if ((v20 & 1) == 0
      {
        v83 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v83);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v83;
      }
      if (TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, MultiWordSeparator))
      {
        ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(a3 + 17160));
        ValidConfig = (TLocaleInfo *)TParam::getValidConfig((TParam *)(a3 + 17160), ActiveConfigHandle);
        if (*((_BYTE *)ValidConfig + a3 + 17312))
        {
          GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo(ValidConfig);
          v87 = TLocaleInfo::toNarrow(GlobalLocaleInfo, MultiWordSeparator);
        }
        else
        {
          v74 = TLocaleInfo::getGlobalLocaleInfo(ValidConfig);
          v87 = TLocaleInfo::toWide(v74, MultiWordSeparator);
        }
        v18 = 1;
        goto LABEL_31;
      }
LABEL_30:
      v18 = 0;
      v87 = MultiWordSeparator;
      goto LABEL_31;
    }
LABEL_18:
    v15 = TParam::getActiveConfigHandle((TParam *)(a3 + 16912));
    v16 = *(unsigned __int8 *)(a3 + TParam::getValidConfig((TParam *)(a3 + 16912), v15) + 17064);
    if (v16)
    {
      if ((v17 & 1) == 0
      {
        v80 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v80);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v80;
      }
      v87 = TLocaleInfo::toNarrow(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, MultiWordSeparator);
    }
    else
    {
      if ((v17 & 1) == 0
      {
        v81 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v81);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v81;
      }
      v87 = TLocaleInfo::toWide(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, MultiWordSeparator);
    }
    v18 = 0;
LABEL_31:
    v24 = a1;
    do
    {
      while (1)
      {
        v24 = *(_QWORD *)(v24 + 152);
        if (!v24)
        {
          v27 = 0;
          goto LABEL_42;
        }
        if (*(char *)(v24 + 71) < 0)
          break;
        if (*(_BYTE *)(v24 + 71))
          goto LABEL_37;
      }
    }
    while (!*(_QWORD *)(v24 + 56));
LABEL_37:
    if (*(char *)(v24 + 95) < 0)
    {
      v25 = *(_QWORD *)(v24 + 72);
      v26 = *(_QWORD *)(v24 + 80);
    }
    else
    {
      v25 = v24 + 72;
      v26 = *(unsigned __int8 *)(v24 + 95);
    }
    v27 = *(_DWORD *)(v25 + 4 * v26 - 4);
LABEL_42:
    v91 = (unsigned int *)v93;
    v92 = xmmword_209A57DD0;
    v94 = 1;
    v28 = wcschr(v6, MultiWordSeparator);
    for (i = 1; ; i = 0)
    {
      if (!v28)
      {
        if (v94)
        {
          if (v91 != (unsigned int *)v93 && v91 != 0)
            MEMORY[0x20BD149A8]();
        }
        goto LABEL_109;
      }
      TBuffer<wchar_t>::resize((uint64_t)&v91, 0);
      TBuffer<wchar_t>::insert((uint64_t)&v91, 0, v6, v28 - v6);
      if ((v29 & 1) == 0
      {
        v44 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v44);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v44;
      }
      v30 = 0;
      if ((int)MultiWordSeparator <= 159)
        break;
      if ((int)MultiWordSeparator >= 12288)
      {
        if ((_DWORD)MultiWordSeparator == 12288)
          goto LABEL_56;
        v31 = 65279;
      }
      else
      {
        if ((_DWORD)MultiWordSeparator == 160)
          goto LABEL_56;
        v31 = 8203;
      }
      if ((_DWORD)MultiWordSeparator != v31)
        goto LABEL_55;
LABEL_56:
      TItnControlState::set(v95, a2, isUpper, i & 1, v30, 1uLL);
      if (*v28 == (_DWORD)MultiWordSeparator)
      {
        v32 = 0;
        v6 = v28;
        do
        {
          ++v32;
          v33 = v6[1];
          ++v6;
        }
        while (v33 == (_DWORD)MultiWordSeparator);
      }
      else
      {
        v32 = 0;
        v6 = v28;
      }
      if (*((_QWORD *)&v92 + 1) >= (unint64_t)v92)
      {
        if (v94)
        {
          v100[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v91, *((unint64_t *)&v92 + 1), v100, 1uLL);
          v34 = v91;
          --*((_QWORD *)&v92 + 1);
        }
        else
        {
          v34 = v91;
          if ((_QWORD)v92)
            v91[(_QWORD)v92 - 1] = 0;
        }
      }
      else
      {
        v34 = v91;
        v91[*((_QWORD *)&v92 + 1)] = 0;
      }
      v35 = TBlock::format(a1, v34, (TLocaleInfo **)v95, MultiWordSeparator, v32, v27, a3, a4, (uint64_t)&v96);
      v36 = v35;
      if (*((_QWORD *)&v97 + 1))
        v27 = *(_DWORD *)&v96[4 * *((_QWORD *)&v97 + 1) - 4];
      if (v35)
        v37 = v18;
      else
        v37 = 0;
      if (v37 != 1)
      {
        v41 = v87;
        if (!v35)
          goto LABEL_85;
        goto LABEL_83;
      }
      if ((v38 & 1) == 0
      {
        v45 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v45);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v45;
      }
      if ((v27 - 32) < 0x5F
        || (v27 - 162) <= 0xD && ((1 << (v27 + 94)) & 0x241B) != 0
        || (v27 - 10629) < 2
        || v27 == 8361)
      {
        if ((v39 & 1) == 0
        {
          v46 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v46);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v46;
        }
        v40 = TLocaleInfo::toNarrow(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, MultiWordSeparator);
      }
      else
      {
        if ((v42 & 1) == 0
        {
          v47 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v47);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v47;
        }
        if ((v27 - 65281) >= 0x60 && (v27 - 65504) >= 7)
        {
          v41 = v87;
          if (v27 != 12288)
            goto LABEL_83;
        }
        if ((v43 & 1) == 0
        {
          v48 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v48);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v48;
        }
        v40 = TLocaleInfo::toWide(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, MultiWordSeparator);
      }
      v41 = v40;
      do
      {
LABEL_83:
        v100[0] = v41;
        TBuffer<wchar_t>::insert((uint64_t)&v96, *((unint64_t *)&v97 + 1), v100, 1uLL);
        --v36;
      }
      while (v36);
      v27 = v41;
LABEL_85:
      v28 = wcschr(v6, MultiWordSeparator);
    }
    if (MultiWordSeparator <= 0x20 && ((1 << MultiWordSeparator) & 0x100002600) != 0)
      goto LABEL_56;
LABEL_55:
    v30 = 1;
    goto LABEL_56;
  }
  i = 1;
LABEL_109:
  TItnControlState::set(v95, a2, isUpper, i & 1, 1, 1uLL);
  v50 = TParam::getActiveConfigHandle((TParam *)(a3 + 3792));
  v51 = TParam::getValidConfig((TParam *)(a3 + 3792), v50);
  v52 = a1;
  if (*(_BYTE *)(a3 + v51 + 3944))
  {
    v53 = 1;
  }
  else
  {
    if (*(char *)(a1 + 71) < 0)
      v54 = *(_QWORD *)(a1 + 56);
    else
      v54 = *(unsigned __int8 *)(a1 + 71);
    v53 = v54 == 0;
  }
  v55 = !v53;
  v56 = a1;
  do
  {
    while (1)
    {
      v56 = *(_QWORD *)(v56 + 152);
      if (!v56)
      {
        v59 = 0;
        goto LABEL_126;
      }
      if (*(char *)(v56 + 71) < 0)
        break;
      if (*(_BYTE *)(v56 + 71))
        goto LABEL_121;
    }
  }
  while (!*(_QWORD *)(v56 + 56));
LABEL_121:
  if (*(char *)(v56 + 95) < 0)
  {
    v57 = *(_QWORD *)(v56 + 72);
    v58 = *(_QWORD *)(v56 + 80);
  }
  else
  {
    v57 = v56 + 72;
    v58 = *(unsigned __int8 *)(v56 + 95);
  }
  v59 = *(_DWORD *)(v57 + 4 * v58 - 4);
LABEL_126:
  v60 = *(_QWORD *)(a1 + 144);
  if (!v60)
  {
LABEL_132:
    v61 = 0;
    goto LABEL_135;
  }
  while ((*(char *)(v60 + 71) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v60 + 71))
    {
      v62 = (int *)(v60 + 48);
      goto LABEL_134;
    }
LABEL_131:
    v60 = *(_QWORD *)(v60 + 144);
    if (!v60)
      goto LABEL_132;
  }
  if (!*(_QWORD *)(v60 + 56))
    goto LABEL_131;
  v62 = *(int **)(v60 + 48);
LABEL_134:
  v61 = *v62;
LABEL_135:
  if (*v6)
  {
    v51 = wcslen(v6);
    v63 = v6[v51 - 1];
  }
  else
  {
    v63 = 0;
  }
  if ((v64 & 1) == 0)
  {
    if ((_DWORD)v51)
    {
      v76 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v76);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v76;
      v52 = v89;
    }
  }
  if ((v63 - 19968) >> 4 < 0x51B)
    goto LABEL_142;
  if ((v65 & 1) == 0)
  {
    if ((_DWORD)v51)
    {
      v77 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v77);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v77;
      v52 = v89;
    }
  }
  if ((v61 - 19968) >> 4 < 0x51B)
    goto LABEL_142;
  if ((v66 & 1) == 0)
  {
    if ((_DWORD)v51)
    {
      v79 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v79);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v79;
      v52 = v89;
    }
  }
  if ((v63 - 65382) < 0x38
    || (v63 - 12449) < 0x56
    || (v63 - 12443) < 4
    || (v63 - 12540) < 3
    || (v63 - 65438) < 2)
  {
    goto LABEL_142;
  }
  if ((v67 & 1) == 0)
  {
    if ((_DWORD)v51)
    {
      v84 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v84);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v84;
      v52 = v89;
    }
  }
  if ((v61 - 65382) < 0x38
    || (v61 - 12449) < 0x56
    || (v61 - 12443) < 4
    || (v61 - 12540) < 3
    || (v61 - 65438) < 2)
  {
    goto LABEL_142;
  }
  if ((v68 & 1) == 0)
  {
    if ((_DWORD)v51)
    {
      v85 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v85);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v85;
      v52 = v89;
    }
  }
  if ((v63 - 12353) < 0x53 || (v63 - 12540) < 3 || (v63 - 12445) < 2)
    goto LABEL_142;
  if ((v69 & 1) == 0)
  {
    if ((_DWORD)v51)
    {
      v86 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v86);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v86;
    }
  }
  v52 = v89;
  if ((v61 - 12353) < 0x53)
    goto LABEL_142;
  if ((v61 - 12540) < 3)
    goto LABEL_142;
  if ((v61 - 12445) < 2)
    goto LABEL_142;
  v70 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)v51);
  if ((v63 & 0xFFFFFFC0) == 0x3000)
    goto LABEL_142;
  v71 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v70);
  if ((v61 & 0xFFFFFFC0) == 0x3000)
    goto LABEL_142;
  v72 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v71);
  if ((v63 - 3585) > 0x5A)
  {
    v52 = v89;
    goto LABEL_143;
  }
  TLocaleInfo::getGlobalLocaleInfo(v72);
  v52 = v89;
  if ((v61 - 3585) <= 0x5A)
LABEL_142:
    v55 = 0;
LABEL_143:
  *(_QWORD *)(v52 + 224) = TBlock::format(v52, (unsigned int *)v6, (TLocaleInfo **)v95, 32, v55, v59, a3, a4, (uint64_t)&v96);
  if (*((_QWORD *)&v97 + 1) >= (unint64_t)v97)
  {
    if (v99)
    {
      LODWORD(v91) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v96, *((unint64_t *)&v97 + 1), (int *)&v91, 1uLL);
      --*((_QWORD *)&v97 + 1);
    }
    else if ((_QWORD)v97)
    {
      *(_DWORD *)&v96[4 * v97 - 4] = 0;
    }
  }
  else
  {
    *(_DWORD *)&v96[4 * *((_QWORD *)&v97 + 1)] = 0;
  }
  result = MEMORY[0x20BD147A4](v52 + 72);
  if (v99)
  {
    result = (uint64_t)v96;
    if (v96 != v98)
    {
      if (v96)
        return MEMORY[0x20BD149A8]();
    }
  }
  return result;
}

void sub_20996ABBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  unint64_t v14;

  MEMORY[0x20BD149A8](v12, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x8C8]))
  {
    v14 = STACK[0x4B0];
    if (STACK[0x4B0] != a12)
    {
      if (v14)
        MEMORY[0x20BD149A8](v14, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

void TBlock::adjustResult(std::wstring *this)
{
  unsigned int v2;
  unint64_t size;
  std::wstring::__raw *v4;
  unint64_t v5;
  std::wstring::size_type v6;
  std::wstring::size_type v7;
  std::wstring *v8;
  signed int v9;
  unsigned __int8 v10;
  std::wstring::pointer data;
  _QWORD *v12;
  std::wstring::size_type v13;
  TLocaleInfo *v14;

  v2 = HIBYTE(this[3].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
  {
    size = this[3].__r_.__value_.__l.__size_;
    if (size < 2)
      return;
  }
  else
  {
    if (v2 < 2)
      return;
    size = HIBYTE(this[3].__r_.__value_.__r.__words[2]);
  }
  v4 = (std::wstring::__raw *)&this[3];
  v5 = size - 1;
  if ((v2 & 0x80) != 0)
  {
    if (*(_DWORD *)(v4->__words[0] + 4 * v5) != 46)
      return;
    v6 = this[3].__r_.__value_.__l.__size_;
  }
  else
  {
    if (*((_DWORD *)v4->__words + v5) != 46)
      return;
    v6 = HIBYTE(this[3].__r_.__value_.__r.__words[2]);
  }
  v7 = v6 - 2;
  v8 = this + 3;
  if ((v2 & 0x80) != 0)
    v8 = (std::wstring *)v4->__words[0];
  v9 = v8->__r_.__value_.__s.__data_[v7];
  {
    v14 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v14);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v14;
  }
  if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9))
  {
    data = this[6].__r_.__value_.__l.__data_;
    if (data)
    {
      v12 = data + 18;
      if (*((char *)data + 95) < 0)
        v12 = (_QWORD *)*v12;
      if (*(_DWORD *)v12 == 46)
      {
        if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
          v13 = this[3].__r_.__value_.__l.__size_;
        else
          v13 = HIBYTE(this[3].__r_.__value_.__r.__words[2]);
        std::wstring::resize(this + 3, v13 - 1, 0);
      }
    }
  }
}

void sub_20996AEA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void throwBadLengthForNullPointer(char a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/verifptr.cpp", 36, (uint64_t)"mrecutil/verifptr", 1, (uint64_t)"%llu %.500s", a7, a8, a1);
}

void throwBadStringPointer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/verifptr.cpp", 41, (uint64_t)"mrecutil/verifptr", 2, (uint64_t)"%s", a7, a8, (char)&errStr_mrecutil_verifptr_E_BAD_STRING_PTR);
}

void MrecInitModule_neuraln_neuraln(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugShowNNRunFunctSequence)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowNNRunFunctSequence", byte_209A7B36D, byte_209A7B36D, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowNNRunFunctSequence = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowNNRunFunctSequence);
  }
}

void NeuralNet::~NeuralNet(NeuralNetImage **this)
{
  DgnDelete<NeuralNetImage>(this[10]);
  DgnDelete<NeuralNetState>(this[9]);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 3));
}

NeuralNetImage *DgnDelete<NeuralNetImage>(NeuralNetImage *result)
{
  _QWORD *v1;

  if (result)
  {
    NeuralNetImage::~NeuralNetImage(result);
    return (NeuralNetImage *)MemChunkFree(v1, 0);
  }
  return result;
}

NeuralNetState *DgnDelete<NeuralNetState>(NeuralNetState *result)
{
  _QWORD *v1;

  if (result)
  {
    NeuralNetState::~NeuralNetState(result);
    return (NeuralNetState *)MemChunkFree(v1, 0);
  }
  return result;
}

void NeuralNet::saveNeuralNet(NeuralNet *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  NeuralNetImage *v5;

  v5 = (NeuralNetImage *)*((_QWORD *)this + 10);
  if (a4)
    NeuralNetImage::saveNeuralNetImageText(v5, a2, a5);
  else
    NeuralNetImage::saveNeuralNetImageBinary(v5, a2, a3, a5);
}

void NeuralNetImage::saveNeuralNetImageText(NeuralNetImage *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  int v33[2];
  uint64_t v34;
  uint64_t v35;
  void *v36[35];
  void *v37;

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v36);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v36, (uint64_t)a2, 0x31u, a3);
  v34 = 0;
  v35 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v36, sNNT_Versions, (uint64_t)&v34, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v36, "NeuralNetText", (_QWORD *)(v34 + 8 * (v35 - 1)));
  v11 = *((unsigned __int16 *)this + 104) - 1;
  if (v11 < 3)
    DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v36, "NeuralNetOutputType", off_24C21F3A8[(__int16)v11]);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "NumberOfNeurons", *((unsigned __int16 *)this + 105));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "NumberOfBlocks", *((unsigned __int16 *)this + 106));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "NumberOfInputNeurons", *((unsigned __int16 *)this + 107));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "NumberOfOutputNeurons", *((unsigned __int16 *)this + 108));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "InputFeatureDim", *((unsigned __int16 *)this + 109));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "InputContextWindowSize", *((unsigned __int16 *)this + 110));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "WeightIntScale", *((unsigned int *)this + 58));
  if ((*((_WORD *)this + 104) & 0xFFFE) == 2)
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "OutputFeatureScaleAndOffsetIntScale", *((unsigned __int16 *)this + 113));
  DgnArray<DgnString>::DgnArray(v33, 6);
  v37 = 0;
  v12 = realloc_array(0, &v37, 0x18uLL, 0, 0, 1);
  v30 = v37;
  v31 = 6;
  v32 = v12 >> 2;
  DgnString::operator=(*(DgnString **)v33, "TableName");
  *v30 = 0;
  DgnString::operator=((DgnString *)(*(_QWORD *)v33 + 16), "UnsValue1");
  v30[1] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v33 + 32), "UnsValue2");
  v30[2] = 3;
  DgnString::operator=((DgnString *)(*(_QWORD *)v33 + 48), "IntValue1");
  v30[3] = 1;
  DgnString::operator=((DgnString *)(*(_QWORD *)v33 + 64), "IntValue2");
  v30[4] = 1;
  DgnString::operator=((DgnString *)(*(_QWORD *)v33 + 80), "IntValue3");
  v30[5] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v36, (uint64_t)&v30, (uint64_t)v33);
  if (*((_WORD *)this + 105))
  {
    v13 = 0;
    while (2)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v36, 0, "Neuron");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 1u, v13);
      v14 = *(unsigned __int16 *)(*((_QWORD *)this + 37) + 2 * v13);
      switch(*(_WORD *)(*((_QWORD *)this + 37) + 2 * v13))
      {
        case 0:
          goto LABEL_13;
        case 1:
          v14 = 2;
          goto LABEL_13;
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
          goto LABEL_11;
        case 4:
          v14 = 1;
          goto LABEL_13;
        case 9:
          goto LABEL_10;
        default:
          if (v14 == 91)
LABEL_10:
            v14 = 3;
          else
LABEL_11:
            v14 = 4 * (v14 == 3);
LABEL_13:
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 2u, v14);
          v15 = *((unsigned __int16 *)this + 107);
          if (v13 >= v15)
            v16 = *(_DWORD *)(*((_QWORD *)this + 2) + 4 * (v13 - v15));
          else
            v16 = 0;
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 3u, v16);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 4u, 0);
          if (*((_WORD *)this + 104) == 1
            && (v17 = *((unsigned __int16 *)this + 105),
                v18 = *((unsigned __int16 *)this + 108),
                v13 >= (v17 - v18)))
          {
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 5u, *(unsigned __int16 *)(*((_QWORD *)this + 24) + 2 * (v13 + v18 - v17)));
          }
          else
          {
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 5u, -1);
          }
          DgnTextFileWriter::writeNextLine(v36);
          if (++v13 >= *((unsigned __int16 *)this + 105))
            break;
          continue;
      }
      break;
    }
  }
  if (*((_WORD *)this + 106))
  {
    v19 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v36, 0, "Block");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 1u, v19);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 2u, *(unsigned __int16 *)(*((_QWORD *)this + 39) + 2 * v19));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 3u, *(unsigned __int16 *)(*((_QWORD *)this + 41) + 2 * v19));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 4u, *(unsigned __int16 *)(*((_QWORD *)this + 43) + 2 * v19));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 5u, *(unsigned __int16 *)(*((_QWORD *)this + 45) + 2 * v19));
      DgnTextFileWriter::writeNextLine(v36);
      ++v19;
      v20 = *((unsigned __int16 *)this + 106);
    }
    while (v19 < v20);
    if (*((_WORD *)this + 106))
    {
      v21 = 0;
      v22 = *((_QWORD *)this + 41);
      do
      {
        if (*(_WORD *)(v22 + 2 * v21))
        {
          v23 = 0;
          v24 = *(unsigned __int16 *)(*((_QWORD *)this + 43) + 2 * v21);
          v25 = *(unsigned __int16 *)(*((_QWORD *)this + 39) + 2 * v21);
          v26 = *((_QWORD *)this + 45);
          do
          {
            if (*(_WORD *)(v26 + 2 * v21))
            {
              v27 = 0;
              v28 = 16 * v24;
              do
              {
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v36, 0, "Weight");
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 1u, v21);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 2u, v23 + v25);
                DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 3u, v24 + v27);
                DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 4u, *(__int16 *)(*(_QWORD *)(*(_QWORD *)this + v28) + 2 * v23));
                DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 5u, 0);
                DgnTextFileWriter::writeNextLine(v36);
                ++v27;
                v26 = *((_QWORD *)this + 45);
                v28 += 16;
              }
              while (v27 < *(unsigned __int16 *)(v26 + 2 * v21));
              v22 = *((_QWORD *)this + 41);
            }
            ++v23;
          }
          while (v23 < *(unsigned __int16 *)(v22 + 2 * v21));
          LOWORD(v20) = *((_WORD *)this + 106);
        }
        ++v21;
      }
      while (v21 < (unsigned __int16)v20);
    }
  }
  if ((*((_WORD *)this + 104) & 0xFFFE) == 2 && *((_WORD *)this + 108))
  {
    v29 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v36, 0, "OutputFeatureScaleAndOffset");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 1u, v29);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 2u, *(_DWORD *)(*((_QWORD *)this + 20) + 4 * v29));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 3u, *(_DWORD *)(*((_QWORD *)this + 22) + 4 * v29));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 4u, 0);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 5u, 0);
      DgnTextFileWriter::writeNextLine(v36);
      ++v29;
    }
    while (v29 < *((unsigned __int16 *)this + 108));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v30);
  DgnArray<DgnString>::releaseAll((uint64_t)v33);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v34);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v36);
}

void sub_20996B694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va2);
  _Unwind_Resume(a1);
}

void NeuralNetImage::saveNeuralNetImageBinary(NeuralNetImage *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v7;
  uint64_t CurrentSubDirComponents;
  int v9;

  v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x30u, a4, "MRNNB!?", 24, 7);
  v9 = 0;
  writeObject<DgnPrimArray<short>>((uint64_t)v7, (uint64_t)this, &v9);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 16, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 32, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 48, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 64, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 80, &v9);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 96, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 112, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 128, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 144, &v9);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 160, &v9);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 176, &v9);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 104, &v9);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 105, &v9);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 106, &v9);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 107, &v9);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 108, &v9);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 109, &v9);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 110, &v9);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 111, &v9);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 112, &v9);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 113, &v9);
  writeObject((uint64_t)v7, (int *)this + 58, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 192, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 296, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 312, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 328, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 344, &v9);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 360, &v9);
  writeObjectChecksum((uint64_t)v7, &v9);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x30u, v9);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
}

uint64_t NeuralNet::getWindowSize(NeuralNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = **((_QWORD **)this + 9);
  if (!v8)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 299, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
    v8 = **((_QWORD **)this + 9);
  }
  return *(unsigned __int16 *)(v8 + 220);
}

uint64_t NeuralNet::getHalfWindowSize(NeuralNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = **((_QWORD **)this + 9);
  if (!v8)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 307, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
    v8 = **((_QWORD **)this + 9);
  }
  return *(unsigned __int16 *)(v8 + 220) >> 1;
}

uint64_t NeuralNet::getFrameSize(NeuralNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = **((_QWORD **)this + 9);
  if (!v8)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 320, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
    v8 = **((_QWORD **)this + 9);
  }
  return *(unsigned __int16 *)(v8 + 218);
}

uint64_t NeuralNet::getOutputSize(NeuralNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = **((_QWORD **)this + 9);
  if (!v8)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 327, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
    v8 = **((_QWORD **)this + 9);
  }
  return *(unsigned __int16 *)(v8 + 216);
}

BOOL NeuralNet::isOutTypeBF(NeuralNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = **((_QWORD **)this + 9);
  if (!v8)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 333, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
    v8 = **((_QWORD **)this + 9);
  }
  return *(unsigned __int16 *)(v8 + 208) == 2;
}

BOOL NeuralNet::isOutTypeConcatenatedBF(NeuralNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = **((_QWORD **)this + 9);
  if (!v8)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 340, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
    v8 = **((_QWORD **)this + 9);
  }
  return *(unsigned __int16 *)(v8 + 208) == 3;
}

void NeuralNet::reset(NeuralNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!**((_QWORD **)this + 9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 353, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
  NeuralNet::initFastNeuralNet(this);
}

void NeuralNet::initFastNeuralNet(NeuralNet *this)
{
  uint64_t v2;
  int v3;
  _DWORD *v4;
  _DWORD *v5;
  int *v6;
  int v7;

  v2 = *((_QWORD *)this + 9);
  v3 = *(_DWORD *)(v2 + 12) - *(_DWORD *)(v2 + 16);
  if (v3 >= 1)
  {
    v4 = *(_DWORD **)(v2 + 56);
    v5 = &v4[v3];
    v6 = *(int **)(*(_QWORD *)v2 + 16);
    do
    {
      v7 = *v6++;
      *v4++ = v7;
    }
    while (v4 < v5);
  }
  bzero(*(void **)(v2 + 88), 2 * *(unsigned int *)(v2 + 96));
  bzero(*(void **)(*((_QWORD *)this + 9) + 72), 2 * *(unsigned int *)(*((_QWORD *)this + 9) + 80));
}

double NeuralNet::run(NeuralNet *a1, uint64_t *a2, unsigned int a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;
  uint64_t *v14;
  uint64_t Feature;
  _QWORD *v16;
  uint64_t v17;
  double *v18;
  double *v19;
  double v20;
  int v21;

  if (!**((_QWORD **)a1 + 9))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 380, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
  if (!(a4 | a5))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 382, (uint64_t)"neuraln/neuraln", 18, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_BAD_RUN_API_OUTPUT_PARAMETERS);
  NeuralNet::loadInputFastNeuralNet((uint64_t)a1, a2, a3);
  NeuralNet::runFastNeuralNet(a1);
  v14 = (uint64_t *)*((_QWORD *)a1 + 9);
  if ((*(_WORD *)(*v14 + 208) & 0xFFFE) == 2)
  {
    if (a4)
    {
      FeatureFrame::setFeature(v14[19], (uint64_t)(v14 + 3));
      v21 = 0;
      BinaryIntScale::setScale(&v21, *(unsigned __int16 *)(**((_QWORD **)a1 + 9) + 226));
      FeatureFrame::scaleFeatureToUns8(*(_QWORD *)(*((_QWORD *)a1 + 9) + 152), (_QWORD *)(**((_QWORD **)a1 + 9) + 160), (_QWORD *)(**((_QWORD **)a1 + 9) + 176), (BinaryIntScale *)&v21);
      Feature = FeatureFrame::getFeature(*(FeatureFrame **)(*((_QWORD *)a1 + 9) + 152));
      DgnPrimArray<unsigned char>::copyArraySlice(a4, (_QWORD *)Feature, 0, *(_DWORD *)(Feature + 8));
    }
    if (a5)
    {
      v16 = (_QWORD *)*((_QWORD *)a1 + 9);
      v17 = *((unsigned int *)v16 + 8);
      if ((_DWORD)v17)
      {
        v18 = (double *)v16[3];
        v19 = *(double **)a5;
        do
        {
          v20 = *v18++;
          result = v20;
          *v19++ = v20;
          --v17;
        }
        while (v17);
      }
    }
  }
  return result;
}

uint64_t NeuralNet::loadInputFastNeuralNet(uint64_t result, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  double v8;
  _WORD *v9;
  unsigned int v10;
  double v11;
  double v12;
  double v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;

  v3 = *(_QWORD *)(result + 80);
  v4 = *(unsigned __int16 *)(v3 + 220);
  if (v4 == 1)
  {
    v5 = *(_QWORD *)(result + 72);
    v6 = *(unsigned int *)(v5 + 16);
    if ((_DWORD)v6)
    {
      v7 = *(unsigned __int8 **)(*a2 + 16 * (a3 % *((_DWORD *)a2 + 2)));
      v8 = (double)*(int *)(v3 + 240);
      v9 = *(_WORD **)(v5 + 72);
      do
      {
        v10 = *v7++;
        v11 = (double)v10;
        if ((double)v10 > 256.0)
          v11 = 256.0;
        v12 = v11 * v8;
        if (v12 >= 0.0)
          v13 = 0.5;
        else
          v13 = -0.5;
        *v9++ = (int)(v12 + v13);
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    v14 = a3 - (v4 >> 1);
    v15 = a3 + (v4 >> 1);
    if (v14 <= v15)
    {
      v16 = 0;
      v17 = *((_DWORD *)a2 + 2);
      v18 = *a2;
      v19 = *(unsigned int *)(*a2 + 16 * (a3 % v17) + 8);
      do
      {
        if ((_DWORD)v19)
        {
          v20 = *(unsigned __int8 **)(v18 + 16 * (v14 % v17));
          v21 = (double)*(int *)(v3 + 240);
          v22 = *(_QWORD *)(*(_QWORD *)(result + 72) + 72);
          v23 = v19;
          do
          {
            v24 = *v20++;
            v25 = (double)v24;
            if ((double)v24 > 256.0)
              v25 = 256.0;
            v26 = v25 * v21;
            if (v26 >= 0.0)
              v27 = 0.5;
            else
              v27 = -0.5;
            v28 = (v16 + 1);
            *(_WORD *)(v22 + 2 * v16) = (int)(v26 + v27);
            LODWORD(v16) = v16 + 1;
            --v23;
          }
          while (v23);
        }
        else
        {
          v28 = v16;
        }
        ++v14;
        v16 = v28;
      }
      while (v14 <= v15);
    }
  }
  return result;
}

void NeuralNet::runFastNeuralNet(NeuralNet *this)
{
  unsigned __int16 **v2;
  uint64_t v3;
  double v4;
  int *v5;
  uint64_t v6;
  unsigned __int16 *v7;

  v2 = *(unsigned __int16 ***)(*((_QWORD *)this + 9) + 104);
  v3 = NeuralNet::fastInputSendingWithDotProduct((uint64_t)this, *v2);
  v5 = (int *)*((_QWORD *)this + 9);
  if (v5[5] >= 2)
  {
    v6 = 1;
    do
    {
      v7 = v2[v6];
      switch(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 96) + 4 * v6))
      {
        case 1:
          v3 = NeuralNet::fastDpsSendingWithDotProduct((uint64_t)this, v7);
          break;
        case 2:
          v3 = NeuralNet::fastLinearSendingWithDotProduct((uint64_t)this, v7);
          break;
        case 3:
          v3 = NeuralNet::fastFeedbackSendingWithDotProduct(v3, v7);
          break;
        case 4:
          NeuralNet::fastOutputDps((uint64_t)this, v7);
          break;
        case 5:
          v3 = NeuralNet::fastOutputLinear((uint64_t)this, v7, v4);
          break;
        case 6:
          NeuralNet::fastOutputDpsm((uint64_t)this, v7);
          break;
        case 7:
          v3 = NeuralNet::fastReluSendingWithDotProduct((uint64_t)this, v7);
          break;
        case 8:
          v4 = NeuralNet::fastOutputRelu((uint64_t)this, v7, v4);
          break;
        default:
          break;
      }
      ++v6;
      v5 = (int *)*((_QWORD *)this + 9);
    }
    while (v6 < v5[5]);
  }
}

FeatureFrame *NeuralNetState::freeExecutionSpace(NeuralNetState *this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *((unsigned int *)this + 28);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *((_QWORD *)this + 13);
    do
    {
      v5 = *(_QWORD **)(v4 + 8 * v3);
      if (v5)
      {
        MemChunkFree(v5, 0);
        v2 = *((unsigned int *)this + 28);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return DgnDelete<FeatureFrame>(*((FeatureFrame **)this + 19));
}

uint64_t NeuralNet::fastInputSendingWithDotProduct(uint64_t a1, unsigned __int16 *a2)
{
  _QWORD *v2;
  _WORD *v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  _QWORD *v6;
  _WORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int16 *v16;
  __int16 *v17;
  int v18;
  _DWORD *v19;
  int v20;
  uint64_t result;

  v3 = (_WORD *)*((_QWORD *)a2 + 9);
  v2 = (_QWORD *)*((_QWORD *)a2 + 10);
  if (*a2)
  {
    v4 = (unsigned __int16 *)*((_QWORD *)a2 + 3);
    v5 = &v4[*a2];
    v6 = (_QWORD *)*((_QWORD *)a2 + 8);
    v7 = (_WORD *)*((_QWORD *)a2 + 5);
    do
    {
      v8 = *v4;
      v9 = v8 - (unsigned __int16)*v7;
      if (v9)
      {
        *v3++ = v9;
        *v2++ = *v6;
        *v7 = v8;
      }
      ++v4;
      v6 += 2;
      ++v7;
    }
    while (v4 < v5);
    v10 = *((_QWORD *)a2 + 9);
    v2 = (_QWORD *)*((_QWORD *)a2 + 10);
  }
  else
  {
    v10 = *((_QWORD *)a2 + 9);
  }
  v11 = (unint64_t)v3 - v10;
  if ((int)(((unint64_t)v3 - v10) >> 1) >= 1)
  {
    v12 = 0;
    v13 = (_DWORD *)*((_QWORD *)a2 + 2);
    v14 = a2[1];
    v15 = (v11 >> 1);
    do
    {
      if ((_DWORD)v14)
      {
        v16 = (__int16 *)v2[v12];
        v17 = &v16[v14];
        v18 = *(__int16 *)(v10 + 2 * v12);
        v19 = v13;
        do
        {
          v20 = *v16++;
          result = (*v19 + v20 * v18);
          *v19++ = result;
        }
        while (v16 < v17);
      }
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t NeuralNet::fastLinearSendingWithDotProduct(uint64_t result, unsigned __int16 *a2)
{
  _QWORD *v2;
  _WORD *v3;
  _WORD *v4;
  _WORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  __int16 *v18;
  int v19;
  _DWORD *v20;
  int v21;

  v3 = (_WORD *)*((_QWORD *)a2 + 9);
  v2 = (_QWORD *)*((_QWORD *)a2 + 10);
  if (*a2)
  {
    v4 = (_WORD *)*((_QWORD *)a2 + 3);
    v5 = &v4[*a2];
    v6 = (_QWORD *)*((_QWORD *)a2 + 8);
    v7 = (unsigned int *)*((_QWORD *)a2 + 1);
    do
    {
      v8 = *v7++;
      v9 = v8 / *(_DWORD *)(*(_QWORD *)(result + 80) + 232);
      v10 = (unsigned __int16)*v4;
      if (v10 != (unsigned __int16)v9)
      {
        *v3++ = v9 - v10;
        *v2++ = *v6;
        *v4 = v9;
      }
      ++v4;
      v6 += 2;
    }
    while (v4 < v5);
    v11 = *((_QWORD *)a2 + 9);
    v2 = (_QWORD *)*((_QWORD *)a2 + 10);
  }
  else
  {
    v11 = *((_QWORD *)a2 + 9);
  }
  v12 = (unint64_t)v3 - v11;
  if ((int)(((unint64_t)v3 - v11) >> 1) >= 1)
  {
    v13 = 0;
    v14 = (_DWORD *)*((_QWORD *)a2 + 2);
    v15 = a2[1];
    v16 = (v12 >> 1);
    do
    {
      if ((_DWORD)v15)
      {
        v17 = (__int16 *)v2[v13];
        v18 = &v17[v15];
        v19 = *(__int16 *)(v11 + 2 * v13);
        v20 = v14;
        do
        {
          v21 = *v17++;
          result = (*v20 + v21 * v19);
          *v20++ = result;
        }
        while (v17 < v18);
      }
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t NeuralNet::fastDpsSendingWithDotProduct(uint64_t result, unsigned __int16 *a2)
{
  _QWORD *v2;
  _WORD *v3;
  _WORD *v4;
  _WORD *v5;
  _QWORD *v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  __int16 *v21;
  int v22;
  _DWORD *v23;
  int v24;

  v3 = (_WORD *)*((_QWORD *)a2 + 9);
  v2 = (_QWORD *)*((_QWORD *)a2 + 10);
  if (*a2)
  {
    v4 = (_WORD *)*((_QWORD *)a2 + 3);
    v5 = &v4[*a2];
    v6 = (_QWORD *)*((_QWORD *)a2 + 8);
    v7 = (int *)*((_QWORD *)a2 + 1);
    v8 = *(_DWORD *)(result + 52);
    do
    {
      v10 = *v7++;
      v9 = v10;
      if (v10 <= v8)
      {
        if (v9 >= *(_DWORD *)(result + 56))
          v11 = (int)(*(double *)(result + 64) * (double)v9);
        else
          v11 = -*(_DWORD *)(result + 48);
      }
      else
      {
        v11 = *(_DWORD *)(result + 48);
      }
      v12 = *(unsigned __int16 *)(*(_QWORD *)(result + 40) + 2 * v11);
      v13 = v12 - (unsigned __int16)*v4;
      if (v13)
      {
        *v3++ = v13;
        *v2++ = *v6;
        *v4 = v12;
      }
      ++v4;
      v6 += 2;
    }
    while (v4 < v5);
    v14 = *((_QWORD *)a2 + 9);
    v2 = (_QWORD *)*((_QWORD *)a2 + 10);
  }
  else
  {
    v14 = *((_QWORD *)a2 + 9);
  }
  v15 = (unint64_t)v3 - v14;
  if ((int)(((unint64_t)v3 - v14) >> 1) >= 1)
  {
    v16 = 0;
    v17 = (_DWORD *)*((_QWORD *)a2 + 2);
    v18 = a2[1];
    v19 = (v15 >> 1);
    do
    {
      if ((_DWORD)v18)
      {
        v20 = (__int16 *)v2[v16];
        v21 = &v20[v18];
        v22 = *(__int16 *)(v14 + 2 * v16);
        v23 = v17;
        do
        {
          v24 = *v20++;
          result = (*v23 + v24 * v22);
          *v23++ = result;
        }
        while (v20 < v21);
      }
      ++v16;
    }
    while (v16 != v19);
  }
  return result;
}

uint64_t NeuralNet::fastFeedbackSendingWithDotProduct(uint64_t a1, unsigned __int16 *a2)
{
  _QWORD *v2;
  _WORD *v3;
  _WORD *v4;
  unsigned __int16 *v5;
  _WORD *v6;
  _QWORD *v7;
  __int16 v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  __int16 *v18;
  int v19;
  _DWORD *v20;
  int v21;
  uint64_t result;

  v3 = (_WORD *)*((_QWORD *)a2 + 9);
  v2 = (_QWORD *)*((_QWORD *)a2 + 10);
  if (*a2)
  {
    v4 = (_WORD *)*((_QWORD *)a2 + 3);
    v5 = (unsigned __int16 *)*((_QWORD *)a2 + 4);
    v6 = &v4[*a2];
    v7 = (_QWORD *)*((_QWORD *)a2 + 8);
    do
    {
      v9 = *v5++;
      v8 = v9;
      v10 = v9 - (unsigned __int16)*v4;
      if (v10)
      {
        *v3++ = v10;
        *v2++ = *v7;
        *v4 = v8;
      }
      ++v4;
      v7 += 2;
    }
    while (v4 < v6);
    v11 = *((_QWORD *)a2 + 9);
    v2 = (_QWORD *)*((_QWORD *)a2 + 10);
  }
  else
  {
    v11 = *((_QWORD *)a2 + 9);
  }
  v12 = (unint64_t)v3 - v11;
  if ((int)(((unint64_t)v3 - v11) >> 1) >= 1)
  {
    v13 = 0;
    v14 = (_DWORD *)*((_QWORD *)a2 + 2);
    v15 = a2[1];
    v16 = (v12 >> 1);
    do
    {
      if ((_DWORD)v15)
      {
        v17 = (__int16 *)v2[v13];
        v18 = &v17[v15];
        v19 = *(__int16 *)(v11 + 2 * v13);
        v20 = v14;
        do
        {
          v21 = *v17++;
          result = (*v20 + v21 * v19);
          *v20++ = result;
        }
        while (v17 < v18);
      }
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t NeuralNet::fastReluSendingWithDotProduct(uint64_t result, unsigned __int16 *a2)
{
  _QWORD *v2;
  _WORD *v3;
  _WORD *v4;
  _WORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  __int16 *v18;
  int v19;
  _DWORD *v20;
  int v21;

  v3 = (_WORD *)*((_QWORD *)a2 + 9);
  v2 = (_QWORD *)*((_QWORD *)a2 + 10);
  if (*a2)
  {
    v4 = (_WORD *)*((_QWORD *)a2 + 3);
    v5 = &v4[*a2];
    v6 = (_QWORD *)*((_QWORD *)a2 + 8);
    v7 = (unsigned int *)*((_QWORD *)a2 + 1);
    do
    {
      v8 = *v7++;
      v9 = v8 / *(_DWORD *)(*(_QWORD *)(result + 80) + 232);
      if ((v9 & 0x8000) != 0)
        LOWORD(v9) = 0;
      v10 = (unsigned __int16)*v4;
      if (v10 != (unsigned __int16)v9)
      {
        *v3++ = v9 - v10;
        *v2++ = *v6;
        *v4 = v9;
      }
      ++v4;
      v6 += 2;
    }
    while (v4 < v5);
    v11 = *((_QWORD *)a2 + 9);
    v2 = (_QWORD *)*((_QWORD *)a2 + 10);
  }
  else
  {
    v11 = *((_QWORD *)a2 + 9);
  }
  v12 = (unint64_t)v3 - v11;
  if ((int)(((unint64_t)v3 - v11) >> 1) >= 1)
  {
    v13 = 0;
    v14 = (_DWORD *)*((_QWORD *)a2 + 2);
    v15 = a2[1];
    v16 = (v12 >> 1);
    do
    {
      if ((_DWORD)v15)
      {
        v17 = (__int16 *)v2[v13];
        v18 = &v17[v15];
        v19 = *(__int16 *)(v11 + 2 * v13);
        v20 = v14;
        do
        {
          v21 = *v17++;
          result = (*v20 + v21 * v19);
          *v20++ = result;
        }
        while (v17 < v18);
      }
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t NeuralNet::fastOutputLinear(uint64_t result, unsigned __int16 *a2, double a3)
{
  double *v3;
  float *v4;
  double *v5;
  _WORD *v6;
  int *v7;
  uint64_t v8;
  double v9;
  int v10;
  float v11;
  double v12;

  if (*a2)
  {
    v4 = (float *)*((_QWORD *)a2 + 6);
    v3 = (double *)*((_QWORD *)a2 + 7);
    v5 = &v3[*a2];
    v6 = (_WORD *)*((_QWORD *)a2 + 3);
    v7 = (int *)*((_QWORD *)a2 + 1);
    v8 = *(_QWORD *)(result + 80);
    LODWORD(a3) = *(_DWORD *)(v8 + 240);
    v9 = (double)*(unint64_t *)&a3;
    do
    {
      v10 = *v7++;
      v11 = *(float *)(v8 + 244) * (float)v10;
      *v4++ = v11;
      v12 = v11;
      *v3++ = v12;
      *v6++ = (int)(v12 * v9);
    }
    while (v3 < v5);
  }
  return result;
}

void NeuralNet::fastOutputDps(uint64_t a1, unsigned __int16 *a2)
{
  double *v3;
  float *v4;
  double *v5;
  _WORD *v6;
  int *v7;
  uint64_t v8;
  int v9;
  float v10;
  unint64_t v11;
  double v12;
  long double v13;
  unint64_t v14;

  if (*a2)
  {
    v4 = (float *)*((_QWORD *)a2 + 6);
    v3 = (double *)*((_QWORD *)a2 + 7);
    v5 = &v3[*a2];
    v6 = (_WORD *)*((_QWORD *)a2 + 3);
    v7 = (int *)*((_QWORD *)a2 + 1);
    v8 = *(_QWORD *)(a1 + 80);
    do
    {
      v9 = *v7++;
      v10 = *(float *)(v8 + 244) * (float)v9;
      *v4 = v10;
      if (v10 >= -60.0)
      {
        if (v10 <= 60.0)
        {
          v12 = -v10;
          goto LABEL_9;
        }
        v11 = 0xC04E000000000000;
      }
      else
      {
        v11 = 0x404E000000000000;
      }
      v12 = *(double *)&v11;
LABEL_9:
      v13 = 1.0 / (DgnExp(v12) + 1.0);
      *v3++ = v13;
      v8 = *(_QWORD *)(a1 + 80);
      LODWORD(v14) = *(_DWORD *)(v8 + 240);
      *v6++ = (int)(v13 * (double)v14);
      ++v4;
    }
    while (v3 < v5);
  }
}

void NeuralNet::fastOutputDpsm(uint64_t a1, unsigned __int16 *a2)
{
  double *v4;
  float *v5;
  double *v6;
  int *v7;
  double v8;
  int v9;
  float v10;
  unint64_t v11;
  long double v12;
  double v13;
  double *v14;
  double *v15;
  _WORD *v16;
  double v17;
  double v18;

  if (!*a2)
    return;
  v5 = (float *)*((_QWORD *)a2 + 6);
  v4 = (double *)*((_QWORD *)a2 + 7);
  v6 = &v4[*a2];
  v7 = (int *)*((_QWORD *)a2 + 1);
  v8 = 0.0;
  do
  {
    v9 = *v7++;
    v10 = *(float *)(*(_QWORD *)(a1 + 80) + 244) * (float)v9;
    *v5 = v10;
    if (v10 > 60.0)
    {
      v11 = 0x404E000000000000;
LABEL_7:
      v12 = *(double *)&v11;
      goto LABEL_9;
    }
    if (v10 < -60.0)
    {
      v11 = 0xC04E000000000000;
      goto LABEL_7;
    }
    v12 = v10;
LABEL_9:
    v13 = DgnExp(v12);
    *v4++ = v13;
    v8 = v8 + v13;
    ++v5;
  }
  while (v4 < v6);
  if (*a2)
  {
    v14 = (double *)*((_QWORD *)a2 + 7);
    v15 = &v14[*a2];
    v16 = (_WORD *)*((_QWORD *)a2 + 3);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 240);
    v17 = (double)*(unint64_t *)&v13;
    do
    {
      v18 = *v14 / v8;
      *v14++ = v18;
      *v16++ = (int)(v18 * v17);
    }
    while (v14 < v15);
  }
}

double NeuralNet::fastOutputRelu(uint64_t a1, unsigned __int16 *a2, double result)
{
  double *v3;
  float *v4;
  double *v5;
  _WORD *v6;
  int *v7;
  uint64_t v8;
  int v9;
  float v10;
  double v11;

  if (*a2)
  {
    v4 = (float *)*((_QWORD *)a2 + 6);
    v3 = (double *)*((_QWORD *)a2 + 7);
    v5 = &v3[*a2];
    v6 = (_WORD *)*((_QWORD *)a2 + 3);
    v7 = (int *)*((_QWORD *)a2 + 1);
    v8 = *(_QWORD *)(a1 + 80);
    LODWORD(result) = *(_DWORD *)(v8 + 240);
    result = (double)*(unint64_t *)&result;
    do
    {
      v9 = *v7++;
      v10 = *(float *)(v8 + 244) * (float)v9;
      *v4++ = v10;
      if (v10 <= 0.0)
        v10 = 0.0;
      v11 = v10;
      *v3++ = v11;
      *v6++ = (int)(v11 * result);
    }
    while (v3 < v5);
  }
  return result;
}

void NeuralNetImage::~NeuralNetImage(NeuralNetImage *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 360);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 344);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 312);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 280);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 264);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 176);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this);
}

void NeuralNetState::~NeuralNetState(NeuralNetState *this)
{
  NeuralNetState::freeExecutionSpace(this);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 88);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24);
}

uint64_t HashKEV<unsigned int,unsigned int,Uns32Scope>::HashKEV(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C2190F8;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 12;
  else
    v7 = 16;
  *(_DWORD *)(a1 + 24) = 16;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20996C96C(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashKEV<unsigned int,unsigned int,Uns32Scope>::~HashKEV(uint64_t a1)
{
  HashKEV<unsigned int,unsigned int,Uns32Scope>::~HashKEV(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t HashKEV<unsigned int,unsigned int,Uns32Scope>::~HashKEV(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C2190F8;
  if (*(_DWORD *)(a1 + 8))
    HashKEV<unsigned int,unsigned int,CWIDScope>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t DgnArray<DgnPrimArray<short>>::copyArraySlice(uint64_t result, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v7 = result;
  v8 = *(unsigned int *)(result + 8);
  if ((int)v8 >= 1)
  {
    v9 = 16 * v8 - 16;
    do
    {
      result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)v7 + v9);
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(v7 + 8) = 0;
  v10 = *(_DWORD *)(v7 + 12);
  if (a4 <= v10)
  {
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_14;
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(v7, a4 - v10, 0);
    v11 = *(_DWORD *)(v7 + 8);
  }
  v13 = 0;
  v12 = v11;
  do
  {
    v14 = *a2 + 16 * (a3 + v13);
    v15 = (_QWORD *)(*(_QWORD *)v7 + 16 * v12);
    *v15 = 0;
    v15[1] = 0;
    result = DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v15, (uint64_t *)v14, 0, *(_DWORD *)(v14 + 8));
    v12 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      v16 = (int)v12;
      v17 = 16 * (int)v12 - 16;
      do
      {
        --v16;
        result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)v7 + v17);
        v17 -= 16;
      }
      while (v16 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    v18 = a4 - (unint64_t)v12;
    v19 = 16 * v12;
    do
    {
      v20 = (_QWORD *)(*(_QWORD *)v7 + v19);
      *v20 = 0;
      v20[1] = 0;
      v19 += 16;
      --v18;
    }
    while (v18);
  }
LABEL_17:
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

uint64_t SDApi_Initialize(unsigned int a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, ApiState *a11, void (*a12)(const char *, unint64_t), void *a13, void (*a14)(const char *, unint64_t), void *a15, void (*a16)(const char *, unint64_t), const char *a17, unsigned int a18)
{
  uint64_t v18;
  const char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  DgnString *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  uint64_t v53;
  ApiState *v54;
  void (*v55)(const char *, unint64_t);
  void (*v56)(const char *, unint64_t);
  uint64_t v57;
  void *v58;
  void (*v59)(const char *, unint64_t);
  _BYTE v63[144];
  const char *v64;
  int v65;

  v18 = 2;
  if (a3 && a4 <= 1 && a11 && a13 && a15)
  {
    if (ApiState::smpApiState)
    {
      return 3;
    }
    else
    {
      gbShowCalls = a7 != 0;
      gbShowCallsWithFileSpecArgs = a8 != 0;
      gbShowCallPointerArguments = a9 != 0;
      gbShowCallMemDeltas = a10 != 0;
      ApiState::startupHandlers(a11, a12, a13, a14, a15, a16);
      MrecBeginningOfTime();
      if (a17 && *a17)
        logSetLinePrefix(a17);
      logSetShowLineTimeStamps(a18 != 0);
      ApiState::startupApiState((ApiState *)"APPLE-FAKE-SDAPI-", v25);
      DgnString::DgnString((DgnString *)&v64);
      DgnString::preAllocate(v26, 4095);
      GetFullMrecDescription((DgnString *)&v64);
      AppendFullMrecMachineInfo((DgnString *)&v64);
      DgnString::printfAppend((DgnString *)&v64, "SDAPI v%u.%u\n", v27, v28, v29, 24, 407);
      DgnString::operator+=((DgnString *)&v64, "Current time: ");
      MrecTime::appendLocalTimeToString((MrecTime *)&v64, v30);
      DgnString::operator+=((DgnString *)&v64, "\n");
      if (v65)
        v31 = v64;
      else
        v31 = &byte_209A88803;
      xlprintString(v31);
      checkVersionAndSizes(a1, a2, a3, v32, v33, v34, v35, v36);
      SdapiInsurance::SdapiInsurance(v63, "SDApi_Initialize", 0, 0, 1);
      if (v63[97])
      {
        if (gbShowCalls)
        {
          v43 = a1;
          v44 = "SD_TRUE";
          if (a4)
            v45 = "SD_TRUE";
          else
            v45 = "SD_FALSE";
          if (a5)
            v46 = "SD_TRUE";
          else
            v46 = "SD_FALSE";
          if (a6)
            v47 = "SD_TRUE";
          else
            v47 = "SD_FALSE";
          if (a7)
            v48 = "SD_TRUE";
          else
            v48 = "SD_FALSE";
          if (a8)
            v49 = "SD_TRUE";
          else
            v49 = "SD_FALSE";
          if (a9)
            v50 = "SD_TRUE";
          else
            v50 = "SD_FALSE";
          v51 = a17;
          if (a10)
            v52 = "SD_TRUE";
          else
            v52 = "SD_FALSE";
          if (gbShowCallPointerArguments)
            v53 = a3;
          else
            v53 = 0;
          if (gbShowCallPointerArguments)
            v54 = a11;
          else
            v54 = 0;
          v55 = a12;
          v56 = a14;
          if (gbShowCallPointerArguments)
          {
            v57 = (uint64_t)a13;
          }
          else
          {
            v55 = 0;
            v57 = 0;
          }
          if (gbShowCallPointerArguments)
          {
            v58 = a15;
          }
          else
          {
            v56 = 0;
            v58 = 0;
          }
          v59 = a16;
          if (!gbShowCallPointerArguments)
          {
            v59 = 0;
            v51 = 0;
          }
          if (!a18)
            v44 = "SD_FALSE";
          xlprintf("Entering sdapi call %.500s(%llu, %llu, Masked:0x%016llx, %.500s, %.500s, %.500s, %.500s, %.500s, %.500s, %.500s, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, %.500s)\n", (uint64_t)v52, (uint64_t)v54, (uint64_t)v55, v57, "SDApi_Initialize", v43, a2, v53, v45, v46, v47, v48, v49, v50, v52, v54,
            v55,
            v57,
            v56,
            v58,
            v59,
            v51,
            v44);
        }
        if (a5 >= 2)
          throwBadSdapiArgument("SDBool", (int)a5, v37, v38, v39, v40, v41, v42);
        if (a6 >= 2)
          throwBadSdapiArgument("SDBool", (int)a6, v37, v38, v39, v40, v41, v42);
        if (a7 >= 2)
          throwBadSdapiArgument("SDBool", (int)a7, v37, v38, v39, v40, v41, v42);
        if (a8 >= 2)
          throwBadSdapiArgument("SDBool", (int)a8, v37, v38, v39, v40, v41, v42);
        if (a9 >= 2)
          throwBadSdapiArgument("SDBool", (int)a9, v37, v38, v39, v40, v41, v42);
        if (a10 >= 2)
          throwBadSdapiArgument("SDBool", (int)a10, v37, v38, v39, v40, v41, v42);
        if (a18 >= 2)
          throwBadSdapiArgument("SDBool", (int)a18, v37, v38, v39, v40, v41, v42);
        v18 = 1;
      }
      else
      {
        v18 = 4;
      }
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v63);
      DgnString::~DgnString((DgnString *)&v64);
    }
  }
  return v18;
}

void sub_20996CF6C()
{
  __cxa_end_catch();
  JUMPOUT(0x20996CF78);
}

void checkVersionAndSizes(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != 24 || a2 != 407)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdmisc.cpp", 54, (uint64_t)"sdapi/sdmisc", 1, (uint64_t)"%u %u %u %u", a7, a8, a1);
  if (*(_DWORD *)a3 != 16)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdmisc.cpp", 58, (uint64_t)"sdapi/sdmisc", 2, (uint64_t)"%.500s %llu %.500s %llu", a7, a8, (char)"SDInitCheckRecord");
  if (*(_DWORD *)(a3 + 4) == 175)
  {
    v9 = 175;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdmisc.cpp", 66, (uint64_t)"sdapi/sdmisc", 3, (uint64_t)"%d %d", a7, a8, *(_DWORD *)(a3 + 4));
    v9 = *(unsigned int *)(a3 + 4);
    if (!(_DWORD)v9)
      return;
  }
  v10 = 0;
  for (i = 0; i < v9; ++i)
  {
    v12 = *(_QWORD *)(a3 + 8) + v10 * 8;
    v13 = *(const char **)v12;
    if (strcmp(*(const char **)v12, (&checkVersionAndSizes(unsigned int,unsigned int,SDInitTypeSize const*)::types)[v10])|| *(_DWORD *)(v12 + 8) != LODWORD((&checkVersionAndSizes(unsigned int,unsigned int,SDInitTypeSize const*)::types)[v10 + 1]))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdmisc.cpp", 75, (uint64_t)"sdapi/sdmisc", 2, (uint64_t)"%.500s %llu %.500s %llu", v14, v15, (char)v13);
      v9 = *(unsigned int *)(a3 + 4);
    }
    v10 += 2;
  }
}

void SDApi_CheckVersion(unsigned int a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[144];

  SdapiInsurance::SdapiInsurance(v14, "SDApi_CheckVersion", 1, 1, 4);
  if (v14[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v13 = a3;
      else
        v13 = 0;
      xlprintf("Entering sdapi call %.500s(%llu, %llu, Masked:0x%016llx)\n", v6, v7, v8, v9, "SDApi_CheckVersion", a1, a2, v13);
    }
    checkVersionAndSizes(a1, a2, a3, v8, v9, v10, v11, v12);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v14);
}

uint64_t SDApi_HasErrored()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[144];

  v0 = 1;
  SdapiInsurance::SdapiInsurance(v6, "SDApi_HasErrored", 1, 1, 5);
  if (v6[97])
  {
    if (gbShowCalls)
      xlprintf("Entering sdapi call %s()\n", v1, v2, v3, v4, "SDApi_HasErrored");
    v0 = *(unsigned __int8 *)(ApiState::smpApiState + 1);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v6);
  return v0;
}

void MrecInitModule_sputtdet_sigproc(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugUttDet)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugUttDet", (const char *)&unk_209A7B3E0, (const char *)&unk_209A7B3E0, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugUttDet = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugUttDet);
  }
}

void MrecInitModule_filespec_mrecutil(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDiagnosticFileSpecBaseDirectoryMask)
  {
    v0 = MemChunkAlloc(0x48uLL, 0);
    StringGlobalParamBase::StringGlobalParamBase((StringGlobalParamBase *)v0, "DiagnosticFileSpecBaseDirectoryMask", &byte_209A88803, &byte_209A88803, &byte_209A88803, 0, 0);
    *v1 = &unk_24C215D48;
    gParDiagnosticFileSpecBaseDirectoryMask = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticFileSpecBaseDirectoryMask);
  }
}

void FileSpec::FileSpec(FileSpec *this, char *a2)
{
  unint64_t v4;

  DgnString::DgnString(this);
  DgnString::preAllocate(v4, 96);
  DgnString::operator=(this, a2);
}

void sub_20996D464(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void FileSpec::FileSpec(FileSpec *this, const FileSpec *a2)
{
  unint64_t v4;

  DgnString::DgnString(this);
  DgnString::preAllocate(v4, 96);
  DgnString::operator=(this, a2);
}

void sub_20996D4B8(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

DgnString *FileSpec::operator=(DgnString *a1, DgnString *a2)
{
  DgnString::preAllocate((unint64_t)a1, 96);
  return DgnString::operator=(a1, a2);
}

_QWORD *FileSpec::setEmpty(FileSpec *this)
{
  _QWORD *result;

  result = *(_QWORD **)this;
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)this = 0;
  }
  *((_QWORD *)this + 1) = 0;
  return result;
}

DgnString *FileSpec::fillFromName(FileSpec *this, char *a2)
{
  DgnString::preAllocate((unint64_t)this, 96);
  return DgnString::operator=(this, a2);
}

DgnString *FileSpec::fillFromPathAndName(FileSpec *this, const char *__s, const char *a3)
{
  int v6;
  int v7;
  _BOOL4 v9;
  int v10;
  unint64_t v11;
  uint64_t *v12;
  DgnString *result;

  v6 = strlen(__s);
  if (v6)
  {
    v7 = __s[v6 - 1];
    v9 = v7 != 47 && v7 != 0;
  }
  else
  {
    v9 = 0;
  }
  v10 = v6 + v9 + strlen(a3);
  if ((v10 + 1) > 0x60)
    v11 = (v10 + 1);
  else
    v11 = 96;
  v12 = MemChunkAlloc(v11, 0);
  strcpy((char *)v12, __s);
  if (v9)
    *(_WORD *)((char *)v12 + strlen((const char *)v12)) = 47;
  strcat((char *)v12, a3);
  DgnString::preAllocate((unint64_t)this, 96);
  result = DgnString::operator=(this, (char *)v12);
  if (v12)
    return (DgnString *)MemChunkFree(v12, 0);
  return result;
}

DgnString *FileSpec::fillFromDefPathAndName(FileSpec *this, char *__s, char *a3)
{
  char *v6;
  int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t *v11;
  char *v12;
  int v13;

  v6 = strchr(__s, 58);
  if (a3)
  {
    if (*a3 == 47 || (*a3 || !v6) && (!*a3 || !__s || !*__s))
      goto LABEL_8;
  }
  else if (!v6)
  {
LABEL_8:
    DgnString::preAllocate((unint64_t)this, 96);
    return DgnString::operator=(this, a3);
  }
  v8 = strlen(__s);
  v9 = v8 + strlen(a3) + 2;
  if (v9 <= 0x60)
    v10 = 96;
  else
    v10 = v9;
  v11 = MemChunkAlloc(v10, 0);
  v12 = strcpy((char *)v11, __s);
  v13 = strlen(v12);
  if (*((_BYTE *)v11 + (v13 - 1)))
  {
    if (*((_BYTE *)v11 + (v13 - 1)) != 47)
      *(_WORD *)((char *)v11 + strlen((const char *)v11)) = 47;
  }
  strcat((char *)v11, a3);
  DgnString::preAllocate((unint64_t)this, 96);
  DgnString::operator=(this, (char *)v11);
  return (DgnString *)MemChunkFree(v11, 0);
}

BOOL FileSpec::operator==(uint64_t a1, uint64_t a2)
{
  const char *v2;
  const char *v3;

  if (*(_DWORD *)(a1 + 8))
    v2 = *(const char **)a1;
  else
    v2 = &byte_209A88803;
  if (*(_DWORD *)(a2 + 8))
    v3 = *(const char **)a2;
  else
    v3 = &byte_209A88803;
  return strcmp(v2, v3) == 0;
}

DgnString *FileSpec::getRelativeSourceFileName(FileSpec *this, DgnString *a2, DgnString *a3)
{
  DgnString::preAllocate((unint64_t)a2, 96);
  return DgnString::operator=(a2, (char *)this + 68);
}

DgnString *FileSpec::getDiagnosticMaskedName(FileSpec *this, DgnString *a2, DgnString *a3)
{
  const char *v5;
  unsigned int v6;
  const char *v8;
  char *v9;

  DgnString::preAllocate((unint64_t)a2, 96);
  if (!*(_DWORD *)(gParDiagnosticFileSpecBaseDirectoryMask + 64))
    return DgnString::operator=(a2, (char *)this);
  v5 = *(const char **)(gParDiagnosticFileSpecBaseDirectoryMask + 56);
  if (!*v5)
    return DgnString::operator=(a2, (char *)this);
  v6 = strlen(v5);
  if (strncmp((const char *)this, v5, v6))
    return DgnString::operator=(a2, (char *)this);
  DgnString::operator=(a2, "<BASE>/");
  if (*(_DWORD *)(gParDiagnosticFileSpecBaseDirectoryMask + 64))
    v8 = *(const char **)(gParDiagnosticFileSpecBaseDirectoryMask + 56);
  else
    v8 = &byte_209A88803;
  v9 = (char *)this + strlen(v8);
  return DgnString::operator+=(a2, v9);
}

DgnString *FileSpec::getDiagnosticMaskedName(FileSpec **this, DgnString *a2, DgnString *a3)
{
  FileSpec *v3;

  if (*((_DWORD *)this + 2))
    v3 = *this;
  else
    v3 = (FileSpec *)&byte_209A88803;
  return FileSpec::getDiagnosticMaskedName(v3, a2, a3);
}

_DWORD *FileSpec::fillInComponents(FileSpec *this, DgnString *a2, DgnString *a3, DgnString *a4, DgnString *a5, DgnString *a6)
{
  int v12;
  int v13;
  int v14;
  int v15;
  _DWORD *result;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  const char *v23;
  const char *v24;
  unsigned int v25;
  char *v26;
  char *v27;
  char *v28;

  v12 = DgnString::reverseFind(this, 46);
  v13 = DgnString::reverseFind(this, 92);
  if (v13 <= (int)DgnString::reverseFind(this, 47))
    v14 = 47;
  else
    v14 = 92;
  v15 = DgnString::reverseFind(this, v14);
  result = (_DWORD *)DgnString::reverseFind(this, 58);
  if (v15 <= (int)result)
    v17 = (int)result;
  else
    v17 = v15;
  v18 = v17 + 1;
  v19 = *((_DWORD *)this + 2);
  v20 = v19 != 0;
  v21 = v19 - 1;
  if (v20)
    v22 = v21;
  else
    v22 = 0;
  if (v17 < 0)
  {
    if (a2)
      *((_DWORD *)a2 + 2) = 0;
    if (a6)
      result = DgnString::operator=(a6, "./");
  }
  else
  {
    if (a2)
    {
      DgnString::preAllocate((unint64_t)a2, 96);
      if (*((_DWORD *)this + 2))
        v23 = *(const char **)this;
      else
        v23 = &byte_209A88803;
      result = DgnString::set(a2, v23, v18);
    }
    if (a6)
    {
      DgnString::preAllocate((unint64_t)a6, 96);
      if (*((_DWORD *)this + 2))
        v24 = *(const char **)this;
      else
        v24 = &byte_209A88803;
      result = DgnString::set(a6, v24, v18);
    }
  }
  v25 = v12 - v18;
  if (v12 <= (int)v18)
  {
    v25 = v22 - v18;
    if (a5)
    {
      *((_DWORD *)a5 + 2) = 0;
      v25 = v22 - v18;
    }
LABEL_31:
    if (a4)
      goto LABEL_39;
LABEL_32:
    if (!a3)
      return result;
    goto LABEL_33;
  }
  if (!a5)
    goto LABEL_31;
  if (*((_DWORD *)this + 2))
    v26 = *(char **)this;
  else
    v26 = &byte_209A88803;
  result = DgnString::set(a5, &v26[v12 + 1], v22 + ~v12);
  if (!a4)
    goto LABEL_32;
LABEL_39:
  if (*((_DWORD *)this + 2))
    v28 = *(char **)this;
  else
    v28 = &byte_209A88803;
  result = DgnString::set(a4, &v28[(int)v18], v25);
  if (a3)
  {
LABEL_33:
    if (*((_DWORD *)this + 2))
      v27 = *(char **)this;
    else
      v27 = &byte_209A88803;
    return DgnString::set(a3, &v27[v18], v22 - (int)v18);
  }
  return result;
}

_DWORD *FileSpec::getPathOnly(FileSpec *this, DgnString *a2)
{
  return FileSpec::fillInComponents(this, a2, 0, 0, 0, 0);
}

_DWORD *FileSpec::getNameOnly(FileSpec *this, DgnString *a2)
{
  return FileSpec::fillInComponents(this, 0, a2, 0, 0, 0);
}

BOOL FileSpec::isValid(char **this)
{
  char *v1;

  if (*((_DWORD *)this + 2))
  {
    v1 = *this;
    if (!*this)
      return 0;
  }
  else
  {
    v1 = &byte_209A88803;
  }
  return *v1 != 0;
}

uint64_t FileSpec::sizeObject(uint64_t a1)
{
  return sizeObject(a1);
}

uint64_t DgnStream::DgnStream(uint64_t a1, int a2, const char *a3)
{
  FileSpec *v5;
  const char *v6;

  *(_QWORD *)a1 = off_24C219838;
  v5 = (FileSpec *)(a1 + 16);
  if (a3)
    v6 = a3;
  else
    v6 = "unnamed stream";
  FileSpec::FileSpec(v5, v6);
  *(_DWORD *)(a1 + 32) = 256;
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

void DgnStream::~DgnStream(DgnStream *this)
{
  *(_QWORD *)this = off_24C219838;
  FileSpec::~FileSpec((DgnStream *)((char *)this + 16));
}

void DgnStream::printSize(DgnStream *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dstream.cpp", 65, (DgnString *)&v40);
  if (v41)
    v16 = v40;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v40);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dstream.cpp", 67, (DgnString *)&v40);
  if (v41)
    v25 = v40;
  else
    v25 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v25, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += 4;
  *a5 += 4;
  v26 = (char *)this + 16;
  v27 = FileSpec::sizeObject((uint64_t)this + 16);
  v28 = FileSpec::sizeObject((uint64_t)v26);
  v29 = FileSpec::sizeObject((uint64_t)v26);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dstream.cpp", 69, (DgnString *)&v40);
  if (v41)
    v34 = v40;
  else
    v34 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v34, v27, v28, v29);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += v27;
  *a5 += v28;
  *a6 += v29;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dstream.cpp", 71, (DgnString *)&v40);
  if (v41)
    v39 = v40;
  else
    v39 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, a3, &byte_209A88803, (35 - a3), (35 - a3), v39, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v40);
}

void sub_20996DE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t DgnStream::getLine(DgnStream *this, DgnString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  uint64_t result;
  char v13;
  char v14;

  if (*((_DWORD *)this + 2) == 1)
  {
    if (*((_DWORD *)this + 6))
      v10 = (char *)*((_QWORD *)this + 2);
    else
      v10 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dstream.cpp", 77, (uint64_t)"dfutil/dstream", 2, (uint64_t)"%.500s", a7, a8, (char)v10);
  }
  *((_DWORD *)a2 + 2) = 0;
  result = (*(uint64_t (**)(DgnStream *))(*(_QWORD *)this + 56))(this);
  if ((result & 1) == 0)
  {
    do
    {
      v14 = 0;
      result = (*(uint64_t (**)(DgnStream *, char *, uint64_t, _QWORD))(*(_QWORD *)this + 72))(this, &v14, 1, 0);
      if (!(_DWORD)result || v14 == 10)
        break;
      if (v14 == 13)
      {
        result = (*(uint64_t (**)(DgnStream *))(*(_QWORD *)this + 64))(this);
        if ((_DWORD)result == 10)
        {
          v13 = 0;
          return (*(uint64_t (**)(DgnStream *, char *, uint64_t, uint64_t))(*(_QWORD *)this + 72))(this, &v13, 1, 1);
        }
        return result;
      }
      DgnString::appendCharWithGrow((unint64_t)a2, v14);
      result = (*(uint64_t (**)(DgnStream *))(*(_QWORD *)this + 56))(this);
    }
    while (!(_DWORD)result);
  }
  return result;
}

void DgnStream::streamPrintf(DgnStream *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  char *Buffer;
  size_t i;
  int v11;
  char *v12;
  const char *v13;
  size_t v14;
  _BYTE v15[8192];
  unsigned int __size;
  char __size_4;
  char *v18;
  int v19;
  uint64_t v20;
  va_list va;

  va_start(va, a5);
  v5 = MEMORY[0x24BDAC7A8](this, a2, a3, a4, a5);
  v7 = v6;
  v8 = v5;
  v20 = *MEMORY[0x24BDAC8D0];
  DgnString::DgnString((DgnString *)&v18);
  v15[0] = 0;
  __size = 0x2000;
  __size_4 = 0;
  Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v15, 0);
  for (i = __size; ; i = __size)
  {
    v11 = vsnprintf(Buffer, i, v7, va);
    if ((v11 & 0x80000000) == 0 && v11 < i)
      break;
    Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v15, 1);
  }
  if (v19)
    v12 = v18;
  else
    v12 = &byte_209A88803;
  if (__size_4)
    v13 = v12;
  else
    v13 = v15;
  v14 = strlen(v13);
  (*(void (**)(uint64_t, const char *, size_t))(*(_QWORD *)v8 + 80))(v8, v13, v14);
  DgnString::~DgnString((DgnString *)&v18);
}

void sub_20996E094(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void PelScoreCacheData::PelScoreCacheData(PelScoreCacheData *this)
{
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
}

void PelScoreCacheData::~PelScoreCacheData(PelScoreCacheData *this)
{
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8);
}

uint64_t *PelScoreCacheData::clone(PelScoreCacheData *this)
{
  uint64_t *v2;

  v2 = MemChunkAlloc(0x18uLL, 0);
  *(_DWORD *)v2 = 0;
  v2[2] = 0;
  v2[1] = 0;
  *(_DWORD *)v2 = *(_DWORD *)this;
  DgnArray<DgnPrimArray<Uns16AndScore>>::copyArraySlice((uint64_t)(v2 + 1), (_QWORD *)this + 1, 0, *((_DWORD *)this + 4));
  return v2;
}

void PelScoreCacheData::printSize(PelScoreCacheData *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  int v41;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcdat.cpp", 258, (DgnString *)&v40);
  if (v41)
    v16 = v40;
  else
    v16 = &unk_209A7B3F4;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7B3F4, a3, &unk_209A7B3F4, v16);
  DgnString::~DgnString((DgnString *)&v40);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7B3F4);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcdat.cpp", 259, (DgnString *)&v40);
  if (v41)
    v25 = v40;
  else
    v25 = &unk_209A7B3F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &unk_209A7B3F4, (34 - a3), (34 - a3), v25, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += 4;
  *a5 += 4;
  v26 = (char *)this + 8;
  v27 = sizeObject<DgnPrimArray<Uns16AndScore>>((uint64_t)this + 8, 0);
  v28 = sizeObject<DgnPrimArray<Uns16AndScore>>((uint64_t)v26, 1);
  v29 = sizeObject<DgnPrimArray<Uns16AndScore>>((uint64_t)v26, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcdat.cpp", 261, (DgnString *)&v40);
  if (v41)
    v34 = v40;
  else
    v34 = &unk_209A7B3F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &unk_209A7B3F4, (34 - a3), (34 - a3), v34, v27, v28, v29);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += v27;
  *a5 += v28;
  *a6 += v29;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcdat.cpp", 262, (DgnString *)&v40);
  if (v41)
    v39 = v40;
  else
    v39 = &unk_209A7B3F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, a3, &unk_209A7B3F4, (35 - a3), (35 - a3), v39, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v40);
}

void sub_20996E394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnPrimArray<Uns16AndScore>>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _BYTE v10[4];

  v9[0] = 0;
  v9[1] = 0;
  sizeObject((uint64_t)v10, 2);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 12;
  else
    v4 = 16;
  if (a2 == 3)
  {
    v4 = 0;
  }
  else if ((a2 & 0xFFFFFFFE) != 2)
  {
    v5 = *(unsigned int *)(a1 + 8);
    v6 = v4;
    if ((int)v5 >= 1)
    {
      v7 = v5 + 1;
      v6 = v4;
      do
        v6 += sizeObject<Uns16AndScore>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
      while (v7 > 1);
    }
    if (a2)
      v4 = v6;
    else
      v4 = v6 + v4 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  return v4;
}

void sub_20996E494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DgnArray<DgnPrimArray<Uns16AndScore>>::copyArraySlice(uint64_t result, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v7 = result;
  v8 = *(unsigned int *)(result + 8);
  if ((int)v8 >= 1)
  {
    v9 = 16 * v8 - 16;
    do
    {
      result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)v7 + v9);
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(v7 + 8) = 0;
  v10 = *(_DWORD *)(v7 + 12);
  if (a4 <= v10)
  {
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_14;
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(v7, a4 - v10, 0);
    v11 = *(_DWORD *)(v7 + 8);
  }
  v13 = 0;
  v12 = v11;
  do
  {
    v14 = *a2 + 16 * (a3 + v13);
    v15 = (_QWORD *)(*(_QWORD *)v7 + 16 * v12);
    *v15 = 0;
    v15[1] = 0;
    result = DgnPrimArray<Uns16AndScore>::copyArraySlice((unint64_t)v15, (_QWORD *)v14, 0, *(_DWORD *)(v14 + 8));
    v12 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      v16 = (int)v12;
      v17 = 16 * (int)v12 - 16;
      do
      {
        --v16;
        result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)v7 + v17);
        v17 -= 16;
      }
      while (v16 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    v18 = a4 - (unint64_t)v12;
    v19 = 16 * v12;
    do
    {
      v20 = (_QWORD *)(*(_QWORD *)v7 + v19);
      *v20 = 0;
      v20[1] = 0;
      v19 += 16;
      --v18;
    }
    while (v18);
  }
LABEL_17:
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

unint64_t DgnPrimArray<Uns16AndScore>::copyArraySlice(unint64_t result, _QWORD *a2, int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v7 = result;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    *(_DWORD *)(result + 8) = a4;
    if (!a4)
      return result;
  }
  else
  {
    result = DgnPrimArray<unsigned int>::reallocElts(result, a4 - v8, 0);
    *(_DWORD *)(v7 + 8) = a4;
  }
  v9 = 0;
  do
  {
    *(_DWORD *)(*(_QWORD *)v7 + 4 * v9) = *(_DWORD *)(*a2 + 4 * (a3 + v9));
    ++v9;
  }
  while (a4 != v9);
  return result;
}

uint64_t sizeObject<Uns16AndScore>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE v13[4];

  v4 = sizeObject((uint64_t)v13, 2);
  v5 = v4;
  if (a2 == 3)
  {
    v6 = *(unsigned int *)(a1 + 8);
    v7 = v6 > *(_DWORD *)(a1 + 12);
    v8 = v4 * v6;
    if (v7)
      return v8;
    else
      return 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v9 = 12;
    else
      v9 = 16;
    if (a2 != 2)
    {
      v10 = *(unsigned int *)(a1 + 8);
      if (v10 <= *(_DWORD *)(a1 + 12))
      {
        if ((int)v10 >= 1)
        {
          v11 = v10 + 1;
          do
            v9 += sizeObject(*(_QWORD *)a1 + 4 * (v11-- - 2), a2);
          while (v11 > 1);
        }
        if (!a2)
          v9 += v5 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  return v9;
}

uint64_t CombineTable::initCombineTable(uint64_t this, double a2)
{
  uint64_t v3;
  double v4;
  long double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  long double v12;
  int v13;
  _DWORD *v14;
  BOOL v15;
  uint64_t *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  int v22;

  if (a2 == 0.0)
    return this;
  v3 = this;
  v4 = 1.0 / a2;
  v5 = DgnExp(1.0 / a2 * 0.5);
  v8 = (int)(2.0 - a2 * DgnLog(v5 + -1.0));
  if ((int)v8 < 8001)
  {
    v21 = 0;
    v22 = 0;
    if (!(_DWORD)v8)
    {
      v9 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/cmbtable.cpp", 141, (uint64_t)"mrecutil/cmbtable", 1, (uint64_t)"%g %d", v6, v7, SLOBYTE(a2));
    v21 = 0;
    v22 = 0;
  }
  v9 = MemChunkAlloc(4 * v8, 0);
  v21 = v9;
  v22 = v8;
  if ((int)v8 >= 1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = DgnExp(v4 * (double)v11);
      *(_DWORD *)((char *)v21 + v10) = (int)(a2 * DgnLog(v12 + 1.0) + 0.5);
      --v11;
      v10 += 4;
    }
    while (4 * v8 != v10);
    v9 = v21;
  }
LABEL_10:
  v13 = v8 & ((int)v8 >> 31);
  v14 = (_DWORD *)v9 + v8 - 1;
  while (1)
  {
    v15 = __OFSUB__((_DWORD)v8, 1);
    LODWORD(v8) = v8 - 1;
    if ((int)v8 < 0 != v15)
      break;
    if (*v14--)
    {
      v13 = v8 + 1;
      break;
    }
  }
  if (v13 && !*(_DWORD *)(v3 + 8))
  {
    *(_QWORD *)v3 = MemChunkAlloc(4 * v13, 0);
    *(_DWORD *)(v3 + 8) = v13;
  }
  if (v13 >= 1)
  {
    v17 = v21;
    v18 = *(_DWORD **)v3;
    v19 = v13;
    do
    {
      v20 = *(_DWORD *)v17;
      v17 = (uint64_t *)((char *)v17 + 4);
      *v18++ = v20;
      --v19;
    }
    while (v19);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v21);
}

void sub_20996E924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CombineTable::sizeObject(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  if (a2 == 3)
    return 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    result = 8;
  else
    result = 12;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v4 = *(unsigned int *)(a1 + 8);
    if ((int)v4 >= 1)
      result += 4 * v4;
  }
  return result;
}

uint64_t sizeObject<RecogResultToken>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[6];
  char v11;
  uint64_t v12;
  int v13;

  memset(v10, 0, 24);
  v10[3] = 0xFFFFFFFF00000000;
  v12 = 0;
  v13 = 0;
  v10[4] = 0;
  v10[5] = 0;
  v11 = 0;
  v4 = sizeObject((uint64_t)v10, 2);
  v5 = 0;
  if (a2 != 3)
  {
    v5 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = v4;
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
          v5 += sizeObject(*(_QWORD *)a1 + 96 * (v8-- - 2) + 32, a2) + 50;
        while (v8 > 1);
      }
      if (!a2)
        v5 += (v6 + 50) * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  return v5;
}

void RecogResultChoice::fillFromNBestChoice(unint64_t a1, uint64_t *a2, int a3, int a4, int a5, uint64_t a6, double a7, __n128 a8, __n128 a9)
{
  uint64_t *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v28;
  int v29;
  int Root;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  int v51;
  __n128 v52;
  __n128 v53;
  __int128 v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  int v60;
  int v61;

  v10 = a2;
  v11 = a1;
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 8);
  v12 = *(_OWORD *)((char *)a2 + 36);
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)&v12 = *(uint64_t *)((char *)a2 + 52);
  *(_QWORD *)(a1 + 32) = v12;
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 15);
  *(_DWORD *)(a1 + 8) = 0;
  if (a6)
  {
    v13 = a2[3];
    if (v13)
      DgnArray<WordConfidenceInfo>::copyArraySlice(a6, (_QWORD *)v13, 0, *(_DWORD *)(v13 + 8));
  }
  v14 = (_QWORD *)v10[2];
  v15 = *((_DWORD *)v10 + 2);
  v16 = 112 * v15 - 24;
  v17 = -1;
  while (v16 != -24)
  {
    v18 = *(_DWORD *)(*v10 + v16);
    ++v17;
    v16 -= 112;
    if (v18 >> 25 != 126)
    {
      v19 = v15 - v17;
      if (!v19)
        goto LABEL_43;
      goto LABEL_11;
    }
  }
  if (!v15)
  {
    v19 = 0;
    goto LABEL_43;
  }
  v19 = *(_DWORD *)(*v10 + 88) >> 25 == 126;
  if (*(_DWORD *)(*v10 + 88) >> 25 != 126)
    goto LABEL_43;
LABEL_11:
  v20 = 0;
  v21 = 0;
  v50 = v19;
  v22 = 112 * v19;
  v57 = a3;
  v55 = v22;
  v56 = (_QWORD *)v10[2];
  do
  {
    v23 = *v10;
    v24 = *v10 + v21;
    v25 = *(unsigned int *)(v24 + 88);
    if ((v25 & 0xFE000000) == 0xFC000000)
    {
      if (v14)
        v26 = *(_DWORD *)(*v14 + v20);
      else
        v26 = -1;
      addSilenceToken(v11, v24, a3, v26, *(int32x2_t *)&v12, (int8x8_t)a8.n128_u64[0]);
    }
    else
    {
      if ((v25 & 0xFE000000) == 0xFA000000 || a4 == 0)
        v28 = 0;
      else
        v28 = *(_DWORD *)(v23 + v21 + 96);
      v61 = v28;
      if (v14)
        v29 = *(_DWORD *)(*v14 + v20);
      else
        v29 = -1;
      v60 = v29;
      if (a5)
        Root = VocMgr::getRoot((VocMgr *)VocMgr::smpVocMgr, v25);
      else
        Root = *(_DWORD *)(v24 + 88);
      v31 = v23 + v21;
      v32 = *(_DWORD *)(v23 + v21 + 108);
      if (a3)
      {
        *(int8x8_t *)&v12 = vorr_s8(*(int8x8_t *)(v31 + 16), (int8x8_t)vceq_s32(*(int32x2_t *)(v31 + 16), (int32x2_t)0xFFFFFFFCFFFFFFC0));
        if (*(_DWORD *)(v31 + 24) == -4)
          v33 = -1;
        else
          v33 = *(_DWORD *)(v31 + 24);
      }
      else
      {
        *(_QWORD *)&v12 = -1;
        *((_QWORD *)&v12 + 1) = -1;
        v33 = -1;
      }
      a8 = *(__n128 *)(v31 + 28);
      v34 = *(_QWORD *)(v31 + 44);
      v35 = *(_DWORD *)(v31 + 52);
      v36 = *(_QWORD *)(v31 + 8);
      v37 = *(_QWORD *)(v31 + 68);
      v38 = *(_DWORD *)(v31 + 64);
      if (v38 == 1879048192)
      {
        v39 = 0;
        v38 = 0;
        a9 = 0uLL;
      }
      else
      {
        a9.n128_u64[0] = *(_QWORD *)(v23 + v21 + 56);
        v39 = 1;
      }
      v40 = *(unsigned int *)(v11 + 8);
      if (v40 == *(_DWORD *)(v11 + 12))
      {
        v51 = Root;
        v41 = v11;
        v53 = a8;
        v54 = v12;
        v42 = v10;
        v43 = v35;
        v52 = a9;
        v44 = v11;
        v45 = v39;
        DgnArray<RecogResultToken>::reallocElts(v41, 1, 1);
        v39 = v45;
        v11 = v44;
        a9 = v52;
        a8 = v53;
        v35 = v43;
        v10 = v42;
        v12 = v54;
        Root = v51;
        LODWORD(v40) = *(_DWORD *)(v44 + 8);
      }
      v46 = *(_QWORD *)v11 + 96 * v40;
      *(_DWORD *)v46 = 0;
      *(_WORD *)(v46 + 4) = v25 >> 25;
      *(_DWORD *)(v46 + 8) = v61;
      *(_DWORD *)(v46 + 12) = Root & 0xFFFFFF;
      *(_DWORD *)(v46 + 16) = v32 & 0xFFFFFF;
      *(_QWORD *)(v46 + 20) = v12;
      *(_DWORD *)(v46 + 28) = v33;
      *(__n128 *)(v46 + 32) = a8;
      *(_QWORD *)(v46 + 48) = v34;
      *(_DWORD *)(v46 + 56) = v35;
      *(_DWORD *)(v46 + 60) = v60;
      *(_QWORD *)(v46 + 64) = v36;
      *(_QWORD *)(v46 + 72) = v37;
      *(_BYTE *)(v46 + 80) = v39;
      *(_QWORD *)(v46 + 84) = a9.n128_u64[0];
      *(_DWORD *)(v46 + 92) = v38;
      ++*(_DWORD *)(v11 + 8);
      a3 = v57;
      v22 = v55;
      v14 = v56;
    }
    v21 += 112;
    v20 += 4;
  }
  while (v22 != v21);
  v15 = *((_DWORD *)v10 + 2);
  v19 = v50;
LABEL_43:
  if (v19 < v15)
  {
    v47 = v19;
    v48 = 112 * v19;
    do
    {
      if (v14)
        v49 = *(_DWORD *)(*v14 + 4 * v47);
      else
        v49 = -1;
      addSilenceToken(v11, *v10 + v48, a3, v49, *(int32x2_t *)&v12, (int8x8_t)a8.n128_u64[0]);
      ++v47;
      v48 += 112;
    }
    while (v47 < *((unsigned int *)v10 + 2));
  }
}

unint64_t addSilenceToken(unint64_t result, uint64_t a2, int a3, int a4, int32x2_t a5, int8x8_t a6)
{
  unint64_t v7;
  int8x8_t v8;
  int v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int8x8_t v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  int8x8_t v23;

  v7 = result;
  if (a3)
  {
    a5 = *(int32x2_t *)(a2 + 16);
    a6 = (int8x8_t)vceq_s32(a5, (int32x2_t)0xFFFFFFFCFFFFFFC0);
    v8 = vorr_s8((int8x8_t)a5, a6);
    if (*(_DWORD *)(a2 + 24) == -4)
      v9 = -1;
    else
      v9 = *(_DWORD *)(a2 + 24);
  }
  else
  {
    v8 = (int8x8_t)-1;
    v9 = -1;
  }
  v10 = *(_DWORD *)(a2 + 88);
  v11 = *(_OWORD *)(a2 + 28);
  v12 = *(_QWORD *)(a2 + 44);
  v13 = *(_DWORD *)(a2 + 52);
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 68);
  v16 = *(_DWORD *)(a2 + 64);
  a5.i32[0] = 1879048192;
  if (v16 == 1879048192)
    v17 = 0;
  else
    v17 = *(_DWORD *)(a2 + 64);
  a6.i32[0] = *(_DWORD *)(a2 + 64);
  v18 = vand_s8(*(int8x8_t *)(a2 + 56), (int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vceq_s32((int32x2_t)a6, a5)), 0));
  v19 = v16 != 1879048192;
  v20 = *(_DWORD *)(result + 8);
  if (v20 == *(_DWORD *)(result + 12))
  {
    v22 = *(_OWORD *)(a2 + 28);
    v23 = v8;
    result = DgnArray<RecogResultToken>::reallocElts(result, 1, 1);
    v11 = v22;
    v8 = v23;
    v20 = *(_DWORD *)(v7 + 8);
  }
  v21 = *(_QWORD *)v7 + 96 * v20;
  *(_DWORD *)v21 = 1;
  *(_WORD *)(v21 + 4) = 127;
  *(_DWORD *)(v21 + 8) = 0;
  *(_DWORD *)(v21 + 12) = v10 & 0xFFFFFF;
  *(_DWORD *)(v21 + 16) = 16777212;
  *(int8x8_t *)(v21 + 20) = v8;
  *(_DWORD *)(v21 + 28) = v9;
  *(_OWORD *)(v21 + 32) = v11;
  *(_QWORD *)(v21 + 48) = v12;
  *(_DWORD *)(v21 + 56) = v13;
  *(_DWORD *)(v21 + 60) = a4;
  *(_QWORD *)(v21 + 64) = v14;
  *(_QWORD *)(v21 + 72) = v15;
  *(_BYTE *)(v21 + 80) = v19;
  *(int8x8_t *)(v21 + 84) = v18;
  *(_DWORD *)(v21 + 92) = v17;
  ++*(_DWORD *)(v7 + 8);
  return result;
}

unint64_t DgnArray<RecogResultToken>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 96 * v6, 96 * v5, 96 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x60;
  *(_QWORD *)a1 = v8;
  return result;
}

void MrecInitModule_pelsrvsm_pel(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  __int128 v16;

  if (!gParDiagnosticPelScoringServerUseSeparateKernel)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DiagnosticPelScoringServerUseSeparateKernel", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDiagnosticPelScoringServerUseSeparateKernel = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticPelScoringServerUseSeparateKernel);
  }
  if (!gParDiagnosticPelScoringUseFreeTime)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DiagnosticPelScoringUseFreeTime", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDiagnosticPelScoringUseFreeTime = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticPelScoringUseFreeTime);
  }
  if (!gParDebugPelScoringServer1)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugPelScoringServer1", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugPelScoringServer1 = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPelScoringServer1);
  }
  if (!gParDebugPelScoringServer2)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugPelScoringServer2", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDebugPelScoringServer2 = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPelScoringServer2);
  }
  if (!gParDebugPelScoringServer3)
  {
    v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugPelScoringServer3", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v9 = &unk_24C214CE8;
    gParDebugPelScoringServer3 = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPelScoringServer3);
  }
  if (!gParDebugPelScoringServer4)
  {
    v10 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v10, "DebugPelScoringServer4", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v11 = &unk_24C214CE8;
    gParDebugPelScoringServer4 = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPelScoringServer4);
  }
  if (!gParDebugGPUCheckPelScoreRange)
  {
    v12 = MemChunkAlloc(0x48uLL, 0);
    v16 = xmmword_209A7B420;
    v13 = (_QWORD *)DoubleGlobalParamBase::DoubleGlobalParamBase((uint64_t)v12, (uint64_t)"DebugGPUCheckPelScoreRange", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, &v16, 0, 0.0);
    *v13 = &unk_24C215998;
    gParDebugGPUCheckPelScoreRange = (uint64_t)v13;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugGPUCheckPelScoreRange);
  }
  if (!gParDiagnosticGPUInitializePelScores)
  {
    v14 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v14, "DiagnosticGPUInitializePelScores", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v15 = &unk_24C214CE8;
    gParDiagnosticGPUInitializePelScores = (uint64_t)v15;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticGPUInitializePelScores);
  }
}

void DoubleGlobalParam::~DoubleGlobalParam(DoubleGlobalParam *this)
{
  MrecInitModule_sdpres_sdapi();
  JUMPOUT(0x20BD149A8);
}

char *GetSubFileExtensionString(unsigned int a1)
{
  if (a1 > 0x76)
    return 0;
  else
    return off_24C21FEB0[a1];
}

uint64_t GetIndexForLMSubDirExtensionString(const char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;

  v1 = (char)a1;
  v6 = 0;
  v5 = 0;
  if (sscanf(a1, ".lm%u%c", &v6, &v5) != 1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/subext.cpp", 71, (uint64_t)"dfutil/subext", 1, (uint64_t)"%.500s", v2, v3, v1);
  return v6;
}

void NonCoartSyncNet::~NonCoartSyncNet(NonCoartSyncNet *this, Sequence *a2)
{
  BaseSyncNet::~BaseSyncNet(this, a2);
  JUMPOUT(0x20BD149A8);
}

uint64_t NonCoartSyncNet::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;

  v2 = a2;
  v4 = BaseSyncNet::sizeObject(a1, a2);
  return sizeObject(a1 + 288, v2) + v4;
}

uint64_t NonCoartSyncNet::getExitContext(NonCoartSyncNet *this)
{
  return (uint64_t)this + 128;
}

uint64_t NonCoartSyncNet::scoreNetInternal(NonCoartSyncNet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _BOOL4 v10;
  int v11;
  _BOOL4 v12;
  int v13;
  uint64_t (*v14)(_QWORD *, char *, BOOL, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  int v23;
  unsigned int v24;

  if (*((_BYTE *)this + 282))
    v10 = 1;
  else
    v10 = *((_DWORD *)this + 71) != 20000;
  v11 = *((_DWORD *)this + 26);
  v23 = *((_DWORD *)this + 38);
  v24 = 0;
  if (v11)
    v12 = *((_DWORD *)this + 71) <= (int)a3;
  else
    v12 = 0;
  *((_BYTE *)this + 282) = v12;
  *((_DWORD *)this + 71) = 20000;
  v13 = BaseSyncNet::scoreIntSilNode1<true>((uint64_t)this, v12, *((unsigned __int8 *)this + 114), a3, a4, a5, a6, &v24);
  if (*((_BYTE *)this + 282))
  {
    v14 = (uint64_t (*)(_QWORD *, char *, BOOL, uint64_t, uint64_t, uint64_t))*((_QWORD *)this + 25);
    v15 = *((_QWORD *)this + 26);
    v16 = *((_QWORD *)this + 1);
    v17 = -25064;
LABEL_11:
    ++*(_DWORD *)(v16 + (v17 | 0x40000u));
    v18 = **((_QWORD **)this + 27);
    v19 = (_QWORD *)(v18 + (v15 >> 1));
    if ((v15 & 1) != 0)
      v14 = *(uint64_t (**)(_QWORD *, char *, BOOL, uint64_t, uint64_t, uint64_t))(*v19 + v14);
    v20 = v14(v19, (char *)this + 288, *((unsigned __int16 *)this + 148) != 20000, a3, a4, a5);
    *((_DWORD *)this + 71) = v20;
    if (v20 != 20000 && v13 >= *(__int16 *)(v18 + 24 * (*(unsigned __int16 *)(v18 + 10) - 1) + 24))
      v13 = *(__int16 *)(v18 + 24 * (*(unsigned __int16 *)(v18 + 10) - 1) + 24);
    goto LABEL_16;
  }
  if (*((_BYTE *)this + 112))
  {
    v14 = (uint64_t (*)(_QWORD *, char *, BOOL, uint64_t, uint64_t, uint64_t))*((_QWORD *)this + 23);
    v15 = *((_QWORD *)this + 24);
    v16 = *((_QWORD *)this + 1);
    v17 = -25060;
    goto LABEL_11;
  }
  if (v10)
    *(_WORD *)(**((_QWORD **)this + 27)
             + 24 * (*(unsigned __int16 *)(**((_QWORD **)this + 27) + 10) - 1)
             + 24) = 20000;
LABEL_16:
  v21 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v21 + 302576);
  *(_QWORD *)(v21 + 302592) += v24;
  *((_WORD *)this + 54) = v13;
  if (v13 < *(__int16 *)(v21 + 246))
    *(_WORD *)(v21 + 246) = v13;
  *((_DWORD *)this + 26) = v23;
  result = (*(uint64_t (**)(NonCoartSyncNet *))(*(_QWORD *)this + 328))(this);
  *((_WORD *)this + 55) = result;
  return result;
}

uint64_t BaseSyncNet::scoreIntSilNode1<true>(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, _DWORD *a8)
{
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)(a1 + 113) = 0;
  v11 = (_BYTE *)(a1 + 113);
  v12 = *(_DWORD *)(a1 + 152);
  if (a2)
  {
    v13 = *(_QWORD *)(a1 + 264);
    v14 = *(_DWORD *)(v13 + 4);
    if (*(__int16 *)(v13 + 8) <= a4)
    {
      v15 = (v12 != 0) | 0x20;
      goto LABEL_7;
    }
  }
  else
  {
    v13 = 0;
    v14 = -1;
  }
  if (!v12)
  {
    *(_DWORD *)(a1 + 248) = 1310740000;
    return 20000;
  }
  v15 = 1;
LABEL_7:
  v16 = a1 + 240;
  v17 = *(_QWORD *)(a1 + 8);
  if (a3)
    Node::scoreNodeWithPatternNBest(v16, v13, v14, v15, a5, a6, v17, 0, a7, v11, (HmmNet *)a1);
  else
    Node::scoreNodeWithPattern(v16, v13, v15, a5, a6, v17, 0, a7, v11, (HmmNet *)a1);
  ++*a8;
  return *(__int16 *)(a1 + 248);
}

uint64_t NonCoartSyncNet::thresholdNetInternal(NonCoartSyncNet *this, uint64_t a2, int a3)
{
  uint64_t result;
  int v6;

  result = BaseSyncNet::scoreIntSilNode2((uint64_t)this, a2, a3);
  if (*((__int16 *)this + 55) <= a3)
  {
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *((_WORD *)this + 55) = 20000;
  }
  *((_DWORD *)this + 26) = v6;
  return result;
}

uint64_t NonCoartSyncNet::calcNumActiveNodes(NonCoartSyncNet *this, int a2)
{
  uint64_t v2;

  v2 = *((unsigned int *)this + 38);
  if (*((_DWORD *)this + 71) <= a2)
    return Sequence::calcNumActiveNodes(**((_QWORD **)this + 27), a2) + v2;
  return v2;
}

uint64_t *NonCoartSyncNet::addNodesSequential(uint64_t a1, Sequence *this, int a3)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t v6;

  if (a3 == 2)
  {
    v5 = Sequence::newSequence(this);
    v6 = *(unsigned int *)(a1 + 224);
    *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * v6) = v5;
    *(_DWORD *)(a1 + 224) = v6 + 1;
    return v5 + 2;
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    result = (uint64_t *)(a1 + 240);
    *(_BYTE *)(a1 + 280) = 1;
  }
  return result;
}

uint64_t NonCoartSyncNet::attachInPort(NonCoartSyncNet *this, unsigned int a2, Node *a3)
{
  uint64_t result;

  result = PredStruct::addPred((uint64_t)a3 - 16, (uint64_t)this + 288);
  *(_QWORD *)(*((_QWORD *)this + 7) + 8 * a2) = (char *)this + 288;
  return result;
}

uint64_t PredStruct::addPred(uint64_t result, uint64_t a2)
{
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;

  v3 = (_WORD *)result;
  v4 = *(unsigned __int16 *)(result + 8);
  if ((_DWORD)v4 == 2)
    goto LABEL_7;
  if ((_DWORD)v4 == 1)
  {
    v5 = *(_QWORD *)result;
    result = (uint64_t)MemChunkAlloc(0x10uLL, 0);
    *(_QWORD *)v3 = result;
    *(_QWORD *)result = v5;
    *(_QWORD *)(*(_QWORD *)v3 + 8) = a2;
    LOWORD(v4) = v3[4];
    goto LABEL_13;
  }
  if (*(_WORD *)(result + 8))
  {
    if ((v4 & 7) != 0)
    {
LABEL_12:
      v4 = (unsigned __int16)v3[4];
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
      goto LABEL_13;
    }
LABEL_7:
    v6 = 8 * v4;
    if ((_DWORD)v4 == 2)
      v7 = 64;
    else
      v7 = 8 * v4 + 64;
    v8 = *(_QWORD **)v3;
    v9 = MemChunkAlloc(v7, 0);
    *(_QWORD *)v3 = v9;
    result = (uint64_t)memcpy(v9, v8, v6);
    if (v8)
      result = MemChunkFree(v8, 0);
    goto LABEL_12;
  }
  *(_QWORD *)result = a2;
LABEL_13:
  v3[4] = v4 + 1;
  return result;
}

void SigProc::~SigProc(SigProc *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 104))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 74, (uint64_t)"sigproc/sigproc", 1, (uint64_t)"%s", a7, a8, (char)&unk_209A7B44F);
  if (*((_DWORD *)this + 120))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 75, (uint64_t)"sigproc/sigproc", 2, (uint64_t)"%u", a7, a8, *((_DWORD *)this + 110));
  DgnDelete<ChannelStats>(*((ChannelStats **)this + 49));
  DgnDelete<CTFTMgr>(*((CTFTMgr **)this + 50));
  DgnDelete<EnvMgr>(*((EnvMgr **)this + 53));
  DgnDelete<UserDelta>(*((_QWORD *)this + 54));
  DgnDelete<AdaptStatsHistory>(*((AdaptStatsHistory **)this + 59));
  FileHistory::~FileHistory((SigProc *)((char *)this + 448));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 408);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 376);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 360);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 344);
  SigProcDescriptor::~SigProcDescriptor(this);
}

ChannelStats *DgnDelete<ChannelStats>(ChannelStats *result)
{
  _QWORD *v1;

  if (result)
  {
    ChannelStats::~ChannelStats(result);
    return (ChannelStats *)MemChunkFree(v1, 0);
  }
  return result;
}

CTFTMgr *DgnDelete<CTFTMgr>(CTFTMgr *result)
{
  _QWORD *v1;

  if (result)
  {
    CTFTMgr::~CTFTMgr(result);
    return (CTFTMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnDelete<UserDelta>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnPrimArray<unsigned int>::~DgnPrimArray(result + 48);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v1 + 3));
    return MemChunkFree(v1, 0);
  }
  return result;
}

void SigProc::saveSigProc(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ChannelStats *v15;
  UserDelta *v16;
  DgnStream *v17;
  FileHistory *v18;
  int64x2_t v19;
  int64x2_t v20;
  _BYTE v21[24];
  _BYTE v22[23];
  char v23;
  int64x2_t v24;
  int64x2_t v25;

  v24 = 0u;
  v25 = 0u;
  SnapTime::recordTime((SnapTime *)&v24, 1, 1, 1, 1);
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v23);
  if (a4)
  {
    v10 = a4 != 2;
  }
  else if (*(_BYTE *)(a1 + 484))
  {
    v10 = *(_BYTE *)(*(_QWORD *)(a1 + 424) + 264) != 0;
  }
  else
  {
    v10 = 0;
  }
  DFileOwner::DFileOwner((DFileOwner *)v22);
  *a3 = 1;
  v11 = DFile::openDFile(a2, (const FileSpec *)1, 4, (uint64_t)v22);
  *a3 = 2;
  DFileChecksums::DFileChecksums((DFileChecksums *)v21);
  AdaptStatsHistory::saveASB(*(AdaptStatsHistory **)(a1 + 472), (DFile *)v11, (DFileChecksums *)v21, v10, a5);
  EnvMgr::saveEnvMgr(*(EnvMgr **)(a1 + 424), (DFile *)v11, (DFileChecksums *)v21, v10, a5);
  SigProcDescriptor::saveSigProcDescriptor((SigProcDescriptor *)a1, (DFile *)v11, (DFileChecksums *)v21, v10, a5);
  WaveDecoder::saveWaveDecoder((WaveDecoder *)(a1 + 344), (DFile *)v11, (DFileChecksums *)v21, v10, a5);
  v15 = *(ChannelStats **)(a1 + 392);
  if (v15)
    ChannelStats::saveChannelStats(v15, (DFile *)v11, (DFileChecksums *)v21, v10, a5);
  CTFTMgr::saveCTFT(*(CTFTMgr **)(a1 + 400), (DFile *)v11, (DFileChecksums *)v21, v10, a5, v12, v13, v14);
  if (!v10)
  {
    v16 = *(UserDelta **)(a1 + 432);
    if (*((_DWORD *)v16 + 5))
      UserDelta::saveUserDelta(v16, (DFile *)v11, (DFileChecksums *)v21, a5);
    v17 = OpenAndWriteMrecHeader((uint64_t)v11, 0x52u, 0, "MRSCH!? ", 19, 2);
    v19.i32[0] = 0;
    writeObject((uint64_t)v17, (uint64_t)v21, &v19);
    writeObjectChecksum((uint64_t)v17, v19.i32);
    if (v17)
    {
      (**(void (***)(DgnStream *))v17)(v17);
      MemChunkFree(v17, 0);
    }
  }
  v19 = 0u;
  v20 = 0u;
  SnapTime::recordTime((SnapTime *)&v19, 1, 1, 1, 1);
  v19 = vsubq_s64(v19, v24);
  v20 = vsubq_s64(v20, v25);
  v18 = (FileHistory *)(a1 + 448);
  FileHistory::addEntryWithElapsedTime(v18, " saveSigProc time: ", (const SnapTime *)&v19);
  FileHistory::saveFileHistory(v18, (DFile *)v11, v10);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v22, 0);
  *a3 = 0;
  DFileChecksums::~DFileChecksums((DFileChecksums *)v21);
  DFileOwner::~DFileOwner((DFileOwner *)v22);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v23);
}

void sub_20996FD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  DFileChecksums::~DFileChecksums((DFileChecksums *)&a13);
  DFileOwner::~DFileOwner((DFileOwner *)&a16);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&a21);
  _Unwind_Resume(a1);
}

void SigProc::decrementAdapterCount(SigProc *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  v9 = *((_DWORD *)this + 120);
  if (!v9)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 348, (uint64_t)"sigproc/sigproc", 3, (uint64_t)"%u", a7, a8, *((_DWORD *)this + 110));
    v9 = *((_DWORD *)this + 120);
  }
  *((_DWORD *)this + 120) = v9 - 1;
}

void SigProc::printSize(SigProc *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  CTFTMgr *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  ChannelStats *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  EnvMgr *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  UserDelta *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  int v112;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 359, (DgnString *)&v111);
  if (v112)
    v16 = (void *)v111;
  else
    v16 = &unk_209A7B44F;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7B44F, a3, &unk_209A7B44F, v16);
  DgnString::~DgnString((DgnString *)&v111);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7B44F);
  v21 = (a3 + 1);
  v108 = a3;
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 360, (DgnString *)&v111);
  if (v112)
    v27 = (void *)v111;
  else
    v27 = &unk_209A7B44F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, v21, &unk_209A7B44F, v22, v22, v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v28 = 12;
  else
    v28 = 16;
  v29 = *((unsigned int *)this + 104);
  v30 = *((_DWORD *)this + 105);
  if (v30 >= v29)
  {
    v31 = 0;
    if ((int)v29 > 0)
      v28 += 4 * (v29 - 1) + 4;
    v32 = v28 + 4 * (v30 - v29);
  }
  else
  {
    v31 = 4 * v29;
    v32 = v28;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 362, (DgnString *)&v111);
  if (v112)
    v37 = (void *)v111;
  else
    v37 = &unk_209A7B44F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, v21, &unk_209A7B44F, v22, v22, v37, v32, v28, v31);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v32;
  *a5 += v28;
  *a6 += v31;
  v38 = sizeObject((uint64_t)this + 448, 0);
  v39 = sizeObject((uint64_t)this + 448, 1);
  v40 = sizeObject((uint64_t)this + 448, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 363, (DgnString *)&v111);
  if (v112)
    v45 = (void *)v111;
  else
    v45 = &unk_209A7B44F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v41, v42, v43, v44, v21, &unk_209A7B44F, v22, v22, v45, v38, v39, v40);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v38;
  *a5 += v39;
  *a6 += v40;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v46 = 4;
  else
    v46 = 8;
  v47 = *((_QWORD *)this + 59);
  if (v47)
  {
    v48 = sizeObject(v47, 0) + v46;
    v49 = *((_QWORD *)this + 59);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v46 = 4;
    else
      v46 = 8;
    if (v49 && (v46 += sizeObject(v49, 1), (v50 = *((_QWORD *)this + 59)) != 0))
      v51 = sizeObject(v50, 3);
    else
      v51 = 0;
  }
  else
  {
    v51 = 0;
    v48 = v46;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 365, (DgnString *)&v111);
  if (v112)
    v56 = (void *)v111;
  else
    v56 = &unk_209A7B44F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v21, &unk_209A7B44F, v22, v22, v56, v48, v46, v51);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v48;
  *a5 += v46;
  *a6 += v51;
  v110 = 0;
  v111 = 0;
  v109 = 0;
  SigProcDescriptor::printSize(this, 0xFFFFFFFFLL, v21, &v111, &v110, &v109);
  *a4 += v111;
  *a5 += v110;
  *a6 += v109;
  v57 = sizeObject((char *)this + 344, 0);
  v58 = sizeObject((char *)this + 344, 1);
  v59 = sizeObject((char *)this + 344, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 368, (DgnString *)&v111);
  if (v112)
    v64 = (void *)v111;
  else
    v64 = &unk_209A7B44F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v21, &unk_209A7B44F, v22, v22, v64, v57, v58, v59);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v57;
  *a5 += v58;
  *a6 += v59;
  v65 = (CTFTMgr *)*((_QWORD *)this + 50);
  if (v65)
  {
    v110 = 0;
    v111 = 0;
    v109 = 0;
    CTFTMgr::printSize(v65, 0xFFFFFFFFLL, v21, &v111, &v110, &v109);
    *a4 += v111;
    *a5 += v110;
    *a6 += v109;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v66 = 4;
  else
    v66 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 369, (DgnString *)&v111);
  if (v112)
    v71 = (void *)v111;
  else
    v71 = &unk_209A7B44F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v21, &unk_209A7B44F, v22, v22, v71, v66, v66, 0);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v66;
  *a5 += v66;
  v72 = (ChannelStats *)*((_QWORD *)this + 49);
  if (v72)
  {
    v110 = 0;
    v111 = 0;
    v109 = 0;
    ChannelStats::printSize(v72, 0xFFFFFFFFLL, v21, &v111, &v110, &v109);
    *a4 += v111;
    *a5 += v110;
    *a6 += v109;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 4;
  else
    v73 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 371, (DgnString *)&v111);
  if (v112)
    v78 = (void *)v111;
  else
    v78 = &unk_209A7B44F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v74, v75, v76, v77, v21, &unk_209A7B44F, v22, v22, v78, v73, v73, 0);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v73;
  *a5 += v73;
  v79 = (EnvMgr *)*((_QWORD *)this + 53);
  if (v79)
  {
    v110 = 0;
    v111 = 0;
    v109 = 0;
    EnvMgr::printSize(v79, 0xFFFFFFFFLL, v21, &v111, &v110, &v109);
    *a4 += v111;
    *a5 += v110;
    *a6 += v109;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v80 = 4;
  else
    v80 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 372, (DgnString *)&v111);
  if (v112)
    v85 = (void *)v111;
  else
    v85 = &unk_209A7B44F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, v21, &unk_209A7B44F, v22, v22, v85, v80, v80, 0);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v80;
  *a5 += v80;
  v86 = (UserDelta *)*((_QWORD *)this + 54);
  if (v86)
  {
    v110 = 0;
    v111 = 0;
    v109 = 0;
    UserDelta::printSize(v86, 0xFFFFFFFFLL, v21, &v111, &v110, &v109);
    *a4 += v111;
    *a5 += v110;
    *a6 += v109;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v87 = 4;
  else
    v87 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 374, (DgnString *)&v111);
  if (v112)
    v92 = (void *)v111;
  else
    v92 = &unk_209A7B44F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A7B44F, v22, v22, v92, v87, v87, 0);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v87;
  *a5 += v87;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 375, (DgnString *)&v111);
  if (v112)
    v97 = (void *)v111;
  else
    v97 = &unk_209A7B44F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A7B44F, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 377, (DgnString *)&v111);
  if (v112)
    v102 = (void *)v111;
  else
    v102 = &unk_209A7B44F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v21, &unk_209A7B44F, v22, v22, v102, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v111);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 378, (DgnString *)&v111);
  if (v112)
    v107 = (void *)v111;
  else
    v107 = &unk_209A7B44F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v103, v104, v105, v106, v108, &unk_209A7B44F, (35 - v108), (35 - v108), v107, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v111);
}

void sub_2099706C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MrecInitModule_sausage_kernel(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;

  if (!gParDebugSausageGenerationShowOperationTimes)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugSausageGenerationShowOperationTimes", (const char *)&unk_209A7B450, (const char *)&unk_209A7B450, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugSausageGenerationShowOperationTimes = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugSausageGenerationShowOperationTimes);
  }
  if (!gParDebugSausageGenerationInitialize)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugSausageGenerationInitialize", (const char *)&unk_209A7B450, (const char *)&unk_209A7B450, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugSausageGenerationInitialize = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugSausageGenerationInitialize);
  }
  if (!gParDebugSausageGenerationMinimize)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugSausageGenerationMinimize", (const char *)&unk_209A7B450, (const char *)&unk_209A7B450, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugSausageGenerationMinimize = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugSausageGenerationMinimize);
  }
  if (!gParDebugSausageCombination)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugSausageCombination", (const char *)&unk_209A7B450, (const char *)&unk_209A7B450, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDebugSausageCombination = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugSausageCombination);
  }
  if (!gParDiagnosticSausageGenerationCommand)
  {
    v8 = MemChunkAlloc(0x48uLL, 0);
    StringGlobalParamBase::StringGlobalParamBase((StringGlobalParamBase *)v8, "DiagnosticSausageGenerationCommand", (const char *)&unk_209A7B450, (const char *)&unk_209A7B450, (char *)&unk_209A7B450, 0, 0);
    *v9 = &unk_24C215D48;
    gParDiagnosticSausageGenerationCommand = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticSausageGenerationCommand);
  }
  if (!gParDebugFastSausageGeneration)
  {
    v10 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v10, "DebugFastSausageGeneration", (const char *)&unk_209A7B450, (const char *)&unk_209A7B450, 0, 0, 0);
    *v11 = &unk_24C214CE8;
    gParDebugFastSausageGeneration = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFastSausageGeneration);
  }
}

void CWIDProbPair::~CWIDProbPair(CWIDProbPair *this)
{
  DgnDelete<DgnArray<Germ>>(*((_QWORD *)this + 5));
  *((_QWORD *)this + 5) = 0;
}

void SausageSlot::~SausageSlot(SausageSlot *this)
{
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 2) = 0xBFF0000000000000;
  DgnArray<CWIDProbPair>::releaseAll((uint64_t)this);
}

uint64_t sizeObject<CWIDProbPair>(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 37;
  else
    v2 = 41;
  if (a2 == 3)
  {
    v3 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v3 = 12;
    else
      v3 = 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = *(unsigned int *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        v7 = v6 + 1;
        do
          v3 += sizeObject(*(_QWORD *)a1 + 48 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2)
        v3 += v2 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnDelete<DgnArray<Germ>>(0);
  return v3;
}

void sub_209970B64(_Unwind_Exception *a1)
{
  DgnDelete<DgnArray<Germ>>(0);
  _Unwind_Resume(a1);
}

uint64_t Sausage::adjustReferenceCounts(uint64_t this, int a2)
{
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;

  v3 = this;
  v4 = (_QWORD **)VocMgr::smpVocMgr;
  v5 = *(unsigned int *)(this + 28);
  if (!(_DWORD)v5)
  {
    v7 = 0;
    goto LABEL_8;
  }
  v6 = *(_QWORD **)(this + 96);
  v7 = (uint64_t *)*v6;
  if (*v6)
  {
LABEL_8:
    LODWORD(v8) = 0;
    goto LABEL_9;
  }
  v8 = 0;
  v9 = v6 + 1;
  while (v5 - 1 != v8)
  {
    v7 = (uint64_t *)v9[v8++];
    if (v7)
    {
LABEL_9:
      while (v8 < v5)
      {
        v10 = *((unsigned int *)v7 + 3);
        v11 = *(_QWORD *)(**v4 + ((v10 >> 22) & 0x3F8));
        v12 = *(_QWORD *)(v11 + 48);
        v13 = v10 & 0xFFFFFF;
        if (a2)
        {
          Voc::addVocReferringSausageRef(v11);
          this = WordList::addIncludingSausageRef(v12, v13);
        }
        else
        {
          Voc::removeVocReferringSausageRef(v11);
          this = WordList::removeIncludingSausageRef(v12, v13);
        }
        v14 = (uint64_t *)*v7;
        v5 = *(unsigned int *)(v3 + 28);
        if (!*v7)
        {
          v8 = (v8 + 1);
          if (v8 >= v5)
          {
            v14 = v7;
          }
          else
          {
            v15 = *(_QWORD *)(v3 + 96);
            v14 = *(uint64_t **)(v15 + 8 * v8);
            if (!v14)
            {
              v16 = (uint64_t *)(v15 + 8 * v8 + 8);
              v17 = ~v8 + v5;
              while (v17)
              {
                v18 = (uint64_t *)*v16++;
                v14 = v18;
                LODWORD(v8) = v8 + 1;
                --v17;
                if (v18)
                  goto LABEL_21;
              }
              return this;
            }
          }
        }
LABEL_21:
        v7 = v14;
      }
      return this;
    }
  }
  return this;
}

void Sausage::~Sausage(Sausage *this)
{
  if (*((_BYTE *)this + 120))
  {
    Sausage::adjustReferenceCounts((uint64_t)this, 0);
    *((_BYTE *)this + 120) = 0;
  }
  HashKEV<unsigned int,unsigned int,CWIDScope>::~HashKEV((uint64_t)this + 16);
  DgnIOwnArray<SausageSlot *>::releaseAll((uint64_t)this);
}

void Sausage::printSize(Sausage *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  unint64_t *v87;
  uint64_t v88;
  void *v89;
  int v90;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4231, (DgnString *)&v89);
  if (v90)
    v16 = v89;
  else
    v16 = &unk_209A7B450;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7B450, a3, &unk_209A7B450, v16);
  DgnString::~DgnString((DgnString *)&v89);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  v87 = a6;
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7B450);
  v21 = sizeObject<SausageSlot *>((uint64_t)this, 0);
  v22 = sizeObject<SausageSlot *>((uint64_t)this, 1);
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4232, (DgnString *)&v89);
  if (v90)
    v28 = v89;
  else
    v28 = &unk_209A7B450;
  v88 = (a3 + 1);
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v88, &unk_209A7B450, (34 - a3), (34 - a3), v28, v21, v22, 0);
  DgnString::~DgnString((DgnString *)&v89);
  *a4 += v21;
  *a5 += v22;
  v29 = sizeObject((char *)this + 40);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v30 = 8;
  else
    v30 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v31 = 2;
  else
    v31 = 3;
  v32 = (unint64_t)*((unsigned int *)this + 26) << v31;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v33 = 4;
  else
    v33 = 8;
  v34 = v29 + v33 + v30 + v32 + 13;
  v35 = sizeObject((char *)this + 40);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v36 = 8;
  else
    v36 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v37 = 2;
  else
    v37 = 3;
  v38 = (unint64_t)*((unsigned int *)this + 26) << v37;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 4;
  else
    v39 = 8;
  v40 = v35 + v39 + v36 + v38 + 13;
  v41 = sizeObject((char *)this + 40);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4233, (DgnString *)&v89);
  if (v90)
    v46 = v89;
  else
    v46 = &unk_209A7B450;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v88, &unk_209A7B450, v23, v23, v46, v34, v40, v41);
  DgnString::~DgnString((DgnString *)&v89);
  *a4 += v34;
  *a5 += v40;
  *v87 += v41;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4234, (DgnString *)&v89);
  if (v90)
    v51 = v89;
  else
    v51 = &unk_209A7B450;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, v88, &unk_209A7B450, v23, v23, v51, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v89);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4236, (DgnString *)&v89);
  if (v90)
    v56 = v89;
  else
    v56 = &unk_209A7B450;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v88, &unk_209A7B450, v23, v23, v56, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v89);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4238, (DgnString *)&v89);
  if (v90)
    v61 = v89;
  else
    v61 = &unk_209A7B450;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, v88, &unk_209A7B450, v23, v23, v61, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v89);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4239, (DgnString *)&v89);
  if (v90)
    v66 = v89;
  else
    v66 = &unk_209A7B450;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v88, &unk_209A7B450, v23, v23, v66, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v89);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4241, (DgnString *)&v89);
  if (v90)
    v71 = v89;
  else
    v71 = &unk_209A7B450;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v88, &unk_209A7B450, v23, v23, v71, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v89);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4243, (DgnString *)&v89);
  if (v90)
    v76 = v89;
  else
    v76 = &unk_209A7B450;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v88, &unk_209A7B450, v23, v23, v76, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v89);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4245, (DgnString *)&v89);
  if (v90)
    v81 = v89;
  else
    v81 = &unk_209A7B450;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v88, &unk_209A7B450, v23, v23, v81, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v89);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4246, (DgnString *)&v89);
  if (v90)
    v86 = v89;
  else
    v86 = &unk_209A7B450;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v82, v83, v84, v85, a3, &unk_209A7B450, (35 - a3), (35 - a3), v86, *a4, *a5, *v87);
  DgnString::~DgnString((DgnString *)&v89);
}

void sub_2099712AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<SausageSlot *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject<CWIDProbPair>(v10, a2) + 9;
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

_QWORD *DgnArray<CWIDProbPair>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 48 * v2 - 48;
    do
    {
      CWIDProbPair::~CWIDProbPair((CWIDProbPair *)(*(_QWORD *)a1 + v3));
      v3 -= 48;
    }
    while (v3 != -48);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnIOwnArray<SausageSlot *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<SausageSlot>(*(SausageSlot **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

SausageSlot *DgnDelete<SausageSlot>(SausageSlot *result)
{
  _QWORD *v1;

  if (result)
  {
    SausageSlot::~SausageSlot(result);
    return (SausageSlot *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t SDVoc_New(FileSpec *a1, FileSpec *a2, uint64_t a3, unsigned int *a4, FileSpec *a5, unsigned int a6, unsigned int a7, void *a8, uint64_t a9)
{
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  DgnString *v24;
  char *v25;
  DgnString *v26;
  char *v27;
  DgnString *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  void *v36;
  const char *v37;
  const char *v38;
  unsigned int *v39;
  void *v40;
  uint64_t v41;
  BOOL v42;
  _BOOL4 v43;
  _BOOL4 v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  DSMSetData **SetObject;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  ModelMgr *v68;
  uint64_t Voc;
  _BYTE v72[16];
  _BYTE v73[16];
  _BYTE v74[16];
  _BYTE v75[16];
  char *v76;
  int v77;
  void *v78;
  uint64_t v79;
  char *v80;
  int v81;
  void *v82;
  int v83;
  _BYTE v84[152];

  v16 = SdapiInsurance::SdapiInsurance(v84, "SDVoc_New", 1, 1, 379);
  if (!v84[97])
  {
    Voc = 0;
    goto LABEL_81;
  }
  if (!a1)
    throwBadStringPointer(v16, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
  LOBYTE(v76) = 0;
  if (!a2)
    throwBadStringPointer(v16, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
  LOBYTE(v76) = 0;
  if (!a5)
    throwBadStringPointer(v16, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
  LOBYTE(v76) = 0;
  if (gbShowCalls | gbShowCallsWithFileSpecArgs)
  {
    DgnString::DgnString((DgnString *)&v82);
    DgnString::DgnString((DgnString *)&v76);
    FileSpec::getDiagnosticMaskedName(a1, (DgnString *)&v76, v24);
    DgnString::preAllocate((unint64_t)&v82, 96);
    if (v77)
      v25 = v76;
    else
      v25 = (char *)&unk_209A7B466;
    DgnString::formatStringInPlace((DgnString *)&v82, v25);
    DgnString::~DgnString((DgnString *)&v76);
    DgnString::DgnString((DgnString *)&v80);
    DgnString::DgnString((DgnString *)&v76);
    FileSpec::getDiagnosticMaskedName(a2, (DgnString *)&v76, v26);
    DgnString::preAllocate((unint64_t)&v80, 96);
    if (v77)
      v27 = v76;
    else
      v27 = (char *)&unk_209A7B466;
    DgnString::formatStringInPlace((DgnString *)&v80, v27);
    DgnString::~DgnString((DgnString *)&v76);
    DgnString::DgnString((DgnString *)&v78);
    DgnString::DgnString((DgnString *)&v76);
    FileSpec::getDiagnosticMaskedName(a5, (DgnString *)&v76, v28);
    DgnString::preAllocate((unint64_t)&v78, 96);
    if (v77)
      v29 = v76;
    else
      v29 = (char *)&unk_209A7B466;
    DgnString::formatStringInPlace((DgnString *)&v78, v29);
    DgnString::~DgnString((DgnString *)&v76);
    if (v83)
      v34 = v82;
    else
      v34 = &unk_209A7B466;
    v35 = v80;
    if (!v81)
      v35 = (char *)&unk_209A7B466;
    if ((_DWORD)v79)
      v36 = v78;
    else
      v36 = &unk_209A7B466;
    v37 = "SD_TRUE";
    if (a6)
      v38 = "SD_TRUE";
    else
      v38 = "SD_FALSE";
    if (!a7)
      v37 = "SD_FALSE";
    if (gbShowCallPointerArguments)
      v39 = a4;
    else
      v39 = 0;
    if (gbShowCallPointerArguments)
      v40 = a8;
    else
      v40 = 0;
    v41 = a9;
    if (!gbShowCallPointerArguments)
      v41 = 0;
    xlprintf("Entering sdapi call %.500s(%.500s, %.500s, %lld, Masked:0x%016llx, %.500s, %.500s, %.500s, Masked:0x%016llx, Masked:0x%016llx)\n", v30, v31, v32, v33, "SDVoc_New", v34, v35, a3, v39, v36, v38, v37, v40, v41);
    DgnString::~DgnString((DgnString *)&v78);
    DgnString::~DgnString((DgnString *)&v80);
    DgnString::~DgnString((DgnString *)&v82);
  }
  if (a6 == 1 && a7 == 1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 260, (uint64_t)"sdapi/sdvoc", 23, (uint64_t)"%s", v22, v23, (char)&unk_209A7B466);
  if (a5)
  {
    v42 = a4 == 0;
    v43 = *(unsigned __int8 *)a5 != 0;
    if (*(_BYTE *)a5)
      v44 = 1;
    else
      v44 = a4 != 0;
    if (a4 && *(_BYTE *)a5)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 266, (uint64_t)"sdapi/sdvoc", 19, (uint64_t)"%s", v22, v23, (char)&errStr_sdapi_sdvoc_E_SHAREDMEM_HAVECACHEDIR);
      v42 = 0;
      v44 = 1;
    }
  }
  else
  {
    v43 = 0;
    v42 = a4 == 0;
    v44 = a4 != 0;
  }
  if (a6 == 1 && v44)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 273, (uint64_t)"sdapi/sdvoc", 15, (uint64_t)"%s", v22, v23, (char)&errStr_sdapi_sdvoc_E_SHAREDMEM_REABSORB);
  v45 = !v44;
  if (a7 != 1)
    v45 = 1;
  if ((v45 & 1) == 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 277, (uint64_t)"sdapi/sdvoc", 16, (uint64_t)"%s", v22, v23, (char)&errStr_sdapi_sdvoc_E_SHAREDMEM_LOBOTOMIZE);
  if (v43 && !OsFile::dirExists(a5, v17))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 281, (uint64_t)"sdapi/sdvoc", 20, (uint64_t)"%.500s", v46, v47, (char)a5);
  FileSpec::FileSpec((FileSpec *)&v82, (const char *)a1);
  FileSpec::FileSpec((FileSpec *)&v80);
  if (a2 && *(_BYTE *)a2)
  {
    v50 = !v44;
    if (a3 == -1)
      v50 = 1;
    if ((v50 & 1) == 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 291, (uint64_t)"sdapi/sdvoc", 17, (uint64_t)"%s", v48, v49, (char)&errStr_sdapi_sdvoc_E_SHAREDMEM_STATICVOC);
    FileSpec::fillFromName((FileSpec *)&v80, (char *)a2);
  }
  v78 = a8;
  v79 = a9;
  ProgressCallbackHandler::ProgressCallbackHandler((ProgressCallbackHandler *)&v76, (void (*)(unsigned int, const void *))ProgressCallbackWrapper, &v78);
  DFileOwner::DFileOwner((DFileOwner *)v75);
  DFileOwner::DFileOwner((DFileOwner *)v74);
  v51 = DFile::openDFile((uint64_t)&v82, 0, 2, (uint64_t)v75);
  if (!FileSpec::isValid(&v80))
  {
    v58 = 0;
    if (!v44)
      goto LABEL_70;
LABEL_72:
    DgnString::DgnString((DgnString *)v73);
    if (!v42)
    {
      DgnString::makeStringPrintf((DgnString *)"{%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x}", (const char *)*a4, v60, v61, v62, *a4, *((unsigned __int16 *)a4 + 2), *((unsigned __int16 *)a4 + 3), *((unsigned __int8 *)a4 + 8), *((unsigned __int8 *)a4 + 9), *((unsigned __int8 *)a4 + 10), *((unsigned __int8 *)a4 + 11), *((unsigned __int8 *)a4 + 12), *((unsigned __int8 *)a4 + 13), *((unsigned __int8 *)a4 + 14), *((unsigned __int8 *)a4 + 15));
      DgnString::operator=((DgnString *)v73, (DgnString *)v72);
      DgnString::~DgnString((DgnString *)v72);
    }
    DgnString::DgnString((DgnString *)v72, (const char *)a5);
    SetObject = (DSMSetData **)DgnSharedMemMgr::getMaybeCreateSetObjectEx((DgnSharedMemMgr *)DgnSharedMemMgr::smpDSMMgr, (const DgnString *)v72, (const DgnString *)v73, v63, v64, v65, v66, v67);
    DgnString::~DgnString((DgnString *)v72);
    DgnString::~DgnString((DgnString *)v73);
    goto LABEL_75;
  }
  v58 = DFile::openDFile((uint64_t)&v80, 0, 9, (uint64_t)v74);
  if (v44)
    goto LABEL_72;
LABEL_70:
  SetObject = 0;
LABEL_75:
  v68 = (ModelMgr *)ModelMgr::smpModelMgr;
  if (a6 >= 2)
    throwBadSdapiArgument("SDBool", (int)a6, v52, v53, v54, v55, v56, v57);
  if (a7 >= 2)
    throwBadSdapiArgument("SDBool", (int)a7, v52, v53, v54, v55, v56, v57);
  Voc = ModelMgr::loadVoc(v68, (char **)v51, (DFile *)v58, SetObject, a3, a6 == 1, a7 == 1, (ProgressCallbackHandler *)&v76);
  DFileOwner::~DFileOwner((DFileOwner *)v74);
  DFileOwner::~DFileOwner((DFileOwner *)v75);
  ProgressCallbackHandler::~ProgressCallbackHandler((ProgressCallbackHandler *)&v76);
  FileSpec::~FileSpec((FileSpec *)&v80);
  FileSpec::~FileSpec((FileSpec *)&v82);
LABEL_81:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v84);
  return Voc;
}

void sub_209971C6C()
{
  __cxa_end_catch();
  JUMPOUT(0x209971C78);
}

uint64_t SDVoc_Save(unint64_t a1, FileSpec *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  DgnString *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  ModelMgr *v42;
  uint64_t v43;
  char *v44;
  char *v46;
  int v47;
  int v48;
  char *v49;
  int v50;
  _QWORD v51[2];
  char *v52[2];
  void *v53;
  int v54;
  _BYTE v55[144];

  v10 = SdapiInsurance::SdapiInsurance(v55, "SDVoc_Save", 1, 0, 380);
  if (v55[97])
  {
    if (!a2)
      throwBadStringPointer(v10, v11, v12, v13, v14, v15, v16, v17);
    LOBYTE(v49) = 0;
    if (gbShowCalls | gbShowCallsWithFileSpecArgs)
    {
      DgnString::DgnString((DgnString *)&v53);
      DgnString::DgnString((DgnString *)&v49);
      FileSpec::getDiagnosticMaskedName(a2, (DgnString *)&v49, v18);
      DgnString::preAllocate((unint64_t)&v53, 96);
      if (v50)
        v19 = v49;
      else
        v19 = (char *)&unk_209A7B466;
      DgnString::formatStringInPlace((DgnString *)&v53, v19);
      DgnString::~DgnString((DgnString *)&v49);
      if (v54)
        v24 = v53;
      else
        v24 = &unk_209A7B466;
      v25 = "SD_TRUE";
      if (!a3)
        v25 = "SD_FALSE";
      if (gbShowCallPointerArguments)
        v26 = a4;
      else
        v26 = 0;
      if (gbShowCallPointerArguments)
        v27 = a5;
      else
        v27 = 0;
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, %.500s, %.500s, Masked:0x%016llx, Masked:0x%016llx)\n", v20, v21, v22, v23, "SDVoc_Save", a1, v24, v25, v26, v27);
      DgnString::~DgnString((DgnString *)&v53);
    }
    if (*(_BYTE *)(ApiState::smpApiState + 1))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 351, (uint64_t)"sdapi/sdvoc", 6, (uint64_t)"%s", v16, v17, (char)&errStr_sdapi_sdvoc_E_SAVE_AFTER_ERROR);
    FileSpec::FileSpec((FileSpec *)&v53, (const char *)a2);
    FileSpec::FileSpec((FileSpec *)v52);
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v28, v29, v30, v31, v32, v33);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v28, v29, v30, v31, v32, v33);
    if (*(_QWORD *)(ModelMgr::getVocOrThrow((ModelMgr *)ModelMgr::smpModelMgr, (unsigned __int16)a1, v28, v29, v30, v31, v32, v33)+ 136))errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 358, (uint64_t)"sdapi/sdvoc", 22, (uint64_t)"%s", v34, v35, (char)&errStr_sdapi_sdvoc_E_VOC_UNLOADEDLM);
    v51[0] = a4;
    v51[1] = a5;
    ProgressCallbackHandler::ProgressCallbackHandler((ProgressCallbackHandler *)&v49, (void (*)(unsigned int, const void *))ProgressCallbackWrapper, v51);
    v48 = 0;
    DgnString::DgnString((DgnString *)&v46);
    v42 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (a3 >= 2)
      throwBadSdapiArgument("SDBool", (int)a3, v36, v37, v38, v39, v40, v41);
    ModelMgr::saveVoc(v42, (unsigned __int16)a1, (uint64_t)&v53, v52, &v48, 2, (DFileChecksums *)(a3 == 1), (ProgressCallbackHandler *)&v49, 0, 0);
    if (v48 == 2)
    {
      v43 = 3;
    }
    else if (v48)
    {
      v43 = 2;
    }
    else
    {
      v43 = 1;
    }
    if (v47)
      v44 = v46;
    else
      v44 = (char *)&unk_209A7B466;
    ApiState::setLastResultCodeString((ApiState *)ApiState::smpApiState, v44);
    DgnString::~DgnString((DgnString *)&v46);
    ProgressCallbackHandler::~ProgressCallbackHandler((ProgressCallbackHandler *)&v49);
    FileSpec::~FileSpec((FileSpec *)v52);
    FileSpec::~FileSpec((FileSpec *)&v53);
  }
  else
  {
    v43 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v55);
  return v43;
}

void sub_2099720A0()
{
  __cxa_end_catch();
  JUMPOUT(0x2099720ACLL);
}

void SDVoc_Delete(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ModelMgr *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t VocOrThrow;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[144];

  SdapiInsurance::SdapiInsurance(v19, "SDVoc_Delete", 1, 0, 381);
  if (v19[97])
  {
    if (gbShowCalls)
      xlprintf("Entering sdapi call %.500s(<SDh %lld>)\n", v2, v3, v4, v5, "SDVoc_Delete", a1);
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v3, v4, v5, v6, v7, v8);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v3, v4, v5, v6, v7, v8);
    v9 = (ModelMgr *)ModelMgr::smpModelMgr;
    VocOrThrow = ModelMgr::getVocOrThrow((ModelMgr *)ModelMgr::smpModelMgr, (unsigned __int16)a1, v3, v4, v5, v6, v7, v8);
    if (*(_QWORD *)(VocOrThrow + 136))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 401, (uint64_t)"sdapi/sdvoc", 22, (uint64_t)"%s", v10, v11, (char)&errStr_sdapi_sdvoc_E_VOC_UNLOADEDLM);
    if (*(_DWORD *)(VocOrThrow + 248))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 404, (uint64_t)"sdapi/sdvoc", 3, (uint64_t)"%u", v10, v11, a1);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(VocOrThrow + 72) + 192))(*(_QWORD *)(VocOrThrow + 72)))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 407, (uint64_t)"sdapi/sdvoc", 4, (uint64_t)"%u", v17, v18, a1);
    ModelMgr::freeVoc(v9, (unsigned __int16)a1, v13, v14, v15, v16, v17, v18);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v19);
}

void sub_209972250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  ApiState *v12;
  DgnException *v13;
  void *v14;

  if (a2 == 2)
  {
    v12 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v12, v13);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a11);
      _Unwind_Resume(a1);
    }
    v14 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v14);
  }
  __cxa_end_catch();
  JUMPOUT(0x209972234);
}

void SDVoc_GetInfo(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ModelMgr *v12;
  uint64_t VocOrThrow;
  WordList *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  _BYTE v19[144];

  SdapiInsurance::SdapiInsurance(v19, "SDVoc_GetInfo", 1, 1, 382);
  if (v19[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v11 = a2;
      else
        v11 = 0;
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, Masked:0x%016llx)\n", v4, v5, v6, v7, "SDVoc_GetInfo", a1, v11);
    }
    if (!a2)
      throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v5, v6, v7, v8, v9, v10);
    v12 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v5, v6, v7, v8, v9, v10);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v5, v6, v7, v8, v9, v10);
    VocOrThrow = ModelMgr::getVocOrThrow(v12, (unsigned __int16)a1, v5, v6, v7, v8, v9, v10);
    v14 = *(WordList **)(VocOrThrow + 48);
    v16 = *(_QWORD *)(VocOrThrow + 64);
    v15 = *(_QWORD *)(VocOrThrow + 72);
    *(_DWORD *)a2 = *((_DWORD *)v14 + 96);
    *(_DWORD *)(a2 + 4) = WordList::getValidIdCount(v14);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v16 + 36);
    v17 = 1;
    if (**(_DWORD **)(VocOrThrow + 8))
      v17 = 2;
    *(_QWORD *)(a2 + 16) = v17;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(*(_QWORD *)(VocOrThrow + 32) + 4);
    *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 568))(v15);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(VocOrThrow + 248);
    *(_DWORD *)(a2 + 40) = Voc::getVocReferringLatticeRefCount((Voc *)VocOrThrow);
    *(_DWORD *)(a2 + 44) = Voc::getVocReferringPrefilterResultRefCount((Voc *)VocOrThrow);
    *(_DWORD *)(a2 + 48) = Voc::getVocReferringSausageRefCount((Voc *)VocOrThrow);
    *(_DWORD *)(a2 + 52) = Voc::getVocReferringReproRefCount((Voc *)VocOrThrow);
    *(_DWORD *)(a2 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 608))(v15);
    v18 = *(_DWORD *)(VocOrThrow + 128) != -1
       && *(_DWORD *)(DgnSharedMemSet::getSetCacheDir(*(DgnSharedMemSet **)(VocOrThrow + 120)) + 8) < 2u;
    *(_DWORD *)(a2 + 64) = v18;
    *(_DWORD *)(a2 + 68) = Voc::canUnloadCachedLM((Voc *)VocOrThrow);
    *(_DWORD *)(a2 + 72) = *(_QWORD *)(VocOrThrow + 136) == 0;
    *(_DWORD *)(a2 + 60) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 120))(v15);
    *(_DWORD *)(a2 + 76) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 128))(v15);
    *(_DWORD *)(a2 + 80) = WordList::getRequiredWordTagsVersion(v14);
    *(_DWORD *)(a2 + 84) = WordList::getOptionalWordTagsVersion(v14);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)v14 + 138);
    *(_DWORD *)(a2 + 92) = *((_DWORD *)v14 + 129);
    *(_QWORD *)(a2 + 96) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 240))(v15);
    *(_QWORD *)(a2 + 104) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 248))(v15);
    *(_QWORD *)(a2 + 112) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 256))(v15);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v19);
}

void sub_209972538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  ApiState *v14;
  DgnException *v15;
  void *v16;

  if (a2 == 2)
  {
    v14 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v14, v15);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a13);
      _Unwind_Resume(a1);
    }
    v16 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v16);
  }
  __cxa_end_catch();
  JUMPOUT(0x209972518);
}

void SDVoc_GetWords(unint64_t a1, unint64_t a2, char *a3, char *a4, void *a5, uint64_t a6, unsigned int *a7, void **a8, unsigned int *a9, void (*a10)(unint64_t, unsigned int, unsigned int, void *, unsigned int, void **, unsigned int *), unint64_t a11, _DWORD *a12)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  void **v30;
  unsigned int *v31;
  void (*v32)(unint64_t, unsigned int, unsigned int, void *, unsigned int, void **, unsigned int *);
  unint64_t v33;
  _DWORD *v34;
  ModelMgr *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  unsigned int v49[2];
  _BYTE v50[152];

  v20 = SdapiInsurance::SdapiInsurance(v50, "SDVoc_GetWords", 1, 1, 385);
  if (v50[97])
  {
    if (!a3)
      throwBadStringPointer(v20, v21, v22, v23, v24, v25, v26, v27);
    LOBYTE(v48) = 0;
    if (!a4)
      throwBadStringPointer(v20, v21, v22, v23, v24, v25, v26, v27);
    LOBYTE(v48) = 0;
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v28 = a5;
      else
        v28 = 0;
      if (gbShowCallPointerArguments)
        v29 = a7;
      else
        v29 = 0;
      if (gbShowCallPointerArguments)
        v30 = a8;
      else
        v30 = 0;
      if (gbShowCallPointerArguments)
        v31 = a9;
      else
        v31 = 0;
      v32 = a10;
      v33 = a11;
      if (!gbShowCallPointerArguments)
      {
        v32 = 0;
        v33 = 0;
      }
      v34 = a12;
      if (!gbShowCallPointerArguments)
        v34 = 0;
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, '%.500s', '%.500s', Masked:0x%016llx, %llu, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx)\n", v21, v22, v23, v24, "SDVoc_GetWords", a1, a2, a3, a4, v28, a6, v29, v30, v31, v32, v33, v34);
    }
    if (!a5 && (_DWORD)a6)
      throwBadLengthForNullPointer(a6, "DgnVerifyWritePtr", v22, v23, v24, v25, v26, v27);
    if (!a7)
      throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v22, v23, v24, v25, v26, v27);
    if (!a8)
      throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v22, v23, v24, v25, v26, v27);
    if (!a9)
      throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v22, v23, v24, v25, v26, v27);
    if (!a12)
      throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v22, v23, v24, v25, v26, v27);
    if (a2 == -2)
    {
      LOWORD(a2) = -2;
      goto LABEL_48;
    }
    if (a2 != -1)
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhColl", a2, v22, v23, v24, v25, v26, v27);
      if ((unsigned __int16)a2 != 0xFFFF && (_WORD)a2)
      {
LABEL_48:
        v48 = 0;
        *(_QWORD *)v49 = 0;
        v35 = (ModelMgr *)ModelMgr::smpModelMgr;
        if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
          throwBadSdapiArgument("SDhVoc", a1, v22, v23, v24, v25, v26, v27);
        if ((unsigned __int16)a1 - 1 >= 0x7B)
          throwBadSdapiArgument("SDhVoc", a1, v22, v23, v24, v25, v26, v27);
        v36 = *(_QWORD *)(ModelMgr::getVocOrThrow(v35, (unsigned __int16)a1, v22, v23, v24, v25, v26, v27) + 48);
        v47 = 0;
        WordList::getWordsWithPrefix(v36, (unsigned __int16)a2, a3, a4, (uint64_t)&v48, (uint64_t)&v47, v37, v38);
        v39 = v49[0];
        if (v49[0] <= a6)
        {
          *a8 = a5;
          *a9 = a6;
          if (!v39)
          {
LABEL_62:
            *a7 = v39;
            *a12 = v47;
            DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
            goto LABEL_63;
          }
        }
        else
        {
          ApiState::callReallocateArrayCallback((ApiState *)ApiState::smpApiState, a10, a11, 8, v49[0], a5, a6, a8, a9);
          if (!*a8 && *a9)
            throwBadLengthForNullPointer(*a9, "DgnVerifyWritePtr", v40, v41, v42, v43, v44, v45);
          v39 = v49[0];
          if (!v49[0])
            goto LABEL_62;
        }
        v46 = 0;
        do
        {
          *((_QWORD *)*a8 + v46) = *(unsigned int *)(v48 + 4 * v46) + 1;
          ++v46;
        }
        while (v39 != v46);
        goto LABEL_62;
      }
      throwBadSdapiArgument("SDhColl", a2, v22, v23, v24, v25, v26, v27);
      if ((_WORD)a2 != 0xFFFF)
      {
        LOWORD(a2) = 0;
        goto LABEL_48;
      }
    }
    if (*a3)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 521, (uint64_t)"sdapi/sdvoc", 12, (uint64_t)"%s", v26, v27, (char)&errStr_sdapi_sdvoc_E_PREFIXNOCOLLATION);
    LOWORD(a2) = -1;
    goto LABEL_48;
  }
LABEL_63:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v50);
}

void sub_20997291C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  ApiState *v29;
  DgnException *v30;
  void *v31;

  if (a2 == 2)
  {
    v29 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v29, v30);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a28);
      _Unwind_Resume(a1);
    }
    v31 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v31);
  }
  __cxa_end_catch();
  JUMPOUT(0x2099728F4);
}

uint64_t SDVoc_GetAllowedWordCollations(unint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ModelMgr *v14;
  uint64_t VocOrThrow;
  uint64_t Colls;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[144];

  SdapiInsurance::SdapiInsurance(v21, "SDVoc_GetAllowedWordCollations", 1, 1, 386);
  if (v21[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v13 = a2;
      else
        v13 = 0;
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, Masked:0x%016llx, %llu)\n", v6, v7, v8, v9, "SDVoc_GetAllowedWordCollations", a1, v13, a3);
    }
    if (!a2 && a3)
      throwBadLengthForNullPointer(a3, "DgnVerifyWritePtr", v7, v8, v9, v10, v11, v12);
    v14 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
    VocOrThrow = ModelMgr::getVocOrThrow(v14, (unsigned __int16)a1, v7, v8, v9, v10, v11, v12);
    Colls = WordList::getColls(*(WordList **)(VocOrThrow + 48));
    v17 = *(unsigned int *)(Colls + 8);
    if (a3)
    {
      v18 = 0;
      do
      {
        if (v17 == v18)
          break;
        v19 = *(unsigned __int16 *)(*(_QWORD *)Colls + 2 * v18);
        if ((unsigned __int16)(v19 + 1) >= 2u)
        {
          if ((_DWORD)v19 == 65534)
            v19 = -2;
        }
        else
        {
          v19 = -1;
        }
        *(_QWORD *)(a2 + 8 * v18++) = v19;
      }
      while (a3 != v18);
    }
  }
  else
  {
    v17 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v21);
  return v17;
}

void sub_209972B44()
{
  __cxa_end_catch();
  JUMPOUT(0x209972B50);
}

void SDVoc_SetAllowedWordCollations(unint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  ModelMgr *v19;
  uint64_t VocOrThrow;
  _WORD *v21;
  uint64_t v22;
  _BYTE v23[144];
  void *v24;

  SdapiInsurance::SdapiInsurance(v23, "SDVoc_SetAllowedWordCollations", 1, 0, 387);
  if (!v23[97])
    goto LABEL_36;
  if (gbShowCalls)
  {
    if (gbShowCallPointerArguments)
      v13 = a2;
    else
      v13 = 0;
    xlprintf("Entering sdapi call %.500s(<SDh %lld>, Masked:0x%016llx, %llu)\n", v6, v7, v8, v9, "SDVoc_SetAllowedWordCollations", a1, v13, a3);
  }
  if (!a2 && a3)
  {
    throwBadLengthForNullPointer(a3, "DgnVerifyReadPtr", v7, v8, v9, v10, v11, v12);
    v21 = 0;
    v22 = 0;
    goto LABEL_11;
  }
  v21 = 0;
  v22 = 0;
  if (a3)
  {
LABEL_11:
    v24 = 0;
    v14 = realloc_array(0, &v24, 2 * a3, 0, 0, 1);
    v15 = 0;
    v21 = v24;
    LODWORD(v22) = a3;
    HIDWORD(v22) = v14 >> 1;
    do
    {
      v16 = *(_QWORD *)(a2 + 8 * v15);
      if (v16 == -1)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 586, (uint64_t)"sdapi/sdvoc", 9, (uint64_t)"%s", v11, v12, (char)&errStr_sdapi_sdvoc_E_SETCOLL_WITH_NONE);
        v16 = *(_QWORD *)(a2 + 8 * v15);
      }
      if (v16 == -1)
      {
        LOWORD(v16) = -1;
      }
      else if (v16 == -2)
      {
        LOWORD(v16) = -2;
      }
      else
      {
        if (HIDWORD(v16))
          v17 = 0;
        else
          v17 = (v16 & 0xFFFF0000) == 0;
        if (!v17)
          throwBadSdapiArgument("SDhColl", v16, v7, v8, v9, v10, v11, v12);
        if ((unsigned __int16)v16 == 0xFFFF || (unsigned __int16)v16 == 0)
          throwBadSdapiArgument("SDhColl", v16, v7, v8, v9, v10, v11, v12);
      }
      v21[v15++] = v16;
    }
    while (a3 != v15);
    goto LABEL_30;
  }
  LODWORD(v22) = 0;
LABEL_30:
  v19 = (ModelMgr *)ModelMgr::smpModelMgr;
  if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
    throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
  if ((unsigned __int16)a1 - 1 >= 0x7B)
    throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
  VocOrThrow = ModelMgr::getVocOrThrow(v19, (unsigned __int16)a1, v7, v8, v9, v10, v11, v12);
  WordList::setColls(*(_QWORD *)(VocOrThrow + 48), (uint64_t)&v21);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
LABEL_36:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v23);
}

void sub_209972DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  ApiState *v18;
  DgnException *v19;
  void *v20;

  if (a2 == 2)
  {
    v18 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v18, v19);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a17);
      _Unwind_Resume(a1);
    }
    v20 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v20);
  }
  __cxa_end_catch();
  JUMPOUT(0x209972DA8);
}

uint64_t SDVoc_GetCollationName(unint64_t a1, unint64_t a2, char *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  ModelMgr *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CollMgr *v23;
  const char *CollationName;
  uint64_t v25;
  _BYTE v27[144];

  SdapiInsurance::SdapiInsurance(v27, "SDVoc_GetCollationName", 1, 1, 389);
  if (v27[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v15 = a3;
      else
        v15 = 0;
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, Masked:0x%016llx, %llu)\n", v8, v9, v10, v11, "SDVoc_GetCollationName", a1, a2, v15, a4);
    }
    if (!a3 && a4)
      throwBadLengthForNullPointer(a4, "DgnVerifyWritePtr", v9, v10, v11, v12, v13, v14);
    v16 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    v23 = *(CollMgr **)(ModelMgr::getVocOrThrow(v16, (unsigned __int16)a1, v9, v10, v11, v12, v13, v14) + 16);
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else if (a2 == -2)
    {
      LOWORD(a2) = -2;
    }
    else
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhColl", a2, v17, v18, v19, v20, v21, v22);
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2)
        throwBadSdapiArgument("SDhColl", a2, v17, v18, v19, v20, v21, v22);
    }
    CollationName = (const char *)CollMgr::getCollationName(v23, (unsigned __int16)a2, v17, v18, v19, v20, v21, v22);
    v25 = sdUtilStrMove(a3, a4, CollationName);
  }
  else
  {
    v25 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v27);
  return v25;
}

void sub_209973038()
{
  __cxa_end_catch();
  JUMPOUT(0x209973044);
}

uint64_t SDVoc_GetColls(unint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  ModelMgr *v14;
  uint64_t VocOrThrow;
  uint64_t ActiveCollations;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t i;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  unsigned int v29[2];
  _BYTE v30[144];
  void *v31;

  SdapiInsurance::SdapiInsurance(v30, "SDVoc_GetColls", 1, 1, 390);
  if (!v30[97])
  {
    v26 = 0;
    goto LABEL_31;
  }
  if (gbShowCalls)
  {
    if (gbShowCallPointerArguments)
      v13 = a2;
    else
      v13 = 0;
    xlprintf("Entering sdapi call %.500s(<SDh %lld>, Masked:0x%016llx, %llu)\n", v6, v7, v8, v9, "SDVoc_GetColls", a1, v13, a3);
  }
  if (!a2 && a3)
    throwBadLengthForNullPointer(a3, "DgnVerifyWritePtr", v7, v8, v9, v10, v11, v12);
  v14 = (ModelMgr *)ModelMgr::smpModelMgr;
  if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
    throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
  if ((unsigned __int16)a1 - 1 >= 0x7B)
    throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
  VocOrThrow = ModelMgr::getVocOrThrow(v14, (unsigned __int16)a1, v7, v8, v9, v10, v11, v12);
  ActiveCollations = CollMgr::getActiveCollations(*(CollMgr **)(VocOrThrow + 16));
  v28 = 0;
  *(_QWORD *)v29 = 0;
  v17 = *(unsigned int *)(ActiveCollations + 8);
  if ((_DWORD)v17)
  {
    v31 = 0;
    v29[1] = realloc_array(0, &v31, 8 * v17, 0, 0, 1) >> 3;
    v18 = v31;
    v28 = v31;
    v19 = *(unsigned int *)(ActiveCollations + 8);
    if ((_DWORD)v19)
    {
      for (i = 0; i < v19; ++i)
      {
        v21 = *(unsigned __int16 *)(*(_QWORD *)ActiveCollations + 2 * i);
        v22 = (unsigned __int16)(v21 + 1);
        if ((_DWORD)v21 == 65534)
          v21 = -2;
        if (v22 >= 2)
          v23 = v21;
        else
          v23 = -1;
        v24 = v29[0];
        if (v29[0] == v29[1])
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v28, 1, 1);
          v24 = v29[0];
          v19 = *(unsigned int *)(ActiveCollations + 8);
        }
        v28[v24] = v23;
        v25 = v24 + 1;
        v29[0] = v24 + 1;
      }
      v18 = v28;
      goto LABEL_29;
    }
  }
  else
  {
    v18 = 0;
  }
  v25 = v29[0];
LABEL_29:
  v26 = sdUtilItemMove(8, v18, v25, a2, a3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v28);
LABEL_31:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v30);
  return v26;
}

void sub_2099732C8()
{
  __cxa_end_catch();
  JUMPOUT(0x2099732D4);
}

void MrecInitModule_wordlm_lm(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;

  if (!gParDebugShowClonedLmIdsOnLoad)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowClonedLmIdsOnLoad", (const char *)&unk_209A7B4F4, (const char *)&unk_209A7B4F4, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowClonedLmIdsOnLoad = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowClonedLmIdsOnLoad);
  }
  if (!gParDebugShowLMInfoOnLoad)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugShowLMInfoOnLoad", (const char *)&unk_209A7B4F4, (const char *)&unk_209A7B4F4, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugShowLMInfoOnLoad = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowLMInfoOnLoad);
  }
  if (!gParDebugShowLMOnLoad)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugShowLMOnLoad", (const char *)&unk_209A7B4F4, (const char *)&unk_209A7B4F4, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugShowLMOnLoad = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowLMOnLoad);
  }
  if (!gParDebugShowWordLMDistributionOnLoad)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugShowWordLMDistributionOnLoad", (const char *)&unk_209A7B4F4, (const char *)&unk_209A7B4F4, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDebugShowWordLMDistributionOnLoad = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowWordLMDistributionOnLoad);
  }
  if (!gParDebugLMScoring)
  {
    v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugLMScoring", (const char *)&unk_209A7B4F4, (const char *)&unk_209A7B4F4, 0, 0, 0);
    *v9 = &unk_24C214CE8;
    gParDebugLMScoring = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugLMScoring);
  }
  if (!gParDebugLMAddDelete)
  {
    v10 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v10, "DebugLMAddDelete", (const char *)&unk_209A7B4F4, (const char *)&unk_209A7B4F4, 0, 0, 0);
    *v11 = &unk_24C214CE8;
    gParDebugLMAddDelete = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugLMAddDelete);
  }
  if (!gParDebugCopyLM)
  {
    v12 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v12, "DebugCopyLM", (const char *)&unk_209A7B4F4, (const char *)&unk_209A7B4F4, 0, 0, 0);
    *v13 = &unk_24C214CE8;
    gParDebugCopyLM = (uint64_t)v13;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugCopyLM);
  }
  if (!gParDebugWordLMBuild)
  {
    v14 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v14, "DebugWordLMBuild", (const char *)&unk_209A7B4F4, (const char *)&unk_209A7B4F4, 0, 0, 0);
    *v15 = &unk_24C214CE8;
    gParDebugWordLMBuild = (uint64_t)v15;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordLMBuild);
  }
  if (!gParDebugWordLMStaticization)
  {
    v16 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v16, "DebugWordLMStaticization", (const char *)&unk_209A7B4F4, (const char *)&unk_209A7B4F4, 0, 0, 0);
    *v17 = &unk_24C214CE8;
    gParDebugWordLMStaticization = (uint64_t)v17;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordLMStaticization);
  }
  if (!gParDebugWordLMBuildShowContextProbs)
  {
    v18 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v18, "DebugWordLMBuildShowContextProbs", (const char *)&unk_209A7B4F4, (const char *)&unk_209A7B4F4, 0, 0, 0);
    *v19 = &unk_24C214CE8;
    gParDebugWordLMBuildShowContextProbs = (uint64_t)v19;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordLMBuildShowContextProbs);
  }
  if (!gParDebugWordLMDynamicLoad)
  {
    v20 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v20, "DebugWordLMDynamicLoad", (const char *)&unk_209A7B4F4, (const char *)&unk_209A7B4F4, 0, 0, 0);
    *v21 = &unk_24C214CE8;
    gParDebugWordLMDynamicLoad = (uint64_t)v21;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordLMDynamicLoad);
  }
}

uint64_t DiskNgramContextBiTriIsolatedCmp::compareElements(DiskNgramContextBiTriIsolatedCmp *this, _QWORD *a2, _QWORD *a3, const void *a4)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t result;
  double v9;
  double v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v4 = a2[1];
  v5 = 0.0;
  v6 = 0.0;
  if (v4)
    v6 = *(float *)a2 / (double)v4;
  v7 = a3[1];
  if (v7)
    v5 = *(float *)a3 / (double)v7;
  if (v6 > v5)
    return 0xFFFFFFFFLL;
  v9 = 0.0;
  v10 = 0.0;
  if (v4)
    v10 = *(float *)a2 / (double)v4;
  if (v7)
    v9 = *(float *)a3 / (double)v7;
  if (v10 < v9)
    return 1;
  v11 = *((unsigned __int8 *)a2 + 34);
  if (v11 == 3)
  {
    result = 1;
    if (*((_BYTE *)a3 + 34) == 2)
      return result;
  }
  else
  {
    if (v11 == 2 && *((_BYTE *)a3 + 34) == 3)
      return 0xFFFFFFFFLL;
    LODWORD(result) = 0;
  }
  v12 = *((_DWORD *)a2 + 6);
  v13 = *((_DWORD *)a3 + 6);
  if (v12 < v13)
    return 0xFFFFFFFFLL;
  if (v12 > v13)
    return 1;
  if ((_DWORD)result)
  {
    v14 = *((_DWORD *)a2 + 7);
    v15 = *((_DWORD *)a3 + 7);
    if (v14 >= v15)
      return v14 > v15;
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t DiskNgramContextBiTriGroupTrigramsCmp::compareElements(DiskNgramContextBiTriGroupTrigramsCmp *this, float *a2, float *a3, const void *a4)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t result;
  double v9;
  double v10;
  int v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  v4 = *((_QWORD *)a2 + 2);
  v5 = 0.0;
  v6 = 0.0;
  if (v4)
    v6 = a2[1] / (double)v4;
  v7 = *((_QWORD *)a3 + 2);
  if (v7)
    v5 = a3[1] / (double)v7;
  if (v6 > v5)
    return 0xFFFFFFFFLL;
  v9 = 0.0;
  v10 = 0.0;
  if (v4)
    v10 = a2[1] / (double)v4;
  if (v7)
    v9 = a3[1] / (double)v7;
  if (v10 < v9)
    return 1;
  v11 = *((unsigned __int8 *)a2 + 34);
  if (v11 == 3)
  {
    result = 1;
    if (*((_BYTE *)a3 + 34) == 2)
      return result;
  }
  else
  {
    if (v11 == 2 && *((_BYTE *)a3 + 34) == 3)
      return 0xFFFFFFFFLL;
    LODWORD(result) = 0;
  }
  v12 = *((_QWORD *)a2 + 1);
  v13 = 0.0;
  v14 = 0.0;
  if (v12)
    v14 = *a2 / (double)v12;
  v15 = *((_QWORD *)a3 + 1);
  if (v15)
    v13 = *a3 / (double)v15;
  if (v14 > v13)
    return 0xFFFFFFFFLL;
  v16 = 0.0;
  v17 = 0.0;
  if (v12)
    v17 = *a2 / (double)v12;
  if (v15)
    v16 = *a3 / (double)v15;
  if (v17 < v16)
    return 1;
  v18 = *((_DWORD *)a2 + 6);
  v19 = *((_DWORD *)a3 + 6);
  if (v18 < v19)
    return 0xFFFFFFFFLL;
  if (v18 > v19)
    return 1;
  if ((_DWORD)result)
  {
    v20 = *((_DWORD *)a2 + 7);
    v21 = *((_DWORD *)a3 + 7);
    if (v20 >= v21)
      return v20 > v21;
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements(DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *this, float *a2, float *a3, const void *a4)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  unsigned int v20;
  unsigned int v21;

  v4 = *((_QWORD *)a2 + 2);
  v5 = 0.0;
  v6 = 0.0;
  if (v4)
    v6 = a2[1] / (double)v4;
  v7 = *((_QWORD *)a3 + 2);
  if (v7)
    v5 = a3[1] / (double)v7;
  if (v6 > v5)
    return 0xFFFFFFFFLL;
  v8 = 0.0;
  v9 = 0.0;
  if (v4)
    v9 = a2[1] / (double)v4;
  if (v7)
    v8 = a3[1] / (double)v7;
  if (v9 < v8)
    return 1;
  v10 = *((_DWORD *)a2 + 6);
  v11 = *((_DWORD *)a3 + 6);
  if (v10 < v11)
    return 0xFFFFFFFFLL;
  if (v10 > v11)
    return 1;
  v13 = *((unsigned __int8 *)a2 + 34);
  if (v13 == 3)
  {
    result = 1;
    if (*((_BYTE *)a3 + 34) == 2)
      return result;
  }
  else
  {
    if (v13 == 2 && *((_BYTE *)a3 + 34) == 3)
      return 0xFFFFFFFFLL;
    LODWORD(result) = 0;
  }
  v14 = *((_QWORD *)a2 + 1);
  v15 = 0.0;
  v16 = 0.0;
  if (v14)
    v16 = *a2 / (double)v14;
  v17 = *((_QWORD *)a3 + 1);
  if (v17)
    v15 = *a3 / (double)v17;
  if (v16 > v15)
    return 0xFFFFFFFFLL;
  v18 = 0.0;
  v19 = 0.0;
  if (v14)
    v19 = *a2 / (double)v14;
  if (v17)
    v18 = *a3 / (double)v17;
  if (v19 < v18)
    return 1;
  if ((_DWORD)result)
  {
    v20 = *((_DWORD *)a2 + 7);
    v21 = *((_DWORD *)a3 + 7);
    if (v20 < v21)
      return 0xFFFFFFFFLL;
    if (v20 > v21)
      return 1;
  }
  return 0;
}

uint64_t DiskNgramContextQuadIsolatedCmp::compareElements(DiskNgramContextQuadIsolatedCmp *this, _QWORD *a2, _QWORD *a3, const void *a4)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  _BOOL4 v16;

  v4 = a2[1];
  v5 = 0.0;
  v6 = 0.0;
  if (v4)
    v6 = *(float *)a2 / (double)v4;
  v7 = a3[1];
  if (v7)
    v5 = *(float *)a3 / (double)v7;
  if (v6 > v5)
    return 0xFFFFFFFFLL;
  v8 = 0.0;
  v9 = 0.0;
  if (v4)
    v9 = *(float *)a2 / (double)v4;
  if (v7)
    v8 = *(float *)a3 / (double)v7;
  if (v9 < v8)
    return 1;
  v10 = *((_DWORD *)a2 + 6);
  v11 = *((_DWORD *)a3 + 6);
  if (v10 < v11)
    return 0xFFFFFFFFLL;
  if (v10 > v11)
    return 1;
  v13 = *((_DWORD *)a2 + 7);
  v14 = *((_DWORD *)a3 + 7);
  v15 = v13 >= v14;
  v16 = v13 > v14;
  if (v15)
    return v16;
  else
    return 0xFFFFFFFFLL;
}

uint64_t DiskNgramContextQuadGroupCmp::compareElements(DiskNgramContextQuadGroupCmp *this, float *a2, float *a3, const void *a4)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  unsigned int v19;
  unsigned int v20;

  v4 = *((_QWORD *)a2 + 2);
  v5 = 0.0;
  v6 = 0.0;
  if (v4)
    v6 = a2[1] / (double)v4;
  v7 = *((_QWORD *)a3 + 2);
  if (v7)
    v5 = a3[1] / (double)v7;
  if (v6 > v5)
    return 0xFFFFFFFFLL;
  v8 = 0.0;
  v9 = 0.0;
  if (v4)
    v9 = a2[1] / (double)v4;
  if (v7)
    v8 = a3[1] / (double)v7;
  if (v9 < v8)
    return 1;
  v10 = *((_DWORD *)a2 + 6);
  v11 = *((_DWORD *)a3 + 6);
  if (v10 < v11)
    return 0xFFFFFFFFLL;
  if (v10 > v11)
    return 1;
  v12 = *((_QWORD *)a2 + 1);
  v13 = 0.0;
  v14 = 0.0;
  if (v12)
    v14 = *a2 / (double)v12;
  v15 = *((_QWORD *)a3 + 1);
  if (v15)
    v13 = *a3 / (double)v15;
  if (v14 > v13)
    return 0xFFFFFFFFLL;
  v16 = 0.0;
  v17 = 0.0;
  if (v12)
    v17 = *a2 / (double)v12;
  if (v15)
    v16 = *a3 / (double)v15;
  if (v17 < v16)
    return 1;
  v19 = *((_DWORD *)a2 + 7);
  v20 = *((_DWORD *)a3 + 7);
  if (v19 >= v20)
    return v19 > v20;
  else
    return 0xFFFFFFFFLL;
}

uint64_t WordIdAndCountCmp::compareElements(WordIdAndCountCmp *this, unsigned int *a2, unsigned int *a3, const void *a4)
{
  unsigned int v4;
  unsigned int v5;
  const char *WordIdWordName;
  const char *v9;

  v4 = a2[1];
  v5 = a3[1];
  if (v4 == v5)
  {
    WordIdWordName = WordLanguageModel::getWordIdWordName(this, *a2);
    v9 = WordLanguageModel::getWordIdWordName(this, *a3);
    return strcmp(WordIdWordName, v9);
  }
  else if (v4 > v5)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
}

const char *WordLanguageModel::getWordIdWordName(WordLanguageModel *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v2 + 388) > a2 && *(_BYTE *)(*(_QWORD *)(v2 + 104) + a2))
    return (const char *)(*(_QWORD *)(v2 + 224) + *(unsigned int *)(*(_QWORD *)(v2 + 200) + 4 * a2));
  if (a2 - 16777212 > 3)
    return "UNKNOWN";
  return off_24C220268[a2 - 16777212];
}

void BigramData::BigramData(BigramData *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  DgnString::DgnString((BigramData *)((char *)this + 24));
  DgnString::DgnString((BigramData *)((char *)this + 40));
  DgnString::DgnString((BigramData *)((char *)this + 56));
  DgnString::DgnString((BigramData *)((char *)this + 72));
  *(_QWORD *)this = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 47) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
}

void sub_209973EA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  BitArray *v2;
  BitArray *v3;
  BitArray *v4;

  BitArray::~BitArray(v4);
  BitArray::~BitArray(v3);
  BitArray::~BitArray(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void BigramData::~BigramData(BigramData *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 368);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 336);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 320);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 288);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 272);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 256);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 176);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88);
  BitArray::~BitArray((BigramData *)((char *)this + 72));
  BitArray::~BitArray((BigramData *)((char *)this + 56));
  BitArray::~BitArray((BigramData *)((char *)this + 40));
  BitArray::~BitArray((BigramData *)((char *)this + 24));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8);
}

void **BigramData::compact(void **this)
{
  BitArray::compact((BitArray *)(this + 3));
  BitArray::compact((BitArray *)(this + 5));
  BitArray::compact((BitArray *)(this + 9));
  BitArray::compact((BitArray *)(this + 7));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 22));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 24));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 26));
  DgnPrimArray<unsigned char>::compact(this + 28);
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 30));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 32));
  DgnPrimArray<unsigned char>::compact(this + 34);
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 36));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 38));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 40));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 42));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 44));
  return DgnPrimArray<unsigned char>::compact(this + 46);
}

uint64_t BigramData::bi1SetEmpty(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  int v3;

  v2 = a2 >> 5;
  *(_DWORD *)(*(_QWORD *)(this + 24) + 4 * v2) &= ~(1 << a2);
  if (*(_DWORD *)this)
  {
    v3 = ~(1 << a2);
    *(_DWORD *)(*(_QWORD *)(this + 40) + 4 * v2) &= v3;
    *(_DWORD *)(*(_QWORD *)(this + 56) + 4 * v2) &= v3;
    if (*(_DWORD *)(this + 96))
      *(_DWORD *)(*(_QWORD *)(this + 72) + 4 * v2) &= v3;
  }
  *(_DWORD *)(*(_QWORD *)(this + 176) + 4 * a2) = -1;
  *(_WORD *)(*(_QWORD *)(this + 192) + 2 * a2) = 0;
  return this;
}

void BigramData::printSize(BigramData *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  int v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  void *v226;
  int v227;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 840, (DgnString *)&v226);
  if (v227)
    v16 = v226;
  else
    v16 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7B4F4, a3, &unk_209A7B4F4, v16);
  DgnString::~DgnString((DgnString *)&v226);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7B4F4);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v27 = v226;
  else
    v27 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A7B4F4, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v32 = v226;
  else
    v32 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A7B4F4, (34 - a3), (34 - a3), v32, 4, 4, 0);
  v225 = a3;
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v33 = 12;
  else
    v33 = 16;
  v34 = *((unsigned int *)this + 4);
  v35 = *((_DWORD *)this + 5);
  if (v35 >= v34)
  {
    v36 = 0;
    if ((int)v34 > 0)
      v33 = (v33 | 2) + 2 * (v34 - 1);
    v37 = v33 + 2 * (v35 - v34);
  }
  else
  {
    v36 = 2 * v34;
    v37 = v33;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v42 = v226;
  else
    v42 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, v21, &unk_209A7B4F4, v22, v22, v42, v37, v33, v36);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v37;
  *a5 += v33;
  *a6 += v36;
  v43 = BitArray::sizeObject((uint64_t)this + 24, 0);
  v44 = BitArray::sizeObject((uint64_t)this + 24, 1);
  v45 = BitArray::sizeObject((uint64_t)this + 24, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v50 = v226;
  else
    v50 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v21, &unk_209A7B4F4, v22, v22, v50, v43, v44, v45);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v43;
  *a5 += v44;
  *a6 += v45;
  v51 = BitArray::sizeObject((uint64_t)this + 40, 0);
  v52 = BitArray::sizeObject((uint64_t)this + 40, 1);
  v53 = BitArray::sizeObject((uint64_t)this + 40, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v58 = v226;
  else
    v58 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v21, &unk_209A7B4F4, v22, v22, v58, v51, v52, v53);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v51;
  *a5 += v52;
  *a6 += v53;
  v59 = BitArray::sizeObject((uint64_t)this + 56, 0);
  v60 = BitArray::sizeObject((uint64_t)this + 56, 1);
  v61 = BitArray::sizeObject((uint64_t)this + 56, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v66 = v226;
  else
    v66 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v21, &unk_209A7B4F4, v22, v22, v66, v59, v60, v61);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v59;
  *a5 += v60;
  *a6 += v61;
  v67 = BitArray::sizeObject((uint64_t)this + 72, 0);
  v68 = BitArray::sizeObject((uint64_t)this + 72, 1);
  v69 = BitArray::sizeObject((uint64_t)this + 72, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v74 = v226;
  else
    v74 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v21, &unk_209A7B4F4, v22, v22, v74, v67, v68, v69);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v67;
  *a5 += v68;
  *a6 += v69;
  v75 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 88, 0);
  v76 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 88, 1);
  v77 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 88, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v82 = v226;
  else
    v82 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A7B4F4, v22, v22, v82, v75, v76, v77);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v75;
  *a5 += v76;
  *a6 += v77;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v83 = 12;
  else
    v83 = 16;
  v84 = *((unsigned int *)this + 46);
  v85 = *((_DWORD *)this + 47);
  if (v85 >= v84)
  {
    v86 = 0;
    if ((int)v84 > 0)
      v83 += 4 * (v84 - 1) + 4;
    v87 = v83 + 4 * (v85 - v84);
  }
  else
  {
    v86 = 4 * v84;
    v87 = v83;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v92 = v226;
  else
    v92 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A7B4F4, v22, v22, v92, v87, v83, v86);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v87;
  *a5 += v83;
  *a6 += v86;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v93 = 12;
  else
    v93 = 16;
  v94 = *((unsigned int *)this + 50);
  v95 = *((_DWORD *)this + 51);
  if (v95 >= v94)
  {
    v96 = 0;
    if ((int)v94 > 0)
      v93 = (v93 | 2) + 2 * (v94 - 1);
    v97 = v93 + 2 * (v95 - v94);
  }
  else
  {
    v96 = 2 * v94;
    v97 = v93;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v102 = v226;
  else
    v102 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v21, &unk_209A7B4F4, v22, v22, v102, v97, v93, v96);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v97;
  *a5 += v93;
  *a6 += v96;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v103 = 12;
  else
    v103 = 16;
  v104 = *((unsigned int *)this + 54);
  v105 = *((_DWORD *)this + 55);
  if (v105 >= v104)
  {
    v106 = 0;
    if ((int)v104 > 0)
      v103 = (v103 | 2) + 2 * (v104 - 1);
    v107 = v103 + 2 * (v105 - v104);
  }
  else
  {
    v106 = 2 * v104;
    v107 = v103;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v112 = v226;
  else
    v112 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v108, v109, v110, v111, v21, &unk_209A7B4F4, v22, v22, v112, v107, v103, v106);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v107;
  *a5 += v103;
  *a6 += v106;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v113 = 12;
  else
    v113 = 16;
  v114 = *((_DWORD *)this + 58);
  v115 = *((_DWORD *)this + 59);
  v116 = v115 >= v114;
  v117 = v115 - v114;
  if (v116)
  {
    v119 = v114 & ~(v114 >> 31);
    v114 = 0;
    v118 = v113 + v119;
    v113 += v119 + v117;
  }
  else
  {
    v118 = v113;
  }
  v120 = v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v125 = v226;
  else
    v125 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v121, v122, v123, v124, v21, &unk_209A7B4F4, v22, v22, v125, v113, v118, v120);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v113;
  *a5 += v118;
  *a6 += v120;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v126 = 12;
  else
    v126 = 16;
  v127 = *((unsigned int *)this + 62);
  v128 = *((_DWORD *)this + 63);
  if (v128 >= v127)
  {
    v129 = 0;
    if ((int)v127 > 0)
      v126 = (v126 | 2) + 2 * (v127 - 1);
    v130 = v126 + 2 * (v128 - v127);
  }
  else
  {
    v129 = 2 * v127;
    v130 = v126;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v135 = v226;
  else
    v135 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v131, v132, v133, v134, v21, &unk_209A7B4F4, v22, v22, v135, v130, v126, v129);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v130;
  *a5 += v126;
  *a6 += v129;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v136 = 12;
  else
    v136 = 16;
  v137 = *((unsigned int *)this + 66);
  v138 = *((_DWORD *)this + 67);
  if (v138 >= v137)
  {
    v139 = 0;
    if ((int)v137 > 0)
      v136 = (v136 | 2) + 2 * (v137 - 1);
    v140 = v136 + 2 * (v138 - v137);
  }
  else
  {
    v139 = 2 * v137;
    v140 = v136;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v145 = v226;
  else
    v145 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v141, v142, v143, v144, v21, &unk_209A7B4F4, v22, v22, v145, v140, v136, v139);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v140;
  *a5 += v136;
  *a6 += v139;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v146 = 12;
  else
    v146 = 16;
  v147 = *((_DWORD *)this + 70);
  v148 = *((_DWORD *)this + 71);
  v116 = v148 >= v147;
  v149 = v148 - v147;
  if (v116)
  {
    v151 = v147 & ~(v147 >> 31);
    v147 = 0;
    v150 = v146 + v151;
    v146 += v151 + v149;
  }
  else
  {
    v150 = v146;
  }
  v152 = v147;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v157 = v226;
  else
    v157 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v153, v154, v155, v156, v21, &unk_209A7B4F4, v22, v22, v157, v146, v150, v152);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v146;
  *a5 += v150;
  *a6 += v152;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v158 = 12;
  else
    v158 = 16;
  v159 = *((unsigned int *)this + 74);
  v160 = *((_DWORD *)this + 75);
  if (v160 >= v159)
  {
    v161 = 0;
    if ((int)v159 > 0)
      v158 += 4 * (v159 - 1) + 4;
    v162 = v158 + 4 * (v160 - v159);
  }
  else
  {
    v161 = 4 * v159;
    v162 = v158;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v167 = v226;
  else
    v167 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v163, v164, v165, v166, v21, &unk_209A7B4F4, v22, v22, v167, v162, v158, v161);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v162;
  *a5 += v158;
  *a6 += v161;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v168 = 12;
  else
    v168 = 16;
  v169 = *((unsigned int *)this + 78);
  v170 = *((_DWORD *)this + 79);
  if (v170 >= v169)
  {
    v171 = 0;
    if ((int)v169 > 0)
      v168 += 4 * (v169 - 1) + 4;
    v172 = v168 + 4 * (v170 - v169);
  }
  else
  {
    v171 = 4 * v169;
    v172 = v168;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v177 = v226;
  else
    v177 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v173, v174, v175, v176, v21, &unk_209A7B4F4, v22, v22, v177, v172, v168, v171);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v172;
  *a5 += v168;
  *a6 += v171;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v178 = 12;
  else
    v178 = 16;
  v179 = *((unsigned int *)this + 82);
  v180 = *((_DWORD *)this + 83);
  if (v180 >= v179)
  {
    v181 = 0;
    if ((int)v179 > 0)
      v178 += 4 * (v179 - 1) + 4;
    v182 = v178 + 4 * (v180 - v179);
  }
  else
  {
    v181 = 4 * v179;
    v182 = v178;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v187 = v226;
  else
    v187 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v183, v184, v185, v186, v21, &unk_209A7B4F4, v22, v22, v187, v182, v178, v181);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v182;
  *a5 += v178;
  *a6 += v181;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v188 = 12;
  else
    v188 = 16;
  v189 = *((unsigned int *)this + 86);
  v190 = *((_DWORD *)this + 87);
  if (v190 >= v189)
  {
    v191 = 0;
    if ((int)v189 > 0)
      v188 = (v188 | 2) + 2 * (v189 - 1);
    v192 = v188 + 2 * (v190 - v189);
  }
  else
  {
    v191 = 2 * v189;
    v192 = v188;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v197 = v226;
  else
    v197 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v193, v194, v195, v196, v21, &unk_209A7B4F4, v22, v22, v197, v192, v188, v191);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v192;
  *a5 += v188;
  *a6 += v191;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v198 = 12;
  else
    v198 = 16;
  v199 = *((unsigned int *)this + 90);
  v200 = *((_DWORD *)this + 91);
  if (v200 >= v199)
  {
    v201 = 0;
    if ((int)v199 > 0)
      v198 = (v198 | 2) + 2 * (v199 - 1);
    v202 = v198 + 2 * (v200 - v199);
  }
  else
  {
    v201 = 2 * v199;
    v202 = v198;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v207 = v226;
  else
    v207 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v203, v204, v205, v206, v21, &unk_209A7B4F4, v22, v22, v207, v202, v198, v201);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v202;
  *a5 += v198;
  *a6 += v201;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v208 = 12;
  else
    v208 = 16;
  v209 = *((_DWORD *)this + 94);
  v210 = *((_DWORD *)this + 95);
  v116 = v210 >= v209;
  v211 = v210 - v209;
  if (v116)
  {
    v213 = v209 & ~(v209 >> 31);
    v209 = 0;
    v212 = v208 + v213;
    v208 += v213 + v211;
  }
  else
  {
    v212 = v208;
  }
  v214 = v209;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227)
    v219 = v226;
  else
    v219 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v215, v216, v217, v218, v21, &unk_209A7B4F4, v22, v22, v219, v208, v212, v214);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v208;
  *a5 += v212;
  *a6 += v214;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 845, (DgnString *)&v226);
  if (v227)
    v224 = v226;
  else
    v224 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v225, &unk_209A7B4F4, (35 - v225), (35 - v225), v224, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v226);
}

void sub_209975060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void **BigramData::copyBigramData(int **this, const BigramData *a2)
{
  char *v4;

  *this = *(int **)a2;
  v4 = (char *)(this + 30);
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)(this + 1), (uint64_t *)a2 + 1, 0, *((_DWORD *)a2 + 4));
  BitArray::operator=(this + 3, (uint64_t)a2 + 24);
  BitArray::operator=(this + 5, (uint64_t)a2 + 40);
  BitArray::operator=(this + 7, (uint64_t)a2 + 56);
  BitArray::operator=(this + 9, (uint64_t)a2 + 72);
  HuffmanDecoder<unsigned short,unsigned int>::operator=((unint64_t)(this + 11), (uint64_t)a2 + 88);
  DgnPrimArray<int>::copyArraySlice((unint64_t)(this + 22), (uint64_t *)a2 + 22, 0, *((_DWORD *)a2 + 46));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)(this + 24), (uint64_t *)a2 + 24, 0, *((_DWORD *)a2 + 50));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)(this + 26), (uint64_t *)a2 + 26, 0, *((_DWORD *)a2 + 54));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)(this + 28), (_QWORD *)a2 + 28, 0, *((_DWORD *)a2 + 58));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v4, (uint64_t *)a2 + 30, 0, *((_DWORD *)a2 + 62));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)(this + 32), (uint64_t *)a2 + 32, 0, *((_DWORD *)a2 + 66));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)(this + 34), (_QWORD *)a2 + 34, 0, *((_DWORD *)a2 + 70));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(this + 36), (uint64_t *)a2 + 36, 0, *((_DWORD *)a2 + 74));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(this + 38), (uint64_t *)a2 + 38, 0, *((_DWORD *)a2 + 78));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(this + 40), (uint64_t *)a2 + 40, 0, *((_DWORD *)a2 + 82));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)(this + 42), (uint64_t *)a2 + 42, 0, *((_DWORD *)a2 + 86));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)(this + 44), (uint64_t *)a2 + 44, 0, *((_DWORD *)a2 + 90));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)(this + 46), (_QWORD *)a2 + 46, 0, *((_DWORD *)a2 + 94));
  return BigramData::compact((void **)this);
}

unint64_t HuffmanDecoder<unsigned short,unsigned int>::operator=(unint64_t a1, uint64_t a2)
{
  DgnPrimArray<int>::copyArraySlice(a1, (uint64_t *)a2, 0, *(_DWORD *)(a2 + 8));
  DgnPrimArray<unsigned char>::copyArraySlice(a1 + 16, (_QWORD *)(a2 + 16), 0, *(_DWORD *)(a2 + 24));
  DgnPrimArray<int>::copyArraySlice(a1 + 32, (uint64_t *)(a2 + 32), 0, *(_DWORD *)(a2 + 40));
  DgnPrimArray<unsigned short>::copyArraySlice(a1 + 48, (uint64_t *)(a2 + 48), 0, *(_DWORD *)(a2 + 56));
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  DgnPrimArray<int>::copyArraySlice(a1 + 72, (uint64_t *)(a2 + 72), 0, *(_DWORD *)(a2 + 80));
  return a1;
}

uint64_t BigramData::saveBinary(BigramData *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (int *)this, a3);
  writeObject((uint64_t)a2, (int *)this + 1, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 8, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 24, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 40, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 56, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 72, a3);
  HuffmanDecoder<unsigned short,unsigned int>::writeObject((uint64_t)this + 88, (uint64_t)a2, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 176, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 192, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 208, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 224, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 240, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 256, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 272, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 288, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 304, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 320, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 336, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 352, a3);
  return writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 368, a3);
}

void BigramData::loadBinary(BigramData *this, DgnStream *a2, unsigned int *a3)
{
  readObject((uint64_t)a2, this, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 1, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 8, a3);
  readObject(a2, (BigramData *)((char *)this + 24), a3);
  readObject(a2, (BigramData *)((char *)this + 40), a3);
  readObject(a2, (BigramData *)((char *)this + 56), a3);
  readObject(a2, (BigramData *)((char *)this + 72), a3);
  HuffmanDecoder<unsigned short,unsigned int>::readObject((unint64_t)this + 88, a2, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 176, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 192, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 208, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 224, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 240, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 256, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 272, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 288, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 304, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 320, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 336, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 352, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 368, a3);
}

char *BigramData::saveBinaryShared(BigramData *this, DgnSharedMemStream *a2, int a3, unsigned int *a4)
{
  if (a3)
  {
    writeObject((uint64_t)a2, (int *)this, a4);
    writeObject((uint64_t)a2, (int *)this + 1, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 8, a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 24), a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 40), a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 56), a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 72), a4);
    HuffmanDecoder<unsigned short,unsigned int>::writeObject((uint64_t)this + 88, (uint64_t)a2, a4);
  }
  else
  {
    writeSharedObject<short>(a2, (uint64_t)this + 8, a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 24), a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 40), a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 56), a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 72), a4);
  }
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 176, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 192, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 208, a4);
  writeSharedObject<unsigned char>(a2, (uint64_t)this + 224, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 240, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 256, a4);
  writeSharedObject<unsigned char>(a2, (uint64_t)this + 272, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 288, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 304, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 320, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 336, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 352, a4);
  return writeSharedObject<unsigned char>(a2, (uint64_t)this + 368, a4);
}

int *BigramData::loadBinaryShared(BigramData *this, DgnSharedMemStream *a2, int a3, unsigned int *a4)
{
  if (a3)
  {
    readObject((uint64_t)a2, this, a4);
    readObject((uint64_t)a2, (_DWORD *)this + 1, a4);
    readSharedObject<short>(a2, (uint64_t)this + 8, a4);
    readSharedObject(a2, (BigramData *)((char *)this + 24), a4);
    readSharedObject(a2, (BigramData *)((char *)this + 40), a4);
    readSharedObject(a2, (BigramData *)((char *)this + 56), a4);
    readSharedObject(a2, (BigramData *)((char *)this + 72), a4);
    HuffmanDecoder<unsigned short,unsigned int>::readObject((unint64_t)this + 88, a2, a4);
  }
  else
  {
    readSharedObject<short>(a2, (uint64_t)this + 8, a4);
    readSharedObject(a2, (BigramData *)((char *)this + 24), a4);
    readSharedObject(a2, (BigramData *)((char *)this + 40), a4);
    readSharedObject(a2, (BigramData *)((char *)this + 56), a4);
    readSharedObject(a2, (BigramData *)((char *)this + 72), a4);
  }
  readSharedObject<unsigned int>(a2, (uint64_t)this + 176, a4);
  readSharedObject<short>(a2, (uint64_t)this + 192, a4);
  readSharedObject<short>(a2, (uint64_t)this + 208, a4);
  readSharedObject<unsigned char>(a2, (uint64_t)this + 224, a4);
  readSharedObject<short>(a2, (uint64_t)this + 240, a4);
  readSharedObject<short>(a2, (uint64_t)this + 256, a4);
  readSharedObject<unsigned char>(a2, (uint64_t)this + 272, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 288, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 304, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 320, a4);
  readSharedObject<short>(a2, (uint64_t)this + 336, a4);
  readSharedObject<short>(a2, (uint64_t)this + 352, a4);
  return readSharedObject<unsigned char>(a2, (uint64_t)this + 368, a4);
}

uint64_t BigramData::computeLocalPreloadableBytes(BigramData *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *((unsigned int *)this + 50);
  if (v1 >= 2)
  {
    v3 = 0;
    v4 = 1;
    while (1)
    {
      v5 = *(unsigned __int16 *)(*((_QWORD *)this + 24) + 2 * v4);
      if (((*(_DWORD *)(*((_QWORD *)this + 3) + 4 * (v4 >> 5)) >> v4) & 1) != 0)
      {
        v6 = *((_DWORD *)this + 4);
        if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * v4))
        {
          v7 = 0;
          v8 = *(_DWORD *)(*((_QWORD *)this + 22) + 4 * v4);
          v9 = v5 << (v6 == 0);
          if ((unsigned __int16)(v5 + 1) <= 2u)
            v10 = 2;
          else
            v10 = (unsigned __int16)(v5 + 1);
          v11 = v10 - 1;
          do
          {
            if (v6)
              v12 = (_WORD *)(*((_QWORD *)this + 1) + 2 * *(unsigned __int8 *)(*((_QWORD *)this + 28) + v8));
            else
              v12 = (_WORD *)(*((_QWORD *)this + 26) + 2 * v8);
            if (*v12 != 20000)
              ++v7;
            ++v8;
            --v11;
          }
          while (v11);
LABEL_24:
          if (v7 <= 1)
            v15 = 0;
          else
            v15 = v9;
          goto LABEL_28;
        }
      }
      else if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * v4))
      {
        v13 = 0;
        v9 = 0;
        v7 = 0;
        do
        {
          if (BigramData::getSearchScoreForIndex(this, v4, v13) != 20000)
          {
            if (*((_DWORD *)this + 4))
              v14 = 3;
            else
              v14 = 4;
            v9 += v14;
            ++v7;
          }
          ++v13;
        }
        while ((_DWORD)v5 != v13);
        goto LABEL_24;
      }
      v15 = 0;
LABEL_28:
      v3 += v15;
      if (++v4 == v1)
        return v3;
    }
  }
  return 0;
}

uint64_t BigramData::getSearchScoreForIndex(BigramData *this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * a2);
  if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * a2) != 1)
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*((_QWORD *)this + 5) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      v3 = (*(_DWORD *)(*((_QWORD *)this + 40) + 4 * v3) + a3);
      if (!*((_DWORD *)this + 4))
      {
        v5 = *((_QWORD *)this + 44);
        goto LABEL_12;
      }
      v4 = *((_QWORD *)this + 46);
    }
    else
    {
      v3 = (v3 + a3);
      if (!*((_DWORD *)this + 4))
      {
        v5 = *((_QWORD *)this + 32);
        goto LABEL_12;
      }
      v4 = *((_QWORD *)this + 34);
    }
    v3 = *(unsigned __int8 *)(v4 + v3);
LABEL_11:
    v5 = *((_QWORD *)this + 1);
LABEL_12:
    LOWORD(v3) = *(_WORD *)(v5 + 2 * v3);
    return (unsigned __int16)v3;
  }
  if (*((_DWORD *)this + 4))
  {
    v3 = *(_DWORD *)(*((_QWORD *)this + 22) + 4 * a2);
    goto LABEL_11;
  }
  return (unsigned __int16)v3;
}

uint64_t BigramData::initNewBigramData(uint64_t a1, BigramData *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int16 v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  int v30;
  int v31;
  __int16 SearchSuccIdForIndex;
  int SearchScoreForIndex;
  __int16 v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  char SearchQuantizedScoreForIndex;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int v45[2];
  _QWORD *v46;
  BigramData *v48;
  _OWORD v49[5];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v9 = *(unsigned int *)(a1 + 200);
  BigramData::configureBigramData(a2, 1, *(_DWORD *)(a1 + 16), *(const unsigned __int16 **)(a1 + 8));
  BigramData::preAllocateStaticBigramData(a2, v9);
  v10 = 232;
  if (!*(_DWORD *)(a1 + 4))
    v10 = 216;
  BigramData::preAllocateDynamicBigramData((uint64_t)a2, *(_DWORD *)(a1 + 248), *(_DWORD *)(a1 + v10));
  v55 = 0;
  v56 = 0;
  v53 = 0;
  v54 = 0;
  v51 = 0;
  v52 = 0;
  *(_QWORD *)v45 = a4;
  v11 = *(_DWORD *)(a4 + 12);
  if (v9 > v11)
    DgnArray<DiskNgramContext>::reallocElts(a4, v9 - v11, 0);
  v12 = *(_DWORD *)(a5 + 12);
  v46 = (_QWORD *)a5;
  v48 = a2;
  if (v9 <= v12)
  {
    *(_DWORD *)(a5 + 8) = v9;
    if (!(_DWORD)v9)
      goto LABEL_55;
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts(a5, v9 - v12, 0);
    *(_DWORD *)(a5 + 8) = v9;
  }
  v13 = 0;
  do
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v13++) = 0;
  while (v9 != v13);
  if (v9 >= 2)
  {
    for (i = 1; i != v9; ++i)
    {
      LODWORD(v56) = 0;
      LODWORD(v54) = 0;
      LODWORD(v52) = 0;
      v15 = i >> 5;
      v16 = 1 << i;
      v17 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 192) + 2 * i);
      if ((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v15) & (1 << i)) != 0)
      {
        v18 = v17 << (*(_DWORD *)(a1 + 16) == 0);
        if (*(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * i))
        {
          v19 = 1;
          do
          {
            v20 = *(_DWORD *)(a1 + 16);
            v21 = v19 - 1;
            v22 = (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * i) + v21);
            if (v20)
            {
              v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 224) + v22);
              v23 = *(_QWORD *)(a1 + 8);
            }
            else
            {
              v23 = *(_QWORD *)(a1 + 208);
            }
            v24 = *(unsigned __int16 *)(v23 + 2 * v22);
            if (v24 != 20000)
            {
              v25 = v56;
              if ((_DWORD)v56 == HIDWORD(v56))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v55, 1, 1);
                v25 = v56;
                v20 = *(_DWORD *)(a1 + 16);
              }
              *(_WORD *)(v55 + 2 * v25) = v19;
              LODWORD(v56) = v25 + 1;
              if (v20)
              {
                v26 = *(_BYTE *)(*(_QWORD *)(a1 + 224) + (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * i) + v21));
                v27 = v52;
                if (v52 == (unint64_t)HIDWORD(v52))
                {
                  DgnPrimArray<char>::reallocElts((uint64_t)&v51, 1, 1);
                  v27 = v52;
                }
                *(_BYTE *)(v51 + v27) = v26;
                v28 = v52;
                v29 = &v52;
              }
              else
              {
                v28 = v54;
                if ((_DWORD)v54 == HIDWORD(v54))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)&v53, 1, 1);
                  v28 = v54;
                }
                v53[v28] = v24;
                v29 = &v54;
              }
              *(_DWORD *)v29 = v28 + 1;
            }
            ++v19;
          }
          while (v17 >= v19);
        }
        v30 = 0;
      }
      else if (*(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * i))
      {
        v31 = 0;
        v18 = 0;
        v30 = 0;
        do
        {
          SearchSuccIdForIndex = BigramData::getSearchSuccIdForIndex((BigramData *)a1, i, v31);
          SearchScoreForIndex = BigramData::getSearchScoreForIndex((BigramData *)a1, i, v31);
          v34 = SearchScoreForIndex;
          if (SearchScoreForIndex != 20000)
          {
            v35 = *(_DWORD *)(a1 + 16);
            if (v35)
              v36 = 3;
            else
              v36 = 4;
            v37 = v56;
            if ((_DWORD)v56 == HIDWORD(v56))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)&v55, 1, 1);
              v37 = v56;
              v35 = *(_DWORD *)(a1 + 16);
            }
            *(_WORD *)(v55 + 2 * v37) = SearchSuccIdForIndex;
            LODWORD(v56) = v37 + 1;
            if (v35)
            {
              SearchQuantizedScoreForIndex = BigramData::getSearchQuantizedScoreForIndex((BigramData *)a1, i, v31);
              v39 = v52;
              if (v52 == (unint64_t)HIDWORD(v52))
              {
                DgnPrimArray<char>::reallocElts((uint64_t)&v51, 1, 1);
                v39 = v52;
              }
              *(_BYTE *)(v51 + v39) = SearchQuantizedScoreForIndex;
              v40 = v52;
              v41 = &v52;
            }
            else
            {
              v40 = v54;
              if ((_DWORD)v54 == HIDWORD(v54))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v53, 1, 1);
                v40 = v54;
              }
              v53[v40] = v34;
              v41 = &v54;
            }
            ++v30;
            v18 += v36;
            *(_DWORD *)v41 = v40 + 1;
          }
          ++v31;
        }
        while ((_DWORD)v17 != v31);
        LODWORD(v17) = 0;
        v15 = i >> 5;
        v16 = 1 << i;
      }
      else
      {
        v30 = 0;
        v18 = 0;
      }
      if ((_DWORD)v56)
      {
        if ((_DWORD)v56 == 1)
        {
          BigramData::fillBigramRecord(v48, i, (uint64_t)&v55, &v53, &v51);
        }
        else
        {
          BigramData::allocBi1(v48, i);
          *(_DWORD *)(*((_QWORD *)v48 + 5) + 4 * v15) |= v16;
          *(_WORD *)(*((_QWORD *)v48 + 24) + 2 * i) = v56;
          HuffmanEncoder<unsigned short,unsigned int>::addSuccessors(a3, (uint64_t)&v55);
          v42 = **(_QWORD **)v45 + 56 * *(unsigned int *)(*(_QWORD *)v45 + 8);
          *(_QWORD *)v42 = 0;
          *(_QWORD *)(v42 + 8) = 0;
          *(_QWORD *)(v42 + 16) = 0;
          *(_QWORD *)(v42 + 24) = -1;
          strcpy((char *)(v42 + 32), " N");
          LODWORD(v42) = *(_DWORD *)(*(_QWORD *)v45 + 8);
          *(_DWORD *)(*(_QWORD *)v45 + 8) = v42 + 1;
          v43 = **(_QWORD **)v45 + 56 * v42;
          *(_BYTE *)(v43 + 34) = 2;
          *(_DWORD *)(v43 + 24) = i;
          *(_DWORD *)(v43 + 36) = i;
          *(_DWORD *)(v43 + 40) = v30;
          *(_DWORD *)(v43 + 44) = v17;
          *(int64x2_t *)(v43 + 8) = vdupq_n_s64(v18);
          *(_QWORD *)(*v46 + 8 * i) = **(_QWORD **)v45 + 56 * (*(_DWORD *)(*(_QWORD *)v45 + 8) - 1);
        }
      }
    }
  }
LABEL_55:
  if (!*(_DWORD *)(a3 + 128))
    HuffmanEncoder<unsigned short,unsigned int>::addValue(a3, 0);
  v50 = 0;
  memset(v49, 0, sizeof(v49));
  HuffmanEncoder<unsigned short,unsigned int>::finalizeTables(a3, (unint64_t)v49);
  HuffmanDecoder<unsigned short,unsigned int>::operator=((unint64_t)v48 + 88, (uint64_t)v49);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)v49);
  BigramData::compact((void **)v48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v51);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v53);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v55);
}

void sub_209976078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v11 - 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v11 - 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v11 - 104);
  _Unwind_Resume(a1);
}

_DWORD *BigramData::configureBigramData(_DWORD *this, int a2, unsigned int a3, const unsigned __int16 *a4)
{
  _DWORD *v6;
  _WORD **v7;
  unsigned int v8;
  _WORD *v9;
  uint64_t v10;
  __int16 v11;

  v6 = this;
  *this = a2;
  this[1] = a3 != 0;
  v7 = (_WORD **)(this + 2);
  v8 = this[5];
  if (a3 <= v8)
  {
    this[4] = a3;
    if (!a3)
      return this;
  }
  else
  {
    this = (_DWORD *)DgnPrimArray<short>::reallocElts((uint64_t)(this + 2), a3 - v8, 0);
    v6[4] = a3;
  }
  v9 = *v7;
  v10 = a3;
  do
  {
    v11 = *a4++;
    *v9++ = v11;
    --v10;
  }
  while (v10);
  return this;
}

void BigramData::preAllocateStaticBigramData(BigramData *this, unsigned int a2)
{
  unsigned int v4;
  unsigned int v5;

  BitArray::preAllocate((BigramData *)((char *)this + 24), a2);
  if (*(_DWORD *)this)
  {
    BitArray::preAllocate((BigramData *)((char *)this + 40), a2);
    BitArray::preAllocate((BigramData *)((char *)this + 56), a2);
    BitArray::preAllocate((BigramData *)((char *)this + 72), a2);
  }
  v4 = *((_DWORD *)this + 47);
  if (a2 > v4)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 176, a2 - v4, 0);
  v5 = *((_DWORD *)this + 51);
  if (a2 > v5)
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, a2 - v5, 0);
}

uint64_t BigramData::preAllocateDynamicBigramData(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;

  v5 = this;
  v6 = *(_DWORD *)(this + 252);
  v7 = a2 >= v6;
  v8 = a2 - v6;
  if ((_DWORD)v8 != 0 && v7)
    this = DgnPrimArray<short>::reallocElts(this + 240, v8, 0);
  if (*(_DWORD *)(v5 + 4))
  {
    if (*(_DWORD *)(v5 + 284) < a2)
    {
      v11 = 0;
      this = realloc_array(*(_QWORD **)(v5 + 272), &v11, a2, *(unsigned int *)(v5 + 280), *(unsigned int *)(v5 + 280), 1);
      *(_DWORD *)(v5 + 284) = this;
      *(_QWORD *)(v5 + 272) = v11;
    }
    if (*(_DWORD *)(v5 + 236) < a3)
    {
      v11 = 0;
      this = realloc_array(*(_QWORD **)(v5 + 224), &v11, a3, *(unsigned int *)(v5 + 232), *(unsigned int *)(v5 + 232), 1);
      *(_DWORD *)(v5 + 236) = this;
      *(_QWORD *)(v5 + 224) = v11;
    }
  }
  else
  {
    v9 = *(_DWORD *)(v5 + 268);
    if (a2 > v9)
      this = DgnPrimArray<short>::reallocElts(v5 + 256, a2 - v9, 0);
    v10 = *(_DWORD *)(v5 + 220);
    if (a3 > v10)
      return DgnPrimArray<short>::reallocElts(v5 + 208, a3 - v10, 0);
  }
  return this;
}

unint64_t DgnPrimArray<unsigned short>::add(unint64_t result, __int16 a2)
{
  unint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 == *(_DWORD *)(result + 12))
  {
    result = DgnPrimArray<short>::reallocElts(result, 1, 1);
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_WORD *)(*(_QWORD *)v3 + 2 * v4) = a2;
  *(_DWORD *)(v3 + 8) = v4 + 1;
  return result;
}

unint64_t DgnPrimArray<unsigned char>::add(unint64_t result, char a2)
{
  unint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 == *(_DWORD *)(result + 12))
  {
    result = DgnPrimArray<char>::reallocElts(result, 1, 1);
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_BYTE *)(*(_QWORD *)v3 + v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t BigramData::getSearchSuccIdForIndex(BigramData *this, unsigned int a2, int a3)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;

  v3 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * a2);
  if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * a2) == 1)
    return WORD1(v3);
  if (*(_DWORD *)this && ((*(_DWORD *)(*((_QWORD *)this + 5) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    v5 = *(_DWORD *)(*((_QWORD *)this + 40) + 4 * v3) + a3;
    v6 = *((_QWORD *)this + 42);
  }
  else
  {
    v5 = v3 + a3;
    v6 = *((_QWORD *)this + 30);
  }
  return *(unsigned __int16 *)(v6 + 2 * v5);
}

uint64_t BigramData::getSearchQuantizedScoreForIndex(BigramData *this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * a2);
  if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * a2) != 1)
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*((_QWORD *)this + 5) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      LODWORD(v3) = *(_DWORD *)(*((_QWORD *)this + 40) + 4 * v3) + a3;
      v4 = *((_QWORD *)this + 46);
    }
    else
    {
      LODWORD(v3) = v3 + a3;
      v4 = *((_QWORD *)this + 34);
    }
    LOBYTE(v3) = *(_BYTE *)(v4 + v3);
  }
  return v3;
}

void BigramData::fillBigramRecord(BigramData *a1, unsigned int a2, uint64_t a3, _WORD **a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;

  v10 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v10 == 1)
    goto LABEL_5;
  v11 = 3;
  if (!*((_DWORD *)a1 + 4))
    v11 = 4;
  if (v11 * v10 < (unint64_t)(*(unsigned __int16 *)(*(_QWORD *)a3 + 2 * (v10 - 1)) << (*((_DWORD *)a1 + 4) == 0)))
  {
LABEL_5:
    BigramData::allocSearch(a1, a2, (unsigned __int16)*(_DWORD *)(a3 + 8));
    v12 = *(_DWORD *)(a3 + 8);
    if (*((_DWORD *)a1 + 4))
    {
      if (v12)
      {
        v13 = 0;
        do
        {
          BigramData::setSearchSuccIdForIndex((uint64_t)a1, a2, v13, *(_WORD *)(*(_QWORD *)a3 + 2 * v13));
          BigramData::setSearchQuantizedScoreForIndex((uint64_t)a1, a2, v13, *(unsigned __int8 *)(*a5 + v13));
          ++v13;
        }
        while (v13 < *(unsigned int *)(a3 + 8));
      }
    }
    else if (v12)
    {
      v14 = 0;
      do
      {
        BigramData::setSearchSuccIdForIndex((uint64_t)a1, a2, v14, *(_WORD *)(*(_QWORD *)a3 + 2 * v14));
        BigramData::setSearchScoreForIndex((uint64_t)a1, a2, v14, (unsigned __int16)(*a4)[v14]);
        ++v14;
      }
      while (v14 < *(unsigned int *)(a3 + 8));
    }
  }
  else
  {
    BigramData::fillBigramRecordLookup((uint64_t)a1, a2, (unsigned __int16 **)a3, a4, a5);
  }
}

void BigramData::allocBi1(BigramData *this, unsigned int a2)
{
  char *v4;
  char *v5;
  BitArray *v6;
  BitArray *v7;
  BitArray *v8;
  BitArray *v9;
  uint64_t v10;
  unsigned int v11;

  if (*((_DWORD *)this + 50) <= a2)
  {
    v4 = (char *)this + 192;
    v5 = (char *)this + 176;
    v6 = (BigramData *)((char *)this + 24);
    v7 = (BigramData *)((char *)this + 40);
    v8 = (BigramData *)((char *)this + 56);
    v9 = (BigramData *)((char *)this + 72);
    do
    {
      v10 = *((unsigned int *)this + 46);
      if (v10 == *((_DWORD *)this + 47))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)v5, 1, 1);
        v10 = *((unsigned int *)this + 46);
      }
      *(_DWORD *)(*((_QWORD *)this + 22) + 4 * v10) = -1;
      ++*((_DWORD *)this + 46);
      v11 = *((_DWORD *)this + 50);
      if (v11 == *((_DWORD *)this + 51))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)v4, 1, 1);
        v11 = *((_DWORD *)this + 50);
      }
      *(_WORD *)(*((_QWORD *)this + 24) + 2 * v11) = 0;
      *((_DWORD *)this + 50) = v11 + 1;
      BitArray::add(v6, 0);
      if (*(_DWORD *)this)
      {
        BitArray::add(v7, 0);
        BitArray::add(v8, 0);
        BitArray::add(v9, 0);
      }
    }
    while (*((_DWORD *)this + 50) <= a2);
  }
}

uint64_t **HuffmanEncoder<unsigned short,unsigned int>::addSuccessors(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t **result;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;

  v4 = *(unsigned int *)(a2 + 8);
  v5 = **(_WORD **)a2;
  result = HuffmanEncoder<unsigned short,unsigned int>::addValue(a1, v5);
  if (v4 >= 2)
  {
    v7 = 2 * v4;
    v8 = 2;
    do
    {
      v9 = *(_WORD *)(*(_QWORD *)a2 + v8);
      result = HuffmanEncoder<unsigned short,unsigned int>::addValue(a1, v9 - v5);
      v8 += 2;
      v5 = v9;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t **HuffmanEncoder<unsigned short,unsigned int>::addValue(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  uint64_t **result;
  uint64_t *v5;
  unsigned __int16 v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned __int16 v9;

  v9 = a2;
  ++*(_DWORD *)a1;
  v3 = a1 + 8;
  result = Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::findBucket(a1 + 8, &v9);
  if (*result)
  {
    ++*(_DWORD *)((*result)[2] + 4);
  }
  else
  {
    v5 = MemChunkAlloc(0xCuLL, 0);
    v6 = v9;
    *v5 = 0x100000000;
    *((_WORD *)v5 + 4) = v6;
    v8 = v5;
    v7 = *(_DWORD *)(a1 + 128);
    if (v7 == *(_DWORD *)(a1 + 132))
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1 + 120, 1, 1);
      v7 = *(_DWORD *)(a1 + 128);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) = v5;
    *(_DWORD *)(a1 + 128) = v7 + 1;
    return (uint64_t **)Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::add(v3, &v9, &v8);
  }
  return result;
}

uint64_t HuffmanEncoder<unsigned short,unsigned int>::finalizeTables(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  _QWORD *v20;
  unsigned int v21;
  int v22;
  _DWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  _DWORD *v38;
  uint64_t *v39;
  _DWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[2];
  void *v55;

  v54[0] = 0;
  v54[1] = 0;
  v4 = *(unsigned int *)(a1 + 128);
  if ((_DWORD)v4 == 2)
  {
    HuffmanDecoder<unsigned short,unsigned int>::initializeTable(a2, 1, 2u);
    HuffmanDecoder<unsigned short,unsigned int>::addCode(a2, 0, 1, 0);
    v6 = *(uint64_t **)(a1 + 120);
    v7 = *v6;
    *(_QWORD *)v7 = 0x100000001;
    v8 = v6[1];
    v9 = *(_WORD **)(a2 + 48);
    *v9 = *(_WORD *)(v8 + 8);
    *(_QWORD *)v8 = 0x100000000;
    v9[1] = *(_WORD *)(v7 + 8);
  }
  else if ((_DWORD)v4 == 1)
  {
    HuffmanDecoder<unsigned short,unsigned int>::initializeTable(a2, 1, 1u);
    HuffmanDecoder<unsigned short,unsigned int>::addCode(a2, 0, 1, 0);
    v5 = **(_QWORD **)(a1 + 120);
    *(_QWORD *)v5 = 0x100000000;
    **(_WORD **)(a2 + 48) = *(_WORD *)(v5 + 8);
  }
  else
  {
    v10 = HuffmanEncoder<unsigned short,unsigned int>::countsToLengths(a1, (uint64_t)v54);
    v18 = v10;
    v19 = *(_DWORD *)(v54[0] + 4 * v10);
    v52 = 0;
    v53 = 0;
    v50 = 0;
    v51 = 0;
    if (v10 >= 0x20)
    {
      throwTableCodeLimitExceeded(v10, v11, v12, v13, v14, v15, v16, v17);
      v21 = HIDWORD(v51);
      v20 = v50;
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    if (v21 < v18 + 1)
    {
      v48 = 0;
      HIDWORD(v51) = realloc_array(v20, &v48, 4 * (v18 + 1), 4 * v51, 4 * v51, 1) >> 2;
      v20 = v48;
      v50 = v48;
    }
    v22 = v4 - v19;
    LODWORD(v51) = v18 + 1;
    *(_DWORD *)v20 = 0;
    *((_DWORD *)v20 + v18) = v22;
    v23 = v52;
    if (HIDWORD(v53) < v18 + 1)
    {
      v48 = 0;
      HIDWORD(v53) = realloc_array(v52, &v48, 4 * (v18 + 1), 4 * v53, 4 * v53, 1) >> 2;
      v23 = v48;
      v52 = v48;
    }
    LODWORD(v53) = v18 + 1;
    *v23 = 0;
    HuffmanDecoder<unsigned short,unsigned int>::initializeTable(a2, v18, v4);
    v24 = HuffmanDecoder<unsigned short,unsigned int>::addCode(a2, 0, v18, v22);
    if (v18)
    {
      v31 = 1;
      v32 = v18;
      do
      {
        v33 = --v32;
        v34 = v54[0];
        v35 = *(_DWORD *)(v54[0] + 4 * (v32 + 1)) + *((_DWORD *)v52 + v31 - 1);
        *((_DWORD *)v52 + v31) = v35 >> 1;
        v36 = *(_DWORD *)(v34 + 4 * v32);
        if (v36)
        {
          v22 -= v36;
          v24 = HuffmanDecoder<unsigned short,unsigned int>::addCode(a2, v35 << ~v32, v32, v22);
        }
        *((_DWORD *)v50 + v32) = v22;
        if ((v35 & 1) != 0)
          throwTableGenerationFailed(v24, v25, v33, v26, v27, v28, v29, v30);
        ++v31;
      }
      while (v31 <= v18);
    }
    v48 = 0;
    v49 = 0;
    v55 = 0;
    v37 = realloc_array(0, &v55, 4 * (v18 + 1), 0, 0, 1);
    v38 = v55;
    v48 = v55;
    LODWORD(v49) = v18 + 1;
    HIDWORD(v49) = v37 >> 2;
    bzero(v55, 4 * (v18 + 1));
    if ((_DWORD)v4)
    {
      v39 = *(uint64_t **)(a1 + 120);
      v40 = v50;
      v41 = *(_QWORD *)(a2 + 48);
      v42 = v52;
      do
      {
        v43 = *v39++;
        v44 = *(unsigned int *)(v43 + 4);
        v45 = v38[v44];
        v46 = v40[v44] + v45;
        v38[v44] = v45 + 1;
        *(_WORD *)(v41 + 2 * v46) = *(_WORD *)(v43 + 8);
        *(_DWORD *)v43 = v42[v18 - v44] + v45;
        --v4;
      }
      while (v4);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v50);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v52);
  }
  *(_BYTE *)(a1 + 4) = 1;
  HuffmanDecoder<unsigned short,unsigned int>::configureIndexHelper(a2);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v54);
}

void sub_209976B18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t BigramData::savePersistentAndFillInNewBigramData(BigramData *this, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v8;
  unsigned __int16 v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  unsigned int v21;
  __int16 SearchSuccIdForIndex;
  int SearchScoreForIndex;
  __int16 v24;
  int v25;
  char SearchQuantizedScoreForIndex;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  int v31;
  uint64_t v32;
  unsigned __int16 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __int16 *v41;
  uint64_t v42;
  __int16 *v43;
  uint64_t v44;

  v43 = 0;
  v44 = 0;
  v41 = 0;
  v42 = 0;
  v39 = 0;
  v40 = 0;
  v32 = a6 >> 5;
  v8 = a6;
  v31 = 1 << a6;
  if ((*(_DWORD *)(*((_QWORD *)this + 3) + 4 * v32) & (1 << a6)) != 0)
  {
    if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * a6))
    {
      v9 = 1;
      do
      {
        v10 = *((_DWORD *)this + 4);
        v11 = v9 - 1;
        v12 = (*(_DWORD *)(*((_QWORD *)this + 22) + 4 * v8) + v11);
        if (v10)
        {
          v12 = *(unsigned __int8 *)(*((_QWORD *)this + 28) + v12);
          v13 = *((_QWORD *)this + 1);
        }
        else
        {
          v13 = *((_QWORD *)this + 26);
        }
        v14 = *(unsigned __int16 *)(v13 + 2 * v12);
        if (v14 != 20000)
        {
          v15 = v44;
          if ((_DWORD)v44 == HIDWORD(v44))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v43, 1, 1);
            v15 = v44;
            v10 = *((_DWORD *)this + 4);
          }
          v43[v15] = v9;
          LODWORD(v44) = v15 + 1;
          if (v10)
          {
            v16 = *(_BYTE *)(*((_QWORD *)this + 28) + (*(_DWORD *)(*((_QWORD *)this + 22) + 4 * v8) + v11));
            v17 = v40;
            if (v40 == (unint64_t)HIDWORD(v40))
            {
              DgnPrimArray<char>::reallocElts((uint64_t)&v39, 1, 1);
              v17 = v40;
            }
            v39[v17] = v16;
            v18 = v40;
            v19 = &v40;
          }
          else
          {
            v18 = v42;
            if ((_DWORD)v42 == HIDWORD(v42))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)&v41, 1, 1);
              v18 = v42;
            }
            v41[v18] = v14;
            v19 = &v42;
          }
          *(_DWORD *)v19 = v18 + 1;
        }
        ++v9;
      }
      while (*(unsigned __int16 *)(*((_QWORD *)this + 24) + 2 * v8) >= v9);
    }
  }
  else if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * a6))
  {
    v21 = 0;
    do
    {
      SearchSuccIdForIndex = BigramData::getSearchSuccIdForIndex(this, a6, v21);
      SearchScoreForIndex = BigramData::getSearchScoreForIndex(this, a6, v21);
      v24 = SearchScoreForIndex;
      if (SearchScoreForIndex != 20000)
      {
        v25 = v44;
        if ((_DWORD)v44 == HIDWORD(v44))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v43, 1, 1);
          v25 = v44;
        }
        v43[v25] = SearchSuccIdForIndex;
        LODWORD(v44) = v25 + 1;
        if (*((_DWORD *)this + 4))
        {
          SearchQuantizedScoreForIndex = BigramData::getSearchQuantizedScoreForIndex(this, a6, v21);
          v27 = v40;
          if (v40 == (unint64_t)HIDWORD(v40))
          {
            DgnPrimArray<char>::reallocElts((uint64_t)&v39, 1, 1);
            v27 = v40;
          }
          v39[v27] = SearchQuantizedScoreForIndex;
          v28 = v40;
          v29 = &v40;
        }
        else
        {
          v28 = v42;
          if ((_DWORD)v42 == HIDWORD(v42))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v41, 1, 1);
            v28 = v42;
          }
          v41[v28] = v24;
          v29 = &v42;
        }
        *(_DWORD *)v29 = v28 + 1;
      }
      ++v21;
    }
    while (v21 < *(unsigned __int16 *)(*((_QWORD *)this + 24) + 2 * v8));
  }
  *(_DWORD *)(*(_QWORD *)(a4 + 176) + 4 * v8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  v37 = 0;
  v38 = 0;
  HuffmanEncoder<unsigned short,unsigned int>::encodeSuccessors(a5, (uint64_t *)&v43, (uint64_t)&v37);
  if (((4 * (v38 + 1)) | 2uLL) >= 2 * (unint64_t)(v44 + 1))
  {
    writeObjectArray(a2, v43, v44, a3);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v32) |= v31;
    v36 = v38;
    writeObject(a2, &v36, a3);
    writeObjectArray(a2, v37, v38, a3);
  }
  if (*((_DWORD *)this + 4))
    writeObjectArray(a2, v39, v40, a3);
  else
    writeObjectArray(a2, v41, v42, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v37);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v41);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v43);
}

void sub_209976F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  va_list va3;

  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t HuffmanEncoder<unsigned short,unsigned int>::encodeSuccessors(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  _WORD *v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  _WORD *v15;
  uint64_t v16;
  void *v17;

  v5 = *((unsigned int *)a2 + 2);
  v15 = 0;
  v16 = 0;
  if ((_DWORD)v5)
  {
    v17 = 0;
    v7 = 2 * v5;
    v8 = 0;
    v9 = 0;
    HIDWORD(v16) = realloc_array(0, &v17, 2 * v5, 0, 0, 1) >> 1;
    v10 = v17;
    v15 = v17;
    v11 = *a2;
    v12 = v16;
    do
    {
      v13 = *(_WORD *)(v11 + v8);
      if (v12 == HIDWORD(v16))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)&v15, 1, 1);
        v12 = v16;
        v10 = v15;
        v11 = *a2;
      }
      v10[v12++] = v13 - v9;
      LODWORD(v16) = v12;
      v9 = *(_WORD *)(v11 + v8);
      v8 += 2;
    }
    while (v7 != v8);
  }
  HuffmanEncoder<unsigned short,unsigned int>::encodeValues(a1, (uint64_t)&v15, a3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_20997707C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t BigramData::fillInFullyLoadedBigramData(BigramData *this, BigramData *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned __int16 v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  unsigned int v18;
  __int16 SearchSuccIdForIndex;
  int SearchScoreForIndex;
  __int16 v21;
  unsigned int v22;
  char SearchQuantizedScoreForIndex;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *((unsigned int *)this + 50);
  BigramData::configureBigramData(a2, 0, *((_DWORD *)this + 4), *((const unsigned __int16 **)this + 1));
  BigramData::preAllocateStaticBigramData(a2, v4);
  v5 = 232;
  if (!*((_DWORD *)this + 1))
    v5 = 216;
  BigramData::preAllocateDynamicBigramData((uint64_t)a2, *((_DWORD *)this + 62), *(_DWORD *)((char *)this + v5));
  v32 = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  v29 = 0;
  if (v4 >= 2)
  {
    for (i = 1; i != v4; ++i)
    {
      LODWORD(v33) = 0;
      LODWORD(v31) = 0;
      LODWORD(v29) = 0;
      if (((*(_DWORD *)(*((_QWORD *)this + 3) + 4 * (i >> 5)) >> i) & 1) != 0)
      {
        if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * i))
        {
          v7 = 1;
          do
          {
            v8 = *((_DWORD *)this + 4);
            v9 = v7 - 1;
            v10 = (*(_DWORD *)(*((_QWORD *)this + 22) + 4 * i) + v9);
            if (v8)
            {
              v10 = *(unsigned __int8 *)(*((_QWORD *)this + 28) + v10);
              v11 = *((_QWORD *)this + 1);
            }
            else
            {
              v11 = *((_QWORD *)this + 26);
            }
            v12 = *(unsigned __int16 *)(v11 + 2 * v10);
            if (v12 != 20000)
            {
              v13 = v33;
              if ((_DWORD)v33 == HIDWORD(v33))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v32, 1, 1);
                v13 = v33;
                v8 = *((_DWORD *)this + 4);
              }
              *(_WORD *)(v32 + 2 * v13) = v7;
              LODWORD(v33) = v13 + 1;
              if (v8)
              {
                v14 = *(_BYTE *)(*((_QWORD *)this + 28)
                               + (*(_DWORD *)(*((_QWORD *)this + 22) + 4 * i) + v9));
                v15 = v29;
                if (v29 == (unint64_t)HIDWORD(v29))
                {
                  DgnPrimArray<char>::reallocElts((uint64_t)&v28, 1, 1);
                  v15 = v29;
                }
                *(_BYTE *)(v28 + v15) = v14;
                v16 = v29;
                v17 = &v29;
              }
              else
              {
                v16 = v31;
                if ((_DWORD)v31 == HIDWORD(v31))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)&v30, 1, 1);
                  v16 = v31;
                }
                v30[v16] = v12;
                v17 = &v31;
              }
              *(_DWORD *)v17 = v16 + 1;
            }
            ++v7;
          }
          while (*(unsigned __int16 *)(*((_QWORD *)this + 24) + 2 * i) >= v7);
        }
      }
      else if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * i))
      {
        v18 = 0;
        do
        {
          SearchSuccIdForIndex = BigramData::getSearchSuccIdForIndex(this, i, v18);
          SearchScoreForIndex = BigramData::getSearchScoreForIndex(this, i, v18);
          v21 = SearchScoreForIndex;
          if (SearchScoreForIndex != 20000)
          {
            v22 = v33;
            if ((_DWORD)v33 == HIDWORD(v33))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)&v32, 1, 1);
              v22 = v33;
            }
            *(_WORD *)(v32 + 2 * v22) = SearchSuccIdForIndex;
            LODWORD(v33) = v22 + 1;
            if (*((_DWORD *)this + 4))
            {
              SearchQuantizedScoreForIndex = BigramData::getSearchQuantizedScoreForIndex(this, i, v18);
              v24 = v29;
              if (v29 == (unint64_t)HIDWORD(v29))
              {
                DgnPrimArray<char>::reallocElts((uint64_t)&v28, 1, 1);
                v24 = v29;
              }
              *(_BYTE *)(v28 + v24) = SearchQuantizedScoreForIndex;
              v25 = v29;
              v26 = &v29;
            }
            else
            {
              v25 = v31;
              if ((_DWORD)v31 == HIDWORD(v31))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v30, 1, 1);
                v25 = v31;
              }
              v30[v25] = v21;
              v26 = &v31;
            }
            *(_DWORD *)v26 = v25 + 1;
          }
          ++v18;
        }
        while (v18 < *(unsigned __int16 *)(*((_QWORD *)this + 24) + 2 * i));
      }
      if ((_DWORD)v33)
        BigramData::fillBigramRecord(a2, i, (uint64_t)&v32, &v30, &v28);
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v30);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
}

void sub_2099773D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void BigramData::fillBigramRecordLookup(uint64_t a1, unsigned int a2, unsigned __int16 **a3, _WORD **a4, _QWORD *a5)
{
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  _WORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;

  v10 = (*a3)[*((_DWORD *)a3 + 2) - 1];
  BigramData::allocLookup((BigramData *)a1, a2, v10);
  if (*(_DWORD *)(a1 + 16))
  {
    if (v10)
    {
      v11 = 0;
      v12 = (unsigned __int16)(v10 + 1);
      if (v12 <= 2)
        v12 = 2;
      v13 = v12 - 1;
      do
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 224) + (v11 + *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * a2))) = 0;
        ++v11;
      }
      while (v13 != v11);
    }
    if (*((_DWORD *)a3 + 2))
    {
      v14 = 0;
      do
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 224) + (*a3)[v14] + *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * a2) - 1) = *(_BYTE *)(*a5 + v14);
        ++v14;
      }
      while (v14 < *((unsigned int *)a3 + 2));
    }
  }
  else
  {
    if (v10)
    {
      v15 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * a2);
      v16 = *(_QWORD *)(a1 + 208);
      if ((unsigned __int16)(v10 + 1) <= 2u)
        v17 = 2;
      else
        v17 = (unsigned __int16)(v10 + 1);
      v18 = v17 - 1;
      do
      {
        *(_WORD *)(v16 + 2 * v15++) = 20000;
        --v18;
      }
      while (v18);
    }
    v19 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v19)
    {
      v20 = *a3;
      v21 = *a4;
      v22 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * a2);
      v23 = *(_QWORD *)(a1 + 208);
      do
      {
        v25 = *v20++;
        v24 = v25;
        LOWORD(v25) = *v21++;
        *(_WORD *)(v23 + 2 * (v24 + v22 - 1)) = v25;
        --v19;
      }
      while (v19);
    }
  }
}

void BigramData::allocSearch(BigramData *this, unsigned int a2, int a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  BigramData::allocBi1(this, a2);
  *(_WORD *)(*((_QWORD *)this + 24) + 2 * a2) = a3;
  if (a3 == 1)
  {
    *(_DWORD *)(*((_QWORD *)this + 22) + 4 * a2) = -65536;
  }
  else
  {
    *(_DWORD *)(*((_QWORD *)this + 22) + 4 * a2) = *((_DWORD *)this + 62);
    v6 = *((_DWORD *)this + 63);
    v7 = *((_DWORD *)this + 62) + a3;
    if (v7 > v6)
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 240, v7 - v6, 1);
      v7 = *((_DWORD *)this + 62) + a3;
    }
    *((_DWORD *)this + 62) = v7;
    if (*((_DWORD *)this + 1))
    {
      v8 = *((_DWORD *)this + 70) + a3;
      v9 = *((_DWORD *)this + 71);
      if (v8 > v9)
      {
        DgnPrimArray<char>::reallocElts((uint64_t)this + 272, v8 - v9, 1);
        v8 = *((_DWORD *)this + 70) + a3;
      }
      *((_DWORD *)this + 70) = v8;
    }
    else
    {
      v10 = *((_DWORD *)this + 66) + a3;
      v11 = *((_DWORD *)this + 67);
      if (v10 > v11)
      {
        DgnPrimArray<short>::reallocElts((uint64_t)this + 256, v10 - v11, 1);
        v10 = *((_DWORD *)this + 66) + a3;
      }
      *((_DWORD *)this + 66) = v10;
    }
  }
}

uint64_t BigramData::setSearchSuccIdForIndex(uint64_t this, unsigned int a2, int a3, unsigned __int16 a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(this + 176);
  v5 = *(unsigned int *)(v4 + 4 * a2);
  if (*(_WORD *)(*(_QWORD *)(this + 192) + 2 * a2) == 1)
  {
    *(_DWORD *)(v4 + 4 * a2) = (unsigned __int16)*(_DWORD *)(v4 + 4 * a2) | (a4 << 16);
  }
  else
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*(_QWORD *)(this + 40) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      v6 = *(_DWORD *)(*(_QWORD *)(this + 320) + 4 * v5) + a3;
      v7 = *(_QWORD *)(this + 336);
    }
    else
    {
      v6 = v5 + a3;
      v7 = *(_QWORD *)(this + 240);
    }
    *(_WORD *)(v7 + 2 * v6) = a4;
  }
  return this;
}

uint64_t BigramData::setSearchQuantizedScoreForIndex(uint64_t this, unsigned int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(this + 176);
  v5 = *(unsigned int *)(v4 + 4 * a2);
  if (*(_WORD *)(*(_QWORD *)(this + 192) + 2 * a2) == 1)
  {
    *(_DWORD *)(v4 + 4 * a2) = v5 & 0xFFFF0000 | a4;
  }
  else
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*(_QWORD *)(this + 40) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      v6 = *(_DWORD *)(*(_QWORD *)(this + 320) + 4 * v5) + a3;
      v7 = *(_QWORD *)(this + 368);
    }
    else
    {
      v6 = v5 + a3;
      v7 = *(_QWORD *)(this + 272);
    }
    *(_BYTE *)(v7 + v6) = a4;
  }
  return this;
}

uint64_t BigramData::setSearchScoreForIndex(uint64_t this, unsigned int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(this + 176);
  v5 = *(unsigned int *)(v4 + 4 * a2);
  if (*(_WORD *)(*(_QWORD *)(this + 192) + 2 * a2) == 1)
  {
    *(_DWORD *)(v4 + 4 * a2) = v5 & 0xFFFF0000 | a4;
  }
  else
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*(_QWORD *)(this + 40) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      v6 = *(_DWORD *)(*(_QWORD *)(this + 320) + 4 * v5) + a3;
      v7 = *(_QWORD *)(this + 352);
    }
    else
    {
      v6 = v5 + a3;
      v7 = *(_QWORD *)(this + 256);
    }
    *(_WORD *)(v7 + 2 * v6) = a4;
  }
  return this;
}

void BigramData::allocLookup(BigramData *this, unsigned int a2, int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  BigramData::allocBi1(this, a2);
  v6 = *((_QWORD *)this + 22);
  if (*((_DWORD *)this + 1))
  {
    *(_DWORD *)(v6 + 4 * a2) = *((_DWORD *)this + 58);
    v7 = *((_DWORD *)this + 59);
    v8 = *((_DWORD *)this + 58) + a3;
    if (v8 > v7)
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 224, v8 - v7, 1);
      v8 = *((_DWORD *)this + 58) + a3;
    }
    *((_DWORD *)this + 58) = v8;
  }
  else
  {
    *(_DWORD *)(v6 + 4 * a2) = *((_DWORD *)this + 54);
    v9 = *((_DWORD *)this + 55);
    v10 = *((_DWORD *)this + 54) + a3;
    if (v10 > v9)
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 208, v10 - v9, 1);
      v10 = *((_DWORD *)this + 54) + a3;
    }
    *((_DWORD *)this + 54) = v10;
  }
  *(_WORD *)(*((_QWORD *)this + 24) + 2 * a2) = a3;
  *(_DWORD *)(*((_QWORD *)this + 3) + 4 * (a2 >> 5)) |= 1 << a2;
}

void BigramData::fillBigramRecordPreload(BigramData *this, unsigned int a2, uint64_t a3, __int16 **a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;

  v10 = 3;
  if (!*((_DWORD *)this + 4))
    v10 = 4;
  if (v10 * (unint64_t)*(unsigned int *)(a3 + 8) >= *(unsigned __int16 *)(*(_QWORD *)a3
                                                                                + 2
                                                                                * (*(_DWORD *)(a3 + 8) - 1)) << (*((_DWORD *)this + 4) == 0))
  {
    BigramData::fillBigramRecordLookup((uint64_t)this, a2, (unsigned __int16 **)a3, a4, a5);
  }
  else
  {
    BigramData::allocSearch(this, a2, (unsigned __int16)*(_DWORD *)(a3 + 8));
    v11 = *(unsigned int *)(a3 + 8);
    if (*((_DWORD *)this + 4))
    {
      if ((_DWORD)v11)
      {
        v12 = 0;
        do
        {
          v13 = v12 + *(_DWORD *)(*((_QWORD *)this + 22) + 4 * a2);
          *(_WORD *)(*((_QWORD *)this + 30) + 2 * v13) = *(_WORD *)(*(_QWORD *)a3 + 2 * v12);
          *(_BYTE *)(*((_QWORD *)this + 34) + v13) = *(_BYTE *)(*a5 + v12++);
        }
        while (v12 < *(unsigned int *)(a3 + 8));
      }
    }
    else if ((_DWORD)v11)
    {
      v14 = *(unsigned __int16 **)a3;
      v15 = *(_DWORD *)(*((_QWORD *)this + 22) + 4 * a2);
      v16 = *((_QWORD *)this + 30);
      v17 = *a4;
      v18 = *((_QWORD *)this + 32);
      do
      {
        v19 = *v14++;
        *(_WORD *)(v16 + 2 * v15) = v19;
        v20 = *v17++;
        *(_WORD *)(v18 + 2 * v15++) = v20;
        --v11;
      }
      while (v11);
    }
  }
}

_DWORD *BigramData::addBigramScoreQuantization(_DWORD *this, unsigned __int8 a2, __int16 a3)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v4 = this;
  this[1] = 1;
  v5 = (uint64_t)(this + 2);
  v6 = this[4];
  if (!v6)
  {
    if (this[5])
    {
      v7 = 0;
    }
    else
    {
      this = (_DWORD *)DgnPrimArray<short>::reallocElts((uint64_t)(this + 2), 1, 1);
      v7 = v4[4];
    }
    *(_WORD *)(*((_QWORD *)v4 + 1) + 2 * v7) = 20000;
    v6 = v7 + 1;
    v4[4] = v6;
  }
  if (v6 == v4[5])
  {
    this = (_DWORD *)DgnPrimArray<short>::reallocElts(v5, 1, 1);
    v6 = v4[4];
  }
  *(_WORD *)(*((_QWORD *)v4 + 1) + 2 * v6) = a3;
  v4[4] = v6 + 1;
  return this;
}

unint64_t BigramData::allocLoaded(unint64_t this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v3 = this;
  v4 = *(_QWORD *)(this + 176);
  v5 = a2;
  v6 = *(_DWORD *)(v4 + 4 * a2);
  *(_DWORD *)(v4 + 4 * a2) = *(_DWORD *)(this + 312);
  v7 = *(_DWORD *)(this + 312);
  if (v7 == *(_DWORD *)(this + 316))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(this + 304, 1, 1);
    v7 = *(_DWORD *)(v3 + 312);
  }
  *(_DWORD *)(*(_QWORD *)(v3 + 304) + 4 * v7) = v6;
  ++*(_DWORD *)(v3 + 312);
  v8 = *(_DWORD *)(v3 + 344);
  v9 = *(_DWORD *)(v3 + 328);
  if (v9 == *(_DWORD *)(v3 + 332))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(v3 + 320, 1, 1);
    v9 = *(_DWORD *)(v3 + 328);
  }
  *(_DWORD *)(*(_QWORD *)(v3 + 320) + 4 * v9) = v8;
  ++*(_DWORD *)(v3 + 328);
  v10 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 192) + 2 * v5);
  v11 = *(_DWORD *)(v3 + 344) + v10;
  v12 = *(_DWORD *)(v3 + 348);
  if (v11 > v12)
  {
    this = DgnPrimArray<short>::reallocElts(v3 + 336, v11 - v12, 1);
    v11 = *(_DWORD *)(v3 + 344) + v10;
  }
  *(_DWORD *)(v3 + 344) = v11;
  if (*(_DWORD *)(v3 + 4))
  {
    v13 = *(_DWORD *)(v3 + 376) + v10;
    v14 = *(_DWORD *)(v3 + 380);
    if (v13 > v14)
    {
      this = DgnPrimArray<char>::reallocElts(v3 + 368, v13 - v14, 1);
      v13 = *(_DWORD *)(v3 + 376) + v10;
    }
    *(_DWORD *)(v3 + 376) = v13;
  }
  else
  {
    v15 = *(_DWORD *)(v3 + 360) + v10;
    v16 = *(_DWORD *)(v3 + 364);
    if (v15 > v16)
    {
      this = DgnPrimArray<short>::reallocElts(v3 + 352, v15 - v16, 1);
      v15 = *(_DWORD *)(v3 + 360) + v10;
    }
    *(_DWORD *)(v3 + 360) = v15;
  }
  *(_DWORD *)(*(_QWORD *)(v3 + 56) + 4 * (a2 >> 5)) |= 1 << a2;
  v17 = *(_DWORD *)(v3 + 296);
  if (v17 == *(_DWORD *)(v3 + 300))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(v3 + 288, 1, 1);
    v17 = *(_DWORD *)(v3 + 296);
  }
  *(_DWORD *)(*(_QWORD *)(v3 + 288) + 4 * v17) = a2;
  ++*(_DWORD *)(v3 + 296);
  return this;
}

void TrigramData::TrigramData(TrigramData *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  DgnString::DgnString((TrigramData *)((char *)this + 128));
  DgnString::DgnString((TrigramData *)((char *)this + 144));
  DgnString::DgnString((TrigramData *)((char *)this + 160));
  DgnString::DgnString((TrigramData *)((char *)this + 176));
  *((_OWORD *)this + 12) = 0u;
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_QWORD *)this + 60) = 0;
  TrigramData::allocTri1(this, 0, 0);
}

void sub_209977CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, BitArray *a18)
{
  uint64_t v18;
  uint64_t v19;
  BitArray *v20;
  BitArray *v21;
  BitArray *v22;
  BitArray *v23;
  uint64_t v24;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 472);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 456);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 440);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 424);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 408);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 392);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 376);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 360);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 344);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 328);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 312);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 296);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 280);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder(v24);
  BitArray::~BitArray(v23);
  BitArray::~BitArray(v22);
  BitArray::~BitArray(v21);
  BitArray::~BitArray(v20);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 80);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  _Unwind_Resume(a1);
}

void TrigramData::allocTri1(TrigramData *this, unsigned int a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  v6 = *((_DWORD *)this + 14);
  if (v6 <= a2)
  {
    do
    {
      if (v6 == *((_DWORD *)this + 15))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)this + 48, 1, 1);
        v6 = *((_DWORD *)this + 14);
      }
      *(_WORD *)(*((_QWORD *)this + 6) + 2 * v6) = 0;
      *((_DWORD *)this + 14) = v6 + 1;
      v8 = *((unsigned int *)this + 18);
      if (v8 == *((_DWORD *)this + 19))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 64, 1, 1);
        v8 = *((unsigned int *)this + 18);
      }
      v7 = *((_QWORD *)this + 8);
      *(_DWORD *)(v7 + 4 * v8) = -1;
      ++*((_DWORD *)this + 18);
      v6 = *((_DWORD *)this + 14);
    }
    while (v6 <= a2);
  }
  else
  {
    v7 = *((_QWORD *)this + 8);
  }
  *(_WORD *)(*((_QWORD *)this + 6) + 2 * a2) = a3;
  *(_DWORD *)(v7 + 4 * a2) = *((_DWORD *)this + 22);
  v9 = *((_DWORD *)this + 23);
  v10 = *((_DWORD *)this + 22) + a3;
  if (v10 > v9)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 80, v10 - v9, 1);
    v10 = *((_DWORD *)this + 22) + a3;
  }
  *((_DWORD *)this + 22) = v10;
  if (*((_DWORD *)this + 1))
  {
    v11 = *((_DWORD *)this + 31);
    v12 = *((_DWORD *)this + 30) + a3;
    if (v12 > v11)
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 112, v12 - v11, 1);
      v12 = *((_DWORD *)this + 30) + a3;
    }
    *((_DWORD *)this + 30) = v12;
  }
  else
  {
    v13 = *((_DWORD *)this + 27);
    v14 = *((_DWORD *)this + 26) + a3;
    if (v14 > v13)
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 96, v14 - v13, 1);
      v14 = *((_DWORD *)this + 26) + a3;
    }
    *((_DWORD *)this + 26) = v14;
  }
  BitArray::addSize((TrigramData *)((char *)this + 128), a3);
  if (*(_DWORD *)this)
  {
    BitArray::addSize((TrigramData *)((char *)this + 144), a3);
    BitArray::addSize((TrigramData *)((char *)this + 160), a3);
    BitArray::addSize((TrigramData *)((char *)this + 176), a3);
  }
  v15 = *((_DWORD *)this + 72) + a3;
  v16 = *((_DWORD *)this + 73);
  if (v15 > v16)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 280, v15 - v16, 1);
    v15 = *((_DWORD *)this + 72) + a3;
  }
  *((_DWORD *)this + 72) = v15;
  v17 = *((_DWORD *)this + 76) + a3;
  v18 = *((_DWORD *)this + 77);
  if (v17 > v18)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 296, v17 - v18, 1);
    v17 = *((_DWORD *)this + 76) + a3;
  }
  *((_DWORD *)this + 76) = v17;
}

void TrigramData::~TrigramData(TrigramData *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 472);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 456);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 440);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 424);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 408);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 392);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 360);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 344);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 312);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 280);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 192);
  BitArray::~BitArray((TrigramData *)((char *)this + 176));
  BitArray::~BitArray((TrigramData *)((char *)this + 160));
  BitArray::~BitArray((TrigramData *)((char *)this + 144));
  BitArray::~BitArray((TrigramData *)((char *)this + 128));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);
}

void **TrigramData::compact(void **this)
{
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 6));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 8));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 10));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 12));
  DgnPrimArray<unsigned char>::compact(this + 14);
  BitArray::compact((BitArray *)(this + 16));
  BitArray::compact((BitArray *)(this + 18));
  BitArray::compact((BitArray *)(this + 20));
  BitArray::compact((BitArray *)(this + 22));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 35));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 37));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 39));
  DgnPrimArray<unsigned char>::compact(this + 41);
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 43));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 45));
  DgnPrimArray<unsigned char>::compact(this + 47);
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 49));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 51));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 53));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 55));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 57));
  return DgnPrimArray<unsigned char>::compact(this + 59);
}

void TrigramData::printSize(TrigramData *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  int v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  uint64_t v292;
  void *v293;
  int v294;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1739, (DgnString *)&v293);
  if (v294)
    v16 = v293;
  else
    v16 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7B4F4, a3, &unk_209A7B4F4, v16);
  DgnString::~DgnString((DgnString *)&v293);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7B4F4);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v27 = v293;
  else
    v27 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A7B4F4, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v32 = v293;
  else
    v32 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A7B4F4, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v37 = v293;
  else
    v37 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A7B4F4, (34 - a3), (34 - a3), v37, 4, 4, 0);
  v292 = a3;
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v38 = 12;
  else
    v38 = 16;
  v39 = *((unsigned int *)this + 6);
  v40 = *((_DWORD *)this + 7);
  if (v40 >= v39)
  {
    v41 = 0;
    if ((int)v39 > 0)
      v38 = (v38 | 2) + 2 * (v39 - 1);
    v42 = v38 + 2 * (v40 - v39);
  }
  else
  {
    v41 = 2 * v39;
    v42 = v38;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v47 = v293;
  else
    v47 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, v21, &unk_209A7B4F4, v22, v22, v47, v42, v38, v41);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v42;
  *a5 += v38;
  *a6 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v48 = 12;
  else
    v48 = 16;
  v49 = *((unsigned int *)this + 10);
  v50 = *((_DWORD *)this + 11);
  if (v50 >= v49)
  {
    v51 = 0;
    if ((int)v49 > 0)
      v48 = (v48 | 2) + 2 * (v49 - 1);
    v52 = v48 + 2 * (v50 - v49);
  }
  else
  {
    v51 = 2 * v49;
    v52 = v48;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v57 = v293;
  else
    v57 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v21, &unk_209A7B4F4, v22, v22, v57, v52, v48, v51);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v52;
  *a5 += v48;
  *a6 += v51;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v58 = 12;
  else
    v58 = 16;
  v59 = *((unsigned int *)this + 14);
  v60 = *((_DWORD *)this + 15);
  if (v60 >= v59)
  {
    v61 = 0;
    if ((int)v59 > 0)
      v58 = (v58 | 2) + 2 * (v59 - 1);
    v62 = v58 + 2 * (v60 - v59);
  }
  else
  {
    v61 = 2 * v59;
    v62 = v58;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v67 = v293;
  else
    v67 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, v21, &unk_209A7B4F4, v22, v22, v67, v62, v58, v61);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v62;
  *a5 += v58;
  *a6 += v61;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v68 = 12;
  else
    v68 = 16;
  v69 = *((unsigned int *)this + 18);
  v70 = *((_DWORD *)this + 19);
  if (v70 >= v69)
  {
    v71 = 0;
    if ((int)v69 > 0)
      v68 += 4 * (v69 - 1) + 4;
    v72 = v68 + 4 * (v70 - v69);
  }
  else
  {
    v71 = 4 * v69;
    v72 = v68;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v77 = v293;
  else
    v77 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v73, v74, v75, v76, v21, &unk_209A7B4F4, v22, v22, v77, v72, v68, v71);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v72;
  *a5 += v68;
  *a6 += v71;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v78 = 12;
  else
    v78 = 16;
  v79 = *((unsigned int *)this + 22);
  v80 = *((_DWORD *)this + 23);
  if (v80 >= v79)
  {
    v81 = 0;
    if ((int)v79 > 0)
      v78 = (v78 | 2) + 2 * (v79 - 1);
    v82 = v78 + 2 * (v80 - v79);
  }
  else
  {
    v81 = 2 * v79;
    v82 = v78;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v87 = v293;
  else
    v87 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A7B4F4, v22, v22, v87, v82, v78, v81);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v82;
  *a5 += v78;
  *a6 += v81;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v88 = 12;
  else
    v88 = 16;
  v89 = *((unsigned int *)this + 26);
  v90 = *((_DWORD *)this + 27);
  if (v90 >= v89)
  {
    v91 = 0;
    if ((int)v89 > 0)
      v88 = (v88 | 2) + 2 * (v89 - 1);
    v92 = v88 + 2 * (v90 - v89);
  }
  else
  {
    v91 = 2 * v89;
    v92 = v88;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v97 = v293;
  else
    v97 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A7B4F4, v22, v22, v97, v92, v88, v91);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v92;
  *a5 += v88;
  *a6 += v91;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v98 = 12;
  else
    v98 = 16;
  v99 = *((_DWORD *)this + 30);
  v100 = *((_DWORD *)this + 31);
  v101 = v100 >= v99;
  v102 = v100 - v99;
  if (v101)
  {
    v104 = v99 & ~(v99 >> 31);
    v99 = 0;
    v103 = v98 + v104;
    v98 += v104 + v102;
  }
  else
  {
    v103 = v98;
  }
  v105 = v99;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v110 = v293;
  else
    v110 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v21, &unk_209A7B4F4, v22, v22, v110, v98, v103, v105);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v98;
  *a5 += v103;
  *a6 += v105;
  v111 = BitArray::sizeObject((uint64_t)this + 128, 0);
  v112 = BitArray::sizeObject((uint64_t)this + 128, 1);
  v113 = BitArray::sizeObject((uint64_t)this + 128, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v118 = v293;
  else
    v118 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v21, &unk_209A7B4F4, v22, v22, v118, v111, v112, v113);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v111;
  *a5 += v112;
  *a6 += v113;
  v119 = BitArray::sizeObject((uint64_t)this + 144, 0);
  v120 = BitArray::sizeObject((uint64_t)this + 144, 1);
  v121 = BitArray::sizeObject((uint64_t)this + 144, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v126 = v293;
  else
    v126 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v122, v123, v124, v125, v21, &unk_209A7B4F4, v22, v22, v126, v119, v120, v121);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v119;
  *a5 += v120;
  *a6 += v121;
  v127 = BitArray::sizeObject((uint64_t)this + 160, 0);
  v128 = BitArray::sizeObject((uint64_t)this + 160, 1);
  v129 = BitArray::sizeObject((uint64_t)this + 160, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v134 = v293;
  else
    v134 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v21, &unk_209A7B4F4, v22, v22, v134, v127, v128, v129);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v127;
  *a5 += v128;
  *a6 += v129;
  v135 = BitArray::sizeObject((uint64_t)this + 176, 0);
  v136 = BitArray::sizeObject((uint64_t)this + 176, 1);
  v137 = BitArray::sizeObject((uint64_t)this + 176, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v142 = v293;
  else
    v142 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v138, v139, v140, v141, v21, &unk_209A7B4F4, v22, v22, v142, v135, v136, v137);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v135;
  *a5 += v136;
  *a6 += v137;
  v143 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 192, 0);
  v144 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 192, 1);
  v145 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 192, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v150 = v293;
  else
    v150 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v146, v147, v148, v149, v21, &unk_209A7B4F4, v22, v22, v150, v143, v144, v145);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v143;
  *a5 += v144;
  *a6 += v145;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v151 = 12;
  else
    v151 = 16;
  v152 = *((unsigned int *)this + 72);
  v153 = *((_DWORD *)this + 73);
  if (v153 >= v152)
  {
    v154 = 0;
    if ((int)v152 > 0)
      v151 += 4 * (v152 - 1) + 4;
    v155 = v151 + 4 * (v153 - v152);
  }
  else
  {
    v154 = 4 * v152;
    v155 = v151;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v160 = v293;
  else
    v160 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v156, v157, v158, v159, v21, &unk_209A7B4F4, v22, v22, v160, v155, v151, v154);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v155;
  *a5 += v151;
  *a6 += v154;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v161 = 12;
  else
    v161 = 16;
  v162 = *((unsigned int *)this + 76);
  v163 = *((_DWORD *)this + 77);
  if (v163 >= v162)
  {
    v164 = 0;
    if ((int)v162 > 0)
      v161 = (v161 | 2) + 2 * (v162 - 1);
    v165 = v161 + 2 * (v163 - v162);
  }
  else
  {
    v164 = 2 * v162;
    v165 = v161;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v170 = v293;
  else
    v170 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v166, v167, v168, v169, v21, &unk_209A7B4F4, v22, v22, v170, v165, v161, v164);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v165;
  *a5 += v161;
  *a6 += v164;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v171 = 12;
  else
    v171 = 16;
  v172 = *((unsigned int *)this + 80);
  v173 = *((_DWORD *)this + 81);
  if (v173 >= v172)
  {
    v174 = 0;
    if ((int)v172 > 0)
      v171 = (v171 | 2) + 2 * (v172 - 1);
    v175 = v171 + 2 * (v173 - v172);
  }
  else
  {
    v174 = 2 * v172;
    v175 = v171;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v180 = v293;
  else
    v180 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v176, v177, v178, v179, v21, &unk_209A7B4F4, v22, v22, v180, v175, v171, v174);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v175;
  *a5 += v171;
  *a6 += v174;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v181 = 12;
  else
    v181 = 16;
  v182 = *((_DWORD *)this + 84);
  v183 = *((_DWORD *)this + 85);
  v101 = v183 >= v182;
  v184 = v183 - v182;
  if (v101)
  {
    v186 = v182 & ~(v182 >> 31);
    v182 = 0;
    v185 = v181 + v186;
    v181 += v186 + v184;
  }
  else
  {
    v185 = v181;
  }
  v187 = v182;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v192 = v293;
  else
    v192 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v188, v189, v190, v191, v21, &unk_209A7B4F4, v22, v22, v192, v181, v185, v187);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v181;
  *a5 += v185;
  *a6 += v187;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v193 = 12;
  else
    v193 = 16;
  v194 = *((unsigned int *)this + 88);
  v195 = *((_DWORD *)this + 89);
  if (v195 >= v194)
  {
    v196 = 0;
    if ((int)v194 > 0)
      v193 = (v193 | 2) + 2 * (v194 - 1);
    v197 = v193 + 2 * (v195 - v194);
  }
  else
  {
    v196 = 2 * v194;
    v197 = v193;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v202 = v293;
  else
    v202 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v198, v199, v200, v201, v21, &unk_209A7B4F4, v22, v22, v202, v197, v193, v196);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v197;
  *a5 += v193;
  *a6 += v196;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v203 = 12;
  else
    v203 = 16;
  v204 = *((unsigned int *)this + 92);
  v205 = *((_DWORD *)this + 93);
  if (v205 >= v204)
  {
    v206 = 0;
    if ((int)v204 > 0)
      v203 = (v203 | 2) + 2 * (v204 - 1);
    v207 = v203 + 2 * (v205 - v204);
  }
  else
  {
    v206 = 2 * v204;
    v207 = v203;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v212 = v293;
  else
    v212 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v208, v209, v210, v211, v21, &unk_209A7B4F4, v22, v22, v212, v207, v203, v206);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v207;
  *a5 += v203;
  *a6 += v206;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v213 = 12;
  else
    v213 = 16;
  v214 = *((_DWORD *)this + 96);
  v215 = *((_DWORD *)this + 97);
  v101 = v215 >= v214;
  v216 = v215 - v214;
  if (v101)
  {
    v218 = v214 & ~(v214 >> 31);
    v214 = 0;
    v217 = v213 + v218;
    v213 += v218 + v216;
  }
  else
  {
    v217 = v213;
  }
  v219 = v214;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v224 = v293;
  else
    v224 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v21, &unk_209A7B4F4, v22, v22, v224, v213, v217, v219);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v213;
  *a5 += v217;
  *a6 += v219;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v225 = 12;
  else
    v225 = 16;
  v226 = *((unsigned int *)this + 100);
  v227 = *((_DWORD *)this + 101);
  if (v227 >= v226)
  {
    v228 = 0;
    if ((int)v226 > 0)
      v225 += 4 * (v226 - 1) + 4;
    v229 = v225 + 4 * (v227 - v226);
  }
  else
  {
    v228 = 4 * v226;
    v229 = v225;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v234 = v293;
  else
    v234 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v230, v231, v232, v233, v21, &unk_209A7B4F4, v22, v22, v234, v229, v225, v228);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v229;
  *a5 += v225;
  *a6 += v228;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v235 = 12;
  else
    v235 = 16;
  v236 = *((unsigned int *)this + 104);
  v237 = *((_DWORD *)this + 105);
  if (v237 >= v236)
  {
    v238 = 0;
    if ((int)v236 > 0)
      v235 += 4 * (v236 - 1) + 4;
    v239 = v235 + 4 * (v237 - v236);
  }
  else
  {
    v238 = 4 * v236;
    v239 = v235;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v244 = v293;
  else
    v244 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v240, v241, v242, v243, v21, &unk_209A7B4F4, v22, v22, v244, v239, v235, v238);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v239;
  *a5 += v235;
  *a6 += v238;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v245 = 12;
  else
    v245 = 16;
  v246 = *((unsigned int *)this + 108);
  v247 = *((_DWORD *)this + 109);
  if (v247 >= v246)
  {
    v248 = 0;
    if ((int)v246 > 0)
      v245 += 4 * (v246 - 1) + 4;
    v249 = v245 + 4 * (v247 - v246);
  }
  else
  {
    v248 = 4 * v246;
    v249 = v245;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v254 = v293;
  else
    v254 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v250, v251, v252, v253, v21, &unk_209A7B4F4, v22, v22, v254, v249, v245, v248);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v249;
  *a5 += v245;
  *a6 += v248;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v255 = 12;
  else
    v255 = 16;
  v256 = *((unsigned int *)this + 112);
  v257 = *((_DWORD *)this + 113);
  if (v257 >= v256)
  {
    v258 = 0;
    if ((int)v256 > 0)
      v255 = (v255 | 2) + 2 * (v256 - 1);
    v259 = v255 + 2 * (v257 - v256);
  }
  else
  {
    v258 = 2 * v256;
    v259 = v255;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v264 = v293;
  else
    v264 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v260, v261, v262, v263, v21, &unk_209A7B4F4, v22, v22, v264, v259, v255, v258);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v259;
  *a5 += v255;
  *a6 += v258;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v265 = 12;
  else
    v265 = 16;
  v266 = *((unsigned int *)this + 116);
  v267 = *((_DWORD *)this + 117);
  if (v267 >= v266)
  {
    v268 = 0;
    if ((int)v266 > 0)
      v265 = (v265 | 2) + 2 * (v266 - 1);
    v269 = v265 + 2 * (v267 - v266);
  }
  else
  {
    v268 = 2 * v266;
    v269 = v265;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v274 = v293;
  else
    v274 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v270, v271, v272, v273, v21, &unk_209A7B4F4, v22, v22, v274, v269, v265, v268);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v269;
  *a5 += v265;
  *a6 += v268;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v275 = 12;
  else
    v275 = 16;
  v276 = *((_DWORD *)this + 120);
  v277 = *((_DWORD *)this + 121);
  v101 = v277 >= v276;
  v278 = v277 - v276;
  if (v101)
  {
    v280 = v276 & ~(v276 >> 31);
    v276 = 0;
    v279 = v275 + v280;
    v275 += v280 + v278;
  }
  else
  {
    v279 = v275;
  }
  v281 = v276;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294)
    v286 = v293;
  else
    v286 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v282, v283, v284, v285, v21, &unk_209A7B4F4, v22, v22, v286, v275, v279, v281);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v275;
  *a5 += v279;
  *a6 += v281;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1744, (DgnString *)&v293);
  if (v294)
    v291 = v293;
  else
    v291 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v287, v288, v289, v290, v292, &unk_209A7B4F4, (35 - v292), (35 - v292), v291, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v293);
}

void sub_209979620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void **TrigramData::copyTrigramData(TrigramData *this, const TrigramData *a2)
{
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 16, (uint64_t *)a2 + 2, 0, *((_DWORD *)a2 + 6));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 32, (uint64_t *)a2 + 4, 0, *((_DWORD *)a2 + 10));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 48, (uint64_t *)a2 + 6, 0, *((_DWORD *)a2 + 14));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 64, (uint64_t *)a2 + 8, 0, *((_DWORD *)a2 + 18));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 80, (uint64_t *)a2 + 10, 0, *((_DWORD *)a2 + 22));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 96, (uint64_t *)a2 + 12, 0, *((_DWORD *)a2 + 26));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 112, (_QWORD *)a2 + 14, 0, *((_DWORD *)a2 + 30));
  BitArray::operator=((int **)this + 16, (uint64_t)a2 + 128);
  BitArray::operator=((int **)this + 18, (uint64_t)a2 + 144);
  BitArray::operator=((int **)this + 20, (uint64_t)a2 + 160);
  BitArray::operator=((int **)this + 22, (uint64_t)a2 + 176);
  HuffmanDecoder<unsigned short,unsigned int>::operator=((unint64_t)this + 192, (uint64_t)a2 + 192);
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 280, (uint64_t *)a2 + 35, 0, *((_DWORD *)a2 + 72));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 296, (uint64_t *)a2 + 37, 0, *((_DWORD *)a2 + 76));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 312, (uint64_t *)a2 + 39, 0, *((_DWORD *)a2 + 80));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 328, (_QWORD *)a2 + 41, 0, *((_DWORD *)a2 + 84));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 344, (uint64_t *)a2 + 43, 0, *((_DWORD *)a2 + 88));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 360, (uint64_t *)a2 + 45, 0, *((_DWORD *)a2 + 92));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 376, (_QWORD *)a2 + 47, 0, *((_DWORD *)a2 + 96));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 392, (uint64_t *)a2 + 49, 0, *((_DWORD *)a2 + 100));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 408, (uint64_t *)a2 + 51, 0, *((_DWORD *)a2 + 104));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 424, (uint64_t *)a2 + 53, 0, *((_DWORD *)a2 + 108));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 440, (uint64_t *)a2 + 55, 0, *((_DWORD *)a2 + 112));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 456, (uint64_t *)a2 + 57, 0, *((_DWORD *)a2 + 116));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 472, (_QWORD *)a2 + 59, 0, *((_DWORD *)a2 + 120));
  return TrigramData::compact((void **)this);
}

uint64_t TrigramData::saveBinary(TrigramData *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (int *)this, a3);
  writeObject((uint64_t)a2, (int *)this + 1, a3);
  writeObject((uint64_t)a2, (int *)this + 2, a3);
  writeObject<short>((uint64_t)a2, (uint64_t)this + 16, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 32, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 48, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 64, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 80, a3);
  writeObject<short>((uint64_t)a2, (uint64_t)this + 96, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 112, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 128, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 144, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 160, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 176, a3);
  HuffmanDecoder<unsigned short,unsigned int>::writeObject((uint64_t)this + 192, (uint64_t)a2, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 280, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 296, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 312, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 328, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 344, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 360, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 376, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 392, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 408, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 424, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 440, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 456, a3);
  return writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 472, a3);
}

void TrigramData::loadBinary(TrigramData *this, DgnStream *a2, unsigned int *a3)
{
  readObject((uint64_t)a2, this, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 1, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 2, a3);
  readObject<short>(a2, (uint64_t)this + 16, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 32, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 48, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 64, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 80, a3);
  readObject<short>(a2, (uint64_t)this + 96, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 112, a3);
  readObject(a2, (TrigramData *)((char *)this + 128), a3);
  readObject(a2, (TrigramData *)((char *)this + 144), a3);
  readObject(a2, (TrigramData *)((char *)this + 160), a3);
  readObject(a2, (TrigramData *)((char *)this + 176), a3);
  HuffmanDecoder<unsigned short,unsigned int>::readObject((unint64_t)this + 192, a2, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 280, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 296, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 312, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 328, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 344, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 360, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 376, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 392, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 408, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 424, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 440, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 456, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 472, a3);
}

char *TrigramData::saveBinaryShared(TrigramData *this, DgnSharedMemStream *a2, int a3, unsigned int *a4)
{
  if (a3)
  {
    writeObject((uint64_t)a2, (int *)this, a4);
    writeObject((uint64_t)a2, (int *)this + 1, a4);
    writeObject((uint64_t)a2, (int *)this + 2, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 16, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 32, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 48, a4);
    writeSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 80, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 96, a4);
    writeSharedObject<unsigned char>(a2, (uint64_t)this + 112, a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 128), a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 144), a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 160), a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 176), a4);
    HuffmanDecoder<unsigned short,unsigned int>::writeObject((uint64_t)this + 192, (uint64_t)a2, a4);
  }
  else
  {
    writeSharedObject<short>(a2, (uint64_t)this + 16, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 32, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 48, a4);
    writeSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 80, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 96, a4);
    writeSharedObject<unsigned char>(a2, (uint64_t)this + 112, a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 128), a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 144), a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 160), a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 176), a4);
  }
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 280, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 296, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 312, a4);
  writeSharedObject<unsigned char>(a2, (uint64_t)this + 328, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 344, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 360, a4);
  writeSharedObject<unsigned char>(a2, (uint64_t)this + 376, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 392, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 408, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 424, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 440, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 456, a4);
  return writeSharedObject<unsigned char>(a2, (uint64_t)this + 472, a4);
}

int *TrigramData::loadBinaryShared(TrigramData *this, DgnSharedMemStream *a2, int a3, unsigned int *a4)
{
  if (a3)
  {
    readObject((uint64_t)a2, this, a4);
    readObject((uint64_t)a2, (_DWORD *)this + 1, a4);
    readObject((uint64_t)a2, (_DWORD *)this + 2, a4);
    readSharedObject<short>(a2, (uint64_t)this + 16, a4);
    readSharedObject<short>(a2, (uint64_t)this + 32, a4);
    readSharedObject<short>(a2, (uint64_t)this + 48, a4);
    readSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    readSharedObject<short>(a2, (uint64_t)this + 80, a4);
    readSharedObject<short>(a2, (uint64_t)this + 96, a4);
    readSharedObject<unsigned char>(a2, (uint64_t)this + 112, a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 128), a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 144), a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 160), a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 176), a4);
    HuffmanDecoder<unsigned short,unsigned int>::readObject((unint64_t)this + 192, a2, a4);
  }
  else
  {
    readSharedObject<short>(a2, (uint64_t)this + 16, a4);
    readSharedObject<short>(a2, (uint64_t)this + 32, a4);
    readSharedObject<short>(a2, (uint64_t)this + 48, a4);
    readSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    readSharedObject<short>(a2, (uint64_t)this + 80, a4);
    readSharedObject<short>(a2, (uint64_t)this + 96, a4);
    readSharedObject<unsigned char>(a2, (uint64_t)this + 112, a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 128), a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 144), a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 160), a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 176), a4);
  }
  readSharedObject<unsigned int>(a2, (uint64_t)this + 280, a4);
  readSharedObject<short>(a2, (uint64_t)this + 296, a4);
  readSharedObject<short>(a2, (uint64_t)this + 312, a4);
  readSharedObject<unsigned char>(a2, (uint64_t)this + 328, a4);
  readSharedObject<short>(a2, (uint64_t)this + 344, a4);
  readSharedObject<short>(a2, (uint64_t)this + 360, a4);
  readSharedObject<unsigned char>(a2, (uint64_t)this + 376, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 392, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 408, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 424, a4);
  readSharedObject<short>(a2, (uint64_t)this + 440, a4);
  readSharedObject<short>(a2, (uint64_t)this + 456, a4);
  return readSharedObject<unsigned char>(a2, (uint64_t)this + 472, a4);
}

uint64_t TrigramData::computeLocalPreloadableBytes(TrigramData *this)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  int v20;

  v18 = *((unsigned int *)this + 14);
  if (v18 >= 2)
  {
    v2 = 0;
    v3 = 1;
    while (1)
    {
      if (v3 < *((unsigned int *)this + 14))
      {
        v20 = *(unsigned __int16 *)(*((_QWORD *)this + 6) + 2 * v3);
        if (*(_WORD *)(*((_QWORD *)this + 6) + 2 * v3))
          break;
      }
LABEL_33:
      if (++v3 == v18)
        return v2;
    }
    v4 = 0;
    v19 = v3;
    while (1)
    {
      v5 = (*(_DWORD *)(*((_QWORD *)this + 8) + 4 * v3) + v4);
      v6 = *(unsigned __int16 *)(*((_QWORD *)this + 37) + 2 * v5);
      if (((*(_DWORD *)(*((_QWORD *)this + 16) + 4 * (v5 >> 5)) >> v5) & 1) != 0)
      {
        v7 = *((_DWORD *)this + 10);
        if (*(_WORD *)(*((_QWORD *)this + 37) + 2 * v5))
        {
          v8 = 0;
          v9 = *(_DWORD *)(*((_QWORD *)this + 35) + 4 * v5);
          v10 = v6 << (v7 == 0);
          if ((unsigned __int16)(v6 + 1) <= 2u)
            v11 = 2;
          else
            v11 = (unsigned __int16)(v6 + 1);
          v12 = v11 - 1;
          do
          {
            if (v7)
              v13 = (_WORD *)(*((_QWORD *)this + 4) + 2 * *(unsigned __int8 *)(*((_QWORD *)this + 41) + v9));
            else
              v13 = (_WORD *)(*((_QWORD *)this + 39) + 2 * v9);
            if (*v13 != 20000)
              ++v8;
            ++v9;
            --v12;
          }
          while (v12);
LABEL_27:
          if (v8 <= 1)
            v16 = 0;
          else
            v16 = v10;
          v3 = v19;
          goto LABEL_32;
        }
      }
      else if (*(_WORD *)(*((_QWORD *)this + 37) + 2 * v5))
      {
        v14 = 0;
        v10 = 0;
        v8 = 0;
        do
        {
          if (TrigramData::getSearchScoreForIndex(this, v5, v14) != 20000)
          {
            if (*((_DWORD *)this + 10))
              v15 = 3;
            else
              v15 = 4;
            v10 += v15;
            ++v8;
          }
          ++v14;
        }
        while ((_DWORD)v6 != v14);
        goto LABEL_27;
      }
      v16 = 0;
LABEL_32:
      v2 += v16;
      if (++v4 == v20)
        goto LABEL_33;
    }
  }
  return 0;
}

uint64_t TrigramData::getSearchScoreForIndex(TrigramData *this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned int *)(*((_QWORD *)this + 35) + 4 * a2);
  if (*(_WORD *)(*((_QWORD *)this + 37) + 2 * a2) != 1)
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*((_QWORD *)this + 18) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      v3 = (*(_DWORD *)(*((_QWORD *)this + 53) + 4 * v3) + a3);
      if (!*((_DWORD *)this + 10))
      {
        v5 = *((_QWORD *)this + 57);
        goto LABEL_12;
      }
      v4 = *((_QWORD *)this + 59);
    }
    else
    {
      v3 = (v3 + a3);
      if (!*((_DWORD *)this + 10))
      {
        v5 = *((_QWORD *)this + 45);
        goto LABEL_12;
      }
      v4 = *((_QWORD *)this + 47);
    }
    v3 = *(unsigned __int8 *)(v4 + v3);
LABEL_11:
    v5 = *((_QWORD *)this + 4);
LABEL_12:
    LOWORD(v3) = *(_WORD *)(v5 + 2 * v3);
    return (unsigned __int16)v3;
  }
  if (*((_DWORD *)this + 10))
  {
    v3 = *(_DWORD *)(*((_QWORD *)this + 35) + 4 * a2);
    goto LABEL_11;
  }
  return (unsigned __int16)v3;
}

uint64_t TrigramData::initNewTrigramData(uint64_t a1, TrigramData *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, char a7)
{
  TrigramData *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  int v31;
  int v32;
  __int16 SearchSuccIdForIndex;
  int SearchScoreForIndex;
  __int16 v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  char SearchQuantizedScoreForIndex;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v58;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  _OWORD v68[5];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _WORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v9 = a2;
  v11 = *(unsigned int *)(a1 + 56);
  TrigramData::configureTrigramData(a2, 1, *(_DWORD *)(a1 + 24), *(__int16 **)(a1 + 16), *(_DWORD *)(a1 + 40), *(const unsigned __int16 **)(a1 + 32));
  TrigramData::preAllocateStaticTrigramData(v9, v11, *(_DWORD *)(a1 + 88));
  v12 = 336;
  if (!*(_DWORD *)(a1 + 8))
    v12 = 320;
  TrigramData::preAllocateDynamicTrigramData((uint64_t)v9, *(_DWORD *)(a1 + 352), *(_DWORD *)(a1 + v12));
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v73 = 0;
  v70 = 0;
  v71 = 0;
  if (v11 >= 2)
  {
    v13 = 1;
    v67 = (unint64_t)v9;
    v56 = a5;
    v62 = a4;
    v58 = v11;
    do
    {
      if (v13 < *(unsigned int *)(a1 + 56))
      {
        v14 = *(_QWORD *)(a1 + 48);
        if (*(_WORD *)(v14 + 2 * v13))
        {
          v66 = v13;
          v64 = *(unsigned __int16 *)(v14 + 2 * v13);
          TrigramData::allocTri1(v9, v13, v64);
          v15 = 0;
          v63 = 0;
          v60 = *(unsigned int *)(a4 + 8);
          do
          {
            v16 = (*(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v66) + v15);
            v65 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v16);
            LODWORD(v75) = 0;
            LODWORD(v73) = 0;
            LODWORD(v71) = 0;
            v17 = *(_QWORD *)(a1 + 296);
            v18 = *(unsigned __int16 *)(v17 + 2 * v16);
            if (((*(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * (v16 >> 5)) >> v16) & 1) != 0)
            {
              v19 = v18 << (*(_DWORD *)(a1 + 40) == 0);
              if (*(_WORD *)(v17 + 2 * v16))
              {
                v20 = 1;
                do
                {
                  v21 = *(_DWORD *)(a1 + 40);
                  v22 = v20 - 1;
                  v23 = (*(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * v16) + v22);
                  if (v21)
                  {
                    v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 328) + v23);
                    v24 = *(_QWORD *)(a1 + 32);
                  }
                  else
                  {
                    v24 = *(_QWORD *)(a1 + 312);
                  }
                  v25 = *(unsigned __int16 *)(v24 + 2 * v23);
                  if (v25 != 20000)
                  {
                    v26 = v75;
                    if ((_DWORD)v75 == HIDWORD(v75))
                    {
                      DgnPrimArray<short>::reallocElts((uint64_t)&v74, 1, 1);
                      v26 = v75;
                      v21 = *(_DWORD *)(a1 + 40);
                    }
                    *(_WORD *)(v74 + 2 * v26) = v20;
                    LODWORD(v75) = v26 + 1;
                    if (v21)
                    {
                      v27 = *(_BYTE *)(*(_QWORD *)(a1 + 328)
                                     + (*(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * v16) + v22));
                      v28 = v71;
                      if (v71 == (unint64_t)HIDWORD(v71))
                      {
                        DgnPrimArray<char>::reallocElts((uint64_t)&v70, 1, 1);
                        v28 = v71;
                      }
                      *(_BYTE *)(v70 + v28) = v27;
                      v29 = v71;
                      v30 = &v71;
                    }
                    else
                    {
                      v29 = v73;
                      if ((_DWORD)v73 == HIDWORD(v73))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)&v72, 1, 1);
                        v29 = v73;
                      }
                      v72[v29] = v25;
                      v30 = &v73;
                    }
                    *(_DWORD *)v30 = v29 + 1;
                  }
                  ++v20;
                }
                while (v18 >= v20);
              }
              v31 = 0;
            }
            else if (*(_WORD *)(v17 + 2 * v16))
            {
              v32 = 0;
              v19 = 0;
              v31 = 0;
              do
              {
                SearchSuccIdForIndex = TrigramData::getSearchSuccIdForIndex((TrigramData *)a1, v16, v32);
                SearchScoreForIndex = TrigramData::getSearchScoreForIndex((TrigramData *)a1, v16, v32);
                v35 = SearchScoreForIndex;
                if (SearchScoreForIndex != 20000)
                {
                  v36 = *(_DWORD *)(a1 + 40);
                  if (v36)
                    v37 = 3;
                  else
                    v37 = 4;
                  v38 = v75;
                  if ((_DWORD)v75 == HIDWORD(v75))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)&v74, 1, 1);
                    v38 = v75;
                    v36 = *(_DWORD *)(a1 + 40);
                  }
                  *(_WORD *)(v74 + 2 * v38) = SearchSuccIdForIndex;
                  LODWORD(v75) = v38 + 1;
                  if (v36)
                  {
                    SearchQuantizedScoreForIndex = TrigramData::getSearchQuantizedScoreForIndex((TrigramData *)a1, v16, v32);
                    v40 = v71;
                    if (v71 == (unint64_t)HIDWORD(v71))
                    {
                      DgnPrimArray<char>::reallocElts((uint64_t)&v70, 1, 1);
                      v40 = v71;
                    }
                    *(_BYTE *)(v70 + v40) = SearchQuantizedScoreForIndex;
                    v41 = v71;
                    v42 = &v71;
                  }
                  else
                  {
                    v41 = v73;
                    if ((_DWORD)v73 == HIDWORD(v73))
                    {
                      DgnPrimArray<short>::reallocElts((uint64_t)&v72, 1, 1);
                      v41 = v73;
                    }
                    v72[v41] = v35;
                    v42 = &v73;
                  }
                  ++v31;
                  v19 += v37;
                  *(_DWORD *)v42 = v41 + 1;
                }
                ++v32;
              }
              while ((_DWORD)v18 != v32);
              LODWORD(v18) = 0;
            }
            else
            {
              v31 = 0;
              v19 = 0;
            }
            v43 = (*(_DWORD *)(*(_QWORD *)(v67 + 64) + 4 * v66) + v15);
            *(_WORD *)(*(_QWORD *)(v67 + 80) + 2 * v43) = 0;
            if (*(_DWORD *)(v67 + 4))
              *(_BYTE *)(*(_QWORD *)(v67 + 112) + v43) = 0;
            else
              *(_WORD *)(*(_QWORD *)(v67 + 96) + 2 * v43) = 20000;
            TrigramData::tri2SetUnallocated(v67, v43);
            *(_WORD *)(*(_QWORD *)(v67 + 80) + 2 * v43) = v65;
            if (*(_DWORD *)(a1 + 24))
              *(_BYTE *)(*(_QWORD *)(v67 + 112) + v43) = *(_BYTE *)(*(_QWORD *)(a1 + 112) + v16);
            else
              *(_WORD *)(*(_QWORD *)(v67 + 96) + 2 * v43) = *(_WORD *)(*(_QWORD *)(a1 + 96) + 2 * v16);
            if ((_DWORD)v75)
            {
              if ((_DWORD)v75 == 1)
              {
                TrigramData::fillTrigramRecord(v67, v43, (uint64_t)&v74, &v72, &v70);
              }
              else
              {
                *(_DWORD *)(*(_QWORD *)(v67 + 144) + 4 * (v43 >> 5)) |= 1 << v43;
                *(_WORD *)(*(_QWORD *)(v67 + 296) + 2 * v43) = v75;
                HuffmanEncoder<unsigned short,unsigned int>::addSuccessors(a3, (uint64_t)&v74);
                v44 = v62;
                v45 = *(unsigned int *)(v62 + 8);
                if (v45 == *(_DWORD *)(v62 + 12))
                {
                  DgnArray<DiskNgramContext>::reallocElts(v62, 1, 1);
                  v44 = v62;
                  LODWORD(v45) = *(_DWORD *)(v62 + 8);
                }
                v46 = *(_QWORD *)v44 + 56 * v45;
                *(_QWORD *)v46 = 0;
                *(_QWORD *)(v46 + 8) = 0;
                *(_QWORD *)(v46 + 16) = 0;
                *(_QWORD *)(v46 + 24) = -1;
                strcpy((char *)(v46 + 32), " N");
                LODWORD(v46) = *(_DWORD *)(v44 + 8);
                *(_DWORD *)(v44 + 8) = v46 + 1;
                v47 = *(_QWORD *)v44 + 56 * v46;
                *(_BYTE *)(v47 + 34) = 3;
                *(_DWORD *)(v47 + 24) = v66;
                *(_DWORD *)(v47 + 28) = v65;
                *(_DWORD *)(v47 + 36) = v16;
                *(_DWORD *)(v47 + 40) = v43;
                *(_DWORD *)(v47 + 44) = v31;
                *(_DWORD *)(v47 + 48) = v18;
                *(_QWORD *)(v47 + 8) = v19;
                *(_QWORD *)(v47 + 16) = 0;
                v63 += v19;
              }
            }
            ++v15;
          }
          while (v15 != v64);
          if ((a7 & 1) != 0)
          {
            v13 = v66;
            v11 = v58;
            v48 = v63;
            v49 = v60;
            if (v66 >= *(unsigned int *)(v56 + 8))
            {
              v9 = (TrigramData *)v67;
              a4 = v62;
            }
            else
            {
              v50 = *(_QWORD *)(*(_QWORD *)v56 + 8 * v66);
              v9 = (TrigramData *)v67;
              a4 = v62;
              if (v50)
              {
                v48 = *(_QWORD *)(v50 + 8) + v63;
                *(_QWORD *)(v50 + 16) = v48;
              }
            }
          }
          else
          {
            v13 = v66;
            v9 = (TrigramData *)v67;
            a4 = v62;
            v48 = v63;
            v11 = v58;
            v49 = v60;
          }
          v51 = *(unsigned int *)(a4 + 8);
          if (v49 < v51)
          {
            v52 = *(double *)(*a6 + 8 * v13);
            v53 = (float *)(*(_QWORD *)a4 + 56 * v49 + 16);
            v54 = v51 - v49;
            do
            {
              *(v53 - 3) = v52;
              *(_QWORD *)v53 = v48;
              v53 += 14;
              --v54;
            }
            while (v54);
          }
        }
      }
      ++v13;
    }
    while (v13 != v11);
  }
  if (!*(_DWORD *)(a3 + 128))
    HuffmanEncoder<unsigned short,unsigned int>::addValue(a3, 0);
  v69 = 0;
  memset(v68, 0, sizeof(v68));
  HuffmanEncoder<unsigned short,unsigned int>::finalizeTables(a3, (unint64_t)v68);
  HuffmanDecoder<unsigned short,unsigned int>::operator=((unint64_t)v9 + 192, (uint64_t)v68);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)v68);
  TrigramData::compact((void **)v9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v70);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v72);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v74);
}

void sub_20997AA4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 104);
  _Unwind_Resume(a1);
}

_DWORD *TrigramData::configureTrigramData(_DWORD *this, int a2, unsigned int a3, __int16 *a4, unsigned int a5, const unsigned __int16 *a6)
{
  _DWORD *v10;
  _WORD **v11;
  unsigned int v12;
  _WORD *v13;
  uint64_t v14;
  __int16 v15;
  unsigned int v16;
  _WORD *v17;
  uint64_t v18;
  __int16 v19;

  v10 = this;
  *this = a2;
  this[1] = a3 != 0;
  this[2] = a5 != 0;
  v11 = (_WORD **)(this + 4);
  v12 = this[7];
  if (a3 <= v12)
  {
    this[6] = a3;
    if (!a3)
      goto LABEL_6;
  }
  else
  {
    this = (_DWORD *)DgnPrimArray<short>::reallocElts((uint64_t)(this + 4), a3 - v12, 0);
    v10[6] = a3;
  }
  v13 = *v11;
  v14 = a3;
  do
  {
    v15 = *a4++;
    *v13++ = v15;
    --v14;
  }
  while (v14);
LABEL_6:
  v16 = v10[11];
  if (a5 <= v16)
  {
    v10[10] = a5;
    if (!a5)
      return this;
  }
  else
  {
    this = (_DWORD *)DgnPrimArray<short>::reallocElts((uint64_t)(v10 + 8), a5 - v16, 0);
    v10[10] = a5;
  }
  v17 = (_WORD *)*((_QWORD *)v10 + 4);
  v18 = a5;
  do
  {
    v19 = *a6++;
    *v17++ = v19;
    --v18;
  }
  while (v18);
  return this;
}

void TrigramData::preAllocateStaticTrigramData(TrigramData *this, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;

  v6 = *((_DWORD *)this + 15);
  v7 = a2 >= v6;
  v8 = a2 - v6;
  if ((_DWORD)v8 != 0 && v7)
    DgnPrimArray<short>::reallocElts((uint64_t)this + 48, v8, 0);
  v9 = *((_DWORD *)this + 19);
  if (a2 > v9)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 64, a2 - v9, 0);
  v10 = *((_DWORD *)this + 23);
  if (a3 > v10)
    DgnPrimArray<short>::reallocElts((uint64_t)this + 80, a3 - v10, 0);
  if (*((_DWORD *)this + 1))
  {
    if (*((_DWORD *)this + 31) < a3)
    {
      v14 = 0;
      *((_DWORD *)this + 31) = realloc_array(*((_QWORD **)this + 14), &v14, a3, *((unsigned int *)this + 30), *((unsigned int *)this + 30), 1);
      *((_QWORD *)this + 14) = v14;
    }
  }
  else
  {
    v11 = *((_DWORD *)this + 27);
    if (a3 > v11)
      DgnPrimArray<short>::reallocElts((uint64_t)this + 96, a3 - v11, 0);
  }
  BitArray::preAllocate((TrigramData *)((char *)this + 128), a3);
  if (*(_DWORD *)this)
  {
    BitArray::preAllocate((TrigramData *)((char *)this + 144), a3);
    BitArray::preAllocate((TrigramData *)((char *)this + 160), a3);
    BitArray::preAllocate((TrigramData *)((char *)this + 176), a3);
  }
  v12 = *((_DWORD *)this + 73);
  if (a3 > v12)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 280, a3 - v12, 0);
  v13 = *((_DWORD *)this + 77);
  if (a3 > v13)
    DgnPrimArray<short>::reallocElts((uint64_t)this + 296, a3 - v13, 0);
}

uint64_t TrigramData::preAllocateDynamicTrigramData(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;

  v5 = this;
  v6 = *(_DWORD *)(this + 356);
  v7 = a2 >= v6;
  v8 = a2 - v6;
  if ((_DWORD)v8 != 0 && v7)
    this = DgnPrimArray<short>::reallocElts(this + 344, v8, 0);
  if (*(_DWORD *)(v5 + 8))
  {
    if (*(_DWORD *)(v5 + 388) < a2)
    {
      v11 = 0;
      this = realloc_array(*(_QWORD **)(v5 + 376), &v11, a2, *(unsigned int *)(v5 + 384), *(unsigned int *)(v5 + 384), 1);
      *(_DWORD *)(v5 + 388) = this;
      *(_QWORD *)(v5 + 376) = v11;
    }
    if (*(_DWORD *)(v5 + 340) < a3)
    {
      v11 = 0;
      this = realloc_array(*(_QWORD **)(v5 + 328), &v11, a3, *(unsigned int *)(v5 + 336), *(unsigned int *)(v5 + 336), 1);
      *(_DWORD *)(v5 + 340) = this;
      *(_QWORD *)(v5 + 328) = v11;
    }
  }
  else
  {
    v9 = *(_DWORD *)(v5 + 372);
    if (a2 > v9)
      this = DgnPrimArray<short>::reallocElts(v5 + 360, a2 - v9, 0);
    v10 = *(_DWORD *)(v5 + 324);
    if (a3 > v10)
      return DgnPrimArray<short>::reallocElts(v5 + 312, a3 - v10, 0);
  }
  return this;
}

uint64_t TrigramData::getSearchSuccIdForIndex(TrigramData *this, unsigned int a2, int a3)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;

  v3 = *(unsigned int *)(*((_QWORD *)this + 35) + 4 * a2);
  if (*(_WORD *)(*((_QWORD *)this + 37) + 2 * a2) == 1)
    return WORD1(v3);
  if (*(_DWORD *)this && ((*(_DWORD *)(*((_QWORD *)this + 18) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    v5 = *(_DWORD *)(*((_QWORD *)this + 53) + 4 * v3) + a3;
    v6 = *((_QWORD *)this + 55);
  }
  else
  {
    v5 = v3 + a3;
    v6 = *((_QWORD *)this + 43);
  }
  return *(unsigned __int16 *)(v6 + 2 * v5);
}

uint64_t TrigramData::getSearchQuantizedScoreForIndex(TrigramData *this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(*((_QWORD *)this + 35) + 4 * a2);
  if (*(_WORD *)(*((_QWORD *)this + 37) + 2 * a2) != 1)
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*((_QWORD *)this + 18) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      LODWORD(v3) = *(_DWORD *)(*((_QWORD *)this + 53) + 4 * v3) + a3;
      v4 = *((_QWORD *)this + 59);
    }
    else
    {
      LODWORD(v3) = v3 + a3;
      v4 = *((_QWORD *)this + 47);
    }
    LOBYTE(v3) = *(_BYTE *)(v4 + v3);
  }
  return v3;
}

unint64_t TrigramData::fillTrigramRecord(unint64_t a1, unsigned int a2, uint64_t a3, _WORD **a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  int v13;
  unint64_t v14;
  unint64_t v15;

  v10 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v10 != 1)
  {
    v11 = 3;
    if (!*(_DWORD *)(a1 + 40))
      v11 = 4;
    if (v11 * v10 >= (unint64_t)(*(unsigned __int16 *)(*(_QWORD *)a3 + 2 * (v10 - 1)) << (*(_DWORD *)(a1 + 40) == 0)))
      return TrigramData::fillTrigramRecordLookup(a1, a2, (unsigned __int16 **)a3, a4, a5);
  }
  result = TrigramData::allocSearch(a1, a2, (unsigned __int16)*(_DWORD *)(a3 + 8));
  v13 = *(_DWORD *)(a3 + 8);
  if (*(_DWORD *)(a1 + 40))
  {
    if (v13)
    {
      v14 = 0;
      do
      {
        TrigramData::setSearchSuccIdForIndex(a1, a2, v14, *(_WORD *)(*(_QWORD *)a3 + 2 * v14));
        result = TrigramData::setSearchQuantizedScoreForIndex(a1, a2, v14, *(unsigned __int8 *)(*a5 + v14));
        ++v14;
      }
      while (v14 < *(unsigned int *)(a3 + 8));
    }
  }
  else if (v13)
  {
    v15 = 0;
    do
    {
      TrigramData::setSearchSuccIdForIndex(a1, a2, v15, *(_WORD *)(*(_QWORD *)a3 + 2 * v15));
      result = TrigramData::setSearchScoreForIndex(a1, a2, v15, (unsigned __int16)(*a4)[v15]);
      ++v15;
    }
    while (v15 < *(unsigned int *)(a3 + 8));
  }
  return result;
}

uint64_t TrigramData::savePersistentAndFillInNewTrigramData(TrigramData *this, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  uint64_t v9;
  unsigned __int16 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  unsigned int v22;
  __int16 SearchSuccIdForIndex;
  int SearchScoreForIndex;
  __int16 v25;
  int v26;
  char SearchQuantizedScoreForIndex;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  unsigned __int16 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __int16 *v41;
  uint64_t v42;
  __int16 *v43;
  uint64_t v44;

  v43 = 0;
  v44 = 0;
  v41 = 0;
  v42 = 0;
  v39 = 0;
  v40 = 0;
  v9 = a6;
  if (((*(_DWORD *)(*((_QWORD *)this + 16) + 4 * (a6 >> 5)) >> a6) & 1) != 0)
  {
    if (*(_WORD *)(*((_QWORD *)this + 37) + 2 * a6))
    {
      v10 = 1;
      do
      {
        v11 = *((_DWORD *)this + 10);
        v12 = v10 - 1;
        v13 = (*(_DWORD *)(*((_QWORD *)this + 35) + 4 * v9) + v12);
        if (v11)
        {
          v13 = *(unsigned __int8 *)(*((_QWORD *)this + 41) + v13);
          v14 = *((_QWORD *)this + 4);
        }
        else
        {
          v14 = *((_QWORD *)this + 39);
        }
        v15 = *(unsigned __int16 *)(v14 + 2 * v13);
        if (v15 != 20000)
        {
          v16 = v44;
          if ((_DWORD)v44 == HIDWORD(v44))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v43, 1, 1);
            v16 = v44;
            v11 = *((_DWORD *)this + 10);
          }
          v43[v16] = v10;
          LODWORD(v44) = v16 + 1;
          if (v11)
          {
            v17 = *(_BYTE *)(*((_QWORD *)this + 41) + (*(_DWORD *)(*((_QWORD *)this + 35) + 4 * v9) + v12));
            v18 = v40;
            if (v40 == (unint64_t)HIDWORD(v40))
            {
              DgnPrimArray<char>::reallocElts((uint64_t)&v39, 1, 1);
              v18 = v40;
            }
            v39[v18] = v17;
            v19 = v40;
            v20 = &v40;
          }
          else
          {
            v19 = v42;
            if ((_DWORD)v42 == HIDWORD(v42))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)&v41, 1, 1);
              v19 = v42;
            }
            v41[v19] = v15;
            v20 = &v42;
          }
          *(_DWORD *)v20 = v19 + 1;
        }
        ++v10;
      }
      while (*(unsigned __int16 *)(*((_QWORD *)this + 37) + 2 * v9) >= v10);
    }
  }
  else if (*(_WORD *)(*((_QWORD *)this + 37) + 2 * a6))
  {
    v22 = 0;
    do
    {
      SearchSuccIdForIndex = TrigramData::getSearchSuccIdForIndex(this, a6, v22);
      SearchScoreForIndex = TrigramData::getSearchScoreForIndex(this, a6, v22);
      v25 = SearchScoreForIndex;
      if (SearchScoreForIndex != 20000)
      {
        v26 = v44;
        if ((_DWORD)v44 == HIDWORD(v44))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v43, 1, 1);
          v26 = v44;
        }
        v43[v26] = SearchSuccIdForIndex;
        LODWORD(v44) = v26 + 1;
        if (*((_DWORD *)this + 10))
        {
          SearchQuantizedScoreForIndex = TrigramData::getSearchQuantizedScoreForIndex(this, a6, v22);
          v28 = v40;
          if (v40 == (unint64_t)HIDWORD(v40))
          {
            DgnPrimArray<char>::reallocElts((uint64_t)&v39, 1, 1);
            v28 = v40;
          }
          v39[v28] = SearchQuantizedScoreForIndex;
          v29 = v40;
          v30 = &v40;
        }
        else
        {
          v29 = v42;
          if ((_DWORD)v42 == HIDWORD(v42))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v41, 1, 1);
            v29 = v42;
          }
          v41[v29] = v25;
          v30 = &v42;
        }
        *(_DWORD *)v30 = v29 + 1;
      }
      ++v22;
    }
    while (v22 < *(unsigned __int16 *)(*((_QWORD *)this + 37) + 2 * v9));
  }
  *(_DWORD *)(*(_QWORD *)(a4 + 280) + 4 * a7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  v37 = 0;
  v38 = 0;
  HuffmanEncoder<unsigned short,unsigned int>::encodeSuccessors(a5, (uint64_t *)&v43, (uint64_t)&v37);
  if (((4 * (v38 + 1)) | 2uLL) >= 2 * (unint64_t)(v44 + 1))
  {
    writeObjectArray(a2, v43, v44, a3);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a4 + 176) + 4 * (a7 >> 5)) |= 1 << a7;
    v36 = v38;
    writeObject(a2, &v36, a3);
    writeObjectArray(a2, v37, v38, a3);
  }
  if (*((_DWORD *)this + 10))
    writeObjectArray(a2, v39, v40, a3);
  else
    writeObjectArray(a2, v41, v42, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v37);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v41);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v43);
}

void sub_20997B398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  va_list va3;

  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t TrigramData::fillInFullyLoadedTrigramData(TrigramData *this, TrigramData *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int16 v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  unsigned int v20;
  __int16 SearchSuccIdForIndex;
  int SearchScoreForIndex;
  __int16 v23;
  unsigned int v24;
  char SearchQuantizedScoreForIndex;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  int v31;
  __int16 v32;
  unsigned int v33[2];
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *((unsigned int *)this + 14);
  TrigramData::configureTrigramData(a2, 0, *((_DWORD *)this + 6), *((__int16 **)this + 2), *((_DWORD *)this + 10), *((const unsigned __int16 **)this + 4));
  TrigramData::preAllocateStaticTrigramData(a2, v4, *((_DWORD *)this + 22));
  v5 = 336;
  if (!*((_DWORD *)this + 2))
    v5 = 320;
  TrigramData::preAllocateDynamicTrigramData((uint64_t)a2, *((_DWORD *)this + 88), *(_DWORD *)((char *)this + v5));
  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  v34 = 0;
  v35 = 0;
  if (v4 >= 2)
  {
    v6 = 1;
    do
    {
      *(_QWORD *)v33 = v6;
      if (v6 < *((unsigned int *)this + 14))
      {
        v31 = *(unsigned __int16 *)(*((_QWORD *)this + 6) + 2 * v6);
        if (*(_WORD *)(*((_QWORD *)this + 6) + 2 * v6))
        {
          TrigramData::allocTri1(a2, v6, v31);
          v7 = 0;
          do
          {
            v8 = (*(_DWORD *)(*((_QWORD *)this + 8) + 4 * *(_QWORD *)v33) + v7);
            v32 = *(_WORD *)(*((_QWORD *)this + 10) + 2 * v8);
            LODWORD(v39) = 0;
            LODWORD(v37) = 0;
            LODWORD(v35) = 0;
            if (((*(_DWORD *)(*((_QWORD *)this + 16) + 4 * (v8 >> 5)) >> v8) & 1) != 0)
            {
              if (*(_WORD *)(*((_QWORD *)this + 37) + 2 * v8))
              {
                v9 = 1;
                do
                {
                  v10 = *((_DWORD *)this + 10);
                  v11 = v9 - 1;
                  v12 = (*(_DWORD *)(*((_QWORD *)this + 35) + 4 * v8) + v11);
                  if (v10)
                  {
                    v12 = *(unsigned __int8 *)(*((_QWORD *)this + 41) + v12);
                    v13 = *((_QWORD *)this + 4);
                  }
                  else
                  {
                    v13 = *((_QWORD *)this + 39);
                  }
                  v14 = *(unsigned __int16 *)(v13 + 2 * v12);
                  if (v14 != 20000)
                  {
                    v15 = v39;
                    if ((_DWORD)v39 == HIDWORD(v39))
                    {
                      DgnPrimArray<short>::reallocElts((uint64_t)&v38, 1, 1);
                      v15 = v39;
                      v10 = *((_DWORD *)this + 10);
                    }
                    *(_WORD *)(v38 + 2 * v15) = v9;
                    LODWORD(v39) = v15 + 1;
                    if (v10)
                    {
                      v16 = *(_BYTE *)(*((_QWORD *)this + 41)
                                     + (*(_DWORD *)(*((_QWORD *)this + 35) + 4 * v8) + v11));
                      v17 = v35;
                      if (v35 == (unint64_t)HIDWORD(v35))
                      {
                        DgnPrimArray<char>::reallocElts((uint64_t)&v34, 1, 1);
                        v17 = v35;
                      }
                      *(_BYTE *)(v34 + v17) = v16;
                      v18 = v35;
                      v19 = &v35;
                    }
                    else
                    {
                      v18 = v37;
                      if ((_DWORD)v37 == HIDWORD(v37))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)&v36, 1, 1);
                        v18 = v37;
                      }
                      v36[v18] = v14;
                      v19 = &v37;
                    }
                    *(_DWORD *)v19 = v18 + 1;
                  }
                  ++v9;
                }
                while (*(unsigned __int16 *)(*((_QWORD *)this + 37) + 2 * v8) >= v9);
              }
            }
            else if (*(_WORD *)(*((_QWORD *)this + 37) + 2 * v8))
            {
              v20 = 0;
              do
              {
                SearchSuccIdForIndex = TrigramData::getSearchSuccIdForIndex(this, v8, v20);
                SearchScoreForIndex = TrigramData::getSearchScoreForIndex(this, v8, v20);
                v23 = SearchScoreForIndex;
                if (SearchScoreForIndex != 20000)
                {
                  v24 = v39;
                  if ((_DWORD)v39 == HIDWORD(v39))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)&v38, 1, 1);
                    v24 = v39;
                  }
                  *(_WORD *)(v38 + 2 * v24) = SearchSuccIdForIndex;
                  LODWORD(v39) = v24 + 1;
                  if (*((_DWORD *)this + 10))
                  {
                    SearchQuantizedScoreForIndex = TrigramData::getSearchQuantizedScoreForIndex(this, v8, v20);
                    v26 = v35;
                    if (v35 == (unint64_t)HIDWORD(v35))
                    {
                      DgnPrimArray<char>::reallocElts((uint64_t)&v34, 1, 1);
                      v26 = v35;
                    }
                    *(_BYTE *)(v34 + v26) = SearchQuantizedScoreForIndex;
                    v27 = v35;
                    v28 = &v35;
                  }
                  else
                  {
                    v27 = v37;
                    if ((_DWORD)v37 == HIDWORD(v37))
                    {
                      DgnPrimArray<short>::reallocElts((uint64_t)&v36, 1, 1);
                      v27 = v37;
                    }
                    v36[v27] = v23;
                    v28 = &v37;
                  }
                  *(_DWORD *)v28 = v27 + 1;
                }
                ++v20;
              }
              while (v20 < *(unsigned __int16 *)(*((_QWORD *)this + 37) + 2 * v8));
            }
            v29 = (*(_DWORD *)(*((_QWORD *)a2 + 8) + 4 * *(_QWORD *)v33) + v7);
            *(_WORD *)(*((_QWORD *)a2 + 10) + 2 * v29) = 0;
            if (*((_DWORD *)a2 + 1))
              *(_BYTE *)(*((_QWORD *)a2 + 14) + v29) = 0;
            else
              *(_WORD *)(*((_QWORD *)a2 + 12) + 2 * v29) = 20000;
            TrigramData::tri2SetUnallocated((uint64_t)a2, v29);
            *(_WORD *)(*((_QWORD *)a2 + 10) + 2 * v29) = v32;
            if (*((_DWORD *)this + 6))
              *(_BYTE *)(*((_QWORD *)a2 + 14) + v29) = *(_BYTE *)(*((_QWORD *)this + 14) + v8);
            else
              *(_WORD *)(*((_QWORD *)a2 + 12) + 2 * v29) = *(_WORD *)(*((_QWORD *)this + 12) + 2 * v8);
            if ((_DWORD)v39)
              TrigramData::fillTrigramRecord((unint64_t)a2, v29, (uint64_t)&v38, &v36, &v34);
            ++v7;
          }
          while (v7 != v31);
        }
      }
      v6 = *(_QWORD *)v33 + 1;
    }
    while (*(_QWORD *)v33 + 1 != v4);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v34);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v36);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v38);
}

void sub_20997B810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

unint64_t TrigramData::fillTrigramRecordLookup(unint64_t a1, unsigned int a2, unsigned __int16 **a3, _WORD **a4, _QWORD *a5)
{
  int v10;
  unint64_t result;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _WORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;

  v10 = (*a3)[*((_DWORD *)a3 + 2) - 1];
  result = TrigramData::allocLookup(a1, a2, v10);
  if (*(_DWORD *)(a1 + 40))
  {
    if (v10)
    {
      v12 = 0;
      v13 = (unsigned __int16)(v10 + 1);
      if (v13 <= 2)
        v13 = 2;
      v14 = v13 - 1;
      do
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 328) + (v12 + *(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * a2))) = 0;
        ++v12;
      }
      while (v14 != v12);
    }
    if (*((_DWORD *)a3 + 2))
    {
      v15 = 0;
      do
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 328) + (*a3)[v15] + *(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * a2) - 1) = *(_BYTE *)(*a5 + v15);
        ++v15;
      }
      while (v15 < *((unsigned int *)a3 + 2));
    }
  }
  else
  {
    if (v10)
    {
      v16 = *(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * a2);
      v17 = *(_QWORD *)(a1 + 312);
      if ((unsigned __int16)(v10 + 1) <= 2u)
        v18 = 2;
      else
        v18 = (unsigned __int16)(v10 + 1);
      v19 = v18 - 1;
      do
      {
        *(_WORD *)(v17 + 2 * v16++) = 20000;
        --v19;
      }
      while (v19);
    }
    v20 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v20)
    {
      v21 = *a3;
      v22 = *a4;
      v23 = *(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * a2);
      v24 = *(_QWORD *)(a1 + 312);
      do
      {
        v26 = *v21++;
        v25 = v26;
        LOWORD(v26) = *v22++;
        *(_WORD *)(v24 + 2 * (v25 + v23 - 1)) = v26;
        --v20;
      }
      while (v20);
    }
  }
  return result;
}

unint64_t TrigramData::allocSearch(unint64_t this, unsigned int a2, int a3)
{
  _DWORD *v3;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (_DWORD *)this;
  *(_WORD *)(*(_QWORD *)(this + 296) + 2 * a2) = a3;
  if (a3 == 1)
  {
    *(_DWORD *)(*(_QWORD *)(this + 280) + 4 * a2) = -65536;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(this + 280) + 4 * a2) = *(_DWORD *)(this + 352);
    v5 = *(_DWORD *)(this + 352) + a3;
    v6 = *(_DWORD *)(this + 356);
    if (v5 > v6)
    {
      this = DgnPrimArray<short>::reallocElts(this + 344, v5 - v6, 1);
      v5 = v3[88] + a3;
    }
    v3[88] = v5;
    if (v3[2])
    {
      v7 = v3[96] + a3;
      v8 = v3[97];
      if (v7 > v8)
      {
        this = DgnPrimArray<char>::reallocElts((uint64_t)(v3 + 94), v7 - v8, 1);
        v7 = v3[96] + a3;
      }
      v3[96] = v7;
    }
    else
    {
      v9 = v3[92] + a3;
      v10 = v3[93];
      if (v9 > v10)
      {
        this = DgnPrimArray<short>::reallocElts((uint64_t)(v3 + 90), v9 - v10, 1);
        v9 = v3[92] + a3;
      }
      v3[92] = v9;
    }
  }
  return this;
}

uint64_t TrigramData::setSearchSuccIdForIndex(uint64_t this, unsigned int a2, int a3, unsigned __int16 a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(this + 280);
  v5 = *(unsigned int *)(v4 + 4 * a2);
  if (*(_WORD *)(*(_QWORD *)(this + 296) + 2 * a2) == 1)
  {
    *(_DWORD *)(v4 + 4 * a2) = (unsigned __int16)*(_DWORD *)(v4 + 4 * a2) | (a4 << 16);
  }
  else
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*(_QWORD *)(this + 144) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      v6 = *(_DWORD *)(*(_QWORD *)(this + 424) + 4 * v5) + a3;
      v7 = *(_QWORD *)(this + 440);
    }
    else
    {
      v6 = v5 + a3;
      v7 = *(_QWORD *)(this + 344);
    }
    *(_WORD *)(v7 + 2 * v6) = a4;
  }
  return this;
}

uint64_t TrigramData::setSearchQuantizedScoreForIndex(uint64_t this, unsigned int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(this + 280);
  v5 = *(unsigned int *)(v4 + 4 * a2);
  if (*(_WORD *)(*(_QWORD *)(this + 296) + 2 * a2) == 1)
  {
    *(_DWORD *)(v4 + 4 * a2) = v5 & 0xFFFF0000 | a4;
  }
  else
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*(_QWORD *)(this + 144) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      v6 = *(_DWORD *)(*(_QWORD *)(this + 424) + 4 * v5) + a3;
      v7 = *(_QWORD *)(this + 472);
    }
    else
    {
      v6 = v5 + a3;
      v7 = *(_QWORD *)(this + 376);
    }
    *(_BYTE *)(v7 + v6) = a4;
  }
  return this;
}

uint64_t TrigramData::setSearchScoreForIndex(uint64_t this, unsigned int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(this + 280);
  v5 = *(unsigned int *)(v4 + 4 * a2);
  if (*(_WORD *)(*(_QWORD *)(this + 296) + 2 * a2) == 1)
  {
    *(_DWORD *)(v4 + 4 * a2) = v5 & 0xFFFF0000 | a4;
  }
  else
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*(_QWORD *)(this + 144) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      v6 = *(_DWORD *)(*(_QWORD *)(this + 424) + 4 * v5) + a3;
      v7 = *(_QWORD *)(this + 456);
    }
    else
    {
      v6 = v5 + a3;
      v7 = *(_QWORD *)(this + 360);
    }
    *(_WORD *)(v7 + 2 * v6) = a4;
  }
  return this;
}

unint64_t TrigramData::allocLookup(unint64_t this, unsigned int a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v5 = this;
  v6 = *(_QWORD *)(this + 280);
  v7 = a2;
  if (*(_DWORD *)(this + 8))
  {
    *(_DWORD *)(v6 + 4 * a2) = *(_DWORD *)(this + 336);
    v8 = *(_DWORD *)(this + 336) + a3;
    v9 = *(_DWORD *)(this + 340);
    if (v8 > v9)
    {
      this = DgnPrimArray<char>::reallocElts(this + 328, v8 - v9, 1);
      v8 = *(_DWORD *)(v5 + 336) + a3;
    }
    *(_DWORD *)(v5 + 336) = v8;
  }
  else
  {
    *(_DWORD *)(v6 + 4 * a2) = *(_DWORD *)(this + 320);
    v10 = *(_DWORD *)(this + 320) + a3;
    v11 = *(_DWORD *)(this + 324);
    if (v10 > v11)
    {
      this = DgnPrimArray<short>::reallocElts(this + 312, v10 - v11, 1);
      v10 = *(_DWORD *)(v5 + 320) + a3;
    }
    *(_DWORD *)(v5 + 320) = v10;
  }
  *(_WORD *)(*(_QWORD *)(v5 + 296) + 2 * v7) = a3;
  *(_DWORD *)(*(_QWORD *)(v5 + 128) + 4 * (a2 >> 5)) |= 1 << a2;
  return this;
}

uint64_t TrigramData::fillTrigramRecordPreload(TrigramData *this, unsigned int a2, uint64_t a3, __int16 **a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned __int16 *v15;
  unsigned int v16;
  uint64_t v17;
  __int16 *v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;

  v10 = 3;
  if (!*((_DWORD *)this + 10))
    v10 = 4;
  if (v10 * (unint64_t)*(unsigned int *)(a3 + 8) >= *(unsigned __int16 *)(*(_QWORD *)a3
                                                                                + 2
                                                                                * (*(_DWORD *)(a3 + 8) - 1)) << (*((_DWORD *)this + 10) == 0))
    return TrigramData::fillTrigramRecordLookup((unint64_t)this, a2, (unsigned __int16 **)a3, a4, a5);
  result = TrigramData::allocSearch((unint64_t)this, a2, (unsigned __int16)*(_DWORD *)(a3 + 8));
  v12 = *(unsigned int *)(a3 + 8);
  if (*((_DWORD *)this + 10))
  {
    if ((_DWORD)v12)
    {
      v13 = 0;
      do
      {
        v14 = v13 + *(_DWORD *)(*((_QWORD *)this + 35) + 4 * a2);
        *(_WORD *)(*((_QWORD *)this + 43) + 2 * v14) = *(_WORD *)(*(_QWORD *)a3 + 2 * v13);
        *(_BYTE *)(*((_QWORD *)this + 47) + v14) = *(_BYTE *)(*a5 + v13++);
      }
      while (v13 < *(unsigned int *)(a3 + 8));
    }
  }
  else if ((_DWORD)v12)
  {
    v15 = *(unsigned __int16 **)a3;
    v16 = *(_DWORD *)(*((_QWORD *)this + 35) + 4 * a2);
    v17 = *((_QWORD *)this + 43);
    v18 = *a4;
    v19 = *((_QWORD *)this + 45);
    do
    {
      v20 = *v15++;
      *(_WORD *)(v17 + 2 * v16) = v20;
      v21 = *v18++;
      *(_WORD *)(v19 + 2 * v16++) = v21;
      --v12;
    }
    while (v12);
  }
  return result;
}

_DWORD *TrigramData::addTrigramBackoffWeightQuantization(_DWORD *this, unsigned __int8 a2, __int16 a3)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v4 = this;
  this[1] = 1;
  v5 = (uint64_t)(this + 4);
  v6 = this[6];
  if (!v6)
  {
    if (this[7])
    {
      v7 = 0;
    }
    else
    {
      this = (_DWORD *)DgnPrimArray<short>::reallocElts((uint64_t)(this + 4), 1, 1);
      v7 = v4[6];
    }
    *(_WORD *)(*((_QWORD *)v4 + 2) + 2 * v7) = 20000;
    v6 = v7 + 1;
    v4[6] = v6;
  }
  if (v6 == v4[7])
  {
    this = (_DWORD *)DgnPrimArray<short>::reallocElts(v5, 1, 1);
    v6 = v4[6];
  }
  *(_WORD *)(*((_QWORD *)v4 + 2) + 2 * v6) = a3;
  v4[6] = v6 + 1;
  return this;
}

_DWORD *TrigramData::addTrigramScoreQuantization(_DWORD *this, unsigned __int8 a2, __int16 a3)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v4 = this;
  this[2] = 1;
  v5 = (uint64_t)(this + 8);
  v6 = this[10];
  if (!v6)
  {
    if (this[11])
    {
      v7 = 0;
    }
    else
    {
      this = (_DWORD *)DgnPrimArray<short>::reallocElts((uint64_t)(this + 8), 1, 1);
      v7 = v4[10];
    }
    *(_WORD *)(*((_QWORD *)v4 + 4) + 2 * v7) = 20000;
    v6 = v7 + 1;
    v4[10] = v6;
  }
  if (v6 == v4[11])
  {
    this = (_DWORD *)DgnPrimArray<short>::reallocElts(v5, 1, 1);
    v6 = v4[10];
  }
  *(_WORD *)(*((_QWORD *)v4 + 4) + 2 * v6) = a3;
  v4[10] = v6 + 1;
  return this;
}

unint64_t TrigramData::allocLoaded(unint64_t this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v3 = this;
  v4 = *(_QWORD *)(this + 280);
  v5 = a2;
  v6 = *(_DWORD *)(v4 + 4 * a2);
  *(_DWORD *)(v4 + 4 * a2) = *(_DWORD *)(this + 416);
  v7 = *(_DWORD *)(this + 416);
  if (v7 == *(_DWORD *)(this + 420))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(this + 408, 1, 1);
    v7 = *(_DWORD *)(v3 + 416);
  }
  *(_DWORD *)(*(_QWORD *)(v3 + 408) + 4 * v7) = v6;
  ++*(_DWORD *)(v3 + 416);
  v8 = *(_DWORD *)(v3 + 448);
  v9 = *(_DWORD *)(v3 + 432);
  if (v9 == *(_DWORD *)(v3 + 436))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(v3 + 424, 1, 1);
    v9 = *(_DWORD *)(v3 + 432);
  }
  *(_DWORD *)(*(_QWORD *)(v3 + 424) + 4 * v9) = v8;
  ++*(_DWORD *)(v3 + 432);
  v10 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 296) + 2 * v5);
  v11 = *(_DWORD *)(v3 + 448) + v10;
  v12 = *(_DWORD *)(v3 + 452);
  if (v11 > v12)
  {
    this = DgnPrimArray<short>::reallocElts(v3 + 440, v11 - v12, 1);
    v11 = *(_DWORD *)(v3 + 448) + v10;
  }
  *(_DWORD *)(v3 + 448) = v11;
  if (*(_DWORD *)(v3 + 8))
  {
    v13 = *(_DWORD *)(v3 + 480) + v10;
    v14 = *(_DWORD *)(v3 + 484);
    if (v13 > v14)
    {
      this = DgnPrimArray<char>::reallocElts(v3 + 472, v13 - v14, 1);
      v13 = *(_DWORD *)(v3 + 480) + v10;
    }
    *(_DWORD *)(v3 + 480) = v13;
  }
  else
  {
    v15 = *(_DWORD *)(v3 + 464) + v10;
    v16 = *(_DWORD *)(v3 + 468);
    if (v15 > v16)
    {
      this = DgnPrimArray<short>::reallocElts(v3 + 456, v15 - v16, 1);
      v15 = *(_DWORD *)(v3 + 464) + v10;
    }
    *(_DWORD *)(v3 + 464) = v15;
  }
  *(_DWORD *)(*(_QWORD *)(v3 + 160) + 4 * (a2 >> 5)) |= 1 << a2;
  v17 = *(_DWORD *)(v3 + 400);
  if (v17 == *(_DWORD *)(v3 + 404))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(v3 + 392, 1, 1);
    v17 = *(_DWORD *)(v3 + 400);
  }
  *(_DWORD *)(*(_QWORD *)(v3 + 392) + 4 * v17) = a2;
  ++*(_DWORD *)(v3 + 400);
  return this;
}

void QuadgramData::QuadgramData(QuadgramData *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  DgnString::DgnString((QuadgramData *)((char *)this + 112));
  DgnString::DgnString((QuadgramData *)((char *)this + 128));
  DgnString::DgnString((QuadgramData *)((char *)this + 144));
  *((_OWORD *)this + 10) = 0u;
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_QWORD *)this + 70) = 0;
  QuadgramData::allocQuad1(this, 0, 0);
}

void sub_20997C188(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  BitArray *v3;
  BitArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 96) = v6;
  *(_QWORD *)(v7 - 88) = v5;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 552);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 536);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 520);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 504);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 488);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 472);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 456);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 440);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 424);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 408);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 392);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 376);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 360);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 344);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 328);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 312);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 296);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 280);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 248);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder(*(_QWORD *)(v7 - 96));
  BitArray::~BitArray(*(BitArray **)(v7 - 88));
  BitArray::~BitArray(v4);
  BitArray::~BitArray(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 80);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void QuadgramData::allocQuad1(QuadgramData *this, unsigned int a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v6 = *((_DWORD *)this + 14);
  if (v6 <= a2)
  {
    do
    {
      if (v6 == *((_DWORD *)this + 15))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)this + 48, 1, 1);
        v6 = *((_DWORD *)this + 14);
      }
      *(_WORD *)(*((_QWORD *)this + 6) + 2 * v6) = 0;
      *((_DWORD *)this + 14) = v6 + 1;
      v8 = *((unsigned int *)this + 18);
      if (v8 == *((_DWORD *)this + 19))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 64, 1, 1);
        v8 = *((unsigned int *)this + 18);
      }
      v7 = *((_QWORD *)this + 8);
      *(_DWORD *)(v7 + 4 * v8) = -1;
      ++*((_DWORD *)this + 18);
      v6 = *((_DWORD *)this + 14);
    }
    while (v6 <= a2);
  }
  else
  {
    v7 = *((_QWORD *)this + 8);
  }
  *(_WORD *)(*((_QWORD *)this + 6) + 2 * a2) = a3;
  *(_DWORD *)(v7 + 4 * a2) = *((_DWORD *)this + 22);
  v9 = *((_DWORD *)this + 23);
  v10 = *((_DWORD *)this + 22) + a3;
  if (v10 > v9)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 80, v10 - v9, 1);
    v10 = *((_DWORD *)this + 22) + a3;
  }
  *((_DWORD *)this + 22) = v10;
  if (*(_DWORD *)this)
  {
    BitArray::addSize((QuadgramData *)((char *)this + 112), a3);
    BitArray::addSize((QuadgramData *)((char *)this + 128), a3);
    BitArray::addSize((QuadgramData *)((char *)this + 144), a3);
  }
  v11 = *((_DWORD *)this + 64) + a3;
  v12 = *((_DWORD *)this + 65);
  if (v11 > v12)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 248, v11 - v12, 1);
    v11 = *((_DWORD *)this + 64) + a3;
  }
  *((_DWORD *)this + 64) = v11;
  v13 = *((_DWORD *)this + 27);
  v14 = *((_DWORD *)this + 26) + a3;
  if (v14 > v13)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 96, v14 - v13, 1);
    v14 = *((_DWORD *)this + 26) + a3;
  }
  *((_DWORD *)this + 26) = v14;
}

void QuadgramData::~QuadgramData(QuadgramData *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 552);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 536);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 520);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 504);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 488);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 472);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 456);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 440);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 424);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 408);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 392);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 360);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 344);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 312);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 280);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 160);
  BitArray::~BitArray((QuadgramData *)((char *)this + 144));
  BitArray::~BitArray((QuadgramData *)((char *)this + 128));
  BitArray::~BitArray((QuadgramData *)((char *)this + 112));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);
}

void **QuadgramData::compact(void **this)
{
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 6));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 8));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 10));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 12));
  BitArray::compact((BitArray *)(this + 14));
  BitArray::compact((BitArray *)(this + 16));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 31));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 33));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 35));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 37));
  DgnPrimArray<unsigned char>::compact(this + 39);
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 41));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 43));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 45));
  DgnPrimArray<unsigned char>::compact(this + 47);
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 49));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 51));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 53));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 55));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 57));
  DgnPrimArray<unsigned char>::compact(this + 59);
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 61));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 63));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 65));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 67));
  return DgnPrimArray<unsigned char>::compact(this + 69);
}

void QuadgramData::printSize(QuadgramData *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  int v161;
  unsigned int v162;
  BOOL v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  int v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  void *v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  uint64_t v327;
  int v328;
  unsigned int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  void *v343;
  uint64_t v344;
  void *v345;
  int v346;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2771, (DgnString *)&v345);
  if (v346)
    v16 = v345;
  else
    v16 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7B4F4, a3, &unk_209A7B4F4, v16);
  DgnString::~DgnString((DgnString *)&v345);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7B4F4);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v27 = v345;
  else
    v27 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A7B4F4, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v32 = v345;
  else
    v32 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A7B4F4, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v37 = v345;
  else
    v37 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A7B4F4, (34 - a3), (34 - a3), v37, 4, 4, 0);
  v344 = a3;
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v38 = 12;
  else
    v38 = 16;
  v39 = *((unsigned int *)this + 6);
  v40 = *((_DWORD *)this + 7);
  if (v40 >= v39)
  {
    v41 = 0;
    if ((int)v39 > 0)
      v38 = (v38 | 2) + 2 * (v39 - 1);
    v42 = v38 + 2 * (v40 - v39);
  }
  else
  {
    v41 = 2 * v39;
    v42 = v38;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v47 = v345;
  else
    v47 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, v21, &unk_209A7B4F4, v22, v22, v47, v42, v38, v41);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v42;
  *a5 += v38;
  *a6 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v48 = 12;
  else
    v48 = 16;
  v49 = *((unsigned int *)this + 10);
  v50 = *((_DWORD *)this + 11);
  if (v50 >= v49)
  {
    v51 = 0;
    if ((int)v49 > 0)
      v48 = (v48 | 2) + 2 * (v49 - 1);
    v52 = v48 + 2 * (v50 - v49);
  }
  else
  {
    v51 = 2 * v49;
    v52 = v48;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v57 = v345;
  else
    v57 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v21, &unk_209A7B4F4, v22, v22, v57, v52, v48, v51);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v52;
  *a5 += v48;
  *a6 += v51;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v58 = 12;
  else
    v58 = 16;
  v59 = *((unsigned int *)this + 14);
  v60 = *((_DWORD *)this + 15);
  if (v60 >= v59)
  {
    v61 = 0;
    if ((int)v59 > 0)
      v58 = (v58 | 2) + 2 * (v59 - 1);
    v62 = v58 + 2 * (v60 - v59);
  }
  else
  {
    v61 = 2 * v59;
    v62 = v58;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v67 = v345;
  else
    v67 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, v21, &unk_209A7B4F4, v22, v22, v67, v62, v58, v61);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v62;
  *a5 += v58;
  *a6 += v61;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v68 = 12;
  else
    v68 = 16;
  v69 = *((unsigned int *)this + 18);
  v70 = *((_DWORD *)this + 19);
  if (v70 >= v69)
  {
    v71 = 0;
    if ((int)v69 > 0)
      v68 += 4 * (v69 - 1) + 4;
    v72 = v68 + 4 * (v70 - v69);
  }
  else
  {
    v71 = 4 * v69;
    v72 = v68;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v77 = v345;
  else
    v77 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v73, v74, v75, v76, v21, &unk_209A7B4F4, v22, v22, v77, v72, v68, v71);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v72;
  *a5 += v68;
  *a6 += v71;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v78 = 12;
  else
    v78 = 16;
  v79 = *((unsigned int *)this + 22);
  v80 = *((_DWORD *)this + 23);
  if (v80 >= v79)
  {
    v81 = 0;
    if ((int)v79 > 0)
      v78 = (v78 | 2) + 2 * (v79 - 1);
    v82 = v78 + 2 * (v80 - v79);
  }
  else
  {
    v81 = 2 * v79;
    v82 = v78;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v87 = v345;
  else
    v87 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A7B4F4, v22, v22, v87, v82, v78, v81);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v82;
  *a5 += v78;
  *a6 += v81;
  v88 = BitArray::sizeObject((uint64_t)this + 112, 0);
  v89 = BitArray::sizeObject((uint64_t)this + 112, 1);
  v90 = BitArray::sizeObject((uint64_t)this + 112, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v95 = v345;
  else
    v95 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, v21, &unk_209A7B4F4, v22, v22, v95, v88, v89, v90);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v88;
  *a5 += v89;
  *a6 += v90;
  v96 = BitArray::sizeObject((uint64_t)this + 128, 0);
  v97 = BitArray::sizeObject((uint64_t)this + 128, 1);
  v98 = BitArray::sizeObject((uint64_t)this + 128, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v103 = v345;
  else
    v103 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v99, v100, v101, v102, v21, &unk_209A7B4F4, v22, v22, v103, v96, v97, v98);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v96;
  *a5 += v97;
  *a6 += v98;
  v104 = BitArray::sizeObject((uint64_t)this + 144, 0);
  v105 = BitArray::sizeObject((uint64_t)this + 144, 1);
  v106 = BitArray::sizeObject((uint64_t)this + 144, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v111 = v345;
  else
    v111 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v107, v108, v109, v110, v21, &unk_209A7B4F4, v22, v22, v111, v104, v105, v106);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v104;
  *a5 += v105;
  *a6 += v106;
  v112 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 160, 0);
  v113 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 160, 1);
  v114 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 160, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v119 = v345;
  else
    v119 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v21, &unk_209A7B4F4, v22, v22, v119, v112, v113, v114);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v112;
  *a5 += v113;
  *a6 += v114;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v120 = 12;
  else
    v120 = 16;
  v121 = *((unsigned int *)this + 64);
  v122 = *((_DWORD *)this + 65);
  if (v122 >= v121)
  {
    v123 = 0;
    if ((int)v121 > 0)
      v120 += 4 * (v121 - 1) + 4;
    v124 = v120 + 4 * (v122 - v121);
  }
  else
  {
    v123 = 4 * v121;
    v124 = v120;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v129 = v345;
  else
    v129 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v125, v126, v127, v128, v21, &unk_209A7B4F4, v22, v22, v129, v124, v120, v123);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v124;
  *a5 += v120;
  *a6 += v123;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v130 = 12;
  else
    v130 = 16;
  v131 = *((unsigned int *)this + 26);
  v132 = *((_DWORD *)this + 27);
  if (v132 >= v131)
  {
    v133 = 0;
    if ((int)v131 > 0)
      v130 = (v130 | 2) + 2 * (v131 - 1);
    v134 = v130 + 2 * (v132 - v131);
  }
  else
  {
    v133 = 2 * v131;
    v134 = v130;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v139 = v345;
  else
    v139 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v21, &unk_209A7B4F4, v22, v22, v139, v134, v130, v133);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v134;
  *a5 += v130;
  *a6 += v133;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v140 = 12;
  else
    v140 = 16;
  v141 = *((unsigned int *)this + 68);
  v142 = *((_DWORD *)this + 69);
  if (v142 >= v141)
  {
    v143 = 0;
    if ((int)v141 > 0)
      v140 = (v140 | 2) + 2 * (v141 - 1);
    v144 = v140 + 2 * (v142 - v141);
  }
  else
  {
    v143 = 2 * v141;
    v144 = v140;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v149 = v345;
  else
    v149 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v21, &unk_209A7B4F4, v22, v22, v149, v144, v140, v143);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v144;
  *a5 += v140;
  *a6 += v143;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v150 = 12;
  else
    v150 = 16;
  v151 = *((unsigned int *)this + 76);
  v152 = *((_DWORD *)this + 77);
  if (v152 >= v151)
  {
    v153 = 0;
    if ((int)v151 > 0)
      v150 = (v150 | 2) + 2 * (v151 - 1);
    v154 = v150 + 2 * (v152 - v151);
  }
  else
  {
    v153 = 2 * v151;
    v154 = v150;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v159 = v345;
  else
    v159 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v155, v156, v157, v158, v21, &unk_209A7B4F4, v22, v22, v159, v154, v150, v153);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v154;
  *a5 += v150;
  *a6 += v153;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v160 = 12;
  else
    v160 = 16;
  v161 = *((_DWORD *)this + 80);
  v162 = *((_DWORD *)this + 81);
  v163 = v162 >= v161;
  v164 = v162 - v161;
  if (v163)
  {
    v166 = v161 & ~(v161 >> 31);
    v161 = 0;
    v165 = v160 + v166;
    v160 += v166 + v164;
  }
  else
  {
    v165 = v160;
  }
  v167 = v161;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v172 = v345;
  else
    v172 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v168, v169, v170, v171, v21, &unk_209A7B4F4, v22, v22, v172, v160, v165, v167);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v160;
  *a5 += v165;
  *a6 += v167;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v173 = 12;
  else
    v173 = 16;
  v174 = *((unsigned int *)this + 84);
  v175 = *((_DWORD *)this + 85);
  if (v175 >= v174)
  {
    v176 = 0;
    if ((int)v174 > 0)
      v173 += 4 * (v174 - 1) + 4;
    v177 = v173 + 4 * (v175 - v174);
  }
  else
  {
    v176 = 4 * v174;
    v177 = v173;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v182 = v345;
  else
    v182 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v178, v179, v180, v181, v21, &unk_209A7B4F4, v22, v22, v182, v177, v173, v176);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v177;
  *a5 += v173;
  *a6 += v176;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v183 = 12;
  else
    v183 = 16;
  v184 = *((unsigned int *)this + 72);
  v185 = *((_DWORD *)this + 73);
  if (v185 >= v184)
  {
    v186 = 0;
    if ((int)v184 > 0)
      v183 = (v183 | 2) + 2 * (v184 - 1);
    v187 = v183 + 2 * (v185 - v184);
  }
  else
  {
    v186 = 2 * v184;
    v187 = v183;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v192 = v345;
  else
    v192 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v188, v189, v190, v191, v21, &unk_209A7B4F4, v22, v22, v192, v187, v183, v186);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v187;
  *a5 += v183;
  *a6 += v186;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v193 = 12;
  else
    v193 = 16;
  v194 = *((unsigned int *)this + 88);
  v195 = *((_DWORD *)this + 89);
  if (v195 >= v194)
  {
    v196 = 0;
    if ((int)v194 > 0)
      v193 = (v193 | 2) + 2 * (v194 - 1);
    v197 = v193 + 2 * (v195 - v194);
  }
  else
  {
    v196 = 2 * v194;
    v197 = v193;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v202 = v345;
  else
    v202 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v198, v199, v200, v201, v21, &unk_209A7B4F4, v22, v22, v202, v197, v193, v196);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v197;
  *a5 += v193;
  *a6 += v196;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v203 = 12;
  else
    v203 = 16;
  v204 = *((unsigned int *)this + 92);
  v205 = *((_DWORD *)this + 93);
  if (v205 >= v204)
  {
    v206 = 0;
    if ((int)v204 > 0)
      v203 = (v203 | 2) + 2 * (v204 - 1);
    v207 = v203 + 2 * (v205 - v204);
  }
  else
  {
    v206 = 2 * v204;
    v207 = v203;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v212 = v345;
  else
    v212 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v208, v209, v210, v211, v21, &unk_209A7B4F4, v22, v22, v212, v207, v203, v206);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v207;
  *a5 += v203;
  *a6 += v206;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v213 = 12;
  else
    v213 = 16;
  v214 = *((_DWORD *)this + 96);
  v215 = *((_DWORD *)this + 97);
  v163 = v215 >= v214;
  v216 = v215 - v214;
  if (v163)
  {
    v218 = v214 & ~(v214 >> 31);
    v214 = 0;
    v217 = v213 + v218;
    v213 += v218 + v216;
  }
  else
  {
    v217 = v213;
  }
  v219 = v214;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v224 = v345;
  else
    v224 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v21, &unk_209A7B4F4, v22, v22, v224, v213, v217, v219);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v213;
  *a5 += v217;
  *a6 += v219;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v225 = 12;
  else
    v225 = 16;
  v226 = *((unsigned int *)this + 100);
  v227 = *((_DWORD *)this + 101);
  if (v227 >= v226)
  {
    v228 = 0;
    if ((int)v226 > 0)
      v225 += 4 * (v226 - 1) + 4;
    v229 = v225 + 4 * (v227 - v226);
  }
  else
  {
    v228 = 4 * v226;
    v229 = v225;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v234 = v345;
  else
    v234 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v230, v231, v232, v233, v21, &unk_209A7B4F4, v22, v22, v234, v229, v225, v228);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v229;
  *a5 += v225;
  *a6 += v228;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v235 = 12;
  else
    v235 = 16;
  v236 = *((unsigned int *)this + 104);
  v237 = *((_DWORD *)this + 105);
  if (v237 >= v236)
  {
    v238 = 0;
    if ((int)v236 > 0)
      v235 += 4 * (v236 - 1) + 4;
    v239 = v235 + 4 * (v237 - v236);
  }
  else
  {
    v238 = 4 * v236;
    v239 = v235;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v244 = v345;
  else
    v244 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v240, v241, v242, v243, v21, &unk_209A7B4F4, v22, v22, v244, v239, v235, v238);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v239;
  *a5 += v235;
  *a6 += v238;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v245 = 12;
  else
    v245 = 16;
  v246 = *((unsigned int *)this + 108);
  v247 = *((_DWORD *)this + 109);
  if (v247 >= v246)
  {
    v248 = 0;
    if ((int)v246 > 0)
      v245 += 4 * (v246 - 1) + 4;
    v249 = v245 + 4 * (v247 - v246);
  }
  else
  {
    v248 = 4 * v246;
    v249 = v245;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v254 = v345;
  else
    v254 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v250, v251, v252, v253, v21, &unk_209A7B4F4, v22, v22, v254, v249, v245, v248);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v249;
  *a5 += v245;
  *a6 += v248;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v255 = 12;
  else
    v255 = 16;
  v256 = *((unsigned int *)this + 112);
  v257 = *((_DWORD *)this + 113);
  if (v257 >= v256)
  {
    v258 = 0;
    if ((int)v256 > 0)
      v255 = (v255 | 2) + 2 * (v256 - 1);
    v259 = v255 + 2 * (v257 - v256);
  }
  else
  {
    v258 = 2 * v256;
    v259 = v255;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v264 = v345;
  else
    v264 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v260, v261, v262, v263, v21, &unk_209A7B4F4, v22, v22, v264, v259, v255, v258);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v259;
  *a5 += v255;
  *a6 += v258;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v265 = 12;
  else
    v265 = 16;
  v266 = *((unsigned int *)this + 116);
  v267 = *((_DWORD *)this + 117);
  if (v267 >= v266)
  {
    v268 = 0;
    if ((int)v266 > 0)
      v265 = (v265 | 2) + 2 * (v266 - 1);
    v269 = v265 + 2 * (v267 - v266);
  }
  else
  {
    v268 = 2 * v266;
    v269 = v265;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v274 = v345;
  else
    v274 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v270, v271, v272, v273, v21, &unk_209A7B4F4, v22, v22, v274, v269, v265, v268);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v269;
  *a5 += v265;
  *a6 += v268;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v275 = 12;
  else
    v275 = 16;
  v276 = *((_DWORD *)this + 120);
  v277 = *((_DWORD *)this + 121);
  v163 = v277 >= v276;
  v278 = v277 - v276;
  if (v163)
  {
    v280 = v276 & ~(v276 >> 31);
    v276 = 0;
    v279 = v275 + v280;
    v275 += v280 + v278;
  }
  else
  {
    v279 = v275;
  }
  v281 = v276;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v286 = v345;
  else
    v286 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v282, v283, v284, v285, v21, &unk_209A7B4F4, v22, v22, v286, v275, v279, v281);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v275;
  *a5 += v279;
  *a6 += v281;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v287 = 12;
  else
    v287 = 16;
  v288 = *((unsigned int *)this + 124);
  v289 = *((_DWORD *)this + 125);
  if (v289 >= v288)
  {
    v290 = 0;
    if ((int)v288 > 0)
      v287 += 4 * (v288 - 1) + 4;
    v291 = v287 + 4 * (v289 - v288);
  }
  else
  {
    v290 = 4 * v288;
    v291 = v287;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v296 = v345;
  else
    v296 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v292, v293, v294, v295, v21, &unk_209A7B4F4, v22, v22, v296, v291, v287, v290);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v291;
  *a5 += v287;
  *a6 += v290;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v297 = 12;
  else
    v297 = 16;
  v298 = *((unsigned int *)this + 128);
  v299 = *((_DWORD *)this + 129);
  if (v299 >= v298)
  {
    v300 = 0;
    if ((int)v298 > 0)
      v297 = (v297 | 2) + 2 * (v298 - 1);
    v301 = v297 + 2 * (v299 - v298);
  }
  else
  {
    v300 = 2 * v298;
    v301 = v297;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v306 = v345;
  else
    v306 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v302, v303, v304, v305, v21, &unk_209A7B4F4, v22, v22, v306, v301, v297, v300);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v301;
  *a5 += v297;
  *a6 += v300;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v307 = 12;
  else
    v307 = 16;
  v308 = *((unsigned int *)this + 132);
  v309 = *((_DWORD *)this + 133);
  if (v309 >= v308)
  {
    v310 = 0;
    if ((int)v308 > 0)
      v307 = (v307 | 2) + 2 * (v308 - 1);
    v311 = v307 + 2 * (v309 - v308);
  }
  else
  {
    v310 = 2 * v308;
    v311 = v307;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v316 = v345;
  else
    v316 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v312, v313, v314, v315, v21, &unk_209A7B4F4, v22, v22, v316, v311, v307, v310);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v311;
  *a5 += v307;
  *a6 += v310;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v317 = 12;
  else
    v317 = 16;
  v318 = *((unsigned int *)this + 136);
  v319 = *((_DWORD *)this + 137);
  if (v319 >= v318)
  {
    v320 = 0;
    if ((int)v318 > 0)
      v317 = (v317 | 2) + 2 * (v318 - 1);
    v321 = v317 + 2 * (v319 - v318);
  }
  else
  {
    v320 = 2 * v318;
    v321 = v317;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v326 = v345;
  else
    v326 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v322, v323, v324, v325, v21, &unk_209A7B4F4, v22, v22, v326, v321, v317, v320);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v321;
  *a5 += v317;
  *a6 += v320;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v327 = 12;
  else
    v327 = 16;
  v328 = *((_DWORD *)this + 140);
  v329 = *((_DWORD *)this + 141);
  v163 = v329 >= v328;
  v330 = v329 - v328;
  if (v163)
  {
    v332 = v328 & ~(v328 >> 31);
    v328 = 0;
    v331 = v327 + v332;
    v327 += v332 + v330;
  }
  else
  {
    v331 = v327;
  }
  v333 = v328;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346)
    v338 = v345;
  else
    v338 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v334, v335, v336, v337, v21, &unk_209A7B4F4, v22, v22, v338, v327, v331, v333);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v327;
  *a5 += v331;
  *a6 += v333;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2776, (DgnString *)&v345);
  if (v346)
    v343 = v345;
  else
    v343 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v339, v340, v341, v342, v344, &unk_209A7B4F4, (35 - v344), (35 - v344), v343, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v345);
}

void sub_20997DF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void **QuadgramData::copyQuadgramData(QuadgramData *this, const QuadgramData *a2)
{
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 16, (uint64_t *)a2 + 2, 0, *((_DWORD *)a2 + 6));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 32, (uint64_t *)a2 + 4, 0, *((_DWORD *)a2 + 10));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 48, (uint64_t *)a2 + 6, 0, *((_DWORD *)a2 + 14));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 64, (uint64_t *)a2 + 8, 0, *((_DWORD *)a2 + 18));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 80, (uint64_t *)a2 + 10, 0, *((_DWORD *)a2 + 22));
  BitArray::operator=((int **)this + 14, (uint64_t)a2 + 112);
  BitArray::operator=((int **)this + 16, (uint64_t)a2 + 128);
  BitArray::operator=((int **)this + 18, (uint64_t)a2 + 144);
  HuffmanDecoder<unsigned short,unsigned int>::operator=((unint64_t)this + 160, (uint64_t)a2 + 160);
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 248, (uint64_t *)a2 + 31, 0, *((_DWORD *)a2 + 64));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 96, (uint64_t *)a2 + 12, 0, *((_DWORD *)a2 + 26));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 264, (uint64_t *)a2 + 33, 0, *((_DWORD *)a2 + 68));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 296, (uint64_t *)a2 + 37, 0, *((_DWORD *)a2 + 76));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 312, (_QWORD *)a2 + 39, 0, *((_DWORD *)a2 + 80));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 328, (uint64_t *)a2 + 41, 0, *((_DWORD *)a2 + 84));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 280, (uint64_t *)a2 + 35, 0, *((_DWORD *)a2 + 72));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 344, (uint64_t *)a2 + 43, 0, *((_DWORD *)a2 + 88));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 360, (uint64_t *)a2 + 45, 0, *((_DWORD *)a2 + 92));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 376, (_QWORD *)a2 + 47, 0, *((_DWORD *)a2 + 96));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 392, (uint64_t *)a2 + 49, 0, *((_DWORD *)a2 + 100));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 408, (uint64_t *)a2 + 51, 0, *((_DWORD *)a2 + 104));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 424, (uint64_t *)a2 + 53, 0, *((_DWORD *)a2 + 108));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 440, (uint64_t *)a2 + 55, 0, *((_DWORD *)a2 + 112));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 456, (uint64_t *)a2 + 57, 0, *((_DWORD *)a2 + 116));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 472, (_QWORD *)a2 + 59, 0, *((_DWORD *)a2 + 120));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 488, (uint64_t *)a2 + 61, 0, *((_DWORD *)a2 + 124));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 504, (uint64_t *)a2 + 63, 0, *((_DWORD *)a2 + 128));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 520, (uint64_t *)a2 + 65, 0, *((_DWORD *)a2 + 132));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 536, (uint64_t *)a2 + 67, 0, *((_DWORD *)a2 + 136));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 552, (_QWORD *)a2 + 69, 0, *((_DWORD *)a2 + 140));
  return QuadgramData::compact((void **)this);
}

uint64_t QuadgramData::saveBinary(QuadgramData *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (int *)this, a3);
  writeObject((uint64_t)a2, (int *)this + 1, a3);
  writeObject((uint64_t)a2, (int *)this + 2, a3);
  writeObject<short>((uint64_t)a2, (uint64_t)this + 16, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 32, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 48, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 64, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 80, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 112, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 128, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 144, a3);
  HuffmanDecoder<unsigned short,unsigned int>::writeObject((uint64_t)this + 160, (uint64_t)a2, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 248, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 96, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 264, a3);
  writeObject<short>((uint64_t)a2, (uint64_t)this + 296, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 312, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 328, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 280, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 344, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 360, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 376, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 392, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 408, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 424, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 440, a3);
  writeObject<short>((uint64_t)a2, (uint64_t)this + 456, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 472, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 488, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 504, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 520, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 536, a3);
  return writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 552, a3);
}

void QuadgramData::loadBinary(QuadgramData *this, DgnStream *a2, unsigned int *a3)
{
  readObject((uint64_t)a2, this, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 1, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 2, a3);
  readObject<short>(a2, (uint64_t)this + 16, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 32, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 48, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 64, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 80, a3);
  readObject(a2, (QuadgramData *)((char *)this + 112), a3);
  readObject(a2, (QuadgramData *)((char *)this + 128), a3);
  readObject(a2, (QuadgramData *)((char *)this + 144), a3);
  HuffmanDecoder<unsigned short,unsigned int>::readObject((unint64_t)this + 160, a2, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 248, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 96, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 264, a3);
  readObject<short>(a2, (uint64_t)this + 296, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 312, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 328, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 280, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 344, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 360, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 376, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 392, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 408, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 424, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 440, a3);
  readObject<short>(a2, (uint64_t)this + 456, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 472, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 488, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 504, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 520, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 536, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 552, a3);
}

char *QuadgramData::saveBinaryShared(QuadgramData *this, DgnSharedMemStream *a2, int a3, unsigned int *a4)
{
  if (a3)
  {
    writeObject((uint64_t)a2, (int *)this, a4);
    writeObject((uint64_t)a2, (int *)this + 1, a4);
    writeObject((uint64_t)a2, (int *)this + 2, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 16, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 32, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 48, a4);
    writeSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 80, a4);
    writeSharedObject(a2, (QuadgramData *)((char *)this + 112), a4);
    writeSharedObject(a2, (QuadgramData *)((char *)this + 128), a4);
    writeSharedObject(a2, (QuadgramData *)((char *)this + 144), a4);
    HuffmanDecoder<unsigned short,unsigned int>::writeObject((uint64_t)this + 160, (uint64_t)a2, a4);
  }
  else
  {
    writeSharedObject<short>(a2, (uint64_t)this + 16, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 32, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 48, a4);
    writeSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 80, a4);
    writeSharedObject(a2, (QuadgramData *)((char *)this + 112), a4);
    writeSharedObject(a2, (QuadgramData *)((char *)this + 128), a4);
    writeSharedObject(a2, (QuadgramData *)((char *)this + 144), a4);
  }
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 248, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 96, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 264, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 296, a4);
  writeSharedObject<unsigned char>(a2, (uint64_t)this + 312, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 328, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 280, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 344, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 360, a4);
  writeSharedObject<unsigned char>(a2, (uint64_t)this + 376, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 392, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 408, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 424, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 440, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 456, a4);
  writeSharedObject<unsigned char>(a2, (uint64_t)this + 472, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 488, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 504, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 520, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 536, a4);
  return writeSharedObject<unsigned char>(a2, (uint64_t)this + 552, a4);
}

int *QuadgramData::loadBinaryShared(QuadgramData *this, DgnSharedMemStream *a2, int a3, unsigned int *a4)
{
  if (a3)
  {
    readObject((uint64_t)a2, this, a4);
    readObject((uint64_t)a2, (_DWORD *)this + 1, a4);
    readObject((uint64_t)a2, (_DWORD *)this + 2, a4);
    readSharedObject<short>(a2, (uint64_t)this + 16, a4);
    readSharedObject<short>(a2, (uint64_t)this + 32, a4);
    readSharedObject<short>(a2, (uint64_t)this + 48, a4);
    readSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    readSharedObject<short>(a2, (uint64_t)this + 80, a4);
    readSharedObject(a2, (QuadgramData *)((char *)this + 112), a4);
    readSharedObject(a2, (QuadgramData *)((char *)this + 128), a4);
    readSharedObject(a2, (QuadgramData *)((char *)this + 144), a4);
    HuffmanDecoder<unsigned short,unsigned int>::readObject((unint64_t)this + 160, a2, a4);
  }
  else
  {
    readSharedObject<short>(a2, (uint64_t)this + 16, a4);
    readSharedObject<short>(a2, (uint64_t)this + 32, a4);
    readSharedObject<short>(a2, (uint64_t)this + 48, a4);
    readSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    readSharedObject<short>(a2, (uint64_t)this + 80, a4);
    readSharedObject(a2, (QuadgramData *)((char *)this + 112), a4);
    readSharedObject(a2, (QuadgramData *)((char *)this + 128), a4);
    readSharedObject(a2, (QuadgramData *)((char *)this + 144), a4);
  }
  readSharedObject<unsigned int>(a2, (uint64_t)this + 248, a4);
  readSharedObject<short>(a2, (uint64_t)this + 96, a4);
  readSharedObject<short>(a2, (uint64_t)this + 264, a4);
  readSharedObject<short>(a2, (uint64_t)this + 296, a4);
  readSharedObject<unsigned char>(a2, (uint64_t)this + 312, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 328, a4);
  readSharedObject<short>(a2, (uint64_t)this + 280, a4);
  readSharedObject<short>(a2, (uint64_t)this + 344, a4);
  readSharedObject<short>(a2, (uint64_t)this + 360, a4);
  readSharedObject<unsigned char>(a2, (uint64_t)this + 376, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 392, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 408, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 424, a4);
  readSharedObject<short>(a2, (uint64_t)this + 440, a4);
  readSharedObject<short>(a2, (uint64_t)this + 456, a4);
  readSharedObject<unsigned char>(a2, (uint64_t)this + 472, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 488, a4);
  readSharedObject<short>(a2, (uint64_t)this + 504, a4);
  readSharedObject<short>(a2, (uint64_t)this + 520, a4);
  readSharedObject<short>(a2, (uint64_t)this + 536, a4);
  return readSharedObject<unsigned char>(a2, (uint64_t)this + 552, a4);
}

uint64_t QuadgramData::computeLocalPreloadableBytes(QuadgramData *this)
{
  uint64_t result;
  unint64_t i;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;

  v16 = *((unsigned int *)this + 14);
  if (v16 < 2)
    return 0;
  result = 0;
  for (i = 1; i != v16; ++i)
  {
    if (i < *((unsigned int *)this + 14))
    {
      v18 = *(unsigned __int16 *)(*((_QWORD *)this + 6) + 2 * i);
      if (*(_WORD *)(*((_QWORD *)this + 6) + 2 * i))
      {
        v4 = 0;
        v5 = *((_QWORD *)this + 12);
        v17 = i;
        do
        {
          v6 = (*(_DWORD *)(*((_QWORD *)this + 8) + 4 * i) + v4);
          if (*(_WORD *)(v5 + 2 * v6))
          {
            v19 = v4;
            v20 = result;
            v7 = 0;
            v8 = 0;
            v9 = 0;
            do
            {
              v10 = 0;
              v11 = 9;
              if (!*((_DWORD *)this + 6))
                v11 = 10;
              v8 += v11;
              while (1)
              {
                v12 = *(unsigned int *)(*((_QWORD *)this + 31) + 4 * v6);
                if (*(_DWORD *)this)
                {
                  v13 = (char *)this + 280;
                  if ((*(_DWORD *)(*((_QWORD *)this + 14) + 4 * (v6 >> 5)) & (1 << v6)) != 0)
                  {
                    LODWORD(v12) = *(_DWORD *)(*((_QWORD *)this + 53) + 4 * v12);
                    v13 = (char *)this + 504;
                  }
                }
                else
                {
                  v13 = (char *)this + 280;
                }
                if (v10 >= *(unsigned __int16 *)(*(_QWORD *)v13 + 2 * (v12 + v7)))
                  break;
                if (QuadgramData::getScoreForIndex(this, v6, v7, v10) != 20000)
                {
                  v14 = 3;
                  if (!*((_DWORD *)this + 10))
                    v14 = 4;
                  v8 += v14;
                  v9 = 1;
                }
                ++v10;
              }
              ++v7;
              v5 = *((_QWORD *)this + 12);
            }
            while (v7 < *(unsigned __int16 *)(v5 + 2 * v6));
            if ((v9 & 1) != 0)
              v15 = v8;
            else
              v15 = 0;
            result = v20;
            i = v17;
            v4 = v19;
          }
          else
          {
            v15 = 0;
          }
          result += v15;
          ++v4;
        }
        while (v4 != v18);
      }
    }
  }
  return result;
}

uint64_t QuadgramData::getScoreForIndex(QuadgramData *this, unsigned int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned int *)(*((_QWORD *)this + 31) + 4 * a2);
  if (*(_DWORD *)this && ((*(_DWORD *)(*((_QWORD *)this + 14) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    v5 = (*(_DWORD *)(*((_QWORD *)this + 61)
                                  + 4 * (*(_DWORD *)(*((_QWORD *)this + 53) + 4 * v4) + a3))
                      + a4);
    if (!*((_DWORD *)this + 10))
    {
      v7 = *((_QWORD *)this + 67);
      return *(unsigned __int16 *)(v7 + 2 * v5);
    }
    v6 = *((_QWORD *)this + 69);
  }
  else
  {
    v5 = (*(_DWORD *)(*((_QWORD *)this + 41) + 4 * (v4 + a3)) + a4);
    if (!*((_DWORD *)this + 2))
    {
      v7 = *((_QWORD *)this + 45);
      return *(unsigned __int16 *)(v7 + 2 * v5);
    }
    v6 = *((_QWORD *)this + 47);
  }
  v5 = *(unsigned __int8 *)(v6 + v5);
  v7 = *((_QWORD *)this + 4);
  return *(unsigned __int16 *)(v7 + 2 * v5);
}

uint64_t QuadgramData::initNewQuadgramData(uint64_t a1, TrigramData *this, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  TrigramData *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  unsigned __int16 v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int16 Quad3SuccIdForIndex;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float *v37;
  uint64_t v38;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  TrigramData *v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  unsigned int v52;
  uint64_t v54;
  _OWORD v55[5];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v6 = this;
  v8 = *(unsigned int *)(a1 + 56);
  TrigramData::configureTrigramData(this, 1, *(_DWORD *)(a1 + 24), *(__int16 **)(a1 + 16), *(_DWORD *)(a1 + 40), *(const unsigned __int16 **)(a1 + 32));
  QuadgramData::preAllocateStaticQuadgramData(v6, v8, *(_DWORD *)(a1 + 88));
  QuadgramData::preAllocateDynamicQuadgramData((uint64_t)v6, *(_DWORD *)(a1 + 272), *(_DWORD *)(a1 + 352));
  v57 = 0;
  v58 = 0;
  if (v8 >= 2)
  {
    v9 = 1;
    v43 = a4;
    v44 = v6;
    v41 = v8;
    do
    {
      if (v9 < *(unsigned int *)(a1 + 56))
      {
        v10 = *(_QWORD *)(a1 + 48);
        v11 = *(unsigned __int16 *)(v10 + 2 * v9);
        if (*(_WORD *)(v10 + 2 * v9))
        {
          QuadgramData::allocQuad1(v6, v9, *(unsigned __int16 *)(v10 + 2 * v9));
          v12 = 0;
          v13 = 0;
          v42 = *(unsigned int *)(a4 + 8);
          v46 = v9;
          v45 = v11;
          do
          {
            v14 = (*(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v9) + v12);
            v15 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v14);
            v16 = (*(_DWORD *)(*((_QWORD *)v6 + 8) + 4 * v9) + v12);
            *(_WORD *)(*((_QWORD *)v6 + 10) + 2 * v16) = 0;
            QuadgramData::quad2SetUnallocated((uint64_t)v6, v16);
            *(_WORD *)(*((_QWORD *)v6 + 10) + 2 * v16) = v15;
            LODWORD(v58) = 0;
            if (*(_WORD *)(*(_QWORD *)(a1 + 96) + 2 * v14))
            {
              v47 = v16;
              v48 = v15;
              v49 = v12;
              v50 = v13;
              v17 = 0;
              v18 = 0;
              v19 = 0;
              v54 = v14 >> 5;
              v20 = 1 << v14;
              do
              {
                v21 = *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4 * v14);
                v22 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4 * v14);
                v23 = (_QWORD *)(a1 + 264);
                if (*(_DWORD *)a1)
                {
                  v22 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4 * v14);
                  v23 = (_QWORD *)(a1 + 264);
                  if ((*(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v54) & v20) != 0)
                  {
                    v22 = *(_DWORD *)(*(_QWORD *)(a1 + 424) + 4 * v21);
                    v23 = (_QWORD *)(a1 + 440);
                  }
                }
                v24 = 0;
                v25 = 0;
                v52 = v17 + 1;
                v51 = *(_WORD *)(*v23 + 2 * (v22 + v17));
                v26 = 9;
                if (!*(_DWORD *)(a1 + 24))
                  v26 = 10;
                v18 += v26;
                if (!*(_DWORD *)a1)
                {
LABEL_22:
                  v30 = (_QWORD *)(a1 + 280);
                  goto LABEL_23;
                }
                while (1)
                {
                  if ((*(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v54) & v20) == 0)
                    goto LABEL_22;
                  LODWORD(v21) = *(_DWORD *)(*(_QWORD *)(a1 + 424) + 4 * v21);
                  v30 = (_QWORD *)(a1 + 504);
LABEL_23:
                  if (v25 >= *(unsigned __int16 *)(*v30 + 2 * (v21 + v17)))
                    break;
                  Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex((QuadgramData *)a1, v14, v17, v25);
                  if (QuadgramData::getScoreForIndex((QuadgramData *)a1, v14, v17, v25) != 20000)
                  {
                    v28 = *(_DWORD *)(a1 + 40);
                    HuffmanEncoder<unsigned short,unsigned int>::addValue(a3, Quad3SuccIdForIndex);
                    ++v19;
                    v29 = 3;
                    if (!v28)
                      v29 = 4;
                    v18 += v29;
                    ++v24;
                  }
                  ++v25;
                  LODWORD(v21) = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4 * v14);
                  if (!*(_DWORD *)a1)
                    goto LABEL_22;
                }
                if (v24)
                {
                  HuffmanEncoder<unsigned short,unsigned int>::addValue(a3, v24);
                  v31 = v58;
                  if ((_DWORD)v58 == HIDWORD(v58))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)&v57, 1, 1);
                    v31 = v58;
                  }
                  *(_WORD *)(v57 + 2 * v31) = v51;
                  LODWORD(v58) = v31 + 1;
                }
                ++v17;
              }
              while (v52 < *(unsigned __int16 *)(*(_QWORD *)(a1 + 96) + 2 * v14));
              a4 = v43;
              v9 = v46;
              v11 = v45;
              if ((_DWORD)v58)
              {
                v6 = v44;
                *(_DWORD *)(*((_QWORD *)v44 + 14) + 4 * (v47 >> 5)) |= 1 << v47;
                *(_WORD *)(*((_QWORD *)v44 + 12) + 2 * v47) = v58;
                HuffmanEncoder<unsigned short,unsigned int>::addSuccessors(a3, (uint64_t)&v57);
                v32 = *(unsigned int *)(v43 + 8);
                if (v32 == *(_DWORD *)(v43 + 12))
                {
                  DgnArray<DiskNgramContext>::reallocElts(v43, 1, 1);
                  LODWORD(v32) = *(_DWORD *)(v43 + 8);
                }
                v33 = *(_QWORD *)v43 + 56 * v32;
                *(_QWORD *)v33 = 0;
                *(_QWORD *)(v33 + 8) = 0;
                *(_QWORD *)(v33 + 16) = 0;
                *(_QWORD *)(v33 + 24) = -1;
                strcpy((char *)(v33 + 32), " N");
                LODWORD(v33) = *(_DWORD *)(v43 + 8);
                *(_DWORD *)(v43 + 8) = v33 + 1;
                v34 = *(_QWORD *)v43 + 56 * v33;
                *(_BYTE *)(v34 + 34) = 4;
                *(_DWORD *)(v34 + 24) = v46;
                *(_DWORD *)(v34 + 28) = v48;
                *(_DWORD *)(v34 + 36) = v14;
                *(_DWORD *)(v34 + 40) = v47;
                *(_DWORD *)(v34 + 44) = v52;
                *(_DWORD *)(v34 + 48) = v19;
                *(_QWORD *)(v34 + 8) = v18;
                *(_QWORD *)(v34 + 16) = 0;
                v13 = v18 + v50;
              }
              else
              {
                v6 = v44;
                v13 = v50;
              }
              v12 = v49;
            }
            ++v12;
          }
          while (v12 != v11);
          v35 = *(unsigned int *)(a4 + 8);
          v8 = v41;
          if (v42 < v35)
          {
            v36 = *(double *)(*a5 + 8 * v9);
            v37 = (float *)(*(_QWORD *)a4 + 56 * v42 + 16);
            v38 = v35 - v42;
            do
            {
              *(v37 - 3) = v36;
              *(_QWORD *)v37 = v13;
              v37 += 14;
              --v38;
            }
            while (v38);
          }
        }
      }
      ++v9;
    }
    while (v9 != v8);
  }
  if (!*(_DWORD *)(a3 + 128))
    HuffmanEncoder<unsigned short,unsigned int>::addValue(a3, 0);
  v56 = 0;
  memset(v55, 0, sizeof(v55));
  HuffmanEncoder<unsigned short,unsigned int>::finalizeTables(a3, (unint64_t)v55);
  HuffmanDecoder<unsigned short,unsigned int>::operator=((unint64_t)v6 + 160, (uint64_t)v55);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)v55);
  QuadgramData::compact((void **)v6);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v57);
}

void sub_20997F300(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 104);
  _Unwind_Resume(a1);
}

void QuadgramData::preAllocateStaticQuadgramData(QuadgramData *this, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v6 = *((_DWORD *)this + 15);
  v7 = a2 >= v6;
  v8 = a2 - v6;
  if ((_DWORD)v8 != 0 && v7)
    DgnPrimArray<short>::reallocElts((uint64_t)this + 48, v8, 0);
  v9 = *((_DWORD *)this + 19);
  if (a2 > v9)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 64, a2 - v9, 0);
  v10 = *((_DWORD *)this + 27);
  if (a3 > v10)
    DgnPrimArray<short>::reallocElts((uint64_t)this + 96, a3 - v10, 0);
  v11 = *((_DWORD *)this + 65);
  if (a3 > v11)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 248, a3 - v11, 0);
  v12 = *((_DWORD *)this + 23);
  if (a3 > v12)
    DgnPrimArray<short>::reallocElts((uint64_t)this + 80, a3 - v12, 0);
  if (*(_DWORD *)this)
  {
    BitArray::preAllocate((QuadgramData *)((char *)this + 112), a3);
    BitArray::preAllocate((QuadgramData *)((char *)this + 128), a3);
    BitArray::preAllocate((QuadgramData *)((char *)this + 144), a3);
  }
}

uint64_t QuadgramData::preAllocateDynamicQuadgramData(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;

  v5 = this;
  v6 = *(_DWORD *)(this + 292);
  v7 = a2 >= v6;
  v8 = a2 - v6;
  if ((_DWORD)v8 != 0 && v7)
    this = DgnPrimArray<short>::reallocElts(this + 280, v8, 0);
  v9 = *(_DWORD *)(v5 + 276);
  if (a2 > v9)
    this = DgnPrimArray<short>::reallocElts(v5 + 264, a2 - v9, 0);
  v10 = *(_DWORD *)(v5 + 340);
  if (a2 > v10)
    this = DgnPrimArray<unsigned int>::reallocElts(v5 + 328, a2 - v10, 0);
  if (*(_DWORD *)(v5 + 4))
  {
    if (*(_DWORD *)(v5 + 324) < a2)
    {
      v14 = 0;
      this = realloc_array(*(_QWORD **)(v5 + 312), &v14, a2, *(unsigned int *)(v5 + 320), *(unsigned int *)(v5 + 320), 1);
      *(_DWORD *)(v5 + 324) = this;
      *(_QWORD *)(v5 + 312) = v14;
    }
  }
  else
  {
    v11 = *(_DWORD *)(v5 + 308);
    if (a2 > v11)
      this = DgnPrimArray<short>::reallocElts(v5 + 296, a2 - v11, 0);
  }
  v12 = *(_DWORD *)(v5 + 356);
  if (a3 > v12)
    this = DgnPrimArray<short>::reallocElts(v5 + 344, a3 - v12, 0);
  if (*(_DWORD *)(v5 + 8))
  {
    if (*(_DWORD *)(v5 + 388) < a3)
    {
      v14 = 0;
      this = realloc_array(*(_QWORD **)(v5 + 376), &v14, a3, *(unsigned int *)(v5 + 384), *(unsigned int *)(v5 + 384), 1);
      *(_DWORD *)(v5 + 388) = this;
      *(_QWORD *)(v5 + 376) = v14;
    }
  }
  else
  {
    v13 = *(_DWORD *)(v5 + 372);
    if (a3 > v13)
      return DgnPrimArray<short>::reallocElts(v5 + 360, a3 - v13, 0);
  }
  return this;
}

uint64_t QuadgramData::getQuad3SuccIdForIndex(QuadgramData *this, unsigned int a2, int a3, int a4)
{
  uint64_t v4;
  _DWORD *v5;
  char *v6;

  v4 = *(unsigned int *)(*((_QWORD *)this + 31) + 4 * a2);
  if (*(_DWORD *)this && ((*(_DWORD *)(*((_QWORD *)this + 14) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    v5 = (_DWORD *)(*((_QWORD *)this + 61) + 4 * (*(_DWORD *)(*((_QWORD *)this + 53) + 4 * v4) + a3));
    v6 = (char *)this + 520;
  }
  else
  {
    v5 = (_DWORD *)(*((_QWORD *)this + 41) + 4 * (v4 + a3));
    v6 = (char *)this + 344;
  }
  return *(unsigned __int16 *)(*(_QWORD *)v6 + 2 * (*v5 + a4));
}

uint64_t QuadgramData::savePersistentAndFillInNewQuadgramData(QuadgramData *this, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD *v15;
  __int16 v16;
  unsigned int v17;
  int v18;
  _QWORD *v19;
  __int16 Quad3SuccIdForIndex;
  int ScoreForIndex;
  __int16 v22;
  int v23;
  char QuantizedScoreForIndex;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  __int16 BackoffWeight;
  int v34;
  int v35;
  _BOOL4 v37;
  char *v44;
  char *v45;
  char *v46;
  __int16 v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  __int16 *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  __int16 *v63;
  uint64_t v64;
  __int16 *v65;
  uint64_t v66;
  __int16 *v67;
  uint64_t v68;
  __int16 *v69;
  uint64_t v70;
  int v71[3];

  v69 = 0;
  v70 = 0;
  v67 = 0;
  v68 = 0;
  v65 = 0;
  v66 = 0;
  v63 = 0;
  v64 = 0;
  v61 = 0;
  v62 = 0;
  v59 = 0;
  v60 = 0;
  v57 = 0;
  v58 = 0;
  if (*(_WORD *)(*((_QWORD *)this + 12) + 2 * a6))
  {
    v9 = 0;
    v50 = a6 >> 5;
    v10 = 1 << a6;
    v49 = (char *)this + 504;
    v48 = (char *)this + 264;
    v45 = (char *)this + 312;
    v46 = (char *)this + 440;
    v44 = (char *)this + 472;
    v11 = a6;
    do
    {
      v12 = *(unsigned int *)(*((_QWORD *)this + 31) + 4 * v11);
      v13 = *(_DWORD *)this;
      v14 = *(_DWORD *)(*((_QWORD *)this + 31) + 4 * v11);
      v15 = v48;
      if (*(_DWORD *)this)
      {
        v14 = *(_DWORD *)(*((_QWORD *)this + 31) + 4 * v11);
        v15 = v48;
        if ((*(_DWORD *)(*((_QWORD *)this + 14) + 4 * v50) & v10) != 0)
        {
          v14 = *(_DWORD *)(*((_QWORD *)this + 53) + 4 * v12);
          v15 = v46;
        }
      }
      v16 = 0;
      v17 = 0;
      v47 = *(_WORD *)(*v15 + 2 * (v14 + v9));
      while (1)
      {
        v18 = v12;
        v19 = (_QWORD *)((char *)this + 280);
        if (v13)
        {
          v18 = v12;
          v19 = (_QWORD *)((char *)this + 280);
          if ((*(_DWORD *)(*((_QWORD *)this + 14) + 4 * v50) & v10) != 0)
          {
            v18 = *(_DWORD *)(*((_QWORD *)this + 53) + 4 * v12);
            v19 = v49;
          }
        }
        if (v17 >= *(unsigned __int16 *)(*v19 + 2 * (v18 + v9)))
          break;
        Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex(this, a6, v9, v17);
        ScoreForIndex = QuadgramData::getScoreForIndex(this, a6, v9, v17);
        v22 = ScoreForIndex;
        if (ScoreForIndex != 20000)
        {
          v23 = v68;
          if ((_DWORD)v68 == HIDWORD(v68))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v67, 1, 1);
            v23 = v68;
          }
          v67[v23] = Quad3SuccIdForIndex;
          LODWORD(v68) = v23 + 1;
          if (*((_DWORD *)this + 10))
          {
            QuantizedScoreForIndex = QuadgramData::getQuantizedScoreForIndex(this, a6, v9, v17);
            v25 = v58;
            if (v58 == (unint64_t)HIDWORD(v58))
            {
              DgnPrimArray<char>::reallocElts((uint64_t)&v57, 1, 1);
              v25 = v58;
            }
            v57[v25] = QuantizedScoreForIndex;
            v26 = v58;
            v27 = &v58;
          }
          else
          {
            v26 = v60;
            if ((_DWORD)v60 == HIDWORD(v60))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)&v59, 1, 1);
              v26 = v60;
            }
            v59[v26] = v22;
            v27 = &v60;
          }
          ++v16;
          *(_DWORD *)v27 = v26 + 1;
        }
        ++v17;
        LODWORD(v12) = *(_DWORD *)(*((_QWORD *)this + 31) + 4 * v11);
        v13 = *(_DWORD *)this;
      }
      if (v16)
      {
        if (*((_DWORD *)this + 6))
        {
          if (v13 && (*(_DWORD *)(*((_QWORD *)this + 14) + 4 * v50) & v10) != 0)
          {
            LODWORD(v12) = *(_DWORD *)(*((_QWORD *)this + 53) + 4 * v12);
            v28 = v44;
          }
          else
          {
            v28 = v45;
          }
          v29 = *(_BYTE *)(*v28 + v12 + v9);
          v30 = v62;
          if (v62 == (unint64_t)HIDWORD(v62))
          {
            DgnPrimArray<char>::reallocElts((uint64_t)&v61, 1, 1);
            v30 = v62;
          }
          v61[v30] = v29;
          v31 = v62;
          v32 = &v62;
        }
        else
        {
          BackoffWeight = QuadgramData::getBackoffWeight(this, a6, v9);
          v31 = v64;
          if ((_DWORD)v64 == HIDWORD(v64))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
            v31 = v64;
          }
          v63[v31] = BackoffWeight;
          v32 = &v64;
        }
        *(_DWORD *)v32 = v31 + 1;
        v34 = v70;
        if ((_DWORD)v70 == HIDWORD(v70))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v69, 1, 1);
          v34 = v70;
        }
        v69[v34] = v47;
        LODWORD(v70) = v34 + 1;
        v35 = v66;
        if ((_DWORD)v66 == HIDWORD(v66))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v65, 1, 1);
          v35 = v66;
        }
        v65[v35] = v16;
        LODWORD(v66) = v35 + 1;
      }
      ++v9;
    }
    while (v9 < *(unsigned __int16 *)(*((_QWORD *)this + 12) + 2 * v11));
  }
  *(_DWORD *)(*(_QWORD *)(a4 + 248) + 4 * a7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  v55 = 0;
  v56 = 0;
  v53 = 0;
  v54 = 0;
  v51 = 0;
  v52 = 0;
  HuffmanEncoder<unsigned short,unsigned int>::encodeSuccessors(a5, (uint64_t *)&v69, (uint64_t)&v53);
  HuffmanEncoder<unsigned short,unsigned int>::encodeValues(a5, (uint64_t)&v65, (uint64_t)&v55);
  HuffmanEncoder<unsigned short,unsigned int>::encodeValues(a5, (uint64_t)&v67, (uint64_t)&v51);
  v37 = 4 * ((v54 + 1) + (unint64_t)(v56 + 1) + (v52 + 1)) + 12 < 2 * ((v70 + 1) + (unint64_t)(v66 + 1) + (v68 + 1)) + 4
     && v56 < 0x10000;
  if (v37)
  {
    *(_DWORD *)(*(_QWORD *)(a4 + 144) + 4 * (a7 >> 5)) |= 1 << a7;
    LOWORD(v71[0]) = v56;
    writeObject(a2, (unsigned __int16 *)v71, a3);
    writeObjectArray(a2, v55, v56, a3);
    LOWORD(v71[0]) = v54;
    writeObject(a2, (unsigned __int16 *)v71, a3);
    writeObjectArray(a2, v53, v54, a3);
  }
  else
  {
    writeObjectArray(a2, v65, v66, a3);
    writeObjectArray(a2, v69, v70, a3);
  }
  if (*((_DWORD *)this + 6))
    writeObjectArray(a2, v61, v62, a3);
  else
    writeObjectArray(a2, v63, v64, a3);
  v71[0] = v68;
  writeObject(a2, v71, a3);
  if (v37)
  {
    v71[0] = v52;
    writeObject(a2, v71, a3);
    writeObjectArray(a2, v51, v52, a3);
  }
  else
  {
    writeObjectArray(a2, v67, v68, a3);
  }
  if (*((_DWORD *)this + 10))
    writeObjectArray(a2, v57, v58, a3);
  else
    writeObjectArray(a2, v59, v60, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v51);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v53);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v55);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v57);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v59);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v61);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v63);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v65);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v67);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v69);
}

void sub_20997FC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  uint64_t v33;

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a29);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a33);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v33 - 176);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v33 - 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v33 - 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v33 - 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v33 - 112);
  _Unwind_Resume(a1);
}

uint64_t QuadgramData::getQuantizedScoreForIndex(QuadgramData *this, unsigned int a2, int a3, int a4)
{
  uint64_t v4;
  _DWORD *v5;
  char *v6;

  v4 = *(unsigned int *)(*((_QWORD *)this + 31) + 4 * a2);
  if (*(_DWORD *)this && ((*(_DWORD *)(*((_QWORD *)this + 14) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    v5 = (_DWORD *)(*((_QWORD *)this + 61) + 4 * (*(_DWORD *)(*((_QWORD *)this + 53) + 4 * v4) + a3));
    v6 = (char *)this + 552;
  }
  else
  {
    v5 = (_DWORD *)(*((_QWORD *)this + 41) + 4 * (v4 + a3));
    v6 = (char *)this + 376;
  }
  return *(unsigned __int8 *)(*(_QWORD *)v6 + (*v5 + a4));
}

uint64_t QuadgramData::getBackoffWeight(QuadgramData *this, unsigned int a2, int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  __int16 *v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *(unsigned int *)(*((_QWORD *)this + 31) + 4 * a2);
  if (!*(_DWORD *)this || ((*(_DWORD *)(*((_QWORD *)this + 14) + 4 * (a2 >> 5)) >> a2) & 1) == 0)
  {
    if (*((_DWORD *)this + 1))
    {
      v5 = v3 + a3;
      v6 = *((_QWORD *)this + 39);
      goto LABEL_7;
    }
    v8 = v3 + a3;
    v9 = *((_QWORD *)this + 37);
LABEL_10:
    v7 = (__int16 *)(v9 + 2 * v8);
    return *v7;
  }
  v4 = *(_DWORD *)(*((_QWORD *)this + 53) + 4 * v3);
  if (!*((_DWORD *)this + 1))
  {
    v8 = v4 + a3;
    v9 = *((_QWORD *)this + 57);
    goto LABEL_10;
  }
  v5 = v4 + a3;
  v6 = *((_QWORD *)this + 59);
LABEL_7:
  v7 = (__int16 *)(*((_QWORD *)this + 2) + 2 * *(unsigned __int8 *)(v6 + v5));
  return *v7;
}

void HuffmanEncoder<unsigned short,unsigned int>::encodeValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;

  if (*(_DWORD *)(a2 + 8))
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = a1 + 8;
    v9 = 32;
    do
    {
      v17 = *Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::findBucket(v8, (unsigned __int16 *)(*(_QWORD *)a2 + v5));
      if (!v17)
        throwEncodeUnknownSymbol(*(_WORD *)(*(_QWORD *)a2 + v5), v10, v11, v12, v13, v14, v15, v16);
      v18 = (unsigned int *)v17[2];
      v20 = *v18;
      v19 = v18[1];
      if (v19 >= v9)
        v21 = v9;
      else
        v21 = v18[1];
      v22 = v7 << v21;
      if (v19 == v9)
      {
        v23 = *(unsigned int *)(a3 + 8);
        if (v23 == *(_DWORD *)(a3 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
          v23 = *(unsigned int *)(a3 + 8);
        }
        v7 = 0;
        *(_DWORD *)(*(_QWORD *)a3 + 4 * v23) = v22 | v20;
        ++*(_DWORD *)(a3 + 8);
        v9 = 32;
      }
      else
      {
        v24 = v19 - v9;
        if (v19 <= v9)
        {
          v7 = v22 | v20;
          v9 -= v19;
        }
        else
        {
          v25 = *(unsigned int *)(a3 + 8);
          if (v25 == *(_DWORD *)(a3 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
            v25 = *(unsigned int *)(a3 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v25) = v22 | (v20 >> v24);
          ++*(_DWORD *)(a3 + 8);
          v9 = 32 - v24;
          v7 = (0xFFFFFFFF >> -(char)v24) & v20;
        }
      }
      ++v6;
      v5 += 2;
    }
    while (v6 < *(unsigned int *)(a2 + 8));
  }
  else
  {
    v7 = 0;
    LOBYTE(v9) = 32;
  }
  v26 = *(_DWORD *)(a3 + 8);
  if (v26)
    v27 = v7 == 0;
  else
    v27 = 0;
  if (!v27)
  {
    if (v26 == *(_DWORD *)(a3 + 12))
    {
      DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
      v26 = *(_DWORD *)(a3 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a3 + 4 * v26) = v7 << v9;
    ++*(_DWORD *)(a3 + 8);
  }
}

uint64_t QuadgramData::fillInFullyLoadedQuadgramData(QuadgramData *this, QuadgramData *a2)
{
  QuadgramData *v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  char *v21;
  __int16 Quad3SuccIdForIndex;
  int ScoreForIndex;
  __int16 v24;
  unsigned int v25;
  char QuantizedScoreForIndex;
  uint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  char *v30;
  __int16 BackoffWeight;
  unsigned int v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  QuadgramData *v49;
  int v50;
  __int16 v51;
  unint64_t v52;
  int v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v2 = a2;
  v4 = *((unsigned int *)this + 14);
  TrigramData::configureTrigramData(a2, 0, *((_DWORD *)this + 6), *((__int16 **)this + 2), *((_DWORD *)this + 10), *((const unsigned __int16 **)this + 4));
  QuadgramData::preAllocateStaticQuadgramData(v2, v4, *((_DWORD *)this + 22));
  QuadgramData::preAllocateDynamicQuadgramData((uint64_t)v2, *((_DWORD *)this + 68), *((_DWORD *)this + 88));
  v71 = 0;
  v72 = 0;
  v69 = 0;
  v70 = 0;
  v67 = 0;
  v68 = 0;
  v65 = 0;
  v66 = 0;
  v63 = 0;
  v64 = 0;
  v61 = 0;
  v62 = 0;
  v59 = 0;
  v60 = 0;
  v57 = 0;
  v58 = 0;
  v55 = 0;
  v56 = 0;
  v48 = v4;
  if (v4 >= 2)
  {
    v5 = 1;
    v49 = v2;
    do
    {
      if (v5 < *((unsigned int *)this + 14))
      {
        v50 = *(unsigned __int16 *)(*((_QWORD *)this + 6) + 2 * v5);
        if (*(_WORD *)(*((_QWORD *)this + 6) + 2 * v5))
        {
          QuadgramData::allocQuad1(v2, v5, v50);
          v6 = 0;
          v52 = v5;
          do
          {
            v7 = (*(_DWORD *)(*((_QWORD *)this + 8) + 4 * v5) + v6);
            v51 = *(_WORD *)(*((_QWORD *)this + 10) + 2 * v7);
            LODWORD(v72) = 0;
            if ((int)v70 >= 1)
            {
              v8 = 16 * v70 - 16;
              do
              {
                DgnPrimArray<unsigned int>::~DgnPrimArray(v69 + v8);
                v8 -= 16;
              }
              while (v8 != -16);
            }
            LODWORD(v70) = 0;
            LODWORD(v68) = 0;
            LODWORD(v66) = 0;
            if ((int)v64 >= 1)
            {
              v9 = 16 * v64 - 16;
              do
              {
                DgnPrimArray<unsigned int>::~DgnPrimArray(v63 + v9);
                v9 -= 16;
              }
              while (v9 != -16);
            }
            v53 = v6;
            LODWORD(v64) = 0;
            if ((int)v62 >= 1)
            {
              v10 = 16 * v62 - 16;
              do
              {
                DgnPrimArray<unsigned int>::~DgnPrimArray(v61 + v10);
                v10 -= 16;
              }
              while (v10 != -16);
            }
            LODWORD(v62) = 0;
            if (*(_WORD *)(*((_QWORD *)this + 12) + 2 * v7))
            {
              v11 = 0;
              v12 = v7 >> 5;
              v13 = 1 << v7;
              do
              {
                v14 = *((_QWORD *)this + 31);
                v15 = *(unsigned int *)(v14 + 4 * v7);
                v16 = *(_DWORD *)this;
                if (*(_DWORD *)this)
                {
                  v17 = (char *)this + 264;
                  if ((*(_DWORD *)(*((_QWORD *)this + 14) + 4 * v12) & v13) != 0)
                  {
                    LODWORD(v15) = *(_DWORD *)(*((_QWORD *)this + 53) + 4 * v15);
                    v17 = (char *)this + 440;
                  }
                }
                else
                {
                  v17 = (char *)this + 264;
                }
                v18 = 0;
                v54 = *(_WORD *)(*(_QWORD *)v17 + 2 * (v15 + v11));
                LODWORD(v60) = 0;
                LODWORD(v58) = 0;
                LODWORD(v56) = 0;
                while (1)
                {
                  v19 = *(unsigned int *)(v14 + 4 * v7);
                  v20 = v19;
                  v21 = (char *)this + 280;
                  if (v16)
                  {
                    v20 = v19;
                    v21 = (char *)this + 280;
                    if ((*(_DWORD *)(*((_QWORD *)this + 14) + 4 * v12) & v13) != 0)
                    {
                      v20 = *(_DWORD *)(*((_QWORD *)this + 53) + 4 * v19);
                      v21 = (char *)this + 504;
                    }
                  }
                  if (v18 >= *(unsigned __int16 *)(*(_QWORD *)v21 + 2 * (v20 + v11)))
                    break;
                  Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex(this, v7, v11, v18);
                  ScoreForIndex = QuadgramData::getScoreForIndex(this, v7, v11, v18);
                  v24 = ScoreForIndex;
                  if (ScoreForIndex != 20000)
                  {
                    v25 = v60;
                    if ((_DWORD)v60 == HIDWORD(v60))
                    {
                      DgnPrimArray<short>::reallocElts((uint64_t)&v59, 1, 1);
                      v25 = v60;
                    }
                    *(_WORD *)(v59 + 2 * v25) = Quad3SuccIdForIndex;
                    LODWORD(v60) = v25 + 1;
                    if (*((_DWORD *)this + 10))
                    {
                      QuantizedScoreForIndex = QuadgramData::getQuantizedScoreForIndex(this, v7, v11, v18);
                      v27 = v56;
                      if (v56 == (unint64_t)HIDWORD(v56))
                      {
                        DgnPrimArray<char>::reallocElts((uint64_t)&v55, 1, 1);
                        v27 = v56;
                      }
                      *(_BYTE *)(v55 + v27) = QuantizedScoreForIndex;
                      v28 = v56;
                      v29 = &v56;
                    }
                    else
                    {
                      v28 = v58;
                      if ((_DWORD)v58 == HIDWORD(v58))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)&v57, 1, 1);
                        v28 = v58;
                      }
                      *(_WORD *)(v57 + 2 * v28) = v24;
                      v29 = &v58;
                    }
                    *(_DWORD *)v29 = v28 + 1;
                  }
                  ++v18;
                  v14 = *((_QWORD *)this + 31);
                  v16 = *(_DWORD *)this;
                }
                if (v58 | v56)
                {
                  if (*((_DWORD *)this + 6))
                  {
                    if (v16)
                    {
                      v30 = (char *)this + 312;
                      if ((*(_DWORD *)(*((_QWORD *)this + 14) + 4 * v12) & v13) != 0)
                      {
                        LODWORD(v19) = *(_DWORD *)(*((_QWORD *)this + 53) + 4 * v19);
                        v30 = (char *)this + 472;
                      }
                    }
                    else
                    {
                      v30 = (char *)this + 312;
                    }
                    v34 = *(_BYTE *)(*(_QWORD *)v30 + v19 + v11);
                    v35 = v66;
                    if (v66 == (unint64_t)HIDWORD(v66))
                    {
                      DgnPrimArray<char>::reallocElts((uint64_t)&v65, 1, 1);
                      v35 = v66;
                    }
                    *(_BYTE *)(v65 + v35) = v34;
                    v32 = v66;
                    v33 = &v66;
                  }
                  else
                  {
                    BackoffWeight = QuadgramData::getBackoffWeight(this, v7, v11);
                    v32 = v68;
                    if ((_DWORD)v68 == HIDWORD(v68))
                    {
                      DgnPrimArray<short>::reallocElts((uint64_t)&v67, 1, 1);
                      v32 = v68;
                    }
                    *(_WORD *)(v67 + 2 * v32) = BackoffWeight;
                    v33 = &v68;
                  }
                  *(_DWORD *)v33 = v32 + 1;
                  v36 = v72;
                  if ((_DWORD)v72 == HIDWORD(v72))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)&v71, 1, 1);
                    v36 = v72;
                  }
                  *(_WORD *)(v71 + 2 * v36) = v54;
                  LODWORD(v72) = v36 + 1;
                  v37 = v70;
                  if (v70 == (unint64_t)HIDWORD(v70))
                  {
                    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v69, 1, 1);
                    v37 = v70;
                  }
                  v38 = (_QWORD *)(v69 + 16 * v37);
                  *v38 = 0;
                  v38[1] = 0;
                  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v38, &v59, 0, v60);
                  LODWORD(v70) = v70 + 1;
                  v39 = v62;
                  if (v62 == (unint64_t)HIDWORD(v62))
                  {
                    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v61, 1, 1);
                    v39 = v62;
                  }
                  v40 = (_QWORD *)(v61 + 16 * v39);
                  *v40 = 0;
                  v40[1] = 0;
                  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v40, &v55, 0, v56);
                  LODWORD(v62) = v62 + 1;
                  v41 = v64;
                  if (v64 == (unint64_t)HIDWORD(v64))
                  {
                    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v63, 1, 1);
                    v41 = v64;
                  }
                  v42 = (_QWORD *)(v63 + 16 * v41);
                  *v42 = 0;
                  v42[1] = 0;
                  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v42, &v57, 0, v58);
                  LODWORD(v64) = v64 + 1;
                }
                ++v11;
              }
              while (v11 < *(unsigned __int16 *)(*((_QWORD *)this + 12) + 2 * v7));
            }
            v2 = v49;
            v43 = (*(_DWORD *)(*((_QWORD *)v49 + 8) + 4 * v52) + v53);
            *(_WORD *)(*((_QWORD *)v49 + 10) + 2 * v43) = 0;
            QuadgramData::quad2SetUnallocated((uint64_t)v49, v43);
            *(_WORD *)(*((_QWORD *)v49 + 10) + 2 * v43) = v51;
            if ((_DWORD)v72)
            {
              QuadgramData::fillQuad2BackoffWeights((unint64_t)v49, v7, &v71, &v67, &v65);
              v44 = *((_QWORD *)this + 12);
              if (*(_WORD *)(v44 + 2 * v7))
              {
                v45 = 0;
                v46 = 0;
                do
                {
                  if (*(_DWORD *)(v69 + v45 + 8))
                  {
                    QuadgramData::fillQuadgramRecord((unint64_t)v49, v7, v46, v69 + v45, (_QWORD *)(v63 + v45), (_QWORD *)(v61 + v45));
                    v44 = *((_QWORD *)this + 12);
                  }
                  ++v46;
                  v45 += 16;
                }
                while (v46 < *(unsigned __int16 *)(v44 + 2 * v7));
              }
            }
            v6 = v53 + 1;
            v5 = v52;
          }
          while (v53 + 1 != v50);
        }
      }
      ++v5;
    }
    while (v5 != v48);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v55);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v57);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v59);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v61);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v63);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v65);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v67);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v69);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v71);
}

void sub_209980628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a28);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a30);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v30 - 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 136);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v30 - 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 104);
  _Unwind_Resume(a1);
}

unint64_t QuadgramData::fillQuad2BackoffWeights(unint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  unint64_t result;
  uint64_t v11;
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  unint64_t *v25;

  result = QuadgramData::allocQuad2(a1, a2, *((unsigned __int16 *)a3 + 4));
  v11 = *((unsigned int *)a3 + 2);
  if (*(_DWORD *)(a1 + 4))
  {
    if ((_DWORD)v11)
    {
      v12 = 0;
      do
      {
        v13 = *(_WORD *)(*a3 + 2 * v12);
        v14 = *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4 * a2);
        if (*(_DWORD *)a1 && (*(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * (a2 >> 5)) & (1 << a2)) != 0)
        {
          LODWORD(v14) = *(_DWORD *)(*(_QWORD *)(a1 + 424) + 4 * v14);
          *(_WORD *)(*(_QWORD *)(a1 + 440) + 2 * (v12 + v14)) = v13;
          v15 = (_BYTE *)(*a5 + v12);
          v16 = (_QWORD *)(a1 + 472);
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(a1 + 264) + 2 * (v12 + v14)) = v13;
          v15 = (_BYTE *)(*a5 + v12);
          v16 = (_QWORD *)(a1 + 312);
        }
        *(_BYTE *)(*v16 + (v12++ + v14)) = *v15;
        v17 = *((unsigned int *)a3 + 2);
      }
      while (v12 < v17);
      goto LABEL_19;
    }
LABEL_18:
    LOWORD(v17) = 0;
    goto LABEL_19;
  }
  if (!(_DWORD)v11)
    goto LABEL_18;
  v18 = 0;
  v19 = *a3;
  v20 = *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4 * a2);
  v21 = *(_DWORD *)a1;
  v22 = *a4;
  do
  {
    v23 = *(_WORD *)(v19 + 2 * v18);
    if (v21 && (*(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * (a2 >> 5)) & (1 << a2)) != 0)
    {
      v24 = *(_DWORD *)(*(_QWORD *)(a1 + 424) + 4 * v20);
      *(_WORD *)(*(_QWORD *)(a1 + 440) + 2 * (v18 + v24)) = v23;
      v25 = (unint64_t *)(a1 + 456);
    }
    else
    {
      *(_WORD *)(*(_QWORD *)(a1 + 264) + 2 * (v20 + v18)) = v23;
      v24 = v20;
      v25 = (unint64_t *)(a1 + 296);
    }
    result = *v25;
    *(_WORD *)(result + 2 * (v18 + v24)) = *(_WORD *)(v22 + 2 * v18);
    ++v18;
  }
  while (v11 != v18);
  LOWORD(v17) = v11;
LABEL_19:
  *(_WORD *)(*(_QWORD *)(a1 + 96) + 2 * a2) = v17;
  return result;
}

unint64_t QuadgramData::fillQuadgramRecord(unint64_t a1, unsigned int a2, int a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  unint64_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  result = QuadgramData::allocScoresForIndex(a1, a2, a3, *(unsigned __int16 *)(a4 + 8));
  LODWORD(v13) = *(_DWORD *)(a4 + 8);
  if (*(_DWORD *)(a1 + 8))
  {
    if ((_DWORD)v13)
    {
      v14 = 0;
      do
      {
        QuadgramData::setQuad3SuccIdForIndex(a1, a2, a3, v14, *(_WORD *)(*(_QWORD *)a4 + 2 * v14));
        result = QuadgramData::setQuantizedScoreForIndex(a1, a2, a3, v14, *(_BYTE *)(*a6 + v14));
        ++v14;
        v13 = *(unsigned int *)(a4 + 8);
      }
      while (v14 < v13);
    }
  }
  else if ((_DWORD)v13)
  {
    v15 = 0;
    do
    {
      QuadgramData::setQuad3SuccIdForIndex(a1, a2, a3, v15, *(_WORD *)(*(_QWORD *)a4 + 2 * v15));
      result = QuadgramData::setScoreForIndex(a1, a2, a3, v15, *(_WORD *)(*a5 + 2 * v15));
      ++v15;
      v13 = *(unsigned int *)(a4 + 8);
    }
    while (v15 < v13);
  }
  v16 = *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4 * a2);
  if (*(_DWORD *)a1 && ((*(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    LODWORD(v16) = *(_DWORD *)(*(_QWORD *)(a1 + 424) + 4 * v16);
    v17 = (_QWORD *)(a1 + 504);
  }
  else
  {
    v17 = (_QWORD *)(a1 + 280);
  }
  *(_WORD *)(*v17 + 2 * (v16 + a3)) = v13;
  return result;
}

unint64_t QuadgramData::allocQuad2(unint64_t this, unsigned int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v4 = this;
  v5 = a2;
  *(_DWORD *)(*(_QWORD *)(this + 248) + 4 * a2) = *(_DWORD *)(this + 272);
  v6 = *(_DWORD *)(this + 272) + a3;
  v7 = *(_DWORD *)(this + 276);
  if (v6 > v7)
  {
    this = DgnPrimArray<short>::reallocElts(this + 264, v6 - v7, 1);
    v6 = *(_DWORD *)(v4 + 272) + a3;
  }
  *(_DWORD *)(v4 + 272) = v6;
  if (*(_DWORD *)(v4 + 4))
  {
    v8 = *(_DWORD *)(v4 + 320) + a3;
    v9 = *(_DWORD *)(v4 + 324);
    if (v8 > v9)
    {
      this = DgnPrimArray<char>::reallocElts(v4 + 312, v8 - v9, 1);
      v8 = *(_DWORD *)(v4 + 320) + a3;
    }
    *(_DWORD *)(v4 + 320) = v8;
  }
  else
  {
    v10 = *(_DWORD *)(v4 + 304) + a3;
    v11 = *(_DWORD *)(v4 + 308);
    if (v10 > v11)
    {
      this = DgnPrimArray<short>::reallocElts(v4 + 296, v10 - v11, 1);
      v10 = *(_DWORD *)(v4 + 304) + a3;
    }
    *(_DWORD *)(v4 + 304) = v10;
  }
  *(_WORD *)(*(_QWORD *)(v4 + 96) + 2 * v5) = a3;
  v12 = *(_DWORD *)(v4 + 288) + a3;
  v13 = *(_DWORD *)(v4 + 292);
  if (v12 > v13)
  {
    this = DgnPrimArray<short>::reallocElts(v4 + 280, v12 - v13, 1);
    v12 = *(_DWORD *)(v4 + 288) + a3;
  }
  *(_DWORD *)(v4 + 288) = v12;
  v14 = *(_DWORD *)(v4 + 336) + a3;
  v15 = *(_DWORD *)(v4 + 340);
  if (v14 > v15)
  {
    this = DgnPrimArray<unsigned int>::reallocElts(v4 + 328, v14 - v15, 1);
    v14 = *(_DWORD *)(v4 + 336) + a3;
  }
  *(_DWORD *)(v4 + 336) = v14;
  return this;
}

unint64_t QuadgramData::allocScoresForIndex(unint64_t this, unsigned int a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v5 = this;
  v6 = (*(_DWORD *)(*(_QWORD *)(this + 248) + 4 * a2) + a3);
  *(_DWORD *)(*(_QWORD *)(this + 328) + 4 * v6) = *(_DWORD *)(this + 352);
  v7 = *(_DWORD *)(this + 352) + a4;
  v8 = *(_DWORD *)(this + 356);
  if (v7 > v8)
  {
    this = DgnPrimArray<short>::reallocElts(this + 344, v7 - v8, 1);
    v7 = *(_DWORD *)(v5 + 352) + a4;
  }
  *(_DWORD *)(v5 + 352) = v7;
  if (*(_DWORD *)(v5 + 8))
  {
    v9 = *(_DWORD *)(v5 + 384) + a4;
    v10 = *(_DWORD *)(v5 + 388);
    if (v9 > v10)
    {
      this = DgnPrimArray<char>::reallocElts(v5 + 376, v9 - v10, 1);
      v9 = *(_DWORD *)(v5 + 384) + a4;
    }
    *(_DWORD *)(v5 + 384) = v9;
  }
  else
  {
    v11 = *(_DWORD *)(v5 + 368) + a4;
    v12 = *(_DWORD *)(v5 + 372);
    if (v11 > v12)
    {
      this = DgnPrimArray<short>::reallocElts(v5 + 360, v11 - v12, 1);
      v11 = *(_DWORD *)(v5 + 368) + a4;
    }
    *(_DWORD *)(v5 + 368) = v11;
  }
  *(_WORD *)(*(_QWORD *)(v5 + 280) + 2 * v6) = a4;
  return this;
}

uint64_t QuadgramData::setQuad3SuccIdForIndex(uint64_t this, unsigned int a2, int a3, int a4, __int16 a5)
{
  uint64_t v5;
  _DWORD *v6;
  _QWORD *v7;

  v5 = *(unsigned int *)(*(_QWORD *)(this + 248) + 4 * a2);
  if (*(_DWORD *)this && ((*(_DWORD *)(*(_QWORD *)(this + 112) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    v6 = (_DWORD *)(*(_QWORD *)(this + 488) + 4 * (*(_DWORD *)(*(_QWORD *)(this + 424) + 4 * v5) + a3));
    v7 = (_QWORD *)(this + 520);
  }
  else
  {
    v6 = (_DWORD *)(*(_QWORD *)(this + 328) + 4 * (v5 + a3));
    v7 = (_QWORD *)(this + 344);
  }
  *(_WORD *)(*v7 + 2 * (*v6 + a4)) = a5;
  return this;
}

uint64_t QuadgramData::setQuantizedScoreForIndex(uint64_t this, unsigned int a2, int a3, int a4, char a5)
{
  uint64_t v5;
  _DWORD *v6;
  _QWORD *v7;

  v5 = *(unsigned int *)(*(_QWORD *)(this + 248) + 4 * a2);
  if (*(_DWORD *)this && ((*(_DWORD *)(*(_QWORD *)(this + 112) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    v6 = (_DWORD *)(*(_QWORD *)(this + 488) + 4 * (*(_DWORD *)(*(_QWORD *)(this + 424) + 4 * v5) + a3));
    v7 = (_QWORD *)(this + 552);
  }
  else
  {
    v6 = (_DWORD *)(*(_QWORD *)(this + 328) + 4 * (v5 + a3));
    v7 = (_QWORD *)(this + 376);
  }
  *(_BYTE *)(*v7 + (*v6 + a4)) = a5;
  return this;
}

uint64_t QuadgramData::setScoreForIndex(uint64_t this, unsigned int a2, int a3, int a4, __int16 a5)
{
  uint64_t v5;
  _DWORD *v6;
  _QWORD *v7;

  v5 = *(unsigned int *)(*(_QWORD *)(this + 248) + 4 * a2);
  if (*(_DWORD *)this && ((*(_DWORD *)(*(_QWORD *)(this + 112) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    v6 = (_DWORD *)(*(_QWORD *)(this + 488) + 4 * (*(_DWORD *)(*(_QWORD *)(this + 424) + 4 * v5) + a3));
    v7 = (_QWORD *)(this + 536);
  }
  else
  {
    v6 = (_DWORD *)(*(_QWORD *)(this + 328) + 4 * (v5 + a3));
    v7 = (_QWORD *)(this + 360);
  }
  *(_WORD *)(*v7 + 2 * (*v6 + a4)) = a5;
  return this;
}

unint64_t QuadgramData::allocLoaded(unint64_t result, unsigned int a2, uint64_t *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t i;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;

  v5 = result;
  v6 = *(_QWORD *)(result + 248);
  v7 = a2;
  v8 = *(_DWORD *)(v6 + 4 * a2);
  *(_DWORD *)(v6 + 4 * a2) = *(_DWORD *)(result + 416);
  v9 = *(_DWORD *)(result + 416);
  if (v9 == *(_DWORD *)(result + 420))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(result + 408, 1, 1);
    v9 = *(_DWORD *)(v5 + 416);
  }
  *(_DWORD *)(*(_QWORD *)(v5 + 408) + 4 * v9) = v8;
  ++*(_DWORD *)(v5 + 416);
  v10 = *(_DWORD *)(v5 + 448);
  v11 = *(_DWORD *)(v5 + 432);
  if (v11 == *(_DWORD *)(v5 + 436))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(v5 + 424, 1, 1);
    v11 = *(_DWORD *)(v5 + 432);
  }
  *(_DWORD *)(*(_QWORD *)(v5 + 424) + 4 * v11) = v10;
  ++*(_DWORD *)(v5 + 432);
  v12 = *(unsigned __int16 *)(*(_QWORD *)(v5 + 96) + 2 * v7);
  v13 = *(_DWORD *)(v5 + 496) + v12;
  v14 = *(_DWORD *)(v5 + 500);
  if (v13 > v14)
  {
    result = DgnPrimArray<unsigned int>::reallocElts(v5 + 488, v13 - v14, 1);
    v13 = *(_DWORD *)(v5 + 496) + v12;
  }
  *(_DWORD *)(v5 + 496) = v13;
  v15 = *(_DWORD *)(v5 + 448) + v12;
  v16 = *(_DWORD *)(v5 + 452);
  if (v15 > v16)
  {
    result = DgnPrimArray<short>::reallocElts(v5 + 440, v15 - v16, 1);
    v15 = *(_DWORD *)(v5 + 448) + v12;
  }
  *(_DWORD *)(v5 + 448) = v15;
  v17 = *(_DWORD *)(v5 + 512) + v12;
  v18 = *(_DWORD *)(v5 + 516);
  if (v17 > v18)
  {
    result = DgnPrimArray<short>::reallocElts(v5 + 504, v17 - v18, 1);
    v17 = *(_DWORD *)(v5 + 512) + v12;
  }
  *(_DWORD *)(v5 + 512) = v17;
  if (*(_DWORD *)(v5 + 4))
  {
    v19 = *(_DWORD *)(v5 + 480) + v12;
    v20 = *(_DWORD *)(v5 + 484);
    if (v19 > v20)
    {
      result = DgnPrimArray<char>::reallocElts(v5 + 472, v19 - v20, 1);
      v19 = *(_DWORD *)(v5 + 480) + v12;
    }
    *(_DWORD *)(v5 + 480) = v19;
    if (!(_DWORD)v12)
      goto LABEL_30;
LABEL_19:
    for (i = 0; i != v12; ++i)
    {
      *(_DWORD *)(*(_QWORD *)(v5 + 488) + 4 * (v10 + i)) = *(_DWORD *)(v5 + 528);
      v24 = *a3;
      *(_WORD *)(*(_QWORD *)(v5 + 504) + 2 * (v10 + i)) = *(_WORD *)(*a3 + 2 * i);
      v25 = *(unsigned __int16 *)(v24 + 2 * i);
      v26 = *(_DWORD *)(v5 + 528) + v25;
      v27 = *(_DWORD *)(v5 + 532);
      if (v26 > v27)
      {
        result = DgnPrimArray<short>::reallocElts(v5 + 520, v26 - v27, 1);
        v26 = *(_DWORD *)(v5 + 528) + v25;
      }
      *(_DWORD *)(v5 + 528) = v26;
      v28 = *(unsigned __int16 *)(*a3 + 2 * i);
      if (*(_DWORD *)(v5 + 8))
      {
        v29 = *(_DWORD *)(v5 + 560) + v28;
        v30 = *(_DWORD *)(v5 + 564);
        if (v29 > v30)
        {
          result = DgnPrimArray<char>::reallocElts(v5 + 552, v29 - v30, 1);
          v29 = *(_DWORD *)(v5 + 560) + v28;
        }
        *(_DWORD *)(v5 + 560) = v29;
      }
      else
      {
        v31 = *(_DWORD *)(v5 + 544) + v28;
        v32 = *(_DWORD *)(v5 + 548);
        if (v31 > v32)
        {
          result = DgnPrimArray<short>::reallocElts(v5 + 536, v31 - v32, 1);
          v31 = *(_DWORD *)(v5 + 544) + v28;
        }
        *(_DWORD *)(v5 + 544) = v31;
      }
    }
    goto LABEL_30;
  }
  v21 = *(_DWORD *)(v5 + 464) + v12;
  v22 = *(_DWORD *)(v5 + 468);
  if (v21 > v22)
  {
    result = DgnPrimArray<short>::reallocElts(v5 + 456, v21 - v22, 1);
    v21 = *(_DWORD *)(v5 + 464) + v12;
  }
  *(_DWORD *)(v5 + 464) = v21;
  if ((_DWORD)v12)
    goto LABEL_19;
LABEL_30:
  *(_DWORD *)(*(_QWORD *)(v5 + 128) + 4 * (a2 >> 5)) |= 1 << a2;
  v33 = *(_DWORD *)(v5 + 400);
  if (v33 == *(_DWORD *)(v5 + 404))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(v5 + 392, 1, 1);
    v33 = *(_DWORD *)(v5 + 400);
  }
  *(_DWORD *)(*(_QWORD *)(v5 + 392) + 4 * v33) = a2;
  ++*(_DWORD *)(v5 + 400);
  return result;
}

void WordLanguageModel::WordLanguageModel(WordLanguageModel *this, int a2, const WordList *a3)
{
  uint64_t v4;

  LanguageModel::LanguageModel(this, a2, a3);
  *(_QWORD *)v4 = &off_24C215EA8;
  *(_QWORD *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_QWORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  BigramData::BigramData((BigramData *)(v4 + 360));
  TrigramData::TrigramData((WordLanguageModel *)((char *)this + 744));
  QuadgramData::QuadgramData((WordLanguageModel *)((char *)this + 1232));
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 68) = 1;
  *((_BYTE *)this + 80) = 0;
  *((_DWORD *)this + 29) = -1;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 23) = 0;
  *(_OWORD *)((char *)this + 100) = xmmword_209A7B4A0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 60) = -1;
  *((_QWORD *)this + 9) = -1;
  *((_WORD *)this + 122) = 0;
  *((_QWORD *)this + 225) = 0;
  *(_QWORD *)((char *)this + 92) = 0;
  *(_QWORD *)((char *)this + 84) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 31) = 0;
  *(_QWORD *)((char *)this + 269) = 0;
}

void sub_2099810AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  RecentBuffer **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  TrigramData *v15;
  BigramData *v16;

  TrigramData::~TrigramData(v15);
  BigramData::~BigramData(v16);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v10 + 43));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v10 + 41));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v10 + 39));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v10 + 37));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14);
  DgnIArray<Utterance *>::~DgnIArray(v13);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v10 + 21));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v10 + 19));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v10 + 17));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v12);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v11);
  LanguageModel::~LanguageModel(v10);
  _Unwind_Resume(a1);
}

void WordLanguageModel::~WordLanguageModel(WordLanguageModel *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)this = &off_24C215EA8;
  v2 = (_QWORD *)*((_QWORD *)this + 29);
  if (v2)
  {
    (*(void (**)(_QWORD))*v2)(*((_QWORD *)this + 29));
    MemChunkFree(v2, 0);
  }
  *((_QWORD *)this + 29) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 28);
  if (v3)
  {
    (*(void (**)(_QWORD))*v3)(*((_QWORD *)this + 28));
    MemChunkFree(v3, 0);
  }
  *((_QWORD *)this + 28) = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 5);
  if (v4)
  {
    (*(void (**)(_QWORD))*v4)(*((_QWORD *)this + 5));
    MemChunkFree(v4, 0);
  }
  *((_QWORD *)this + 5) = 0;
  DgnDelete<RecentBuffer>(*((RecentBuffer **)this + 1));
  *((_QWORD *)this + 1) = 0;
  QuadgramData::~QuadgramData((WordLanguageModel *)((char *)this + 1232));
  TrigramData::~TrigramData((WordLanguageModel *)((char *)this + 744));
  BigramData::~BigramData((WordLanguageModel *)((char *)this + 360));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 344);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 312);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  LanguageModel::~LanguageModel((RecentBuffer **)this);
}

{
  WordLanguageModel::~WordLanguageModel(this);
  JUMPOUT(0x20BD149A8);
}

void WordLanguageModel::printSize(WordLanguageModel *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  int v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  void *v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  int v317;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3657, (DgnString *)&v316);
  if (v317)
    v16 = (void *)v316;
  else
    v16 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A7B4F4, a3, &unk_209A7B4F4, v16);
  DgnString::~DgnString((DgnString *)&v316);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A7B4F4);
  v315 = 0;
  v316 = 0;
  v21 = (a3 + 1);
  v314 = 0;
  LanguageModel::printSize(this, 0xFFFFFFFFLL, v21, &v316, &v315, &v314);
  *a4 += v316;
  *a5 += v315;
  *a6 += v314;
  v22 = *((_QWORD *)this + 5);
  if (v22)
  {
    v315 = 0;
    v316 = 0;
    v314 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v22 + 16))(v22, 0xFFFFFFFFLL, (a3 + 1), &v316, &v315, &v314);
    *a4 += v316;
    *a5 += v315;
    *a6 += v314;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v23 = 4;
  else
    v23 = 8;
  v313 = a3;
  v24 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3663, (DgnString *)&v316);
  if (v317)
    v29 = (void *)v316;
  else
    v29 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, v21, &unk_209A7B4F4, v24, v24, v29, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v23;
  *a5 += v23;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v30 = 12;
  else
    v30 = 16;
  v31 = *((unsigned int *)this + 14);
  v32 = *((_DWORD *)this + 15);
  if (v32 >= v31)
  {
    v33 = 0;
    if ((int)v31 > 0)
      v30 += 8 * (v31 - 1) + 8;
    v34 = v30 + 8 * (v32 - v31);
  }
  else
  {
    v33 = 8 * v31;
    v34 = v30;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3665, (DgnString *)&v316);
  if (v317)
    v39 = (void *)v316;
  else
    v39 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, v21, &unk_209A7B4F4, v24, v24, v39, v34, v30, v33);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v34;
  *a5 += v30;
  *a6 += v33;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3666, (DgnString *)&v316);
  if (v317)
    v44 = (void *)v316;
  else
    v44 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v21, &unk_209A7B4F4, v24, v24, v44, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3668, (DgnString *)&v316);
  if (v317)
    v49 = (void *)v316;
  else
    v49 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, v21, &unk_209A7B4F4, v24, v24, v49, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3670, (DgnString *)&v316);
  if (v317)
    v54 = (void *)v316;
  else
    v54 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v21, &unk_209A7B4F4, v24, v24, v54, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3671, (DgnString *)&v316);
  if (v317)
    v59 = (void *)v316;
  else
    v59 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v21, &unk_209A7B4F4, v24, v24, v59, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3672, (DgnString *)&v316);
  if (v317)
    v64 = (void *)v316;
  else
    v64 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v21, &unk_209A7B4F4, v24, v24, v64, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3674, (DgnString *)&v316);
  if (v317)
    v69 = (void *)v316;
  else
    v69 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v21, &unk_209A7B4F4, v24, v24, v69, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v316);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3676, (DgnString *)&v316);
  if (v317)
    v74 = (void *)v316;
  else
    v74 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v21, &unk_209A7B4F4, v24, v24, v74, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3678, (DgnString *)&v316);
  if (v317)
    v79 = (void *)v316;
  else
    v79 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v21, &unk_209A7B4F4, v24, v24, v79, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v316);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v80 = 12;
  else
    v80 = 16;
  v81 = *((unsigned int *)this + 32);
  v82 = *((_DWORD *)this + 33);
  if (v82 >= v81)
  {
    v83 = 0;
    if ((int)v81 > 0)
      v80 += 4 * (v81 - 1) + 4;
    v84 = v80 + 4 * (v82 - v81);
  }
  else
  {
    v83 = 4 * v81;
    v84 = v80;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3681, (DgnString *)&v316);
  if (v317)
    v89 = (void *)v316;
  else
    v89 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v21, &unk_209A7B4F4, v24, v24, v89, v84, v80, v83);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v84;
  *a5 += v80;
  *a6 += v83;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v90 = 12;
  else
    v90 = 16;
  v91 = *((unsigned int *)this + 36);
  v92 = *((_DWORD *)this + 37);
  if (v92 >= v91)
  {
    v93 = 0;
    if ((int)v91 > 0)
      v90 = (v90 | 2) + 2 * (v91 - 1);
    v94 = v90 + 2 * (v92 - v91);
  }
  else
  {
    v93 = 2 * v91;
    v94 = v90;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3683, (DgnString *)&v316);
  if (v317)
    v99 = (void *)v316;
  else
    v99 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, v21, &unk_209A7B4F4, v24, v24, v99, v94, v90, v93);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v94;
  *a5 += v90;
  *a6 += v93;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v100 = 12;
  else
    v100 = 16;
  v101 = *((_DWORD *)this + 40);
  v102 = *((_DWORD *)this + 41);
  v103 = v102 >= v101;
  v104 = v102 - v101;
  if (v103)
  {
    v106 = v101 & ~(v101 >> 31);
    v101 = 0;
    v105 = v100 + v106;
    v100 += v106 + v104;
  }
  else
  {
    v105 = v100;
  }
  v107 = v101;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3685, (DgnString *)&v316);
  if (v317)
    v112 = (void *)v316;
  else
    v112 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v108, v109, v110, v111, v21, &unk_209A7B4F4, v24, v24, v112, v100, v105, v107);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v100;
  *a5 += v105;
  *a6 += v107;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v113 = 12;
  else
    v113 = 16;
  v114 = *((unsigned int *)this + 44);
  v115 = *((_DWORD *)this + 45);
  if (v115 >= v114)
  {
    v116 = 0;
    if ((int)v114 > 0)
      v113 = (v113 | 2) + 2 * (v114 - 1);
    v117 = v113 + 2 * (v115 - v114);
  }
  else
  {
    v116 = 2 * v114;
    v117 = v113;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3688, (DgnString *)&v316);
  if (v317)
    v122 = (void *)v316;
  else
    v122 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v118, v119, v120, v121, v21, &unk_209A7B4F4, v24, v24, v122, v117, v113, v116);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v117;
  *a5 += v113;
  *a6 += v116;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v123 = 4;
  else
    v123 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3690, (DgnString *)&v316);
  if (v317)
    v128 = (void *)v316;
  else
    v128 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v124, v125, v126, v127, v21, &unk_209A7B4F4, v24, v24, v128, v123, v123, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v123;
  *a5 += v123;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v129 = 4;
  else
    v129 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3692, (DgnString *)&v316);
  if (v317)
    v134 = (void *)v316;
  else
    v134 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v21, &unk_209A7B4F4, v24, v24, v134, v129, v129, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v129;
  *a5 += v129;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v135 = 4;
  else
    v135 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3694, (DgnString *)&v316);
  if (v317)
    v140 = (void *)v316;
  else
    v140 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v136, v137, v138, v139, v21, &unk_209A7B4F4, v24, v24, v140, v135, v135, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v135;
  *a5 += v135;
  v141 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v141 = 16;
  v142 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v142 = 3;
  v143 = *((unsigned int *)this + 54);
  v144 = (((*((_DWORD *)this + 55) - v143) + v143) << v142) + v141;
  v145 = (v143 << v142) + v141;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3696, (DgnString *)&v316);
  if (v317)
    v150 = (void *)v316;
  else
    v150 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v146, v147, v148, v149, v21, &unk_209A7B4F4, v24, v24, v150, v144, v145, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v144;
  *a5 += v145;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3700, (DgnString *)&v316);
  if (v317)
    v155 = (void *)v316;
  else
    v155 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v151, v152, v153, v154, v21, &unk_209A7B4F4, v24, v24, v155, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  v156 = *((_QWORD *)this + 28);
  if (v156)
  {
    v315 = 0;
    v316 = 0;
    v314 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v156 + 16))(v156, 0xFFFFFFFFLL, v21, &v316, &v315, &v314);
    *a4 += v316;
    *a5 += v315;
    *a6 += v314;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v157 = 4;
  else
    v157 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3704, (DgnString *)&v316);
  if (v317)
    v162 = (void *)v316;
  else
    v162 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v158, v159, v160, v161, v21, &unk_209A7B4F4, v24, v24, v162, v157, v157, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v157;
  *a5 += v157;
  v163 = *((_QWORD *)this + 29);
  if (v163)
  {
    v315 = 0;
    v316 = 0;
    v314 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v163 + 16))(v163, 0xFFFFFFFFLL, v21, &v316, &v315, &v314);
    *a4 += v316;
    *a5 += v315;
    *a6 += v314;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v164 = 4;
  else
    v164 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3706, (DgnString *)&v316);
  if (v317)
    v169 = (void *)v316;
  else
    v169 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v165, v166, v167, v168, v21, &unk_209A7B4F4, v24, v24, v169, v164, v164, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v164;
  *a5 += v164;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3708, (DgnString *)&v316);
  if (v317)
    v174 = (void *)v316;
  else
    v174 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v170, v171, v172, v173, v21, &unk_209A7B4F4, v24, v24, v174, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3710, (DgnString *)&v316);
  if (v317)
    v179 = (void *)v316;
  else
    v179 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v175, v176, v177, v178, v21, &unk_209A7B4F4, v24, v24, v179, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3712, (DgnString *)&v316);
  if (v317)
    v184 = (void *)v316;
  else
    v184 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v180, v181, v182, v183, v21, &unk_209A7B4F4, v24, v24, v184, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v316);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3714, (DgnString *)&v316);
  if (v317)
    v189 = (void *)v316;
  else
    v189 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v185, v186, v187, v188, v21, &unk_209A7B4F4, v24, v24, v189, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v316);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3717, (DgnString *)&v316);
  if (v317)
    v194 = (void *)v316;
  else
    v194 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v190, v191, v192, v193, v21, &unk_209A7B4F4, v24, v24, v194, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3719, (DgnString *)&v316);
  if (v317)
    v199 = (void *)v316;
  else
    v199 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v195, v196, v197, v198, v21, &unk_209A7B4F4, v24, v24, v199, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3721, (DgnString *)&v316);
  if (v317)
    v204 = (void *)v316;
  else
    v204 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v200, v201, v202, v203, v21, &unk_209A7B4F4, v24, v24, v204, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3722, (DgnString *)&v316);
  if (v317)
    v209 = (void *)v316;
  else
    v209 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v205, v206, v207, v208, v21, &unk_209A7B4F4, v24, v24, v209, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3723, (DgnString *)&v316);
  if (v317)
    v214 = (void *)v316;
  else
    v214 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v210, v211, v212, v213, v21, &unk_209A7B4F4, v24, v24, v214, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3725, (DgnString *)&v316);
  if (v317)
    v219 = (void *)v316;
  else
    v219 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v215, v216, v217, v218, v21, &unk_209A7B4F4, v24, v24, v219, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3727, (DgnString *)&v316);
  if (v317)
    v224 = (void *)v316;
  else
    v224 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v21, &unk_209A7B4F4, v24, v24, v224, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v316);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v225 = 12;
  else
    v225 = 16;
  v226 = *((unsigned int *)this + 72);
  v227 = *((_DWORD *)this + 73);
  if (v227 >= v226)
  {
    v228 = 0;
    if ((int)v226 > 0)
      v225 += 4 * (v226 - 1) + 4;
    v229 = v225 + 4 * (v227 - v226);
  }
  else
  {
    v228 = 4 * v226;
    v229 = v225;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3729, (DgnString *)&v316);
  if (v317)
    v234 = (void *)v316;
  else
    v234 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v230, v231, v232, v233, v21, &unk_209A7B4F4, v24, v24, v234, v229, v225, v228);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v229;
  *a5 += v225;
  *a6 += v228;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v235 = 12;
  else
    v235 = 16;
  v236 = *((unsigned int *)this + 76);
  v237 = *((_DWORD *)this + 77);
  if (v237 >= v236)
  {
    v238 = 0;
    if ((int)v236 > 0)
      v235 = (v235 | 2) + 2 * (v236 - 1);
    v239 = v235 + 2 * (v237 - v236);
  }
  else
  {
    v238 = 2 * v236;
    v239 = v235;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3731, (DgnString *)&v316);
  if (v317)
    v244 = (void *)v316;
  else
    v244 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v240, v241, v242, v243, v21, &unk_209A7B4F4, v24, v24, v244, v239, v235, v238);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v239;
  *a5 += v235;
  *a6 += v238;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v245 = 12;
  else
    v245 = 16;
  v246 = *((_DWORD *)this + 80);
  v247 = *((_DWORD *)this + 81);
  v103 = v247 >= v246;
  v248 = v247 - v246;
  if (v103)
  {
    v250 = v246 & ~(v246 >> 31);
    v246 = 0;
    v249 = v245 + v250;
    v245 += v250 + v248;
  }
  else
  {
    v249 = v245;
  }
  v251 = v246;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3733, (DgnString *)&v316);
  if (v317)
    v256 = (void *)v316;
  else
    v256 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v252, v253, v254, v255, v21, &unk_209A7B4F4, v24, v24, v256, v245, v249, v251);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v245;
  *a5 += v249;
  *a6 += v251;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v257 = 12;
  else
    v257 = 16;
  v258 = *((unsigned int *)this + 84);
  v259 = *((_DWORD *)this + 85);
  if (v259 >= v258)
  {
    v260 = 0;
    if ((int)v258 > 0)
      v257 = (v257 | 2) + 2 * (v258 - 1);
    v261 = v257 + 2 * (v259 - v258);
  }
  else
  {
    v260 = 2 * v258;
    v261 = v257;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3735, (DgnString *)&v316);
  if (v317)
    v266 = (void *)v316;
  else
    v266 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v262, v263, v264, v265, v21, &unk_209A7B4F4, v24, v24, v266, v261, v257, v260);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v261;
  *a5 += v257;
  *a6 += v260;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v267 = 12;
  else
    v267 = 16;
  v268 = *((unsigned int *)this + 88);
  v269 = *((_DWORD *)this + 89);
  if (v269 >= v268)
  {
    v270 = 0;
    if ((int)v268 > 0)
      v267 = (v267 | 2) + 2 * (v268 - 1);
    v271 = v267 + 2 * (v269 - v268);
  }
  else
  {
    v270 = 2 * v268;
    v271 = v267;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3737, (DgnString *)&v316);
  if (v317)
    v276 = (void *)v316;
  else
    v276 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v272, v273, v274, v275, v21, &unk_209A7B4F4, v24, v24, v276, v271, v267, v270);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v271;
  *a5 += v267;
  *a6 += v270;
  v315 = 0;
  v316 = 0;
  v314 = 0;
  BigramData::printSize((WordLanguageModel *)((char *)this + 360), 0xFFFFFFFFLL, v21, &v316, &v315, &v314);
  *a4 += v316;
  *a5 += v315;
  *a6 += v314;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3741, (DgnString *)&v316);
  if (v317)
    v281 = (void *)v316;
  else
    v281 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v277, v278, v279, v280, v21, &unk_209A7B4F4, v24, v24, v281, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3743, (DgnString *)&v316);
  if (v317)
    v286 = (void *)v316;
  else
    v286 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v282, v283, v284, v285, v21, &unk_209A7B4F4, v24, v24, v286, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  v315 = 0;
  v316 = 0;
  v314 = 0;
  TrigramData::printSize((WordLanguageModel *)((char *)this + 744), 0xFFFFFFFFLL, v21, &v316, &v315, &v314);
  *a4 += v316;
  *a5 += v315;
  *a6 += v314;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3748, (DgnString *)&v316);
  if (v317)
    v291 = (void *)v316;
  else
    v291 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v287, v288, v289, v290, v21, &unk_209A7B4F4, v24, v24, v291, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3750, (DgnString *)&v316);
  if (v317)
    v296 = (void *)v316;
  else
    v296 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v292, v293, v294, v295, v21, &unk_209A7B4F4, v24, v24, v296, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  v315 = 0;
  v316 = 0;
  v314 = 0;
  QuadgramData::printSize((WordLanguageModel *)((char *)this + 1232), 0xFFFFFFFFLL, v21, &v316, &v315, &v314);
  *a4 += v316;
  *a5 += v315;
  *a6 += v314;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v297 = 4;
  else
    v297 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3756, (DgnString *)&v316);
  if (v317)
    v302 = (void *)v316;
  else
    v302 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v298, v299, v300, v301, v21, &unk_209A7B4F4, v24, v24, v302, v297, v297, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v297;
  *a5 += v297;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3760, (DgnString *)&v316);
  if (v317)
    v307 = (void *)v316;
  else
    v307 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v303, v304, v305, v306, v21, &unk_209A7B4F4, v24, v24, v307, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3761, (DgnString *)&v316);
  if (v317)
    v312 = (void *)v316;
  else
    v312 = &unk_209A7B4F4;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v308, v309, v310, v311, v313, &unk_209A7B4F4, (35 - v313), (35 - v313), v312, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v316);
}

void sub_209982B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void WordLanguageModel::initializeScoreToProb(WordLanguageModel *this, double a2, double a3)
{
  unsigned int v3;
  unsigned int v5;
  unint64_t v6;

  v3 = (20 * *((_DWORD *)this + 8)) | 1;
  if (v3 != *((_DWORD *)this + 14))
  {
    v5 = *((_DWORD *)this + 15);
    if (v3 > v5)
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 48, v3 - v5, 0);
    v6 = 0;
    *((_DWORD *)this + 14) = v3;
    do
    {
      LODWORD(a3) = *((_DWORD *)this + 8);
      *(long double *)(*((_QWORD *)this + 6) + 8 * v6) = DgnExp(-(double)v6 / (double)*(unint64_t *)&a3);
      ++v6;
    }
    while (v6 < *((unsigned int *)this + 14));
  }
}

unint64_t WordLanguageModel::maybeAddAlienWordLmId(unint64_t this, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v14;
  unsigned int v15;

  if (*(_DWORD *)(this + 72) == -1)
  {
    v14 = this;
    v15 = *(_DWORD *)(this + 104);
    if (v15 >= 0xFFFFF1)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3792, (uint64_t)"lm/wordlm", 2, (uint64_t)"%u", a9, a10, *(_DWORD *)(this + 104));
      v15 = *(_DWORD *)(v14 + 104);
    }
    WordLanguageModel::allocLmId(v14, v15);
    this = WordLanguageModel::computeAlienScore((WordLanguageModel *)v14, a4, a2, a3);
    *(_WORD *)(*(_QWORD *)(v14 + 168) + 2 * v15) = this;
    if (*(_DWORD *)(v14 + 64) >= 2u)
    {
      if (*(_DWORD *)(v14 + 336))
      {
        this = WordLanguageModel::computeAlienScore((WordLanguageModel *)v14, a5, a2, a3);
        *(_WORD *)(*(_QWORD *)(v14 + 328) + 2 * v15) = this;
      }
      *(_WORD *)(*(_QWORD *)(v14 + 344) + 2 * v15) = 0;
    }
    *(_DWORD *)(v14 + 72) = v15;
  }
  return this;
}

unint64_t WordLanguageModel::allocLmId(unint64_t this, unsigned int a2)
{
  uint64_t v3;
  unsigned int i;
  unsigned int v5;
  unsigned int j;

  v3 = this;
  if (*(_DWORD *)(this + 104) < a2 + 1)
    *(_DWORD *)(this + 104) = a2 + 1;
  for (i = *(_DWORD *)(this + 176); i <= a2; *(_DWORD *)(v3 + 176) = i)
  {
    if (i == *(_DWORD *)(v3 + 180))
    {
      this = DgnPrimArray<short>::reallocElts(v3 + 168, 1, 1);
      i = *(_DWORD *)(v3 + 176);
    }
    *(_WORD *)(*(_QWORD *)(v3 + 168) + 2 * i++) = 20000;
  }
  if (*(_DWORD *)(v3 + 64) >= 2u)
  {
    v5 = *(_DWORD *)(v3 + 336);
    if (v5 - 1 < a2)
    {
      do
      {
        if (v5 == *(_DWORD *)(v3 + 340))
        {
          this = DgnPrimArray<short>::reallocElts(v3 + 328, 1, 1);
          v5 = *(_DWORD *)(v3 + 336);
        }
        *(_WORD *)(*(_QWORD *)(v3 + 328) + 2 * v5++) = 20000;
        *(_DWORD *)(v3 + 336) = v5;
      }
      while (v5 <= a2);
    }
    for (j = *(_DWORD *)(v3 + 352); j <= a2; *(_DWORD *)(v3 + 352) = j)
    {
      if (j == *(_DWORD *)(v3 + 356))
      {
        this = DgnPrimArray<short>::reallocElts(v3 + 344, 1, 1);
        j = *(_DWORD *)(v3 + 352);
      }
      *(_WORD *)(*(_QWORD *)(v3 + 344) + 2 * j++) = 20000;
    }
    if (*(_DWORD *)(v3 + 560) > a2)
      return BigramData::bi1SetEmpty(v3 + 360, a2);
  }
  return this;
}

uint64_t WordLanguageModel::computeAlienScore(WordLanguageModel *this, uint64_t a2, double a3, double a4)
{
  double v5;
  double v6;
  double v7;
  long double v8;
  unint64_t v9;

  v5 = (double)a2;
  if (a3 == -1.0)
    v6 = a4;
  else
    v6 = (double)a2 * a3;
  v7 = DgnExp(-20.0) * v5;
  if (v6 >= v7)
  {
    v7 = v6;
    if (v6 > v5)
      v7 = v5;
  }
  v8 = DgnLog(v7 / v5);
  LODWORD(v9) = *((_DWORD *)this + 8);
  return (int)(0.5 - v8 * (double)v9);
}

void WordLanguageModel::loadLM(WordLanguageModel *this, DFile *a2, DFile *a3, DFileChecksums *a4, DgnSharedMemStream *a5, unsigned int a6, BOOL a7, int a8, unsigned int a9, unsigned int a10, __int16 a11, BOOL *a12, BOOL *a13, double *a14)
{
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WordLanguageModel *v37;
  DgnStream *v38;
  DFile *v39;
  DFileChecksums *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v58;
  double v59;
  double v60[2];

  v59 = -1.0;
  v60[0] = -1.0;
  if (DFile::subFileExists((uint64_t)a2, 0x73u))
  {
    WordLanguageModel::loadWns(this, a2, v60, &v59);
    if (a14)
      *a14 = v59;
  }
  v20 = DFile::subFileExists((uint64_t)a2, 0x74u);
  v21 = DFile::subFileExists((uint64_t)a2, 0x6Fu);
  v24 = v21;
  if (v20)
  {
    if ((v21 & 1) != 0 || DFile::subFileExists((uint64_t)a2, 0x70u))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3858, (uint64_t)"lm/wordlm", 16, (uint64_t)"%s", v22, v23, (char)&unk_209A7B4F4);
    if ((a6 & 1) == 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3860, (uint64_t)"lm/wordlm", 53, (uint64_t)"%s", v22, v23, (char)&errStr_lm_wordlm_E_CANT_LOAD_TEXT_LANGUAGE_MODEL);
    WordLanguageModel::loadText(this, a2, a8, a9, a10, v60[0], v59);
  }
  else
  {
    v34 = DFile::subFileExists((uint64_t)a2, 0x70u);
    if (v24)
    {
      if ((_DWORD)v34)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3871, (uint64_t)"lm/wordlm", 17, (uint64_t)"%s", v35, v36, (char)&errStr_lm_wordlm_E_WNB_WITH_OTHER_LM_FILE);
      if (a6)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3873, (uint64_t)"lm/wordlm", 52, (uint64_t)"%s", v35, v36, (char)&errStr_lm_wordlm_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
      v37 = this;
      if (!a5)
      {
        WordLanguageModel::loadBinary(this, a2, a4, a8, a9, a10);
        goto LABEL_27;
      }
      v38 = a5;
      v39 = a2;
      v40 = a4;
      v41 = 111;
    }
    else
    {
      if (!(_DWORD)v34)
      {
        errThrowInternal(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3910, (uint64_t)"lm/wordlm", 48, (uint64_t)"%s", v35, v36, (char)&errStr_lm_wordlm_E_NO_LM_FILE);
        goto LABEL_27;
      }
      if (a6)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3890, (uint64_t)"lm/wordlm", 52, (uint64_t)"%s", v35, v36, (char)&errStr_lm_wordlm_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
      if (!a5)
      {
        WordLanguageModel::loadDynamic(this, a2, a3, a4, a11, HIBYTE(a11), a12, a13, a8, a9, a10);
        goto LABEL_27;
      }
      v37 = this;
      v38 = a5;
      v39 = a2;
      v40 = a4;
      v41 = 112;
    }
    WordLanguageModel::loadBinaryShared((uint64_t)v37, v38, v39, (uint64_t)v40, v41, 1);
  }
LABEL_27:
  if (*((_DWORD *)this + 16) >= 2u && *((_BYTE *)this + 244))
  {
    v58 = 1;
    DFile::pushCurrentSubDirComponent(a2, (const SubDirExtension *)&v58, v26, v27, v28, v29, v30, v31);
    if (a3)
    {
      v58 = 1;
      DFile::pushCurrentSubDirComponent(a3, (const SubDirExtension *)&v58, v42, v43, v44, v45, v46, v47);
    }
    *((_QWORD *)this + 29) = LanguageModel::CreateAndLoadLanguageModel(a2, a3, a4, a5, (DgnSharedMemStream *)*((unsigned __int8 *)this + 24), a6, 0, 1u, *((_DWORD *)this + 8), v56, *((const WordList **)this + 2), a8, a9, a10, a11, a12, a13, 0);
    DFile::popCurrentSubDirComponent((uint64_t)a2);
    if (a3)
      DFile::popCurrentSubDirComponent((uint64_t)a3);
  }
  v48 = *((_DWORD *)this + 26);
  if (v48 >= 0xFFFF)
    v48 = 0xFFFF;
  *((_DWORD *)this + 27) = v48;
  if (a6)
    WordLanguageModel::checkWordListLMAgreement(this, v25, v26, v27, v28, v29, v30, v31);
  WordLanguageModel::initializeScoreToProb(this, v32, v33);
  v51 = *((unsigned int *)this + 28);
  if ((_DWORD)v51 != -1)
  {
    v52 = *(unsigned __int16 *)(*((_QWORD *)this + 21) + 2 * v51);
    if (v52 != 20000 && *((_DWORD *)this + 14) <= v52)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3968, (uint64_t)"lm/wordlm", 59, (uint64_t)"%.500s %u %u", v49, v50, (char)"unigram");
  }
  v53 = *((unsigned int *)this + 29);
  if ((_DWORD)v53 != -1
    && *((_DWORD *)this + 14) <= *(unsigned __int16 *)(*((_QWORD *)this + 21) + 2 * v53))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3975, (uint64_t)"lm/wordlm", 67, (uint64_t)"%.500s %u %u", v49, v50, (char)"unigram");
  }
  v54 = *((unsigned int *)this + 28);
  if ((_DWORD)v54 != -1
    && *((_DWORD *)this + 84)
    && *((_DWORD *)this + 14) <= *(unsigned __int16 *)(*((_QWORD *)this + 41) + 2 * v54))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3983, (uint64_t)"lm/wordlm", 59, (uint64_t)"%.500s %u %u", v49, v50, (char)"unigram backoff");
  }
  v55 = *((unsigned int *)this + 29);
  if ((_DWORD)v55 != -1
    && *((_DWORD *)this + 84)
    && *((_DWORD *)this + 14) <= *(unsigned __int16 *)(*((_QWORD *)this + 41) + 2 * v55))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3991, (uint64_t)"lm/wordlm", 67, (uint64_t)"%.500s %u %u", v49, v50, (char)"unigram backoff");
  }
}

void WordLanguageModel::loadWns(WordLanguageModel *this, DFile *a2, double *a3, double *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t FileVersion;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int HeaderField;
  uint64_t v49;
  uint64_t v50;
  int HeaderFieldUnsigned;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63[4];
  int v64;
  unsigned int v65;
  _QWORD v66[2];
  _BYTE v67[232];

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v67);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v67, (uint64_t)a2, 0x73u, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v67, "WordNGramSpec");
  v66[0] = 0;
  v66[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v67, sWNS_Versions, (uint64_t)v66, v8, v9, v10, v11, v12);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v67, (unsigned int *)v66, v13, v14, v15, v16, v17, v18);
  v65 = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v67, "Depth", &v65, 1, 1u, 4u);
  *((_DWORD *)this + 16) = v65;
  FileVersion = DgnTextFile::getFileVersion((DgnTextFile *)v67);
  v20 = FileVersion;
  v21 = HIDWORD(FileVersion);
  if ((_DWORD)FileVersion == 19)
  {
    if (HIDWORD(FileVersion) != 12)
      goto LABEL_12;
  }
  else if ((_DWORD)FileVersion != 24 || (HIDWORD(FileVersion) - 13) > 1)
  {
    goto LABEL_12;
  }
  DgnTextFile::getHeaderFieldReal((DgnTextFile *)v67, "AlienWordProbability", a3, 1, -1.0, 1.0);
  if (*a3 != -1.0 && *a3 < 0.0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4843, (uint64_t)"lm/wordlm", 4, (uint64_t)"%.500s", v22, v23, (char)"AlienWordProbability");
  DgnTextFile::getHeaderFieldReal((DgnTextFile *)v67, "AlienWordMinimumCount", a4, 1, -1.0, 1.0);
  if (*a4 != -1.0 && *a4 < 0.0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4849, (uint64_t)"lm/wordlm", 4, (uint64_t)"%.500s", v24, v25, (char)"AlienWordMinimumCount");
LABEL_12:
  v63[0] = 0;
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "AlienWordLmId", v63, 1, -1, 16777200);
  v28 = v63[0];
  if (!v63[0])
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4857, (uint64_t)"lm/wordlm", 4, (uint64_t)"%.500s", v26, v27, (char)"AlienWordLmId");
    v28 = v63[0];
  }
  *((_DWORD *)this + 18) = v28;
  if (v20 == 19)
  {
    if ((_DWORD)v21 != 12)
      goto LABEL_27;
LABEL_19:
    v29 = *a3 != -1.0;
    if (*a4 != -1.0)
      ++v29;
    if (v28 == -1)
      v30 = v29;
    else
      v30 = v29 + 1;
    if (v30 != 1)
    {
      if (v30)
      {
        v31 = &errStr_lm_wordlm_E_WNS_NEW_WORD_BEHAVIOR_SPECIFIED_TWICE;
        v32 = 13;
        v33 = 4878;
      }
      else
      {
        v31 = &errStr_lm_wordlm_E_WNS_NEW_WORD_BEHAVIOR_NOT_SPECIFIED;
        v32 = 12;
        v33 = 4876;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", v33, (uint64_t)"lm/wordlm", v32, (uint64_t)"%s", v26, v27, (char)v31);
    }
    goto LABEL_31;
  }
  if (v20 == 24 && (v21 - 13) <= 1)
    goto LABEL_19;
LABEL_27:
  if (v28 == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4883, (uint64_t)"lm/wordlm", 97, (uint64_t)"%s", v26, v27, (char)&errStr_lm_wordlm_E_WNS_ALIEN_WORD_LMID_NOT_SPECIFIED);
LABEL_31:
  DgnTextFile::getHeaderFieldBool((DgnTextFile *)v67, "AllowNewWordCloning", (BOOL *)this + 80, 1);
  v64 = 0;
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "IgnoreInContextLmId", &v64, 1, -1, 16777200);
  v41 = v64;
  if (!v64)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4893, (uint64_t)"lm/wordlm", 4, (uint64_t)"%.500s", v39, v40, (char)"IgnoreInContextLmId");
    v41 = v64;
  }
  *((_DWORD *)this + 25) = v41;
  if (*((_DWORD *)this + 16) >= 2u)
  {
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "UnknownContextLmId", &v64, 1, -1, 16777200);
    v44 = v64;
    if (!v64)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4907, (uint64_t)"lm/wordlm", 4, (uint64_t)"%.500s", v42, v43, (char)"UnknownContextLmId");
      v44 = v64;
    }
    if (v44 != -1 && *((_DWORD *)this + 18) == -1)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4915, (uint64_t)"lm/wordlm", 14, (uint64_t)"%s", v42, v43, (char)&errStr_lm_wordlm_E_UNKNOWNCONTEXTLMID_WITHOUT_ALIENWORDLMID);
      v44 = v64;
    }
    *((_DWORD *)this + 60) = v44;
    if (v20 == 19 && (_DWORD)v21 == 12)
    {
      v45 = -1;
    }
    else
    {
      v64 = 0;
      DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "AlienWordContextLmId", &v64, 1, -1, 16777200);
      v45 = v64;
      if (!v64)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4932, (uint64_t)"lm/wordlm", 4, (uint64_t)"%.500s", v46, v47, (char)"AlienWordContextLmId");
        v45 = v64;
      }
    }
    *((_DWORD *)this + 19) = v45;
    DgnString::DgnString((DgnString *)v63);
    v62 = 0;
    HeaderField = DgnTextFile::getHeaderField((DgnTextFile *)v67, "BackoffSubDirectory", (DgnString *)v63, 0);
    HeaderFieldUnsigned = DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v67, "BackoffAfterDepth", &v62, 0, 2u, 2u);
    if (HeaderField != HeaderFieldUnsigned)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4950, (uint64_t)"lm/wordlm", 3, (uint64_t)"%s", v49, v50, (char)&errStr_lm_wordlm_E_WNS_ONLY_ONE_BACKOFF_FIELD);
    if ((HeaderField & HeaderFieldUnsigned) == 1)
    {
      v61 = 1;
      if (!SubDirExtension::isString((SubDirExtension *)&v61, (const char **)v63))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4956, (uint64_t)"lm/wordlm", 4, (uint64_t)"%.500s", v52, v53, (char)"BackoffSubDirectory");
      v54 = 1;
      if (*((_DWORD *)this + 16) <= 1u)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4957, (uint64_t)"lm/wordlm", 1, (uint64_t)"%s", v52, v53, (char)&errStr_lm_wordlm_E_BAD_UPPER_LM);
    }
    else
    {
      v54 = 0;
    }
    *((_BYTE *)this + 244) = v54;
    DgnTextFile::getHeaderFieldBool((DgnTextFile *)v67, "HasStaticComponentOnDisk", (BOOL *)this + 245, 1);
    DgnTextFile::getHeaderFieldBool((DgnTextFile *)v67, "LoadNgrams", (BOOL *)this + 68, 1);
    if (v20 == 19)
    {
      if ((_DWORD)v21 != 12)
      {
LABEL_61:
        DgnString::~DgnString((DgnString *)v63);
        goto LABEL_62;
      }
    }
    else if (v20 != 24 || (_DWORD)v21 != 13)
    {
      goto LABEL_61;
    }
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "BuildMaximumBigramCountToDiscount", (int *)this + 21, 1, -1, 0x7FFFFFFF);
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "BuildMaximumNumBigramRecords", (int *)this + 22, 1, -1, 0x7FFFFFFF);
    DgnString::~DgnString((DgnString *)v63);
    if (*((_DWORD *)this + 16) > 2u)
    {
      if (v20 != 19)
      {
        if ((_DWORD)v21 != 13)
          goto LABEL_62;
LABEL_64:
        DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "BuildMaximumTrigramCountToDiscount", (int *)this + 23, 1, -1, 0x7FFFFFFF);
        DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "BuildMaximumNumTrigramRecords", (int *)this + 24, 1, -1, 0x7FFFFFFF);
        goto LABEL_62;
      }
      if ((_DWORD)v21 == 12)
        goto LABEL_64;
    }
  }
LABEL_62:
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v67, v34, v35, v36, v37, v38, v39, v40);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v67, 0, v55, v56, v57, v58, v59, v60);
  DgnTextFileParser::verifyNoBodyLines((DgnTextFileParser *)v67);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v66);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v67);
}

void sub_209983C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va2);
  _Unwind_Resume(a1);
}

void WordLanguageModel::loadText(WordLanguageModel *this, DFile *a2, int a3, unsigned int a4, unsigned int a5, double a6, double a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t FileVersion;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  const char **v38;
  int v39;
  const char *v40;
  unsigned int v41;
  const char *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  unsigned int v50;
  int v51;
  QuadgramData *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int Line;
  uint64_t v57;
  uint64_t v58;
  char *LineFieldString;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  const char *v73;
  const char *v74;
  uint64_t CurrentLine;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  char v79;
  char v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  char v121;
  int v122;
  uint64_t v123;
  int v124;
  int v125;
  char *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  unsigned int v268;
  signed int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  const char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  void *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  void *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  void *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  void *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  void *v359;
  const char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  void *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  void *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  void *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  void *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  void *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  void *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  void *v409;
  unsigned int v410;
  const char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  void *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  void *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  void *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  void *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  void *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  void *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  void *v451;
  uint64_t v452;
  const char *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  void *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  void *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  void *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  void *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  void *v489;
  unsigned int v490;
  signed int v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  void *v495;
  const char *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  void *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  void *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  void *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  void *v524;
  char v525;
  char v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  void *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  void *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  void *v538;
  unsigned int v539;
  unsigned int v540;
  unsigned int v541;
  const char *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  void *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  unsigned int v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  void *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  void *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  void *v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  void *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  void *v579;
  unsigned int v580;
  signed int v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  void *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  void *v590;
  int v591;
  const char *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  void *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  void *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  void *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  void *v620;
  char v621;
  char v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  void *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  void *v630;
  signed int v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  void *v635;
  const char *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  void *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  void *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  void *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  void *v664;
  char v665;
  char v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  void *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  void *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  void *v678;
  const char *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  void *v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  void *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  void *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  void *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  void *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  void *v715;
  unsigned int v716;
  signed int v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  void *v721;
  uint64_t v722;
  const char *v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  void *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  unsigned int v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  void *v744;
  int v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  void *v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  void *v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  void *v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  void *v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  void *v765;
  unsigned int v766;
  signed int v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  void *v771;
  uint64_t v772;
  signed int v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  void *v777;
  unsigned int v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  void *v782;
  int v783;
  const char *v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  void *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  void *v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  void *v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  void *v812;
  char v813;
  char v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  void *v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  void *v822;
  signed int v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  void *v827;
  const char *v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  void *v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  void *v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  void *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  void *v856;
  char v857;
  char v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  void *v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  void *v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  void *v870;
  const char *v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  void *v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  void *v891;
  int v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  void *v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  void *v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  void *v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  void *v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  void *v912;
  char v913;
  unsigned int v914;
  unsigned int v915;
  unsigned int v916;
  uint64_t v917;
  uint64_t v918;
  unint64_t v919;
  uint64_t v920;
  _QWORD *v921;
  unsigned int v922;
  unsigned int v923;
  uint64_t v924;
  uint64_t v925;
  unint64_t v926;
  uint64_t v927;
  _QWORD *v928;
  unsigned int v929;
  unsigned int v930;
  uint64_t v931;
  uint64_t v932;
  unint64_t v933;
  uint64_t v934;
  _QWORD *v935;
  uint64_t v936;
  unsigned int v937;
  unsigned int *v938;
  signed int v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  void *v943;
  uint64_t v944;
  uint64_t v945;
  unsigned int *v946;
  unsigned int v947;
  signed int v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  void *v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  void *v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  unsigned int v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  unint64_t v979;
  unsigned int v980;
  unint64_t v981;
  unsigned int v982;
  _BYTE *v983;
  uint64_t v984;
  const char *v985;
  uint64_t v986;
  unsigned int v987;
  unint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  int v992;
  int v993;
  uint64_t v994;
  BOOL v995;
  uint64_t v996;
  uint64_t v997;
  int v998;
  int v999;
  uint64_t v1000;
  BOOL v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  void **v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  _BOOL4 v1013;
  unsigned int v1014;
  int v1015;
  unsigned int v1019;
  uint64_t *v1020;
  unint64_t v1021;
  unsigned int v1022;
  unsigned int v1023;
  unsigned int v1024;
  unsigned int *v1025;
  unsigned int v1026;
  BigramData *v1027;
  unsigned int v1028;
  int v1029;
  unsigned int v1030;
  unsigned int v1031;
  unsigned int v1032;
  int v1033;
  _BOOL4 v1034;
  int v1035;
  unsigned int v1036;
  uint64_t v1037;
  unsigned int v1038;
  unsigned int v1039;
  signed int LineFieldInteger;
  unsigned int v1041;
  unsigned int v1042;
  uint64_t v1043;
  int v1044;
  unsigned int LineFieldUnsigned;
  int v1046;
  QuadgramData *v1047;
  TrigramData *v1048;
  void *v1049;
  unint64_t v1050;
  const char *v1051;
  unint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  unsigned __int16 v1066[4];
  uint64_t v1067;
  uint64_t v1068;
  _WORD *v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  unsigned __int16 v1078[4];
  uint64_t v1079;
  uint64_t v1080;
  _WORD *v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  const char *v1085;
  int v1086;
  _QWORD v1087[2];
  double v1088;
  uint64_t v1089;
  unint64_t v1090;
  unint64_t v1091;
  _QWORD v1092[2];
  _BYTE v1093[232];
  void *v1094;

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v1093);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v1093, (uint64_t)a2, 0x74u, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v1093, "WordNGramText");
  v1092[1] = 0;
  v1092[0] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v1093, sWNT_Versions, (uint64_t)v1092, v11, v12, v13, v14, v15);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v1093, (unsigned int *)v1092, v16, v17, v18, v19, v20, v21);
  FileVersion = DgnTextFile::getFileVersion((DgnTextFile *)v1093);
  LODWORD(v1088) = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v1093, "Depth", (unsigned int *)&v1088, 1, *((_DWORD *)this + 16), *((_DWORD *)this + 16));
  LODWORD(v1088) = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v1093, "LMScale", (unsigned int *)&v1088, 1, *((_DWORD *)this + 8), *((_DWORD *)this + 8));
  WordLanguageModel::initializeScoreToProb(this, v23, v24);
  v1025 = (unsigned int *)((char *)this + 104);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v1093, "NumLmIds", (unsigned int *)this + 26, 1, 2u, 0xFFFFF0u);
  WordLanguageModel::allocLmId((unint64_t)this, *((_DWORD *)this + 26) - 1);
  if ((_DWORD)FileVersion == 19)
  {
    if (HIDWORD(FileVersion) != 5)
      goto LABEL_7;
LABEL_6:
    LODWORD(v1088) = 0;
    DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v1093, "NumPermanentLmIds", (unsigned int *)&v1088, 1, 1u, *v1025);
    goto LABEL_7;
  }
  if ((_DWORD)FileVersion == 24 && (HIDWORD(FileVersion) & 0xFFFFFFFE) == 6)
    goto LABEL_6;
LABEL_7:
  LODWORD(v1088) = 0;
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v1093, "BegLmId", (int *)&v1088, 1, -1, *v1025 - 1);
  *((_DWORD *)this + 28) = LODWORD(v1088);
  LODWORD(v1088) = 0;
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v1093, "EndLmId", (int *)&v1088, 1, -1, *((_DWORD *)this + 26) - 1);
  *((_DWORD *)this + 29) = LODWORD(v1088);
  v1091 = 0;
  v1021 = HIDWORD(FileVersion);
  if ((_DWORD)FileVersion == 19)
  {
    if (HIDWORD(FileVersion) == 5)
      goto LABEL_9;
    goto LABEL_15;
  }
  if ((_DWORD)FileVersion == 24)
  {
    if ((HIDWORD(FileVersion) & 0xFFFFFFFE) == 6)
    {
LABEL_9:
      DgnTextFile::getHeaderFieldUnsigned64((DgnTextFile *)v1093, "UnigramTotalCount", &v1091, 1, 1uLL, 0xFFFFFFFFuLL);
      v1090 = 0;
      if (*((_DWORD *)this + 16) > 1u)
      {
        if ((_DWORD)FileVersion == 19)
        {
          if (HIDWORD(FileVersion) != 5)
            goto LABEL_21;
          goto LABEL_20;
        }
        goto LABEL_18;
      }
      goto LABEL_31;
    }
LABEL_15:
    v1090 = 0;
    if (*((_DWORD *)this + 16) <= 1u)
      goto LABEL_31;
    goto LABEL_21;
  }
  v1090 = 0;
  if (*((_DWORD *)this + 16) > 1u)
  {
LABEL_18:
    if ((_DWORD)FileVersion == 24 && (HIDWORD(FileVersion) & 0xFFFFFFFE) == 6)
LABEL_20:
      DgnTextFile::getHeaderFieldUnsigned64((DgnTextFile *)v1093, "UnigramBackoffTotalCount", &v1090, 1, 1uLL, 0xFFFFFFFFuLL);
LABEL_21:
    DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v1093, "ContextSkipDistance", (unsigned int *)this + 68, 1, 0, 1u);
    if (*((_DWORD *)this + 16) >= 3u && *((_DWORD *)this + 68))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5545, (uint64_t)"lm/wordlm", 32, (uint64_t)"%d %d", v32, v33, *((_DWORD *)this + 16));
    if ((_DWORD)FileVersion == 19)
    {
      if (HIDWORD(FileVersion) != 5)
        goto LABEL_30;
    }
    else if ((_DWORD)FileVersion != 24 || (HIDWORD(FileVersion) & 0xFFFFFFFE) != 6)
    {
      goto LABEL_30;
    }
    v1088 = 0.0;
    DgnTextFile::getHeaderFieldReal((DgnTextFile *)v1093, "BigramAbsoluteDiscount", &v1088, 1, 0.0, 1.0);
LABEL_30:
    DgnTextFile::getHeaderFieldBool((DgnTextFile *)v1093, "HasWordIdToContextLmId", (BOOL *)this + 276, 1);
  }
LABEL_31:
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v1093, v25, v26, v27, v28, v29, v30, v31);
  v1089 = 0;
  v1088 = 0.0;
  DgnTextFile::getLineFieldNames((uint64_t)v1093, (uint64_t)&v1088);
  v1087[1] = 0;
  v1087[0] = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v1093, (unint64_t)v1087);
  v1015 = FileVersion;
  if (!(_DWORD)v1089)
  {
    v1030 = -1;
    v1031 = -1;
    v1024 = -1;
    v1022 = -1;
    v1026 = -1;
    goto LABEL_91;
  }
  v36 = 0;
  v37 = 0;
  v1028 = -1;
  v1030 = -1;
  v1031 = -1;
  v1024 = -1;
  v1022 = -1;
  v1026 = -1;
  do
  {
    v38 = (const char **)(*(_QWORD *)&v1088 + v36);
    v39 = *(_DWORD *)(*(_QWORD *)&v1088 + v36 + 8);
    if (v39)
    {
      v40 = *v38;
      if (!strcmp(*v38, "TableName"))
      {
        if (*(_DWORD *)(v1087[0] + 4 * v37))
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5580, (uint64_t)"lm/wordlm", 39, (uint64_t)"%.500s %.500s", v34, v35, (char)v40);
        v1028 = v37;
        goto LABEL_77;
      }
    }
    else
    {
      v40 = (const char *)&unk_209A7B4F4;
    }
    if (!strcmp(v40, "Index1"))
    {
      if (*(_DWORD *)(v1087[0] + 4 * v37) != 3)
      {
        if (v39)
          v43 = *v38;
        else
          v43 = (const char *)&unk_209A7B4F4;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5588, (uint64_t)"lm/wordlm", 39, (uint64_t)"%.500s %.500s", v34, v35, (char)v43);
      }
      v1030 = v37;
    }
    else
    {
      v41 = *((_DWORD *)this + 16);
      if (v41 >= 2)
      {
        if (v39)
          v42 = *v38;
        else
          v42 = (const char *)&unk_209A7B4F4;
        if (!strcmp(v42, "Index2"))
        {
          if (*(_DWORD *)(v1087[0] + 4 * v37) != 3)
          {
            if (v39)
              v45 = *v38;
            else
              v45 = (const char *)&unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5596, (uint64_t)"lm/wordlm", 39, (uint64_t)"%.500s %.500s", v34, v35, (char)v45);
          }
          v1031 = v37;
          goto LABEL_77;
        }
        if (v41 >= 3)
        {
          if (v39)
            v44 = *v38;
          else
            v44 = (const char *)&unk_209A7B4F4;
          if (!strcmp(v44, "Index3"))
          {
            if (*(_DWORD *)(v1087[0] + 4 * v37) != 3)
            {
              if (v39)
                v47 = *v38;
              else
                v47 = (const char *)&unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5604, (uint64_t)"lm/wordlm", 39, (uint64_t)"%.500s %.500s", v34, v35, (char)v47);
            }
            v1024 = v37;
            goto LABEL_77;
          }
          if (v41 >= 4)
          {
            v46 = v39 ? *v38 : (const char *)&unk_209A7B4F4;
            if (!strcmp(v46, "Index4"))
            {
              if (*(_DWORD *)(v1087[0] + 4 * v37) != 3)
              {
                if (v39)
                  v49 = *v38;
                else
                  v49 = (const char *)&unk_209A7B4F4;
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5612, (uint64_t)"lm/wordlm", 39, (uint64_t)"%.500s %.500s", v34, v35, (char)v49);
              }
              v1022 = v37;
              goto LABEL_77;
            }
          }
        }
      }
      if (!v39)
      {
        v48 = (const char *)&unk_209A7B4F4;
LABEL_76:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5624, (uint64_t)"lm/wordlm", 37, (uint64_t)"%.500s %u", v34, v35, (char)v48);
        goto LABEL_77;
      }
      v48 = *v38;
      if (strcmp(*v38, "EntryValue1"))
        goto LABEL_76;
      if (*(_DWORD *)(v1087[0] + 4 * v37) != 1)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5620, (uint64_t)"lm/wordlm", 39, (uint64_t)"%.500s %.500s", v34, v35, (char)v48);
      v1026 = v37;
    }
LABEL_77:
    ++v37;
    v36 += 16;
  }
  while (v37 < v1089);
  if (v1028 == -1)
  {
LABEL_91:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5626, (uint64_t)"lm/wordlm", 38, (uint64_t)"%.500s", v34, v35, (char)"TableName");
    v1028 = -1;
  }
  if (v1030 == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5627, (uint64_t)"lm/wordlm", 38, (uint64_t)"%.500s", v34, v35, (char)"Index1");
  v50 = *((_DWORD *)this + 16);
  if (v50 >= 2 && v1031 == -1)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5629, (uint64_t)"lm/wordlm", 38, (uint64_t)"%.500s", v34, v35, (char)"Index2");
    v50 = *((_DWORD *)this + 16);
  }
  if (v50 >= 3 && v1024 == -1)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5631, (uint64_t)"lm/wordlm", 38, (uint64_t)"%.500s", v34, v35, (char)"Index3");
    v50 = *((_DWORD *)this + 16);
  }
  if (v50 >= 4 && v1022 == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5633, (uint64_t)"lm/wordlm", 38, (uint64_t)"%.500s", v34, v35, (char)"Index4");
  if (v1026 == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5634, (uint64_t)"lm/wordlm", 38, (uint64_t)"%.500s", v34, v35, (char)"EntryValue1");
  DgnString::DgnString((DgnString *)&v1085);
  v1019 = 0;
  v1014 = 0;
  v51 = 0;
  v1029 = 0;
  v1023 = 0;
  v1042 = 0;
  v1032 = 0;
  v1084 = 0;
  v1083 = 0;
  v1081 = 0;
  v1082 = 0;
  v1079 = 0;
  v1080 = 0;
  v1077 = 0;
  *(_QWORD *)v1078 = 0;
  v1075 = 0;
  v1076 = 0;
  v1073 = 0;
  v1074 = 0;
  v1071 = 0;
  v1072 = 0;
  v1069 = 0;
  v1070 = 0;
  v1067 = 0;
  v1068 = 0;
  v1065 = 0;
  *(_QWORD *)v1066 = 0;
  v1063 = 0;
  v1064 = 0;
  v1061 = 0;
  v1062 = 0;
  v1027 = (WordLanguageModel *)((char *)this + 360);
  v1059 = 0;
  v1060 = 0;
  v1057 = 0;
  v1058 = 0;
  v1055 = 0;
  v1056 = 0;
  v1053 = 0;
  v1054 = 0;
  v52 = (WordLanguageModel *)((char *)this + 1232);
  v1048 = (WordLanguageModel *)((char *)this + 744);
  v1020 = (uint64_t *)((char *)this + 328);
  v53 = -1;
  v1039 = -1;
  v54 = 0xFFFFFFFFLL;
  v1044 = -1;
  v1036 = -1;
  v55 = 0xFFFFFFFFLL;
  v1046 = -1;
  v1047 = (WordLanguageModel *)((char *)this + 1232);
  v1041 = -1;
  v1033 = 1;
  while (2)
  {
    Line = DgnTextFileParser::parseNextLine((DgnTextFileParser *)v1093);
    DgnString::DgnString((DgnString *)&v1051);
    v1043 = v54;
    v1037 = v55;
    if (!Line)
    {
      LineFieldInteger = 0;
      LineFieldUnsigned = 0;
      goto LABEL_124;
    }
    LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v1093, v1028);
    DgnString::operator=((DgnString *)&v1051, LineFieldString);
    LineFieldUnsigned = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1030, v60, v61, v62, v63, v64, v65);
    LineFieldInteger = DgnTextFileParser::getLineFieldInteger((DgnTextFileParser *)v1093, v1026, v66, v67, v68, v69, v70, v71);
    if ((v1033 & 1) != 0)
    {
      v72 = 0;
LABEL_117:
      if (LineFieldUnsigned < v1042)
      {
        CurrentLine = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
        if (*(_DWORD *)(CurrentLine + 8))
          v78 = *(void **)CurrentLine;
        else
          v78 = &unk_209A7B4F4;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5688, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v76, v77, (char)v78);
      }
    }
    else
    {
      if ((_DWORD)v1052)
        v73 = v1051;
      else
        v73 = (const char *)&unk_209A7B4F4;
      if (v1086)
        v74 = v1085;
      else
        v74 = (const char *)&unk_209A7B4F4;
      v72 = strcmp(v73, v74) != 0;
      if (!v72)
        goto LABEL_117;
    }
    if (!v72)
    {
      v79 = 0;
      if (LineFieldUnsigned == v1042 || (v1035 = 0, v1041 == -1))
      {
        v1035 = 0;
      }
      else
      {
LABEL_129:
        if (v1041 >= *((_DWORD *)this + 88) || *(_WORD *)(*((_QWORD *)this + 43) + 2 * v1041) == 20000)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5696, (uint64_t)"lm/wordlm", 42, (uint64_t)"%u", v57, v58, v1041);
        BigramData::fillBigramRecord(v1027, v1041, (uint64_t)&v1083, &v1081, &v1079);
        LODWORD(v1084) = 0;
        LODWORD(v1082) = 0;
        LODWORD(v1080) = 0;
        if ((v79 & 1) != 0)
        {
          LODWORD(v54) = v1043;
          goto LABEL_134;
        }
        v1041 = -1;
      }
      if (LineFieldUnsigned != v1042 && v1039 != -1)
      {
        v80 = 0;
LABEL_141:
        TrigramData::allocTri1(v1048, v1039, v1078[0]);
        if (*(_DWORD *)v1078)
        {
          v81 = 0;
          do
          {
            v82 = v81 + *(_DWORD *)(*((_QWORD *)this + 101) + 4 * v1039);
            v83 = v82;
            *(_WORD *)(*((_QWORD *)this + 103) + 2 * v82) = 0;
            if (*((_DWORD *)this + 187))
              *(_BYTE *)(*((_QWORD *)this + 107) + v82) = 0;
            else
              *(_WORD *)(*((_QWORD *)this + 105) + 2 * v82) = 20000;
            TrigramData::tri2SetUnallocated((uint64_t)v1048, v82);
            *(_WORD *)(*((_QWORD *)this + 103) + 2 * v83) = *(_WORD *)(v1077 + 2 * v81);
            if (*((_DWORD *)this + 192))
              *(_BYTE *)(*((_QWORD *)this + 107) + v83) = *(_BYTE *)(v1073 + v81);
            else
              *(_WORD *)(*((_QWORD *)this + 105) + 2 * v83) = *(_WORD *)(v1075 + 2 * v81);
            ++v81;
          }
          while (v81 < *(unsigned int *)v1078);
        }
        *(_DWORD *)v1078 = 0;
        LODWORD(v1076) = 0;
        LODWORD(v1074) = 0;
        if ((v80 & 1) != 0)
        {
          LODWORD(v54) = v1043;
          goto LABEL_152;
        }
        v1039 = -1;
      }
      v84 = 0;
      if (LineFieldUnsigned != v1042)
      {
        v85 = v1036;
        if (v1036 != -1)
        {
LABEL_157:
          QuadgramData::allocQuad1(v52, v85, v1066[0]);
          if (*(_DWORD *)v1066)
          {
            v86 = 0;
            v87 = 0;
            do
            {
              v88 = v87 + *(_DWORD *)(*((_QWORD *)this + 162) + 4 * v1036);
              *(_WORD *)(*((_QWORD *)this + 164) + 2 * v88) = 0;
              QuadgramData::quad2SetUnallocated((uint64_t)v1047, v88);
              *(_WORD *)(*((_QWORD *)this + 164) + 2 * v88) = *(_WORD *)(v1065 + 2 * v87);
              QuadgramData::fillQuad2BackoffWeights((unint64_t)v1047, v88, (uint64_t *)(v1063 + v86), (uint64_t *)(v1061 + v86), (_QWORD *)(v1059 + v86));
              v51 += *(_DWORD *)(v1063 + v86 + 8);
              ++v87;
              v86 += 16;
            }
            while (v87 < *(unsigned int *)v1066);
          }
          *(_DWORD *)v1066 = 0;
          if ((int)v1064 >= 1)
          {
            v89 = 16 * v1064 - 16;
            do
            {
              DgnPrimArray<unsigned int>::~DgnPrimArray(v1063 + v89);
              v89 -= 16;
            }
            while (v89 != -16);
          }
          LODWORD(v1064) = 0;
          v52 = (WordLanguageModel *)((char *)this + 1232);
          if ((int)v1062 >= 1)
          {
            v90 = 16 * v1062 - 16;
            do
            {
              DgnPrimArray<unsigned int>::~DgnPrimArray(v1061 + v90);
              v90 -= 16;
            }
            while (v90 != -16);
          }
          LODWORD(v1062) = 0;
          if ((int)v1060 >= 1)
          {
            v91 = 16 * v1060 - 16;
            do
            {
              DgnPrimArray<unsigned int>::~DgnPrimArray(v1059 + v91);
              v91 -= 16;
            }
            while (v91 != -16);
          }
          LODWORD(v1060) = 0;
          v1036 = -1;
        }
      }
      v1034 = LineFieldUnsigned == v1042;
      if (v84 || LineFieldUnsigned != v1042)
      {
        LODWORD(v54) = v1043;
        goto LABEL_180;
      }
      if (*((_DWORD *)this + 16) >= 3u
        && ((_DWORD)v1052 ? (v92 = v1051) : (v92 = (const char *)&unk_209A7B4F4), !strcmp(v92, "TriSc")))
      {
        v99 = 1;
        if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v93, v94, v95, v96, v97, v98) != v1023)
        {
          v1034 = 1;
          LineFieldUnsigned = v1042;
          if ((_DWORD)v1043 != -1)
            goto LABEL_182;
        }
        LineFieldUnsigned = v1042;
        v1034 = 1;
      }
      else
      {
        v1034 = 1;
        LineFieldUnsigned = v1042;
      }
LABEL_192:
      if (*((_DWORD *)this + 16) < 4u)
        goto LABEL_197;
      v104 = (_DWORD)v1052 ? v1051 : (const char *)&unk_209A7B4F4;
      if (strcmp(v104, "QuadSc"))
        goto LABEL_197;
      if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v105, v106, v107, v108, v109, v110) != v1023)goto LABEL_203;
      if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v111, v112, v113, v114, v57, v58) == v1019)
      {
LABEL_197:
        v55 = v1037;
        if (!Line)
          break;
      }
      else
      {
        v55 = v1037;
        if ((_DWORD)v1037 != -1)
          goto LABEL_204;
LABEL_224:
        if (!Line)
          break;
      }
      goto LABEL_225;
    }
    LODWORD(v54) = v1043;
LABEL_124:
    if (v1041 != -1)
    {
      v79 = 1;
      v1035 = Line;
      goto LABEL_129;
    }
    v1035 = Line;
LABEL_134:
    v1041 = -1;
    if (v1039 != -1)
    {
      v80 = 1;
      goto LABEL_141;
    }
LABEL_152:
    if (v1036 != -1)
    {
      v84 = 1;
      v1039 = -1;
      v85 = v1036;
      goto LABEL_157;
    }
    v1034 = LineFieldUnsigned == v1042;
    v1036 = -1;
    v1039 = -1;
LABEL_180:
    if ((_DWORD)v54 == -1)
    {
      v1043 = 0xFFFFFFFFLL;
    }
    else
    {
      v99 = 0;
LABEL_182:
      if (*((_DWORD *)this + 200) > v1043
        && (v100 = *((_QWORD *)this + 99),
            LODWORD(v101) = *(unsigned __int16 *)(v100 + 2 * v1043),
            *(_WORD *)(v100 + 2 * v1043))
        || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5774, (uint64_t)"lm/wordlm", 47, (uint64_t)"%u %u", v57, v58, v1043), v102 = *((_QWORD *)this + 99), LODWORD(v101) = *(unsigned __int16 *)(v102 + 2 * v1043), *(_WORD *)(v102 + 2 * v1043)))
      {
        v103 = *(_DWORD *)(*((_QWORD *)this + 101) + 4 * v1043);
        v101 = v101;
        while (v1044 != *(unsigned __int16 *)(*((_QWORD *)this + 103) + 2 * v103))
        {
          ++v103;
          if (!--v101)
            goto LABEL_188;
        }
        TrigramData::fillTrigramRecord((unint64_t)v1048, v103, (uint64_t)&v1071, &v1069, &v1067);
      }
      else
      {
LABEL_188:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5794, (uint64_t)"lm/wordlm", 47, (uint64_t)"%u %u", v57, v58, v1043);
      }
      LODWORD(v1072) = 0;
      LODWORD(v1070) = 0;
      LODWORD(v1068) = 0;
      v1043 = 0xFFFFFFFFLL;
      v1044 = -1;
      if (v99)
        goto LABEL_192;
    }
LABEL_203:
    LODWORD(v55) = v1037;
    if ((_DWORD)v1037 != -1)
    {
LABEL_204:
      v115 = v55;
      v116 = v55;
      if (*((_DWORD *)this + 322) > v55
        && (v117 = *((_QWORD *)this + 160),
            v118 = *(unsigned __int16 *)(v117 + 2 * v55),
            *(_WORD *)(v117 + 2 * v115))
        || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5815, (uint64_t)"lm/wordlm", 54, (uint64_t)"%u %u %u", v57, v58, v115), v119 = *((_QWORD *)this + 160), v118 = *(unsigned __int16 *)(v119 + 2 * v1037), *(_WORD *)(v119 + 2 * v1037)))
      {
        v120 = 0;
        v121 = 0;
        while (2)
        {
          v122 = *(_DWORD *)(*((_QWORD *)this + 162) + 4 * v116);
          while (1)
          {
            v123 = (v122 + v120);
            if (v1046 == *(unsigned __int16 *)(*((_QWORD *)this + 164) + 2 * v123))
            {
              if (*(_WORD *)(*((_QWORD *)this + 166) + 2 * v123))
                break;
            }
LABEL_217:
            if (++v120 == v118)
            {
              if ((v121 & 1) != 0)
                goto LABEL_223;
              goto LABEL_222;
            }
          }
          v124 = 0;
          while (1)
          {
            v125 = *(_DWORD *)(*((_QWORD *)this + 185) + 4 * v123);
            v126 = (char *)this + 1496;
            if (*((_DWORD *)this + 308))
            {
              v125 = *(_DWORD *)(*((_QWORD *)this + 185) + 4 * v123);
              v126 = (char *)this + 1496;
              if ((*(_DWORD *)(*((_QWORD *)this + 168) + 4 * (v123 >> 5)) & (1 << (v122 + v120))) != 0)
              {
                v125 = *(_DWORD *)(*((_QWORD *)this + 207) + 4 * *(unsigned int *)(*((_QWORD *)this + 185) + 4 * v123));
                v126 = (char *)this + 1672;
              }
            }
            if (v53 == *(unsigned __int16 *)(*(_QWORD *)v126 + 2 * (v125 + v124)))
              break;
            if (*(unsigned __int16 *)(*((_QWORD *)this + 166) + 2 * v123) == ++v124)
              goto LABEL_217;
          }
          QuadgramData::fillQuadgramRecord((unint64_t)v52, v123, v124, (uint64_t)&v1057, &v1055, &v1053);
          ++v120;
          v121 = 1;
          if (v120 != v118)
            continue;
          break;
        }
      }
      else
      {
LABEL_222:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5848, (uint64_t)"lm/wordlm", 54, (uint64_t)"%u %u %u", v57, v58, v1037);
      }
LABEL_223:
      ++v1029;
      LODWORD(v1058) = 0;
      LODWORD(v1056) = 0;
      LODWORD(v1054) = 0;
      v55 = 0xFFFFFFFFLL;
      v1046 = -1;
      v53 = -1;
      goto LABEL_224;
    }
    v55 = 0xFFFFFFFFLL;
    if (Line)
    {
LABEL_225:
      if ((_DWORD)v1052)
        v127 = v1051;
      else
        v127 = (const char *)&unk_209A7B4F4;
      if (!strcmp(v127, "UniSc"))
      {
        if (((v1033 | v1035 ^ 1) & 1) == 0)
        {
          v274 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v274 + 8))
            v277 = *(void **)v274;
          else
            v277 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5867, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v275, v276, (char)v277);
        }
        if (*((_DWORD *)this + 16) >= 2u)
        {
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v128, v129, v130, v131, v132, v133))
          {
            v284 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v284 + 8))
              v287 = *(void **)v284;
            else
              v287 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5871, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v285, v286, (char)v287);
          }
          if (*((_DWORD *)this + 16) >= 3u)
          {
            if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v278, v279, v280, v281, v282, v283))
            {
              v294 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v294 + 8))
                v297 = *(void **)v294;
              else
                v297 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5875, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v295, v296, (char)v297);
            }
            if (*((_DWORD *)this + 16) >= 4u
              && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v288, v289, v290, v291, v292, v293))
            {
              v298 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v298 + 8))
                v301 = *(void **)v298;
              else
                v301 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5879, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v299, v300, (char)v301);
            }
          }
        }
        if (((v1035 ^ 1) & v1034) == 1)
        {
          v302 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v302 + 8))
            v305 = *(void **)v302;
          else
            v305 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5882, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v303, v304, (char)v305);
        }
        if (!LineFieldUnsigned || LineFieldUnsigned >= *v1025)
        {
          v306 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v306 + 8))
            v309 = *(void **)v306;
          else
            v309 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5886, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v307, v308, (char)v309);
        }
        if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
        {
          v310 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v310 + 8))
            v313 = *(void **)v310;
          else
            v313 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5893, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v311, v312, (char)v313);
        }
        *(_WORD *)(*((_QWORD *)this + 21) + 2 * LineFieldUnsigned) = LineFieldInteger;
        v1032 = LineFieldUnsigned;
        goto LABEL_814;
      }
      if (!strcmp(v127, "WordIdToLmId"))
      {
        if (v1035)
        {
          v314 = v1086 ? v1085 : (const char *)&unk_209A7B4F4;
          if (strcmp(v314, "UniSc"))
          {
            v315 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v315 + 8))
              v318 = *(void **)v315;
            else
              v318 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5901, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v316, v317, (char)v318);
          }
        }
        if (*((_DWORD *)this + 16) >= 2u)
        {
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v134, v135, v136, v137, v138, v139))
          {
            v325 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v325 + 8))
              v328 = *(void **)v325;
            else
              v328 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5905, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v326, v327, (char)v328);
          }
          if (*((_DWORD *)this + 16) >= 3u)
          {
            if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v319, v320, v321, v322, v323, v324))
            {
              v335 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v335 + 8))
                v338 = *(void **)v335;
              else
                v338 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5909, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v336, v337, (char)v338);
            }
            if (*((_DWORD *)this + 16) >= 4u
              && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v329, v330, v331, v332, v333, v334))
            {
              v339 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v339 + 8))
                v342 = *(void **)v339;
              else
                v342 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5913, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v340, v341, (char)v342);
            }
          }
        }
        if ((v1034 & ~v1035) == 1)
        {
          v343 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v343 + 8))
            v346 = *(void **)v343;
          else
            v346 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5916, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v344, v345, (char)v346);
        }
        if (LineFieldUnsigned > 0xFFFFF3)
        {
          v347 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v347 + 8))
            v350 = *(void **)v347;
          else
            v350 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5919, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v348, v349, (char)v350);
        }
        v351 = *((_QWORD *)this + 2);
        if (*(_DWORD *)(v351 + 388) <= LineFieldUnsigned || !*(_BYTE *)(*(_QWORD *)(v351 + 104) + LineFieldUnsigned))
        {
          v352 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v352 + 8))
            v355 = *(void **)v352;
          else
            v355 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5923, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v353, v354, (char)v355);
        }
        if (LineFieldInteger < 1
          || LineFieldInteger > (int)v1032
          || *(_WORD *)(*((_QWORD *)this + 21) + 2 * LineFieldInteger) == 20000)
        {
          v356 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v356 + 8))
            v359 = *(void **)v356;
          else
            v359 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5928, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v357, v358, (char)v359);
        }
        WordLanguageModel::recordWordIdLmIdUsage(this, LineFieldUnsigned, LineFieldInteger);
        goto LABEL_814;
      }
      v140 = *((_DWORD *)this + 16);
      if (v140 < 2)
        goto LABEL_814;
      if (!strcmp(v127, "WordIdToContextLmId"))
      {
        if (!v1035
          || (v1086 ? (v360 = v1085) : (v360 = (const char *)&unk_209A7B4F4),
              !strcmp(v360, "UniSc")
           || !strcmp(v360, "WordIdToLmId")
           || ((v361 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093), *(_DWORD *)(v361 + 8))
             ? (v364 = *(void **)v361)
             : (v364 = &unk_209A7B4F4),
               errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5938, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v362, v363, (char)v364), *((_DWORD *)this + 16) >= 2u)))
        {
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v141, v142, v143, v144, v145, v146))
          {
            v371 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v371 + 8))
              v374 = *(void **)v371;
            else
              v374 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5942, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v372, v373, (char)v374);
          }
          if (*((_DWORD *)this + 16) >= 3u)
          {
            if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v365, v366, v367, v368, v369, v370))
            {
              v381 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v381 + 8))
                v384 = *(void **)v381;
              else
                v384 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5946, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v382, v383, (char)v384);
            }
            if (*((_DWORD *)this + 16) >= 4u
              && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v375, v376, v377, v378, v379, v380))
            {
              v385 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v385 + 8))
                v388 = *(void **)v385;
              else
                v388 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5950, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v386, v387, (char)v388);
            }
          }
          if ((v1034 & ~v1035) == 1)
          {
            v389 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v389 + 8))
              v392 = *(void **)v389;
            else
              v392 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5953, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v390, v391, (char)v392);
          }
        }
        if (LineFieldUnsigned > 0xFFFFF3)
        {
          v393 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v393 + 8))
            v396 = *(void **)v393;
          else
            v396 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5956, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v394, v395, (char)v396);
        }
        v397 = *((_QWORD *)this + 2);
        if (*(_DWORD *)(v397 + 388) <= LineFieldUnsigned || !*(_BYTE *)(*(_QWORD *)(v397 + 104) + LineFieldUnsigned))
        {
          v398 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v398 + 8))
            v401 = *(void **)v398;
          else
            v401 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5960, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v399, v400, (char)v401);
        }
        if (LineFieldInteger < 1 || LineFieldInteger >= (int)*v1025)
        {
          v402 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v402 + 8))
            v405 = *(void **)v402;
          else
            v405 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5964, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v403, v404, (char)v405);
        }
        if (!*((_BYTE *)this + 276))
        {
          v406 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v406 + 8))
            v409 = *(void **)v406;
          else
            v409 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5967, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v407, v408, (char)v409);
        }
        v410 = v1032;
        if (v1032 <= LineFieldInteger)
          v410 = LineFieldInteger;
        v1032 = v410;
        WordLanguageModel::recordWordIdContextLmIdUsage(this, LineFieldUnsigned, LineFieldInteger);
        goto LABEL_814;
      }
      if (!strcmp(v127, "UniBoSc"))
      {
        if (!v1035
          || (v1086 ? (v411 = v1085) : (v411 = (const char *)&unk_209A7B4F4),
              !strcmp(v411, "UniSc")
           || !strcmp(v411, "WordIdToLmId")
           || !strcmp(v411, "WordIdToContextLmId")
           || ((v412 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093), *(_DWORD *)(v412 + 8))
             ? (v415 = *(void **)v412)
             : (v415 = &unk_209A7B4F4),
               errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5982, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v413, v414, (char)v415), *((_DWORD *)this + 16) >= 2u)))
        {
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v147, v148, v149, v150, v151, v152))
          {
            v422 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v422 + 8))
              v425 = *(void **)v422;
            else
              v425 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5986, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v423, v424, (char)v425);
          }
          if (*((_DWORD *)this + 16) >= 3u)
          {
            if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v416, v417, v418, v419, v420, v421))
            {
              v432 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v432 + 8))
                v435 = *(void **)v432;
              else
                v435 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5990, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v433, v434, (char)v435);
            }
            if (*((_DWORD *)this + 16) >= 4u
              && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v426, v427, v428, v429, v430, v431))
            {
              v436 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v436 + 8))
                v439 = *(void **)v436;
              else
                v439 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5994, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v437, v438, (char)v439);
            }
          }
          if ((v1034 & ~v1035) == 1)
          {
            v440 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v440 + 8))
              v443 = *(void **)v440;
            else
              v443 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5997, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v441, v442, (char)v443);
          }
        }
        if (LineFieldUnsigned - 1 >= v1032 || *(_WORD *)(*((_QWORD *)this + 21) + 2 * LineFieldUnsigned) == 20000)
        {
          v444 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v444 + 8))
            v447 = *(void **)v444;
          else
            v447 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6002, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v445, v446, (char)v447);
        }
        if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
        {
          v448 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v448 + 8))
            v451 = *(void **)v448;
          else
            v451 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6007, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v449, v450, (char)v451);
        }
        if (*((_DWORD *)this + 84))
        {
          v452 = *v1020;
        }
        else
        {
          v539 = *((_DWORD *)this + 26);
          v540 = *((_DWORD *)this + 85);
          v541 = v539;
          if (v539 > v540)
          {
            DgnPrimArray<short>::reallocElts((uint64_t)v1020, v539 - v540, 0);
            v541 = *v1025;
          }
          *((_DWORD *)this + 84) = v539;
          v452 = *((_QWORD *)this + 41);
          if (v541)
            memset_pattern16(*((void **)this + 41), &unk_209A75B40, 2 * v541);
        }
        *(_WORD *)(v452 + 2 * LineFieldUnsigned) = LineFieldInteger;
        goto LABEL_814;
      }
      if (!strcmp(v127, "BoWt"))
      {
        if (!v1035
          || (v1086 ? (v453 = v1085) : (v453 = (const char *)&unk_209A7B4F4),
              !strcmp(v453, "UniSc")
           || !strcmp(v453, "WordIdToLmId")
           || !strcmp(v453, "WordIdToContextLmId")
           || !strcmp(v453, "UniBoSc")
           || ((v454 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093), *(_DWORD *)(v454 + 8))
             ? (v457 = *(void **)v454)
             : (v457 = &unk_209A7B4F4),
               errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6026, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v455, v456, (char)v457), *((_DWORD *)this + 16) >= 2u)))
        {
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v153, v154, v155, v156, v157, v158))
          {
            v464 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v464 + 8))
              v467 = *(void **)v464;
            else
              v467 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6030, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v465, v466, (char)v467);
          }
          if (*((_DWORD *)this + 16) >= 3u)
          {
            if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v458, v459, v460, v461, v462, v463))
            {
              v474 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v474 + 8))
                v477 = *(void **)v474;
              else
                v477 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6034, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v475, v476, (char)v477);
            }
            if (*((_DWORD *)this + 16) >= 4u
              && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v468, v469, v470, v471, v472, v473))
            {
              v478 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v478 + 8))
                v481 = *(void **)v478;
              else
                v481 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6038, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v479, v480, (char)v481);
            }
          }
          if ((v1034 & ~v1035) == 1)
          {
            v482 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v482 + 8))
              v485 = *(void **)v482;
            else
              v485 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6041, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v483, v484, (char)v485);
          }
        }
        if (!LineFieldUnsigned || LineFieldUnsigned >= *v1025)
        {
          v486 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v486 + 8))
            v489 = *(void **)v486;
          else
            v489 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6045, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v487, v488, (char)v489);
        }
        v490 = v1032;
        if (v1032 <= LineFieldUnsigned)
          v490 = LineFieldUnsigned;
        v1032 = v490;
        v491 = *((_DWORD *)this + 14);
        if (LineFieldInteger <= -v491 || LineFieldInteger >= v491)
        {
          v492 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v492 + 8))
            v495 = *(void **)v492;
          else
            v495 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6054, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v493, v494, (char)v495);
        }
        *(_WORD *)(*((_QWORD *)this + 43) + 2 * LineFieldUnsigned) = LineFieldInteger;
        goto LABEL_814;
      }
      if (!strcmp(v127, "BiScQuant"))
      {
        if (!v1035
          || (v1086 ? (v496 = v1085) : (v496 = (const char *)&unk_209A7B4F4),
              !strcmp(v496, "UniSc")
           || !strcmp(v496, "WordIdToLmId")
           || !strcmp(v496, "WordIdToContextLmId")
           || !strcmp(v496, "UniBoSc")
           || !strcmp(v496, "BoWt")
           || ((v497 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093), *(_DWORD *)(v497 + 8))
             ? (v500 = *(void **)v497)
             : (v500 = &unk_209A7B4F4),
               errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6066, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v498, v499, (char)v500), *((_DWORD *)this + 16) >= 2u)))
        {
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v159, v160, v161, v162, v163, v164))
          {
            v507 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v507 + 8))
              v510 = *(void **)v507;
            else
              v510 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6070, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v508, v509, (char)v510);
          }
          if (*((_DWORD *)this + 16) >= 3u)
          {
            if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v501, v502, v503, v504, v505, v506))
            {
              v517 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v517 + 8))
                v520 = *(void **)v517;
              else
                v520 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6074, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v518, v519, (char)v520);
            }
            if (*((_DWORD *)this + 16) >= 4u
              && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v511, v512, v513, v514, v515, v516))
            {
              v521 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v521 + 8))
                v524 = *(void **)v521;
              else
                v524 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6078, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v522, v523, (char)v524);
            }
          }
        }
        v525 = v1035;
        if (LineFieldUnsigned == 1)
          v525 = 0;
        if ((v525 & 1) != 0)
          goto LABEL_616;
        v526 = v1035;
        if (LineFieldUnsigned == v1042 + 1)
          v526 = 1;
        if ((v526 & 1) == 0)
        {
LABEL_616:
          v527 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v527 + 8))
            v530 = *(void **)v527;
          else
            v530 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6082, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v528, v529, (char)v530);
        }
        if (LineFieldUnsigned - 256 <= 0xFFFFFF00)
        {
          v531 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v531 + 8))
            v534 = *(void **)v531;
          else
            v534 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6085, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v532, v533, (char)v534);
        }
        if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
        {
          v535 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v535 + 8))
            v538 = *(void **)v535;
          else
            v538 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6089, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v536, v537, (char)v538);
        }
        BigramData::addBigramScoreQuantization(v1027, 0, LineFieldInteger);
        goto LABEL_814;
      }
      if (!strcmp(v127, "BiSc"))
      {
        if (v1035)
        {
          v542 = v1086 ? v1085 : (const char *)&unk_209A7B4F4;
          if (strcmp(v542, "UniSc")
            && strcmp(v542, "WordIdToLmId")
            && strcmp(v542, "WordIdToContextLmId")
            && strcmp(v542, "UniBoSc")
            && strcmp(v542, "BoWt")
            && strcmp(v542, "BiScQuant"))
          {
            v543 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v543 + 8))
              v546 = *(void **)v543;
            else
              v546 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6103, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v544, v545, (char)v546);
          }
        }
        v553 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v165, v166, v167, v168, v169, v170);
        if (*((_DWORD *)this + 16) >= 3u)
        {
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v547, v548, v549, v550, v551, v552))
          {
            v560 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v560 + 8))
              v563 = *(void **)v560;
            else
              v563 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6108, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v561, v562, (char)v563);
          }
          if (*((_DWORD *)this + 16) >= 4u
            && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v554, v555, v556, v557, v558, v559))
          {
            v564 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v564 + 8))
              v567 = *(void **)v564;
            else
              v567 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6112, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v565, v566, (char)v567);
          }
        }
        if (((v1035 | !v1034) & 1) == 0 && v553 <= v1023)
        {
          v568 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v568 + 8))
            v571 = *(void **)v568;
          else
            v571 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6116, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v569, v570, (char)v571);
        }
        if (LineFieldUnsigned - 1 >= v1032
          || *(_WORD *)(*((_QWORD *)this + 43) + 2 * LineFieldUnsigned) == 20000
          || LineFieldUnsigned >= *v1025)
        {
          v572 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v572 + 8))
            v575 = *(void **)v572;
          else
            v575 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6122, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v573, v574, (char)v575);
        }
        if (v553 - 1 >= v1032
          || *(_WORD *)(*((_QWORD *)this + 21) + 2 * v553) == 20000
          || v553 > 0xFFFE
          || v553 >= *v1025)
        {
          v576 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v576 + 8))
            v579 = *(void **)v576;
          else
            v579 = &unk_209A7B4F4;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6129, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v577, v578, (char)v579);
        }
        v580 = v1084;
        if ((_DWORD)v1084 == HIDWORD(v1084))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v1083, 1, 1);
          v580 = v1084;
        }
        *(_WORD *)(v1083 + 2 * v580) = v553;
        LODWORD(v1084) = v580 + 1;
        v581 = *((_DWORD *)this + 94);
        if (v581)
        {
          if (LineFieldInteger < 1 || LineFieldInteger >= v581)
          {
            v582 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v582 + 8))
              v585 = *(void **)v582;
            else
              v585 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6143, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v583, v584, (char)v585);
          }
          v586 = v1080;
          if (v1080 == (unint64_t)HIDWORD(v1080))
          {
            DgnPrimArray<char>::reallocElts((uint64_t)&v1079, 1, 1);
            v586 = v1080;
          }
          *(_BYTE *)(v1079 + v586) = LineFieldInteger;
          LODWORD(v1080) = v1080 + 1;
        }
        else
        {
          if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
          {
            v587 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v587 + 8))
              v590 = *(void **)v587;
            else
              v590 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6151, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v588, v589, (char)v590);
          }
          v591 = v1082;
          if ((_DWORD)v1082 == HIDWORD(v1082))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v1081, 1, 1);
            v591 = v1082;
          }
          v1081[v591] = LineFieldInteger;
          LODWORD(v1082) = v591 + 1;
        }
        v1041 = LineFieldUnsigned;
      }
      else
      {
        if (v140 < 3)
          goto LABEL_814;
        if (!strcmp(v127, "TriBoWtQuant"))
        {
          if (v1035)
          {
            v592 = v1086 ? v1085 : (const char *)&unk_209A7B4F4;
            if (strcmp(v592, "UniSc")
              && strcmp(v592, "WordIdToLmId")
              && strcmp(v592, "WordIdToContextLmId")
              && strcmp(v592, "UniBoSc")
              && strcmp(v592, "BoWt")
              && strcmp(v592, "BiScQuant")
              && strcmp(v592, "BiSc"))
            {
              v593 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v593 + 8))
                v596 = *(void **)v593;
              else
                v596 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6167, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v594, v595, (char)v596);
            }
          }
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v171, v172, v173, v174, v175, v176))
          {
            v603 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v603 + 8))
              v606 = *(void **)v603;
            else
              v606 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6170, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v604, v605, (char)v606);
          }
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v597, v598, v599, v600, v601, v602))
          {
            v613 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v613 + 8))
              v616 = *(void **)v613;
            else
              v616 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6173, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v614, v615, (char)v616);
          }
          if (*((_DWORD *)this + 16) >= 4u
            && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v607, v608, v609, v610, v611, v612))
          {
            v617 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v617 + 8))
              v620 = *(void **)v617;
            else
              v620 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6177, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v618, v619, (char)v620);
          }
          v621 = v1035;
          if (LineFieldUnsigned == 1)
            v621 = 0;
          if ((v621 & 1) != 0)
            goto LABEL_744;
          v622 = v1035;
          if (LineFieldUnsigned == v1042 + 1)
            v622 = 1;
          if ((v622 & 1) == 0)
          {
LABEL_744:
            v623 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v623 + 8))
              v626 = *(void **)v623;
            else
              v626 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6181, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v624, v625, (char)v626);
          }
          if (LineFieldUnsigned - 256 <= 0xFFFFFF00)
          {
            v627 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v627 + 8))
              v630 = *(void **)v627;
            else
              v630 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6184, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v628, v629, (char)v630);
          }
          v631 = *((_DWORD *)this + 14);
          if (LineFieldInteger <= -v631 || LineFieldInteger >= v631)
          {
            v632 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v632 + 8))
              v635 = *(void **)v632;
            else
              v635 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6188, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v633, v634, (char)v635);
          }
          TrigramData::addTrigramBackoffWeightQuantization(v1048, 0, LineFieldInteger);
          goto LABEL_814;
        }
        if (!strcmp(v127, "TriScQuant"))
        {
          if (v1035)
          {
            v636 = v1086 ? v1085 : (const char *)&unk_209A7B4F4;
            if (strcmp(v636, "UniSc")
              && strcmp(v636, "WordIdToLmId")
              && strcmp(v636, "WordIdToContextLmId")
              && strcmp(v636, "UniBoSc")
              && strcmp(v636, "BoWt")
              && strcmp(v636, "BiScQuant")
              && strcmp(v636, "BiSc")
              && strcmp(v636, "TriBoWtQuant"))
            {
              v637 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v637 + 8))
                v640 = *(void **)v637;
              else
                v640 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6204, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v638, v639, (char)v640);
            }
          }
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v177, v178, v179, v180, v181, v182))
          {
            v647 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v647 + 8))
              v650 = *(void **)v647;
            else
              v650 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6207, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v648, v649, (char)v650);
          }
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v641, v642, v643, v644, v645, v646))
          {
            v657 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v657 + 8))
              v660 = *(void **)v657;
            else
              v660 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6210, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v658, v659, (char)v660);
          }
          if (*((_DWORD *)this + 16) >= 4u
            && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v651, v652, v653, v654, v655, v656))
          {
            v661 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v661 + 8))
              v664 = *(void **)v661;
            else
              v664 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6214, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v662, v663, (char)v664);
          }
          v665 = v1035;
          if (LineFieldUnsigned == 1)
            v665 = 0;
          if ((v665 & 1) != 0)
            goto LABEL_798;
          v666 = v1035;
          if (LineFieldUnsigned == v1042 + 1)
            v666 = 1;
          if ((v666 & 1) == 0)
          {
LABEL_798:
            v667 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v667 + 8))
              v670 = *(void **)v667;
            else
              v670 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6218, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v668, v669, (char)v670);
          }
          if (LineFieldUnsigned - 256 <= 0xFFFFFF00)
          {
            v671 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v671 + 8))
              v674 = *(void **)v671;
            else
              v674 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6221, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v672, v673, (char)v674);
          }
          if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
          {
            v675 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v675 + 8))
              v678 = *(void **)v675;
            else
              v678 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6225, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v676, v677, (char)v678);
          }
          TrigramData::addTrigramScoreQuantization(v1048, 0, LineFieldInteger);
          goto LABEL_814;
        }
        if (!strcmp(v127, "TriBoWt"))
        {
          if (v1035)
          {
            v679 = v1086 ? v1085 : (const char *)&unk_209A7B4F4;
            if (strcmp(v679, "UniSc")
              && strcmp(v679, "WordIdToLmId")
              && strcmp(v679, "WordIdToContextLmId")
              && strcmp(v679, "UniBoSc")
              && strcmp(v679, "BoWt")
              && strcmp(v679, "BiScQuant")
              && strcmp(v679, "BiSc")
              && strcmp(v679, "TriBoWtQuant")
              && strcmp(v679, "TriScQuant"))
            {
              v680 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v680 + 8))
                v683 = *(void **)v680;
              else
                v683 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6242, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v681, v682, (char)v683);
            }
          }
          v553 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v183, v184, v185, v186, v187, v188);
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v684, v685, v686, v687, v688, v689))
          {
            v696 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v696 + 8))
              v699 = *(void **)v696;
            else
              v699 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6246, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v697, v698, (char)v699);
          }
          if (*((_DWORD *)this + 16) >= 4u
            && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v690, v691, v692, v693, v694, v695))
          {
            v700 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v700 + 8))
              v703 = *(void **)v700;
            else
              v703 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6250, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v701, v702, (char)v703);
          }
          if (((v1035 | !v1034) & 1) == 0 && v553 <= v1023)
          {
            v704 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v704 + 8))
              v707 = *(void **)v704;
            else
              v707 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6254, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v705, v706, (char)v707);
          }
          if (LineFieldUnsigned - 1 >= v1032
            || *(_WORD *)(*((_QWORD *)this + 43) + 2 * LineFieldUnsigned) == 20000
            || LineFieldUnsigned >= *v1025)
          {
            v708 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v708 + 8))
              v711 = *(void **)v708;
            else
              v711 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6260, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v709, v710, (char)v711);
          }
          if (v553 - 1 >= v1032
            || *(_WORD *)(*((_QWORD *)this + 43) + 2 * v553) == 20000
            || v553 > 0xFFFE
            || v553 >= *v1025)
          {
            v712 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v712 + 8))
              v715 = *(void **)v712;
            else
              v715 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6267, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v713, v714, (char)v715);
          }
          v716 = *(_DWORD *)v1078;
          if (*(_DWORD *)v1078 == *(_DWORD *)&v1078[2])
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v1077, 1, 1);
            v716 = *(_DWORD *)v1078;
          }
          *(_WORD *)(v1077 + 2 * v716) = v553;
          *(_DWORD *)v1078 = v716 + 1;
          v717 = *((_DWORD *)this + 192);
          if (v717)
          {
            if (LineFieldInteger < 1 || LineFieldInteger >= v717)
            {
              v718 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v718 + 8))
                v721 = *(void **)v718;
              else
                v721 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6282, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v719, v720, (char)v721);
            }
            v722 = v1074;
            if (v1074 == (unint64_t)HIDWORD(v1074))
            {
              DgnPrimArray<char>::reallocElts((uint64_t)&v1073, 1, 1);
              v722 = v1074;
            }
            *(_BYTE *)(v1073 + v722) = LineFieldInteger;
            LODWORD(v1074) = v1074 + 1;
          }
          else
          {
            v773 = *((_DWORD *)this + 14);
            if (LineFieldInteger <= -v773 || LineFieldInteger >= v773)
            {
              v774 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v774 + 8))
                v777 = *(void **)v774;
              else
                v777 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6290, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v775, v776, (char)v777);
            }
            v778 = v1076;
            if ((_DWORD)v1076 == HIDWORD(v1076))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)&v1075, 1, 1);
              v778 = v1076;
            }
            *(_WORD *)(v1075 + 2 * v778) = LineFieldInteger;
            LODWORD(v1076) = v778 + 1;
          }
          v1039 = LineFieldUnsigned;
        }
        else
        {
          if (strcmp(v127, "TriSc"))
          {
            if (v140 >= 4)
            {
              if (!strcmp(v127, "QuadBoWtQuant"))
              {
                if (v1035)
                {
                  v784 = v1086 ? v1085 : (const char *)&unk_209A7B4F4;
                  if (strcmp(v784, "UniSc")
                    && strcmp(v784, "WordIdToLmId")
                    && strcmp(v784, "WordIdToContextLmId")
                    && strcmp(v784, "UniBoSc")
                    && strcmp(v784, "BoWt")
                    && strcmp(v784, "BiScQuant")
                    && strcmp(v784, "BiSc")
                    && strcmp(v784, "TriBoWtQuant")
                    && strcmp(v784, "TriScQuant")
                    && strcmp(v784, "TriBoWt")
                    && strcmp(v784, "TriSc"))
                  {
                    v785 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v785 + 8))
                      v788 = *(void **)v785;
                    else
                      v788 = &unk_209A7B4F4;
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6391, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v786, v787, (char)v788);
                  }
                }
                if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v195, v196, v197, v198, v199, v200))
                {
                  v795 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v795 + 8))
                    v798 = *(void **)v795;
                  else
                    v798 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6394, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v796, v797, (char)v798);
                }
                if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v789, v790, v791, v792, v793, v794))
                {
                  v805 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v805 + 8))
                    v808 = *(void **)v805;
                  else
                    v808 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6397, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v806, v807, (char)v808);
                }
                if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v799, v800, v801, v802, v803, v804))
                {
                  v809 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v809 + 8))
                    v812 = *(void **)v809;
                  else
                    v812 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6400, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v810, v811, (char)v812);
                }
                v813 = v1035;
                if (LineFieldUnsigned == 1)
                  v813 = 0;
                if ((v813 & 1) != 0)
                  goto LABEL_1008;
                v814 = v1035;
                if (LineFieldUnsigned == v1042 + 1)
                  v814 = 1;
                if ((v814 & 1) == 0)
                {
LABEL_1008:
                  v815 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v815 + 8))
                    v818 = *(void **)v815;
                  else
                    v818 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6404, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v816, v817, (char)v818);
                }
                if (LineFieldUnsigned - 256 <= 0xFFFFFF00)
                {
                  v819 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v819 + 8))
                    v822 = *(void **)v819;
                  else
                    v822 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6407, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v820, v821, (char)v822);
                }
                v823 = *((_DWORD *)this + 14);
                if (LineFieldInteger <= -v823 || LineFieldInteger >= v823)
                {
                  v824 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v824 + 8))
                    v827 = *(void **)v824;
                  else
                    v827 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6411, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v825, v826, (char)v827);
                }
                TrigramData::addTrigramBackoffWeightQuantization(v52, 0, LineFieldInteger);
                goto LABEL_814;
              }
              if (!strcmp(v127, "QuadScQuant"))
              {
                if (v1035)
                {
                  v828 = v1086 ? v1085 : (const char *)&unk_209A7B4F4;
                  if (strcmp(v828, "UniSc")
                    && strcmp(v828, "WordIdToLmId")
                    && strcmp(v828, "WordIdToContextLmId")
                    && strcmp(v828, "UniBoSc")
                    && strcmp(v828, "BoWt")
                    && strcmp(v828, "BiScQuant")
                    && strcmp(v828, "BiSc")
                    && strcmp(v828, "TriBoWtQuant")
                    && strcmp(v828, "TriScQuant")
                    && strcmp(v828, "TriBoWt")
                    && strcmp(v828, "TriSc")
                    && strcmp(v828, "QuadBoWtQuant"))
                  {
                    v829 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v829 + 8))
                      v832 = *(void **)v829;
                    else
                      v832 = &unk_209A7B4F4;
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6431, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v830, v831, (char)v832);
                  }
                }
                if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v201, v202, v203, v204, v205, v206))
                {
                  v839 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v839 + 8))
                    v842 = *(void **)v839;
                  else
                    v842 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6434, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v840, v841, (char)v842);
                }
                if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v833, v834, v835, v836, v837, v838))
                {
                  v849 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v849 + 8))
                    v852 = *(void **)v849;
                  else
                    v852 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6437, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v850, v851, (char)v852);
                }
                if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v843, v844, v845, v846, v847, v848))
                {
                  v853 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v853 + 8))
                    v856 = *(void **)v853;
                  else
                    v856 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6440, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v854, v855, (char)v856);
                }
                v857 = v1035;
                if (LineFieldUnsigned == 1)
                  v857 = 0;
                if ((v857 & 1) != 0)
                  goto LABEL_1065;
                v858 = v1035;
                if (LineFieldUnsigned == v1042 + 1)
                  v858 = 1;
                if ((v858 & 1) == 0)
                {
LABEL_1065:
                  v859 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v859 + 8))
                    v862 = *(void **)v859;
                  else
                    v862 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6444, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v860, v861, (char)v862);
                }
                if (LineFieldUnsigned - 256 <= 0xFFFFFF00)
                {
                  v863 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v863 + 8))
                    v866 = *(void **)v863;
                  else
                    v866 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6447, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v864, v865, (char)v866);
                }
                if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
                {
                  v867 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v867 + 8))
                    v870 = *(void **)v867;
                  else
                    v870 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6451, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v868, v869, (char)v870);
                }
                TrigramData::addTrigramScoreQuantization(v52, 0, LineFieldInteger);
                goto LABEL_814;
              }
              if (strcmp(v127, "QuadBoWt"))
              {
                if (!strcmp(v127, "QuadSc"))
                {
                  if (v1035)
                  {
                    v219 = v1086 ? v1085 : (const char *)&unk_209A7B4F4;
                    if (strcmp(v219, "UniSc")
                      && strcmp(v219, "WordIdToLmId")
                      && strcmp(v219, "WordIdToContextLmId")
                      && strcmp(v219, "UniBoSc")
                      && strcmp(v219, "BoWt")
                      && strcmp(v219, "BiScQuant")
                      && strcmp(v219, "BiSc")
                      && strcmp(v219, "TriBoWtQuant")
                      && strcmp(v219, "TriScQuant")
                      && strcmp(v219, "TriBoWt")
                      && strcmp(v219, "TriSc")
                      && strcmp(v219, "QuadBoWtQuant")
                      && strcmp(v219, "QuadScQuant")
                      && strcmp(v219, "QuadBoWt"))
                    {
                      v220 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                      if (*(_DWORD *)(v220 + 8))
                        v223 = *(void **)v220;
                      else
                        v223 = &unk_209A7B4F4;
                      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6564, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v221, v222, (char)v223);
                    }
                  }
                  v224 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v213, v214, v215, v216, v217, v218);
                  v231 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v225, v226, v227, v228, v229, v230);
                  v238 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v232, v233, v234, v235, v236, v237);
                  v239 = v1034 & ~v1035;
                  if (v239 == 1 && v224 < v1023)
                  {
                    v240 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v240 + 8))
                      v243 = *(void **)v240;
                    else
                      v243 = &unk_209A7B4F4;
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6571, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v241, v242, (char)v243);
                  }
                  if (v224 != v1023)
                    v239 = 0;
                  if (v239 == 1 && v231 < v1019)
                  {
                    v244 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v244 + 8))
                      v247 = *(void **)v244;
                    else
                      v247 = &unk_209A7B4F4;
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6575, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v245, v246, (char)v247);
                  }
                  if (v239 && v231 == v1019 && v238 <= v1014)
                  {
                    v248 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v248 + 8))
                      v251 = *(void **)v248;
                    else
                      v251 = &unk_209A7B4F4;
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6580, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v249, v250, (char)v251);
                  }
                  if (LineFieldUnsigned - 1 >= v1032
                    || *(_WORD *)(*((_QWORD *)this + 43) + 2 * LineFieldUnsigned) == 20000
                    || LineFieldUnsigned >= *v1025)
                  {
                    v252 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v252 + 8))
                      v255 = *(void **)v252;
                    else
                      v255 = &unk_209A7B4F4;
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6586, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v253, v254, (char)v255);
                  }
                  if (v224 - 1 >= v1032
                    || *(_WORD *)(*((_QWORD *)this + 43) + 2 * v224) == 20000
                    || v224 > 0xFFFE
                    || v224 >= *v1025)
                  {
                    v256 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v256 + 8))
                      v259 = *(void **)v256;
                    else
                      v259 = &unk_209A7B4F4;
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6593, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v257, v258, (char)v259);
                  }
                  if (v231 - 1 >= v1032
                    || *(_WORD *)(*((_QWORD *)this + 43) + 2 * v231) == 20000
                    || v231 > 0xFFFE
                    || v231 >= *v1025)
                  {
                    v260 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v260 + 8))
                      v263 = *(void **)v260;
                    else
                      v263 = &unk_209A7B4F4;
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6600, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v261, v262, (char)v263);
                  }
                  if (v238 - 1 >= v1032
                    || *(_WORD *)(*((_QWORD *)this + 21) + 2 * v238) == 20000
                    || v238 > 0xFFFE
                    || v238 >= *v1025)
                  {
                    v264 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v264 + 8))
                      v267 = *(void **)v264;
                    else
                      v267 = &unk_209A7B4F4;
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6607, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v265, v266, (char)v267);
                  }
                  v268 = v1058;
                  if ((_DWORD)v1058 == HIDWORD(v1058))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)&v1057, 1, 1);
                    v268 = v1058;
                  }
                  v1046 = (unsigned __int16)v224;
                  v53 = (unsigned __int16)v231;
                  *(_WORD *)(v1057 + 2 * v268) = v238;
                  LODWORD(v1058) = v268 + 1;
                  v269 = *((_DWORD *)this + 318);
                  if (v269)
                  {
                    if (LineFieldInteger < 1 || LineFieldInteger >= v269)
                    {
                      v270 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                      if (*(_DWORD *)(v270 + 8))
                        v273 = *(void **)v270;
                      else
                        v273 = &unk_209A7B4F4;
                      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6629, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v271, v272, (char)v273);
                    }
                    DgnPrimArray<unsigned char>::add((unint64_t)&v1053, LineFieldInteger);
                    v1019 = v231;
                    v1014 = v238;
                    v55 = LineFieldUnsigned;
                    v1023 = v224;
                  }
                  else
                  {
                    if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
                    {
                      v954 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                      if (*(_DWORD *)(v954 + 8))
                        v957 = *(void **)v954;
                      else
                        v957 = &unk_209A7B4F4;
                      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6637, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v955, v956, (char)v957);
                    }
                    DgnPrimArray<unsigned short>::add((unint64_t)&v1055, LineFieldInteger);
                    v1019 = v231;
                    v1014 = v238;
                    v55 = LineFieldUnsigned;
                    v1023 = v224;
                  }
                }
                goto LABEL_814;
              }
              if (v1035)
              {
                v871 = v1086 ? v1085 : (const char *)&unk_209A7B4F4;
                if (strcmp(v871, "UniSc")
                  && strcmp(v871, "WordIdToLmId")
                  && strcmp(v871, "WordIdToContextLmId")
                  && strcmp(v871, "UniBoSc")
                  && strcmp(v871, "BoWt")
                  && strcmp(v871, "BiScQuant")
                  && strcmp(v871, "BiSc")
                  && strcmp(v871, "TriBoWtQuant")
                  && strcmp(v871, "TriScQuant")
                  && strcmp(v871, "TriBoWt")
                  && strcmp(v871, "TriSc")
                  && strcmp(v871, "QuadBoWtQuant")
                  && strcmp(v871, "QuadScQuant"))
                {
                  v872 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v872 + 8))
                    v875 = *(void **)v872;
                  else
                    v875 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6472, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v873, v874, (char)v875);
                }
              }
              v553 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v207, v208, v209, v210, v211, v212);
              v1038 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v876, v877, v878, v879, v880, v881);
              if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v882, v883, v884, v885, v886, v887))
              {
                v888 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                if (*(_DWORD *)(v888 + 8))
                  v891 = *(void **)v888;
                else
                  v891 = &unk_209A7B4F4;
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6477, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v889, v890, (char)v891);
              }
              v892 = v1034 & ~v1035;
              if (v892 == 1 && v553 < v1023)
              {
                v893 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                if (*(_DWORD *)(v893 + 8))
                  v896 = *(void **)v893;
                else
                  v896 = &unk_209A7B4F4;
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6481, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v894, v895, (char)v896);
              }
              if (v892 && v553 == v1023 && v1038 <= v1019)
              {
                v897 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                if (*(_DWORD *)(v897 + 8))
                  v900 = *(void **)v897;
                else
                  v900 = &unk_209A7B4F4;
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6485, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v898, v899, (char)v900);
              }
              if (LineFieldUnsigned - 1 >= v1032
                || *(_WORD *)(*((_QWORD *)this + 43) + 2 * LineFieldUnsigned) == 20000
                || LineFieldUnsigned >= *v1025)
              {
                v901 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                if (*(_DWORD *)(v901 + 8))
                  v904 = *(void **)v901;
                else
                  v904 = &unk_209A7B4F4;
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6491, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v902, v903, (char)v904);
              }
              if (v553 - 1 >= v1032
                || *(_WORD *)(*((_QWORD *)this + 43) + 2 * v553) == 20000
                || v553 > 0xFFFE
                || v553 >= *v1025)
              {
                v905 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                if (*(_DWORD *)(v905 + 8))
                  v908 = *(void **)v905;
                else
                  v908 = &unk_209A7B4F4;
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6498, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v906, v907, (char)v908);
              }
              if (v1038 - 1 >= v1032
                || *(_WORD *)(*((_QWORD *)this + 43) + 2 * v1038) == 20000
                || v1038 > 0xFFFE
                || v1038 >= *v1025)
              {
                v909 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                if (*(_DWORD *)(v909 + 8))
                  v912 = *(void **)v909;
                else
                  v912 = &unk_209A7B4F4;
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6505, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v910, v911, (char)v912);
              }
              v913 = v1035;
              if (LineFieldUnsigned > v1042)
                v913 = 1;
              if ((v913 & 1) != 0 || v553 > v1023)
              {
                v914 = *(_DWORD *)v1066;
                if (*(_DWORD *)v1066 == *(_DWORD *)&v1066[2])
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)&v1065, 1, 1);
                  v914 = *(_DWORD *)v1066;
                }
                *(_WORD *)(v1065 + 2 * v914) = v553;
                *(_DWORD *)v1066 = v914 + 1;
                v915 = v1064;
                v916 = v1064 + 1;
                if ((v1064 + 1) > HIDWORD(v1064))
                {
                  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v1063, (v1064 + 1 - HIDWORD(v1064)), 1);
                  v915 = v1064;
                  v916 = v1064 + 1;
                }
                if (v915 <= v916)
                {
                  if (v915 < v916)
                  {
                    v919 = v916 - (unint64_t)v915;
                    v920 = 16 * v915;
                    do
                    {
                      v921 = (_QWORD *)(v1063 + v920);
                      *v921 = 0;
                      v921[1] = 0;
                      v920 += 16;
                      --v919;
                    }
                    while (v919);
                  }
                }
                else if ((int)v915 > (int)v916)
                {
                  v917 = (int)v915;
                  v918 = 16 * (int)v915 - 16;
                  do
                  {
                    --v917;
                    DgnPrimArray<unsigned int>::~DgnPrimArray(v1063 + v918);
                    v918 -= 16;
                  }
                  while (v917 > (int)v916);
                }
                LODWORD(v1064) = v916;
                v922 = v1062;
                v923 = v1062 + 1;
                if ((v1062 + 1) > HIDWORD(v1062))
                {
                  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v1061, (v1062 + 1 - HIDWORD(v1062)), 1);
                  v922 = v1062;
                  v923 = v1062 + 1;
                }
                if (v922 <= v923)
                {
                  if (v922 < v923)
                  {
                    v926 = v923 - (unint64_t)v922;
                    v927 = 16 * v922;
                    do
                    {
                      v928 = (_QWORD *)(v1061 + v927);
                      *v928 = 0;
                      v928[1] = 0;
                      v927 += 16;
                      --v926;
                    }
                    while (v926);
                  }
                }
                else if ((int)v922 > (int)v923)
                {
                  v924 = (int)v922;
                  v925 = 16 * (int)v922 - 16;
                  do
                  {
                    --v924;
                    DgnPrimArray<unsigned int>::~DgnPrimArray(v1061 + v925);
                    v925 -= 16;
                  }
                  while (v924 > (int)v923);
                }
                LODWORD(v1062) = v923;
                v929 = v1060;
                v930 = v1060 + 1;
                if ((v1060 + 1) > HIDWORD(v1060))
                {
                  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v1059, (v1060 + 1 - HIDWORD(v1060)), 1);
                  v929 = v1060;
                  v930 = v1060 + 1;
                }
                if (v929 <= v930)
                {
                  if (v929 < v930)
                  {
                    v933 = v930 - (unint64_t)v929;
                    v934 = 16 * v929;
                    do
                    {
                      v935 = (_QWORD *)(v1059 + v934);
                      *v935 = 0;
                      v935[1] = 0;
                      v934 += 16;
                      --v933;
                    }
                    while (v933);
                  }
                }
                else if ((int)v929 > (int)v930)
                {
                  v931 = (int)v929;
                  v932 = 16 * (int)v929 - 16;
                  do
                  {
                    --v931;
                    DgnPrimArray<unsigned int>::~DgnPrimArray(v1059 + v932);
                    v932 -= 16;
                  }
                  while (v931 > (int)v930);
                }
                LODWORD(v1060) = v930;
              }
              v936 = v1063 + 16 * (v1064 - 1);
              v938 = (unsigned int *)(v936 + 8);
              v937 = *(_DWORD *)(v936 + 8);
              if (v937 == *(_DWORD *)(v936 + 12))
              {
                DgnPrimArray<short>::reallocElts(v1063 + 16 * (v1064 - 1), 1, 1);
                v937 = *v938;
              }
              *(_WORD *)(*(_QWORD *)v936 + 2 * v937) = v1038;
              *v938 = v937 + 1;
              v939 = *((_DWORD *)this + 318);
              if (v939)
              {
                if (LineFieldInteger < 1 || LineFieldInteger >= v939)
                {
                  v940 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v940 + 8))
                    v943 = *(void **)v940;
                  else
                    v943 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6531, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v941, v942, (char)v943);
                }
                v944 = v1059 + 16 * (v1060 - 1);
                v946 = (unsigned int *)(v944 + 8);
                v945 = *(unsigned int *)(v944 + 8);
                if (v945 == *(_DWORD *)(v944 + 12))
                {
                  DgnPrimArray<char>::reallocElts(v1059 + 16 * (v1060 - 1), 1, 1);
                  v945 = *v946;
                }
                *(_BYTE *)(*(_QWORD *)v944 + v945) = LineFieldInteger;
                v947 = *v946;
              }
              else
              {
                v948 = *((_DWORD *)this + 14);
                if (LineFieldInteger <= -v948 || LineFieldInteger >= v948)
                {
                  v949 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v949 + 8))
                    v952 = *(void **)v949;
                  else
                    v952 = &unk_209A7B4F4;
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6540, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v950, v951, (char)v952);
                }
                v953 = v1061 + 16 * (v1062 - 1);
                v946 = (unsigned int *)(v953 + 8);
                v947 = *(_DWORD *)(v953 + 8);
                if (v947 == *(_DWORD *)(v953 + 12))
                {
                  DgnPrimArray<short>::reallocElts(v1061 + 16 * (v1062 - 1), 1, 1);
                  v947 = *v946;
                }
                *(_WORD *)(*(_QWORD *)v953 + 2 * v947) = LineFieldInteger;
              }
              *v946 = v947 + 1;
              v1019 = v1038;
              v1036 = LineFieldUnsigned;
              goto LABEL_706;
            }
LABEL_814:
            DgnString::operator=((DgnString *)&v1085, (DgnString *)&v1051);
            DgnString::~DgnString((DgnString *)&v1051);
            v1033 = 0;
            v1042 = LineFieldUnsigned;
            v54 = v1043;
            continue;
          }
          if (v1035)
          {
            v723 = v1086 ? v1085 : (const char *)&unk_209A7B4F4;
            if (strcmp(v723, "UniSc")
              && strcmp(v723, "WordIdToLmId")
              && strcmp(v723, "WordIdToContextLmId")
              && strcmp(v723, "UniBoSc")
              && strcmp(v723, "BoWt")
              && strcmp(v723, "BiScQuant")
              && strcmp(v723, "BiSc")
              && strcmp(v723, "TriBoWtQuant")
              && strcmp(v723, "TriScQuant")
              && strcmp(v723, "TriBoWt"))
            {
              v724 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v724 + 8))
                v727 = *(void **)v724;
              else
                v727 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6309, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v725, v726, (char)v727);
            }
          }
          v553 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v189, v190, v191, v192, v193, v194);
          v740 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v728, v729, v730, v731, v732, v733);
          if (*((_DWORD *)this + 16) >= 4u
            && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v734, v735, v736, v737, v738, v739))
          {
            v741 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v741 + 8))
              v744 = *(void **)v741;
            else
              v744 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6315, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v742, v743, (char)v744);
          }
          v745 = v1034 & ~v1035;
          if (v745 == 1 && v553 < v1023)
          {
            v746 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v746 + 8))
              v749 = *(void **)v746;
            else
              v749 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6319, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v747, v748, (char)v749);
          }
          if (v745 && v553 == v1023 && v740 <= v1019)
          {
            v750 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v750 + 8))
              v753 = *(void **)v750;
            else
              v753 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6323, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v751, v752, (char)v753);
          }
          if (LineFieldUnsigned - 1 >= v1032
            || *(_WORD *)(*((_QWORD *)this + 43) + 2 * LineFieldUnsigned) == 20000
            || LineFieldUnsigned >= *v1025)
          {
            v754 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v754 + 8))
              v757 = *(void **)v754;
            else
              v757 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6329, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v755, v756, (char)v757);
          }
          if (v553 - 1 >= v1032
            || *(_WORD *)(*((_QWORD *)this + 43) + 2 * v553) == 20000
            || v553 > 0xFFFE
            || v553 >= *v1025)
          {
            v758 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v758 + 8))
              v761 = *(void **)v758;
            else
              v761 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6336, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v759, v760, (char)v761);
          }
          if (v740 - 1 >= v1032
            || *(_WORD *)(*((_QWORD *)this + 21) + 2 * v740) == 20000
            || v740 > 0xFFFE
            || v740 >= *v1025)
          {
            v762 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v762 + 8))
              v765 = *(void **)v762;
            else
              v765 = &unk_209A7B4F4;
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6343, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v763, v764, (char)v765);
          }
          v766 = v1072;
          if ((_DWORD)v1072 == HIDWORD(v1072))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v1071, 1, 1);
            v766 = v1072;
          }
          v1044 = (unsigned __int16)v553;
          *(_WORD *)(v1071 + 2 * v766) = v740;
          LODWORD(v1072) = v766 + 1;
          v767 = *((_DWORD *)this + 196);
          if (v767)
          {
            if (LineFieldInteger < 1 || LineFieldInteger >= v767)
            {
              v768 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v768 + 8))
                v771 = *(void **)v768;
              else
                v771 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6362, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v769, v770, (char)v771);
            }
            v772 = v1068;
            if (v1068 == (unint64_t)HIDWORD(v1068))
            {
              DgnPrimArray<char>::reallocElts((uint64_t)&v1067, 1, 1);
              v772 = v1068;
            }
            *(_BYTE *)(v1067 + v772) = LineFieldInteger;
            LODWORD(v1068) = v1068 + 1;
          }
          else
          {
            if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
            {
              v779 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v779 + 8))
                v782 = *(void **)v779;
              else
                v782 = &unk_209A7B4F4;
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6370, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v780, v781, (char)v782);
            }
            v783 = v1070;
            if ((_DWORD)v1070 == HIDWORD(v1070))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)&v1069, 1, 1);
              v783 = v1070;
            }
            v1069[v783] = LineFieldInteger;
            LODWORD(v1070) = v783 + 1;
          }
          v1019 = v740;
          v1043 = LineFieldUnsigned;
        }
      }
LABEL_706:
      v1023 = v553;
      goto LABEL_814;
    }
    break;
  }
  DgnString::~DgnString((DgnString *)&v1051);
  if (v51 != v1029)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6651, (uint64_t)"lm/wordlm", 57, (uint64_t)"%u %u", v963, v964, v51);
  v965 = *((unsigned int *)this + 28);
  if ((_DWORD)v965 != -1)
  {
    if (!(_DWORD)v965
      || v965 > v1032
      || (*((_DWORD *)this + 16) < 2u ? (v966 = *((_QWORD *)this + 21)) : (v966 = *((_QWORD *)this + 43)),
          *(_WORD *)(v966 + 2 * v965) == 20000))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6686, (uint64_t)"lm/wordlm", 43, (uint64_t)"%u", v963, v964, *((_DWORD *)this + 28));
    }
  }
  v967 = *((unsigned int *)this + 29);
  if ((_DWORD)v967 != -1
    && (!(_DWORD)v967 || v967 > v1032 || *(_WORD *)(*((_QWORD *)this + 21) + 2 * v967) == 20000))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6693, (uint64_t)"lm/wordlm", 44, (uint64_t)"%u", v963, v964, *((_DWORD *)this + 29));
  }
  if (*((_DWORD *)this + 16) >= 2u && v1032)
  {
    v968 = 1;
    do
    {
      v969 = v968;
      if (*(_WORD *)(*((_QWORD *)this + 21) + 2 * v968) != 20000)
      {
        if (*((_DWORD *)this + 84) && *(_WORD *)(*v1020 + 2 * v968) == 20000)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6703, (uint64_t)"lm/wordlm", 41, (uint64_t)"%u", v963, v964, v968);
        if (*(_WORD *)(*((_QWORD *)this + 43) + 2 * v969) == 20000)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6705, (uint64_t)"lm/wordlm", 42, (uint64_t)"%u", v963, v964, v969);
      }
      v968 = v969 + 1;
    }
    while ((int)v969 + 1 <= v1032);
  }
  WordLanguageModel::throwOnBadBoWt(this, v958, v959, v960, v961, v962, v963, v964);
  WordLanguageModel::throwOnBadTriBoWt(this, v970, v971, v972, v973, v974, v975, v976);
  v1051 = 0;
  v1052 = 0;
  v979 = *v1025;
  if (!(_DWORD)v979)
  {
    LODWORD(v1052) = 0;
    v1049 = 0;
    v1050 = 0;
    goto LABEL_1241;
  }
  v1049 = 0;
  v980 = realloc_array(0, &v1049, v979, 0, 0, 1);
  v1050 = 0;
  v1051 = (const char *)v1049;
  v981 = *v1025;
  v1052 = __PAIR64__(v980, v979);
  v1049 = 0;
  if (!(_DWORD)v981)
  {
LABEL_1241:
    LODWORD(v1050) = 0;
    goto LABEL_1242;
  }
  v1094 = 0;
  v982 = realloc_array(0, &v1094, v981, 0, 0, 1);
  v983 = v1094;
  v1049 = v1094;
  v984 = *v1025;
  v1050 = __PAIR64__(v982, v981);
  if ((_DWORD)v984)
  {
    v985 = v1051;
    do
    {
      *v985++ = 0;
      *v983++ = 0;
      --v984;
    }
    while (v984);
  }
LABEL_1242:
  v986 = *(unsigned int *)(*((_QWORD *)this + 2) + 388);
  v987 = *((_DWORD *)this + 32);
  if (!v987)
  {
    v987 = *((_DWORD *)this + 36);
    if (!v987)
      v987 = *((_DWORD *)this + 40);
  }
  if (v987 >= v986)
  {
    if ((_DWORD)v986)
      goto LABEL_1249;
  }
  else
  {
    WordLanguageModel::recordWordIdInvalidLmIdUsage(this, v986 - 1);
    if (*((_BYTE *)this + 276))
      WordLanguageModel::recordWordIdInvalidContextLmIdUsage(this, v986 - 1);
LABEL_1249:
    v988 = 0;
    do
    {
      v989 = *((_QWORD *)this + 2);
      if (v988 < *(unsigned int *)(v989 + 388))
      {
        if (*(_BYTE *)(*(_QWORD *)(v989 + 104) + v988))
        {
          v990 = *(unsigned int *)(*(_QWORD *)(v989 + 256) + 4 * v988);
          if (v988 != v990)
          {
            if (*((_DWORD *)this + 32))
            {
              v991 = *((_QWORD *)this + 15);
              v992 = *(_DWORD *)(v991 + 4 * v988);
              v993 = *(_DWORD *)(v991 + 4 * v990);
            }
            else
            {
              if (*((_DWORD *)this + 36))
              {
                v994 = *((_QWORD *)this + 17);
                v992 = *(unsigned __int16 *)(v994 + 2 * v988);
                if (v992 == 0xFFFF)
                  v992 = -1;
                v993 = *(unsigned __int16 *)(v994 + 2 * v990);
                v995 = v993 == 0xFFFF;
              }
              else
              {
                v996 = *((_QWORD *)this + 19);
                v992 = *(unsigned __int8 *)(v996 + v988);
                if (v992 == 255)
                  v992 = -1;
                v993 = *(unsigned __int8 *)(v996 + v990);
                v995 = v993 == 255;
              }
              if (v995)
                v993 = -1;
            }
            if (v992 != v993)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6745, (uint64_t)"lm/wordlm", 46, (uint64_t)"%u %u", v977, v978, v988);
            if (*((_BYTE *)this + 276))
            {
              if (*((_DWORD *)this + 72))
              {
                v997 = *((_QWORD *)this + 35);
                v998 = *(_DWORD *)(v997 + 4 * v988);
                v999 = *(_DWORD *)(v997 + 4 * v990);
              }
              else
              {
                if (*((_DWORD *)this + 76))
                {
                  v1000 = *((_QWORD *)this + 37);
                  v998 = *(unsigned __int16 *)(v1000 + 2 * v988);
                  if (v998 == 0xFFFF)
                    v998 = -1;
                  v999 = *(unsigned __int16 *)(v1000 + 2 * v990);
                  v1001 = v999 == 0xFFFF;
                }
                else
                {
                  v1002 = *((_QWORD *)this + 39);
                  v998 = *(unsigned __int8 *)(v1002 + v988);
                  if (v998 == 255)
                    v998 = -1;
                  v999 = *(unsigned __int8 *)(v1002 + v990);
                  v1001 = v999 == 255;
                }
                if (v1001)
                  v999 = -1;
              }
              if (v998 != v999)
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6754, (uint64_t)"lm/wordlm", 61, (uint64_t)"%u %u", v977, v978, v988);
            }
          }
        }
      }
      ++v988;
    }
    while (v986 != v988);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1049);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1051);
  if (v1015 == 19)
  {
    v1008 = (void **)((char *)this + 1232);
    if ((_DWORD)v1021 != 5)
      goto LABEL_1289;
LABEL_1288:
    WordLanguageModel::maybeAddAlienWordLmId((unint64_t)this, a6, a7, v1091, v1090, v1003, v1004, v1005, v1006, v1007);
    goto LABEL_1289;
  }
  v1008 = (void **)((char *)this + 1232);
  if (v1015 == 24 && (v1021 & 0xFFFFFFFE) == 6)
    goto LABEL_1288;
LABEL_1289:
  if (*((_DWORD *)this + 18) == -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6770, (uint64_t)"lm/wordlm", 98, (uint64_t)"%s", v1006, v1007, (char)&errStr_lm_wordlm_E_WNT_ALIEN_WORD_LMID_NOT_SPECIFIED);
  if (v1015 == 19)
  {
    if ((_DWORD)v1021 != 5)
      goto LABEL_1298;
LABEL_1296:
    if (*((_BYTE *)this + 276))
    {
      *((_DWORD *)this + 19) = *((_DWORD *)this + 18);
      goto LABEL_1298;
    }
    goto LABEL_1301;
  }
  if (v1015 == 24 && (_DWORD)v1021 == 6)
    goto LABEL_1296;
LABEL_1298:
  if (!*((_BYTE *)this + 276)
    || *((_DWORD *)this + 19) == -1
    && (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6781, (uint64_t)"lm/wordlm", 66, (uint64_t)"%s", v1006, v1007, (char)&errStr_lm_wordlm_E_BAD_HAS_WORDID_TO_CONTEXT_LMID), !*((_BYTE *)this + 276)))
  {
LABEL_1301:
    if (*((_DWORD *)this + 19) != -1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6783, (uint64_t)"lm/wordlm", 65, (uint64_t)"%s", v1006, v1007, (char)&errStr_lm_wordlm_E_ALIEN_WORD_CONTEXT_LMID_WITHOUT_CONTEXT_LMIDS);
  }
  BigramData::compact((void **)v1027);
  TrigramData::compact((void **)v1048);
  QuadgramData::compact(v1008);
  v1013 = v1015 == 19 && (_DWORD)v1021 == 5;
  WordLanguageModel::maybeRepairOutOfRangeWordIdsOrThrow(this, v1013, a3, a4, a5, v1009, v1010, v1011);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1053);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1055);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1057);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v1059);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v1061);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v1063);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1065);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1067);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1069);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1071);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1073);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1075);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1077);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1079);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1081);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1083);
  DgnString::~DgnString((DgnString *)&v1085);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v1087);
  DgnArray<DgnString>::releaseAll((uint64_t)&v1088);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v1092);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v1093);
}

void sub_209989410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,char a54,uint64_t a55,char a56,uint64_t a57,char a58,uint64_t a59,char a60,uint64_t a61,char a62,uint64_t a63)
{
  char a64;
  char a66;
  char a68;
  char a70;
  char a72;

  DgnString::~DgnString((DgnString *)&a42);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a44);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a46);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a48);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a50);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a52);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a54);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a56);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a58);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a60);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a62);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a66);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a68);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a70);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a72);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&STACK[0x208]);
  DgnString::~DgnString((DgnString *)&STACK[0x218]);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&STACK[0x228]);
  DgnArray<DgnString>::releaseAll((uint64_t)&STACK[0x238]);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&STACK[0x258]);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void WordLanguageModel::loadBinary(WordLanguageModel *this, DFile *a2, DFileChecksums *a3, int a4, unsigned int a5, unsigned int a6)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  DgnStream *v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t CurrentSubDirComponents;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  double v81;
  double v82;
  unsigned int v83;
  uint64_t v84;

  v84 = 0;
  v12 = 1;
  v15 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x6Fu, 1, "LMWNGBIN", (_DWORD *)&v84 + 1, &v84);
  v16 = v84;
  v17 = HIDWORD(v84) == 19 && (_DWORD)v84 == 13;
  v18 = v17;
  v77 = a5;
  v78 = a6;
  v76 = a4;
  if (v17)
  {
    v19 = 0;
    v20 = 19;
    v16 = 13;
LABEL_12:
    v21 = 1;
LABEL_13:
    v22 = 1;
    goto LABEL_14;
  }
  switch(v84)
  {
    case 0x170000000ELL:
      v19 = 0;
      v20 = 23;
      goto LABEL_12;
    case 0x180000000FLL:
      v12 = 0;
      v19 = 0;
      v21 = 1;
LABEL_44:
      v20 = 24;
      goto LABEL_13;
    case 0x1800000010:
      v12 = 0;
      v19 = 1;
      v20 = 24;
      goto LABEL_12;
    case 0x1800000011:
      v12 = 0;
      v21 = 0;
      v19 = 1;
      goto LABEL_44;
  }
  if (*((_DWORD *)a2 + 6))
    v75 = (char *)*((_QWORD *)a2 + 2);
  else
    v75 = (char *)&unk_209A7B4F4;
  MrecHeaderCheckVersions(v75, "LMWNGBIN", HIDWORD(v84), v84, 0x18u, 0x12u);
  v12 = 0;
  v21 = 0;
  v22 = 0;
  v16 = v84;
  v20 = HIDWORD(v84);
  v19 = 1;
LABEL_14:
  MrecHeaderCheckLatestVersionIfShared(a2, "LMWNGBIN", v20, v16, 24, 18, v13, v14);
  if (DFile::subFileExists((uint64_t)a2, 0x73u))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5207, (uint64_t)"lm/wordlm", 84, (uint64_t)"%s", v23, v24, (char)&errStr_lm_wordlm_E_WNS_WNB_MISMATCH);
  v83 = 0;
  v81 = -1.0;
  v82 = -1.0;
  v25 = (_DWORD *)((char *)this + 64);
  readObject((uint64_t)v15, (_DWORD *)this + 16, &v83);
  readObject((uint64_t)v15, (BOOL *)this + 68, &v83);
  if (v22)
  {
    readObject(v15, &v82, &v83);
    readObject(v15, &v81, &v83);
  }
  readObject((uint64_t)v15, (_DWORD *)this + 18, &v83);
  if (v19)
    readObject((uint64_t)v15, (_DWORD *)this + 19, &v83);
  readObject((uint64_t)v15, (BOOL *)this + 80, &v83);
  if (v21)
  {
    readObject((uint64_t)v15, (_DWORD *)this + 21, &v83);
    readObject((uint64_t)v15, (_DWORD *)this + 22, &v83);
    readObject((uint64_t)v15, (_DWORD *)this + 23, &v83);
    readObject((uint64_t)v15, (_DWORD *)this + 24, &v83);
  }
  readObject((uint64_t)v15, (_DWORD *)this + 25, &v83);
  readObject((uint64_t)v15, (_DWORD *)this + 60, &v83);
  readObject((uint64_t)v15, (BOOL *)this + 244, &v83);
  readObject((uint64_t)v15, (BOOL *)this + 245, &v83);
  v80 = 0;
  WordLanguageModel::loadUnigramMembersBinary(this, v15, &v83, v22, &v80);
  v79 = 0;
  if (*((_DWORD *)this + 16) >= 2u)
  {
    WordLanguageModel::loadBigramMembersBinary(this, v15, &v83, v22, &v79);
    BigramData::loadBinary((WordLanguageModel *)((char *)this + 360), v15, &v83);
    WordLanguageModel::verifyBoWtForBiSc(this, v26, v27, v28, v29, v30, v31, v32);
    WordLanguageModel::throwOnBadBoWt(this, v33, v34, v35, v36, v37, v38, v39);
    if (v18)
      WordLanguageModel::verifyUniScForBiSc(this, v40, v41, v42, v43, v44, v45, v46);
    if (*v25 >= 3u)
    {
      TrigramData::loadBinary((WordLanguageModel *)((char *)this + 744), v15, &v83);
      WordLanguageModel::throwOnBadTriBoWt(this, v47, v48, v49, v50, v51, v52, v53);
      if (v18)
        WordLanguageModel::verifyUniScForTriSc(this, v54, v55, v56, v57, v58, v59, v60);
      if (*v25 >= 4u)
      {
        QuadgramData::loadBinary((WordLanguageModel *)((char *)this + 1232), v15, &v83);
        if (v18)
          WordLanguageModel::verifyUniScForQuadSc(this, v61, v62, v63, v64, v65, v66, v67);
      }
    }
  }
  v68 = v83;
  *((_DWORD *)this + 456) = v83;
  readObjectChecksumAndVerify(v15, v68);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x6Fu, v83);
  if (v15)
  {
    (**(void (***)(DgnStream *))v15)(v15);
    MemChunkFree(v15, 0);
  }
  if (v12)
  {
    WordLanguageModel::maybeRepairOutOfRangeWordIdsOrThrow(this, 1, v76, v77, v78, v72, v73, v74);
    if (!v22)
      goto LABEL_35;
LABEL_38:
    WordLanguageModel::maybeAddAlienWordLmId((unint64_t)this, v82, v81, v80, v79, v70, v71, v72, v73, v74);
    if ((v19 & 1) != 0)
      return;
    goto LABEL_39;
  }
  if (v22)
    goto LABEL_38;
LABEL_35:
  if ((v19 & 1) != 0)
    return;
LABEL_39:
  if (*((_BYTE *)this + 276))
    *((_DWORD *)this + 19) = *((_DWORD *)this + 18);
}

void WordLanguageModel::loadBinaryShared(uint64_t a1, DgnStream *a2, DFile *a3, uint64_t a4, unsigned int a5, int a6)
{
  char *v12;
  void (***v13)(_QWORD);
  _QWORD *v14;
  uint64_t CurrentSubDirComponents;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;

  if (a3)
  {
    LODWORD(v17) = 0;
    LODWORD(v16) = 0;
    v12 = a5 == 112 ? "LMWNGDYN" : "LMWNGBIN";
    v13 = (void (***)(_QWORD))OpenAndReadMrecHeader((uint64_t)a3, a5, 1, v12, &v17, &v16);
    if (v13)
    {
      v14 = v13;
      (**v13)(v13);
      MemChunkFree(v14, 0);
    }
  }
  v18 = 0;
  v17 = 0;
  if (a6)
  {
    readObject((uint64_t)a2, (_DWORD *)(a1 + 64), &v18);
    readObject((uint64_t)a2, (BOOL *)(a1 + 68), &v18);
    readObject((uint64_t)a2, (_DWORD *)(a1 + 72), &v18);
    readObject((uint64_t)a2, (_DWORD *)(a1 + 76), &v18);
    readObject((uint64_t)a2, (BOOL *)(a1 + 80), &v18);
    readObject((uint64_t)a2, (_DWORD *)(a1 + 100), &v18);
    readObject((uint64_t)a2, (_DWORD *)(a1 + 240), &v18);
    readObject((uint64_t)a2, (BOOL *)(a1 + 244), &v18);
    readObject((uint64_t)a2, (BOOL *)(a1 + 245), &v18);
    WordLanguageModel::loadUnigramMembersBinary((WordLanguageModel *)a1, a2, &v18, 0, &v17);
    v16 = 0;
    if (*(_DWORD *)(a1 + 64) <= 1u)
    {
LABEL_15:
      readObject((uint64_t)a2, (_DWORD *)(a1 + 1824), &v18);
      goto LABEL_16;
    }
    WordLanguageModel::loadBigramMembersBinary((WordLanguageModel *)a1, a2, &v18, 0, &v16);
  }
  else
  {
    v16 = 0;
    if (*(_DWORD *)(a1 + 64) <= 1u)
      goto LABEL_16;
  }
  BigramData::loadBinaryShared((BigramData *)(a1 + 360), a2, a6, &v18);
  if (*(_DWORD *)(a1 + 64) >= 3u)
  {
    TrigramData::loadBinaryShared((TrigramData *)(a1 + 744), a2, a6, &v18);
    if (*(_DWORD *)(a1 + 64) >= 4u)
      QuadgramData::loadBinaryShared((QuadgramData *)(a1 + 1232), a2, a6, &v18);
  }
  if (a6)
    goto LABEL_15;
LABEL_16:
  readObjectChecksumAndVerify(a2, v18);
  if (a3)
  {
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a3);
    DFileChecksums::addChecksum(a4, CurrentSubDirComponents, a5, *(_DWORD *)(a1 + 1824));
  }
}

void WordLanguageModel::loadDynamic(WordLanguageModel *this, DFile *a2, DFile *a3, DFileChecksums *a4, int a5, int a6, BOOL *a7, BOOL *a8, BOOL a9, unsigned int a10, unsigned int a11)
{
  int v19;
  uint64_t v20;
  uint64_t v21;
  DgnStream *v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  WordLanguageModel *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t CurrentSubDirComponents;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int PersistentAndIndex;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  BOOL *v60;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  double v65;
  double v66;
  unsigned int v67;
  uint64_t v68;

  v68 = 0;
  v19 = 1;
  v22 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x70u, 1, "LMWNGDYN", (_DWORD *)&v68 + 1, &v68);
  v23 = v68;
  v24 = HIDWORD(v68) == 19 && (_DWORD)v68 == 12;
  v25 = v24;
  v60 = a8;
  v61 = a5;
  v62 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = 19;
    v23 = 12;
LABEL_17:
    v28 = 1;
    goto LABEL_18;
  }
  switch(v68)
  {
    case 0x180000000DLL:
      v26 = 0;
LABEL_16:
      v27 = 24;
      goto LABEL_17;
    case 0x180000000ELL:
LABEL_15:
      v26 = 1;
      goto LABEL_16;
    case 0x180000000FLL:
      v19 = 0;
      goto LABEL_15;
  }
  if (*((_DWORD *)a2 + 6))
    v59 = (char *)*((_QWORD *)a2 + 2);
  else
    v59 = (char *)&unk_209A7B4F4;
  MrecHeaderCheckVersions(v59, "LMWNGDYN", HIDWORD(v68), v68, 0x18u, 0x10u);
  v19 = 0;
  v28 = 0;
  v23 = v68;
  v27 = HIDWORD(v68);
  v26 = 1;
LABEL_18:
  MrecHeaderCheckLatestVersionIfShared(a2, "LMWNGDYN", v27, v23, 24, 16, v20, v21);
  if (DFile::subFileExists((uint64_t)a2, 0x73u))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8772, (uint64_t)"lm/wordlm", 85, (uint64_t)"%s", v29, v30, (char)&errStr_lm_wordlm_E_WNS_WND_PRESENCE_MISMATCH);
  v67 = 0;
  v65 = -1.0;
  v66 = -1.0;
  readObject((uint64_t)v22, (_DWORD *)this + 16, &v67);
  readObject((uint64_t)v22, (BOOL *)this + 68, &v67);
  if (v28)
  {
    readObject(v22, &v66, &v67);
    readObject(v22, &v65, &v67);
  }
  readObject((uint64_t)v22, (_DWORD *)this + 18, &v67);
  if (v26)
    readObject((uint64_t)v22, (_DWORD *)this + 19, &v67);
  readObject((uint64_t)v22, (BOOL *)this + 80, &v67);
  if (v19)
  {
    readObject((uint64_t)v22, (_DWORD *)this + 21, &v67);
    readObject((uint64_t)v22, (_DWORD *)this + 22, &v67);
    readObject((uint64_t)v22, (_DWORD *)this + 23, &v67);
    readObject((uint64_t)v22, (_DWORD *)this + 24, &v67);
  }
  readObject((uint64_t)v22, (_DWORD *)this + 25, &v67);
  readObject((uint64_t)v22, (_DWORD *)this + 60, &v67);
  readObject((uint64_t)v22, (BOOL *)this + 244, &v67);
  v31 = readObject((uint64_t)v22, (BOOL *)this + 245, &v67);
  if (*((_DWORD *)this + 16) >= 2u && !a3 && *((_BYTE *)this + 245) && a6)
  {
    *((_DWORD *)this + 16) = 1;
    *((_BYTE *)this + 68) = 1;
    *((_DWORD *)this + 60) = -1;
    *((_DWORD *)this + 19) = -1;
    *((_WORD *)this + 122) = 0;
    *(_QWORD *)((char *)this + 92) = 0;
    *(_QWORD *)((char *)this + 84) = 0;
    *a7 = 1;
    if (*((_BYTE *)this + 245))
      WordLanguageModel::loadDynamic(v31, v32, v33, v34, v35, v36, v37, v38);
    v64 = 0;
    WordLanguageModel::loadUnigramMembersBinary(this, v22, &v67, v28, &v64);
    v63 = 0;
    v39 = MemChunkAlloc(0x728uLL, 0);
    WordLanguageModel::WordLanguageModel((WordLanguageModel *)v39, *((_DWORD *)this + 8), *((const WordList **)this + 2));
    WordLanguageModel::loadBigramMembersBinary(v40, v22, &v67, v28, &v63);
    if (v39)
    {
      (*(void (**)(uint64_t *))*v39)(v39);
      MemChunkFree(v39, 0);
    }
    v41 = 1;
    goto LABEL_47;
  }
  if (*((_BYTE *)this + 245))
  {
    if (!a3)
      WordLanguageModel::loadDynamic(v31, v32, v33, v34, v35, v36, v37, v38);
    v42 = (*(uint64_t (**)(DFile *))(*(_QWORD *)a3 + 88))(a3);
    *((_QWORD *)this + 5) = v42;
    if (!v42)
      goto LABEL_40;
LABEL_39:
    if ((DFile::subFileExists(v42, 0x72u) & 1) != 0)
      goto LABEL_41;
    goto LABEL_40;
  }
  v42 = *((_QWORD *)this + 5);
  if (v42)
    goto LABEL_39;
LABEL_40:
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8817, (uint64_t)"lm/wordlm", 18, (uint64_t)"%s", v37, v38, (char)&errStr_lm_wordlm_E_WND_WITH_NO_WNP_FILE);
LABEL_41:
  v43 = *((_QWORD *)this + 5);
  if (!v43 || (DFile::subFileExists(v43, 0x71u) & 1) == 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8820, (uint64_t)"lm/wordlm", 19, (uint64_t)"%s", v37, v38, (char)&errStr_lm_wordlm_E_WND_WITH_NO_WNI_FILE);
  v64 = 0;
  WordLanguageModel::loadUnigramMembersBinary(this, v22, &v67, v28, &v64);
  v63 = 0;
  if (*((_DWORD *)this + 16) >= 2u)
    WordLanguageModel::loadBigramMembersBinary(this, v22, &v67, v28, &v63);
  v41 = 0;
LABEL_47:
  v44 = v67;
  *((_DWORD *)this + 456) = v67;
  readObjectChecksumAndVerify(v22, v44);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a4, CurrentSubDirComponents, 0x70u, v67);
  if (v22)
  {
    (**(void (***)(DgnStream *))v22)(v22);
    MemChunkFree(v22, 0);
  }
  if ((v41 & 1) == 0)
  {
    PersistentAndIndex = WordLanguageModel::loadPersistentAndIndex(this);
    if (v61)
    {
      v52 = PersistentAndIndex;
      WordLanguageModel::reabsorbStaticLM(this);
      *v60 = 1;
      if (v52)
      {
        WordLanguageModel::verifyUniScForBiSc(this, v53, v54, v46, v47, v48, v49, v50);
        if (*((_DWORD *)this + 16) >= 3u)
        {
          WordLanguageModel::verifyUniScForTriSc(this, v55, v56, v46, v47, v48, v49, v50);
          if (*((_DWORD *)this + 16) >= 4u)
            WordLanguageModel::verifyUniScForQuadSc(this, v57, v58, v46, v47, v48, v49, v50);
        }
      }
    }
  }
  if (v62)
  {
    WordLanguageModel::maybeRepairOutOfRangeWordIdsOrThrow(this, 1, a9, a10, a11, v48, v49, v50);
    if (!v28)
      goto LABEL_57;
LABEL_60:
    WordLanguageModel::maybeAddAlienWordLmId((unint64_t)this, v66, v65, v64, v63, v46, v47, v48, v49, v50);
    if ((v26 & 1) != 0)
      return;
    goto LABEL_61;
  }
  if (v28)
    goto LABEL_60;
LABEL_57:
  if ((v26 & 1) != 0)
    return;
LABEL_61:
  if (*((_BYTE *)this + 276))
    *((_DWORD *)this + 19) = *((_DWORD *)this + 18);
}

void WordLanguageModel::checkWordListLMAgreement(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v9 = *(unsigned int *)(*((_QWORD *)this + 2) + 388);
  v10 = *((_DWORD *)this + 32);
  if (!v10)
  {
    v10 = *((_DWORD *)this + 36);
    if (!v10)
      v10 = *((_DWORD *)this + 40);
  }
  if ((_DWORD)v9 != v10)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9191, (uint64_t)"lm/wordlm", 49, (uint64_t)"%u %u", a7, a8, *(_DWORD *)(*((_QWORD *)this + 2) + 388));
  if ((_DWORD)v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v12 = *((_QWORD *)this + 2);
      if (i < *(unsigned int *)(v12 + 388) && *(_BYTE *)(*(_QWORD *)(v12 + 104) + i))
      {
        if (*((_DWORD *)this + 32))
        {
          v13 = *((_QWORD *)this + 15);
          v14 = *(_DWORD *)(v13 + 4 * i);
          v15 = *(_DWORD *)(v13 + 4 * *(unsigned int *)(*(_QWORD *)(v12 + 256) + 4 * i));
        }
        else
        {
          v16 = *(unsigned int *)(*(_QWORD *)(v12 + 256) + 4 * i);
          if (*((_DWORD *)this + 36))
          {
            v17 = *((_QWORD *)this + 17);
            if (*(unsigned __int16 *)(v17 + 2 * i) == 0xFFFF)
              v14 = -1;
            else
              v14 = *(unsigned __int16 *)(v17 + 2 * i);
            v15 = *(unsigned __int16 *)(v17 + 2 * v16);
            v18 = v15 == 0xFFFF;
          }
          else
          {
            v19 = *((_QWORD *)this + 19);
            if (*(unsigned __int8 *)(v19 + i) == 255)
              v14 = -1;
            else
              v14 = *(unsigned __int8 *)(v19 + i);
            v15 = *(unsigned __int8 *)(v19 + v16);
            v18 = v15 == 255;
          }
          if (v18)
            v15 = -1;
        }
        if (v14 != v15)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9205, (uint64_t)"lm/wordlm", 8, (uint64_t)"%.500s %u %.500s %u %u %u", a7, a8, *(_QWORD *)(v12 + 224) + *(_BYTE *)(*(_QWORD *)(v12 + 200) + 4 * i));
      }
      if (*((_BYTE *)this + 276))
      {
        v20 = *((_QWORD *)this + 2);
        if (i < *(unsigned int *)(v20 + 388))
        {
          if (*(_BYTE *)(*(_QWORD *)(v20 + 104) + i))
          {
            if (*((_DWORD *)this + 72))
            {
              v21 = *((_QWORD *)this + 35);
              v22 = *(_DWORD *)(v21 + 4 * i);
              v23 = *(_DWORD *)(v21 + 4 * *(unsigned int *)(*(_QWORD *)(v20 + 256) + 4 * i));
            }
            else
            {
              v24 = *(unsigned int *)(*(_QWORD *)(v20 + 256) + 4 * i);
              if (*((_DWORD *)this + 76))
              {
                v25 = *((_QWORD *)this + 37);
                if (*(unsigned __int16 *)(v25 + 2 * i) == 0xFFFF)
                  v22 = -1;
                else
                  v22 = *(unsigned __int16 *)(v25 + 2 * i);
                v23 = *(unsigned __int16 *)(v25 + 2 * v24);
                v26 = v23 == 0xFFFF;
              }
              else
              {
                v27 = *((_QWORD *)this + 39);
                if (*(unsigned __int8 *)(v27 + i) == 255)
                  v22 = -1;
                else
                  v22 = *(unsigned __int8 *)(v27 + i);
                v23 = *(unsigned __int8 *)(v27 + v24);
                v26 = v23 == 255;
              }
              if (v26)
                v23 = -1;
            }
            if (v22 != v23)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9220, (uint64_t)"lm/wordlm", 62, (uint64_t)"%.500s %u %.500s %u %u %u", a7, a8, *(_QWORD *)(v20 + 224) + *(_BYTE *)(*(_QWORD *)(v20 + 200) + 4 * i));
          }
        }
      }
    }
  }
}

uint64_t WordLanguageModel::getTotalPreloadableBytes(WordLanguageModel *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 31);
  v2 = *((_QWORD *)this + 29);
  if (v2)
    v1 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  return v1;
}

uint64_t WordLanguageModel::computeTotalPreloadableBytes(WordLanguageModel *this)
{
  uint64_t v2;
  uint64_t v3;

  if (*((_BYTE *)this + 68))
    v2 = 0;
  else
    v2 = WordLanguageModel::computeLocalPreloadableBytes(this);
  v3 = *((_QWORD *)this + 29);
  if (v3)
    v2 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return v2;
}

uint64_t WordLanguageModel::computeLocalPreloadableBytes(WordLanguageModel *this)
{
  uint64_t v2;

  if (*((_DWORD *)this + 16) < 2u)
    return 0;
  v2 = BigramData::computeLocalPreloadableBytes((WordLanguageModel *)((char *)this + 360));
  if (*((_DWORD *)this + 16) >= 3u)
  {
    v2 += TrigramData::computeLocalPreloadableBytes((WordLanguageModel *)((char *)this + 744));
    if (*((_DWORD *)this + 16) >= 4u)
      v2 += QuadgramData::computeLocalPreloadableBytes((WordLanguageModel *)((char *)this + 1232));
  }
  return v2;
}

uint64_t WordLanguageModel::preloadBigramsAndTrigrams(uint64_t a1, unsigned int a2, uint64_t *a3, unsigned int *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD v20[2];
  _QWORD v21[2];
  __int16 *v22[2];
  _QWORD v23[2];

  v10 = 0;
  v23[0] = 0;
  v23[1] = 0;
  v22[0] = 0;
  v22[1] = 0;
  v21[0] = 0;
  v21[1] = 0;
  v20[0] = 0;
  v20[1] = 0;
  v11 = *a3;
  do
  {
    if (*(_DWORD *)(v11 + 16 * v10 + 8))
    {
      v12 = 0;
      do
      {
        v13 = *(_DWORD *)(*(_QWORD *)(v11 + 16 * v10) + 4 * v12);
        v14 = v13 & 0xE0000000;
        v15 = v13 & 0x1FFFFFFF;
        if ((v13 & 0xE0000000) == 0x80000000)
        {
          WordLanguageModel::preloadTrigramRecord(a1, v15, (uint64_t)v23, v22, v21, (uint64_t)v20);
        }
        else if (v14 == 0x40000000)
        {
          WordLanguageModel::preloadBigramRecord(a1, v15, (uint64_t)v23, v22, v21, (uint64_t)v20);
        }
        else
        {
          if (v14 == -1610612736)
            goto LABEL_13;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4100, (uint64_t)"lm/wordlm", 71, (uint64_t)"%u", a7, a8, 0);
        }
        ++v12;
        v11 = *a3;
      }
      while (v12 < *(unsigned int *)(*a3 + 16 * v10 + 8));
    }
    ++v10;
  }
  while (v10 <= a2);
  LODWORD(v12) = 0;
LABEL_13:
  *a4 = v10;
  *a5 = v12;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v21);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v23);
}

void sub_20998A6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  _Unwind_Resume(a1);
}

void WordLanguageModel::preloadBigramRecord(uint64_t a1, unsigned int a2, uint64_t a3, __int16 **a4, _QWORD *a5, uint64_t a6)
{
  BigramData *v10;

  v10 = (BigramData *)a1;
  WordLanguageModel::readBigramRecord(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, a6);
  v10 = (BigramData *)((char *)v10 + 360);
  BigramData::bi1SetEmpty((uint64_t)v10, a2);
  BigramData::fillBigramRecordPreload(v10, a2, a3, a4, a5);
}

uint64_t WordLanguageModel::preloadTrigramRecord(uint64_t a1, unsigned int a2, uint64_t a3, __int16 **a4, _QWORD *a5, uint64_t a6)
{
  TrigramData *v10;

  v10 = (TrigramData *)a1;
  WordLanguageModel::readTrigramRecord(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, a6);
  v10 = (TrigramData *)((char *)v10 + 744);
  TrigramData::tri2SetUnallocated((uint64_t)v10, a2);
  return TrigramData::fillTrigramRecordPreload(v10, a2, a3, a4, a5);
}

uint64_t WordLanguageModel::preloadQuadgrams(uint64_t a1, unsigned int a2, uint64_t *a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[3];

  v26[0] = 0;
  v26[1] = 0;
  v25[0] = 0;
  v25[1] = 0;
  v24[0] = 0;
  v24[1] = 0;
  v23[0] = 0;
  v23[1] = 0;
  v22[0] = 0;
  v22[1] = 0;
  v21[0] = 0;
  v21[1] = 0;
  v20[0] = 0;
  v20[1] = 0;
  v19[0] = 0;
  v19[1] = 0;
  v18[0] = 0;
  v18[1] = 0;
  v17[0] = 0;
  v17[1] = 0;
  if (a4 <= a2)
  {
    v10 = a5;
    v11 = *a3;
    do
    {
      v12 = a4;
      for (i = v11 + 16 * a4; v10 < *(unsigned int *)(i + 8); i = *a3 + 16 * v12)
      {
        v14 = *(_DWORD *)(*(_QWORD *)(v11 + 16 * v12) + 4 * v10);
        if ((v14 & 0xE0000000) == 0xA0000000)
          WordLanguageModel::preloadQuadgramRecord(a1, v14 & 0x1FFFFFFF, (uint64_t)v26, (uint64_t)v25, v24, (uint64_t)v23, v22, v21, v20, (uint64_t)v19, (uint64_t)v18, (uint64_t)v17);
        else
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4150, (uint64_t)"lm/wordlm", 71, (uint64_t)"%u", a7, a8, 0);
        ++v10;
        v11 = *a3;
      }
      v10 = 0;
      a4 = v12 + 1;
    }
    while ((int)v12 + 1 <= a2);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v21);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v26);
}

void sub_20998A944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a14);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a16);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a18);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a20);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a22);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a26);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v26 - 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v26 - 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v26 - 104);
  _Unwind_Resume(a1);
}

unint64_t WordLanguageModel::preloadQuadgramRecord(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19;
  unint64_t result;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  int v34;
  _QWORD *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  WordLanguageModel::readQuadgramRecord(a1, a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8, (uint64_t)a9, a10, a11, a12);
  v19 = a1 + 1232;
  QuadgramData::quad2SetUnallocated(a1 + 1232, a2);
  result = QuadgramData::allocQuad2(a1 + 1232, a2, *(unsigned __int16 *)(a3 + 8));
  v50 = a4;
  v21 = *(_DWORD *)(a4 + 8);
  if (*(_DWORD *)(a1 + 1256))
  {
    if (v21)
    {
      v22 = 0;
      v48 = a2 >> 5;
      v23 = 1 << a2;
      do
      {
        v24 = *(unsigned int *)(*(_QWORD *)(a1 + 1480) + 4 * a2);
        if (*(_DWORD *)(a1 + 1232) && (*(_DWORD *)(*(_QWORD *)(a1 + 1344) + 4 * v48) & v23) != 0)
        {
          LODWORD(v24) = *(_DWORD *)(*(_QWORD *)(a1 + 1656) + 4 * v24);
          v25 = (_QWORD *)(a1 + 1672);
        }
        else
        {
          v25 = (_QWORD *)(a1 + 1496);
        }
        *(_WORD *)(*v25 + 2 * (v22 + v24)) = *(_WORD *)(*(_QWORD *)v50 + 2 * v22);
        result = QuadgramData::allocScoresForIndex(a1 + 1232, a2, v22, *(unsigned __int16 *)(*(_QWORD *)a3 + 2 * v22));
        v26 = *(unsigned int *)(*(_QWORD *)(a1 + 1480) + 4 * a2);
        if (*(_DWORD *)(a1 + 1232) && (*(_DWORD *)(*(_QWORD *)(a1 + 1344) + 4 * v48) & v23) != 0)
        {
          LODWORD(v26) = *(_DWORD *)(*(_QWORD *)(a1 + 1656) + 4 * v26);
          v27 = (_QWORD *)(a1 + 1704);
        }
        else
        {
          v27 = (_QWORD *)(a1 + 1544);
        }
        *(_BYTE *)(*v27 + (v22 + v26)) = *(_BYTE *)(*a7 + v22);
        ++v22;
        v28 = *(unsigned int *)(v50 + 8);
      }
      while (v22 < v28);
      goto LABEL_26;
    }
LABEL_25:
    v28 = 0;
    goto LABEL_26;
  }
  if (!v21)
    goto LABEL_25;
  v29 = 0;
  v47 = (_QWORD *)a6;
  v49 = a2 >> 5;
  v30 = 1 << a2;
  v31 = *(unsigned int *)(*(_QWORD *)(a1 + 1480) + 4 * a2);
  v32 = *(_DWORD *)(a1 + 1232);
  do
  {
    if (v32 && (*(_DWORD *)(*(_QWORD *)(a1 + 1344) + 4 * v49) & v30) != 0)
    {
      LODWORD(v31) = *(_DWORD *)(*(_QWORD *)(a1 + 1656) + 4 * v31);
      v33 = (_QWORD *)(a1 + 1672);
    }
    else
    {
      v33 = (_QWORD *)(a1 + 1496);
    }
    *(_WORD *)(*v33 + 2 * (v29 + v31)) = *(_WORD *)(*(_QWORD *)a4 + 2 * v29);
    result = QuadgramData::allocScoresForIndex(a1 + 1232, a2, v29, *(unsigned __int16 *)(*(_QWORD *)a3 + 2 * v29));
    v31 = *(unsigned int *)(*(_QWORD *)(a1 + 1480) + 4 * a2);
    v32 = *(_DWORD *)(a1 + 1232);
    v34 = *(_DWORD *)(*(_QWORD *)(a1 + 1480) + 4 * a2);
    v35 = (_QWORD *)(a1 + 1528);
    if (v32)
    {
      v34 = *(_DWORD *)(*(_QWORD *)(a1 + 1480) + 4 * a2);
      v35 = (_QWORD *)(a1 + 1528);
      if ((*(_DWORD *)(*(_QWORD *)(a1 + 1344) + 4 * v49) & v30) != 0)
      {
        v34 = *(_DWORD *)(*(_QWORD *)(a1 + 1656) + 4 * v31);
        v35 = (_QWORD *)(a1 + 1688);
      }
    }
    *(_WORD *)(*v35 + 2 * (v29 + v34)) = *(_WORD *)(*v47 + 2 * v29);
    ++v29;
    v28 = *(unsigned int *)(a4 + 8);
  }
  while (v29 < v28);
LABEL_26:
  if (*(_DWORD *)(a1 + 1272))
  {
    if (v28)
    {
      v36 = 0;
      v37 = 0;
      v38 = *(_QWORD *)a3;
      do
      {
        LODWORD(v39) = *(unsigned __int16 *)(v38 + 2 * v36);
        if (*(_WORD *)(v38 + 2 * v36))
        {
          v40 = 0;
          do
          {
            QuadgramData::setQuad3SuccIdForIndex(v19, a2, v36, v40, *(_WORD *)(*a5 + 2 * (v37 + v40)));
            result = QuadgramData::setQuantizedScoreForIndex(v19, a2, v36, v40, *(_BYTE *)(*a9 + (v37 + v40)));
            ++v40;
            v38 = *(_QWORD *)a3;
            v39 = *(unsigned __int16 *)(*(_QWORD *)a3 + 2 * v36);
          }
          while (v40 < v39);
          v28 = *(unsigned int *)(v50 + 8);
        }
        v37 += v39;
        ++v36;
      }
      while (v36 < v28);
    }
  }
  else if (v28)
  {
    v41 = 0;
    v42 = 0;
    v43 = *(_QWORD *)a3;
    do
    {
      LODWORD(v44) = *(unsigned __int16 *)(v43 + 2 * v41);
      if (*(_WORD *)(v43 + 2 * v41))
      {
        v45 = 0;
        do
        {
          QuadgramData::setQuad3SuccIdForIndex(v19, a2, v41, v45, *(_WORD *)(*a5 + 2 * (v42 + v45)));
          result = QuadgramData::setScoreForIndex(v19, a2, v41, v45, *(_WORD *)(*a8 + 2 * (v42 + v45)));
          ++v45;
          v43 = *(_QWORD *)a3;
          v44 = *(unsigned __int16 *)(*(_QWORD *)a3 + 2 * v41);
        }
        while (v45 < v44);
        v28 = *(unsigned int *)(v50 + 8);
      }
      v42 += v44;
      ++v41;
    }
    while (v41 < v28);
  }
  return result;
}

void WordLanguageModel::finalizeLM(uint64_t a1, LanguageModel *a2, DFile *a3, DFileChecksums *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, unsigned __int8 a12, unint64_t a13, unint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[3];

  v14 = a8;
  v15 = a7;
  if (*(_QWORD *)(a1 + 232))
  {
    v47[0] = 1;
    DFile::pushCurrentSubDirComponent(a3, (const SubDirExtension *)v47, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    BYTE4(v33) = a10;
    LODWORD(v33) = a9;
    (*(void (**)(_QWORD, LanguageModel *, DFile *, DFileChecksums *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8, unint64_t, unint64_t))(**(_QWORD **)(a1 + 232) + 48))(*(_QWORD *)(a1 + 232), a2, a3, a4, a5, a6, v15, v14, v33, a11, a12, a13, a14);
    DFile::popCurrentSubDirComponent((uint64_t)a3);
    v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 232) + 696))(*(_QWORD *)(a1 + 232));
    if (v20 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 696))(a1))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4216, (uint64_t)"lm/wordlm", 68, (uint64_t)"%s", v21, v22, (char)&errStr_lm_wordlm_E_BACKOFF_MISMATCHED_ENDLMID);
  }
  v34 = a6;
  if (a14)
  {
    if (!a5)
    {
      if (*(_QWORD *)(a1 + 248))
      {
        LODWORD(v23) = 1000;
        if ((a14 & 0x8000000000000000) != 0 || a14 > a13 || (v23 = 1000 * a14 / a13, (_DWORD)v23))
        {
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 224) + 24))(*(_QWORD *)(a1 + 224), *(unsigned int *)(a1 + 256));
          v47[0] = 0;
          v47[1] = 0;
          v46[0] = 0;
          v46[1] = 0;
          v45[0] = 0;
          v45[1] = 0;
          v44[0] = 0;
          v44[1] = 0;
          v43[0] = 0;
          v43[1] = 0;
          v42[0] = 0;
          v42[1] = 0;
          v41[0] = 0;
          v41[1] = 0;
          v40 = 0;
          readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), (uint64_t)v47, &v40);
          readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), (uint64_t)v46, &v40);
          readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), (uint64_t)v45, &v40);
          readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), (uint64_t)v44, &v40);
          readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), (uint64_t)v43, &v40);
          readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), (uint64_t)v42, &v40);
          readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), (uint64_t)v41, &v40);
          v24 = 0;
          v38 = 0;
          v39 = 0;
          do
          {
            v25 = v39;
            if (v39 == (unint64_t)HIDWORD(v39))
            {
              DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v38, 1, 1);
              v25 = v39;
            }
            v26 = (_QWORD *)(v38 + 16 * v25);
            *v26 = 0;
            v26[1] = 0;
            LODWORD(v39) = v39 + 1;
            readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), v38 + 16 * v24++, &v40);
          }
          while (v24 <= v23);
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 224) + 24))(*(_QWORD *)(a1 + 224), *(unsigned int *)(a1 + 260));
          BigramData::preAllocateDynamicBigramData(a1 + 360, *(_DWORD *)(v46[0] + 4 * v23), *(_DWORD *)(v45[0] + 4 * v23));
          TrigramData::preAllocateDynamicTrigramData(a1 + 744, *(_DWORD *)(v44[0] + 4 * v23), *(_DWORD *)(v43[0] + 4 * v23));
          QuadgramData::preAllocateDynamicQuadgramData(a1 + 1232, *(_DWORD *)(v42[0] + 4 * v23), *(_DWORD *)(v41[0] + 4 * v23));
          v37 = 0;
          WordLanguageModel::preloadBigramsAndTrigrams(a1, v23, &v38, (unsigned int *)&v37 + 1, &v37, v27, v28, v29);
          BigramData::compact((void **)(a1 + 360));
          TrigramData::compact((void **)(a1 + 744));
          WordLanguageModel::preloadQuadgrams(a1, v23, &v38, HIDWORD(v37), v37, v30, v31, v32);
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40), 0);
          QuadgramData::compact((void **)(a1 + 1232));
          DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v38);
          v15 = v15;
          v14 = v14;
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v41);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v42);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v43);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v44);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v45);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v46);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v47);
        }
      }
    }
  }
  BYTE4(v33) = a10;
  LODWORD(v33) = a9;
  LanguageModel::finalizeLM(a1, a2, a3, a4, a5, v34, v15, v14, v33, a11, a12);
}

void sub_20998B168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a28);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a30);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 104);
  _Unwind_Resume(a1);
}

void readObject<unsigned int>(RealDFileSubFileStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v8 = 0;
  readObject(a1, &v8, a3);
  v6 = v8;
  v7 = *(_DWORD *)(a2 + 12);
  if (v8 > v7)
    DgnPrimArray<unsigned int>::reallocElts(a2, v8 - v7, 0);
  *(_DWORD *)(a2 + 8) = v6;
  readObjectArray((char **)a1, *(char **)a2, v6, a3);
}

uint64_t WordLanguageModel::canSaveAsText(WordLanguageModel *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 29);
  if (!v2)
    return *((_QWORD *)this + 5) == 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  if ((_DWORD)result)
    return *((_QWORD *)this + 5) == 0;
  return result;
}

void WordLanguageModel::saveLM(RecentBuffer **this, DFile *a2, DFileChecksums *a3, uint64_t a4, DFileChecksums *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  RecentBuffer *v13;
  uint64_t v14;

  if (*((_DWORD *)this + 16) < 2u
    || *((_BYTE *)this + 244)
    && (v14 = 1,
        DFile::pushCurrentSubDirComponent(a2, (const SubDirExtension *)&v14, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8),
        (*(void (**)(RecentBuffer *, DFile *, DFileChecksums *, uint64_t, DFileChecksums *))(*(_QWORD *)this[29] + 72))(this[29], a2, a3, a4, a5), DFile::popCurrentSubDirComponent((uint64_t)a2), *((_DWORD *)this + 16) < 2u)|| !this[28])
  {
    if ((_DWORD)a4)
    {
      WordLanguageModel::saveWns((WordLanguageModel *)this, a2, this[5] != 0, (int)a5);
      WordLanguageModel::saveText((WordLanguageModel *)this, a2, (int)a5);
    }
    else
    {
      WordLanguageModel::saveBinary((WordLanguageModel *)this, a2, a3, (int)a5);
    }
  }
  else
  {
    WordLanguageModel::saveDynamic((WordLanguageModel *)this, a2, a3, (int)a5);
  }
  v13 = this[1];
  if (v13)
    RecentBuffer::saveRecentBuffer(v13, a2, a3, a4, a5);
}

void WordLanguageModel::saveDynamic(WordLanguageModel *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v7;
  uint64_t CurrentSubDirComponents;
  unsigned __int8 v9;
  unsigned int v10;

  v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x70u, a4, "LMWNGDYN", 24, 16);
  v10 = 0;
  writeObject((uint64_t)v7, (int *)this + 16, &v10);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 68, &v10);
  writeObject((uint64_t)v7, (int *)this + 18, &v10);
  writeObject((uint64_t)v7, (int *)this + 19, &v10);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 80, &v10);
  writeObject((uint64_t)v7, (int *)this + 25, &v10);
  writeObject((uint64_t)v7, (int *)this + 60, &v10);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 244, &v10);
  v9 = 1;
  writeObject((uint64_t)v7, &v9, &v10);
  WordLanguageModel::saveUnigramMembersBinary(this, v7, &v10);
  if (*((_DWORD *)this + 16) >= 2u)
    WordLanguageModel::saveBigramMembersBinary(this, v7, &v10);
  writeObjectChecksum((uint64_t)v7, (int *)&v10);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x70u, v10);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
}

void WordLanguageModel::saveWns(WordLanguageModel *this, DFile *a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  int v16;
  _QWORD v17[2];
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[280];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v21);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v21, (uint64_t)a2, 0x73u, a4);
  v19 = 0;
  v20 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v21, sWNS_Versions, (uint64_t)&v19, v8, v9, v10, v11, v12);
  DgnTextFileWriter::setFileType((uint64_t)v21, "WordNGramSpec", (_QWORD *)(v19 + 8 * (v20 - 1)));
  v18[0] = 0;
  v18[1] = 0;
  v17[0] = 0;
  v17[1] = 0;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v21, (uint64_t)v18, (uint64_t)v17);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v21, "Depth", *((unsigned int *)this + 16));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v21, "AlienWordLmId", *((_DWORD *)this + 18));
  DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v21, "AllowNewWordCloning", *((unsigned __int8 *)this + 80));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v21, "IgnoreInContextLmId", *((_DWORD *)this + 25));
  if (*((_DWORD *)this + 16) >= 2u)
  {
    DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v21, "UnknownContextLmId", *((_DWORD *)this + 60));
    DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v21, "AlienWordContextLmId", *((_DWORD *)this + 19));
    if (*((_QWORD *)this + 29))
    {
      DgnString::DgnString((DgnString *)&v15);
      v14 = 1;
      SubDirExtension::appendToString((DgnString *)&v14, (DgnString *)&v15);
      if (v16)
        v13 = v15;
      else
        v13 = (const char *)&unk_209A7B4F4;
      DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v21, "BackoffSubDirectory", v13);
      DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v21, "BackoffAfterDepth", 2);
      DgnString::~DgnString((DgnString *)&v15);
    }
    DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v21, "HasStaticComponentOnDisk", a3);
    DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v21, "LoadNgrams", *((unsigned __int8 *)this + 68));
  }
  DgnArray<DgnString>::releaseAll((uint64_t)v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v19);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v21);
}

void sub_20998B6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;
  uint64_t v11;
  uint64_t v12;
  va_list va3;
  uint64_t v14;
  va_list va4;

  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v12 = va_arg(va4, _QWORD);
  v14 = va_arg(va4, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va3);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va4);
  _Unwind_Resume(a1);
}

void WordLanguageModel::saveText(WordLanguageModel *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t i;
  int v27;
  unint64_t v28;
  unint64_t j;
  int v30;
  unint64_t v31;
  unint64_t k;
  int v33;
  unint64_t v34;
  unint64_t m;
  int v36;
  unint64_t v37;
  unint64_t n;
  int v39;
  unint64_t v40;
  unint64_t ii;
  int v42;
  unint64_t v43;
  unint64_t jj;
  int v45;
  unint64_t v46;
  unint64_t kk;
  int v48;
  unint64_t v49;
  unint64_t mm;
  int v51;
  unint64_t v52;
  int v53;
  WordLanguageModel *v54;
  BigramData *v55;
  unint64_t v56;
  WordLanguageModel *v57;
  unsigned __int16 v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  unsigned int v69;
  __int16 SearchSuccIdForIndex;
  int SearchScoreForIndex;
  __int16 v72;
  unsigned int v73;
  char SearchQuantizedScoreForIndex;
  uint64_t v75;
  unsigned int v76;
  uint64_t *v77;
  unint64_t v78;
  int v79;
  int v80;
  unsigned int v81;
  WordLanguageModel *v82;
  unint64_t v83;
  int v84;
  unint64_t v85;
  int v86;
  unint64_t v87;
  unint64_t nn;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  TrigramData *v94;
  unint64_t i1;
  int v96;
  WordLanguageModel *v97;
  uint64_t v98;
  int v99;
  WordLanguageModel *v100;
  unsigned __int16 v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  char v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t *v111;
  unsigned int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  unsigned int v116;
  char v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t *v120;
  unint64_t v121;
  int v122;
  int v123;
  unint64_t v124;
  int v125;
  unint64_t v126;
  int v127;
  unint64_t v128;
  QuadgramData *v129;
  _QWORD *v130;
  unint64_t i2;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  WordLanguageModel *v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  _QWORD *v141;
  int v142;
  uint64_t v143;
  _QWORD *v144;
  int BackoffWeight;
  WordLanguageModel *v146;
  unint64_t i3;
  int v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  int v155;
  unsigned int v156;
  _QWORD *v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  _QWORD *v161;
  int Quad3SuccIdForIndex;
  int ScoreForIndex;
  int v164;
  int v165;
  _QWORD *v166;
  int v167;
  _QWORD *v168;
  int v169;
  int v170;
  int v171;
  int v172;
  unsigned int v173[2];
  unsigned int v174[2];
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  WordLanguageModel *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193[36];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v193);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v193, (uint64_t)a2, 0x74u, a3);
  v191 = 0;
  v192 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v193, sWNT_Versions, (uint64_t)&v191, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v193, "WordNGramText", (_QWORD *)(v191 + 8 * (v192 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v193, "Depth", *((unsigned int *)this + 16));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v193, "LMScale", *((unsigned int *)this + 8));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v193, "NumLmIds", *((unsigned int *)this + 26));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v193, "BegLmId", *((_DWORD *)this + 28));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v193, "EndLmId", *((_DWORD *)this + 29));
  if (*((_DWORD *)this + 16) >= 2u)
  {
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v193, "ContextSkipDistance", *((unsigned int *)this + 68));
    DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v193, "HasWordIdToContextLmId", *((unsigned __int8 *)this + 276));
  }
  v189 = 0;
  v190 = 0;
  v187 = 0;
  v188 = 0;
  DgnString::DgnString((DgnString *)&v185, "TableName");
  v11 = v190;
  if ((_DWORD)v190 == HIDWORD(v190))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v189, 1, 1);
    v11 = v190;
  }
  DgnString::DgnString((DgnString *)(v189 + 16 * v11), (const DgnString *)&v185);
  LODWORD(v190) = v190 + 1;
  DgnString::~DgnString((DgnString *)&v185);
  v12 = v188;
  if ((_DWORD)v188 == HIDWORD(v188))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v187, 1, 1);
    v12 = v188;
  }
  *(_DWORD *)(v187 + 4 * v12) = 0;
  LODWORD(v188) = v12 + 1;
  v178 = v190;
  DgnString::DgnString((DgnString *)&v185, "Index1");
  v13 = v190;
  if ((_DWORD)v190 == HIDWORD(v190))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v189, 1, 1);
    v13 = v190;
  }
  DgnString::DgnString((DgnString *)(v189 + 16 * v13), (const DgnString *)&v185);
  LODWORD(v190) = v190 + 1;
  DgnString::~DgnString((DgnString *)&v185);
  v14 = v188;
  if ((_DWORD)v188 == HIDWORD(v188))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v187, 1, 1);
    v14 = v188;
  }
  *(_DWORD *)(v187 + 4 * v14) = 3;
  LODWORD(v188) = v14 + 1;
  v15 = v190;
  v179 = v190;
  v16 = v190;
  v177 = v190;
  if (*((_DWORD *)this + 16) >= 2u)
  {
    DgnString::DgnString((DgnString *)&v185, "Index2");
    v17 = v190;
    if ((_DWORD)v190 == HIDWORD(v190))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v189, 1, 1);
      v17 = v190;
    }
    DgnString::DgnString((DgnString *)(v189 + 16 * v17), (const DgnString *)&v185);
    LODWORD(v190) = v190 + 1;
    DgnString::~DgnString((DgnString *)&v185);
    v18 = v188;
    if ((_DWORD)v188 == HIDWORD(v188))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v187, 1, 1);
      v18 = v188;
    }
    *(_DWORD *)(v187 + 4 * v18) = 3;
    LODWORD(v188) = v18 + 1;
    v15 = v190;
    if (*((_DWORD *)this + 16) < 3u)
    {
      v179 = v190;
      v16 = v190;
    }
    else
    {
      DgnString::DgnString((DgnString *)&v185, "Index3");
      v19 = v190;
      if ((_DWORD)v190 == HIDWORD(v190))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v189, 1, 1);
        v19 = v190;
      }
      DgnString::DgnString((DgnString *)(v189 + 16 * v19), (const DgnString *)&v185);
      LODWORD(v190) = v190 + 1;
      DgnString::~DgnString((DgnString *)&v185);
      v20 = v188;
      if ((_DWORD)v188 == HIDWORD(v188))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v187, 1, 1);
        v20 = v188;
      }
      *(_DWORD *)(v187 + 4 * v20) = 3;
      LODWORD(v188) = v20 + 1;
      v16 = v190;
      if (*((_DWORD *)this + 16) < 4u)
      {
        v179 = v190;
      }
      else
      {
        DgnString::DgnString((DgnString *)&v185, "Index4");
        v21 = v190;
        if ((_DWORD)v190 == HIDWORD(v190))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v189, 1, 1);
          v21 = v190;
        }
        DgnString::DgnString((DgnString *)(v189 + 16 * v21), (const DgnString *)&v185);
        LODWORD(v190) = v190 + 1;
        DgnString::~DgnString((DgnString *)&v185);
        v22 = v188;
        if ((_DWORD)v188 == HIDWORD(v188))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v187, 1, 1);
          v22 = v188;
        }
        *(_DWORD *)(v187 + 4 * v22) = 3;
        LODWORD(v188) = v22 + 1;
        v179 = v190;
      }
    }
  }
  DgnString::DgnString((DgnString *)&v185, "EntryValue1");
  v23 = v190;
  if ((_DWORD)v190 == HIDWORD(v190))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v189, 1, 1);
    v23 = v190;
  }
  DgnString::DgnString((DgnString *)(v189 + 16 * v23), (const DgnString *)&v185);
  LODWORD(v190) = v190 + 1;
  DgnString::~DgnString((DgnString *)&v185);
  v24 = v188;
  if ((_DWORD)v188 == HIDWORD(v188))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v187, 1, 1);
    v24 = v188;
  }
  *(_DWORD *)(v187 + 4 * v24) = 1;
  LODWORD(v188) = v24 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v193, (uint64_t)&v187, (uint64_t)&v189);
  v25 = *((unsigned int *)this + 44);
  if (v25 >= 2)
  {
    for (i = 1; i < v25; ++i)
    {
      v27 = *(unsigned __int16 *)(*((_QWORD *)this + 21) + 2 * i);
      if (v27 != 20000)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "UniSc");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, i);
        if (*((_DWORD *)this + 16) >= 2u)
        {
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
          if (*((_DWORD *)this + 16) >= 3u)
          {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
            if (*((_DWORD *)this + 16) >= 4u)
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
          }
        }
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v27);
        DgnTextFileWriter::writeNextLine(v193);
        v25 = *((unsigned int *)this + 44);
      }
    }
  }
  v28 = *((unsigned int *)this + 32);
  if ((_DWORD)v28)
  {
    for (j = 0; j < v28; ++j)
    {
      v30 = *(_DWORD *)(*((_QWORD *)this + 15) + 4 * j);
      if (v30 != -1)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "WordIdToLmId");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, j);
        if (*((_DWORD *)this + 16) >= 2u)
        {
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
          if (*((_DWORD *)this + 16) >= 3u)
          {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
            if (*((_DWORD *)this + 16) >= 4u)
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
          }
        }
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v30);
        DgnTextFileWriter::writeNextLine(v193);
        v28 = *((unsigned int *)this + 32);
      }
    }
  }
  else
  {
    v31 = *((unsigned int *)this + 36);
    if ((_DWORD)v31)
    {
      for (k = 0; k < v31; ++k)
      {
        v33 = *(unsigned __int16 *)(*((_QWORD *)this + 17) + 2 * k);
        if (v33 != 0xFFFF)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "WordIdToLmId");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, k);
          if (*((_DWORD *)this + 16) >= 2u)
          {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
            if (*((_DWORD *)this + 16) >= 3u)
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
              if (*((_DWORD *)this + 16) >= 4u)
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
            }
          }
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v33);
          DgnTextFileWriter::writeNextLine(v193);
          v31 = *((unsigned int *)this + 36);
        }
      }
    }
    else
    {
      v34 = *((unsigned int *)this + 40);
      if ((_DWORD)v34)
      {
        for (m = 0; m < v34; ++m)
        {
          v36 = *(unsigned __int8 *)(*((_QWORD *)this + 19) + m);
          if (v36 != 255)
          {
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "WordIdToLmId");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, m);
            if (*((_DWORD *)this + 16) >= 2u)
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
              if (*((_DWORD *)this + 16) >= 3u)
              {
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
                if (*((_DWORD *)this + 16) >= 4u)
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
              }
            }
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v36);
            DgnTextFileWriter::writeNextLine(v193);
            v34 = *((unsigned int *)this + 40);
          }
        }
      }
    }
  }
  v176 = v15;
  if (*((_DWORD *)this + 16) >= 2u)
  {
    if (*((_BYTE *)this + 276))
    {
      v37 = *((unsigned int *)this + 72);
      if ((_DWORD)v37)
      {
        for (n = 0; n < v37; ++n)
        {
          v39 = *(_DWORD *)(*((_QWORD *)this + 35) + 4 * n);
          if (v39 != -1)
          {
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "WordIdToContextLmId");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, n);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
            if (*((_DWORD *)this + 16) >= 3u)
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
              if (*((_DWORD *)this + 16) >= 4u)
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
            }
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v39);
            DgnTextFileWriter::writeNextLine(v193);
            v37 = *((unsigned int *)this + 72);
          }
        }
      }
      else
      {
        v40 = *((unsigned int *)this + 76);
        if ((_DWORD)v40)
        {
          for (ii = 0; ii < v40; ++ii)
          {
            v42 = *(unsigned __int16 *)(*((_QWORD *)this + 37) + 2 * ii);
            if (v42 != 0xFFFF)
            {
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "WordIdToContextLmId");
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, ii);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
              if (*((_DWORD *)this + 16) >= 3u)
              {
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
                if (*((_DWORD *)this + 16) >= 4u)
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
              }
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v42);
              DgnTextFileWriter::writeNextLine(v193);
              v40 = *((unsigned int *)this + 76);
            }
          }
        }
        else
        {
          v43 = *((unsigned int *)this + 80);
          if ((_DWORD)v43)
          {
            for (jj = 0; jj < v43; ++jj)
            {
              v45 = *(unsigned __int8 *)(*((_QWORD *)this + 39) + jj);
              if (v45 != 255)
              {
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "WordIdToContextLmId");
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, jj);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
                if (*((_DWORD *)this + 16) >= 3u)
                {
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
                  if (*((_DWORD *)this + 16) >= 4u)
                    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
                }
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v45);
                DgnTextFileWriter::writeNextLine(v193);
                v43 = *((unsigned int *)this + 80);
              }
            }
          }
        }
      }
    }
    v46 = *((unsigned int *)this + 84);
    if (v46 >= 2)
    {
      for (kk = 1; kk < v46; ++kk)
      {
        v48 = *(unsigned __int16 *)(*((_QWORD *)this + 41) + 2 * kk);
        if (v48 != 20000)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "UniBoSc");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, kk);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
          if (*((_DWORD *)this + 16) >= 3u)
          {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
            if (*((_DWORD *)this + 16) >= 4u)
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
          }
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v48);
          DgnTextFileWriter::writeNextLine(v193);
          v46 = *((unsigned int *)this + 84);
        }
      }
    }
    v49 = *((unsigned int *)this + 88);
    if (v49 >= 2)
    {
      for (mm = 1; mm < v49; ++mm)
      {
        v51 = *(__int16 *)(*((_QWORD *)this + 43) + 2 * mm);
        if (v51 != 20000)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "BoWt");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, mm);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
          if (*((_DWORD *)this + 16) >= 3u)
          {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
            if (*((_DWORD *)this + 16) >= 4u)
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
          }
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v193, v179, v51);
          DgnTextFileWriter::writeNextLine(v193);
          v49 = *((unsigned int *)this + 88);
        }
      }
    }
    if (*((_DWORD *)this + 94) >= 2u)
    {
      v52 = 1;
      do
      {
        v53 = *(unsigned __int16 *)(*((_QWORD *)this + 46) + 2 * v52);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "BiScQuant");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, v52);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
        if (*((_DWORD *)this + 16) >= 3u)
        {
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
          if (*((_DWORD *)this + 16) >= 4u)
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
        }
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v53);
        DgnTextFileWriter::writeNextLine(v193);
        ++v52;
      }
      while (v52 < *((unsigned int *)this + 94));
    }
    v175 = v16;
    v185 = 0;
    v186 = 0;
    v183 = 0;
    v184 = 0;
    v181 = 0;
    v182 = 0;
    v54 = this;
    v180 = this;
    if (*((_DWORD *)this + 140) >= 2u)
    {
      v55 = (WordLanguageModel *)((char *)this + 360);
      v56 = 1;
      do
      {
        LODWORD(v186) = 0;
        LODWORD(v184) = 0;
        LODWORD(v182) = 0;
        if (((*(_DWORD *)(*((_QWORD *)v54 + 48) + 4 * (v56 >> 5)) >> v56) & 1) != 0)
        {
          v57 = this;
          if (*(_WORD *)(*((_QWORD *)v54 + 69) + 2 * v56))
          {
            v58 = 1;
            do
            {
              v59 = *((_DWORD *)v57 + 94);
              v60 = v58 - 1;
              v61 = (*(_DWORD *)(*((_QWORD *)v57 + 67) + 4 * v56) + v60);
              if (v59)
              {
                v61 = *(unsigned __int8 *)(*((_QWORD *)v57 + 73) + v61);
                v62 = *((_QWORD *)v57 + 46);
              }
              else
              {
                v62 = *((_QWORD *)v57 + 71);
              }
              v63 = *(unsigned __int16 *)(v62 + 2 * v61);
              if (v63 != 20000)
              {
                v64 = v186;
                if ((_DWORD)v186 == HIDWORD(v186))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)&v185, 1, 1);
                  v64 = v186;
                  v59 = *((_DWORD *)this + 94);
                }
                *(_WORD *)(v185 + 2 * v64) = v58;
                LODWORD(v186) = v64 + 1;
                if (v59)
                {
                  v65 = *(_BYTE *)(*((_QWORD *)this + 73)
                                 + (*(_DWORD *)(*((_QWORD *)this + 67) + 4 * v56) + v60));
                  v66 = v182;
                  if (v182 == (unint64_t)HIDWORD(v182))
                  {
                    DgnPrimArray<char>::reallocElts((uint64_t)&v181, 1, 1);
                    v66 = v182;
                  }
                  *(_BYTE *)(v181 + v66) = v65;
                  v67 = v182;
                  v68 = &v182;
                }
                else
                {
                  v67 = v184;
                  if ((_DWORD)v184 == HIDWORD(v184))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)&v183, 1, 1);
                    v67 = v184;
                  }
                  *(_WORD *)(v183 + 2 * v67) = v63;
                  v68 = &v184;
                }
                *(_DWORD *)v68 = v67 + 1;
              }
              ++v58;
              v57 = this;
            }
            while (*(unsigned __int16 *)(*((_QWORD *)this + 69) + 2 * v56) >= v58);
          }
        }
        else if (*(_WORD *)(*((_QWORD *)v54 + 69) + 2 * v56))
        {
          v69 = 0;
          do
          {
            SearchSuccIdForIndex = BigramData::getSearchSuccIdForIndex(v55, v56, v69);
            SearchScoreForIndex = BigramData::getSearchScoreForIndex(v55, v56, v69);
            v72 = SearchScoreForIndex;
            if (SearchScoreForIndex != 20000)
            {
              v73 = v186;
              if ((_DWORD)v186 == HIDWORD(v186))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v185, 1, 1);
                v73 = v186;
              }
              *(_WORD *)(v185 + 2 * v73) = SearchSuccIdForIndex;
              LODWORD(v186) = v73 + 1;
              if (*((_DWORD *)this + 94))
              {
                SearchQuantizedScoreForIndex = BigramData::getSearchQuantizedScoreForIndex(v55, v56, v69);
                v75 = v182;
                if (v182 == (unint64_t)HIDWORD(v182))
                {
                  DgnPrimArray<char>::reallocElts((uint64_t)&v181, 1, 1);
                  v75 = v182;
                }
                *(_BYTE *)(v181 + v75) = SearchQuantizedScoreForIndex;
                v76 = v182;
                v77 = &v182;
              }
              else
              {
                v76 = v184;
                if ((_DWORD)v184 == HIDWORD(v184))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)&v183, 1, 1);
                  v76 = v184;
                }
                *(_WORD *)(v183 + 2 * v76) = v72;
                v77 = &v184;
              }
              *(_DWORD *)v77 = v76 + 1;
            }
            ++v69;
          }
          while (v69 < *(unsigned __int16 *)(*((_QWORD *)this + 69) + 2 * v56));
        }
        if ((_DWORD)v186)
        {
          v78 = 0;
          do
          {
            if (*((_DWORD *)this + 94))
              v79 = *(unsigned __int8 *)(v181 + v78);
            else
              v79 = *(unsigned __int16 *)(v183 + 2 * v78);
            v80 = *(unsigned __int16 *)(v185 + 2 * v78);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "BiSc");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, v56);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, v80);
            if (*((_DWORD *)this + 16) >= 3u)
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
              if (*((_DWORD *)this + 16) >= 4u)
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v175, 0);
            }
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v79);
            DgnTextFileWriter::writeNextLine(v193);
            ++v78;
          }
          while (v78 < v186);
        }
        ++v56;
        v54 = this;
      }
      while (v56 < *((unsigned int *)this + 140));
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v181);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v183);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v185);
    v81 = v175;
    if (*((_DWORD *)v54 + 16) >= 3u)
    {
      v82 = v54;
      if (*((_DWORD *)v54 + 192) >= 2u)
      {
        v83 = 1;
        do
        {
          v84 = *(__int16 *)(*((_QWORD *)v54 + 95) + 2 * v83);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "TriBoWtQuant");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, v83);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
          if (*((_DWORD *)v54 + 16) >= 4u)
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v175, 0);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v193, v179, v84);
          DgnTextFileWriter::writeNextLine(v193);
          ++v83;
        }
        while (v83 < *((unsigned int *)v54 + 192));
      }
      if (*((_DWORD *)v54 + 196) >= 2u)
      {
        v85 = 1;
        do
        {
          v86 = *(unsigned __int16 *)(*((_QWORD *)v54 + 97) + 2 * v85);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "TriScQuant");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, v85);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
          if (*((_DWORD *)v54 + 16) >= 4u)
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v175, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v86);
          DgnTextFileWriter::writeNextLine(v193);
          ++v85;
        }
        while (v85 < *((unsigned int *)v54 + 196));
      }
      v87 = *((unsigned int *)v54 + 200);
      if (v87 >= 2)
      {
        for (nn = 1; nn < v87; ++nn)
        {
          v89 = *((_QWORD *)v82 + 99);
          v90 = *(unsigned __int16 *)(v89 + 2 * nn);
          if (*(_WORD *)(v89 + 2 * nn))
          {
            v91 = 0;
            do
            {
              v92 = (v91 + *(_DWORD *)(*((_QWORD *)v180 + 101) + 4 * nn));
              v93 = *(unsigned __int16 *)(*((_QWORD *)v180 + 103) + 2 * v92);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "TriBoWt");
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, nn);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, v93);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v176, 0);
              if (*((_DWORD *)v180 + 16) >= 4u)
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v175, 0);
              if (*((_DWORD *)v180 + 192))
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, *(unsigned __int8 *)(*((_QWORD *)v180 + 107) + v92));
              else
                DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v193, v179, *(__int16 *)(*((_QWORD *)v180 + 105) + 2 * v92));
              DgnTextFileWriter::writeNextLine(v193);
              ++v91;
            }
            while (v90 != v91);
            v82 = v180;
            v87 = *((unsigned int *)v180 + 200);
          }
        }
      }
      v185 = 0;
      v186 = 0;
      v183 = 0;
      v184 = 0;
      v181 = 0;
      v182 = 0;
      if (v87 >= 2)
      {
        v94 = (WordLanguageModel *)((char *)v82 + 744);
        for (i1 = 1; i1 < v87; ++i1)
        {
          v167 = *(unsigned __int16 *)(*((_QWORD *)v82 + 99) + 2 * i1);
          if (*(_WORD *)(*((_QWORD *)v82 + 99) + 2 * i1))
          {
            v96 = 0;
            do
            {
              v97 = v82;
              v169 = v96;
              v98 = (*(_DWORD *)(*((_QWORD *)v82 + 101) + 4 * i1) + v96);
              v99 = *(unsigned __int16 *)(*((_QWORD *)v97 + 103) + 2 * v98);
              LODWORD(v186) = 0;
              LODWORD(v184) = 0;
              LODWORD(v182) = 0;
              if (((*(_DWORD *)(*((_QWORD *)v97 + 109) + 4 * (v98 >> 5)) >> v98) & 1) != 0)
              {
                v100 = v180;
                if (*(_WORD *)(*((_QWORD *)v97 + 130) + 2 * v98))
                {
                  v101 = 1;
                  do
                  {
                    v102 = *((_DWORD *)v100 + 196);
                    v103 = v101 - 1;
                    v104 = (*(_DWORD *)(*((_QWORD *)v100 + 128) + 4 * v98) + v103);
                    if (v102)
                    {
                      v104 = *(unsigned __int8 *)(*((_QWORD *)v100 + 134) + v104);
                      v105 = *((_QWORD *)v100 + 97);
                    }
                    else
                    {
                      v105 = *((_QWORD *)v100 + 132);
                    }
                    v106 = *(unsigned __int16 *)(v105 + 2 * v104);
                    if (v106 != 20000)
                    {
                      v107 = v186;
                      if ((_DWORD)v186 == HIDWORD(v186))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)&v185, 1, 1);
                        v107 = v186;
                        v102 = *((_DWORD *)v180 + 196);
                      }
                      *(_WORD *)(v185 + 2 * v107) = v101;
                      LODWORD(v186) = v107 + 1;
                      if (v102)
                      {
                        v108 = *(_BYTE *)(*((_QWORD *)v180 + 134)
                                        + (*(_DWORD *)(*((_QWORD *)v180 + 128) + 4 * v98) + v103));
                        v109 = v182;
                        if (v182 == (unint64_t)HIDWORD(v182))
                        {
                          DgnPrimArray<char>::reallocElts((uint64_t)&v181, 1, 1);
                          v109 = v182;
                        }
                        *(_BYTE *)(v181 + v109) = v108;
                        v110 = v182;
                        v111 = &v182;
                      }
                      else
                      {
                        v110 = v184;
                        if ((_DWORD)v184 == HIDWORD(v184))
                        {
                          DgnPrimArray<short>::reallocElts((uint64_t)&v183, 1, 1);
                          v110 = v184;
                        }
                        *(_WORD *)(v183 + 2 * v110) = v106;
                        v111 = &v184;
                      }
                      *(_DWORD *)v111 = v110 + 1;
                    }
                    ++v101;
                    v100 = v180;
                  }
                  while (*(unsigned __int16 *)(*((_QWORD *)v180 + 130) + 2 * v98) >= v101);
                }
              }
              else
              {
                v100 = v180;
                if (*(_WORD *)(*((_QWORD *)v97 + 130) + 2 * v98))
                {
                  v112 = 0;
                  do
                  {
                    v113 = TrigramData::getSearchSuccIdForIndex(v94, v98, v112);
                    v114 = TrigramData::getSearchScoreForIndex(v94, v98, v112);
                    v115 = v114;
                    if (v114 != 20000)
                    {
                      v116 = v186;
                      if ((_DWORD)v186 == HIDWORD(v186))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)&v185, 1, 1);
                        v116 = v186;
                      }
                      *(_WORD *)(v185 + 2 * v116) = v113;
                      LODWORD(v186) = v116 + 1;
                      if (*((_DWORD *)v180 + 196))
                      {
                        v117 = TrigramData::getSearchQuantizedScoreForIndex(v94, v98, v112);
                        v118 = v182;
                        if (v182 == (unint64_t)HIDWORD(v182))
                        {
                          DgnPrimArray<char>::reallocElts((uint64_t)&v181, 1, 1);
                          v118 = v182;
                        }
                        *(_BYTE *)(v181 + v118) = v117;
                        v119 = v182;
                        v120 = &v182;
                      }
                      else
                      {
                        v119 = v184;
                        if ((_DWORD)v184 == HIDWORD(v184))
                        {
                          DgnPrimArray<short>::reallocElts((uint64_t)&v183, 1, 1);
                          v119 = v184;
                        }
                        *(_WORD *)(v183 + 2 * v119) = v115;
                        v120 = &v184;
                      }
                      *(_DWORD *)v120 = v119 + 1;
                    }
                    ++v112;
                    v100 = v180;
                  }
                  while (v112 < *(unsigned __int16 *)(*((_QWORD *)v180 + 130) + 2 * v98));
                }
              }
              v82 = v100;
              if ((_DWORD)v186)
              {
                v121 = 0;
                do
                {
                  if (*((_DWORD *)v82 + 196))
                    v122 = *(unsigned __int8 *)(v181 + v121);
                  else
                    v122 = *(unsigned __int16 *)(v183 + 2 * v121);
                  v123 = *(unsigned __int16 *)(v185 + 2 * v121);
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "TriSc");
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, i1);
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, v99);
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v176, v123);
                  if (*((_DWORD *)v82 + 16) >= 4u)
                    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v175, 0);
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v122);
                  DgnTextFileWriter::writeNextLine(v193);
                  ++v121;
                }
                while (v121 < v186);
              }
              v96 = v169 + 1;
            }
            while (v169 + 1 != v167);
            v87 = *((unsigned int *)v82 + 200);
            v81 = v175;
          }
        }
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v181);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v183);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v185);
      if (*((_DWORD *)v82 + 16) >= 4u)
      {
        if (*((_DWORD *)v82 + 314) >= 2u)
        {
          v124 = 1;
          do
          {
            v125 = *(__int16 *)(*((_QWORD *)v82 + 156) + 2 * v124);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "QuadBoWtQuant");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, v124);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v176, 0);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v81, 0);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v193, v179, v125);
            DgnTextFileWriter::writeNextLine(v193);
            ++v124;
          }
          while (v124 < *((unsigned int *)v82 + 314));
        }
        if (*((_DWORD *)v82 + 318) >= 2u)
        {
          v126 = 1;
          do
          {
            v127 = *(unsigned __int16 *)(*((_QWORD *)v82 + 158) + 2 * v126);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "QuadScQuant");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, v126);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v176, 0);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v81, 0);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v127);
            DgnTextFileWriter::writeNextLine(v193);
            ++v126;
          }
          while (v126 < *((unsigned int *)v82 + 318));
        }
        v128 = *((unsigned int *)v82 + 322);
        if (v128 >= 2)
        {
          v129 = (WordLanguageModel *)((char *)v82 + 1232);
          v166 = (_QWORD *)((char *)v82 + 1672);
          v168 = (_QWORD *)((char *)v82 + 1496);
          *(_QWORD *)v173 = (char *)v82 + 1704;
          v130 = (_QWORD *)((char *)v82 + 1544);
          for (i2 = 1; i2 < v128; ++i2)
          {
            v170 = *(unsigned __int16 *)(*((_QWORD *)v180 + 160) + 2 * i2);
            if (*(_WORD *)(*((_QWORD *)v180 + 160) + 2 * i2))
            {
              v132 = 0;
              v133 = *((_QWORD *)v180 + 166);
              do
              {
                v134 = (*(_DWORD *)(*((_QWORD *)v180 + 162) + 4 * i2) + v132);
                if (*(_WORD *)(v133 + 2 * v134))
                {
                  v171 = v132;
                  v135 = 0;
                  v136 = v180;
                  v137 = *(unsigned __int16 *)(*((_QWORD *)v180 + 164) + 2 * v134);
                  v138 = v134 >> 5;
                  v139 = 1 << (*(_BYTE *)(*((_QWORD *)v180 + 162) + 4 * i2) + v132);
                  do
                  {
                    v140 = *(unsigned int *)(*((_QWORD *)v136 + 185) + 4 * v134);
                    if (*((_DWORD *)v136 + 308))
                    {
                      v141 = v168;
                      if ((*(_DWORD *)(*((_QWORD *)v136 + 168) + 4 * v138) & v139) != 0)
                      {
                        LODWORD(v140) = *(_DWORD *)(*((_QWORD *)v180 + 207) + 4 * v140);
                        v141 = v166;
                      }
                    }
                    else
                    {
                      v141 = v168;
                    }
                    v142 = *(unsigned __int16 *)(*v141 + 2 * (v140 + v135));
                    DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "QuadBoWt");
                    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, i2);
                    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, v137);
                    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v176, v142);
                    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v175, 0);
                    if (*((_DWORD *)v180 + 314))
                    {
                      v143 = *(unsigned int *)(*((_QWORD *)v180 + 185) + 4 * v134);
                      if (*((_DWORD *)v180 + 308))
                      {
                        v144 = v130;
                        if ((*(_DWORD *)(*((_QWORD *)v180 + 168) + 4 * v138) & v139) != 0)
                        {
                          LODWORD(v143) = *(_DWORD *)(*((_QWORD *)v180 + 207) + 4 * v143);
                          v144 = *(_QWORD **)v173;
                        }
                      }
                      else
                      {
                        v144 = v130;
                      }
                      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, *(unsigned __int8 *)(*v144 + v143 + v135));
                    }
                    else
                    {
                      BackoffWeight = QuadgramData::getBackoffWeight(v129, v134, v135);
                      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v193, v179, BackoffWeight);
                    }
                    DgnTextFileWriter::writeNextLine(v193);
                    ++v135;
                    v136 = v180;
                    v133 = *((_QWORD *)v180 + 166);
                  }
                  while (v135 < *(unsigned __int16 *)(v133 + 2 * v134));
                  v132 = v171;
                }
                ++v132;
              }
              while (v132 != v170);
              v128 = *((unsigned int *)v180 + 322);
            }
          }
          v146 = v180;
          if (v128 >= 2)
          {
            for (i3 = 1; i3 < v128; ++i3)
            {
              v164 = *(unsigned __int16 *)(*((_QWORD *)v146 + 160) + 2 * i3);
              if (*(_WORD *)(*((_QWORD *)v146 + 160) + 2 * i3))
              {
                v148 = 0;
                v149 = *((_QWORD *)v146 + 166);
                *(_QWORD *)v174 = i3;
                do
                {
                  v150 = (*(_DWORD *)(*((_QWORD *)v180 + 162) + 4 * i3) + v148);
                  if (*(_WORD *)(v149 + 2 * v150))
                  {
                    v165 = v148;
                    v151 = 0;
                    v172 = *(unsigned __int16 *)(*((_QWORD *)v180 + 164) + 2 * v150);
                    v152 = v150 >> 5;
                    v153 = 1 << (*(_BYTE *)(*((_QWORD *)v180 + 162) + 4 * i3) + v148);
                    v154 = *(_DWORD *)(*((_QWORD *)v180 + 185) + 4 * v150);
                    v155 = *((_DWORD *)v180 + 308);
                    do
                    {
                      v156 = v154;
                      v157 = v168;
                      if (v155)
                      {
                        v156 = v154;
                        v157 = v168;
                        if ((*(_DWORD *)(*((_QWORD *)v180 + 168) + 4 * v152) & v153) != 0)
                        {
                          v156 = *(_DWORD *)(*((_QWORD *)v180 + 207) + 4 * v154);
                          v157 = v166;
                        }
                      }
                      v158 = 0;
                      v159 = *(unsigned __int16 *)(*v157 + 2 * (v156 + v151));
                      while (1)
                      {
                        v160 = v154;
                        v161 = (_QWORD *)((char *)v180 + 1512);
                        if (v155)
                        {
                          v160 = v154;
                          v161 = (_QWORD *)((char *)v180 + 1512);
                          if ((*(_DWORD *)(*((_QWORD *)v180 + 168) + 4 * v152) & v153) != 0)
                          {
                            v160 = *(_DWORD *)(*((_QWORD *)v180 + 207) + 4 * v154);
                            v161 = (_QWORD *)((char *)v180 + 1736);
                          }
                        }
                        if (v158 >= *(unsigned __int16 *)(*v161 + 2 * (v160 + v151)))
                          break;
                        Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex(v129, v150, v151, v158);
                        ScoreForIndex = QuadgramData::getScoreForIndex(v129, v150, v151, v158);
                        if (ScoreForIndex != 20000)
                        {
                          if (*((_DWORD *)v180 + 318))
                            ScoreForIndex = QuadgramData::getQuantizedScoreForIndex(v129, v150, v151, v158);
                          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "QuadSc");
                          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, v174[0]);
                          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, v172);
                          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v176, v159);
                          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v175, Quad3SuccIdForIndex);
                          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, ScoreForIndex);
                          DgnTextFileWriter::writeNextLine(v193);
                        }
                        ++v158;
                        v155 = *((_DWORD *)v180 + 308);
                        v154 = *(_DWORD *)(*((_QWORD *)v180 + 185) + 4 * v150);
                      }
                      ++v151;
                      v149 = *((_QWORD *)v180 + 166);
                    }
                    while (v151 < *(unsigned __int16 *)(v149 + 2 * v150));
                    i3 = *(_QWORD *)v174;
                    v148 = v165;
                  }
                  ++v148;
                }
                while (v148 != v164);
                v146 = v180;
                v128 = *((unsigned int *)v180 + 322);
              }
            }
          }
        }
      }
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v187);
  DgnArray<DgnString>::releaseAll((uint64_t)&v189);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v191);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v193);
}

void sub_20998D2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a25);
  DgnArray<DgnString>::releaseAll((uint64_t)&a27);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a29);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)&a31);
  _Unwind_Resume(a1);
}

void WordLanguageModel::saveBinary(WordLanguageModel *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v7;
  uint64_t CurrentSubDirComponents;
  unsigned int v9;

  v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x6Fu, a4, "LMWNGBIN", 24, 18);
  v9 = 0;
  writeObject((uint64_t)v7, (int *)this + 16, &v9);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 68, &v9);
  writeObject((uint64_t)v7, (int *)this + 18, &v9);
  writeObject((uint64_t)v7, (int *)this + 19, &v9);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 80, &v9);
  writeObject((uint64_t)v7, (int *)this + 25, &v9);
  writeObject((uint64_t)v7, (int *)this + 60, &v9);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 244, &v9);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 245, &v9);
  WordLanguageModel::saveUnigramMembersBinary(this, v7, &v9);
  if (*((_DWORD *)this + 16) >= 2u)
  {
    WordLanguageModel::saveBigramMembersBinary(this, v7, &v9);
    BigramData::saveBinary((WordLanguageModel *)((char *)this + 360), v7, &v9);
    if (*((_DWORD *)this + 16) >= 3u)
    {
      TrigramData::saveBinary((WordLanguageModel *)((char *)this + 744), v7, &v9);
      if (*((_DWORD *)this + 16) >= 4u)
        QuadgramData::saveBinary((WordLanguageModel *)((char *)this + 1232), v7, &v9);
    }
  }
  writeObjectChecksum((uint64_t)v7, (int *)&v9);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x6Fu, v9);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
}

uint64_t WordLanguageModel::saveLMShared(WordLanguageModel *this, DgnSharedMemStream *a2, uint64_t a3)
{
  uint64_t result;

  result = WordLanguageModel::saveBinaryShared(this, a2, a3);
  if (*((_DWORD *)this + 16) >= 2u)
  {
    if (*((_BYTE *)this + 244))
      return (*(uint64_t (**)(_QWORD, DgnSharedMemStream *, uint64_t))(**((_QWORD **)this + 29) + 80))(*((_QWORD *)this + 29), a2, a3);
  }
  return result;
}

uint64_t WordLanguageModel::saveBinaryShared(WordLanguageModel *this, DgnSharedMemStream *a2, int a3)
{
  int *v6;
  unsigned int v8;

  v8 = 0;
  v6 = (int *)((char *)this + 64);
  if (a3)
  {
    writeObject((uint64_t)a2, v6, &v8);
    writeObject((uint64_t)a2, (unsigned __int8 *)this + 68, &v8);
    writeObject((uint64_t)a2, (int *)this + 18, &v8);
    writeObject((uint64_t)a2, (int *)this + 19, &v8);
    writeObject((uint64_t)a2, (unsigned __int8 *)this + 80, &v8);
    writeObject((uint64_t)a2, (int *)this + 25, &v8);
    writeObject((uint64_t)a2, (int *)this + 60, &v8);
    writeObject((uint64_t)a2, (unsigned __int8 *)this + 244, &v8);
    writeObject((uint64_t)a2, (unsigned __int8 *)this + 245, &v8);
    WordLanguageModel::saveUnigramMembersBinary(this, a2, &v8);
    if (*((_DWORD *)this + 16) <= 1u)
    {
LABEL_9:
      writeObject((uint64_t)a2, (int *)this + 456, &v8);
      return writeObjectChecksum((uint64_t)a2, (int *)&v8);
    }
    WordLanguageModel::saveBigramMembersBinary(this, a2, &v8);
  }
  else if (*v6 <= 1)
  {
    return writeObjectChecksum((uint64_t)a2, (int *)&v8);
  }
  BigramData::saveBinaryShared((WordLanguageModel *)((char *)this + 360), a2, a3, &v8);
  if (*((_DWORD *)this + 16) >= 3u)
  {
    TrigramData::saveBinaryShared((WordLanguageModel *)((char *)this + 744), a2, a3, &v8);
    if (*((_DWORD *)this + 16) >= 4u)
      QuadgramData::saveBinaryShared((WordLanguageModel *)((char *)this + 1232), a2, a3, &v8);
  }
  if (a3)
    goto LABEL_9;
  return writeObjectChecksum((uint64_t)a2, (int *)&v8);
}

void WordLanguageModel::reloadLMShared(WordLanguageModel *this, DgnSharedMemStream *a2, uint64_t a3)
{
  WordLanguageModel::loadBinaryShared((uint64_t)this, a2, 0, 0, 0x6Fu, a3);
  if (*((_DWORD *)this + 16) >= 2u)
  {
    if (*((_BYTE *)this + 244))
      (*(void (**)(_QWORD, DgnSharedMemStream *, uint64_t))(**((_QWORD **)this + 29) + 88))(*((_QWORD *)this + 29), a2, a3);
  }
}

void WordLanguageModel::saveVocAndSvc(unint64_t a1, DFile *a2, DFile *a3, DFileChecksums *a4, uint64_t a5, DFileChecksums *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  RecentBuffer *v23;
  uint64_t v24;

  if (*(_DWORD *)(a1 + 64) == 1)
  {
    (*(void (**)(unint64_t, DFile *, DFileChecksums *, _QWORD, DFileChecksums *))(*(_QWORD *)a1 + 72))(a1, a2, a4, 0, a6);
  }
  else
  {
    if (*(_BYTE *)(a1 + 244))
    {
      v24 = 1;
      DFile::pushCurrentSubDirComponent(a2, (const SubDirExtension *)&v24, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
      v24 = 1;
      DFile::pushCurrentSubDirComponent(a3, (const SubDirExtension *)&v24, v17, v18, v19, v20, v21, v22);
      (*(void (**)(_QWORD, DFile *, DFile *, DFileChecksums *, uint64_t, DFileChecksums *, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 232) + 96))(*(_QWORD *)(a1 + 232), a2, a3, a4, a5, a6, a7, a8, a9);
      DFile::popCurrentSubDirComponent((uint64_t)a2);
      DFile::popCurrentSubDirComponent((uint64_t)a3);
    }
    WordLanguageModel::savePersistentAndIndex(a1, (uint64_t)a3, a5, (int)a6, a7, a8, a9, SHIDWORD(a9));
    WordLanguageModel::saveDynamic((WordLanguageModel *)a1, a2, a4, (int)a6);
    v23 = *(RecentBuffer **)(a1 + 8);
    if (v23)
      RecentBuffer::saveRecentBuffer(v23, a2, a4, 0, a6);
  }
}

void WordLanguageModel::savePersistentAndIndex(unint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  DFile *v12;
  DgnStream *v14;
  DgnStream *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t i;
  unint64_t WordIdWithMapping;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  double *v32;
  int32x2_t *v33;
  uint64_t v34;
  double v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  __int16 v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  __int16 v45;
  __int16 v46;
  double v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __int16 v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  __int16 v59;
  __int16 v60;
  double v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  uint64_t j;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char v69;
  unsigned int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t k;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unsigned int *v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  unsigned int *v113;
  uint64_t v114;
  unsigned int v115;
  _DWORD *v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t m;
  uint64_t n;
  uint64_t CurrentSubDirComponents;
  uint64_t v135;
  uint64_t v136;
  DFile *v137;
  uint64_t v138;
  uint64_t v139;
  DgnStream *v140;
  _DWORD *v141;
  uint64_t v142;
  BigramData *v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  int v150;
  unsigned int *v151;
  uint64_t *v153;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  _WORD *v177;
  uint64_t v178;
  __int128 v179;
  int v180;
  char v181;
  _BYTE v182[56];
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  int v195;
  char v196;
  _QWORD v197[16];
  uint64_t v198[71];
  int v199;
  char v200;
  _QWORD v201[16];
  _BYTE v202[488];
  int v203;
  char v204;
  _QWORD v205[16];
  _BYTE v206[388];
  unsigned int v207;
  int v208;
  int v209;
  _BYTE v210[32];
  _BYTE v211[48];
  _QWORD v212[4];
  __int128 v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;

  v12 = (DFile *)a2;
  v216 = *MEMORY[0x24BDAC8D0];
  v14 = OpenAndWriteMrecHeader(a2, 0x72u, 0, "LMWNGPER", 23, 7);
  v15 = OpenAndWriteMrecHeader((uint64_t)v12, 0x71u, a4, "LMWNGIND", 23, 11);
  v208 = 0;
  v207 = 0;
  v16 = (*(uint64_t (**)(DgnStream *))(*(_QWORD *)v14 + 40))(v14);
  LODWORD(v198[0]) = 0;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(_QWORD *)v14 + 80))(v14, v198, 4);
  LODWORD(v198[0]) = 0;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(_QWORD *)v14 + 80))(v14, v198, 4);
  LODWORD(v198[0]) = 0;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(_QWORD *)v14 + 80))(v14, v198, 4);
  (*(void (**)(DgnStream *))(*(_QWORD *)v14 + 48))(v14);
  v17 = (*(uint64_t (**)(DgnStream *))(*(_QWORD *)v15 + 40))(v15);
  LODWORD(v198[0]) = 0;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(_QWORD *)v15 + 80))(v15, v198, 4);
  LODWORD(v198[0]) = 0;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(_QWORD *)v15 + 80))(v15, v198, 4);
  LODWORD(v198[0]) = 0;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(_QWORD *)v15 + 80))(v15, v198, 4);
  if (*(_BYTE *)(a1 + 68))
  {
    v198[0] = 0;
    writeObject((uint64_t)v15, v198, &v207);
    BigramData::saveBinary((BigramData *)(a1 + 360), v15, &v207);
    if (*(_DWORD *)(a1 + 64) >= 3u)
    {
      TrigramData::saveBinary((TrigramData *)(a1 + 744), v15, &v207);
      if (*(_DWORD *)(a1 + 64) >= 4u)
        QuadgramData::saveBinary((QuadgramData *)(a1 + 1232), v15, &v207);
    }
    v18 = 0;
    goto LABEL_146;
  }
  BigramData::BigramData((BigramData *)v206);
  v203 = 0;
  v204 = 0;
  Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::Hash((uint64_t)v205, 0, 16);
  v205[15] = 0;
  v205[14] = 0;
  TrigramData::TrigramData((TrigramData *)v202);
  v199 = 0;
  v200 = 0;
  Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::Hash((uint64_t)v201, 0, 16);
  v201[15] = 0;
  v201[14] = 0;
  QuadgramData::QuadgramData((QuadgramData *)v198);
  v150 = a7;
  v195 = 0;
  v196 = 0;
  Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::Hash((uint64_t)v197, 0, 16);
  v197[15] = 0;
  v197[14] = 0;
  v19 = (_QWORD *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 464))(a1);
  v215 = 0u;
  v214 = 0u;
  v213 = 0u;
  memset(v212, 0, sizeof(v212));
  memset(v211, 0, sizeof(v211));
  memset(v210, 0, sizeof(v210));
  v194 = 0;
  v193 = 0;
  v192 = 0;
  v191 = 0;
  WordLanguageModel::constructLmIdToWordIdMapping(a1, (uint64_t)&v193, (uint64_t)&v191);
  v137 = v12;
  v189 = 0;
  v190 = 0;
  v188 = 0u;
  v187 = 0u;
  v186 = 0u;
  v185 = 0u;
  v184 = 0u;
  v183 = 0u;
  LMStats::resetStats((LMStats *)v182);
  v179 = xmmword_209A76430;
  v180 = 1;
  v181 = 1;
  v20 = *(unsigned int *)(a1 + 104);
  v177 = 0;
  v178 = 0;
  v136 = a3;
  v140 = v15;
  if (!(_DWORD)v20)
  {
    v175 = 0;
    v176 = 0;
    goto LABEL_18;
  }
  v175 = 0;
  v21 = realloc_array(0, &v175, 2 * v20, 0, 0, 1);
  v176 = 0;
  v177 = v175;
  v22 = *(unsigned int *)(a1 + 104);
  HIDWORD(v178) = v21 >> 1;
  LODWORD(v178) = v20;
  v175 = 0;
  if (!(_DWORD)v22)
  {
LABEL_18:
    LODWORD(v176) = 0;
    goto LABEL_19;
  }
  v172 = 0;
  v23 = realloc_array(0, &v172, 8 * v22, 0, 0, 1);
  v24 = v172;
  v175 = v172;
  v25 = *(unsigned int *)(a1 + 104);
  HIDWORD(v176) = v23 >> 3;
  LODWORD(v176) = v22;
  if (v25 >= 2)
  {
    for (i = 1; i < v25; ++i)
    {
      if (*(_WORD *)(*(_QWORD *)(a1 + 168) + 2 * i) == 20000)
      {
        v177[i] = 20000;
        v24[i] = 0;
      }
      else
      {
        LODWORD(v190) = 0;
        (*(void (**)(unint64_t, uint64_t *, _QWORD, _BYTE *, __int128 *, _QWORD *))(*(_QWORD *)a1 + 472))(a1, &v189, 0, v182, &v179, v19);
        LOBYTE(v172) = 0;
        WordIdWithMapping = WordLanguageModel::getWordIdWithMapping(a1, i, 0, (uint64_t)&v193, 0);
        v28 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, _BYTE *, _QWORD *, _QWORD, _QWORD, _QWORD, void **))(*(_QWORD *)a1 + 504))(a1, WordIdWithMapping, 0xFFFFLL, v182, v19, 0, 0, 0, &v172);
        (*(void (**)(unint64_t, _QWORD *))(*(_QWORD *)a1 + 480))(a1, v19);
        v177[i] = v28;
        v29 = 0;
        if (*(_DWORD *)(a1 + 56) > v28)
          v29 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v28);
        v24 = v175;
        *((_QWORD *)v175 + i) = v29;
        v25 = *(unsigned int *)(a1 + 104);
      }
    }
  }
LABEL_19:
  v138 = v16;
  v139 = v17;
  v141 = (_DWORD *)a1;
  v143 = (BigramData *)(a1 + 360);
  BigramData::initNewBigramData(a1 + 360, (BigramData *)v206, (uint64_t)&v203, (uint64_t)&v213, (uint64_t)v211);
  v30 = DWORD2(v213);
  if (DWORD2(v213))
  {
    v31 = v177;
    v32 = (double *)v175;
    v33 = (int32x2_t *)(v213 + 32);
    do
    {
      v34 = v33[-1].u32[0];
      v35 = v32[v34];
      v33->i16[0] = v31[v34];
      *(float *)&v35 = v35;
      v33[-4] = vdup_lane_s32(*(int32x2_t *)&v35, 0);
      v33 += 7;
      --v30;
    }
    while (v30);
  }
  if (*(_DWORD *)(a1 + 64) > 2u)
  {
    TrigramData::initNewTrigramData(a1 + 744, (TrigramData *)v202, (uint64_t)&v199, (uint64_t)&v214, (uint64_t)v211, &v175, v150 == 2);
    v36 = DWORD2(v214);
    if (DWORD2(v214))
    {
      v37 = 0;
      v38 = 0;
      v39 = (_DWORD *)a1;
      do
      {
        LODWORD(v190) = 0;
        (*(void (**)(_DWORD *, uint64_t *, _QWORD, _BYTE *, __int128 *, _QWORD *))(*(_QWORD *)v39 + 472))(v39, &v189, 0, v182, &v179, v19);
        LOBYTE(v172) = 0;
        v40 = WordLanguageModel::getWordIdWithMapping((uint64_t)v39, *(_DWORD *)(v214 + v37 + 24), 0, (uint64_t)&v193, 0);
        v41 = (*(uint64_t (**)(_DWORD *, unint64_t, uint64_t, _BYTE *, _QWORD *, _QWORD, _QWORD, _QWORD, void **))(*(_QWORD *)v39 + 504))(v39, v40, 0xFFFFLL, v182, v19, 0, 0, 0, &v172);
        (*(void (**)(_DWORD *, _QWORD *))(*(_QWORD *)v39 + 480))(v39, v19);
        v42 = WordLanguageModel::getWordIdWithMapping((uint64_t)v39, *(_DWORD *)(v214 + v37 + 24), 1, (uint64_t)&v193, (uint64_t)&v191);
        v43 = v190;
        if (v190 == (unint64_t)HIDWORD(v190))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v189, 1, 1);
          v43 = v190;
        }
        *(_DWORD *)(v189 + 4 * v43) = v42;
        LODWORD(v190) = v190 + 1;
        v39 = (_DWORD *)a1;
        (*(void (**)(unint64_t, uint64_t *, _QWORD, _BYTE *, __int128 *, _QWORD *))(*(_QWORD *)a1 + 472))(a1, &v189, 0, v182, &v179, v19);
        v44 = WordLanguageModel::getWordIdWithMapping(a1, *(_DWORD *)(v214 + v37 + 28), 0, (uint64_t)&v193, 0);
        v45 = (*(uint64_t (**)(_DWORD *, unint64_t, uint64_t, _BYTE *, _QWORD *, _QWORD, _QWORD, _QWORD, void **))(*(_QWORD *)v39 + 504))(v39, v44, 0xFFFFLL, v182, v19, 0, 0, 0, &v172);
        (*(void (**)(_DWORD *, _QWORD *))(*(_QWORD *)v39 + 480))(v39, v19);
        v46 = v45 + v41;
        v47 = 0.0;
        if (*(_DWORD *)(a1 + 56) > (__int16)(v45 + v41))
          v47 = *(double *)(*(_QWORD *)(a1 + 48) + 8 * v46);
        v48 = v214 + v37;
        *(_WORD *)(v48 + 32) = v46;
        v49 = v47;
        *(float *)v48 = v49;
        ++v38;
        v36 = DWORD2(v214);
        v37 += 56;
      }
      while (v38 < DWORD2(v214));
    }
    else
    {
      v39 = (_DWORD *)a1;
    }
    if ((DWORD2(v213) + v36) > HIDWORD(v213))
    {
      DgnArray<DiskNgramContext>::reallocElts((uint64_t)&v213, (DWORD2(v213) + v36 - HIDWORD(v213)), 1);
      v36 = DWORD2(v214);
      v39 = (_DWORD *)a1;
    }
    if (v36)
    {
      v50 = 0;
      v51 = 0;
      do
      {
        DiskNgramContext::operator=(v213 + 56 * (v51++ + DWORD2(v213)), v214 + v50);
        v36 = DWORD2(v214);
        v50 += 56;
      }
      while (v51 < DWORD2(v214));
    }
    DWORD2(v213) += v36;
    if ((_QWORD)v214)
    {
      MemChunkFree((_QWORD *)v214, 0);
      *(_QWORD *)&v214 = 0;
      v39 = (_DWORD *)a1;
    }
    *((_QWORD *)&v214 + 1) = 0;
    if (v39[16] >= 4u)
    {
      QuadgramData::initNewQuadgramData(a1 + 1232, (TrigramData *)v198, (uint64_t)&v195, (uint64_t)&v215, &v175);
      if (DWORD2(v215))
      {
        v52 = 0;
        v53 = 0;
        do
        {
          LODWORD(v190) = 0;
          (*(void (**)(unint64_t, uint64_t *, _QWORD, _BYTE *, __int128 *, _QWORD *))(*(_QWORD *)a1 + 472))(a1, &v189, 0, v182, &v179, v19);
          LOBYTE(v172) = 0;
          v54 = WordLanguageModel::getWordIdWithMapping(a1, *(_DWORD *)(v215 + v52 + 24), 0, (uint64_t)&v193, 0);
          v55 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, _BYTE *, _QWORD *, _QWORD, _QWORD, _QWORD, void **))(*(_QWORD *)a1 + 504))(a1, v54, 0xFFFFLL, v182, v19, 0, 0, 0, &v172);
          (*(void (**)(unint64_t, _QWORD *))(*(_QWORD *)a1 + 480))(a1, v19);
          v56 = WordLanguageModel::getWordIdWithMapping(a1, *(_DWORD *)(v215 + v52 + 24), 1, (uint64_t)&v193, (uint64_t)&v191);
          v57 = v190;
          if (v190 == (unint64_t)HIDWORD(v190))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v189, 1, 1);
            v57 = v190;
          }
          *(_DWORD *)(v189 + 4 * v57) = v56;
          LODWORD(v190) = v190 + 1;
          (*(void (**)(unint64_t, uint64_t *, _QWORD, _BYTE *, __int128 *, _QWORD *))(*(_QWORD *)a1 + 472))(a1, &v189, 0, v182, &v179, v19);
          v58 = WordLanguageModel::getWordIdWithMapping(a1, *(_DWORD *)(v215 + v52 + 28), 0, (uint64_t)&v193, 0);
          v59 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, _BYTE *, _QWORD *, _QWORD, _QWORD, _QWORD, void **))(*(_QWORD *)a1 + 504))(a1, v58, 0xFFFFLL, v182, v19, 0, 0, 0, &v172);
          (*(void (**)(unint64_t, _QWORD *))(*(_QWORD *)a1 + 480))(a1, v19);
          v60 = v59 + v55;
          v61 = 0.0;
          if (*(_DWORD *)(a1 + 56) > (__int16)(v59 + v55))
            v61 = *(double *)(*(_QWORD *)(a1 + 48) + 8 * v60);
          v62 = v215 + v52;
          *(_WORD *)(v62 + 32) = v60;
          v63 = v61;
          *(float *)v62 = v63;
          ++v53;
          v52 += 56;
        }
        while (v53 < DWORD2(v215));
      }
    }
  }
  if (v19)
  {
    (*(void (**)(_QWORD *))*v19)(v19);
    MemChunkFree(v19, 0);
  }
  v64 = 0;
  v174 = 0;
  for (j = 2; j != 5; ++j)
  {
    v66 = LODWORD(v212[2 * j + 1]);
    if ((_DWORD)v66)
    {
      v67 = (uint64_t *)(v212[2 * j] + 8);
      do
      {
        v68 = *v67;
        v67 += 7;
        v64 += v68;
        --v66;
      }
      while (v66);
      v174 = v64;
    }
  }
  mrec_qsort_r<DiskNgramContextBiTriIsolatedCmp>(v213, DWORD2(v213), 0x38uLL, 0);
  mrec_qsort_r<DiskNgramContextQuadIsolatedCmp>(v215, DWORD2(v215), 0x38uLL, 0);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = (unint64_t)((double)a6 * (double)v64 / (double)a5);
  for (k = 2; k != 5; ++k)
  {
    v75 = LODWORD(v212[2 * k + 1]);
    if ((_DWORD)v75)
    {
      v76 = 0;
      v77 = (uint64_t *)(v212[2 * k] + 8);
      do
      {
        if (!(v69 & 1 | (v72 < v73)))
        {
          v71 = k;
          v70 = v76;
        }
        v69 |= (v69 | (v72 < v73)) ^ 1;
        v78 = *v77;
        v77 += 7;
        v72 += v78;
        ++v76;
      }
      while (v75 != v76);
    }
  }
  if ((v69 & 1) == 0)
    goto LABEL_74;
  if (v71 == 2)
  {
    if (v150 == 2)
    {
      mrec_qsort_r<DiskNgramContextBiTriGroupTrigramsWithBigramsCmp>(v213 + 56 * v70, DWORD2(v213) - v70, 0x38uLL, 0);
    }
    else if (v150 == 1)
    {
      mrec_qsort_r<DiskNgramContextBiTriGroupTrigramsCmp>(v213 + 56 * v70, DWORD2(v213) - v70, 0x38uLL, 0);
    }
    if (a8 != 1)
      goto LABEL_74;
    v79 = v215;
    v80 = DWORD2(v215);
  }
  else
  {
    if (a8 != 1 || v71 != 4)
      goto LABEL_74;
    v79 = v215 + 56 * v70;
    v80 = DWORD2(v215) - v70;
  }
  mrec_qsort_r<DiskNgramContextQuadGroupCmp>(v79, v80, 0x38uLL, 0);
LABEL_74:
  if (v193)
  {
    MemChunkFree(v193, 0);
    v193 = 0;
  }
  v194 = 0;
  if (v191)
  {
    MemChunkFree(v191, 0);
    v191 = 0;
  }
  v192 = 0;
  writeObject((uint64_t)v140, &v174, &v207);
  v172 = 0;
  v173 = 0;
  v170 = 0;
  HIDWORD(v173) = realloc_array(0, &v170, 0xFA0uLL, 0, 0, 1) >> 2;
  v171 = 0;
  v172 = v170;
  v170 = 0;
  v168 = 0;
  HIDWORD(v171) = realloc_array(0, &v168, 0xFA0uLL, 0, 0, 1) >> 2;
  v169 = 0;
  v170 = v168;
  v168 = 0;
  v166 = 0;
  HIDWORD(v169) = realloc_array(0, &v166, 0xFA0uLL, 0, 0, 1) >> 2;
  v167 = 0;
  v168 = v166;
  v166 = 0;
  v164 = 0;
  HIDWORD(v167) = realloc_array(0, &v164, 0xFA0uLL, 0, 0, 1) >> 2;
  v165 = 0;
  v166 = v164;
  v164 = 0;
  v162 = 0;
  HIDWORD(v165) = realloc_array(0, &v162, 0xFA0uLL, 0, 0, 1) >> 2;
  v163 = 0;
  v164 = v162;
  v162 = 0;
  v160 = 0;
  HIDWORD(v163) = realloc_array(0, &v160, 0xFA0uLL, 0, 0, 1) >> 2;
  v161 = 0;
  v162 = v160;
  v160 = 0;
  v158 = 0;
  HIDWORD(v161) = realloc_array(0, &v158, 0xFA0uLL, 0, 0, 1) >> 2;
  v159 = 0;
  v160 = v158;
  v158 = 0;
  v156 = 0;
  v81 = realloc_array(0, &v156, 0x3E80uLL, 0, 0, 1);
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  HIDWORD(v159) = v81 >> 4;
  v157 = 0;
  v158 = v156;
  v156 = 0;
  v91 = 2;
  do
  {
    v142 = v91;
    v92 = (unint64_t)&v212[2 * v91];
    if (*(_DWORD *)(v92 + 8))
    {
      v93 = 0;
      v151 = (unsigned int *)(v92 | 8);
      v153 = &v212[2 * v91];
      do
      {
        v155 = v90;
        v94 = 1000 * v90;
        while (v94 >= v174 * (unint64_t)v173)
        {
          v95 = (*(uint64_t (**)(DgnStream *))(*(_QWORD *)v14 + 48))(v14);
          v96 = v173;
          if (v173 == (unint64_t)HIDWORD(v173))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v172, 1, 1);
            v96 = v173;
          }
          *((_DWORD *)v172 + v96) = v95;
          LODWORD(v173) = v173 + 1;
          v97 = v171;
          if (v171 == (unint64_t)HIDWORD(v171))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v170, 1, 1);
            v97 = v171;
          }
          *((_DWORD *)v170 + v97) = v89;
          LODWORD(v171) = v171 + 1;
          v98 = v169;
          if (v169 == (unint64_t)HIDWORD(v169))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v168, 1, 1);
            v98 = v169;
          }
          *((_DWORD *)v168 + v98) = v88;
          LODWORD(v169) = v169 + 1;
          v99 = v167;
          if (v167 == (unint64_t)HIDWORD(v167))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v166, 1, 1);
            v99 = v167;
          }
          *((_DWORD *)v166 + v99) = v87;
          LODWORD(v167) = v167 + 1;
          v100 = v165;
          if (v165 == (unint64_t)HIDWORD(v165))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v164, 1, 1);
            v100 = v165;
          }
          *((_DWORD *)v164 + v100) = v86;
          LODWORD(v165) = v165 + 1;
          v101 = v163;
          if (v163 == (unint64_t)HIDWORD(v163))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v162, 1, 1);
            v101 = v163;
          }
          *((_DWORD *)v162 + v101) = v85;
          LODWORD(v163) = v163 + 1;
          v102 = v161;
          if (v161 == (unint64_t)HIDWORD(v161))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v160, 1, 1);
            v102 = v161;
          }
          *((_DWORD *)v160 + v102) = v84;
          LODWORD(v161) = v161 + 1;
          v103 = v159;
          if (v159 == (unint64_t)HIDWORD(v159))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v158, 1, 1);
            v103 = v159;
          }
          v104 = (char *)v158 + 16 * v103;
          *v104 = 0;
          v104[1] = 0;
          DgnPrimArray<int>::copyArraySlice((unint64_t)v104, (uint64_t *)&v156, 0, v157);
          LODWORD(v159) = v159 + 1;
          LODWORD(v157) = 0;
        }
        v105 = *v153;
        v106 = *v153 + 56 * v93;
        v107 = *(_QWORD *)(v106 + 8);
        v108 = *(unsigned __int8 *)(v106 + 34);
        switch(v108)
        {
          case 2:
            v116 = (_DWORD *)(v105 + 56 * v93);
            v117 = v116[9];
            v146 = v116[10];
            v149 = v116[11];
            v118 = v117;
            if (v117 >> 29)
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8344, (uint64_t)"lm/wordlm", 86, (uint64_t)"%.500s %u", v82, v83, (char)"Bi1Id");
              v118 = *(_DWORD *)(*v153 + 56 * v93 + 36);
            }
            BigramData::savePersistentAndFillInNewBigramData(v143, (uint64_t)v14, &v208, (uint64_t)v206, (uint64_t)&v203, v118);
            v89 += v146;
            v88 += v149;
            v112 = v117 | 0x40000000;
            break;
          case 3:
            v113 = (unsigned int *)(v105 + 56 * v93);
            v148 = v113[12];
            v114 = v113[10];
            v145 = v113[11];
            v115 = v114;
            if (v114 >> 29)
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8362, (uint64_t)"lm/wordlm", 86, (uint64_t)"%.500s %u", v114, v83, (char)"Tri2Index");
              v105 = *v153;
              v115 = *(_DWORD *)(*v153 + 56 * v93 + 40);
            }
            TrigramData::savePersistentAndFillInNewTrigramData((TrigramData *)(v141 + 186), (uint64_t)v14, &v208, (uint64_t)v202, (uint64_t)&v199, *(_DWORD *)(v105 + 56 * v93 + 36), v115);
            v87 += v145;
            v86 += v148;
            v112 = v114 | 0x80000000;
            break;
          case 4:
            v109 = (unsigned int *)(v105 + 56 * v93);
            v147 = v109[12];
            v110 = v109[10];
            v144 = v109[11];
            v111 = v110;
            if (v110 >> 29)
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8381, (uint64_t)"lm/wordlm", 86, (uint64_t)"%.500s %u", v110, v83, (char)"Quad2Index");
              v105 = *v153;
              v111 = *(_DWORD *)(*v153 + 56 * v93 + 40);
            }
            QuadgramData::savePersistentAndFillInNewQuadgramData((QuadgramData *)(v141 + 308), (uint64_t)v14, &v208, (uint64_t)v198, (uint64_t)&v195, *(_DWORD *)(v105 + 56 * v93 + 36), v111);
            v85 += v144;
            v84 += v147;
            v112 = v110 | 0xA0000000;
            break;
          default:
            v112 = 0;
            break;
        }
        v119 = v157;
        if (v157 == (unint64_t)HIDWORD(v157))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v156, 1, 1);
          v119 = v157;
        }
        *((_DWORD *)v156 + v119) = v112;
        v90 = v107 + v155;
        LODWORD(v157) = v157 + 1;
        ++v93;
      }
      while (v93 < *v151);
    }
    v91 = v142 + 1;
  }
  while (v142 != 4);
  if (v173 <= 0x3E8)
  {
    do
    {
      v120 = (*(uint64_t (**)(DgnStream *))(*(_QWORD *)v14 + 48))(v14);
      v121 = v173;
      if (v173 == (unint64_t)HIDWORD(v173))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v172, 1, 1);
        v121 = v173;
      }
      *((_DWORD *)v172 + v121) = v120;
      LODWORD(v173) = v173 + 1;
      v122 = v171;
      if (v171 == (unint64_t)HIDWORD(v171))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v170, 1, 1);
        v122 = v171;
      }
      *((_DWORD *)v170 + v122) = v89;
      LODWORD(v171) = v171 + 1;
      v123 = v169;
      if (v169 == (unint64_t)HIDWORD(v169))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v168, 1, 1);
        v123 = v169;
      }
      *((_DWORD *)v168 + v123) = v88;
      LODWORD(v169) = v169 + 1;
      v124 = v167;
      if (v167 == (unint64_t)HIDWORD(v167))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v166, 1, 1);
        v124 = v167;
      }
      *((_DWORD *)v166 + v124) = v87;
      LODWORD(v167) = v167 + 1;
      v125 = v165;
      if (v165 == (unint64_t)HIDWORD(v165))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v164, 1, 1);
        v125 = v165;
      }
      *((_DWORD *)v164 + v125) = v86;
      LODWORD(v165) = v165 + 1;
      v126 = v163;
      if (v163 == (unint64_t)HIDWORD(v163))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v162, 1, 1);
        v126 = v163;
      }
      *((_DWORD *)v162 + v126) = v85;
      LODWORD(v163) = v163 + 1;
      v127 = v161;
      if (v161 == (unint64_t)HIDWORD(v161))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v160, 1, 1);
        v127 = v161;
      }
      *((_DWORD *)v160 + v127) = v84;
      LODWORD(v161) = v161 + 1;
      v128 = v159;
      if (v159 == (unint64_t)HIDWORD(v159))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v158, 1, 1);
        v128 = v159;
      }
      v129 = (char *)v158 + 16 * v128;
      *v129 = 0;
      v129[1] = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)v129, (uint64_t *)&v156, 0, v157);
      LODWORD(v159) = v159 + 1;
      LODWORD(v157) = 0;
    }
    while (v173 < 0x3E9);
  }
  v15 = v140;
  a1 = (unint64_t)v141;
  v16 = v138;
  v17 = v139;
  v18 = (*(uint64_t (**)(DgnStream *))(*(_QWORD *)v14 + 48))(v14);
  v209 = v173;
  writeObject((uint64_t)v14, &v209, &v208);
  writeObjectArray((uint64_t)v14, (uint64_t)v172, v173, &v208);
  v209 = v171;
  writeObject((uint64_t)v14, &v209, &v208);
  writeObjectArray((uint64_t)v14, (uint64_t)v170, v171, &v208);
  v209 = v169;
  writeObject((uint64_t)v14, &v209, &v208);
  writeObjectArray((uint64_t)v14, (uint64_t)v168, v169, &v208);
  v209 = v167;
  writeObject((uint64_t)v14, &v209, &v208);
  writeObjectArray((uint64_t)v14, (uint64_t)v166, v167, &v208);
  v209 = v165;
  writeObject((uint64_t)v14, &v209, &v208);
  writeObjectArray((uint64_t)v14, (uint64_t)v164, v165, &v208);
  v209 = v163;
  writeObject((uint64_t)v14, &v209, &v208);
  writeObjectArray((uint64_t)v14, (uint64_t)v162, v163, &v208);
  v209 = v161;
  writeObject((uint64_t)v14, &v209, &v208);
  writeObjectArray((uint64_t)v14, (uint64_t)v160, v161, &v208);
  if ((_DWORD)v159)
  {
    v130 = 0;
    v131 = 0;
    do
    {
      writeObject<unsigned int>((uint64_t)v14, (uint64_t)v158 + v130, &v208);
      ++v131;
      v130 += 16;
    }
    while (v131 < v159);
  }
  BigramData::saveBinary((BigramData *)v206, v140, &v207);
  if (v141[16] >= 3u)
  {
    TrigramData::saveBinary((TrigramData *)v202, v140, &v207);
    if (v141[16] >= 4u)
      QuadgramData::saveBinary((QuadgramData *)v198, v140, &v207);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v156);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v158);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v160);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v162);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v164);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v166);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v168);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v170);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v172);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v175);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v177);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v189);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v191);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v193);
  for (m = 64; m != -16; m -= 16)
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v210[m]);
  for (n = 8; n != -2; n -= 2)
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v212[n]);
  HuffmanEncoder<unsigned short,unsigned int>::~HuffmanEncoder((uint64_t)&v195);
  QuadgramData::~QuadgramData((QuadgramData *)v198);
  HuffmanEncoder<unsigned short,unsigned int>::~HuffmanEncoder((uint64_t)&v199);
  TrigramData::~TrigramData((TrigramData *)v202);
  HuffmanEncoder<unsigned short,unsigned int>::~HuffmanEncoder((uint64_t)&v203);
  BigramData::~BigramData((BigramData *)v206);
  a3 = v136;
  v12 = v137;
LABEL_146:
  writeObjectChecksum((uint64_t)v14, &v208);
  (*(void (**)(DgnStream *, uint64_t))(*(_QWORD *)v14 + 24))(v14, v16);
  LODWORD(v198[0]) = v208;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(_QWORD *)v14 + 80))(v14, v198, 4);
  LODWORD(v198[0]) = v207;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(_QWORD *)v14 + 80))(v14, v198, 4);
  LODWORD(v198[0]) = v18;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(_QWORD *)v14 + 80))(v14, v198, 4);
  writeObjectChecksum((uint64_t)v15, (int *)&v207);
  (*(void (**)(DgnStream *, uint64_t))(*(_QWORD *)v15 + 24))(v15, v17);
  LODWORD(v198[0]) = v208;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(_QWORD *)v15 + 80))(v15, v198, 4);
  LODWORD(v198[0]) = v207;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(_QWORD *)v15 + 80))(v15, v198, 4);
  LODWORD(v198[0]) = v18;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(_QWORD *)v15 + 80))(v15, v198, 4);
  (**(void (***)(DgnStream *))v14)(v14);
  MemChunkFree(v14, 0);
  (**(void (***)(DgnStream *))v15)(v15);
  MemChunkFree(v15, 0);
  *(_DWORD *)(a1 + 264) = v208;
  *(_DWORD *)(a1 + 268) = v207;
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(v12);
  DFileChecksums::addChecksum(a3, CurrentSubDirComponents, 0x72u, v208);
  v135 = DFile::getCurrentSubDirComponents(v12);
  DFileChecksums::addChecksum(a3, v135, 0x71u, v207);
}

void sub_20998F230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;
  uint64_t i;
  uint64_t j;

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a47);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a72);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&STACK[0x208]);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&STACK[0x218]);
  for (i = 64; i != -16; i -= 16)
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&STACK[0x970] + i);
  for (j = 64; j != -16; j -= 16)
    DgnIArray<Utterance *>::~DgnIArray(v72 - 192 + j);
  HuffmanEncoder<unsigned short,unsigned int>::~HuffmanEncoder((uint64_t)&STACK[0x228]);
  QuadgramData::~QuadgramData((QuadgramData *)&STACK[0x2B0]);
  HuffmanEncoder<unsigned short,unsigned int>::~HuffmanEncoder((uint64_t)&STACK[0x4E8]);
  TrigramData::~TrigramData((TrigramData *)&STACK[0x570]);
  HuffmanEncoder<unsigned short,unsigned int>::~HuffmanEncoder((uint64_t)&STACK[0x758]);
  BigramData::~BigramData((BigramData *)&STACK[0x7E0]);
  _Unwind_Resume(a1);
}

BOOL SubDirExtension::isString(SubDirExtension *this, const char **a2)
{
  const char *v4;
  const char *v5;
  _BOOL8 v6;
  const char *v8;
  int v9;

  DgnString::DgnString((DgnString *)&v8);
  SubDirExtension::appendToString(this, (DgnString *)&v8);
  if (v9)
    v4 = v8;
  else
    v4 = (const char *)&unk_209A7B4F4;
  if (*((_DWORD *)a2 + 2))
    v5 = *a2;
  else
    v5 = (const char *)&unk_209A7B4F4;
  v6 = strcmp(v4, v5) == 0;
  DgnString::~DgnString((DgnString *)&v8);
  return v6;
}

void sub_20998F474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  _Unwind_Resume(a1);
}

uint64_t WordLanguageModel::loadUnigramMembersBinary(WordLanguageModel *this, DgnStream *a2, unsigned int *a3, int a4, unint64_t *a5)
{
  _DWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  unsigned __int16 v16;
  _BYTE v17[16];
  _QWORD v18[2];

  v10 = (_DWORD *)((char *)this + 32);
  v11 = *((_DWORD *)this + 8);
  v18[0] = 0;
  v18[1] = 0;
  DgnString::DgnString((DgnString *)v17);
  v16 = 0;
  v15 = 0;
  readObject((uint64_t)a2, v10, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 26, a3);
  if (a4)
    readObject((uint64_t)a2, &v15, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 28, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 29, a3);
  if (a4)
  {
    readObject((uint64_t)a2, a5, a3);
    readObject((uint64_t)a2, &v16, a3);
    readObject<unsigned int>(a2, (uint64_t)v18, a3);
    readObject(a2, (BitArray *)v17, a3);
  }
  readObject<unsigned int>(a2, (uint64_t)this + 120, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 136, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 152, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 168, a3);
  if (*v10 != v11)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5130, (uint64_t)"lm/wordlm", 34, (uint64_t)"%u %u", v12, v13, *v10);
  BitArray::~BitArray((BitArray *)v17);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
}

void sub_20998F610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordLanguageModel::saveUnigramMembersBinary(WordLanguageModel *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (int *)this + 8, a3);
  writeObject((uint64_t)a2, (int *)this + 26, a3);
  writeObject((uint64_t)a2, (int *)this + 28, a3);
  writeObject((uint64_t)a2, (int *)this + 29, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 120, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 136, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 152, a3);
  return writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 168, a3);
}

void WordLanguageModel::loadBigramMembersBinary(WordLanguageModel *this, DgnStream *a2, unsigned int *a3, int a4, unint64_t *a5)
{
  double v10;
  unsigned __int16 v11;

  v11 = 0;
  v10 = 0.0;
  readObject((uint64_t)a2, (_DWORD *)this + 66, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 67, a3);
  if (a4)
  {
    readObject((uint64_t)a2, a5, a3);
    readObject((uint64_t)a2, &v11, a3);
    readObject((uint64_t)a2, (_DWORD *)this + 68, a3);
    readObject(a2, &v10, a3);
  }
  else
  {
    readObject((uint64_t)a2, (_DWORD *)this + 68, a3);
  }
  readObject((uint64_t)a2, (BOOL *)this + 276, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 280, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 296, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 312, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 328, a3);
  readObject<short>(a2, (uint64_t)this + 344, a3);
}

void WordLanguageModel::verifyBoWtForBiSc(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t i;

  v8 = *((unsigned int *)this + 140);
  if (v8 >= 2)
  {
    for (i = 1; i < v8; ++i)
    {
      if (*(_WORD *)(*((_QWORD *)this + 69) + 2 * i)
        && (i >= *((unsigned int *)this + 88) || *(_WORD *)(*((_QWORD *)this + 43) + 2 * i) == 20000))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6805, (uint64_t)"lm/wordlm", 42, (uint64_t)"%u", a7, a8, i);
        v8 = *((unsigned int *)this + 140);
      }
    }
  }
}

void WordLanguageModel::throwOnBadBoWt(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t i;
  BOOL v11;

  v8 = *((unsigned int *)this + 88);
  if (v8 >= 2)
  {
    for (i = 1; i < v8; ++i)
    {
      if (*(_WORD *)(*((_QWORD *)this + 43) + 2 * i))
        v11 = *(unsigned __int16 *)(*((_QWORD *)this + 43) + 2 * i) == 20000;
      else
        v11 = 1;
      if (!v11 && (i >= *((unsigned int *)this + 140) || !*(_WORD *)(*((_QWORD *)this + 69) + 2 * i)))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6819, (uint64_t)"lm/wordlm", 87, (uint64_t)"%u %d", a7, a8, i);
        v8 = *((unsigned int *)this + 88);
      }
    }
  }
}

void WordLanguageModel::verifyUniScForBiSc(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BigramData *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int SearchSuccIdForIndex;

  if (*((_DWORD *)this + 140) >= 2u)
  {
    v9 = (WordLanguageModel *)((char *)this + 360);
    v10 = *((_QWORD *)this + 69);
    v11 = 1;
    do
    {
      if (*(_WORD *)(v10 + 2 * v11))
      {
        if (*(_WORD *)(*((_QWORD *)this + 21) + 2 * v11) == 20000)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6831, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, v11);
        v10 = *((_QWORD *)this + 69);
        if (((*(_DWORD *)(*((_QWORD *)this + 48) + 4 * (v11 >> 5)) >> v11) & 1) != 0)
        {
          if (*(_WORD *)(v10 + 2 * v11))
          {
            v12 = 1;
            v13 = 1;
            do
            {
              v14 = (v12 + *(_DWORD *)(*((_QWORD *)this + 67) + 4 * v11) - 1);
              if (*((_DWORD *)this + 94))
              {
                v14 = *(unsigned __int8 *)(*((_QWORD *)this + 73) + v14);
                v15 = *((_QWORD *)this + 46);
              }
              else
              {
                v15 = *((_QWORD *)this + 71);
              }
              if (*(_WORD *)(v15 + 2 * v14) != 20000 && *(_WORD *)(*((_QWORD *)this + 21) + 2 * v13) == 20000)
              {
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6842, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, v12);
                v10 = *((_QWORD *)this + 69);
              }
              v12 = ++v13;
            }
            while (v13 <= *(unsigned __int16 *)(v10 + 2 * v11));
          }
        }
        else if (*(_WORD *)(v10 + 2 * v11))
        {
          v16 = 0;
          do
          {
            SearchSuccIdForIndex = BigramData::getSearchSuccIdForIndex(v9, v11, v16);
            if (BigramData::getSearchScoreForIndex(v9, v11, v16) != 20000
              && *(_WORD *)(*((_QWORD *)this + 21) + 2 * SearchSuccIdForIndex) == 20000)
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6857, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, SearchSuccIdForIndex);
            }
            ++v16;
            v10 = *((_QWORD *)this + 69);
          }
          while (v16 < *(unsigned __int16 *)(v10 + 2 * v11));
        }
      }
      ++v11;
    }
    while (v11 < *((unsigned int *)this + 140));
  }
}

uint64_t WordLanguageModel::throwOnBadTriBoWt(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t i;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];

  v21[0] = 0;
  v21[1] = 0;
  v20[0] = 0;
  v20[1] = 0;
  v19[0] = 0;
  v19[1] = 0;
  v8 = *((unsigned int *)this + 200);
  if (v8 < 2)
    goto LABEL_19;
  for (i = 1; i < v8; ++i)
  {
    v11 = *((_QWORD *)this + 99);
    v12 = *(unsigned __int16 *)(v11 + 2 * i);
    if (!*(_WORD *)(v11 + 2 * i))
      continue;
    v13 = 0;
    do
    {
      v14 = (*(_DWORD *)(*((_QWORD *)this + 101) + 4 * i) + v13);
      if (((*(_DWORD *)(*((_QWORD *)this + 109) + 4 * (v14 >> 5)) >> v14) & 1) == 0)
      {
        if (*(_WORD *)(*((_QWORD *)this + 130) + 2 * v14))
          goto LABEL_16;
LABEL_15:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6909, (uint64_t)"lm/wordlm", 88, (uint64_t)"%u %u %d", a7, a8, i);
        goto LABEL_16;
      }
      if (!*(_WORD *)(*((_QWORD *)this + 130) + 2 * v14))
        goto LABEL_15;
      v15 = 1;
      while (1)
      {
        v16 = *(_DWORD *)(*((_QWORD *)this + 128) + 4 * v14) + v15 - 1;
        if (*((_DWORD *)this + 196))
        {
          v16 = *(unsigned __int8 *)(*((_QWORD *)this + 134) + v16);
          v17 = *((_QWORD *)this + 97);
        }
        else
        {
          v17 = *((_QWORD *)this + 132);
        }
        if (*(_WORD *)(v17 + 2 * v16) != 20000)
          break;
        if (*(unsigned __int16 *)(*((_QWORD *)this + 130) + 2 * v14) < ++v15)
          goto LABEL_15;
      }
LABEL_16:
      ++v13;
    }
    while (v13 != v12);
    v8 = *((unsigned int *)this + 200);
  }
LABEL_19:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v21);
}

void sub_20998FCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void WordLanguageModel::verifyUniScForTriSc(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  TrigramData *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int SearchSuccIdForIndex;
  unint64_t v20;
  int v21;

  if (*((_DWORD *)this + 200) >= 2u)
  {
    v9 = (WordLanguageModel *)((char *)this + 744);
    v10 = 1;
    do
    {
      v21 = *(unsigned __int16 *)(*((_QWORD *)this + 99) + 2 * v10);
      if (*(_WORD *)(*((_QWORD *)this + 99) + 2 * v10))
      {
        if (*(_WORD *)(*((_QWORD *)this + 21) + 2 * v10) != 20000
          || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6923, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, v10), v21 = *(unsigned __int16 *)(*((_QWORD *)this + 99) + 2 * v10), *(_WORD *)(*((_QWORD *)this + 99) + 2 * v10)))
        {
          v11 = 0;
          v20 = v10;
          do
          {
            v12 = (*(_DWORD *)(*((_QWORD *)this + 101) + 4 * v10) + v11);
            if (*(_WORD *)(*((_QWORD *)this + 21)
                          + 2 * *(unsigned __int16 *)(*((_QWORD *)this + 103) + 2 * v12)) == 20000)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6935, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, *(_WORD *)(*((_QWORD *)this + 103) + 2 * v12));
            v13 = *(unsigned __int16 *)(*((_QWORD *)this + 130) + 2 * v12);
            if (((*(_DWORD *)(*((_QWORD *)this + 109) + 4 * (v12 >> 5)) >> v12) & 1) != 0)
            {
              if (*(_WORD *)(*((_QWORD *)this + 130) + 2 * v12))
              {
                v14 = 1;
                v15 = 1;
                do
                {
                  v16 = (v14 + *(_DWORD *)(*((_QWORD *)this + 128) + 4 * v12) - 1);
                  if (*((_DWORD *)this + 196))
                  {
                    v16 = *(unsigned __int8 *)(*((_QWORD *)this + 134) + v16);
                    v17 = *((_QWORD *)this + 97);
                  }
                  else
                  {
                    v17 = *((_QWORD *)this + 132);
                  }
                  if (*(_WORD *)(v17 + 2 * v16) != 20000 && *(_WORD *)(*((_QWORD *)this + 21) + 2 * v15) == 20000)
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6950, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, v14);
                  v14 = ++v15;
                }
                while (v15 <= v13);
              }
            }
            else if (*(_WORD *)(*((_QWORD *)this + 130) + 2 * v12))
            {
              v18 = 0;
              do
              {
                SearchSuccIdForIndex = TrigramData::getSearchSuccIdForIndex(v9, v12, v18);
                if (*(_WORD *)(*((_QWORD *)this + 21) + 2 * SearchSuccIdForIndex) == 20000)
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6964, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, SearchSuccIdForIndex);
                ++v18;
              }
              while (v13 != v18);
            }
            ++v11;
            v10 = v20;
          }
          while (v11 != v21);
        }
      }
      ++v10;
    }
    while (v10 < *((unsigned int *)this + 200));
  }
}

void WordLanguageModel::verifyUniScForQuadSc(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  QuadgramData *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int Quad3SuccIdForIndex;
  unint64_t v25;
  int v26;
  int v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;

  if (*((_DWORD *)this + 322) >= 2u)
  {
    v9 = (WordLanguageModel *)((char *)this + 1232);
    v34 = (char *)this + 1496;
    v28 = (char *)this + 1736;
    v29 = (char *)this + 1672;
    v30 = (char *)this + 1512;
    v10 = 1;
    do
    {
      v26 = *(unsigned __int16 *)(*((_QWORD *)this + 160) + 2 * v10);
      if (*(_WORD *)(*((_QWORD *)this + 160) + 2 * v10))
      {
        if (*(_WORD *)(*((_QWORD *)this + 21) + 2 * v10) != 20000
          || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6980, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, v10), v26 = *(unsigned __int16 *)(*((_QWORD *)this + 160) + 2 * v10), *(_WORD *)(*((_QWORD *)this + 160) + 2 * v10)))
        {
          v11 = 0;
          v25 = v10;
          do
          {
            v27 = v11;
            v12 = (*(_DWORD *)(*((_QWORD *)this + 162) + 4 * v10) + v11);
            if (*(_WORD *)(*((_QWORD *)this + 21)
                          + 2 * *(unsigned __int16 *)(*((_QWORD *)this + 164) + 2 * v12)) == 20000)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6991, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, *(_WORD *)(*((_QWORD *)this + 164) + 2 * v12));
            v31 = *(unsigned __int16 *)(*((_QWORD *)this + 166) + 2 * v12);
            if (*(_WORD *)(*((_QWORD *)this + 166) + 2 * v12))
            {
              v13 = 0;
              v33 = v12 >> 5;
              v32 = 1 << v12;
              do
              {
                v14 = *(unsigned int *)(*((_QWORD *)this + 185) + 4 * v12);
                v15 = *((_DWORD *)this + 308);
                v16 = *(_DWORD *)(*((_QWORD *)this + 185) + 4 * v12);
                v17 = v34;
                if (v15)
                {
                  v16 = *(_DWORD *)(*((_QWORD *)this + 185) + 4 * v12);
                  v17 = v34;
                  if ((*(_DWORD *)(*((_QWORD *)this + 168) + 4 * v33) & v32) != 0)
                  {
                    v16 = *(_DWORD *)(*((_QWORD *)this + 207) + 4 * v14);
                    v17 = v29;
                  }
                }
                v18 = *(unsigned __int16 *)(*v17 + 2 * (v16 + v13));
                if (*(_WORD *)(*((_QWORD *)this + 21) + 2 * v18) == 20000)
                {
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6999, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, v18);
                  LODWORD(v14) = *(_DWORD *)(*((_QWORD *)this + 185) + 4 * v12);
                  v15 = *((_DWORD *)this + 308);
                }
                if (v15 && (*(_DWORD *)(*((_QWORD *)this + 168) + 4 * v33) & v32) != 0)
                {
                  LODWORD(v14) = *(_DWORD *)(*((_QWORD *)this + 207) + 4 * v14);
                  v19 = (uint64_t *)v28;
                }
                else
                {
                  v19 = (uint64_t *)v30;
                }
                v20 = v14 + v13;
                v21 = *v19;
                v22 = *(unsigned __int16 *)(v21 + 2 * v20);
                if (*(_WORD *)(v21 + 2 * v20))
                {
                  v23 = 0;
                  do
                  {
                    if (QuadgramData::getScoreForIndex(v9, v12, v13, v23) != 20000)
                    {
                      Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex(v9, v12, v13, v23);
                      if (*(_WORD *)(*((_QWORD *)this + 21) + 2 * Quad3SuccIdForIndex) == 20000)
                        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 7015, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, Quad3SuccIdForIndex);
                    }
                    ++v23;
                  }
                  while (v22 != v23);
                }
                ++v13;
              }
              while (v13 != v31);
            }
            v11 = v27 + 1;
            v10 = v25;
          }
          while (v27 + 1 != v26);
        }
      }
      ++v10;
    }
    while (v10 < *((unsigned int *)this + 322));
  }
}

void WordLanguageModel::maybeRepairOutOfRangeWordIdsOrThrow(WordLanguageModel *this, int a2, int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;

  if (a4 != 0xFFFFFF && a5 != 0xFFFFFF)
  {
    v10 = *(unsigned int *)(*((_QWORD *)this + 2) + 388);
    if ((_DWORD)v10)
    {
      v13 = 0;
      v14 = a4;
      v15 = a5;
      while (1)
      {
        v16 = *((_QWORD *)this + 2);
        if (v13 >= *(unsigned int *)(v16 + 388) || !*(_BYTE *)(*(_QWORD *)(v16 + 104) + v13))
          goto LABEL_32;
        v17 = v13 < v14 || v13 > v15;
        v18 = !v17;
        if (v18 == a3)
          goto LABEL_32;
        if (a2)
        {
          WordLanguageModel::recordWordIdInvalidLmIdUsage(this, v13);
          if (*((_BYTE *)this + 276))
            WordLanguageModel::recordWordIdInvalidContextLmIdUsage(this, v13);
          goto LABEL_32;
        }
        if (*((_DWORD *)this + 32))
          break;
        if (*((_DWORD *)this + 36))
        {
          v19 = *(__int16 *)(*((_QWORD *)this + 17) + 2 * v13);
LABEL_23:
          if (v19 == -1)
            goto LABEL_25;
LABEL_24:
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10027, (uint64_t)"lm/wordlm", 90, (uint64_t)"%u", a7, a8, v13);
          goto LABEL_25;
        }
        if (*(unsigned __int8 *)(*((_QWORD *)this + 19) + v13) != 255)
          goto LABEL_24;
LABEL_25:
        if (*((_BYTE *)this + 276))
        {
          if (*((_DWORD *)this + 72))
          {
            v20 = *(_DWORD *)(*((_QWORD *)this + 35) + 4 * v13);
          }
          else
          {
            if (!*((_DWORD *)this + 76))
            {
              if (*(unsigned __int8 *)(*((_QWORD *)this + 39) + v13) == 255)
                goto LABEL_32;
LABEL_31:
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10034, (uint64_t)"lm/wordlm", 90, (uint64_t)"%u", a7, a8, v13);
              goto LABEL_32;
            }
            v20 = *(__int16 *)(*((_QWORD *)this + 37) + 2 * v13);
          }
          if (v20 != -1)
            goto LABEL_31;
        }
LABEL_32:
        if (v10 == ++v13)
          return;
      }
      v19 = *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v13);
      goto LABEL_23;
    }
  }
}

uint64_t WordLanguageModel::saveBigramMembersBinary(WordLanguageModel *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (int *)this + 66, a3);
  writeObject((uint64_t)a2, (int *)this + 67, a3);
  writeObject((uint64_t)a2, (int *)this + 68, a3);
  writeObject((uint64_t)a2, (unsigned __int8 *)this + 276, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 280, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 296, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 312, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 328, a3);
  return writeObject<short>((uint64_t)a2, (uint64_t)this + 344, a3);
}

uint64_t WordLanguageModel::recordWordIdLmIdUsage(WordLanguageModel *this, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int i;

  if (!*((_DWORD *)this + 32) && !*((_DWORD *)this + 36) && !*((_DWORD *)this + 40))
  {
    if (*((_DWORD *)this + 41))
    {
      v6 = 0;
    }
    else
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 152, 1, 1);
      v6 = *((unsigned int *)this + 40);
    }
    *(_BYTE *)(*((_QWORD *)this + 19) + v6) = -1;
    ++*((_DWORD *)this + 40);
  }
  result = WordLanguageModel::maybeUncompactWordIdToLmIdArray((uint64_t)this, a3);
  v8 = *((_DWORD *)this + 32);
  if (v8)
  {
    if (v8 <= a2)
    {
      do
      {
        if (v8 == *((_DWORD *)this + 33))
        {
          result = DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 120, 1, 1);
          v8 = *((_DWORD *)this + 32);
        }
        v9 = *((_QWORD *)this + 15);
        *(_DWORD *)(v9 + 4 * v8) = -1;
        v8 = *((_DWORD *)this + 32) + 1;
        *((_DWORD *)this + 32) = v8;
      }
      while (v8 <= a2);
    }
    else
    {
      v9 = *((_QWORD *)this + 15);
    }
    *(_DWORD *)(v9 + 4 * a2) = a3;
  }
  else
  {
    v10 = *((_DWORD *)this + 36);
    if (v10)
    {
      if (v10 <= a2)
      {
        do
        {
          if (v10 == *((_DWORD *)this + 37))
          {
            result = DgnPrimArray<short>::reallocElts((uint64_t)this + 136, 1, 1);
            v10 = *((_DWORD *)this + 36);
          }
          v11 = *((_QWORD *)this + 17);
          *(_WORD *)(v11 + 2 * v10++) = -1;
          *((_DWORD *)this + 36) = v10;
        }
        while (v10 <= a2);
      }
      else
      {
        v11 = *((_QWORD *)this + 17);
      }
      *(_WORD *)(v11 + 2 * a2) = a3;
    }
    else
    {
      for (i = *((_DWORD *)this + 40); i <= a2; *((_DWORD *)this + 40) = i)
      {
        if (i == *((_DWORD *)this + 41))
        {
          result = DgnPrimArray<char>::reallocElts((uint64_t)this + 152, 1, 1);
          i = *((_DWORD *)this + 40);
        }
        *(_BYTE *)(*((_QWORD *)this + 19) + i) = -1;
        i = *((_DWORD *)this + 40) + 1;
      }
      *(_BYTE *)(*((_QWORD *)this + 19) + a2) = a3;
    }
  }
  return result;
}

uint64_t WordLanguageModel::recordWordIdContextLmIdUsage(WordLanguageModel *this, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int i;

  if (!*((_DWORD *)this + 72) && !*((_DWORD *)this + 76) && !*((_DWORD *)this + 80))
  {
    if (*((_DWORD *)this + 81))
    {
      v6 = 0;
    }
    else
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 312, 1, 1);
      v6 = *((unsigned int *)this + 80);
    }
    *(_BYTE *)(*((_QWORD *)this + 39) + v6) = -1;
    ++*((_DWORD *)this + 80);
  }
  result = WordLanguageModel::maybeUncompactWordIdToContextLmIdArray((uint64_t)this, a3);
  v8 = *((_DWORD *)this + 72);
  if (v8)
  {
    if (v8 <= a2)
    {
      do
      {
        if (v8 == *((_DWORD *)this + 73))
        {
          result = DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 280, 1, 1);
          v8 = *((_DWORD *)this + 72);
        }
        v9 = *((_QWORD *)this + 35);
        *(_DWORD *)(v9 + 4 * v8) = -1;
        v8 = *((_DWORD *)this + 72) + 1;
        *((_DWORD *)this + 72) = v8;
      }
      while (v8 <= a2);
    }
    else
    {
      v9 = *((_QWORD *)this + 35);
    }
    *(_DWORD *)(v9 + 4 * a2) = a3;
  }
  else
  {
    v10 = *((_DWORD *)this + 76);
    if (v10)
    {
      if (v10 <= a2)
      {
        do
        {
          if (v10 == *((_DWORD *)this + 77))
          {
            result = DgnPrimArray<short>::reallocElts((uint64_t)this + 296, 1, 1);
            v10 = *((_DWORD *)this + 76);
          }
          v11 = *((_QWORD *)this + 37);
          *(_WORD *)(v11 + 2 * v10++) = -1;
          *((_DWORD *)this + 76) = v10;
        }
        while (v10 <= a2);
      }
      else
      {
        v11 = *((_QWORD *)this + 37);
      }
      *(_WORD *)(v11 + 2 * a2) = a3;
    }
    else
    {
      for (i = *((_DWORD *)this + 80); i <= a2; *((_DWORD *)this + 80) = i)
      {
        if (i == *((_DWORD *)this + 81))
        {
          result = DgnPrimArray<char>::reallocElts((uint64_t)this + 312, 1, 1);
          i = *((_DWORD *)this + 80);
        }
        *(_BYTE *)(*((_QWORD *)this + 39) + i) = -1;
        i = *((_DWORD *)this + 80) + 1;
      }
      *(_BYTE *)(*((_QWORD *)this + 39) + a2) = a3;
    }
  }
  return result;
}

_DWORD *WordLanguageModel::recordWordIdInvalidLmIdUsage(_DWORD *this, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int i;
  uint64_t v9;

  v3 = (uint64_t)this;
  v4 = this[32];
  if (v4
    || !this[36]
    && !this[40]
    && (!this[41]
      ? (this = (_DWORD *)DgnPrimArray<char>::reallocElts((uint64_t)(this + 38), 1, 1), v9 = *(unsigned int *)(v3 + 160))
      : (v9 = 0),
        *(_BYTE *)(*(_QWORD *)(v3 + 152) + v9) = -1,
        ++*(_DWORD *)(v3 + 160),
        (v4 = *(_DWORD *)(v3 + 128)) != 0))
  {
    if (v4 <= a2)
    {
      do
      {
        if (v4 == *(_DWORD *)(v3 + 132))
        {
          this = (_DWORD *)DgnPrimArray<unsigned int>::reallocElts(v3 + 120, 1, 1);
          v4 = *(_DWORD *)(v3 + 128);
        }
        v5 = *(_QWORD *)(v3 + 120);
        *(_DWORD *)(v5 + 4 * v4) = -1;
        v4 = *(_DWORD *)(v3 + 128) + 1;
        *(_DWORD *)(v3 + 128) = v4;
      }
      while (v4 <= a2);
    }
    else
    {
      v5 = *(_QWORD *)(v3 + 120);
    }
    *(_DWORD *)(v5 + 4 * a2) = -1;
  }
  else
  {
    v6 = *(_DWORD *)(v3 + 144);
    if (v6)
    {
      if (v6 <= a2)
      {
        do
        {
          if (v6 == *(_DWORD *)(v3 + 148))
          {
            this = (_DWORD *)DgnPrimArray<short>::reallocElts(v3 + 136, 1, 1);
            v6 = *(_DWORD *)(v3 + 144);
          }
          v7 = *(_QWORD *)(v3 + 136);
          *(_WORD *)(v7 + 2 * v6++) = -1;
          *(_DWORD *)(v3 + 144) = v6;
        }
        while (v6 <= a2);
      }
      else
      {
        v7 = *(_QWORD *)(v3 + 136);
      }
      *(_WORD *)(v7 + 2 * a2) = -1;
    }
    else
    {
      for (i = *(_DWORD *)(v3 + 160); i <= a2; *(_DWORD *)(v3 + 160) = i)
      {
        if (i == *(_DWORD *)(v3 + 164))
        {
          this = (_DWORD *)DgnPrimArray<char>::reallocElts(v3 + 152, 1, 1);
          i = *(_DWORD *)(v3 + 160);
        }
        *(_BYTE *)(*(_QWORD *)(v3 + 152) + i) = -1;
        i = *(_DWORD *)(v3 + 160) + 1;
      }
      *(_BYTE *)(*(_QWORD *)(v3 + 152) + a2) = -1;
    }
  }
  return this;
}

_DWORD *WordLanguageModel::recordWordIdInvalidContextLmIdUsage(_DWORD *this, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int i;
  uint64_t v9;

  v3 = (uint64_t)this;
  v4 = this[72];
  if (v4
    || !this[76]
    && !this[80]
    && (!this[81]
      ? (this = (_DWORD *)DgnPrimArray<char>::reallocElts((uint64_t)(this + 78), 1, 1), v9 = *(unsigned int *)(v3 + 320))
      : (v9 = 0),
        *(_BYTE *)(*(_QWORD *)(v3 + 312) + v9) = -1,
        ++*(_DWORD *)(v3 + 320),
        (v4 = *(_DWORD *)(v3 + 288)) != 0))
  {
    if (v4 <= a2)
    {
      do
      {
        if (v4 == *(_DWORD *)(v3 + 292))
        {
          this = (_DWORD *)DgnPrimArray<unsigned int>::reallocElts(v3 + 280, 1, 1);
          v4 = *(_DWORD *)(v3 + 288);
        }
        v5 = *(_QWORD *)(v3 + 280);
        *(_DWORD *)(v5 + 4 * v4) = -1;
        v4 = *(_DWORD *)(v3 + 288) + 1;
        *(_DWORD *)(v3 + 288) = v4;
      }
      while (v4 <= a2);
    }
    else
    {
      v5 = *(_QWORD *)(v3 + 280);
    }
    *(_DWORD *)(v5 + 4 * a2) = -1;
  }
  else
  {
    v6 = *(_DWORD *)(v3 + 304);
    if (v6)
    {
      if (v6 <= a2)
      {
        do
        {
          if (v6 == *(_DWORD *)(v3 + 308))
          {
            this = (_DWORD *)DgnPrimArray<short>::reallocElts(v3 + 296, 1, 1);
            v6 = *(_DWORD *)(v3 + 304);
          }
          v7 = *(_QWORD *)(v3 + 296);
          *(_WORD *)(v7 + 2 * v6++) = -1;
          *(_DWORD *)(v3 + 304) = v6;
        }
        while (v6 <= a2);
      }
      else
      {
        v7 = *(_QWORD *)(v3 + 296);
      }
      *(_WORD *)(v7 + 2 * a2) = -1;
    }
    else
    {
      for (i = *(_DWORD *)(v3 + 320); i <= a2; *(_DWORD *)(v3 + 320) = i)
      {
        if (i == *(_DWORD *)(v3 + 324))
        {
          this = (_DWORD *)DgnPrimArray<char>::reallocElts(v3 + 312, 1, 1);
          i = *(_DWORD *)(v3 + 320);
        }
        *(_BYTE *)(*(_QWORD *)(v3 + 312) + i) = -1;
        i = *(_DWORD *)(v3 + 320) + 1;
      }
      *(_BYTE *)(*(_QWORD *)(v3 + 312) + a2) = -1;
    }
  }
  return this;
}

unint64_t WordLanguageModel::constructLmIdToWordIdMapping(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  v5 = result;
  v6 = *(_DWORD *)(result + 104);
  v7 = *(_DWORD *)(a2 + 12);
  v8 = v6;
  if (v6 > v7)
  {
    result = DgnPrimArray<unsigned int>::reallocElts(a2, v6 - v7, 0);
    v8 = *(_DWORD *)(v5 + 104);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if (*(_BYTE *)(v5 + 276))
  {
    v9 = *(_DWORD *)(a3 + 12);
    v10 = v8;
    if (v8 > v9)
    {
      result = DgnPrimArray<unsigned int>::reallocElts(a3, v8 - v9, 0);
      v10 = *(_DWORD *)(v5 + 104);
    }
    *(_DWORD *)(a3 + 8) = v8;
    v8 = v10;
  }
  if (v8)
  {
    v11 = 0;
    v12 = *(_QWORD *)a2;
    v13 = *(unsigned __int8 *)(v5 + 276);
    do
    {
      *(_DWORD *)(v12 + 4 * v11) = 0xFFFFFF;
      if (v13)
        *(_DWORD *)(*(_QWORD *)a3 + 4 * v11) = 0xFFFFFF;
      ++v11;
    }
    while (v11 < *(unsigned int *)(v5 + 104));
  }
  v14 = *(_DWORD *)(v5 + 128);
  if (v14 || (v14 = *(_DWORD *)(v5 + 144)) != 0 || (v14 = *(_DWORD *)(v5 + 160)) != 0)
  {
    v15 = 0;
    v16 = *(_QWORD *)(v5 + 16);
    do
    {
      if (v15 < *(unsigned int *)(v16 + 388)
        && *(_BYTE *)(*(_QWORD *)(v16 + 104) + v15)
        && v15 == *(_DWORD *)(*(_QWORD *)(v16 + 256) + 4 * v15))
      {
        if (*(_DWORD *)(v5 + 128))
        {
          v17 = *(_DWORD *)(*(_QWORD *)(v5 + 120) + 4 * v15);
        }
        else
        {
          if (*(_DWORD *)(v5 + 144))
          {
            v17 = *(unsigned __int16 *)(*(_QWORD *)(v5 + 136) + 2 * v15);
            v18 = v17 == 0xFFFF;
          }
          else
          {
            v17 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 152) + v15);
            v18 = v17 == 255;
          }
          if (v18)
            v17 = -1;
        }
        if (v17 < *(_DWORD *)(v5 + 104) && *(_DWORD *)(*(_QWORD *)a2 + 4 * v17) == 0xFFFFFF)
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v17) = v15;
        if (*(_BYTE *)(v5 + 276))
        {
          if (*(_DWORD *)(v5 + 288))
          {
            v19 = *(_DWORD *)(*(_QWORD *)(v5 + 280) + 4 * v15);
          }
          else
          {
            if (*(_DWORD *)(v5 + 304))
            {
              v19 = *(unsigned __int16 *)(*(_QWORD *)(v5 + 296) + 2 * v15);
              v20 = v19 == 0xFFFF;
            }
            else
            {
              v19 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 312) + v15);
              v20 = v19 == 255;
            }
            if (v20)
              v19 = -1;
          }
          if (v19 < *(_DWORD *)(v5 + 104) && *(_DWORD *)(*(_QWORD *)a3 + 4 * v19) == 0xFFFFFF)
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v19) = v15;
        }
      }
      ++v15;
    }
    while (v14 != v15);
  }
  v21 = *(unsigned int *)(v5 + 112);
  if ((_DWORD)v21 != -1 && *(_DWORD *)(*(_QWORD *)a2 + 4 * v21) == 0xFFFFFF)
  {
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v21) = 16777214;
    if (*(_BYTE *)(v5 + 276))
      *(_DWORD *)(*(_QWORD *)a3 + 4 * *(unsigned int *)(v5 + 112)) = 16777214;
  }
  v22 = *(unsigned int *)(v5 + 116);
  if ((_DWORD)v22 != -1 && *(_DWORD *)(*(_QWORD *)a2 + 4 * v22) == 0xFFFFFF)
  {
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v22) = 16777213;
    if (*(_BYTE *)(v5 + 276))
      *(_DWORD *)(*(_QWORD *)a3 + 4 * *(unsigned int *)(v5 + 116)) = 16777213;
  }
  return result;
}

unint64_t WordLanguageModel::getWordIdWithMapping(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2 == -1)
    return 0xFFFFFFLL;
  if (a2 == -2)
    return 16777212;
  if (a3 && *(_BYTE *)(a1 + 276))
  {
    if (*(_DWORD *)(a5 + 8) > a2)
      return *(unsigned int *)(*(_QWORD *)a5 + 4 * a2);
    a3 = 1;
  }
  else if (*(_DWORD *)(a4 + 8) > a2)
  {
    v5 = *(unsigned int *)(*(_QWORD *)a4 + 4 * a2);
    if ((_DWORD)v5 == 16777214 && (a3 & 1) == 0)
    {
      if (*(_DWORD *)(a1 + 112) == *(_DWORD *)(a1 + 116))
        return 16777213;
      else
        return 16777214;
    }
    return v5;
  }
  return WordLanguageModel::getWordId((WordLanguageModel *)a1, a2, a3);
}

uint64_t mrec_qsort_r<DiskNgramContextBiTriIsolatedCmp>(uint64_t result, unint64_t a2, unint64_t a3, const void *a4)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  DiskNgramContextBiTriIsolatedCmp *v13;
  int v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  char *v18;
  char *v19;
  DiskNgramContextBiTriIsolatedCmp *v20;
  int v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  char *v25;
  DiskNgramContextBiTriIsolatedCmp *v26;
  int v27;
  const void *v28;
  DiskNgramContextBiTriIsolatedCmp *v29;
  int v30;
  const void *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char v38;
  int v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  int64_t v59;
  char *v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  BOOL v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  int v78;
  char *v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char *v105;
  _BOOL4 v106;
  char *v107;
  BOOL v108;
  int v109;

  v5 = a2;
  v6 = (char *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v108 = ((result | a3) & 7) == 0;
  v109 = v8;
  if (a2 < 7)
  {
LABEL_118:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v79 = &v6[v5 * a3];
      v80 = &v6[a3];
      v81 = v6;
      do
      {
        if (v80 > v6)
        {
          v82 = v81;
          v83 = (uint64_t *)v80;
          do
          {
            v84 = v83;
            v83 = (uint64_t *)((char *)v83 + v7);
            result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v83, v84, a4);
            if ((int)result < 1)
              break;
            if (v109)
            {
              if (v108)
              {
                v85 = 0;
                v86 = (uint64_t)v82 + a3;
                do
                {
                  v87 = *(_QWORD *)(v86 + 8 * v85);
                  *(_QWORD *)(v86 + 8 * v85) = v82[v85];
                  v82[v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                v89 = 0;
                v90 = (uint64_t)v82 + a3;
                do
                {
                  v91 = *(_BYTE *)(v90 + v89);
                  *(_BYTE *)(v90 + v89) = *((_BYTE *)v82 + v89);
                  *((_BYTE *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              v88 = *v84;
              *v84 = *v83;
              *v83 = v88;
            }
            v82 = (_QWORD *)((char *)v82 + v7);
          }
          while (v83 > (uint64_t *)v6);
        }
        v80 += a3;
        v81 = (_QWORD *)((char *)v81 + a3);
      }
      while (v80 < v79);
    }
    return result;
  }
  v106 = a3 != 8;
  v9 = a3 >> 3;
  while (1)
  {
    v10 = &v6[(v5 >> 1) * a3];
    if (v5 == 7)
      goto LABEL_45;
    v11 = &v6[(v5 - 1) * a3];
    if (v5 >= 0x29)
    {
      v105 = &v6[(v5 - 1) * a3];
      v12 = (v5 >> 3) * a3;
      v13 = (DiskNgramContextBiTriIsolatedCmp *)DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v6, &v6[v12], a4);
      v14 = (int)v13;
      v107 = &v6[v12];
      v16 = DiskNgramContextBiTriIsolatedCmp::compareElements(v13, &v6[v12], &v6[2 * v12], v15);
      if (v14 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          v16 = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)v16, v6, &v6[2 * v12], v17);
          if ((int)v16 >= 0)
            v18 = v6;
          else
            v18 = &v6[2 * v12];
          goto LABEL_18;
        }
      }
      else if ((int)v16 <= 0)
      {
        v16 = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)v16, v6, &v6[2 * v12], v17);
        if ((int)v16 >= 0)
          v18 = &v6[2 * v12];
        else
          v18 = v6;
LABEL_18:
        v107 = v18;
      }
      v20 = (DiskNgramContextBiTriIsolatedCmp *)DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)v16, &v10[-v12], &v6[(v5 >> 1) * a3], v17);
      v21 = (int)v20;
      v23 = DiskNgramContextBiTriIsolatedCmp::compareElements(v20, &v6[(v5 >> 1) * a3], &v10[v12], v22);
      if (v21 < 0)
      {
        if ((v23 & 0x80000000) == 0)
        {
          v23 = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)v23, &v10[-v12], &v10[v12], v24);
          if ((int)v23 >= 0)
            v10 -= v12;
          else
            v10 += v12;
        }
      }
      else if ((int)v23 <= 0)
      {
        v23 = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)v23, &v10[-v12], &v10[v12], v24);
        if ((int)v23 >= 0)
          v10 += v12;
        else
          v10 -= v12;
      }
      v25 = &v105[-2 * v12];
      v11 = &v105[-v12];
      v26 = (DiskNgramContextBiTriIsolatedCmp *)DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)v23, v25, &v105[-v12], v24);
      v27 = (int)v26;
      result = DiskNgramContextBiTriIsolatedCmp::compareElements(v26, &v105[-v12], v105, v28);
      if (v27 < 0)
      {
        v19 = v107;
        if ((result & 0x80000000) == 0)
        {
          v11 = &v6[(v5 - 1) * a3];
          result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v25, v105, a4);
          if ((int)result >= 0)
            v11 = v25;
        }
      }
      else
      {
        v19 = v107;
        if ((int)result <= 0)
        {
          v11 = &v6[(v5 - 1) * a3];
          result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v25, v105, a4);
          if ((int)result < 0)
            v11 = v25;
        }
      }
      goto LABEL_36;
    }
    v19 = v6;
LABEL_36:
    v29 = (DiskNgramContextBiTriIsolatedCmp *)DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v19, v10, a4);
    v30 = (int)v29;
    result = DiskNgramContextBiTriIsolatedCmp::compareElements(v29, v10, v11, v31);
    if (v30 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v19, v11, a4);
        if ((int)result >= 0)
          v10 = v19;
        else
          v10 = v11;
      }
    }
    else if ((int)result <= 0)
    {
      result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v19, v11, a4);
      if ((int)result >= 0)
        v10 = v11;
      else
        v10 = v19;
    }
LABEL_45:
    if (v109)
    {
      if (v108)
      {
        v32 = v6;
        v33 = a3 >> 3;
        do
        {
          v34 = *(_QWORD *)v32;
          *(_QWORD *)v32 = *(_QWORD *)v10;
          v32 += 8;
          *(_QWORD *)v10 = v34;
          v10 += 8;
          --v33;
        }
        while (v33);
      }
      else
      {
        v36 = a3;
        v37 = v6;
        do
        {
          v38 = *v37;
          *v37++ = *v10;
          *v10++ = v38;
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      v35 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v35;
    }
    v39 = 0;
    v40 = &v6[a3];
    v41 = &v6[(v5 - 1) * a3];
    v42 = v41;
    v43 = &v6[a3];
LABEL_54:
    while (v43 <= v42)
    {
      result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v43, v6, a4);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v109)
        {
          if (v108)
          {
            v44 = 0;
            do
            {
              v45 = *(_QWORD *)&v40[8 * v44];
              *(_QWORD *)&v40[8 * v44] = *(_QWORD *)&v43[8 * v44];
              *(_QWORD *)&v43[8 * v44++] = v45;
            }
            while (v9 != v44);
          }
          else
          {
            v54 = 0;
            do
            {
              v55 = v40[v54];
              v40[v54] = v43[v54];
              v43[v54++] = v55;
            }
            while (a3 != v54);
          }
        }
        else
        {
          v53 = *(_QWORD *)v40;
          *(_QWORD *)v40 = *(_QWORD *)v43;
          *(_QWORD *)v43 = v53;
        }
        v40 += a3;
        v39 = 1;
      }
      v43 += a3;
    }
    while (v43 <= v42)
    {
      result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v42, v6, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v109)
        {
          if (v108)
          {
            v51 = 0;
            do
            {
              v52 = *(_QWORD *)&v43[8 * v51];
              *(_QWORD *)&v43[8 * v51] = *(_QWORD *)&v42[8 * v51];
              *(_QWORD *)&v42[8 * v51++] = v52;
            }
            while (v9 != v51);
          }
          else
          {
            v57 = 0;
            do
            {
              v58 = v43[v57];
              v43[v57] = v42[v57];
              v42[v57++] = v58;
            }
            while (a3 != v57);
          }
        }
        else
        {
          v56 = *(_QWORD *)v43;
          *(_QWORD *)v43 = *(_QWORD *)v42;
          *(_QWORD *)v42 = v56;
        }
        v43 += a3;
        v42 += v7;
        v39 = 1;
        goto LABEL_54;
      }
      if (!(_DWORD)result)
      {
        if (v109)
        {
          if (v108)
          {
            v46 = 0;
            do
            {
              v47 = *(_QWORD *)&v42[8 * v46];
              *(_QWORD *)&v42[8 * v46] = *(_QWORD *)&v41[8 * v46];
              *(_QWORD *)&v41[8 * v46++] = v47;
            }
            while (v9 != v46);
          }
          else
          {
            v49 = 0;
            do
            {
              v50 = v42[v49];
              v42[v49] = v41[v49];
              v41[v49++] = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          v48 = *(_QWORD *)v42;
          *(_QWORD *)v42 = *(_QWORD *)v41;
          *(_QWORD *)v41 = v48;
        }
        v41 += v7;
        v39 = 1;
      }
      v42 += v7;
    }
    v59 = v5 * a3;
    v60 = &v6[v5 * a3];
    if (!v39)
      break;
    v61 = v43 - v40;
    if (v40 - v6 >= v43 - v40)
      v62 = v43 - v40;
    else
      v62 = v40 - v6;
    if (v62)
    {
      if (v108)
      {
        v63 = &v43[-v62];
        v64 = v62 >> 3;
        v65 = v6;
        do
        {
          v66 = *(_QWORD *)v65;
          *(_QWORD *)v65 = *(_QWORD *)v63;
          v65 += 8;
          *(_QWORD *)v63 = v66;
          v63 += 8;
          --v64;
        }
        while (v64);
      }
      else
      {
        v67 = -(uint64_t)v62;
        v68 = v6;
        do
        {
          v69 = *v68;
          *v68++ = v43[v67];
          v43[v67] = v69;
          v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    v71 = v41 - v42;
    if (v41 - v42 >= v60 - &v41[a3])
      v72 = v60 - &v41[a3];
    else
      v72 = v41 - v42;
    if (v72)
    {
      if (v108)
      {
        v73 = &v60[-v72];
        v74 = v72 >> 3;
        do
        {
          v75 = *(_QWORD *)v43;
          *(_QWORD *)v43 = *(_QWORD *)v73;
          v43 += 8;
          *(_QWORD *)v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        v76 = -(uint64_t)v72;
        do
        {
          v77 = *v43;
          *v43++ = v60[v76];
          v60[v76] = v77;
          v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3)
      result = mrec_qsort_r<DiskNgramContextBiTriIsolatedCmp>(v6, v61 / a3, a3, a4);
    if (v71 <= (uint64_t)a3)
      return result;
    v6 = &v60[-v71];
    v5 = v71 / a3;
    v78 = v106;
    if (((v6 | a3) & 7) != 0)
      v78 = 2;
    v108 = ((v6 | a3) & 7) == 0;
    v109 = v78;
    if (v5 < 7)
      goto LABEL_118;
  }
  v92 = &v6[a3];
  if (v59 > (uint64_t)a3)
  {
    v93 = v6;
    do
    {
      if (v92 > v6)
      {
        v94 = v93;
        v95 = (uint64_t *)v92;
        do
        {
          v96 = v95;
          v95 = (uint64_t *)((char *)v95 + v7);
          result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v95, v96, a4);
          if ((int)result < 1)
            break;
          if (v109)
          {
            if (v108)
            {
              v97 = 0;
              v98 = (uint64_t)v94 + a3;
              do
              {
                v99 = *(_QWORD *)(v98 + 8 * v97);
                *(_QWORD *)(v98 + 8 * v97) = v94[v97];
                v94[v97++] = v99;
              }
              while (v9 != v97);
            }
            else
            {
              v101 = 0;
              v102 = (uint64_t)v94 + a3;
              do
              {
                v103 = *(_BYTE *)(v102 + v101);
                *(_BYTE *)(v102 + v101) = *((_BYTE *)v94 + v101);
                *((_BYTE *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            v100 = *v96;
            *v96 = *v95;
            *v95 = v100;
          }
          v94 = (_QWORD *)((char *)v94 + v7);
        }
        while (v95 > (uint64_t *)v6);
      }
      v92 += a3;
      v93 = (_QWORD *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

uint64_t mrec_qsort_r<DiskNgramContextQuadIsolatedCmp>(uint64_t result, unint64_t a2, unint64_t a3, const void *a4)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  DiskNgramContextQuadIsolatedCmp *v13;
  int v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  char *v18;
  char *v19;
  DiskNgramContextQuadIsolatedCmp *v20;
  int v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  char *v25;
  DiskNgramContextQuadIsolatedCmp *v26;
  int v27;
  const void *v28;
  DiskNgramContextQuadIsolatedCmp *v29;
  int v30;
  const void *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char v38;
  int v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  int64_t v59;
  char *v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  BOOL v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  int v78;
  char *v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char *v105;
  _BOOL4 v106;
  char *v107;
  BOOL v108;
  int v109;

  v5 = a2;
  v6 = (char *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v108 = ((result | a3) & 7) == 0;
  v109 = v8;
  if (a2 < 7)
  {
LABEL_118:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v79 = &v6[v5 * a3];
      v80 = &v6[a3];
      v81 = v6;
      do
      {
        if (v80 > v6)
        {
          v82 = v81;
          v83 = (uint64_t *)v80;
          do
          {
            v84 = v83;
            v83 = (uint64_t *)((char *)v83 + v7);
            result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v83, v84, a4);
            if ((int)result < 1)
              break;
            if (v109)
            {
              if (v108)
              {
                v85 = 0;
                v86 = (uint64_t)v82 + a3;
                do
                {
                  v87 = *(_QWORD *)(v86 + 8 * v85);
                  *(_QWORD *)(v86 + 8 * v85) = v82[v85];
                  v82[v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                v89 = 0;
                v90 = (uint64_t)v82 + a3;
                do
                {
                  v91 = *(_BYTE *)(v90 + v89);
                  *(_BYTE *)(v90 + v89) = *((_BYTE *)v82 + v89);
                  *((_BYTE *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              v88 = *v84;
              *v84 = *v83;
              *v83 = v88;
            }
            v82 = (_QWORD *)((char *)v82 + v7);
          }
          while (v83 > (uint64_t *)v6);
        }
        v80 += a3;
        v81 = (_QWORD *)((char *)v81 + a3);
      }
      while (v80 < v79);
    }
    return result;
  }
  v106 = a3 != 8;
  v9 = a3 >> 3;
  while (1)
  {
    v10 = &v6[(v5 >> 1) * a3];
    if (v5 == 7)
      goto LABEL_45;
    v11 = &v6[(v5 - 1) * a3];
    if (v5 >= 0x29)
    {
      v105 = &v6[(v5 - 1) * a3];
      v12 = (v5 >> 3) * a3;
      v13 = (DiskNgramContextQuadIsolatedCmp *)DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v6, &v6[v12], a4);
      v14 = (int)v13;
      v107 = &v6[v12];
      v16 = DiskNgramContextQuadIsolatedCmp::compareElements(v13, &v6[v12], &v6[2 * v12], v15);
      if (v14 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          v16 = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)v16, v6, &v6[2 * v12], v17);
          if ((int)v16 >= 0)
            v18 = v6;
          else
            v18 = &v6[2 * v12];
          goto LABEL_18;
        }
      }
      else if ((int)v16 <= 0)
      {
        v16 = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)v16, v6, &v6[2 * v12], v17);
        if ((int)v16 >= 0)
          v18 = &v6[2 * v12];
        else
          v18 = v6;
LABEL_18:
        v107 = v18;
      }
      v20 = (DiskNgramContextQuadIsolatedCmp *)DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)v16, &v10[-v12], &v6[(v5 >> 1) * a3], v17);
      v21 = (int)v20;
      v23 = DiskNgramContextQuadIsolatedCmp::compareElements(v20, &v6[(v5 >> 1) * a3], &v10[v12], v22);
      if (v21 < 0)
      {
        if ((v23 & 0x80000000) == 0)
        {
          v23 = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)v23, &v10[-v12], &v10[v12], v24);
          if ((int)v23 >= 0)
            v10 -= v12;
          else
            v10 += v12;
        }
      }
      else if ((int)v23 <= 0)
      {
        v23 = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)v23, &v10[-v12], &v10[v12], v24);
        if ((int)v23 >= 0)
          v10 += v12;
        else
          v10 -= v12;
      }
      v25 = &v105[-2 * v12];
      v11 = &v105[-v12];
      v26 = (DiskNgramContextQuadIsolatedCmp *)DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)v23, v25, &v105[-v12], v24);
      v27 = (int)v26;
      result = DiskNgramContextQuadIsolatedCmp::compareElements(v26, &v105[-v12], v105, v28);
      if (v27 < 0)
      {
        v19 = v107;
        if ((result & 0x80000000) == 0)
        {
          v11 = &v6[(v5 - 1) * a3];
          result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v25, v105, a4);
          if ((int)result >= 0)
            v11 = v25;
        }
      }
      else
      {
        v19 = v107;
        if ((int)result <= 0)
        {
          v11 = &v6[(v5 - 1) * a3];
          result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v25, v105, a4);
          if ((int)result < 0)
            v11 = v25;
        }
      }
      goto LABEL_36;
    }
    v19 = v6;
LABEL_36:
    v29 = (DiskNgramContextQuadIsolatedCmp *)DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v19, v10, a4);
    v30 = (int)v29;
    result = DiskNgramContextQuadIsolatedCmp::compareElements(v29, v10, v11, v31);
    if (v30 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v19, v11, a4);
        if ((int)result >= 0)
          v10 = v19;
        else
          v10 = v11;
      }
    }
    else if ((int)result <= 0)
    {
      result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v19, v11, a4);
      if ((int)result >= 0)
        v10 = v11;
      else
        v10 = v19;
    }
LABEL_45:
    if (v109)
    {
      if (v108)
      {
        v32 = v6;
        v33 = a3 >> 3;
        do
        {
          v34 = *(_QWORD *)v32;
          *(_QWORD *)v32 = *(_QWORD *)v10;
          v32 += 8;
          *(_QWORD *)v10 = v34;
          v10 += 8;
          --v33;
        }
        while (v33);
      }
      else
      {
        v36 = a3;
        v37 = v6;
        do
        {
          v38 = *v37;
          *v37++ = *v10;
          *v10++ = v38;
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      v35 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v35;
    }
    v39 = 0;
    v40 = &v6[a3];
    v41 = &v6[(v5 - 1) * a3];
    v42 = v41;
    v43 = &v6[a3];
LABEL_54:
    while (v43 <= v42)
    {
      result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v43, v6, a4);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v109)
        {
          if (v108)
          {
            v44 = 0;
            do
            {
              v45 = *(_QWORD *)&v40[8 * v44];
              *(_QWORD *)&v40[8 * v44] = *(_QWORD *)&v43[8 * v44];
              *(_QWORD *)&v43[8 * v44++] = v45;
            }
            while (v9 != v44);
          }
          else
          {
            v54 = 0;
            do
            {
              v55 = v40[v54];
              v40[v54] = v43[v54];
              v43[v54++] = v55;
            }
            while (a3 != v54);
          }
        }
        else
        {
          v53 = *(_QWORD *)v40;
          *(_QWORD *)v40 = *(_QWORD *)v43;
          *(_QWORD *)v43 = v53;
        }
        v40 += a3;
        v39 = 1;
      }
      v43 += a3;
    }
    while (v43 <= v42)
    {
      result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v42, v6, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v109)
        {
          if (v108)
          {
            v51 = 0;
            do
            {
              v52 = *(_QWORD *)&v43[8 * v51];
              *(_QWORD *)&v43[8 * v51] = *(_QWORD *)&v42[8 * v51];
              *(_QWORD *)&v42[8 * v51++] = v52;
            }
            while (v9 != v51);
          }
          else
          {
            v57 = 0;
            do
            {
              v58 = v43[v57];
              v43[v57] = v42[v57];
              v42[v57++] = v58;
            }
            while (a3 != v57);
          }
        }
        else
        {
          v56 = *(_QWORD *)v43;
          *(_QWORD *)v43 = *(_QWORD *)v42;
          *(_QWORD *)v42 = v56;
        }
        v43 += a3;
        v42 += v7;
        v39 = 1;
        goto LABEL_54;
      }
      if (!(_DWORD)result)
      {
        if (v109)
        {
          if (v108)
          {
            v46 = 0;
            do
            {
              v47 = *(_QWORD *)&v42[8 * v46];
              *(_QWORD *)&v42[8 * v46] = *(_QWORD *)&v41[8 * v46];
              *(_QWORD *)&v41[8 * v46++] = v47;
            }
            while (v9 != v46);
          }
          else
          {
            v49 = 0;
            do
            {
              v50 = v42[v49];
              v42[v49] = v41[v49];
              v41[v49++] = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          v48 = *(_QWORD *)v42;
          *(_QWORD *)v42 = *(_QWORD *)v41;
          *(_QWORD *)v41 = v48;
        }
        v41 += v7;
        v39 = 1;
      }
      v42 += v7;
    }
    v59 = v5 * a3;
    v60 = &v6[v5 * a3];
    if (!v39)
      break;
    v61 = v43 - v40;
    if (v40 - v6 >= v43 - v40)
      v62 = v43 - v40;
    else
      v62 = v40 - v6;
    if (v62)
    {
      if (v108)
      {
        v63 = &v43[-v62];
        v64 = v62 >> 3;
        v65 = v6;
        do
        {
          v66 = *(_QWORD *)v65;
          *(_QWORD *)v65 = *(_QWORD *)v63;
          v65 += 8;
          *(_QWORD *)v63 = v66;
          v63 += 8;
          --v64;
        }
        while (v64);
      }
      else
      {
        v67 = -(uint64_t)v62;
        v68 = v6;
        do
        {
          v69 = *v68;
          *v68++ = v43[v67];
          v43[v67] = v69;
          v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    v71 = v41 - v42;
    if (v41 - v42 >= v60 - &v41[a3])
      v72 = v60 - &v41[a3];
    else
      v72 = v41 - v42;
    if (v72)
    {
      if (v108)
      {
        v73 = &v60[-v72];
        v74 = v72 >> 3;
        do
        {
          v75 = *(_QWORD *)v43;
          *(_QWORD *)v43 = *(_QWORD *)v73;
          v43 += 8;
          *(_QWORD *)v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        v76 = -(uint64_t)v72;
        do
        {
          v77 = *v43;
          *v43++ = v60[v76];
          v60[v76] = v77;
          v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3)
      result = mrec_qsort_r<DiskNgramContextQuadIsolatedCmp>(v6, v61 / a3, a3, a4);
    if (v71 <= (uint64_t)a3)
      return result;
    v6 = &v60[-v71];
    v5 = v71 / a3;
    v78 = v106;
    if (((v6 | a3) & 7) != 0)
      v78 = 2;
    v108 = ((v6 | a3) & 7) == 0;
    v109 = v78;
    if (v5 < 7)
      goto LABEL_118;
  }
  v92 = &v6[a3];
  if (v59 > (uint64_t)a3)
  {
    v93 = v6;
    do
    {
      if (v92 > v6)
      {
        v94 = v93;
        v95 = (uint64_t *)v92;
        do
        {
          v96 = v95;
          v95 = (uint64_t *)((char *)v95 + v7);
          result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v95, v96, a4);
          if ((int)result < 1)
            break;
          if (v109)
          {
            if (v108)
            {
              v97 = 0;
              v98 = (uint64_t)v94 + a3;
              do
              {
                v99 = *(_QWORD *)(v98 + 8 * v97);
                *(_QWORD *)(v98 + 8 * v97) = v94[v97];
                v94[v97++] = v99;
              }
              while (v9 != v97);
            }
            else
            {
              v101 = 0;
              v102 = (uint64_t)v94 + a3;
              do
              {
                v103 = *(_BYTE *)(v102 + v101);
                *(_BYTE *)(v102 + v101) = *((_BYTE *)v94 + v101);
                *((_BYTE *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            v100 = *v96;
            *v96 = *v95;
            *v95 = v100;
          }
          v94 = (_QWORD *)((char *)v94 + v7);
        }
        while (v95 > (uint64_t *)v6);
      }
      v92 += a3;
      v93 = (_QWORD *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

uint64_t mrec_qsort_r<DiskNgramContextBiTriGroupTrigramsCmp>(uint64_t result, unint64_t a2, unint64_t a3, const void *a4)
{
  unint64_t v5;
  float *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  float *v10;
  float *v11;
  unint64_t v12;
  DiskNgramContextBiTriGroupTrigramsCmp *v13;
  int v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  float *v18;
  float *v19;
  DiskNgramContextBiTriGroupTrigramsCmp *v20;
  int v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  float *v25;
  DiskNgramContextBiTriGroupTrigramsCmp *v26;
  int v27;
  const void *v28;
  DiskNgramContextBiTriGroupTrigramsCmp *v29;
  int v30;
  const void *v31;
  float *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  float *v37;
  char v38;
  int v39;
  _QWORD *v40;
  float *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  int64_t v59;
  float *v60;
  int64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  char v69;
  BOOL v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  int v78;
  float *v79;
  float *v80;
  float *v81;
  float *v82;
  float *v83;
  float *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  float *v92;
  float *v93;
  float *v94;
  float *v95;
  float *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  float *v105;
  _BOOL4 v106;
  float *v107;
  BOOL v108;
  int v109;

  v5 = a2;
  v6 = (float *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v108 = ((result | a3) & 7) == 0;
  v109 = v8;
  if (a2 < 7)
  {
LABEL_118:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v79 = (float *)((char *)v6 + v5 * a3);
      v80 = (float *)((char *)v6 + a3);
      v81 = v6;
      do
      {
        if (v80 > v6)
        {
          v82 = v81;
          v83 = v80;
          do
          {
            v84 = v83;
            v83 = (float *)((char *)v83 + v7);
            result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v83, v84, a4);
            if ((int)result < 1)
              break;
            if (v109)
            {
              if (v108)
              {
                v85 = 0;
                v86 = (uint64_t)v82 + a3;
                do
                {
                  v87 = *(_QWORD *)(v86 + 8 * v85);
                  *(_QWORD *)(v86 + 8 * v85) = *(_QWORD *)&v82[2 * v85];
                  *(_QWORD *)&v82[2 * v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                v89 = 0;
                v90 = (uint64_t)v82 + a3;
                do
                {
                  v91 = *(_BYTE *)(v90 + v89);
                  *(_BYTE *)(v90 + v89) = *((_BYTE *)v82 + v89);
                  *((_BYTE *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              v88 = *(_QWORD *)v84;
              *(_QWORD *)v84 = *(_QWORD *)v83;
              *(_QWORD *)v83 = v88;
            }
            v82 = (float *)((char *)v82 + v7);
          }
          while (v83 > v6);
        }
        v80 = (float *)((char *)v80 + a3);
        v81 = (float *)((char *)v81 + a3);
      }
      while (v80 < v79);
    }
    return result;
  }
  v106 = a3 != 8;
  v9 = a3 >> 3;
  while (1)
  {
    v10 = (float *)((char *)v6 + (v5 >> 1) * a3);
    if (v5 == 7)
      goto LABEL_45;
    v11 = (float *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      v105 = (float *)((char *)v6 + (v5 - 1) * a3);
      v12 = (v5 >> 3) * a3;
      v13 = (DiskNgramContextBiTriGroupTrigramsCmp *)DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v6, (float *)((char *)v6 + v12), a4);
      v14 = (int)v13;
      v107 = (float *)((char *)v6 + v12);
      v16 = DiskNgramContextBiTriGroupTrigramsCmp::compareElements(v13, (float *)((char *)v6 + v12), (float *)((char *)v6 + 2 * v12), v15);
      if (v14 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          v16 = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)v16, v6, (float *)((char *)v6 + 2 * v12), v17);
          if ((int)v16 >= 0)
            v18 = v6;
          else
            v18 = (float *)((char *)v6 + 2 * v12);
          goto LABEL_18;
        }
      }
      else if ((int)v16 <= 0)
      {
        v16 = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)v16, v6, (float *)((char *)v6 + 2 * v12), v17);
        if ((int)v16 >= 0)
          v18 = (float *)((char *)v6 + 2 * v12);
        else
          v18 = v6;
LABEL_18:
        v107 = v18;
      }
      v20 = (DiskNgramContextBiTriGroupTrigramsCmp *)DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)v16, (float *)((char *)v10 - v12), (float *)((char *)v6 + (v5 >> 1) * a3), v17);
      v21 = (int)v20;
      v23 = DiskNgramContextBiTriGroupTrigramsCmp::compareElements(v20, (float *)((char *)v6 + (v5 >> 1) * a3), (float *)((char *)v10 + v12), v22);
      if (v21 < 0)
      {
        if ((v23 & 0x80000000) == 0)
        {
          v23 = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)v23, (float *)((char *)v10 - v12), (float *)((char *)v10 + v12), v24);
          if ((int)v23 >= 0)
            v10 = (float *)((char *)v10 - v12);
          else
            v10 = (float *)((char *)v10 + v12);
        }
      }
      else if ((int)v23 <= 0)
      {
        v23 = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)v23, (float *)((char *)v10 - v12), (float *)((char *)v10 + v12), v24);
        if ((int)v23 >= 0)
          v10 = (float *)((char *)v10 + v12);
        else
          v10 = (float *)((char *)v10 - v12);
      }
      v25 = (float *)((char *)v105 - 2 * v12);
      v11 = (float *)((char *)v105 - v12);
      v26 = (DiskNgramContextBiTriGroupTrigramsCmp *)DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)v23, v25, (float *)((char *)v105 - v12), v24);
      v27 = (int)v26;
      result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements(v26, (float *)((char *)v105 - v12), v105, v28);
      if (v27 < 0)
      {
        v19 = v107;
        if ((result & 0x80000000) == 0)
        {
          v11 = (float *)((char *)v6 + (v5 - 1) * a3);
          result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v25, v105, a4);
          if ((int)result >= 0)
            v11 = v25;
        }
      }
      else
      {
        v19 = v107;
        if ((int)result <= 0)
        {
          v11 = (float *)((char *)v6 + (v5 - 1) * a3);
          result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v25, v105, a4);
          if ((int)result < 0)
            v11 = v25;
        }
      }
      goto LABEL_36;
    }
    v19 = v6;
LABEL_36:
    v29 = (DiskNgramContextBiTriGroupTrigramsCmp *)DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v19, v10, a4);
    v30 = (int)v29;
    result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements(v29, v10, v11, v31);
    if (v30 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v19, v11, a4);
        if ((int)result >= 0)
          v10 = v19;
        else
          v10 = v11;
      }
    }
    else if ((int)result <= 0)
    {
      result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v19, v11, a4);
      if ((int)result >= 0)
        v10 = v11;
      else
        v10 = v19;
    }
LABEL_45:
    if (v109)
    {
      if (v108)
      {
        v32 = v6;
        v33 = a3 >> 3;
        do
        {
          v34 = *(_QWORD *)v32;
          *(_QWORD *)v32 = *(_QWORD *)v10;
          v32 += 2;
          *(_QWORD *)v10 = v34;
          v10 += 2;
          --v33;
        }
        while (v33);
      }
      else
      {
        v36 = a3;
        v37 = v6;
        do
        {
          v38 = *(_BYTE *)v37;
          *(_BYTE *)v37 = *(_BYTE *)v10;
          v37 = (float *)((char *)v37 + 1);
          *(_BYTE *)v10 = v38;
          v10 = (float *)((char *)v10 + 1);
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      v35 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v35;
    }
    v39 = 0;
    v40 = (_QWORD *)((char *)v6 + a3);
    v41 = (float *)((char *)v6 + (v5 - 1) * a3);
    v42 = v41;
    v43 = (float *)((char *)v6 + a3);
LABEL_54:
    while (v43 <= v42)
    {
      result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v43, v6, a4);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v109)
        {
          if (v108)
          {
            v44 = 0;
            do
            {
              v45 = v40[v44];
              v40[v44] = *(_QWORD *)&v43[2 * v44];
              *(_QWORD *)&v43[2 * v44++] = v45;
            }
            while (v9 != v44);
          }
          else
          {
            v54 = 0;
            do
            {
              v55 = *((_BYTE *)v40 + v54);
              *((_BYTE *)v40 + v54) = *((_BYTE *)v43 + v54);
              *((_BYTE *)v43 + v54++) = v55;
            }
            while (a3 != v54);
          }
        }
        else
        {
          v53 = *v40;
          *v40 = *(_QWORD *)v43;
          *(_QWORD *)v43 = v53;
        }
        v40 = (_QWORD *)((char *)v40 + a3);
        v39 = 1;
      }
      v43 = (float *)((char *)v43 + a3);
    }
    while (v43 <= v42)
    {
      result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v42, v6, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v109)
        {
          if (v108)
          {
            v51 = 0;
            do
            {
              v52 = *(_QWORD *)&v43[2 * v51];
              *(_QWORD *)&v43[2 * v51] = *(_QWORD *)&v42[2 * v51];
              *(_QWORD *)&v42[2 * v51++] = v52;
            }
            while (v9 != v51);
          }
          else
          {
            v57 = 0;
            do
            {
              v58 = *((_BYTE *)v43 + v57);
              *((_BYTE *)v43 + v57) = *((_BYTE *)v42 + v57);
              *((_BYTE *)v42 + v57++) = v58;
            }
            while (a3 != v57);
          }
        }
        else
        {
          v56 = *(_QWORD *)v43;
          *(_QWORD *)v43 = *(_QWORD *)v42;
          *(_QWORD *)v42 = v56;
        }
        v43 = (float *)((char *)v43 + a3);
        v42 = (float *)((char *)v42 + v7);
        v39 = 1;
        goto LABEL_54;
      }
      if (!(_DWORD)result)
      {
        if (v109)
        {
          if (v108)
          {
            v46 = 0;
            do
            {
              v47 = *(_QWORD *)&v42[2 * v46];
              *(_QWORD *)&v42[2 * v46] = *(_QWORD *)&v41[2 * v46];
              *(_QWORD *)&v41[2 * v46++] = v47;
            }
            while (v9 != v46);
          }
          else
          {
            v49 = 0;
            do
            {
              v50 = *((_BYTE *)v42 + v49);
              *((_BYTE *)v42 + v49) = *((_BYTE *)v41 + v49);
              *((_BYTE *)v41 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          v48 = *(_QWORD *)v42;
          *(_QWORD *)v42 = *(_QWORD *)v41;
          *(_QWORD *)v41 = v48;
        }
        v41 = (float *)((char *)v41 + v7);
        v39 = 1;
      }
      v42 = (float *)((char *)v42 + v7);
    }
    v59 = v5 * a3;
    v60 = (float *)((char *)v6 + v5 * a3);
    if (!v39)
      break;
    v61 = (char *)v43 - (char *)v40;
    if ((char *)v40 - (char *)v6 >= (char *)v43 - (char *)v40)
      v62 = (char *)v43 - (char *)v40;
    else
      v62 = (char *)v40 - (char *)v6;
    if (v62)
    {
      if (v108)
      {
        v63 = (_QWORD *)((char *)v43 - v62);
        v64 = v62 >> 3;
        v65 = v6;
        do
        {
          v66 = *(_QWORD *)v65;
          *(_QWORD *)v65 = *v63;
          v65 += 2;
          *v63++ = v66;
          --v64;
        }
        while (v64);
      }
      else
      {
        v67 = -(uint64_t)v62;
        v68 = v6;
        do
        {
          v69 = *(_BYTE *)v68;
          *(_BYTE *)v68 = *((_BYTE *)v43 + v67);
          v68 = (float *)((char *)v68 + 1);
          *((_BYTE *)v43 + v67) = v69;
          v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    v71 = (char *)v41 - (char *)v42;
    if ((char *)v41 - (char *)v42 >= (char *)v60 - ((char *)v41 + a3))
      v72 = (char *)v60 - ((char *)v41 + a3);
    else
      v72 = (char *)v41 - (char *)v42;
    if (v72)
    {
      if (v108)
      {
        v73 = (char *)v60 - v72;
        v74 = v72 >> 3;
        do
        {
          v75 = *(_QWORD *)v43;
          *(_QWORD *)v43 = *(_QWORD *)v73;
          v43 += 2;
          *(_QWORD *)v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        v76 = -(uint64_t)v72;
        do
        {
          v77 = *(_BYTE *)v43;
          *(_BYTE *)v43 = *((_BYTE *)v60 + v76);
          v43 = (float *)((char *)v43 + 1);
          *((_BYTE *)v60 + v76) = v77;
          v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3)
      result = mrec_qsort_r<DiskNgramContextBiTriGroupTrigramsCmp>(v6, v61 / a3, a3, a4);
    if (v71 <= (uint64_t)a3)
      return result;
    v6 = (float *)((char *)v60 - v71);
    v5 = v71 / a3;
    v78 = v106;
    if (((v6 | a3) & 7) != 0)
      v78 = 2;
    v108 = ((v6 | a3) & 7) == 0;
    v109 = v78;
    if (v5 < 7)
      goto LABEL_118;
  }
  v92 = (float *)((char *)v6 + a3);
  if (v59 > (uint64_t)a3)
  {
    v93 = v6;
    do
    {
      if (v92 > v6)
      {
        v94 = v93;
        v95 = v92;
        do
        {
          v96 = v95;
          v95 = (float *)((char *)v95 + v7);
          result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v95, v96, a4);
          if ((int)result < 1)
            break;
          if (v109)
          {
            if (v108)
            {
              v97 = 0;
              v98 = (uint64_t)v94 + a3;
              do
              {
                v99 = *(_QWORD *)(v98 + 8 * v97);
                *(_QWORD *)(v98 + 8 * v97) = *(_QWORD *)&v94[2 * v97];
                *(_QWORD *)&v94[2 * v97++] = v99;
              }
              while (v9 != v97);
            }
            else
            {
              v101 = 0;
              v102 = (uint64_t)v94 + a3;
              do
              {
                v103 = *(_BYTE *)(v102 + v101);
                *(_BYTE *)(v102 + v101) = *((_BYTE *)v94 + v101);
                *((_BYTE *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            v100 = *(_QWORD *)v96;
            *(_QWORD *)v96 = *(_QWORD *)v95;
            *(_QWORD *)v95 = v100;
          }
          v94 = (float *)((char *)v94 + v7);
        }
        while (v95 > v6);
      }
      v92 = (float *)((char *)v92 + a3);
      v93 = (float *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

uint64_t mrec_qsort_r<DiskNgramContextBiTriGroupTrigramsWithBigramsCmp>(uint64_t result, unint64_t a2, unint64_t a3, const void *a4)
{
  unint64_t v5;
  float *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  float *v10;
  float *v11;
  unint64_t v12;
  DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *v13;
  int v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  float *v18;
  float *v19;
  DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *v20;
  int v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  float *v25;
  DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *v26;
  int v27;
  const void *v28;
  DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *v29;
  int v30;
  const void *v31;
  float *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  float *v37;
  char v38;
  int v39;
  _QWORD *v40;
  float *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  int64_t v59;
  float *v60;
  int64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  char v69;
  BOOL v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  int v78;
  float *v79;
  float *v80;
  float *v81;
  float *v82;
  float *v83;
  float *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  float *v92;
  float *v93;
  float *v94;
  float *v95;
  float *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  float *v105;
  _BOOL4 v106;
  float *v107;
  BOOL v108;
  int v109;

  v5 = a2;
  v6 = (float *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v108 = ((result | a3) & 7) == 0;
  v109 = v8;
  if (a2 < 7)
  {
LABEL_118:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v79 = (float *)((char *)v6 + v5 * a3);
      v80 = (float *)((char *)v6 + a3);
      v81 = v6;
      do
      {
        if (v80 > v6)
        {
          v82 = v81;
          v83 = v80;
          do
          {
            v84 = v83;
            v83 = (float *)((char *)v83 + v7);
            result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v83, v84, a4);
            if ((int)result < 1)
              break;
            if (v109)
            {
              if (v108)
              {
                v85 = 0;
                v86 = (uint64_t)v82 + a3;
                do
                {
                  v87 = *(_QWORD *)(v86 + 8 * v85);
                  *(_QWORD *)(v86 + 8 * v85) = *(_QWORD *)&v82[2 * v85];
                  *(_QWORD *)&v82[2 * v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                v89 = 0;
                v90 = (uint64_t)v82 + a3;
                do
                {
                  v91 = *(_BYTE *)(v90 + v89);
                  *(_BYTE *)(v90 + v89) = *((_BYTE *)v82 + v89);
                  *((_BYTE *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              v88 = *(_QWORD *)v84;
              *(_QWORD *)v84 = *(_QWORD *)v83;
              *(_QWORD *)v83 = v88;
            }
            v82 = (float *)((char *)v82 + v7);
          }
          while (v83 > v6);
        }
        v80 = (float *)((char *)v80 + a3);
        v81 = (float *)((char *)v81 + a3);
      }
      while (v80 < v79);
    }
    return result;
  }
  v106 = a3 != 8;
  v9 = a3 >> 3;
  while (1)
  {
    v10 = (float *)((char *)v6 + (v5 >> 1) * a3);
    if (v5 == 7)
      goto LABEL_45;
    v11 = (float *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      v105 = (float *)((char *)v6 + (v5 - 1) * a3);
      v12 = (v5 >> 3) * a3;
      v13 = (DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v6, (float *)((char *)v6 + v12), a4);
      v14 = (int)v13;
      v107 = (float *)((char *)v6 + v12);
      v16 = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements(v13, (float *)((char *)v6 + v12), (float *)((char *)v6 + 2 * v12), v15);
      if (v14 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          v16 = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)v16, v6, (float *)((char *)v6 + 2 * v12), v17);
          if ((int)v16 >= 0)
            v18 = v6;
          else
            v18 = (float *)((char *)v6 + 2 * v12);
          goto LABEL_18;
        }
      }
      else if ((int)v16 <= 0)
      {
        v16 = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)v16, v6, (float *)((char *)v6 + 2 * v12), v17);
        if ((int)v16 >= 0)
          v18 = (float *)((char *)v6 + 2 * v12);
        else
          v18 = v6;
LABEL_18:
        v107 = v18;
      }
      v20 = (DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)v16, (float *)((char *)v10 - v12), (float *)((char *)v6 + (v5 >> 1) * a3), v17);
      v21 = (int)v20;
      v23 = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements(v20, (float *)((char *)v6 + (v5 >> 1) * a3), (float *)((char *)v10 + v12), v22);
      if (v21 < 0)
      {
        if ((v23 & 0x80000000) == 0)
        {
          v23 = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)v23, (float *)((char *)v10 - v12), (float *)((char *)v10 + v12), v24);
          if ((int)v23 >= 0)
            v10 = (float *)((char *)v10 - v12);
          else
            v10 = (float *)((char *)v10 + v12);
        }
      }
      else if ((int)v23 <= 0)
      {
        v23 = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)v23, (float *)((char *)v10 - v12), (float *)((char *)v10 + v12), v24);
        if ((int)v23 >= 0)
          v10 = (float *)((char *)v10 + v12);
        else
          v10 = (float *)((char *)v10 - v12);
      }
      v25 = (float *)((char *)v105 - 2 * v12);
      v11 = (float *)((char *)v105 - v12);
      v26 = (DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)v23, v25, (float *)((char *)v105 - v12), v24);
      v27 = (int)v26;
      result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements(v26, (float *)((char *)v105 - v12), v105, v28);
      if (v27 < 0)
      {
        v19 = v107;
        if ((result & 0x80000000) == 0)
        {
          v11 = (float *)((char *)v6 + (v5 - 1) * a3);
          result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v25, v105, a4);
          if ((int)result >= 0)
            v11 = v25;
        }
      }
      else
      {
        v19 = v107;
        if ((int)result <= 0)
        {
          v11 = (float *)((char *)v6 + (v5 - 1) * a3);
          result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v25, v105, a4);
          if ((int)result < 0)
            v11 = v25;
        }
      }
      goto LABEL_36;
    }
    v19 = v6;
LABEL_36:
    v29 = (DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v19, v10, a4);
    v30 = (int)v29;
    result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements(v29, v10, v11, v31);
    if (v30 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v19, v11, a4);
        if ((int)result >= 0)
          v10 = v19;
        else
          v10 = v11;
      }
    }
    else if ((int)result <= 0)
    {
      result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v19, v11, a4);
      if ((int)result >= 0)
        v10 = v11;
      else
        v10 = v19;
    }
LABEL_45:
    if (v109)
    {
      if (v108)
      {
        v32 = v6;
        v33 = a3 >> 3;
        do
        {
          v34 = *(_QWORD *)v32;
          *(_QWORD *)v32 = *(_QWORD *)v10;
          v32 += 2;
          *(_QWORD *)v10 = v34;
          v10 += 2;
          --v33;
        }
        while (v33);
      }
      else
      {
        v36 = a3;
        v37 = v6;
        do
        {
          v38 = *(_BYTE *)v37;
          *(_BYTE *)v37 = *(_BYTE *)v10;
          v37 = (float *)((char *)v37 + 1);
          *(_BYTE *)v10 = v38;
          v10 = (float *)((char *)v10 + 1);
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      v35 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v35;
    }
    v39 = 0;
    v40 = (_QWORD *)((char *)v6 + a3);
    v41 = (float *)((char *)v6 + (v5 - 1) * a3);
    v42 = v41;
    v43 = (float *)((char *)v6 + a3);
LABEL_54:
    while (v43 <= v42)
    {
      result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v43, v6, a4);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v109)
        {
          if (v108)
          {
            v44 = 0;
            do
            {
              v45 = v40[v44];
              v40[v44] = *(_QWORD *)&v43[2 * v44];
              *(_QWORD *)&v43[2 * v44++] = v45;
            }
            while (v9 != v44);
          }
          else
          {
            v54 = 0;
            do
            {
              v55 = *((_BYTE *)v40 + v54);
              *((_BYTE *)v40 + v54) = *((_BYTE *)v43 + v54);
              *((_BYTE *)v43 + v54++) = v55;
            }
            while (a3 != v54);
          }
        }
        else
        {
          v53 = *v40;
          *v40 = *(_QWORD *)v43;
          *(_QWORD *)v43 = v53;
        }
        v40 = (_QWORD *)((char *)v40 + a3);
        v39 = 1;
      }
      v43 = (float *)((char *)v43 + a3);
    }
    while (v43 <= v42)
    {
      result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v42, v6, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v109)
        {
          if (v108)
          {
            v51 = 0;
            do
            {
              v52 = *(_QWORD *)&v43[2 * v51];
              *(_QWORD *)&v43[2 * v51] = *(_QWORD *)&v42[2 * v51];
              *(_QWORD *)&v42[2 * v51++] = v52;
            }
            while (v9 != v51);
          }
          else
          {
            v57 = 0;
            do
            {
              v58 = *((_BYTE *)v43 + v57);
              *((_BYTE *)v43 + v57) = *((_BYTE *)v42 + v57);
              *((_BYTE *)v42 + v57++) = v58;
            }
            while (a3 != v57);
          }
        }
        else
        {
          v56 = *(_QWORD *)v43;
          *(_QWORD *)v43 = *(_QWORD *)v42;
          *(_QWORD *)v42 = v56;
        }
        v43 = (float *)((char *)v43 + a3);
        v42 = (float *)((char *)v42 + v7);
        v39 = 1;
        goto LABEL_54;
      }
      if (!(_DWORD)result)
      {
        if (v109)
        {
          if (v108)
          {
            v46 = 0;
            do
            {
              v47 = *(_QWORD *)&v42[2 * v46];
              *(_QWORD *)&v42[2 * v46] = *(_QWORD *)&v41[2 * v46];
              *(_QWORD *)&v41[2 * v46++] = v47;
            }
            while (v9 != v46);
          }
          else
          {
            v49 = 0;
            do
            {
              v50 = *((_BYTE *)v42 + v49);
              *((_BYTE *)v42 + v49) = *((_BYTE *)v41 + v49);
              *((_BYTE *)v41 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          v48 = *(_QWORD *)v42;
          *(_QWORD *)v42 = *(_QWORD *)v41;
          *(_QWORD *)v41 = v48;
        }
        v41 = (float *)((char *)v41 + v7);
        v39 = 1;
      }
      v42 = (float *)((char *)v42 + v7);
    }
    v59 = v5 * a3;
    v60 = (float *)((char *)v6 + v5 * a3);
    if (!v39)
      break;
    v61 = (char *)v43 - (char *)v40;
    if ((char *)v40 - (char *)v6 >= (char *)v43 - (char *)v40)
      v62 = (char *)v43 - (char *)v40;
    else
      v62 = (char *)v40 - (char *)v6;
    if (v62)
    {
      if (v108)
      {
        v63 = (_QWORD *)((char *)v43 - v62);
        v64 = v62 >> 3;
        v65 = v6;
        do
        {
          v66 = *(_QWORD *)v65;
          *(_QWORD *)v65 = *v63;
          v65 += 2;
          *v63++ = v66;
          --v64;
        }
        while (v64);
      }
      else
      {
        v67 = -(uint64_t)v62;
        v68 = v6;
        do
        {
          v69 = *(_BYTE *)v68;
          *(_BYTE *)v68 = *((_BYTE *)v43 + v67);
          v68 = (float *)((char *)v68 + 1);
          *((_BYTE *)v43 + v67) = v69;
          v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    v71 = (char *)v41 - (char *)v42;
    if ((char *)v41 - (char *)v42 >= (char *)v60 - ((char *)v41 + a3))
      v72 = (char *)v60 - ((char *)v41 + a3);
    else
      v72 = (char *)v41 - (char *)v42;
    if (v72)
    {
      if (v108)
      {
        v73 = (char *)v60 - v72;
        v74 = v72 >> 3;
        do
        {
          v75 = *(_QWORD *)v43;
          *(_QWORD *)v43 = *(_QWORD *)v73;
          v43 += 2;
          *(_QWORD *)v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        v76 = -(uint64_t)v72;
        do
        {
          v77 = *(_BYTE *)v43;
          *(_BYTE *)v43 = *((_BYTE *)v60 + v76);
          v43 = (float *)((char *)v43 + 1);
          *((_BYTE *)v60 + v76) = v77;
          v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3)
      result = mrec_qsort_r<DiskNgramContextBiTriGroupTrigramsWithBigramsCmp>(v6, v61 / a3, a3, a4);
    if (v71 <= (uint64_t)a3)
      return result;
    v6 = (float *)((char *)v60 - v71);
    v5 = v71 / a3;
    v78 = v106;
    if (((v6 | a3) & 7) != 0)
      v78 = 2;
    v108 = ((v6 | a3) & 7) == 0;
    v109 = v78;
    if (v5 < 7)
      goto LABEL_118;
  }
  v92 = (float *)((char *)v6 + a3);
  if (v59 > (uint64_t)a3)
  {
    v93 = v6;
    do
    {
      if (v92 > v6)
      {
        v94 = v93;
        v95 = v92;
        do
        {
          v96 = v95;
          v95 = (float *)((char *)v95 + v7);
          result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v95, v96, a4);
          if ((int)result < 1)
            break;
          if (v109)
          {
            if (v108)
            {
              v97 = 0;
              v98 = (uint64_t)v94 + a3;
              do
              {
                v99 = *(_QWORD *)(v98 + 8 * v97);
                *(_QWORD *)(v98 + 8 * v97) = *(_QWORD *)&v94[2 * v97];
                *(_QWORD *)&v94[2 * v97++] = v99;
              }
              while (v9 != v97);
            }
            else
            {
              v101 = 0;
              v102 = (uint64_t)v94 + a3;
              do
              {
                v103 = *(_BYTE *)(v102 + v101);
                *(_BYTE *)(v102 + v101) = *((_BYTE *)v94 + v101);
                *((_BYTE *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            v100 = *(_QWORD *)v96;
            *(_QWORD *)v96 = *(_QWORD *)v95;
            *(_QWORD *)v95 = v100;
          }
          v94 = (float *)((char *)v94 + v7);
        }
        while (v95 > v6);
      }
      v92 = (float *)((char *)v92 + a3);
      v93 = (float *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

uint64_t mrec_qsort_r<DiskNgramContextQuadGroupCmp>(uint64_t result, unint64_t a2, unint64_t a3, const void *a4)
{
  unint64_t v5;
  float *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  float *v10;
  float *v11;
  unint64_t v12;
  DiskNgramContextQuadGroupCmp *v13;
  int v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  float *v18;
  float *v19;
  DiskNgramContextQuadGroupCmp *v20;
  int v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  float *v25;
  DiskNgramContextQuadGroupCmp *v26;
  int v27;
  const void *v28;
  DiskNgramContextQuadGroupCmp *v29;
  int v30;
  const void *v31;
  float *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  float *v37;
  char v38;
  int v39;
  _QWORD *v40;
  float *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  int64_t v59;
  float *v60;
  int64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  char v69;
  BOOL v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  int v78;
  float *v79;
  float *v80;
  float *v81;
  float *v82;
  float *v83;
  float *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  float *v92;
  float *v93;
  float *v94;
  float *v95;
  float *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  float *v105;
  _BOOL4 v106;
  float *v107;
  BOOL v108;
  int v109;

  v5 = a2;
  v6 = (float *)result;
  v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  v108 = ((result | a3) & 7) == 0;
  v109 = v8;
  if (a2 < 7)
  {
LABEL_118:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      v79 = (float *)((char *)v6 + v5 * a3);
      v80 = (float *)((char *)v6 + a3);
      v81 = v6;
      do
      {
        if (v80 > v6)
        {
          v82 = v81;
          v83 = v80;
          do
          {
            v84 = v83;
            v83 = (float *)((char *)v83 + v7);
            result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v83, v84, a4);
            if ((int)result < 1)
              break;
            if (v109)
            {
              if (v108)
              {
                v85 = 0;
                v86 = (uint64_t)v82 + a3;
                do
                {
                  v87 = *(_QWORD *)(v86 + 8 * v85);
                  *(_QWORD *)(v86 + 8 * v85) = *(_QWORD *)&v82[2 * v85];
                  *(_QWORD *)&v82[2 * v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                v89 = 0;
                v90 = (uint64_t)v82 + a3;
                do
                {
                  v91 = *(_BYTE *)(v90 + v89);
                  *(_BYTE *)(v90 + v89) = *((_BYTE *)v82 + v89);
                  *((_BYTE *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              v88 = *(_QWORD *)v84;
              *(_QWORD *)v84 = *(_QWORD *)v83;
              *(_QWORD *)v83 = v88;
            }
            v82 = (float *)((char *)v82 + v7);
          }
          while (v83 > v6);
        }
        v80 = (float *)((char *)v80 + a3);
        v81 = (float *)((char *)v81 + a3);
      }
      while (v80 < v79);
    }
    return result;
  }
  v106 = a3 != 8;
  v9 = a3 >> 3;
  while (1)
  {
    v10 = (float *)((char *)v6 + (v5 >> 1) * a3);
    if (v5 == 7)
      goto LABEL_45;
    v11 = (float *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      v105 = (float *)((char *)v6 + (v5 - 1) * a3);
      v12 = (v5 >> 3) * a3;
      v13 = (DiskNgramContextQuadGroupCmp *)DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v6, (float *)((char *)v6 + v12), a4);
      v14 = (int)v13;
      v107 = (float *)((char *)v6 + v12);
      v16 = DiskNgramContextQuadGroupCmp::compareElements(v13, (float *)((char *)v6 + v12), (float *)((char *)v6 + 2 * v12), v15);
      if (v14 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          v16 = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)v16, v6, (float *)((char *)v6 + 2 * v12), v17);
          if ((int)v16 >= 0)
            v18 = v6;
          else
            v18 = (float *)((char *)v6 + 2 * v12);
          goto LABEL_18;
        }
      }
      else if ((int)v16 <= 0)
      {
        v16 = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)v16, v6, (float *)((char *)v6 + 2 * v12), v17);
        if ((int)v16 >= 0)
          v18 = (float *)((char *)v6 + 2 * v12);
        else
          v18 = v6;
LABEL_18:
        v107 = v18;
      }
      v20 = (DiskNgramContextQuadGroupCmp *)DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)v16, (float *)((char *)v10 - v12), (float *)((char *)v6 + (v5 >> 1) * a3), v17);
      v21 = (int)v20;
      v23 = DiskNgramContextQuadGroupCmp::compareElements(v20, (float *)((char *)v6 + (v5 >> 1) * a3), (float *)((char *)v10 + v12), v22);
      if (v21 < 0)
      {
        if ((v23 & 0x80000000) == 0)
        {
          v23 = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)v23, (float *)((char *)v10 - v12), (float *)((char *)v10 + v12), v24);
          if ((int)v23 >= 0)
            v10 = (float *)((char *)v10 - v12);
          else
            v10 = (float *)((char *)v10 + v12);
        }
      }
      else if ((int)v23 <= 0)
      {
        v23 = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)v23, (float *)((char *)v10 - v12), (float *)((char *)v10 + v12), v24);
        if ((int)v23 >= 0)
          v10 = (float *)((char *)v10 + v12);
        else
          v10 = (float *)((char *)v10 - v12);
      }
      v25 = (float *)((char *)v105 - 2 * v12);
      v11 = (float *)((char *)v105 - v12);
      v26 = (DiskNgramContextQuadGroupCmp *)DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)v23, v25, (float *)((char *)v105 - v12), v24);
      v27 = (int)v26;
      result = DiskNgramContextQuadGroupCmp::compareElements(v26, (float *)((char *)v105 - v12), v105, v28);
      if (v27 < 0)
      {
        v19 = v107;
        if ((result & 0x80000000) == 0)
        {
          v11 = (float *)((char *)v6 + (v5 - 1) * a3);
          result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v25, v105, a4);
          if ((int)result >= 0)
            v11 = v25;
        }
      }
      else
      {
        v19 = v107;
        if ((int)result <= 0)
        {
          v11 = (float *)((char *)v6 + (v5 - 1) * a3);
          result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v25, v105, a4);
          if ((int)result < 0)
            v11 = v25;
        }
      }
      goto LABEL_36;
    }
    v19 = v6;
LABEL_36:
    v29 = (DiskNgramContextQuadGroupCmp *)DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v19, v10, a4);
    v30 = (int)v29;
    result = DiskNgramContextQuadGroupCmp::compareElements(v29, v10, v11, v31);
    if (v30 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v19, v11, a4);
        if ((int)result >= 0)
          v10 = v19;
        else
          v10 = v11;
      }
    }
    else if ((int)result <= 0)
    {
      result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v19, v11, a4);
      if ((int)result >= 0)
        v10 = v11;
      else
        v10 = v19;
    }
LABEL_45:
    if (v109)
    {
      if (v108)
      {
        v32 = v6;
        v33 = a3 >> 3;
        do
        {
          v34 = *(_QWORD *)v32;
          *(_QWORD *)v32 = *(_QWORD *)v10;
          v32 += 2;
          *(_QWORD *)v10 = v34;
          v10 += 2;
          --v33;
        }
        while (v33);
      }
      else
      {
        v36 = a3;
        v37 = v6;
        do
        {
          v38 = *(_BYTE *)v37;
          *(_BYTE *)v37 = *(_BYTE *)v10;
          v37 = (float *)((char *)v37 + 1);
          *(_BYTE *)v10 = v38;
          v10 = (float *)((char *)v10 + 1);
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      v35 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v35;
    }
    v39 = 0;
    v40 = (_QWORD *)((char *)v6 + a3);
    v41 = (float *)((char *)v6 + (v5 - 1) * a3);
    v42 = v41;
    v43 = (float *)((char *)v6 + a3);
LABEL_54:
    while (v43 <= v42)
    {
      result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v43, v6, a4);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v109)
        {
          if (v108)
          {
            v44 = 0;
            do
            {
              v45 = v40[v44];
              v40[v44] = *(_QWORD *)&v43[2 * v44];
              *(_QWORD *)&v43[2 * v44++] = v45;
            }
            while (v9 != v44);
          }
          else
          {
            v54 = 0;
            do
            {
              v55 = *((_BYTE *)v40 + v54);
              *((_BYTE *)v40 + v54) = *((_BYTE *)v43 + v54);
              *((_BYTE *)v43 + v54++) = v55;
            }
            while (a3 != v54);
          }
        }
        else
        {
          v53 = *v40;
          *v40 = *(_QWORD *)v43;
          *(_QWORD *)v43 = v53;
        }
        v40 = (_QWORD *)((char *)v40 + a3);
        v39 = 1;
      }
      v43 = (float *)((char *)v43 + a3);
    }
    while (v43 <= v42)
    {
      result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v42, v6, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v109)
        {
          if (v108)
          {
            v51 = 0;
            do
            {
              v52 = *(_QWORD *)&v43[2 * v51];
              *(_QWORD *)&v43[2 * v51] = *(_QWORD *)&v42[2 * v51];
              *(_QWORD *)&v42[2 * v51++] = v52;
            }
            while (v9 != v51);
          }
          else
          {
            v57 = 0;
            do
            {
              v58 = *((_BYTE *)v43 + v57);
              *((_BYTE *)v43 + v57) = *((_BYTE *)v42 + v57);
              *((_BYTE *)v42 + v57++) = v58;
            }
            while (a3 != v57);
          }
        }
        else
        {
          v56 = *(_QWORD *)v43;
          *(_QWORD *)v43 = *(_QWORD *)v42;
          *(_QWORD *)v42 = v56;
        }
        v43 = (float *)((char *)v43 + a3);
        v42 = (float *)((char *)v42 + v7);
        v39 = 1;
        goto LABEL_54;
      }
      if (!(_DWORD)result)
      {
        if (v109)
        {
          if (v108)
          {
            v46 = 0;
            do
            {
              v47 = *(_QWORD *)&v42[2 * v46];
              *(_QWORD *)&v42[2 * v46] = *(_QWORD *)&v41[2 * v46];
              *(_QWORD *)&v41[2 * v46++] = v47;
            }
            while (v9 != v46);
          }
          else
          {
            v49 = 0;
            do
            {
              v50 = *((_BYTE *)v42 + v49);
              *((_BYTE *)v42 + v49) = *((_BYTE *)v41 + v49);
              *((_BYTE *)v41 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          v48 = *(_QWORD *)v42;
          *(_QWORD *)v42 = *(_QWORD *)v41;
          *(_QWORD *)v41 = v48;
        }
        v41 = (float *)((char *)v41 + v7);
        v39 = 1;
      }
      v42 = (float *)((char *)v42 + v7);
    }
    v59 = v5 * a3;
    v60 = (float *)((char *)v6 + v5 * a3);
    if (!v39)
      break;
    v61 = (char *)v43 - (char *)v40;
    if ((char *)v40 - (char *)v6 >= (char *)v43 - (char *)v40)
      v62 = (char *)v43 - (char *)v40;
    else
      v62 = (char *)v40 - (char *)v6;
    if (v62)
    {
      if (v108)
      {
        v63 = (_QWORD *)((char *)v43 - v62);
        v64 = v62 >> 3;
        v65 = v6;
        do
        {
          v66 = *(_QWORD *)v65;
          *(_QWORD *)v65 = *v63;
          v65 += 2;
          *v63++ = v66;
          --v64;
        }
        while (v64);
      }
      else
      {
        v67 = -(uint64_t)v62;
        v68 = v6;
        do
        {
          v69 = *(_BYTE *)v68;
          *(_BYTE *)v68 = *((_BYTE *)v43 + v67);
          v68 = (float *)((char *)v68 + 1);
          *((_BYTE *)v43 + v67) = v69;
          v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    v71 = (char *)v41 - (char *)v42;
    if ((char *)v41 - (char *)v42 >= (char *)v60 - ((char *)v41 + a3))
      v72 = (char *)v60 - ((char *)v41 + a3);
    else
      v72 = (char *)v41 - (char *)v42;
    if (v72)
    {
      if (v108)
      {
        v73 = (char *)v60 - v72;
        v74 = v72 >> 3;
        do
        {
          v75 = *(_QWORD *)v43;
          *(_QWORD *)v43 = *(_QWORD *)v73;
          v43 += 2;
          *(_QWORD *)v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        v76 = -(uint64_t)v72;
        do
        {
          v77 = *(_BYTE *)v43;
          *(_BYTE *)v43 = *((_BYTE *)v60 + v76);
          v43 = (float *)((char *)v43 + 1);
          *((_BYTE *)v60 + v76) = v77;
          v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3)
      result = mrec_qsort_r<DiskNgramContextQuadGroupCmp>(v6, v61 / a3, a3, a4);
    if (v71 <= (uint64_t)a3)
      return result;
    v6 = (float *)((char *)v60 - v71);
    v5 = v71 / a3;
    v78 = v106;
    if (((v6 | a3) & 7) != 0)
      v78 = 2;
    v108 = ((v6 | a3) & 7) == 0;
    v109 = v78;
    if (v5 < 7)
      goto LABEL_118;
  }
  v92 = (float *)((char *)v6 + a3);
  if (v59 > (uint64_t)a3)
  {
    v93 = v6;
    do
    {
      if (v92 > v6)
      {
        v94 = v93;
        v95 = v92;
        do
        {
          v96 = v95;
          v95 = (float *)((char *)v95 + v7);
          result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v95, v96, a4);
          if ((int)result < 1)
            break;
          if (v109)
          {
            if (v108)
            {
              v97 = 0;
              v98 = (uint64_t)v94 + a3;
              do
              {
                v99 = *(_QWORD *)(v98 + 8 * v97);
                *(_QWORD *)(v98 + 8 * v97) = *(_QWORD *)&v94[2 * v97];
                *(_QWORD *)&v94[2 * v97++] = v99;
              }
              while (v9 != v97);
            }
            else
            {
              v101 = 0;
              v102 = (uint64_t)v94 + a3;
              do
              {
                v103 = *(_BYTE *)(v102 + v101);
                *(_BYTE *)(v102 + v101) = *((_BYTE *)v94 + v101);
                *((_BYTE *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            v100 = *(_QWORD *)v96;
            *(_QWORD *)v96 = *(_QWORD *)v95;
            *(_QWORD *)v95 = v100;
          }
          v94 = (float *)((char *)v94 + v7);
        }
        while (v95 > v6);
      }
      v92 = (float *)((char *)v92 + a3);
      v93 = (float *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

uint64_t WordLanguageModel::loadPersistentAndIndex(WordLanguageModel *this)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  DgnStream *v19;
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;

  v52 = 0;
  v53 = 0;
  v2 = (const void *)OpenAndReadMrecHeader(*((_QWORD *)this + 5), 0x72u, 0, "LMWNGPER", &v53, &v52);
  if (v2)
  *((_QWORD *)this + 28) = v2;
  v5 = v53 == 18 && v52 == 6;
  v6 = v5;
  if (v5)
  {
    v7 = 18;
    v8 = 6;
  }
  else
  {
    v9 = *((_QWORD *)this + 5);
    if (*(_DWORD *)(v9 + 24))
      v10 = *(char **)(v9 + 16);
    else
      v10 = (char *)&unk_209A7B4F4;
    MrecHeaderCheckVersions(v10, "LMWNGPER", v53, v52, 0x17u, 7u);
    v8 = v52;
    v7 = v53;
  }
  MrecHeaderCheckLatestVersionIfShared(*((DFile **)this + 5), "LMWNGPER", v7, v8, 23, 7, v3, v4);
  v11 = *((_QWORD *)this + 28);
  v54 = 0;
  (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v11 + 72))(v11, &v54, 4, 1);
  v12 = v54;
  v13 = *((_QWORD *)this + 28);
  v54 = 0;
  (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v13 + 72))(v13, &v54, 4, 1);
  v14 = v54;
  v15 = *((_QWORD *)this + 28);
  v54 = 0;
  (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v15 + 72))(v15, &v54, 4, 1);
  v16 = v54;
  *((_DWORD *)this + 65) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 28) + 48))(*((_QWORD *)this + 28));
  v52 = 0;
  v53 = 0;
  v19 = (DgnStream *)OpenAndReadMrecHeader(*((_QWORD *)this + 5), 0x71u, 1, "LMWNGIND", &v53, &v52);
  v20 = v52;
  if (v53 == 19 && v52 == 10)
  {
    v21 = 19;
  }
  else
  {
    v22 = *((_QWORD *)this + 5);
    if (*(_DWORD *)(v22 + 24))
      v23 = *(char **)(v22 + 16);
    else
      v23 = (char *)&unk_209A7B4F4;
    MrecHeaderCheckVersions(v23, "LMWNGIND", v53, v52, 0x17u, 0xBu);
    v20 = v52;
    v21 = v53;
  }
  MrecHeaderCheckLatestVersionIfShared(*((DFile **)this + 5), "LMWNGIND", v21, v20, 23, 11, v17, v18);
  v54 = 0;
  (*(void (**)(DgnStream *, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v19 + 72))(v19, &v54, 4, 1);
  v24 = v54;
  v54 = 0;
  (*(void (**)(DgnStream *, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v19 + 72))(v19, &v54, 4, 1);
  v25 = v54;
  v54 = 0;
  (*(void (**)(DgnStream *, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v19 + 72))(v19, &v54, 4, 1);
  *((_DWORD *)this + 64) = v54;
  if (v12 != v24 || v14 != v25)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8580, (uint64_t)"lm/wordlm", 29, (uint64_t)"%u %u %u %u", v26, v27, v12);
  if (v12 != *((_DWORD *)this + 66) || v14 != *((_DWORD *)this + 67))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8589, (uint64_t)"lm/wordlm", 30, (uint64_t)"%.500s %u %u %u %u", v26, v27, (char)"The specified voc and svc are mismatched.  Details:");
  if (v16 != *((_DWORD *)this + 64))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8593, (uint64_t)"lm/wordlm", 69, (uint64_t)"%u %u", v26, v27, v16);
  v54 = 0;
  readObject((uint64_t)v19, (_QWORD *)this + 31, &v54);
  BigramData::loadBinary((WordLanguageModel *)((char *)this + 360), v19, &v54);
  WordLanguageModel::verifyBoWtForBiSc(this, v28, v29, v30, v31, v32, v33, v34);
  WordLanguageModel::throwOnBadBoWt(this, v35, v36, v37, v38, v39, v40, v41);
  if (*((_DWORD *)this + 16) >= 3u)
  {
    TrigramData::loadBinary((WordLanguageModel *)((char *)this + 744), v19, &v54);
    WordLanguageModel::throwOnBadTriBoWt(this, v42, v43, v44, v45, v46, v47, v48);
    if (*((_DWORD *)this + 16) >= 4u)
      QuadgramData::loadBinary((WordLanguageModel *)((char *)this + 1232), v19, &v54);
  }
  readObjectChecksumAndVerify(v19, v54);
  if (v25 != v54)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8611, (uint64_t)"lm/wordlm", 31, (uint64_t)"%u %u", v49, v50, v25);
  (**(void (***)(DgnStream *))v19)(v19);
  MemChunkFree(v19, 0);
  return v6;
}

uint64_t WordLanguageModel::reabsorbStaticLM(WordLanguageModel *this)
{
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t j;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t k;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _BYTE v26[568];
  __int128 v27;
  int v28;
  char v29;
  _BYTE v30[56];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  LMStats::resetStats((LMStats *)v30);
  v27 = xmmword_209A7B4B0;
  v28 = 3;
  v29 = 1;
  if (*((_DWORD *)this + 90))
  {
    v2 = *((unsigned int *)this + 140);
    if (v2 >= 2)
    {
      for (i = 1; i < v2; ++i)
      {
        if (*(_WORD *)(*((_QWORD *)this + 69) + 2 * i))
        {
          if (*((_DWORD *)this + 90))
          {
            v4 = i >> 5;
            if ((*(_DWORD *)(*((_QWORD *)this + 50) + 4 * v4) & (1 << i)) != 0
              && (*(_DWORD *)(*((_QWORD *)this + 52) + 4 * v4) & (1 << i)) == 0)
            {
              WordLanguageModel::loadBigramRecord((uint64_t)this, i, (uint64_t)v30, (unsigned int *)&v27);
              v2 = *((unsigned int *)this + 140);
            }
          }
        }
      }
    }
  }
  BigramData::BigramData((BigramData *)v26);
  BigramData::fillInFullyLoadedBigramData((WordLanguageModel *)((char *)this + 360), (BigramData *)v26);
  BigramData::copyBigramData((int **)this + 45, (const BigramData *)v26);
  BigramData::~BigramData((BigramData *)v26);
  result = (uint64_t)BigramData::compact((void **)this + 45);
  if (*((_DWORD *)this + 16) >= 3u)
  {
    if (*((_DWORD *)this + 186))
    {
      v8 = *((unsigned int *)this + 200);
      if (v8 >= 2)
      {
        for (j = 1; j < v8; ++j)
        {
          v10 = *((_QWORD *)this + 99);
          v11 = *(unsigned __int16 *)(v10 + 2 * j);
          if (*(_WORD *)(v10 + 2 * j))
          {
            v12 = 0;
            do
            {
              v13 = v12 + *(_DWORD *)(*((_QWORD *)this + 101) + 4 * j);
              if (*(_WORD *)(*((_QWORD *)this + 130) + 2 * v13))
              {
                if (*((_DWORD *)this + 186))
                {
                  v14 = v13 >> 5;
                  if ((*(_DWORD *)(*((_QWORD *)this + 111) + 4 * v14) & (1 << v13)) != 0
                    && (*(_DWORD *)(*((_QWORD *)this + 113) + 4 * v14) & (1 << v13)) == 0)
                  {
                    WordLanguageModel::loadTrigramRecord((uint64_t)this, v6, v7, v13, (uint64_t)v30, (unsigned int *)&v27);
                  }
                }
              }
              ++v12;
            }
            while (v11 != v12);
            v8 = *((unsigned int *)this + 200);
          }
        }
      }
    }
    TrigramData::TrigramData((TrigramData *)v26);
    TrigramData::fillInFullyLoadedTrigramData((WordLanguageModel *)((char *)this + 744), (TrigramData *)v26);
    TrigramData::copyTrigramData((WordLanguageModel *)((char *)this + 744), (const TrigramData *)v26);
    TrigramData::~TrigramData((TrigramData *)v26);
    result = (uint64_t)TrigramData::compact((void **)this + 93);
    if (*((_DWORD *)this + 16) > 3u)
    {
      if (*((_DWORD *)this + 308))
      {
        v17 = *((unsigned int *)this + 322);
        if (v17 >= 2)
        {
          for (k = 1; k < v17; ++k)
          {
            v19 = *((_QWORD *)this + 160);
            v20 = *(unsigned __int16 *)(v19 + 2 * k);
            if (*(_WORD *)(v19 + 2 * k))
            {
              v21 = 0;
              do
              {
                v22 = v21 + *(_DWORD *)(*((_QWORD *)this + 162) + 4 * k);
                if (*(_WORD *)(*((_QWORD *)this + 166) + 2 * v22))
                {
                  if (*((_DWORD *)this + 308))
                  {
                    v23 = v22 >> 5;
                    if ((*(_DWORD *)(*((_QWORD *)this + 168) + 4 * v23) & (1 << v22)) != 0
                      && (*(_DWORD *)(*((_QWORD *)this + 170) + 4 * v23) & (1 << v22)) == 0)
                    {
                      WordLanguageModel::loadQuadgramRecord((uint64_t)this, v15, v16, v22, (uint64_t)v30, (unsigned int *)&v27);
                    }
                  }
                }
                ++v21;
              }
              while (v20 != v21);
              v17 = *((unsigned int *)this + 322);
            }
          }
        }
      }
      QuadgramData::QuadgramData((QuadgramData *)v26);
      QuadgramData::fillInFullyLoadedQuadgramData((WordLanguageModel *)((char *)this + 1232), (QuadgramData *)v26);
      QuadgramData::copyQuadgramData((WordLanguageModel *)((char *)this + 1232), (const QuadgramData *)v26);
      QuadgramData::~QuadgramData((QuadgramData *)v26);
      result = (uint64_t)QuadgramData::compact((void **)this + 154);
    }
  }
  v24 = (_QWORD *)*((_QWORD *)this + 28);
  if (v24)
  {
    (*(void (**)(_QWORD))*v24)(*((_QWORD *)this + 28));
    result = MemChunkFree(v24, 0);
  }
  *((_QWORD *)this + 28) = 0;
  v25 = (_QWORD *)*((_QWORD *)this + 5);
  if (v25)
  {
    (*(void (**)(_QWORD))*v25)(*((_QWORD *)this + 5));
    result = MemChunkFree(v25, 0);
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 33) = 0;
  return result;
}

void sub_209993998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void WordLanguageModel::loadBigramRecord(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v8;
  unint64_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int v12;
  int64x2_t v13;
  int64x2_t v14;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  int64x2_t v21;
  char v22;

  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v22);
  v20 = 0u;
  v21 = 0u;
  SnapTime::recordTime((SnapTime *)&v20, 1, 0, 0, 0);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 224) + 24))(*(_QWORD *)(a1 + 224), *(unsigned int *)(*(_QWORD *)(a1 + 536) + 4 * a2));
  v18 = 0;
  v19 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v16[0] = 0;
  v16[1] = 0;
  v15[0] = 0;
  v15[1] = 0;
  (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 224) + 96))(*(_QWORD *)(a1 + 224), a4[2], *a4, 1);
  WordLanguageModel::readBigramRecord(a1, a2, (uint64_t)&v18, (uint64_t)v17, (uint64_t)v16, (uint64_t)v15);
  BigramData::allocLoaded(a1 + 360, a2);
  if (*(_DWORD *)(a1 + 376))
  {
    if ((_DWORD)v19)
    {
      v8 = 0;
      do
      {
        BigramData::setSearchSuccIdForIndex(a1 + 360, a2, v8, *(_WORD *)(v18 + 2 * v8));
        BigramData::setSearchQuantizedScoreForIndex(a1 + 360, a2, v8, *(unsigned __int8 *)(v16[0] + v8));
        ++v8;
      }
      while (v8 < v19);
    }
  }
  else if ((_DWORD)v19)
  {
    v9 = 0;
    do
    {
      BigramData::setSearchSuccIdForIndex(a1 + 360, a2, v9, *(_WORD *)(v18 + 2 * v9));
      BigramData::setSearchScoreForIndex(a1 + 360, a2, v9, *(unsigned __int16 *)(v17[0] + 2 * v9));
      ++v9;
    }
    while (v9 < v19);
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 224) + 104))(*(_QWORD *)(a1 + 224), a4[1]);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  v10 = v14;
  v11 = v21;
  *(int64x2_t *)(a3 + 56) = vaddq_s64(vsubq_s64(v13, v20), *(int64x2_t *)(a3 + 56));
  *(int64x2_t *)(a3 + 72) = vaddq_s64(vsubq_s64(v10, v11), *(int64x2_t *)(a3 + 72));
  v12 = *(_DWORD *)(a3 + 12) + *(unsigned __int16 *)(*(_QWORD *)(a1 + 552) + 2 * a2);
  ++*(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 12) = v12;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v15);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v16);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v22);
}

void sub_209993BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)(v5 - 49));
  _Unwind_Resume(a1);
}

void WordLanguageModel::loadTrigramRecord(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int *a6)
{
  unint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int v14;
  int64x2_t v15;
  int64x2_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  int64x2_t v23;
  char v24;

  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v24);
  v22 = 0u;
  v23 = 0u;
  SnapTime::recordTime((SnapTime *)&v22, 1, 0, 0, 0);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 224) + 24))(*(_QWORD *)(a1 + 224), *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 4 * a4));
  v20 = 0;
  v21 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v18[0] = 0;
  v18[1] = 0;
  v17[0] = 0;
  v17[1] = 0;
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 224) + 96))(*(_QWORD *)(a1 + 224), a6[3], *a6, *((unsigned __int8 *)a6 + 20));
  WordLanguageModel::readTrigramRecord(a1, a4, (uint64_t)&v20, (uint64_t)v19, (uint64_t)v18, (uint64_t)v17);
  TrigramData::allocLoaded(a1 + 744, a4);
  if (*(_DWORD *)(a1 + 784))
  {
    if ((_DWORD)v21)
    {
      v10 = 0;
      do
      {
        TrigramData::setSearchSuccIdForIndex(a1 + 744, a4, v10, *(_WORD *)(v20 + 2 * v10));
        TrigramData::setSearchQuantizedScoreForIndex(a1 + 744, a4, v10, *(unsigned __int8 *)(v18[0] + v10));
        ++v10;
      }
      while (v10 < v21);
    }
  }
  else if ((_DWORD)v21)
  {
    v11 = 0;
    do
    {
      TrigramData::setSearchSuccIdForIndex(a1 + 744, a4, v11, *(_WORD *)(v20 + 2 * v11));
      TrigramData::setSearchScoreForIndex(a1 + 744, a4, v11, *(unsigned __int16 *)(v19[0] + 2 * v11));
      ++v11;
    }
    while (v11 < v21);
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 224) + 104))(*(_QWORD *)(a1 + 224), a6[1]);
  v15 = 0u;
  v16 = 0u;
  SnapTime::recordTime((SnapTime *)&v15, 1, 0, 0, 0);
  v12 = v16;
  v13 = v23;
  *(int64x2_t *)(a5 + 88) = vaddq_s64(vsubq_s64(v15, v22), *(int64x2_t *)(a5 + 88));
  *(int64x2_t *)(a5 + 104) = vaddq_s64(vsubq_s64(v12, v13), *(int64x2_t *)(a5 + 104));
  v14 = *(_DWORD *)(a5 + 28) + *(unsigned __int16 *)(*(_QWORD *)(a1 + 1040) + 2 * a4);
  ++*(_DWORD *)(a5 + 24);
  *(_DWORD *)(a5 + 28) = v14;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v24);
}

void sub_209993E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)(v5 - 49));
  _Unwind_Resume(a1);
}

void WordLanguageModel::loadQuadgramRecord(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v10;
  unint64_t v11;
  __int16 v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  _QWORD *v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[2];
  int64x2_t v46;
  int64x2_t v47;
  _BYTE v48[9];

  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)v48);
  v46 = 0u;
  v47 = 0u;
  SnapTime::recordTime((SnapTime *)&v46, 1, 0, 0, 0);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 224) + 24))(*(_QWORD *)(a1 + 224), *(unsigned int *)(*(_QWORD *)(a1 + 1480) + 4 * a4));
  v45[0] = 0;
  v45[1] = 0;
  v43 = 0;
  v44 = 0;
  v42[0] = 0;
  v42[1] = 0;
  v41[0] = 0;
  v41[1] = 0;
  v40[0] = 0;
  v40[1] = 0;
  v39[0] = 0;
  v39[1] = 0;
  v38[0] = 0;
  v38[1] = 0;
  v37[0] = 0;
  v37[1] = 0;
  v36[0] = 0;
  v36[1] = 0;
  v35[0] = 0;
  v35[1] = 0;
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 224) + 96))(*(_QWORD *)(a1 + 224), a6[4], *a6, *((unsigned __int8 *)a6 + 20));
  WordLanguageModel::readQuadgramRecord(a1, a4, (uint64_t)v45, (uint64_t)&v43, (uint64_t)v42, (uint64_t)v41, (uint64_t)v40, (uint64_t)v39, (uint64_t)v38, (uint64_t)v37, (uint64_t)v36, (uint64_t)v35);
  QuadgramData::allocLoaded(a1 + 1232, a4, v45);
  v10 = v44;
  if (*(_DWORD *)(a1 + 1256))
  {
    if (!(_DWORD)v44)
      goto LABEL_28;
    v11 = 0;
    do
    {
      v12 = *(_WORD *)(v43 + 2 * v11);
      v13 = *(unsigned int *)(*(_QWORD *)(a1 + 1480) + 4 * a4);
      if (*(_DWORD *)(a1 + 1232) && (*(_DWORD *)(*(_QWORD *)(a1 + 1344) + 4 * (a4 >> 5)) & (1 << a4)) != 0)
      {
        LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a1 + 1656) + 4 * v13);
        *(_WORD *)(*(_QWORD *)(a1 + 1672) + 2 * (v11 + v13)) = v12;
        v14 = (_BYTE *)(v40[0] + v11);
        v15 = (_QWORD *)(a1 + 1704);
      }
      else
      {
        *(_WORD *)(*(_QWORD *)(a1 + 1496) + 2 * (v11 + v13)) = v12;
        v14 = (_BYTE *)(v40[0] + v11);
        v15 = (_QWORD *)(a1 + 1544);
      }
      *(_BYTE *)(*v15 + (v11++ + v13)) = *v14;
    }
    while (v11 < v44);
    if (!(_DWORD)v44)
      goto LABEL_28;
  }
  else
  {
    if (!(_DWORD)v44)
      goto LABEL_28;
    v16 = 0;
    v17 = v43;
    v18 = *(unsigned int *)(*(_QWORD *)(a1 + 1480) + 4 * a4);
    v19 = *(_DWORD *)(a1 + 1232);
    v20 = v41[0];
    do
    {
      v21 = *(_WORD *)(v17 + 2 * v16);
      if (v19 && (*(_DWORD *)(*(_QWORD *)(a1 + 1344) + 4 * (a4 >> 5)) & (1 << a4)) != 0)
      {
        v22 = *(_DWORD *)(*(_QWORD *)(a1 + 1656) + 4 * v18);
        *(_WORD *)(*(_QWORD *)(a1 + 1672) + 2 * (v16 + v22)) = v21;
        v23 = (_QWORD *)(a1 + 1688);
      }
      else
      {
        *(_WORD *)(*(_QWORD *)(a1 + 1496) + 2 * (v18 + v16)) = v21;
        v22 = v18;
        v23 = (_QWORD *)(a1 + 1528);
      }
      *(_WORD *)(*v23 + 2 * (v16 + v22)) = *(_WORD *)(v20 + 2 * v16);
      ++v16;
    }
    while (v10 != v16);
  }
  v24 = 0;
  v25 = 0;
  do
  {
    LODWORD(v26) = *(unsigned __int16 *)(v45[0] + 2 * v24);
    if (*(_DWORD *)(a1 + 1272))
    {
      if (*(_WORD *)(v45[0] + 2 * v24))
      {
        v27 = 0;
        do
        {
          v28 = (v25 + v27);
          QuadgramData::setQuad3SuccIdForIndex(a1 + 1232, a4, v24, v27, *(_WORD *)(v42[0] + 2 * v28));
          QuadgramData::setQuantizedScoreForIndex(a1 + 1232, a4, v24, v27++, *(_BYTE *)(v38[0] + v28));
          v26 = *(unsigned __int16 *)(v45[0] + 2 * v24);
        }
        while (v27 < v26);
      }
    }
    else if (*(_WORD *)(v45[0] + 2 * v24))
    {
      v29 = 0;
      do
      {
        v30 = (v25 + v29);
        QuadgramData::setQuad3SuccIdForIndex(a1 + 1232, a4, v24, v29, *(_WORD *)(v42[0] + 2 * v30));
        QuadgramData::setScoreForIndex(a1 + 1232, a4, v24, v29++, *(_WORD *)(v39[0] + 2 * v30));
        v26 = *(unsigned __int16 *)(v45[0] + 2 * v24);
      }
      while (v29 < v26);
    }
    v25 += v26;
    *(_DWORD *)(a5 + 44) += v26;
    ++v24;
  }
  while (v24 < v44);
LABEL_28:
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 224) + 104))(*(_QWORD *)(a1 + 224), a6[1]);
  v33 = 0u;
  v34 = 0u;
  SnapTime::recordTime((SnapTime *)&v33, 1, 0, 0, 0);
  v31 = v34;
  v32 = v47;
  *(int64x2_t *)(a5 + 120) = vaddq_s64(vsubq_s64(v33, v46), *(int64x2_t *)(a5 + 120));
  *(int64x2_t *)(a5 + 136) = vaddq_s64(vsubq_s64(v31, v32), *(int64x2_t *)(a5 + 136));
  ++*(_DWORD *)(a5 + 40);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v35);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v36);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v37);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v38);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v39);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v40);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v41);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v42);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v43);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v45);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)v48);
}

void sub_2099942C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a17);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a21);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a29);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31 - 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31 - 144);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)(v31 - 89));
  _Unwind_Resume(a1);
}

void WordLanguageModel::setLMScale(WordLanguageModel *this, unsigned int a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  double v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _WORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _WORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _WORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _WORD *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  _WORD *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t i;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  _WORD *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _WORD *v58;
  unsigned int v59;
  uint64_t v60;
  _WORD *v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  _WORD *v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t j;
  uint64_t v70;
  _WORD *v71;
  unsigned int v72;
  _WORD *v73;
  uint64_t v74;

  if (*((_QWORD *)this + 5))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8946, (uint64_t)"lm/wordlm", 21, (uint64_t)"%s", a9, a10, (char)&errStr_lm_wordlm_E_LMSCALE_ON_DISK);
  v12 = (double)a2;
  LODWORD(a4) = *((_DWORD *)this + 8);
  v13 = (double)*(unint64_t *)&a4;
  v14 = (double)a2 / v13;
  v15 = *((_DWORD *)this + 16);
  if (v15 >= 4)
  {
    v16 = *((_DWORD *)this + 318);
    if (v16)
    {
      v73 = 0;
      v74 = 0;
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)&v73, (uint64_t *)this + 158, 0, v16);
      v17 = v74;
      if ((_DWORD)v74)
      {
        v18 = v73;
        v19 = v74;
        do
        {
          v20 = (unsigned __int16)*v18;
          if (v20 != 20000)
            *v18 = (int)((double)v20 * v14 + 0.5);
          ++v18;
          --v19;
        }
        while (v19);
      }
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 1264, (uint64_t *)&v73, 0, v17);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v73);
    }
    else
    {
      v21 = *((unsigned int *)this + 400);
      if ((_DWORD)v21)
      {
        v22 = (_WORD *)*((_QWORD *)this + 199);
        v12 = 0.5;
        do
        {
          v23 = (unsigned __int16)*v22;
          if (v23 != 20000)
          {
            v13 = (double)v23 * v14 + 0.5;
            *v22 = (int)v13;
          }
          ++v22;
          --v21;
        }
        while (v21);
      }
    }
    v24 = *((_DWORD *)this + 314);
    if (v24)
    {
      v73 = 0;
      v74 = 0;
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)&v73, (uint64_t *)this + 156, 0, v24);
      v25 = v74;
      if ((_DWORD)v74)
      {
        v26 = v73;
        v27 = v74;
        do
        {
          v28 = (unsigned __int16)*v26;
          if (v28 != 20000)
            *v26 = (int)((double)(__int16)v28 * v14 + 0.5);
          ++v26;
          --v27;
        }
        while (v27);
      }
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 1248, (uint64_t *)&v73, 0, v25);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v73);
    }
    else
    {
      v29 = *((unsigned int *)this + 384);
      if ((_DWORD)v29)
      {
        v30 = (_WORD *)*((_QWORD *)this + 191);
        v12 = 0.5;
        do
        {
          v31 = (unsigned __int16)*v30;
          if (v31 != 20000)
          {
            v13 = (double)(__int16)v31 * v14 + 0.5;
            *v30 = (int)v13;
          }
          ++v30;
          --v29;
        }
        while (v29);
      }
    }
    v15 = *((_DWORD *)this + 16);
  }
  if (v15 >= 3)
  {
    v32 = *((_DWORD *)this + 196);
    if (v32)
    {
      v73 = 0;
      v74 = 0;
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)&v73, (uint64_t *)this + 97, 0, v32);
      v33 = v74;
      if ((_DWORD)v74)
      {
        v34 = v73;
        v35 = v74;
        do
        {
          v36 = (unsigned __int16)*v34;
          if (v36 != 20000)
            *v34 = (int)((double)v36 * v14 + 0.5);
          ++v34;
          --v35;
        }
        while (v35);
      }
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 776, (uint64_t *)&v73, 0, v33);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v73);
    }
    else
    {
      v37 = *((unsigned int *)this + 200);
      if (v37 >= 2)
      {
        v38 = *((_QWORD *)this + 99);
        for (i = 1; i < v37; ++i)
        {
          if (*(_WORD *)(v38 + 2 * i))
          {
            v40 = 0;
            do
            {
              v41 = v40 + *(_DWORD *)(*((_QWORD *)this + 101) + 4 * i);
              if (*(__int16 *)(*((_QWORD *)this + 103) + 2 * v41) != -1)
              {
                TrigramData::rescaleScores((_QWORD *)this + 93, v41, v14);
                v38 = *((_QWORD *)this + 99);
              }
              ++v40;
            }
            while (v40 < *(unsigned __int16 *)(v38 + 2 * i));
            v37 = *((unsigned int *)this + 200);
          }
        }
      }
    }
    v42 = *((_DWORD *)this + 192);
    if (v42)
    {
      v73 = 0;
      v74 = 0;
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)&v73, (uint64_t *)this + 95, 0, v42);
      v43 = v74;
      if ((_DWORD)v74)
      {
        v44 = v73;
        v45 = v74;
        do
        {
          v46 = (unsigned __int16)*v44;
          if (v46 != 20000)
            *v44 = (int)((double)(__int16)v46 * v14 + 0.5);
          ++v44;
          --v45;
        }
        while (v45);
      }
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 760, (uint64_t *)&v73, 0, v43);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v73);
    }
    else
    {
      v47 = *((unsigned int *)this + 200);
      if (v47 >= 2)
      {
        v48 = *((_QWORD *)this + 99);
        v49 = 1;
        v12 = 0.5;
        do
        {
          v50 = *(_WORD *)(v48 + 2 * v49);
          if (v50)
          {
            v51 = 0;
            v52 = *(_DWORD *)(*((_QWORD *)this + 101) + 4 * v49);
            v53 = *((_QWORD *)this + 103);
            do
            {
              v54 = (v52 + v51);
              if (*(__int16 *)(v53 + 2 * v54) != -1)
              {
                v55 = *((_QWORD *)this + 105);
                v56 = *(unsigned __int16 *)(v55 + 2 * v54);
                if (v56 != 20000)
                {
                  v13 = (double)(__int16)v56 * v14 + 0.5;
                  *(_WORD *)(v55 + 2 * v54) = (int)v13;
                  v50 = *(_WORD *)(v48 + 2 * v49);
                }
              }
              ++v51;
            }
            while (v51 < v50);
          }
          ++v49;
        }
        while (v49 != v47);
      }
    }
  }
  if (*((_DWORD *)this + 16) >= 2u)
  {
    v57 = *((unsigned int *)this + 84);
    if ((_DWORD)v57)
    {
      v58 = (_WORD *)*((_QWORD *)this + 41);
      v12 = 0.5;
      do
      {
        v59 = (unsigned __int16)*v58;
        if (v59 != 20000)
        {
          v13 = (double)v59 * v14 + 0.5;
          *v58 = (int)v13;
        }
        ++v58;
        --v57;
      }
      while (v57);
    }
    v60 = *((unsigned int *)this + 88);
    if ((_DWORD)v60)
    {
      v61 = (_WORD *)*((_QWORD *)this + 43);
      v12 = 0.5;
      do
      {
        v62 = (unsigned __int16)*v61;
        if (v62 != 20000)
        {
          v13 = (double)(__int16)v62 * v14 + 0.5;
          *v61 = (int)v13;
        }
        ++v61;
        --v60;
      }
      while (v60);
    }
    v63 = *((_DWORD *)this + 94);
    if (v63)
    {
      v73 = 0;
      v74 = 0;
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)&v73, (uint64_t *)this + 46, 0, v63);
      v64 = v74;
      if ((_DWORD)v74)
      {
        v65 = v73;
        v66 = v74;
        do
        {
          v67 = (unsigned __int16)*v65;
          if (v67 != 20000)
            *v65 = (int)((double)v67 * v14 + 0.5);
          ++v65;
          --v66;
        }
        while (v66);
      }
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 368, (uint64_t *)&v73, 0, v64);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v73);
    }
    else
    {
      v68 = *((unsigned int *)this + 140);
      if (v68 >= 2)
      {
        for (j = 1; j < v68; ++j)
        {
          if (*(_WORD *)(*((_QWORD *)this + 69) + 2 * j))
          {
            BigramData::rescaleScores((_QWORD *)this + 45, j, v14);
            v68 = *((unsigned int *)this + 140);
          }
        }
      }
    }
  }
  v70 = *((unsigned int *)this + 44);
  if ((_DWORD)v70)
  {
    v71 = (_WORD *)*((_QWORD *)this + 21);
    v12 = 0.5;
    do
    {
      v72 = (unsigned __int16)*v71;
      if (v72 != 20000)
      {
        v13 = (double)v72 * v14 + 0.5;
        *v71 = (int)v13;
      }
      ++v71;
      --v70;
    }
    while (v70);
  }
  *((_DWORD *)this + 8) = a2;
  WordLanguageModel::initializeScoreToProb(this, v12, v13);
}

void sub_2099948E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *TrigramData::rescaleScores(_QWORD *this, unsigned int a2, double a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unsigned int v17;

  v3 = this[37];
  v4 = *(unsigned __int16 *)(v3 + 2 * a2);
  if (*(_WORD *)(v3 + 2 * a2))
  {
    if (((*(_DWORD *)(this[16] + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      v5 = *(unsigned int *)(this[35] + 4 * a2);
      v6 = (v5 + v4);
      if (v6 > v5)
      {
        v7 = v6 - v5;
        v8 = (_WORD *)(this[39] + 2 * v5);
        do
        {
          v9 = (unsigned __int16)*v8;
          if (v9 != 20000)
            *v8 = (int)((double)v9 * a3 + 0.5);
          ++v8;
          --v7;
        }
        while (v7);
      }
    }
    else
    {
      v10 = this[35];
      v11 = *(unsigned int *)(v10 + 4 * a2);
      if (v4 == 1)
      {
        v12 = v11 & 0xFFFF0000;
        if ((unsigned __int16)*(_DWORD *)(v10 + 4 * a2) == 20000)
          v13 = 20000;
        else
          v13 = (unsigned __int16)(int)((double)(unsigned __int16)*(_DWORD *)(v10 + 4 * a2) * a3 + 0.5);
        *(_DWORD *)(v10 + 4 * a2) = v13 | v12;
      }
      else
      {
        v14 = (v11 + v4);
        if (v14 > v11)
        {
          v15 = v14 - v11;
          v16 = (_WORD *)(this[45] + 2 * v11);
          do
          {
            v17 = (unsigned __int16)*v16;
            if (v17 != 20000)
              *v16 = (int)((double)v17 * a3 + 0.5);
            ++v16;
            --v15;
          }
          while (v15);
        }
      }
    }
  }
  return this;
}

_QWORD *BigramData::rescaleScores(_QWORD *this, unsigned int a2, double a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unsigned int v17;

  v3 = this[24];
  v4 = *(unsigned __int16 *)(v3 + 2 * a2);
  if (*(_WORD *)(v3 + 2 * a2))
  {
    if (((*(_DWORD *)(this[3] + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      v5 = *(unsigned int *)(this[22] + 4 * a2);
      v6 = (v5 + v4);
      if (v6 > v5)
      {
        v7 = v6 - v5;
        v8 = (_WORD *)(this[26] + 2 * v5);
        do
        {
          v9 = (unsigned __int16)*v8;
          if (v9 != 20000)
            *v8 = (int)((double)v9 * a3 + 0.5);
          ++v8;
          --v7;
        }
        while (v7);
      }
    }
    else
    {
      v10 = this[22];
      v11 = *(unsigned int *)(v10 + 4 * a2);
      if (v4 == 1)
      {
        v12 = v11 & 0xFFFF0000;
        if ((unsigned __int16)*(_DWORD *)(v10 + 4 * a2) == 20000)
          v13 = 20000;
        else
          v13 = (unsigned __int16)(int)((double)(unsigned __int16)*(_DWORD *)(v10 + 4 * a2) * a3 + 0.5);
        *(_DWORD *)(v10 + 4 * a2) = v13 | v12;
      }
      else
      {
        v14 = (v11 + v4);
        if (v14 > v11)
        {
          v15 = v14 - v11;
          v16 = (_WORD *)(this[32] + 2 * v11);
          do
          {
            v17 = (unsigned __int16)*v16;
            if (v17 != 20000)
              *v16 = (int)((double)v17 * a3 + 0.5);
            ++v16;
            --v15;
          }
          while (v15);
        }
      }
    }
  }
  return this;
}

uint64_t WordLanguageModel::recentBufferUsesWord(WordLanguageModel *this)
{
  return 1;
}

BOOL WordLanguageModel::hasRecentBuffer(WordLanguageModel *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 29);
  return v2 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 120))(v2) & 1) != 0
      || LanguageModel::hasRecentBuffer(this);
}

uint64_t WordLanguageModel::getRecentBufferLength(WordLanguageModel *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 29);
  if (v2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2);
  else
    v3 = 0;
  LODWORD(result) = LanguageModel::getRecentBufferLength(this);
  if (v3 <= result)
    return result;
  else
    return v3;
}

WordLanguageModel ***WordLanguageModel::addToRecent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 232);
  if (v6)
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v6 + 136))(v6, a2, a3);
  return LanguageModel::addToRecent((WordLanguageModel ***)a1, a2, a3);
}

void WordLanguageModel::clearRecent(WordLanguageModel *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 29);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
  LanguageModel::clearRecent(this);
}

uint64_t WordLanguageModel::checkWordIdLmIdValidityAgreement(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  uint64_t result;

  if (*((_DWORD *)this + 32))
  {
    v11 = *(_DWORD *)(*((_QWORD *)this + 15) + 4 * a2);
    if ((_DWORD)a3)
    {
LABEL_3:
      if (v11 == -1)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9154, (uint64_t)"lm/wordlm", 50, (uint64_t)"%u %u", a7, a8, a2);
      goto LABEL_14;
    }
  }
  else
  {
    if (*((_DWORD *)this + 36))
    {
      v11 = *(unsigned __int16 *)(*((_QWORD *)this + 17) + 2 * a2);
      v12 = v11 == 0xFFFF;
    }
    else
    {
      v11 = *(unsigned __int8 *)(*((_QWORD *)this + 19) + a2);
      v12 = v11 == 255;
    }
    if (v12)
      v11 = -1;
    if ((_DWORD)a3)
      goto LABEL_3;
  }
  if (v11 != -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9159, (uint64_t)"lm/wordlm", 51, (uint64_t)"%u %u", a7, a8, a2);
LABEL_14:
  if (!*((_BYTE *)this + 276))
    goto LABEL_28;
  if (*((_DWORD *)this + 72))
  {
    v13 = *(_DWORD *)(*((_QWORD *)this + 35) + 4 * a2);
    if ((_DWORD)a3)
    {
LABEL_17:
      if (v13 == -1)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9169, (uint64_t)"lm/wordlm", 63, (uint64_t)"%u %u", a7, a8, a2);
      goto LABEL_28;
    }
  }
  else
  {
    if (*((_DWORD *)this + 76))
    {
      v13 = *(unsigned __int16 *)(*((_QWORD *)this + 37) + 2 * a2);
      v14 = v13 == 0xFFFF;
    }
    else
    {
      v13 = *(unsigned __int8 *)(*((_QWORD *)this + 39) + a2);
      v14 = v13 == 255;
    }
    if (v14)
      v13 = -1;
    if ((_DWORD)a3)
      goto LABEL_17;
  }
  if (v13 != -1)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9175, (uint64_t)"lm/wordlm", 64, (uint64_t)"%u %u", a7, a8, a2);
LABEL_28:
  result = *((_QWORD *)this + 29);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 208))(result, a2, a3);
  return result;
}

void WordLanguageModel::verifyUnigrams(WordLanguageModel *this, const char *a2)
{
  unint64_t v2;
  char v3;
  int v5;
  unint64_t i;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *((unsigned int *)this + 26);
  if (v2 >= 2)
  {
    v3 = (char)a2;
    v5 = *((_DWORD *)this + 14) - 1;
    for (i = 1; i < v2; ++i)
    {
      v7 = *(unsigned __int16 *)(*((_QWORD *)this + 21) + 2 * i);
      if (v7 != 20000 && v5 < v7)
      {
        WordLanguageModel::getLmIdWordName(this, i, 0);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9242, (uint64_t)"lm/wordlm", 74, (uint64_t)"%.500s %u %d %d %.500s", v9, v10, v3);
        v2 = *((unsigned int *)this + 26);
      }
    }
  }
}

const char *WordLanguageModel::getLmIdWordName(WordLanguageModel *this, int a2, int a3)
{
  unsigned int WordId;
  uint64_t v6;
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;

  WordId = WordLanguageModel::getWordId(this, a2, a3);
  v6 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v6 + 388) > WordId && *(_BYTE *)(*(_QWORD *)(v6 + 104) + WordId))
    return (const char *)(*(_QWORD *)(v6 + 224) + *(unsigned int *)(*(_QWORD *)(v6 + 200) + 4 * WordId));
  if (a2 == -1)
    return "INVALID_LMID";
  v8 = "END_CONTEXT";
  v9 = "UNKNOWN";
  if (!a2)
    v9 = "ZERO_LMID";
  v10 = *((_DWORD *)this + 29);
  if (a2 == -2)
    v9 = "NO_CONTEXT_LMID";
  if (v10 != a2)
    v8 = v9;
  v11 = "STARTEND_CONTEXT";
  if (v10 != a2)
    v11 = "START_CONTEXT";
  if (*((_DWORD *)this + 28) == a2)
    return v11;
  else
    return v8;
}

uint64_t WordLanguageModel::verifyLM(WordLanguageModel *this, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;

  if ((_DWORD)a2)
  {
    v11 = *(unsigned int *)(*((_QWORD *)this + 2) + 388);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *((_QWORD *)this + 2);
        v14 = i < *(unsigned int *)(v13 + 388) && *(unsigned __int8 *)(*(_QWORD *)(v13 + 104) + i) != 0;
        (*(void (**)(WordLanguageModel *, unint64_t, _BOOL8))(*(_QWORD *)this + 208))(this, i, v14);
      }
    }
  }
  WordLanguageModel::checkWordListLMAgreement(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  WordLanguageModel::verifyUnigrams(this, a3);
  if (*((_DWORD *)this + 16) >= 2u)
  {
    v21 = *((_QWORD *)this + 29);
    if (v21)
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v21 + 216))(v21, a2, a3);
    WordLanguageModel::verifyBackoffUnigrams(this, a3, v15, v16, v17, v18, v19, v20);
    WordLanguageModel::verifyBigrams(this, a3, v22, v23, v24, v25, v26, v27);
    if (*((_DWORD *)this + 16) >= 3u)
    {
      WordLanguageModel::verifyTrigrams(this, a3, v28, v29, v30, v31, v32, v33);
      if (*((_DWORD *)this + 16) >= 4u)
        WordLanguageModel::verifyQuadgrams(this, a3, v34, v35, v36, v37, v38, v39);
    }
  }
  result = *((_QWORD *)this + 1);
  if (result)
    return MrecInitModule_sdpres_sdapi();
  return result;
}

void WordLanguageModel::verifyBackoffUnigrams(WordLanguageModel *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  int v30;

  if (*((_DWORD *)this + 26) >= 2u)
  {
    v8 = (char)a2;
    v10 = *((_DWORD *)this + 14);
    v11 = v10 - 1;
    v12 = 1;
    v30 = 1 - v10;
    while (1)
    {
      v13 = 328;
      if (!*((_DWORD *)this + 84))
        v13 = 168;
      v14 = *(unsigned __int16 *)(*(_QWORD *)((char *)this + v13) + 2 * v12);
      v15 = *(unsigned __int16 *)(*((_QWORD *)this + 21) + 2 * v12);
      v16 = *(unsigned __int16 *)(*((_QWORD *)this + 43) + 2 * v12);
      v17 = (__int16)v16;
      if (v14 != 20000 && v15 != 20000 && v16 != 20000)
        goto LABEL_18;
      if (v14 != 20000 || v15 != 20000)
        break;
LABEL_30:
      if (v17 != 20000 && (v30 > v17 || v11 < v17))
      {
        WordLanguageModel::getLmIdWordName(this, v12, 0);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9333, (uint64_t)"lm/wordlm", 75, (uint64_t)"%.500s %u %d %d %.500s", v28, v29, v8);
      }
      if (++v12 >= (unint64_t)*((unsigned int *)this + 26))
        return;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9312, (uint64_t)"lm/wordlm", 72, (uint64_t)"%.500s %u %d %d %d", a7, a8, v8);
LABEL_18:
    if (v14 != 20000 && v11 < v14)
    {
      WordLanguageModel::getLmIdWordName(this, v12, 0);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9320, (uint64_t)"lm/wordlm", 73, (uint64_t)"%.500s %u %d %d %.500s", v22, v23, v8);
    }
    if (v15 != 20000 && v11 < v15)
    {
      WordLanguageModel::getLmIdWordName(this, v12, 0);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9326, (uint64_t)"lm/wordlm", 74, (uint64_t)"%.500s %u %d %d %.500s", v25, v26, v8);
    }
    goto LABEL_30;
  }
}

void WordLanguageModel::verifyBigrams(WordLanguageModel *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BigramData *v9;
  unint64_t i;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int SearchSuccIdForIndex;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  int SearchScoreForIndex;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;

  v39 = (char)a2;
  if (*((_DWORD *)this + 140) >= 2u)
  {
    v40 = *((_DWORD *)this + 14) - 1;
    v9 = (WordLanguageModel *)((char *)this + 360);
    for (i = 1; i < *((unsigned int *)this + 140); ++i)
    {
      if (*(_WORD *)(*((_QWORD *)this + 69) + 2 * i))
      {
        if (*(_WORD *)(*((_QWORD *)this + 43) + 2 * i) == 20000)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9353, (uint64_t)"lm/wordlm", 81, (uint64_t)"%.500s %u", a7, a8, v39);
        if (!*(_DWORD *)v9)
        {
          v11 = i >> 5;
          v12 = 1 << i;
LABEL_11:
          v13 = i;
LABEL_12:
          v14 = *(_DWORD *)(*((_QWORD *)this + 48) + 4 * v11);
          v15 = *(unsigned __int16 *)(*((_QWORD *)this + 69) + 2 * i);
          if ((v14 & v12) != 0)
          {
            v16 = *((_DWORD *)this + 26);
            if (v16 > v15)
              v17 = v15 + 1;
            else
              v17 = v16;
            if (v17 >= 2)
            {
              for (j = 1; j != v17; ++j)
              {
                v19 = 328;
                if (!*((_DWORD *)this + 84))
                  v19 = 168;
                v20 = *(unsigned __int16 *)(*(_QWORD *)((char *)this + v19) + 2 * j);
                if (v20 != 20000)
                {
                  v21 = *(_DWORD *)(*((_QWORD *)this + 67) + 4 * i) + (unsigned __int16)j - 1;
                  if (*((_DWORD *)this + 94))
                  {
                    v21 = *(unsigned __int8 *)(*((_QWORD *)this + 73) + v21);
                    v22 = *((_QWORD *)this + 46);
                  }
                  else
                  {
                    v22 = *((_QWORD *)this + 71);
                  }
                  v23 = *(unsigned __int16 *)(v22 + 2 * v21);
                  if (v23 != 20000 && *(__int16 *)(*((_QWORD *)this + 43) + 2 * i) + v20 != v23 && v40 < v23)
                  {
                    WordLanguageModel::getLmIdWordName(this, v13, 1);
                    WordLanguageModel::getLmIdWordName(this, j, 0);
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9394, (uint64_t)"lm/wordlm", 79, (uint64_t)"%.500s %u %u %d %.500s %.500s", v25, v26, v39);
                  }
                }
              }
            }
          }
          else
          {
            v27 = v15 - 1;
            while (1)
            {
              v28 = v27;
              if (!v27)
                break;
              SearchSuccIdForIndex = BigramData::getSearchSuccIdForIndex(v9, v13, v27);
              v27 = v28 - 1;
              if (*((_DWORD *)this + 26) > SearchSuccIdForIndex)
                goto LABEL_38;
            }
            if (*((_DWORD *)this + 26) <= BigramData::getSearchSuccIdForIndex(v9, v13, 0))
              continue;
LABEL_38:
            v30 = 0;
            do
            {
              v31 = BigramData::getSearchSuccIdForIndex(v9, v13, v30);
              v32 = 328;
              if (!*((_DWORD *)this + 84))
                v32 = 168;
              if (*(_WORD *)(*(_QWORD *)((char *)this + v32) + 2 * v31) != 20000)
              {
                v33 = v31;
                SearchScoreForIndex = BigramData::getSearchScoreForIndex(v9, v13, v30);
                if (SearchScoreForIndex != 20000)
                {
                  v35 = 328;
                  if (!*((_DWORD *)this + 84))
                    v35 = 168;
                  if (*(__int16 *)(*((_QWORD *)this + 43) + 2 * i)
                     + *(unsigned __int16 *)(*(_QWORD *)((char *)this + v35) + 2 * v33) != SearchScoreForIndex
                    && v40 < SearchScoreForIndex)
                  {
                    WordLanguageModel::getLmIdWordName(this, v13, 1);
                    WordLanguageModel::getLmIdWordName(this, v33, 0);
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9449, (uint64_t)"lm/wordlm", 80, (uint64_t)"%.500s %u %u %d %.500s %.500s", v37, v38, v39);
                  }
                }
              }
              ++v30;
            }
            while (v30 <= v28);
          }
          continue;
        }
        v11 = i >> 5;
        v12 = 1 << i;
        if ((*(_DWORD *)(*((_QWORD *)this + 50) + 4 * v11) & (1 << i)) == 0)
          goto LABEL_11;
        v13 = i;
        if ((*(_DWORD *)(*((_QWORD *)this + 52) + 4 * v11) & v12) != 0)
          goto LABEL_12;
      }
    }
  }
}

void WordLanguageModel::verifyTrigrams(WordLanguageModel *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int SearchSuccIdForIndex;
  int v27;
  __int16 *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int SearchScoreForIndex;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  int v39;
  int v40;
  TrigramData *v41;

  v38 = (char)a2;
  if (*((_DWORD *)this + 200) >= 2u)
  {
    v40 = *((_DWORD *)this + 14) - 1;
    v41 = (WordLanguageModel *)((char *)this + 744);
    v9 = *((_QWORD *)this + 99);
    v10 = 1;
    do
    {
      if (*(_WORD *)(v9 + 2 * v10))
      {
        if (*(_WORD *)(*((_QWORD *)this + 43) + 2 * v10) == 20000)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9470, (uint64_t)"lm/wordlm", 82, (uint64_t)"%.500s %u", a7, a8, v38);
          v9 = *((_QWORD *)this + 99);
        }
        if (*(_WORD *)(v9 + 2 * v10))
        {
          v11 = 0;
          v39 = v10;
          v37 = v10;
          do
          {
            v12 = *(_DWORD *)(*((_QWORD *)this + 101) + 4 * v10) + v11;
            v13 = v12 >> 5;
            if ((!*((_DWORD *)this + 186)
               || (*(_DWORD *)(*((_QWORD *)this + 111) + 4 * v13) & (1 << (*(_BYTE *)(*((_QWORD *)this + 101) + 4 * v10)
                                                                                         + v11))) == 0
               || (*(_DWORD *)(*((_QWORD *)this + 113) + 4 * v13) & (1 << (*(_BYTE *)(*((_QWORD *)this + 101) + 4 * v10)
                                                                         + v11))) != 0)
              && *(__int16 *)(*((_QWORD *)this + 103) + 2 * v12) != -1)
            {
              v14 = *(_DWORD *)(*((_QWORD *)this + 109) + 4 * v13);
              v15 = *((_QWORD *)this + 130);
              if (((v14 >> (*(_BYTE *)(*((_QWORD *)this + 101) + 4 * v10) + v11)) & 1) != 0)
              {
                if (*(_WORD *)(v15 + 2 * v12))
                {
                  v16 = 1;
                  v17 = 1;
                  do
                  {
                    if (*(_WORD *)(*((_QWORD *)this + 21) + 2 * v17) != 20000)
                    {
                      v18 = (v16 + *(_DWORD *)(*((_QWORD *)this + 128) + 4 * v12) - 1);
                      if (*((_DWORD *)this + 196))
                      {
                        v18 = *(unsigned __int8 *)(*((_QWORD *)this + 134) + v18);
                        v19 = *((_QWORD *)this + 97);
                      }
                      else
                      {
                        v19 = *((_QWORD *)this + 132);
                      }
                      v20 = *(unsigned __int16 *)(v19 + 2 * v18);
                      if (v20 != 20000 && v40 < v20)
                      {
                        v22 = *(unsigned __int16 *)(*((_QWORD *)this + 103) + 2 * v12);
                        WordLanguageModel::getLmIdWordName(this, v39, 1);
                        WordLanguageModel::getLmIdWordName(this, v22, 1);
                        WordLanguageModel::getLmIdWordName(this, v16, 0);
                        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9505, (uint64_t)"lm/wordlm", 76, (uint64_t)"%.500s %u %u %u %d %.500s %.500s %.500s", v23, v24, v38);
                        v15 = *((_QWORD *)this + 130);
                      }
                    }
                    v16 = ++v17;
                  }
                  while (v17 <= *(unsigned __int16 *)(v15 + 2 * v12));
                }
              }
              else if (*(_WORD *)(v15 + 2 * v12))
              {
                v25 = 0;
                do
                {
                  SearchSuccIdForIndex = TrigramData::getSearchSuccIdForIndex(v41, v12, v25);
                  if (*(_WORD *)(*((_QWORD *)this + 21) + 2 * SearchSuccIdForIndex) != 20000)
                  {
                    v27 = SearchSuccIdForIndex;
                    if (*((_DWORD *)this + 192))
                      v28 = (__int16 *)(*((_QWORD *)this + 95)
                                      + 2 * *(unsigned __int8 *)(*((_QWORD *)this + 107) + v12));
                    else
                      v28 = (__int16 *)(*((_QWORD *)this + 105) + 2 * v12);
                    v29 = *(unsigned __int16 *)(*((_QWORD *)this + 103) + 2 * v12);
                    v30 = *(__int16 *)(*((_QWORD *)this + 43) + 2 * v29) + *v28;
                    v31 = 328;
                    if (!*((_DWORD *)this + 84))
                      v31 = 168;
                    v32 = v30 + *(unsigned __int16 *)(*(_QWORD *)((char *)this + v31) + 2 * SearchSuccIdForIndex);
                    SearchScoreForIndex = TrigramData::getSearchScoreForIndex(v41, v12, v25);
                    if (v32 != SearchScoreForIndex && v40 < SearchScoreForIndex)
                    {
                      WordLanguageModel::getLmIdWordName(this, v39, 1);
                      WordLanguageModel::getLmIdWordName(this, v29, 1);
                      WordLanguageModel::getLmIdWordName(this, v27, 0);
                      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9539, (uint64_t)"lm/wordlm", 77, (uint64_t)"%.500s %u %u %u %d %.500s %.500s %.500s", v35, v36, v38);
                    }
                  }
                  ++v25;
                }
                while (v25 < *(unsigned __int16 *)(*((_QWORD *)this + 130) + 2 * v12));
              }
            }
            ++v11;
            v9 = *((_QWORD *)this + 99);
            v10 = v37;
          }
          while (v11 < *(unsigned __int16 *)(v9 + 2 * v37));
        }
      }
      ++v10;
    }
    while (v10 < *((unsigned int *)this + 200));
  }
}

void WordLanguageModel::verifyQuadgrams(WordLanguageModel *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  QuadgramData *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  unsigned int Quad3SuccIdForIndex;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;

  v33 = (char)a2;
  if (*((_DWORD *)this + 322) >= 2u)
  {
    v9 = *((_DWORD *)this + 14) - 1;
    v10 = (WordLanguageModel *)((char *)this + 1232);
    v31 = (char *)this + 1672;
    v32 = (char *)this + 1496;
    v37 = (char *)this + 1736;
    v11 = (char *)this + 1512;
    v12 = *((_QWORD *)this + 160);
    v13 = 1;
    while (1)
    {
      if (*(_WORD *)(v12 + 2 * v13))
      {
        if (*(_WORD *)(*((_QWORD *)this + 43) + 2 * v13) == 20000)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9561, (uint64_t)"lm/wordlm", 83, (uint64_t)"%.500s %u", a7, a8, v33);
          v12 = *((_QWORD *)this + 160);
        }
        if (*(_WORD *)(v12 + 2 * v13))
          break;
      }
LABEL_34:
      if (++v13 >= (unint64_t)*((unsigned int *)this + 322))
        return;
    }
    v14 = 0;
    v15 = *(_DWORD *)v10;
    v38 = v13;
    v29 = v13;
    while (1)
    {
      v30 = v14;
      v16 = (*(_DWORD *)(*((_QWORD *)this + 162) + 4 * v13) + v14);
      v39 = *(unsigned __int16 *)(*((_QWORD *)this + 164) + 2 * v16);
      if (v15 && (*(_DWORD *)(*((_QWORD *)this + 168) + 4 * (v16 >> 5)) & (1 << v16)) != 0)
      {
        if ((*(_DWORD *)(*((_QWORD *)this + 170) + 4 * (v16 >> 5)) & (1 << v16)) != 0 && v39 != 0xFFFF)
        {
LABEL_17:
          if (*(_WORD *)(*((_QWORD *)this + 166) + 2 * v16))
          {
            v18 = 0;
            v41 = v16 >> 5;
            v40 = 1 << v16;
            v19 = *(_DWORD *)(*((_QWORD *)this + 185) + 4 * v16);
            v34 = v16;
            do
            {
              v20 = v19;
              v21 = v32;
              if (v15)
              {
                v20 = v19;
                v21 = v32;
                if ((*(_DWORD *)(*((_QWORD *)this + 168) + 4 * v41) & v40) != 0)
                {
                  v20 = *(_DWORD *)(*((_QWORD *)this + 207) + 4 * v19);
                  v21 = v31;
                }
              }
              v22 = 0;
              v36 = *(unsigned __int16 *)(*v21 + 2 * (v20 + v18));
              v35 = v18;
              while (1)
              {
                v23 = v19;
                v24 = v11;
                if (v15)
                {
                  v23 = v19;
                  v24 = v11;
                  if ((*(_DWORD *)(*((_QWORD *)this + 168) + 4 * v41) & v40) != 0)
                  {
                    v23 = *(_DWORD *)(*((_QWORD *)this + 207) + 4 * v19);
                    v24 = v37;
                  }
                }
                if (v22 >= *(unsigned __int16 *)(*v24 + 2 * (v23 + v18)))
                  break;
                Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex(v10, v16, v18, v22);
                if (*(_WORD *)(*((_QWORD *)this + 21) + 2 * Quad3SuccIdForIndex) != 20000)
                {
                  v26 = Quad3SuccIdForIndex;
                  if (v9 < (int)QuadgramData::getScoreForIndex(v10, v16, v18, v22))
                  {
                    WordLanguageModel::getLmIdWordName(this, v38, 1);
                    WordLanguageModel::getLmIdWordName(this, v39, 1);
                    WordLanguageModel::getLmIdWordName(this, v36, 1);
                    WordLanguageModel::getLmIdWordName(this, v26, 0);
                    v18 = v35;
                    v16 = v34;
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9602, (uint64_t)"lm/wordlm", 78, (uint64_t)"%.500s %u %u %u %u %d %.500s %.500s %.500s %.500s", v27, v28, v33);
                  }
                }
                ++v22;
                v15 = *((_DWORD *)this + 308);
                v19 = *(_DWORD *)(*((_QWORD *)this + 185) + 4 * v16);
              }
              ++v18;
            }
            while (v18 < *(unsigned __int16 *)(*((_QWORD *)this + 166) + 2 * v16));
            v12 = *((_QWORD *)this + 160);
            v13 = v29;
          }
        }
      }
      else if (v39 != 0xFFFF)
      {
        goto LABEL_17;
      }
      v14 = v30 + 1;
      if (v30 + 1 >= *(unsigned __int16 *)(v12 + 2 * v13))
        goto LABEL_34;
    }
  }
}

uint64_t WordLanguageModel::getNumLoadedBigramBytes(WordLanguageModel *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 29);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 240))(result);
  if (*((_DWORD *)this + 16) >= 2u)
  {
    if (*((_DWORD *)this + 90))
      result += 4
              * (*((unsigned int *)this + 168)
               + (unint64_t)*((unsigned int *)this + 164)
               + *((unsigned int *)this + 172))
              + *((unsigned int *)this + 184)
              + 2 * (*((unsigned int *)this + 180) + (unint64_t)*((unsigned int *)this + 176));
  }
  return result;
}

uint64_t WordLanguageModel::getNumLoadedTrigramBytes(WordLanguageModel *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 29);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
  if (*((_DWORD *)this + 16) >= 3u)
  {
    if (*((_DWORD *)this + 186))
      result += 4
              * (*((unsigned int *)this + 290)
               + (unint64_t)*((unsigned int *)this + 286)
               + *((unsigned int *)this + 294))
              + *((unsigned int *)this + 306)
              + 2 * (*((unsigned int *)this + 302) + (unint64_t)*((unsigned int *)this + 298));
  }
  return result;
}

uint64_t WordLanguageModel::getNumLoadedQuadgramBytes(WordLanguageModel *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 29);
  if (v2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 256))(v2);
  else
    v3 = 0;
  if (*((_DWORD *)this + 16) >= 4u && *((_DWORD *)this + 308))
    v3 += QuadgramData::sizeLoadedData((WordLanguageModel *)((char *)this + 1232));
  return v3;
}

unint64_t QuadgramData::sizeLoadedData(QuadgramData *this)
{
  return *((unsigned int *)this + 120)
       + 4
       * (*((unsigned int *)this + 104)
        + (unint64_t)*((unsigned int *)this + 100)
        + *((unsigned int *)this + 108)
        + (unint64_t)*((unsigned int *)this + 124))
       + *((unsigned int *)this + 140)
       + 2
       * (*((unsigned int *)this + 116)
        + (unint64_t)*((unsigned int *)this + 112)
        + *((unsigned int *)this + 128)
        + (unint64_t)*((unsigned int *)this + 132)
        + *((unsigned int *)this + 136));
}

uint64_t WordLanguageModel::getNumInterpolatedLms(WordLanguageModel *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 29);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 568))(v2);
  else
    return LanguageModel::getNumInterpolatedLms(this);
}

uint64_t WordLanguageModel::setInterpolatedLmWeights(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 232);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 576))(v1);
  else
    return LanguageModel::setInterpolatedLmWeights();
}

uint64_t WordLanguageModel::getInterpolatedLmWeights(WordLanguageModel *this, unsigned int *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 29);
  if (v3)
    return (*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)v3 + 584))(v3, a2);
  else
    return LanguageModel::getInterpolatedLmWeights(this, a2);
}

uint64_t WordLanguageModel::maybeUncompactWordIdToLmIdArray(uint64_t this, int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;

  if ((a2 - 255) > 0xFFFFFEFF)
    return this;
  v3 = this;
  v4 = *(_DWORD *)(this + 160);
  if (v4)
  {
    v5 = (uint64_t *)(this + 136);
    v6 = *(_DWORD *)(this + 148);
    if (v4 <= v6)
    {
      *(_DWORD *)(this + 144) = v4;
      this = *(_QWORD *)(this + 152);
    }
    else
    {
      DgnPrimArray<short>::reallocElts(this + 136, v4 - v6, 0);
      v7 = *(_DWORD *)(v3 + 160);
      *(_DWORD *)(v3 + 144) = v4;
      this = *(_QWORD *)(v3 + 152);
      if (!v7)
      {
        if (!this)
          goto LABEL_12;
        goto LABEL_11;
      }
      v4 = v7;
    }
    v8 = 0;
    v9 = *v5;
    do
    {
      v10 = *(unsigned __int8 *)(this + v8);
      if (v10 == 255)
        LOWORD(v10) = -1;
      *(_WORD *)(v9 + 2 * v8++) = v10;
    }
    while (v4 != v8);
LABEL_11:
    this = MemChunkFree((_QWORD *)this, 0);
    *(_QWORD *)(v3 + 152) = 0;
LABEL_12:
    *(_QWORD *)(v3 + 160) = 0;
  }
  if ((a2 - 0xFFFF) <= 0xFFFEFFFF)
  {
    v11 = *(_DWORD *)(v3 + 144);
    if (v11)
    {
      v12 = *(_DWORD *)(v3 + 132);
      if (v11 <= v12)
      {
        *(_DWORD *)(v3 + 128) = v11;
        this = *(_QWORD *)(v3 + 136);
      }
      else
      {
        DgnPrimArray<unsigned int>::reallocElts(v3 + 120, v11 - v12, 0);
        v13 = *(_DWORD *)(v3 + 144);
        *(_DWORD *)(v3 + 128) = v11;
        this = *(_QWORD *)(v3 + 136);
        if (!v13)
        {
          if (!this)
            goto LABEL_25;
          goto LABEL_24;
        }
      }
      v14 = 0;
      v15 = *(_QWORD *)(v3 + 120);
      do
      {
        v16 = *(unsigned __int16 *)(this + 2 * v14);
        if (v16 == 0xFFFF)
          v16 = -1;
        *(_DWORD *)(v15 + 4 * v14++) = v16;
      }
      while (v14 < *(unsigned int *)(v3 + 144));
LABEL_24:
      this = MemChunkFree((_QWORD *)this, 0);
      *(_QWORD *)(v3 + 136) = 0;
LABEL_25:
      *(_QWORD *)(v3 + 144) = 0;
    }
  }
  return this;
}

uint64_t WordLanguageModel::maybeUncompactWordIdToContextLmIdArray(uint64_t this, int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;

  if ((a2 - 255) > 0xFFFFFEFF)
    return this;
  v3 = this;
  v4 = *(_DWORD *)(this + 320);
  if (v4)
  {
    v5 = (uint64_t *)(this + 296);
    v6 = *(_DWORD *)(this + 308);
    if (v4 <= v6)
    {
      *(_DWORD *)(this + 304) = v4;
      this = *(_QWORD *)(this + 312);
    }
    else
    {
      DgnPrimArray<short>::reallocElts(this + 296, v4 - v6, 0);
      v7 = *(_DWORD *)(v3 + 320);
      *(_DWORD *)(v3 + 304) = v4;
      this = *(_QWORD *)(v3 + 312);
      if (!v7)
      {
        if (!this)
          goto LABEL_12;
        goto LABEL_11;
      }
      v4 = v7;
    }
    v8 = 0;
    v9 = *v5;
    do
    {
      v10 = *(unsigned __int8 *)(this + v8);
      if (v10 == 255)
        LOWORD(v10) = -1;
      *(_WORD *)(v9 + 2 * v8++) = v10;
    }
    while (v4 != v8);
LABEL_11:
    this = MemChunkFree((_QWORD *)this, 0);
    *(_QWORD *)(v3 + 312) = 0;
LABEL_12:
    *(_QWORD *)(v3 + 320) = 0;
  }
  if ((a2 - 0xFFFF) <= 0xFFFEFFFF)
  {
    v11 = *(_DWORD *)(v3 + 304);
    if (v11)
    {
      v12 = *(_DWORD *)(v3 + 292);
      if (v11 <= v12)
      {
        *(_DWORD *)(v3 + 288) = v11;
        this = *(_QWORD *)(v3 + 296);
      }
      else
      {
        DgnPrimArray<unsigned int>::reallocElts(v3 + 280, v11 - v12, 0);
        v13 = *(_DWORD *)(v3 + 304);
        *(_DWORD *)(v3 + 288) = v11;
        this = *(_QWORD *)(v3 + 296);
        if (!v13)
        {
          if (!this)
            goto LABEL_25;
          goto LABEL_24;
        }
      }
      v14 = 0;
      v15 = *(_QWORD *)(v3 + 280);
      do
      {
        v16 = *(unsigned __int16 *)(this + 2 * v14);
        if (v16 == 0xFFFF)
          v16 = -1;
        *(_DWORD *)(v15 + 4 * v14++) = v16;
      }
      while (v14 < *(unsigned int *)(v3 + 304));
LABEL_24:
      this = MemChunkFree((_QWORD *)this, 0);
      *(_QWORD *)(v3 + 296) = 0;
LABEL_25:
      *(_QWORD *)(v3 + 304) = 0;
    }
  }
  return this;
}

__n128 WordLanguageModel::fillInWordDummySpec(WordLanguageModel *this, __n128 *a2)
{
  __n128 result;

  a2->n128_u32[2] = *((_DWORD *)this + 16);
  a2->n128_u64[0] = 0xBFF0000000000000;
  a2->n128_u8[12] = *((_BYTE *)this + 80);
  a2->n128_u8[13] = *((_DWORD *)this + 25) != -1;
  result = *(__n128 *)((char *)this + 84);
  a2[1] = result;
  return result;
}

void WordLanguageModel::addWord(WordLanguageModel *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  BOOL v19;
  unint64_t v20;

  v3 = a3;
  v4 = a2;
  v6 = *((_QWORD *)this + 29);
  if (v6)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 360))(v6, a2, a3);
  v7 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 2) + 256) + 4 * v4);
  if ((_DWORD)v7 == v4)
  {
    if (v3 == 0xFFFFFF || !*((_BYTE *)this + 80))
    {
      v8 = *((_DWORD *)this + 18);
      v10 = *((_DWORD *)this + 19);
    }
    else
    {
      if (*((_DWORD *)this + 32))
      {
        v8 = *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v3);
      }
      else
      {
        if (*((_DWORD *)this + 36))
        {
          v13 = *(unsigned __int16 *)(*((_QWORD *)this + 17) + 2 * v3);
          v14 = v13 == 0xFFFF;
        }
        else
        {
          v13 = *(unsigned __int8 *)(*((_QWORD *)this + 19) + v3);
          v14 = v13 == 255;
        }
        if (v14)
          v8 = -1;
        else
          v8 = v13;
      }
      if (*((_BYTE *)this + 276))
      {
        if (*((_DWORD *)this + 72))
        {
          v10 = *(_DWORD *)(*((_QWORD *)this + 35) + 4 * v3);
        }
        else
        {
          if (*((_DWORD *)this + 76))
          {
            v18 = *(unsigned __int16 *)(*((_QWORD *)this + 37) + 2 * v3);
            v19 = v18 == 0xFFFF;
          }
          else
          {
            v18 = *(unsigned __int8 *)(*((_QWORD *)this + 39) + v3);
            v19 = v18 == 255;
          }
          if (v19)
            v10 = -1;
          else
            v10 = v18;
        }
      }
      else
      {
        v10 = -1;
      }
    }
    WordLanguageModel::recordWordIdLmIdUsage(this, v4, v8);
    if (*((_BYTE *)this + 276))
      WordLanguageModel::recordWordIdContextLmIdUsage(this, v4, v10);
    if (*((_DWORD *)this + 54))
    {
      v20 = 0;
      do
        RecentBuffer::addWordId(*(RecentBuffer **)(*((_QWORD *)this + 26) + 8 * v20++), v4);
      while (v20 < *((unsigned int *)this + 54));
    }
  }
  else
  {
    if (*((_DWORD *)this + 32))
    {
      v9 = *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v7);
    }
    else
    {
      if (*((_DWORD *)this + 36))
      {
        v11 = *(unsigned __int16 *)(*((_QWORD *)this + 17) + 2 * v7);
        v12 = v11 == 0xFFFF;
      }
      else
      {
        v11 = *(unsigned __int8 *)(*((_QWORD *)this + 19) + v7);
        v12 = v11 == 255;
      }
      if (v12)
        v9 = -1;
      else
        v9 = v11;
    }
    WordLanguageModel::recordWordIdLmIdUsage(this, v4, v9);
    if (*((_BYTE *)this + 276))
    {
      if (*((_DWORD *)this + 72))
      {
        v15 = *(_DWORD *)(*((_QWORD *)this + 35) + 4 * v7);
      }
      else
      {
        if (*((_DWORD *)this + 76))
        {
          v16 = *(unsigned __int16 *)(*((_QWORD *)this + 37) + 2 * v7);
          v17 = v16 == 0xFFFF;
        }
        else
        {
          v16 = *(unsigned __int8 *)(*((_QWORD *)this + 39) + v7);
          v17 = v16 == 255;
        }
        if (v17)
          v15 = -1;
        else
          v15 = v16;
      }
      WordLanguageModel::recordWordIdContextLmIdUsage(this, v4, v15);
    }
  }
}

_DWORD *WordLanguageModel::addUnmappedWord(WordLanguageModel *this, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  _DWORD *result;

  v2 = a2;
  v4 = *((_QWORD *)this + 29);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 368))(v4, a2);
  result = WordLanguageModel::recordWordIdInvalidLmIdUsage(this, v2);
  if (*((_BYTE *)this + 276))
    return WordLanguageModel::recordWordIdInvalidContextLmIdUsage(this, v2);
  return result;
}

uint64_t WordLanguageModel::deleteWord(WordLanguageModel *this, uint64_t a2, BOOL *a3, BOOL *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t result;

  if (*((_DWORD *)this + 32))
  {
    *(_DWORD *)(*((_QWORD *)this + 15) + 4 * a2) = -1;
  }
  else if (*((_DWORD *)this + 36))
  {
    *(_WORD *)(*((_QWORD *)this + 17) + 2 * a2) = -1;
  }
  else
  {
    *(_BYTE *)(*((_QWORD *)this + 19) + a2) = -1;
  }
  if (*((_BYTE *)this + 276))
  {
    if (*((_DWORD *)this + 72))
    {
      v8 = a2;
      *(_DWORD *)(*((_QWORD *)this + 35) + 4 * a2) = -1;
    }
    else
    {
      v8 = a2;
      if (*((_DWORD *)this + 76))
        *(_WORD *)(*((_QWORD *)this + 37) + 2 * a2) = -1;
      else
        *(_BYTE *)(*((_QWORD *)this + 39) + a2) = -1;
    }
  }
  else
  {
    v8 = a2;
  }
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 256) + 4 * v8) == (_DWORD)a2 && *((_DWORD *)this + 54))
  {
    v9 = 0;
    do
      RecentBuffer::deleteWordId(*(RecentBuffer **)(*((_QWORD *)this + 26) + 8 * v9++), a2, a3, a4);
    while (v9 < *((unsigned int *)this + 54));
  }
  result = *((_QWORD *)this + 29);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, BOOL *, BOOL *))(*(_QWORD *)result + 376))(result, a2, a3, a4);
  return result;
}

uint64_t WordLanguageModel::recomputeRecentBufferHeadClonesAndCommonWords(WordLanguageModel *this)
{
  unint64_t v2;
  uint64_t result;

  if (*((_DWORD *)this + 54))
  {
    v2 = 0;
    do
      RecentBuffer::recomputeRecentBufferHeadClonesAndCommonWords(*(RecentBuffer **)(*((_QWORD *)this + 26) + 8 * v2++));
    while (v2 < *((unsigned int *)this + 54));
  }
  result = *((_QWORD *)this + 29);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 384))(result);
  return result;
}

uint64_t WordLanguageModel::recomputeRecentBufferRemainders(WordLanguageModel *this)
{
  unint64_t v2;
  uint64_t result;

  if (*((_DWORD *)this + 54))
  {
    v2 = 0;
    do
      RecentBuffer::recomputeRecentBufferRemainders(*(RecentBuffer **)(*((_QWORD *)this + 26) + 8 * v2++));
    while (v2 < *((unsigned int *)this + 54));
  }
  result = *((_QWORD *)this + 29);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 392))(result);
  return result;
}

_QWORD *WordLanguageModel::notifyEmptiedWordList(WordLanguageModel *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;

  v2 = (_QWORD *)*((_QWORD *)this + 15);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((_QWORD *)this + 15) = 0;
  }
  *((_QWORD *)this + 16) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 17);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((_QWORD *)this + 17) = 0;
  }
  *((_QWORD *)this + 18) = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 19);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((_QWORD *)this + 19) = 0;
  }
  *((_QWORD *)this + 20) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 35);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((_QWORD *)this + 35) = 0;
  }
  *((_QWORD *)this + 36) = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 37);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((_QWORD *)this + 37) = 0;
  }
  *((_QWORD *)this + 38) = 0;
  result = (_QWORD *)*((_QWORD *)this + 39);
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *((_QWORD *)this + 39) = 0;
  }
  *((_QWORD *)this + 40) = 0;
  return result;
}

void WordLanguageModel::verifyValidTopicWordLM(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 16) >= 4u)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10333, (uint64_t)"lm/wordlm", 23, (uint64_t)"%u %.500s", a7, a8, *((_DWORD *)this + 16));
  if (*((_QWORD *)this + 5))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10336, (uint64_t)"lm/wordlm", 25, (uint64_t)"%.500s", a7, a8, (char)"TopicWord");
  if (*((_QWORD *)this + 29))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10338, (uint64_t)"lm/wordlm", 33, (uint64_t)"%.500s", a7, a8, (char)"TopicWord");
}

void WordLanguageModel::verifyConsistentWithWordNgramBuildSpec(WordLanguageModel *this, const WordNgramBuildSpec *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 16) != *((_DWORD *)a2 + 2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10347, (uint64_t)"lm/wordlm", 94, (uint64_t)"%u %u", a7, a8, *((_DWORD *)this + 16));
  if (*((unsigned __int8 *)this + 80) != *((unsigned __int8 *)a2 + 12))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10352, (uint64_t)"lm/wordlm", 95, (uint64_t)"%u %u", a7, a8, *((_BYTE *)this + 80));
  if (*((_DWORD *)this + 25) == -1)
  {
    if (*((_BYTE *)a2 + 13))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10355, (uint64_t)"lm/wordlm", 96, (uint64_t)"%s", a7, a8, (char)&errStr_lm_wordlm_E_WORDNGRAMBUILDSPEC_MISMATCH_IGNOREINCONTEXTLMID);
  }
}

unint64_t WordLanguageModel::getWordId(WordLanguageModel *this, int a2, int a3)
{
  unint64_t result;
  unint64_t v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  BOOL v11;

  if (a2 == -1)
    return 0xFFFFFFLL;
  if (a2 == -2)
    return 16777212;
  if (a3 && *((_BYTE *)this + 276))
  {
    for (result = 0; ; ++result)
    {
      v5 = *((unsigned int *)this + 32);
      if (!*((_DWORD *)this + 32))
      {
        v5 = *((unsigned int *)this + 36);
        if (!(_DWORD)v5)
          v5 = *((unsigned int *)this + 40);
      }
      if (result >= v5)
        break;
      if (*((_DWORD *)this + 72))
      {
        v6 = *(_DWORD *)(*((_QWORD *)this + 35) + 4 * result);
      }
      else
      {
        if (*((_DWORD *)this + 76))
        {
          v6 = *(unsigned __int16 *)(*((_QWORD *)this + 37) + 2 * result);
          v7 = v6 == 0xFFFF;
        }
        else
        {
          v6 = *(unsigned __int8 *)(*((_QWORD *)this + 39) + result);
          v7 = v6 == 255;
        }
        if (v7)
          v6 = -1;
      }
      if (v6 == a2)
      {
        if ((_DWORD)result != 0xFFFFFF)
          return result;
        break;
      }
    }
    if (*((_DWORD *)this + 28) == a2)
      return 16777214;
    goto LABEL_46;
  }
  result = 0;
  v8 = *((_DWORD *)this + 32);
  if (!v8)
    goto LABEL_26;
LABEL_24:
  if (result >= v8)
    goto LABEL_38;
  v9 = *(_DWORD *)(*((_QWORD *)this + 15) + 4 * result);
  while (v9 != a2)
  {
    result = (result + 1);
    if (v8)
      goto LABEL_24;
LABEL_26:
    v10 = *((_DWORD *)this + 36);
    if (v10)
    {
      if (result >= v10)
        goto LABEL_38;
      v9 = *(unsigned __int16 *)(*((_QWORD *)this + 17) + 2 * result);
      v11 = v9 == 0xFFFF;
    }
    else
    {
      if (result >= *((_DWORD *)this + 40))
        goto LABEL_38;
      v9 = *(unsigned __int8 *)(*((_QWORD *)this + 19) + result);
      v11 = v9 == 255;
    }
    if (v11)
      v9 = -1;
  }
  if ((_DWORD)result == 0xFFFFFF)
  {
LABEL_38:
    if (*((_DWORD *)this + 28) != a2)
    {
LABEL_46:
      if (*((_DWORD *)this + 29) == a2)
        return 16777213;
      else
        return 0xFFFFFFLL;
    }
    if ((a3 & 1) != 0)
      return 16777214;
    if (*((_DWORD *)this + 29) == a2)
      return 16777213;
    else
      return 16777214;
  }
  return result;
}

uint64_t WordLanguageModel::languageScore(WordLanguageModel *this, uint64_t a2, unsigned int a3, LMStats *a4, LMContextData *a5, LMScoreDetails *a6, uint64_t a7, uint64_t a8, BOOL *a9)
{
  unsigned int v16;
  unsigned int LmId;
  unsigned int v18;
  int v19;
  int v20;
  __int16 v21;
  LMScoreDetails *v22;
  int v23;
  BOOL v24;
  int QuadgramScoreSearch;
  int TrigramScoreSearch;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v33;

  ++*(_DWORD *)a4;
  v16 = 0;
  if ((_DWORD)a7 && a6 && *((_QWORD *)this + 1))
  {
    v16 = *((_DWORD *)a6 + 2);
    LMScoreDetails::addDetails((unint64_t)a6, 0, 6, 1);
  }
  LmId = WordLanguageModel::getLmId(this, a2);
  v18 = LmId;
  if (*(_DWORD *)(*((_QWORD *)this + 2) + 388) > a2
    || (_DWORD)a2 == 16777213 && *((_DWORD *)this + 29) < *((_DWORD *)this + 26))
  {
    v19 = *((_DWORD *)this + 16);
    if (v19 == 1 || *((_DWORD *)a5 + 6) == 16777212)
    {
      LOWORD(v20) = *(_WORD *)(*((_QWORD *)this + 21) + 2 * LmId);
      if (!a6)
      {
LABEL_46:
        v24 = 1;
        goto LABEL_47;
      }
      v21 = *(_WORD *)(*((_QWORD *)this + 21) + 2 * LmId);
      v22 = a6;
      v23 = 0;
LABEL_45:
      LMScoreDetails::addDetails((unint64_t)v22, v21, v23, 0);
      goto LABEL_46;
    }
    if (*((_DWORD *)this + 27) <= LmId)
      goto LABEL_35;
    if (v19 == 2)
      goto LABEL_31;
    if (v19 != 3)
    {
      if (v19 != 4)
        goto LABEL_35;
      if (*((_DWORD *)a5 + 19) != -1)
      {
        QuadgramScoreSearch = WordLanguageModel::findQuadgramScoreSearch(this, LmId, (uint64_t)a4, (uint64_t)a5);
        if (QuadgramScoreSearch != 20000)
        {
          v23 = 3;
LABEL_34:
          if (QuadgramScoreSearch != 20000)
          {
LABEL_40:
            if (QuadgramScoreSearch >= 40 * *((_DWORD *)this + 8))
              v31 = 40 * *((_DWORD *)this + 8);
            else
              v31 = QuadgramScoreSearch;
            v20 = v31 & ~(v31 >> 31);
            if (!a6)
              goto LABEL_46;
            v21 = v31 & ~(unsigned __int16)(v31 >> 31);
            v22 = a6;
            goto LABEL_45;
          }
LABEL_35:
          v29 = *((_QWORD *)this + 29);
          if (v29)
          {
            v33 = 0;
            QuadgramScoreSearch = *((__int16 *)a5 + 16)
                                + *((__int16 *)a5 + 33)
                                + *((__int16 *)a5 + 42)
                                + (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, LMStats *, _QWORD, _QWORD, uint64_t, uint64_t, char *))(*(_QWORD *)v29 + 504))(v29, a2, 0xFFFFLL, a4, *((_QWORD *)a5 + 14), 0, a7, a8, &v33);
            v23 = 4;
          }
          else
          {
            v23 = 0;
            v30 = 328;
            if (!*((_DWORD *)this + 84))
              v30 = 168;
            QuadgramScoreSearch = *((__int16 *)a5 + 16)
                                + *((__int16 *)a5 + 33)
                                + *((__int16 *)a5 + 42)
                                + *(unsigned __int16 *)(*(_QWORD *)((char *)this + v30) + 2 * v18);
          }
          goto LABEL_40;
        }
      }
    }
    if (*((_DWORD *)a5 + 15) == -1
      || (!*((_BYTE *)a5 + 64)
        ? (TrigramScoreSearch = WordLanguageModel::findTrigramScoreSearch((uint64_t)this, v18, (uint64_t)a4, (uint64_t)a5))
        : (TrigramScoreSearch = WordLanguageModel::findTrigramScoreLookup((uint64_t)this, v18, (uint64_t)a5)),
          TrigramScoreSearch == 20000))
    {
LABEL_31:
      if (*((_DWORD *)a5 + 4) == -1)
        goto LABEL_35;
      v27 = *((_BYTE *)a5 + 20)
          ? WordLanguageModel::findBigramScoreLookup((uint64_t)this, v18, (uint64_t)a5)
          : WordLanguageModel::findBigramScoreSearch((uint64_t)this, v18, (uint64_t)a4, (uint64_t)a5);
      if (v27 == 20000)
        goto LABEL_35;
      v28 = *((__int16 *)a5 + 33) + v27;
      TrigramScoreSearch = *((__int16 *)a5 + 42);
      v23 = 1;
    }
    else
    {
      v28 = *((__int16 *)a5 + 42);
      v23 = 2;
    }
    QuadgramScoreSearch = v28 + TrigramScoreSearch;
    goto LABEL_34;
  }
  if (a6)
    LMScoreDetails::addDetails((unint64_t)a6, 0, 7, 0);
  v24 = 0;
  LOWORD(v20) = 0;
LABEL_47:
  *a9 = v24;
  return LanguageModel::languageScoreFinish(this, a2, (__int16)v20, a6, a7, v16, a5);
}

uint64_t WordLanguageModel::findQuadgramScoreSearch(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  QuadgramData *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int Quad3SuccIdForIndex;

  v7 = (QuadgramData *)(a1 + 154);
  v8 = *(unsigned int *)(a4 + 80);
  v9 = *(unsigned int *)(a1[185] + 4 * v8);
  if (*((_DWORD *)a1 + 308) && ((*(_DWORD *)(a1[168] + ((v8 >> 3) & 0x1FFFFFFC)) >> v8) & 1) != 0)
  {
    LODWORD(v9) = *(_DWORD *)(a1[207] + 4 * v9);
    v10 = a1 + 217;
  }
  else
  {
    v10 = a1 + 189;
  }
  v11 = 0;
  v12 = *(unsigned __int16 *)(*v10 + 2 * (v9 + *(_DWORD *)(a4 + 76)));
  ++*(_DWORD *)(a3 + 48);
  v13 = v12 - 1;
  if (v13 >= a2)
    v14 = a2;
  else
    v14 = v13;
  v15 = 1;
  while (1)
  {
    v16 = v15;
    v17 = v11 + v14;
    v18 = (v11 + v14) >> 1;
    Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex(v7, *(_DWORD *)(a4 + 80), *(_DWORD *)(a4 + 76), v18);
    if (Quad3SuccIdForIndex == a2)
      break;
    if (Quad3SuccIdForIndex > a2)
    {
      if (v17 < 2)
        goto LABEL_15;
      v14 = v18 - 1;
    }
    else
    {
      v11 = v18 + 1;
    }
    v15 = v16 + 1;
    if (v11 > v14)
    {
LABEL_15:
      *(_DWORD *)(a3 + 52) += v16;
      return 20000;
    }
  }
  *(_DWORD *)(a3 + 52) += v16;
  return QuadgramData::getScoreForIndex(v7, *(_DWORD *)(a4 + 80), *(_DWORD *)(a4 + 76), v17 >> 1);
}

uint64_t WordLanguageModel::findTrigramScoreLookup(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a3 + 60);
  if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 1040) + 2 * v3) < a2)
    return 20000;
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 1024) + 4 * v3) + (unsigned __int16)a2 - 1;
  if (*(_DWORD *)(a1 + 784))
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1072) + v5);
    v6 = *(_QWORD *)(a1 + 776);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 1056);
  }
  return *(unsigned __int16 *)(v6 + 2 * v5);
}

uint64_t WordLanguageModel::findTrigramScoreSearch(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  TrigramData *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int SearchSuccIdForIndex;

  v7 = 0;
  v8 = (TrigramData *)(a1 + 744);
  v9 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 1040) + 2 * *(unsigned int *)(a4 + 60));
  ++*(_DWORD *)(a3 + 32);
  v10 = v9 - 1;
  if (v10 >= a2)
    v11 = a2;
  else
    v11 = v10;
  v12 = 1;
  while (1)
  {
    v13 = v12;
    v14 = v7 + v11;
    v15 = (v7 + v11) >> 1;
    SearchSuccIdForIndex = TrigramData::getSearchSuccIdForIndex(v8, *(_DWORD *)(a4 + 60), v15);
    if (SearchSuccIdForIndex == a2)
      break;
    if (SearchSuccIdForIndex > a2)
    {
      if (v14 < 2)
        goto LABEL_11;
      v11 = v15 - 1;
    }
    else
    {
      v7 = v15 + 1;
    }
    v12 = v13 + 1;
    if (v7 > v11)
    {
LABEL_11:
      *(_DWORD *)(a3 + 36) += v13;
      return 20000;
    }
  }
  *(_DWORD *)(a3 + 36) += v13;
  return TrigramData::getSearchScoreForIndex(v8, *(_DWORD *)(a4 + 60), v14 >> 1);
}

uint64_t WordLanguageModel::findBigramScoreLookup(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a3 + 16);
  if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 552) + 2 * v3) < a2)
    return 20000;
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 536) + 4 * v3) + (unsigned __int16)a2 - 1;
  if (*(_DWORD *)(a1 + 376))
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 584) + v5);
    v6 = *(_QWORD *)(a1 + 368);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 568);
  }
  return *(unsigned __int16 *)(v6 + 2 * v5);
}

uint64_t WordLanguageModel::findBigramScoreSearch(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  BigramData *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int SearchSuccIdForIndex;

  v7 = 0;
  v8 = (BigramData *)(a1 + 360);
  v9 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 552) + 2 * *(unsigned int *)(a4 + 16));
  ++*(_DWORD *)(a3 + 16);
  v10 = v9 - 1;
  if (v10 >= a2)
    v11 = a2;
  else
    v11 = v10;
  v12 = 1;
  while (1)
  {
    v13 = v12;
    v14 = v7 + v11;
    v15 = (v7 + v11) >> 1;
    SearchSuccIdForIndex = BigramData::getSearchSuccIdForIndex(v8, *(_DWORD *)(a4 + 16), v15);
    if (SearchSuccIdForIndex == a2)
      break;
    if (SearchSuccIdForIndex > a2)
    {
      if (v14 < 2)
        goto LABEL_11;
      v11 = v15 - 1;
    }
    else
    {
      v7 = v15 + 1;
    }
    v12 = v13 + 1;
    if (v7 > v11)
    {
LABEL_11:
      *(_DWORD *)(a3 + 20) += v13;
      return 20000;
    }
  }
  *(_DWORD *)(a3 + 20) += v13;
  return BigramData::getSearchScoreForIndex(v8, *(_DWORD *)(a4 + 16), v14 >> 1);
}

uint64_t WordLanguageModel::languageScoreForSearch(WordLanguageModel *this, uint64_t a2, unsigned int a3, LMStats *a4, LMContextData *a5, uint64_t a6, BOOL *a7)
{
  unsigned int LmIdForSearch;
  unsigned int v14;
  int v15;
  int v16;
  BOOL v17;
  int QuadgramScoreSearch;
  int TrigramScoreSearch;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int BigramScoreSearch;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v29;

  ++*(_DWORD *)a4;
  LmIdForSearch = WordLanguageModel::getLmIdForSearch(this, a2);
  v14 = LmIdForSearch;
  if ((_DWORD)a2 != 16777213 || *((_DWORD *)this + 29) < *((_DWORD *)this + 26))
  {
    v15 = *((_DWORD *)this + 16);
    if (v15 == 1 || *((_DWORD *)a5 + 6) == 16777212)
    {
      LOWORD(v16) = *(_WORD *)(*((_QWORD *)this + 21) + 2 * LmIdForSearch);
LABEL_40:
      v17 = 1;
      goto LABEL_41;
    }
    if (*((_DWORD *)this + 27) <= LmIdForSearch)
      goto LABEL_31;
    if (v15 == 2)
      goto LABEL_18;
    if (v15 != 3)
    {
      if (v15 != 4)
        goto LABEL_31;
      if (*((_DWORD *)a5 + 19) != -1)
      {
        QuadgramScoreSearch = WordLanguageModel::findQuadgramScoreSearch(this, LmIdForSearch, (uint64_t)a4, (uint64_t)a5);
        if (QuadgramScoreSearch != 20000)
          goto LABEL_30;
      }
    }
    if (*((_DWORD *)a5 + 15) == -1
      || (!*((_BYTE *)a5 + 64)
        ? (TrigramScoreSearch = WordLanguageModel::findTrigramScoreSearch((uint64_t)this, v14, (uint64_t)a4, (uint64_t)a5))
        : (TrigramScoreSearch = WordLanguageModel::findTrigramScoreLookup((uint64_t)this, v14, (uint64_t)a5)),
          TrigramScoreSearch == 20000))
    {
LABEL_18:
      v20 = *((unsigned int *)a5 + 4);
      if ((_DWORD)v20 == -1)
        goto LABEL_31;
      if (*((_BYTE *)a5 + 20))
      {
        if (v14 > *(unsigned __int16 *)(*((_QWORD *)this + 69) + 2 * v20))
          goto LABEL_31;
        v21 = *(_DWORD *)(*((_QWORD *)this + 67) + 4 * v20) + (unsigned __int16)v14 - 1;
        if (*((_DWORD *)this + 94))
        {
          v21 = *(unsigned __int8 *)(*((_QWORD *)this + 73) + v21);
          v22 = *((_QWORD *)this + 46);
        }
        else
        {
          v22 = *((_QWORD *)this + 71);
        }
        BigramScoreSearch = *(unsigned __int16 *)(v22 + 2 * v21);
      }
      else
      {
        BigramScoreSearch = WordLanguageModel::findBigramScoreSearch((uint64_t)this, v14, (uint64_t)a4, (uint64_t)a5);
      }
      if (BigramScoreSearch == 20000)
      {
LABEL_31:
        v25 = *((_QWORD *)this + 29);
        if (v25)
        {
          v29 = 0;
          QuadgramScoreSearch = *((__int16 *)a5 + 16)
                              + *((__int16 *)a5 + 33)
                              + *((__int16 *)a5 + 42)
                              + (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, LMStats *, _QWORD, uint64_t, char *))(*(_QWORD *)v25 + 512))(v25, a2, 0xFFFFLL, a4, *((_QWORD *)a5 + 14), a6, &v29);
        }
        else
        {
          v26 = 328;
          if (!*((_DWORD *)this + 84))
            v26 = 168;
          QuadgramScoreSearch = *((__int16 *)a5 + 16)
                              + *((__int16 *)a5 + 33)
                              + *((__int16 *)a5 + 42)
                              + *(unsigned __int16 *)(*(_QWORD *)((char *)this + v26) + 2 * v14);
        }
        goto LABEL_36;
      }
      v23 = *((__int16 *)a5 + 33) + BigramScoreSearch;
      TrigramScoreSearch = *((__int16 *)a5 + 42);
    }
    else
    {
      v23 = *((__int16 *)a5 + 42);
    }
    QuadgramScoreSearch = v23 + TrigramScoreSearch;
LABEL_30:
    if (QuadgramScoreSearch != 20000)
    {
LABEL_36:
      if (QuadgramScoreSearch >= 40 * *((_DWORD *)this + 8))
        v27 = 40 * *((_DWORD *)this + 8);
      else
        v27 = QuadgramScoreSearch;
      v16 = v27 & ~(v27 >> 31);
      goto LABEL_40;
    }
    goto LABEL_31;
  }
  v17 = 0;
  LOWORD(v16) = 0;
LABEL_41:
  *a7 = v17;
  return LanguageModel::languageScoreFinishForSearch((RecentBuffer **)this, a2, (__int16)v16, a5);
}

uint64_t WordLanguageModel::getLmIdForSearch(WordLanguageModel *this, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;

  if (a2 == 16777208)
    return 4294967294;
  if (a2 == 16777213)
    return *((unsigned int *)this + 29);
  if (*((_DWORD *)this + 32))
    return *(unsigned int *)(*((_QWORD *)this + 15) + 4 * a2);
  if (*((_DWORD *)this + 36))
  {
    v3 = *(unsigned __int16 *)(*((_QWORD *)this + 17) + 2 * a2);
    v4 = v3 == 0xFFFF;
  }
  else
  {
    v3 = *(unsigned __int8 *)(*((_QWORD *)this + 19) + a2);
    v4 = v3 == 255;
  }
  if (v4)
    return 0xFFFFFFFFLL;
  else
    return v3;
}

unint64_t WordLanguageModel::languageScoreForPrefilterer(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;

  v5 = result;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_DWORD *)(a3 + 12);
  LODWORD(v8) = v6;
  if (v6 > v7)
  {
    result = DgnPrimArray<short>::reallocElts(a3, v6 - v7, 0);
    LODWORD(v8) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(a3 + 8) = v6;
  if ((_DWORD)v8)
  {
    v9 = *(unsigned int **)a2;
    v10 = *(_DWORD *)(v5 + 128);
    v11 = *(_QWORD *)(v5 + 168);
    v8 = v8;
    v12 = *(_WORD **)a3;
    do
    {
      v14 = *v9++;
      v13 = v14;
      if (v10)
      {
        v15 = *(_DWORD *)(*(_QWORD *)(v5 + 120) + 4 * v13);
      }
      else
      {
        if (*(_DWORD *)(v5 + 144))
        {
          v15 = *(unsigned __int16 *)(*(_QWORD *)(v5 + 136) + 2 * v13);
          v16 = v15 == 0xFFFF;
        }
        else
        {
          v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 152) + v13);
          v16 = v15 == 255;
        }
        if (v16)
          v15 = -1;
      }
      *v12++ = *(_WORD *)(v11 + 2 * v15);
      --v8;
    }
    while (v8);
  }
  return result;
}

BOOL WordLanguageModel::isFinalSilenceScoredVerify(WordLanguageModel *this)
{
  return *((_DWORD *)this + 29) < *((_DWORD *)this + 26);
}

BOOL WordLanguageModel::hasAnyQuadgrams(WordLanguageModel *this)
{
  return *((_DWORD *)this + 16) > 3u;
}

BOOL WordLanguageModel::tri1HasTrigrams(WordLanguageModel *this, unsigned int a2)
{
  unsigned int v3;
  int v4;
  uint64_t v6;
  unsigned int MaybeContextLmId;

  v3 = *((_DWORD *)this + 16);
  if (v3 == 2)
  {
    v4 = *((_DWORD *)this + 68);
    return v4 != 0;
  }
  if (v3 >= 3)
  {
    if (a2 < 0xFFFFF4)
    {
      MaybeContextLmId = WordLanguageModel::getMaybeContextLmId(this, a2);
      if (*((_DWORD *)this + 200) > MaybeContextLmId)
      {
        v4 = *(unsigned __int16 *)(*((_QWORD *)this + 99) + 2 * MaybeContextLmId);
        return v4 != 0;
      }
    }
    else if (a2 == 16777214)
    {
      v6 = *((unsigned int *)this + 28);
      if (v6 < *((_DWORD *)this + 26) && *((_DWORD *)this + 200) > v6)
      {
        v4 = *(unsigned __int16 *)(*((_QWORD *)this + 99) + 2 * v6);
        return v4 != 0;
      }
    }
  }
  return 0;
}

BOOL WordLanguageModel::quad1quad2HasQuadgrams(WordLanguageModel *this, unsigned int a2, unsigned int a3)
{
  unsigned int v4;
  unsigned int MaybeContextLmId;
  unsigned int v8;

  v4 = *((_DWORD *)this + 16);
  if (v4 == 2)
    return *((_DWORD *)this + 68) > 1u;
  if (v4 < 4)
    return 0;
  if (a2 <= 0xFFFFF3)
  {
    MaybeContextLmId = WordLanguageModel::getMaybeContextLmId(this, a2);
  }
  else
  {
    if (a2 != 16777214)
      return 0;
    MaybeContextLmId = *((_DWORD *)this + 28);
    if (MaybeContextLmId >= *((_DWORD *)this + 26))
      return 0;
  }
  if (*((_DWORD *)this + 322) > MaybeContextLmId && *(_WORD *)(*((_QWORD *)this + 160) + 2 * MaybeContextLmId))
  {
    if (a3 <= 0xFFFFF3)
    {
      v8 = WordLanguageModel::getMaybeContextLmId(this, a3);
    }
    else
    {
      if (a3 != 16777214)
        return 0;
      v8 = *((_DWORD *)this + 28);
      if (v8 >= *((_DWORD *)this + 26))
        return 0;
    }
    if (*((_DWORD *)this + 27) > v8)
      return WordLanguageModel::findQuad2Index(this, MaybeContextLmId, v8) != -1;
  }
  return 0;
}

uint64_t WordLanguageModel::findQuad2Index(WordLanguageModel *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;

  v3 = 0;
  if (*(unsigned __int16 *)(*((_QWORD *)this + 160) + 2 * a2) - 1 >= a3)
    v4 = a3;
  else
    v4 = *(unsigned __int16 *)(*((_QWORD *)this + 160) + 2 * a2) - 1;
  v5 = *(_DWORD *)(*((_QWORD *)this + 162) + 4 * a2);
  v6 = *((_QWORD *)this + 164);
  while (1)
  {
    v7 = v4 + v3;
    result = v5 + ((v4 + v3) >> 1);
    v9 = *(unsigned __int16 *)(v6 + 2 * result);
    v10 = v9 > a3;
    if (v9 == a3)
      break;
    v11 = v7 >> 1;
    if (v10)
    {
      if (v7 < 2)
        return 0xFFFFFFFFLL;
      v4 = v11 - 1;
    }
    else
    {
      v3 = v11 + 1;
    }
    if (v3 > v4)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t WordLanguageModel::createContextData(WordLanguageModel *this)
{
  uint64_t *v2;

  v2 = MemChunkAlloc(0x78uLL, 0);
  return WordLMContextData::WordLMContextData((uint64_t)v2, *((_QWORD *)this + 29));
}

uint64_t WordLanguageModel::setContext(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int **v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int MaybeContextLmId;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  v12 = *((_DWORD *)this + 16);
  if (v12 <= 1)
    return LanguageModel::setContext((uint64_t)this, a2, a3, a4, (uint64_t)a5, a6);
  *(_BYTE *)(a6 + 12) = 1;
  v13 = *(_DWORD *)(a2 + 8);
  if (v12 == 2)
  {
    v14 = *((_DWORD *)this + 68);
    if (v14)
    {
      if (v14 < v13)
      {
        v15 = (unsigned int **)(a6 + 40);
        if (!*(_DWORD *)(a6 + 52))
        {
          DgnPrimArray<unsigned int>::reallocElts(a6 + 40, 1, 0);
          v14 = *((_DWORD *)this + 68);
        }
        v13 = 1;
        *(_DWORD *)(a6 + 48) = 1;
        **(_DWORD **)(a6 + 40) = *(_DWORD *)(*(_QWORD *)a2 + 4 * v14);
        goto LABEL_19;
      }
      v13 = 0;
LABEL_18:
      v15 = (unsigned int **)a2;
      goto LABEL_19;
    }
  }
  if (*((_DWORD *)this + 25) == -1)
    goto LABEL_18;
  v15 = (unsigned int **)(a6 + 96);
  *(_DWORD *)(a6 + 104) = 0;
  v13 = *(_DWORD *)(a2 + 8);
  if (v13)
  {
    v16 = 0;
    do
    {
      if (WordLanguageModel::getMaybeContextLmId(this, *(_DWORD *)(*(_QWORD *)a2 + 4 * v16)) != *((_DWORD *)this + 25))
      {
        v17 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v16);
        v18 = *(unsigned int *)(a6 + 104);
        if (v18 == *(_DWORD *)(a6 + 108))
        {
          DgnPrimArray<unsigned int>::reallocElts(a6 + 96, 1, 1);
          v18 = *(unsigned int *)(a6 + 104);
        }
        *(_DWORD *)(*(_QWORD *)(a6 + 96) + 4 * v18) = v17;
        ++*(_DWORD *)(a6 + 104);
      }
      ++v16;
    }
    while (v16 < *(unsigned int *)(a2 + 8));
    v13 = *(_DWORD *)(a6 + 104);
  }
LABEL_19:
  if (v13 >= *((_DWORD *)this + 16) - 1)
    v13 = *((_DWORD *)this + 16) - 1;
  *(_DWORD *)(a6 + 56) = v13;
  v19 = 16777212;
  *(_DWORD *)(a6 + 88) = 16777212;
  *(_DWORD *)(a6 + 68) = 16777212;
  *(_DWORD *)(a6 + 24) = 16777212;
  switch(v13)
  {
    case 3u:
      v20 = *v15;
      *(_DWORD *)(a6 + 88) = (*v15)[2];
LABEL_27:
      *(_DWORD *)(a6 + 68) = v20[1];
      goto LABEL_28;
    case 2u:
      v20 = *v15;
      goto LABEL_27;
    case 1u:
      v20 = *v15;
LABEL_28:
      v19 = *v20;
      *(_DWORD *)(a6 + 24) = *v20;
      break;
  }
  v21 = *((_QWORD *)this + 29);
  if (v21)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned int *, _QWORD))(*(_QWORD *)v21 + 472))(v21, a2, 0, a4, a5, *(_QWORD *)(a6 + 112));
    v19 = *(_DWORD *)(a6 + 24);
  }
  *(_DWORD *)(a6 + 16) = -1;
  *(_BYTE *)(a6 + 20) = 0;
  *(_DWORD *)(a6 + 60) = -1;
  *(_BYTE *)(a6 + 64) = 0;
  *(_DWORD *)(a6 + 80) = -1;
  *(_WORD *)(a6 + 32) = 0;
  *(_WORD *)(a6 + 66) = 0;
  *(_WORD *)(a6 + 84) = 0;
  *(_DWORD *)(a6 + 28) = -2;
  *(_QWORD *)(a6 + 72) = -2;
  *(_DWORD *)(a6 + 92) = -2;
  switch(v19)
  {
    case 0xFFFFF8u:
    case 0xFFFFFEu:
      MaybeContextLmId = *((_DWORD *)this + 28);
      if (MaybeContextLmId < *((_DWORD *)this + 26))
        goto LABEL_36;
      goto LABEL_40;
    case 0xFFFFFCu:
      goto LABEL_40;
    case 0xFFFFFFu:
      MaybeContextLmId = *((_DWORD *)this + 60);
      if (MaybeContextLmId != -1)
        goto LABEL_36;
LABEL_40:
      *(_BYTE *)(a6 + 13) = 1;
      return LanguageModel::setContext((uint64_t)this, a2, a3, a4, (uint64_t)a5, a6);
    default:
      MaybeContextLmId = WordLanguageModel::getMaybeContextLmId(this, v19);
LABEL_36:
      *(_DWORD *)(a6 + 28) = MaybeContextLmId;
      *(_BYTE *)(a6 + 13) = 0;
      v23 = *((_DWORD *)this + 16);
      if (v23 < 3)
        goto LABEL_54;
      v24 = *(_DWORD *)(a6 + 68);
      switch(v24)
      {
        case 0xFFFFF8u:
        case 0xFFFFFEu:
          v25 = *((_DWORD *)this + 28);
          if (v25 < *((_DWORD *)this + 26))
            goto LABEL_43;
          break;
        case 0xFFFFFCu:
          break;
        case 0xFFFFFFu:
          v25 = *((_DWORD *)this + 60);
          if (v25 != -1)
LABEL_43:
            *(_DWORD *)(a6 + 72) = v25;
          break;
        default:
          *(_DWORD *)(a6 + 72) = WordLanguageModel::getMaybeContextLmId(this, v24);
          v23 = *((_DWORD *)this + 16);
          break;
      }
      if (v23 < 4)
        goto LABEL_54;
      v26 = *(_DWORD *)(a6 + 88);
      switch(v26)
      {
        case 0xFFFFFCu:
          goto LABEL_54;
        case 0xFFFFFEu:
          v27 = *((_DWORD *)this + 28);
          if (v27 >= *((_DWORD *)this + 26))
            goto LABEL_54;
          break;
        case 0xFFFFFFu:
          v27 = *((_DWORD *)this + 60);
          if (v27 == -1)
            goto LABEL_54;
          break;
        default:
          v27 = WordLanguageModel::getMaybeContextLmId(this, v26);
          break;
      }
      *(_DWORD *)(a6 + 92) = v27;
LABEL_54:
      WordLanguageModel::setBigramContext((uint64_t)this, a4, a5, a6);
      if (*((_DWORD *)this + 16) >= 3u)
      {
        WordLanguageModel::setTrigramContext((uint64_t)this, a4, a5, a6);
        if (*((_DWORD *)this + 16) >= 4u)
          WordLanguageModel::setQuadgramContext((uint64_t)this, a4, a5, a6);
      }
      break;
  }
  return LanguageModel::setContext((uint64_t)this, a2, a3, a4, (uint64_t)a5, a6);
}

void WordLanguageModel::setBigramContext(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v7;

  v7 = *(unsigned int *)(a4 + 28);
  if (v7 <= 0xFFFFF0)
  {
    *(_WORD *)(a4 + 32) = *(_WORD *)(*(_QWORD *)(a1 + 344) + 2 * v7);
    if (*(_DWORD *)(a1 + 560) > v7)
    {
      if (*(_WORD *)(*(_QWORD *)(a1 + 552) + 2 * v7))
      {
        *(_DWORD *)(a4 + 16) = v7;
        if (*(_DWORD *)(a1 + 360)
          && (*(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * (v7 >> 5)) & (1 << v7)) != 0
          && (*(_DWORD *)(*(_QWORD *)(a1 + 416) + 4 * (v7 >> 5)) & (1 << v7)) == 0)
        {
          WordLanguageModel::loadBigramRecord(a1, v7, a2, a3);
          LODWORD(v7) = *(_DWORD *)(a4 + 28);
        }
        *(_BYTE *)(a4 + 20) = (*(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * (v7 >> 5)) >> v7) & 1;
      }
    }
  }
}

void WordLanguageModel::setTrigramContext(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  _WORD *v19;

  v6 = *(_DWORD *)(a4 + 28);
  if (*(_DWORD *)(a1 + 108) > v6)
  {
    v7 = *(unsigned int *)(a4 + 72);
    if (*(_DWORD *)(a1 + 800) > v7)
    {
      v8 = *(_QWORD *)(a1 + 792);
      v9 = *(unsigned __int16 *)(v8 + 2 * v7);
      if (*(_WORD *)(v8 + 2 * v7))
      {
        v10 = 0;
        v11 = v9 - 1;
        if (v11 >= v6)
          v12 = *(_DWORD *)(a4 + 28);
        else
          v12 = v11;
        v13 = *(_DWORD *)(*(_QWORD *)(a1 + 808) + 4 * v7);
        while (1)
        {
          v14 = v12 + v10;
          v15 = v13 + ((v12 + v10) >> 1);
          v16 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 824) + 2 * v15);
          if (v6 == v16)
            break;
          v17 = v14 >> 1;
          if (v6 >= v16)
          {
            v10 = v17 + 1;
          }
          else
          {
            if (v14 < 2)
              goto LABEL_16;
            v12 = v17 - 1;
          }
          if (v10 > v12)
            goto LABEL_16;
        }
        *(_DWORD *)(a4 + 60) = v15;
      }
    }
  }
LABEL_16:
  v18 = *(unsigned int *)(a4 + 60);
  if ((_DWORD)v18 != -1)
  {
    if (*(_DWORD *)(a1 + 768))
      v19 = (_WORD *)(*(_QWORD *)(a1 + 760) + 2 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 856) + v18));
    else
      v19 = (_WORD *)(*(_QWORD *)(a1 + 840) + 2 * v18);
    *(_WORD *)(a4 + 66) = *v19;
    if (*(_DWORD *)(a1 + 744)
      && (*(_DWORD *)(*(_QWORD *)(a1 + 888) + 4 * (v18 >> 5)) & (1 << v18)) != 0
      && (*(_DWORD *)(*(_QWORD *)(a1 + 904) + 4 * (v18 >> 5)) & (1 << v18)) == 0)
    {
      WordLanguageModel::loadTrigramRecord(a1, a2, (uint64_t)a3, v18, a2, a3);
      LODWORD(v18) = *(_DWORD *)(a4 + 60);
    }
    *(_BYTE *)(a4 + 64) = (*(_DWORD *)(*(_QWORD *)(a1 + 872) + 4 * (v18 >> 5)) >> v18) & 1;
  }
}

uint64_t WordLanguageModel::setQuadgramContext(uint64_t this, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  _QWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;

  v5 = (_QWORD *)this;
  v6 = *(_DWORD *)(a4 + 28);
  v7 = *(_DWORD *)(this + 108);
  if (v7 > v6)
  {
    v9 = *(_DWORD *)(a4 + 72);
    if (v7 > v9)
    {
      v11 = *(unsigned int *)(a4 + 92);
      if (*(_DWORD *)(this + 1288) > v11)
      {
        if (*(_WORD *)(*(_QWORD *)(this + 1280) + 2 * v11))
        {
          this = WordLanguageModel::findQuad2Index((WordLanguageModel *)this, v11, v9);
          *(_DWORD *)(a4 + 80) = this;
          if ((_DWORD)this != -1)
          {
            v14 = this;
            if (*((_DWORD *)v5 + 308))
            {
              v15 = this >> 5;
              if ((*(_DWORD *)(v5[168] + 4 * v15) & (1 << this)) != 0
                && (*(_DWORD *)(v5[170] + 4 * v15) & (1 << this)) == 0)
              {
                WordLanguageModel::loadQuadgramRecord((uint64_t)v5, v12, v13, this, a2, a3);
                v14 = *(_DWORD *)(a4 + 80);
                v6 = *(_DWORD *)(a4 + 28);
                v16 = *((_DWORD *)v5 + 308) == 0;
              }
              else
              {
                v16 = 0;
              }
            }
            else
            {
              v16 = 1;
            }
            v17 = 0;
            if (*(unsigned __int16 *)(v5[166] + 2 * v14) - 1 >= v6)
              v18 = v6;
            else
              v18 = *(unsigned __int16 *)(v5[166] + 2 * v14) - 1;
            while (1)
            {
              v19 = *(_DWORD *)(v5[185] + 4 * v14);
              v20 = v5 + 187;
              if (!v16)
              {
                v19 = *(_DWORD *)(v5[185] + 4 * v14);
                v20 = v5 + 187;
                if ((*(_DWORD *)(v5[168] + 4 * (v14 >> 5)) & (1 << v14)) != 0)
                {
                  v19 = *(_DWORD *)(v5[207] + 4 * *(unsigned int *)(v5[185] + 4 * v14));
                  v20 = v5 + 209;
                }
              }
              v21 = (v18 + v17) >> 1;
              this = *v20;
              v22 = *(unsigned __int16 *)(this + 2 * (v19 + v21));
              if (v6 == v22)
                break;
              if (v6 >= v22)
              {
                v17 = v21 + 1;
              }
              else
              {
                if (v18 + v17 < 2)
                  goto LABEL_26;
                v18 = v21 - 1;
              }
              if (v17 > v18)
                goto LABEL_26;
            }
            *(_DWORD *)(a4 + 76) = v21;
          }
        }
      }
    }
  }
LABEL_26:
  v23 = *(_DWORD *)(a4 + 76);
  if (v23 != -1)
  {
    this = QuadgramData::getBackoffWeight((QuadgramData *)(v5 + 154), *(_DWORD *)(a4 + 80), v23);
    *(_WORD *)(a4 + 84) = this;
  }
  return this;
}

void WordLanguageModel::unsetContext(WordLanguageModel *this, LMContextData *a2)
{
  uint64_t v4;

  if (*((_DWORD *)this + 16) >= 2u)
  {
    v4 = *((_QWORD *)this + 29);
    if (v4)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 480))(v4, *((_QWORD *)a2 + 14));
    *((_BYTE *)a2 + 12) = 0;
  }
  LanguageModel::unsetContext(this, a2);
}

BOOL WordLanguageModel::mayWordBeIgnoredInContext(WordLanguageModel *this, unsigned int a2)
{
  return *((_DWORD *)this + 25) != -1
      && WordLanguageModel::getMaybeContextLmId(this, a2) == *((_DWORD *)this + 25);
}

void WordLanguageModel::readBigramRecord(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int16 v26;
  unsigned int v27;
  void *v28;

  v27 = 0;
  v12 = BigramData::isOnDiskCompressed((BigramData *)(a1 + 360), a2);
  v13 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 552) + 2 * a2);
  if (v12)
  {
    v26 = 0;
    readObject(*(RealDFileSubFileStream **)(a1 + 224), &v26, &v27);
    v14 = v26;
    v15 = *(_DWORD *)(a6 + 12);
    if (v26 > v15)
      DgnPrimArray<unsigned int>::reallocElts(a6, v26 - v15, 0);
    *(_DWORD *)(a6 + 8) = v14;
    readObjectArray(*(char ***)(a1 + 224), *(char **)a6, v14, &v27);
  }
  else
  {
    v16 = *(_DWORD *)(a3 + 12);
    if (v13 > v16)
      DgnPrimArray<short>::reallocElts(a3, v13 - v16, 0);
    *(_DWORD *)(a3 + 8) = v13;
    readObjectArray(*(char ***)(a1 + 224), *(char **)a3, v13, &v27);
  }
  if (*(_DWORD *)(a1 + 376))
  {
    v17 = *(char **)a5;
    if (*(_DWORD *)(a5 + 12) < v13)
    {
      v28 = 0;
      *(_DWORD *)(a5 + 12) = realloc_array(v17, &v28, v13, *(unsigned int *)(a5 + 8), *(unsigned int *)(a5 + 8), 1);
      v17 = (char *)v28;
      *(_QWORD *)a5 = v28;
    }
    *(_DWORD *)(a5 + 8) = v13;
    readObjectArray(*(char ***)(a1 + 224), v17, v13, &v27);
    if (!v12)
      return;
LABEL_16:
    v24 = a1 + 448;
    v25 = *(_DWORD *)(a3 + 12);
    if (v13 > v25)
      DgnPrimArray<short>::reallocElts(a3, v13 - v25, 0);
    *(_DWORD *)(a3 + 8) = v13;
    HuffmanDecoder<unsigned short,unsigned int>::decodeSuccessors(v24, a6, a3, v18, v19, v20, v21, v22);
    return;
  }
  v23 = *(_DWORD *)(a4 + 12);
  if (v13 > v23)
    DgnPrimArray<short>::reallocElts(a4, v13 - v23, 0);
  *(_DWORD *)(a4 + 8) = v13;
  readObjectArray(*(char ***)(a1 + 224), *(char **)a4, v13, &v27);
  if (v12)
    goto LABEL_16;
}

BOOL BigramData::isOnDiskCompressed(BigramData *this, unsigned int a2)
{
  uint64_t v2;

  if (*(_DWORD *)this
    && (v2 = a2 >> 5, (*(_DWORD *)(*((_QWORD *)this + 5) + 4 * v2) & (1 << a2)) != 0)
    && *((_DWORD *)this + 24))
  {
    return (*(_DWORD *)(*((_QWORD *)this + 9) + 4 * v2) & (1 << a2)) != 0;
  }
  else
  {
    return 0;
  }
}

void HuffmanDecoder<unsigned short,unsigned int>::decodeSuccessors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  unsigned int v23;

  HuffmanDecoder<unsigned short,unsigned int>::decodeValues(a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_DWORD *)(a3 + 8);
  if (v17)
  {
    v18 = 0;
    v19 = 0;
    v20 = *(_QWORD *)a3;
    do
    {
      v21 = v19;
      v22 = v18;
      v23 = *(unsigned __int16 *)(v20 + 2 * v18);
      if ((v19 ^ 0xFFFFu) < v23)
      {
        throwDecodeSuccessorOverflow(v9, v10, v11, v12, v13, v14, v15, v16);
        v20 = *(_QWORD *)a3;
        v17 = *(_DWORD *)(a3 + 8);
        LOWORD(v23) = *(_WORD *)(*(_QWORD *)a3 + 2 * v22);
      }
      v19 = v21 + v23;
      *(_WORD *)(v20 + 2 * v22) = v21 + v23;
      v18 = v22 + 1;
    }
    while (v17 > (unsigned __int16)(v22 + 1));
  }
}

void WordLanguageModel::readTrigramRecord(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int16 v26;
  unsigned int v27;
  void *v28;

  v27 = 0;
  v12 = TrigramData::isOnDiskCompressed((TrigramData *)(a1 + 744), a2);
  v13 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 1040) + 2 * a2);
  if (v12)
  {
    v26 = 0;
    readObject(*(RealDFileSubFileStream **)(a1 + 224), &v26, &v27);
    v14 = v26;
    v15 = *(_DWORD *)(a6 + 12);
    if (v26 > v15)
      DgnPrimArray<unsigned int>::reallocElts(a6, v26 - v15, 0);
    *(_DWORD *)(a6 + 8) = v14;
    readObjectArray(*(char ***)(a1 + 224), *(char **)a6, v14, &v27);
  }
  else
  {
    v16 = *(_DWORD *)(a3 + 12);
    if (v13 > v16)
      DgnPrimArray<short>::reallocElts(a3, v13 - v16, 0);
    *(_DWORD *)(a3 + 8) = v13;
    readObjectArray(*(char ***)(a1 + 224), *(char **)a3, v13, &v27);
  }
  if (*(_DWORD *)(a1 + 784))
  {
    v17 = *(char **)a5;
    if (*(_DWORD *)(a5 + 12) < v13)
    {
      v28 = 0;
      *(_DWORD *)(a5 + 12) = realloc_array(v17, &v28, v13, *(unsigned int *)(a5 + 8), *(unsigned int *)(a5 + 8), 1);
      v17 = (char *)v28;
      *(_QWORD *)a5 = v28;
    }
    *(_DWORD *)(a5 + 8) = v13;
    readObjectArray(*(char ***)(a1 + 224), v17, v13, &v27);
    if (!v12)
      return;
LABEL_16:
    v24 = a1 + 936;
    v25 = *(_DWORD *)(a3 + 12);
    if (v13 > v25)
      DgnPrimArray<short>::reallocElts(a3, v13 - v25, 0);
    *(_DWORD *)(a3 + 8) = v13;
    HuffmanDecoder<unsigned short,unsigned int>::decodeSuccessors(v24, a6, a3, v18, v19, v20, v21, v22);
    return;
  }
  v23 = *(_DWORD *)(a4 + 12);
  if (v13 > v23)
    DgnPrimArray<short>::reallocElts(a4, v13 - v23, 0);
  *(_DWORD *)(a4 + 8) = v13;
  readObjectArray(*(char ***)(a1 + 224), *(char **)a4, v13, &v27);
  if (v12)
    goto LABEL_16;
}

BOOL TrigramData::isOnDiskCompressed(TrigramData *this, unsigned int a2)
{
  uint64_t v2;

  if (*(_DWORD *)this
    && (v2 = a2 >> 5, (*(_DWORD *)(*((_QWORD *)this + 18) + 4 * v2) & (1 << a2)) != 0)
    && *((_DWORD *)this + 50))
  {
    return (*(_DWORD *)(*((_QWORD *)this + 22) + 4 * v2) & (1 << a2)) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t TrigramData::tri2SetUnallocated(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  int v3;

  v2 = a2 >> 5;
  *(_DWORD *)(*(_QWORD *)(this + 128) + 4 * v2) &= ~(1 << a2);
  if (*(_DWORD *)this)
  {
    v3 = ~(1 << a2);
    *(_DWORD *)(*(_QWORD *)(this + 144) + 4 * v2) &= v3;
    *(_DWORD *)(*(_QWORD *)(this + 160) + 4 * v2) &= v3;
    if (*(_DWORD *)(this + 200))
      *(_DWORD *)(*(_QWORD *)(this + 176) + 4 * v2) &= v3;
  }
  *(_DWORD *)(*(_QWORD *)(this + 280) + 4 * a2) = -1;
  *(_WORD *)(*(_QWORD *)(this + 296) + 2 * a2) = 0;
  return this;
}

void WordLanguageModel::readCompressedQuad3Data(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;

  v15 = 0;
  readObject(*(RealDFileSubFileStream **)(a1 + 224), &v15, a4);
  v8 = v15;
  v9 = *(_DWORD *)(a2 + 12);
  v10 = v15;
  if (v15 > v9)
  {
    DgnPrimArray<unsigned int>::reallocElts(a2, v15 - v9, 0);
    v10 = v15;
  }
  *(_DWORD *)(a2 + 8) = v8;
  readObjectArray(*(char ***)(a1 + 224), *(char **)a2, v10, a4);
  v14 = 0;
  readObject(*(RealDFileSubFileStream **)(a1 + 224), &v14, a4);
  v11 = v14;
  v12 = *(_DWORD *)(a3 + 12);
  v13 = v14;
  if (v14 > v12)
  {
    DgnPrimArray<unsigned int>::reallocElts(a3, v14 - v12, 0);
    v13 = v14;
  }
  *(_DWORD *)(a3 + 8) = v11;
  readObjectArray(*(char ***)(a1 + 224), *(char **)a3, v13, a4);
}

void WordLanguageModel::readUncompressedQuad3Data(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  readObjectArray(*(char ***)(a1 + 224), *(char **)a2, *(_DWORD *)(a2 + 8), a4);
  readObjectArray(*(char ***)(a1 + 224), *(char **)a3, *(_DWORD *)(a3 + 8), a4);
}

void WordLanguageModel::readQuadgramRecord(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _BOOL4 v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  unsigned int v25;
  RealDFileSubFileStream *v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  void *v50;

  v49 = 0;
  v20 = QuadgramData::isOnDiskCompressed((QuadgramData *)(a1 + 1232), a2);
  v21 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 1328) + 2 * a2);
  v22 = *(_DWORD *)(a3 + 12);
  if (v21 > v22)
    DgnPrimArray<short>::reallocElts(a3, v21 - v22, 0);
  *(_DWORD *)(a3 + 8) = v21;
  v23 = *(_DWORD *)(a4 + 12);
  if (v21 > v23)
    DgnPrimArray<short>::reallocElts(a4, v21 - v23, 0);
  *(_DWORD *)(a4 + 8) = v21;
  if (v20)
    WordLanguageModel::readCompressedQuad3Data(a1, a10, a11, &v49);
  else
    WordLanguageModel::readUncompressedQuad3Data(a1, a3, a4, &v49);
  if (*(_DWORD *)(a1 + 1256))
  {
    v24 = *(char **)a7;
    if (*(_DWORD *)(a7 + 12) < v21)
    {
      v50 = 0;
      *(_DWORD *)(a7 + 12) = realloc_array(v24, &v50, v21, *(unsigned int *)(a7 + 8), *(unsigned int *)(a7 + 8), 1);
      v24 = (char *)v50;
      *(_QWORD *)a7 = v50;
    }
    *(_DWORD *)(a7 + 8) = v21;
    readObjectArray(*(char ***)(a1 + 224), v24, v21, &v49);
  }
  else
  {
    v25 = *(_DWORD *)(a6 + 12);
    if (v21 > v25)
      DgnPrimArray<short>::reallocElts(a6, v21 - v25, 0);
    *(_DWORD *)(a6 + 8) = v21;
    readObjectArray(*(char ***)(a1 + 224), *(char **)a6, v21, &v49);
  }
  v48 = 0;
  v26 = *(RealDFileSubFileStream **)(a1 + 224);
  if (v20)
  {
    readObject(v26, &v48, &v49);
    readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), a12, &v49);
  }
  else
  {
    readObject<unsigned short>(v26, a5, &v49);
    v48 = *(_DWORD *)(a5 + 8);
  }
  v27 = v48;
  if (*(_DWORD *)(a1 + 1272))
  {
    v28 = *(char **)a9;
    if (*(_DWORD *)(a9 + 12) < v48)
    {
      v50 = 0;
      *(_DWORD *)(a9 + 12) = realloc_array(v28, &v50, v48, *(unsigned int *)(a9 + 8), *(unsigned int *)(a9 + 8), 1);
      v28 = (char *)v50;
      *(_QWORD *)a9 = v50;
    }
    *(_DWORD *)(a9 + 8) = v27;
    readObjectArray(*(char ***)(a1 + 224), v28, v27, &v49);
    if (!v20)
      return;
LABEL_26:
    v35 = a1 + 1392;
    HuffmanDecoder<unsigned short,unsigned int>::decodeValues(v35, a10, a3, v29, v30, v31, v32, v33);
    HuffmanDecoder<unsigned short,unsigned int>::decodeSuccessors(v35, a11, a4, v36, v37, v38, v39, v40);
    v46 = v48;
    v47 = *(_DWORD *)(a5 + 12);
    if (v48 > v47)
      DgnPrimArray<short>::reallocElts(a5, v48 - v47, 0);
    *(_DWORD *)(a5 + 8) = v46;
    HuffmanDecoder<unsigned short,unsigned int>::decodeValues(v35, a12, a5, v41, v42, v43, v44, v45);
    return;
  }
  v34 = *(_DWORD *)(a8 + 12);
  if (v48 > v34)
    DgnPrimArray<short>::reallocElts(a8, v48 - v34, 0);
  *(_DWORD *)(a8 + 8) = v27;
  readObjectArray(*(char ***)(a1 + 224), *(char **)a8, v27, &v49);
  if (v20)
    goto LABEL_26;
}

BOOL QuadgramData::isOnDiskCompressed(QuadgramData *this, unsigned int a2)
{
  uint64_t v2;

  if (*(_DWORD *)this
    && (v2 = a2 >> 5, (*(_DWORD *)(*((_QWORD *)this + 14) + 4 * v2) & (1 << a2)) != 0)
    && *((_DWORD *)this + 42))
  {
    return (*(_DWORD *)(*((_QWORD *)this + 18) + 4 * v2) & (1 << a2)) != 0;
  }
  else
  {
    return 0;
  }
}

void readObject<unsigned short>(RealDFileSubFileStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v8 = 0;
  readObject(a1, &v8, a3);
  v6 = v8;
  v7 = *(_DWORD *)(a2 + 12);
  if (v8 > v7)
    DgnPrimArray<short>::reallocElts(a2, v8 - v7, 0);
  *(_DWORD *)(a2 + 8) = v6;
  readObjectArray((char **)a1, *(char **)a2, v6, a3);
}

void HuffmanDecoder<unsigned short,unsigned int>::decodeValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;

  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(unsigned int **)a2;
  v12 = **(_DWORD **)a2;
  v13 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 1;
    do
    {
      v12 = (v17 >> -(char)v15) | (v12 << v15);
      if (v15 >= v16)
      {
        if (v18 >= v10)
          goto LABEL_17;
        v17 = v11[v18++];
        if (v15 == v16)
        {
          v16 = 32;
        }
        else
        {
          v12 |= v17 >> (v16 - v15);
          v17 <<= v15 - v16;
          v16 = 32 - (v15 - v16);
        }
      }
      else
      {
        v16 -= v15;
        v17 <<= v15;
      }
      if (v12 >= *(_DWORD *)(a1 + 64))
      {
        v22 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v12 >> 21));
        v21 = *(_DWORD *)(*(_QWORD *)a1 + 4 * v22);
      }
      else
      {
        v19 = *(_DWORD *)(a1 + 68);
        do
        {
          v20 = v19;
          v21 = *(_DWORD *)(*(_QWORD *)a1 + 4 * v19--);
        }
        while (v12 < v21);
        v22 = v20;
      }
      v15 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v22);
      *(_WORD *)(*(_QWORD *)a3 + 2 * v14++) = *(_WORD *)(*(_QWORD *)(a1 + 48)
                                                       + 2
                                                       * (((v12 - v21) >> -(char)v15)
                                                        + *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v22)));
    }
    while (v14 != v13);
  }
  else
  {
    LODWORD(v14) = 0;
    v16 = 0;
    v15 = 0;
    v18 = 1;
LABEL_17:
    if (v14 < v13)
    {
      v23 = v10 + 2;
      v24 = v14;
      do
      {
        if (v15 >= v16)
        {
          if (v18 >= v23)
            throwDecodeEndOfData(a1, a2, a3, a4, a5, a6, a7, a8);
          ++v18;
          v16 += 32;
        }
        if (v12 >= *(_DWORD *)(a1 + 64))
        {
          v28 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v12 >> 21));
          v27 = *(_DWORD *)(*(_QWORD *)a1 + 4 * v28);
        }
        else
        {
          v25 = *(_DWORD *)(a1 + 68);
          do
          {
            v26 = v25;
            v27 = *(_DWORD *)(*(_QWORD *)a1 + 4 * v25--);
          }
          while (v12 < v27);
          v28 = v26;
        }
        v16 -= v15;
        v15 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v28);
        *(_WORD *)(*(_QWORD *)a3 + 2 * v24++) = *(_WORD *)(*(_QWORD *)(a1 + 48)
                                                         + 2
                                                         * (((v12 - v27) >> -(char)v15)
                                                          + *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v28)));
        v12 <<= v15;
      }
      while (v24 < *(unsigned int *)(a3 + 8));
    }
  }
}

uint64_t QuadgramData::quad2SetUnallocated(uint64_t this, unsigned int a2)
{
  uint64_t v2;

  if (*(_DWORD *)this)
  {
    v2 = a2 >> 5;
    *(_DWORD *)(*(_QWORD *)(this + 112) + 4 * v2) &= ~(1 << a2);
    *(_DWORD *)(*(_QWORD *)(this + 128) + 4 * v2) &= ~(1 << a2);
    if (*(_DWORD *)(this + 168))
      *(_DWORD *)(*(_QWORD *)(this + 144) + 4 * v2) &= ~(1 << a2);
  }
  *(_DWORD *)(*(_QWORD *)(this + 248) + 4 * a2) = -1;
  *(_WORD *)(*(_QWORD *)(this + 96) + 2 * a2) = 0;
  return this;
}

uint64_t WordLanguageModel::beginLMSyncRecog(WordLanguageModel *this, int a2, LMContextData *a3)
{
  uint64_t result;
  BOOL v6;

  (*(void (**)(WordLanguageModel *, LMContextData *))(*(_QWORD *)this + 480))(this, a3);
  result = *((_QWORD *)this + 5);
  if (result)
    v6 = a2 == 0;
  else
    v6 = 1;
  if (!v6)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 64))(result, 0);
  return result;
}

uint64_t WordLanguageModel::beginRescoringInLMSyncRecog(WordLanguageModel *this, LMContextData *a2)
{
  uint64_t result;

  (*(void (**)(WordLanguageModel *, LMContextData *))(*(_QWORD *)this + 480))(this, a2);
  result = *((_QWORD *)this + 5);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 64))(result, 0);
  return result;
}

uint64_t WordLanguageModel::endLMSyncRecog(WordLanguageModel *this, int a2, LMContextData *a3)
{
  uint64_t result;
  BOOL v6;

  (*(void (**)(WordLanguageModel *, LMContextData *))(*(_QWORD *)this + 480))(this, a3);
  result = *((_QWORD *)this + 5);
  if (result)
    v6 = a2 == 0;
  else
    v6 = 1;
  if (!v6)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 64))(result, 0);
  return result;
}

_QWORD *WordLanguageModel::clearLoadedData(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v2 = a2;
  result = *(_QWORD **)(a1 + 232);
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 432))(result, a2);
  if (v2 <= 1 && *(_DWORD *)(a1 + 64) >= 2u && *(_DWORD *)(a1 + 360))
  {
    if (*(_DWORD *)(a1 + 656))
    {
      v5 = 0;
      v6 = *(_QWORD *)(a1 + 648);
      v7 = *(_QWORD *)(a1 + 536);
      v8 = *(_QWORD *)(a1 + 664);
      v9 = *(_QWORD *)(a1 + 416);
      do
      {
        v10 = *(unsigned int *)(v6 + 4 * v5);
        *(_DWORD *)(v7 + 4 * v10) = *(_DWORD *)(v8 + 4 * *(unsigned int *)(v7 + 4 * v10));
        *(_DWORD *)(v9 + ((v10 >> 3) & 0x1FFFFFFC)) &= ~(1 << v10);
        ++v5;
      }
      while (v5 < *(unsigned int *)(a1 + 656));
    }
    result = BigramData::freeLoadedData((BigramData *)(a1 + 360));
  }
  if (v2)
  {
    if (v2 == 3)
    {
LABEL_20:
      if (*(_DWORD *)(a1 + 64) >= 4u && *(_DWORD *)(a1 + 1232))
      {
        if (*(_DWORD *)(a1 + 1632))
        {
          v17 = 0;
          v18 = *(_QWORD *)(a1 + 1624);
          v19 = *(_QWORD *)(a1 + 1480);
          v20 = *(_QWORD *)(a1 + 1640);
          v21 = *(_QWORD *)(a1 + 1360);
          do
          {
            v22 = *(unsigned int *)(v18 + 4 * v17);
            *(_DWORD *)(v19 + 4 * v22) = *(_DWORD *)(v20 + 4 * *(unsigned int *)(v19 + 4 * v22));
            *(_DWORD *)(v21 + ((v22 >> 3) & 0x1FFFFFFC)) &= ~(1 << v22);
            ++v17;
          }
          while (v17 < *(unsigned int *)(a1 + 1632));
        }
        return QuadgramData::freeLoadedData((QuadgramData *)(a1 + 1232));
      }
      return result;
    }
    if (v2 != 2)
      return result;
  }
  if (*(_DWORD *)(a1 + 64) >= 3u && *(_DWORD *)(a1 + 744))
  {
    if (*(_DWORD *)(a1 + 1144))
    {
      v11 = 0;
      v12 = *(_QWORD *)(a1 + 1136);
      v13 = *(_QWORD *)(a1 + 1024);
      v14 = *(_QWORD *)(a1 + 1152);
      v15 = *(_QWORD *)(a1 + 904);
      do
      {
        v16 = *(unsigned int *)(v12 + 4 * v11);
        *(_DWORD *)(v13 + 4 * v16) = *(_DWORD *)(v14 + 4 * *(unsigned int *)(v13 + 4 * v16));
        *(_DWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFC)) &= ~(1 << v16);
        ++v11;
      }
      while (v11 < *(unsigned int *)(a1 + 1144));
    }
    result = TrigramData::freeLoadedData((TrigramData *)(a1 + 744));
  }
  if (!v2)
    goto LABEL_20;
  return result;
}

_QWORD *BigramData::freeLoadedData(BigramData *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;

  v2 = (_QWORD *)*((_QWORD *)this + 36);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((_QWORD *)this + 36) = 0;
  }
  *((_QWORD *)this + 37) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 38);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((_QWORD *)this + 38) = 0;
  }
  *((_QWORD *)this + 39) = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 40);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((_QWORD *)this + 40) = 0;
  }
  *((_QWORD *)this + 41) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 42);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((_QWORD *)this + 42) = 0;
  }
  *((_QWORD *)this + 43) = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 44);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((_QWORD *)this + 44) = 0;
  }
  *((_QWORD *)this + 45) = 0;
  result = (_QWORD *)*((_QWORD *)this + 46);
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *((_QWORD *)this + 46) = 0;
  }
  *((_QWORD *)this + 47) = 0;
  return result;
}

_QWORD *TrigramData::freeLoadedData(TrigramData *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;

  v2 = (_QWORD *)*((_QWORD *)this + 49);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((_QWORD *)this + 49) = 0;
  }
  *((_QWORD *)this + 50) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 51);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((_QWORD *)this + 51) = 0;
  }
  *((_QWORD *)this + 52) = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 53);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((_QWORD *)this + 53) = 0;
  }
  *((_QWORD *)this + 54) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 55);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((_QWORD *)this + 55) = 0;
  }
  *((_QWORD *)this + 56) = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 57);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((_QWORD *)this + 57) = 0;
  }
  *((_QWORD *)this + 58) = 0;
  result = (_QWORD *)*((_QWORD *)this + 59);
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *((_QWORD *)this + 59) = 0;
  }
  *((_QWORD *)this + 60) = 0;
  return result;
}

_QWORD *QuadgramData::freeLoadedData(QuadgramData *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *result;

  v2 = (_QWORD *)*((_QWORD *)this + 49);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((_QWORD *)this + 49) = 0;
  }
  *((_QWORD *)this + 50) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 51);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((_QWORD *)this + 51) = 0;
  }
  *((_QWORD *)this + 52) = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 53);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((_QWORD *)this + 53) = 0;
  }
  *((_QWORD *)this + 54) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 55);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((_QWORD *)this + 55) = 0;
  }
  *((_QWORD *)this + 56) = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 57);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((_QWORD *)this + 57) = 0;
  }
  *((_QWORD *)this + 58) = 0;
  v7 = (_QWORD *)*((_QWORD *)this + 59);
  if (v7)
  {
    MemChunkFree(v7, 0);
    *((_QWORD *)this + 59) = 0;
  }
  *((_QWORD *)this + 60) = 0;
  v8 = (_QWORD *)*((_QWORD *)this + 61);
  if (v8)
  {
    MemChunkFree(v8, 0);
    *((_QWORD *)this + 61) = 0;
  }
  *((_QWORD *)this + 62) = 0;
  v9 = (_QWORD *)*((_QWORD *)this + 63);
  if (v9)
  {
    MemChunkFree(v9, 0);
    *((_QWORD *)this + 63) = 0;
  }
  *((_QWORD *)this + 64) = 0;
  v10 = (_QWORD *)*((_QWORD *)this + 65);
  if (v10)
  {
    MemChunkFree(v10, 0);
    *((_QWORD *)this + 65) = 0;
  }
  *((_QWORD *)this + 66) = 0;
  v11 = (_QWORD *)*((_QWORD *)this + 67);
  if (v11)
  {
    MemChunkFree(v11, 0);
    *((_QWORD *)this + 67) = 0;
  }
  *((_QWORD *)this + 68) = 0;
  result = (_QWORD *)*((_QWORD *)this + 69);
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *((_QWORD *)this + 69) = 0;
  }
  *((_QWORD *)this + 70) = 0;
  return result;
}

void WordLanguageModel::initForBuild(WordLanguageModel *this, const WordNgramBuildSpec *x1_0, const WordNgramTemplate *x2_0, double a2, double a3)
{
  *((_QWORD *)this + 226) = x1_0;
  *((_QWORD *)this + 227) = x2_0;
  *((_DWORD *)this + 16) = *((_DWORD *)x1_0 + 2);
  *((_BYTE *)this + 80) = *((_BYTE *)x1_0 + 12);
  WordLanguageModel::initializeScoreToProb(this, a2, a3);
}

void WordLanguageModel::startBuildingNgramLM(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;

  *(_QWORD *)(a1 + 184) = a2;
  *(_QWORD *)(a1 + 192) = a3;
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 1800) = a5;
  if (!*(_DWORD *)(a5 + 8))
  {
    v10 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 388);
    v11 = *(_DWORD *)(a2 + 12);
    v12 = v10;
    if (v10 > v11)
    {
      DgnPrimArray<unsigned long long>::reallocElts(a2, v10 - v11, 0);
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 388);
    }
    *(_DWORD *)(a2 + 8) = v10;
    if (v12)
      bzero(*(void **)a2, 8 * v12);
    *a3 = 0;
    *a4 = 0;
    v13 = *(unsigned int *)(a1 + 64);
    v14 = *(_DWORD *)(a5 + 12);
    if (v13 > v14)
      DgnPrimArray<unsigned long long>::reallocElts(a5, v13 - v14, 0);
    v15 = *(unsigned int *)(a5 + 8);
    if (v15 <= v13)
    {
      if (v15 < v13)
      {
        do
          *(_QWORD *)(*(_QWORD *)a5 + 8 * v15++) = 0;
        while (v13 != v15);
      }
    }
    else
    {
      DgnIOwnArray<ParamSetBase *>::destructAt(a5, v13, v15 - v13);
    }
    *(_DWORD *)(a5 + 8) = v13;
    **(_QWORD **)a5 = 0;
    if (*(_DWORD *)(a1 + 64) >= 2u)
    {
      v16 = 1;
      do
      {
        v17 = MemChunkAlloc(0x70uLL, 0);
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v16++) = Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::Hash((uint64_t)v17, 0, *(_DWORD *)(*(_QWORD *)(a1 + 16) + 388));
      }
      while (v16 < *(unsigned int *)(a1 + 64));
    }
  }
}

uint64_t WordLanguageModel::addBuildNgramLM(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (*(_DWORD *)(a2 + 8))
  {
    v7 = result;
    v8 = 0;
    v9 = 0;
    do
    {
      result = WordLanguageModel::addBuildOneTranscriptNgramLM(v7, *(_QWORD *)a2 + v8, *a3 + v8, *(_DWORD *)(*a4 + 4 * v9++));
      v8 += 16;
    }
    while (v9 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t WordLanguageModel::addBuildOneTranscriptNgramLM(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v9;
  _DWORD *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int HeadCloneForBuildWordId;
  char *v15;
  int v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  double *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  char *v31;
  uint64_t Bucket;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  _QWORD *v38;
  double *v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  double *v43;
  _BYTE v44[4];
  _BYTE v45[12];
  void *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int v50;

  v50 = a4;
  v42 = *(unsigned int *)(a2 + 8);
  v39 = *(double **)(a1 + 192);
  v40 = *(_QWORD **)(a1 + 184);
  v43 = *(double **)(a1 + 200);
  v6 = *(_QWORD **)(a1 + 1800);
  v48 = 0;
  v49 = 0;
  v7 = *(unsigned int *)(a1 + 64);
  if (v7 >= 2)
  {
    v46 = 0;
    v9 = realloc_array(0, &v46, 4 * v7, 0, 0, 1);
    v10 = v46;
    v48 = (char *)v46;
    LODWORD(v49) = v7;
    HIDWORD(v49) = v9 >> 2;
    LODWORD(v7) = *(_DWORD *)(a1 + 64);
    if (v7 >= 2)
    {
      v11 = -1;
      v12 = 1;
      do
      {
        v13 = *(unsigned int *)(a3 + 8);
        if (v12 <= v13)
        {
          HeadCloneForBuildWordId = WordNgramTemplate::getHeadCloneForBuildWordId(*(WordNgramTemplate **)(a1 + 1816), *(unsigned int *)(*(_QWORD *)a3 + 4 * (v11 + v13)));
          v10 = v48;
        }
        else
        {
          HeadCloneForBuildWordId = 16777212;
        }
        v10[v12++] = HeadCloneForBuildWordId;
        --v11;
      }
      while (v12 < *(unsigned int *)(a1 + 64));
      LODWORD(v7) = *(_DWORD *)(a1 + 64);
    }
  }
  v38 = (_QWORD *)a2;
  v46 = 0;
  v47 = 0;
  if ((_DWORD)v7)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 4;
    do
    {
      if (v18 != 4)
        memset_pattern16(v45, &unk_209A7B4D0, v18 - 4);
      *(_DWORD *)&v44[v18] = 0xFFFFFF;
      if (v16 == HIDWORD(v47))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v46, 1, 1);
        v16 = v47;
        v15 = (char *)v46;
      }
      ++v17;
      v19 = &v15[16 * v16];
      *(_DWORD *)v19 = v17;
      memcpy(v19 + 4, v45, v18);
      v16 = v47 + 1;
      LODWORD(v47) = v47 + 1;
      v18 += 4;
    }
    while (v17 < *(unsigned int *)(a1 + 64));
  }
  v20 = v42;
  if ((_DWORD)v42)
  {
    v21 = 0;
    v41 = *(_DWORD *)(*(_QWORD *)(a1 + 1816) + 4);
    do
    {
      v22 = *(_DWORD *)(*v38 + 4 * v21);
      v23 = WordNgramTemplate::getHeadCloneForBuildWordId(*(WordNgramTemplate **)(a1 + 1816), v22);
      v25 = v23;
      v26 = v43;
      if (v23 != 16777213)
      {
        if (v23 == 0xFFFFFF)
          v26 = v39;
        else
          v26 = (double *)(*v40 + 8 * v23);
      }
      LODWORD(v24) = v50;
      *v26 = *v26 + (double)v24;
      if (*(_DWORD *)(a1 + 64) >= 2u)
      {
        v27 = 6;
        v28 = 1;
        do
        {
          v29 = 0;
          v30 = (unsigned int *)v46;
          *((_DWORD *)v46 + 4 * v28 + 1) = v25;
          v31 = v48 + 4;
          do
          {
            v30[v27 + v29] = *(_DWORD *)&v31[4 * v29];
            ++v29;
          }
          while (v28 != v29);
          Bucket = Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(*(_QWORD *)(*v6 + 8 * v28), &v30[4 * v28]);
          if (*(_QWORD *)Bucket)
            *(_DWORD *)(*(_QWORD *)Bucket + 28) += v50;
          else
            Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::add(*(_QWORD *)(*v6 + 8 * v28), (_DWORD *)v46 + 4 * v28, &v50);
          ++v28;
          v33 = *(unsigned int *)(a1 + 64);
          v27 += 4;
        }
        while (v28 < v33);
        v34 = (v33 - 1);
        v35 = v48;
        if (v22 == 16777213)
        {
          v25 = v41;
          if (v34 >= 2)
          {
            memset_pattern16(&v48[4 * (v34 - (v33 - 3))], &unk_209A7B4D0, 4 * (v33 - 3) + 4);
            v25 = v41;
          }
        }
        else if (v34 >= 2)
        {
          v36 = v33 - 2;
          do
            *(_DWORD *)&v35[4 * v34--] = *(_DWORD *)&v35[4 * v36--];
          while ((v34 & 0xFFFFFFFE) != 0);
        }
        *((_DWORD *)v35 + 1) = v25;
        v20 = v42;
      }
      ++v21;
    }
    while (v21 != v20);
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v46);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
}

void sub_20999965C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::add(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int *v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = result;
  v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1)
    result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  v7 = *a2;
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = v7 - 1;
    do
    {
      HIDWORD(v10) = v8;
      LODWORD(v10) = v8;
      v8 = a2[v9 + 1] + (v10 >> 19);
    }
    while ((unint64_t)v9--);
  }
  else
  {
    v8 = 0;
  }
  v12 = *(_DWORD *)(v5 + 16);
  if (v12)
    v13 = (-1640531527 * v8) >> -(char)v12;
  else
    v13 = 0;
  v14 = *(_QWORD *)(v5 + 80);
  v15 = *(_QWORD *)(v5 + 32);
  if (!v15)
  {
    result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    v15 = *(_QWORD *)(v5 + 32);
    LODWORD(v7) = *a2;
  }
  *(_QWORD *)(v5 + 32) = *(_QWORD *)v15;
  *(_DWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 12) = v7;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v16 = (_DWORD *)(v15 + 16);
    v17 = a2 + 1;
    do
    {
      v18 = *v17++;
      *v16++ = v18;
      --v7;
    }
    while (v7);
  }
  v19 = (_QWORD *)(v14 + 8 * v13);
  *(_DWORD *)(v15 + 28) = *a3;
  *(_DWORD *)(v15 + 8) = v8;
  ++*(_DWORD *)(v5 + 8);
  if (*(_BYTE *)(v5 + 20))
  {
    *(_QWORD *)v15 = *v19;
  }
  else
  {
    *(_QWORD *)v15 = 0;
    v20 = (_QWORD *)*v19;
    if (*v19)
    {
      do
      {
        v19 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
    }
  }
  *v19 = v15;
  return result;
}

BOOL WordLanguageModel::endBuildingNgramLM(WordLanguageModel *this)
{
  _BOOL8 v2;
  double v3;
  _QWORD v5[2];
  _QWORD v6[2];
  double v7;
  _QWORD v8[2];

  WordLanguageModel::assignBuildLmIds(this);
  v8[0] = 0;
  v8[1] = 0;
  v7 = 0.0;
  v2 = WordLanguageModel::buildUnigramData((uint64_t)this, (uint64_t)v8, &v7);
  if (v2)
  {
    v6[0] = 0;
    v6[1] = 0;
    v5[0] = 0;
    v5[1] = 0;
    if (*((_DWORD *)this + 16) >= 2u)
    {
      v3 = v7;
      WordLanguageModel::buildNgramProbs((uint64_t)this, 2u, v8, (uint64_t)v6, (uint64_t)v5, v7);
      WordLanguageModel::buildBigramDataFromProbsAndWeights((uint64_t)this, *(_QWORD *)v6[0], *(_QWORD *)v5[0]);
      if (*((_DWORD *)this + 16) >= 3u)
      {
        WordLanguageModel::buildNgramProbs((uint64_t)this, 3u, v8, (uint64_t)v6, (uint64_t)v5, v3);
        WordLanguageModel::buildTrigramDataFromProbsAndWeights((uint64_t)this, *(_QWORD *)(v6[0] + 8), *(_QWORD *)(v5[0] + 8));
      }
    }
    DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)v5);
    DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)v6);
  }
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 225) = 0;
  *((_QWORD *)this + 227) = 0;
  *((_QWORD *)this + 226) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v8);
  return v2;
}

void sub_2099998D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)va);
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t WordLanguageModel::assignBuildLmIds(WordLanguageModel *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  int v8;
  int *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 227);
  v3 = *(_DWORD *)(v2 + 4);
  v4 = *(_DWORD *)(v2 + 8);
  v5 = (_QWORD *)*((_QWORD *)this + 23);
  v15 = 0;
  v16 = 0;
  WordLanguageModel::createBuildWordIdAndCountArray(this, (uint64_t)v5, v3, v4, (uint64_t)&v15);
  v6 = v16;
  *((_DWORD *)this + 18) = v16 + 1;
  *((_DWORD *)this + 26) = v6 + 2;
  v7 = *(unsigned int *)(*((_QWORD *)this + 227) + 12);
  if ((_DWORD)v7 == 16777212)
  {
    v8 = 0;
    *((_DWORD *)this + 25) = -1;
    v9 = (int *)((char *)this + 100);
  }
  else
  {
    *((_DWORD *)this + 25) = -1;
    v9 = (int *)((char *)this + 100);
    if (*(_BYTE *)(*((_QWORD *)this + 226) + 13))
    {
      if (*(double *)(*v5 + 8 * v7) == 0.0)
      {
        *((_DWORD *)this + 25) = v6 + 2;
        *((_DWORD *)this + 26) = v6 + 3;
      }
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
  }
  WordLanguageModel::maybeAddBuildBegAndEndLmId((uint64_t)this);
  v10 = *((_DWORD *)this + 26);
  if (v10 >= 0xFFFF)
    v10 = 0xFFFF;
  *((_DWORD *)this + 27) = v10;
  WordLanguageModel::createBuildWordIdToLmIdArray((uint64_t)this, (uint64_t)&v15);
  if (v8 && *v9 == -1)
  {
    v11 = *(unsigned int *)(*((_QWORD *)this + 227) + 12);
    if (*((_DWORD *)this + 32))
    {
      v12 = *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v11);
    }
    else
    {
      if (*((_DWORD *)this + 36))
      {
        v12 = *(unsigned __int16 *)(*((_QWORD *)this + 17) + 2 * v11);
        v13 = v12 == 0xFFFF;
      }
      else
      {
        v12 = *(unsigned __int8 *)(*((_QWORD *)this + 19) + v11);
        v13 = v12 == 255;
      }
      if (v13)
        v12 = -1;
    }
    *v9 = v12;
  }
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v15);
}

void sub_209999A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL WordLanguageModel::buildUnigramData(uint64_t a1, uint64_t a2, double *a3)
{
  unint64_t v3;
  double *v7;
  uint64_t v8;
  double *v9;
  unint64_t v10;
  int v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  long double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unsigned int v30;
  unint64_t v31;
  int LmId;
  uint64_t v33;
  double *v34;
  uint64_t v35;
  double v36;
  unsigned int v37;
  double v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  _QWORD *v42;
  int v43;
  unint64_t i;
  double v45;
  double v46;
  long double v47;
  unint64_t v48;
  double v50;
  double *v51;
  uint64_t v52;
  void *v53;

  v8 = *(_QWORD *)(a1 + 184);
  v7 = *(double **)(a1 + 192);
  v9 = *(double **)(a1 + 200);
  if (*(_DWORD *)(v8 + 8))
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0.0;
    do
    {
      if (WordNgramTemplate::isHeadCloneWordId(*(WordNgramTemplate **)(a1 + 1816), v10))
      {
        v14 = *(double *)(*(_QWORD *)v8 + 8 * v10);
        if (v14 <= 0.0)
        {
          ++v11;
        }
        else
        {
          v13 = v13 + v14;
          ++v12;
        }
      }
      ++v10;
    }
    while (v10 < *(unsigned int *)(v8 + 8));
  }
  else
  {
    v12 = 0;
    v11 = 0;
    v13 = 0.0;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 1816) + 8) == 16777213)
  {
    if (*v9 <= 0.0)
    {
      ++v11;
    }
    else
    {
      v13 = v13 + *v9;
      ++v12;
    }
  }
  v15 = v13 + *v7;
  v16 = **(double **)(a1 + 1808);
  v19 = DgnExp(-20.0);
  v20 = (double)(v12 + v11 + 1);
  v21 = v15 * v19 / (1.0 - v20 * v19);
  if (v16 >= v21)
    v22 = v16;
  else
    v22 = v21;
  v23 = v15 + v20 * v22;
  v24 = (unint64_t)(v23 + 0.5);
  if (v24)
  {
    v25 = v23 - (double)v24;
    if (v25 > 1.0 || v25 < -1.0)
    {
      v50 = v15 + v20 * v22;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 14124, (uint64_t)"lm/wordlm", 28, (uint64_t)"%f", v17, v18, SLOBYTE(v50));
    }
    v27 = *(unsigned int *)(a1 + 104);
    v52 = 0;
    v53 = 0;
    v28 = realloc_array(0, &v53, 8 * v27, 0, 0, 1);
    v29 = (char *)v53;
    v51 = (double *)v53;
    v30 = *(_DWORD *)(a1 + 104);
    LODWORD(v52) = v27;
    HIDWORD(v52) = v28 >> 3;
    *(_QWORD *)v53 = 0;
    if (v30 >= 2)
      bzero(v29 + 8, 8 * (v30 - 2) + 8);
    if (*(_DWORD *)(v8 + 8))
    {
      v31 = 0;
      do
      {
        LmId = WordLanguageModel::getLmId((WordLanguageModel *)a1, v31);
        if (LmId != -1)
          v51[LmId] = *(double *)(*(_QWORD *)v8 + 8 * v31) + v51[LmId];
        ++v31;
      }
      while (v31 < *(unsigned int *)(v8 + 8));
    }
    if (*(_DWORD *)(*(_QWORD *)(a1 + 1816) + 8) == 16777213)
      v51[*(unsigned int *)(a1 + 116)] = *v9;
    v33 = *(unsigned int *)(a1 + 104);
    if (v33 >= 2)
    {
      v34 = v51 + 1;
      v35 = v33 - 1;
      do
      {
        *v34 = v22 + *v34;
        ++v34;
        --v35;
      }
      while (v35);
    }
    v36 = *v7;
    v37 = *(_DWORD *)(a1 + 180);
    if (v33 > v37)
      DgnPrimArray<short>::reallocElts(a1 + 168, v33 - v37, 0);
    *(_DWORD *)(a1 + 176) = v33;
    **(_WORD **)(a1 + 168) = 20000;
    v38 = DgnLog(v22 / v23);
    LODWORD(v3) = *(_DWORD *)(a1 + 32);
    v39 = *(_DWORD *)(a1 + 104);
    v40 = *(_DWORD *)(a2 + 12);
    v41 = v39;
    if (v39 > v40)
    {
      DgnPrimArray<unsigned long long>::reallocElts(a2, v39 - v40, 0);
      v41 = *(_DWORD *)(a1 + 104);
    }
    *(_DWORD *)(a2 + 8) = v39;
    v42 = *(_QWORD **)a2;
    **(_QWORD **)a2 = 0;
    if (v41 >= 2)
    {
      v43 = (int)(0.5 - v38 * (double)v3);
      for (i = 1; i < v41; *(double *)&v42[i++] = v46)
      {
        v45 = v51[i];
        if (v45 == v22)
        {
          *(_WORD *)(*(_QWORD *)(a1 + 168) + 2 * i) = v43;
          v46 = v22 / v23;
        }
        else
        {
          v46 = v45 / v23;
          v47 = DgnLog(v45 / v23);
          LODWORD(v48) = *(_DWORD *)(a1 + 32);
          *(_WORD *)(*(_QWORD *)(a1 + 168) + 2 * i) = (int)(0.5 - v47 * (double)v48);
          v42 = *(_QWORD **)a2;
          v41 = *(_DWORD *)(a1 + 104);
        }
      }
    }
    *a3 = (v22 + v36) / v23;
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v51);
  }
  return v24 != 0;
}

void sub_209999E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordLanguageModel::buildNgramProbs(uint64_t a1, unsigned int a2, _QWORD *a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v11;
  WordLanguageModel *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  int v21;
  char v22;
  double v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  double v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD *v38;
  double v39;
  size_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t Bucket;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD **v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD **v62;
  double *v63;
  char *v64;
  uint64_t v65;
  int *v66;
  _DWORD *v67;
  int v68;
  _QWORD *v69;
  _DWORD *v70;
  double v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  _QWORD *v86;
  unsigned int *v87;
  uint64_t v88;
  double v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v99;
  uint64_t *v100;
  unsigned int v101;
  uint64_t v102;
  double v104;
  int v105;
  _BYTE v106[112];
  double v107[14];
  _BYTE v108[112];
  unsigned int v109;
  _BYTE v110[12];
  unsigned int v111;
  unsigned int v112;
  _DWORD v113[2];
  _QWORD v114[2];
  _DWORD v115[4];
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  int v119;
  double v120;
  uint64_t v121;

  v102 = a2 - 1;
  v11 = *(_QWORD *)(**(_QWORD **)(a1 + 1800) + 8 * v102);
  v116 = 0;
  v117 = 0;
  v12 = WordLanguageModel::computeCountHistogram((WordLanguageModel *)a1, a2, v11, (uint64_t)&v116);
  v17 = *(_QWORD *)(a1 + 1808);
  v18 = 24;
  if (a2 == 2)
    v18 = 16;
  v19 = *(_DWORD *)(v17 + v18);
  if (v19)
    v20 = WordLanguageModel::computeLOODiscount((uint64_t)v12, *(_DWORD *)(v17 + v18), (uint64_t)&v116, v13, v14, v15, v16);
  else
    v20 = 0.0;
  v101 = a2 - 2;
  if (a2 == 2)
  {
    v21 = *(_DWORD *)(v17 + 20);
    v115[0] = 2;
LABEL_9:
    memset(&v115[1], 255, 4 * a2);
    v22 = 0;
    goto LABEL_10;
  }
  v21 = *(_DWORD *)(v17 + 28);
  v115[0] = a2;
  if (a2)
    goto LABEL_9;
  v22 = 1;
LABEL_10:
  v114[0] = 0;
  v114[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v114, &v116, 0, v117);
  v23 = WordLanguageModel::computeMinCountNotToPrune((WordLanguageModel *)a1, (uint64_t)v114, a2, v11, v21, v115);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v114);
  v111 = a2;
  if ((v22 & 1) == 0)
    memset(&v112, 255, 4 * a2);
  v24 = v102;
  v109 = v102;
  if ((_DWORD)v102)
    memset(v110, 255, 4 * v102);
  v25 = MemChunkAlloc(0x70uLL, 0);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::Hash((uint64_t)v25, 0, 2 * *(_DWORD *)(v11 + 8) + 2);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::Hash((uint64_t)v108, 0, 2 * *(_DWORD *)(v11 + 8) + 2);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::Hash((uint64_t)v107, 0, 2 * *(_DWORD *)(v11 + 8) + 2);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::Hash((uint64_t)v106, 0, 2 * *(_DWORD *)(v11 + 8) + 2);
  v26 = *(unsigned int *)(v11 + 12);
  if ((_DWORD)v26)
  {
    v27 = *(_QWORD **)(v11 + 80);
    v28 = (uint64_t *)*v27;
    if (*v27)
    {
      LODWORD(v29) = 0;
    }
    else
    {
      v29 = 0;
      v30 = v27 + 1;
      do
      {
        if (v26 - 1 == v29)
          goto LABEL_74;
        v28 = (uint64_t *)v30[v29++];
      }
      while (!v28);
    }
  }
  else
  {
    LODWORD(v29) = 0;
    v28 = 0;
  }
  if (v29 < v26)
  {
    v99 = a2 - 3;
    v100 = v25;
    do
    {
      v105 = *((_DWORD *)v28 + 7);
      if (v28)
        v31 = (uint64_t)v28 + 12;
      else
        v31 = 0;
      WordLanguageModel::setBuildLmIdNgramFromBuildWordIdNgram((WordLanguageModel *)a1, v31, &v111);
      if (v109)
        memcpy(v110, v113, 4 * v109);
      v33 = *(_DWORD *)(a1 + 108);
      if (v33 > v112)
      {
        if (v111 == 2)
        {
          if (v113[0] >= 0xFFFFF1u)
            goto LABEL_60;
        }
        else if (v33 <= v113[0] || v113[1] >= 0xFFFFF1u)
        {
          goto LABEL_60;
        }
        LODWORD(v32) = v105;
        v34 = (double)v32;
        if (v23 > v34)
        {
          if (v23 + -1.0 != v34)
            goto LABEL_60;
          v35 = v111 - 1;
          while ((v35 & 0x80000000) == 0)
          {
            v36 = *(&v111 + v35 + 1);
            v37 = v115[v35-- + 1];
            if (v36 != v37)
            {
              if (v36 >= v37)
                goto LABEL_60;
              break;
            }
          }
        }
        v120 = v34;
        Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::add((uint64_t)v25, &v111, &v120);
        if (!v24
          || (v104 = 0.0, LODWORD(v120) = v24, memcpy((char *)&v120 + 4, &v112, 4 * v102), (v101 & 0x80000000) != 0))
        {
          v47 = 1.0;
        }
        else
        {
          v38 = (_QWORD *)a5;
          v39 = 1.0;
          if (v101)
          {
            v40 = 4 * v101;
            v41 = v99;
            while (1)
            {
              v42 = *(_QWORD *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(*(_QWORD *)(*(_QWORD *)a4 + 8 * v41), (unsigned int *)&v120);
              if (v42)
                break;
              v43 = v41;
              v44 = *(_QWORD *)(*v38 + 8 * v41);
              v118 = v43 + 1;
              memcpy(&v119, &v121, v40);
              Bucket = Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(v44, &v118);
              if (*(_QWORD *)Bucket)
                v39 = v39 * *(double *)(*(_QWORD *)Bucket + 32);
              LODWORD(v120) = v43 + 1;
              v41 = v43 - 1;
              v40 -= 4;
              if (!v40)
                goto LABEL_48;
            }
            v47 = v39 * *(double *)(v42 + 32);
            a5 = (uint64_t)v38;
            v25 = v100;
            v24 = v102;
          }
          else
          {
LABEL_48:
            v46 = a6;
            if (HIDWORD(v120) != -1)
              v46 = *(double *)(*a3 + 8 * HIDWORD(v120));
            v47 = v39 * v46;
            a5 = (uint64_t)v38;
            v25 = v100;
            v24 = v102;
          }
        }
        v104 = v47;
        v48 = *(_QWORD *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket((uint64_t)v108, &v109);
        if (v48)
          *(double *)(v48 + 32) = v104 + *(double *)(v48 + 32);
        else
          Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::add((uint64_t)v108, &v109, &v104);
        if ((v19 & 0x80000000) == 0 && v105 > v19)
        {
          v49 = *(_QWORD *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket((uint64_t)v106, &v109);
          if (v49)
            *(_DWORD *)(v49 + 28) += v105;
          else
            Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::add((uint64_t)v106, &v109, &v105);
        }
      }
LABEL_60:
      v50 = *(_QWORD *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket((uint64_t)v107, &v109);
      if (v50)
        *(_DWORD *)(v50 + 28) += v105;
      else
        Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::add((uint64_t)v107, &v109, &v105);
      v51 = (uint64_t *)*v28;
      v52 = *(unsigned int *)(v11 + 12);
      if (!*v28)
      {
        v29 = (v29 + 1);
        if (v29 >= v52)
        {
          v51 = v28;
        }
        else
        {
          v53 = *(_QWORD *)(v11 + 80);
          v51 = *(uint64_t **)(v53 + 8 * v29);
          if (!v51)
          {
            v54 = (uint64_t *)(v53 + 8 * v29 + 8);
            v55 = ~v29 + v52;
            while (v55)
            {
              v56 = (uint64_t *)*v54++;
              v51 = v56;
              LODWORD(v29) = v29 + 1;
              --v55;
              if (v56)
                goto LABEL_71;
            }
            break;
          }
        }
      }
LABEL_71:
      v28 = v51;
    }
    while (v29 < v52);
  }
LABEL_74:
  v57 = MemChunkAlloc(0x70uLL, 0);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::Hash((uint64_t)v57, 0, 2 * *((_DWORD *)v25 + 2) + 2);
  v58 = *((unsigned int *)v25 + 3);
  if (!(_DWORD)v58)
  {
    v60 = 0;
    goto LABEL_81;
  }
  v59 = (_QWORD **)v25[10];
  v60 = *v59;
  if (*v59)
  {
LABEL_81:
    LODWORD(v61) = 0;
    goto LABEL_82;
  }
  v61 = 0;
  v62 = v59 + 1;
  do
  {
    if (v58 - 1 == v61)
      goto LABEL_113;
    v60 = v62[v61++];
  }
  while (!v60);
LABEL_82:
  if (v61 >= v58)
    goto LABEL_113;
  while (1)
  {
    if (v60)
      v63 = (double *)(v60 + 4);
    else
      v63 = 0;
    if (v60)
      v64 = (char *)v60 + 12;
    else
      v64 = 0;
    v65 = v109;
    if (v109)
    {
      v66 = (int *)(v64 + 8);
      v67 = v110;
      do
      {
        v68 = *v66++;
        *v67++ = v68;
        --v65;
      }
      while (v65);
    }
    v69 = (_QWORD *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket((uint64_t)v107, &v109);
    if (*v69)
      v70 = (_DWORD *)(*v69 + 28);
    else
      v70 = 0;
    v71 = *v63;
    if (v19 < 0 || v19 >= (int)v71)
      *v63 = v71 - v20;
    LODWORD(v23) = *v70;
    v72 = Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket((uint64_t)v106, &v109);
    v73 = (double)*(unint64_t *)&v23;
    if (*(_QWORD *)v72 && *(_DWORD *)(*(_QWORD *)v72 + 28) == *v70)
      v73 = v73 + 1.0;
    v120 = *v63 / v73;
    *v63 = v120;
    v74 = *(_QWORD *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket((uint64_t)v57, &v109);
    if (v74)
      *(double *)(v74 + 32) = v120 + *(double *)(v74 + 32);
    else
      Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::add((uint64_t)v57, &v109, &v120);
    v75 = (_QWORD *)*v60;
    v76 = *((unsigned int *)v25 + 3);
    if (*v60)
      goto LABEL_112;
    v61 = (v61 + 1);
    if (v61 >= v76)
    {
      v75 = v60;
      goto LABEL_112;
    }
    v77 = v25[10];
    v75 = *(_QWORD **)(v77 + 8 * v61);
    if (!v75)
      break;
LABEL_112:
    v60 = v75;
    if (v61 >= v76)
      goto LABEL_113;
  }
  v78 = (_QWORD *)(v77 + 8 * v61 + 8);
  v79 = ~v61 + v76;
  while (v79)
  {
    v80 = (_QWORD *)*v78++;
    v75 = v80;
    LODWORD(v61) = v61 + 1;
    --v79;
    if (v80)
      goto LABEL_112;
  }
LABEL_113:
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::~Hash((uint64_t)v106);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::~Hash((uint64_t)v107);
  v81 = MemChunkAlloc(0x70uLL, 0);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::Hash((uint64_t)v81, 0, 2 * *((_DWORD *)v57 + 2) + 2);
  v82 = *((unsigned int *)v57 + 3);
  if ((_DWORD)v82)
  {
    v83 = (_QWORD *)v57[10];
    v84 = (uint64_t *)*v83;
    if (!*v83)
    {
      v85 = 0;
      v86 = v83 + 1;
      do
      {
        if (v82 - 1 == v85)
          goto LABEL_137;
        v84 = (uint64_t *)v86[v85++];
      }
      while (!v84);
      goto LABEL_121;
    }
  }
  else
  {
    v84 = 0;
  }
  LODWORD(v85) = 0;
LABEL_121:
  if (v85 >= v82)
    goto LABEL_137;
  while (2)
  {
    if (v84)
      v87 = (unsigned int *)v84 + 3;
    else
      v87 = 0;
    v88 = *(_QWORD *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket((uint64_t)v108, v87);
    if (v88)
      v89 = *(double *)(v88 + 32);
    else
      v89 = 0.0;
    v107[0] = (1.0 - *((double *)v84 + 4)) / (1.0 - v89);
    Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::add((uint64_t)v81, v87, v107);
    v90 = (uint64_t *)*v84;
    v91 = *((unsigned int *)v57 + 3);
    if (*v84)
    {
LABEL_136:
      v84 = v90;
      if (v85 >= v91)
        goto LABEL_137;
      continue;
    }
    break;
  }
  v85 = (v85 + 1);
  if (v85 >= v91)
  {
    v90 = v84;
    goto LABEL_136;
  }
  v92 = v57[10];
  v90 = *(uint64_t **)(v92 + 8 * v85);
  if (v90)
    goto LABEL_136;
  v93 = (uint64_t *)(v92 + 8 * v85 + 8);
  v94 = ~v85 + v91;
  while (v94)
  {
    v95 = (uint64_t *)*v93++;
    v90 = v95;
    LODWORD(v85) = v85 + 1;
    --v94;
    if (v95)
      goto LABEL_136;
  }
LABEL_137:
  (*(void (**)(uint64_t *))*v57)(v57);
  MemChunkFree(v57, 0);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::~Hash((uint64_t)v108);
  v96 = *(_DWORD *)(a4 + 8);
  if (v96 == *(_DWORD *)(a4 + 12))
  {
    DgnPrimArray<unsigned long long>::reallocElts(a4, 1, 1);
    v96 = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v96) = v25;
  *(_DWORD *)(a4 + 8) = v96 + 1;
  v97 = *(_DWORD *)(a5 + 8);
  if (v97 == *(_DWORD *)(a5 + 12))
  {
    DgnPrimArray<unsigned long long>::reallocElts(a5, 1, 1);
    v97 = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v97) = v81;
  *(_DWORD *)(a5 + 8) = v97 + 1;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v116);
}

void sub_20999A730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::~Hash((uint64_t)&a26);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::~Hash((uint64_t)&a40);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::~Hash((uint64_t)&a54);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v54 - 184);
  _Unwind_Resume(a1);
}

uint64_t WordLanguageModel::buildBigramDataFromProbsAndWeights(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _WORD **v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int16 v11;
  _WORD *v12;
  unint64_t v13;
  uint64_t v14;
  long double v15;
  unint64_t v16;
  double v17;
  int v18;
  uint64_t v19;
  _QWORD **v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD **v23;
  char *v24;
  unint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  char *v28;
  int *v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t Bucket;
  double v44;
  unint64_t v45;
  unsigned __int16 v46;
  int v47;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v6 = *(_DWORD *)(a1 + 56);
  v55 = 0;
  v56 = 0;
  v53 = 0;
  v54 = 0;
  v7 = (_WORD **)(a1 + 344);
  v8 = *(_DWORD *)(a1 + 104);
  v9 = *(_DWORD *)(a1 + 356);
  v10 = v8;
  if (v8 > v9)
  {
    DgnPrimArray<short>::reallocElts(a1 + 344, v8 - v9, 0);
    v10 = *(_DWORD *)(a1 + 104);
  }
  v11 = v6 - 1;
  *(_DWORD *)(a1 + 352) = v8;
  v12 = *(_WORD **)(a1 + 344);
  *v12 = 20000;
  v52 = 0xFFFFFFFF00000001;
  if (v10 >= 2)
  {
    v13 = 1;
    do
    {
      if (*(_WORD *)(*(_QWORD *)(a1 + 168) + 2 * v13) == 20000)
      {
        v12[v13] = 20000;
      }
      else
      {
        HIDWORD(v52) = v13;
        v14 = *(_QWORD *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(a3, (unsigned int *)&v52);
        if (v14)
        {
          v15 = DgnLog(*(long double *)(v14 + 32));
          LODWORD(v16) = *(_DWORD *)(a1 + 32);
          v17 = -(v15 * (double)v16);
          v12 = *(_WORD **)(a1 + 344);
          if (v17 <= 0.0)
          {
            v18 = (int)(v17 + -0.5);
            if ((__int16)(1 - v6) > v18)
              LOWORD(v18) = 1 - v6;
          }
          else
          {
            v18 = (int)(v17 + 0.5);
            if ((__int16)v11 < v18)
              LOWORD(v18) = v6 - 1;
          }
          v12[v13] = v18;
        }
        else
        {
          v12 = *v7;
          (*v7)[v13] = 0;
        }
      }
      ++v13;
    }
    while (v13 < *(unsigned int *)(a1 + 104));
  }
  if (!*(_DWORD *)(a2 + 8))
    goto LABEL_63;
  v50 = 0;
  v51 = 0;
  v19 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD ***)(a2 + 80);
    v21 = *v20;
    if (!*v20)
    {
      v22 = 0;
      v23 = v20 + 1;
      while (v19 - 1 != v22)
      {
        v21 = v23[v22++];
        if (v21)
          goto LABEL_26;
      }
      goto LABEL_47;
    }
  }
  else
  {
    v21 = 0;
  }
  LODWORD(v22) = 0;
LABEL_26:
  if (v22 >= v19)
  {
LABEL_47:
    v25 = 0;
    v24 = 0;
    goto LABEL_48;
  }
  v24 = 0;
  LODWORD(v25) = 0;
  while (1)
  {
    if (v21)
      v26 = (unsigned int *)v21 + 3;
    else
      v26 = 0;
    if ((_DWORD)v25 == HIDWORD(v51))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v50, 1, 1);
      LODWORD(v25) = v51;
      v24 = (char *)v50;
    }
    v27 = *v26;
    *(_DWORD *)&v24[16 * v25] = v27;
    if ((_DWORD)v27)
    {
      v28 = &v24[16 * v25 + 4];
      v29 = (int *)(v26 + 1);
      do
      {
        v30 = *v29++;
        *(_DWORD *)v28 = v30;
        v28 += 4;
        --v27;
      }
      while (v27);
      LODWORD(v25) = v51;
    }
    v25 = (v25 + 1);
    LODWORD(v51) = v25;
    v31 = (_QWORD *)*v21;
    v32 = *(unsigned int *)(a2 + 12);
    if (*v21)
      goto LABEL_45;
    v22 = (v22 + 1);
    if (v22 >= v32)
    {
      v31 = v21;
      goto LABEL_45;
    }
    v33 = *(_QWORD *)(a2 + 80);
    v31 = *(_QWORD **)(v33 + 8 * v22);
    if (!v31)
      break;
LABEL_45:
    v21 = v31;
    if (v22 >= v32)
      goto LABEL_48;
  }
  v34 = (_QWORD *)(v33 + 8 * v22 + 8);
  v35 = ~v22 + v32;
  while (v35)
  {
    v36 = (_QWORD *)*v34++;
    v31 = v36;
    LODWORD(v22) = v22 + 1;
    --v35;
    if (v36)
      goto LABEL_45;
  }
LABEL_48:
  mrec_qsort_r<BuildWordIdNgramCmp>(v24, v25, 16);
  v37 = 0;
  v49[0] = 0;
  v49[1] = 0;
  v38 = *(_DWORD *)(v50 + 8);
  v39 = v51;
  do
  {
    if (v37 == v39 || (v40 = v50, v38 != *(_DWORD *)(v50 + 16 * v37 + 8)))
    {
      BigramData::fillBigramRecord((BigramData *)(a1 + 360), v38, (uint64_t)&v55, &v53, v49);
      v39 = v51;
      if (v37 == (_DWORD)v51)
        break;
      LODWORD(v56) = 0;
      LODWORD(v54) = 0;
      v38 = *(_DWORD *)(v50 + 16 * v37-- + 8);
    }
    else
    {
      v41 = *(_DWORD *)(v50 + 16 * v37 + 4);
      v42 = v56;
      if ((_DWORD)v56 == HIDWORD(v56))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)&v55, 1, 1);
        v42 = v56;
        v40 = v50;
      }
      *(_WORD *)(v55 + 2 * v42) = v41;
      LODWORD(v56) = v42 + 1;
      Bucket = Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(a2, (unsigned int *)(v40 + 16 * v37));
      v44 = DgnLog(*(long double *)(*(_QWORD *)Bucket + 32));
      LODWORD(v45) = *(_DWORD *)(a1 + 32);
      if (v11 >= (int)(0.5 - v44 * (double)v45))
        v46 = (int)(0.5 - v44 * (double)v45);
      else
        v46 = v11;
      v47 = v54;
      if ((_DWORD)v54 == HIDWORD(v54))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)&v53, 1, 1);
        v47 = v54;
      }
      v53[v47] = v46;
      LODWORD(v54) = v47 + 1;
      v39 = v51;
    }
    ++v37;
  }
  while (v37 <= v39);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v49);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v50);
LABEL_63:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v53);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v55);
}

void sub_20999ABAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t WordLanguageModel::buildTrigramDataFromProbsAndWeights(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD **v11;
  char *v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  char *v16;
  int *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t Bucket;
  long double v32;
  unint64_t v33;
  double v34;
  unsigned int v35;
  __int16 v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD **v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD **v45;
  char *v46;
  unint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  char *v50;
  int *v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  double v69;
  unint64_t v70;
  unsigned __int16 v71;
  int v72;
  uint64_t v73;
  unsigned __int16 v75;
  _QWORD v76[2];
  uint64_t v77;
  uint64_t v78;
  _WORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v5 = *(_DWORD *)(a1 + 56);
  v75 = v5 - 1;
  v85 = 0;
  v86 = 0;
  v83 = 0;
  v84 = 0;
  v81 = 0;
  v82 = 0;
  v79 = 0;
  v80 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    v77 = 0;
    v78 = 0;
    v7 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD ***)(a3 + 80);
      v9 = *v8;
      if (!*v8)
      {
        v10 = 0;
        v11 = v8 + 1;
        while (v7 - 1 != v10)
        {
          v9 = v11[v10++];
          if (v9)
            goto LABEL_9;
        }
LABEL_30:
        v13 = 0;
        v12 = 0;
        goto LABEL_31;
      }
      LODWORD(v10) = 0;
    }
    else
    {
      LODWORD(v10) = 0;
      v9 = 0;
    }
LABEL_9:
    if (v10 < v7)
    {
      v12 = 0;
      v13 = 0;
      while (1)
      {
        if (v9)
          v14 = (unsigned int *)v9 + 3;
        else
          v14 = 0;
        if (v13 == HIDWORD(v78))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v77, 1, 1);
          v13 = v78;
          v12 = (char *)v77;
        }
        v15 = *v14;
        *(_DWORD *)&v12[16 * v13] = v15;
        if ((_DWORD)v15)
        {
          v16 = &v12[16 * v13 + 4];
          v17 = (int *)(v14 + 1);
          do
          {
            v18 = *v17++;
            *(_DWORD *)v16 = v18;
            v16 += 4;
            --v15;
          }
          while (v15);
          v13 = v78;
        }
        LODWORD(v78) = ++v13;
        v19 = (_QWORD *)*v9;
        v20 = *(unsigned int *)(a3 + 12);
        if (!*v9)
        {
          v10 = (v10 + 1);
          if (v10 >= v20)
          {
            v19 = v9;
          }
          else
          {
            v21 = *(_QWORD *)(a3 + 80);
            v19 = *(_QWORD **)(v21 + 8 * v10);
            if (!v19)
            {
              v22 = (_QWORD *)(v21 + 8 * v10 + 8);
              v23 = ~v10 + v20;
              while (v23)
              {
                v24 = (_QWORD *)*v22++;
                v19 = v24;
                LODWORD(v10) = v10 + 1;
                --v23;
                if (v24)
                  goto LABEL_28;
              }
LABEL_31:
              mrec_qsort_r<BuildWordIdNgramCmp>(v12, v13, 16);
              v25 = 0;
              v26 = *(_DWORD *)(v77 + 8);
              v27 = v78;
              while (2)
              {
                if (v25 == v27)
                {
                  LOWORD(v28) = v86;
                  goto LABEL_43;
                }
                v29 = v77;
                v28 = v86;
                if (v26 == *(_DWORD *)(v77 + 16 * v25 + 8))
                {
                  v30 = *(_DWORD *)(v77 + 16 * v25 + 4);
                  if ((_DWORD)v86 == HIDWORD(v86))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)&v85, 1, 1);
                    v28 = v86;
                    v29 = v77;
                  }
                  *(_WORD *)(v85 + 2 * v28) = v30;
                  LODWORD(v86) = v28 + 1;
                  Bucket = Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(a3, (unsigned int *)(v29 + 16 * v25));
                  v32 = DgnLog(*(long double *)(*(_QWORD *)Bucket + 32));
                  LODWORD(v33) = *(_DWORD *)(a1 + 32);
                  v34 = -(v32 * (double)v33);
                  v35 = v84;
                  if (v34 <= 0.0)
                  {
                    if ((__int16)(1 - v5) <= (int)(v34 + -0.5))
                      v36 = (int)(v34 + -0.5);
                    else
                      v36 = 1 - v5;
                    if ((_DWORD)v84 == HIDWORD(v84))
                    {
LABEL_55:
                      DgnPrimArray<short>::reallocElts((uint64_t)&v83, 1, 1);
                      v35 = v84;
                    }
                  }
                  else
                  {
                    if ((__int16)v75 >= (int)(v34 + 0.5))
                      v36 = (int)(v34 + 0.5);
                    else
                      v36 = v5 - 1;
                    if ((_DWORD)v84 == HIDWORD(v84))
                      goto LABEL_55;
                  }
                  *(_WORD *)(v83 + 2 * v35) = v36;
                  LODWORD(v84) = v35 + 1;
                }
                else
                {
LABEL_43:
                  TrigramData::allocTri1((TrigramData *)(a1 + 744), v26, (unsigned __int16)v28);
                  if ((_DWORD)v86)
                  {
                    v37 = 0;
                    v38 = *(_QWORD *)(a1 + 824);
                    do
                    {
                      v39 = v37 + *(_DWORD *)(*(_QWORD *)(a1 + 808) + 4 * v26);
                      v40 = v39;
                      *(_WORD *)(v38 + 2 * v39) = 0;
                      if (*(_DWORD *)(a1 + 748))
                        *(_BYTE *)(*(_QWORD *)(a1 + 856) + v39) = 0;
                      else
                        *(_WORD *)(*(_QWORD *)(a1 + 840) + 2 * v39) = 20000;
                      TrigramData::tri2SetUnallocated(a1 + 744, v39);
                      v38 = *(_QWORD *)(a1 + 824);
                      *(_WORD *)(v38 + 2 * v40) = *(_WORD *)(v85 + 2 * v37);
                      *(_WORD *)(*(_QWORD *)(a1 + 840) + 2 * v40) = *(_WORD *)(v83 + 2 * v37++);
                    }
                    while (v37 < v86);
                  }
                  if (v25 == (_DWORD)v78)
                  {
LABEL_58:
                    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v77);
                    goto LABEL_59;
                  }
                  LODWORD(v86) = 0;
                  LODWORD(v84) = 0;
                  v26 = *(_DWORD *)(v77 + 16 * v25-- + 8);
                }
                ++v25;
                v27 = v78;
                if (v25 > v78)
                  goto LABEL_58;
                continue;
              }
            }
          }
        }
LABEL_28:
        v9 = v19;
        if (v10 >= v20)
          goto LABEL_31;
      }
    }
    goto LABEL_30;
  }
LABEL_59:
  if (!*(_DWORD *)(a2 + 8))
    goto LABEL_109;
  v77 = 0;
  v78 = 0;
  v41 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v41)
  {
    v42 = *(_QWORD ***)(a2 + 80);
    v43 = *v42;
    if (!*v42)
    {
      v44 = 0;
      v45 = v42 + 1;
      while (v41 - 1 != v44)
      {
        v43 = v45[v44++];
        if (v43)
          goto LABEL_68;
      }
      goto LABEL_89;
    }
  }
  else
  {
    v43 = 0;
  }
  LODWORD(v44) = 0;
LABEL_68:
  if (v44 >= v41)
  {
LABEL_89:
    v47 = 0;
    v46 = 0;
    goto LABEL_90;
  }
  v46 = 0;
  LODWORD(v47) = 0;
  while (1)
  {
    if (v43)
      v48 = (unsigned int *)v43 + 3;
    else
      v48 = 0;
    if ((_DWORD)v47 == HIDWORD(v78))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v77, 1, 1);
      LODWORD(v47) = v78;
      v46 = (char *)v77;
    }
    v49 = *v48;
    *(_DWORD *)&v46[16 * v47] = v49;
    if ((_DWORD)v49)
    {
      v50 = &v46[16 * v47 + 4];
      v51 = (int *)(v48 + 1);
      do
      {
        v52 = *v51++;
        *(_DWORD *)v50 = v52;
        v50 += 4;
        --v49;
      }
      while (v49);
      LODWORD(v47) = v78;
    }
    v47 = (v47 + 1);
    LODWORD(v78) = v47;
    v53 = (_QWORD *)*v43;
    v54 = *(unsigned int *)(a2 + 12);
    if (*v43)
      goto LABEL_87;
    v44 = (v44 + 1);
    if (v44 >= v54)
    {
      v53 = v43;
      goto LABEL_87;
    }
    v55 = *(_QWORD *)(a2 + 80);
    v53 = *(_QWORD **)(v55 + 8 * v44);
    if (!v53)
      break;
LABEL_87:
    v43 = v53;
    if (v44 >= v54)
      goto LABEL_90;
  }
  v56 = (_QWORD *)(v55 + 8 * v44 + 8);
  v57 = ~v44 + v54;
  while (v57)
  {
    v58 = (_QWORD *)*v56++;
    v53 = v58;
    LODWORD(v44) = v44 + 1;
    --v57;
    if (v58)
      goto LABEL_87;
  }
LABEL_90:
  mrec_qsort_r<BuildWordIdNgramCmp>(v46, v47, 16);
  v59 = 0;
  v60 = 0;
  v76[0] = 0;
  v76[1] = 0;
  v62 = *(_DWORD *)(v77 + 8);
  v61 = *(unsigned int *)(v77 + 12);
  v63 = v78;
  do
  {
    if (v59 != v63
      && (v64 = v77, v61 == *(_DWORD *)(v77 + 16 * v59 + 12))
      && (v65 = v77 + 16 * v59, v62 == *(_DWORD *)(v65 + 8)))
    {
      v66 = *(_DWORD *)(v65 + 4);
      v67 = v82;
      if ((_DWORD)v82 == HIDWORD(v82))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)&v81, 1, 1);
        v67 = v82;
        v64 = v77;
      }
      *(_WORD *)(v81 + 2 * v67) = v66;
      LODWORD(v82) = v67 + 1;
      v68 = Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(a2, (unsigned int *)(v64 + 16 * v59));
      v69 = DgnLog(*(long double *)(*(_QWORD *)v68 + 32));
      LODWORD(v70) = *(_DWORD *)(a1 + 32);
      if (v75 >= (int)(0.5 - v69 * (double)v70))
        v71 = (int)(0.5 - v69 * (double)v70);
      else
        v71 = v75;
      v72 = v80;
      if ((_DWORD)v80 == HIDWORD(v80))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)&v79, 1, 1);
        v72 = v80;
      }
      v79[v72] = v71;
      LODWORD(v80) = v72 + 1;
      v63 = v78;
    }
    else
    {
      TrigramData::fillTrigramRecord(a1 + 744, *(_DWORD *)(*(_QWORD *)(a1 + 808) + 4 * v61) + v60, (uint64_t)&v81, &v79, v76);
      v63 = v78;
      if (v59 == (_DWORD)v78)
        break;
      v73 = v77 + 16 * v59;
      if (v61 == *(_DWORD *)(v73 + 12))
        ++v60;
      else
        v60 = 0;
      LODWORD(v82) = 0;
      LODWORD(v80) = 0;
      v62 = *(_DWORD *)(v73 + 8);
      v61 = *(unsigned int *)(v73 + 12);
      --v59;
    }
    ++v59;
  }
  while (v59 <= v63);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v76);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v77);
LABEL_109:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v79);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v81);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v83);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v85);
}

void sub_20999B27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  uint64_t v13;
  va_list va3;
  uint64_t v15;
  uint64_t v16;
  va_list va4;
  uint64_t v18;
  va_list va5;

  va_start(va5, a3);
  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v13 = va_arg(va4, _QWORD);
  v15 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v16 = va_arg(va5, _QWORD);
  v18 = va_arg(va5, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va4);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va5);
  _Unwind_Resume(a1);
}

uint64_t WordLanguageModel::addWordDuringBuild(WordNgramTemplate **this, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int i;

  result = WordNgramTemplate::isHeadCloneWordId(this[227], a2);
  if ((_DWORD)result)
  {
    v5 = (uint64_t)this[23];
    for (i = *(_DWORD *)(v5 + 8); i <= a2; *(_DWORD *)(v5 + 8) = i)
    {
      if (i == *(_DWORD *)(v5 + 12))
      {
        result = DgnPrimArray<unsigned long long>::reallocElts(v5, 1, 1);
        i = *(_DWORD *)(v5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v5 + 8 * i++) = 0;
    }
  }
  return result;
}

double WordLanguageModel::computeLOOLogLikelihoodDerivative(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t *a6, int a7)
{
  unsigned int v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;

  if (*((_DWORD *)a6 + 2) - 1 > a7)
    v7 = a7 + 1;
  else
    v7 = *((_DWORD *)a6 + 2) - 1;
  if (a7 < 0)
    v7 = *((_DWORD *)a6 + 2) - 1;
  v8 = *a6;
  v9 = 0.0;
  if (v7 >= 2)
  {
    if (v7 + 1 > 3)
      v10 = v7 + 1;
    else
      v10 = 3;
    v11 = 2;
    a3 = -1.0;
    do
    {
      LODWORD(a4) = *(_DWORD *)(v8 + 4 * v11);
      a4 = (double)v11 * (double)*(unint64_t *)&a4 / ((double)v11 + -1.0 - a1);
      v9 = v9 + a4;
      ++v11;
    }
    while (v10 != v11);
  }
  LODWORD(a3) = *(_DWORD *)(v8 + 4);
  return (double)*(unint64_t *)&a3 / a1 - v9;
}

WordLanguageModel *WordLanguageModel::computeCountHistogram(WordLanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  WordLanguageModel *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  v7 = this;
  if (!*(_DWORD *)(a4 + 12))
    this = (WordLanguageModel *)DgnPrimArray<unsigned int>::reallocElts(a4, 1, 0);
  *(_DWORD *)(a4 + 8) = 1;
  **(_DWORD **)a4 = 0;
  v26 = a2;
  if (a2)
    this = (WordLanguageModel *)memset(&v27, 255, 4 * a2);
  v8 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v8)
  {
    v10 = 0;
    goto LABEL_12;
  }
  v9 = *(_QWORD **)(a3 + 80);
  v10 = (uint64_t *)*v9;
  if (*v9)
  {
LABEL_12:
    LODWORD(v11) = 0;
    goto LABEL_13;
  }
  v11 = 0;
  v12 = v9 + 1;
  do
  {
    if (v8 - 1 == v11)
      return this;
    v10 = (uint64_t *)v12[v11++];
  }
  while (!v10);
LABEL_13:
  if (v11 >= v8)
    return this;
  while (1)
  {
    v13 = *((unsigned int *)v10 + 7);
    if (v10)
      v14 = (uint64_t)v10 + 12;
    else
      v14 = 0;
    this = WordLanguageModel::setBuildLmIdNgramFromBuildWordIdNgram(v7, v14, &v26);
    v15 = *((_DWORD *)v7 + 27);
    if (v15 > v27)
    {
      if (v26 == 2)
      {
        if (v28 < 0xFFFFF1)
          goto LABEL_25;
      }
      else if (v15 > v28 && v29 < 0xFFFFF1)
      {
LABEL_25:
        v17 = *(_DWORD *)(a4 + 8);
        v18 = v17;
        if (v13 >= v17)
        {
          do
          {
            if (v17 == *(_DWORD *)(a4 + 12))
            {
              this = (WordLanguageModel *)DgnPrimArray<unsigned int>::reallocElts(a4, 1, 1);
              v17 = *(_DWORD *)(a4 + 8);
            }
            v19 = *(_DWORD **)a4;
            *(_DWORD *)(*(_QWORD *)a4 + 4 * v17) = 0;
            v17 = *(_DWORD *)(a4 + 8) + 1;
            *(_DWORD *)(a4 + 8) = v17;
            ++v18;
          }
          while (v18 <= v13);
        }
        else
        {
          v19 = *(_DWORD **)a4;
        }
        ++v19[v13];
      }
    }
    v20 = (uint64_t *)*v10;
    v21 = *(unsigned int *)(a3 + 12);
    if (!*v10)
    {
      v11 = (v11 + 1);
      if (v11 >= v21)
      {
        v20 = v10;
        goto LABEL_39;
      }
      v22 = *(_QWORD *)(a3 + 80);
      v20 = *(uint64_t **)(v22 + 8 * v11);
      if (!v20)
        break;
    }
LABEL_39:
    v10 = v20;
    if (v11 >= v21)
      return this;
  }
  v23 = (uint64_t *)(v22 + 8 * v11 + 8);
  v24 = ~v11 + v21;
  while (v24)
  {
    v25 = (uint64_t *)*v23++;
    v20 = v25;
    LODWORD(v11) = v11 + 1;
    --v24;
    if (v25)
      goto LABEL_39;
  }
  return this;
}

WordLanguageModel *WordLanguageModel::setBuildLmIdNgramFromBuildWordIdNgram(WordLanguageModel *this, uint64_t a2, _DWORD *a3)
{
  WordLanguageModel *v5;
  unint64_t v6;

  if (*a3)
  {
    v5 = this;
    v6 = 1;
    do
    {
      this = (WordLanguageModel *)WordLanguageModel::getLmId(v5, *(_DWORD *)(a2 + 4 * v6));
      a3[v6] = (_DWORD)this;
    }
    while (v6++ < *a3);
  }
  return this;
}

double WordLanguageModel::computeLOODiscount(uint64_t a1, int a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  double v7;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v7 = 0.5;
  if (*(_DWORD *)(a3 + 8) >= 3u && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    v10 = WordLanguageModel::computeLOOLogLikelihoodDerivative(0.000001, a5, a6, a7, a1, (uint64_t *)a3, a2);
    v16 = WordLanguageModel::computeLOOLogLikelihoodDerivative(0.999999, v12, v13, v14, v11, (uint64_t *)a3, a2);
    if (v10 >= 0.0 || v16 <= 0.0)
    {
      if (v10 <= 0.0 || v16 >= 0.0)
        return v7;
      v20 = 0.499999;
    }
    else
    {
      v20 = -0.499999;
    }
    v7 = 0.499999;
    if (fabs(v20) > 0.000001)
    {
      do
      {
        v21 = v20 * 0.5;
        v22 = WordLanguageModel::computeLOOLogLikelihoodDerivative(v7, v17, v18, v19, v15, (uint64_t *)a3, a2);
        v17 = -(v20 * 0.5);
        if (v22 <= 0.0)
          v23 = -(v20 * 0.5);
        else
          v23 = v20 * 0.5;
        v7 = v7 + v23;
        v20 = v20 * 0.5;
      }
      while (fabs(v21) > 0.000001);
    }
  }
  return v7;
}

double WordLanguageModel::computeMinCountNotToPrune(WordLanguageModel *this, uint64_t a2, unsigned int a3, uint64_t a4, int a5, _DWORD *a6)
{
  double v6;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  _DWORD *v33;
  char *v34;
  int v35;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;

  v6 = 1.0;
  if (a5 < 0)
    return v6;
  v11 = 0;
  v12 = *(_DWORD *)(a2 + 8);
  do
  {
    if (!--v12)
      return v6;
    v13 = v11;
    v11 += *(_DWORD *)(*(_QWORD *)a2 + 4 * v12);
  }
  while (v11 <= a5);
  v41 = 0;
  v42 = 0;
  v37 = a3;
  if (a3)
    memset(&v38, 255, 4 * a3);
  v14 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD **)(a4 + 80);
    v16 = (uint64_t *)*v15;
    if (!*v15)
    {
      v17 = 0;
      v18 = v15 + 1;
      while (v14 - 1 != v17)
      {
        v16 = (uint64_t *)v18[v17++];
        if (v16)
          goto LABEL_15;
      }
      goto LABEL_38;
    }
  }
  else
  {
    v16 = 0;
  }
  LODWORD(v17) = 0;
LABEL_15:
  if (v17 >= v14)
  {
LABEL_38:
    v30 = 0;
    v29 = 0;
    goto LABEL_39;
  }
  while (1)
  {
    if (*((_DWORD *)v16 + 7) == v12)
    {
      WordLanguageModel::setBuildLmIdNgramFromBuildWordIdNgram(this, (uint64_t)v16 + 12, &v37);
      v19 = *((_DWORD *)this + 27);
      if (v19 > v38)
      {
        v20 = v37;
        if (v37 == 2)
        {
          if (v39 < 0xFFFFF1)
            goto LABEL_23;
        }
        else if (v19 > v39 && v40 < 0xFFFFF1)
        {
LABEL_23:
          v21 = v42;
          if ((_DWORD)v42 == HIDWORD(v42))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v41, 1, 1);
            v21 = v42;
          }
          v22 = v41;
          *(_DWORD *)&v41[16 * v21] = v20;
          if ((_DWORD)v20)
          {
            memcpy(&v22[16 * v21 + 4], &v38, 4 * v20);
            v21 = v42;
          }
          LODWORD(v42) = v21 + 1;
        }
      }
    }
    v23 = (uint64_t *)*v16;
    v24 = *(unsigned int *)(a4 + 12);
    if (!*v16)
    {
      v17 = (v17 + 1);
      if (v17 >= v24)
      {
        v23 = v16;
        goto LABEL_36;
      }
      v25 = *(_QWORD *)(a4 + 80);
      v23 = *(uint64_t **)(v25 + 8 * v17);
      if (!v23)
        break;
    }
LABEL_36:
    v16 = v23;
    if (v17 >= v24)
      goto LABEL_37;
  }
  v26 = (uint64_t *)(v25 + 8 * v17 + 8);
  v27 = ~v17 + v24;
  while (v27)
  {
    v28 = (uint64_t *)*v26++;
    v23 = v28;
    LODWORD(v17) = v17 + 1;
    --v27;
    if (v28)
      goto LABEL_36;
  }
LABEL_37:
  v29 = v41;
  v30 = v42;
LABEL_39:
  mrec_qsort_r<BuildWordIdNgramCmp>(v29, v30, 16);
  v31 = v41;
  v32 = *(unsigned int *)&v41[16 * (~v13 + a5)];
  *a6 = v32;
  if ((_DWORD)v32)
  {
    v33 = a6 + 1;
    v34 = &v31[16 * (~v13 + a5) + 4];
    do
    {
      v35 = *(_DWORD *)v34;
      v34 += 4;
      *v33++ = v35;
      --v32;
    }
    while (v32);
  }
  v6 = (double)(v12 + 1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v41);
  return v6;
}

void sub_20999B9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

char *mrec_qsort_r<BuildWordIdNgramCmp>(char *result, unint64_t a2, int64_t a3)
{
  int64_t v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;
  char *v8;
  char *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  int64_t v57;
  char *v58;
  char v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  uint64_t v66;
  char *v67;
  char *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  char *v84;
  char *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  int64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char v134;
  int64_t v135;
  int64_t v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  int64_t v140;
  char v141;
  _DWORD *v142;
  _DWORD *v143;
  _DWORD *v144;
  _QWORD *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;

  v4 = -a3;
  v5 = a3 != 8;
  v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0)
    v7 = 2;
  else
    v7 = a3 != 8;
  if (a2 < 7)
  {
LABEL_5:
    if ((uint64_t)(a2 * a3) > a3)
    {
      v8 = &result[a2 * a3];
      v9 = &result[a3];
      v10 = result;
      do
      {
        if (v9 > result)
        {
          v11 = v10;
          v12 = v9;
LABEL_9:
          v13 = v12;
          v12 = (_DWORD *)((char *)v12 + v4);
          v14 = *v12 - 1;
          while ((v14 & 0x80000000) == 0)
          {
            v15 = v12[v14 + 1];
            v16 = *((_DWORD *)v13 + v14-- + 1);
            if (v15 != v16)
            {
              if (v15 >= v16)
              {
                if (v7)
                {
                  v17 = 0;
                  v18 = (uint64_t)v11 + a3;
                  if (v6)
                  {
                    do
                    {
                      v19 = *(_QWORD *)(v18 + 8 * v17);
                      *(_QWORD *)(v18 + 8 * v17) = *(_QWORD *)&v11[2 * v17];
                      *(_QWORD *)&v11[2 * v17++] = v19;
                    }
                    while ((unint64_t)a3 >> 3 != v17);
                  }
                  else
                  {
                    do
                    {
                      v20 = *(_BYTE *)(v18 + v17);
                      *(_BYTE *)(v18 + v17) = *((_BYTE *)v11 + v17);
                      *((_BYTE *)v11 + v17++) = v20;
                    }
                    while (a3 != v17);
                  }
                }
                else
                {
                  v21 = *v13;
                  *v13 = *(_QWORD *)v12;
                  *(_QWORD *)v12 = v21;
                }
                v11 = (_DWORD *)((char *)v11 + v4);
                if (v12 > (_DWORD *)result)
                  goto LABEL_9;
              }
              break;
            }
          }
        }
        v9 += a3;
        v10 = (_DWORD *)((char *)v10 + a3);
      }
      while (v9 < v8);
    }
    return result;
  }
  v22 = (unint64_t)a3 >> 3;
  while (1)
  {
    v23 = &result[(a2 >> 1) * a3];
    if (a2 != 7)
    {
      v24 = &result[(a2 - 1) * a3];
      if (a2 < 0x29)
      {
        v26 = result;
        goto LABEL_40;
      }
      v25 = (a2 >> 3) * a3;
      v26 = &result[v25];
      v27 = 2 * v25;
      v28 = &result[2 * v25];
      v29 = *(_DWORD *)result - 1;
      v30 = v29;
      do
      {
        if ((v30 & 0x80000000) != 0)
          goto LABEL_73;
        v31 = *(_DWORD *)&result[4 * v30 + 4];
        v32 = *(_DWORD *)&v26[4 * v30-- + 4];
      }
      while (v31 == v32);
      if (v31 >= v32)
      {
LABEL_73:
        v60 = *(_DWORD *)v26 - 1;
        do
        {
          if ((v60 & 0x80000000) != 0)
            goto LABEL_77;
          v61 = *(_DWORD *)&v26[4 * v60 + 4];
          v62 = *(_DWORD *)&v28[4 * v60-- + 4];
        }
        while (v61 == v62);
        if (v61 < v62)
        {
          do
          {
LABEL_77:
            if ((v29 & 0x80000000) != 0)
              goto LABEL_81;
            v63 = *(_DWORD *)&result[4 * v29 + 4];
            v64 = *(_DWORD *)&v28[4 * v29-- + 4];
            v65 = v63 >= v64;
          }
          while (v63 == v64);
          v26 = result;
          if (v65)
LABEL_81:
            v26 = &result[2 * v25];
        }
      }
      else
      {
        v33 = *(_DWORD *)v26 - 1;
        do
        {
          if ((v33 & 0x80000000) != 0)
            goto LABEL_34;
          v34 = *(_DWORD *)&v26[4 * v33 + 4];
          v35 = *(_DWORD *)&v28[4 * v33-- + 4];
        }
        while (v34 == v35);
        if (v34 >= v35)
        {
LABEL_34:
          while ((v29 & 0x80000000) == 0)
          {
            v36 = *(_DWORD *)&result[4 * v29 + 4];
            v37 = *(_DWORD *)&v28[4 * v29-- + 4];
            if (v36 != v37)
            {
              if (v36 >= v37)
                v26 = result;
              else
                v26 = &result[2 * v25];
              goto LABEL_82;
            }
          }
          v26 = result;
        }
      }
LABEL_82:
      v66 = -(uint64_t)v25;
      v67 = &v23[-v25];
      v68 = &v23[v25];
      v69 = *(_DWORD *)v67 - 1;
      v70 = v69;
      do
      {
        if ((v70 & 0x80000000) != 0)
          goto LABEL_95;
        v71 = *(_DWORD *)&v67[4 * v70 + 4];
        v72 = *(_DWORD *)&v23[4 * v70-- + 4];
      }
      while (v71 == v72);
      if (v71 >= v72)
      {
LABEL_95:
        v78 = *(_DWORD *)v23 - 1;
        do
        {
          if ((v78 & 0x80000000) != 0)
            goto LABEL_99;
          v79 = *(_DWORD *)&v23[4 * v78 + 4];
          v80 = *(_DWORD *)&v68[4 * v78-- + 4];
        }
        while (v79 == v80);
        if (v79 < v80)
        {
          do
          {
LABEL_99:
            if ((v69 & 0x80000000) != 0)
              goto LABEL_103;
            v81 = *(_DWORD *)&v67[4 * v69 + 4];
            v82 = *(_DWORD *)&v68[4 * v69-- + 4];
            v83 = v81 >= v82;
          }
          while (v81 == v82);
          v23 = v67;
          if (v83)
LABEL_103:
            v23 = v68;
        }
      }
      else
      {
        v73 = *(_DWORD *)v23 - 1;
        do
        {
          if ((v73 & 0x80000000) != 0)
            goto LABEL_90;
          v74 = *(_DWORD *)&v23[4 * v73 + 4];
          v75 = *(_DWORD *)&v68[4 * v73-- + 4];
        }
        while (v74 == v75);
        if (v74 >= v75)
        {
LABEL_90:
          while ((v69 & 0x80000000) == 0)
          {
            v76 = *(_DWORD *)&v67[4 * v69 + 4];
            v77 = *(_DWORD *)&v68[4 * v69-- + 4];
            if (v76 != v77)
            {
              if (v76 >= v77)
                v23 = v67;
              else
                v23 = v68;
              goto LABEL_104;
            }
          }
          v23 = v67;
        }
      }
LABEL_104:
      v84 = &v24[-v27];
      v85 = &v24[v66];
      v86 = *(_DWORD *)v84 - 1;
      v87 = v86;
      do
      {
        if ((v87 & 0x80000000) != 0)
          goto LABEL_116;
        v88 = *(_DWORD *)&v84[4 * v87 + 4];
        v89 = *(_DWORD *)&v85[4 * v87-- + 4];
      }
      while (v88 == v89);
      if (v88 >= v89)
      {
LABEL_116:
        v95 = *(_DWORD *)v85 - 1;
        do
        {
          if ((v95 & 0x80000000) != 0)
            goto LABEL_120;
          v96 = *(_DWORD *)&v85[4 * v95 + 4];
          v97 = *(_DWORD *)&v24[4 * v95-- + 4];
        }
        while (v96 == v97);
        if (v96 < v97)
        {
          do
          {
LABEL_120:
            if ((v86 & 0x80000000) != 0)
              goto LABEL_40;
            v98 = *(_DWORD *)&v84[4 * v86 + 4];
            v99 = *(_DWORD *)&v24[4 * v86-- + 4];
          }
          while (v98 == v99);
          if (v98 < v99)
LABEL_123:
            v24 = v84;
LABEL_40:
          v38 = *(_DWORD *)v26 - 1;
          v39 = v38;
          while ((v39 & 0x80000000) == 0)
          {
            v40 = *(_DWORD *)&v26[4 * v39 + 4];
            v41 = *(_DWORD *)&v23[4 * v39-- + 4];
            if (v40 != v41)
            {
              v42 = *(_DWORD *)v23;
              if (v40 < v41)
              {
                v43 = v42 - 1;
                do
                {
                  if (v43 < 0)
                    goto LABEL_48;
                  v44 = *(_DWORD *)&v23[4 * v43 + 4];
                  v45 = *(_DWORD *)&v24[4 * v43-- + 4];
                }
                while (v44 == v45);
                if (v44 < v45)
                  goto LABEL_65;
                do
                {
LABEL_48:
                  if ((v38 & 0x80000000) != 0)
                  {
                    v23 = v26;
                    if (v7)
                      goto LABEL_66;
                    goto LABEL_126;
                  }
                  v46 = *(_DWORD *)&v26[4 * v38 + 4];
                  v47 = *(_DWORD *)&v24[4 * v38-- + 4];
                }
                while (v46 == v47);
                if (v46 >= v47)
                  v23 = v26;
                else
                  v23 = v24;
                if (v7)
                  goto LABEL_66;
LABEL_126:
                v100 = *(_QWORD *)result;
                *(_QWORD *)result = *(_QWORD *)v23;
                *(_QWORD *)v23 = v100;
                goto LABEL_127;
              }
LABEL_56:
              v48 = v42 - 1;
              do
              {
                if (v48 < 0)
                  goto LABEL_60;
                v49 = *(_DWORD *)&v23[4 * v48 + 4];
                v50 = *(_DWORD *)&v24[4 * v48-- + 4];
              }
              while (v49 == v50);
              if (v49 < v50)
              {
LABEL_60:
                while ((v38 & 0x80000000) == 0)
                {
                  v51 = *(_DWORD *)&v26[4 * v38 + 4];
                  v52 = *(_DWORD *)&v24[4 * v38-- + 4];
                  v53 = v51 >= v52;
                  if (v51 != v52)
                  {
                    v23 = v26;
                    if (!v53)
                      goto LABEL_65;
                    break;
                  }
                }
                v23 = v24;
              }
              goto LABEL_65;
            }
          }
          v42 = *(_DWORD *)v23;
          goto LABEL_56;
        }
      }
      else
      {
        v90 = *(_DWORD *)v85 - 1;
        do
        {
          if ((v90 & 0x80000000) != 0)
            goto LABEL_112;
          v91 = *(_DWORD *)&v85[4 * v90 + 4];
          v92 = *(_DWORD *)&v24[4 * v90-- + 4];
        }
        while (v91 == v92);
        if (v91 >= v92)
        {
          do
          {
LABEL_112:
            if ((v86 & 0x80000000) != 0)
              goto LABEL_123;
            v93 = *(_DWORD *)&v84[4 * v86 + 4];
            v94 = *(_DWORD *)&v24[4 * v86-- + 4];
          }
          while (v93 == v94);
          if (v93 >= v94)
            v24 = v84;
          goto LABEL_40;
        }
      }
      v24 = v85;
      goto LABEL_40;
    }
LABEL_65:
    if (!v7)
      goto LABEL_126;
LABEL_66:
    if (v6)
    {
      v54 = result;
      v55 = (unint64_t)a3 >> 3;
      do
      {
        v56 = *(_QWORD *)v54;
        *(_QWORD *)v54 = *(_QWORD *)v23;
        v54 += 8;
        *(_QWORD *)v23 = v56;
        v23 += 8;
        --v55;
      }
      while (v55);
    }
    else
    {
      v57 = a3;
      v58 = result;
      do
      {
        v59 = *v58;
        *v58++ = *v23;
        *v23++ = v59;
        --v57;
      }
      while (v57);
    }
LABEL_127:
    v101 = 0;
    v102 = &result[a3];
    v103 = &result[(a2 - 1) * a3];
    v104 = v103;
    v105 = &result[a3];
    v106 = &result[a3];
    while (1)
    {
      while (v105 <= v104)
      {
        v107 = *(_DWORD *)v105 - 1;
        do
        {
          if ((v107 & 0x80000000) != 0)
          {
            if (v7)
            {
              v119 = 0;
              if (v6)
              {
                do
                {
                  v120 = *(_QWORD *)&v106[8 * v119];
                  *(_QWORD *)&v106[8 * v119] = *(_QWORD *)&v105[8 * v119];
                  *(_QWORD *)&v105[8 * v119++] = v120;
                }
                while (v22 != v119);
              }
              else
              {
                do
                {
                  v121 = v106[v119];
                  v106[v119] = v105[v119];
                  v105[v119++] = v121;
                }
                while (a3 != v119);
              }
            }
            else
            {
              v123 = *(_QWORD *)v106;
              *(_QWORD *)v106 = *(_QWORD *)v105;
              *(_QWORD *)v105 = v123;
            }
            v106 += a3;
            v101 = 1;
            goto LABEL_162;
          }
          v108 = *(_DWORD *)&v105[4 * v107 + 4];
          v109 = *(_DWORD *)&result[4 * v107-- + 4];
        }
        while (v108 == v109);
        if (v108 >= v109)
          break;
LABEL_162:
        v105 += a3;
      }
LABEL_143:
      if (v105 > v104)
        break;
      v114 = *(_DWORD *)v104 - 1;
      do
      {
        if ((v114 & 0x80000000) != 0)
        {
          if (v7)
          {
            v110 = 0;
            if (v6)
            {
              do
              {
                v111 = *(_QWORD *)&v104[8 * v110];
                *(_QWORD *)&v104[8 * v110] = *(_QWORD *)&v103[8 * v110];
                *(_QWORD *)&v103[8 * v110++] = v111;
              }
              while (v22 != v110);
            }
            else
            {
              do
              {
                v112 = v104[v110];
                v104[v110] = v103[v110];
                v103[v110++] = v112;
              }
              while (a3 != v110);
            }
          }
          else
          {
            v113 = *(_QWORD *)v104;
            *(_QWORD *)v104 = *(_QWORD *)v103;
            *(_QWORD *)v103 = v113;
          }
          v103 += v4;
          v101 = 1;
LABEL_142:
          v104 += v4;
          goto LABEL_143;
        }
        v115 = *(_DWORD *)&v104[4 * v114 + 4];
        v116 = *(_DWORD *)&result[4 * v114-- + 4];
      }
      while (v115 == v116);
      if (v115 >= v116)
        goto LABEL_142;
      if (v7)
      {
        v117 = 0;
        if (v6)
        {
          do
          {
            v118 = *(_QWORD *)&v105[8 * v117];
            *(_QWORD *)&v105[8 * v117] = *(_QWORD *)&v104[8 * v117];
            *(_QWORD *)&v104[8 * v117++] = v118;
          }
          while (v22 != v117);
        }
        else
        {
          do
          {
            v122 = v105[v117];
            v105[v117] = v104[v117];
            v104[v117++] = v122;
          }
          while (a3 != v117);
        }
      }
      else
      {
        v124 = *(_QWORD *)v105;
        *(_QWORD *)v105 = *(_QWORD *)v104;
        *(_QWORD *)v104 = v124;
      }
      v105 += a3;
      v104 += v4;
      v101 = 1;
    }
    v125 = &result[a2 * a3];
    if (!v101)
      break;
    v126 = v105 - v106;
    if (v106 - result >= v105 - v106)
      v127 = v105 - v106;
    else
      v127 = v106 - result;
    if (v127)
    {
      if (v6)
      {
        v128 = &v105[-v127];
        v129 = v127 >> 3;
        v130 = result;
        do
        {
          v131 = *(_QWORD *)v130;
          *(_QWORD *)v130 = *(_QWORD *)v128;
          v130 += 8;
          *(_QWORD *)v128 = v131;
          v128 += 8;
          --v129;
        }
        while (v129);
      }
      else
      {
        v132 = -(uint64_t)v127;
        v133 = result;
        do
        {
          v134 = *v133;
          *v133++ = v105[v132];
          v105[v132] = v134;
          v53 = __CFADD__(v132++, 1);
        }
        while (!v53);
      }
    }
    v135 = v103 - v104;
    v136 = v125 - &v103[a3];
    if (v103 - v104 < v136)
      v136 = v103 - v104;
    if (v136)
    {
      if (v6)
      {
        v137 = &v125[-v136];
        v138 = (unint64_t)v136 >> 3;
        do
        {
          v139 = *(_QWORD *)v105;
          *(_QWORD *)v105 = *(_QWORD *)v137;
          v105 += 8;
          *(_QWORD *)v137 = v139;
          v137 += 8;
          --v138;
        }
        while (v138);
      }
      else
      {
        v140 = -v136;
        do
        {
          v141 = *v105;
          *v105++ = v125[v140];
          v125[v140] = v141;
          v53 = __CFADD__(v140++, 1);
        }
        while (!v53);
      }
    }
    if (v126 > a3)
      result = (char *)mrec_qsort_r<BuildWordIdNgramCmp>();
    if (v135 <= a3)
      return result;
    result = &v125[-v135];
    a2 = v135 / (unint64_t)a3;
    v6 = ((((_BYTE)v125 - v135) | a3) & 7) == 0;
    if (((((_BYTE)v125 - v135) | a3) & 7) != 0)
      v7 = 2;
    else
      v7 = v5;
    if (a2 < 7)
      goto LABEL_5;
  }
  if ((uint64_t)(a2 * a3) > a3)
  {
    v142 = result;
    do
    {
      if (v102 > result)
      {
        v143 = v142;
        v144 = v102;
LABEL_201:
        v145 = v144;
        v144 = (_DWORD *)((char *)v144 + v4);
        v146 = *v144 - 1;
        while ((v146 & 0x80000000) == 0)
        {
          v147 = v144[v146 + 1];
          v148 = *((_DWORD *)v145 + v146-- + 1);
          if (v147 != v148)
          {
            if (v147 >= v148)
            {
              if (v7)
              {
                v149 = 0;
                v150 = (uint64_t)v143 + a3;
                if (v6)
                {
                  do
                  {
                    v151 = *(_QWORD *)(v150 + 8 * v149);
                    *(_QWORD *)(v150 + 8 * v149) = *(_QWORD *)&v143[2 * v149];
                    *(_QWORD *)&v143[2 * v149++] = v151;
                  }
                  while (v22 != v149);
                }
                else
                {
                  do
                  {
                    v152 = *(_BYTE *)(v150 + v149);
                    *(_BYTE *)(v150 + v149) = *((_BYTE *)v143 + v149);
                    *((_BYTE *)v143 + v149++) = v152;
                  }
                  while (a3 != v149);
                }
              }
              else
              {
                v153 = *v145;
                *v145 = *(_QWORD *)v144;
                *(_QWORD *)v144 = v153;
              }
              v143 = (_DWORD *)((char *)v143 + v4);
              if (v144 > (_DWORD *)result)
                goto LABEL_201;
            }
            break;
          }
        }
      }
      v102 += a3;
      v142 = (_DWORD *)((char *)v142 + a3);
    }
    while (v102 < v125);
  }
  return result;
}

uint64_t WordLanguageModel::createBuildWordIdAndCountArray(WordIdAndCountCmp *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unsigned int v13;
  _DWORD *v14;

  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7)
  {
    v9 = 0;
    v10 = a4;
    v11 = a3;
    do
    {
      if (v11 != v9 && v10 != v9)
      {
        v12 = *(double *)(*(_QWORD *)a2 + 8 * v9);
        if (v12 > 0.0)
        {
          v13 = *(_DWORD *)(a5 + 8);
          if (v13 == *(_DWORD *)(a5 + 12))
          {
            DgnPrimArray<unsigned long long>::reallocElts(a5, 1, 1);
            v13 = *(_DWORD *)(a5 + 8);
            v7 = *(unsigned int *)(a2 + 8);
          }
          v14 = (_DWORD *)(*(_QWORD *)a5 + 8 * v13);
          *v14 = v9;
          v14[1] = v12;
          *(_DWORD *)(a5 + 8) = v13 + 1;
        }
      }
      ++v9;
    }
    while (v9 < v7);
  }
  return mrec_qsort_r<WordIdAndCountCmp>(*(_QWORD *)a5, *(unsigned int *)(a5 + 8), 8uLL, a1);
}

uint64_t WordLanguageModel::maybeAddBuildBegAndEndLmId(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(this + 1816);
  v2 = *(_DWORD *)(v1 + 4);
  v3 = *(_DWORD *)(v1 + 8);
  if (v2 == 16777212)
  {
    v4 = -1;
  }
  else
  {
    v4 = *(_DWORD *)(this + 104);
    *(_DWORD *)(this + 104) = v4 + 1;
  }
  *(_DWORD *)(this + 112) = v4;
  if (v3 == 0xFFFFFF)
  {
    *(_DWORD *)(this + 116) = -1;
  }
  else if (v3 == v2)
  {
    *(_DWORD *)(this + 116) = v4;
  }
  else
  {
    v5 = *(_DWORD *)(this + 104);
    *(_DWORD *)(this + 116) = v5;
    *(_DWORD *)(this + 104) = v5 + 1;
  }
  return this;
}

uint64_t WordLanguageModel::createBuildWordIdToLmIdArray(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  _DWORD *v9;
  int v10;
  _QWORD *v11;
  unsigned int v12;
  unsigned int *v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  _DWORD *v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v45;
  void *v46;

  v3 = result;
  v4 = *(_QWORD *)(result + 1816);
  v6 = *(unsigned int *)(v4 + 4);
  v5 = *(unsigned int *)(v4 + 8);
  v7 = *(_DWORD *)(result + 104) - 1;
  v8 = *(unsigned int *)(*(_QWORD *)(result + 16) + 388);
  if (v7 <= 0xFE)
  {
    if (*(_DWORD *)(result + 164) >= v8)
    {
      *(_DWORD *)(result + 160) = v8;
      v9 = (_DWORD *)(result + 160);
      if (!(_DWORD)v8)
      {
LABEL_13:
        v16 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v16)
        {
          v17 = 0;
          v18 = 0;
          v19 = 1;
          do
          {
            v20 = *(unsigned int *)(*(_QWORD *)a2 + v17);
            if ((_DWORD)v20 != (_DWORD)v6 && (_DWORD)v20 != (_DWORD)v5)
            {
              *(_BYTE *)(*(_QWORD *)(v3 + 152) + v20) = v19++;
              v16 = *(unsigned int *)(a2 + 8);
            }
            ++v18;
            v17 += 8;
          }
          while (v18 < v16);
        }
        if ((v6 & 0xFFFFFFFD) != 0xFFFFFC)
          *(_BYTE *)(*(_QWORD *)(v3 + 152) + v6) = *(_DWORD *)(v3 + 112);
        if ((v5 & 0xFFFFFFFD) != 0xFFFFFD)
          *(_BYTE *)(*(_QWORD *)(v3 + 152) + v5) = *(_DWORD *)(v3 + 116);
        if (*v9)
        {
          v22 = 0;
          do
          {
            result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v22);
            if ((_DWORD)result != 0xFFFFFF)
            {
              result = WordNgramTemplate::isHeadCloneWordId(*(WordNgramTemplate **)(v3 + 1816), v22);
              if ((result & 1) == 0)
              {
                result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v22);
                *(_BYTE *)(*(_QWORD *)(v3 + 152) + v22) = *(_BYTE *)(*(_QWORD *)(v3 + 152) + result);
              }
            }
            ++v22;
          }
          while (v22 < *v9);
        }
        return result;
      }
    }
    else
    {
      v46 = 0;
      v9 = (_DWORD *)(result + 160);
      v10 = realloc_array(*(_QWORD **)(result + 152), &v46, v8, *(unsigned int *)(result + 160), *(unsigned int *)(result + 160), 1);
      *(_QWORD *)(v3 + 152) = v46;
      *v9 = v8;
      *(_DWORD *)(v3 + 164) = v10;
    }
    v14 = 0;
    do
    {
      result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v14);
      if ((_DWORD)result == 0xFFFFFF)
        LOBYTE(v15) = -1;
      else
        v15 = *(_DWORD *)(v3 + 72);
      *(_BYTE *)(*(_QWORD *)(v3 + 152) + v14++) = v15;
    }
    while (v14 < *(unsigned int *)(v3 + 160));
    goto LABEL_13;
  }
  if (v7 <= 0xFFFE)
  {
    v11 = (_QWORD *)(result + 136);
    v12 = *(_DWORD *)(result + 148);
    if (v8 <= v12)
    {
      *(_DWORD *)(result + 144) = v8;
      v13 = (unsigned int *)(result + 144);
      if (!(_DWORD)v8)
      {
        LODWORD(v28) = 0;
LABEL_40:
        v29 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v29)
        {
          v30 = *(unsigned int **)a2;
          v31 = 1;
          do
          {
            v33 = *v30;
            v30 += 2;
            v32 = v33;
            if (v33 != (_DWORD)v6 && (_DWORD)v32 != (_DWORD)v5)
              *(_WORD *)(*v11 + 2 * v32) = v31++;
            --v29;
          }
          while (v29);
        }
        if ((v6 & 0xFFFFFFFD) != 0xFFFFFC)
          *(_WORD *)(*(_QWORD *)(v3 + 136) + 2 * v6) = *(_DWORD *)(v3 + 112);
        if ((v5 & 0xFFFFFFFD) != 0xFFFFFD)
          *(_WORD *)(*(_QWORD *)(v3 + 136) + 2 * v5) = *(_DWORD *)(v3 + 116);
        if ((_DWORD)v28)
        {
          v35 = 0;
          do
          {
            result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v35);
            if ((_DWORD)result != 0xFFFFFF)
            {
              result = WordNgramTemplate::isHeadCloneWordId(*(WordNgramTemplate **)(v3 + 1816), v35);
              if ((result & 1) == 0)
              {
                result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v35);
                *(_WORD *)(*(_QWORD *)(v3 + 136) + 2 * v35) = *(_WORD *)(*(_QWORD *)(v3 + 136)
                                                                       + 2 * result);
              }
            }
            ++v35;
          }
          while (v35 < *v13);
        }
        return result;
      }
    }
    else
    {
      DgnPrimArray<short>::reallocElts(result + 136, v8 - v12, 0);
      *(_DWORD *)(v3 + 144) = v8;
      v13 = (unsigned int *)(v3 + 144);
    }
    v26 = 0;
    do
    {
      result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v26);
      if ((_DWORD)result == 0xFFFFFF)
        LOWORD(v27) = -1;
      else
        v27 = *(_DWORD *)(v3 + 72);
      *(_WORD *)(*v11 + 2 * v26++) = v27;
      v28 = *v13;
    }
    while (v26 < v28);
    goto LABEL_40;
  }
  v23 = (_QWORD *)(result + 120);
  v24 = *(_DWORD *)(result + 132);
  if (v8 > v24)
  {
    DgnPrimArray<unsigned int>::reallocElts(result + 120, v8 - v24, 0);
    *(_DWORD *)(v3 + 128) = v8;
    v25 = (_DWORD *)(v3 + 128);
    goto LABEL_60;
  }
  *(_DWORD *)(result + 128) = v8;
  v25 = (_DWORD *)(result + 128);
  if ((_DWORD)v8)
  {
LABEL_60:
    v36 = 0;
    do
    {
      result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v36);
      if ((_DWORD)result == 0xFFFFFF)
        v37 = -1;
      else
        v37 = *(_DWORD *)(v3 + 72);
      *(_DWORD *)(*v23 + 4 * v36++) = v37;
    }
    while (v36 < *v25);
  }
  v38 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v38)
  {
    v39 = 0;
    v40 = *(unsigned int **)a2;
    v41 = 1;
    do
    {
      v43 = *v40;
      v40 += 2;
      v42 = v43;
      if (v43 != (_DWORD)v6 && (_DWORD)v42 != (_DWORD)v5)
      {
        *(_DWORD *)(*v23 + 4 * v42) = v41++;
        v38 = *(unsigned int *)(a2 + 8);
      }
      ++v39;
    }
    while (v39 < v38);
  }
  if ((v6 & 0xFFFFFFFD) != 0xFFFFFC)
    *(_DWORD *)(*(_QWORD *)(v3 + 120) + 4 * v6) = *(_DWORD *)(v3 + 112);
  if ((v5 & 0xFFFFFFFD) != 0xFFFFFD)
    *(_DWORD *)(*(_QWORD *)(v3 + 120) + 4 * v5) = *(_DWORD *)(v3 + 116);
  if (*v25)
  {
    v45 = 0;
    do
    {
      result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v45);
      if ((_DWORD)result != 0xFFFFFF)
      {
        result = WordNgramTemplate::isHeadCloneWordId(*(WordNgramTemplate **)(v3 + 1816), v45);
        if ((result & 1) == 0)
        {
          result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v45);
          *(_DWORD *)(*(_QWORD *)(v3 + 120) + 4 * v45) = *(_DWORD *)(*(_QWORD *)(v3 + 120) + 4 * result);
        }
      }
      ++v45;
    }
    while (v45 < *v25);
  }
  return result;
}

uint64_t mrec_qsort_r<WordIdAndCountCmp>(uint64_t result, unint64_t a2, unint64_t a3, WordIdAndCountCmp *a4)
{
  WordIdAndCountCmp *v4;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  int v16;
  const void *v17;
  int v18;
  const void *v19;
  unsigned int *v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int *v23;
  int v24;
  const void *v25;
  int v26;
  const void *v27;
  int v28;
  const void *v29;
  int v30;
  int v31;
  const void *v32;
  unsigned int *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  char v39;
  int v40;
  _QWORD *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int *v60;
  int64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  char v69;
  BOOL v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  int v78;
  WordIdAndCountCmp *v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  unsigned int *v104;
  unint64_t v105;
  unsigned int *v106;
  _BOOL4 v107;
  unsigned int *v108;
  unsigned int *v109;
  unint64_t v110;
  unsigned int *v111;
  BOOL v113;
  int v114;

  v4 = a4;
  v6 = a2;
  v7 = (unsigned int *)result;
  v8 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v9 = 2;
  else
    v9 = a3 != 8;
  v113 = ((result | a3) & 7) == 0;
  v114 = v9;
  if (a2 < 7)
  {
LABEL_117:
    if ((uint64_t)(v6 * a3) > (uint64_t)a3)
    {
      v79 = v4;
      v111 = (unsigned int *)((char *)v7 + v6 * a3);
      v80 = (unsigned int *)((char *)v7 + a3);
      v81 = v7;
      do
      {
        if (v80 > v7)
        {
          v82 = v81;
          v83 = v80;
          do
          {
            v84 = v83;
            v83 = (unsigned int *)((char *)v83 + v8);
            result = WordIdAndCountCmp::compareElements(v79, v83, v84, a4);
            if ((int)result < 1)
              break;
            if (v114)
            {
              if (v113)
              {
                v85 = 0;
                v86 = (uint64_t)v82 + a3;
                do
                {
                  v87 = *(_QWORD *)(v86 + 8 * v85);
                  *(_QWORD *)(v86 + 8 * v85) = *(_QWORD *)&v82[2 * v85];
                  *(_QWORD *)&v82[2 * v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                v89 = 0;
                v90 = (uint64_t)v82 + a3;
                do
                {
                  v91 = *(_BYTE *)(v90 + v89);
                  *(_BYTE *)(v90 + v89) = *((_BYTE *)v82 + v89);
                  *((_BYTE *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              v88 = *(_QWORD *)v84;
              *(_QWORD *)v84 = *(_QWORD *)v83;
              *(_QWORD *)v83 = v88;
            }
            v82 = (unsigned int *)((char *)v82 + v8);
          }
          while (v83 > v7);
        }
        v80 = (unsigned int *)((char *)v80 + a3);
        v81 = (unsigned int *)((char *)v81 + a3);
      }
      while (v80 < v111);
    }
    return result;
  }
  v107 = a3 != 8;
  v10 = a3 >> 3;
  while (1)
  {
    v11 = (unsigned int *)((char *)v7 + (v6 >> 1) * a3);
    if (v6 == 7)
      goto LABEL_44;
    v12 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
    if (v6 >= 0x29)
    {
      v108 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
      v13 = (v6 >> 3) * a3;
      v14 = (unsigned int *)((char *)v7 + v13);
      v105 = v13;
      v15 = (unsigned int *)((char *)v7 + 2 * v13);
      v16 = WordIdAndCountCmp::compareElements(v4, v7, (unsigned int *)((char *)v7 + v13), a4);
      v109 = v14;
      v18 = WordIdAndCountCmp::compareElements(v4, v14, v15, v17);
      if (v16 < 0)
      {
        if ((v18 & 0x80000000) == 0)
        {
          if ((int)WordIdAndCountCmp::compareElements(v4, v7, v15, v19) >= 0)
            v20 = v7;
          else
            v20 = v15;
          goto LABEL_18;
        }
      }
      else if (v18 <= 0)
      {
        if ((int)WordIdAndCountCmp::compareElements(v4, v7, v15, v19) >= 0)
          v20 = v15;
        else
          v20 = v7;
LABEL_18:
        v109 = v20;
      }
      v22 = (v6 >> 3) * a3;
      v23 = (unsigned int *)((char *)v11 + v105);
      v104 = (unsigned int *)((char *)v11 - v105);
      v24 = WordIdAndCountCmp::compareElements(v4, (unsigned int *)((char *)v11 - v105), (unsigned int *)((char *)v7 + (v6 >> 1) * a3), v19);
      v26 = WordIdAndCountCmp::compareElements(v4, (unsigned int *)((char *)v7 + (v6 >> 1) * a3), (unsigned int *)((char *)v11 + v105), v25);
      if (v24 < 0)
      {
        if ((v26 & 0x80000000) == 0)
        {
          v11 = (unsigned int *)((char *)v11 - v105);
          if ((int)WordIdAndCountCmp::compareElements(v4, v104, v23, v27) < 0)
            v11 = v23;
        }
      }
      else if (v26 <= 0)
      {
        v11 = (unsigned int *)((char *)v11 - v105);
        if ((int)WordIdAndCountCmp::compareElements(v4, v104, v23, v27) >= 0)
          v11 = v23;
      }
      v12 = (unsigned int *)((char *)v108 - v105);
      v106 = (unsigned int *)((char *)v108 - 2 * v105);
      v28 = WordIdAndCountCmp::compareElements(v4, (unsigned int *)((char *)v108 - 2 * v22), (unsigned int *)((char *)v108 - v22), v27);
      v30 = WordIdAndCountCmp::compareElements(v4, (unsigned int *)((char *)v108 - v22), v108, v29);
      if (v28 < 0)
      {
        v21 = v109;
        if ((v30 & 0x80000000) == 0)
        {
          v12 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
          if ((int)WordIdAndCountCmp::compareElements(v4, v106, v108, a4) >= 0)
            v12 = v106;
        }
      }
      else
      {
        v21 = v109;
        if (v30 <= 0)
        {
          v12 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
          if ((int)WordIdAndCountCmp::compareElements(v4, v106, v108, a4) < 0)
            v12 = v106;
        }
      }
      goto LABEL_35;
    }
    v21 = v7;
LABEL_35:
    v31 = WordIdAndCountCmp::compareElements(v4, v21, v11, a4);
    result = WordIdAndCountCmp::compareElements(v4, v11, v12, v32);
    if (v31 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WordIdAndCountCmp::compareElements(v4, v21, v12, a4);
        if ((int)result >= 0)
          v11 = v21;
        else
          v11 = v12;
      }
    }
    else if ((int)result <= 0)
    {
      result = WordIdAndCountCmp::compareElements(v4, v21, v12, a4);
      if ((int)result >= 0)
        v11 = v12;
      else
        v11 = v21;
    }
LABEL_44:
    if (v114)
    {
      if (v113)
      {
        v33 = v7;
        v34 = a3 >> 3;
        do
        {
          v35 = *(_QWORD *)v33;
          *(_QWORD *)v33 = *(_QWORD *)v11;
          v33 += 2;
          *(_QWORD *)v11 = v35;
          v11 += 2;
          --v34;
        }
        while (v34);
      }
      else
      {
        v37 = a3;
        v38 = v7;
        do
        {
          v39 = *(_BYTE *)v38;
          *(_BYTE *)v38 = *(_BYTE *)v11;
          v38 = (unsigned int *)((char *)v38 + 1);
          *(_BYTE *)v11 = v39;
          v11 = (unsigned int *)((char *)v11 + 1);
          --v37;
        }
        while (v37);
      }
    }
    else
    {
      v36 = *(_QWORD *)v7;
      *(_QWORD *)v7 = *(_QWORD *)v11;
      *(_QWORD *)v11 = v36;
    }
    v40 = 0;
    v41 = (_QWORD *)((char *)v7 + a3);
    v110 = v6;
    v42 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
    v43 = v42;
    v44 = (unsigned int *)((char *)v7 + a3);
LABEL_53:
    while (v44 <= v43)
    {
      result = WordIdAndCountCmp::compareElements(v4, v44, v7, a4);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v114)
        {
          if (v113)
          {
            v45 = 0;
            do
            {
              v46 = v41[v45];
              v41[v45] = *(_QWORD *)&v44[2 * v45];
              *(_QWORD *)&v44[2 * v45++] = v46;
            }
            while (v10 != v45);
          }
          else
          {
            v55 = 0;
            do
            {
              v56 = *((_BYTE *)v41 + v55);
              *((_BYTE *)v41 + v55) = *((_BYTE *)v44 + v55);
              *((_BYTE *)v44 + v55++) = v56;
            }
            while (a3 != v55);
          }
        }
        else
        {
          v54 = *v41;
          *v41 = *(_QWORD *)v44;
          *(_QWORD *)v44 = v54;
        }
        v41 = (_QWORD *)((char *)v41 + a3);
        v40 = 1;
      }
      v44 = (unsigned int *)((char *)v44 + a3);
    }
    while (v44 <= v43)
    {
      result = WordIdAndCountCmp::compareElements(v4, v43, v7, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v114)
        {
          if (v113)
          {
            v52 = 0;
            do
            {
              v53 = *(_QWORD *)&v44[2 * v52];
              *(_QWORD *)&v44[2 * v52] = *(_QWORD *)&v43[2 * v52];
              *(_QWORD *)&v43[2 * v52++] = v53;
            }
            while (v10 != v52);
          }
          else
          {
            v58 = 0;
            do
            {
              v59 = *((_BYTE *)v44 + v58);
              *((_BYTE *)v44 + v58) = *((_BYTE *)v43 + v58);
              *((_BYTE *)v43 + v58++) = v59;
            }
            while (a3 != v58);
          }
        }
        else
        {
          v57 = *(_QWORD *)v44;
          *(_QWORD *)v44 = *(_QWORD *)v43;
          *(_QWORD *)v43 = v57;
        }
        v44 = (unsigned int *)((char *)v44 + a3);
        v43 = (unsigned int *)((char *)v43 + v8);
        v40 = 1;
        goto LABEL_53;
      }
      if (!(_DWORD)result)
      {
        if (v114)
        {
          if (v113)
          {
            v47 = 0;
            do
            {
              v48 = *(_QWORD *)&v43[2 * v47];
              *(_QWORD *)&v43[2 * v47] = *(_QWORD *)&v42[2 * v47];
              *(_QWORD *)&v42[2 * v47++] = v48;
            }
            while (v10 != v47);
          }
          else
          {
            v50 = 0;
            do
            {
              v51 = *((_BYTE *)v43 + v50);
              *((_BYTE *)v43 + v50) = *((_BYTE *)v42 + v50);
              *((_BYTE *)v42 + v50++) = v51;
            }
            while (a3 != v50);
          }
        }
        else
        {
          v49 = *(_QWORD *)v43;
          *(_QWORD *)v43 = *(_QWORD *)v42;
          *(_QWORD *)v42 = v49;
        }
        v42 = (unsigned int *)((char *)v42 + v8);
        v40 = 1;
      }
      v43 = (unsigned int *)((char *)v43 + v8);
    }
    v60 = (unsigned int *)((char *)v7 + v110 * a3);
    if (!v40)
      break;
    v61 = (char *)v44 - (char *)v41;
    if ((char *)v41 - (char *)v7 >= (char *)v44 - (char *)v41)
      v62 = (char *)v44 - (char *)v41;
    else
      v62 = (char *)v41 - (char *)v7;
    if (v62)
    {
      if (v113)
      {
        v63 = (_QWORD *)((char *)v44 - v62);
        v64 = v62 >> 3;
        v65 = v7;
        do
        {
          v66 = *(_QWORD *)v65;
          *(_QWORD *)v65 = *v63;
          v65 += 2;
          *v63++ = v66;
          --v64;
        }
        while (v64);
      }
      else
      {
        v67 = -(uint64_t)v62;
        v68 = v7;
        do
        {
          v69 = *(_BYTE *)v68;
          *(_BYTE *)v68 = *((_BYTE *)v44 + v67);
          v68 = (unsigned int *)((char *)v68 + 1);
          *((_BYTE *)v44 + v67) = v69;
          v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    v71 = (char *)v42 - (char *)v43;
    if ((char *)v42 - (char *)v43 >= (char *)v60 - ((char *)v42 + a3))
      v72 = (char *)v60 - ((char *)v42 + a3);
    else
      v72 = (char *)v42 - (char *)v43;
    if (v72)
    {
      if (v113)
      {
        v73 = (char *)v60 - v72;
        v74 = v72 >> 3;
        do
        {
          v75 = *(_QWORD *)v44;
          *(_QWORD *)v44 = *(_QWORD *)v73;
          v44 += 2;
          *(_QWORD *)v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        v76 = -(uint64_t)v72;
        do
        {
          v77 = *(_BYTE *)v44;
          *(_BYTE *)v44 = *((_BYTE *)v60 + v76);
          v44 = (unsigned int *)((char *)v44 + 1);
          *((_BYTE *)v60 + v76) = v77;
          v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3)
      result = mrec_qsort_r<WordIdAndCountCmp>(v7, v61 / a3, a3, a4);
    if (v71 <= (uint64_t)a3)
      return result;
    v7 = (unsigned int *)((char *)v60 - v71);
    v6 = v71 / a3;
    v78 = v107;
    if (((((_DWORD)v60 - (_DWORD)v71) | a3) & 7) != 0)
      v78 = 2;
    v113 = ((((_DWORD)v60 - (_DWORD)v71) | a3) & 7) == 0;
    v114 = v78;
    v4 = a4;
    if (v6 < 7)
      goto LABEL_117;
  }
  v92 = (unsigned int *)((char *)v7 + a3);
  if ((uint64_t)(v110 * a3) > (uint64_t)a3)
  {
    v93 = v7;
    do
    {
      if (v92 > v7)
      {
        v94 = v93;
        v95 = v92;
        do
        {
          v96 = v95;
          v95 = (unsigned int *)((char *)v95 + v8);
          result = WordIdAndCountCmp::compareElements(a4, v95, v96, a4);
          if ((int)result < 1)
            break;
          if (v114)
          {
            if (v113)
            {
              v97 = 0;
              v98 = (uint64_t)v94 + a3;
              do
              {
                v99 = *(_QWORD *)(v98 + 8 * v97);
                *(_QWORD *)(v98 + 8 * v97) = *(_QWORD *)&v94[2 * v97];
                *(_QWORD *)&v94[2 * v97++] = v99;
              }
              while (v10 != v97);
            }
            else
            {
              v101 = 0;
              v102 = (uint64_t)v94 + a3;
              do
              {
                v103 = *(_BYTE *)(v102 + v101);
                *(_BYTE *)(v102 + v101) = *((_BYTE *)v94 + v101);
                *((_BYTE *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            v100 = *(_QWORD *)v96;
            *(_QWORD *)v96 = *(_QWORD *)v95;
            *(_QWORD *)v95 = v100;
          }
          v94 = (unsigned int *)((char *)v94 + v8);
        }
        while (v95 > v7);
      }
      v92 = (unsigned int *)((char *)v92 + a3);
      v93 = (unsigned int *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

uint64_t Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::add(uint64_t result, _DWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int *v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = result;
  v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1)
    result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  v7 = *a2;
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = v7 - 1;
    do
    {
      HIDWORD(v10) = v8;
      LODWORD(v10) = v8;
      v8 = a2[v9 + 1] + (v10 >> 19);
    }
    while ((unint64_t)v9--);
  }
  else
  {
    v8 = 0;
  }
  v12 = *(_DWORD *)(v5 + 16);
  if (v12)
    v13 = (-1640531527 * v8) >> -(char)v12;
  else
    v13 = 0;
  v14 = *(_QWORD *)(v5 + 80);
  v15 = *(_QWORD *)(v5 + 32);
  if (!v15)
  {
    result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    v15 = *(_QWORD *)(v5 + 32);
    LODWORD(v7) = *a2;
  }
  *(_QWORD *)(v5 + 32) = *(_QWORD *)v15;
  *(_DWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 12) = v7;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v16 = (_DWORD *)(v15 + 16);
    v17 = a2 + 1;
    do
    {
      v18 = *v17++;
      *v16++ = v18;
      --v7;
    }
    while (v7);
  }
  v19 = (_QWORD *)(v14 + 8 * v13);
  *(_QWORD *)(v15 + 32) = *a3;
  *(_DWORD *)(v15 + 8) = v8;
  ++*(_DWORD *)(v5 + 8);
  if (*(_BYTE *)(v5 + 20))
  {
    *(_QWORD *)v15 = *v19;
  }
  else
  {
    *(_QWORD *)v15 = 0;
    v20 = (_QWORD *)*v19;
    if (*v19)
    {
      do
      {
        v19 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
    }
  }
  *v19 = v15;
  return result;
}

uint64_t WordLanguageModel::dumpWordLM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, DgnStream *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v9 = a4;
  v10 = a3;
  if (*(_DWORD *)(a2 + 8))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 14939, (uint64_t)"lm/wordlm", 91, (uint64_t)"%u", a7, a8, **(_WORD **)a2);
  if (*(_DWORD *)(a1 + 64) < v10)
  {
    v24 = *(unsigned int *)(a1 + 64);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 14940, (uint64_t)"lm/wordlm", 92, (uint64_t)"%u %u", a7, a8, v10);
  }
  v25 = a1;
  v26 = v10;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = -1;
  v32 = -1;
  v33 = v9;
  NGramIterator::next((NGramIterator *)&v25, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  while (!HIBYTE(v27))
  {
    if ((_DWORD)v29)
    {
      v15 = 0;
      do
      {
        if (v15)
          DgnStream::streamPrintf(a5, " ", v12, v13, v14);
        DgnStream::streamPrintf(a5, "%u", v12, v13, v14, *(unsigned int *)(v28 + 4 * v15++), v24);
      }
      while (v15 < v29);
    }
    DgnStream::streamPrintf(a5, " %u %d\n", v12, v13, v14, (unsigned __int16)v30, SHIWORD(v30));
    NGramIterator::next((NGramIterator *)&v25, v16, v17, v18, v19, v20, v21, v22);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
}

void sub_20999D2F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void NGramIterator::NGramIterator(NGramIterator *this, const WordLanguageModel *a2, __int16 a3, char a4)
{
  *(_QWORD *)this = a2;
  *((_WORD *)this + 4) = a3;
  *((_WORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = -1;
  *((_QWORD *)this + 6) = -1;
  *((_BYTE *)this + 56) = a4;
}

BOOL NGramIterator::next(NGramIterator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_BYTE *)this + 11))
    return 0;
  switch(*((_WORD *)this + 4))
  {
    case 1:
      NGramIterator::next1(this, a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2:
      if (*((_BYTE *)this + 56))
        NGramIterator::next2Backoff((unint64_t)this);
      else
        NGramIterator::next2((uint64_t *)this);
      break;
    case 3:
      if (*((_BYTE *)this + 56))
        NGramIterator::next3Backoff(this);
      else
        NGramIterator::next3(this);
      break;
    case 4:
      if (*((_BYTE *)this + 56))
        NGramIterator::next4Backoff(this);
      else
        NGramIterator::next4((uint64_t)this);
      break;
    default:
      return *((_BYTE *)this + 11) == 0;
  }
  return *((_BYTE *)this + 11) == 0;
}

void NGramIterator::next1(NGramIterator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  __int16 v15;

  if (*((_BYTE *)this + 10))
    LODWORD(v9) = **((_DWORD **)this + 2) + 1;
  else
    LODWORD(v9) = 1;
  *((_BYTE *)this + 10) = 1;
  v10 = *(_DWORD **)this;
  v11 = *(_DWORD *)(*(_QWORD *)this + 176);
  v12 = v11 - v9;
  if (v11 > v9)
  {
    v9 = v9;
    while (1)
    {
      v13 = *((_QWORD *)v10 + 21);
      v14 = *(unsigned __int16 *)(v13 + 2 * v9);
      if (v14 != 20000)
        break;
      ++v9;
      if (!--v12)
        goto LABEL_19;
    }
    if (v10[16] < 2u)
    {
      v15 = 20000;
    }
    else
    {
      v15 = *(_WORD *)(v13 + 2 * v9);
      if (v10[84])
        v15 = *(_WORD *)(*((_QWORD *)v10 + 41) + 2 * v9);
      if (v15 < 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 15067, (uint64_t)"lm/wordlm", 93, (uint64_t)"%d", a7, a8, v15);
    }
    if (!*((_DWORD *)this + 7))
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 16, 1, 0);
    *((_DWORD *)this + 6) = 1;
    **((_DWORD **)this + 2) = v9;
    *((_WORD *)this + 16) = v14;
    *((_WORD *)this + 17) = v15;
    v11 = *(_DWORD *)(*(_QWORD *)this + 176);
  }
  if (v9 >= v11)
LABEL_19:
    *((_BYTE *)this + 11) = 1;
}

unint64_t NGramIterator::next2Backoff(unint64_t this)
{
  unint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  unsigned int v9;
  _DWORD *v10;

  v1 = this;
  if (*(_BYTE *)(this + 10))
  {
    v2 = *(_DWORD *)(this + 40) + 1;
    *(_DWORD *)(this + 40) = v2;
  }
  else
  {
    *(_QWORD *)(this + 40) = 0xFFFFFFFF00000001;
    v2 = 1;
  }
  *(_BYTE *)(this + 10) = 1;
  v3 = *(_QWORD *)this;
  v4 = *(_DWORD *)(*(_QWORD *)this + 560);
  v5 = v4 - v2;
  if (v4 > v2)
  {
    v6 = *(_QWORD *)(v3 + 552);
    v7 = v2;
    while (!*(_WORD *)(v6 + 2 * v7))
    {
      *(_DWORD *)(this + 40) = ++v7;
      if (!--v5)
        goto LABEL_13;
    }
    v8 = *(_WORD *)(*(_QWORD *)(v3 + 344) + 2 * v7);
    v9 = *(_DWORD *)(this + 28);
    if (v9 <= 1)
    {
      this = DgnPrimArray<unsigned int>::reallocElts(this + 16, 2 - v9, 0);
      v3 = *(_QWORD *)v1;
    }
    *(_DWORD *)(v1 + 24) = 2;
    v10 = *(_DWORD **)(v1 + 16);
    *v10 = v7;
    v10[1] = -1;
    *(_WORD *)(v1 + 32) = 20000;
    *(_WORD *)(v1 + 34) = v8;
    v2 = *(_DWORD *)(v1 + 40);
    v4 = *(_DWORD *)(v3 + 560);
  }
  if (v2 >= v4)
LABEL_13:
    *(_BYTE *)(v1 + 11) = 1;
  return this;
}

uint64_t *NGramIterator::next2(uint64_t *this)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  __int16 v11;
  int v12;

  v1 = (uint64_t)this;
  if (*((_BYTE *)this + 10))
  {
    v2 = *((_DWORD *)this + 10);
    v3 = *((_DWORD *)this + 11) + 1;
    *((_DWORD *)this + 11) = v3;
    v4 = *this;
  }
  else
  {
    v2 = 1;
    *((_DWORD *)this + 10) = 1;
    v4 = *this;
    v3 = (**(_DWORD **)(*this + 384) >> 1) & 1;
    *((_DWORD *)this + 11) = v3;
  }
  *((_BYTE *)this + 10) = 1;
  v5 = *(_DWORD *)(v4 + 560);
  if (v2 >= v5)
    goto LABEL_25;
  while (1)
  {
    v6 = *(_QWORD *)(v4 + 384);
    if (((*(_DWORD *)(v6 + 4 * (v2 >> 5)) >> v2) & 1) != 0)
    {
      if ((unsigned __int16)v3 > *(unsigned __int16 *)(*(_QWORD *)(v4 + 552) + 2 * v2))
        goto LABEL_11;
      v7 = (unsigned __int16)v3 + *(_DWORD *)(*(_QWORD *)(v4 + 536) + 4 * v2) - 1;
      if (*(_DWORD *)(v4 + 376))
      {
        v7 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 584) + v7);
        v8 = *(_QWORD *)(v4 + 368);
      }
      else
      {
        v8 = *(_QWORD *)(v4 + 568);
      }
      v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    }
    else
    {
      if (v3 >= *(unsigned __int16 *)(*(_QWORD *)(v4 + 552) + 2 * v2))
      {
LABEL_11:
        *(_DWORD *)(v1 + 40) = ++v2;
        if (v2 >= v5)
          v3 = 0;
        else
          v3 = (*(_DWORD *)(v6 + 4 * (v2 >> 5)) >> v2) & 1;
        *(_DWORD *)(v1 + 44) = v3;
        goto LABEL_19;
      }
      this = (uint64_t *)BigramData::getSearchScoreForIndex((BigramData *)(v4 + 360), v2, v3);
      v9 = (int)this;
    }
    if (v9 != 20000)
      break;
    v2 = *(_DWORD *)(v1 + 40);
    v3 = *(_DWORD *)(v1 + 44) + 1;
    *(_DWORD *)(v1 + 44) = v3;
    v4 = *(_QWORD *)v1;
LABEL_19:
    v5 = *(_DWORD *)(v4 + 560);
    if (v2 >= v5)
      goto LABEL_25;
  }
  v10 = *(unsigned int *)(v1 + 40);
  v11 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1 + 344) + 2 * v10);
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 384) + ((v10 >> 3) & 0x1FFFFFFC)) >> v10) & 1) != 0)
  {
    v12 = *(_DWORD *)(v1 + 44);
  }
  else
  {
    LOWORD(v12) = BigramData::getSearchSuccIdForIndex((BigramData *)(*(_QWORD *)v1 + 360), v10, *(_DWORD *)(v1 + 44));
    LODWORD(v10) = *(_DWORD *)(v1 + 40);
  }
  this = (uint64_t *)NGramIteratorData::set2(v1 + 16, v10, (unsigned __int16)v12, v9, v11);
  v2 = *(_DWORD *)(v1 + 40);
  v5 = *(_DWORD *)(*(_QWORD *)v1 + 560);
LABEL_25:
  if (v2 >= v5)
    *(_BYTE *)(v1 + 11) = 1;
  return this;
}

void NGramIterator::next3Backoff(NGramIterator *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  __int16 *v9;

  v2 = *((unsigned __int8 *)this + 10);
  if (*((_BYTE *)this + 10))
  {
    v3 = *((_DWORD *)this + 10);
    v2 = *((_DWORD *)this + 11) + 1;
    *((_DWORD *)this + 11) = v2;
  }
  else
  {
    *((_QWORD *)this + 5) = 1;
    *((_DWORD *)this + 12) = -1;
    v3 = 1;
  }
  *((_BYTE *)this + 10) = 1;
  v4 = *(_QWORD *)this;
  v5 = *(_DWORD *)(*(_QWORD *)this + 800);
  if (v3 >= v5)
    goto LABEL_19;
  v6 = *(_QWORD *)(v4 + 792);
  while (!*(_WORD *)(v6 + 2 * v3) || v2 >= *(unsigned __int16 *)(v6 + 2 * v3))
  {
    v2 = 0;
    *((_DWORD *)this + 10) = ++v3;
LABEL_13:
    *((_DWORD *)this + 11) = v2;
    if (v3 >= v5)
      goto LABEL_19;
  }
  v8 = (*(_DWORD *)(*(_QWORD *)(v4 + 808) + 4 * v3) + v2);
  if (!*(_WORD *)(*(_QWORD *)(v4 + 1040) + 2 * v8))
  {
    ++v2;
    goto LABEL_13;
  }
  if (*(_DWORD *)(v4 + 768))
    v9 = (__int16 *)(*(_QWORD *)(v4 + 760) + 2 * *(unsigned __int8 *)(*(_QWORD *)(v4 + 856) + v8));
  else
    v9 = (__int16 *)(*(_QWORD *)(v4 + 840) + 2 * v8);
  NGramIteratorData::set3((NGramIterator *)((char *)this + 16), v3, *(unsigned __int16 *)(*(_QWORD *)(v4 + 824) + 2 * v8), 0xFFFFu, 20000, *v9);
  v5 = *(_DWORD *)(*(_QWORD *)this + 800);
LABEL_19:
  if (*((_DWORD *)this + 10) >= v5)
    *((_BYTE *)this + 11) = 1;
}

void NGramIterator::next3(NGramIterator *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int SearchScoreForIndex;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  __int16 *v26;

  if (*((_BYTE *)this + 10))
  {
    ++*((_DWORD *)this + 12);
    v2 = *((unsigned int *)this + 10);
    v3 = *(_QWORD *)this;
    v4 = *(unsigned int *)(*(_QWORD *)this + 800);
  }
  else
  {
    v3 = *(_QWORD *)this;
    v4 = *(unsigned int *)(*(_QWORD *)this + 800);
    if (v4 < 2)
    {
      v2 = 1;
LABEL_9:
      *((_DWORD *)this + 10) = v2;
    }
    else
    {
      v2 = 1;
      while (!*(_WORD *)(*(_QWORD *)(v3 + 792) + 2 * v2))
      {
        if (v4 == ++v2)
        {
          v2 = *(unsigned int *)(*(_QWORD *)this + 800);
          goto LABEL_9;
        }
      }
      *((_DWORD *)this + 10) = v2;
      *((_DWORD *)this + 11) = 0;
      v5 = *(unsigned int *)(*(_QWORD *)(v3 + 808) + 4 * v2);
      *((_DWORD *)this + 12) = (*(_DWORD *)(*(_QWORD *)(v3 + 872) + ((v5 >> 3) & 0x1FFFFFFC)) >> v5) & 1;
      v2 = v2;
    }
  }
  *((_BYTE *)this + 10) = 1;
  if (v2 >= v4)
    goto LABEL_33;
  while (1)
  {
    v6 = *(_QWORD *)(v3 + 792);
    v7 = *(unsigned __int16 *)(v6 + 2 * v2);
    if (!*(_WORD *)(v6 + 2 * v2) || (v8 = *((_DWORD *)this + 11), v8 >= v7))
    {
      v18 = 0;
      v19 = v2 + 1;
      *((_QWORD *)this + 5) = v19;
      if (v4 > v19)
      {
        if (*(_WORD *)(v6 + 2 * v19))
        {
          v20 = *(unsigned int *)(*(_QWORD *)(v3 + 808) + 4 * v19);
          v18 = (*(_DWORD *)(*(_QWORD *)(v3 + 872) + ((v20 >> 3) & 0x1FFFFFFC)) >> v20) & 1;
        }
        else
        {
          v18 = 0;
        }
      }
      *((_DWORD *)this + 12) = v18;
      goto LABEL_32;
    }
    v9 = *(_QWORD *)(v3 + 808);
    v10 = (*(_DWORD *)(v9 + 4 * v2) + v8);
    v11 = *(_QWORD *)(v3 + 872);
    v12 = v10 >> 5;
    v13 = *(_DWORD *)(v11 + 4 * v12);
    v14 = 1 << (*(_BYTE *)(v9 + 4 * v2) + v8);
    v15 = *((_DWORD *)this + 12);
    if ((v14 & v13) != 0)
    {
      if ((unsigned __int16)*((_DWORD *)this + 12) <= *(unsigned __int16 *)(*(_QWORD *)(v3 + 1040)
                                                                                         + 2 * v10))
      {
        v16 = (unsigned __int16)*((_DWORD *)this + 12) + *(_DWORD *)(*(_QWORD *)(v3 + 1024) + 4 * v10) - 1;
        if (*(_DWORD *)(v3 + 784))
        {
          v16 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 1072) + v16);
          v17 = *(_QWORD *)(v3 + 776);
        }
        else
        {
          v17 = *(_QWORD *)(v3 + 1056);
        }
        v23 = *(unsigned __int16 *)(v17 + 2 * v16);
        if (v23 != 20000)
          goto LABEL_37;
        v22 = v15 + 1;
        goto LABEL_31;
      }
      goto LABEL_26;
    }
    if (v15 < *(unsigned __int16 *)(*(_QWORD *)(v3 + 1040) + 2 * v10))
      break;
LABEL_26:
    *((_DWORD *)this + 11) = v8 + 1;
    if (v8 + 1 < v7)
    {
      v22 = (*(_DWORD *)(v11 + 4 * ((*(_DWORD *)(v9 + 4 * v2) + v8 + 1) >> 5)) >> (*(_BYTE *)(v9 + 4 * v2)
                                                                                                 + v8
                                                                                                 + 1)) & 1;
LABEL_31:
      *((_DWORD *)this + 12) = v22;
    }
LABEL_32:
    v2 = *((unsigned int *)this + 10);
    v4 = *(unsigned int *)(v3 + 800);
    if (v2 >= v4)
      goto LABEL_33;
  }
  SearchScoreForIndex = TrigramData::getSearchScoreForIndex((TrigramData *)(v3 + 744), *(_DWORD *)(v9 + 4 * v2) + v8, v15);
  if (SearchScoreForIndex == 20000)
  {
    ++*((_DWORD *)this + 12);
    v3 = *(_QWORD *)this;
    goto LABEL_32;
  }
  LOWORD(v23) = SearchScoreForIndex;
  v3 = *(_QWORD *)this;
  v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 872) + 4 * v12);
LABEL_37:
  v24 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 824) + 2 * v10);
  if ((v13 & v14) != 0)
  {
    v25 = *((_DWORD *)this + 12);
  }
  else
  {
    LOWORD(v25) = TrigramData::getSearchSuccIdForIndex((TrigramData *)(v3 + 744), v10, *((_DWORD *)this + 12));
    v3 = *(_QWORD *)this;
  }
  if (*(_DWORD *)(v3 + 768))
    v26 = (__int16 *)(*(_QWORD *)(v3 + 760) + 2 * *(unsigned __int8 *)(*(_QWORD *)(v3 + 856) + v10));
  else
    v26 = (__int16 *)(*(_QWORD *)(v3 + 840) + 2 * v10);
  NGramIteratorData::set3((NGramIterator *)((char *)this + 16), *((_DWORD *)this + 10), v24, (unsigned __int16)v25, v23, *v26);
  v4 = *(unsigned int *)(*(_QWORD *)this + 800);
LABEL_33:
  if (*((unsigned int *)this + 10) >= v4)
    *((_BYTE *)this + 11) = 1;
}

QuadgramData *NGramIterator::next4Backoff(QuadgramData *this)
{
  QuadgramData *v1;
  int v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  unsigned int v13;
  __int16 BackoffWeight;

  v1 = this;
  if (*((_BYTE *)this + 10))
  {
    v2 = *((_DWORD *)this + 12) + 1;
    *((_DWORD *)this + 12) = v2;
    v3 = *(_QWORD **)this;
    v4 = *(unsigned int *)(*(_QWORD *)this + 1288);
    v5 = *((unsigned int *)this + 10);
  }
  else
  {
    v3 = *(_QWORD **)this;
    v4 = *(unsigned int *)(*(_QWORD *)this + 1288);
    if (v4 < 2)
    {
      v5 = 1;
    }
    else
    {
      v6 = 1;
      while (!*(_WORD *)(v3[160] + 2 * v6))
      {
        if (v4 == ++v6)
        {
          v5 = *(unsigned int *)(*(_QWORD *)this + 1288);
          goto LABEL_10;
        }
      }
      v5 = v6;
    }
LABEL_10:
    v2 = 0;
    *((_DWORD *)this + 10) = v5;
    *((_DWORD *)this + 11) = 0;
    *((_DWORD *)this + 12) = 0;
    *((_DWORD *)this + 13) = -1;
  }
  *((_BYTE *)this + 10) = 1;
  if (v5 >= v4)
    goto LABEL_28;
  this = (QuadgramData *)(v3 + 154);
  v7 = v3[160];
  while (1)
  {
    if (*(_WORD *)(v7 + 2 * v5))
    {
      v8 = *((_DWORD *)v1 + 11);
      if (v8 < *(unsigned __int16 *)(v7 + 2 * v5))
        break;
    }
    v2 = 0;
    *((_QWORD *)v1 + 5) = ++v5;
LABEL_21:
    *((_DWORD *)v1 + 12) = v2;
    if (v5 >= v4)
      goto LABEL_28;
  }
  v9 = (*(_DWORD *)(v3[162] + 4 * v5) + v8);
  if (v2 >= *(unsigned __int16 *)(v3[166] + 2 * v9))
  {
    v2 = 0;
    *((_DWORD *)v1 + 11) = v8 + 1;
    goto LABEL_21;
  }
  v10 = *(unsigned int *)(v3[185] + 4 * v9);
  if (*((_DWORD *)v3 + 308) && ((*(_DWORD *)(v3[168] + 4 * (v9 >> 5)) >> v9) & 1) != 0)
  {
    LODWORD(v10) = *(_DWORD *)(v3[207] + 4 * v10);
    if (*(_WORD *)(v3[217] + 2 * (v10 + v2)))
    {
      v11 = v3 + 209;
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (!*(_WORD *)(v3[189] + 2 * (v10 + v2)))
  {
LABEL_25:
    ++v2;
    goto LABEL_21;
  }
  v11 = v3 + 187;
LABEL_27:
  v12 = *(unsigned __int16 *)(v3[164] + 2 * v9);
  v13 = *(unsigned __int16 *)(*v11 + 2 * (v10 + v2));
  BackoffWeight = QuadgramData::getBackoffWeight(this, v9, v2);
  this = (QuadgramData *)NGramIteratorData::set4((unint64_t)v1 + 16, *((_DWORD *)v1 + 10), v12, v13, 0xFFFF, 20000, BackoffWeight);
  v4 = *(unsigned int *)(*(_QWORD *)v1 + 1288);
LABEL_28:
  if (*((unsigned int *)v1 + 10) >= v4)
    *((_BYTE *)v1 + 11) = 1;
  return this;
}

uint64_t NGramIterator::next4(uint64_t this)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  __int16 v14;
  _QWORD *v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  int Quad3SuccIdForIndex;
  __int16 BackoffWeight;

  v1 = this;
  if (*(_BYTE *)(this + 10))
  {
    v2 = *(_DWORD *)(this + 52) + 1;
    *(_DWORD *)(this + 52) = v2;
    v3 = *(unsigned int *)(this + 40);
    v4 = *(_QWORD **)this;
    v5 = *(unsigned int *)(*(_QWORD *)this + 1288);
  }
  else
  {
    v4 = *(_QWORD **)this;
    v5 = *(unsigned int *)(*(_QWORD *)this + 1288);
    if (v5 < 2)
    {
      v3 = 1;
    }
    else
    {
      v6 = 1;
      while (!*(_WORD *)(v4[160] + 2 * v6))
      {
        if (v5 == ++v6)
        {
          v3 = *(unsigned int *)(*(_QWORD *)this + 1288);
          goto LABEL_10;
        }
      }
      v3 = v6;
    }
LABEL_10:
    v2 = 0;
    *(_DWORD *)(this + 40) = v3;
    *(_DWORD *)(this + 44) = 0;
    *(_QWORD *)(this + 48) = 0;
  }
  *(_BYTE *)(this + 10) = 1;
  if (v3 >= v5)
    goto LABEL_33;
  while (1)
  {
    v7 = v4[160];
    v8 = *(unsigned __int16 *)(v7 + 2 * v3);
    if (*(_WORD *)(v7 + 2 * v3))
    {
      v9 = *(_DWORD *)(v1 + 44);
      if (v9 < v8)
        break;
    }
    v2 = 0;
    *(_QWORD *)(v1 + 40) = (v3 + 1);
    *(_DWORD *)(v1 + 48) = 0;
LABEL_19:
    *(_DWORD *)(v1 + 52) = 0;
LABEL_20:
    v3 = *(unsigned int *)(v1 + 40);
    v5 = *((unsigned int *)v4 + 322);
    if (v3 >= v5)
      goto LABEL_33;
  }
  v10 = (*(_DWORD *)(v4[162] + 4 * v3) + v9);
  v11 = *(_DWORD *)(v1 + 48);
  if (v11 >= *(unsigned __int16 *)(v4[166] + 2 * v10))
  {
    v2 = 0;
    *(_QWORD *)(v1 + 48) = 0;
    *(_DWORD *)(v1 + 44) = v9 + 1;
    goto LABEL_20;
  }
  v12 = *(unsigned int *)(v4[185] + 4 * v10);
  if (*((_DWORD *)v4 + 308) && ((*(_DWORD *)(v4[168] + 4 * (v10 >> 5)) >> v10) & 1) != 0)
  {
    LODWORD(v12) = *(_DWORD *)(v4[207] + 4 * v12);
    v13 = v4 + 217;
  }
  else
  {
    v13 = v4 + 189;
  }
  if (v2 >= *(unsigned __int16 *)(*v13 + 2 * (v12 + v11)))
  {
    v2 = 0;
    *(_DWORD *)(v1 + 48) = v11 + 1;
    goto LABEL_19;
  }
  this = QuadgramData::getScoreForIndex((QuadgramData *)(v4 + 154), v10, v11, v2);
  if ((_DWORD)this == 20000)
  {
    v2 = *(_DWORD *)(v1 + 52) + 1;
    *(_DWORD *)(v1 + 52) = v2;
    v4 = *(_QWORD **)v1;
    goto LABEL_20;
  }
  v14 = this;
  v15 = *(_QWORD **)v1;
  v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v1 + 1312) + 2 * v10);
  v17 = *(_DWORD *)(v1 + 48);
  v18 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)v1 + 1480) + 4 * v10);
  if (*(_DWORD *)(*(_QWORD *)v1 + 1232) && ((*(_DWORD *)(v15[168] + 4 * (v10 >> 5)) >> v10) & 1) != 0)
  {
    LODWORD(v18) = *(_DWORD *)(v15[207] + 4 * v18);
    v19 = v15 + 209;
  }
  else
  {
    v19 = v15 + 187;
  }
  v20 = *(unsigned __int16 *)(*v19 + 2 * (v18 + v17));
  Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex((QuadgramData *)(*(_QWORD *)v1 + 1232), v10, v17, *(_DWORD *)(v1 + 52));
  BackoffWeight = QuadgramData::getBackoffWeight((QuadgramData *)(*(_QWORD *)v1 + 1232), v10, *(_DWORD *)(v1 + 48));
  this = NGramIteratorData::set4(v1 + 16, *(_DWORD *)(v1 + 40), v16, v20, Quad3SuccIdForIndex, v14, BackoffWeight);
  v5 = *(unsigned int *)(*(_QWORD *)v1 + 1288);
LABEL_33:
  if (*(unsigned int *)(v1 + 40) >= v5)
    *(_BYTE *)(v1 + 11) = 1;
  return this;
}

unint64_t NGramIteratorData::set2(unint64_t this, int a2, int a3, __int16 a4, __int16 a5)
{
  unint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  int v12;

  v9 = this;
  v10 = *(_DWORD *)(this + 12);
  if (v10 <= 1)
    this = DgnPrimArray<unsigned int>::reallocElts(this, 2 - v10, 0);
  *(_DWORD *)(v9 + 8) = 2;
  v11 = *(_DWORD **)v9;
  if (a3 == 0xFFFF)
    v12 = -1;
  else
    v12 = a3;
  *v11 = a2;
  v11[1] = v12;
  *(_WORD *)(v9 + 16) = a4;
  *(_WORD *)(v9 + 18) = a5;
  return this;
}

int8x8_t NGramIteratorData::set3(NGramIteratorData *this, int a2, unsigned int a3, unsigned int a4, __int16 a5, __int16 a6)
{
  unsigned int v12;
  uint64_t v13;
  int8x8_t result;

  v12 = *((_DWORD *)this + 3);
  if (v12 <= 2)
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this, 3 - v12, 0);
  *((_DWORD *)this + 2) = 3;
  v13 = *(_QWORD *)this;
  *(_DWORD *)v13 = a2;
  result = vorr_s8((int8x8_t)__PAIR64__(a4, a3), (int8x8_t)vceq_s32((int32x2_t)__PAIR64__(a4, a3), (int32x2_t)0xFFFF0000FFFFLL));
  *(int8x8_t *)(v13 + 4) = result;
  *((_WORD *)this + 8) = a5;
  *((_WORD *)this + 9) = a6;
  return result;
}

unint64_t NGramIteratorData::set4(unint64_t this, int a2, unsigned int a3, unsigned int a4, int a5, __int16 a6, __int16 a7)
{
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  v13 = this;
  v14 = *(_DWORD *)(this + 12);
  if (v14 <= 3)
    this = DgnPrimArray<unsigned int>::reallocElts(this, 4 - v14, 0);
  *(_DWORD *)(v13 + 8) = 4;
  v15 = *(_QWORD *)v13;
  *(_DWORD *)v15 = a2;
  *(int8x8_t *)(v15 + 4) = vorr_s8((int8x8_t)__PAIR64__(a4, a3), (int8x8_t)vceq_s32((int32x2_t)__PAIR64__(a4, a3), (int32x2_t)0xFFFF0000FFFFLL));
  if (a5 == 0xFFFF)
    v16 = -1;
  else
    v16 = a5;
  *(_DWORD *)(v15 + 12) = v16;
  *(_WORD *)(v13 + 16) = a6;
  *(_WORD *)(v13 + 18) = a7;
  return this;
}

uint64_t WordLMContextData::WordLMContextData(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 16777212;
  *(_QWORD *)a1 = &unk_24C215E80;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (a2)
    *(_QWORD *)(a1 + 112) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 464))(a2);
  *(_WORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  *(_BYTE *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 24) = -4278190084;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFF00000000;
  *(_BYTE *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 66) = 0;
  *(_OWORD *)(a1 + 68) = xmmword_209A7B4C0;
  *(_QWORD *)(a1 + 88) = 0xFFFFFFFE00FFFFFCLL;
  *(_WORD *)(a1 + 84) = 0;
  return a1;
}

void sub_20999E258(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void WordLMContextData::~WordLMContextData(WordLMContextData *this)
{
  WordLMContextData::~WordLMContextData(this);
  JUMPOUT(0x20BD149A8);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &unk_24C215E80;
  v2 = (_QWORD *)*((_QWORD *)this + 14);
  if (v2)
  {
    (*(void (**)(_QWORD))*v2)(*((_QWORD *)this + 14));
    MemChunkFree(v2, 0);
  }
  *((_QWORD *)this + 14) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40);
}

uint64_t WordLMContextData::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  v4 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 8;
  if ((_DWORD)a2 == 3)
    v5 = 0;
  else
    v5 = v4;
  if ((_DWORD)a2 != 2)
  {
    v6 = *(_QWORD *)(a1 + 112);
    if (v6)
      v5 += (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  }
  v7 = sizeObject<unsigned int>(a1 + 40, v2);
  v8 = sizeObject<unsigned int>(a1 + 96, v2);
  v9 = 6;
  if (v2 == 3)
    v9 = 0;
  return v9 + 2 * (v2 != 3) + v8 + v5 + v7 + 2 * (((v2 != 3) | (4 * (v2 != 3))) + 20 * (v2 != 3));
}

uint64_t HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder(uint64_t a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(a1 + 72);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a1 + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a1 + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a1 + 16);
  return DgnPrimArray<unsigned int>::~DgnPrimArray(a1);
}

uint64_t HuffmanDecoder<unsigned short,unsigned int>::sizeObject(uint64_t a1, int a2)
{
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2 != 3;
  v5 = sizeObject<unsigned int>(a1, a2);
  v6 = sizeObject<unsigned char>(a1 + 16, a2);
  v7 = sizeObject<unsigned int>(a1 + 32, a2);
  v8 = sizeObject<unsigned short>(a1 + 48, a2);
  return v5 + 8 * v4 + v6 + v7 + v8 + sizeObject<unsigned int>(a1 + 72, a2);
}

uint64_t HuffmanDecoder<unsigned short,unsigned int>::writeObject(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  writeObject<unsigned int>(a2, a1, a3);
  writeObject<unsigned char>(a2, a1 + 16, a3);
  writeObject<unsigned int>(a2, a1 + 32, a3);
  return writeObject<unsigned short>(a2, a1 + 48, a3);
}

unint64_t HuffmanDecoder<unsigned short,unsigned int>::readObject(unint64_t a1, DgnStream *a2, unsigned int *a3)
{
  readObject<unsigned int>(a2, a1, a3);
  readObject<unsigned char>(a2, a1 + 16, a3);
  readObject<unsigned int>(a2, a1 + 32, a3);
  readObject<unsigned short>(a2, a1 + 48, a3);
  return HuffmanDecoder<unsigned short,unsigned int>::configureIndexHelper(a1);
}

unint64_t HuffmanDecoder<unsigned short,unsigned int>::configureIndexHelper(unint64_t result)
{
  unsigned int v1;
  unint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  int v10;
  unint64_t v11;
  signed int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v1 = *(_DWORD *)(result + 8);
  if (v1)
  {
    v2 = result;
    if ((int)(v1 - 1) >= -1)
      v3 = -1;
    else
      v3 = v1 - 1;
    v4 = v3 + 1;
    while ((--v1 & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(*(_QWORD *)result + 4 * v1) & 0x1FFFFF) != 0)
      {
        v4 = v1 + 1;
        v3 = v1;
        break;
      }
    }
    v5 = (uint64_t *)(result + 72);
    v6 = *(_DWORD *)(result + 84);
    if (v6 <= 0x7FF)
      result = DgnPrimArray<unsigned int>::reallocElts(result + 72, 2048 - v6, 0);
    *(_DWORD *)(v2 + 80) = 2048;
    if ((v1 & 0x80000000) != 0)
    {
      *(_QWORD *)(v2 + 64) = 0;
      v10 = *(_DWORD *)(v2 + 8);
    }
    else
    {
      v7 = *(_QWORD *)v2;
      v8 = *(unsigned int *)(*(_QWORD *)v2 + 4 * v3);
      *(_DWORD *)(v2 + 64) = (v8 & 0xFFE00000) + 0x200000;
      *(_DWORD *)(v2 + 68) = v3;
      for (i = (v8 >> 21) + 1; ; ++i)
      {
        v10 = *(_DWORD *)(v2 + 8);
        v11 = v4 == v10 ? *(unsigned int *)(v2 + 80) : (unint64_t)*(unsigned int *)(v7 + 4 * v4) >> 21;
        if (i >= v11)
          break;
        *(_DWORD *)(*v5 + 4 * i) = v3;
      }
    }
    v12 = v10 - 1;
    if (v3 < v10 - 1)
    {
      v13 = *(_QWORD *)v2;
      if ((int)v4 < v12)
      {
        LODWORD(v14) = *(_DWORD *)(v13 + 4 * v4);
        do
        {
          v15 = v14 >> 21;
          v16 = v4 + 1;
          LODWORD(v14) = *(_DWORD *)(v13 + 4 * v16);
          if (v15 < v14 >> 21)
          {
            v17 = *v5;
            do
            {
              *(_DWORD *)(v17 + 4 * v15++) = v4;
              v14 = *(unsigned int *)(v13 + 4 * v16);
            }
            while (v15 < v14 >> 21);
            v10 = *(_DWORD *)(v2 + 8);
          }
          v12 = v10 - 1;
          ++v4;
        }
        while ((int)v16 < v10 - 1);
      }
      v18 = (unint64_t)*(unsigned int *)(v13 + 4 * v12) >> 21;
      if (v18 < *(_DWORD *)(v2 + 80))
      {
        v19 = *v5;
        do
          *(_DWORD *)(v19 + 4 * v18++) = *(_DWORD *)(v2 + 8) - 1;
        while (v18 < *(unsigned int *)(v2 + 80));
      }
    }
  }
  return result;
}

unint64_t DgnArray<DiskNgramContext>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 56 * v6, 56 * v5, 56 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x38;
  *(_QWORD *)a1 = v8;
  return result;
}

uint64_t Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::add(uint64_t result, unsigned __int16 *a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  _QWORD *v13;
  _QWORD *v14;

  v5 = result;
  v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1)
    result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  v7 = *a2;
  v8 = *(_DWORD *)(v5 + 16);
  if (v8)
    v9 = (-1640531527 * v7) >> -(char)v8;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v5 + 80);
  v11 = *(_QWORD *)(v5 + 32);
  if (!v11)
  {
    result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    v11 = *(_QWORD *)(v5 + 32);
  }
  v12 = *a2;
  v13 = (_QWORD *)(v10 + 8 * v9);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)v11;
  *(_WORD *)(v11 + 12) = v12;
  *(_QWORD *)(v11 + 16) = *a3;
  *(_DWORD *)(v11 + 8) = v7;
  ++*(_DWORD *)(v5 + 8);
  if (*(_BYTE *)(v5 + 20))
  {
    *(_QWORD *)v11 = *v13;
  }
  else
  {
    *(_QWORD *)v11 = 0;
    v14 = (_QWORD *)*v13;
    if (*v13)
    {
      do
      {
        v13 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
  *v13 = v11;
  return result;
}

uint64_t **Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::findBucket(uint64_t a1, unsigned __int16 *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t **result;
  uint64_t *v6;
  uint64_t **v7;

  v2 = *a2;
  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
    v4 = (-1640531527 * v2) >> -(char)v3;
  else
    v4 = 0;
  result = (uint64_t **)(*(_QWORD *)(a1 + 80) + 8 * v4);
  v6 = *result;
  if (*result)
  {
    do
    {
      v7 = (uint64_t **)v6;
      if (*((_DWORD *)v6 + 2) == v2 && *((unsigned __int16 *)v6 + 6) == v2)
        break;
      v6 = (uint64_t *)*v6;
      result = v7;
    }
    while (*v7);
  }
  return result;
}

unint64_t HuffmanDecoder<unsigned short,unsigned int>::initializeTable(unint64_t result, int a2, unsigned int a3)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;

  v4 = result;
  v5 = (a2 + 1);
  v6 = *(_DWORD *)(result + 12);
  if (v5 > v6)
    result = DgnPrimArray<unsigned int>::reallocElts(result, v5 - v6, 0);
  if (*(_DWORD *)(v4 + 28) < v5)
  {
    v9 = 0;
    result = realloc_array(*(_QWORD **)(v4 + 16), &v9, v5, *(unsigned int *)(v4 + 24), *(unsigned int *)(v4 + 24), 1);
    *(_DWORD *)(v4 + 28) = result;
    *(_QWORD *)(v4 + 16) = v9;
  }
  v7 = *(_DWORD *)(v4 + 44);
  if (v5 > v7)
    result = DgnPrimArray<unsigned int>::reallocElts(v4 + 32, v5 - v7, 0);
  v8 = *(_DWORD *)(v4 + 60);
  if (a3 > v8)
    result = DgnPrimArray<short>::reallocElts(v4 + 48, a3 - v8, 0);
  *(_DWORD *)(v4 + 56) = a3;
  return result;
}

unint64_t HuffmanDecoder<unsigned short,unsigned int>::addCode(unint64_t result, int a2, char a3, int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v7 = result;
  v8 = *(_DWORD *)(result + 8);
  if (v8 == *(_DWORD *)(result + 12))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(result, 1, 1);
    v8 = *(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v7 + 4 * v8) = a2;
  ++*(_DWORD *)(v7 + 8);
  v9 = *(_DWORD *)(v7 + 24);
  if (v9 == *(_DWORD *)(v7 + 28))
  {
    result = DgnPrimArray<char>::reallocElts(v7 + 16, 1, 1);
    v9 = *(_DWORD *)(v7 + 24);
  }
  *(_BYTE *)(*(_QWORD *)(v7 + 16) + v9) = a3;
  ++*(_DWORD *)(v7 + 24);
  v10 = *(_DWORD *)(v7 + 40);
  if (v10 == *(_DWORD *)(v7 + 44))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(v7 + 32, 1, 1);
    v10 = *(_DWORD *)(v7 + 40);
  }
  *(_DWORD *)(*(_QWORD *)(v7 + 32) + 4 * v10) = a4;
  ++*(_DWORD *)(v7 + 40);
  return result;
}

uint64_t HuffmanEncoder<unsigned short,unsigned int>::countsToLengths(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;

  HuffmanEncoder<unsigned short,unsigned int>::sortElements(a1);
  v4 = *(_DWORD *)(a1 + 128);
  v5 = *(_QWORD **)(a1 + 120);
  v6 = *v5;
  *(_DWORD *)(*v5 + 4) += *(_DWORD *)(v5[1] + 4);
  v7 = v4 - 1;
  if (v7 > 1)
  {
    v8 = v5[2];
    v9 = 1;
    v10 = 3;
    v11 = 1;
    while (1)
    {
      v12 = v5[v9];
      v13 = *(_DWORD *)(v6 + 4);
      if (v10 < v4 && (v14 = *(_DWORD *)(v8 + 4), v13 >= v14))
      {
        *(_DWORD *)(v12 + 4) = v14;
        v8 = v5[v10++];
      }
      else
      {
        *(_DWORD *)(v12 + 4) = v13;
        *(_DWORD *)(v6 + 4) = v9;
        v6 = v5[v11++];
      }
      if (v10 >= v4)
      {
        v15 = *(_DWORD *)(v6 + 4);
      }
      else
      {
        if (v9 <= v11 - 1)
        {
          v16 = *(_DWORD *)(v8 + 4);
LABEL_14:
          *(_DWORD *)(v12 + 4) += v16;
          v8 = v5[v10++];
          goto LABEL_15;
        }
        v15 = *(_DWORD *)(v6 + 4);
        v16 = *(_DWORD *)(v8 + 4);
        if (v15 >= v16)
          goto LABEL_14;
      }
      *(_DWORD *)(v12 + 4) += v15;
      *(_DWORD *)(v6 + 4) = v9;
      v6 = v5[v11++];
LABEL_15:
      if (v7 == ++v9)
      {
        v17 = v4 - 2;
        *(_DWORD *)(v5[v4 - 2] + 4) = 0;
        if ((int)(v4 - 3) >= 0)
        {
          v18 = v4 - 3;
          do
          {
            *(_DWORD *)(v5[v18] + 4) = *(_DWORD *)(v5[*(unsigned int *)(v5[v18] + 4)] + 4) + 1;
            --v18;
          }
          while (v18 != -1);
        }
        goto LABEL_21;
      }
    }
  }
  v17 = v4 - 2;
  *(_DWORD *)(v5[v4 - 2] + 4) = 0;
LABEL_21:
  if (*(_DWORD *)a1 < 3u)
  {
    v21 = 1;
  }
  else
  {
    v19 = 2;
    v20 = 1;
    v21 = 1;
    do
    {
      ++v21;
      v22 = v19 + 1;
      v19 += v20;
      v20 = v22;
    }
    while (*(_DWORD *)a1 > v19);
  }
  if (v4 >= v21)
    v4 = v21;
  v23 = v4 + 1;
  v24 = *(_DWORD *)(a2 + 12);
  if (v23 > v24)
    DgnPrimArray<unsigned int>::reallocElts(a2, v23 - v24, 0);
  v25 = 0;
  *(_DWORD *)(a2 + 8) = v23;
  v26 = *(_QWORD *)a2;
  v27 = 1;
  do
  {
    v28 = v25;
    if ((v17 & 0x80000000) != 0)
    {
      v30 = 0;
    }
    else
    {
      v29 = 0;
      v30 = v17 + 1;
      while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v17) + 4) == (_DWORD)v25)
      {
        ++v29;
        --v17;
        if (v30 == v29)
        {
          v17 = -1;
          goto LABEL_38;
        }
      }
      v30 = v29;
    }
LABEL_38:
    *(_DWORD *)(v26 + 4 * v25) = v27 - v30;
    if (v27 > v30)
    {
      v31 = *(_QWORD *)(a1 + 120);
      do
      {
        *(_DWORD *)(*(_QWORD *)(v31 + 8 * v7) + 4) = v25;
        LODWORD(v7) = v7 - 1;
        --v27;
      }
      while (v27 > v30);
    }
    v27 = 2 * v30;
    v25 = (v25 + 1);
  }
  while (2 * v30);
  v32 = *(_DWORD *)(a2 + 12);
  if (v25 > v32)
    DgnPrimArray<unsigned int>::reallocElts(a2, v25 - v32, 0);
  *(_DWORD *)(a2 + 8) = v25;
  return v28;
}

uint64_t Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218C48;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 14;
  else
    v7 = 22;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20999ED64(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::~Hash(uint64_t a1)
{
  Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218C48;
  if (*(_DWORD *)(a1 + 8))
    Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t HuffmanEncoder<unsigned short,unsigned int>::~HuffmanEncoder(uint64_t a1)
{
  DgnIOwnArray<PelSegment *>::releaseAll(a1 + 120);
  Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::~Hash(a1 + 8);
  return a1;
}

uint64_t DiskNgramContext::operator=(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = *(_QWORD *)a2;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(result + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(result + 34) = *(_BYTE *)(a2 + 34);
  v2 = *(unsigned __int8 *)(a2 + 34);
  if (v2 == 4 || v2 == 3)
  {
    *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  }
  else if (v2 == 2)
  {
    *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  }
  return result;
}

uint64_t Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218AB8;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 28;
  else
    v7 = 32;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20999EF60(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::~Hash(uint64_t a1)
{
  Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218AB8;
  if (*(_DWORD *)(a1 + 8))
    Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t (*v7)(char *);
  uint64_t (*v8)(char *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = *(char **)v5;
          v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7)
            result = v7(v5 + 12);
          v8 = *(uint64_t (**)(char *))(v1 + 104);
          if (v8)
            result = v8(v5 + 28);
          *(_QWORD *)v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;

  v2 = *a2;
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = v2 - 1;
    do
    {
      HIDWORD(v5) = v3;
      LODWORD(v5) = v3;
      v3 = a2[v4 + 1] + (v5 >> 19);
    }
    while ((unint64_t)v4--);
  }
  else
  {
    v3 = 0;
  }
  v7 = *(_DWORD *)(a1 + 16);
  if (v7)
    v8 = (-1640531527 * v3) >> -(char)v7;
  else
    v8 = 0;
  v9 = *(_QWORD *)(a1 + 80) + 8 * v8;
  v10 = *(_QWORD *)v9;
  if (!*(_QWORD *)v9)
    return v9;
  while (1)
  {
    result = v9;
    v9 = v10;
    if (*(_DWORD *)(v10 + 8) == v3)
    {
      v12 = *(unsigned int *)(v10 + 12);
      if (!(_DWORD)v12)
        return result;
      if (*(_DWORD *)(v9 + 16) == a2[1])
        break;
    }
LABEL_17:
    v10 = *(_QWORD *)v9;
    result = v9;
    if (!*(_QWORD *)v9)
      return result;
  }
  v13 = 0;
  while (v12 - 1 != v13)
  {
    v14 = *(_DWORD *)(v9 + 20 + 4 * v13);
    v15 = a2[v13++ + 2];
    if (v14 != v15)
    {
      if (v13 >= v12)
        return result;
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218A68;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 32;
  else
    v7 = 36;
  *(_DWORD *)(a1 + 24) = 48;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20999F218(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::~Hash(uint64_t a1)
{
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218A68;
  if (*(_DWORD *)(a1 + 8))
    Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t (*v7)(char *);
  uint64_t (*v8)(_QWORD *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = *(char **)v5;
          v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7)
            result = v7(v5 + 12);
          v8 = *(uint64_t (**)(_QWORD *))(v1 + 104);
          if (v8)
            result = v8((_QWORD *)v5 + 4);
          *(_QWORD *)v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218A90;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 28;
  else
    v7 = 32;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20999F3EC(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::~Hash(uint64_t a1)
{
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218A90;
  if (*(_DWORD *)(a1 + 8))
    Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

void OUTLINED_FUNCTION_0_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  errThrowInternal(0, a2, 8810, a4, 6, a6, a7, a8, a9);
}

uint64_t MiniFst::init(uint64_t this, const ArcGraph *a2, PelScoreCache *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v3 = this;
  *(_QWORD *)(this + 80) = a2;
  *(_QWORD *)(this + 88) = a3;
  v4 = *((unsigned int *)a2 + 40);
  v5 = v4 + 1;
  v6 = *(_DWORD *)(this + 44);
  if ((int)v4 + 1 > v6)
    this = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(this + 32, (_DWORD)v4 + 1 - v6, 0);
  *(_DWORD *)(v3 + 40) = v5;
  v7 = *(_DWORD *)(v3 + 60);
  if (v5 > v7)
    this = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v3 + 48, v5 - v7, 0);
  *(_DWORD *)(v3 + 56) = v5;
  *(_DWORD *)(v3 + 96) = 1;
  v8 = *(_DWORD *)(v3 + 76);
  if (v4 > v8)
  {
    DgnPrimArray<unsigned int>::reallocElts(v3 + 64, v4 - v8, 0);
    *(_DWORD *)(v3 + 72) = v4;
LABEL_8:
    this = (uint64_t)memset(*(void **)(v3 + 64), 255, 4 * v4);
    goto LABEL_9;
  }
  *(_DWORD *)(v3 + 72) = v4;
  if ((_DWORD)v4)
    goto LABEL_8;
LABEL_9:
  *(_DWORD *)(v3 + 96) = 0;
  return this;
}

uint64_t MiniFst::beginTopFstSyncRecog(uint64_t this)
{
  *(_DWORD *)(this + 96) = 0;
  **(_DWORD **)(this + 32) = 5000;
  return this;
}

uint64_t MiniFst::seed(uint64_t this, int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  int v6;

  v5 = *(_QWORD *)(this + 32);
  if (*(_DWORD *)v5 > a2)
  {
    *(_DWORD *)(v5 + 8) = -2 - a4;
    *(_WORD *)(v5 + 12) = 0;
    v6 = *(_DWORD *)(*(_QWORD *)(this + 80) + 144);
    *(_DWORD *)v5 = a2;
    *(_DWORD *)(v5 + 4) = v6;
    *(_DWORD *)(v5 + 16) = 0;
    *(_DWORD *)(v5 + 20) = a3;
    *(_DWORD *)(v5 + 24) = a5;
    if (!*(_DWORD *)(this + 96))
      *(_DWORD *)(this + 96) = 1;
  }
  return this;
}

char *MiniFst::updateFrame(char *this, int *a2, int a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  int *v56;
  int v57;
  _DWORD *v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;

  *((_DWORD *)this + 26) = -1;
  v4 = *((_DWORD *)this + 24);
  if (!v4)
    return this;
  v5 = (uint64_t)this;
  *((_DWORD *)this + 25) = a4;
  v6 = **((_DWORD **)this + 4);
  if (v4 <= (v6 > 4999))
  {
    LODWORD(v10) = 1;
    goto LABEL_55;
  }
  v7 = a3;
  v9 = v6 > 4999;
  v10 = 1;
  do
  {
    v11 = *(_QWORD *)(v5 + 32);
    v12 = *(unsigned int *)(v11 + 28 * v9 + 4);
    if (*(_DWORD *)(*(_QWORD *)(v5 + 80) + 140) > (int)v12)
    {
      this = (char *)PelScoreCache::getScoreNoBackoff(*(PelScoreCache **)(v5 + 88), *(unsigned __int16 *)(v11 + 28 * v9 + 12));
      v13 = *(_QWORD *)(v5 + 32) + 28 * v9;
      v14 = *(_DWORD *)v13 + (_DWORD)this;
      if (v14 - v7 <= *a2)
      {
        if (*a2 > v14)
          *a2 = v14;
        v15 = *(_QWORD *)(v5 + 64);
        v16 = *(_DWORD *)(v15 + 4 * v12);
        v17 = *(_QWORD *)(v5 + 48);
        if (v16 == -1)
        {
          *(_DWORD *)(v15 + 4 * v12) = v10;
          if (!v17)
          {
            v10 = (v10 + 1);
            v7 = a3;
            goto LABEL_16;
          }
          v18 = v17 + 28 * v10;
          v10 = (v10 + 1);
          v7 = a3;
        }
        else
        {
          v18 = v17 + 28 * v16;
          v7 = a3;
          if (v14 >= *(_DWORD *)v18)
            goto LABEL_16;
        }
        v19 = *(_OWORD *)(v13 + 12);
        *(_OWORD *)v18 = *(_OWORD *)v13;
        *(_OWORD *)(v18 + 12) = v19;
        *(_DWORD *)v18 = v14;
        goto LABEL_16;
      }
      v7 = a3;
    }
    do
    {
LABEL_16:
      v20 = *(_QWORD *)(v5 + 80);
      v21 = *(_QWORD *)(v20 + 152);
      v22 = *(_DWORD *)(v21 + 4 * v12);
      LODWORD(v21) = *(_DWORD *)(v21 + 4 * (v12 + 1));
      v23 = v21 & 0xFFFFFFF;
      if (*(_DWORD *)(v20 + 140) > (v21 & 0xFFFFFFF))
      {
        v24 = (v22 >> 20) & 0x3FF;
        this = (char *)PelScoreCache::getScoreNoBackoff(*(PelScoreCache **)(v5 + 88), (unsigned __int16)v22);
        v25 = *(_QWORD *)(v5 + 32);
        v26 = (_DWORD)this + v24 + *(_DWORD *)(v25 + 28 * v9);
        if (v26 - v7 <= *a2)
        {
          if (*a2 > v26)
            *a2 = v26;
          v27 = *(_QWORD *)(v5 + 64);
          v28 = *(_DWORD *)(v27 + 4 * v23);
          v29 = *(_QWORD *)(v5 + 48);
          if (v28 == -1)
          {
            *(_DWORD *)(v27 + 4 * v23) = v10;
            if (v29)
            {
              v30 = v29 + 28 * v10;
              v10 = (v10 + 1);
LABEL_25:
              *(_DWORD *)v30 = v26;
              *(_DWORD *)(v30 + 4) = v23;
              v31 = v25 + 28 * v9;
              *(_DWORD *)(v30 + 8) = *(_DWORD *)(v31 + 8);
              *(_WORD *)(v30 + 12) = v22;
              *(_DWORD *)(v30 + 16) = *(_DWORD *)(v31 + 16) + v24;
              *(_QWORD *)(v30 + 20) = *(_QWORD *)(v31 + 20);
              goto LABEL_27;
            }
            v10 = (v10 + 1);
          }
          else
          {
            v30 = v29 + 28 * v28;
            if (v26 < *(_DWORD *)v30)
              goto LABEL_25;
          }
        }
      }
LABEL_27:
      LODWORD(v12) = v12 + 2;
    }
    while ((v22 & 0x80000000) == 0);
    ++v9;
  }
  while (v9 < *(unsigned int *)(v5 + 96));
  if (v10 >= 2)
  {
    v32 = *(_QWORD *)(v5 + 48);
    v33 = *(_QWORD *)(v5 + 80);
    v34 = 1;
    while (1)
    {
      v35 = *(unsigned int *)(v32 + 28 * v34 + 4);
      if ((*(_DWORD *)(*(_QWORD *)(v33 + 152) + 4 * v35) & 0x40000000) != 0)
        break;
LABEL_32:
      if (++v34 >= (unint64_t)v10)
      {
        if (v10 >= 2)
        {
          v69 = 0;
          do
          {
            v70 = *(_QWORD *)(v5 + 48) + v69;
            v71 = *(unsigned int *)(v70 + 32);
            v72 = *(_QWORD *)(v5 + 32) + v69;
            v73 = *(_OWORD *)(v70 + 28);
            *(_OWORD *)(v72 + 40) = *(_OWORD *)(v70 + 40);
            *(_OWORD *)(v72 + 28) = v73;
            *(_DWORD *)(*(_QWORD *)(v5 + 64) + 4 * v71) = -1;
            v69 += 28;
          }
          while (28 * v10 - 28 != v69);
        }
        goto LABEL_55;
      }
    }
    while (2)
    {
      v36 = *(_QWORD *)(v33 + 152);
      v37 = *(_DWORD *)(v36 + 4 * v35);
      v38 = *(_DWORD *)(v36 + 4 * (v35 + 1)) & 0xFFFFFFF;
      if (*(_DWORD *)(v33 + 140) <= (int)v38)
      {
        v39 = v7;
        v40 = v10;
        v41 = (v37 >> 20) & 0x3FF;
        v42 = *(_DWORD *)(v32 + 28 * v34) + v41;
        if ((v37 & 0xFFFFF) <= 0xFFFF3)
          v43 = v37 & 0xFFFFF;
        else
          v43 = v37 & 0xFFFFF | 0xF00000;
        if (v42 - v39 > *a2)
          goto LABEL_49;
        if (*a2 > v42)
          *a2 = v42;
        v44 = *(_DWORD *)(v5 + 8);
        if (v44 == *(_DWORD *)(v5 + 12))
        {
          this = (char *)DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(v5, 1, 1);
          v44 = *(_DWORD *)(v5 + 8);
        }
        *(_DWORD *)(v5 + 8) = v44 + 1;
        v45 = *(_QWORD *)v5;
        if (*(_DWORD *)(v5 + 104) == -1)
          *(_DWORD *)(v5 + 104) = v44 + 1;
        v46 = v44;
        v47 = v45 + 36 * v44;
        v48 = (_OWORD *)(*(_QWORD *)(v5 + 48) + 28 * v34);
        v49 = *(_OWORD *)((char *)v48 + 12);
        *(_OWORD *)v47 = *v48;
        *(_OWORD *)(v47 + 12) = v49;
        *(_DWORD *)v47 = v42;
        v50 = *(_DWORD *)(v47 + 16) + v41;
        v32 = *(_QWORD *)(v5 + 48);
        v51 = v43 + 2 * *(_DWORD *)(v32 + 28 * v34 + 20);
        *(_DWORD *)(v47 + 16) = v50;
        *(_DWORD *)(v47 + 20) = v51;
        v52 = v45 + 36 * v46;
        v53 = *(_DWORD *)(v5 + 100);
        *(_DWORD *)(v52 + 28) = v43;
        *(_DWORD *)(v52 + 32) = v53;
        v33 = *(_QWORD *)(v5 + 80);
        if (*(_DWORD *)(v33 + 160) == (_DWORD)v38)
          goto LABEL_49;
        v54 = *(_QWORD *)(v5 + 64);
        v55 = *(_DWORD *)(v54 + 4 * v38);
        if (v55 == -1)
        {
          *(_DWORD *)(v54 + 4 * v38) = v40;
          v56 = (int *)(v32 + 28 * v40);
          v10 = (v40 + 1);
          v50 = *(_DWORD *)(v47 + 16);
          v51 = *(_DWORD *)(v47 + 20);
LABEL_53:
          v7 = a3;
          *v56 = v42;
          v56[1] = v38;
          v56[2] = *(_DWORD *)(v5 + 8) - 1;
          v56[4] = v50;
          v56[5] = v51;
          v56[6] = *(_DWORD *)(v32 + 28 * v34 + 24);
        }
        else
        {
          v56 = (int *)(v32 + 28 * v55);
          if (v42 < *v56)
          {
            v10 = v40;
            goto LABEL_53;
          }
LABEL_49:
          v10 = v40;
          v7 = a3;
        }
      }
      LODWORD(v35) = v35 + 2;
      if ((v37 & 0x80000000) != 0)
        goto LABEL_32;
      continue;
    }
  }
LABEL_55:
  *(_DWORD *)(v5 + 96) = v10;
  v57 = *(_DWORD *)(*(_QWORD *)(v5 + 80) + 144);
  v58 = *(_DWORD **)(v5 + 32);
  *v58 = 5000;
  v58[1] = v57;
  v59 = *(_DWORD *)(v5 + 104);
  if (v59 != -1)
  {
    v60 = *(_DWORD *)(v5 + 8);
    v61 = (v60 - v59);
    v62 = *(_DWORD *)(v5 + 28);
    if (v61 > v62)
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(v5 + 16, v61 - v62, 0);
    *(_DWORD *)(v5 + 24) = v61;
    if (v60 != v59)
    {
      v63 = 0;
      v64 = 0;
      do
      {
        v65 = *(_QWORD *)v5 + 36 * (v64 + *(_DWORD *)(v5 + 104));
        v66 = *(_QWORD *)(v5 + 16) + v63;
        v67 = *(_OWORD *)v65;
        v68 = *(_OWORD *)(v65 + 16);
        *(_DWORD *)(v66 + 32) = *(_DWORD *)(v65 + 32);
        *(_OWORD *)v66 = v67;
        *(_OWORD *)(v66 + 16) = v68;
        ++v64;
        v63 += 36;
      }
      while (v61 != v64);
      LODWORD(v61) = *(_DWORD *)(v5 + 24);
    }
    return mrec_qsort_r<MiniFst::Trace>(*(char **)(v5 + 16), v61, 36);
  }
  return this;
}

char *mrec_qsort_r<MiniFst::Trace>(char *result, unint64_t a2, int64_t a3)
{
  int64_t v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  BOOL v18;
  char *v19;
  int v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  BOOL v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  BOOL v43;
  int v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  char *v50;
  char v51;
  int v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int64_t v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char v85;
  BOOL v86;
  int64_t v87;
  int64_t v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  int64_t v92;
  char v93;
  char *v94;
  char *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  _DWORD *v107;
  _DWORD *v108;
  _DWORD *v109;
  _DWORD *v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;

  v4 = -a3;
  v5 = a3 != 8;
  v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0)
    v7 = 2;
  else
    v7 = a3 != 8;
  if (a2 < 7)
  {
LABEL_167:
    if ((uint64_t)(a2 * a3) > a3)
    {
      v94 = &result[a2 * a3];
      v95 = &result[a3];
      v96 = result;
      do
      {
        if (v95 > result)
        {
          v97 = v96;
          v98 = v95;
          do
          {
            v99 = v98;
            v98 = (_DWORD *)((char *)v98 + v4);
            v100 = v98[8];
            v101 = v99[8];
            if (v100 == v101)
            {
              if (*v98 <= *v99)
                break;
            }
            else if (v100 < v101)
            {
              break;
            }
            if (v7)
            {
              v102 = 0;
              v103 = (uint64_t)v97 + a3;
              if (v6)
              {
                do
                {
                  v104 = *(_QWORD *)(v103 + 8 * v102);
                  *(_QWORD *)(v103 + 8 * v102) = *(_QWORD *)&v97[2 * v102];
                  *(_QWORD *)&v97[2 * v102++] = v104;
                }
                while ((unint64_t)a3 >> 3 != v102);
              }
              else
              {
                do
                {
                  v105 = *(_BYTE *)(v103 + v102);
                  *(_BYTE *)(v103 + v102) = *((_BYTE *)v97 + v102);
                  *((_BYTE *)v97 + v102++) = v105;
                }
                while (a3 != v102);
              }
            }
            else
            {
              v106 = *(_QWORD *)v99;
              *(_QWORD *)v99 = *(_QWORD *)v98;
              *(_QWORD *)v98 = v106;
            }
            v97 = (_DWORD *)((char *)v97 + v4);
          }
          while (v98 > (_DWORD *)result);
        }
        v95 += a3;
        v96 = (_DWORD *)((char *)v96 + a3);
      }
      while (v95 < v94);
    }
    return result;
  }
  v8 = (unint64_t)a3 >> 3;
  while (2)
  {
    v9 = &result[(a2 >> 1) * a3];
    if (a2 == 7)
      goto LABEL_93;
    v10 = &result[(a2 - 1) * a3];
    if (a2 < 0x29)
    {
      v12 = result;
LABEL_19:
      v19 = &result[(a2 - 1) * a3];
      goto LABEL_72;
    }
    v11 = (a2 >> 3) * a3;
    v12 = &result[v11];
    v13 = &result[2 * v11];
    v14 = *((_DWORD *)result + 8);
    v15 = *(_DWORD *)&result[v11 + 32];
    v16 = v14 < v15;
    if (v14 == v15)
      v16 = *(_DWORD *)result < *(_DWORD *)v12;
    if (!v16)
    {
      v20 = *((_DWORD *)v13 + 8);
      if (v15 == v20)
      {
        if (*(_DWORD *)v12 > *(_DWORD *)v13)
          goto LABEL_31;
      }
      else if (v15 >= v20)
      {
        goto LABEL_31;
      }
      if (v14 == v20)
      {
        v12 = result;
        if (*(_DWORD *)result < *(_DWORD *)v13)
          goto LABEL_31;
      }
      else
      {
        v12 = result;
        if (v14 < v20)
          goto LABEL_31;
      }
      v12 = &result[2 * v11];
      goto LABEL_31;
    }
    v17 = *((_DWORD *)v13 + 8);
    v18 = v15 < v17;
    if (v15 == v17)
      v18 = *(_DWORD *)v12 < *(_DWORD *)v13;
    if (!v18)
    {
      if (v14 == v17)
      {
        v12 = &result[2 * v11];
        if (*(_DWORD *)result < *(_DWORD *)v13)
          goto LABEL_31;
      }
      else
      {
        v12 = &result[2 * v11];
        if (v14 < v17)
          goto LABEL_31;
      }
      v12 = result;
    }
LABEL_31:
    v21 = &v9[-v11];
    v22 = &v9[v11];
    v23 = *(_DWORD *)&v9[-v11 + 32];
    v24 = *((_DWORD *)v9 + 8);
    v25 = v23 < v24;
    if (v23 == v24)
      v25 = *(_DWORD *)v21 < *(_DWORD *)v9;
    if (!v25)
    {
      v28 = *((_DWORD *)v22 + 8);
      if (v24 == v28)
      {
        if (*(_DWORD *)v9 > *(_DWORD *)v22)
          goto LABEL_52;
      }
      else if (v24 >= v28)
      {
        goto LABEL_52;
      }
      if (v23 == v28)
      {
        v9 -= v11;
        if (*(_DWORD *)v21 < *(_DWORD *)v22)
          goto LABEL_52;
      }
      else
      {
        v9 -= v11;
        if (v23 < v28)
          goto LABEL_52;
      }
      v9 = v22;
      goto LABEL_52;
    }
    v26 = *((_DWORD *)v22 + 8);
    v27 = v24 < v26;
    if (v24 == v26)
      v27 = *(_DWORD *)v9 < *(_DWORD *)v22;
    if (!v27)
    {
      if (v23 == v26)
      {
        v9 += v11;
        if (*(_DWORD *)v21 < *(_DWORD *)v22)
          goto LABEL_52;
      }
      else
      {
        v9 += v11;
        if (v23 < v26)
          goto LABEL_52;
      }
      v9 = v21;
    }
LABEL_52:
    v29 = -(uint64_t)v11;
    v19 = &v10[-2 * v11];
    v30 = &v10[v29];
    v31 = *((_DWORD *)v19 + 8);
    v32 = *((_DWORD *)v30 + 8);
    v33 = v31 < v32;
    if (v31 == v32)
      v33 = *(_DWORD *)v19 < *(_DWORD *)v30;
    if (v33)
    {
      v34 = *((_DWORD *)v10 + 8);
      v35 = v32 < v34;
      if (v32 == v34)
        v35 = *(_DWORD *)v30 < *(_DWORD *)v10;
      if (!v35)
      {
        v36 = v31 < v34;
        if (v31 == v34)
          v36 = *(_DWORD *)v19 < *(_DWORD *)v10;
        if (v36)
          goto LABEL_19;
        goto LABEL_72;
      }
      goto LABEL_71;
    }
    v37 = *((_DWORD *)v10 + 8);
    if (v32 == v37)
    {
      if (*(_DWORD *)v30 <= *(_DWORD *)v10)
        goto LABEL_65;
LABEL_71:
      v19 = v30;
      goto LABEL_72;
    }
    if (v32 >= v37)
      goto LABEL_71;
LABEL_65:
    v38 = v31 < v37;
    if (v31 == v37)
      v38 = *(_DWORD *)v19 < *(_DWORD *)v10;
    if (!v38)
      goto LABEL_19;
LABEL_72:
    v39 = *((_DWORD *)v12 + 8);
    v40 = *((_DWORD *)v9 + 8);
    v41 = v39 < v40;
    if (v39 == v40)
      v41 = *(_DWORD *)v12 < *(_DWORD *)v9;
    if (v41)
    {
      v42 = *((_DWORD *)v19 + 8);
      v43 = v40 < v42;
      if (v40 == v42)
        v43 = *(_DWORD *)v9 < *(_DWORD *)v19;
      if (v43)
        goto LABEL_93;
      if (v39 == v42)
      {
        v9 = v19;
        if (*(_DWORD *)v12 < *(_DWORD *)v19)
          goto LABEL_93;
      }
      else
      {
        v9 = v19;
        if (v39 < v42)
          goto LABEL_93;
      }
      v9 = v12;
      goto LABEL_93;
    }
    v44 = *((_DWORD *)v19 + 8);
    if (v40 == v44)
    {
      if (*(_DWORD *)v9 > *(_DWORD *)v19)
        goto LABEL_93;
    }
    else if (v40 >= v44)
    {
      goto LABEL_93;
    }
    if (v39 == v44)
    {
      v9 = v12;
      if (*(_DWORD *)v12 < *(_DWORD *)v19)
        goto LABEL_93;
      goto LABEL_92;
    }
    v9 = v12;
    if (v39 >= v44)
LABEL_92:
      v9 = v19;
LABEL_93:
    if (v7)
    {
      if (v6)
      {
        v45 = result;
        v46 = (unint64_t)a3 >> 3;
        do
        {
          v47 = *(_QWORD *)v45;
          *(_QWORD *)v45 = *(_QWORD *)v9;
          v45 += 8;
          *(_QWORD *)v9 = v47;
          v9 += 8;
          --v46;
        }
        while (v46);
      }
      else
      {
        v49 = a3;
        v50 = result;
        do
        {
          v51 = *v50;
          *v50++ = *v9;
          *v9++ = v51;
          --v49;
        }
        while (v49);
      }
    }
    else
    {
      v48 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)v9;
      *(_QWORD *)v9 = v48;
    }
    v52 = 0;
    v53 = &result[a3];
    v54 = &result[(a2 - 1) * a3];
    v55 = v54;
    v56 = &result[a3];
    v57 = &result[a3];
    while (1)
    {
LABEL_102:
      if (v56 > v55)
        goto LABEL_116;
      v58 = *((_DWORD *)v56 + 8);
      v59 = *((_DWORD *)result + 8);
      v60 = v58 < v59;
      if (v58 != v59)
        break;
      v60 = *(_DWORD *)v56 < *(_DWORD *)result;
      if (*(_DWORD *)v56 != *(_DWORD *)result)
        break;
      if (v7)
      {
        v61 = 0;
        if (v6)
        {
          do
          {
            v62 = *(_QWORD *)&v57[8 * v61];
            *(_QWORD *)&v57[8 * v61] = *(_QWORD *)&v56[8 * v61];
            *(_QWORD *)&v56[8 * v61++] = v62;
          }
          while (v8 != v61);
        }
        else
        {
          do
          {
            v63 = v57[v61];
            v57[v61] = v56[v61];
            v56[v61++] = v63;
          }
          while (a3 != v61);
        }
      }
      else
      {
        v74 = *(_QWORD *)v57;
        *(_QWORD *)v57 = *(_QWORD *)v56;
        *(_QWORD *)v56 = v74;
      }
      v57 += a3;
      v52 = 1;
LABEL_135:
      v56 += a3;
    }
    if (v60)
      goto LABEL_135;
LABEL_116:
    while (v56 <= v55)
    {
      v65 = *((_DWORD *)v55 + 8);
      v66 = *((_DWORD *)result + 8);
      v67 = v65 < v66;
      if (v65 == v66 && (v67 = *(_DWORD *)v55 < *(_DWORD *)result, *(_DWORD *)v55 == *(_DWORD *)result))
      {
        if (v7)
        {
          v68 = 0;
          if (v6)
          {
            do
            {
              v69 = *(_QWORD *)&v55[8 * v68];
              *(_QWORD *)&v55[8 * v68] = *(_QWORD *)&v54[8 * v68];
              *(_QWORD *)&v54[8 * v68++] = v69;
            }
            while (v8 != v68);
          }
          else
          {
            do
            {
              v70 = v55[v68];
              v55[v68] = v54[v68];
              v54[v68++] = v70;
            }
            while (a3 != v68);
          }
        }
        else
        {
          v64 = *(_QWORD *)v55;
          *(_QWORD *)v55 = *(_QWORD *)v54;
          *(_QWORD *)v54 = v64;
        }
        v54 += v4;
        v52 = 1;
      }
      else if (v67)
      {
        if (v7)
        {
          v71 = 0;
          if (v6)
          {
            do
            {
              v72 = *(_QWORD *)&v56[8 * v71];
              *(_QWORD *)&v56[8 * v71] = *(_QWORD *)&v55[8 * v71];
              *(_QWORD *)&v55[8 * v71++] = v72;
            }
            while (v8 != v71);
          }
          else
          {
            do
            {
              v73 = v56[v71];
              v56[v71] = v55[v71];
              v55[v71++] = v73;
            }
            while (a3 != v71);
          }
        }
        else
        {
          v75 = *(_QWORD *)v56;
          *(_QWORD *)v56 = *(_QWORD *)v55;
          *(_QWORD *)v55 = v75;
        }
        v56 += a3;
        v55 += v4;
        v52 = 1;
        goto LABEL_102;
      }
      v55 += v4;
    }
    v76 = &result[a2 * a3];
    if (v52)
    {
      v77 = v56 - v57;
      if (v57 - result >= v56 - v57)
        v78 = v56 - v57;
      else
        v78 = v57 - result;
      if (v78)
      {
        if (v6)
        {
          v79 = &v56[-v78];
          v80 = v78 >> 3;
          v81 = result;
          do
          {
            v82 = *(_QWORD *)v81;
            *(_QWORD *)v81 = *(_QWORD *)v79;
            v81 += 8;
            *(_QWORD *)v79 = v82;
            v79 += 8;
            --v80;
          }
          while (v80);
        }
        else
        {
          v83 = -(uint64_t)v78;
          v84 = result;
          do
          {
            v85 = *v84;
            *v84++ = v56[v83];
            v56[v83] = v85;
            v86 = __CFADD__(v83++, 1);
          }
          while (!v86);
        }
      }
      v87 = v54 - v55;
      v88 = v76 - &v54[a3];
      if (v54 - v55 < v88)
        v88 = v54 - v55;
      if (v88)
      {
        if (v6)
        {
          v89 = &v76[-v88];
          v90 = (unint64_t)v88 >> 3;
          do
          {
            v91 = *(_QWORD *)v56;
            *(_QWORD *)v56 = *(_QWORD *)v89;
            v56 += 8;
            *(_QWORD *)v89 = v91;
            v89 += 8;
            --v90;
          }
          while (v90);
        }
        else
        {
          v92 = -v88;
          do
          {
            v93 = *v56;
            *v56++ = v76[v92];
            v76[v92] = v93;
            v86 = __CFADD__(v92++, 1);
          }
          while (!v86);
        }
      }
      if (v77 > a3)
        result = (char *)mrec_qsort_r<MiniFst::Trace>();
      if (v87 > a3)
      {
        result = &v76[-v87];
        a2 = v87 / (unint64_t)a3;
        v6 = ((((_BYTE)v76 - v87) | a3) & 7) == 0;
        if (((((_BYTE)v76 - v87) | a3) & 7) != 0)
          v7 = 2;
        else
          v7 = v5;
        if (a2 < 7)
          goto LABEL_167;
        continue;
      }
    }
    else if ((uint64_t)(a2 * a3) > a3)
    {
      v107 = result;
      do
      {
        if (v53 > result)
        {
          v108 = v107;
          v109 = v53;
          do
          {
            v110 = v109;
            v109 = (_DWORD *)((char *)v109 + v4);
            v111 = v109[8];
            v112 = v110[8];
            if (v111 == v112)
            {
              if (*v109 <= *v110)
                break;
            }
            else if (v111 < v112)
            {
              break;
            }
            if (v7)
            {
              v113 = 0;
              v114 = (uint64_t)v108 + a3;
              if (v6)
              {
                do
                {
                  v115 = *(_QWORD *)(v114 + 8 * v113);
                  *(_QWORD *)(v114 + 8 * v113) = *(_QWORD *)&v108[2 * v113];
                  *(_QWORD *)&v108[2 * v113++] = v115;
                }
                while (v8 != v113);
              }
              else
              {
                do
                {
                  v116 = *(_BYTE *)(v114 + v113);
                  *(_BYTE *)(v114 + v113) = *((_BYTE *)v108 + v113);
                  *((_BYTE *)v108 + v113++) = v116;
                }
                while (a3 != v113);
              }
            }
            else
            {
              v117 = *(_QWORD *)v110;
              *(_QWORD *)v110 = *(_QWORD *)v109;
              *(_QWORD *)v109 = v117;
            }
            v108 = (_DWORD *)((char *)v108 + v4);
          }
          while (v109 > (_DWORD *)result);
        }
        v53 += a3;
        v107 = (_DWORD *)((char *)v107 + a3);
      }
      while (v53 < v76);
    }
    return result;
  }
}

uint64_t sizeObject<MiniFst::Trace>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  if (a2 == 3)
    return 0;
  v2 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v3 = *(_DWORD *)(a1 + 8);
    v4 = 22 * v3;
    if (v3 <= 0)
      v4 = 0;
    v2 += v4;
    if (!a2)
      v2 += 22 * (*(_DWORD *)(a1 + 12) - v3);
  }
  return v2;
}

uint64_t sizeObject<MiniFst::Token>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 == 3)
    return 0;
  v2 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v3 = *(unsigned int *)(a1 + 8);
    v4 = 18 * v3;
    if ((int)v3 <= 0)
      v4 = 0;
    v2 += v4;
    if (!a2)
      v2 += 18 * (*(_DWORD *)(a1 + 12) - v3);
  }
  return v2;
}

uint64_t AcousticNet::AcousticNet(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v11;

  HmmNet::HmmNet(a1, a2, a3, a4, a5, a8);
  *(_QWORD *)v11 = off_24C2137F0;
  *(_DWORD *)(v11 + 116) = a6;
  *(_DWORD *)(v11 + 120) = a7;
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)(v11 + 128), 0);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0xFFFFFFF000000000;
  return a1;
}

void sub_2099A04F4(_Unwind_Exception *a1)
{
  HmmNet *v1;

  HmmNet::~HmmNet(v1);
  _Unwind_Resume(a1);
}

void AcousticNet::~AcousticNet(AcousticNet *this)
{
  *(_QWORD *)this = off_24C2137F0;
  BitArray::~BitArray((AcousticNet *)((char *)this + 128));
  HmmNet::~HmmNet(this);
}

uint64_t AcousticNet::sizeObject(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = HmmNet::sizeObject(a1, a2);
  v5 = PhnIndexSet::sizeObject(a1 + 32, a2);
  v6 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v6 = 8;
  if ((_DWORD)a2 == 3)
    v6 = 0;
  return v4 + 16 * ((_DWORD)a2 != 3) + v5 + v6;
}

uint64_t AcousticNet::updateSilSeedTime(uint64_t this, int a2, int a3)
{
  int v3;
  BOOL v4;
  int v5;

  v3 = *(_DWORD *)(this + 152);
  if (v3)
    v4 = a2 == 0;
  else
    v4 = 0;
  if (!v4)
  {
    if (v3)
      v5 = a3;
    else
      v5 = -16;
    *(_DWORD *)(this + 156) = v5;
  }
  return this;
}

BOOL AcousticNet::hasSilSeedTime(AcousticNet *this)
{
  return *((_DWORD *)this + 39) != -16;
}

uint64_t AcousticNet::getSilSeedTime(AcousticNet *this)
{
  return *((unsigned int *)this + 39);
}

uint64_t AcousticNet::unpackEnd(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL4 canLookupPic;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t EndDuplicatesLookup;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  int v26;
  unsigned int *v27;
  _DWORD *v28;
  unsigned int v29;
  _DWORD *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
    return AcousticNet::unpackEndTrace((uint64_t *)a1, a2, a3);
  v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 4);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (unsigned int *)(v8 + 302848);
  v10 = *(_QWORD *)(v8 + 16);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 16) + v7);
  v12 = a2[2];
  v13 = *(_DWORD *)(v8 + 302852);
  v14 = v12;
  if (v12 > v13)
  {
    DgnPrimArray<unsigned int>::reallocElts(v8 + 302840, v12 - v13, 0);
    v14 = a2[2];
    v8 = *(_QWORD *)(a1 + 8);
  }
  v15 = (unsigned int *)(v8 + 302864);
  *v9 = v12;
  v16 = v14 * v11;
  v17 = *(_DWORD *)(v8 + 302868);
  if (v16 > v17)
    DgnPrimArray<unsigned int>::reallocElts(v8 + 302856, v16 - v17, 0);
  *v15 = v16;
  v64 = 0;
  canLookupPic = PicMgr::canLookupPic(v10, *(unsigned __int16 **)a2);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = (_QWORD *)(v19 + 302840);
  v21 = (uint64_t *)(v19 + 302856);
  if (canLookupPic)
  {
    EndDuplicatesLookup = PicMgr::getEndDuplicatesLookup(v10, a2, v20, v21, v19 + 302544, v19 + 302560);
  }
  else
  {
    EndDuplicatesLookup = PicMgr::getEndDuplicatesSearch(v10, (uint64_t *)a2, v20, v21, &v64, v19 + 302560);
    v23 = *(_QWORD *)(a1 + 8) + 302668;
    *(_DWORD *)v23 += v16;
    *(_QWORD *)(v23 + 4) += v64;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, v7, EndDuplicatesLookup);
  v24 = a2[2];
  v25 = (_DWORD *)(*(_QWORD *)(a1 + 8) + 302656);
  v26 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 302660) + EndDuplicatesLookup;
  *v25 += v24;
  v25[1] = v26;
  if (*(_DWORD *)(a1 + 52) == 2)
  {
    if (*(_DWORD *)(a1 + 40) == 3)
      v24 = EndDuplicatesLookup;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 136))(a1, v24 + 1);
  }
  if (!*(_QWORD *)(a1 + 144))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  v27 = *(unsigned int **)(a1 + 8);
  v28 = v27 + 75724;
  v29 = v27[75725];
  if (EndDuplicatesLookup > v29)
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(v27 + 75722), EndDuplicatesLookup - v29, 0);
    v27 = *(unsigned int **)(a1 + 8);
  }
  v30 = v27 + 75728;
  *v28 = EndDuplicatesLookup;
  v31 = v27[75729];
  if (EndDuplicatesLookup > v31)
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(v27 + 75726), EndDuplicatesLookup - v31, 0);
    v27 = *(unsigned int **)(a1 + 8);
  }
  v32 = v27 + 75720;
  *v30 = EndDuplicatesLookup;
  v33 = a2[2];
  v34 = v27[75721];
  v35 = v33;
  v36 = v33 - v34;
  if (v33 > v34)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v27 + 75718), v36, 0);
    v35 = a2[2];
  }
  *v32 = v33;
  if (v35)
  {
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    do
    {
      v41 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 302840);
      v42 = *(unsigned int *)(*v41 + 4 * v39);
      if (v39 == v42)
      {
        v43 = *(_QWORD *)a2 + v37;
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 302872) + 4 * v39) = v40;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v41[2] + 4 * v38, v11, v43, v41[6] + 8 * v40, v41[8] + 8 * v40, a3);
        ++v40;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 302872) + 4 * v39) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 302872)
                                                                                       + 4 * v42);
      }
      ++v39;
      v38 += v11;
      v37 += 12;
    }
    while (v39 < a2[2]);
  }
  v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v36);
  *(_QWORD *)v44 = 0x100000001;
  *(_DWORD *)(v44 + 8) = 1310740000;
  *(_QWORD *)(v44 + 12) = 0;
  *(_DWORD *)(v44 + 20) = -65536;
  if ((_DWORD)EndDuplicatesLookup)
  {
    v45 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, v44, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 302888) + v45));
      v45 += 8;
    }
    while (8 * EndDuplicatesLookup != v45);
  }
  v46 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  v47 = *(unsigned __int16 *)(a1 + 96);
  if (*(_DWORD *)(a1 + 40) == 4)
  {
    if (*(_WORD *)(a1 + 96))
    {
      v48 = 0;
      v49 = 0;
      do
      {
        if (((*(_DWORD *)(*v46 + 4 * (v48 >> 5)) >> v48) & 1) != 0)
          *(_BYTE *)(*(_QWORD *)(a1 + 88) + v48) = ++v49;
        ++v48;
      }
      while (v47 != v48);
    }
    v50 = *(unsigned int *)(a1 + 80);
    if (v50 >= 2)
    {
      v51 = 0;
      do
      {
        v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 302904)
                        + 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 302872) + 4 * v51));
        v53 = *(_QWORD *)(a1 + 72);
        v54 = (v51 + 1);
        if (*(_DWORD *)(a1 + 52))
        {
          *(_QWORD *)(v53 + 8 * v54) = v52;
        }
        else
        {
          PredStruct::addPred(*(_QWORD *)(v53 + 8 * v54) + 16, v52);
          v50 = *(unsigned int *)(a1 + 80);
        }
        v55 = v51 + 2;
        ++v51;
      }
      while (v55 < v50);
    }
  }
  else
  {
    if (*(_WORD *)(a1 + 96))
    {
      v56 = 0;
      v57 = 0;
      do
      {
        if (((*(_DWORD *)(*v46 + 4 * (v56 >> 5)) >> v56) & 1) != 0)
          *(_BYTE *)(*(_QWORD *)(a1 + 88) + v56) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 302872) + 4 * v57++)
                                                 + 1;
        ++v56;
      }
      while (v47 != v56);
    }
    v58 = *(unsigned int *)(a1 + 80);
    if (v58 >= 2)
    {
      v59 = 0;
      do
      {
        v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 302904) + 8 * v59);
        v61 = *(_QWORD *)(a1 + 72);
        v62 = (v59 + 1);
        if (*(_DWORD *)(a1 + 52))
        {
          *(_QWORD *)(v61 + 8 * v62) = v60;
        }
        else
        {
          PredStruct::addPred(*(_QWORD *)(v61 + 8 * v62) + 16, v60);
          v58 = *(unsigned int *)(a1 + 80);
        }
        v63 = v59 + 2;
        ++v59;
      }
      while (v63 < v58);
    }
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 120))(a1, **(_QWORD **)(*(_QWORD *)(a1 + 8) + 302904), *(_QWORD *)(a1 + 144));
  return v44;
}

uint64_t AcousticNet::unpackEndTrace(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  (*(void (**)(uint64_t *, _QWORD, _QWORD))(*a1 + 312))(a1, *(unsigned __int16 *)(*(_QWORD *)a2 + 4), a2[2]);
  if (*((_DWORD *)a1 + 13) == 2)
    (*(void (**)(uint64_t *, _QWORD))(*a1 + 136))(a1, a2[2] + 1);
  if (!a1[18])
    (*(void (**)(uint64_t *))(*a1 + 216))(a1);
  v6 = (unsigned int *)a1[1];
  v7 = v6 + 75724;
  v8 = a2[2];
  v9 = v6[75725];
  v10 = v8;
  if (v8 > v9)
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(v6 + 75722), v8 - v9, 0);
    v6 = (unsigned int *)a1[1];
    v10 = a2[2];
  }
  v11 = v6 + 75728;
  *v7 = v8;
  v12 = v6[75729];
  if (v10 <= v12)
  {
    v13 = v10;
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(v6 + 75726), v10 - v12, 0);
    v6 = (unsigned int *)a1[1];
    v13 = a2[2];
  }
  v14 = v6 + 75720;
  *v11 = v10;
  v15 = v6[75721];
  v16 = v13;
  v17 = v13 - v15;
  if (v13 > v15)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v6 + 75718), v17, 0);
    v16 = a2[2];
  }
  *v14 = v13;
  if (v16)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = *(_QWORD *)a2;
      v22 = *a1;
      v23 = (_QWORD *)(a1[1] + 302872);
      *(_DWORD *)(*v23 + 4 * v20) = v20;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 224))(a1, v21 + v19, v23[2] + v18, v23[4] + v18, a3);
      ++v20;
      v19 += 12;
      v18 += 8;
    }
    while (v20 < a2[2]);
  }
  v24 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v17);
  *(_QWORD *)v24 = 0x100000001;
  *(_DWORD *)(v24 + 8) = 1310740000;
  *(_QWORD *)(v24 + 12) = 0;
  *(_DWORD *)(v24 + 20) = -65536;
  if (a2[2])
  {
    v25 = 0;
    do
      (*(void (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 120))(a1, v24, *(_QWORD *)(*(_QWORD *)(a1[1] + 302888) + 8 * v25++));
    while (v25 < a2[2]);
  }
  v26 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*a1 + 192))(a1);
  v27 = *((unsigned __int16 *)a1 + 48);
  if (*((_WORD *)a1 + 48))
  {
    v28 = 0;
    v29 = 0;
    do
    {
      if (((*(_DWORD *)(*v26 + 4 * (v28 >> 5)) >> v28) & 1) != 0)
        *(_BYTE *)(a1[11] + v28) = ++v29;
      ++v28;
    }
    while (v27 != v28);
  }
  v30 = *((unsigned int *)a1 + 20);
  if (v30 >= 2)
  {
    v31 = 0;
    do
    {
      v32 = *(_QWORD *)(*(_QWORD *)(a1[1] + 302904) + 8 * v31);
      v33 = a1[9];
      v34 = (v31 + 1);
      if (*((_DWORD *)a1 + 13))
      {
        *(_QWORD *)(v33 + 8 * v34) = v32;
      }
      else
      {
        PredStruct::addPred(*(_QWORD *)(v33 + 8 * v34) + 16, v32);
        v30 = *((unsigned int *)a1 + 20);
      }
      v35 = v31 + 2;
      ++v31;
    }
    while (v35 < v30);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*a1 + 120))(a1, **(_QWORD **)(a1[1] + 302904), a1[18]);
  return v24;
}

uint64_t AcousticNet::estimateActivePelsThisFrame(uint64_t this, BitArray *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 144);
  if (v2)
    *(_DWORD *)(*(_QWORD *)a2 + (((unint64_t)*(unsigned __int16 *)(v2 + 22) >> 3) & 0x1FFC)) |= 1 << *(_WORD *)(v2 + 22);
  return this;
}

void MrecInitModule_recog_kernel(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  __n128 *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  _QWORD *v28;
  __n128 v29;

  if (!gParDebugShowNetNodeStatsPerFrame)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowNetNodeStatsPerFrame", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowNetNodeStatsPerFrame = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowNetNodeStatsPerFrame);
  }
  if (!gParDebugShowNetNodeStats)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugShowNetNodeStats", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugShowNetNodeStats = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowNetNodeStats);
  }
  if (!gParDebugRecognitionWatchTheseWords)
  {
    v4 = MemChunkAlloc(0x48uLL, 0);
    StringGlobalParamBase::StringGlobalParamBase((StringGlobalParamBase *)v4, "DebugRecognitionWatchTheseWords", &byte_209A88803, &byte_209A88803, &byte_209A88803, 0, 0);
    *v5 = &unk_24C215D48;
    gParDebugRecognitionWatchTheseWords = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugRecognitionWatchTheseWords);
  }
  if (!gParDiagnosticFrameSpecificCommand)
  {
    v6 = MemChunkAlloc(0x48uLL, 0);
    StringGlobalParamBase::StringGlobalParamBase((StringGlobalParamBase *)v6, "DiagnosticFrameSpecificCommand", &byte_209A88803, &byte_209A88803, &byte_209A88803, 0, 0);
    *v7 = &unk_24C215D48;
    gParDiagnosticFrameSpecificCommand = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticFrameSpecificCommand);
  }
  if (!gParDebugAbortRecognition)
  {
    v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugAbortRecognition", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v9 = &unk_24C214CE8;
    gParDebugAbortRecognition = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAbortRecognition);
  }
  if (!gParDebugRecognitionWatchAllActiveWords)
  {
    v10 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v10, "DebugRecognitionWatchAllActiveWords", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v11 = &unk_24C214CE8;
    gParDebugRecognitionWatchAllActiveWords = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugRecognitionWatchAllActiveWords);
  }
  if (!gParDebugShowActiveWords)
  {
    v12 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v12, "DebugShowActiveWords", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v13 = &unk_24C214CE8;
    gParDebugShowActiveWords = (uint64_t)v13;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowActiveWords);
  }
  if (!gParDebugShowActiveStats)
  {
    v14 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v14, "DebugShowActiveStats", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v15 = &unk_24C214CE8;
    gParDebugShowActiveStats = (uint64_t)v15;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowActiveStats);
  }
  if (!gParDebugShowFinalActiveStats)
  {
    v16 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v16, "DebugShowFinalActiveStats", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v17 = &unk_24C214CE8;
    gParDebugShowFinalActiveStats = (uint64_t)v17;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowFinalActiveStats);
  }
  if (!gParDebugShowPerFrameRecognitionStats)
  {
    v18 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v18, "DebugShowPerFrameRecognitionStats", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v19 = &unk_24C214CE8;
    gParDebugShowPerFrameRecognitionStats = (uint64_t)v19;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPerFrameRecognitionStats);
  }
  if (!gParDebugPartialFinalResults)
  {
    v20 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v20, "DebugPartialFinalResults", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v21 = &unk_24C214CE8;
    gParDebugPartialFinalResults = (uint64_t)v21;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPartialFinalResults);
  }
  if (!gParDiagnosticSearchRecognitionNetType)
  {
    v22 = (__n128 *)MemChunkAlloc(0x40uLL, 0);
    EnumParamRange::EnumParamRange((uint64_t)&v29, (uint64_t)&sDiagnosticSearchRecognitionNetTypeEnum);
    EnumGlobalParamBase::EnumGlobalParamBase(v22, (unint64_t)"DiagnosticSearchRecognitionNetType", (unint64_t)&byte_209A88803, (unint64_t)&byte_209A88803, 1u, &v29, 0);
    v22->n128_u64[0] = (unint64_t)&unk_24C215008;
    gParDiagnosticSearchRecognitionNetType = (uint64_t)v22;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticSearchRecognitionNetType);
  }
  if (!gParDebugSeeding)
  {
    v23 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v23, "DebugSeeding", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v24 = &unk_24C214CE8;
    gParDebugSeeding = (uint64_t)v24;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugSeeding);
  }
  if (!gParDebugPrefiltererDeactivation)
  {
    v25 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v25, "DebugPrefiltererDeactivation", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v26 = &unk_24C214CE8;
    gParDebugPrefiltererDeactivation = (uint64_t)v26;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPrefiltererDeactivation);
  }
  if (!gParDebugShowPartialResults)
  {
    v27 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v27, "DebugShowPartialResults", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v28 = &unk_24C214CE8;
    gParDebugShowPartialResults = (uint64_t)v28;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPartialResults);
  }
}

double GermRecogGermIterator::getCurrentGermInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  double result;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = (_DWORD *)(**(_QWORD **)(a1 + 40) + 8 * v2);
  *(_DWORD *)a2 = *v3;
  *(_DWORD *)(a2 + 4) = 0x3FFF;
  *(_OWORD *)(a2 + 8) = xmmword_209A593D0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_WORD *)(a2 + 26) = 0;
  result = 3.10503915e231;
  *(_QWORD *)(a2 + 32) = 0x70000000FFFFFFFELL;
  *(_DWORD *)(a2 + 40) = v2;
  *(_DWORD *)(a2 + 28) = v3[1];
  return result;
}

uint64_t GermRecogGermIterator::advanceUntilMatch(uint64_t this)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;

  if (*(_BYTE *)(this + 32))
  {
    v2 = *(_DWORD *)(this + 8);
    v1 = *(_DWORD *)(this + 12);
    if (v2 != v1)
    {
      v3 = **(_QWORD **)(this + 40);
      v4 = *(unsigned __int16 *)(this + 16);
      do
      {
        v5 = *(_DWORD *)(v3 + 8 * v2);
        if (v4 == v5 >> 25)
        {
          v6 = *(_QWORD *)(this + 24);
          if ((v5 & 0xFFFFFF) < *(_DWORD *)(v6 + 8)
            && ((*(_DWORD *)(*(_QWORD *)v6 + (((*(_QWORD *)&v5 & 0xFFFFFFuLL) >> 3) & 0x1FFFFC)) >> v5) & 1) != 0)
          {
            break;
          }
        }
        *(_DWORD *)(this + 8) = ++v2;
      }
      while (v1 != v2);
    }
  }
  return this;
}

uint64_t RecognizerOptions::RecognizerOptions(uint64_t a1, char a2, int a3, int a4, int a5, char a6, uint64_t a7, uint64_t a8, double a9, __int128 a10, int a11, int a12, __int128 a13, __int128 a14, uint64_t a15, int a16, char a17, __int128 a18, __int128 a19, char a20,char a21,char a22,char a23,char a24,char a25,uint64_t a26,int a27,char a28,char a29,char a30,char a31,char a32,char a33,int a34,uint64_t a35,uint64_t a36,int a37,char a38,__int128 a39,int a40,int a41)
{
  int v42;
  int v43;
  int v44;
  _BYTE v46[20];

  *(_DWORD *)&v46[16] = a37;
  *(_QWORD *)&v46[8] = a36;
  *(_QWORD *)v46 = a35;
  *(_BYTE *)a1 = a2;
  *(_DWORD *)(a1 + 12) = a5;
  *(_BYTE *)(a1 + 16) = a6;
  *(_BYTE *)(a1 + 17) = a7;
  *(_DWORD *)(a1 + 20) = a8;
  *(_DWORD *)(a1 + 40) = a11;
  *(_QWORD *)(a1 + 80) = a15;
  *(_DWORD *)(a1 + 88) = a16;
  *(_BYTE *)(a1 + 92) = a17;
  *(_BYTE *)(a1 + 136) = a20;
  *(_BYTE *)(a1 + 137) = a21;
  *(_BYTE *)(a1 + 138) = a22;
  *(_BYTE *)(a1 + 139) = a23;
  *(_BYTE *)(a1 + 140) = a24;
  *(_BYTE *)(a1 + 141) = a25;
  *(_QWORD *)(a1 + 144) = a26;
  *(_DWORD *)(a1 + 152) = a27;
  *(_BYTE *)(a1 + 156) = a28;
  *(_BYTE *)(a1 + 157) = a29;
  *(_BYTE *)(a1 + 158) = a30;
  *(_BYTE *)(a1 + 159) = a31;
  *(_BYTE *)(a1 + 160) = a32;
  *(_BYTE *)(a1 + 161) = a33;
  *(_DWORD *)(a1 + 164) = a34;
  *(_BYTE *)(a1 + 168) = v46[0];
  *(_BYTE *)(a1 + 188) = a38;
  *(_DWORD *)(a1 + 208) = a40;
  *(_DWORD *)(a1 + 212) = a41;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 24) = a10;
  *(_DWORD *)(a1 + 44) = a12;
  *(_OWORD *)(a1 + 48) = a13;
  *(_OWORD *)(a1 + 64) = a14;
  *(double *)(a1 + 96) = a9;
  *(_OWORD *)(a1 + 104) = a18;
  *(_OWORD *)(a1 + 120) = a19;
  *(_OWORD *)(a1 + 172) = *(_OWORD *)&v46[4];
  *(_OWORD *)(a1 + 192) = a39;
  if (a12 != -1 && a4 + a3 - a12 < 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 733, (uint64_t)"kernel/recog", 5, (uint64_t)"%d %d %d %d", a7, a8, a4 + a3 - a12);
  v42 = *(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 4);
  v43 = *(_DWORD *)(a1 + 32);
  if (v42 - v43 < 0)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 744, (uint64_t)"kernel/recog", 6, (uint64_t)"%d %d %d %d", a7, a8, v42 - v43);
    v42 = *(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 4);
  }
  v44 = v42 - *(_DWORD *)(a1 + 36);
  if (v44 < 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 756, (uint64_t)"kernel/recog", 7, (uint64_t)"%d %d %d %d", a7, a8, v44);
  return a1;
}

uint64_t RecognizerOptions::RecognizerOptions(uint64_t a1, char a2, int a3, int a4, int a5, char a6, unsigned int a7, unsigned int a8, double a9, __int128 a10, int a11, int a12, __int128 a13, __int128 a14, uint64_t a15, int a16, char a17, __int128 a18, __int128 a19, char a20,char a21,char a22,char a23,char a24,char a25,uint64_t a26,int a27,char a28,char a29,char a30,char a31,char a32,char a33,int a34,uint64_t a35,uint64_t a36,int a37,char a38,__int128 a39,int a40,int a41)
{
  return RecognizerOptions::RecognizerOptions(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41);
}

double RecognizerOptions::RecognizerOptions(uint64_t a1, uint64_t a2)
{
  double result;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 36) = *(_OWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 52) = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_WORD *)(a1 + 140) = *(_WORD *)(a2 + 140);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  result = *(double *)(a2 + 208);
  *(double *)(a1 + 208) = result;
  return result;
}

unint64_t RecognizerOptions::sizeObject(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = a2 != 3;
  return (v2 & 0xFFFFFFFFFFFFFFFDLL | (8 * v2) | (4 * v2) | (2 * (v2 & 1)))
       + 4 * v2
       + 2 * v2
       + 8 * v2
       + 12 * v2
       + ((2 * v2) | (v2 << 7));
}

uint64_t SearchStats::resetStats(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

double SearchStats::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  result = *(double *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

int32x2_t SearchStats::operator-=(int32x2_t *a1, int32x2_t *a2)
{
  int32x2_t result;

  result = vsub_s32(*a1, *a2);
  *a1 = result;
  a1[1].i32[0] -= a2[1].i32[0];
  *(_QWORD *)&a1[2] -= *(_QWORD *)&a2[2];
  a1[3].i32[0] -= a2[3].i32[0];
  return result;
}

uint64_t Recognizer::Recognizer(uint64_t a1, char a2, int a3, __int16 a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  int v28;
  void *v29;

  *(_QWORD *)a1 = &off_24C2135C0;
  RecognizerOptions::RecognizerOptions(a1 + 8, a8);
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = a5;
  *(_QWORD *)(a1 + 264) = a6;
  if (a3 == 3)
    v19 = -1;
  else
    v19 = 1;
  *(_DWORD *)(a1 + 288) = v19;
  *(_BYTE *)(a1 + 304) = a2;
  *(_DWORD *)(a1 + 308) = -16;
  *(_DWORD *)(a1 + 312) = a3;
  *(_QWORD *)(a1 + 316) = 0xFFFFFFF0FFFFFFF0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 348) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  MergedActive::MergedActive((MergedActive *)(a1 + 392));
  *(_WORD *)(a1 + 528) = a4;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 608) = 0xF0000000FLL;
  *(_DWORD *)(a1 + 616) = 0;
  *(_BYTE *)(a1 + 620) = 0;
  SearchLMScorer::SearchLMScorer(a1 + 624, *(_DWORD *)(a1 + 172), *(_BYTE *)(a1 + 176), *(_DWORD *)(a1 + 180), *(_DWORD *)(a1 + 184), *(_BYTE *)(a1 + 167), a9, a10, a11, a12);
  *(_QWORD *)(a1 + 832) = 0x3FFFFCFFFFFDLL;
  *(_OWORD *)(a1 + 840) = xmmword_209A593D0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 858) = 1310720000;
  *(_WORD *)(a1 + 862) = 0;
  *(_QWORD *)(a1 + 864) = 0x70000000FFFFFFFELL;
  *(_DWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  PelStats::resetStats((PelStats *)(a1 + 880));
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  LMStats::resetStats((LMStats *)(a1 + 1056));
  *(_QWORD *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 1216) = 0;
  *(_QWORD *)(a1 + 1224) = 0;
  *(_DWORD *)(a1 + 1232) = 0;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  PelStats::resetStats((PelStats *)(a1 + 1240));
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  LMStats::resetStats((LMStats *)(a1 + 1416));
  *(_QWORD *)(a1 + 1568) = 0;
  *(_DWORD *)(a1 + 1576) = 0;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_DWORD *)(a1 + 1592) = 0;
  LatticeStats::LatticeStats((LatticeStats *)(a1 + 1616));
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2072) = 0u;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_DWORD *)(a1 + 2264) = 0x3FFF;
  *(_OWORD *)(a1 + 2268) = xmmword_209A593D0;
  *(_OWORD *)(a1 + 2288) = 0u;
  *(_BYTE *)(a1 + 2304) = 0;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  v20 = *(unsigned __int8 *)(a1 + 304);
  v21 = 2 * (*(_BYTE *)(a1 + 304) == 0);
  *(_OWORD *)(a1 + 2344) = 0u;
  if (v20 && (a7 & 1) == 0)
    v21 = *(unsigned int *)(gParDiagnosticSearchRecognitionNetType + 44);
  v22 = MemChunkAlloc(0x4A098uLL, 0);
  v23 = *(unsigned int *)(a1 + 312);
  v28 = *(_DWORD *)(a1 + 288);
  v24 = Active::Active(v22, v23, &v28, v21, *(_QWORD *)(a1 + 264));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = v24;
  *(_BYTE *)(a1 + 360) = 0;
  v25 = *(unsigned int *)(*(_QWORD *)VocMgr::smpVocMgr + 8);
  if (*(_DWORD *)(a1 + 564) >= v25)
  {
    *(_DWORD *)(a1 + 560) = v25;
    if (!(_DWORD)v25)
      goto LABEL_11;
  }
  else
  {
    v29 = 0;
    *(_DWORD *)(a1 + 564) = realloc_array(*(_QWORD **)(a1 + 552), &v29, v25, *(unsigned int *)(a1 + 560), *(unsigned int *)(a1 + 560), 1);
    *(_QWORD *)(a1 + 552) = v29;
    *(_DWORD *)(a1 + 560) = v25;
  }
  bzero(*(void **)(a1 + 552), v25);
LABEL_11:
  *(_QWORD *)(a1 + 1608) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 2240) = 0;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2072) = 0u;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_QWORD *)(a1 + 2216) = 0;
  *(_DWORD *)(a1 + 2340) = 0;
  *(_OWORD *)(a1 + 2308) = 0u;
  *(_OWORD *)(a1 + 2324) = 0u;
  *(_QWORD *)(a1 + 2244) = 0x4E20FFFFFFFELL;
  *(_BYTE *)(a1 + 2252) = 0;
  *(_QWORD *)(a1 + 2256) = 0xFAFFFFFFFFFFFFF0;
  *(_DWORD *)(a1 + 2264) = 0x3FFF;
  *(_OWORD *)(a1 + 2268) = xmmword_209A593D0;
  if (*(_DWORD *)(a1 + 312) != 3)
  {
    v26 = MemChunkAlloc(0x38uLL, 0);
    *(_QWORD *)(a1 + 368) = CWIDCrumbBank::CWIDCrumbBank((CWIDCrumbBank *)v26, (const HistoryMgr *)(*(_QWORD *)(a1 + 280) + 72));
  }
  SearchLMScorer::setRecognizer(a1 + 624, a1);
  return a1;
}

