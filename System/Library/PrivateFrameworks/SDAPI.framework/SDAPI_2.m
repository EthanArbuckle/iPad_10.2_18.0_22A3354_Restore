void sub_20984C440(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLateLattice::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[2];

  if (*(_BYTE *)(this + 356))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v4 = 0;
      v5 = 0;
      v22 = this + 192;
      v23 = (_QWORD *)(this + 160);
      do
      {
        v6 = (int *)(*(_QWORD *)(v2 + 256) + v4);
        v7 = *v6;
        v9 = v6[4];
        v8 = v6[5];
        v10 = v6[6];
        v11 = v6[7];
        v12 = v6[2];
        v25[0] = 0;
        v25[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v13 = -2 - v12;
        if (v11 == 16777213)
        {
          v11 = 16777209;
          if (*(_DWORD *)(*v23 + 36 * v13) == 16777209)
            v13 = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 16 * *(unsigned int *)(*v23 + 36 * v13 + 8) + 12);
        }
        v14 = *a2;
        v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v23, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        v16 = *(_QWORD *)(v2 + 160);
        v17 = v16 + 36 * v15;
        *(_DWORD *)v17 = v11;
        *(_DWORD *)(v17 + 4) = v14;
        *(_QWORD *)(v17 + 8) = 0xFFFFFFFFLL;
        *(_DWORD *)(v17 + 16) = v7;
        *(_DWORD *)(v17 + 20) = v13;
        *(_DWORD *)(v17 + 24) = v9;
        *(_DWORD *)(v17 + 28) = v8;
        *(_WORD *)(v17 + 32) = -2;
        v18 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v18 + 1;
        *(_DWORD *)(v16 + 36 * v18 + 12) = 1;
        v19 = *(unsigned int *)(v2 + 200);
        if (v19 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<CWIDAC>::reallocElts(v22, 1, 1);
          LODWORD(v19) = *(_DWORD *)(v2 + 200);
        }
        v20 = *(_QWORD *)(v2 + 192) + 24 * v19;
        *(_DWORD *)v20 = v7;
        *(_DWORD *)(v20 + 4) = v10;
        *(_DWORD *)(v20 + 8) = v18;
        *(_WORD *)(v20 + 12) = -2;
        *(_DWORD *)(v20 + 16) = v9;
        *(_DWORD *)(v20 + 20) = v8;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
        ++v5;
        v21 = *(_DWORD *)(v2 + 264);
        if (v21 >= *(_DWORD *)(v2 + 20))
          v21 = *(_DWORD *)(v2 + 20);
        v4 += 36;
      }
      while (v5 < v21);
    }
  }
  return this;
}

void sub_20984C658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLateLattice::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  int64x2_t *v6;
  int64x2_t result;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;

  FstSearchLateLattice::advanceDeltas((FstSearchLateLattice *)this, a2, a3, a4, a5);
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v9 = 0u;
  v10 = 0u;
  SnapTime::recordTime((SnapTime *)&v9, 1, 0, 0, 0);
  v6 = this[13];
  result = vaddq_s64(v6[14], vsubq_s64(v9, v11));
  v8 = vaddq_s64(v6[15], vsubq_s64(v10, v12));
  v6[14] = result;
  v6[15] = v8;
  return result;
}

_DWORD *FstSearchLateLattice::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  return this;
}

double FstSearchLateLattice::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLateLattice::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLateLattice::beginTopRecPassSyncRecog(FstSearchLateLattice *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((_BYTE *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLateLattice::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLateLatticeHashBackoff::generateTraceTokensFromTraces((FstSearchLateLatticeHashBackoff *)this);
  FstSearchLateLattice::generateTraceTokensForLateLattice((FstSearchLateLattice *)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = this[13];
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

uint64_t FstSearchLateLattice::generateTraceTokensForLateLattice(FstSearchLateLattice *this)
{
  FstSearchLateLattice *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int32 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _OWORD *v34;
  ArcGraph **v35;
  int v36;
  int v37;
  _BOOL4 v38;
  BOOL v39;
  _BOOL4 isLexPelPhnMatch;
  uint64_t v41;
  uint64_t v42;
  int32x2_t *v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  _OWORD *v62;
  void *v63;
  int v64;
  unsigned int v65;
  void *v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  _WORD *v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  __int128 *v91;
  uint64_t v92;
  char *v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  void *v100;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t *v105;
  int v106;
  int v107;
  int32x2_t *v108;
  int32x2_t *v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  void *v115;
  unsigned int v116;
  unsigned int v117;
  void *v118;
  unsigned int v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  __int16 v123;
  __int16 v124;
  int v125;
  _QWORD v126[2];
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  _QWORD v131[2];
  uint64_t v132;
  int v133;
  void *v134;

  v1 = this;
  v131[1] = 0;
  v132 = 0;
  v133 = 0;
  v131[0] = 0;
  FstSearchLateLatticeHashBackoff::getTraceTimeBoundaries((uint64_t)this, &v132, (uint64_t)v131);
  v129 = 0;
  v130 = 0;
  v127 = 0;
  v128 = 0;
  v126[0] = 0;
  v126[1] = 0;
  v125 = 1879048192;
  v2 = (*(uint64_t (**)(FstSearchLateLattice *, uint64_t *, uint64_t *, int *, _QWORD *))(*(_QWORD *)v1 + 80))(v1, &v129, &v127, &v125, v126);
  v9 = *((_DWORD *)v1 + 7);
  v10 = *((_DWORD *)v1 + 2);
  v122 = -1;
  v124 = 256;
  v123 = *((_WORD *)v1 + 34);
  if (v2)
  {
    v120 = 0;
    v121 = 0;
    v11 = (uint64_t *)((char *)v1 + 160);
    v12 = *((unsigned int *)v1 + 42);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v105 = (uint64_t *)((char *)v1 + 160);
      v102 = v10;
      v103 = v9;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            --v12;
            v14 = *v11;
            if (*(_BYTE *)(v129 + v12))
              break;
            *(_DWORD *)(v14 + 36 * v12 + 8) = -1;
            if (!(_DWORD)v12)
              goto LABEL_77;
          }
          v15 = (unsigned int *)(v14 + 36 * v12);
          v16 = *v15;
          v17 = *((_QWORD *)v1 + 6);
          if (*(_DWORD *)(v17 + 388) > v16 && *(_BYTE *)(*(_QWORD *)(v17 + 104) + v16))
            v18 = *(_WORD *)(*(_QWORD *)(v17 + 72) + 2 * *(unsigned int *)(*(_QWORD *)(v17 + 48) + 4 * v16));
          else
            v18 = 0;
          v19 = *((_QWORD *)v1 + 11);
          v20 = *(_DWORD *)(v19 + 4 * v15[1]);
          v22 = v15[2];
          v21 = v15 + 2;
          v23 = *((_QWORD *)v1 + 22);
          v24 = *((_DWORD *)v1 + 3);
          v25 = *(_DWORD *)(v126[0] + 4 * v12);
          HIWORD(v122) = v18;
          v109 = (int32x2_t *)(v23 + 16 * v22);
          v26 = v109[1].u32[1];
          if ((v26 & 0x80000000) == 0)
            break;
          *v21 = v13;
          if (v13 == HIDWORD(v121))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
            v13 = v121;
          }
          *((_OWORD *)v120 + v13) = *(_OWORD *)v109->i8;
          v13 = v121 + 1;
          LODWORD(v121) = v121 + 1;
          *(_DWORD *)(*v11 + 36 * v12 + 12) = 1;
          if (!(_DWORD)v12)
            goto LABEL_77;
        }
        v110 = v12;
        v113 = v109[1].u32[1];
        v27 = v14 + 36 * v26;
        v28 = *(unsigned int *)(v27 + 4);
        v29 = (_DWORD)v28 ? *(unsigned int *)(v132 + 4 * (v28 - 1)) : 0;
        v114 = v24 + v125 - v25;
        v108 = (int32x2_t *)(v23 + 16 * *(unsigned int *)(v27 + 8));
        v107 = v20 + v109->i32[0] - *(_DWORD *)(v19 + 4 * v28) - v108->i32[0];
        v106 = v108->i32[0] - *(_DWORD *)(v131[0] + 4 * v28);
        v30 = v13;
        if (v29 < *(unsigned int *)(v132 + 4 * v28))
          break;
LABEL_42:
        if (v13 >= v30)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 150, (uint64_t)"fst/fstsrch", 2, (uint64_t)"%s", v7, v8, (char)&unk_209A6C820);
          v30 = v121;
        }
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>((char *)v120 + 16 * v13, v30 - v13, 16);
        v45 = v13 + 1;
        v46 = v121;
        if (v45 < v121)
        {
          v47 = 16 * (v13 + 1);
          v48 = v13;
          do
          {
            if (*(_DWORD *)((char *)v120 + v47 + 8) != *((_DWORD *)v120 + 4 * v48 + 2))
            {
              *((_OWORD *)v120 + ++v48) = *(_OWORD *)((char *)v120 + v47);
              v46 = v121;
            }
            ++v45;
            v47 += 16;
          }
          while (v45 < v46);
          LODWORD(v45) = v48 + 1;
        }
        v49 = (char *)v120;
        if (HIDWORD(v121) < v45)
        {
          v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v45, 16 * v46, 16 * v46, 1) >> 4;
          v49 = (char *)v118;
          v120 = v118;
          v46 = v121;
        }
        if (v46 < v45)
        {
          v50 = v45 - (unint64_t)v46;
          v51 = &v49[16 * v46];
          do
          {
            *(_OWORD *)v51 = xmmword_209A6C7C0;
            v51 += 16;
            --v50;
          }
          while (v50);
        }
        LODWORD(v121) = v45;
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>(&v49[16 * v13], v45 - v13, 16);
        v52 = 16 * v13;
        v53 = v114;
        if (*(_DWORD *)((char *)v120 + v52) + v10 < v114)
          v53 = *((_DWORD *)v120 + 4 * v13) + v10;
        v54 = v121;
        v55 = *((_DWORD *)v1 + 5) + v13;
        if (v121 < v55)
          v55 = v121;
        v56 = *((_QWORD *)v1 + 20);
        *(_DWORD *)(v56 + 36 * v110 + 8) = v13;
        if (v13 >= v55)
        {
          v60 = v13;
        }
        else
        {
          while (*(_DWORD *)((char *)v120 + v52) <= v53)
          {
            v57 = *(unsigned int *)((char *)v120 + v52 + 12);
            if ((v57 & 0x80000000) == 0)
            {
              *(_BYTE *)(v129 + v57) = 1;
              v58 = (_DWORD)v57 == (_DWORD)v113 ? 0 : v106 + v9;
              v59 = v58 + v107 + *(_DWORD *)(v126[0] + 4 * v110);
              if (*(_DWORD *)(v126[0] + 4 * v57) > v59)
                *(_DWORD *)(v126[0] + 4 * v57) = v59;
            }
            ++v13;
            v52 += 16;
            if (v55 == v13)
            {
              v13 = v55;
              break;
            }
          }
          v56 = *v11;
          v60 = *(_DWORD *)(*v11 + 36 * v110 + 8);
          v54 = v121;
        }
        *(_DWORD *)(v56 + 36 * v110 + 12) = v13 - v60;
        if (HIDWORD(v121) < v13)
        {
          v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v13, 16 * v54, 16 * v54, 1) >> 4;
          v120 = v118;
          v54 = v121;
        }
        if (v54 < v13)
        {
          v61 = v13 - (unint64_t)v54;
          v62 = (char *)v120 + 16 * v54;
          do
          {
            *v62++ = xmmword_209A6C7C0;
            --v61;
          }
          while (v61);
        }
        LODWORD(v121) = v13;
        if (!v110)
        {
LABEL_77:
          v63 = v120;
          v64 = HIDWORD(v121);
          v65 = *((_DWORD *)v1 + 42);
          goto LABEL_79;
        }
      }
      v104 = v12;
      v112 = v106 + v9;
      v111 = v20 + v109->i32[0] - v108->i32[0];
      v31 = 36 * v29;
      while (1)
      {
        if (v113 == v29)
          v32 = 0;
        else
          v32 = v112;
        v33 = *((_QWORD *)v1 + 20);
        v34 = (_OWORD *)(*((_QWORD *)v1 + 22) + 16 * *(unsigned int *)(v33 + v31 + 8));
        if ((int)(v111 + v32 + *(_DWORD *)v34) <= v114)
        {
          v35 = (ArcGraph **)v1;
          v36 = *(_DWORD *)(v33 + 36 * v110);
          v37 = *(_DWORD *)(v33 + v31);
          v38 = v37 != 16777209
             && ArcGraph::lexToCWID(v35[5], *(_DWORD *)(v33 + v31), v3, v4, v5, v6, v7, v8) >> 25 != 126;
          if (v36 == 16777209)
          {
            v1 = (FstSearchLateLattice *)v35;
            if (v38)
              goto LABEL_35;
          }
          else
          {
            v39 = v36 == 16777214 || v37 == 16777213;
            v1 = (FstSearchLateLattice *)v35;
            if (!v39)
            {
LABEL_35:
              isLexPelPhnMatch = FstSearchLateLatticeHashBackoff::isLexPelPhnMatch((uint64_t)v1, v29, (uint64_t)&v122);
              v1 = (FstSearchLateLattice *)v35;
              if (isLexPelPhnMatch)
              {
                v41 = v121;
                if (v121 == (unint64_t)HIDWORD(v121))
                {
                  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
                  v41 = v121;
                  v1 = (FstSearchLateLattice *)v35;
                }
                *((_OWORD *)v120 + v41) = *v34;
                v42 = v121;
                LODWORD(v121) = v121 + 1;
                v43 = (int32x2_t *)((char *)v120 + 16 * v42);
                v43[1].i32[1] = v29;
                *v43 = vadd_s32(vsub_s32(vadd_s32(*v109, vdup_n_s32(v32)), *v108), *v43);
                v44 = *(_DWORD *)(*v105 + 36 * v110);
                if (v44 != 16777209)
                  v43[1].i32[0] = v44 + 2 * v43[1].i32[0] + 1;
              }
            }
          }
        }
        ++v29;
        v31 += 36;
        if (v29 >= *(unsigned int *)(v132 + 4 * v28))
        {
          v30 = v121;
          v12 = v104;
          v11 = v105;
          v10 = v102;
          v9 = v103;
          goto LABEL_42;
        }
      }
    }
    v65 = 0;
    v13 = 0;
    v64 = 0;
    v63 = 0;
LABEL_79:
    v66 = (void *)*((_QWORD *)v1 + 22);
    *((_QWORD *)v1 + 22) = v63;
    v120 = v66;
    v67 = *((_DWORD *)v1 + 47);
    *((_DWORD *)v1 + 46) = v13;
    *((_DWORD *)v1 + 47) = v64;
    LODWORD(v121) = 0;
    HIDWORD(v121) = v67;
    v119 = 0;
    v118 = 0;
    if (v65)
    {
      v68 = MemChunkAlloc(4 * v65, 0);
      v118 = v68;
      v119 = v65;
      if (*((_DWORD *)v1 + 42))
      {
        v69 = 0;
        v70 = 0;
        v65 = 0;
        do
        {
          v71 = (__int128 *)(*v11 + v69);
          if (*((_DWORD *)v71 + 2) == -1)
          {
            *((_DWORD *)v68 + v70) = -1;
          }
          else
          {
            if (v70 != v65)
            {
              v72 = *v11 + 36 * v65;
              v73 = *v71;
              v74 = v71[1];
              *(_WORD *)(v72 + 32) = *((_WORD *)v71 + 16);
              *(_OWORD *)v72 = v73;
              *(_OWORD *)(v72 + 16) = v74;
            }
            *((_DWORD *)v68 + v70) = v65++;
          }
          ++v70;
          v75 = *((unsigned int *)v1 + 42);
          v69 += 36;
        }
        while (v70 < v75);
        v76 = *((_DWORD *)v1 + 43);
        if (v65 > v76)
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v11, v65 - v76, 0);
          LODWORD(v75) = *((_DWORD *)v1 + 42);
        }
        if (v75 < v65)
        {
          v77 = v65 - (unint64_t)v75;
          v78 = (_WORD *)(*v11 + 36 * v75 + 32);
          do
          {
            *((_OWORD *)v78 - 2) = xmmword_209A6C7D0;
            *((_OWORD *)v78 - 1) = xmmword_209A6C7E0;
            *v78 = -2;
            v78 += 18;
            --v77;
          }
          while (v77);
        }
      }
      else
      {
        v65 = 0;
      }
    }
    *((_DWORD *)v1 + 42) = v65;
    v79 = *((unsigned int *)v1 + 46);
    if ((_DWORD)v79)
    {
      v80 = v118;
      v81 = (_DWORD *)(*((_QWORD *)v1 + 22) + 12);
      do
      {
        v82 = *v81;
        if ((v82 & 0x80000000) == 0)
          *v81 = v80[v82];
        v81 += 4;
        --v79;
      }
      while (v79);
    }
    DgnArray<FstSearchLateLatticeHashBackoffActiveToken>::DgnArray(&v115, *((unsigned int *)v1 + 50));
    v83 = *((unsigned int *)v1 + 50);
    if ((_DWORD)v83)
    {
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v87 = v118;
      v88 = v115;
      do
      {
        v89 = *((unsigned int *)v1 + 38);
        if (v86 < v89 && v85 == v89)
          *((_DWORD *)v1 + 38) = v86;
        v91 = (__int128 *)(*((_QWORD *)v1 + 24) + v84);
        v92 = *((unsigned int *)v91 + 2);
        if ((_DWORD)v92 == -1 || v87[v92] != -1)
        {
          v93 = (char *)&v88[6 * v86];
          v94 = *v91;
          *((_QWORD *)v93 + 2) = *((_QWORD *)v91 + 2);
          *(_OWORD *)v93 = v94;
          v95 = *(unsigned int *)(*((_QWORD *)v1 + 24) + v84 + 8);
          if ((_DWORD)v95 != -1)
            LODWORD(v95) = v87[v95];
          v88[6 * v86++ + 2] = v95;
          v83 = *((unsigned int *)v1 + 50);
        }
        ++v85;
        v84 += 24;
      }
      while (v85 < v83);
    }
    else
    {
      v86 = 0;
    }
    if (v86 < *((_DWORD *)v1 + 38))
      *((_DWORD *)v1 + 38) = v86;
    LODWORD(v96) = v117;
    v97 = (char *)v115;
    if (v117 < v86)
    {
      v134 = 0;
      v96 = realloc_array(v115, &v134, 24 * v86, 24 * v116, 24 * v116, 1) / 0x18;
      v97 = (char *)v134;
    }
    if (v116 < v86)
    {
      v98 = v86 - (unint64_t)v116;
      v99 = &v97[24 * v116 + 16];
      do
      {
        *((_QWORD *)v99 - 2) = 0xFFFFFFFF00000000;
        *((_DWORD *)v99 - 2) = -1;
        *((_WORD *)v99 - 2) = -2;
        *(_QWORD *)v99 = 0;
        v99 += 24;
        --v98;
      }
      while (v98);
    }
    v100 = (void *)*((_QWORD *)v1 + 24);
    *((_QWORD *)v1 + 24) = v97;
    v115 = v100;
    LODWORD(v100) = *((_DWORD *)v1 + 51);
    *((_DWORD *)v1 + 50) = v86;
    *((_DWORD *)v1 + 51) = v96;
    v116 = 0;
    v117 = v100;
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v115);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v118);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v120);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v126);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v127);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v129);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v131);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v132);
}

void sub_20984D1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a25);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 160);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31 - 128);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 112);
  _Unwind_Resume(a1);
}

void FstSearchLateLattice::printSize(FstSearchLateLattice *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 16;
  v44 = *((unsigned int *)this + 42);
  v45 = 24 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A6C820, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 16;
  v54 = *((unsigned int *)this + 46);
  v55 = 16 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6C820, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((_DWORD *)this + 50);
  v65 = 22 * v64;
  if (v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 22 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((_DWORD *)this + 54);
  v75 = 22 * v74;
  if (v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 22 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 240, 0);
  v99 = sizeObject((uint64_t)this + 240, 1);
  v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_20984D9A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLateLattice::findBestPath(uint64_t a1, uint64_t **a2, uint64_t a3, int *a4, uint64_t a5)
{
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  unsigned int BestTrace;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;

  v10 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v10)
    v11 = *(_DWORD *)(a3 + 8) == 0;
  else
    v11 = 0;
  if (v11)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v10;
  }
  if ((_DWORD)v10)
    v12 = *((_DWORD *)a2 + 2) == 0;
  else
    v12 = 0;
  if (v12)
  {
    *a2 = MemChunkAlloc(v10, 0);
    *((_DWORD *)a2 + 2) = v10;
  }
  else if (!(_DWORD)v10)
  {
    goto LABEL_16;
  }
  v13 = 0;
  do
  {
    *((_BYTE *)*a2 + v13) = 0;
    *(_BYTE *)(*(_QWORD *)a3 + v13++) = 0;
  }
  while (v10 != v13);
LABEL_16:
  BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
  {
    v20 = 1879048192;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 160);
    v16 = v15 + 36 * BestTrace;
    v18 = *(_DWORD *)(v16 + 4);
    v17 = (int *)(v16 + 4);
    v19 = v17[3] + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * v18);
    *a4 = v19;
    v20 = 1879048192;
    if (v19 != 1879048192)
    {
      v21 = *(_DWORD *)(a1 + 168);
      if (v21)
      {
        v22 = v21 - 1;
        v23 = 1879048192;
        v24 = *v17;
        do
        {
          v25 = v22;
          if (*(_DWORD *)(v15 + 36 * v22 + 4) == v24
            && *(_DWORD *)(v15 + 36 * v22) == 16777213
            && !*((_BYTE *)*a2 + v22))
          {
            *((_BYTE *)*a2 + v22) = 2;
            *(_BYTE *)(*(_QWORD *)a3 + v22) = 1;
            v15 = *(_QWORD *)(a1 + 160);
            if (v23 >= *(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                      + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4)))
              v23 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                  + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4));
          }
          --v22;
        }
        while (v25);
        v19 = *a4;
        v26 = *(_DWORD *)(a1 + 168);
      }
      else
      {
        v26 = 0;
        v23 = 1879048192;
      }
      v27 = *(_DWORD *)(a1 + 28);
      v28 = __OFSUB__(v19, v23);
      v29 = v19 - v23;
      if ((v29 < 0) ^ v28 | (v29 == 0))
        v30 = 0;
      else
        v30 = v29;
      v31 = *(_DWORD *)(a5 + 12);
      v32 = v26;
      if (v26 > v31)
      {
        DgnPrimArray<unsigned int>::reallocElts(a5, v26 - v31, 0);
        v32 = *(_DWORD *)(a1 + 168);
      }
      *(_DWORD *)(a5 + 8) = v26;
      v20 = *a4;
      if (v32)
      {
        v33 = 0;
        v34 = 0;
        v35 = v20 - (v30 + v27) + *(_DWORD *)(a1 + 12);
        do
        {
          v36 = *a2;
          v37 = *((unsigned __int8 *)*a2 + v34);
          if (v37 == 2)
          {
            v38 = *(_QWORD *)a5;
            if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + v33 + 8))
               + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + v33 + 4)) <= v35)
            {
              *(_DWORD *)(v38 + 4 * v34) = v30 + v27;
              *((_BYTE *)v36 + v34) = 1;
            }
            else
            {
              *(_DWORD *)(v38 + 4 * v34) = 1879048192;
              *((_BYTE *)v36 + v34) = 0;
            }
          }
          else if (v37 == 1)
          {
            *(_DWORD *)(*(_QWORD *)a5 + 4 * v34) = 0;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)a5 + 4 * v34) = 1879048192;
          }
          ++v34;
          v33 += 36;
        }
        while (v34 < *(unsigned int *)(a1 + 168));
        v20 = *a4;
      }
    }
  }
  return v20 != 1879048192;
}

uint64_t FstSearchLateLattice::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchLateLatticeHashBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  v23 = (uint64_t)v9;
  v24 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v24)
  {
    v11 = 0;
    v12 = v28;
    do
    {
      if (*(_BYTE *)(*a3 + v11))
      {
        v13 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v13 + 36 * v11) != 16777209 && *(int *)(v13 + 36 * v11 + 12) >= 1)
        {
          v14 = *(_DWORD *)(v13 + 36 * v11 + 8);
          do
          {
            v15 = *(_QWORD *)(a1 + 176) + 16 * v14;
            v16 = *(unsigned int *)(v15 + 12);
            if ((_DWORD)v16 == -1)
              v17 = 0;
            else
              v17 = v12 - *((_DWORD *)v29 + v16);
            v18 = *(unsigned int *)(v27 + 4 * v17);
            if (*(_BYTE *)(*a4 + v11))
              FstSearchLateLattice::createLatticeLink(a1, v11, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v11))), a2, v10, a5);
            v19 = v26[0];
            if (*(_DWORD *)(v26[0] + 16 * v11 + 8))
            {
              v20 = 0;
              do
              {
                v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v11) + 4 * v20);
                FstSearchLateLattice::createLatticeLink(a1, v11, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v21))), a2, v10, a5);
                ++v20;
                v19 = v26[0];
              }
              while (v20 < *(unsigned int *)(v26[0] + 16 * v11 + 8));
            }
            ++v14;
          }
          while (v14 < *(_DWORD *)(*(_QWORD *)(a1 + 160) + 36 * v11 + 12)
                      + *(_DWORD *)(*(_QWORD *)(a1 + 160) + 36 * v11 + 8));
        }
      }
      ++v11;
    }
    while (v11 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_20984DECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLateLattice::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _QWORD v39[2];
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  __int128 v54;
  _DWORD v55[2];
  __int128 v56;

  v11 = a5;
  v12 = a4;
  v16 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0 || (v17 = v16 + 36 * a4, v18 = *(_DWORD *)(v17 + 12), v18 < 1))
  {
    v22 = 0;
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 8);
    v20 = v18 + v19;
    do
    {
      v21 = *(_QWORD *)(a1 + 176);
      if (*(_DWORD *)(v21 + 16 * v19 + 12) == a2)
        v22 = (_DWORD *)(v21 + 16 * v19);
      else
        v22 = 0;
      ++v19;
    }
    while ((int)v19 < v20 && !v22);
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 36 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v55);
  v23 = a3[1];
  if (v22)
  {
    v23 += v22[1];
    v24 = *v22 + *a3;
  }
  else
  {
    v24 = *a3;
  }
  if (v55[0] >> 25 == 126)
  {
    v25 = 0;
    v26 = v23;
  }
  else
  {
    v25 = *(_DWORD *)(a1 + 136);
    v26 = v23 - v25;
  }
  if ((v12 & 0x80000000) != 0)
  {
    v27 = 0;
  }
  else
  {
    v27 = *(_DWORD *)(a1 + 140);
    v26 -= v27;
  }
  v28 = v24 - v23;
  v29 = a3[3];
  v30 = *(_QWORD *)(a1 + 160);
  if (v29 == -1)
  {
    v32 = 0;
    if (a9)
      goto LABEL_26;
  }
  else
  {
    v31 = *(_DWORD *)(v30 + 36 * v29 + 4);
    if (a9)
    {
      if (v31 >= 1)
        --v31;
      v32 = (v31 >> 1) + 1;
LABEL_26:
      v33 = *(_DWORD *)(v30 + 36 * a2 + 4);
      if (v33 >= 1)
        --v33;
      v34 = v33 >> 1;
      v35 = (v33 >> 1) - v32 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v36 = *(_DWORD *)(v30 + 36 * v12 + 4);
        if (v36 >= 1)
          --v36;
        v37 = v36 >> 1;
        goto LABEL_35;
      }
LABEL_36:
      v38 = 0;
      goto LABEL_37;
    }
    v32 = v31 + 1;
  }
  v34 = *(_DWORD *)(v30 + 36 * a2 + 4);
  v35 = v34 - v32 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_36;
  v37 = *(_DWORD *)(v30 + 36 * v12 + 4);
LABEL_35:
  v38 = v37 - v34;
LABEL_37:
  v40 = v32;
  v41 = v35;
  v42 = v38;
  v43 = v26;
  v44 = 0;
  v45 = v25;
  v46 = v28;
  v47 = 0;
  v48 = v27;
  v49 = xmmword_209A6C7F0;
  v50 = 0;
  v51 = -1;
  v39[0] = &off_24C2149F8;
  v39[1] = 0xBFF0000000000000;
  v52 = v55[0];
  v53 = v55[1];
  v54 = v56;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v39);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v39);
}

void sub_20984E13C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLateLattice::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 356))
    return MiniFst::beginTopFstSyncRecog(this + 240);
  return this;
}

uint64_t FstSearchLateLattice::endTopRecSyncRecog(FstSearchLateLattice *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLateLattice::getBestExitScore(FstSearchLateLattice *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 57) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 50);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 24 * v1;
  do
  {
    v7 = *((_QWORD *)this + 24) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 36 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 24;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v14 = *(_DWORD *)(v9 + 36 * v13 + 16);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 36 * v12 + 20);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_20984E2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLateLattice::getBestScoreMaybeUpdateFstNode(FstSearchLateLattice *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 50);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 24);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 6;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLateLattice::seedTheory(FstSearchLateLattice *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 36 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_QWORD *)(v12 + 8) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 16) = a2;
    *(_QWORD *)(v12 + 20) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 28) = 0;
    *(_WORD *)(v12 + 32) = -2;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 192, 1, 1);
    v14 = *((_DWORD *)this + 50);
  }
  v15 = *((_QWORD *)this + 24) + 24 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_QWORD *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLateLattice::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 228);
  if ((_DWORD)v8 != -1)
  {
    v9 = result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 36 * v8);
    for (i = v10[5]; (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = *(_QWORD *)(v9 + 40);
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = *(_QWORD *)(v9 + 160);
      v21 = *(_DWORD *)(v20 + 36 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = *(_QWORD *)(v9 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v20 + 36 * v8 + 16);
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(*(_QWORD *)(v9 + 160) + 36 * v16);
      i = v10[5];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLateLattice::checkSearchParametersValidityForArcGraph(FstSearchLateLattice *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLateLattice::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchLateLatticeHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 36 * v24;
  return (*(_DWORD *)(v22 + 16) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_20984E9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLatticeBackoff::advanceDeltas(FstSearchLatticeBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  int v21;
  int ScoreAllowBackoff_updateNodeInSequence;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  void *v70;
  int *v71;
  int64x2_t *v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t *v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  unint64_t v79;
  unint64_t v80;
  int64x2_t v81;
  int64x2_t *v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  uint64_t v86;
  int64x2_t *v87;
  int64x2_t result;
  int64x2_t v89;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  char *v98;
  int *v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int v120;
  int64x2_t v121;
  int64x2_t v122;
  int v123[3];

  v123[0] = a2;
  v121 = 0u;
  v122 = 0u;
  SnapTime::recordTime((SnapTime *)&v121, 1, 0, 0, 0);
  *((_DWORD *)this + 58) = a3;
  v7 = *((_DWORD *)this + 2);
  v99 = (int *)((char *)this + 232);
  v8 = *((_DWORD *)this + 50);
  if (v8)
  {
    v100 = 0;
    v101 = 0;
    v9 = 0;
    v98 = (char *)this + 208;
    v102 = *((_DWORD *)this + 2);
    do
    {
      v10 = v9;
      v95 = 24 * v9;
      v11 = *((_QWORD *)this + 24) + v95;
      v12 = *(unsigned int *)(v11 + 4);
      if (v8 <= v9 + 1)
        ++v9;
      else
        v9 = v8;
      v96 = v9 - 1;
      v13 = (int *)(v11 + 28);
      v14 = 1;
      while (v10 + v14 < (unint64_t)v8)
      {
        v15 = *v13;
        v13 += 6;
        ++v14;
        if (v15 != (_DWORD)v12)
        {
          v96 = v10 + v14 - 2;
          v9 = v10 + v14 - 1;
          break;
        }
      }
      v16 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v16 + 160) != (_DWORD)v12)
      {
        v17 = v96;
        v18 = *(_DWORD *)(v16 + 140) <= (int)v12 || v10 > v96;
        v97 = v12;
        if (!v18)
        {
          v19 = 0;
          v20 = v96 - v10 + 1;
          do
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000)
              v21 = 5000;
            else
              v21 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
            ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(*((_QWORD *)this + 24) + v95 + v19 + 12), *(_DWORD *)(*((_QWORD *)this + 24) + v95 + v19), v21);
            v23 = *((_DWORD *)this + 58);
            if (ScoreAllowBackoff_updateNodeInSequence - v7 <= v23)
            {
              v24 = ScoreAllowBackoff_updateNodeInSequence;
              if (v23 > ScoreAllowBackoff_updateNodeInSequence)
                *v99 = ScoreAllowBackoff_updateNodeInSequence;
              v25 = *((_QWORD *)this + 24) + v95 + v19;
              v26 = *(_QWORD *)(v25 + 4);
              v27 = *(_WORD *)(v25 + 12);
              v28 = *(_WORD *)(v25 + 14);
              v29 = *(_QWORD *)(v25 + 16);
              v30 = *((unsigned int *)this + 54);
              if (v30 == *((_DWORD *)this + 55))
              {
                DgnArray<CWIDAC>::reallocElts((uint64_t)v98, 1, 1);
                LODWORD(v30) = *((_DWORD *)this + 54);
              }
              v31 = *((_QWORD *)this + 26) + 24 * v30;
              *(_DWORD *)v31 = v24;
              *(_QWORD *)(v31 + 4) = v26;
              *(_WORD *)(v31 + 12) = v27;
              *(_WORD *)(v31 + 14) = v28;
              *(_QWORD *)(v31 + 16) = v29;
              v32 = *((_DWORD *)this + 54) + 1;
              *((_DWORD *)this + 54) = v32;
              if (!v19)
              {
                v33 = v100;
                if (v101 == 2 * *((_DWORD *)this + 4))
                  v33 = v32;
                v100 = v33;
                ++v101;
              }
              v12 = v97;
            }
            v17 = v96;
            v19 += 24;
            --v20;
          }
          while (v20);
        }
        v34 = v17 - v10 + 1;
        v35 = v12;
        v93 = v10;
        v94 = v9;
        v103 = v34;
        do
        {
          v36 = *((_QWORD *)this + 5);
          v37 = *(_QWORD *)(v36 + 152);
          v38 = *(_DWORD *)(v37 + 4 * v35);
          v39 = *(_DWORD *)(v36 + 140);
          v105 = *(_DWORD *)(v37 + 4 * (v35 + 1));
          if (v39 <= v105)
          {
            if (*((_BYTE *)this + 356))
              v58 = v39 <= (int)v12;
            else
              v58 = 0;
            if (v58)
            {
              v59 = (v38 & 0xFFFFF) <= 0xFFFF3 ? v38 & 0xFFFFF : v38 & 0xFFFFF | 0xF00000;
              if (v59 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v118);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v59, (DgnString *)&v118, v60, v61, v62, v63, v64);
                v70 = &unk_209A6C820;
                if (v118.i32[2])
                  v70 = (void *)v118.i64[0];
                v69 = (unsigned int *)(*((_QWORD *)this + 24) + 24 * v10);
                xprintf("Seed from state %d score %d trace %d, %s\n", v65, v66, v67, v68, v12, *v69, v69[2], v70);
                v71 = (int *)(*((_QWORD *)this + 24) + 24 * v10);
                MiniFst::seed((uint64_t)this + 240, *v71, v71[5], v71[2], v105);
                DgnString::~DgnString((DgnString *)&v118);
              }
            }
          }
          else
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000)
              v40 = 5000;
            else
              v40 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
            v41 = 24 * v10;
            v42 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v37 + 4 * v35), *(_DWORD *)(*((_QWORD *)this + 24) + 24 * v10) + ((*(_DWORD *)(v37 + 4 * v35) >> 20) & 0x3FFu), v40);
            if (v10 <= v96)
            {
              v43 = 0;
              v44 = v42 - *(_DWORD *)(*((_QWORD *)this + 24) + v41);
              v45 = v95;
              v104 = v35;
              do
              {
                v46 = *((_QWORD *)this + 24);
                v47 = *(_DWORD *)(v46 + v45) + v44;
                v48 = *((_DWORD *)this + 58);
                if (v47 - v7 <= v48)
                {
                  if (v48 > v47)
                    *v99 = v47;
                  v49 = v46 + v45;
                  v50 = *(_DWORD *)(v49 + 8);
                  v51 = *(_WORD *)(v49 + 14);
                  v53 = *(_DWORD *)(v49 + 16);
                  v52 = *(_DWORD *)(v49 + 20);
                  v54 = *((unsigned int *)this + 54);
                  if (v54 == *((_DWORD *)this + 55))
                  {
                    DgnArray<CWIDAC>::reallocElts((uint64_t)v98, 1, 1);
                    LODWORD(v54) = *((_DWORD *)this + 54);
                  }
                  v55 = *((_QWORD *)this + 26) + 24 * v54;
                  *(_DWORD *)v55 = v47;
                  *(_DWORD *)(v55 + 4) = v105;
                  *(_DWORD *)(v55 + 8) = v50;
                  *(_WORD *)(v55 + 12) = v38;
                  *(_WORD *)(v55 + 14) = v51;
                  *(_DWORD *)(v55 + 16) = v53 + ((v38 >> 20) & 0x3FF);
                  *(_DWORD *)(v55 + 20) = v52;
                  v56 = *((_DWORD *)this + 54) + 1;
                  *((_DWORD *)this + 54) = v56;
                  if (!v43)
                  {
                    v57 = v100;
                    if (v101 == 2 * *((_DWORD *)this + 4))
                      v57 = v56;
                    v100 = v57;
                    ++v101;
                  }
                  v7 = v102;
                  v34 = v103;
                  v35 = v104;
                }
                ++v43;
                v45 += 24;
              }
              while (v34 != (_DWORD)v43);
            }
          }
          v35 += 2;
          v10 = v93;
          v9 = v94;
          v12 = v97;
        }
        while ((v38 & 0x80000000) == 0);
        v8 = *((_DWORD *)this + 50);
      }
    }
    while (v9 < v8);
    a3 = *v99;
  }
  else
  {
    v100 = 0;
    v101 = 0;
  }
  v120 = a3 + v7;
  if (*((_BYTE *)this + 356))
    MiniFst::updateFrame((char *)this + 240, v99, v7, a2);
  v118 = 0u;
  v119 = 0u;
  SnapTime::recordTime((SnapTime *)&v118, 1, 0, 0, 0);
  v118 = vsubq_s64(v118, v121);
  v119 = vsubq_s64(v119, v122);
  v72 = (int64x2_t *)*((_QWORD *)this + 13);
  v73 = vaddq_s64(v72[1], v119);
  *v72 = vaddq_s64(*v72, v118);
  v72[1] = v73;
  v116 = 0u;
  v117 = 0u;
  SnapTime::recordTime((SnapTime *)&v116, 1, 0, 0, 0);
  if (v101 > 2 * *((_DWORD *)this + 4))
    FstSearchLateLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, v100, &v120);
  v114 = 0u;
  v115 = 0u;
  SnapTime::recordTime((SnapTime *)&v114, 1, 0, 0, 0);
  v74 = vsubq_s64(v114, v116);
  v75 = (int64x2_t *)*((_QWORD *)this + 13);
  v76 = v75[3];
  v77 = vaddq_s64(v75[2], v74);
  v114 = v74;
  v115 = vsubq_s64(v115, v117);
  v78 = vaddq_s64(v76, v115);
  v75[2] = v77;
  v75[3] = v78;
  v112 = 0u;
  v113 = 0u;
  SnapTime::recordTime((SnapTime *)&v112, 1, 0, 0, 0);
  FstSearchLatticeBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v79 = *((unsigned int *)this + 6);
  if ((_DWORD)v79)
  {
    v80 = *((unsigned int *)this + 50);
    if (v79 < v80)
      mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(*((_QWORD *)this + 24), v79, v80);
  }
  v110 = 0u;
  v111 = 0u;
  SnapTime::recordTime((SnapTime *)&v110, 1, 0, 0, 0);
  v81 = vsubq_s64(v110, v112);
  v82 = (int64x2_t *)*((_QWORD *)this + 13);
  v83 = v82[5];
  v84 = vaddq_s64(v82[4], v81);
  v110 = v81;
  v111 = vsubq_s64(v111, v113);
  v85 = vaddq_s64(v83, v111);
  v82[4] = v84;
  v82[5] = v85;
  v108 = 0u;
  v109 = 0u;
  SnapTime::recordTime((SnapTime *)&v108, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  v86 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v86;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v86;
    if (*((_DWORD *)a4 + 2) > v86)
      LODWORD(v86) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v86;
  }
  if (*((_BYTE *)this + 356))
    FstSearchLatticeBackoff::seedFromMiniFst((uint64_t)this, v123);
  if (a5)
    FstSearchLatticeBackoff::propagateNulls((uint64_t)this, v120, a2, a4);
  *((_DWORD *)this + 56) = a2;
  v106 = 0u;
  v107 = 0u;
  SnapTime::recordTime((SnapTime *)&v106, 1, 0, 0, 0);
  v87 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v87[6], vsubq_s64(v106, v108));
  v89 = vaddq_s64(v87[7], vsubq_s64(v107, v109));
  v87[6] = result;
  v87[7] = v89;
  return result;
}

void sub_20984F0F8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLatticeBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int128 *v8;
  unsigned int i;
  int v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  __int128 v15;

  v1 = this;
  v2 = *(unsigned int *)(this + 216);
  if ((_DWORD)v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 208), v2, 24);
    v3 = *(_DWORD *)(v1 + 216);
    *(_DWORD *)(v1 + 200) = 0;
    if (v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0;
      do
      {
        v7 = *(_QWORD *)(v1 + 208);
        if (v5 && (v8 = (__int128 *)(v7 + 24 * v5), *((_DWORD *)v8 + 1) == *((_DWORD *)v8 - 5)))
        {
          if (v4 >= *(_DWORD *)(v1 + 20) + v6)
            goto LABEL_16;
          i = v6;
          if (v6 < v4)
          {
            v10 = *(_DWORD *)(v7 + 24 * v5 + 20);
            v11 = (int *)(*(_QWORD *)(v1 + 192) + 24 * v6 + 20);
            for (i = v6; v4 != i; ++i)
            {
              v12 = *v11;
              v11 += 6;
              if (v12 == v10)
                break;
            }
          }
          if (i != v4)
            goto LABEL_16;
          v13 = *(_DWORD *)(v1 + 204);
        }
        else
        {
          v8 = (__int128 *)(v7 + 24 * v5);
          v13 = *(_DWORD *)(v1 + 204);
          v6 = v4;
        }
        if (v4 == v13)
        {
          this = DgnArray<CWIDAC>::reallocElts(v1 + 192, 1, 1);
          v4 = *(_DWORD *)(v1 + 200);
        }
        v14 = *(_QWORD *)(v1 + 192) + 24 * v4;
        v15 = *v8;
        *(_QWORD *)(v14 + 16) = *((_QWORD *)v8 + 2);
        *(_OWORD *)v14 = v15;
        v4 = *(_DWORD *)(v1 + 200) + 1;
        *(_DWORD *)(v1 + 200) = v4;
LABEL_16:
        ++v5;
      }
      while (v5 < *(unsigned int *)(v1 + 216));
    }
  }
  else
  {
    *(_DWORD *)(this + 200) = 0;
  }
  return this;
}

uint64_t FstSearchLatticeBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  _QWORD *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (*(_BYTE *)(this + 356))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v4 = 0;
      v47 = this + 176;
      v5 = (_QWORD *)(this + 160);
      v40 = this + 192;
      do
      {
        v6 = (int *)(*(_QWORD *)(v2 + 256) + 36 * v4);
        v7 = *v6;
        v8 = v6[5];
        v9 = v6[6];
        v45 = v6[4];
        v46 = v6[7];
        v10 = v6[2];
        v48 = 0;
        v49 = 0;
        v43 = v7;
        v44 = v8;
        v42 = v9;
        if ((v10 & 0x80000000) != 0)
        {
          LODWORD(v14) = -2 - v10;
        }
        else
        {
          v11 = 0;
          v12 = 0;
          do
          {
            if (v12 == HIDWORD(v49))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v48, 1, 1);
              v12 = v49;
              v11 = v48;
            }
            *(_DWORD *)(v11 + 4 * v12) = v10;
            v13 = v49;
            v12 = v49 + 1;
            LODWORD(v49) = v49 + 1;
            v10 = *(_DWORD *)(*(_QWORD *)(v2 + 240) + 36 * v10 + 8);
          }
          while ((v10 & 0x80000000) == 0);
          LODWORD(v14) = -2 - v10;
          if ((v13 & 0x80000000) == 0)
          {
            v15 = v13 + 1;
            v16 = 4 * v13;
            do
            {
              v17 = *(_DWORD *)(v48 + v16);
              v18 = *(_QWORD *)(v2 + 240);
              v19 = (int *)(v18 + 36 * v17);
              v20 = *v19;
              v21 = *((_QWORD *)v19 + 2);
              v22 = *(_DWORD *)(v2 + 184);
              if (v22 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v47, 1, 1);
                v22 = *(_DWORD *)(v2 + 184);
                v18 = *(_QWORD *)(v2 + 240);
              }
              v23 = *(_QWORD *)(v2 + 176) + 16 * v22;
              *(_DWORD *)(v2 + 184) = v22 + 1;
              *(_DWORD *)v23 = v20;
              *(_QWORD *)(v23 + 4) = v21;
              *(_DWORD *)(v23 + 12) = v14;
              v24 = *(_QWORD *)(v18 + 36 * v17 + 28);
              v25 = *(unsigned int *)(v2 + 168);
              if (v25 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                v25 = *(unsigned int *)(v2 + 168);
              }
              v26 = *(_QWORD *)(v2 + 160);
              v27 = v26 + 16 * v25;
              *(_QWORD *)v27 = v24;
              *(_DWORD *)(v27 + 8) = v22;
              *(_DWORD *)(v27 + 12) = 0;
              v14 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v14 + 1;
              *(_DWORD *)(v26 + 16 * v14 + 12) = 1;
              --v15;
              v16 -= 4;
            }
            while (v15 > 0);
          }
        }
        v28 = *(_DWORD *)(v2 + 184);
        if (v28 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v47, 1, 1);
          v28 = *(_DWORD *)(v2 + 184);
        }
        v29 = *(_QWORD *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v28 + 1;
        v30 = (_DWORD *)(v29 + 16 * v28);
        *v30 = v43;
        v30[1] = v45;
        v30[2] = v44;
        v30[3] = v14;
        if (v46 == 16777213)
        {
          v46 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v14) == 16777209)
          {
            v28 = *(_DWORD *)(*v5 + 16 * v14 + 8);
            v46 = 16777209;
          }
        }
        v31 = *a2;
        v32 = *(unsigned int *)(v2 + 168);
        if (v32 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          v32 = *(unsigned int *)(v2 + 168);
        }
        v33 = *(_QWORD *)(v2 + 160);
        v34 = (int *)(v33 + 16 * v32);
        *v34 = v46;
        v34[1] = v31;
        v34[2] = v28;
        v34[3] = 0;
        v35 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v35 + 1;
        *(_DWORD *)(v33 + 16 * v35 + 12) = 1;
        v36 = *(unsigned int *)(v2 + 200);
        if (v36 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<CWIDAC>::reallocElts(v40, 1, 1);
          LODWORD(v36) = *(_DWORD *)(v2 + 200);
        }
        v37 = *(_QWORD *)(v2 + 192) + 24 * v36;
        *(_DWORD *)v37 = v43;
        *(_DWORD *)(v37 + 4) = v42;
        *(_DWORD *)(v37 + 8) = v35;
        *(_WORD *)(v37 + 12) = -2;
        *(_DWORD *)(v37 + 16) = v45;
        *(_DWORD *)(v37 + 20) = v44;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
        ++v4;
        LODWORD(v38) = *(_DWORD *)(v2 + 264);
        v39 = *(_DWORD *)(v2 + 20);
        if (v38 >= v39)
          v38 = v39;
        else
          v38 = v38;
      }
      while (v4 < v38);
    }
  }
  return this;
}

void sub_20984F5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeBackoff::propagateNulls(uint64_t this, int a2, int a3, SearchStats *a4)
{
  int v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  __int16 v25;
  __int16 v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  __int16 v32;
  __int16 v33;
  int v34;
  _DWORD *v35;
  unsigned int v36;
  uint64_t v37;
  __int16 v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  __int16 v42;
  int *v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int *v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  _QWORD *v63;
  int v64;
  SearchStats *v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v71;
  unsigned int v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t *v81;

  v4 = *(_DWORD *)(this + 168);
  v81 = (uint64_t *)(this + 192);
  LODWORD(v5) = *(_DWORD *)(this + 200);
  v76 = this;
  if ((_DWORD)v5)
  {
    v6 = a2;
    v64 = *(_DWORD *)(this + 168);
    v65 = a4;
    v7 = 0;
    v75 = (_QWORD *)(this + 160);
    v71 = this + 176;
    do
    {
      v8 = v7;
      v9 = *(unsigned int *)(*v81 + 24 * v7 + 4);
      v69 = v7;
      if (v5 <= v7 + 1)
        v10 = v7 + 1;
      else
        v10 = v5;
      while (v10 - 1 != v7)
      {
        if (*(_DWORD *)(*v81 + 24 * ++v7 + 4) != (_DWORD)v9)
          goto LABEL_10;
      }
      v7 = v10;
LABEL_10:
      v11 = *(_QWORD *)(this + 40);
      if (*(_DWORD *)(v11 + 160) != (_DWORD)v9
        && (*(_DWORD *)(v11 + 140) <= (int)v9 || (*(_DWORD *)(*(_QWORD *)(v11 + 152) + 4 * v9) & 0x40000000) != 0))
      {
        v66 = 24 * v8;
        v68 = v7;
        v80 = v7 - v69;
        v67 = v9;
        v12 = v9;
        do
        {
          v13 = *(_QWORD *)(this + 40);
          v14 = *(_QWORD *)(v13 + 152);
          v73 = v12;
          v77 = *(_DWORD *)(v14 + 4 * v12);
          v15 = *(_DWORD *)(v13 + 140);
          v79 = *(_DWORD *)(v14 + 4 * (v12 + 1));
          if (v15 <= v79)
          {
            v16 = (v77 & 0xFFFFF) <= 0xFFFF3 ? v77 & 0xFFFFF : v77 & 0xFFFFF | 0xF00000;
            v17 = v16 != 16777210 && v15 <= v67;
            if (!v17 && v68 > v69)
            {
              v19 = 0;
              v20 = (v77 >> 20) & 0x3FF;
              v74 = v16 + 1;
              v21 = v66;
              v78 = v16;
              do
              {
                v22 = *v81;
                v23 = *(_DWORD *)(*v81 + v21) + v20;
                if (v23 > v6)
                  break;
                v24 = *(_DWORD *)(v22 + v21 + 8);
                v25 = *(_WORD *)(v22 + v21 + 12);
                v26 = *(_WORD *)(v22 + v21 + 14);
                v27 = *(_DWORD *)(v22 + v21 + 20);
                v28 = *(_DWORD *)(v22 + v21 + 16) + v20;
                if (v16 == 16777210)
                {
                  v37 = *(unsigned int *)(this + 200);
                  if (v37 == *(_DWORD *)(this + 204))
                  {
                    v38 = *(_WORD *)(v22 + v21 + 14);
                    v39 = *(_WORD *)(v22 + v21 + 12);
                    DgnArray<CWIDAC>::reallocElts((uint64_t)v81, 1, 1);
                    v25 = v39;
                    v26 = v38;
                    v20 = (v77 >> 20) & 0x3FF;
                    v16 = v78;
                    this = v76;
                    LODWORD(v37) = *(_DWORD *)(v76 + 200);
                    v22 = *(_QWORD *)(v76 + 192);
                  }
                  v40 = v22 + 24 * v37;
                  *(_DWORD *)v40 = v23;
                  *(_DWORD *)(v40 + 4) = v79;
                  *(_DWORD *)(v40 + 8) = v24;
                  *(_WORD *)(v40 + 12) = v25;
                  *(_WORD *)(v40 + 14) = v26;
                  *(_DWORD *)(v40 + 16) = v28;
                  *(_DWORD *)(v40 + 20) = v27;
                  ++*(_DWORD *)(this + 200);
                }
                else
                {
                  if (v16 == 16777214)
                    v29 = *(_DWORD *)(v22 + v21 + 16) + v20;
                  else
                    v29 = 0;
                  if (v16 == 16777214)
                    v30 = 0;
                  else
                    v30 = *(_DWORD *)(v22 + v21 + 16) + v20;
                  v31 = *(_DWORD *)(this + 184);
                  if (v31 == *(_DWORD *)(this + 188))
                  {
                    v32 = *(_WORD *)(v22 + v21 + 14);
                    v33 = *(_WORD *)(v22 + v21 + 12);
                    DgnArray<DgnPrimArray<double>>::reallocElts(v71, 1, 1);
                    v25 = v33;
                    v26 = v32;
                    v20 = (v77 >> 20) & 0x3FF;
                    v16 = v78;
                    this = v76;
                    v31 = *(_DWORD *)(v76 + 184);
                  }
                  v34 = v74 + 2 * v27;
                  v35 = (_DWORD *)(*(_QWORD *)(this + 176) + 16 * v31);
                  *(_DWORD *)(this + 184) = v31 + 1;
                  *v35 = v23 - v29;
                  v35[1] = v30;
                  v35[2] = v34;
                  v35[3] = v24;
                  v36 = *(_DWORD *)(this + 168);
                  if (v19)
                  {
                    v6 = a2;
                  }
                  else
                  {
                    if (v36 == *(_DWORD *)(this + 172))
                    {
                      v41 = v26;
                      v42 = v25;
                      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v75, 1, 1);
                      v25 = v42;
                      v26 = v41;
                      v20 = (v77 >> 20) & 0x3FF;
                      v16 = v78;
                      this = v76;
                      v36 = *(_DWORD *)(v76 + 168);
                    }
                    v43 = (int *)(*(_QWORD *)(this + 160) + 16 * v36);
                    *v43 = v16;
                    v43[1] = a3;
                    v43[2] = v31;
                    v43[3] = 0;
                    v44 = *(_DWORD *)(this + 168);
                    *(_DWORD *)(this + 168) = v44 + 1;
                    v45 = *(unsigned int *)(this + 200);
                    v6 = a2;
                    if (v45 == *(_DWORD *)(this + 204))
                    {
                      v46 = v26;
                      v47 = v25;
                      DgnArray<CWIDAC>::reallocElts((uint64_t)v81, 1, 1);
                      v25 = v47;
                      v26 = v46;
                      v20 = (v77 >> 20) & 0x3FF;
                      v16 = v78;
                      this = v76;
                      LODWORD(v45) = *(_DWORD *)(v76 + 200);
                    }
                    v48 = *(_QWORD *)(this + 192) + 24 * v45;
                    *(_DWORD *)v48 = v23;
                    *(_DWORD *)(v48 + 4) = v79;
                    *(_DWORD *)(v48 + 8) = v44;
                    *(_WORD *)(v48 + 12) = v25;
                    *(_WORD *)(v48 + 14) = v26;
                    *(_DWORD *)(v48 + 16) = v28;
                    *(_DWORD *)(v48 + 20) = v34;
                    ++*(_DWORD *)(this + 200);
                    v36 = *(_DWORD *)(this + 168);
                  }
                  v49 = *v75 + 16 * (v36 - 1);
                  ++*(_DWORD *)(v49 + 12);
                }
                ++v19;
                v21 += 24;
              }
              while (v80 != (_DWORD)v19);
            }
          }
          v12 = v73 + 2;
        }
        while ((v77 & 0x80000000) == 0);
        LODWORD(v5) = *(_DWORD *)(this + 200);
        v7 = v68;
      }
    }
    while (v7 < v5);
    v50 = *(unsigned int *)(this + 152);
    if (v5 > v50)
    {
      mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*(_QWORD *)(this + 192) + 24 * v50), (v5 - v50), 24);
      this = v76;
      v50 = *(unsigned int *)(v76 + 152);
      LODWORD(v5) = *(_DWORD *)(v76 + 200);
    }
    if (v50 < v5)
    {
      v51 = v50;
      v52 = v50;
      do
      {
        v53 = *v81;
        v54 = *v81 + 24 * v51;
        v55 = v50;
        if (*(_DWORD *)(v54 + 4) != *(_DWORD *)(*v81 + 24 * (v51 - 1) + 4))
          goto LABEL_64;
        if ((v50 - v52) < *(_DWORD *)(this + 20))
        {
          v56 = v52;
          if (v50 > v52)
          {
            v57 = (int *)(v53 + 24 * v52 + 20);
            v56 = v52;
            while (1)
            {
              v58 = *v57;
              v57 += 6;
              if (v58 == *(_DWORD *)(v53 + 24 * v51 + 20))
                break;
              if ((_DWORD)v50 == ++v56)
              {
                v55 = v52;
                goto LABEL_64;
              }
            }
          }
          v55 = v52;
          if (v56 == (_DWORD)v50)
          {
LABEL_64:
            v59 = *(_OWORD *)v54;
            v60 = v53 + 24 * v50;
            *(_QWORD *)(v60 + 16) = *(_QWORD *)(v54 + 16);
            *(_OWORD *)v60 = v59;
            v50 = (v50 + 1);
            v52 = v55;
          }
        }
        ++v51;
        v5 = *(unsigned int *)(this + 200);
      }
      while (v51 < v5);
    }
    a4 = v65;
    v4 = v64;
    if (v65)
      goto LABEL_67;
  }
  else
  {
    LODWORD(v50) = *(_DWORD *)(this + 152);
    if (a4)
LABEL_67:
      *((_DWORD *)a4 + 1) += *(_DWORD *)(this + 168) - v4;
  }
  v61 = *(_DWORD *)(this + 204);
  if (v50 > v61)
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)v81, v50 - v61, 0);
    this = v76;
    LODWORD(v5) = *(_DWORD *)(v76 + 200);
  }
  if (v5 < v50)
  {
    v62 = v50 - (unint64_t)v5;
    v63 = (_QWORD *)(*v81 + 24 * v5 + 16);
    do
    {
      *(v63 - 2) = 0xFFFFFFFF00000000;
      *((_DWORD *)v63 - 2) = -1;
      *((_WORD *)v63 - 2) = -2;
      *v63 = 0;
      v63 += 3;
      --v62;
    }
    while (v62);
  }
  *(_DWORD *)(this + 200) = v50;
  return this;
}

uint64_t FstSearchLatticeBackoff::collectTraces(FstSearchLatticeBackoff *this)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  _OWORD *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t *v46;
  int v47;

  v2 = *((unsigned int *)this + 42);
  v47 = 0;
  v46 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v46 = v3;
    v47 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    v3 = 0;
  }
  v5 = *((unsigned int *)this + 50);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (unsigned int *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v9 = *v7;
      v7 += 6;
      v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v10) = *((_DWORD *)this + 42);
  if (!(_DWORD)v10)
    goto LABEL_50;
  v11 = 0;
  v12 = (uint64_t *)((char *)this + 160);
  v13 = (uint64_t *)((char *)this + 176);
  do
  {
    v10 = (v10 - 1);
    if ((v11 & 1) != 0)
    {
      v11 = 1;
    }
    else if (*(_DWORD *)(*v12 + 16 * v10) == 16777213)
    {
      v11 = 1;
      *((_DWORD *)v3 + v10) = 1;
    }
    else
    {
      v11 = 0;
    }
    if (*((_DWORD *)v3 + v10))
    {
      v14 = *v12 + 16 * v10;
      v15 = *(_DWORD *)(v14 + 12);
      if (v15 >= 1)
      {
        v16 = *(_DWORD *)(v14 + 8);
        v17 = v15 + v16;
        v18 = *v13;
        do
        {
          v19 = *(unsigned int *)(v18 + 16 * v16 + 12);
          if ((_DWORD)v19 != -1)
            *((_DWORD *)v3 + v19) = 1;
          ++v16;
        }
        while ((int)v16 < v17);
      }
    }
  }
  while ((_DWORD)v10);
  v20 = *((_DWORD *)this + 42);
  if (v20)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    do
    {
      if (*((_DWORD *)v3 + v21))
      {
        v24 = *v12;
        if (v21 != v22)
        {
          *(_OWORD *)(v24 + 16 * v22) = *(_OWORD *)(v24 + 16 * v21);
          v24 = *v12;
        }
        *(_DWORD *)(v24 + 16 * v22 + 8) = v23;
        v25 = v24 + 16 * v21;
        v26 = *(unsigned int *)(v25 + 8);
        v27 = (*(_DWORD *)(v25 + 12) + v26);
        if (v26 < v27)
        {
          v28 = *v13;
          v29 = 16 * v26;
          do
          {
            if (v26 != v23)
            {
              *(_OWORD *)(v28 + 16 * v23) = *(_OWORD *)(v28 + v29);
              v28 = *v13;
            }
            v30 = v28 + 16 * v23;
            v33 = *(_DWORD *)(v30 + 12);
            v31 = (_DWORD *)(v30 + 12);
            v32 = v33;
            if (v33 != -1)
              *v31 = *((_DWORD *)v3 + v32);
            ++v23;
            ++v26;
            v29 += 16;
          }
          while (v27 != v26);
        }
        *((_DWORD *)v3 + v21) = v22++;
        v20 = *((_DWORD *)this + 42);
      }
      ++v21;
    }
    while (v21 < v20);
    v34 = *((_DWORD *)this + 43);
    if (v22 > v34)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, v22 - v34, 0);
      v20 = *((_DWORD *)this + 42);
    }
    if (v20 < v22)
    {
      v35 = v22 - (unint64_t)v20;
      v36 = (_OWORD *)(*v12 + 16 * v20);
      do
      {
        *v36++ = xmmword_209A6C7D0;
        --v35;
      }
      while (v35);
    }
    *((_DWORD *)this + 42) = v22;
    v37 = *((_DWORD *)this + 47);
    if (v23 > v37)
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 176, v23 - v37, 0);
    v38 = *((unsigned int *)this + 46);
    if (v38 < v23)
    {
      v39 = v23 - v38;
      v40 = (_OWORD *)(*v13 + 16 * v38);
      do
      {
        *v40++ = xmmword_209A6C7C0;
        --v39;
      }
      while (v39);
    }
  }
  else
  {
LABEL_50:
    v23 = 0;
    *((_DWORD *)this + 42) = 0;
  }
  *((_DWORD *)this + 46) = v23;
  v41 = *((unsigned int *)this + 50);
  if ((_DWORD)v41)
  {
    v42 = v46;
    v43 = (_DWORD *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v44 = *v43;
      if ((_DWORD)v44 != -1)
        *v43 = *((_DWORD *)v42 + v44);
      v43 += 6;
      --v41;
    }
    while (v41);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v46);
}

void sub_20984FE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLatticeBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchLatticeBackoff::advanceDeltas((FstSearchLatticeBackoff *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchLatticeBackoff::collectTraces((FstSearchLatticeBackoff *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLatticeBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  return this;
}

double FstSearchLatticeBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLatticeBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLatticeBackoff::beginTopRecPassSyncRecog(FstSearchLatticeBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((_BYTE *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLatticeBackoff::endTopRecPassSyncRecog(FstSearchLatticeBackoff *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLatticeBackoff::printSize(FstSearchLatticeBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 16;
  v44 = *((unsigned int *)this + 42);
  v45 = 16 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 16 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 16;
  v54 = *((unsigned int *)this + 46);
  v55 = 16 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((_DWORD *)this + 50);
  v65 = 22 * v64;
  if (v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 22 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((_DWORD *)this + 54);
  v75 = 22 * v74;
  if (v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 22 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 240, 0);
  v99 = sizeObject((uint64_t)this + 240, 1);
  v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_20985073C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeBackoff::getBestTrace(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if ((a4 & 1) != 0)
    v4 = 0;
  else
    v4 = *(unsigned int *)(a1 + 152);
  v5 = *(unsigned int *)(a1 + 200);
  if (v4 >= v5)
    goto LABEL_21;
  v6 = 24 * v4;
  v7 = 1879048192;
  v8 = 0xFFFFFFFFLL;
  do
  {
    v9 = *(_QWORD *)(a1 + 192);
    if (!a4 || (v10 = *(unsigned int *)(v9 + v6 + 8), (_DWORD)v10 == -1))
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4))
        goto LABEL_19;
      v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2)
      *(_BYTE *)(*a2 + v10) = 1;
    if (a3)
      *(_BYTE *)(*a3 + v10) = 1;
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8))
        + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 4));
    if (v7 > v11)
      v8 = v10;
    if (v7 >= v11)
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8))
         + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 4));
    v5 = *(unsigned int *)(a1 + 200);
LABEL_19:
    ++v4;
    v6 += 24;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    v12 = *(unsigned int *)(a1 + 168);
    v8 = 0xFFFFFFFFLL;
    while (v12)
    {
      --v12;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v12) == 16777213)
      {
        if (a2)
          *(_BYTE *)(*a2 + v12) = 1;
        v8 = v12;
        if (a3)
          *(_BYTE *)(*a3 + v12) = 1;
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLatticeBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchLatticeBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

unint64_t FstSearchLatticeBackoff::createLatticeNodes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t result;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v23;
  uint64_t v24;
  int Node;
  uint64_t v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int *v45;
  int v46;
  int v47;
  uint64_t **v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;

  v8 = a2;
  v9 = a1;
  v10 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v10)
    v11 = *((_DWORD *)a2 + 2) == 0;
  else
    v11 = 0;
  if (v11)
  {
    *a2 = MemChunkAlloc(4 * v10, 0);
    *((_DWORD *)v8 + 2) = v10;
  }
  result = Lattice<WordLatticeLC>::createNode(a4);
  v13 = result;
  v14 = *(_DWORD *)(a3 + 8);
  if (v14 == *(_DWORD *)(a3 + 12))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    v14 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  v15 = *(unsigned int *)(v9 + 168);
  v17 = a6;
  v16 = a7;
  if ((_DWORD)v15)
  {
    result = 0xFFFFFFFFLL;
    v49 = v8;
    v50 = a3;
    v52 = v9;
    do
    {
      --v15;
      v18 = *v8;
      *((_DWORD *)*v8 + v15) = -1;
      if (*(_BYTE *)(*v17 + v15))
      {
        v19 = v15;
        v20 = *(_QWORD *)(v9 + 160);
        v21 = *(unsigned int *)(*(_QWORD *)(v9 + 88) + 4 * *(unsigned int *)(v20 + 16 * v15 + 4));
        if (*(_BYTE *)(*v16 + v15))
        {
          if (*(_BYTE *)(*v17 + v15) != 1 || (_DWORD)result == -1)
          {
            v23 = result;
            v24 = v15;
            Node = Lattice<WordLatticeLC>::createNode(a4);
            *((_DWORD *)*v8 + v19) = *(_DWORD *)(a3 + 8);
            v26 = *(unsigned int *)(a3 + 8);
            if (v26 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              v26 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v26) = Node;
            v27 = *(_DWORD *)(a3 + 8);
            *(_DWORD *)(a3 + 8) = v27 + 1;
            v17 = a6;
            v16 = a7;
            if (*(_BYTE *)(*a6 + v19) == 1)
              result = v27;
            else
              result = v23;
            v20 = *(_QWORD *)(v9 + 160);
            v15 = v24;
          }
          else
          {
            *((_DWORD *)v18 + v15) = result;
          }
        }
        v28 = (unsigned int *)(v20 + 16 * v19);
        if ((int)v28[3] >= 1)
        {
          v51 = result;
          v29 = *v28;
          v30 = v28[2];
          do
          {
            v31 = *(_QWORD *)(v9 + 176);
            v32 = v30;
            v33 = (_DWORD *)(v31 + 16 * v30);
            v34 = v33[3];
            if ((v33[3] & 0x80000000) != 0)
            {
              *v33 += v21;
            }
            else
            {
              if ((_DWORD)v29 == 16777209)
              {
                v35 = *a5 + 16 * v34;
                v37 = (_DWORD *)(v35 + 8);
                v36 = *(unsigned int *)(v35 + 8);
                v38 = *(_QWORD *)(v9 + 176);
                if (v36 == *(_DWORD *)(v35 + 12))
                {
                  v39 = v19;
                  v40 = v21;
                  v41 = v29;
                  v42 = v15;
                  DgnPrimArray<unsigned int>::reallocElts(v35, 1, 1);
                  v29 = v41;
                  v21 = v40;
                  v19 = v39;
                  v9 = v52;
                  v17 = a6;
                  v15 = v42;
                  v16 = a7;
                  v36 = *v37;
                  v20 = *(_QWORD *)(v52 + 160);
                  v38 = *(_QWORD *)(v52 + 176);
                }
                *(_DWORD *)(*(_QWORD *)v35 + 4 * v36) = v15;
                ++*v37;
                v34 = v33[3];
              }
              else
              {
                *(_BYTE *)(*v16 + v34) = 1;
                v38 = v31;
              }
              v43 = v20 + 16 * v34;
              v44 = *(_DWORD *)(*(_QWORD *)(v9 + 88) + 4 * *(unsigned int *)(v43 + 4));
              v45 = (int *)(v38 + 16 * *(unsigned int *)(v43 + 8));
              v46 = v21 + *v33 - v44;
              v47 = *v45;
              LODWORD(v45) = v45[1];
              *v33 = v46 - v47;
              *(_DWORD *)(v31 + 16 * v32 + 4) -= (_DWORD)v45;
              *(_BYTE *)(*v17 + v34) = 2;
              v20 = *(_QWORD *)(v9 + 160);
            }
            v30 = v32 + 1;
          }
          while ((int)v32 + 1 < *(_DWORD *)(v20 + 16 * v19 + 12) + *(_DWORD *)(v20 + 16 * v19 + 8));
          v8 = v49;
          a3 = v50;
          result = v51;
        }
      }
    }
    while ((_DWORD)v15);
  }
  return result;
}

uint64_t FstSearchLatticeBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, char a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v27, *(unsigned int *)(a1 + 168));
  v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLatticeBackoff::createLatticeNodes(a1, &v30, (uint64_t)&v28, (uint64_t)a2, v27, a3, a4);
  v23 = (uint64_t)v8;
  v24 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v24)
  {
    v10 = 0;
    v11 = v29;
    do
    {
      if (*(_BYTE *)(*a3 + v10))
      {
        v12 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v12 + 16 * v10) != 16777209)
        {
          v13 = v12 + 16 * v10;
          if (*(int *)(v13 + 12) >= 1)
          {
            v14 = *(_DWORD *)(v13 + 8);
            do
            {
              v15 = *(_QWORD *)(a1 + 176) + 16 * v14;
              v16 = *(unsigned int *)(v15 + 12);
              if ((_DWORD)v16 == -1)
                v17 = 0;
              else
                v17 = v11 - *((_DWORD *)v30 + v16);
              v18 = *(unsigned int *)(v28 + 4 * v17);
              if (*(_BYTE *)(*a4 + v10))
                FstSearchLatticeBackoff::createLatticeLink(a1, v10, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v10))), a2, v9, a5);
              v19 = v27[0];
              if (*(_DWORD *)(v27[0] + 16 * v10 + 8))
              {
                v20 = 0;
                do
                {
                  v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v10) + 4 * v20);
                  FstSearchLatticeBackoff::createLatticeLink(a1, v10, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v21))), a2, v9, a5);
                  ++v20;
                  v19 = v27[0];
                }
                while (v20 < *(unsigned int *)(v27[0] + 16 * v10 + 8));
              }
              ++v14;
            }
            while (v14 < *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 12)
                        + *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v30);
}

void sub_209850EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLatticeBackoff::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _QWORD v39[2];
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  __int128 v54;
  _DWORD v55[2];
  __int128 v56;

  v11 = a5;
  v12 = a4;
  v16 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0 || (v17 = v16 + 16 * a4, v18 = *(_DWORD *)(v17 + 12), v18 < 1))
  {
    v22 = 0;
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 8);
    v20 = v18 + v19;
    do
    {
      v21 = *(_QWORD *)(a1 + 176);
      if (*(_DWORD *)(v21 + 16 * v19 + 12) == a2)
        v22 = (_DWORD *)(v21 + 16 * v19);
      else
        v22 = 0;
      ++v19;
    }
    while ((int)v19 < v20 && !v22);
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 16 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v55);
  v23 = a3[1];
  if (v22)
  {
    v23 += v22[1];
    v24 = *v22 + *a3;
  }
  else
  {
    v24 = *a3;
  }
  if (v55[0] >> 25 == 126)
  {
    v25 = 0;
    v26 = v23;
  }
  else
  {
    v25 = *(_DWORD *)(a1 + 136);
    v26 = v23 - v25;
  }
  if ((v12 & 0x80000000) != 0)
  {
    v27 = 0;
  }
  else
  {
    v27 = *(_DWORD *)(a1 + 140);
    v26 -= v27;
  }
  v28 = v24 - v23;
  v29 = a3[3];
  v30 = *(_QWORD *)(a1 + 160);
  if ((_DWORD)v29 == -1)
  {
    v32 = 0;
    if (a9)
      goto LABEL_26;
  }
  else
  {
    v31 = *(_DWORD *)(v30 + 16 * v29 + 4);
    if (a9)
    {
      if (v31 >= 1)
        --v31;
      v32 = (v31 >> 1) + 1;
LABEL_26:
      v33 = *(_DWORD *)(v30 + 16 * a2 + 4);
      if (v33 >= 1)
        --v33;
      v34 = v33 >> 1;
      v35 = (v33 >> 1) - v32 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v36 = *(_DWORD *)(v30 + 16 * v12 + 4);
        if (v36 >= 1)
          --v36;
        v37 = v36 >> 1;
        goto LABEL_35;
      }
LABEL_36:
      v38 = 0;
      goto LABEL_37;
    }
    v32 = v31 + 1;
  }
  v34 = *(_DWORD *)(v30 + 16 * a2 + 4);
  v35 = v34 - v32 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_36;
  v37 = *(_DWORD *)(v30 + 16 * v12 + 4);
LABEL_35:
  v38 = v37 - v34;
LABEL_37:
  v40 = v32;
  v41 = v35;
  v42 = v38;
  v43 = v26;
  v44 = 0;
  v45 = v25;
  v46 = v28;
  v47 = 0;
  v48 = v27;
  v49 = xmmword_209A6C7F0;
  v50 = 0;
  v51 = -1;
  v39[0] = &off_24C2149F8;
  v39[1] = 0xBFF0000000000000;
  v52 = v55[0];
  v53 = v55[1];
  v54 = v56;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v39);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v39);
}

void sub_209851144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 356))
    return MiniFst::beginTopFstSyncRecog(this + 240);
  return this;
}

uint64_t FstSearchLatticeBackoff::endTopRecSyncRecog(FstSearchLatticeBackoff *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLatticeBackoff::getBestExitScore(FstSearchLatticeBackoff *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  *((_DWORD *)this + 57) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 50);
  if (v1 >= v2)
    goto LABEL_19;
  v4 = 0;
  v5 = 0;
  v6 = 24 * v1;
  do
  {
    v7 = *((_QWORD *)this + 24) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v23))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v22, 1, 1);
          v5 = v23;
          v4 = v22;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        v5 = v23 + 1;
        LODWORD(v23) = v23 + 1;
        v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 24;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = 0;
    v10 = *((_QWORD *)this + 20);
    v11 = v5;
    v12 = 1879048192;
    do
    {
      v13 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      v14 = *(_DWORD *)(v13 + 12);
      if (v14 >= 1)
      {
        v15 = *(_DWORD *)(v13 + 8);
        v16 = v14 + v15;
        v17 = *((_QWORD *)this + 22);
        do
        {
          v18 = v15;
          v19 = *(_DWORD *)(v17 + 16 * v15);
          if (v12 > v19)
          {
            *((_DWORD *)this + 57) = *(_DWORD *)(v17 + 16 * v18 + 12);
            v12 = v19;
          }
          v15 = v18 + 1;
        }
        while ((int)v18 + 1 < v16);
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
LABEL_19:
    v12 = 1879048192;
  }
  if (v12 >= 20000)
    v20 = 20000;
  else
    v20 = v12;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
  return v20;
}

void sub_2098512F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLatticeBackoff *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 50);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 24);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 6;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLatticeBackoff::seedTheory(FstSearchLatticeBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 176, 1, 1);
      v11 = *((_DWORD *)this + 46);
    }
    v12 = (_DWORD *)(*((_QWORD *)this + 22) + 16 * v11);
    v12[2] = 0;
    v12[3] = -1;
    v12[1] = 0;
    *((_DWORD *)this + 46) = v11 + 1;
    *v12 = a2;
    v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      v13 = *((_DWORD *)this + 42);
    }
    v14 = (_DWORD *)(*((_QWORD *)this + 20) + 16 * v13);
    *v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v15 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v16 = *((_DWORD *)this + 50);
  if (v16 == *((_DWORD *)this + 51))
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 192, 1, 1);
    v16 = *((_DWORD *)this + 50);
  }
  v17 = *((_QWORD *)this + 24) + 24 * v16;
  *(_DWORD *)v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(_QWORD *)(v17 + 16) = 0;
  LODWORD(v17) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v17;
  *((_DWORD *)this + 38) = v17;
  return FstSearchLatticeBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLatticeBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v10;
  unsigned int *v11;
  uint64_t i;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v8 = *(unsigned int *)(result + 228);
  if ((_DWORD)v8 != -1)
  {
    v10 = (_QWORD *)result;
    v11 = (unsigned int *)(*(_QWORD *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(_QWORD *)(result + 176) + 16 * v11[2] + 12); (_DWORD)i != -1; v8 = v17)
    {
      v17 = i;
      result = v10[5];
      if (*v11 == 16777209)
      {
        v18 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v11, a3, (uint64_t)a4, a5, a6, a7, a8);
        v18 = result;
      }
      v19 = *(unsigned int *)(a2 + 8);
      if (v19 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v19 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v19) = v18;
      ++*(_DWORD *)(a2 + 8);
      v20 = *(unsigned int *)(a6 + 8);
      if (v20 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v20 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v20) = v8;
      ++*(_DWORD *)(a6 + 8);
      v21 = v10[20];
      v22 = *(_DWORD *)(v21 + 16 * v8 + 4);
      v23 = *(unsigned int *)(a3 + 8);
      if (v23 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v23 = *(unsigned int *)(a3 + 8);
        v21 = v10[20];
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v23) = v22;
      ++*(_DWORD *)(a3 + 8);
      v24 = *(_DWORD *)(v10[22] + 16 * *(unsigned int *)(v21 + 16 * v8 + 8));
      v25 = *(unsigned int *)(a5 + 8);
      if (v25 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v25 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v25) = v24;
      ++*(_DWORD *)(a5 + 8);
      v11 = (unsigned int *)(v10[20] + 16 * v17);
      i = *(unsigned int *)(v10[22] + 16 * v11[2] + 12);
    }
    *a4 = *v11;
  }
  return result;
}

void FstSearchLatticeBackoff::checkSearchParametersValidityForArcGraph(FstSearchLatticeBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchLatticeBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _DWORD v28[2];
  __int128 v29;

  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    v9 = a4;
    LODWORD(v11) = 0;
    v12 = a2;
    v13 = a2;
    do
    {
      v14 = (_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v13);
      if (*v14 == 16777209)
        v11 = v11;
      else
        v11 = (v11 + 1);
      v13 = *(unsigned int *)(*(_QWORD *)(a1 + 176) + 16 * v14[2] + 12);
    }
    while ((_DWORD)v13 != -1);
    v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15)
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      v17 = v11 - v16;
      v18 = *(_QWORD *)a3 + 32 * v16;
      do
      {
        *(_QWORD *)v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_209A593D0;
        *(_QWORD *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if ((_DWORD)v11)
    {
      v19 = *(_QWORD *)(a1 + 160);
      v20 = -16;
      do
      {
        v21 = (unsigned int *)(v19 + 16 * v12);
        v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            v23 = v22 - 1;
            if (v22 < 1)
              v23 = v22;
            v20 = (v23 >> 1) + 1;
          }
          else
          {
            v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            v24 = v22 - 1;
            if (v22 < 1)
              v24 = v21[1];
            v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16)
            v25 = v22 + 1;
          else
            v25 = v20;
          v26 = v28[1];
          v11 = (v11 - 1);
          v27 = *(_QWORD *)a3 + 32 * v11;
          *(_DWORD *)v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          v19 = *(_QWORD *)(a1 + 160);
          v20 = -16;
        }
        v12 = *(unsigned int *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v19 + 16 * v12 + 8) + 12);
      }
      while ((_DWORD)v12 != -1);
    }
  }
}

uint64_t FstSearchLatticeBackoff::makePartialResult(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  _QWORD v25[2];
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLatticeBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v24 = BestTrace;
  FstSearchLatticeBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v26 = v17;
      v27 = v19 - v17;
      v28 = v20 - v19;
      v29 = 0u;
      v30 = 0u;
      v31 = 0;
      v32 = 1879048192;
      v33 = 0;
      v34 = -1;
      v25[0] = &off_24C2149F8;
      v25[1] = 0xBFF0000000000000;
      v35 = *v18;
      v36 = v18[1];
      v37 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v25);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v25);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = a1[20] + 16 * v24;
  return (*(_DWORD *)(a1[22] + 16 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_209851BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLattice::advanceDeltas(FstSearchLattice *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  int ScoreNoBackoff;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  BOOL v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  void *v71;
  int *v72;
  int64x2_t *v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t *v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  unint64_t v80;
  unint64_t v81;
  int64x2_t v82;
  int64x2_t *v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  uint64_t v87;
  int64x2_t *v88;
  int64x2_t result;
  int64x2_t v90;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  char *v100;
  int *v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int v121;
  int64x2_t v122;
  int64x2_t v123;
  int v124[3];

  v124[0] = a2;
  v122 = 0u;
  v123 = 0u;
  SnapTime::recordTime((SnapTime *)&v122, 1, 0, 0, 0);
  *((_DWORD *)this + 58) = a3;
  v7 = *((_DWORD *)this + 2);
  v101 = (int *)((char *)this + 232);
  v8 = *((_DWORD *)this + 50);
  if (v8)
  {
    v102 = 0;
    v103 = 0;
    v9 = 0;
    v100 = (char *)this + 208;
    v104 = *((_DWORD *)this + 2);
    do
    {
      v10 = v9;
      v97 = 24 * v9;
      v11 = *((_QWORD *)this + 24) + v97;
      v12 = *(unsigned int *)(v11 + 4);
      if (v8 <= v9 + 1)
        ++v9;
      else
        v9 = v8;
      v13 = v9 - 1;
      v14 = (int *)(v11 + 28);
      v15 = 1;
      while (v10 + v15 < (unint64_t)v8)
      {
        v16 = *v14;
        v14 += 6;
        ++v15;
        if (v16 != (_DWORD)v12)
        {
          v13 = v10 + v15 - 2;
          v9 = v10 + v15 - 1;
          break;
        }
      }
      v17 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v17 + 160) != (_DWORD)v12)
      {
        v95 = v12;
        v96 = v9;
        v18 = *(_DWORD *)(v17 + 140) <= (int)v12 || v10 > v13;
        v98 = v10;
        v94 = v13;
        if (!v18)
        {
          v19 = 0;
          v20 = v13 - v10 + 1;
          do
          {
            v21 = *((_QWORD *)this + 24) + v97 + v19;
            v22 = *(_DWORD *)v21;
            v23 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v21 + 12)) + v22;
            v24 = *((_DWORD *)this + 58);
            if (v23 - v7 <= v24)
            {
              if (v24 > v23)
                *v101 = v23;
              v25 = *((_QWORD *)this + 24) + v97 + v19;
              v26 = *(_QWORD *)(v25 + 4);
              v27 = *(_WORD *)(v25 + 12);
              v28 = *(_WORD *)(v25 + 14);
              v29 = *(_QWORD *)(v25 + 16);
              v30 = *((unsigned int *)this + 54);
              if (v30 == *((_DWORD *)this + 55))
              {
                DgnArray<CWIDAC>::reallocElts((uint64_t)v100, 1, 1);
                LODWORD(v30) = *((_DWORD *)this + 54);
              }
              v31 = *((_QWORD *)this + 26) + 24 * v30;
              *(_DWORD *)v31 = v23;
              *(_QWORD *)(v31 + 4) = v26;
              *(_WORD *)(v31 + 12) = v27;
              *(_WORD *)(v31 + 14) = v28;
              *(_QWORD *)(v31 + 16) = v29;
              v32 = *((_DWORD *)this + 54) + 1;
              *((_DWORD *)this + 54) = v32;
              if (!v19)
              {
                v33 = v102;
                if (v103 == 2 * *((_DWORD *)this + 4))
                  v33 = v32;
                v102 = v33;
                ++v103;
              }
            }
            v19 += 24;
            --v20;
          }
          while (v20);
        }
        v34 = v98;
        v35 = v94 - v98 + 1;
        v36 = v95;
        do
        {
          v37 = *((_QWORD *)this + 5);
          v38 = *(_QWORD *)(v37 + 152);
          v39 = *(_DWORD *)(v38 + 4 * v36);
          v40 = *(_DWORD *)(v37 + 140);
          v106 = *(_DWORD *)(v38 + 4 * (v36 + 1));
          v99 = v36;
          if (v40 <= v106)
          {
            if (*((_BYTE *)this + 356))
              v59 = v40 <= (int)v95;
            else
              v59 = 0;
            if (v59)
            {
              v60 = (v39 & 0xFFFFF) <= 0xFFFF3 ? v39 & 0xFFFFF : v39 & 0xFFFFF | 0xF00000;
              if (v60 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v119);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v60, (DgnString *)&v119, v61, v62, v63, v64, v65);
                v71 = &unk_209A6C820;
                if (v119.i32[2])
                  v71 = (void *)v119.i64[0];
                v70 = (unsigned int *)(*((_QWORD *)this + 24) + 24 * v98);
                xprintf("Seed from state %d score %d trace %d, %s\n", v66, v67, v68, v69, v95, *v70, v70[2], v71);
                v72 = (int *)(*((_QWORD *)this + 24) + 24 * v98);
                MiniFst::seed((uint64_t)this + 240, *v72, v72[5], v72[2], v106);
                DgnString::~DgnString((DgnString *)&v119);
              }
            }
          }
          else
          {
            ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v38 + 4 * v36));
            if (v34 <= v94)
            {
              v42 = 0;
              v43 = (v39 >> 20) & 0x3FF;
              v44 = ScoreNoBackoff + v43;
              v45 = v97;
              v105 = v39;
              do
              {
                v46 = *((_QWORD *)this + 24);
                v47 = v44 + *(_DWORD *)(v46 + v45);
                v48 = *((_DWORD *)this + 58);
                if (v47 - v7 <= v48)
                {
                  if (v48 > v47)
                    *v101 = v47;
                  v49 = v46 + v45;
                  v50 = *(_DWORD *)(v49 + 8);
                  v51 = *(_WORD *)(v49 + 14);
                  v53 = *(_DWORD *)(v49 + 16);
                  v52 = *(_DWORD *)(v49 + 20);
                  v54 = *((unsigned int *)this + 54);
                  if (v54 == *((_DWORD *)this + 55))
                  {
                    DgnArray<CWIDAC>::reallocElts((uint64_t)v100, 1, 1);
                    LODWORD(v54) = *((_DWORD *)this + 54);
                  }
                  v55 = v53 + v43;
                  v56 = *((_QWORD *)this + 26) + 24 * v54;
                  v39 = v105;
                  *(_DWORD *)v56 = v47;
                  *(_DWORD *)(v56 + 4) = v106;
                  *(_DWORD *)(v56 + 8) = v50;
                  *(_WORD *)(v56 + 12) = v105;
                  *(_WORD *)(v56 + 14) = v51;
                  *(_DWORD *)(v56 + 16) = v55;
                  *(_DWORD *)(v56 + 20) = v52;
                  v57 = *((_DWORD *)this + 54) + 1;
                  *((_DWORD *)this + 54) = v57;
                  if (!v42)
                  {
                    v58 = v102;
                    if (v103 == 2 * *((_DWORD *)this + 4))
                      v58 = v57;
                    v102 = v58;
                    ++v103;
                  }
                  v7 = v104;
                  v35 = v94 - v98 + 1;
                }
                ++v42;
                v45 += 24;
              }
              while (v35 != (_DWORD)v42);
            }
          }
          v36 = v99 + 2;
          v9 = v96;
          v34 = v98;
        }
        while ((v39 & 0x80000000) == 0);
        v8 = *((_DWORD *)this + 50);
      }
    }
    while (v9 < v8);
    a3 = *v101;
  }
  else
  {
    v102 = 0;
    v103 = 0;
  }
  v121 = a3 + v7;
  if (*((_BYTE *)this + 356))
    MiniFst::updateFrame((char *)this + 240, v101, v7, a2);
  v119 = 0u;
  v120 = 0u;
  SnapTime::recordTime((SnapTime *)&v119, 1, 0, 0, 0);
  v119 = vsubq_s64(v119, v122);
  v120 = vsubq_s64(v120, v123);
  v73 = (int64x2_t *)*((_QWORD *)this + 13);
  v74 = vaddq_s64(v73[1], v120);
  *v73 = vaddq_s64(*v73, v119);
  v73[1] = v74;
  v117 = 0u;
  v118 = 0u;
  SnapTime::recordTime((SnapTime *)&v117, 1, 0, 0, 0);
  if (v103 > 2 * *((_DWORD *)this + 4))
    FstSearchLateLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, v102, &v121);
  v115 = 0u;
  v116 = 0u;
  SnapTime::recordTime((SnapTime *)&v115, 1, 0, 0, 0);
  v75 = vsubq_s64(v115, v117);
  v76 = (int64x2_t *)*((_QWORD *)this + 13);
  v77 = v76[3];
  v78 = vaddq_s64(v76[2], v75);
  v115 = v75;
  v116 = vsubq_s64(v116, v118);
  v79 = vaddq_s64(v77, v116);
  v76[2] = v78;
  v76[3] = v79;
  v113 = 0u;
  v114 = 0u;
  SnapTime::recordTime((SnapTime *)&v113, 1, 0, 0, 0);
  FstSearchLatticeBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v80 = *((unsigned int *)this + 6);
  if ((_DWORD)v80)
  {
    v81 = *((unsigned int *)this + 50);
    if (v80 < v81)
      mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(*((_QWORD *)this + 24), v80, v81);
  }
  v111 = 0u;
  v112 = 0u;
  SnapTime::recordTime((SnapTime *)&v111, 1, 0, 0, 0);
  v82 = vsubq_s64(v111, v113);
  v83 = (int64x2_t *)*((_QWORD *)this + 13);
  v84 = v83[5];
  v85 = vaddq_s64(v83[4], v82);
  v111 = v82;
  v112 = vsubq_s64(v112, v114);
  v86 = vaddq_s64(v84, v112);
  v83[4] = v85;
  v83[5] = v86;
  v109 = 0u;
  v110 = 0u;
  SnapTime::recordTime((SnapTime *)&v109, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  v87 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v87;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v87;
    if (*((_DWORD *)a4 + 2) > v87)
      LODWORD(v87) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v87;
  }
  if (*((_BYTE *)this + 356))
    FstSearchLattice::seedFromMiniFst((uint64_t)this, v124);
  if (a5)
    FstSearchLatticeBackoff::propagateNulls((uint64_t)this, v121, a2, a4);
  *((_DWORD *)this + 56) = a2;
  v107 = 0u;
  v108 = 0u;
  SnapTime::recordTime((SnapTime *)&v107, 1, 0, 0, 0);
  v88 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v88[6], vsubq_s64(v107, v109));
  v90 = vaddq_s64(v88[7], vsubq_s64(v108, v110));
  v88[6] = result;
  v88[7] = v90;
  return result;
}

void sub_2098522B8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLattice::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  _QWORD *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (*(_BYTE *)(this + 356))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v4 = 0;
      v47 = this + 176;
      v5 = (_QWORD *)(this + 160);
      v40 = this + 192;
      do
      {
        v6 = (int *)(*(_QWORD *)(v2 + 256) + 36 * v4);
        v7 = *v6;
        v8 = v6[5];
        v9 = v6[6];
        v45 = v6[4];
        v46 = v6[7];
        v10 = v6[2];
        v48 = 0;
        v49 = 0;
        v43 = v7;
        v44 = v8;
        v42 = v9;
        if ((v10 & 0x80000000) != 0)
        {
          LODWORD(v14) = -2 - v10;
        }
        else
        {
          v11 = 0;
          v12 = 0;
          do
          {
            if (v12 == HIDWORD(v49))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v48, 1, 1);
              v12 = v49;
              v11 = v48;
            }
            *(_DWORD *)(v11 + 4 * v12) = v10;
            v13 = v49;
            v12 = v49 + 1;
            LODWORD(v49) = v49 + 1;
            v10 = *(_DWORD *)(*(_QWORD *)(v2 + 240) + 36 * v10 + 8);
          }
          while ((v10 & 0x80000000) == 0);
          LODWORD(v14) = -2 - v10;
          if ((v13 & 0x80000000) == 0)
          {
            v15 = v13 + 1;
            v16 = 4 * v13;
            do
            {
              v17 = *(_DWORD *)(v48 + v16);
              v18 = *(_QWORD *)(v2 + 240);
              v19 = (int *)(v18 + 36 * v17);
              v20 = *v19;
              v21 = *((_QWORD *)v19 + 2);
              v22 = *(_DWORD *)(v2 + 184);
              if (v22 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v47, 1, 1);
                v22 = *(_DWORD *)(v2 + 184);
                v18 = *(_QWORD *)(v2 + 240);
              }
              v23 = *(_QWORD *)(v2 + 176) + 16 * v22;
              *(_DWORD *)(v2 + 184) = v22 + 1;
              *(_DWORD *)v23 = v20;
              *(_QWORD *)(v23 + 4) = v21;
              *(_DWORD *)(v23 + 12) = v14;
              v24 = *(_QWORD *)(v18 + 36 * v17 + 28);
              v25 = *(unsigned int *)(v2 + 168);
              if (v25 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                v25 = *(unsigned int *)(v2 + 168);
              }
              v26 = *(_QWORD *)(v2 + 160);
              v27 = v26 + 16 * v25;
              *(_QWORD *)v27 = v24;
              *(_DWORD *)(v27 + 8) = v22;
              *(_DWORD *)(v27 + 12) = 0;
              v14 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v14 + 1;
              *(_DWORD *)(v26 + 16 * v14 + 12) = 1;
              --v15;
              v16 -= 4;
            }
            while (v15 > 0);
          }
        }
        v28 = *(_DWORD *)(v2 + 184);
        if (v28 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v47, 1, 1);
          v28 = *(_DWORD *)(v2 + 184);
        }
        v29 = *(_QWORD *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v28 + 1;
        v30 = (_DWORD *)(v29 + 16 * v28);
        *v30 = v43;
        v30[1] = v45;
        v30[2] = v44;
        v30[3] = v14;
        if (v46 == 16777213)
        {
          v46 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v14) == 16777209)
          {
            v28 = *(_DWORD *)(*v5 + 16 * v14 + 8);
            v46 = 16777209;
          }
        }
        v31 = *a2;
        v32 = *(unsigned int *)(v2 + 168);
        if (v32 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          v32 = *(unsigned int *)(v2 + 168);
        }
        v33 = *(_QWORD *)(v2 + 160);
        v34 = (int *)(v33 + 16 * v32);
        *v34 = v46;
        v34[1] = v31;
        v34[2] = v28;
        v34[3] = 0;
        v35 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v35 + 1;
        *(_DWORD *)(v33 + 16 * v35 + 12) = 1;
        v36 = *(unsigned int *)(v2 + 200);
        if (v36 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<CWIDAC>::reallocElts(v40, 1, 1);
          LODWORD(v36) = *(_DWORD *)(v2 + 200);
        }
        v37 = *(_QWORD *)(v2 + 192) + 24 * v36;
        *(_DWORD *)v37 = v43;
        *(_DWORD *)(v37 + 4) = v42;
        *(_DWORD *)(v37 + 8) = v35;
        *(_WORD *)(v37 + 12) = -2;
        *(_DWORD *)(v37 + 16) = v45;
        *(_DWORD *)(v37 + 20) = v44;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
        ++v4;
        LODWORD(v38) = *(_DWORD *)(v2 + 264);
        v39 = *(_DWORD *)(v2 + 20);
        if (v38 >= v39)
          v38 = v39;
        else
          v38 = v38;
      }
      while (v4 < v38);
    }
  }
  return this;
}

void sub_209852628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLattice::collectTraces(FstSearchLattice *this)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  _OWORD *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t *v46;
  int v47;

  v2 = *((unsigned int *)this + 42);
  v47 = 0;
  v46 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v46 = v3;
    v47 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    v3 = 0;
  }
  v5 = *((unsigned int *)this + 50);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (unsigned int *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v9 = *v7;
      v7 += 6;
      v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v10) = *((_DWORD *)this + 42);
  if (!(_DWORD)v10)
    goto LABEL_50;
  v11 = 0;
  v12 = (uint64_t *)((char *)this + 160);
  v13 = (uint64_t *)((char *)this + 176);
  do
  {
    v10 = (v10 - 1);
    if ((v11 & 1) != 0)
    {
      v11 = 1;
    }
    else if (*(_DWORD *)(*v12 + 16 * v10) == 16777213)
    {
      v11 = 1;
      *((_DWORD *)v3 + v10) = 1;
    }
    else
    {
      v11 = 0;
    }
    if (*((_DWORD *)v3 + v10))
    {
      v14 = *v12 + 16 * v10;
      v15 = *(_DWORD *)(v14 + 12);
      if (v15 >= 1)
      {
        v16 = *(_DWORD *)(v14 + 8);
        v17 = v15 + v16;
        v18 = *v13;
        do
        {
          v19 = *(unsigned int *)(v18 + 16 * v16 + 12);
          if ((_DWORD)v19 != -1)
            *((_DWORD *)v3 + v19) = 1;
          ++v16;
        }
        while ((int)v16 < v17);
      }
    }
  }
  while ((_DWORD)v10);
  v20 = *((_DWORD *)this + 42);
  if (v20)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    do
    {
      if (*((_DWORD *)v3 + v21))
      {
        v24 = *v12;
        if (v21 != v22)
        {
          *(_OWORD *)(v24 + 16 * v22) = *(_OWORD *)(v24 + 16 * v21);
          v24 = *v12;
        }
        *(_DWORD *)(v24 + 16 * v22 + 8) = v23;
        v25 = v24 + 16 * v21;
        v26 = *(unsigned int *)(v25 + 8);
        v27 = (*(_DWORD *)(v25 + 12) + v26);
        if (v26 < v27)
        {
          v28 = *v13;
          v29 = 16 * v26;
          do
          {
            if (v26 != v23)
            {
              *(_OWORD *)(v28 + 16 * v23) = *(_OWORD *)(v28 + v29);
              v28 = *v13;
            }
            v30 = v28 + 16 * v23;
            v33 = *(_DWORD *)(v30 + 12);
            v31 = (_DWORD *)(v30 + 12);
            v32 = v33;
            if (v33 != -1)
              *v31 = *((_DWORD *)v3 + v32);
            ++v23;
            ++v26;
            v29 += 16;
          }
          while (v27 != v26);
        }
        *((_DWORD *)v3 + v21) = v22++;
        v20 = *((_DWORD *)this + 42);
      }
      ++v21;
    }
    while (v21 < v20);
    v34 = *((_DWORD *)this + 43);
    if (v22 > v34)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, v22 - v34, 0);
      v20 = *((_DWORD *)this + 42);
    }
    if (v20 < v22)
    {
      v35 = v22 - (unint64_t)v20;
      v36 = (_OWORD *)(*v12 + 16 * v20);
      do
      {
        *v36++ = xmmword_209A6C7D0;
        --v35;
      }
      while (v35);
    }
    *((_DWORD *)this + 42) = v22;
    v37 = *((_DWORD *)this + 47);
    if (v23 > v37)
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 176, v23 - v37, 0);
    v38 = *((unsigned int *)this + 46);
    if (v38 < v23)
    {
      v39 = v23 - v38;
      v40 = (_OWORD *)(*v13 + 16 * v38);
      do
      {
        *v40++ = xmmword_209A6C7C0;
        --v39;
      }
      while (v39);
    }
  }
  else
  {
LABEL_50:
    v23 = 0;
    *((_DWORD *)this + 42) = 0;
  }
  *((_DWORD *)this + 46) = v23;
  v41 = *((unsigned int *)this + 50);
  if ((_DWORD)v41)
  {
    v42 = v46;
    v43 = (_DWORD *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v44 = *v43;
      if ((_DWORD)v44 != -1)
        *v43 = *((_DWORD *)v42 + v44);
      v43 += 6;
      --v41;
    }
    while (v41);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v46);
}

void sub_209852934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLattice::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchLattice::advanceDeltas((FstSearchLattice *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchLattice::collectTraces((FstSearchLattice *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLattice::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  return this;
}

double FstSearchLattice::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLattice::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLattice::beginTopRecPassSyncRecog(FstSearchLattice *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((_BYTE *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLattice::endTopRecPassSyncRecog(FstSearchLattice *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLattice::printSize(FstSearchLattice *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 16;
  v44 = *((unsigned int *)this + 42);
  v45 = 16 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 16 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 16;
  v54 = *((unsigned int *)this + 46);
  v55 = 16 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((_DWORD *)this + 50);
  v65 = 22 * v64;
  if (v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 22 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((_DWORD *)this + 54);
  v75 = 22 * v74;
  if (v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 22 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 240, 0);
  v99 = sizeObject((uint64_t)this + 240, 1);
  v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_209853240(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLattice::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchLatticeBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchLattice::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, char a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v27, *(unsigned int *)(a1 + 168));
  v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLatticeBackoff::createLatticeNodes(a1, &v30, (uint64_t)&v28, (uint64_t)a2, v27, a3, a4);
  v23 = (uint64_t)v8;
  v24 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v24)
  {
    v10 = 0;
    v11 = v29;
    do
    {
      if (*(_BYTE *)(*a3 + v10))
      {
        v12 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v12 + 16 * v10) != 16777209)
        {
          v13 = v12 + 16 * v10;
          if (*(int *)(v13 + 12) >= 1)
          {
            v14 = *(_DWORD *)(v13 + 8);
            do
            {
              v15 = *(_QWORD *)(a1 + 176) + 16 * v14;
              v16 = *(unsigned int *)(v15 + 12);
              if ((_DWORD)v16 == -1)
                v17 = 0;
              else
                v17 = v11 - *((_DWORD *)v30 + v16);
              v18 = *(unsigned int *)(v28 + 4 * v17);
              if (*(_BYTE *)(*a4 + v10))
                FstSearchLattice::createLatticeLink(a1, v10, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v10))), a2, v9, a5);
              v19 = v27[0];
              if (*(_DWORD *)(v27[0] + 16 * v10 + 8))
              {
                v20 = 0;
                do
                {
                  v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v10) + 4 * v20);
                  FstSearchLattice::createLatticeLink(a1, v10, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v21))), a2, v9, a5);
                  ++v20;
                  v19 = v27[0];
                }
                while (v20 < *(unsigned int *)(v27[0] + 16 * v10 + 8));
              }
              ++v14;
            }
            while (v14 < *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 12)
                        + *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v30);
}

void sub_2098535AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLattice::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _QWORD v39[2];
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  __int128 v54;
  _DWORD v55[2];
  __int128 v56;

  v11 = a5;
  v12 = a4;
  v16 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0 || (v17 = v16 + 16 * a4, v18 = *(_DWORD *)(v17 + 12), v18 < 1))
  {
    v22 = 0;
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 8);
    v20 = v18 + v19;
    do
    {
      v21 = *(_QWORD *)(a1 + 176);
      if (*(_DWORD *)(v21 + 16 * v19 + 12) == a2)
        v22 = (_DWORD *)(v21 + 16 * v19);
      else
        v22 = 0;
      ++v19;
    }
    while ((int)v19 < v20 && !v22);
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 16 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v55);
  v23 = a3[1];
  if (v22)
  {
    v23 += v22[1];
    v24 = *v22 + *a3;
  }
  else
  {
    v24 = *a3;
  }
  if (v55[0] >> 25 == 126)
  {
    v25 = 0;
    v26 = v23;
  }
  else
  {
    v25 = *(_DWORD *)(a1 + 136);
    v26 = v23 - v25;
  }
  if ((v12 & 0x80000000) != 0)
  {
    v27 = 0;
  }
  else
  {
    v27 = *(_DWORD *)(a1 + 140);
    v26 -= v27;
  }
  v28 = v24 - v23;
  v29 = a3[3];
  v30 = *(_QWORD *)(a1 + 160);
  if ((_DWORD)v29 == -1)
  {
    v32 = 0;
    if (a9)
      goto LABEL_26;
  }
  else
  {
    v31 = *(_DWORD *)(v30 + 16 * v29 + 4);
    if (a9)
    {
      if (v31 >= 1)
        --v31;
      v32 = (v31 >> 1) + 1;
LABEL_26:
      v33 = *(_DWORD *)(v30 + 16 * a2 + 4);
      if (v33 >= 1)
        --v33;
      v34 = v33 >> 1;
      v35 = (v33 >> 1) - v32 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v36 = *(_DWORD *)(v30 + 16 * v12 + 4);
        if (v36 >= 1)
          --v36;
        v37 = v36 >> 1;
        goto LABEL_35;
      }
LABEL_36:
      v38 = 0;
      goto LABEL_37;
    }
    v32 = v31 + 1;
  }
  v34 = *(_DWORD *)(v30 + 16 * a2 + 4);
  v35 = v34 - v32 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_36;
  v37 = *(_DWORD *)(v30 + 16 * v12 + 4);
LABEL_35:
  v38 = v37 - v34;
LABEL_37:
  v40 = v32;
  v41 = v35;
  v42 = v38;
  v43 = v26;
  v44 = 0;
  v45 = v25;
  v46 = v28;
  v47 = 0;
  v48 = v27;
  v49 = xmmword_209A6C7F0;
  v50 = 0;
  v51 = -1;
  v39[0] = &off_24C2149F8;
  v39[1] = 0xBFF0000000000000;
  v52 = v55[0];
  v53 = v55[1];
  v54 = v56;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v39);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v39);
}

void sub_209853808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLattice::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 356))
    return MiniFst::beginTopFstSyncRecog(this + 240);
  return this;
}

uint64_t FstSearchLattice::endTopRecSyncRecog(FstSearchLattice *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLattice::getBestExitScore(FstSearchLattice *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  *((_DWORD *)this + 57) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 50);
  if (v1 >= v2)
    goto LABEL_19;
  v4 = 0;
  v5 = 0;
  v6 = 24 * v1;
  do
  {
    v7 = *((_QWORD *)this + 24) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v23))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v22, 1, 1);
          v5 = v23;
          v4 = v22;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        v5 = v23 + 1;
        LODWORD(v23) = v23 + 1;
        v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 24;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = 0;
    v10 = *((_QWORD *)this + 20);
    v11 = v5;
    v12 = 1879048192;
    do
    {
      v13 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      v14 = *(_DWORD *)(v13 + 12);
      if (v14 >= 1)
      {
        v15 = *(_DWORD *)(v13 + 8);
        v16 = v14 + v15;
        v17 = *((_QWORD *)this + 22);
        do
        {
          v18 = v15;
          v19 = *(_DWORD *)(v17 + 16 * v15);
          if (v12 > v19)
          {
            *((_DWORD *)this + 57) = *(_DWORD *)(v17 + 16 * v18 + 12);
            v12 = v19;
          }
          v15 = v18 + 1;
        }
        while ((int)v18 + 1 < v16);
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
LABEL_19:
    v12 = 1879048192;
  }
  if (v12 >= 20000)
    v20 = 20000;
  else
    v20 = v12;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
  return v20;
}

void sub_2098539B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLattice::getBestScoreMaybeUpdateFstNode(FstSearchLattice *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 50);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 24);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 6;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLattice::seedTheory(FstSearchLattice *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 176, 1, 1);
      v11 = *((_DWORD *)this + 46);
    }
    v12 = (_DWORD *)(*((_QWORD *)this + 22) + 16 * v11);
    v12[2] = 0;
    v12[3] = -1;
    v12[1] = 0;
    *((_DWORD *)this + 46) = v11 + 1;
    *v12 = a2;
    v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      v13 = *((_DWORD *)this + 42);
    }
    v14 = (_DWORD *)(*((_QWORD *)this + 20) + 16 * v13);
    *v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v15 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v16 = *((_DWORD *)this + 50);
  if (v16 == *((_DWORD *)this + 51))
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 192, 1, 1);
    v16 = *((_DWORD *)this + 50);
  }
  v17 = *((_QWORD *)this + 24) + 24 * v16;
  *(_DWORD *)v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(_QWORD *)(v17 + 16) = 0;
  LODWORD(v17) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v17;
  *((_DWORD *)this + 38) = v17;
  return FstSearchLatticeBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLattice::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v10;
  unsigned int *v11;
  uint64_t i;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v8 = *(unsigned int *)(result + 228);
  if ((_DWORD)v8 != -1)
  {
    v10 = (_QWORD *)result;
    v11 = (unsigned int *)(*(_QWORD *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(_QWORD *)(result + 176) + 16 * v11[2] + 12); (_DWORD)i != -1; v8 = v17)
    {
      v17 = i;
      result = v10[5];
      if (*v11 == 16777209)
      {
        v18 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v11, a3, (uint64_t)a4, a5, a6, a7, a8);
        v18 = result;
      }
      v19 = *(unsigned int *)(a2 + 8);
      if (v19 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v19 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v19) = v18;
      ++*(_DWORD *)(a2 + 8);
      v20 = *(unsigned int *)(a6 + 8);
      if (v20 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v20 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v20) = v8;
      ++*(_DWORD *)(a6 + 8);
      v21 = v10[20];
      v22 = *(_DWORD *)(v21 + 16 * v8 + 4);
      v23 = *(unsigned int *)(a3 + 8);
      if (v23 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v23 = *(unsigned int *)(a3 + 8);
        v21 = v10[20];
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v23) = v22;
      ++*(_DWORD *)(a3 + 8);
      v24 = *(_DWORD *)(v10[22] + 16 * *(unsigned int *)(v21 + 16 * v8 + 8));
      v25 = *(unsigned int *)(a5 + 8);
      if (v25 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v25 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v25) = v24;
      ++*(_DWORD *)(a5 + 8);
      v11 = (unsigned int *)(v10[20] + 16 * v17);
      i = *(unsigned int *)(v10[22] + 16 * v11[2] + 12);
    }
    *a4 = *v11;
  }
  return result;
}

void FstSearchLattice::checkSearchParametersValidityForArcGraph(FstSearchLattice *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLattice::makePartialResult(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  _QWORD v25[2];
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLatticeBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v24 = BestTrace;
  FstSearchLatticeBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v26 = v17;
      v27 = v19 - v17;
      v28 = v20 - v19;
      v29 = 0u;
      v30 = 0u;
      v31 = 0;
      v32 = 1879048192;
      v33 = 0;
      v34 = -1;
      v25[0] = &off_24C2149F8;
      v25[1] = 0xBFF0000000000000;
      v35 = *v18;
      v36 = v18[1];
      v37 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v25);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v25);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = a1[20] + 16 * v24;
  return (*(_DWORD *)(a1[22] + 16 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_209854110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLeafDurationBackoff::maybeGeneratePelMaps(FstSearchLeafDurationBackoff *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 248, (uint64_t)this + 232);
}

uint64_t FstSearchLeafDurationBackoff::maybeInitDurModel(FstSearchLeafDurationBackoff *this, const PicMgr *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1)
    v6 = 56;
  else
    v6 = 72;
  v7 = v16;
  v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!(_DWORD)v7)
      goto LABEL_13;
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  v9 = 0;
  v10 = v15;
  v11 = *((_QWORD *)this + 24);
  do
  {
    if (!(_WORD)v9 || (v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF))
      v13 = 0;
    else
      v13 = *(_WORD *)(*(_QWORD *)((char *)a2 + v6) + 2 * v12);
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_209854220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafDurationBackoff::advanceDeltas(FstSearchLeafDurationBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int ScoreAllowBackoff_updateNodeInSequence;
  uint64_t v20;
  __int16 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  int64x2_t *v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t *v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  unint64_t v83;
  unint64_t v84;
  int64x2_t v85;
  int64x2_t *v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  uint64_t v90;
  int64x2_t *v91;
  int64x2_t result;
  int64x2_t v93;
  int v94;
  int v95;
  SearchStats *v96;
  int v97;
  char *v98;
  int *v99;
  int v100;
  int v101;
  int v102;
  int v103;
  __int16 v104;
  __int16 v105;
  __int16 v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  __int16 v113;
  __int16 v114;
  __int16 v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  uint64_t *v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int v136;
  int64x2_t v137;
  int64x2_t v138;
  int v139[3];

  v8 = a2;
  v139[0] = a2;
  v137 = 0u;
  v138 = 0u;
  SnapTime::recordTime((SnapTime *)&v137, 1, 0, 0, 0);
  v99 = (int *)((char *)this + 304);
  *((_DWORD *)this + 76) = a3;
  v100 = *((_DWORD *)this + 2);
  v10 = *((unsigned int *)this + 68);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v110 = *((_DWORD *)this + 53);
    v121 = (uint64_t *)((char *)this + 216);
    v94 = *((unsigned __int8 *)this + 208);
    v98 = (char *)this + 280;
    do
    {
      v14 = *((_QWORD *)this + 33);
      v15 = *((_QWORD *)this + 5);
      v16 = 36 * v13;
      while (1)
      {
        v17 = *(unsigned int *)(v14 + v16 + 4);
        if (*(_DWORD *)(v15 + 160) != (_DWORD)v17)
          break;
        ++v13;
        v16 += 36;
        if (v13 >= v10)
          goto LABEL_78;
      }
      v112 = v12;
      v97 = v8;
      v96 = a4;
      v95 = a5;
      v111 = *(unsigned int *)(v14 + v16 + 4);
      if (*(_DWORD *)(v15 + 140) <= (int)v17)
        goto LABEL_19;
      if (*((_DWORD *)this + 19) + *((_DWORD *)this + 76) >= 5000)
        v18 = 5000;
      else
        v18 = *((_DWORD *)this + 19) + *((_DWORD *)this + 76);
      ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + v16 + 12), *(_DWORD *)(v14 + v16), v18);
      v20 = *((_QWORD *)this + 33) + v16;
      v21 = *(_WORD *)(v20 + 12);
      v22 = *(_DWORD *)(v20 + 28);
      v23 = *(_DWORD *)(v20 + 32);
      v24 = v94;
      if (v22 >= 1)
        v24 = v94 - v22;
      v25 = v24 & ((v22 - v94) >> 31);
      if (*(_WORD *)(v20 + 12))
      {
        v23 += v25;
        v22 -= v94;
      }
      v117 = v22;
      v119 = v23;
      v26 = *(_WORD *)(v20 + 12) ? v25 : 0;
      v27 = v26 + ScoreAllowBackoff_updateNodeInSequence;
      if (v26 + ScoreAllowBackoff_updateNodeInSequence - v100 <= *v99)
      {
        v29 = *(_QWORD *)(v20 + 4);
        v113 = *(_WORD *)(v20 + 14);
        v30 = *(_DWORD *)(v20 + 20);
        v107 = *(_DWORD *)(v20 + 16);
        v108 = v11;
        v31 = *(unsigned __int16 *)(v20 + 24);
        v105 = *(_WORD *)(v20 + 26);
        if (*v99 > v27)
          *v99 = v27;
        v32 = *((_DWORD *)this + 56);
        v33 = v32;
        v28 = v100;
        v115 = v31;
        if ((_DWORD)v31)
        {
          v34 = *v121;
          v35 = v31;
          v33 = *((_DWORD *)this + 56);
          do
          {
            v36 = *(_WORD *)(v34 + 2 * v30);
            if (v33 == *((_DWORD *)this + 57))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)v121, 1, 1);
              v33 = *((_DWORD *)this + 56);
              v34 = *((_QWORD *)this + 27);
            }
            *(_WORD *)(v34 + 2 * v33++) = v36;
            *((_DWORD *)this + 56) = v33;
            ++v30;
            --v35;
          }
          while (v35);
        }
        if (v33 == *((_DWORD *)this + 57))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)v121, 1, 1);
          v33 = *((_DWORD *)this + 56);
        }
        *(_WORD *)(*((_QWORD *)this + 27) + 2 * v33) = v21;
        *((_DWORD *)this + 56) = v33 + 1;
        v37 = *((unsigned int *)this + 72);
        v11 = v108;
        if (v37 == *((_DWORD *)this + 73))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v98, 1, 1);
          LODWORD(v37) = *((_DWORD *)this + 72);
        }
        v38 = *((_QWORD *)this + 35) + 36 * v37;
        *(_DWORD *)v38 = v27;
        *(_QWORD *)(v38 + 4) = v29;
        *(_WORD *)(v38 + 12) = v21;
        *(_WORD *)(v38 + 14) = v113;
        *(_DWORD *)(v38 + 16) = v107;
        *(_DWORD *)(v38 + 20) = v32;
        *(_WORD *)(v38 + 24) = v115 + 1;
        *(_WORD *)(v38 + 26) = v105;
        *(_DWORD *)(v38 + 28) = v117;
        *(_DWORD *)(v38 + 32) = v119;
        v39 = *((_DWORD *)this + 72);
        *((_DWORD *)this + 72) = v39 + 1;
        if (v112 == 2 * *((_DWORD *)this + 4))
          v11 = v39 + 1;
        ++v112;
        v17 = v111;
      }
      else
      {
LABEL_19:
        v28 = v100;
      }
      v40 = v17;
      do
      {
        v41 = *((_QWORD *)this + 5);
        v42 = *(_QWORD *)(v41 + 152);
        v43 = *(_DWORD *)(v42 + 4 * v40);
        v44 = *(_DWORD *)(v42 + 4 * (v40 + 1));
        v45 = *(_DWORD *)(v41 + 140);
        if (v45 <= v44)
        {
          if (v45 <= (int)v17 && *((_BYTE *)this + 428) != 0)
          {
            v65 = (v43 & 0xFFFFF) <= 0xFFFF3 ? v43 & 0xFFFFF : v43 & 0xFFFFF | 0xF00000;
            if (v65 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v134);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v65, (DgnString *)&v134, v66, v67, v68, v69, v70);
              v75 = &unk_209A6C820;
              if (v134.i32[2])
                v75 = (void *)v134.i64[0];
              xprintf("Seed from state %d score %d trace %d, %s\n", v71, v72, v73, v74, v17, *(unsigned int *)(*((_QWORD *)this + 33) + v16), *(unsigned int *)(*((_QWORD *)this + 33) + v16 + 8), v75);
              MiniFst::seed((uint64_t)this + 312, *(_DWORD *)(*((_QWORD *)this + 33) + v16), 0, *(_DWORD *)(*((_QWORD *)this + 33) + v16 + 8), v44);
              DgnString::~DgnString((DgnString *)&v134);
            }
          }
        }
        else
        {
          if (*((_DWORD *)this + 19) + *((_DWORD *)this + 76) >= 5000)
            v46 = 5000;
          else
            v46 = *((_DWORD *)this + 19) + *((_DWORD *)this + 76);
          v47 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v42 + 4 * v40), *(_DWORD *)(*((_QWORD *)this + 33) + v16) + ((*(_DWORD *)(v42 + 4 * v40) >> 20) & 0x3FFu), v46);
          v48 = *((_QWORD *)this + 33) + v16;
          if ((_WORD)v43)
            v50 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * (unsigned __int16)v43);
          else
            v50 = 0;
          v120 = v50;
          if ((_WORD)v43)
          {
            v49 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * (unsigned __int16)v43);
            v51 = v49 & (v49 >> 31);
          }
          else
          {
            v51 = 0;
          }
          v52 = v110;
          if (!(_WORD)v43)
            v52 = 0;
          v118 = (*(_DWORD *)(v48 + 28) & ~(*(int *)(v48 + 28) >> 31)) - v51 + v52;
          v53 = v118 + v47;
          v54 = *((_DWORD *)this + 76);
          if (v118 + v47 - v28 <= v54)
          {
            v109 = v11;
            v106 = *(_WORD *)(v48 + 14);
            v55 = *(_DWORD *)(v48 + 20);
            v102 = *(_DWORD *)(v48 + 16);
            v103 = *(_DWORD *)(v48 + 8);
            v56 = *(unsigned __int16 *)(v48 + 24);
            v104 = *(_WORD *)(v48 + 26);
            v101 = *(_DWORD *)(v48 + 32);
            if (v54 > v53)
              *v99 = v53;
            v57 = *((_DWORD *)this + 56);
            v116 = v57;
            v114 = v56;
            if ((_DWORD)v56)
            {
              v58 = *v121;
              v59 = v56;
              v57 = *((_DWORD *)this + 56);
              do
              {
                v60 = *(_WORD *)(v58 + 2 * v55);
                if (v57 == *((_DWORD *)this + 57))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)v121, 1, 1);
                  v57 = *((_DWORD *)this + 56);
                  v58 = *((_QWORD *)this + 27);
                }
                *(_WORD *)(v58 + 2 * v57++) = v60;
                *((_DWORD *)this + 56) = v57;
                ++v55;
                --v59;
              }
              while (v59);
            }
            if (v57 == *((_DWORD *)this + 57))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)v121, 1, 1);
              v57 = *((_DWORD *)this + 56);
            }
            *(_WORD *)(*((_QWORD *)this + 27) + 2 * v57) = v43;
            *((_DWORD *)this + 56) = v57 + 1;
            v61 = *((unsigned int *)this + 72);
            v11 = v109;
            v28 = v100;
            if (v61 == *((_DWORD *)this + 73))
            {
              DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v98, 1, 1);
              LODWORD(v61) = *((_DWORD *)this + 72);
            }
            v62 = *((_QWORD *)this + 35) + 36 * v61;
            *(_DWORD *)v62 = v53;
            *(_DWORD *)(v62 + 4) = v44;
            *(_DWORD *)(v62 + 8) = v103;
            *(_WORD *)(v62 + 12) = v43;
            *(_WORD *)(v62 + 14) = v106;
            *(_DWORD *)(v62 + 16) = v102 + ((v43 >> 20) & 0x3FF);
            *(_DWORD *)(v62 + 20) = v116;
            *(_WORD *)(v62 + 24) = v114 + 1;
            *(_WORD *)(v62 + 26) = v104;
            *(_DWORD *)(v62 + 28) = v120;
            *(_DWORD *)(v62 + 32) = v118 + v101;
            v63 = *((_DWORD *)this + 72);
            *((_DWORD *)this + 72) = v63 + 1;
            if (v112 == 2 * *((_DWORD *)this + 4))
              v11 = v63 + 1;
            ++v112;
          }
          v17 = v111;
        }
        v40 += 2;
      }
      while ((v43 & 0x80000000) == 0);
      v13 = (v13 + 1);
      v10 = *((unsigned int *)this + 68);
      v8 = v97;
      a4 = v96;
      a5 = v95;
      v12 = v112;
    }
    while (v13 < v10);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
LABEL_78:
  v136 = *((_DWORD *)this + 76) + v100;
  if (*((_BYTE *)this + 428))
    MiniFst::updateFrame((char *)this + 312, v99, v100, v8);
  v134 = 0u;
  v135 = 0u;
  SnapTime::recordTime((SnapTime *)&v134, 1, 0, 0, 0);
  v134 = vsubq_s64(v134, v137);
  v135 = vsubq_s64(v135, v138);
  v76 = (int64x2_t *)*((_QWORD *)this + 13);
  v77 = vaddq_s64(v76[1], v135);
  *v76 = vaddq_s64(*v76, v134);
  v76[1] = v77;
  v132 = 0u;
  v133 = 0u;
  SnapTime::recordTime((SnapTime *)&v132, 1, 0, 0, 0);
  if (v12 > 2 * *((_DWORD *)this + 4))
    FstSearchLeafDurationBackoff::applyCutoffOnEmitting((uint64_t)this, v11, &v136);
  v130 = 0u;
  v131 = 0u;
  SnapTime::recordTime((SnapTime *)&v130, 1, 0, 0, 0);
  v78 = vsubq_s64(v130, v132);
  v79 = (int64x2_t *)*((_QWORD *)this + 13);
  v80 = v79[3];
  v81 = vaddq_s64(v79[2], v78);
  v130 = v78;
  v131 = vsubq_s64(v131, v133);
  v82 = vaddq_s64(v80, v131);
  v79[2] = v81;
  v79[3] = v82;
  v128 = 0u;
  v129 = 0u;
  SnapTime::recordTime((SnapTime *)&v128, 1, 0, 0, 0);
  FstSearchLeafDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v83 = *((unsigned int *)this + 6);
  if ((_DWORD)v83)
  {
    v84 = *((unsigned int *)this + 68);
    if (v83 < v84)
      mrec_nth_element<FstSearchLeafDurationBackoffcmpTok>(*((_QWORD *)this + 33), v83, v84);
  }
  v126 = 0u;
  v127 = 0u;
  SnapTime::recordTime((SnapTime *)&v126, 1, 0, 0, 0);
  v85 = vsubq_s64(v126, v128);
  v86 = (int64x2_t *)*((_QWORD *)this + 13);
  v87 = v86[5];
  v88 = vaddq_s64(v86[4], v85);
  v126 = v85;
  v127 = vsubq_s64(v127, v129);
  v89 = vaddq_s64(v87, v127);
  v86[4] = v88;
  v86[5] = v89;
  v124 = 0u;
  v125 = 0u;
  SnapTime::recordTime((SnapTime *)&v124, 1, 0, 0, 0);
  *((_DWORD *)this + 72) = 0;
  v90 = *((unsigned int *)this + 68);
  *((_DWORD *)this + 38) = v90;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v90;
    if (*((_DWORD *)a4 + 2) > v90)
      LODWORD(v90) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v90;
  }
  if (*((_BYTE *)this + 428))
    FstSearchLeafDurationBackoff::seedFromMiniFst((uint64_t)this, v139);
  if (a5)
    FstSearchLeafDurationBackoff::propagateNulls(this, v136, v8, a4);
  *((_DWORD *)this + 74) = v8;
  v122 = 0u;
  v123 = 0u;
  SnapTime::recordTime((SnapTime *)&v122, 1, 0, 0, 0);
  v91 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v91[6], vsubq_s64(v122, v124));
  v93 = vaddq_s64(v91[7], vsubq_s64(v123, v125));
  v91[6] = result;
  v91[7] = v93;
  return result;
}

void sub_209854AA4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLeafDurationBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(unsigned int *)(this + 288);
  if (v4 > a2)
  {
    v6 = this;
    v7 = (_QWORD *)(this + 280);
    v8 = a2;
    this = mrec_nth_element<FstSearchLeafDurationBackoffcmpTok>(*(_QWORD *)(this + 280), a2, v4);
    v9 = *(_DWORD *)(*v7 + 36 * a2);
    if (*a3 > v9)
      *a3 = v9;
    v10 = *(_DWORD *)(v6 + 292);
    if (a2 > v10)
      this = DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v7, a2 - v10, 0);
    v11 = *(unsigned int *)(v6 + 288);
    if (v11 < a2)
    {
      v12 = v8 - v11;
      v13 = *v7 + 36 * v11 + 16;
      do
      {
        *(_QWORD *)(v13 - 16) = 0xFFFFFFFF00000000;
        *(_DWORD *)(v13 - 8) = -1;
        *(_WORD *)(v13 - 4) = -2;
        *(_QWORD *)v13 = 0;
        *(_WORD *)(v13 + 8) = 0;
        *(_QWORD *)(v13 + 12) = 0;
        v13 += 36;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 288) = a2;
  }
  return this;
}

uint64_t FstSearchLeafDurationBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v1 = this;
  v2 = *(unsigned int *)(this + 288);
  if ((_DWORD)v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 280), v2, 36);
    v3 = *(unsigned int *)(v1 + 288);
    *(_DWORD *)(v1 + 272) = 0;
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      for (i = 0; i < v3; ++i)
      {
        v7 = *(_QWORD *)(v1 + 280);
        if (!v4 || *(_DWORD *)(v7 + v4 + 4) != *(_DWORD *)(v7 + v4 - 32))
        {
          if (v5 == *(_DWORD *)(v1 + 276))
          {
            this = DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(v1 + 264, 1, 1);
            v5 = *(_DWORD *)(v1 + 272);
          }
          v8 = *(_QWORD *)(v1 + 264) + 36 * v5;
          v9 = *(_OWORD *)(v7 + v4);
          v10 = *(_OWORD *)(v7 + v4 + 16);
          *(_DWORD *)(v8 + 32) = *(_DWORD *)(v7 + v4 + 32);
          *(_OWORD *)v8 = v9;
          *(_OWORD *)(v8 + 16) = v10;
          v5 = *(_DWORD *)(v1 + 272) + 1;
          *(_DWORD *)(v1 + 272) = v5;
          v3 = *(unsigned int *)(v1 + 288);
        }
        v4 += 36;
      }
    }
  }
  else
  {
    *(_DWORD *)(this + 272) = 0;
  }
  return this;
}

uint64_t mrec_nth_element<FstSearchLeafDurationBackoffcmpTok>(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  char v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  char *v11;
  uint64_t i;
  char v13;
  uint64_t j;
  char v15;
  unint64_t v16;
  unint64_t v17;

  if (a3 >= 2)
  {
    v3 = 0;
    do
    {
      v4 = 0;
      v5 = (_DWORD *)(result + 36 * v3);
      v6 = &v5[9 * (a3 >> 1)];
      do
      {
        v7 = *((_BYTE *)v5 + v4);
        *((_BYTE *)v5 + v4) = *((_BYTE *)v6 + v4);
        *((_BYTE *)v6 + v4++) = v7;
      }
      while (v4 != 36);
      v8 = (_DWORD *)(result + 36 * (v3 + a3) - 36);
      v9 = (_DWORD *)(result + 36 * v3);
      do
      {
        v10 = v9 + 9;
        while (1)
        {
          v9 = v10;
          if (v10 >= v8)
            break;
          v10 += 9;
          if (*v9 > *v5)
          {
            v11 = (char *)v9;
            while (*v8 >= *v5)
            {
              v8 -= 9;
              if (v9 >= v8)
                goto LABEL_16;
            }
            for (i = 0; i != 36; ++i)
            {
              v13 = *v11;
              *v11++ = *((_BYTE *)v8 + i);
              *((_BYTE *)v8 + i) = v13;
            }
            v8 -= 9;
            break;
          }
        }
LABEL_16:
        ;
      }
      while (v9 < v8);
      if (*v9 > *v5)
        v9 -= 9;
      if (v9 > v5)
      {
        for (j = 0; j != 36; ++j)
        {
          v15 = *((_BYTE *)v9 + j);
          *((_BYTE *)v9 + j) = *((_BYTE *)v5 + j);
          *((_BYTE *)v5 + j) = v15;
        }
      }
      v16 = ((char *)v9 - (char *)v5) / 0x24uLL;
      if (v16 <= a2)
      {
        if (v16 >= a2)
          return result;
        v17 = v16 + 1;
        v3 += v17;
        a2 -= v17;
        v16 = a3 - v17;
      }
      a3 = v16;
    }
    while (v16 > 1);
  }
  return result;
}

uint64_t FstSearchLeafDurationBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[2];

  if (*(_BYTE *)(this + 428))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 336);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v5 = 0;
      v6 = 0;
      v20 = this + 264;
      v21 = (_QWORD *)(this + 160);
      do
      {
        v7 = (int *)(*(_QWORD *)(v2 + 328) + v5);
        v8 = *v7;
        v9 = v7[6];
        v10 = v7[7];
        v11 = v7[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v11 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v12 = -2 - v11;
        if (v10 == 16777213)
        {
          v10 = 16777209;
          if (*(_DWORD *)(*v21 + 36 * v12) == 16777209)
            v12 = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 24 * *(unsigned int *)(*v21 + 36 * v12 + 8) + 8);
        }
        v13 = *a2;
        v14 = *(unsigned int *)(v2 + 168);
        if (v14 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v21, 1, 1);
          LODWORD(v14) = *(_DWORD *)(v2 + 168);
        }
        v15 = *(_QWORD *)(v2 + 160) + 36 * v14;
        *(_DWORD *)v15 = v10;
        *(_DWORD *)(v15 + 4) = v13;
        *(_DWORD *)(v15 + 8) = -1;
        *(_DWORD *)(v15 + 12) = v8;
        *(_DWORD *)(v15 + 20) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        *(_DWORD *)(v15 + 16) = v12;
        *(_WORD *)(v15 + 28) = 0;
        *(_DWORD *)(v15 + 32) = 0;
        v16 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v16 + 1;
        v17 = *(unsigned int *)(v2 + 272);
        if (v17 == *(_DWORD *)(v2 + 276))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(v20, 1, 1);
          LODWORD(v17) = *(_DWORD *)(v2 + 272);
        }
        v18 = *(_QWORD *)(v2 + 264) + 36 * v17;
        *(_DWORD *)v18 = v8;
        *(_DWORD *)(v18 + 4) = v9;
        *(_DWORD *)(v18 + 8) = v16;
        *(_WORD *)(v18 + 12) = -2;
        *(_QWORD *)(v18 + 16) = 0;
        *(_WORD *)(v18 + 24) = 0;
        *(_QWORD *)(v18 + 28) = 0;
        ++*(_DWORD *)(v2 + 272);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        v19 = *(_DWORD *)(v2 + 336);
        if (v19 >= *(_DWORD *)(v2 + 20))
          v19 = *(_DWORD *)(v2 + 20);
        v5 += 36;
      }
      while (v6 < v19);
    }
  }
  return this;
}

void sub_209854FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *FstSearchLeafDurationBackoff::propagateNulls(FstSearchLeafDurationBackoff *this, int a2, int a3, SearchStats *a4)
{
  int v5;
  _QWORD *result;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  __int16 v25;
  int v26;
  int v27;
  __int16 v28;
  __int16 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  SearchStats *v54;
  int v55;
  int v56;
  int v57;
  __int16 v58;
  int v59;
  unsigned int v61;
  unint64_t v62;
  int v63;
  _QWORD *v64;
  __int16 v65;
  int v66;
  int v67;
  int v68;
  __int16 v69;
  __int16 v70;

  v5 = *((_DWORD *)this + 42);
  result = (_QWORD *)((char *)this + 264);
  v7 = *((_DWORD *)this + 68);
  v64 = result;
  if (!v7)
  {
    v43 = *((_DWORD *)this + 38);
    if (a4)
      goto LABEL_42;
    goto LABEL_43;
  }
  v53 = v5;
  v8 = 0;
  v54 = a4;
  v63 = a2;
  do
  {
    v9 = *(unsigned int *)(*((_QWORD *)this + 33) + 36 * v8 + 4);
    v10 = *((_QWORD *)this + 5);
    if (*(_DWORD *)(v10 + 160) != (_DWORD)v9
      && (*(_DWORD *)(v10 + 140) <= (int)v9 || (*(_DWORD *)(*(_QWORD *)(v10 + 152) + 4 * v9) & 0x40000000) != 0))
    {
      v11 = *(_DWORD *)(*((_QWORD *)this + 33) + 36 * v8 + 4);
      v61 = v11;
      v62 = v8;
      do
      {
        v12 = *((_QWORD *)this + 5);
        v13 = *(_QWORD *)(v12 + 152);
        v14 = *(_DWORD *)(v13 + 4 * v11);
        v15 = *(_DWORD *)(v13 + 4 * (v11 + 1));
        v16 = *(_DWORD *)(v12 + 140);
        if (v16 > v15)
          goto LABEL_32;
        v17 = (v14 & 0xFFFFF) <= 0xFFFF3 ? v14 & 0xFFFFF : v14 & 0xFFFFF | 0xF00000;
        if (v16 <= (int)v9 && v17 != 16777210)
          goto LABEL_32;
        v19 = (v14 >> 20) & 0x3FF;
        v20 = *result;
        v21 = *result + 36 * v8;
        v22 = *(_DWORD *)v21 + v19;
        if (v22 > a2)
          goto LABEL_32;
        v23 = *(_DWORD *)(v21 + 8);
        v24 = *(_WORD *)(v21 + 12);
        v25 = *(_WORD *)(v21 + 14);
        v27 = *(_DWORD *)(v21 + 16);
        v26 = *(_DWORD *)(v21 + 20);
        v28 = *(_WORD *)(v21 + 24);
        v29 = *(_WORD *)(v21 + 26);
        v30 = *(_DWORD *)(v21 + 32);
        v31 = v27 + v19;
        if (v17 == 16777210)
        {
          if (v7 != *((_DWORD *)this + 69))
            goto LABEL_31;
        }
        else
        {
          if (v17 == 16777214)
            v32 = v27 + v19;
          else
            v32 = 0;
          if (v17 == 16777214)
            v33 = 0;
          else
            v33 = v31;
          v34 = *((unsigned int *)this + 42);
          if (v34 == *((_DWORD *)this + 43))
          {
            v65 = v24;
            v69 = v25;
            v58 = v29;
            v59 = v26;
            v56 = v33;
            v57 = v23;
            v67 = v30;
            v55 = v32;
            DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, 1, 1);
            v32 = v55;
            v33 = v56;
            v24 = v65;
            v30 = v67;
            v23 = v57;
            v29 = v58;
            v26 = v59;
            v25 = v69;
            a2 = v63;
            result = v64;
            LODWORD(v34) = *((_DWORD *)this + 42);
          }
          v35 = 0;
          v36 = 0;
          v37 = *((_QWORD *)this + 20) + 36 * v34;
          *(_DWORD *)v37 = v17;
          *(_DWORD *)(v37 + 4) = a3;
          *(_DWORD *)(v37 + 8) = -1;
          *(_DWORD *)(v37 + 12) = v22 - v32;
          *(_DWORD *)(v37 + 16) = v23;
          *(_DWORD *)(v37 + 20) = v33;
          *(_DWORD *)(v37 + 24) = v26;
          *(_WORD *)(v37 + 28) = v28;
          *(_DWORD *)(v37 + 32) = v30;
          v23 = *((_DWORD *)this + 42);
          *((_DWORD *)this + 42) = v23 + 1;
          v7 = *((_DWORD *)this + 68);
          v28 = 0;
          v30 = 0;
          if (v7 != *((_DWORD *)this + 69))
            goto LABEL_30;
        }
        v68 = v30;
        v70 = v25;
        v38 = v24;
        v39 = v26;
        v66 = v31;
        v40 = v29;
        v41 = v23;
        DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)result, 1, 1);
        v23 = v41;
        v29 = v40;
        v31 = v66;
        v36 = v68;
        v26 = v39;
        v25 = v70;
        LODWORD(v9) = v61;
        v8 = v62;
        v24 = v38;
        a2 = v63;
        result = v64;
        v7 = *((_DWORD *)this + 68);
        v35 = v28;
LABEL_30:
        v20 = *result;
        v28 = v35;
        v30 = v36;
LABEL_31:
        v42 = v20 + 36 * v7;
        *(_DWORD *)v42 = v22;
        *(_DWORD *)(v42 + 4) = v15;
        *(_DWORD *)(v42 + 8) = v23;
        *(_WORD *)(v42 + 12) = v24;
        *(_WORD *)(v42 + 14) = v25;
        *(_DWORD *)(v42 + 16) = v31;
        *(_DWORD *)(v42 + 20) = v26;
        *(_WORD *)(v42 + 24) = v28;
        *(_WORD *)(v42 + 26) = v29;
        *(_DWORD *)(v42 + 28) = 0;
        *(_DWORD *)(v42 + 32) = v30;
        v7 = *((_DWORD *)this + 68) + 1;
        *((_DWORD *)this + 68) = v7;
LABEL_32:
        v11 += 2;
      }
      while ((v14 & 0x80000000) == 0);
    }
    ++v8;
  }
  while (v8 < v7);
  v43 = *((_DWORD *)this + 38);
  if (v7 > v43)
  {
    mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*((_QWORD *)this + 33) + 36 * v43), v7 - v43, 36);
    result = v64;
    v43 = *((_DWORD *)this + 38);
    v7 = *((_DWORD *)this + 68);
  }
  a4 = v54;
  v5 = v53;
  if (v43 < v7)
  {
    v44 = v43;
    v45 = 36 * v43;
    do
    {
      v46 = *result + v45;
      if (*(_DWORD *)(v46 + 4) != *(_DWORD *)(*result + 36 * (v44 - 1) + 4))
      {
        v47 = *result + 36 * v43;
        v48 = *(_OWORD *)v46;
        v49 = *(_OWORD *)(v46 + 16);
        *(_DWORD *)(v47 + 32) = *(_DWORD *)(v46 + 32);
        *(_OWORD *)v47 = v48;
        *(_OWORD *)(v47 + 16) = v49;
        ++v43;
        v7 = *((_DWORD *)this + 68);
      }
      ++v44;
      v45 += 36;
    }
    while (v44 < v7);
  }
  if (v54)
LABEL_42:
    *((_DWORD *)a4 + 1) += *((_DWORD *)this + 42) - v5;
LABEL_43:
  v50 = *((_DWORD *)this + 69);
  if (v43 > v50)
  {
    DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)result, v43 - v50, 0);
    result = v64;
    v7 = *((_DWORD *)this + 68);
  }
  if (v7 < v43)
  {
    v51 = v43 - (unint64_t)v7;
    v52 = *result + 36 * v7 + 16;
    do
    {
      *(_QWORD *)(v52 - 16) = 0xFFFFFFFF00000000;
      *(_DWORD *)(v52 - 8) = -1;
      *(_WORD *)(v52 - 4) = -2;
      *(_QWORD *)v52 = 0;
      *(_WORD *)(v52 + 8) = 0;
      *(_QWORD *)(v52 + 12) = 0;
      v52 += 36;
      --v51;
    }
    while (v51);
  }
  *((_DWORD *)this + 68) = v43;
  return result;
}

uint64_t FstSearchLeafDurationBackoff::collectTraces(FstSearchLeafDurationBackoff *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  __int16 v34;
  unsigned int v35;
  unint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unsigned int v53;

  v2 = *((unsigned int *)this + 42);
  v53 = 0;
  v52 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v52 = v3;
    v53 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v53);
  }
  v5 = *((unsigned int *)this + 68);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = v52;
    v8 = (unsigned int *)(*((_QWORD *)this + 33) + 8);
    do
    {
      v10 = *v8;
      v8 += 9;
      v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        v5 = *((unsigned int *)this + 68);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  v11 = *((_DWORD *)this + 42);
  if (v11)
  {
    v12 = (uint64_t *)((char *)this + 160);
    v13 = v52;
    v14 = v11 - 1;
    do
    {
      v15 = v14;
      if (*((_DWORD *)v13 + v14))
      {
        v16 = *(unsigned int *)(*v12 + 36 * v14 + 16);
        if ((_DWORD)v16 != -1)
          *((_DWORD *)v13 + v16) = 1;
      }
      --v14;
    }
    while (v15);
    v17 = *((_DWORD *)this + 42);
    v50 = 0;
    v51 = 0;
    if (v17)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = v52;
        if (*((_DWORD *)v52 + v19))
        {
          v22 = *v12;
          if (v19 != v20)
          {
            v23 = (__int128 *)(v22 + 36 * v19);
            v24 = v22 + 36 * v20;
            v25 = *v23;
            v26 = v23[1];
            *(_DWORD *)(v24 + 32) = *((_DWORD *)v23 + 8);
            *(_OWORD *)v24 = v25;
            *(_OWORD *)(v24 + 16) = v26;
            v22 = *v12;
          }
          v27 = v22 + 36 * v20;
          v30 = *(_DWORD *)(v27 + 16);
          v28 = (_DWORD *)(v27 + 16);
          v29 = v30;
          if (v30 != -1)
            *v28 = *((_DWORD *)v21 + v29);
          v31 = v51;
          if (*(_WORD *)(v22 + 36 * v20 + 28))
          {
            v32 = 0;
            v33 = v51;
            do
            {
              v34 = *(_WORD *)(*((_QWORD *)this + 27) + 2 * (v32 + *(_DWORD *)(v22 + 36 * v20 + 24)));
              if (v33 == HIDWORD(v51))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v50, 1, 1);
                v33 = v51;
                v18 = v50;
                v22 = *v12;
              }
              *(_WORD *)(v18 + 2 * v33++) = v34;
              LODWORD(v51) = v33;
              ++v32;
            }
            while (v32 < *(unsigned __int16 *)(v22 + 36 * v20 + 28));
          }
          *(_DWORD *)(v22 + 36 * v20 + 24) = v31;
          *((_DWORD *)v52 + v19) = v20++;
          v17 = *((_DWORD *)this + 42);
        }
        ++v19;
      }
      while (v19 < v17);
      v35 = *((_DWORD *)this + 43);
      if (v20 > v35)
      {
        DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, v20 - v35, 0);
        v17 = *((_DWORD *)this + 42);
      }
      if (v17 < v20)
      {
        v36 = v20 - (unint64_t)v17;
        v37 = (_DWORD *)(*v12 + 36 * v17 + 32);
        do
        {
          *((_OWORD *)v37 - 2) = xmmword_209A6C7D0;
          *((_QWORD *)v37 - 2) = 0xFFFFFFFFLL;
          *(v37 - 2) = 0;
          *((_WORD *)v37 - 2) = 0;
          *v37 = 0;
          v37 += 9;
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v20 = 0;
    v50 = 0;
    v51 = 0;
  }
  *((_DWORD *)this + 42) = v20;
  v38 = *((unsigned int *)this + 68);
  if ((_DWORD)v38)
  {
    v39 = 0;
    v40 = v51;
    v41 = *((_QWORD *)this + 33);
    do
    {
      if (*(_WORD *)(v41 + 36 * v39 + 24))
      {
        v42 = 0;
        LODWORD(v43) = v40;
        do
        {
          v44 = *(_WORD *)(*((_QWORD *)this + 27) + 2 * (v42 + *(_DWORD *)(v41 + 36 * v39 + 20)));
          if ((_DWORD)v43 == HIDWORD(v51))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v50, 1, 1);
            LODWORD(v43) = v51;
            v41 = *((_QWORD *)this + 33);
          }
          *(_WORD *)(v50 + 2 * v43) = v44;
          v43 = (v43 + 1);
          LODWORD(v51) = v43;
          ++v42;
        }
        while (v42 < *(unsigned __int16 *)(v41 + 36 * v39 + 24));
        v38 = *((unsigned int *)this + 68);
      }
      else
      {
        v43 = v40;
      }
      *(_DWORD *)(v41 + 36 * v39++ + 20) = v40;
      v40 = v43;
    }
    while (v39 < v38);
  }
  else
  {
    LODWORD(v43) = v51;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 216, &v50, 0, v43);
  v45 = *((unsigned int *)this + 68);
  if ((_DWORD)v45)
  {
    v46 = v52;
    v47 = (_DWORD *)(*((_QWORD *)this + 33) + 8);
    do
    {
      v48 = *v47;
      if ((_DWORD)v48 != -1)
        *v47 = *((_DWORD *)v46 + v48);
      v47 += 9;
      --v45;
    }
    while (v45);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v50);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v52);
}

void sub_20985576C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a11);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafDurationBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchLeafDurationBackoff::advanceDeltas((FstSearchLeafDurationBackoff *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchLeafDurationBackoff::collectTraces((FstSearchLeafDurationBackoff *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeafDurationBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  this[68] = 0;
  return this;
}

double FstSearchLeafDurationBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLeafDurationBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeafDurationBackoff::beginTopRecPassSyncRecog(FstSearchLeafDurationBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 312, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 106) = result;
    *((_BYTE *)this + 428) = 1;
  }
  return result;
}

uint64_t FstSearchLeafDurationBackoff::endTopRecPassSyncRecog(FstSearchLeafDurationBackoff *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLeafDurationBackoff::generateTraceTokensFromTraces((unint64_t)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 76) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

unint64_t FstSearchLeafDurationBackoff::generateTraceTokensFromTraces(unint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x2x2_t v14;
  unint64_t v15;
  float *v16;

  v1 = this;
  v2 = (_QWORD *)(this + 176);
  v3 = *(unsigned int *)(this + 168);
  v4 = *(_DWORD *)(this + 188);
  if (v3 > v4)
    this = DgnArray<CWIDAC>::reallocElts(this + 176, v3 - v4, 0);
  v5 = *(unsigned int *)(v1 + 184);
  if (v5 < v3)
  {
    v6 = v3 - v5;
    v7 = (_DWORD *)(*v2 + 24 * v5 + 20);
    do
    {
      *(_OWORD *)(v7 - 5) = xmmword_209A6C810;
      *((_WORD *)v7 - 2) = 0;
      *v7 = 0;
      v7 += 6;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)(v1 + 184) = v3;
  v8 = *(unsigned int *)(v1 + 168);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)(v1 + 176);
    v12 = 24 * v8;
    v13 = *(_QWORD *)(v1 + 160) + 28;
    do
    {
      *(_DWORD *)(v13 - 20) = v10;
      v14 = *(float32x2x2_t *)(v13 - 16);
      v15 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
      v16 = (float *)(v11 + v9);
      vst2_f32(v16, v14);
      v16 += 4;
      *(_WORD *)v16 = *(_WORD *)v13;
      *(_DWORD *)(v11 + v9 + 20) = *(_DWORD *)(v13 + 4);
      ++v10;
      v9 += 24;
      v13 += 36;
    }
    while (v12 != v9);
  }
  return this;
}

void FstSearchLeafDurationBackoff::printSize(FstSearchLeafDurationBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  int v126;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126)
    v15 = v125;
  else
    v15 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A6C820, a3, &unk_209A6C820, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A6C820);
  v20 = (a3 + 1);
  v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126)
    v26 = v125;
  else
    v26 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126)
    v31 = v125;
  else
    v31 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126)
    v36 = v125;
  else
    v36 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v36, 4, 4, 0);
  v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126)
    v41 = v125;
  else
    v41 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v42 = 16;
  v43 = *((unsigned int *)this + 42);
  v44 = 34 * v43;
  if ((int)v43 <= 0)
    v44 = 0;
  v45 = v44 + v42;
  v46 = v44 + v42 + 34 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126)
    v51 = v125;
  else
    v51 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v52 = 16;
  v53 = *((_DWORD *)this + 46);
  v54 = 22 * v53;
  if (v53 <= 0)
    v54 = 0;
  v55 = v54 + v52;
  v56 = v54 + v52 + 22 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126)
    v61 = v125;
  else
    v61 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v61, v56, v55, 0);
  v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v62 = 12;
  else
    v62 = 16;
  v63 = *((unsigned int *)this + 56);
  v64 = *((_DWORD *)this + 57);
  if (v64 >= v63)
  {
    v65 = 0;
    if ((int)v63 > 0)
      v62 = (v62 | 2) + 2 * (v63 - 1);
    v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    v65 = 2 * v63;
    v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126)
    v71 = v125;
  else
    v71 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_209A6C820, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v72 = 16;
  v73 = *((unsigned int *)this + 68);
  v74 = 32 * v73;
  if ((int)v73 <= 0)
    v74 = 0;
  v75 = v74 | v72;
  v76 = (v74 | v72) + 32 * (*((_DWORD *)this + 69) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126)
    v81 = v125;
  else
    v81 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_209A6C820, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v82 = 16;
  v83 = *((unsigned int *)this + 72);
  v84 = 32 * v83;
  if ((int)v83 <= 0)
    v84 = 0;
  v85 = v84 | v82;
  v86 = (v84 | v82) + 32 * (*((_DWORD *)this + 73) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126)
    v91 = v125;
  else
    v91 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_209A6C820, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126)
    v96 = v125;
  else
    v96 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_209A6C820, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126)
    v101 = v125;
  else
    v101 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_209A6C820, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126)
    v106 = v125;
  else
    v106 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_209A6C820, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v107 = sizeObject((uint64_t)this + 312, 0);
  v108 = sizeObject((uint64_t)this + 312, 1);
  v109 = sizeObject((uint64_t)this + 312, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126)
    v114 = v125;
  else
    v114 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_209A6C820, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  v123 = 0;
  v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126)
    v119 = v125;
  else
    v119 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_209A6C820, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_209856244(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafDurationBackoff::getBestTrace(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if ((a4 & 1) != 0)
    v4 = 0;
  else
    v4 = *(unsigned int *)(a1 + 152);
  v5 = *(unsigned int *)(a1 + 272);
  if (v4 >= v5)
    goto LABEL_21;
  v6 = 36 * v4;
  v7 = 1879048192;
  v8 = 0xFFFFFFFFLL;
  do
  {
    v9 = *(_QWORD *)(a1 + 264);
    if (!a4 || (v10 = *(unsigned int *)(v9 + v6 + 8), (_DWORD)v10 == -1))
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4))
        goto LABEL_19;
      v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2)
      *(_BYTE *)(*a2 + v10) = 1;
    if (a3)
      *(_BYTE *)(*a3 + v10) = 1;
    v11 = *(_QWORD *)(a1 + 160) + 36 * v10;
    v12 = *(_DWORD *)(v11 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v11 + 4));
    if (v7 > v12)
      v8 = v10;
    if (v7 >= v12)
      v7 = v12;
    v5 = *(unsigned int *)(a1 + 272);
LABEL_19:
    ++v4;
    v6 += 36;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    v13 = *(unsigned int *)(a1 + 168);
    v8 = 0xFFFFFFFFLL;
    while (v13)
    {
      --v13;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(_QWORD *)(a1 + 160) + 36 * v13) == 16777213)
      {
        if (a2)
          *(_BYTE *)(*a2 + v13) = 1;
        v8 = v13;
        if (a3)
          *(_BYTE *)(*a3 + v13) = 1;
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLeafDurationBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchLeafDurationBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 36 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchLeafDurationBackoff::createLatticeNodes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6, _QWORD *a7)
{
  uint64_t v9;
  BOOL v10;
  int Node;
  uint64_t result;
  unsigned int v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int *v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  _QWORD *v46;

  v9 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v9)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(4 * v9, 0);
    *(_DWORD *)(a2 + 8) = v9;
  }
  Node = Lattice<WordLatticeLC>::createNode(a4);
  result = a3;
  v13 = *(_DWORD *)(a3 + 8);
  if (v13 == *(_DWORD *)(a3 + 12))
  {
    DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    result = a3;
    v13 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v13) = Node;
  ++*(_DWORD *)(result + 8);
  v14 = *(_DWORD *)(a1 + 168);
  v15 = a6;
  v16 = (uint64_t *)a2;
  if (v14)
  {
    v17 = (v14 - 1);
    v18 = 36 * v17;
    result = 0xFFFFFFFFLL;
    v46 = a7;
    do
    {
      v19 = *v16;
      *(_DWORD *)(*v16 + 4 * v17) = -1;
      v20 = *v15;
      if (*(_BYTE *)(*v15 + v17))
      {
        v21 = *(_QWORD *)(a1 + 160);
        v22 = *(_QWORD *)(a1 + 88);
        v23 = *(_DWORD *)(v22 + 4 * *(unsigned int *)(v21 + v18 + 4));
        if (*(_BYTE *)(*a7 + v17))
        {
          if (*(_BYTE *)(*v15 + v17) != 1 || (_DWORD)result == -1)
          {
            v25 = *(_DWORD *)(v22 + 4 * *(unsigned int *)(v21 + v18 + 4));
            v26 = result;
            v27 = Lattice<WordLatticeLC>::createNode(a4);
            v28 = a3;
            v16 = (uint64_t *)a2;
            *(_DWORD *)(*(_QWORD *)a2 + 4 * v17) = *(_DWORD *)(a3 + 8);
            v29 = *(unsigned int *)(a3 + 8);
            if (v29 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              v28 = a3;
              v16 = (uint64_t *)a2;
              v29 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)v28 + 4 * v29) = v27;
            v30 = *(_DWORD *)(v28 + 8);
            *(_DWORD *)(v28 + 8) = v30 + 1;
            v15 = a6;
            v20 = *a6;
            if (*(_BYTE *)(*a6 + v17) == 1)
              result = v30;
            else
              result = v26;
            v21 = *(_QWORD *)(a1 + 160);
            v23 = v25;
          }
          else
          {
            *(_DWORD *)(v19 + 4 * v17) = result;
          }
        }
        v31 = *(_DWORD *)(v21 + v18 + 8);
        v32 = *(_QWORD *)(a1 + 176);
        v33 = (_DWORD *)(v32 + 24 * v31);
        v34 = v33[2];
        if ((v33[2] & 0x80000000) != 0)
        {
          *v33 += v23;
        }
        else
        {
          if (*(_DWORD *)(v21 + v18) == 16777209)
          {
            v35 = *a5 + 16 * v34;
            v37 = (_DWORD *)(v35 + 8);
            v36 = *(unsigned int *)(v35 + 8);
            v38 = *(_QWORD *)(a1 + 176);
            if (v36 == *(_DWORD *)(v35 + 12))
            {
              v44 = v23;
              v45 = result;
              DgnPrimArray<unsigned int>::reallocElts(v35, 1, 1);
              v23 = v44;
              result = v45;
              v16 = (uint64_t *)a2;
              v15 = a6;
              v36 = *v37;
              v21 = *(_QWORD *)(a1 + 160);
              v38 = *(_QWORD *)(a1 + 176);
              v20 = *a6;
            }
            *(_DWORD *)(*(_QWORD *)v35 + 4 * v36) = v17;
            ++*v37;
            v34 = v33[2];
            a7 = v46;
          }
          else
          {
            *(_BYTE *)(*a7 + v34) = 1;
            v38 = v32;
          }
          v39 = v21 + 36 * v34;
          v40 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v39 + 4));
          v41 = (int *)(v38 + 24 * *(unsigned int *)(v39 + 8));
          v42 = v23 + *v33 - v40;
          v43 = *v41;
          LODWORD(v41) = v41[1];
          *v33 = v42 - v43;
          *(_DWORD *)(v32 + 24 * v31 + 4) -= (_DWORD)v41;
          *(_BYTE *)(v20 + v34) = 2;
        }
      }
      --v17;
      v18 -= 36;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t FstSearchLeafDurationBackoff::buildWordLattice(unint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, unsigned __int8 a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v23, *(unsigned int *)(a1 + 168));
  v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafDurationBackoff::createLatticeNodes(a1, (uint64_t)&v26, (uint64_t)&v24, (uint64_t)a2, v23, a3, a4);
  v9 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = v25;
    do
    {
      if (*(_BYTE *)(*a3 + v10))
      {
        v12 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v12 + 36 * v10) != 16777209)
        {
          v13 = *(_QWORD *)(a1 + 176) + 24 * *(unsigned int *)(v12 + 36 * v10 + 8);
          v14 = *(unsigned int *)(v13 + 8);
          if ((_DWORD)v14 == -1)
            v15 = 0;
          else
            v15 = v11 - *(_DWORD *)(v26 + 4 * v14);
          v16 = *(unsigned int *)(v24 + 4 * v15);
          if (*(_BYTE *)(*a4 + v10))
            FstSearchLeafDurationBackoff::createLatticeLink(a1, v10, (int *)v13, 0xFFFFFFFFLL, v16, (const WordLatticeLC *)*(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v10))), a2, (uint64_t)v8, a5);
          v17 = v23[0];
          if (*(_DWORD *)(v23[0] + 16 * v10 + 8))
          {
            v18 = 0;
            do
            {
              v19 = *(unsigned int *)(*(_QWORD *)(v17 + 16 * v10) + 4 * v18);
              FstSearchLeafDurationBackoff::createLatticeLink(a1, v10, (int *)v13, v19, v16, (const WordLatticeLC *)*(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v19))), a2, (uint64_t)v8, a5);
              ++v18;
              v17 = v23[0];
            }
            while (v18 < *(unsigned int *)(v23[0] + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v9);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v24);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v26);
}

void sub_2098569A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeafDurationBackoff::createLatticeLink(unint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v12;
  unsigned int v13;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  _QWORD v36[2];
  _QWORD v37[2];
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  __int128 v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  __int128 v52;
  _DWORD v53[2];
  __int128 v54;

  v12 = a5;
  v13 = a4;
  v17 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    v18 = 0;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 24 * *(unsigned int *)(v17 + 36 * a4 + 8) + 8) == a2)
  {
    v18 = (_DWORD *)(*(_QWORD *)(a1 + 176) + 24 * *(unsigned int *)(v17 + 36 * a4 + 8));
  }
  else
  {
    v18 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v17 + 36 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v53);
  v19 = a3[1];
  if (v18)
  {
    v19 += v18[1];
    v20 = *v18 + *a3;
  }
  else
  {
    v20 = *a3;
  }
  if (v53[0] >> 25 == 126)
  {
    v21 = 0;
    v22 = v19;
    if ((v13 & 0x80000000) != 0)
    {
LABEL_11:
      v23 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    v21 = *(_DWORD *)(a1 + 136);
    v22 = v19 - v21;
    if ((v13 & 0x80000000) != 0)
      goto LABEL_11;
  }
  v23 = *(_DWORD *)(a1 + 140);
  v22 -= v23;
LABEL_14:
  v24 = a3[5];
  if (v18)
    v24 += v18[5];
  v25 = v20 - v19 - v24;
  v26 = a3[2];
  v27 = *(_QWORD *)(a1 + 160);
  if (v26 == -1)
  {
    v29 = 0;
    if (a9)
      goto LABEL_22;
  }
  else
  {
    v28 = *(_DWORD *)(v27 + 36 * v26 + 4);
    if (a9)
    {
      if (v28 >= 1)
        --v28;
      v29 = (v28 >> 1) + 1;
LABEL_22:
      v30 = *(_DWORD *)(v27 + 36 * a2 + 4);
      if (v30 >= 1)
        --v30;
      v31 = (v30 >> 1) + 1;
      v32 = v31 - v29;
      if ((v13 & 0x80000000) == 0)
      {
        v33 = *(_DWORD *)(v27 + 36 * v13 + 4);
        if (v33 >= 1)
          --v33;
        v34 = v33 >> 1;
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    v29 = v28 + 1;
  }
  v31 = *(_DWORD *)(v27 + 36 * a2 + 4) + 1;
  v32 = v31 - v29;
  if ((v13 & 0x80000000) == 0)
  {
    v34 = *(_DWORD *)(v27 + 36 * v13 + 4);
LABEL_31:
    v35 = v34 - v31 + 1;
    goto LABEL_33;
  }
LABEL_32:
  v35 = 0;
LABEL_33:
  v38 = v29;
  v39 = v32;
  v40 = v35;
  v41 = v22;
  v42 = 0;
  v43 = v21;
  v44 = v25;
  v45 = v24;
  v46 = v23;
  v47 = xmmword_209A6C7F0;
  v48 = 0;
  v49 = -1;
  v37[0] = &off_24C2149F8;
  v37[1] = 0xBFF0000000000000;
  v50 = v53[0];
  v51 = v53[1];
  v52 = v54;
  v36[0] = 0;
  v36[1] = 0;
  FstSearchLeafDurationBackoff::buildLinkSegmentation(a1, (uint64_t)v36, (uint64_t)a3, v29, a9);
  if (v18)
    FstSearchLeafDurationBackoff::buildLinkSegmentation(a1, (uint64_t)v36, (uint64_t)v18, v31, a9);
  v49 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v36, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v12, a6, (WordLatticeLC *)v37);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v36);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v37);
}

void sub_209856C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&a11);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLeafDurationBackoff::buildLinkSegmentation(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  unsigned int v6;
  unint64_t v10;
  unsigned int v11;
  int v12;
  __int16 v13;
  unsigned __int16 v14;
  int v15;

  if (a5)
    v5 = 2;
  else
    v5 = 1;
  v6 = *(unsigned __int16 *)(a3 + 16);
  if (*(_WORD *)(a3 + 16))
  {
    v10 = result;
    v11 = 0;
    v12 = 0;
    v13 = *(_WORD *)(*(_QWORD *)(result + 56) + 136);
    v14 = -1;
    do
    {
      v15 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 216) + 2 * (v11 + *(_DWORD *)(a3 + 12)));
      if (v15 != v14)
      {
        if (v12)
        {
          result = FstSearchLeafLatticeDurationBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
          a4 += v12;
          v6 = *(unsigned __int16 *)(a3 + 16);
          v14 = v15;
          v12 = 0;
        }
        else
        {
          v14 = *(_WORD *)(*(_QWORD *)(v10 + 216) + 2 * (v11 + *(_DWORD *)(a3 + 12)));
        }
      }
      ++v12;
      v11 += v5;
    }
    while (v11 < v6);
    if (v12)
      return FstSearchLeafLatticeDurationBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
  }
  return result;
}

uint64_t FstSearchLeafDurationBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 428))
    return MiniFst::beginTopFstSyncRecog(this + 312);
  return this;
}

uint64_t FstSearchLeafDurationBackoff::endTopRecSyncRecog(FstSearchLeafDurationBackoff *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeafDurationBackoff::getBestExitScore(FstSearchLeafDurationBackoff *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 75) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 68);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 36 * v1;
  do
  {
    v7 = *((_QWORD *)this + 33) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 36 * v8 + 4) == *((_DWORD *)this + 74))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 68);
      }
    }
    ++v1;
    v6 += 36;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v14 = *(_DWORD *)(v9 + 36 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 75) = *(_DWORD *)(v9 + 36 * v12 + 16);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_209856F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafDurationBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLeafDurationBackoff *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 68);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 33);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 9;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

_QWORD *FstSearchLeafDurationBackoff::seedTheory(FstSearchLeafDurationBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 36 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(_QWORD *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    *(_WORD *)(v12 + 28) = 0;
    *(_DWORD *)(v12 + 32) = 0;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 68);
  if (v14 == *((_DWORD *)this + 69))
  {
    DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 264, 1, 1);
    v14 = *((_DWORD *)this + 68);
  }
  v15 = *((_QWORD *)this + 33) + 36 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_QWORD *)(v15 + 16) = 0;
  *(_WORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 28) = 0;
  LODWORD(v15) = *((_DWORD *)this + 68) + 1;
  *((_DWORD *)this + 68) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchLeafDurationBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchLeafDurationBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 300);
  if ((_DWORD)v8 != -1)
  {
    v9 = result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 36 * v8);
    for (i = v10[4]; (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = *(_QWORD *)(v9 + 40);
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = *(_QWORD *)(v9 + 160);
      v21 = *(_DWORD *)(v20 + 36 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = *(_QWORD *)(v9 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v20 + 36 * v8 + 12);
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(*(_QWORD *)(v9 + 160) + 36 * v16);
      i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLeafDurationBackoff::checkSearchParametersValidityForArcGraph(FstSearchLeafDurationBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchLeafDurationBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _DWORD v28[2];
  __int128 v29;

  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    v9 = a4;
    LODWORD(v11) = 0;
    v12 = a2;
    v13 = a2;
    do
    {
      v14 = (_DWORD *)(*(_QWORD *)(a1 + 160) + 36 * v13);
      if (*v14 == 16777209)
        v11 = v11;
      else
        v11 = (v11 + 1);
      v13 = v14[4];
    }
    while ((_DWORD)v13 != -1);
    v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15)
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      v17 = v11 - v16;
      v18 = *(_QWORD *)a3 + 32 * v16;
      do
      {
        *(_QWORD *)v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_209A593D0;
        *(_QWORD *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if ((_DWORD)v11)
    {
      v19 = *(_QWORD *)(a1 + 160);
      v20 = -16;
      do
      {
        v21 = (unsigned int *)(v19 + 36 * v12);
        v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            v23 = v22 - 1;
            if (v22 < 1)
              v23 = v22;
            v20 = (v23 >> 1) + 1;
          }
          else
          {
            v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            v24 = v22 - 1;
            if (v22 < 1)
              v24 = v21[1];
            v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16)
            v25 = v22 + 1;
          else
            v25 = v20;
          v26 = v28[1];
          v11 = (v11 - 1);
          v27 = *(_QWORD *)a3 + 32 * v11;
          *(_DWORD *)v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          v19 = *(_QWORD *)(a1 + 160);
          v20 = -16;
        }
        v12 = *(unsigned int *)(v19 + 36 * v12 + 16);
      }
      while ((_DWORD)v12 != -1);
    }
  }
}

uint64_t FstSearchLeafDurationBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLeafDurationBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchLeafDurationBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 36 * v24;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_2098577D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLeafDuration::maybeGeneratePelMaps(FstSearchLeafDuration *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 248, (uint64_t)this + 232);
}

uint64_t FstSearchLeafDuration::maybeInitDurModel(FstSearchLeafDuration *this, const PicMgr *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1)
    v6 = 56;
  else
    v6 = 72;
  v7 = v16;
  v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!(_DWORD)v7)
      goto LABEL_13;
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  v9 = 0;
  v10 = v15;
  v11 = *((_QWORD *)this + 24);
  do
  {
    if (!(_WORD)v9 || (v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF))
      v13 = 0;
    else
      v13 = *(_WORD *)(*(_QWORD *)((char *)a2 + v6) + 2 * v12);
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_2098578E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafDuration::advanceDeltas(FstSearchLeafDuration *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  int ScoreNoBackoff;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  int64x2_t *v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t *v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  unint64_t v86;
  unint64_t v87;
  int64x2_t v88;
  int64x2_t *v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  uint64_t v93;
  int64x2_t *v94;
  int64x2_t result;
  int64x2_t v96;
  int v97;
  int v98;
  SearchStats *v99;
  int v100;
  char *v101;
  int *v102;
  int v103;
  int v104;
  int v105;
  int v106;
  __int16 v107;
  __int16 v108;
  __int16 v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  __int16 v116;
  __int16 v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t *v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int v138;
  int64x2_t v139;
  int64x2_t v140;
  int v141[3];

  v8 = a2;
  v141[0] = a2;
  v139 = 0u;
  v140 = 0u;
  SnapTime::recordTime((SnapTime *)&v139, 1, 0, 0, 0);
  v102 = (int *)((char *)this + 304);
  *((_DWORD *)this + 76) = a3;
  v103 = *((_DWORD *)this + 2);
  v10 = *((unsigned int *)this + 68);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v112 = *((_DWORD *)this + 53);
    v123 = (uint64_t *)((char *)this + 216);
    v97 = *((unsigned __int8 *)this + 208);
    v101 = (char *)this + 280;
    do
    {
      v14 = *((_QWORD *)this + 33);
      v15 = *((_QWORD *)this + 5);
      v16 = 36 * v13;
      while (1)
      {
        v17 = *(unsigned int *)(v14 + v16 + 4);
        if (*(_DWORD *)(v15 + 160) != (_DWORD)v17)
          break;
        ++v13;
        v16 += 36;
        if (v13 >= v10)
          goto LABEL_73;
      }
      v114 = v12;
      v98 = a5;
      v99 = a4;
      v100 = v8;
      v113 = *(unsigned int *)(v14 + v16 + 4);
      if (*(_DWORD *)(v15 + 140) <= (int)v17)
      {
        v29 = v103;
      }
      else
      {
        v18 = *(_DWORD *)(v14 + v16);
        v19 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + v16 + 12))
            + v18;
        v20 = *((_QWORD *)this + 33) + v16;
        v21 = *(_WORD *)(v20 + 12);
        v22 = *(_DWORD *)(v20 + 28);
        v23 = *(_DWORD *)(v20 + 32);
        v24 = v97;
        v25 = v22 - v97;
        if (v22 >= 1)
          v24 = v97 - v22;
        v26 = v24 & (v25 >> 31);
        if (*(_WORD *)(v20 + 12))
          v23 += v26;
        else
          v25 = *(_DWORD *)(v20 + 28);
        if (*(_WORD *)(v20 + 12))
          v27 = v26;
        else
          v27 = 0;
        v28 = v19 + v27;
        v29 = v103;
        if (v19 + v27 - v103 <= *v102)
        {
          v119 = v25;
          v121 = v23;
          v30 = *(_QWORD *)(v20 + 4);
          v117 = *(_WORD *)(v20 + 14);
          v31 = *(_DWORD *)(v20 + 20);
          v115 = *(_DWORD *)(v20 + 16);
          v32 = *(unsigned __int16 *)(v20 + 24);
          v109 = *(_WORD *)(v20 + 26);
          v110 = v11;
          if (*v102 > v28)
            *v102 = v28;
          v33 = *((_DWORD *)this + 56);
          v34 = v33;
          v35 = v32;
          if ((_DWORD)v32)
          {
            v36 = *v123;
            v37 = v32;
            v34 = *((_DWORD *)this + 56);
            do
            {
              v38 = *(_WORD *)(v36 + 2 * v31);
              if (v34 == *((_DWORD *)this + 57))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)v123, 1, 1);
                v34 = *((_DWORD *)this + 56);
                v36 = *((_QWORD *)this + 27);
              }
              *(_WORD *)(v36 + 2 * v34++) = v38;
              *((_DWORD *)this + 56) = v34;
              ++v31;
              --v37;
            }
            while (v37);
          }
          if (v34 == *((_DWORD *)this + 57))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)v123, 1, 1);
            v34 = *((_DWORD *)this + 56);
          }
          *(_WORD *)(*((_QWORD *)this + 27) + 2 * v34) = v21;
          *((_DWORD *)this + 56) = v34 + 1;
          v39 = *((unsigned int *)this + 72);
          v11 = v110;
          if (v39 == *((_DWORD *)this + 73))
          {
            DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v101, 1, 1);
            LODWORD(v39) = *((_DWORD *)this + 72);
          }
          v40 = *((_QWORD *)this + 35) + 36 * v39;
          *(_DWORD *)v40 = v28;
          *(_QWORD *)(v40 + 4) = v30;
          *(_WORD *)(v40 + 12) = v21;
          *(_WORD *)(v40 + 14) = v117;
          *(_DWORD *)(v40 + 16) = v115;
          *(_DWORD *)(v40 + 20) = v33;
          *(_WORD *)(v40 + 24) = v35 + 1;
          *(_WORD *)(v40 + 26) = v109;
          *(_DWORD *)(v40 + 28) = v119;
          *(_DWORD *)(v40 + 32) = v121;
          v41 = *((_DWORD *)this + 72);
          *((_DWORD *)this + 72) = v41 + 1;
          if (v114 == 2 * *((_DWORD *)this + 4))
            v11 = v41 + 1;
          ++v114;
          v29 = v103;
          v17 = v113;
        }
      }
      v42 = v17;
      do
      {
        v43 = *((_QWORD *)this + 5);
        v44 = *(_QWORD *)(v43 + 152);
        v45 = *(_DWORD *)(v44 + 4 * v42);
        v46 = *(_DWORD *)(v44 + 4 * (v42 + 1));
        v47 = *(_DWORD *)(v43 + 140);
        if (v47 <= v46)
        {
          if (v47 <= (int)v17 && *((_BYTE *)this + 428) != 0)
          {
            v68 = (v45 & 0xFFFFF) <= 0xFFFF3 ? v45 & 0xFFFFF : v45 & 0xFFFFF | 0xF00000;
            if (v68 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v136);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v68, (DgnString *)&v136, v69, v70, v71, v72, v73);
              v78 = &unk_209A6C820;
              if (v136.i32[2])
                v78 = (void *)v136.i64[0];
              xprintf("Seed from state %d score %d trace %d, %s\n", v74, v75, v76, v77, v17, *(unsigned int *)(*((_QWORD *)this + 33) + v16), *(unsigned int *)(*((_QWORD *)this + 33) + v16 + 8), v78);
              MiniFst::seed((uint64_t)this + 312, *(_DWORD *)(*((_QWORD *)this + 33) + v16), 0, *(_DWORD *)(*((_QWORD *)this + 33) + v16 + 8), v46);
              DgnString::~DgnString((DgnString *)&v136);
            }
          }
        }
        else
        {
          ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v44 + 4 * v42));
          v49 = *((_QWORD *)this + 33) + v16;
          v50 = ScoreNoBackoff + ((v45 >> 20) & 0x3FF) + *(_DWORD *)v49;
          if ((_WORD)v45)
            v52 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * (unsigned __int16)v45);
          else
            v52 = 0;
          v122 = v52;
          if ((_WORD)v45)
          {
            v51 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * (unsigned __int16)v45);
            v53 = v51 & (v51 >> 31);
          }
          else
          {
            v53 = 0;
          }
          v54 = v112;
          if (!(_WORD)v45)
            v54 = 0;
          v120 = (*(_DWORD *)(v49 + 28) & ~(*(int *)(v49 + 28) >> 31)) - v53 + v54;
          v55 = v50 + v120;
          v56 = v50 + v120 - v29;
          v57 = *((_DWORD *)this + 76);
          if (v56 <= v57)
          {
            v111 = v11;
            v108 = *(_WORD *)(v49 + 14);
            v58 = *(_DWORD *)(v49 + 20);
            v105 = *(_DWORD *)(v49 + 16);
            v106 = *(_DWORD *)(v49 + 8);
            v59 = *(unsigned __int16 *)(v49 + 24);
            v107 = *(_WORD *)(v49 + 26);
            v104 = *(_DWORD *)(v49 + 32);
            if (v57 > v55)
              *v102 = v55;
            v60 = *((_DWORD *)this + 56);
            v118 = v60;
            v116 = v59;
            if ((_DWORD)v59)
            {
              v61 = *v123;
              v62 = v59;
              v60 = *((_DWORD *)this + 56);
              do
              {
                v63 = *(_WORD *)(v61 + 2 * v58);
                if (v60 == *((_DWORD *)this + 57))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)v123, 1, 1);
                  v60 = *((_DWORD *)this + 56);
                  v61 = *((_QWORD *)this + 27);
                }
                *(_WORD *)(v61 + 2 * v60++) = v63;
                *((_DWORD *)this + 56) = v60;
                ++v58;
                --v62;
              }
              while (v62);
            }
            if (v60 == *((_DWORD *)this + 57))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)v123, 1, 1);
              v60 = *((_DWORD *)this + 56);
            }
            *(_WORD *)(*((_QWORD *)this + 27) + 2 * v60) = v45;
            *((_DWORD *)this + 56) = v60 + 1;
            v64 = *((unsigned int *)this + 72);
            v11 = v111;
            v29 = v103;
            if (v64 == *((_DWORD *)this + 73))
            {
              DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v101, 1, 1);
              LODWORD(v64) = *((_DWORD *)this + 72);
            }
            v65 = *((_QWORD *)this + 35) + 36 * v64;
            *(_DWORD *)v65 = v55;
            *(_DWORD *)(v65 + 4) = v46;
            *(_DWORD *)(v65 + 8) = v106;
            *(_WORD *)(v65 + 12) = v45;
            *(_WORD *)(v65 + 14) = v108;
            *(_DWORD *)(v65 + 16) = v105 + ((v45 >> 20) & 0x3FF);
            *(_DWORD *)(v65 + 20) = v118;
            *(_WORD *)(v65 + 24) = v116 + 1;
            *(_WORD *)(v65 + 26) = v107;
            *(_DWORD *)(v65 + 28) = v122;
            *(_DWORD *)(v65 + 32) = v120 + v104;
            v66 = *((_DWORD *)this + 72);
            *((_DWORD *)this + 72) = v66 + 1;
            if (v114 == 2 * *((_DWORD *)this + 4))
              v11 = v66 + 1;
            ++v114;
          }
          v17 = v113;
        }
        v42 += 2;
      }
      while ((v45 & 0x80000000) == 0);
      v13 = (v13 + 1);
      v10 = *((unsigned int *)this + 68);
      v8 = v100;
      a4 = v99;
      a5 = v98;
      v12 = v114;
    }
    while (v13 < v10);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
LABEL_73:
  v138 = *((_DWORD *)this + 76) + v103;
  if (*((_BYTE *)this + 428))
    MiniFst::updateFrame((char *)this + 312, v102, v103, v8);
  v136 = 0u;
  v137 = 0u;
  SnapTime::recordTime((SnapTime *)&v136, 1, 0, 0, 0);
  v136 = vsubq_s64(v136, v139);
  v137 = vsubq_s64(v137, v140);
  v79 = (int64x2_t *)*((_QWORD *)this + 13);
  v80 = vaddq_s64(v79[1], v137);
  *v79 = vaddq_s64(*v79, v136);
  v79[1] = v80;
  v134 = 0u;
  v135 = 0u;
  SnapTime::recordTime((SnapTime *)&v134, 1, 0, 0, 0);
  if (v12 > 2 * *((_DWORD *)this + 4))
    FstSearchLeafDurationBackoff::applyCutoffOnEmitting((uint64_t)this, v11, &v138);
  v132 = 0u;
  v133 = 0u;
  SnapTime::recordTime((SnapTime *)&v132, 1, 0, 0, 0);
  v81 = vsubq_s64(v132, v134);
  v82 = (int64x2_t *)*((_QWORD *)this + 13);
  v83 = v82[3];
  v84 = vaddq_s64(v82[2], v81);
  v132 = v81;
  v133 = vsubq_s64(v133, v135);
  v85 = vaddq_s64(v83, v133);
  v82[2] = v84;
  v82[3] = v85;
  v130 = 0u;
  v131 = 0u;
  SnapTime::recordTime((SnapTime *)&v130, 1, 0, 0, 0);
  FstSearchLeafDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v86 = *((unsigned int *)this + 6);
  if ((_DWORD)v86)
  {
    v87 = *((unsigned int *)this + 68);
    if (v86 < v87)
      mrec_nth_element<FstSearchLeafDurationBackoffcmpTok>(*((_QWORD *)this + 33), v86, v87);
  }
  v128 = 0u;
  v129 = 0u;
  SnapTime::recordTime((SnapTime *)&v128, 1, 0, 0, 0);
  v88 = vsubq_s64(v128, v130);
  v89 = (int64x2_t *)*((_QWORD *)this + 13);
  v90 = v89[5];
  v91 = vaddq_s64(v89[4], v88);
  v128 = v88;
  v129 = vsubq_s64(v129, v131);
  v92 = vaddq_s64(v90, v129);
  v89[4] = v91;
  v89[5] = v92;
  v126 = 0u;
  v127 = 0u;
  SnapTime::recordTime((SnapTime *)&v126, 1, 0, 0, 0);
  *((_DWORD *)this + 72) = 0;
  v93 = *((unsigned int *)this + 68);
  *((_DWORD *)this + 38) = v93;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v93;
    if (*((_DWORD *)a4 + 2) > v93)
      LODWORD(v93) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v93;
  }
  if (*((_BYTE *)this + 428))
    FstSearchLeafDuration::seedFromMiniFst((uint64_t)this, v141);
  if (a5)
    FstSearchLeafDurationBackoff::propagateNulls(this, v138, v8, a4);
  *((_DWORD *)this + 74) = v8;
  v124 = 0u;
  v125 = 0u;
  SnapTime::recordTime((SnapTime *)&v124, 1, 0, 0, 0);
  v94 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v94[6], vsubq_s64(v124, v126));
  v96 = vaddq_s64(v94[7], vsubq_s64(v125, v127));
  v94[6] = result;
  v94[7] = v96;
  return result;
}

void sub_209858130(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLeafDuration::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[2];

  if (*(_BYTE *)(this + 428))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 336);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v5 = 0;
      v6 = 0;
      v20 = this + 264;
      v21 = (_QWORD *)(this + 160);
      do
      {
        v7 = (int *)(*(_QWORD *)(v2 + 328) + v5);
        v8 = *v7;
        v9 = v7[6];
        v10 = v7[7];
        v11 = v7[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v11 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v12 = -2 - v11;
        if (v10 == 16777213)
        {
          v10 = 16777209;
          if (*(_DWORD *)(*v21 + 36 * v12) == 16777209)
            v12 = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 24 * *(unsigned int *)(*v21 + 36 * v12 + 8) + 8);
        }
        v13 = *a2;
        v14 = *(unsigned int *)(v2 + 168);
        if (v14 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v21, 1, 1);
          LODWORD(v14) = *(_DWORD *)(v2 + 168);
        }
        v15 = *(_QWORD *)(v2 + 160) + 36 * v14;
        *(_DWORD *)v15 = v10;
        *(_DWORD *)(v15 + 4) = v13;
        *(_DWORD *)(v15 + 8) = -1;
        *(_DWORD *)(v15 + 12) = v8;
        *(_DWORD *)(v15 + 20) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        *(_DWORD *)(v15 + 16) = v12;
        *(_WORD *)(v15 + 28) = 0;
        *(_DWORD *)(v15 + 32) = 0;
        v16 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v16 + 1;
        v17 = *(unsigned int *)(v2 + 272);
        if (v17 == *(_DWORD *)(v2 + 276))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(v20, 1, 1);
          LODWORD(v17) = *(_DWORD *)(v2 + 272);
        }
        v18 = *(_QWORD *)(v2 + 264) + 36 * v17;
        *(_DWORD *)v18 = v8;
        *(_DWORD *)(v18 + 4) = v9;
        *(_DWORD *)(v18 + 8) = v16;
        *(_WORD *)(v18 + 12) = -2;
        *(_QWORD *)(v18 + 16) = 0;
        *(_WORD *)(v18 + 24) = 0;
        *(_QWORD *)(v18 + 28) = 0;
        ++*(_DWORD *)(v2 + 272);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        v19 = *(_DWORD *)(v2 + 336);
        if (v19 >= *(_DWORD *)(v2 + 20))
          v19 = *(_DWORD *)(v2 + 20);
        v5 += 36;
      }
      while (v6 < v19);
    }
  }
  return this;
}

void sub_209858338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafDuration::collectTraces(FstSearchLeafDuration *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  __int16 v34;
  unsigned int v35;
  unint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unsigned int v53;

  v2 = *((unsigned int *)this + 42);
  v53 = 0;
  v52 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v52 = v3;
    v53 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v53);
  }
  v5 = *((unsigned int *)this + 68);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = v52;
    v8 = (unsigned int *)(*((_QWORD *)this + 33) + 8);
    do
    {
      v10 = *v8;
      v8 += 9;
      v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        v5 = *((unsigned int *)this + 68);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  v11 = *((_DWORD *)this + 42);
  if (v11)
  {
    v12 = (uint64_t *)((char *)this + 160);
    v13 = v52;
    v14 = v11 - 1;
    do
    {
      v15 = v14;
      if (*((_DWORD *)v13 + v14))
      {
        v16 = *(unsigned int *)(*v12 + 36 * v14 + 16);
        if ((_DWORD)v16 != -1)
          *((_DWORD *)v13 + v16) = 1;
      }
      --v14;
    }
    while (v15);
    v17 = *((_DWORD *)this + 42);
    v50 = 0;
    v51 = 0;
    if (v17)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = v52;
        if (*((_DWORD *)v52 + v19))
        {
          v22 = *v12;
          if (v19 != v20)
          {
            v23 = (__int128 *)(v22 + 36 * v19);
            v24 = v22 + 36 * v20;
            v25 = *v23;
            v26 = v23[1];
            *(_DWORD *)(v24 + 32) = *((_DWORD *)v23 + 8);
            *(_OWORD *)v24 = v25;
            *(_OWORD *)(v24 + 16) = v26;
            v22 = *v12;
          }
          v27 = v22 + 36 * v20;
          v30 = *(_DWORD *)(v27 + 16);
          v28 = (_DWORD *)(v27 + 16);
          v29 = v30;
          if (v30 != -1)
            *v28 = *((_DWORD *)v21 + v29);
          v31 = v51;
          if (*(_WORD *)(v22 + 36 * v20 + 28))
          {
            v32 = 0;
            v33 = v51;
            do
            {
              v34 = *(_WORD *)(*((_QWORD *)this + 27) + 2 * (v32 + *(_DWORD *)(v22 + 36 * v20 + 24)));
              if (v33 == HIDWORD(v51))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v50, 1, 1);
                v33 = v51;
                v18 = v50;
                v22 = *v12;
              }
              *(_WORD *)(v18 + 2 * v33++) = v34;
              LODWORD(v51) = v33;
              ++v32;
            }
            while (v32 < *(unsigned __int16 *)(v22 + 36 * v20 + 28));
          }
          *(_DWORD *)(v22 + 36 * v20 + 24) = v31;
          *((_DWORD *)v52 + v19) = v20++;
          v17 = *((_DWORD *)this + 42);
        }
        ++v19;
      }
      while (v19 < v17);
      v35 = *((_DWORD *)this + 43);
      if (v20 > v35)
      {
        DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, v20 - v35, 0);
        v17 = *((_DWORD *)this + 42);
      }
      if (v17 < v20)
      {
        v36 = v20 - (unint64_t)v17;
        v37 = (_DWORD *)(*v12 + 36 * v17 + 32);
        do
        {
          *((_OWORD *)v37 - 2) = xmmword_209A6C7D0;
          *((_QWORD *)v37 - 2) = 0xFFFFFFFFLL;
          *(v37 - 2) = 0;
          *((_WORD *)v37 - 2) = 0;
          *v37 = 0;
          v37 += 9;
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v20 = 0;
    v50 = 0;
    v51 = 0;
  }
  *((_DWORD *)this + 42) = v20;
  v38 = *((unsigned int *)this + 68);
  if ((_DWORD)v38)
  {
    v39 = 0;
    v40 = v51;
    v41 = *((_QWORD *)this + 33);
    do
    {
      if (*(_WORD *)(v41 + 36 * v39 + 24))
      {
        v42 = 0;
        LODWORD(v43) = v40;
        do
        {
          v44 = *(_WORD *)(*((_QWORD *)this + 27) + 2 * (v42 + *(_DWORD *)(v41 + 36 * v39 + 20)));
          if ((_DWORD)v43 == HIDWORD(v51))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v50, 1, 1);
            LODWORD(v43) = v51;
            v41 = *((_QWORD *)this + 33);
          }
          *(_WORD *)(v50 + 2 * v43) = v44;
          v43 = (v43 + 1);
          LODWORD(v51) = v43;
          ++v42;
        }
        while (v42 < *(unsigned __int16 *)(v41 + 36 * v39 + 24));
        v38 = *((unsigned int *)this + 68);
      }
      else
      {
        v43 = v40;
      }
      *(_DWORD *)(v41 + 36 * v39++ + 20) = v40;
      v40 = v43;
    }
    while (v39 < v38);
  }
  else
  {
    LODWORD(v43) = v51;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 216, &v50, 0, v43);
  v45 = *((unsigned int *)this + 68);
  if ((_DWORD)v45)
  {
    v46 = v52;
    v47 = (_DWORD *)(*((_QWORD *)this + 33) + 8);
    do
    {
      v48 = *v47;
      if ((_DWORD)v48 != -1)
        *v47 = *((_DWORD *)v46 + v48);
      v47 += 9;
      --v45;
    }
    while (v45);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v50);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v52);
}

void sub_2098586DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a11);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafDuration::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchLeafDuration::advanceDeltas((FstSearchLeafDuration *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchLeafDuration::collectTraces((FstSearchLeafDuration *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeafDuration::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  this[68] = 0;
  return this;
}

double FstSearchLeafDuration::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLeafDuration::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeafDuration::beginTopRecPassSyncRecog(FstSearchLeafDuration *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 312, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 106) = result;
    *((_BYTE *)this + 428) = 1;
  }
  return result;
}

uint64_t FstSearchLeafDuration::endTopRecPassSyncRecog(FstSearchLeafDuration *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLeafDurationBackoff::generateTraceTokensFromTraces((unint64_t)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 76) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLeafDuration::printSize(FstSearchLeafDuration *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  int v126;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126)
    v15 = v125;
  else
    v15 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A6C820, a3, &unk_209A6C820, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A6C820);
  v20 = (a3 + 1);
  v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126)
    v26 = v125;
  else
    v26 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126)
    v31 = v125;
  else
    v31 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126)
    v36 = v125;
  else
    v36 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v36, 4, 4, 0);
  v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126)
    v41 = v125;
  else
    v41 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v42 = 16;
  v43 = *((unsigned int *)this + 42);
  v44 = 34 * v43;
  if ((int)v43 <= 0)
    v44 = 0;
  v45 = v44 + v42;
  v46 = v44 + v42 + 34 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126)
    v51 = v125;
  else
    v51 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v52 = 16;
  v53 = *((_DWORD *)this + 46);
  v54 = 22 * v53;
  if (v53 <= 0)
    v54 = 0;
  v55 = v54 + v52;
  v56 = v54 + v52 + 22 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126)
    v61 = v125;
  else
    v61 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v61, v56, v55, 0);
  v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v62 = 12;
  else
    v62 = 16;
  v63 = *((unsigned int *)this + 56);
  v64 = *((_DWORD *)this + 57);
  if (v64 >= v63)
  {
    v65 = 0;
    if ((int)v63 > 0)
      v62 = (v62 | 2) + 2 * (v63 - 1);
    v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    v65 = 2 * v63;
    v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126)
    v71 = v125;
  else
    v71 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_209A6C820, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v72 = 16;
  v73 = *((unsigned int *)this + 68);
  v74 = 32 * v73;
  if ((int)v73 <= 0)
    v74 = 0;
  v75 = v74 | v72;
  v76 = (v74 | v72) + 32 * (*((_DWORD *)this + 69) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126)
    v81 = v125;
  else
    v81 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_209A6C820, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v82 = 16;
  v83 = *((unsigned int *)this + 72);
  v84 = 32 * v83;
  if ((int)v83 <= 0)
    v84 = 0;
  v85 = v84 | v82;
  v86 = (v84 | v82) + 32 * (*((_DWORD *)this + 73) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126)
    v91 = v125;
  else
    v91 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_209A6C820, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126)
    v96 = v125;
  else
    v96 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_209A6C820, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126)
    v101 = v125;
  else
    v101 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_209A6C820, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126)
    v106 = v125;
  else
    v106 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_209A6C820, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v107 = sizeObject((uint64_t)this + 312, 0);
  v108 = sizeObject((uint64_t)this + 312, 1);
  v109 = sizeObject((uint64_t)this + 312, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126)
    v114 = v125;
  else
    v114 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_209A6C820, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  v123 = 0;
  v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126)
    v119 = v125;
  else
    v119 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_209A6C820, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_2098590D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLeafDuration::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchLeafDurationBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 36 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchLeafDuration::buildWordLattice(unint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, unsigned __int8 a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v23, *(unsigned int *)(a1 + 168));
  v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafDurationBackoff::createLatticeNodes(a1, (uint64_t)&v26, (uint64_t)&v24, (uint64_t)a2, v23, a3, a4);
  v9 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = v25;
    do
    {
      if (*(_BYTE *)(*a3 + v10))
      {
        v12 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v12 + 36 * v10) != 16777209)
        {
          v13 = *(_QWORD *)(a1 + 176) + 24 * *(unsigned int *)(v12 + 36 * v10 + 8);
          v14 = *(unsigned int *)(v13 + 8);
          if ((_DWORD)v14 == -1)
            v15 = 0;
          else
            v15 = v11 - *(_DWORD *)(v26 + 4 * v14);
          v16 = *(unsigned int *)(v24 + 4 * v15);
          if (*(_BYTE *)(*a4 + v10))
            FstSearchLeafDuration::createLatticeLink(a1, v10, (int *)v13, 0xFFFFFFFFLL, v16, (const WordLatticeLC *)*(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v10))), a2, (uint64_t)v8, a5);
          v17 = v23[0];
          if (*(_DWORD *)(v23[0] + 16 * v10 + 8))
          {
            v18 = 0;
            do
            {
              v19 = *(unsigned int *)(*(_QWORD *)(v17 + 16 * v10) + 4 * v18);
              FstSearchLeafDuration::createLatticeLink(a1, v10, (int *)v13, v19, v16, (const WordLatticeLC *)*(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v19))), a2, (uint64_t)v8, a5);
              ++v18;
              v17 = v23[0];
            }
            while (v18 < *(unsigned int *)(v23[0] + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v9);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v24);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v26);
}

void sub_209859424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeafDuration::createLatticeLink(unint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v12;
  unsigned int v13;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  _QWORD v36[2];
  _QWORD v37[2];
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  __int128 v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  __int128 v52;
  _DWORD v53[2];
  __int128 v54;

  v12 = a5;
  v13 = a4;
  v17 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    v18 = 0;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 24 * *(unsigned int *)(v17 + 36 * a4 + 8) + 8) == a2)
  {
    v18 = (_DWORD *)(*(_QWORD *)(a1 + 176) + 24 * *(unsigned int *)(v17 + 36 * a4 + 8));
  }
  else
  {
    v18 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v17 + 36 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v53);
  v19 = a3[1];
  if (v18)
  {
    v19 += v18[1];
    v20 = *v18 + *a3;
  }
  else
  {
    v20 = *a3;
  }
  if (v53[0] >> 25 == 126)
  {
    v21 = 0;
    v22 = v19;
    if ((v13 & 0x80000000) != 0)
    {
LABEL_11:
      v23 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    v21 = *(_DWORD *)(a1 + 136);
    v22 = v19 - v21;
    if ((v13 & 0x80000000) != 0)
      goto LABEL_11;
  }
  v23 = *(_DWORD *)(a1 + 140);
  v22 -= v23;
LABEL_14:
  v24 = a3[5];
  if (v18)
    v24 += v18[5];
  v25 = v20 - v19 - v24;
  v26 = a3[2];
  v27 = *(_QWORD *)(a1 + 160);
  if (v26 == -1)
  {
    v29 = 0;
    if (a9)
      goto LABEL_22;
  }
  else
  {
    v28 = *(_DWORD *)(v27 + 36 * v26 + 4);
    if (a9)
    {
      if (v28 >= 1)
        --v28;
      v29 = (v28 >> 1) + 1;
LABEL_22:
      v30 = *(_DWORD *)(v27 + 36 * a2 + 4);
      if (v30 >= 1)
        --v30;
      v31 = (v30 >> 1) + 1;
      v32 = v31 - v29;
      if ((v13 & 0x80000000) == 0)
      {
        v33 = *(_DWORD *)(v27 + 36 * v13 + 4);
        if (v33 >= 1)
          --v33;
        v34 = v33 >> 1;
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    v29 = v28 + 1;
  }
  v31 = *(_DWORD *)(v27 + 36 * a2 + 4) + 1;
  v32 = v31 - v29;
  if ((v13 & 0x80000000) == 0)
  {
    v34 = *(_DWORD *)(v27 + 36 * v13 + 4);
LABEL_31:
    v35 = v34 - v31 + 1;
    goto LABEL_33;
  }
LABEL_32:
  v35 = 0;
LABEL_33:
  v38 = v29;
  v39 = v32;
  v40 = v35;
  v41 = v22;
  v42 = 0;
  v43 = v21;
  v44 = v25;
  v45 = v24;
  v46 = v23;
  v47 = xmmword_209A6C7F0;
  v48 = 0;
  v49 = -1;
  v37[0] = &off_24C2149F8;
  v37[1] = 0xBFF0000000000000;
  v50 = v53[0];
  v51 = v53[1];
  v52 = v54;
  v36[0] = 0;
  v36[1] = 0;
  FstSearchLeafDurationBackoff::buildLinkSegmentation(a1, (uint64_t)v36, (uint64_t)a3, v29, a9);
  if (v18)
    FstSearchLeafDurationBackoff::buildLinkSegmentation(a1, (uint64_t)v36, (uint64_t)v18, v31, a9);
  v49 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v36, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v12, a6, (WordLatticeLC *)v37);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v36);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v37);
}

void sub_2098596EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&a11);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafDuration::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 428))
    return MiniFst::beginTopFstSyncRecog(this + 312);
  return this;
}

uint64_t FstSearchLeafDuration::endTopRecSyncRecog(FstSearchLeafDuration *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeafDuration::getBestExitScore(FstSearchLeafDuration *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 75) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 68);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 36 * v1;
  do
  {
    v7 = *((_QWORD *)this + 33) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 36 * v8 + 4) == *((_DWORD *)this + 74))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 68);
      }
    }
    ++v1;
    v6 += 36;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v14 = *(_DWORD *)(v9 + 36 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 75) = *(_DWORD *)(v9 + 36 * v12 + 16);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_209859880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafDuration::getBestScoreMaybeUpdateFstNode(FstSearchLeafDuration *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 68);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 33);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 9;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

_QWORD *FstSearchLeafDuration::seedTheory(FstSearchLeafDuration *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 36 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(_QWORD *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    *(_WORD *)(v12 + 28) = 0;
    *(_DWORD *)(v12 + 32) = 0;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 68);
  if (v14 == *((_DWORD *)this + 69))
  {
    DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 264, 1, 1);
    v14 = *((_DWORD *)this + 68);
  }
  v15 = *((_QWORD *)this + 33) + 36 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_QWORD *)(v15 + 16) = 0;
  *(_WORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 28) = 0;
  LODWORD(v15) = *((_DWORD *)this + 68) + 1;
  *((_DWORD *)this + 68) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchLeafDurationBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchLeafDuration::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 300);
  if ((_DWORD)v8 != -1)
  {
    v9 = result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 36 * v8);
    for (i = v10[4]; (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = *(_QWORD *)(v9 + 40);
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = *(_QWORD *)(v9 + 160);
      v21 = *(_DWORD *)(v20 + 36 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = *(_QWORD *)(v9 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v20 + 36 * v8 + 12);
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(*(_QWORD *)(v9 + 160) + 36 * v16);
      i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLeafDuration::checkSearchParametersValidityForArcGraph(FstSearchLeafDuration *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLeafDuration::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLeafDurationBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchLeafDurationBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 36 * v24;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_209859FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationBackoff::maybeInitDurModel(FstSearchDurationBackoff *this, const PicMgr *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1)
    v6 = 56;
  else
    v6 = 72;
  v7 = v16;
  v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!(_DWORD)v7)
      goto LABEL_13;
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  v9 = 0;
  v10 = v15;
  v11 = *((_QWORD *)this + 24);
  do
  {
    if (!(_WORD)v9 || (v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF))
      v13 = 0;
    else
      v13 = *(_WORD *)(*(_QWORD *)((char *)a2 + v6) + 2 * v12);
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_20985A0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchDurationBackoff::advanceDeltas(FstSearchDurationBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int ScoreAllowBackoff_updateNodeInSequence;
  uint64_t v20;
  __int16 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  __int16 v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  int64x2_t *v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t *v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  unint64_t v80;
  unint64_t v81;
  int64x2_t v82;
  int64x2_t *v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  uint64_t v87;
  int64x2_t *v88;
  int64x2_t result;
  int64x2_t v90;
  int v91;
  int v92;
  SearchStats *v93;
  int v94;
  char *v95;
  int *v96;
  int v97;
  int v98;
  int v99;
  __int16 v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int v120;
  int64x2_t v121;
  int64x2_t v122;
  int v123[3];

  v8 = a2;
  v123[0] = a2;
  v121 = 0u;
  v122 = 0u;
  SnapTime::recordTime((SnapTime *)&v121, 1, 0, 0, 0);
  v96 = (int *)((char *)this + 256);
  *((_DWORD *)this + 64) = a3;
  v105 = *((_DWORD *)this + 2);
  v10 = *((unsigned int *)this + 56);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v102 = *((_DWORD *)this + 53);
    v91 = *((unsigned __int8 *)this + 208);
    v95 = (char *)this + 232;
    do
    {
      v14 = *((_QWORD *)this + 27);
      v15 = *((_QWORD *)this + 5);
      v16 = 28 * v13;
      while (1)
      {
        v17 = *(unsigned int *)(v14 + v16 + 4);
        if (*(_DWORD *)(v15 + 160) != (_DWORD)v17)
          break;
        ++v13;
        v16 += 28;
        if (v13 >= v10)
          goto LABEL_66;
      }
      v92 = a5;
      v93 = a4;
      v94 = v8;
      v103 = v12;
      v104 = v11;
      if (*(_DWORD *)(v15 + 140) > (int)v17)
      {
        if (*((_DWORD *)this + 19) + *((_DWORD *)this + 64) >= 5000)
          v18 = 5000;
        else
          v18 = *((_DWORD *)this + 19) + *((_DWORD *)this + 64);
        ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + v16 + 12), *(_DWORD *)(v14 + v16), v18);
        v20 = *((_QWORD *)this + 27) + v16;
        v21 = *(_WORD *)(v20 + 12);
        v22 = *(_DWORD *)(v20 + 20);
        v23 = v91;
        if (v22 >= 1)
          v23 = v91 - v22;
        v24 = v23 & ((v22 - v91) >> 31);
        if (*(_WORD *)(v20 + 12))
          v25 = v24 + *(_DWORD *)(v20 + 24);
        else
          v25 = *(_DWORD *)(v20 + 24);
        if (*(_WORD *)(v20 + 12))
          v26 = v22 - v91;
        else
          v26 = *(_DWORD *)(v20 + 20);
        if (*(_WORD *)(v20 + 12))
          v27 = v24;
        else
          v27 = 0;
        v28 = v27 + ScoreAllowBackoff_updateNodeInSequence;
        if (v27 + ScoreAllowBackoff_updateNodeInSequence - v105 <= *v96)
        {
          v29 = *(_QWORD *)(v20 + 4);
          v30 = *(_WORD *)(v20 + 14);
          v31 = *(_DWORD *)(v20 + 16);
          if (*v96 > v28)
            *v96 = v28;
          v32 = *((unsigned int *)this + 60);
          if (v32 == *((_DWORD *)this + 61))
          {
            DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v95, 1, 1);
            LODWORD(v32) = *((_DWORD *)this + 60);
          }
          v33 = *((_QWORD *)this + 29) + 28 * v32;
          *(_DWORD *)v33 = v28;
          *(_QWORD *)(v33 + 4) = v29;
          *(_WORD *)(v33 + 12) = v21;
          *(_WORD *)(v33 + 14) = v30;
          *(_DWORD *)(v33 + 16) = v31;
          *(_DWORD *)(v33 + 20) = v26;
          *(_DWORD *)(v33 + 24) = v25;
          v34 = *((_DWORD *)this + 60);
          *((_DWORD *)this + 60) = v34 + 1;
          v35 = v104;
          if (v103 == 2 * *((_DWORD *)this + 4))
            v35 = v34 + 1;
          ++v103;
          v104 = v35;
        }
      }
      v36 = v17;
      do
      {
        v37 = *((_QWORD *)this + 5);
        v38 = *(_QWORD *)(v37 + 152);
        v39 = *(_DWORD *)(v38 + 4 * v36);
        v40 = *(_DWORD *)(v38 + 4 * (v36 + 1));
        v41 = *(_DWORD *)(v37 + 140);
        if (v41 <= v40)
        {
          if (v41 <= (int)v17 && *((_BYTE *)this + 380) != 0)
          {
            v62 = (v39 & 0xFFFFF) <= 0xFFFF3 ? v39 & 0xFFFFF : v39 & 0xFFFFF | 0xF00000;
            if (v62 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v118);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v62, (DgnString *)&v118, v63, v64, v65, v66, v67);
              v72 = &unk_209A6C820;
              if (v118.i32[2])
                v72 = (void *)v118.i64[0];
              xprintf("Seed from state %d score %d trace %d, %s\n", v68, v69, v70, v71, v17, *(unsigned int *)(*((_QWORD *)this + 27) + v16), *(unsigned int *)(*((_QWORD *)this + 27) + v16 + 8), v72);
              MiniFst::seed((uint64_t)this + 264, *(_DWORD *)(*((_QWORD *)this + 27) + v16), 0, *(_DWORD *)(*((_QWORD *)this + 27) + v16 + 8), v40);
              DgnString::~DgnString((DgnString *)&v118);
            }
          }
        }
        else
        {
          v42 = (v39 >> 20) & 0x3FF;
          if (*((_DWORD *)this + 19) + *((_DWORD *)this + 64) >= 5000)
            v43 = 5000;
          else
            v43 = *((_DWORD *)this + 19) + *((_DWORD *)this + 64);
          v44 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v38 + 4 * v36), *(_DWORD *)(*((_QWORD *)this + 27) + v16) + v42, v43);
          v45 = *((_QWORD *)this + 27) + v16;
          if ((_WORD)v39)
            v47 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * (unsigned __int16)v39);
          else
            v47 = 0;
          if ((_WORD)v39)
          {
            v46 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * (unsigned __int16)v39);
            v48 = v46 & (v46 >> 31);
          }
          else
          {
            v48 = 0;
          }
          v49 = v102;
          if (!(_WORD)v39)
            v49 = 0;
          v50 = (*(_DWORD *)(v45 + 20) & ~(*(int *)(v45 + 20) >> 31)) - v48 + v49;
          v51 = v50 + v44;
          v52 = *((_DWORD *)this + 64);
          if (v50 + v44 - v105 <= v52)
          {
            v53 = *(_DWORD *)(v45 + 8);
            v54 = *(_WORD *)(v45 + 14);
            v55 = *(_DWORD *)(v45 + 16);
            v56 = *(_DWORD *)(v45 + 24);
            if (v52 > v51)
              *v96 = v51;
            v57 = *((unsigned int *)this + 60);
            if (v57 == *((_DWORD *)this + 61))
            {
              v100 = v54;
              v101 = v47;
              v98 = v55;
              v99 = v53;
              v97 = v56;
              DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v95, 1, 1);
              v56 = v97;
              v55 = v98;
              v53 = v99;
              v54 = v100;
              v47 = v101;
              LODWORD(v57) = *((_DWORD *)this + 60);
            }
            v58 = *((_QWORD *)this + 29) + 28 * v57;
            *(_DWORD *)v58 = v51;
            *(_DWORD *)(v58 + 4) = v40;
            *(_DWORD *)(v58 + 8) = v53;
            *(_WORD *)(v58 + 12) = v39;
            *(_WORD *)(v58 + 14) = v54;
            *(_DWORD *)(v58 + 16) = v55 + v42;
            *(_DWORD *)(v58 + 20) = v47;
            *(_DWORD *)(v58 + 24) = v50 + v56;
            v59 = *((_DWORD *)this + 60);
            *((_DWORD *)this + 60) = v59 + 1;
            v60 = v104;
            if (v103 == 2 * *((_DWORD *)this + 4))
              v60 = v59 + 1;
            ++v103;
            v104 = v60;
          }
        }
        v36 += 2;
      }
      while ((v39 & 0x80000000) == 0);
      v13 = (v13 + 1);
      v10 = *((unsigned int *)this + 56);
      v8 = v94;
      a4 = v93;
      a5 = v92;
      v12 = v103;
      v11 = v104;
    }
    while (v13 < v10);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
LABEL_66:
  v120 = *((_DWORD *)this + 64) + v105;
  if (*((_BYTE *)this + 380))
    MiniFst::updateFrame((char *)this + 264, v96, v105, v8);
  v118 = 0u;
  v119 = 0u;
  SnapTime::recordTime((SnapTime *)&v118, 1, 0, 0, 0);
  v118 = vsubq_s64(v118, v121);
  v119 = vsubq_s64(v119, v122);
  v73 = (int64x2_t *)*((_QWORD *)this + 13);
  v74 = vaddq_s64(v73[1], v119);
  *v73 = vaddq_s64(*v73, v118);
  v73[1] = v74;
  v116 = 0u;
  v117 = 0u;
  SnapTime::recordTime((SnapTime *)&v116, 1, 0, 0, 0);
  if (v12 > 2 * *((_DWORD *)this + 4))
    FstSearchDurationHashBackoff::applyCutoffOnEmitting((uint64_t)this, v11, &v120);
  v114 = 0u;
  v115 = 0u;
  SnapTime::recordTime((SnapTime *)&v114, 1, 0, 0, 0);
  v75 = vsubq_s64(v114, v116);
  v76 = (int64x2_t *)*((_QWORD *)this + 13);
  v77 = v76[3];
  v78 = vaddq_s64(v76[2], v75);
  v114 = v75;
  v115 = vsubq_s64(v115, v117);
  v79 = vaddq_s64(v77, v115);
  v76[2] = v78;
  v76[3] = v79;
  v112 = 0u;
  v113 = 0u;
  SnapTime::recordTime((SnapTime *)&v112, 1, 0, 0, 0);
  FstSearchDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v80 = *((unsigned int *)this + 6);
  if ((_DWORD)v80)
  {
    v81 = *((unsigned int *)this + 56);
    if (v80 < v81)
      mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(*((_QWORD *)this + 27), v80, v81);
  }
  v110 = 0u;
  v111 = 0u;
  SnapTime::recordTime((SnapTime *)&v110, 1, 0, 0, 0);
  v82 = vsubq_s64(v110, v112);
  v83 = (int64x2_t *)*((_QWORD *)this + 13);
  v84 = v83[5];
  v85 = vaddq_s64(v83[4], v82);
  v110 = v82;
  v111 = vsubq_s64(v111, v113);
  v86 = vaddq_s64(v84, v111);
  v83[4] = v85;
  v83[5] = v86;
  v108 = 0u;
  v109 = 0u;
  SnapTime::recordTime((SnapTime *)&v108, 1, 0, 0, 0);
  *((_DWORD *)this + 60) = 0;
  v87 = *((unsigned int *)this + 56);
  *((_DWORD *)this + 38) = v87;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v87;
    if (*((_DWORD *)a4 + 2) > v87)
      LODWORD(v87) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v87;
  }
  if (*((_BYTE *)this + 380))
    FstSearchDurationBackoff::seedFromMiniFst((uint64_t)this, v123);
  if (a5)
    FstSearchDurationHashBackoff::propagateNulls(this, v120, v8, a4);
  *((_DWORD *)this + 62) = v8;
  v106 = 0u;
  v107 = 0u;
  SnapTime::recordTime((SnapTime *)&v106, 1, 0, 0, 0);
  v88 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v88[6], vsubq_s64(v106, v108));
  v90 = vaddq_s64(v88[7], vsubq_s64(v107, v109));
  v88[6] = result;
  v88[7] = v90;
  return result;
}

void sub_20985A76C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchDurationBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t i;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;

  v1 = this;
  v2 = *(unsigned int *)(this + 240);
  if ((_DWORD)v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 232), v2, 28);
    v3 = *(unsigned int *)(v1 + 240);
    *(_DWORD *)(v1 + 224) = 0;
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      for (i = 0; i < v3; ++i)
      {
        v7 = *(_QWORD *)(v1 + 232);
        if (!v4 || *(_DWORD *)(v7 + v4 + 4) != *(_DWORD *)(v7 + v4 - 24))
        {
          if (v5 == *(_DWORD *)(v1 + 228))
          {
            this = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v1 + 216, 1, 1);
            v5 = *(_DWORD *)(v1 + 224);
          }
          v8 = (_OWORD *)(*(_QWORD *)(v1 + 216) + 28 * v5);
          v9 = *(_OWORD *)(v7 + v4);
          *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(v7 + v4 + 12);
          *v8 = v9;
          v5 = *(_DWORD *)(v1 + 224) + 1;
          *(_DWORD *)(v1 + 224) = v5;
          v3 = *(unsigned int *)(v1 + 240);
        }
        v4 += 28;
      }
    }
  }
  else
  {
    *(_DWORD *)(this + 224) = 0;
  }
  return this;
}

uint64_t FstSearchDurationBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[2];

  if (*(_BYTE *)(this + 380))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 288);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v5 = 0;
      v6 = 0;
      v20 = this + 216;
      v21 = (_QWORD *)(this + 160);
      do
      {
        v7 = (int *)(*(_QWORD *)(v2 + 280) + v5);
        v8 = *v7;
        v10 = v7[6];
        v9 = v7[7];
        v11 = v7[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v11 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v12 = -2 - v11;
        if (v9 == 16777213)
        {
          v9 = 16777209;
          if (*(_DWORD *)(*v21 + 28 * v12) == 16777209)
            v12 = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 16 * *(unsigned int *)(*v21 + 28 * v12 + 8) + 8);
        }
        v13 = *a2;
        v14 = *(unsigned int *)(v2 + 168);
        if (v14 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v21, 1, 1);
          LODWORD(v14) = *(_DWORD *)(v2 + 168);
        }
        v15 = (int *)(*(_QWORD *)(v2 + 160) + 28 * v14);
        *v15 = v9;
        v15[1] = v13;
        v15[2] = -1;
        v15[3] = v8;
        v15[5] = 0;
        v15[6] = 0;
        v15[4] = v12;
        v16 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v16 + 1;
        v17 = *(unsigned int *)(v2 + 224);
        if (v17 == *(_DWORD *)(v2 + 228))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v20, 1, 1);
          LODWORD(v17) = *(_DWORD *)(v2 + 224);
        }
        v18 = *(_QWORD *)(v2 + 216) + 28 * v17;
        *(_DWORD *)v18 = v8;
        *(_DWORD *)(v18 + 4) = v10;
        *(_DWORD *)(v18 + 8) = v16;
        *(_WORD *)(v18 + 12) = -2;
        *(_QWORD *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        ++*(_DWORD *)(v2 + 224);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        v19 = *(_DWORD *)(v2 + 288);
        if (v19 >= *(_DWORD *)(v2 + 20))
          v19 = *(_DWORD *)(v2 + 20);
        v5 += 36;
      }
      while (v6 < v19);
    }
  }
  return this;
}

void sub_20985AA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationBackoff::collectTraces(FstSearchDurationBackoff *this)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 *v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v35;
  int v36;

  v2 = *((unsigned int *)this + 42);
  v36 = 0;
  v35 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v35 = v3;
    v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    v3 = 0;
  }
  v5 = *((unsigned int *)this + 56);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (unsigned int *)(*((_QWORD *)this + 27) + 8);
    do
    {
      v9 = *v7;
      v7 += 7;
      v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        v5 = *((unsigned int *)this + 56);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  v10 = *((_DWORD *)this + 42);
  if (!v10)
    goto LABEL_32;
  v11 = (uint64_t *)((char *)this + 160);
  v12 = v10 - 1;
  do
  {
    v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      v14 = *(unsigned int *)(*v11 + 28 * v12 + 16);
      if ((_DWORD)v14 != -1)
        *((_DWORD *)v3 + v14) = 1;
    }
    --v12;
  }
  while (v13);
  v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        v19 = *v11;
        if (v17 != v18)
        {
          v20 = (__int128 *)(v19 + v16);
          v21 = (_OWORD *)(v19 + 28 * v18);
          v22 = *v20;
          *(_OWORD *)((char *)v21 + 12) = *(__int128 *)((char *)v20 + 12);
          *v21 = v22;
          v19 = *v11;
        }
        v23 = v19 + 28 * v18;
        v26 = *(_DWORD *)(v23 + 16);
        v24 = (_DWORD *)(v23 + 16);
        v25 = v26;
        if (v26 != -1)
          *v24 = *((_DWORD *)v3 + v25);
        *((_DWORD *)v3 + v17) = v18++;
        v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 28;
    }
    while (v17 < v15);
    v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      v28 = v18 - (unint64_t)v15;
      v29 = (_DWORD *)(*v11 + 28 * v15 + 24);
      do
      {
        *(_OWORD *)(v29 - 6) = xmmword_209A6C7D0;
        *((_QWORD *)v29 - 1) = 0xFFFFFFFFLL;
        *v29 = 0;
        v29 += 7;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  v30 = *((unsigned int *)this + 56);
  if ((_DWORD)v30)
  {
    v31 = v35;
    v32 = (_DWORD *)(*((_QWORD *)this + 27) + 8);
    do
    {
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        *v32 = *((_DWORD *)v31 + v33);
      v32 += 7;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_20985AC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchDurationBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchDurationBackoff::advanceDeltas((FstSearchDurationBackoff *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchDurationBackoff::collectTraces((FstSearchDurationBackoff *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchDurationBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  return this;
}

double FstSearchDurationBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchDurationBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchDurationBackoff::beginTopRecPassSyncRecog(FstSearchDurationBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 264, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 94) = result;
    *((_BYTE *)this + 380) = 1;
  }
  return result;
}

uint64_t FstSearchDurationBackoff::endTopRecPassSyncRecog(FstSearchDurationBackoff *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchDurationHashBackoff::generateTraceTokensFromTraces((unint64_t)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 64) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchDurationBackoff::printSize(FstSearchDurationBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 16;
  v44 = *((unsigned int *)this + 42);
  v45 = 28 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 28 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A6C820, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 16;
  v54 = *((unsigned int *)this + 46);
  v55 = 16 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6C820, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((_DWORD *)this + 56);
  v65 = 26 * v64;
  if (v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 26 * (*((_DWORD *)this + 57) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((_DWORD *)this + 60);
  v75 = 26 * v74;
  if (v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 26 * (*((_DWORD *)this + 61) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 264, 0);
  v99 = sizeObject((uint64_t)this + 264, 1);
  v100 = sizeObject((uint64_t)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_20985B580(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchDurationBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 28 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchDurationBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchDurationHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  v23 = (uint64_t)v9;
  v11 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = v27;
    do
    {
      if (*(_BYTE *)(*a3 + v12))
      {
        v14 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v14 + 28 * v12) != 16777209)
        {
          v15 = *(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v14 + 28 * v12 + 8);
          v16 = *(unsigned int *)(v15 + 8);
          if ((_DWORD)v16 == -1)
            v17 = 0;
          else
            v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(_BYTE *)(*a4 + v12))
            FstSearchDurationBackoff::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            v20 = 0;
            do
            {
              v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v12) + 4 * v20);
              FstSearchDurationBackoff::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_20985B8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchDurationBackoff::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _QWORD v35[2];
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  __int128 v50;
  _DWORD v51[2];
  __int128 v52;

  v11 = a5;
  v12 = a4;
  v16 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    v17 = 0;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8) + 8) == a2)
  {
    v17 = (_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8));
  }
  else
  {
    v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 28 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v51);
  v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    v19 = *v17 + *a3;
  }
  else
  {
    v19 = *a3;
  }
  if (v51[0] >> 25 == 126)
  {
    v20 = 0;
    v21 = v18;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_11:
      v22 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 136);
    v21 = v18 - v20;
    if ((v12 & 0x80000000) != 0)
      goto LABEL_11;
  }
  v22 = *(_DWORD *)(a1 + 140);
  v21 -= v22;
LABEL_14:
  v23 = a3[3];
  if (v17)
    v23 += v17[3];
  v24 = v19 - v18 - v23;
  v25 = a3[2];
  v26 = *(_QWORD *)(a1 + 160);
  if (v25 == -1)
  {
    v28 = 0;
    if (a9)
      goto LABEL_22;
  }
  else
  {
    v27 = *(_DWORD *)(v26 + 28 * v25 + 4);
    if (a9)
    {
      if (v27 >= 1)
        --v27;
      v28 = (v27 >> 1) + 1;
LABEL_22:
      v29 = *(_DWORD *)(v26 + 28 * a2 + 4);
      if (v29 >= 1)
        --v29;
      v30 = v29 >> 1;
      v31 = (v29 >> 1) - v28 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v32 = *(_DWORD *)(v26 + 28 * v12 + 4);
        if (v32 >= 1)
          --v32;
        v33 = v32 >> 1;
        goto LABEL_31;
      }
LABEL_32:
      v34 = 0;
      goto LABEL_33;
    }
    v28 = v27 + 1;
  }
  v30 = *(_DWORD *)(v26 + 28 * a2 + 4);
  v31 = v30 - v28 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_32;
  v33 = *(_DWORD *)(v26 + 28 * v12 + 4);
LABEL_31:
  v34 = v33 - v30;
LABEL_33:
  v36 = v28;
  v37 = v31;
  v38 = v34;
  v39 = v21;
  v40 = 0;
  v41 = v20;
  v42 = v24;
  v43 = v23;
  v44 = v22;
  v45 = xmmword_209A6C7F0;
  v46 = 0;
  v47 = -1;
  v35[0] = &off_24C2149F8;
  v35[1] = 0xBFF0000000000000;
  v48 = v51[0];
  v49 = v51[1];
  v50 = v52;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v35);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v35);
}

void sub_20985BB30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 380))
    return MiniFst::beginTopFstSyncRecog(this + 264);
  return this;
}

uint64_t FstSearchDurationBackoff::endTopRecSyncRecog(FstSearchDurationBackoff *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchDurationBackoff::getBestExitScore(FstSearchDurationBackoff *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 63) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 56);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 28 * v1;
  do
  {
    v7 = *((_QWORD *)this + 27) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 28 * v8 + 4) == *((_DWORD *)this + 62))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 56);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v14 = *(_DWORD *)(v9 + 28 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 63) = *(_DWORD *)(v9 + 28 * v12 + 16);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_20985BCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationBackoff::getBestScoreMaybeUpdateFstNode(FstSearchDurationBackoff *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 56);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 27);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 7;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

_QWORD *FstSearchDurationBackoff::seedTheory(FstSearchDurationBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 28 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(_QWORD *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 56);
  if (v14 == *((_DWORD *)this + 57))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 216, 1, 1);
    v14 = *((_DWORD *)this + 56);
  }
  v15 = *((_QWORD *)this + 27) + 28 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_QWORD *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 24) = 0;
  LODWORD(v15) = *((_DWORD *)this + 56) + 1;
  *((_DWORD *)this + 56) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchDurationHashBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchDurationBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 252);
  if ((_DWORD)v8 != -1)
  {
    v9 = result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 28 * v8);
    for (i = v10[4]; (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = *(_QWORD *)(v9 + 40);
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = *(_QWORD *)(v9 + 160);
      v21 = *(_DWORD *)(v20 + 28 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = *(_QWORD *)(v9 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v20 + 28 * v8 + 12);
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(*(_QWORD *)(v9 + 160) + 28 * v16);
      i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchDurationBackoff::checkSearchParametersValidityForArcGraph(FstSearchDurationBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchDurationBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchDurationHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 28 * v24;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_20985C3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDuration::maybeInitDurModel(FstSearchDuration *this, const PicMgr *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1)
    v6 = 56;
  else
    v6 = 72;
  v7 = v16;
  v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!(_DWORD)v7)
      goto LABEL_13;
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  v9 = 0;
  v10 = v15;
  v11 = *((_QWORD *)this + 24);
  do
  {
    if (!(_WORD)v9 || (v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF))
      v13 = 0;
    else
      v13 = *(_WORD *)(*(_QWORD *)((char *)a2 + v6) + 2 * v12);
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_20985C4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchDuration::advanceDeltas(FstSearchDuration *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int ScoreNoBackoff;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  __int16 v54;
  int v55;
  int v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  int64x2_t *v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t *v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  unint64_t v81;
  unint64_t v82;
  int64x2_t v83;
  int64x2_t *v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  uint64_t v88;
  int64x2_t *v89;
  int64x2_t result;
  int64x2_t v91;
  int v92;
  int v93;
  SearchStats *v94;
  int v95;
  FstSearchDuration *v96;
  MiniFst *v97;
  char *v98;
  int *v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int v122;
  int64x2_t v123;
  int64x2_t v124;
  int v125[3];

  v8 = a2;
  v125[0] = a2;
  v123 = 0u;
  v124 = 0u;
  SnapTime::recordTime((SnapTime *)&v123, 1, 0, 0, 0);
  v99 = (int *)((char *)this + 256);
  *((_DWORD *)this + 64) = a3;
  v107 = *((_DWORD *)this + 2);
  v10 = *((unsigned int *)this + 56);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v106 = 0;
    v12 = 0;
    v104 = *((_DWORD *)this + 53);
    v92 = *((unsigned __int8 *)this + 208);
    v97 = (FstSearchDuration *)((char *)this + 264);
    v98 = (char *)this + 232;
    do
    {
      v13 = *((_QWORD *)this + 27);
      v14 = *((_QWORD *)this + 5);
      v15 = 28 * v12;
      while (1)
      {
        v16 = *(unsigned int *)(v13 + v15 + 4);
        if (*(_DWORD *)(v14 + 160) != (_DWORD)v16)
          break;
        ++v12;
        v15 += 28;
        if (v12 >= v10)
          goto LABEL_60;
      }
      v94 = a4;
      v95 = v8;
      v93 = a5;
      v105 = v11;
      if (*(_DWORD *)(v14 + 140) > (int)v16)
      {
        v17 = *(_DWORD *)(v13 + v15);
        v18 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v13 + v15 + 12))
            + v17;
        v19 = *((_QWORD *)this + 27) + v15;
        v20 = *(_WORD *)(v19 + 12);
        v21 = *(_DWORD *)(v19 + 20);
        v22 = v92;
        if (v21 >= 1)
          v22 = v92 - v21;
        v23 = v22 & ((v21 - v92) >> 31);
        if (*(_WORD *)(v19 + 12))
          v24 = v23 + *(_DWORD *)(v19 + 24);
        else
          v24 = *(_DWORD *)(v19 + 24);
        if (*(_WORD *)(v19 + 12))
          v25 = v21 - v92;
        else
          v25 = *(_DWORD *)(v19 + 20);
        if (*(_WORD *)(v19 + 12))
          v26 = v23;
        else
          v26 = 0;
        v27 = v18 + v26;
        if (v18 + v26 - v107 <= *v99)
        {
          v28 = *(_QWORD *)(v19 + 4);
          v29 = *(_WORD *)(v19 + 14);
          v30 = *(_DWORD *)(v19 + 16);
          if (*v99 > v27)
            *v99 = v27;
          v31 = *((unsigned int *)this + 60);
          if (v31 == *((_DWORD *)this + 61))
          {
            DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v98, 1, 1);
            LODWORD(v31) = *((_DWORD *)this + 60);
          }
          v32 = *((_QWORD *)this + 29) + 28 * v31;
          *(_DWORD *)v32 = v27;
          *(_QWORD *)(v32 + 4) = v28;
          *(_WORD *)(v32 + 12) = v20;
          *(_WORD *)(v32 + 14) = v29;
          *(_DWORD *)(v32 + 16) = v30;
          *(_DWORD *)(v32 + 20) = v25;
          *(_DWORD *)(v32 + 24) = v24;
          v33 = *((_DWORD *)this + 60);
          *((_DWORD *)this + 60) = v33 + 1;
          v34 = v105;
          if (v106 == 2 * *((_DWORD *)this + 4))
            v34 = v33 + 1;
          v105 = v34;
          ++v106;
        }
      }
      v35 = v16;
      v96 = this;
      do
      {
        v36 = *((_QWORD *)this + 5);
        v37 = *(_QWORD *)(v36 + 152);
        v38 = *(_DWORD *)(v37 + 4 * v35);
        v39 = *(_DWORD *)(v37 + 4 * (v35 + 1));
        v40 = *(_DWORD *)(v36 + 140);
        if (v40 <= v39)
        {
          if (v40 <= (int)v16 && *((_BYTE *)this + 380) != 0)
          {
            v63 = (v38 & 0xFFFFF) <= 0xFFFF3 ? v38 & 0xFFFFF : v38 & 0xFFFFF | 0xF00000;
            if (v63 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v120);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v63, (DgnString *)&v120, v64, v65, v66, v67, v68);
              v73 = &unk_209A6C820;
              if (v120.i32[2])
                v73 = (void *)v120.i64[0];
              xprintf("Seed from state %d score %d trace %d, %s\n", v69, v70, v71, v72, v16, *(unsigned int *)(*((_QWORD *)this + 27) + v15), *(unsigned int *)(*((_QWORD *)this + 27) + v15 + 8), v73);
              MiniFst::seed((uint64_t)v97, *(_DWORD *)(*((_QWORD *)this + 27) + v15), 0, *(_DWORD *)(*((_QWORD *)this + 27) + v15 + 8), v39);
              DgnString::~DgnString((DgnString *)&v120);
            }
          }
        }
        else
        {
          v41 = (v38 >> 20) & 0x3FF;
          ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v37 + 4 * v35));
          v43 = *((_QWORD *)this + 27) + v15;
          v44 = ScoreNoBackoff + v41 + *(_DWORD *)v43;
          if ((_WORD)v38)
            v46 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * (unsigned __int16)v38);
          else
            v46 = 0;
          if ((_WORD)v38)
          {
            v45 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * (unsigned __int16)v38);
            v47 = v45 & (v45 >> 31);
          }
          else
          {
            v47 = 0;
          }
          v48 = v104;
          if (!(_WORD)v38)
            v48 = 0;
          v49 = (*(_DWORD *)(v43 + 20) & ~(*(int *)(v43 + 20) >> 31)) - v47 + v48;
          v50 = v44 + v49;
          v51 = v44 + v49 - v107;
          v52 = *((_DWORD *)this + 64);
          if (v51 <= v52)
          {
            v53 = *(_DWORD *)(v43 + 8);
            v54 = *(_WORD *)(v43 + 14);
            v55 = *(_DWORD *)(v43 + 16);
            v56 = *(_DWORD *)(v43 + 24);
            if (v52 > v50)
              *v99 = v50;
            v57 = *((unsigned int *)this + 60);
            if (v57 == *((_DWORD *)this + 61))
            {
              v102 = v53;
              v103 = v46;
              v58 = v54;
              v100 = v56;
              v101 = v55;
              DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v98, 1, 1);
              v56 = v100;
              v55 = v101;
              v53 = v102;
              v46 = v103;
              v54 = v58;
              this = v96;
              LODWORD(v57) = *((_DWORD *)v96 + 60);
            }
            v59 = *((_QWORD *)this + 29) + 28 * v57;
            *(_DWORD *)v59 = v50;
            *(_DWORD *)(v59 + 4) = v39;
            *(_DWORD *)(v59 + 8) = v53;
            *(_WORD *)(v59 + 12) = v38;
            *(_WORD *)(v59 + 14) = v54;
            *(_DWORD *)(v59 + 16) = v55 + v41;
            *(_DWORD *)(v59 + 20) = v46;
            *(_DWORD *)(v59 + 24) = v49 + v56;
            v60 = *((_DWORD *)this + 60);
            *((_DWORD *)this + 60) = v60 + 1;
            v61 = v105;
            if (v106 == 2 * *((_DWORD *)this + 4))
              v61 = v60 + 1;
            v105 = v61;
            ++v106;
          }
        }
        v35 += 2;
      }
      while ((v38 & 0x80000000) == 0);
      v12 = (v12 + 1);
      v10 = *((unsigned int *)this + 56);
      v8 = v95;
      a4 = v94;
      a5 = v93;
      v11 = v105;
    }
    while (v12 < v10);
  }
  else
  {
    v106 = 0;
    v11 = 0;
  }
LABEL_60:
  v122 = *((_DWORD *)this + 64) + v107;
  if (*((_BYTE *)this + 380))
    MiniFst::updateFrame((char *)this + 264, v99, v107, v8);
  v120 = 0u;
  v121 = 0u;
  SnapTime::recordTime((SnapTime *)&v120, 1, 0, 0, 0);
  v120 = vsubq_s64(v120, v123);
  v121 = vsubq_s64(v121, v124);
  v74 = (int64x2_t *)*((_QWORD *)this + 13);
  v75 = vaddq_s64(v74[1], v121);
  *v74 = vaddq_s64(*v74, v120);
  v74[1] = v75;
  v118 = 0u;
  v119 = 0u;
  SnapTime::recordTime((SnapTime *)&v118, 1, 0, 0, 0);
  if (v106 > 2 * *((_DWORD *)this + 4))
    FstSearchDurationHashBackoff::applyCutoffOnEmitting((uint64_t)this, v11, &v122);
  v116 = 0u;
  v117 = 0u;
  SnapTime::recordTime((SnapTime *)&v116, 1, 0, 0, 0);
  v76 = vsubq_s64(v116, v118);
  v77 = (int64x2_t *)*((_QWORD *)this + 13);
  v78 = v77[3];
  v79 = vaddq_s64(v77[2], v76);
  v116 = v76;
  v117 = vsubq_s64(v117, v119);
  v80 = vaddq_s64(v78, v117);
  v77[2] = v79;
  v77[3] = v80;
  v114 = 0u;
  v115 = 0u;
  SnapTime::recordTime((SnapTime *)&v114, 1, 0, 0, 0);
  FstSearchDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v81 = *((unsigned int *)this + 6);
  if ((_DWORD)v81)
  {
    v82 = *((unsigned int *)this + 56);
    if (v81 < v82)
      mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(*((_QWORD *)this + 27), v81, v82);
  }
  v112 = 0u;
  v113 = 0u;
  SnapTime::recordTime((SnapTime *)&v112, 1, 0, 0, 0);
  v83 = vsubq_s64(v112, v114);
  v84 = (int64x2_t *)*((_QWORD *)this + 13);
  v85 = v84[5];
  v86 = vaddq_s64(v84[4], v83);
  v112 = v83;
  v113 = vsubq_s64(v113, v115);
  v87 = vaddq_s64(v85, v113);
  v84[4] = v86;
  v84[5] = v87;
  v110 = 0u;
  v111 = 0u;
  SnapTime::recordTime((SnapTime *)&v110, 1, 0, 0, 0);
  *((_DWORD *)this + 60) = 0;
  v88 = *((unsigned int *)this + 56);
  *((_DWORD *)this + 38) = v88;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v88;
    if (*((_DWORD *)a4 + 2) > v88)
      LODWORD(v88) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v88;
  }
  if (*((_BYTE *)this + 380))
    FstSearchDuration::seedFromMiniFst((uint64_t)this, v125);
  if (a5)
    FstSearchDurationHashBackoff::propagateNulls(this, v122, v8, a4);
  *((_DWORD *)this + 62) = v8;
  v108 = 0u;
  v109 = 0u;
  SnapTime::recordTime((SnapTime *)&v108, 1, 0, 0, 0);
  v89 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v89[6], vsubq_s64(v108, v110));
  v91 = vaddq_s64(v89[7], vsubq_s64(v109, v111));
  v89[6] = result;
  v89[7] = v91;
  return result;
}

void sub_20985CB70(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchDuration::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[2];

  if (*(_BYTE *)(this + 380))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 288);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v5 = 0;
      v6 = 0;
      v20 = this + 216;
      v21 = (_QWORD *)(this + 160);
      do
      {
        v7 = (int *)(*(_QWORD *)(v2 + 280) + v5);
        v8 = *v7;
        v10 = v7[6];
        v9 = v7[7];
        v11 = v7[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v11 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v12 = -2 - v11;
        if (v9 == 16777213)
        {
          v9 = 16777209;
          if (*(_DWORD *)(*v21 + 28 * v12) == 16777209)
            v12 = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 16 * *(unsigned int *)(*v21 + 28 * v12 + 8) + 8);
        }
        v13 = *a2;
        v14 = *(unsigned int *)(v2 + 168);
        if (v14 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v21, 1, 1);
          LODWORD(v14) = *(_DWORD *)(v2 + 168);
        }
        v15 = (int *)(*(_QWORD *)(v2 + 160) + 28 * v14);
        *v15 = v9;
        v15[1] = v13;
        v15[2] = -1;
        v15[3] = v8;
        v15[5] = 0;
        v15[6] = 0;
        v15[4] = v12;
        v16 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v16 + 1;
        v17 = *(unsigned int *)(v2 + 224);
        if (v17 == *(_DWORD *)(v2 + 228))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v20, 1, 1);
          LODWORD(v17) = *(_DWORD *)(v2 + 224);
        }
        v18 = *(_QWORD *)(v2 + 216) + 28 * v17;
        *(_DWORD *)v18 = v8;
        *(_DWORD *)(v18 + 4) = v10;
        *(_DWORD *)(v18 + 8) = v16;
        *(_WORD *)(v18 + 12) = -2;
        *(_QWORD *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        ++*(_DWORD *)(v2 + 224);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        v19 = *(_DWORD *)(v2 + 288);
        if (v19 >= *(_DWORD *)(v2 + 20))
          v19 = *(_DWORD *)(v2 + 20);
        v5 += 36;
      }
      while (v6 < v19);
    }
  }
  return this;
}

void sub_20985CD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDuration::collectTraces(FstSearchDuration *this)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 *v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v35;
  int v36;

  v2 = *((unsigned int *)this + 42);
  v36 = 0;
  v35 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v35 = v3;
    v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    v3 = 0;
  }
  v5 = *((unsigned int *)this + 56);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (unsigned int *)(*((_QWORD *)this + 27) + 8);
    do
    {
      v9 = *v7;
      v7 += 7;
      v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        v5 = *((unsigned int *)this + 56);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  v10 = *((_DWORD *)this + 42);
  if (!v10)
    goto LABEL_32;
  v11 = (uint64_t *)((char *)this + 160);
  v12 = v10 - 1;
  do
  {
    v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      v14 = *(unsigned int *)(*v11 + 28 * v12 + 16);
      if ((_DWORD)v14 != -1)
        *((_DWORD *)v3 + v14) = 1;
    }
    --v12;
  }
  while (v13);
  v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        v19 = *v11;
        if (v17 != v18)
        {
          v20 = (__int128 *)(v19 + v16);
          v21 = (_OWORD *)(v19 + 28 * v18);
          v22 = *v20;
          *(_OWORD *)((char *)v21 + 12) = *(__int128 *)((char *)v20 + 12);
          *v21 = v22;
          v19 = *v11;
        }
        v23 = v19 + 28 * v18;
        v26 = *(_DWORD *)(v23 + 16);
        v24 = (_DWORD *)(v23 + 16);
        v25 = v26;
        if (v26 != -1)
          *v24 = *((_DWORD *)v3 + v25);
        *((_DWORD *)v3 + v17) = v18++;
        v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 28;
    }
    while (v17 < v15);
    v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      v28 = v18 - (unint64_t)v15;
      v29 = (_DWORD *)(*v11 + 28 * v15 + 24);
      do
      {
        *(_OWORD *)(v29 - 6) = xmmword_209A6C7D0;
        *((_QWORD *)v29 - 1) = 0xFFFFFFFFLL;
        *v29 = 0;
        v29 += 7;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  v30 = *((unsigned int *)this + 56);
  if ((_DWORD)v30)
  {
    v31 = v35;
    v32 = (_DWORD *)(*((_QWORD *)this + 27) + 8);
    do
    {
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        *v32 = *((_DWORD *)v31 + v33);
      v32 += 7;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_20985CF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchDuration::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchDuration::advanceDeltas((FstSearchDuration *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchDuration::collectTraces((FstSearchDuration *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchDuration::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  return this;
}

double FstSearchDuration::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchDuration::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchDuration::beginTopRecPassSyncRecog(FstSearchDuration *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 264, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 94) = result;
    *((_BYTE *)this + 380) = 1;
  }
  return result;
}

uint64_t FstSearchDuration::endTopRecPassSyncRecog(FstSearchDuration *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchDurationHashBackoff::generateTraceTokensFromTraces((unint64_t)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 64) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchDuration::printSize(FstSearchDuration *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 16;
  v44 = *((unsigned int *)this + 42);
  v45 = 28 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 28 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A6C820, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 16;
  v54 = *((unsigned int *)this + 46);
  v55 = 16 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6C820, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((_DWORD *)this + 56);
  v65 = 26 * v64;
  if (v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 26 * (*((_DWORD *)this + 57) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((_DWORD *)this + 60);
  v75 = 26 * v74;
  if (v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 26 * (*((_DWORD *)this + 61) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 264, 0);
  v99 = sizeObject((uint64_t)this + 264, 1);
  v100 = sizeObject((uint64_t)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_20985D8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchDuration::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 28 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchDuration::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchDurationHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  v23 = (uint64_t)v9;
  v11 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = v27;
    do
    {
      if (*(_BYTE *)(*a3 + v12))
      {
        v14 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v14 + 28 * v12) != 16777209)
        {
          v15 = *(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v14 + 28 * v12 + 8);
          v16 = *(unsigned int *)(v15 + 8);
          if ((_DWORD)v16 == -1)
            v17 = 0;
          else
            v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(_BYTE *)(*a4 + v12))
            FstSearchDuration::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            v20 = 0;
            do
            {
              v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v12) + 4 * v20);
              FstSearchDuration::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_20985DBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchDuration::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _QWORD v35[2];
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  __int128 v50;
  _DWORD v51[2];
  __int128 v52;

  v11 = a5;
  v12 = a4;
  v16 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    v17 = 0;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8) + 8) == a2)
  {
    v17 = (_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8));
  }
  else
  {
    v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 28 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v51);
  v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    v19 = *v17 + *a3;
  }
  else
  {
    v19 = *a3;
  }
  if (v51[0] >> 25 == 126)
  {
    v20 = 0;
    v21 = v18;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_11:
      v22 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 136);
    v21 = v18 - v20;
    if ((v12 & 0x80000000) != 0)
      goto LABEL_11;
  }
  v22 = *(_DWORD *)(a1 + 140);
  v21 -= v22;
LABEL_14:
  v23 = a3[3];
  if (v17)
    v23 += v17[3];
  v24 = v19 - v18 - v23;
  v25 = a3[2];
  v26 = *(_QWORD *)(a1 + 160);
  if (v25 == -1)
  {
    v28 = 0;
    if (a9)
      goto LABEL_22;
  }
  else
  {
    v27 = *(_DWORD *)(v26 + 28 * v25 + 4);
    if (a9)
    {
      if (v27 >= 1)
        --v27;
      v28 = (v27 >> 1) + 1;
LABEL_22:
      v29 = *(_DWORD *)(v26 + 28 * a2 + 4);
      if (v29 >= 1)
        --v29;
      v30 = v29 >> 1;
      v31 = (v29 >> 1) - v28 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v32 = *(_DWORD *)(v26 + 28 * v12 + 4);
        if (v32 >= 1)
          --v32;
        v33 = v32 >> 1;
        goto LABEL_31;
      }
LABEL_32:
      v34 = 0;
      goto LABEL_33;
    }
    v28 = v27 + 1;
  }
  v30 = *(_DWORD *)(v26 + 28 * a2 + 4);
  v31 = v30 - v28 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_32;
  v33 = *(_DWORD *)(v26 + 28 * v12 + 4);
LABEL_31:
  v34 = v33 - v30;
LABEL_33:
  v36 = v28;
  v37 = v31;
  v38 = v34;
  v39 = v21;
  v40 = 0;
  v41 = v20;
  v42 = v24;
  v43 = v23;
  v44 = v22;
  v45 = xmmword_209A6C7F0;
  v46 = 0;
  v47 = -1;
  v35[0] = &off_24C2149F8;
  v35[1] = 0xBFF0000000000000;
  v48 = v51[0];
  v49 = v51[1];
  v50 = v52;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v35);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v35);
}

void sub_20985DE50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDuration::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 380))
    return MiniFst::beginTopFstSyncRecog(this + 264);
  return this;
}

uint64_t FstSearchDuration::endTopRecSyncRecog(FstSearchDuration *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchDuration::getBestExitScore(FstSearchDuration *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 63) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 56);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 28 * v1;
  do
  {
    v7 = *((_QWORD *)this + 27) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 28 * v8 + 4) == *((_DWORD *)this + 62))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 56);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v14 = *(_DWORD *)(v9 + 28 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 63) = *(_DWORD *)(v9 + 28 * v12 + 16);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_20985DFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDuration::getBestScoreMaybeUpdateFstNode(FstSearchDuration *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 56);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 27);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 7;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

_QWORD *FstSearchDuration::seedTheory(FstSearchDuration *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 28 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(_QWORD *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 56);
  if (v14 == *((_DWORD *)this + 57))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 216, 1, 1);
    v14 = *((_DWORD *)this + 56);
  }
  v15 = *((_QWORD *)this + 27) + 28 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_QWORD *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 24) = 0;
  LODWORD(v15) = *((_DWORD *)this + 56) + 1;
  *((_DWORD *)this + 56) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchDurationHashBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchDuration::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 252);
  if ((_DWORD)v8 != -1)
  {
    v9 = result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 28 * v8);
    for (i = v10[4]; (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = *(_QWORD *)(v9 + 40);
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = *(_QWORD *)(v9 + 160);
      v21 = *(_DWORD *)(v20 + 28 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = *(_QWORD *)(v9 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v20 + 28 * v8 + 12);
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(*(_QWORD *)(v9 + 160) + 28 * v16);
      i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchDuration::checkSearchParametersValidityForArcGraph(FstSearchDuration *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchDuration::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchDurationHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 28 * v24;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_20985E6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLeafBackoff::maybeGeneratePelMaps(FstSearchLeafBackoff *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 224, (uint64_t)this + 208);
}

int64x2_t FstSearchLeafBackoff::advanceDeltas(FstSearchLeafBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int ScoreAllowBackoff_updateNodeInSequence;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  int64x2_t *v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t *v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  unint64_t v73;
  unint64_t v74;
  int64x2_t v75;
  int64x2_t *v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  uint64_t v80;
  int64x2_t *v81;
  int64x2_t result;
  int64x2_t v83;
  int v84;
  SearchStats *v85;
  int v86;
  char *v87;
  int *v88;
  int v89;
  int v90;
  int v91;
  __int16 v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  __int16 v99;
  unsigned int v100;
  uint64_t v101;
  __int16 v102;
  uint64_t *v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int v118;
  int64x2_t v119;
  int64x2_t v120;
  int v121[3];

  v8 = a2;
  v121[0] = a2;
  v119 = 0u;
  v120 = 0u;
  SnapTime::recordTime((SnapTime *)&v119, 1, 0, 0, 0);
  v88 = (int *)((char *)this + 280);
  *((_DWORD *)this + 70) = a3;
  v89 = *((_DWORD *)this + 2);
  v10 = *((unsigned int *)this + 62);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v103 = (uint64_t *)((char *)this + 192);
    v87 = (char *)this + 256;
    do
    {
      v14 = *((_QWORD *)this + 30);
      v15 = *((_QWORD *)this + 5);
      v16 = 28 * v13;
      while (1)
      {
        v17 = *(_DWORD *)(v14 + v16 + 4);
        if (*(_DWORD *)(v15 + 160) != v17)
          break;
        ++v13;
        v16 += 28;
        if (v13 >= v10)
          goto LABEL_62;
      }
      v86 = v8;
      v85 = a4;
      v84 = a5;
      v101 = *(unsigned int *)(v14 + v16 + 4);
      if (*(_DWORD *)(v15 + 140) > v17
        && (*((_DWORD *)this + 19) + *((_DWORD *)this + 70) >= 5000
          ? (v18 = 5000)
          : (v18 = *((_DWORD *)this + 19) + *((_DWORD *)this + 70)),
            ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + v16 + 12), *(_DWORD *)(v14 + v16), v18), v20 = *((_DWORD *)this + 70), ScoreAllowBackoff_updateNodeInSequence - v89 <= v20))
      {
        v22 = ScoreAllowBackoff_updateNodeInSequence;
        v93 = v12;
        v95 = v11;
        if (v20 > ScoreAllowBackoff_updateNodeInSequence)
          *v88 = ScoreAllowBackoff_updateNodeInSequence;
        v23 = *((_QWORD *)this + 30) + v16;
        v24 = *(_QWORD *)(v23 + 4);
        v102 = *(_WORD *)(v23 + 12);
        v99 = *(_WORD *)(v23 + 14);
        v97 = *(_DWORD *)(v23 + 16);
        v25 = *(unsigned __int16 *)(v23 + 24);
        v26 = *((_DWORD *)this + 50);
        v27 = v26;
        v21 = v89;
        if (*(_WORD *)(v23 + 24))
        {
          v28 = *(_DWORD *)(v23 + 20);
          v29 = *v103;
          v30 = v25;
          v27 = *((_DWORD *)this + 50);
          do
          {
            v31 = *(_WORD *)(v29 + 2 * v28);
            if (v27 == *((_DWORD *)this + 51))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)v103, 1, 1);
              v27 = *((_DWORD *)this + 50);
              v29 = *((_QWORD *)this + 24);
            }
            *(_WORD *)(v29 + 2 * v27++) = v31;
            *((_DWORD *)this + 50) = v27;
            ++v28;
            --v30;
          }
          while (v30);
        }
        if (v27 == *((_DWORD *)this + 51))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)v103, 1, 1);
          v27 = *((_DWORD *)this + 50);
        }
        *(_WORD *)(*((_QWORD *)this + 24) + 2 * v27) = v102;
        *((_DWORD *)this + 50) = v27 + 1;
        v32 = *((unsigned int *)this + 66);
        if (v32 == *((_DWORD *)this + 67))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v87, 1, 1);
          LODWORD(v32) = *((_DWORD *)this + 66);
        }
        v33 = *((_QWORD *)this + 32) + 28 * v32;
        *(_DWORD *)v33 = v22;
        *(_QWORD *)(v33 + 4) = v24;
        *(_WORD *)(v33 + 12) = v102;
        *(_WORD *)(v33 + 14) = v99;
        *(_DWORD *)(v33 + 16) = v97;
        *(_DWORD *)(v33 + 20) = v26;
        *(_WORD *)(v33 + 24) = v25 + 1;
        v34 = *((_DWORD *)this + 66);
        *((_DWORD *)this + 66) = v34 + 1;
        v11 = v95;
        if (v93 == 2 * *((_DWORD *)this + 4))
          v11 = v34 + 1;
        v12 = v93 + 1;
        v17 = v101;
      }
      else
      {
        v21 = v89;
      }
      v35 = v17;
      do
      {
        v36 = *((_QWORD *)this + 5);
        v37 = *(_QWORD *)(v36 + 152);
        v38 = *(_DWORD *)(v37 + 4 * v35);
        v39 = *(_DWORD *)(v37 + 4 * (v35 + 1));
        v40 = *(_DWORD *)(v36 + 140);
        if (v40 <= v39)
        {
          if (v40 <= (int)v101 && *((_BYTE *)this + 404) != 0)
          {
            v55 = (v38 & 0xFFFFF) <= 0xFFFF3 ? v38 & 0xFFFFF : v38 & 0xFFFFF | 0xF00000;
            if (v55 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v116);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v55, (DgnString *)&v116, v56, v57, v58, v59, v60);
              v65 = &unk_209A6C820;
              if (v116.i32[2])
                v65 = (void *)v116.i64[0];
              xprintf("Seed from state %d score %d trace %d, %s\n", v61, v62, v63, v64, v101, *(unsigned int *)(*((_QWORD *)this + 30) + v16), *(unsigned int *)(*((_QWORD *)this + 30) + v16 + 8), v65);
              MiniFst::seed((uint64_t)this + 288, *(_DWORD *)(*((_QWORD *)this + 30) + v16), 0, *(_DWORD *)(*((_QWORD *)this + 30) + v16 + 8), v39);
              DgnString::~DgnString((DgnString *)&v116);
            }
          }
        }
        else
        {
          if (*((_DWORD *)this + 19) + *((_DWORD *)this + 70) >= 5000)
            v41 = 5000;
          else
            v41 = *((_DWORD *)this + 19) + *((_DWORD *)this + 70);
          v42 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v37 + 4 * v35), *(_DWORD *)(*((_QWORD *)this + 30) + v16) + ((*(_DWORD *)(v37 + 4 * v35) >> 20) & 0x3FFu), v41);
          v43 = *((_DWORD *)this + 70);
          if (v42 - v21 <= v43)
          {
            v44 = v42;
            v94 = v12;
            v96 = v11;
            if (v43 > v42)
              *v88 = v42;
            v45 = *((_QWORD *)this + 30) + v16;
            v91 = *(_DWORD *)(v45 + 8);
            v92 = *(_WORD *)(v45 + 14);
            v90 = *(_DWORD *)(v45 + 16);
            v46 = *((_DWORD *)this + 50);
            v100 = v46;
            v98 = *(unsigned __int16 *)(v45 + 24);
            if (*(_WORD *)(v45 + 24))
            {
              v47 = *(_DWORD *)(v45 + 20);
              v48 = *v103;
              v49 = v98;
              v46 = *((_DWORD *)this + 50);
              do
              {
                v50 = *(_WORD *)(v48 + 2 * v47);
                if (v46 == *((_DWORD *)this + 51))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)v103, 1, 1);
                  v46 = *((_DWORD *)this + 50);
                  v48 = *((_QWORD *)this + 24);
                }
                *(_WORD *)(v48 + 2 * v46++) = v50;
                *((_DWORD *)this + 50) = v46;
                ++v47;
                --v49;
              }
              while (v49);
            }
            if (v46 == *((_DWORD *)this + 51))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)v103, 1, 1);
              v46 = *((_DWORD *)this + 50);
            }
            *(_WORD *)(*((_QWORD *)this + 24) + 2 * v46) = v38;
            *((_DWORD *)this + 50) = v46 + 1;
            v51 = *((unsigned int *)this + 66);
            v11 = v96;
            v21 = v89;
            if (v51 == *((_DWORD *)this + 67))
            {
              DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v87, 1, 1);
              LODWORD(v51) = *((_DWORD *)this + 66);
            }
            v52 = *((_QWORD *)this + 32) + 28 * v51;
            *(_DWORD *)v52 = v44;
            *(_DWORD *)(v52 + 4) = v39;
            *(_DWORD *)(v52 + 8) = v91;
            *(_WORD *)(v52 + 12) = v38;
            *(_WORD *)(v52 + 14) = v92;
            *(_DWORD *)(v52 + 16) = v90 + ((v38 >> 20) & 0x3FF);
            *(_DWORD *)(v52 + 20) = v100;
            *(_WORD *)(v52 + 24) = v98 + 1;
            v53 = *((_DWORD *)this + 66);
            *((_DWORD *)this + 66) = v53 + 1;
            if (v94 == 2 * *((_DWORD *)this + 4))
              v11 = v53 + 1;
            v12 = v94 + 1;
          }
        }
        v35 += 2;
      }
      while ((v38 & 0x80000000) == 0);
      v13 = (v13 + 1);
      v10 = *((unsigned int *)this + 62);
      v8 = v86;
      a4 = v85;
      a5 = v84;
    }
    while (v13 < v10);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
LABEL_62:
  v118 = *((_DWORD *)this + 70) + v89;
  if (*((_BYTE *)this + 404))
    MiniFst::updateFrame((char *)this + 288, v88, v89, v8);
  v116 = 0u;
  v117 = 0u;
  SnapTime::recordTime((SnapTime *)&v116, 1, 0, 0, 0);
  v116 = vsubq_s64(v116, v119);
  v117 = vsubq_s64(v117, v120);
  v66 = (int64x2_t *)*((_QWORD *)this + 13);
  v67 = vaddq_s64(v66[1], v117);
  *v66 = vaddq_s64(*v66, v116);
  v66[1] = v67;
  v114 = 0u;
  v115 = 0u;
  SnapTime::recordTime((SnapTime *)&v114, 1, 0, 0, 0);
  if (v12 > 2 * *((_DWORD *)this + 4))
    FstSearchLeafBackoff::applyCutoffOnEmitting((uint64_t)this, v11, &v118);
  v112 = 0u;
  v113 = 0u;
  SnapTime::recordTime((SnapTime *)&v112, 1, 0, 0, 0);
  v68 = vsubq_s64(v112, v114);
  v69 = (int64x2_t *)*((_QWORD *)this + 13);
  v70 = v69[3];
  v71 = vaddq_s64(v69[2], v68);
  v112 = v68;
  v113 = vsubq_s64(v113, v115);
  v72 = vaddq_s64(v70, v113);
  v69[2] = v71;
  v69[3] = v72;
  v110 = 0u;
  v111 = 0u;
  SnapTime::recordTime((SnapTime *)&v110, 1, 0, 0, 0);
  FstSearchLeafBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v73 = *((unsigned int *)this + 6);
  if ((_DWORD)v73)
  {
    v74 = *((unsigned int *)this + 62);
    if (v73 < v74)
      mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(*((_QWORD *)this + 30), v73, v74);
  }
  v108 = 0u;
  v109 = 0u;
  SnapTime::recordTime((SnapTime *)&v108, 1, 0, 0, 0);
  v75 = vsubq_s64(v108, v110);
  v76 = (int64x2_t *)*((_QWORD *)this + 13);
  v77 = v76[5];
  v78 = vaddq_s64(v76[4], v75);
  v108 = v75;
  v109 = vsubq_s64(v109, v111);
  v79 = vaddq_s64(v77, v109);
  v76[4] = v78;
  v76[5] = v79;
  v106 = 0u;
  v107 = 0u;
  SnapTime::recordTime((SnapTime *)&v106, 1, 0, 0, 0);
  *((_DWORD *)this + 66) = 0;
  v80 = *((unsigned int *)this + 62);
  *((_DWORD *)this + 38) = v80;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v80;
    if (*((_DWORD *)a4 + 2) > v80)
      LODWORD(v80) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v80;
  }
  if (*((_BYTE *)this + 404))
    FstSearchLeafBackoff::seedFromMiniFst((uint64_t)this, v121);
  if (a5)
    FstSearchLeafBackoff::propagateNulls(this, v118, v8, a4);
  *((_DWORD *)this + 68) = v8;
  v104 = 0u;
  v105 = 0u;
  SnapTime::recordTime((SnapTime *)&v104, 1, 0, 0, 0);
  v81 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v81[6], vsubq_s64(v104, v106));
  v83 = vaddq_s64(v81[7], vsubq_s64(v105, v107));
  v81[6] = result;
  v81[7] = v83;
  return result;
}

void sub_20985EEC4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLeafBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(unsigned int *)(this + 264);
  if (v4 > a2)
  {
    v6 = this;
    v7 = (_QWORD *)(this + 256);
    v8 = a2;
    this = mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(*(_QWORD *)(this + 256), a2, v4);
    v9 = *(_DWORD *)(*v7 + 28 * a2);
    if (*a3 > v9)
      *a3 = v9;
    v10 = *(_DWORD *)(v6 + 268);
    if (a2 > v10)
      this = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v7, a2 - v10, 0);
    v11 = *(unsigned int *)(v6 + 264);
    if (v11 < a2)
    {
      v12 = v8 - v11;
      v13 = *v7 + 28 * v11 + 12;
      do
      {
        *(_QWORD *)(v13 - 12) = 0xFFFFFFFF00000000;
        *(_DWORD *)(v13 - 4) = -1;
        *(_WORD *)v13 = -2;
        *(_DWORD *)(v13 + 4) = 0;
        *(_DWORD *)(v13 + 8) = 0;
        *(_WORD *)(v13 + 12) = 0;
        v13 += 28;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 264) = a2;
  }
  return this;
}

uint64_t FstSearchLeafBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t i;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;

  v1 = this;
  v2 = *(unsigned int *)(this + 264);
  if ((_DWORD)v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 256), v2, 28);
    v3 = *(unsigned int *)(v1 + 264);
    *(_DWORD *)(v1 + 248) = 0;
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      for (i = 0; i < v3; ++i)
      {
        v7 = *(_QWORD *)(v1 + 256);
        if (!v4 || *(_DWORD *)(v7 + v4 + 4) != *(_DWORD *)(v7 + v4 - 24))
        {
          if (v5 == *(_DWORD *)(v1 + 252))
          {
            this = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v1 + 240, 1, 1);
            v5 = *(_DWORD *)(v1 + 248);
          }
          v8 = (_OWORD *)(*(_QWORD *)(v1 + 240) + 28 * v5);
          v9 = *(_OWORD *)(v7 + v4);
          *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(v7 + v4 + 12);
          *v8 = v9;
          v5 = *(_DWORD *)(v1 + 248) + 1;
          *(_DWORD *)(v1 + 248) = v5;
          v3 = *(unsigned int *)(v1 + 264);
        }
        v4 += 28;
      }
    }
  }
  else
  {
    *(_DWORD *)(this + 248) = 0;
  }
  return this;
}

uint64_t FstSearchLeafBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD v22[2];

  if (*(_BYTE *)(this + 404))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 312);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v5 = 0;
      v6 = 0;
      v7 = (_QWORD *)(this + 160);
      v21 = this + 240;
      do
      {
        v8 = (int *)(*(_QWORD *)(v2 + 304) + v5);
        v9 = *v8;
        v11 = v8[6];
        v10 = v8[7];
        v12 = v8[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v13 = (-2 - v12);
        if (v10 == 16777213)
        {
          v10 = 16777209;
          if (*(_DWORD *)(*v7 + 32 * (-2 - v12)) == 16777209)
            LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 20 * *(unsigned int *)(*v7 + 32 * v13 + 8) + 8);
        }
        v14 = *a2;
        v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<PrefilterResultFrame>::reallocElts(v2 + 160, 1, 1);
          v15 = *(unsigned int *)(v2 + 168);
        }
        v16 = *(_QWORD *)(v2 + 160) + 32 * v15;
        *(_DWORD *)v16 = v10;
        *(_DWORD *)(v16 + 4) = v14;
        *(_DWORD *)(v16 + 8) = -1;
        *(_DWORD *)(v16 + 12) = v9;
        *(_DWORD *)(v16 + 20) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        *(_DWORD *)(v16 + 16) = v13;
        *(_WORD *)(v16 + 28) = 0;
        v17 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v17 + 1;
        v18 = *(unsigned int *)(v2 + 248);
        if (v18 == *(_DWORD *)(v2 + 252))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v21, 1, 1);
          LODWORD(v18) = *(_DWORD *)(v2 + 248);
        }
        v19 = *(_QWORD *)(v2 + 240) + 28 * v18;
        *(_DWORD *)v19 = v9;
        *(_DWORD *)(v19 + 4) = v11;
        *(_DWORD *)(v19 + 8) = v17;
        *(_WORD *)(v19 + 12) = -2;
        *(_QWORD *)(v19 + 16) = 0;
        *(_WORD *)(v19 + 24) = 0;
        ++*(_DWORD *)(v2 + 248);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        v20 = *(_DWORD *)(v2 + 312);
        if (v20 >= *(_DWORD *)(v2 + 20))
          v20 = *(_DWORD *)(v2 + 20);
        v5 += 36;
      }
      while (v6 < v20);
    }
  }
  return this;
}

void sub_20985F278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *FstSearchLeafBackoff::propagateNulls(FstSearchLeafBackoff *this, int a2, int a3, SearchStats *a4)
{
  int v5;
  _QWORD *result;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  __int16 v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  SearchStats *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  __int16 v54;
  unsigned int v56;
  unint64_t v57;
  int v58;
  _QWORD *v59;
  __int16 v60;
  int v61;

  v5 = *((_DWORD *)this + 42);
  result = (_QWORD *)((char *)this + 240);
  v7 = *((_DWORD *)this + 62);
  v59 = result;
  if (!v7)
  {
    v39 = *((_DWORD *)this + 38);
    if (a4)
      goto LABEL_42;
    goto LABEL_43;
  }
  v48 = v5;
  v8 = 0;
  v49 = a4;
  v58 = a2;
  do
  {
    v9 = *(unsigned int *)(*((_QWORD *)this + 30) + 28 * v8 + 4);
    v10 = *((_QWORD *)this + 5);
    if (*(_DWORD *)(v10 + 160) != (_DWORD)v9
      && (*(_DWORD *)(v10 + 140) <= (int)v9 || (*(_DWORD *)(*(_QWORD *)(v10 + 152) + 4 * v9) & 0x40000000) != 0))
    {
      v11 = *(_DWORD *)(*((_QWORD *)this + 30) + 28 * v8 + 4);
      v56 = v11;
      v57 = v8;
      do
      {
        v12 = *((_QWORD *)this + 5);
        v13 = *(_QWORD *)(v12 + 152);
        v14 = *(_DWORD *)(v13 + 4 * v11);
        v15 = *(_DWORD *)(v13 + 4 * (v11 + 1));
        v16 = *(_DWORD *)(v12 + 140);
        if (v16 > v15)
          goto LABEL_32;
        v17 = (v14 & 0xFFFFF) <= 0xFFFF3 ? v14 & 0xFFFFF : v14 & 0xFFFFF | 0xF00000;
        if (v16 <= (int)v9 && v17 != 16777210)
          goto LABEL_32;
        v19 = (v14 >> 20) & 0x3FF;
        v20 = *result;
        v21 = *result + 28 * v8;
        v22 = *(_DWORD *)v21 + v19;
        if (v22 > a2)
          goto LABEL_32;
        v23 = *(_DWORD *)(v21 + 8);
        v24 = *(_WORD *)(v21 + 12);
        v25 = *(_WORD *)(v21 + 14);
        v26 = *(_DWORD *)(v21 + 20);
        v27 = *(_WORD *)(v21 + 24);
        v28 = *(_DWORD *)(v21 + 16) + v19;
        if (v17 == 16777210)
        {
          if (v7 != *((_DWORD *)this + 63))
            goto LABEL_31;
        }
        else
        {
          if (v17 == 16777214)
            v29 = v28;
          else
            v29 = 0;
          if (v17 == 16777214)
            v30 = 0;
          else
            v30 = v28;
          v31 = *((unsigned int *)this + 42);
          if (v31 == *((_DWORD *)this + 43))
          {
            v60 = v24;
            v53 = v28;
            v54 = v25;
            v51 = v30;
            v52 = v23;
            v50 = v29;
            DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 160, 1, 1);
            v29 = v50;
            v30 = v51;
            v23 = v52;
            v28 = v53;
            v25 = v54;
            v24 = v60;
            a2 = v58;
            result = v59;
            v31 = *((unsigned int *)this + 42);
          }
          v32 = 0;
          v33 = *((_QWORD *)this + 20) + 32 * v31;
          *(_DWORD *)v33 = v17;
          *(_DWORD *)(v33 + 4) = a3;
          *(_DWORD *)(v33 + 8) = -1;
          *(_DWORD *)(v33 + 12) = v22 - v29;
          *(_DWORD *)(v33 + 16) = v23;
          *(_DWORD *)(v33 + 20) = v30;
          *(_DWORD *)(v33 + 24) = v26;
          *(_WORD *)(v33 + 28) = v27;
          v23 = *((_DWORD *)this + 42);
          *((_DWORD *)this + 42) = v23 + 1;
          v7 = *((_DWORD *)this + 62);
          v27 = 0;
          if (v7 != *((_DWORD *)this + 63))
            goto LABEL_30;
        }
        v34 = v24;
        v61 = v26;
        v35 = v25;
        v36 = v28;
        v37 = v23;
        DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)result, 1, 1);
        v23 = v37;
        v28 = v36;
        v25 = v35;
        v26 = v61;
        LODWORD(v9) = v56;
        v8 = v57;
        v24 = v34;
        a2 = v58;
        result = v59;
        v7 = *((_DWORD *)this + 62);
        v32 = v27;
LABEL_30:
        v20 = *result;
        v27 = v32;
LABEL_31:
        v38 = v20 + 28 * v7;
        *(_DWORD *)v38 = v22;
        *(_DWORD *)(v38 + 4) = v15;
        *(_DWORD *)(v38 + 8) = v23;
        *(_WORD *)(v38 + 12) = v24;
        *(_WORD *)(v38 + 14) = v25;
        *(_DWORD *)(v38 + 16) = v28;
        *(_DWORD *)(v38 + 20) = v26;
        *(_WORD *)(v38 + 24) = v27;
        v7 = *((_DWORD *)this + 62) + 1;
        *((_DWORD *)this + 62) = v7;
LABEL_32:
        v11 += 2;
      }
      while ((v14 & 0x80000000) == 0);
    }
    ++v8;
  }
  while (v8 < v7);
  v39 = *((_DWORD *)this + 38);
  if (v7 > v39)
  {
    mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*((_QWORD *)this + 30) + 28 * v39), v7 - v39, 28);
    result = v59;
    v39 = *((_DWORD *)this + 38);
    v7 = *((_DWORD *)this + 62);
  }
  a4 = v49;
  v5 = v48;
  if (v39 < v7)
  {
    v40 = v39;
    v41 = 28 * v39;
    do
    {
      v42 = *result + v41;
      if (*(_DWORD *)(v42 + 4) != *(_DWORD *)(*result + 28 * (v40 - 1) + 4))
      {
        v43 = (_OWORD *)(*result + 28 * v39);
        v44 = *(_OWORD *)v42;
        *(_OWORD *)((char *)v43 + 10) = *(_OWORD *)(v42 + 10);
        *v43 = v44;
        ++v39;
        v7 = *((_DWORD *)this + 62);
      }
      ++v40;
      v41 += 28;
    }
    while (v40 < v7);
  }
  if (v49)
LABEL_42:
    *((_DWORD *)a4 + 1) += *((_DWORD *)this + 42) - v5;
LABEL_43:
  v45 = *((_DWORD *)this + 63);
  if (v39 > v45)
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)result, v39 - v45, 0);
    result = v59;
    v7 = *((_DWORD *)this + 62);
  }
  if (v7 < v39)
  {
    v46 = v39 - (unint64_t)v7;
    v47 = *result + 28 * v7 + 12;
    do
    {
      *(_QWORD *)(v47 - 12) = 0xFFFFFFFF00000000;
      *(_DWORD *)(v47 - 4) = -1;
      *(_WORD *)v47 = -2;
      *(_DWORD *)(v47 + 4) = 0;
      *(_DWORD *)(v47 + 8) = 0;
      *(_WORD *)(v47 + 12) = 0;
      v47 += 28;
      --v46;
    }
    while (v46);
  }
  *((_DWORD *)this + 62) = v39;
  return result;
}

uint64_t FstSearchLeafBackoff::collectTraces(FstSearchLeafBackoff *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  __int16 v33;
  unsigned int v34;
  unint64_t v35;
  _WORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int v52;

  v2 = *((unsigned int *)this + 42);
  v52 = 0;
  v51 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v51 = v3;
    v52 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v52);
  }
  v5 = *((unsigned int *)this + 62);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = v51;
    v8 = (unsigned int *)(*((_QWORD *)this + 30) + 8);
    do
    {
      v10 = *v8;
      v8 += 7;
      v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        v5 = *((unsigned int *)this + 62);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  v11 = *((_DWORD *)this + 42);
  if (v11)
  {
    v12 = (uint64_t *)((char *)this + 160);
    v13 = v51;
    v14 = v11 - 1;
    do
    {
      v15 = v14;
      if (*((_DWORD *)v13 + v14))
      {
        v16 = *(unsigned int *)(*v12 + 32 * v14 + 16);
        if ((_DWORD)v16 != -1)
          *((_DWORD *)v13 + v16) = 1;
      }
      --v14;
    }
    while (v15);
    v17 = *((_DWORD *)this + 42);
    v49 = 0;
    v50 = 0;
    if (v17)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = v51;
        if (*((_DWORD *)v51 + v19))
        {
          v22 = *v12;
          if (v19 != v20)
          {
            v23 = (__int128 *)(v22 + 32 * v19);
            v24 = (_OWORD *)(v22 + 32 * v20);
            v25 = *v23;
            *(_OWORD *)((char *)v24 + 14) = *(__int128 *)((char *)v23 + 14);
            *v24 = v25;
            v22 = *v12;
          }
          v26 = v22 + 32 * v20;
          v29 = *(_DWORD *)(v26 + 16);
          v27 = (_DWORD *)(v26 + 16);
          v28 = v29;
          if (v29 != -1)
            *v27 = *((_DWORD *)v21 + v28);
          v30 = v50;
          if (*(_WORD *)(v22 + 32 * v20 + 28))
          {
            v31 = 0;
            v32 = v50;
            do
            {
              v33 = *(_WORD *)(*((_QWORD *)this + 24) + 2 * (v31 + *(_DWORD *)(v22 + 32 * v20 + 24)));
              if (v32 == HIDWORD(v50))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v49, 1, 1);
                v32 = v50;
                v18 = v49;
                v22 = *v12;
              }
              *(_WORD *)(v18 + 2 * v32++) = v33;
              LODWORD(v50) = v32;
              ++v31;
            }
            while (v31 < *(unsigned __int16 *)(v22 + 32 * v20 + 28));
          }
          *(_DWORD *)(v22 + 32 * v20 + 24) = v30;
          *((_DWORD *)v51 + v19) = v20++;
          v17 = *((_DWORD *)this + 42);
        }
        ++v19;
      }
      while (v19 < v17);
      v34 = *((_DWORD *)this + 43);
      if (v20 > v34)
      {
        DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 160, v20 - v34, 0);
        v17 = *((_DWORD *)this + 42);
      }
      if (v17 < v20)
      {
        v35 = v20 - (unint64_t)v17;
        v36 = (_WORD *)(*v12 + 32 * v17 + 28);
        do
        {
          *(_OWORD *)(v36 - 14) = xmmword_209A6C7D0;
          *(_QWORD *)(v36 - 6) = 0xFFFFFFFFLL;
          *((_DWORD *)v36 - 1) = 0;
          *v36 = 0;
          v36 += 16;
          --v35;
        }
        while (v35);
      }
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v20 = 0;
    v49 = 0;
    v50 = 0;
  }
  *((_DWORD *)this + 42) = v20;
  v37 = *((unsigned int *)this + 62);
  if ((_DWORD)v37)
  {
    v38 = 0;
    v39 = v50;
    v40 = *((_QWORD *)this + 30);
    do
    {
      if (*(_WORD *)(v40 + 28 * v38 + 24))
      {
        v41 = 0;
        LODWORD(v42) = v39;
        do
        {
          v43 = *(_WORD *)(*((_QWORD *)this + 24) + 2 * (v41 + *(_DWORD *)(v40 + 28 * v38 + 20)));
          if ((_DWORD)v42 == HIDWORD(v50))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v49, 1, 1);
            LODWORD(v42) = v50;
            v40 = *((_QWORD *)this + 30);
          }
          *(_WORD *)(v49 + 2 * v42) = v43;
          v42 = (v42 + 1);
          LODWORD(v50) = v42;
          ++v41;
        }
        while (v41 < *(unsigned __int16 *)(v40 + 28 * v38 + 24));
        v37 = *((unsigned int *)this + 62);
      }
      else
      {
        v42 = v39;
      }
      *(_DWORD *)(v40 + 28 * v38++ + 20) = v39;
      v39 = v42;
    }
    while (v38 < v37);
  }
  else
  {
    LODWORD(v42) = v50;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 192, &v49, 0, v42);
  v44 = *((unsigned int *)this + 62);
  if ((_DWORD)v44)
  {
    v45 = v51;
    v46 = (_DWORD *)(*((_QWORD *)this + 30) + 8);
    do
    {
      v47 = *v46;
      if ((_DWORD)v47 != -1)
        *v46 = *((_DWORD *)v45 + v47);
      v46 += 7;
      --v44;
    }
    while (v44);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v49);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v51);
}

void sub_20985F9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a11);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchLeafBackoff::advanceDeltas((FstSearchLeafBackoff *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchLeafBackoff::collectTraces((FstSearchLeafBackoff *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeafBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  this[62] = 0;
  return this;
}

double FstSearchLeafBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLeafBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeafBackoff::beginTopRecPassSyncRecog(FstSearchLeafBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 288, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 100) = result;
    *((_BYTE *)this + 404) = 1;
  }
  return result;
}

uint64_t FstSearchLeafBackoff::endTopRecPassSyncRecog(FstSearchLeafBackoff *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLeafBackoff::generateTraceTokensFromTraces((unint64_t)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 70) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

unint64_t FstSearchLeafBackoff::generateTraceTokensFromTraces(unint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  float *v12;
  float32x2x2_t v13;
  unint64_t v14;
  __int16 v15;

  v1 = this;
  v2 = (_QWORD *)(this + 176);
  v3 = *(unsigned int *)(this + 168);
  v4 = *(_DWORD *)(this + 188);
  if (v3 > v4)
    this = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(this + 176, v3 - v4, 0);
  v5 = *(unsigned int *)(v1 + 184);
  if (v5 < v3)
  {
    v6 = v3 - v5;
    v7 = (_WORD *)(*v2 + 20 * v5 + 16);
    do
    {
      *((_OWORD *)v7 - 1) = xmmword_209A6C810;
      *v7 = 0;
      v7 += 10;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)(v1 + 184) = v3;
  v8 = *(unsigned int *)(v1 + 168);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = (_WORD *)(*(_QWORD *)(v1 + 176) + 16);
    v11 = (_WORD *)(*(_QWORD *)(v1 + 160) + 28);
    do
    {
      *((_DWORD *)v11 - 5) = v9;
      v12 = (float *)(v10 - 8);
      v13 = (float32x2x2_t)*((_OWORD *)v11 - 1);
      v14 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
      vst2_f32(v12, v13);
      v15 = *v11;
      v11 += 16;
      *v10 = v15;
      v10 += 10;
      ++v9;
    }
    while (v8 != v9);
  }
  return this;
}

void FstSearchLeafBackoff::printSize(FstSearchLeafBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  int v126;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126)
    v15 = v125;
  else
    v15 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A6C820, a3, &unk_209A6C820, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A6C820);
  v20 = (a3 + 1);
  v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126)
    v26 = v125;
  else
    v26 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126)
    v31 = v125;
  else
    v31 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126)
    v36 = v125;
  else
    v36 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v36, 4, 4, 0);
  v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126)
    v41 = v125;
  else
    v41 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v42 = 16;
  v43 = *((unsigned int *)this + 42);
  v44 = 30 * v43;
  if ((int)v43 <= 0)
    v44 = 0;
  v45 = v44 + v42;
  v46 = v44 + v42 + 30 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126)
    v51 = v125;
  else
    v51 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v52 = 16;
  v53 = *((unsigned int *)this + 46);
  v54 = 18 * v53;
  if ((int)v53 <= 0)
    v54 = 0;
  v55 = v54 + v52;
  v56 = v54 + v52 + 18 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126)
    v61 = v125;
  else
    v61 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v61, v56, v55, 0);
  v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v62 = 12;
  else
    v62 = 16;
  v63 = *((unsigned int *)this + 50);
  v64 = *((_DWORD *)this + 51);
  if (v64 >= v63)
  {
    v65 = 0;
    if ((int)v63 > 0)
      v62 = (v62 | 2) + 2 * (v63 - 1);
    v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    v65 = 2 * v63;
    v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126)
    v71 = v125;
  else
    v71 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_209A6C820, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v72 = 16;
  v73 = *((unsigned int *)this + 62);
  v74 = 24 * v73;
  if ((int)v73 <= 0)
    v74 = 0;
  v75 = v74 + v72;
  v76 = v74 + v72 + 24 * (*((_DWORD *)this + 63) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126)
    v81 = v125;
  else
    v81 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_209A6C820, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v82 = 16;
  v83 = *((unsigned int *)this + 66);
  v84 = 24 * v83;
  if ((int)v83 <= 0)
    v84 = 0;
  v85 = v84 + v82;
  v86 = v84 + v82 + 24 * (*((_DWORD *)this + 67) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126)
    v91 = v125;
  else
    v91 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_209A6C820, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126)
    v96 = v125;
  else
    v96 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_209A6C820, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126)
    v101 = v125;
  else
    v101 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_209A6C820, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126)
    v106 = v125;
  else
    v106 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_209A6C820, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v107 = sizeObject((uint64_t)this + 288, 0);
  v108 = sizeObject((uint64_t)this + 288, 1);
  v109 = sizeObject((uint64_t)this + 288, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126)
    v114 = v125;
  else
    v114 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_209A6C820, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  v123 = 0;
  v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126)
    v119 = v125;
  else
    v119 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_209A6C820, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_20986049C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafBackoff::getBestTrace(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if ((a4 & 1) != 0)
    v4 = 0;
  else
    v4 = *(unsigned int *)(a1 + 152);
  v5 = *(unsigned int *)(a1 + 248);
  if (v4 >= v5)
    goto LABEL_21;
  v6 = 28 * v4;
  v7 = 1879048192;
  v8 = 0xFFFFFFFFLL;
  do
  {
    v9 = *(_QWORD *)(a1 + 240);
    if (!a4 || (v10 = *(unsigned int *)(v9 + v6 + 8), (_DWORD)v10 == -1))
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4))
        goto LABEL_19;
      v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2)
      *(_BYTE *)(*a2 + v10) = 1;
    if (a3)
      *(_BYTE *)(*a3 + v10) = 1;
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 32 * v10 + 12)
        + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 32 * v10 + 4));
    if (v7 > v11)
      v8 = v10;
    if (v7 >= v11)
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 32 * v10 + 12)
         + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 32 * v10 + 4));
    v5 = *(unsigned int *)(a1 + 248);
LABEL_19:
    ++v4;
    v6 += 28;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    v12 = *(unsigned int *)(a1 + 168);
    v8 = 0xFFFFFFFFLL;
    while (v12)
    {
      --v12;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(_QWORD *)(a1 + 160) + 32 * v12) == 16777213)
      {
        if (a2)
          *(_BYTE *)(*a2 + v12) = 1;
        v8 = v12;
        if (a3)
          *(_BYTE *)(*a3 + v12) = 1;
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLeafBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchLeafBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 32 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchLeafBackoff::createLatticeNodes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6, _QWORD *a7)
{
  uint64_t v9;
  BOOL v10;
  int Node;
  uint64_t result;
  unsigned int v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int *v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  _QWORD *v46;

  v9 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v9)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(4 * v9, 0);
    *(_DWORD *)(a2 + 8) = v9;
  }
  Node = Lattice<WordLatticeLC>::createNode(a4);
  result = a3;
  v13 = *(_DWORD *)(a3 + 8);
  if (v13 == *(_DWORD *)(a3 + 12))
  {
    DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    result = a3;
    v13 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v13) = Node;
  ++*(_DWORD *)(result + 8);
  v14 = *(_DWORD *)(a1 + 168);
  v15 = a6;
  v16 = (uint64_t *)a2;
  if (v14)
  {
    v17 = (v14 - 1);
    v18 = 32 * v17;
    result = 0xFFFFFFFFLL;
    v46 = a7;
    do
    {
      v19 = *v16;
      *(_DWORD *)(*v16 + 4 * v17) = -1;
      v20 = *v15;
      if (*(_BYTE *)(*v15 + v17))
      {
        v21 = *(_QWORD *)(a1 + 160);
        v22 = *(_QWORD *)(a1 + 88);
        v23 = *(_DWORD *)(v22 + 4 * *(unsigned int *)(v21 + v18 + 4));
        if (*(_BYTE *)(*a7 + v17))
        {
          if (*(_BYTE *)(*v15 + v17) != 1 || (_DWORD)result == -1)
          {
            v25 = *(_DWORD *)(v22 + 4 * *(unsigned int *)(v21 + v18 + 4));
            v26 = result;
            v27 = Lattice<WordLatticeLC>::createNode(a4);
            v28 = a3;
            v16 = (uint64_t *)a2;
            *(_DWORD *)(*(_QWORD *)a2 + 4 * v17) = *(_DWORD *)(a3 + 8);
            v29 = *(unsigned int *)(a3 + 8);
            if (v29 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              v28 = a3;
              v16 = (uint64_t *)a2;
              v29 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)v28 + 4 * v29) = v27;
            v30 = *(_DWORD *)(v28 + 8);
            *(_DWORD *)(v28 + 8) = v30 + 1;
            v15 = a6;
            v20 = *a6;
            if (*(_BYTE *)(*a6 + v17) == 1)
              result = v30;
            else
              result = v26;
            v21 = *(_QWORD *)(a1 + 160);
            v23 = v25;
          }
          else
          {
            *(_DWORD *)(v19 + 4 * v17) = result;
          }
        }
        v31 = *(_DWORD *)(v21 + v18 + 8);
        v32 = *(_QWORD *)(a1 + 176);
        v33 = (_DWORD *)(v32 + 20 * v31);
        v34 = v33[2];
        if ((v33[2] & 0x80000000) != 0)
        {
          *v33 += v23;
        }
        else
        {
          if (*(_DWORD *)(v21 + v18) == 16777209)
          {
            v35 = *a5 + 16 * v34;
            v37 = (_DWORD *)(v35 + 8);
            v36 = *(unsigned int *)(v35 + 8);
            v38 = *(_QWORD *)(a1 + 176);
            if (v36 == *(_DWORD *)(v35 + 12))
            {
              v44 = v23;
              v45 = result;
              DgnPrimArray<unsigned int>::reallocElts(v35, 1, 1);
              v23 = v44;
              result = v45;
              v16 = (uint64_t *)a2;
              v15 = a6;
              v36 = *v37;
              v21 = *(_QWORD *)(a1 + 160);
              v38 = *(_QWORD *)(a1 + 176);
              v20 = *a6;
            }
            *(_DWORD *)(*(_QWORD *)v35 + 4 * v36) = v17;
            ++*v37;
            v34 = v33[2];
            a7 = v46;
          }
          else
          {
            *(_BYTE *)(*a7 + v34) = 1;
            v38 = v32;
          }
          v39 = v21 + 32 * v34;
          v40 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v39 + 4));
          v41 = (int *)(v38 + 20 * *(unsigned int *)(v39 + 8));
          v42 = v23 + *v33 - v40;
          v43 = *v41;
          LODWORD(v41) = v41[1];
          *v33 = v42 - v43;
          *(_DWORD *)(v32 + 20 * v31 + 4) -= (_DWORD)v41;
          *(_BYTE *)(v20 + v34) = 2;
        }
      }
      --v17;
      v18 -= 32;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t FstSearchLeafBackoff::buildWordLattice(unint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, unsigned __int8 a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v23, *(unsigned int *)(a1 + 168));
  v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafBackoff::createLatticeNodes(a1, (uint64_t)&v26, (uint64_t)&v24, (uint64_t)a2, v23, a3, a4);
  v9 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = v25;
    do
    {
      if (*(_BYTE *)(*a3 + v10))
      {
        v12 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v12 + 32 * v10) != 16777209)
        {
          v13 = *(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(v12 + 32 * v10 + 8);
          v14 = *(unsigned int *)(v13 + 8);
          if ((_DWORD)v14 == -1)
            v15 = 0;
          else
            v15 = v11 - *(_DWORD *)(v26 + 4 * v14);
          v16 = *(unsigned int *)(v24 + 4 * v15);
          if (*(_BYTE *)(*a4 + v10))
            FstSearchLeafBackoff::createLatticeLink(a1, v10, (int *)v13, 0xFFFFFFFFLL, v16, (const WordLatticeLC *)*(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v10))), a2, (uint64_t)v8, a5);
          v17 = v23[0];
          if (*(_DWORD *)(v23[0] + 16 * v10 + 8))
          {
            v18 = 0;
            do
            {
              v19 = *(unsigned int *)(*(_QWORD *)(v17 + 16 * v10) + 4 * v18);
              FstSearchLeafBackoff::createLatticeLink(a1, v10, (int *)v13, v19, v16, (const WordLatticeLC *)*(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v19))), a2, (uint64_t)v8, a5);
              ++v18;
              v17 = v23[0];
            }
            while (v18 < *(unsigned int *)(v23[0] + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v9);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v24);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v26);
}

void sub_209860BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeafBackoff::createLatticeLink(unint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v12;
  unsigned int v13;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _QWORD v35[2];
  _QWORD v36[2];
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  __int128 v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  __int128 v51;
  _DWORD v52[2];
  __int128 v53;

  v12 = a5;
  v13 = a4;
  v17 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    v18 = 0;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(v17 + 32 * a4 + 8) + 8) == a2)
  {
    v18 = (_DWORD *)(*(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(v17 + 32 * a4 + 8));
  }
  else
  {
    v18 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v17 + 32 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v52);
  v19 = a3[1];
  if (v18)
  {
    v19 += v18[1];
    v20 = *v18 + *a3;
  }
  else
  {
    v20 = *a3;
  }
  if (v52[0] >> 25 == 126)
  {
    v21 = 0;
    v22 = v19;
  }
  else
  {
    v21 = *(_DWORD *)(a1 + 136);
    v22 = v19 - v21;
  }
  if ((v13 & 0x80000000) != 0)
  {
    v23 = 0;
  }
  else
  {
    v23 = *(_DWORD *)(a1 + 140);
    v22 -= v23;
  }
  v24 = v20 - v19;
  v25 = a3[2];
  v26 = *(_QWORD *)(a1 + 160);
  if ((_DWORD)v25 == -1)
  {
    v28 = 0;
    if (a9)
      goto LABEL_21;
  }
  else
  {
    v27 = *(_DWORD *)(v26 + 32 * v25 + 4);
    if (a9)
    {
      if (v27 >= 1)
        --v27;
      v28 = (v27 >> 1) + 1;
LABEL_21:
      v29 = *(_DWORD *)(v26 + 32 * a2 + 4);
      if (v29 >= 1)
        --v29;
      v30 = (v29 >> 1) + 1;
      v31 = v30 - v28;
      if ((v13 & 0x80000000) == 0)
      {
        v32 = *(_DWORD *)(v26 + 32 * v13 + 4);
        if (v32 >= 1)
          --v32;
        v33 = v32 >> 1;
        goto LABEL_30;
      }
      goto LABEL_31;
    }
    v28 = v27 + 1;
  }
  v30 = *(_DWORD *)(v26 + 32 * a2 + 4) + 1;
  v31 = v30 - v28;
  if ((v13 & 0x80000000) == 0)
  {
    v33 = *(_DWORD *)(v26 + 32 * v13 + 4);
LABEL_30:
    v34 = v33 - v30 + 1;
    goto LABEL_32;
  }
LABEL_31:
  v34 = 0;
LABEL_32:
  v37 = v28;
  v38 = v31;
  v39 = v34;
  v40 = v22;
  v41 = 0;
  v42 = v21;
  v43 = v24;
  v44 = 0;
  v45 = v23;
  v46 = xmmword_209A6C7F0;
  v47 = 0;
  v48 = -1;
  v36[0] = &off_24C2149F8;
  v36[1] = 0xBFF0000000000000;
  v49 = v52[0];
  v50 = v52[1];
  v51 = v53;
  v35[0] = 0;
  v35[1] = 0;
  FstSearchLeafBackoff::buildLinkSegmentation(a1, (uint64_t)v35, (uint64_t)a3, v28, a9);
  if (v18)
    FstSearchLeafBackoff::buildLinkSegmentation(a1, (uint64_t)v35, (uint64_t)v18, v30, a9);
  v48 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v35, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v12, a6, (WordLatticeLC *)v36);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v35);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v36);
}

void sub_209860E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&a11);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLeafBackoff::buildLinkSegmentation(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  unsigned int v6;
  unint64_t v10;
  unsigned int v11;
  int v12;
  __int16 v13;
  unsigned __int16 v14;
  int v15;

  if (a5)
    v5 = 2;
  else
    v5 = 1;
  v6 = *(unsigned __int16 *)(a3 + 16);
  if (*(_WORD *)(a3 + 16))
  {
    v10 = result;
    v11 = 0;
    v12 = 0;
    v13 = *(_WORD *)(*(_QWORD *)(result + 56) + 136);
    v14 = -1;
    do
    {
      v15 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 192) + 2 * (v11 + *(_DWORD *)(a3 + 12)));
      if (v15 != v14)
      {
        if (v12)
        {
          result = FstSearchLeafLatticeBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
          a4 += v12;
          v6 = *(unsigned __int16 *)(a3 + 16);
          v14 = v15;
          v12 = 0;
        }
        else
        {
          v14 = *(_WORD *)(*(_QWORD *)(v10 + 192) + 2 * (v11 + *(_DWORD *)(a3 + 12)));
        }
      }
      ++v12;
      v11 += v5;
    }
    while (v11 < v6);
    if (v12)
      return FstSearchLeafLatticeBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
  }
  return result;
}

uint64_t FstSearchLeafBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 404))
    return MiniFst::beginTopFstSyncRecog(this + 288);
  return this;
}

uint64_t FstSearchLeafBackoff::endTopRecSyncRecog(FstSearchLeafBackoff *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeafBackoff::getBestExitScore(FstSearchLeafBackoff *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 69) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 62);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 28 * v1;
  do
  {
    v7 = *((_QWORD *)this + 30) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 32 * v8 + 4) == *((_DWORD *)this + 68))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 62);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v12 = *v4++;
      v13 = v9 + 32 * v12;
      v14 = *(_DWORD *)(v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 69) = *(_DWORD *)(v13 + 16);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_20986111C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLeafBackoff *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 62);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 30);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 7;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

_QWORD *FstSearchLeafBackoff::seedTheory(FstSearchLeafBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 32 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(_QWORD *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    *(_WORD *)(v12 + 28) = 0;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 62);
  if (v14 == *((_DWORD *)this + 63))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 240, 1, 1);
    v14 = *((_DWORD *)this + 62);
  }
  v15 = *((_QWORD *)this + 30) + 28 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_QWORD *)(v15 + 16) = 0;
  *(_WORD *)(v15 + 24) = 0;
  LODWORD(v15) = *((_DWORD *)this + 62) + 1;
  *((_DWORD *)this + 62) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchLeafBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchLeafBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  unsigned int *v11;
  uint64_t i;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v8 = *(unsigned int *)(result + 276);
  if ((_DWORD)v8 != -1)
  {
    v10 = result;
    v11 = (unsigned int *)(*(_QWORD *)(result + 160) + 32 * v8);
    for (i = v11[4]; (_DWORD)i != -1; v8 = v17)
    {
      v17 = i;
      result = *(_QWORD *)(v10 + 40);
      if (*v11 == 16777209)
      {
        v18 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v11, a3, (uint64_t)a4, a5, a6, a7, a8);
        v18 = result;
      }
      v19 = *(unsigned int *)(a2 + 8);
      if (v19 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v19 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v19) = v18;
      ++*(_DWORD *)(a2 + 8);
      v20 = *(unsigned int *)(a6 + 8);
      if (v20 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v20 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v20) = v8;
      ++*(_DWORD *)(a6 + 8);
      v21 = *(_QWORD *)(v10 + 160);
      v22 = *(_DWORD *)(v21 + 32 * v8 + 4);
      v23 = *(unsigned int *)(a3 + 8);
      if (v23 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v23 = *(unsigned int *)(a3 + 8);
        v21 = *(_QWORD *)(v10 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v23) = v22;
      ++*(_DWORD *)(a3 + 8);
      v24 = *(_DWORD *)(v21 + 32 * v8 + 12);
      v25 = *(unsigned int *)(a5 + 8);
      if (v25 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v25 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v25) = v24;
      ++*(_DWORD *)(a5 + 8);
      v11 = (unsigned int *)(*(_QWORD *)(v10 + 160) + 32 * v17);
      i = v11[4];
    }
    *a4 = *v11;
  }
  return result;
}

void FstSearchLeafBackoff::checkSearchParametersValidityForArcGraph(FstSearchLeafBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchLeafBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _DWORD v28[2];
  __int128 v29;

  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    v9 = a4;
    LODWORD(v11) = 0;
    v12 = a2;
    v13 = a2;
    do
    {
      v14 = (_DWORD *)(*(_QWORD *)(a1 + 160) + 32 * v13);
      if (*v14 == 16777209)
        v11 = v11;
      else
        v11 = (v11 + 1);
      v13 = v14[4];
    }
    while ((_DWORD)v13 != -1);
    v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15)
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      v17 = v11 - v16;
      v18 = *(_QWORD *)a3 + 32 * v16;
      do
      {
        *(_QWORD *)v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_209A593D0;
        *(_QWORD *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if ((_DWORD)v11)
    {
      v19 = *(_QWORD *)(a1 + 160);
      v20 = -16;
      do
      {
        v21 = (unsigned int *)(v19 + 32 * v12);
        v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            v23 = v22 - 1;
            if (v22 < 1)
              v23 = v22;
            v20 = (v23 >> 1) + 1;
          }
          else
          {
            v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            v24 = v22 - 1;
            if (v22 < 1)
              v24 = v21[1];
            v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16)
            v25 = v22 + 1;
          else
            v25 = v20;
          v26 = v28[1];
          v11 = (v11 - 1);
          v27 = *(_QWORD *)a3 + 32 * v11;
          *(_DWORD *)v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          v19 = *(_QWORD *)(a1 + 160);
          v20 = -16;
        }
        v12 = *(unsigned int *)(v19 + 32 * v12 + 16);
      }
      while ((_DWORD)v12 != -1);
    }
  }
}

uint64_t FstSearchLeafBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLeafBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchLeafBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 32 * v24;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_2098619B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLeaf::maybeGeneratePelMaps(FstSearchLeaf *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 224, (uint64_t)this + 208);
}

int64x2_t FstSearchLeaf::advanceDeltas(FstSearchLeaf *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  int ScoreNoBackoff;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  int64x2_t *v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t *v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  unint64_t v73;
  unint64_t v74;
  int64x2_t v75;
  int64x2_t *v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  uint64_t v80;
  int64x2_t *v81;
  int64x2_t result;
  int64x2_t v83;
  int v84;
  SearchStats *v85;
  int v86;
  char *v87;
  int *v88;
  int v89;
  int v90;
  int v91;
  __int16 v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  __int16 v98;
  __int16 v99;
  __int16 v100;
  unsigned int v101;
  uint64_t *v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int v117;
  int64x2_t v118;
  int64x2_t v119;
  int v120[3];

  v8 = a2;
  v120[0] = a2;
  v118 = 0u;
  v119 = 0u;
  SnapTime::recordTime((SnapTime *)&v118, 1, 0, 0, 0);
  v88 = (int *)((char *)this + 280);
  *((_DWORD *)this + 70) = a3;
  v89 = *((_DWORD *)this + 2);
  v10 = *((unsigned int *)this + 62);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v102 = (uint64_t *)((char *)this + 192);
    v87 = (char *)this + 256;
    do
    {
      v14 = *((_QWORD *)this + 30);
      v15 = *((_QWORD *)this + 5);
      v16 = 28 * v13;
      while (1)
      {
        v17 = *(unsigned int *)(v14 + v16 + 4);
        if (*(_DWORD *)(v15 + 160) != (_DWORD)v17)
          break;
        ++v13;
        v16 += 28;
        if (v13 >= v10)
          goto LABEL_57;
      }
      v86 = v8;
      v85 = a4;
      v84 = a5;
      v97 = v12;
      v96 = *(unsigned int *)(v14 + v16 + 4);
      if (*(_DWORD *)(v15 + 140) > (int)v17
        && (v18 = *(_DWORD *)(v14 + v16),
            v19 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + v16 + 12))
                + v18,
            v20 = *((_DWORD *)this + 70),
            v19 - v89 <= v20))
      {
        v94 = v11;
        if (v20 > v19)
          *v88 = v19;
        v22 = *((_QWORD *)this + 30) + v16;
        v23 = *(_QWORD *)(v22 + 4);
        v100 = *(_WORD *)(v22 + 12);
        v98 = *(_WORD *)(v22 + 14);
        v93 = *(_DWORD *)(v22 + 16);
        v24 = *(unsigned __int16 *)(v22 + 24);
        v25 = *((_DWORD *)this + 50);
        v26 = v25;
        v21 = v89;
        if (*(_WORD *)(v22 + 24))
        {
          v27 = *(_DWORD *)(v22 + 20);
          v28 = *v102;
          v29 = v24;
          v26 = *((_DWORD *)this + 50);
          do
          {
            v30 = *(_WORD *)(v28 + 2 * v27);
            if (v26 == *((_DWORD *)this + 51))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)v102, 1, 1);
              v26 = *((_DWORD *)this + 50);
              v28 = *((_QWORD *)this + 24);
            }
            *(_WORD *)(v28 + 2 * v26++) = v30;
            *((_DWORD *)this + 50) = v26;
            ++v27;
            --v29;
          }
          while (v29);
        }
        if (v26 == *((_DWORD *)this + 51))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)v102, 1, 1);
          v26 = *((_DWORD *)this + 50);
        }
        *(_WORD *)(*((_QWORD *)this + 24) + 2 * v26) = v100;
        *((_DWORD *)this + 50) = v26 + 1;
        v31 = *((unsigned int *)this + 66);
        v17 = v96;
        if (v31 == *((_DWORD *)this + 67))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v87, 1, 1);
          LODWORD(v31) = *((_DWORD *)this + 66);
        }
        v32 = *((_QWORD *)this + 32) + 28 * v31;
        *(_DWORD *)v32 = v19;
        *(_QWORD *)(v32 + 4) = v23;
        *(_WORD *)(v32 + 12) = v100;
        *(_WORD *)(v32 + 14) = v98;
        *(_DWORD *)(v32 + 16) = v93;
        *(_DWORD *)(v32 + 20) = v25;
        *(_WORD *)(v32 + 24) = v24 + 1;
        v33 = *((_DWORD *)this + 66);
        *((_DWORD *)this + 66) = v33 + 1;
        v11 = v94;
        if (v97 == 2 * *((_DWORD *)this + 4))
          v11 = v33 + 1;
        ++v97;
      }
      else
      {
        v21 = v89;
      }
      v34 = v17;
      do
      {
        v35 = *((_QWORD *)this + 5);
        v36 = *(_QWORD *)(v35 + 152);
        v37 = *(_DWORD *)(v36 + 4 * v34);
        v38 = *(_DWORD *)(v36 + 4 * (v34 + 1));
        v39 = *(_DWORD *)(v35 + 140);
        if (v39 <= v38)
        {
          if (v39 <= (int)v17 && *((_BYTE *)this + 404) != 0)
          {
            v55 = (v37 & 0xFFFFF) <= 0xFFFF3 ? v37 & 0xFFFFF : v37 & 0xFFFFF | 0xF00000;
            if (v55 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v115);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v55, (DgnString *)&v115, v56, v57, v58, v59, v60);
              v65 = &unk_209A6C820;
              if (v115.i32[2])
                v65 = (void *)v115.i64[0];
              xprintf("Seed from state %d score %d trace %d, %s\n", v61, v62, v63, v64, v17, *(unsigned int *)(*((_QWORD *)this + 30) + v16), *(unsigned int *)(*((_QWORD *)this + 30) + v16 + 8), v65);
              MiniFst::seed((uint64_t)this + 288, *(_DWORD *)(*((_QWORD *)this + 30) + v16), 0, *(_DWORD *)(*((_QWORD *)this + 30) + v16 + 8), v38);
              DgnString::~DgnString((DgnString *)&v115);
            }
          }
        }
        else
        {
          ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v36 + 4 * v34));
          v41 = *((_QWORD *)this + 30);
          v42 = ScoreNoBackoff + ((v37 >> 20) & 0x3FF) + *(_DWORD *)(v41 + v16);
          v43 = *((_DWORD *)this + 70);
          if (v42 - v21 <= v43)
          {
            v95 = v11;
            if (v43 > v42)
              *v88 = v42;
            v44 = v41 + v16;
            v91 = *(_DWORD *)(v41 + v16 + 8);
            v92 = *(_WORD *)(v41 + v16 + 14);
            v90 = *(_DWORD *)(v41 + v16 + 16);
            v45 = *(unsigned __int16 *)(v41 + v16 + 24);
            v46 = *((_DWORD *)this + 50);
            v101 = v46;
            v99 = v45;
            if (v45)
            {
              v47 = *(_DWORD *)(v44 + 20);
              v48 = *v102;
              v49 = v45;
              v46 = *((_DWORD *)this + 50);
              do
              {
                v50 = *(_WORD *)(v48 + 2 * v47);
                if (v46 == *((_DWORD *)this + 51))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)v102, 1, 1);
                  v46 = *((_DWORD *)this + 50);
                  v48 = *((_QWORD *)this + 24);
                }
                *(_WORD *)(v48 + 2 * v46++) = v50;
                *((_DWORD *)this + 50) = v46;
                ++v47;
                --v49;
              }
              while (v49);
            }
            if (v46 == *((_DWORD *)this + 51))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)v102, 1, 1);
              v46 = *((_DWORD *)this + 50);
            }
            *(_WORD *)(*((_QWORD *)this + 24) + 2 * v46) = v37;
            *((_DWORD *)this + 50) = v46 + 1;
            v51 = *((unsigned int *)this + 66);
            v11 = v95;
            v21 = v89;
            if (v51 == *((_DWORD *)this + 67))
            {
              DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v87, 1, 1);
              LODWORD(v51) = *((_DWORD *)this + 66);
            }
            v52 = *((_QWORD *)this + 32) + 28 * v51;
            *(_DWORD *)v52 = v42;
            *(_DWORD *)(v52 + 4) = v38;
            *(_DWORD *)(v52 + 8) = v91;
            *(_WORD *)(v52 + 12) = v37;
            *(_WORD *)(v52 + 14) = v92;
            *(_DWORD *)(v52 + 16) = v90 + ((v37 >> 20) & 0x3FF);
            *(_DWORD *)(v52 + 20) = v101;
            *(_WORD *)(v52 + 24) = v99 + 1;
            v53 = *((_DWORD *)this + 66);
            *((_DWORD *)this + 66) = v53 + 1;
            if (v97 == 2 * *((_DWORD *)this + 4))
              v11 = v53 + 1;
            ++v97;
          }
          v17 = v96;
        }
        v34 += 2;
      }
      while ((v37 & 0x80000000) == 0);
      v13 = (v13 + 1);
      v10 = *((unsigned int *)this + 62);
      v8 = v86;
      a4 = v85;
      a5 = v84;
      v12 = v97;
    }
    while (v13 < v10);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
LABEL_57:
  v117 = *((_DWORD *)this + 70) + v89;
  if (*((_BYTE *)this + 404))
    MiniFst::updateFrame((char *)this + 288, v88, v89, v8);
  v115 = 0u;
  v116 = 0u;
  SnapTime::recordTime((SnapTime *)&v115, 1, 0, 0, 0);
  v115 = vsubq_s64(v115, v118);
  v116 = vsubq_s64(v116, v119);
  v66 = (int64x2_t *)*((_QWORD *)this + 13);
  v67 = vaddq_s64(v66[1], v116);
  *v66 = vaddq_s64(*v66, v115);
  v66[1] = v67;
  v113 = 0u;
  v114 = 0u;
  SnapTime::recordTime((SnapTime *)&v113, 1, 0, 0, 0);
  if (v12 > 2 * *((_DWORD *)this + 4))
    FstSearchLeafBackoff::applyCutoffOnEmitting((uint64_t)this, v11, &v117);
  v111 = 0u;
  v112 = 0u;
  SnapTime::recordTime((SnapTime *)&v111, 1, 0, 0, 0);
  v68 = vsubq_s64(v111, v113);
  v69 = (int64x2_t *)*((_QWORD *)this + 13);
  v70 = v69[3];
  v71 = vaddq_s64(v69[2], v68);
  v111 = v68;
  v112 = vsubq_s64(v112, v114);
  v72 = vaddq_s64(v70, v112);
  v69[2] = v71;
  v69[3] = v72;
  v109 = 0u;
  v110 = 0u;
  SnapTime::recordTime((SnapTime *)&v109, 1, 0, 0, 0);
  FstSearchLeafBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v73 = *((unsigned int *)this + 6);
  if ((_DWORD)v73)
  {
    v74 = *((unsigned int *)this + 62);
    if (v73 < v74)
      mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(*((_QWORD *)this + 30), v73, v74);
  }
  v107 = 0u;
  v108 = 0u;
  SnapTime::recordTime((SnapTime *)&v107, 1, 0, 0, 0);
  v75 = vsubq_s64(v107, v109);
  v76 = (int64x2_t *)*((_QWORD *)this + 13);
  v77 = v76[5];
  v78 = vaddq_s64(v76[4], v75);
  v107 = v75;
  v108 = vsubq_s64(v108, v110);
  v79 = vaddq_s64(v77, v108);
  v76[4] = v78;
  v76[5] = v79;
  v105 = 0u;
  v106 = 0u;
  SnapTime::recordTime((SnapTime *)&v105, 1, 0, 0, 0);
  *((_DWORD *)this + 66) = 0;
  v80 = *((unsigned int *)this + 62);
  *((_DWORD *)this + 38) = v80;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v80;
    if (*((_DWORD *)a4 + 2) > v80)
      LODWORD(v80) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v80;
  }
  if (*((_BYTE *)this + 404))
    FstSearchLeaf::seedFromMiniFst((uint64_t)this, v120);
  if (a5)
    FstSearchLeafBackoff::propagateNulls(this, v117, v8, a4);
  *((_DWORD *)this + 68) = v8;
  v103 = 0u;
  v104 = 0u;
  SnapTime::recordTime((SnapTime *)&v103, 1, 0, 0, 0);
  v81 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v81[6], vsubq_s64(v103, v105));
  v83 = vaddq_s64(v81[7], vsubq_s64(v104, v106));
  v81[6] = result;
  v81[7] = v83;
  return result;
}

void sub_209862158(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLeaf::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD v22[2];

  if (*(_BYTE *)(this + 404))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 312);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v5 = 0;
      v6 = 0;
      v7 = (_QWORD *)(this + 160);
      v21 = this + 240;
      do
      {
        v8 = (int *)(*(_QWORD *)(v2 + 304) + v5);
        v9 = *v8;
        v11 = v8[6];
        v10 = v8[7];
        v12 = v8[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v13 = (-2 - v12);
        if (v10 == 16777213)
        {
          v10 = 16777209;
          if (*(_DWORD *)(*v7 + 32 * (-2 - v12)) == 16777209)
            LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 20 * *(unsigned int *)(*v7 + 32 * v13 + 8) + 8);
        }
        v14 = *a2;
        v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<PrefilterResultFrame>::reallocElts(v2 + 160, 1, 1);
          v15 = *(unsigned int *)(v2 + 168);
        }
        v16 = *(_QWORD *)(v2 + 160) + 32 * v15;
        *(_DWORD *)v16 = v10;
        *(_DWORD *)(v16 + 4) = v14;
        *(_DWORD *)(v16 + 8) = -1;
        *(_DWORD *)(v16 + 12) = v9;
        *(_DWORD *)(v16 + 20) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        *(_DWORD *)(v16 + 16) = v13;
        *(_WORD *)(v16 + 28) = 0;
        v17 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v17 + 1;
        v18 = *(unsigned int *)(v2 + 248);
        if (v18 == *(_DWORD *)(v2 + 252))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v21, 1, 1);
          LODWORD(v18) = *(_DWORD *)(v2 + 248);
        }
        v19 = *(_QWORD *)(v2 + 240) + 28 * v18;
        *(_DWORD *)v19 = v9;
        *(_DWORD *)(v19 + 4) = v11;
        *(_DWORD *)(v19 + 8) = v17;
        *(_WORD *)(v19 + 12) = -2;
        *(_QWORD *)(v19 + 16) = 0;
        *(_WORD *)(v19 + 24) = 0;
        ++*(_DWORD *)(v2 + 248);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        v20 = *(_DWORD *)(v2 + 312);
        if (v20 >= *(_DWORD *)(v2 + 20))
          v20 = *(_DWORD *)(v2 + 20);
        v5 += 36;
      }
      while (v6 < v20);
    }
  }
  return this;
}

void sub_20986234C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeaf::collectTraces(FstSearchLeaf *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  __int16 v33;
  unsigned int v34;
  unint64_t v35;
  _WORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int v52;

  v2 = *((unsigned int *)this + 42);
  v52 = 0;
  v51 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v51 = v3;
    v52 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v52);
  }
  v5 = *((unsigned int *)this + 62);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = v51;
    v8 = (unsigned int *)(*((_QWORD *)this + 30) + 8);
    do
    {
      v10 = *v8;
      v8 += 7;
      v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        v5 = *((unsigned int *)this + 62);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  v11 = *((_DWORD *)this + 42);
  if (v11)
  {
    v12 = (uint64_t *)((char *)this + 160);
    v13 = v51;
    v14 = v11 - 1;
    do
    {
      v15 = v14;
      if (*((_DWORD *)v13 + v14))
      {
        v16 = *(unsigned int *)(*v12 + 32 * v14 + 16);
        if ((_DWORD)v16 != -1)
          *((_DWORD *)v13 + v16) = 1;
      }
      --v14;
    }
    while (v15);
    v17 = *((_DWORD *)this + 42);
    v49 = 0;
    v50 = 0;
    if (v17)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = v51;
        if (*((_DWORD *)v51 + v19))
        {
          v22 = *v12;
          if (v19 != v20)
          {
            v23 = (__int128 *)(v22 + 32 * v19);
            v24 = (_OWORD *)(v22 + 32 * v20);
            v25 = *v23;
            *(_OWORD *)((char *)v24 + 14) = *(__int128 *)((char *)v23 + 14);
            *v24 = v25;
            v22 = *v12;
          }
          v26 = v22 + 32 * v20;
          v29 = *(_DWORD *)(v26 + 16);
          v27 = (_DWORD *)(v26 + 16);
          v28 = v29;
          if (v29 != -1)
            *v27 = *((_DWORD *)v21 + v28);
          v30 = v50;
          if (*(_WORD *)(v22 + 32 * v20 + 28))
          {
            v31 = 0;
            v32 = v50;
            do
            {
              v33 = *(_WORD *)(*((_QWORD *)this + 24) + 2 * (v31 + *(_DWORD *)(v22 + 32 * v20 + 24)));
              if (v32 == HIDWORD(v50))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v49, 1, 1);
                v32 = v50;
                v18 = v49;
                v22 = *v12;
              }
              *(_WORD *)(v18 + 2 * v32++) = v33;
              LODWORD(v50) = v32;
              ++v31;
            }
            while (v31 < *(unsigned __int16 *)(v22 + 32 * v20 + 28));
          }
          *(_DWORD *)(v22 + 32 * v20 + 24) = v30;
          *((_DWORD *)v51 + v19) = v20++;
          v17 = *((_DWORD *)this + 42);
        }
        ++v19;
      }
      while (v19 < v17);
      v34 = *((_DWORD *)this + 43);
      if (v20 > v34)
      {
        DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 160, v20 - v34, 0);
        v17 = *((_DWORD *)this + 42);
      }
      if (v17 < v20)
      {
        v35 = v20 - (unint64_t)v17;
        v36 = (_WORD *)(*v12 + 32 * v17 + 28);
        do
        {
          *(_OWORD *)(v36 - 14) = xmmword_209A6C7D0;
          *(_QWORD *)(v36 - 6) = 0xFFFFFFFFLL;
          *((_DWORD *)v36 - 1) = 0;
          *v36 = 0;
          v36 += 16;
          --v35;
        }
        while (v35);
      }
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v20 = 0;
    v49 = 0;
    v50 = 0;
  }
  *((_DWORD *)this + 42) = v20;
  v37 = *((unsigned int *)this + 62);
  if ((_DWORD)v37)
  {
    v38 = 0;
    v39 = v50;
    v40 = *((_QWORD *)this + 30);
    do
    {
      if (*(_WORD *)(v40 + 28 * v38 + 24))
      {
        v41 = 0;
        LODWORD(v42) = v39;
        do
        {
          v43 = *(_WORD *)(*((_QWORD *)this + 24) + 2 * (v41 + *(_DWORD *)(v40 + 28 * v38 + 20)));
          if ((_DWORD)v42 == HIDWORD(v50))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v49, 1, 1);
            LODWORD(v42) = v50;
            v40 = *((_QWORD *)this + 30);
          }
          *(_WORD *)(v49 + 2 * v42) = v43;
          v42 = (v42 + 1);
          LODWORD(v50) = v42;
          ++v41;
        }
        while (v41 < *(unsigned __int16 *)(v40 + 28 * v38 + 24));
        v37 = *((unsigned int *)this + 62);
      }
      else
      {
        v42 = v39;
      }
      *(_DWORD *)(v40 + 28 * v38++ + 20) = v39;
      v39 = v42;
    }
    while (v38 < v37);
  }
  else
  {
    LODWORD(v42) = v50;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 192, &v49, 0, v42);
  v44 = *((unsigned int *)this + 62);
  if ((_DWORD)v44)
  {
    v45 = v51;
    v46 = (_DWORD *)(*((_QWORD *)this + 30) + 8);
    do
    {
      v47 = *v46;
      if ((_DWORD)v47 != -1)
        *v46 = *((_DWORD *)v45 + v47);
      v46 += 7;
      --v44;
    }
    while (v44);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v49);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v51);
}

void sub_2098626DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a11);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeaf::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchLeaf::advanceDeltas((FstSearchLeaf *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchLeaf::collectTraces((FstSearchLeaf *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeaf::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  this[62] = 0;
  return this;
}

double FstSearchLeaf::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLeaf::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeaf::beginTopRecPassSyncRecog(FstSearchLeaf *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 288, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 100) = result;
    *((_BYTE *)this + 404) = 1;
  }
  return result;
}

uint64_t FstSearchLeaf::endTopRecPassSyncRecog(FstSearchLeaf *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLeafBackoff::generateTraceTokensFromTraces((unint64_t)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 70) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLeaf::printSize(FstSearchLeaf *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  int v126;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126)
    v15 = v125;
  else
    v15 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A6C820, a3, &unk_209A6C820, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A6C820);
  v20 = (a3 + 1);
  v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126)
    v26 = v125;
  else
    v26 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126)
    v31 = v125;
  else
    v31 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126)
    v36 = v125;
  else
    v36 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v36, 4, 4, 0);
  v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126)
    v41 = v125;
  else
    v41 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v42 = 16;
  v43 = *((unsigned int *)this + 42);
  v44 = 30 * v43;
  if ((int)v43 <= 0)
    v44 = 0;
  v45 = v44 + v42;
  v46 = v44 + v42 + 30 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126)
    v51 = v125;
  else
    v51 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v52 = 16;
  v53 = *((unsigned int *)this + 46);
  v54 = 18 * v53;
  if ((int)v53 <= 0)
    v54 = 0;
  v55 = v54 + v52;
  v56 = v54 + v52 + 18 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126)
    v61 = v125;
  else
    v61 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v61, v56, v55, 0);
  v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v62 = 12;
  else
    v62 = 16;
  v63 = *((unsigned int *)this + 50);
  v64 = *((_DWORD *)this + 51);
  if (v64 >= v63)
  {
    v65 = 0;
    if ((int)v63 > 0)
      v62 = (v62 | 2) + 2 * (v63 - 1);
    v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    v65 = 2 * v63;
    v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126)
    v71 = v125;
  else
    v71 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_209A6C820, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v72 = 16;
  v73 = *((unsigned int *)this + 62);
  v74 = 24 * v73;
  if ((int)v73 <= 0)
    v74 = 0;
  v75 = v74 + v72;
  v76 = v74 + v72 + 24 * (*((_DWORD *)this + 63) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126)
    v81 = v125;
  else
    v81 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_209A6C820, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v82 = 16;
  v83 = *((unsigned int *)this + 66);
  v84 = 24 * v83;
  if ((int)v83 <= 0)
    v84 = 0;
  v85 = v84 + v82;
  v86 = v84 + v82 + 24 * (*((_DWORD *)this + 67) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126)
    v91 = v125;
  else
    v91 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_209A6C820, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126)
    v96 = v125;
  else
    v96 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_209A6C820, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126)
    v101 = v125;
  else
    v101 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_209A6C820, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126)
    v106 = v125;
  else
    v106 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_209A6C820, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v107 = sizeObject((uint64_t)this + 288, 0);
  v108 = sizeObject((uint64_t)this + 288, 1);
  v109 = sizeObject((uint64_t)this + 288, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126)
    v114 = v125;
  else
    v114 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_209A6C820, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  v123 = 0;
  v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126)
    v119 = v125;
  else
    v119 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_209A6C820, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_2098630DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLeaf::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchLeafBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 32 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchLeaf::buildWordLattice(unint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, unsigned __int8 a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v23, *(unsigned int *)(a1 + 168));
  v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafBackoff::createLatticeNodes(a1, (uint64_t)&v26, (uint64_t)&v24, (uint64_t)a2, v23, a3, a4);
  v9 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = v25;
    do
    {
      if (*(_BYTE *)(*a3 + v10))
      {
        v12 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v12 + 32 * v10) != 16777209)
        {
          v13 = *(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(v12 + 32 * v10 + 8);
          v14 = *(unsigned int *)(v13 + 8);
          if ((_DWORD)v14 == -1)
            v15 = 0;
          else
            v15 = v11 - *(_DWORD *)(v26 + 4 * v14);
          v16 = *(unsigned int *)(v24 + 4 * v15);
          if (*(_BYTE *)(*a4 + v10))
            FstSearchLeaf::createLatticeLink(a1, v10, (int *)v13, 0xFFFFFFFFLL, v16, (const WordLatticeLC *)*(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v10))), a2, (uint64_t)v8, a5);
          v17 = v23[0];
          if (*(_DWORD *)(v23[0] + 16 * v10 + 8))
          {
            v18 = 0;
            do
            {
              v19 = *(unsigned int *)(*(_QWORD *)(v17 + 16 * v10) + 4 * v18);
              FstSearchLeaf::createLatticeLink(a1, v10, (int *)v13, v19, v16, (const WordLatticeLC *)*(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v19))), a2, (uint64_t)v8, a5);
              ++v18;
              v17 = v23[0];
            }
            while (v18 < *(unsigned int *)(v23[0] + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v9);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v24);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v26);
}

void sub_209863428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeaf::createLatticeLink(unint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v12;
  unsigned int v13;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _QWORD v35[2];
  _QWORD v36[2];
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  __int128 v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  __int128 v51;
  _DWORD v52[2];
  __int128 v53;

  v12 = a5;
  v13 = a4;
  v17 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    v18 = 0;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(v17 + 32 * a4 + 8) + 8) == a2)
  {
    v18 = (_DWORD *)(*(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(v17 + 32 * a4 + 8));
  }
  else
  {
    v18 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v17 + 32 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v52);
  v19 = a3[1];
  if (v18)
  {
    v19 += v18[1];
    v20 = *v18 + *a3;
  }
  else
  {
    v20 = *a3;
  }
  if (v52[0] >> 25 == 126)
  {
    v21 = 0;
    v22 = v19;
  }
  else
  {
    v21 = *(_DWORD *)(a1 + 136);
    v22 = v19 - v21;
  }
  if ((v13 & 0x80000000) != 0)
  {
    v23 = 0;
  }
  else
  {
    v23 = *(_DWORD *)(a1 + 140);
    v22 -= v23;
  }
  v24 = v20 - v19;
  v25 = a3[2];
  v26 = *(_QWORD *)(a1 + 160);
  if ((_DWORD)v25 == -1)
  {
    v28 = 0;
    if (a9)
      goto LABEL_21;
  }
  else
  {
    v27 = *(_DWORD *)(v26 + 32 * v25 + 4);
    if (a9)
    {
      if (v27 >= 1)
        --v27;
      v28 = (v27 >> 1) + 1;
LABEL_21:
      v29 = *(_DWORD *)(v26 + 32 * a2 + 4);
      if (v29 >= 1)
        --v29;
      v30 = (v29 >> 1) + 1;
      v31 = v30 - v28;
      if ((v13 & 0x80000000) == 0)
      {
        v32 = *(_DWORD *)(v26 + 32 * v13 + 4);
        if (v32 >= 1)
          --v32;
        v33 = v32 >> 1;
        goto LABEL_30;
      }
      goto LABEL_31;
    }
    v28 = v27 + 1;
  }
  v30 = *(_DWORD *)(v26 + 32 * a2 + 4) + 1;
  v31 = v30 - v28;
  if ((v13 & 0x80000000) == 0)
  {
    v33 = *(_DWORD *)(v26 + 32 * v13 + 4);
LABEL_30:
    v34 = v33 - v30 + 1;
    goto LABEL_32;
  }
LABEL_31:
  v34 = 0;
LABEL_32:
  v37 = v28;
  v38 = v31;
  v39 = v34;
  v40 = v22;
  v41 = 0;
  v42 = v21;
  v43 = v24;
  v44 = 0;
  v45 = v23;
  v46 = xmmword_209A6C7F0;
  v47 = 0;
  v48 = -1;
  v36[0] = &off_24C2149F8;
  v36[1] = 0xBFF0000000000000;
  v49 = v52[0];
  v50 = v52[1];
  v51 = v53;
  v35[0] = 0;
  v35[1] = 0;
  FstSearchLeafBackoff::buildLinkSegmentation(a1, (uint64_t)v35, (uint64_t)a3, v28, a9);
  if (v18)
    FstSearchLeafBackoff::buildLinkSegmentation(a1, (uint64_t)v35, (uint64_t)v18, v30, a9);
  v48 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v35, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v12, a6, (WordLatticeLC *)v36);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v35);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v36);
}

void sub_2098636D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&a11);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeaf::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 404))
    return MiniFst::beginTopFstSyncRecog(this + 288);
  return this;
}

uint64_t FstSearchLeaf::endTopRecSyncRecog(FstSearchLeaf *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeaf::getBestExitScore(FstSearchLeaf *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 69) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 62);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 28 * v1;
  do
  {
    v7 = *((_QWORD *)this + 30) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 32 * v8 + 4) == *((_DWORD *)this + 68))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 62);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v12 = *v4++;
      v13 = v9 + 32 * v12;
      v14 = *(_DWORD *)(v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 69) = *(_DWORD *)(v13 + 16);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_209863854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeaf::getBestScoreMaybeUpdateFstNode(FstSearchLeaf *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 62);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 30);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 7;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

_QWORD *FstSearchLeaf::seedTheory(FstSearchLeaf *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 32 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(_QWORD *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    *(_WORD *)(v12 + 28) = 0;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 62);
  if (v14 == *((_DWORD *)this + 63))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 240, 1, 1);
    v14 = *((_DWORD *)this + 62);
  }
  v15 = *((_QWORD *)this + 30) + 28 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_QWORD *)(v15 + 16) = 0;
  *(_WORD *)(v15 + 24) = 0;
  LODWORD(v15) = *((_DWORD *)this + 62) + 1;
  *((_DWORD *)this + 62) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchLeafBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchLeaf::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  unsigned int *v11;
  uint64_t i;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v8 = *(unsigned int *)(result + 276);
  if ((_DWORD)v8 != -1)
  {
    v10 = result;
    v11 = (unsigned int *)(*(_QWORD *)(result + 160) + 32 * v8);
    for (i = v11[4]; (_DWORD)i != -1; v8 = v17)
    {
      v17 = i;
      result = *(_QWORD *)(v10 + 40);
      if (*v11 == 16777209)
      {
        v18 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v11, a3, (uint64_t)a4, a5, a6, a7, a8);
        v18 = result;
      }
      v19 = *(unsigned int *)(a2 + 8);
      if (v19 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v19 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v19) = v18;
      ++*(_DWORD *)(a2 + 8);
      v20 = *(unsigned int *)(a6 + 8);
      if (v20 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v20 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v20) = v8;
      ++*(_DWORD *)(a6 + 8);
      v21 = *(_QWORD *)(v10 + 160);
      v22 = *(_DWORD *)(v21 + 32 * v8 + 4);
      v23 = *(unsigned int *)(a3 + 8);
      if (v23 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v23 = *(unsigned int *)(a3 + 8);
        v21 = *(_QWORD *)(v10 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v23) = v22;
      ++*(_DWORD *)(a3 + 8);
      v24 = *(_DWORD *)(v21 + 32 * v8 + 12);
      v25 = *(unsigned int *)(a5 + 8);
      if (v25 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v25 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v25) = v24;
      ++*(_DWORD *)(a5 + 8);
      v11 = (unsigned int *)(*(_QWORD *)(v10 + 160) + 32 * v17);
      i = v11[4];
    }
    *a4 = *v11;
  }
  return result;
}

void FstSearchLeaf::checkSearchParametersValidityForArcGraph(FstSearchLeaf *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLeaf::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLeafBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchLeafBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 32 * v24;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_209863F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchBackoff::advanceDeltas(FstSearchBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int ScoreAllowBackoff_updateNodeInSequence;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  __int16 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  int64x2_t *v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t *v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  unint64_t v68;
  unint64_t v69;
  int64x2_t v70;
  int64x2_t *v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  uint64_t v75;
  int64x2_t *v76;
  int64x2_t result;
  int64x2_t v78;
  int v79;
  SearchStats *v80;
  int v81;
  char *v82;
  int *v83;
  int v84;
  __int16 v85;
  int v86;
  unint64_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int v102;
  int64x2_t v103;
  int64x2_t v104;
  int v105[3];

  v8 = a2;
  v105[0] = a2;
  v103 = 0u;
  v104 = 0u;
  SnapTime::recordTime((SnapTime *)&v103, 1, 0, 0, 0);
  *((_DWORD *)this + 58) = a3;
  v86 = *((_DWORD *)this + 2);
  v83 = (int *)((char *)this + 232);
  v10 = *((unsigned int *)this + 50);
  if ((_DWORD)v10)
  {
    v87 = 0;
    v11 = 0;
    v82 = (char *)this + 208;
    do
    {
      v12 = *((_QWORD *)this + 24);
      v13 = *((_QWORD *)this + 5);
      v14 = 20 * v11 + 8;
      while (1)
      {
        v15 = *(unsigned int *)(v12 + v14 - 4);
        if (*(_DWORD *)(v13 + 160) != (_DWORD)v15)
          break;
        ++v11;
        v14 += 20;
        if (v11 >= v10)
          goto LABEL_47;
      }
      v81 = v8;
      v80 = a4;
      v79 = a5;
      if (*(_DWORD *)(v13 + 140) > (int)v15)
      {
        v16 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000
            ? 5000
            : *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
        ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v12 + v14 + 4), *(_DWORD *)(v12 + v14 - 8), v16);
        v18 = *((_DWORD *)this + 58);
        if (ScoreAllowBackoff_updateNodeInSequence - v86 <= v18)
        {
          v19 = ScoreAllowBackoff_updateNodeInSequence;
          if (v18 > ScoreAllowBackoff_updateNodeInSequence)
            *v83 = ScoreAllowBackoff_updateNodeInSequence;
          v20 = *((_QWORD *)this + 24) + v14;
          v21 = *(_QWORD *)(v20 - 4);
          v22 = *(_WORD *)(v20 + 4);
          v23 = *(_WORD *)(v20 + 6);
          v24 = *(_DWORD *)(v20 + 8);
          v25 = *((unsigned int *)this + 54);
          if (v25 == *((_DWORD *)this + 55))
          {
            DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v82, 1, 1);
            LODWORD(v25) = *((_DWORD *)this + 54);
          }
          v26 = *((_QWORD *)this + 26) + 20 * v25;
          *(_DWORD *)v26 = v19;
          *(_QWORD *)(v26 + 4) = v21;
          *(_WORD *)(v26 + 12) = v22;
          *(_WORD *)(v26 + 14) = v23;
          *(_DWORD *)(v26 + 16) = v24;
          v27 = *((_DWORD *)this + 54);
          *((_DWORD *)this + 54) = v27 + 1;
          v28 = v87;
          if (HIDWORD(v87) == 2 * *((_DWORD *)this + 4))
            v28 = v27 + 1;
          v87 = __PAIR64__(HIDWORD(v87), v28) + 0x100000000;
        }
      }
      v29 = v15;
      v30 = v86;
      do
      {
        v31 = *((_QWORD *)this + 5);
        v32 = *(_QWORD *)(v31 + 152);
        v33 = *(_DWORD *)(v32 + 4 * v29);
        v34 = *(_DWORD *)(v32 + 4 * (v29 + 1));
        v35 = *(_DWORD *)(v31 + 140);
        if (v35 <= v34)
        {
          if (v35 <= (int)v15 && *((_BYTE *)this + 356) != 0)
          {
            v50 = (v33 & 0xFFFFF) <= 0xFFFF3 ? v33 & 0xFFFFF : v33 & 0xFFFFF | 0xF00000;
            if (v50 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v100);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v50, (DgnString *)&v100, v51, v52, v53, v54, v55);
              v60 = &unk_209A6C820;
              if (v100.i32[2])
                v60 = (void *)v100.i64[0];
              xprintf("Seed from state %d score %d trace %d, %s\n", v56, v57, v58, v59, v15, *(unsigned int *)(*((_QWORD *)this + 24) + v14 - 8), *(unsigned int *)(*((_QWORD *)this + 24) + v14), v60);
              MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((_QWORD *)this + 24) + v14 - 8), 0, *(_DWORD *)(*((_QWORD *)this + 24) + v14), v34);
              DgnString::~DgnString((DgnString *)&v100);
            }
          }
        }
        else
        {
          v36 = (v33 >> 20) & 0x3FF;
          if (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000)
            v37 = 5000;
          else
            v37 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
          v38 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v32 + 4 * v29), *(_DWORD *)(*((_QWORD *)this + 24) + v14 - 8) + v36, v37);
          v39 = *((_DWORD *)this + 58);
          if (v38 - v30 <= v39)
          {
            v40 = v38;
            if (v39 > v38)
              *v83 = v38;
            v41 = *((_QWORD *)this + 24) + v14;
            v42 = *(_DWORD *)v41;
            v43 = *(_WORD *)(v41 + 6);
            v44 = *(_DWORD *)(v41 + 8);
            v45 = *((unsigned int *)this + 54);
            if (v45 == *((_DWORD *)this + 55))
            {
              v84 = v42;
              v85 = v43;
              DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v82, 1, 1);
              v42 = v84;
              v43 = v85;
              LODWORD(v45) = *((_DWORD *)this + 54);
            }
            v46 = *((_QWORD *)this + 26) + 20 * v45;
            *(_DWORD *)v46 = v40;
            *(_DWORD *)(v46 + 4) = v34;
            *(_DWORD *)(v46 + 8) = v42;
            *(_WORD *)(v46 + 12) = v33;
            *(_WORD *)(v46 + 14) = v43;
            *(_DWORD *)(v46 + 16) = v44 + v36;
            v47 = *((_DWORD *)this + 54);
            *((_DWORD *)this + 54) = v47 + 1;
            v30 = v86;
            v48 = v87;
            if (HIDWORD(v87) == 2 * *((_DWORD *)this + 4))
              v48 = v47 + 1;
            v87 = __PAIR64__(HIDWORD(v87), v48) + 0x100000000;
          }
        }
        v29 += 2;
      }
      while ((v33 & 0x80000000) == 0);
      v11 = (v11 + 1);
      v10 = *((unsigned int *)this + 50);
      v8 = v81;
      a4 = v80;
      a5 = v79;
    }
    while (v11 < v10);
  }
  else
  {
    v87 = 0;
  }
LABEL_47:
  v102 = *((_DWORD *)this + 58) + v86;
  if (*((_BYTE *)this + 356))
    MiniFst::updateFrame((char *)this + 240, v83, v86, v8);
  v100 = 0u;
  v101 = 0u;
  SnapTime::recordTime((SnapTime *)&v100, 1, 0, 0, 0);
  v100 = vsubq_s64(v100, v103);
  v101 = vsubq_s64(v101, v104);
  v61 = (int64x2_t *)*((_QWORD *)this + 13);
  v62 = vaddq_s64(v61[1], v101);
  *v61 = vaddq_s64(*v61, v100);
  v61[1] = v62;
  v98 = 0u;
  v99 = 0u;
  SnapTime::recordTime((SnapTime *)&v98, 1, 0, 0, 0);
  if (HIDWORD(v87) > 2 * *((_DWORD *)this + 4))
    FstSearchHashBackoff::applyCutoffOnEmitting((uint64_t)this, v87, &v102);
  v96 = 0u;
  v97 = 0u;
  SnapTime::recordTime((SnapTime *)&v96, 1, 0, 0, 0);
  v63 = vsubq_s64(v96, v98);
  v64 = (int64x2_t *)*((_QWORD *)this + 13);
  v65 = v64[3];
  v66 = vaddq_s64(v64[2], v63);
  v96 = v63;
  v97 = vsubq_s64(v97, v99);
  v67 = vaddq_s64(v65, v97);
  v64[2] = v66;
  v64[3] = v67;
  v94 = 0u;
  v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 0, 0, 0);
  FstSearchBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v68 = *((unsigned int *)this + 6);
  if ((_DWORD)v68)
  {
    v69 = *((unsigned int *)this + 50);
    if (v68 < v69)
      mrec_nth_element<FstSearchHashBackoffcmpTok>(*((_QWORD *)this + 24), v68, v69);
  }
  v92 = 0u;
  v93 = 0u;
  SnapTime::recordTime((SnapTime *)&v92, 1, 0, 0, 0);
  v70 = vsubq_s64(v92, v94);
  v71 = (int64x2_t *)*((_QWORD *)this + 13);
  v72 = v71[5];
  v73 = vaddq_s64(v71[4], v70);
  v92 = v70;
  v93 = vsubq_s64(v93, v95);
  v74 = vaddq_s64(v72, v93);
  v71[4] = v73;
  v71[5] = v74;
  v90 = 0u;
  v91 = 0u;
  SnapTime::recordTime((SnapTime *)&v90, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  v75 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v75;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v75;
    if (*((_DWORD *)a4 + 2) > v75)
      LODWORD(v75) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v75;
  }
  if (*((_BYTE *)this + 356))
    FstSearchBackoff::seedFromMiniFst((uint64_t)this, v105);
  if (a5)
    FstSearchHashBackoff::propagateNulls((uint64_t)this, v102, v8, a4);
  *((_DWORD *)this + 56) = v8;
  v88 = 0u;
  v89 = 0u;
  SnapTime::recordTime((SnapTime *)&v88, 1, 0, 0, 0);
  v76 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v76[6], vsubq_s64(v88, v90));
  v78 = vaddq_s64(v76[7], vsubq_s64(v89, v91));
  v76[6] = result;
  v76[7] = v78;
  return result;
}

void sub_209864594(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v1 = this;
  v2 = *(unsigned int *)(this + 216);
  if ((_DWORD)v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 208), v2, 20);
    v3 = *(unsigned int *)(v1 + 216);
    *(_DWORD *)(v1 + 200) = 0;
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      for (i = 0; i < v3; ++i)
      {
        v7 = *(_QWORD *)(v1 + 208);
        if (!v4 || *(_DWORD *)(v7 + v4 + 4) != *(_DWORD *)(v7 + v4 - 16))
        {
          if (v5 == *(_DWORD *)(v1 + 204))
          {
            this = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v1 + 192, 1, 1);
            v5 = *(_DWORD *)(v1 + 200);
          }
          v8 = *(_QWORD *)(v1 + 192) + 20 * v5;
          v9 = *(_OWORD *)(v7 + v4);
          *(_DWORD *)(v8 + 16) = *(_DWORD *)(v7 + v4 + 16);
          *(_OWORD *)v8 = v9;
          v5 = *(_DWORD *)(v1 + 200) + 1;
          *(_DWORD *)(v1 + 200) = v5;
          v3 = *(unsigned int *)(v1 + 216);
        }
        v4 += 20;
      }
    }
  }
  else
  {
    *(_DWORD *)(this + 200) = 0;
  }
  return this;
}

uint64_t FstSearchBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD v22[2];

  if (*(_BYTE *)(this + 356))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v5 = 0;
      v6 = 0;
      v7 = (_QWORD *)(this + 160);
      v21 = this + 192;
      do
      {
        v8 = (int *)(*(_QWORD *)(v2 + 256) + v5);
        v9 = *v8;
        v11 = v8[6];
        v10 = v8[7];
        v12 = v8[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v13 = -2 - v12;
        if (v10 == 16777213)
        {
          v10 = 16777209;
          if (*(_DWORD *)(*v7 + 24 * v13) == 16777209)
            v13 = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 12 * *(unsigned int *)(*v7 + 24 * v13 + 8) + 8);
        }
        v14 = *a2;
        v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<CWIDAC>::reallocElts(v2 + 160, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        v16 = (int *)(*(_QWORD *)(v2 + 160) + 24 * v15);
        *v16 = v10;
        v16[1] = v14;
        v16[2] = -1;
        v16[3] = v9;
        v16[4] = v13;
        v16[5] = 0;
        v17 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v17 + 1;
        v18 = *(unsigned int *)(v2 + 200);
        if (v18 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v21, 1, 1);
          LODWORD(v18) = *(_DWORD *)(v2 + 200);
        }
        v19 = *(_QWORD *)(v2 + 192) + 20 * v18;
        *(_DWORD *)v19 = v9;
        *(_DWORD *)(v19 + 4) = v11;
        *(_DWORD *)(v19 + 8) = v17;
        *(_WORD *)(v19 + 12) = -2;
        *(_DWORD *)(v19 + 16) = 0;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        v20 = *(_DWORD *)(v2 + 264);
        if (v20 >= *(_DWORD *)(v2 + 20))
          v20 = *(_DWORD *)(v2 + 20);
        v5 += 36;
      }
      while (v6 < v20);
    }
  }
  return this;
}

void sub_20986486C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchBackoff::collectTraces(FstSearchBackoff *this)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v35;
  int v36;

  v2 = *((unsigned int *)this + 42);
  v36 = 0;
  v35 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v35 = v3;
    v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    v3 = 0;
  }
  v5 = *((unsigned int *)this + 50);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (unsigned int *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v9 = *v7;
      v7 += 5;
      v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  v10 = *((_DWORD *)this + 42);
  if (!v10)
    goto LABEL_32;
  v11 = (uint64_t *)((char *)this + 160);
  v12 = v10 - 1;
  do
  {
    v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      v14 = *(unsigned int *)(*v11 + 24 * v12 + 16);
      if ((_DWORD)v14 != -1)
        *((_DWORD *)v3 + v14) = 1;
    }
    --v12;
  }
  while (v13);
  v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        v19 = *v11;
        if (v17 != v18)
        {
          v20 = (__int128 *)(v19 + v16);
          v21 = v19 + 24 * v18;
          v22 = *v20;
          *(_QWORD *)(v21 + 16) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v21 = v22;
          v19 = *v11;
        }
        v23 = v19 + 24 * v18;
        v26 = *(_DWORD *)(v23 + 16);
        v24 = (_DWORD *)(v23 + 16);
        v25 = v26;
        if (v26 != -1)
          *v24 = *((_DWORD *)v3 + v25);
        *((_DWORD *)v3 + v17) = v18++;
        v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 24;
    }
    while (v17 < v15);
    v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      v28 = v18 - (unint64_t)v15;
      v29 = (_QWORD *)(*v11 + 24 * v15 + 16);
      do
      {
        *((_OWORD *)v29 - 1) = xmmword_209A6C7D0;
        *v29 = 0xFFFFFFFFLL;
        v29 += 3;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  v30 = *((unsigned int *)this + 50);
  if ((_DWORD)v30)
  {
    v31 = v35;
    v32 = (_DWORD *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        *v32 = *((_DWORD *)v31 + v33);
      v32 += 5;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_209864A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchBackoff::advanceDeltas((FstSearchBackoff *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchBackoff::collectTraces((FstSearchBackoff *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  return this;
}

double FstSearchBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchBackoff::beginTopRecPassSyncRecog(FstSearchBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((_BYTE *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchBackoff::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchHashBackoff::generateTraceTokensFromTraces((FstSearchHashBackoff *)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = this[13];
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchBackoff::printSize(FstSearchBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 12;
  v44 = *((unsigned int *)this + 42);
  v45 = 24 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A6C820, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 12;
  v54 = *((unsigned int *)this + 46);
  v55 = 12 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 12 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6C820, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((unsigned int *)this + 50);
  v65 = 18 * v64;
  if ((int)v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 18 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((unsigned int *)this + 54);
  v75 = 18 * v74;
  if ((int)v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 18 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 240, 0);
  v99 = sizeObject((uint64_t)this + 240, 1);
  v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_2098653B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchHashBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 24 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  v23 = (uint64_t)v9;
  v11 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = v27;
    do
    {
      if (*(_BYTE *)(*a3 + v12))
      {
        v14 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v14 + 24 * v12) != 16777209)
        {
          v15 = *(_QWORD *)(a1 + 176) + 12 * *(unsigned int *)(v14 + 24 * v12 + 8);
          v16 = *(unsigned int *)(v15 + 8);
          if ((_DWORD)v16 == -1)
            v17 = 0;
          else
            v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(_BYTE *)(*a4 + v12))
            FstSearchBackoff::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            v20 = 0;
            do
            {
              v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v12) + 4 * v20);
              FstSearchBackoff::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_209865700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchBackoff::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _QWORD v34[2];
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  __int128 v49;
  _DWORD v50[2];
  __int128 v51;

  v11 = a5;
  v12 = a4;
  v16 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    v17 = 0;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8) + 8) == a2)
  {
    v17 = (_DWORD *)(*(_QWORD *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8));
  }
  else
  {
    v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 24 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v50);
  v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    v19 = *v17 + *a3;
  }
  else
  {
    v19 = *a3;
  }
  if (v50[0] >> 25 == 126)
  {
    v20 = 0;
    v21 = v18;
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 136);
    v21 = v18 - v20;
  }
  if ((v12 & 0x80000000) != 0)
  {
    v22 = 0;
  }
  else
  {
    v22 = *(_DWORD *)(a1 + 140);
    v21 -= v22;
  }
  v23 = v19 - v18;
  v24 = a3[2];
  v25 = *(_QWORD *)(a1 + 160);
  if (v24 == -1)
  {
    v27 = 0;
    if (a9)
      goto LABEL_21;
  }
  else
  {
    v26 = *(_DWORD *)(v25 + 24 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1)
        --v26;
      v27 = (v26 >> 1) + 1;
LABEL_21:
      v28 = *(_DWORD *)(v25 + 24 * a2 + 4);
      if (v28 >= 1)
        --v28;
      v29 = v28 >> 1;
      v30 = (v28 >> 1) - v27 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v31 = *(_DWORD *)(v25 + 24 * v12 + 4);
        if (v31 >= 1)
          --v31;
        v32 = v31 >> 1;
        goto LABEL_30;
      }
LABEL_31:
      v33 = 0;
      goto LABEL_32;
    }
    v27 = v26 + 1;
  }
  v29 = *(_DWORD *)(v25 + 24 * a2 + 4);
  v30 = v29 - v27 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_31;
  v32 = *(_DWORD *)(v25 + 24 * v12 + 4);
LABEL_30:
  v33 = v32 - v29;
LABEL_32:
  v35 = v27;
  v36 = v30;
  v37 = v33;
  v38 = v21;
  v39 = 0;
  v40 = v20;
  v41 = v23;
  v42 = 0;
  v43 = v22;
  v44 = xmmword_209A6C7F0;
  v45 = 0;
  v46 = -1;
  v34[0] = &off_24C2149F8;
  v34[1] = 0xBFF0000000000000;
  v47 = v50[0];
  v48 = v50[1];
  v49 = v51;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v34);
}

void sub_209865954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 356))
    return MiniFst::beginTopFstSyncRecog(this + 240);
  return this;
}

uint64_t FstSearchBackoff::endTopRecSyncRecog(FstSearchBackoff *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchBackoff::getBestExitScore(FstSearchBackoff *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 57) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 50);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 20 * v1;
  do
  {
    v7 = *((_QWORD *)this + 24) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 24 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 20;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v14 = *(_DWORD *)(v9 + 24 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 24 * v12 + 16);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_209865ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchBackoff::getBestScoreMaybeUpdateFstNode(FstSearchBackoff *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 50);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 24);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 5;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchBackoff::seedTheory(FstSearchBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 24 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(_QWORD *)(v12 + 16) = 0xFFFFFFFFLL;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 192, 1, 1);
    v14 = *((_DWORD *)this + 50);
  }
  v15 = *((_QWORD *)this + 24) + 20 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_DWORD *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 228);
  if ((_DWORD)v8 != -1)
  {
    v9 = result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 24 * v8);
    for (i = v10[4]; (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = *(_QWORD *)(v9 + 40);
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = *(_QWORD *)(v9 + 160);
      v21 = *(_DWORD *)(v20 + 24 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = *(_QWORD *)(v9 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v20 + 24 * v8 + 12);
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(*(_QWORD *)(v9 + 160) + 24 * v16);
      i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchBackoff::checkSearchParametersValidityForArcGraph(FstSearchBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 24 * v24;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_2098661F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearch::advanceDeltas(FstSearch *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int ScoreNoBackoff;
  uint64_t v36;
  int v37;
  int v38;
  int *v39;
  int v40;
  __int16 v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  int64x2_t *v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t *v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  unint64_t v66;
  unint64_t v67;
  int64x2_t v68;
  int64x2_t *v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  uint64_t v73;
  int64x2_t *v74;
  int64x2_t result;
  int64x2_t v76;
  SearchStats *v77;
  int v78;
  FstSearch *v80;
  MiniFst *v81;
  char *v82;
  int *v83;
  __int16 v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int v102;
  int64x2_t v103;
  int64x2_t v104;
  int v105[3];

  v7 = a2;
  v105[0] = a2;
  v103 = 0u;
  v104 = 0u;
  SnapTime::recordTime((SnapTime *)&v103, 1, 0, 0, 0);
  *((_DWORD *)this + 58) = a3;
  v87 = *((_DWORD *)this + 2);
  v83 = (int *)((char *)this + 232);
  v9 = *((unsigned int *)this + 50);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v86 = 0;
    v11 = 0;
    v81 = (FstSearch *)((char *)this + 240);
    v82 = (char *)this + 208;
    do
    {
      v12 = *((_QWORD *)this + 24);
      v13 = *((_QWORD *)this + 5);
      v14 = 20 * v11 + 8;
      while (1)
      {
        v15 = *(unsigned int *)(v12 + v14 - 4);
        if (*(_DWORD *)(v13 + 160) != (_DWORD)v15)
          break;
        ++v11;
        v14 += 20;
        if (v11 >= v9)
          goto LABEL_44;
      }
      v78 = v7;
      v77 = a4;
      if (*(_DWORD *)(v13 + 140) > (int)v15)
      {
        v16 = v10;
        v17 = *(_DWORD *)(v12 + v14 - 8);
        v18 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v12 + v14 + 4))
            + v17;
        v19 = *((_DWORD *)this + 58);
        if (v18 - v87 <= v19)
        {
          if (v19 > v18)
            *v83 = v18;
          v20 = *((_QWORD *)this + 24) + v14;
          v21 = *(_QWORD *)(v20 - 4);
          v22 = *(_WORD *)(v20 + 4);
          v23 = *(_WORD *)(v20 + 6);
          v24 = *(_DWORD *)(v20 + 8);
          v25 = *((unsigned int *)this + 54);
          if (v25 == *((_DWORD *)this + 55))
          {
            DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v82, 1, 1);
            LODWORD(v25) = *((_DWORD *)this + 54);
          }
          v26 = *((_QWORD *)this + 26) + 20 * v25;
          *(_DWORD *)v26 = v18;
          *(_QWORD *)(v26 + 4) = v21;
          *(_WORD *)(v26 + 12) = v22;
          *(_WORD *)(v26 + 14) = v23;
          *(_DWORD *)(v26 + 16) = v24;
          v27 = *((_DWORD *)this + 54);
          *((_DWORD *)this + 54) = v27 + 1;
          if (v86 == 2 * *((_DWORD *)this + 4))
            v10 = (v27 + 1);
          else
            v10 = v16;
          ++v86;
        }
        else
        {
          v10 = v16;
        }
      }
      v28 = v15;
      v80 = this;
      do
      {
        v29 = *((_QWORD *)this + 5);
        v30 = *(_QWORD *)(v29 + 152);
        v31 = *(_DWORD *)(v30 + 4 * v28);
        v32 = *(_DWORD *)(v30 + 4 * (v28 + 1));
        v33 = *(_DWORD *)(v29 + 140);
        if (v33 <= v32)
        {
          if (v33 <= (int)v15 && *((_BYTE *)this + 356) != 0)
          {
            v48 = (v31 & 0xFFFFF) <= 0xFFFF3 ? v31 & 0xFFFFF : v31 & 0xFFFFF | 0xF00000;
            if (v48 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v100);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v48, (DgnString *)&v100, v49, v50, v51, v52, v53);
              v58 = &unk_209A6C820;
              if (v100.i32[2])
                v58 = (void *)v100.i64[0];
              xprintf("Seed from state %d score %d trace %d, %s\n", v54, v55, v56, v57, v15, *(unsigned int *)(*((_QWORD *)this + 24) + v14 - 8), *(unsigned int *)(*((_QWORD *)this + 24) + v14), v58);
              MiniFst::seed((uint64_t)v81, *(_DWORD *)(*((_QWORD *)this + 24) + v14 - 8), 0, *(_DWORD *)(*((_QWORD *)this + 24) + v14), v32);
              DgnString::~DgnString((DgnString *)&v100);
            }
          }
        }
        else
        {
          v34 = (v31 >> 20) & 0x3FF;
          ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v30 + 4 * v28));
          v36 = *((_QWORD *)this + 24);
          v37 = ScoreNoBackoff + v34 + *(_DWORD *)(v36 + v14 - 8);
          v38 = *((_DWORD *)this + 58);
          if (v37 - v87 <= v38)
          {
            v85 = v10;
            if (v38 > v37)
              *v83 = v37;
            v39 = (int *)(v36 + v14);
            v40 = *v39;
            v41 = *((_WORD *)v39 + 3);
            v42 = v39[2];
            v43 = *((unsigned int *)this + 54);
            if (v43 == *((_DWORD *)this + 55))
            {
              v84 = v41;
              v44 = v40;
              DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v82, 1, 1);
              v40 = v44;
              v41 = v84;
              this = v80;
              LODWORD(v43) = *((_DWORD *)v80 + 54);
            }
            v45 = *((_QWORD *)this + 26) + 20 * v43;
            *(_DWORD *)v45 = v37;
            *(_DWORD *)(v45 + 4) = v32;
            *(_DWORD *)(v45 + 8) = v40;
            *(_WORD *)(v45 + 12) = v31;
            *(_WORD *)(v45 + 14) = v41;
            *(_DWORD *)(v45 + 16) = v42 + v34;
            v46 = *((_DWORD *)this + 54);
            *((_DWORD *)this + 54) = v46 + 1;
            if (v86 == 2 * *((_DWORD *)this + 4))
              v10 = (v46 + 1);
            else
              v10 = v85;
            ++v86;
          }
        }
        v28 += 2;
      }
      while ((v31 & 0x80000000) == 0);
      v11 = (v11 + 1);
      v9 = *((unsigned int *)this + 50);
      v7 = v78;
      a4 = v77;
    }
    while (v11 < v9);
  }
  else
  {
    v86 = 0;
    LODWORD(v10) = 0;
  }
LABEL_44:
  v102 = *((_DWORD *)this + 58) + v87;
  if (*((_BYTE *)this + 356))
    MiniFst::updateFrame((char *)this + 240, v83, v87, v7);
  v100 = 0u;
  v101 = 0u;
  SnapTime::recordTime((SnapTime *)&v100, 1, 0, 0, 0);
  v100 = vsubq_s64(v100, v103);
  v101 = vsubq_s64(v101, v104);
  v59 = (int64x2_t *)*((_QWORD *)this + 13);
  v60 = vaddq_s64(v59[1], v101);
  *v59 = vaddq_s64(*v59, v100);
  v59[1] = v60;
  v98 = 0u;
  v99 = 0u;
  SnapTime::recordTime((SnapTime *)&v98, 1, 0, 0, 0);
  if (v86 > 2 * *((_DWORD *)this + 4))
    FstSearchHashBackoff::applyCutoffOnEmitting((uint64_t)this, v10, &v102);
  v96 = 0u;
  v97 = 0u;
  SnapTime::recordTime((SnapTime *)&v96, 1, 0, 0, 0);
  v61 = vsubq_s64(v96, v98);
  v62 = (int64x2_t *)*((_QWORD *)this + 13);
  v63 = v62[3];
  v64 = vaddq_s64(v62[2], v61);
  v96 = v61;
  v97 = vsubq_s64(v97, v99);
  v65 = vaddq_s64(v63, v97);
  v62[2] = v64;
  v62[3] = v65;
  v94 = 0u;
  v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 0, 0, 0);
  FstSearchBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v66 = *((unsigned int *)this + 6);
  if ((_DWORD)v66)
  {
    v67 = *((unsigned int *)this + 50);
    if (v66 < v67)
      mrec_nth_element<FstSearchHashBackoffcmpTok>(*((_QWORD *)this + 24), v66, v67);
  }
  v92 = 0u;
  v93 = 0u;
  SnapTime::recordTime((SnapTime *)&v92, 1, 0, 0, 0);
  v68 = vsubq_s64(v92, v94);
  v69 = (int64x2_t *)*((_QWORD *)this + 13);
  v70 = v69[5];
  v71 = vaddq_s64(v69[4], v68);
  v92 = v68;
  v93 = vsubq_s64(v93, v95);
  v72 = vaddq_s64(v70, v93);
  v69[4] = v71;
  v69[5] = v72;
  v90 = 0u;
  v91 = 0u;
  SnapTime::recordTime((SnapTime *)&v90, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  v73 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v73;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v73;
    if (*((_DWORD *)a4 + 2) > v73)
      LODWORD(v73) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v73;
  }
  if (*((_BYTE *)this + 356))
    FstSearch::seedFromMiniFst((uint64_t)this, v105);
  if (a5)
    FstSearchHashBackoff::propagateNulls((uint64_t)this, v102, v7, a4);
  *((_DWORD *)this + 56) = v7;
  v88 = 0u;
  v89 = 0u;
  SnapTime::recordTime((SnapTime *)&v88, 1, 0, 0, 0);
  v74 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v74[6], vsubq_s64(v88, v90));
  v76 = vaddq_s64(v74[7], vsubq_s64(v89, v91));
  v74[6] = result;
  v74[7] = v76;
  return result;
}

void sub_20986680C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearch::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD v22[2];

  if (*(_BYTE *)(this + 356))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v5 = 0;
      v6 = 0;
      v7 = (_QWORD *)(this + 160);
      v21 = this + 192;
      do
      {
        v8 = (int *)(*(_QWORD *)(v2 + 256) + v5);
        v9 = *v8;
        v11 = v8[6];
        v10 = v8[7];
        v12 = v8[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v13 = -2 - v12;
        if (v10 == 16777213)
        {
          v10 = 16777209;
          if (*(_DWORD *)(*v7 + 24 * v13) == 16777209)
            v13 = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 12 * *(unsigned int *)(*v7 + 24 * v13 + 8) + 8);
        }
        v14 = *a2;
        v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<CWIDAC>::reallocElts(v2 + 160, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        v16 = (int *)(*(_QWORD *)(v2 + 160) + 24 * v15);
        *v16 = v10;
        v16[1] = v14;
        v16[2] = -1;
        v16[3] = v9;
        v16[4] = v13;
        v16[5] = 0;
        v17 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v17 + 1;
        v18 = *(unsigned int *)(v2 + 200);
        if (v18 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v21, 1, 1);
          LODWORD(v18) = *(_DWORD *)(v2 + 200);
        }
        v19 = *(_QWORD *)(v2 + 192) + 20 * v18;
        *(_DWORD *)v19 = v9;
        *(_DWORD *)(v19 + 4) = v11;
        *(_DWORD *)(v19 + 8) = v17;
        *(_WORD *)(v19 + 12) = -2;
        *(_DWORD *)(v19 + 16) = 0;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        v20 = *(_DWORD *)(v2 + 264);
        if (v20 >= *(_DWORD *)(v2 + 20))
          v20 = *(_DWORD *)(v2 + 20);
        v5 += 36;
      }
      while (v6 < v20);
    }
  }
  return this;
}

void sub_209866A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearch::collectTraces(FstSearch *this)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v35;
  int v36;

  v2 = *((unsigned int *)this + 42);
  v36 = 0;
  v35 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v35 = v3;
    v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    v3 = 0;
  }
  v5 = *((unsigned int *)this + 50);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (unsigned int *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v9 = *v7;
      v7 += 5;
      v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  v10 = *((_DWORD *)this + 42);
  if (!v10)
    goto LABEL_32;
  v11 = (uint64_t *)((char *)this + 160);
  v12 = v10 - 1;
  do
  {
    v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      v14 = *(unsigned int *)(*v11 + 24 * v12 + 16);
      if ((_DWORD)v14 != -1)
        *((_DWORD *)v3 + v14) = 1;
    }
    --v12;
  }
  while (v13);
  v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        v19 = *v11;
        if (v17 != v18)
        {
          v20 = (__int128 *)(v19 + v16);
          v21 = v19 + 24 * v18;
          v22 = *v20;
          *(_QWORD *)(v21 + 16) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v21 = v22;
          v19 = *v11;
        }
        v23 = v19 + 24 * v18;
        v26 = *(_DWORD *)(v23 + 16);
        v24 = (_DWORD *)(v23 + 16);
        v25 = v26;
        if (v26 != -1)
          *v24 = *((_DWORD *)v3 + v25);
        *((_DWORD *)v3 + v17) = v18++;
        v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 24;
    }
    while (v17 < v15);
    v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      v28 = v18 - (unint64_t)v15;
      v29 = (_QWORD *)(*v11 + 24 * v15 + 16);
      do
      {
        *((_OWORD *)v29 - 1) = xmmword_209A6C7D0;
        *v29 = 0xFFFFFFFFLL;
        v29 += 3;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  v30 = *((unsigned int *)this + 50);
  if ((_DWORD)v30)
  {
    v31 = v35;
    v32 = (_DWORD *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        *v32 = *((_DWORD *)v31 + v33);
      v32 += 5;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_209866C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearch::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearch::advanceDeltas((FstSearch *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearch::collectTraces((FstSearch *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearch::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  return this;
}

double FstSearch::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearch::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearch::beginTopRecPassSyncRecog(FstSearch *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((_BYTE *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearch::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchHashBackoff::generateTraceTokensFromTraces((FstSearchHashBackoff *)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = this[13];
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearch::printSize(FstSearch *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 12;
  v44 = *((unsigned int *)this + 42);
  v45 = 24 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A6C820, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 12;
  v54 = *((unsigned int *)this + 46);
  v55 = 12 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 12 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6C820, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((unsigned int *)this + 50);
  v65 = 18 * v64;
  if ((int)v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 18 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((unsigned int *)this + 54);
  v75 = 18 * v74;
  if ((int)v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 18 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 240, 0);
  v99 = sizeObject((uint64_t)this + 240, 1);
  v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_209867544(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearch::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchHashBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 24 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearch::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  v23 = (uint64_t)v9;
  v11 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = v27;
    do
    {
      if (*(_BYTE *)(*a3 + v12))
      {
        v14 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v14 + 24 * v12) != 16777209)
        {
          v15 = *(_QWORD *)(a1 + 176) + 12 * *(unsigned int *)(v14 + 24 * v12 + 8);
          v16 = *(unsigned int *)(v15 + 8);
          if ((_DWORD)v16 == -1)
            v17 = 0;
          else
            v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(_BYTE *)(*a4 + v12))
            FstSearch::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            v20 = 0;
            do
            {
              v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v12) + 4 * v20);
              FstSearch::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_209867894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearch::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _QWORD v34[2];
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  __int128 v49;
  _DWORD v50[2];
  __int128 v51;

  v11 = a5;
  v12 = a4;
  v16 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    v17 = 0;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8) + 8) == a2)
  {
    v17 = (_DWORD *)(*(_QWORD *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8));
  }
  else
  {
    v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 24 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v50);
  v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    v19 = *v17 + *a3;
  }
  else
  {
    v19 = *a3;
  }
  if (v50[0] >> 25 == 126)
  {
    v20 = 0;
    v21 = v18;
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 136);
    v21 = v18 - v20;
  }
  if ((v12 & 0x80000000) != 0)
  {
    v22 = 0;
  }
  else
  {
    v22 = *(_DWORD *)(a1 + 140);
    v21 -= v22;
  }
  v23 = v19 - v18;
  v24 = a3[2];
  v25 = *(_QWORD *)(a1 + 160);
  if (v24 == -1)
  {
    v27 = 0;
    if (a9)
      goto LABEL_21;
  }
  else
  {
    v26 = *(_DWORD *)(v25 + 24 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1)
        --v26;
      v27 = (v26 >> 1) + 1;
LABEL_21:
      v28 = *(_DWORD *)(v25 + 24 * a2 + 4);
      if (v28 >= 1)
        --v28;
      v29 = v28 >> 1;
      v30 = (v28 >> 1) - v27 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v31 = *(_DWORD *)(v25 + 24 * v12 + 4);
        if (v31 >= 1)
          --v31;
        v32 = v31 >> 1;
        goto LABEL_30;
      }
LABEL_31:
      v33 = 0;
      goto LABEL_32;
    }
    v27 = v26 + 1;
  }
  v29 = *(_DWORD *)(v25 + 24 * a2 + 4);
  v30 = v29 - v27 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_31;
  v32 = *(_DWORD *)(v25 + 24 * v12 + 4);
LABEL_30:
  v33 = v32 - v29;
LABEL_32:
  v35 = v27;
  v36 = v30;
  v37 = v33;
  v38 = v21;
  v39 = 0;
  v40 = v20;
  v41 = v23;
  v42 = 0;
  v43 = v22;
  v44 = xmmword_209A6C7F0;
  v45 = 0;
  v46 = -1;
  v34[0] = &off_24C2149F8;
  v34[1] = 0xBFF0000000000000;
  v47 = v50[0];
  v48 = v50[1];
  v49 = v51;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v34);
}

void sub_209867AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearch::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 356))
    return MiniFst::beginTopFstSyncRecog(this + 240);
  return this;
}

uint64_t FstSearch::endTopRecSyncRecog(FstSearch *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearch::getBestExitScore(FstSearch *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 57) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 50);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 20 * v1;
  do
  {
    v7 = *((_QWORD *)this + 24) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 24 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 20;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v14 = *(_DWORD *)(v9 + 24 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 24 * v12 + 16);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_209867C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearch::getBestScoreMaybeUpdateFstNode(FstSearch *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 50);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 24);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 5;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearch::seedTheory(FstSearch *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 24 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(_QWORD *)(v12 + 16) = 0xFFFFFFFFLL;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 192, 1, 1);
    v14 = *((_DWORD *)this + 50);
  }
  v15 = *((_QWORD *)this + 24) + 20 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_DWORD *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearch::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 228);
  if ((_DWORD)v8 != -1)
  {
    v9 = result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 24 * v8);
    for (i = v10[4]; (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = *(_QWORD *)(v9 + 40);
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = *(_QWORD *)(v9 + 160);
      v21 = *(_DWORD *)(v20 + 24 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = *(_QWORD *)(v9 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v20 + 24 * v8 + 12);
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(*(_QWORD *)(v9 + 160) + 24 * v16);
      i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearch::checkSearchParametersValidityForArcGraph(FstSearch *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearch::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 24 * v24;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_209868384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

double FstCore::generateDecoder(int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (**v17)(FstSearchLatticeHashBackoff *__hidden);
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  double result;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t (**v41)(FstSearchLatticeDurationBackoff *__hidden);
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t (**v47)(FstSearchLeafLatticeDurationBackoff *__hidden);
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t (**v51)(FstSearchLeafLatticeBackoff *__hidden);
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;

  if (a1 == 2)
    v10 = a2;
  else
    v10 = 1;
  v11 = v10 | a3;
  v12 = a4 ^ 1;
  v13 = v10 | a3 | a4 ^ 1;
  v14 = a5 ^ 1;
  if ((v13 & 1) == 0 && (v14 & 1) == 0)
  {
    v15 = MemChunkAlloc(0x168uLL, 0);
    SearchItf::SearchItf((SearchItf *)v15);
    v17 = &off_24C2186B0;
LABEL_47:
    *(_QWORD *)v16 = v17;
    *(_DWORD *)(v16 + 136) = a6;
    *(_DWORD *)(v16 + 140) = a7;
    result = 0.0;
    *(_OWORD *)(v16 + 160) = 0u;
    *(_OWORD *)(v16 + 176) = 0u;
    *(_OWORD *)(v16 + 192) = 0u;
    *(_OWORD *)(v16 + 208) = 0u;
    *(_DWORD *)(v16 + 224) = -1;
    *(_DWORD *)(v16 + 232) = 1879048192;
    *(_OWORD *)(v16 + 240) = 0u;
    *(_OWORD *)(v16 + 256) = 0u;
    *(_OWORD *)(v16 + 272) = 0u;
    *(_OWORD *)(v16 + 288) = 0u;
    *(_OWORD *)(v16 + 304) = 0u;
    *(_BYTE *)(v16 + 356) = 0;
    return result;
  }
  if (((v13 | a5) & 1) == 0)
  {
    v36 = MemChunkAlloc(0x168uLL, 0);
    SearchItf::SearchItf((SearchItf *)v36);
    v17 = &off_24C217D20;
    goto LABEL_47;
  }
  if (a1 == 1)
    v18 = a2;
  else
    v18 = 1;
  v19 = v18 | a3;
  v20 = v18 | a3 | v12;
  if (((v20 | v14) & 1) == 0)
  {
    v37 = MemChunkAlloc(0x168uLL, 0);
    SearchItf::SearchItf((SearchItf *)v37);
    v17 = &off_24C2181A0;
    goto LABEL_47;
  }
  if (((v20 | a5) & 1) == 0)
  {
    v38 = MemChunkAlloc(0x168uLL, 0);
    SearchItf::SearchItf((SearchItf *)v38);
    v17 = &off_24C216D30;
    goto LABEL_47;
  }
  v21 = a2 ^ 1;
  if (a1)
    v22 = 1;
  else
    v22 = a2 ^ 1;
  v23 = v22 | a3;
  v24 = v22 | a3 | v12;
  if (((v24 | v14) & 1) == 0)
  {
    v39 = MemChunkAlloc(0x180uLL, 0);
    SearchItf::SearchItf((SearchItf *)v39);
    v41 = &off_24C218440;
    goto LABEL_50;
  }
  if (((v24 | a5) & 1) == 0)
  {
    v42 = MemChunkAlloc(0x180uLL, 0);
    SearchItf::SearchItf((SearchItf *)v42);
    v41 = &off_24C217288;
    goto LABEL_50;
  }
  if (a1)
    v25 = 1;
  else
    v25 = a2;
  v26 = v25 | a3 | v12;
  if (((v26 | v14) & 1) == 0)
  {
    v43 = MemChunkAlloc(0x168uLL, 0);
    SearchItf::SearchItf((SearchItf *)v43);
    v17 = &off_24C216B90;
    goto LABEL_47;
  }
  if (((v26 | a5) & 1) == 0)
  {
    v44 = MemChunkAlloc(0x168uLL, 0);
    SearchItf::SearchItf((SearchItf *)v44);
    v17 = &off_24C214428;
    goto LABEL_47;
  }
  if (a1 != 1)
    v21 = 1;
  v27 = a3 ^ 1;
  v28 = v21 | a3 ^ 1 | a4;
  if (((v28 | v14) & 1) == 0)
  {
    v45 = MemChunkAlloc(0x1B0uLL, 0);
    SearchItf::SearchItf((SearchItf *)v45);
    v47 = &off_24C218880;
    goto LABEL_55;
  }
  if (((v28 | a5) & 1) == 0)
  {
    v48 = MemChunkAlloc(0x1B0uLL, 0);
    SearchItf::SearchItf((SearchItf *)v48);
    v47 = &off_24C2185E0;
    goto LABEL_55;
  }
  v29 = v18 | v27 | a4;
  if (((v29 | v14) & 1) != 0)
  {
    if (((v29 | a5) & 1) != 0)
    {
      v30 = v21 | a3 | a4;
      if (((v30 | v14) & 1) == 0)
      {
        v53 = MemChunkAlloc(0x180uLL, 0);
        SearchItf::SearchItf((SearchItf *)v53);
        v41 = &off_24C218780;
        goto LABEL_50;
      }
      if (((v30 | a5) & 1) == 0)
      {
        v54 = MemChunkAlloc(0x180uLL, 0);
        SearchItf::SearchItf((SearchItf *)v54);
        v41 = &off_24C217DF0;
        goto LABEL_50;
      }
      v31 = v11 | a4;
      if (((v31 | v14) & 1) == 0)
      {
        v55 = MemChunkAlloc(0x168uLL, 0);
        SearchItf::SearchItf((SearchItf *)v55);
        v17 = &off_24C2180D0;
        goto LABEL_47;
      }
      if (((v31 | a5) & 1) == 0)
      {
        v56 = MemChunkAlloc(0x168uLL, 0);
        SearchItf::SearchItf((SearchItf *)v56);
        v17 = &off_24C216C60;
        goto LABEL_47;
      }
      if (((v19 | a4 | v14) & 1) == 0)
      {
        v57 = MemChunkAlloc(0x168uLL, 0);
        SearchItf::SearchItf((SearchItf *)v57);
        v17 = &off_24C2177F0;
        goto LABEL_47;
      }
      if (((v19 | a4 | a5) & 1) == 0)
      {
        v58 = MemChunkAlloc(0x168uLL, 0);
        SearchItf::SearchItf((SearchItf *)v58);
        v17 = &off_24C215708;
        goto LABEL_47;
      }
      v32 = v22 | v27 | a4;
      if (((v32 | v14) & 1) != 0)
      {
        if (((v32 | a5) & 1) != 0)
        {
          if (((v23 | a4 | v14) & 1) != 0)
          {
            if (((v23 | a4 | a5) & 1) != 0)
            {
              v33 = v25 | v27 | a4;
              if (((v33 | v14) & 1) != 0)
              {
                if (((v33 | a5) & 1) != 0)
                {
                  v34 = v25 | a3 | a4;
                  if (((v34 | v14) & 1) != 0)
                  {
                    if (((v34 | a5) & 1) != 0)
                    {
                      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 492, (uint64_t)"fst/fstsrch", 1, (uint64_t)"%u %u %u %u %u", v28 | v14, a8, a1);
                      return result;
                    }
                    v66 = MemChunkAlloc(0x168uLL, 0);
                    SearchItf::SearchItf((SearchItf *)v66);
                    v17 = &off_24C219AE8;
                  }
                  else
                  {
                    v65 = MemChunkAlloc(0x168uLL, 0);
                    SearchItf::SearchItf((SearchItf *)v65);
                    v17 = &off_24C215638;
                  }
                  goto LABEL_47;
                }
                v64 = MemChunkAlloc(0x198uLL, 0);
                SearchItf::SearchItf((SearchItf *)v64);
                v51 = &off_24C2144F8;
              }
              else
              {
                v63 = MemChunkAlloc(0x198uLL, 0);
                SearchItf::SearchItf((SearchItf *)v63);
                v51 = &off_24C216E00;
              }
              goto LABEL_58;
            }
            v62 = MemChunkAlloc(0x180uLL, 0);
            SearchItf::SearchItf((SearchItf *)v62);
            v41 = &off_24C2159D0;
          }
          else
          {
            v61 = MemChunkAlloc(0x180uLL, 0);
            SearchItf::SearchItf((SearchItf *)v61);
            v41 = &off_24C217C50;
          }
LABEL_50:
          *(_QWORD *)v40 = v41;
          *(_DWORD *)(v40 + 136) = a6;
          *(_DWORD *)(v40 + 140) = a7;
          result = 0.0;
          *(_OWORD *)(v40 + 160) = 0u;
          *(_OWORD *)(v40 + 176) = 0u;
          *(_OWORD *)(v40 + 192) = 0u;
          *(_OWORD *)(v40 + 216) = 0u;
          *(_OWORD *)(v40 + 232) = 0u;
          *(_DWORD *)(v40 + 248) = -1;
          *(_DWORD *)(v40 + 256) = 1879048192;
          *(_OWORD *)(v40 + 264) = 0u;
          *(_OWORD *)(v40 + 280) = 0u;
          *(_OWORD *)(v40 + 296) = 0u;
          *(_OWORD *)(v40 + 312) = 0u;
          *(_OWORD *)(v40 + 328) = 0u;
          *(_BYTE *)(v40 + 380) = 0;
          return result;
        }
        v60 = MemChunkAlloc(0x1B0uLL, 0);
        SearchItf::SearchItf((SearchItf *)v60);
        v47 = &off_24C217358;
      }
      else
      {
        v59 = MemChunkAlloc(0x1B0uLL, 0);
        SearchItf::SearchItf((SearchItf *)v59);
        v47 = &off_24C218510;
      }
LABEL_55:
      *(_QWORD *)v46 = v47;
      *(_DWORD *)(v46 + 136) = a6;
      *(_DWORD *)(v46 + 140) = a7;
      result = 0.0;
      *(_OWORD *)(v46 + 160) = 0u;
      *(_OWORD *)(v46 + 176) = 0u;
      *(_OWORD *)(v46 + 192) = 0u;
      *(_OWORD *)(v46 + 232) = 0u;
      *(_OWORD *)(v46 + 248) = 0u;
      *(_OWORD *)(v46 + 216) = 0u;
      *(_OWORD *)(v46 + 264) = 0u;
      *(_OWORD *)(v46 + 280) = 0u;
      *(_DWORD *)(v46 + 296) = -1;
      *(_DWORD *)(v46 + 304) = 1879048192;
      *(_OWORD *)(v46 + 312) = 0u;
      *(_OWORD *)(v46 + 328) = 0u;
      *(_OWORD *)(v46 + 344) = 0u;
      *(_OWORD *)(v46 + 360) = 0u;
      *(_OWORD *)(v46 + 376) = 0u;
      *(_BYTE *)(v46 + 428) = 0;
      return result;
    }
    v52 = MemChunkAlloc(0x198uLL, 0);
    SearchItf::SearchItf((SearchItf *)v52);
    v51 = &off_24C216ED0;
  }
  else
  {
    v49 = MemChunkAlloc(0x198uLL, 0);
    SearchItf::SearchItf((SearchItf *)v49);
    v51 = &off_24C218270;
  }
LABEL_58:
  *(_QWORD *)v50 = v51;
  *(_DWORD *)(v50 + 136) = a6;
  *(_DWORD *)(v50 + 140) = a7;
  result = 0.0;
  *(_OWORD *)(v50 + 160) = 0u;
  *(_OWORD *)(v50 + 176) = 0u;
  *(_OWORD *)(v50 + 192) = 0u;
  *(_OWORD *)(v50 + 208) = 0u;
  *(_OWORD *)(v50 + 224) = 0u;
  *(_OWORD *)(v50 + 240) = 0u;
  *(_OWORD *)(v50 + 256) = 0u;
  *(_DWORD *)(v50 + 272) = -1;
  *(_DWORD *)(v50 + 280) = 1879048192;
  *(_OWORD *)(v50 + 288) = 0u;
  *(_OWORD *)(v50 + 304) = 0u;
  *(_OWORD *)(v50 + 320) = 0u;
  *(_OWORD *)(v50 + 336) = 0u;
  *(_OWORD *)(v50 + 352) = 0u;
  *(_BYTE *)(v50 + 404) = 0;
  return result;
}

void FstSearchLateLatticeHashBackoff::~FstSearchLateLatticeHashBackoff(FstSearchLateLatticeHashBackoff *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C2186B0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C2186B0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLateLatticeHashBackoff::getRequiredVirtMapSize(FstSearchLateLatticeHashBackoff *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 5) + 160);
}

uint64_t FstSearchLateLatticeHashBackoff::getNActiveStates(FstSearchLateLatticeHashBackoff *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLateLatticeHashBackoff::getBestScoreThisFrame(FstSearchLateLatticeHashBackoff *this)
{
  int v1;

  v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLateLatticeHash::~FstSearchLateLatticeHash(FstSearchLateLatticeHash *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C217D20;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C217D20;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLateLatticeHash::getRequiredVirtMapSize(FstSearchLateLatticeHash *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 5) + 160);
}

uint64_t FstSearchLateLatticeHash::getNActiveStates(FstSearchLateLatticeHash *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLateLatticeHash::getBestScoreThisFrame(FstSearchLateLatticeHash *this)
{
  int v1;

  v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLatticeHashBackoff::~FstSearchLatticeHashBackoff(FstSearchLatticeHashBackoff *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C2181A0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C2181A0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLatticeHashBackoff::getRequiredVirtMapSize(FstSearchLatticeHashBackoff *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 5) + 160);
}

uint64_t FstSearchLatticeHashBackoff::getNActiveStates(FstSearchLatticeHashBackoff *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLatticeHashBackoff::getBestScoreThisFrame(FstSearchLatticeHashBackoff *this)
{
  int v1;

  v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLatticeHash::~FstSearchLatticeHash(FstSearchLatticeHash *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C216D30;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C216D30;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLatticeHash::getRequiredVirtMapSize(FstSearchLatticeHash *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 5) + 160);
}

uint64_t FstSearchLatticeHash::getNActiveStates(FstSearchLatticeHash *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLatticeHash::getBestScoreThisFrame(FstSearchLatticeHash *this)
{
  int v1;

  v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchDurationHashBackoff::~FstSearchDurationHashBackoff(FstSearchDurationHashBackoff *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C218440;
  v2 = (char *)this + 160;
  v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C218440;
  v2 = (char *)this + 160;
  v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchDurationHashBackoff::getRequiredVirtMapSize(FstSearchDurationHashBackoff *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 5) + 160);
}

uint64_t FstSearchDurationHashBackoff::getNActiveStates(FstSearchDurationHashBackoff *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t FstSearchDurationHashBackoff::getBestScoreThisFrame(FstSearchDurationHashBackoff *this)
{
  int v1;

  v1 = *((_DWORD *)this + 64);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchDurationHash::~FstSearchDurationHash(FstSearchDurationHash *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C217288;
  v2 = (char *)this + 160;
  v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C217288;
  v2 = (char *)this + 160;
  v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchDurationHash::getRequiredVirtMapSize(FstSearchDurationHash *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 5) + 160);
}

uint64_t FstSearchDurationHash::getNActiveStates(FstSearchDurationHash *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t FstSearchDurationHash::getBestScoreThisFrame(FstSearchDurationHash *this)
{
  int v1;

  v1 = *((_DWORD *)this + 64);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchHashBackoff::~FstSearchHashBackoff(FstSearchHashBackoff *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C216B90;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C216B90;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchHashBackoff::getRequiredVirtMapSize(FstSearchHashBackoff *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 5) + 160);
}

uint64_t FstSearchHashBackoff::getNActiveStates(FstSearchHashBackoff *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchHashBackoff::getBestScoreThisFrame(FstSearchHashBackoff *this)
{
  int v1;

  v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchHash::~FstSearchHash(FstSearchHash *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C214428;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C214428;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchHash::getRequiredVirtMapSize(FstSearchHash *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 5) + 160);
}

uint64_t FstSearchHash::getNActiveStates(FstSearchHash *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchHash::getBestScoreThisFrame(FstSearchHash *this)
{
  int v1;

  v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLeafLatticeDurationBackoff::~FstSearchLeafLatticeDurationBackoff(FstSearchLeafLatticeDurationBackoff *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C218880;
  v2 = (char *)this + 160;
  v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C218880;
  v2 = (char *)this + 160;
  v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLeafLatticeDurationBackoff::getRequiredVirtMapSize(FstSearchLeafLatticeDurationBackoff *this)
{
  return 0;
}

uint64_t FstSearchLeafLatticeDurationBackoff::getNActiveStates(FstSearchLeafLatticeDurationBackoff *this)
{
  return *((unsigned int *)this + 68);
}

uint64_t FstSearchLeafLatticeDurationBackoff::getBestScoreThisFrame(FstSearchLeafLatticeDurationBackoff *this)
{
  int v1;

  v1 = *((_DWORD *)this + 76);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLeafLatticeDuration::~FstSearchLeafLatticeDuration(FstSearchLeafLatticeDuration *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C2185E0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C2185E0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLeafLatticeDuration::getRequiredVirtMapSize(FstSearchLeafLatticeDuration *this)
{
  return 0;
}

uint64_t FstSearchLeafLatticeDuration::getNActiveStates(FstSearchLeafLatticeDuration *this)
{
  return *((unsigned int *)this + 68);
}

uint64_t FstSearchLeafLatticeDuration::getBestScoreThisFrame(FstSearchLeafLatticeDuration *this)
{
  int v1;

  v1 = *((_DWORD *)this + 76);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLeafLatticeBackoff::~FstSearchLeafLatticeBackoff(FstSearchLeafLatticeBackoff *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C218270;
  v2 = (char *)this + 160;
  v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C218270;
  v2 = (char *)this + 160;
  v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLeafLatticeBackoff::getRequiredVirtMapSize(FstSearchLeafLatticeBackoff *this)
{
  return 0;
}

uint64_t FstSearchLeafLatticeBackoff::getNActiveStates(FstSearchLeafLatticeBackoff *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t FstSearchLeafLatticeBackoff::getBestScoreThisFrame(FstSearchLeafLatticeBackoff *this)
{
  int v1;

  v1 = *((_DWORD *)this + 70);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLeafLattice::~FstSearchLeafLattice(FstSearchLeafLattice *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C216ED0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C216ED0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLeafLattice::getRequiredVirtMapSize(FstSearchLeafLattice *this)
{
  return 0;
}

uint64_t FstSearchLeafLattice::getNActiveStates(FstSearchLeafLattice *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t FstSearchLeafLattice::getBestScoreThisFrame(FstSearchLeafLattice *this)
{
  int v1;

  v1 = *((_DWORD *)this + 70);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLatticeDurationBackoff::~FstSearchLatticeDurationBackoff(FstSearchLatticeDurationBackoff *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C218780;
  v2 = (char *)this + 160;
  v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C218780;
  v2 = (char *)this + 160;
  v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLatticeDurationBackoff::getRequiredVirtMapSize(FstSearchLatticeDurationBackoff *this)
{
  return 0;
}

uint64_t FstSearchLatticeDurationBackoff::getNActiveStates(FstSearchLatticeDurationBackoff *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t FstSearchLatticeDurationBackoff::getBestScoreThisFrame(FstSearchLatticeDurationBackoff *this)
{
  int v1;

  v1 = *((_DWORD *)this + 64);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLatticeDuration::~FstSearchLatticeDuration(FstSearchLatticeDuration *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C217DF0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C217DF0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLatticeDuration::getRequiredVirtMapSize(FstSearchLatticeDuration *this)
{
  return 0;
}

uint64_t FstSearchLatticeDuration::getNActiveStates(FstSearchLatticeDuration *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t FstSearchLatticeDuration::getBestScoreThisFrame(FstSearchLatticeDuration *this)
{
  int v1;

  v1 = *((_DWORD *)this + 64);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLateLatticeBackoff::~FstSearchLateLatticeBackoff(FstSearchLateLatticeBackoff *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C2180D0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C2180D0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLateLatticeBackoff::getRequiredVirtMapSize(FstSearchLateLatticeBackoff *this)
{
  return 0;
}

uint64_t FstSearchLateLatticeBackoff::getNActiveStates(FstSearchLateLatticeBackoff *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLateLatticeBackoff::getBestScoreThisFrame(FstSearchLateLatticeBackoff *this)
{
  int v1;

  v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLateLattice::~FstSearchLateLattice(FstSearchLateLattice *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C216C60;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C216C60;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLateLattice::getRequiredVirtMapSize(FstSearchLateLattice *this)
{
  return 0;
}

uint64_t FstSearchLateLattice::getNActiveStates(FstSearchLateLattice *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLateLattice::getBestScoreThisFrame(FstSearchLateLattice *this)
{
  int v1;

  v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLatticeBackoff::~FstSearchLatticeBackoff(FstSearchLatticeBackoff *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C2177F0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C2177F0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLatticeBackoff::getRequiredVirtMapSize(FstSearchLatticeBackoff *this)
{
  return 0;
}

uint64_t FstSearchLatticeBackoff::getNActiveStates(FstSearchLatticeBackoff *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLatticeBackoff::getBestScoreThisFrame(FstSearchLatticeBackoff *this)
{
  int v1;

  v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLattice::~FstSearchLattice(FstSearchLattice *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C215708;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C215708;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLattice::getRequiredVirtMapSize(FstSearchLattice *this)
{
  return 0;
}

uint64_t FstSearchLattice::getNActiveStates(FstSearchLattice *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLattice::getBestScoreThisFrame(FstSearchLattice *this)
{
  int v1;

  v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLeafDurationBackoff::~FstSearchLeafDurationBackoff(FstSearchLeafDurationBackoff *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C218510;
  v2 = (char *)this + 160;
  v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C218510;
  v2 = (char *)this + 160;
  v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLeafDurationBackoff::getRequiredVirtMapSize(FstSearchLeafDurationBackoff *this)
{
  return 0;
}

uint64_t FstSearchLeafDurationBackoff::getNActiveStates(FstSearchLeafDurationBackoff *this)
{
  return *((unsigned int *)this + 68);
}

uint64_t FstSearchLeafDurationBackoff::getBestScoreThisFrame(FstSearchLeafDurationBackoff *this)
{
  int v1;

  v1 = *((_DWORD *)this + 76);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLeafDuration::~FstSearchLeafDuration(FstSearchLeafDuration *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C217358;
  v2 = (char *)this + 160;
  v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C217358;
  v2 = (char *)this + 160;
  v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLeafDuration::getRequiredVirtMapSize(FstSearchLeafDuration *this)
{
  return 0;
}

uint64_t FstSearchLeafDuration::getNActiveStates(FstSearchLeafDuration *this)
{
  return *((unsigned int *)this + 68);
}

uint64_t FstSearchLeafDuration::getBestScoreThisFrame(FstSearchLeafDuration *this)
{
  int v1;

  v1 = *((_DWORD *)this + 76);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchDurationBackoff::~FstSearchDurationBackoff(FstSearchDurationBackoff *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C217C50;
  v2 = (char *)this + 160;
  v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C217C50;
  v2 = (char *)this + 160;
  v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchDurationBackoff::getRequiredVirtMapSize(FstSearchDurationBackoff *this)
{
  return 0;
}

uint64_t FstSearchDurationBackoff::getNActiveStates(FstSearchDurationBackoff *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t FstSearchDurationBackoff::getBestScoreThisFrame(FstSearchDurationBackoff *this)
{
  int v1;

  v1 = *((_DWORD *)this + 64);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchDuration::~FstSearchDuration(FstSearchDuration *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C2159D0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C2159D0;
  v2 = (char *)this + 160;
  v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchDuration::getRequiredVirtMapSize(FstSearchDuration *this)
{
  return 0;
}

uint64_t FstSearchDuration::getNActiveStates(FstSearchDuration *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t FstSearchDuration::getBestScoreThisFrame(FstSearchDuration *this)
{
  int v1;

  v1 = *((_DWORD *)this + 64);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLeafBackoff::~FstSearchLeafBackoff(FstSearchLeafBackoff *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C216E00;
  v2 = (char *)this + 160;
  v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C216E00;
  v2 = (char *)this + 160;
  v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLeafBackoff::getRequiredVirtMapSize(FstSearchLeafBackoff *this)
{
  return 0;
}

uint64_t FstSearchLeafBackoff::getNActiveStates(FstSearchLeafBackoff *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t FstSearchLeafBackoff::getBestScoreThisFrame(FstSearchLeafBackoff *this)
{
  int v1;

  v1 = *((_DWORD *)this + 70);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchLeaf::~FstSearchLeaf(FstSearchLeaf *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C2144F8;
  v2 = (char *)this + 160;
  v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C2144F8;
  v2 = (char *)this + 160;
  v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchLeaf::getRequiredVirtMapSize(FstSearchLeaf *this)
{
  return 0;
}

uint64_t FstSearchLeaf::getNActiveStates(FstSearchLeaf *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t FstSearchLeaf::getBestScoreThisFrame(FstSearchLeaf *this)
{
  int v1;

  v1 = *((_DWORD *)this + 70);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearchBackoff::~FstSearchBackoff(FstSearchBackoff *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C215638;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C215638;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearchBackoff::getRequiredVirtMapSize(FstSearchBackoff *this)
{
  return 0;
}

uint64_t FstSearchBackoff::getNActiveStates(FstSearchBackoff *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchBackoff::getBestScoreThisFrame(FstSearchBackoff *this)
{
  int v1;

  v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

void FstSearch::~FstSearch(FstSearch *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C219AE8;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24C219AE8;
  v2 = (char *)this + 160;
  v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FstSearch::getRequiredVirtMapSize(FstSearch *this)
{
  return 0;
}

uint64_t FstSearch::getNActiveStates(FstSearch *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearch::getBestScoreThisFrame(FstSearch *this)
{
  int v1;

  v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000)
    return 20000;
  else
    return v1;
}

unint64_t DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 36 * v6, 36 * v5, 36 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x24;
  *(_QWORD *)a1 = v8;
  return result;
}

uint64_t HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;

  HashProbeBase::HashProbeBase((HashProbeBase *)a1, a2);
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 8));
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = v6;
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::initBuckets((unsigned int *)a1);
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

void sub_20986ACE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

unsigned int *HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::initBuckets(unsigned int *result)
{
  unsigned int *v1;
  void **v2;
  uint64_t v3;
  unsigned int v4;

  v1 = result;
  v2 = (void **)(result + 4);
  v3 = result[1];
  v4 = result[7];
  if (v3 <= v4)
  {
    result[6] = v3;
    if (!(_DWORD)v3)
      return result;
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(result + 4), v3 - v4, 0);
    v1[6] = v3;
  }
  return (unsigned int *)memset(*v2, 255, 8 * v3);
}

_QWORD *DgnArray<FstSearchLateLatticeHashBackoffActiveToken>::DgnArray(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v4;
  unint64_t v5;
  _QWORD *v6;

  v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if ((_DWORD)a2)
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)a1, a2, 0);
    v4 = *((_DWORD *)a1 + 2);
  }
  else
  {
    v4 = 0;
  }
  if (v4 < v2)
  {
    v5 = v2 - (unint64_t)v4;
    v6 = (_QWORD *)(*a1 + 24 * v4 + 16);
    do
    {
      *(v6 - 2) = 0xFFFFFFFF00000000;
      *((_DWORD *)v6 - 2) = -1;
      *((_WORD *)v6 - 2) = -2;
      *v6 = 0;
      v6 += 3;
      --v5;
    }
    while (v5);
  }
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

unint64_t DgnArray<WordLatticeLC>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 112 * v6, 112 * v5, 112 * v5, 1);
  *(_DWORD *)(a1 + 12) = ((result >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64;
  *(_QWORD *)a1 = v8;
  return result;
}

unint64_t DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 20 * v6, 20 * v5, 20 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x14;
  *(_QWORD *)a1 = v8;
  return result;
}

unint64_t DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 28 * v6, 28 * v5, 28 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x1C;
  *(_QWORD *)a1 = v8;
  return result;
}

unint64_t DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 40 * v6, 40 * v5, 40 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x28;
  *(_QWORD *)a1 = v8;
  return result;
}

void MrecInitLibrary_mrecutil(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_ddump_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_dmatrix_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_dsmset_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_dthread_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_filespec_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_generr_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_hashbase_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_memchunk_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_osfile_mrecutil();
  MrecInitModule_param_mrecutil();
  MrecInitModule_paramset_mrecutil();
  MrecInitModule_paramspec_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_timer_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_util_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_dcuda_mrecutil();
}

uint64_t MrecInitLibrary_recogctl(void)
{
  MrecInitModule_adaptctl_recogctl();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_model_recogctl();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_psholder_recogctl();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_recogctl_recogctl();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_recoggrm_recogctl();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughRecogctl(void)
{
  MrecInitLibrarySet_throughPrefilt();
  MrecInitLibrarySet_throughChannel();
  MrecInitLibrarySet_throughFst();
  return MrecInitLibrary_recogctl();
}

void MrecInitLibrarySet_throughNeuralN(void)
{
  MrecInitLibrarySet_throughFrame();
  MrecInitModule_neuraln_neuraln();
}

uint64_t verifyLexiconHandle(unint64_t a1, const char *a2)
{
  uint64_t Registry;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *exception;
  char *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  Registry = TRegisterable<TLexicon>::getRegistry();
  v5 = TBaseRegistry<TTokenizer *>::find(Registry, a1);
  if (*(_QWORD **)(Registry + 16) == v5)
  {
    conditionalAssert(a2, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 33, v6, v7);
    exception = __cxa_allocate_exception(0x28uLL);
    v10 = (char *)a2;
    v11 = exception;
    std::string::basic_string[abi:ne180100]<0>(&v14, v10);
    *v11 = aPpx;
    v12 = (std::string *)(v11 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v13 = v14;
      v11[3] = v15;
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    *v11 = &unk_24C2148C0;
    v11[4] = 3;
  }
  return *v5;
}

void sub_20986B28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPLexicon_Open(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  TEnvManager *DataManager;
  uint64_t v16;
  _QWORD *exception;
  std::string *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  locale_t v23[2];
  char v24;

  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v24, "TPLexicon_Open");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v23);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 57, v6, v7);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v21, "Not initialized");
    *exception = aPpx;
    v19 = (std::string *)(exception + 1);
    if (SHIBYTE(v22) < 0)
    {
      std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)v21, *((std::string::size_type *)&v21 + 1));
    }
    else
    {
      v20 = v21;
      exception[3] = v22;
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  verifyHandleArgument<SDhVoc_fake **>(a2, 0, "Bad input voc handle", v6, v7);
  verifyPointerArgument<TPLexiconHandle_fake **>((uint64_t)a3, 0, "Bad output lexicon handle pointer", v8, v9);
  verifyPointerArgument<TPDataSpec>(a1, 0, "Bad input static data spec", v10, v11);
  DataManager = makeDataManager(a1, 1uLL, v12, v13, v14);
  v16 = operator new();
  TLexicon::TLexicon(v16, DataManager, a2);
  *a3 = *(_QWORD *)(v16 + 8);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v23);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_20986B46C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  __break(1u);
}

void sub_20986B514(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  void *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  va_list va;

  va_start(va, a7);
  __cxa_end_catch();
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler((locale_t *)va);
  TReentrancyHandler::ms_bIn = 0;
  switch(a2)
  {
    case 7:
      v11 = (char *)__cxa_begin_catch(a1);
      v12 = v11 + 8;
      if (v11[31] < 0)
        v12 = *(_BYTE **)v12;
      handleException(v12, (uint64_t)"TPLexicon_Open", *((_QWORD *)v11 + 4), v9, v10);
      break;
    case 6:
      v15 = (char *)__cxa_begin_catch(a1);
      v16 = v15 + 8;
      if (v15[31] < 0)
        v16 = *(_BYTE **)v16;
      handleException(v16, (uint64_t)"TPLexicon_Open", 6, v13, v14);
      break;
    case 5:
      v19 = (char *)__cxa_begin_catch(a1);
      v20 = v19 + 8;
      if (v19[31] < 0)
        v20 = *(_BYTE **)v20;
LABEL_12:
      handleException(v20, (uint64_t)"TPLexicon_Open", 2, v17, v18);
      break;
    case 4:
      v23 = (char *)__cxa_begin_catch(a1);
      v24 = v23 + 8;
      if (v23[31] < 0)
        v24 = *(_BYTE **)v24;
      handleException(v24, (uint64_t)"TPLexicon_Open", 11, v21, v22);
      break;
    case 3:
      v25 = (char *)__cxa_begin_catch(a1);
      v20 = v25 + 8;
      if (v25[31] < 0)
        v20 = *(_BYTE **)v20;
      goto LABEL_12;
    case 2:
      v26 = __cxa_begin_catch(a1);
      v27 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v26 + 16))(v26);
      handleException(v27, (uint64_t)"TPLexicon_Open", 1, v28, v29);
      break;
    case 1:
      v30 = __cxa_begin_catch(a1);
      v31 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30);
      handleException(v31, (uint64_t)"TPLexicon_Open", 2, v32, v33);
      break;
    default:
      JUMPOUT(0x20986B718);
  }
  __cxa_end_catch();
  JUMPOUT(0x20986B3B0);
}

void sub_20986B524()
{
  JUMPOUT(0x20986B52CLL);
}

void sub_20986B6C8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20986B6D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20986B6E0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20986B6EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20986B6F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20986B704(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20986B710()
{
  __cxa_end_catch();
  JUMPOUT(0x20986B718);
}

uint64_t verifyHandleArgument<SDhVoc_fake **>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *exception;
  std::string *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if (result != -1)
    a2 = 1;
  if (!result || (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 339, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v10, a3);
    *exception = aPpx;
    v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v11) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v10, *((std::string::size_type *)&v10 + 1));
    }
    else
    {
      v9 = v10;
      exception[3] = v11;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  return result;
}

void sub_20986B800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t verifyPointerArgument<TPLexiconHandle_fake **>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *exception;
  std::string *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    *exception = aPpx;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  return result;
}

void sub_20986B90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t verifyPointerArgument<TPDataSpec>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *exception;
  std::string *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 288, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    *exception = aPpx;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  return result;
}

void sub_20986BA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPLexicon_Close(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *exception;
  std::string *v9;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  locale_t v16[2];
  char v17;

  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v17, "TPLexicon_Close");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v16);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 86, v2, v3);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Not initialized");
    *exception = aPpx;
    v9 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  v4 = (_DWORD *)verifyLexiconHandle(a1, "Bad input lexicon handle");
  if (v4[90])
  {
    conditionalAssert("Lexicon is referenced", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 89, v5, v6);
    v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Lexicon is referenced");
    *v10 = aPpx;
    v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *v10 = &unk_24C2148C0;
    v10[4] = 7;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v16);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_20986BC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  void *v20;
  int v21;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  char *v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v26 = (char *)__cxa_begin_catch(a1);
        v27 = v26 + 8;
        if (v26[31] < 0)
          v27 = *(_BYTE **)v27;
        handleException(v27, (uint64_t)"TPLexicon_Close", *((_QWORD *)v26 + 4), v24, v25);
        break;
      case 6:
        v30 = (char *)__cxa_begin_catch(a1);
        v31 = v30 + 8;
        if (v30[31] < 0)
          v31 = *(_BYTE **)v31;
        handleException(v31, (uint64_t)"TPLexicon_Close", 6, v28, v29);
        break;
      case 5:
        v34 = (char *)__cxa_begin_catch(a1);
        v35 = v34 + 8;
        if (v34[31] < 0)
          v35 = *(_BYTE **)v35;
LABEL_17:
        handleException(v35, (uint64_t)"TPLexicon_Close", 2, v32, v33);
        break;
      case 4:
        v38 = (char *)__cxa_begin_catch(a1);
        v39 = v38 + 8;
        if (v38[31] < 0)
          v39 = *(_BYTE **)v39;
        handleException(v39, (uint64_t)"TPLexicon_Close", 11, v36, v37);
        break;
      case 3:
        v40 = (char *)__cxa_begin_catch(a1);
        v35 = v40 + 8;
        if (v40[31] < 0)
          v35 = *(_BYTE **)v35;
        goto LABEL_17;
      case 2:
        v41 = __cxa_begin_catch(a1);
        v42 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPLexicon_Close", 1, v43, v44);
        break;
      default:
        if (a2 != 1)
          _Unwind_Resume(a1);
        v45 = __cxa_begin_catch(a1);
        v46 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPLexicon_Close", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x20986BADCLL);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t TPLexicon_GetInfo(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ActiveConfigHandle;
  _QWORD *exception;
  std::string *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  locale_t v17[2];
  char v18;

  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v18, "TPLexicon_GetInfo");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v17);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 134, v4, v5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v15, "Not initialized");
    *exception = aPpx;
    v13 = (std::string *)(exception + 1);
    if (SHIBYTE(v16) < 0)
    {
      std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)v15, *((std::string::size_type *)&v15 + 1));
    }
    else
    {
      v14 = v15;
      exception[3] = v16;
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  v6 = verifyLexiconHandle(a1, "Bad input lexicon handle");
  verifyPointerArgument<TPLexiconInfo>(a2, 0, "Bad output lexicon info pointer", v7, v8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v6 + 104);
  v9 = *(_QWORD *)(v6 + 336);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v9 + 144));
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v9 + 4 * TParam::getValidConfig((TParam *)(v9 + 144), ActiveConfigHandle) + 304);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(v6 + 360);
  *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)(v6 + 336) + 8);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v17);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_20986C048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  void *v20;
  int v21;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  char *v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v26 = (char *)__cxa_begin_catch(a1);
        v27 = v26 + 8;
        if (v26[31] < 0)
          v27 = *(_BYTE **)v27;
        handleException(v27, (uint64_t)"TPLexicon_GetInfo", *((_QWORD *)v26 + 4), v24, v25);
        break;
      case 6:
        v30 = (char *)__cxa_begin_catch(a1);
        v31 = v30 + 8;
        if (v30[31] < 0)
          v31 = *(_BYTE **)v31;
        handleException(v31, (uint64_t)"TPLexicon_GetInfo", 6, v28, v29);
        break;
      case 5:
        v34 = (char *)__cxa_begin_catch(a1);
        v35 = v34 + 8;
        if (v34[31] < 0)
          v35 = *(_BYTE **)v35;
LABEL_17:
        handleException(v35, (uint64_t)"TPLexicon_GetInfo", 2, v32, v33);
        break;
      case 4:
        v38 = (char *)__cxa_begin_catch(a1);
        v39 = v38 + 8;
        if (v38[31] < 0)
          v39 = *(_BYTE **)v39;
        handleException(v39, (uint64_t)"TPLexicon_GetInfo", 11, v36, v37);
        break;
      case 3:
        v40 = (char *)__cxa_begin_catch(a1);
        v35 = v40 + 8;
        if (v40[31] < 0)
          v35 = *(_BYTE **)v35;
        goto LABEL_17;
      case 2:
        v41 = __cxa_begin_catch(a1);
        v42 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPLexicon_GetInfo", 1, v43, v44);
        break;
      default:
        if (a2 != 1)
          _Unwind_Resume(a1);
        v45 = __cxa_begin_catch(a1);
        v46 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPLexicon_GetInfo", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x20986BF88);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t verifyPointerArgument<TPLexiconInfo>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *exception;
  std::string *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    *exception = aPpx;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  return result;
}

void sub_20986C380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPLexicon_GetHeadClone(unint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  __int32 *v19;
  unsigned int **HeadClone;
  _QWORD *exception;
  std::string *v23;
  _QWORD *v24;
  std::string *v25;
  _QWORD *v26;
  std::string *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[24];
  _BYTE v34[809];
  char v35;
  locale_t v36[2];
  char v37;
  __int128 __s;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v37, "TPLexicon_GetHeadClone");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v36);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 314, v10, v11);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "Not initialized");
    *exception = aPpx;
    v23 = (std::string *)(exception + 1);
    if ((v33[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)v33, *(std::string::size_type *)&v33[8]);
    }
    else
    {
      v28 = *(_OWORD *)v33;
      exception[3] = *(_QWORD *)&v33[16];
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v28;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  v12 = verifyLexiconHandle(a1, "Bad input lexicon handle");
  verifyStringArgument(a2, 0, 0, "Bad input word name pointer", v13);
  *(_QWORD *)v33 = v34;
  *(_OWORD *)&v33[8] = xmmword_209A57DD0;
  v35 = 1;
  if (TLocaleInfo::multiByteToUnicode(v12 + 240, a2, (uint64_t)v33))
  {
    conditionalAssert("Bad input wordname", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 320, v14, v15);
    v24 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&__s, "Bad input wordname");
    *v24 = aPpx;
    v25 = (std::string *)(v24 + 1);
    if (SHIBYTE(v39) < 0)
    {
      std::string::__init_copy_ctor_external(v25, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
    }
    else
    {
      v29 = __s;
      v24[3] = v39;
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v29;
    }
    *v24 = &unk_24C2148C0;
    v24[4] = 3;
  }
  verifyPointerArgument<char,unsigned int>(a3, a4, 1, "Bad output head clone buffer", v15);
  *(_QWORD *)&__s = a3;
  *((_QWORD *)&__s + 1) = a4;
  v39 = 0;
  v41 = 0;
  if (*(_QWORD *)&v33[16] >= *(_QWORD *)&v33[8])
  {
    if (v35)
    {
      LODWORD(v31) = 0;
      TBuffer<wchar_t>::insert((uint64_t)v33, *(unint64_t *)&v33[16], (int *)&v31, 1uLL);
      v16 = *(int **)v33;
      --*(_QWORD *)&v33[16];
    }
    else
    {
      v16 = *(int **)v33;
      if (*(_QWORD *)&v33[8])
        *(_DWORD *)(*(_QWORD *)v33 + 4 * *(_QWORD *)&v33[8] - 4) = 0;
    }
  }
  else
  {
    v16 = *(int **)v33;
    *(_DWORD *)(*(_QWORD *)v33 + 4 * *(_QWORD *)&v33[16]) = 0;
  }
  if (TLexicon::checkName(v12, v16, 0, 0xFFFFFFFFFFFFFFFFLL))
  {
    conditionalAssert("Bad wordname format", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 326, v17, v18);
    v26 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v31, "Bad wordname format");
    *v26 = aPpx;
    v27 = (std::string *)(v26 + 1);
    if (SHIBYTE(v32) < 0)
    {
      std::string::__init_copy_ctor_external(v27, (const std::string::value_type *)v31, *((std::string::size_type *)&v31 + 1));
    }
    else
    {
      v30 = v31;
      v26[3] = v32;
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v30;
    }
    *v26 = &unk_24C2148C0;
    v26[4] = 3;
  }
  if (*(_QWORD *)&v33[16] >= *(_QWORD *)&v33[8])
  {
    if (v35)
    {
      LODWORD(v31) = 0;
      TBuffer<wchar_t>::insert((uint64_t)v33, *(unint64_t *)&v33[16], (int *)&v31, 1uLL);
      v19 = *(__int32 **)v33;
      --*(_QWORD *)&v33[16];
    }
    else
    {
      v19 = *(__int32 **)v33;
      if (*(_QWORD *)&v33[8])
        *(_DWORD *)(*(_QWORD *)v33 + 4 * *(_QWORD *)&v33[8] - 4) = 0;
    }
  }
  else
  {
    v19 = *(__int32 **)v33;
    *(_DWORD *)(*(_QWORD *)v33 + 4 * *(_QWORD *)&v33[16]) = 0;
  }
  HeadClone = (unsigned int **)TLexicon::findHeadClone(v12, v19);
  if (HeadClone)
    TLocaleInfo::unicodeToMultiByte(v12 + 240, *HeadClone, (uint64_t)&__s);
  else
    TBuffer<char>::assign((uint64_t)&__s, (char *)a2);
  if (v39 >= *((_QWORD *)&__s + 1))
  {
    if (v41)
    {
      LOBYTE(v31) = 0;
      TBuffer<char>::insert((uint64_t)&__s, v39--, (char *)&v31, 1uLL);
    }
    else if (*((_QWORD *)&__s + 1))
    {
      *(_BYTE *)(*((_QWORD *)&__s + 1) + __s - 1) = 0;
    }
  }
  else
  {
    *(_BYTE *)(__s + v39) = 0;
  }
  if (a5)
    *a5 = v39 + 1;
  if (v41 && (uint64_t *)__s != &v40 && (_QWORD)__s)
    MEMORY[0x20BD149A8]();
  if (v35 && *(_BYTE **)v33 != v34 && *(_QWORD *)v33)
    MEMORY[0x20BD149A8]();
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v36);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_20986C8D4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  void *v15;
  int v16;
  void *v17;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _BYTE *v36;
  char *v37;
  void *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      if (LOBYTE(STACK[0x570]))
      {
        v20 = STACK[0x458];
        if ((unint64_t *)STACK[0x458] != &STACK[0x470])
        {
          if (v20)
            MEMORY[0x20BD149A8](v20, 0x1000C4077774924);
        }
      }
      if (LOBYTE(STACK[0x430]) && a15 != v17 && a15)
        MEMORY[0x20BD149A8]();
      MrecInitModule_sdpres_sdapi();
      TLocaleHandler::~TLocaleHandler((locale_t *)&STACK[0x440]);
      TReentrancyHandler::ms_bIn = 0;
      switch(a2)
      {
        case 7:
          v23 = (char *)__cxa_begin_catch(a1);
          v24 = v23 + 8;
          if (v23[31] < 0)
            v24 = *(_BYTE **)v24;
          handleException(v24, (uint64_t)"TPLexicon_GetHeadClone", *((_QWORD *)v23 + 4), v21, v22);
          __cxa_end_catch();
          break;
        case 6:
          v27 = (char *)__cxa_begin_catch(a1);
          v28 = v27 + 8;
          if (v27[31] < 0)
            v28 = *(_BYTE **)v28;
          handleException(v28, (uint64_t)"TPLexicon_GetHeadClone", 6, v25, v26);
          __cxa_end_catch();
          break;
        case 5:
          v31 = (char *)__cxa_begin_catch(a1);
          v32 = v31 + 8;
          if (v31[31] < 0)
            v32 = *(_BYTE **)v32;
LABEL_25:
          handleException(v32, (uint64_t)"TPLexicon_GetHeadClone", 2, v29, v30);
          __cxa_end_catch();
          break;
        case 4:
          v35 = (char *)__cxa_begin_catch(a1);
          v36 = v35 + 8;
          if (v35[31] < 0)
            v36 = *(_BYTE **)v36;
          handleException(v36, (uint64_t)"TPLexicon_GetHeadClone", 11, v33, v34);
          __cxa_end_catch();
          break;
        case 3:
          v37 = (char *)__cxa_begin_catch(a1);
          v32 = v37 + 8;
          if (v37[31] < 0)
            v32 = *(_BYTE **)v32;
          goto LABEL_25;
        case 2:
          v38 = __cxa_begin_catch(a1);
          v39 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
          handleException(v39, (uint64_t)"TPLexicon_GetHeadClone", 1, v40, v41);
          __cxa_end_catch();
          break;
        default:
          if (a2 != 1)
            _Unwind_Resume(a1);
          v42 = __cxa_begin_catch(a1);
          v43 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v42 + 16))(v42);
          handleException(v43, (uint64_t)"TPLexicon_GetHeadClone", 2, v44, v45);
          __cxa_end_catch();
          break;
      }
      JUMPOUT(0x20986C698);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TLocaleInfo::TLocaleInfo(uint64_t a1, const __int32 *a2, uint64_t a3, int a4, uint64_t a5)
{
  TCollation::TCollation((TCollation *)(a1 + 16));
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 80) = wcscmp(a2, (const __int32 *)"t") == 0;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 64) = a4;
  *(_QWORD *)(a1 + 72) = a5;
  return a1;
}

void sub_20986CCE8(_Unwind_Exception *a1)
{
  TCollation *v1;

  TCollation::~TCollation(v1);
  _Unwind_Resume(a1);
}

uint64_t TBuffer<char>::assign(uint64_t a1, char *a2)
{
  uint64_t v4;

  TBuffer<char>::resize(a1, 0);
  v4 = 0;
  while (a2[v4++])
    ;
  return TBuffer<char>::insert(a1, 0, a2, v4 - 1);
}

void DgnException::DgnException(DgnException *this, int CurrentThreadId, char *a3, int a4, char *a5, int a6, char *a7)
{
  DgnString *v14;
  DgnString *v15;
  DgnThreadMgr *v16;

  *(_QWORD *)this = &off_24C213EE0;
  v14 = (DgnException *)((char *)this + 32);
  v15 = (DgnException *)((char *)this + 8);
  DgnString::DgnString((DgnException *)((char *)this + 8));
  DgnString::DgnString(v14);
  DgnString::DgnString((DgnException *)((char *)this + 56));
  if (CurrentThreadId == -1)
    CurrentThreadId = DgnThreadMgr::getCurrentThreadId(v16);
  *((_DWORD *)this + 18) = CurrentThreadId;
  DgnString::preAllocate((unint64_t)v15, 96);
  DgnString::operator=(v15, a3);
  *((_DWORD *)this + 6) = a4;
  DgnString::operator=(v14, a5);
  *((_DWORD *)this + 12) = a6;
  DgnString::preAllocate((unint64_t)this + 56, 512);
  DgnString::operator=((DgnException *)((char *)this + 56), a7);
}

void sub_20986CE24(_Unwind_Exception *a1)
{
  DgnString *v1;
  DgnString *v2;

  DgnString::~DgnString(v2);
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void DgnException::~DgnException(DgnException *this)
{
  DgnString *v2;

  *(_QWORD *)this = &off_24C213EE0;
  v2 = (DgnException *)((char *)this + 8);
  DgnString::~DgnString((DgnException *)((char *)this + 56));
  DgnString::~DgnString((DgnException *)((char *)this + 32));
  DgnString::~DgnString(v2);
}

{
  DgnException::~DgnException(this);
  JUMPOUT(0x20BD149A8);
}

void DgnFileIOException::DgnFileIOException(DgnFileIOException *this, int a2, char *a3, int a4, char *a5, int a6, char *a7)
{
  _QWORD *v7;

  DgnException::DgnException(this, a2, a3, a4, a5, a6, a7);
  *v7 = &off_24C216240;
}

void DgnFileIOException::~DgnFileIOException(DgnFileIOException *this)
{
  DgnException::~DgnException(this);
  JUMPOUT(0x20BD149A8);
}

void EncryptBuffer(unsigned __int8 *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if (a3)
  {
    if (a3 == 2)
    {
      if (a2)
      {
        v9 = a2;
        do
        {
          *a1 = sEncryptPerm256Table[*a1];
          ++a1;
          --v9;
        }
        while (v9);
      }
    }
    else if (a3 == 1)
    {
      if (a2)
      {
        v8 = a2;
        do
        {
          *a1++ ^= 0x80u;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/encrypt.cpp", 60, (uint64_t)"dfutil/encrypt", 1, (uint64_t)&errStr_dfutil_encrypt_E_BADENCRYPTION, a7, a8, a3);
    }
  }
}

void DecryptBuffer(unsigned __int8 *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if (a3)
  {
    if (a3 == 2)
    {
      if (a2)
      {
        v9 = a2;
        do
        {
          *a1 = sDecryptPerm256Table[*a1];
          ++a1;
          --v9;
        }
        while (v9);
      }
    }
    else if (a3 == 1)
    {
      if (a2)
      {
        v8 = a2;
        do
        {
          *a1++ ^= 0x80u;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/encrypt.cpp", 87, (uint64_t)"dfutil/encrypt", 1, (uint64_t)&errStr_dfutil_encrypt_E_BADENCRYPTION, a7, a8, a3);
    }
  }
}

void MrecInitModule_active_kernel(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugActive)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugActive", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugActive = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugActive);
  }
}

uint64_t ActiveWordCoartN::unpackEndFromCallBack(ActiveWordCoartN *this)
{
  uint64_t v2;

  ActiveWordCoartBase::getEndPics((uint64_t)this, 0xFFFF, *((_QWORD *)this + 2) + 302992);
  v2 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 256))(*((_QWORD *)this + 1), *((_QWORD *)this + 2) + 302992, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1), *((_QWORD *)this + 9), v2);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1), 0, 0, 1);
}

uint64_t ActiveWordCoartN::unpackMidFromCallBack(ActiveWordCoartN *this)
{
  __int16 v2;
  __int16 *v3;
  unsigned int *v4;
  _DWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  v2 = *(_WORD *)(**(_QWORD **)(*((_QWORD *)this + 2) + 302976) + 56);
  *((_WORD *)this + 19) = v2;
  v3 = (__int16 *)((char *)this + 38);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  v5 = v4 + 4;
  v6 = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + (((unint64_t)v4[4] >> 22) & 0x3F8));
  v3[2] = v2;
  v10 = 0;
  v11 = 0;
  if (v4[6] == -1)
    v7 = 1;
  else
    v7 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 40))(v4);
  Voc::getPics(v6, v5, 1u, v3, v3 + 2, v7, (unsigned int *)&v10);
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t *, char *, uint64_t))(**((_QWORD **)this + 1) + 208))(*((_QWORD *)this + 1), v10, v11, &v12, (char *)this + 72, 2);
  v8 = v12;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v10);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1), *((_QWORD *)this + 8), v8);
  return (*(uint64_t (**)(_QWORD, uint64_t (*)(void *), ActiveWordCoartN *, uint64_t))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1), unpackEndCallBack, this, 2);
}

void sub_20986D28C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ActiveWordMgr::~ActiveWordMgr(ActiveWordMgr *this)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 302992);
  NetMgr::~NetMgr(this);
}

void ActiveWordMgr::newActiveWordNonAcoustic(ActiveWordMgr *a1, uint64_t a2)
{
  HmmNet *v3;
  HmmNet *v4;
  uint64_t *v5;

  NetMgr::addEmptyNet((uint64_t)a1, a2);
  v4 = v3;
  v5 = MemChunkAlloc(0x28uLL, 0);
  ActiveWordNonAcoustic::ActiveWordNonAcoustic((ActiveWordNonAcoustic *)v5, a1, v4);
}

void ActiveWordMgr::newActiveWordSilence(ActiveWordMgr *a1, uint64_t a2)
{
  HmmNet *v3;
  int **v4;
  uint64_t *v5;

  v3 = (HmmNet *)NetMgr::addSilNet((uint64_t)a1, a2);
  v4 = (int **)(*(uint64_t (**)(HmmNet *))(*(_QWORD *)v3 + 200))(v3);
  BitArray::operator=(v4, (uint64_t)a1 + 40);
  v5 = MemChunkAlloc(0x28uLL, 0);
  ActiveWordSilence::ActiveWordSilence((ActiveWordSilence *)v5, a1, v3);
}

void ActiveWordMgr::newActiveWord(uint64_t a1, unsigned int *a2, int a3, int a4, int a5)
{
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int16 v19;
  unint64_t v20;
  double v22;
  HmmNet *v23;
  HmmNet *v24;
  int **v25;
  BitArray *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  int v33;

  v10 = a1 + 302976;
  v11 = *a2;
  v12 = *(_QWORD **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v11 >> 22) & 0x3F8)) + 48);
  v13 = v11 & 0xFFFFFF;
  if (a2[2] == -1)
  {
    v16 = 1;
    v14 = v11 & 0xFFFFFF;
  }
  else
  {
    v14 = v13;
    if (*(_WORD *)(v12[74] + 2 * v13) || *(_WORD *)(v12[76] + 2 * v13))
    {
      v15 = *(_QWORD *)(a1 + 302984);
      v16 = (*(_DWORD *)(v15 + 68) & 0xFFFFFFFD) != 0 || Constraint::isCoartAllowedForState(v15, a2);
    }
    else
    {
      v16 = 0;
    }
  }
  v17 = v12[4];
  v18 = *(unsigned __int16 *)(v17 + 2 * v14);
  if (*(_WORD *)(v17 + 2 * v14))
  {
    v19 = 0;
    v20 = v18;
    do
      v19 += *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v10 + 16)
                                + *(unsigned __int16 *)(v12[9] + 2 * *(unsigned int *)(v12[6] + 4 * v14) - 2 + 2 * v20));
    while (v20-- > 1);
  }
  else
  {
    v19 = 0;
  }
  *(int32x2_t *)&v22 = NetMgr::addNonSilNet(a1, (uint64_t)a2, v16, a5, v18, v19, a3, a4);
  v24 = v23;
  v25 = (int **)(*(uint64_t (**)(HmmNet *, double))(*(_QWORD *)v23 + 200))(v23, v22);
  v26 = (BitArray *)v25;
  if ((v16 & 1) == 0 && *(_DWORD *)(a1 + 12) == 1)
  {
    BitArray::operator=(v25, a1 + 40);
LABEL_26:
    v31 = MemChunkAlloc(0x28uLL, 0);
    ActiveWordNoCoart::ActiveWordNoCoart((ActiveWordNoCoart *)v31, (ActiveWordMgr *)a1, v24);
    return;
  }
  v27 = a2[2] == -1 || a2[3] == -3;
  if (v27
    || (v28 = *(_QWORD *)(v10 + 8), v33 = *(_DWORD *)(a1 + 4), (Constraint::getNextPhones(v28, a2, &v33, v26) & 1) == 0))
  {
    PhnMgr::getFullAcousticExitContext(**(_QWORD **)v10, v26);
  }
  if ((v16 & 1) == 0)
    goto LABEL_26;
  if ((_DWORD)v18 == 1)
  {
    v29 = MemChunkAlloc(0x40uLL, 0);
    ActiveWordCoartBase::ActiveWordCoartBase((ActiveWordCoartBase *)v29, (ActiveWordMgr *)a1, v24);
    *v30 = &off_24C215578;
  }
  else
  {
    v32 = MemChunkAlloc(0x50uLL, 0);
    ActiveWordCoartN::ActiveWordCoartN((ActiveWordCoartN *)v32, (ActiveWordMgr *)a1, v24);
  }
}

uint64_t Constraint::getNextPhones(uint64_t a1, unsigned int *a2, int *a3, BitArray *a4)
{
  int v5;
  int v6;

  if ((*(_DWORD *)(a1 + 68) - 1) > 1)
  {
    v5 = *a3;
    return Constraint::getStateNextPhones(a1, a2, &v5, a4);
  }
  else
  {
    v6 = *a3;
    return Constraint::getTraceNextPhones(a1, (uint64_t)a2, &v6, (int **)a4);
  }
}

void ActiveWordMgr::printSize(ActiveWordMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 224, (DgnString *)&v51);
  if (v52)
    v16 = (char *)v51;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v51);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  if (this)
  {
    v50 = 0;
    v51 = 0;
    v21 = (a3 + 1);
    v49 = 0;
    NetMgr::printSize(this, 0xFFFFFFFFLL, v21, &v51, &v50, &v49);
    *a4 += v51;
    *a5 += v50;
    *a6 += v49;
  }
  else
  {
    v21 = (a3 + 1);
  }
  v22 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v22 = 12;
  v23 = *((unsigned int *)this + 75750);
  v24 = 12 * v23;
  if ((int)v23 <= 0)
    v24 = 0;
  v25 = v24 + v22;
  v26 = v24 + v22 + 12 * (*((_DWORD *)this + 75751) - v23);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 226, (DgnString *)&v51);
  if (v52)
    v31 = (char *)v51;
  else
    v31 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, v21, &byte_209A88803, (34 - a3), (34 - a3), v31, v26, v25, 0);
  DgnString::~DgnString((DgnString *)&v51);
  *a4 += v26;
  *a5 += v25;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v32 = 4;
  else
    v32 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 227, (DgnString *)&v51);
  if (v52)
    v37 = (char *)v51;
  else
    v37 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, v21, &byte_209A88803, (34 - a3), (34 - a3), v37, v32, v32, 0);
  DgnString::~DgnString((DgnString *)&v51);
  *a4 += v32;
  *a5 += v32;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v38 = 4;
  else
    v38 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 228, (DgnString *)&v51);
  if (v52)
    v43 = (char *)v51;
  else
    v43 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, v21, &byte_209A88803, (34 - a3), (34 - a3), v43, v38, v38, 0);
  DgnString::~DgnString((DgnString *)&v51);
  *a4 += v38;
  *a5 += v38;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 229, (DgnString *)&v51);
  if (v52)
    v48 = (char *)v51;
  else
    v48 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, a3, &byte_209A88803, (35 - a3), (35 - a3), v48, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v51);
}

void sub_20986D90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void ActiveWord::ActiveWord(ActiveWord *this, ActiveWordMgr *a2, HmmNet *a3)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_24C213558;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a2;
  if (*((_DWORD *)a3 + 6) == -1 || *((_DWORD *)a3 + 7) == -3)
  {
    v4 = MemChunkAlloc(0x38uLL, 0);
    *v4 = 0;
    v4[1] = 0;
    *((_DWORD *)v4 + 4) = -1;
    *(_OWORD *)(v4 + 3) = 0u;
    *(_OWORD *)(v4 + 5) = 0u;
    *((_QWORD *)this + 3) = v4;
    *((_DWORD *)this + 8) = 0;
LABEL_6:
    *((_BYTE *)this + 36) = 0;
    return;
  }
  *((_QWORD *)this + 3) = 0;
  v5 = *((_QWORD *)a2 + 37873);
  if ((*(_DWORD *)(v5 + 68) & 0xFFFFFFFD) != 0 || !*(_BYTE *)(v5 + 64))
  {
    *((_DWORD *)this + 8) = 268435200;
    goto LABEL_6;
  }
  v6 = (unsigned int *)((char *)a3 + 16);
  *((_DWORD *)this + 8) = Constraint::getMaxEndTime(*((_QWORD *)a2 + 37873), (unsigned int *)a3 + 4);
  *((_BYTE *)this + 36) = Constraint::getSuccessorRecursivePrefilteringAllowed((unsigned __int16 *)v5, v6, v7, v8, v9, v10, v11, v12);
}

void ActiveWord::~ActiveWord(ActiveWord *this)
{
  *(_QWORD *)this = off_24C213558;
  DgnDelete<MergedStateTransition>(*((_QWORD *)this + 3));
  *((_QWORD *)this + 3) = 0;
}

uint64_t DgnDelete<MergedStateTransition>(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  if (result)
  {
    v1 = result;
    DgnArray<PhnIndexSet>::releaseAll(result + 40);
    DgnIArray<Utterance *>::~DgnIArray(v1 + 24);
    v2 = (_QWORD *)DgnIArray<Utterance *>::~DgnIArray(v1);
    return MemChunkFree(v2, 0);
  }
  return result;
}

uint64_t ActiveWord::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  v2 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 4;
  else
    v3 = 8;
  if ((_DWORD)a2 == 3)
    v4 = 0;
  else
    v4 = v3;
  if ((_DWORD)a2 == 2)
  {
    v5 = v3 + v4;
  }
  else
  {
    v6 = a2;
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
    {
      v4 += (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 280))(v8, a2);
      v2 = gShadowDiagnosticShowIdealizedObjectSizes;
    }
    v9 = v2 == 0;
    v10 = 4;
    if (v9)
      v10 = 8;
    if (v6 == 3)
      v3 = 0;
    else
      v3 = v10;
    v5 = v3 + v4;
    v11 = *(_QWORD *)(a1 + 24);
    if (v11)
      v3 += sizeObject(v11, v6);
  }
  return v3 + v5;
}

uint64_t ActiveWordNoCoartBase::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = a2;
  result = ActiveWord::sizeObject(a1, a2);
  if (v2 != 3)
    ++result;
  return result;
}

void ActiveWordNonAcoustic::ActiveWordNonAcoustic(ActiveWordNonAcoustic *this, ActiveWordMgr *a2, HmmNet *a3)
{
  uint64_t v4;

  ActiveWord::ActiveWord(this, a2, a3);
  *(_QWORD *)v4 = &off_24C2171D8;
  *((_BYTE *)this + 37) = HmmNet::unpackNonAcoustic(*(HmmNet **)(v4 + 8));
}

void sub_20986DBB4(_Unwind_Exception *a1)
{
  ActiveWord *v1;

  ActiveWord::~ActiveWord(v1);
  _Unwind_Resume(a1);
}

void ActiveWordNonAcoustic::~ActiveWordNonAcoustic(ActiveWordNonAcoustic *this)
{
  ActiveWord::~ActiveWord(this);
  JUMPOUT(0x20BD149A8);
}

void ActiveWordSilence::ActiveWordSilence(ActiveWordSilence *this, ActiveWordMgr *a2, HmmNet *a3)
{
  uint64_t v4;

  ActiveWord::ActiveWord(this, a2, a3);
  *(_QWORD *)v4 = &off_24C2158F8;
  *((_BYTE *)this + 37) = HmmNet::unpackSilence(*(HmmNet **)(v4 + 8));
}

void sub_20986DC2C(_Unwind_Exception *a1)
{
  ActiveWord *v1;

  ActiveWord::~ActiveWord(v1);
  _Unwind_Resume(a1);
}

void ActiveWordSilence::~ActiveWordSilence(ActiveWordSilence *this)
{
  ActiveWord::~ActiveWord(this);
  JUMPOUT(0x20BD149A8);
}

void ActiveWordNoCoart::ActiveWordNoCoart(ActiveWordNoCoart *this, ActiveWordMgr *a2, HmmNet *a3)
{
  _QWORD *v4;
  unsigned int *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _WORD v12[2];
  __int16 v13[2];

  ActiveWord::ActiveWord(this, a2, a3);
  *v4 = &off_24C2158B8;
  v5 = (unsigned int *)v4[1];
  v7 = v5 + 4;
  v6 = v5[4];
  v13[0] = *(_WORD *)(**(_QWORD **)(*((_QWORD *)this + 2) + 302976) + 56);
  v13[1] = v13[0];
  v12[0] = v13[0];
  v12[1] = v13[0];
  v8 = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v6 >> 22) & 0x3F8));
  v10 = 0;
  v11 = 0;
  v9 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 40))(v5);
  Voc::getPics(v8, v7, 0, v13, v12, v9, (unsigned int *)&v10);
  *((_BYTE *)this + 37) = HmmNet::unpackNoCoart(*((_QWORD *)this + 1), v10, v11);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v10);
}

void sub_20986DD48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  ActiveWord *v2;
  va_list va;

  va_start(va, a2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  ActiveWord::~ActiveWord(v2);
  _Unwind_Resume(a1);
}

void ActiveWordNoCoart::~ActiveWordNoCoart(ActiveWordNoCoart *this)
{
  ActiveWord::~ActiveWord(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t ActiveWordNoCoartBase::seedInPort(uint64_t this, unsigned __int16 a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = *(_QWORD *)(this + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * *(unsigned __int8 *)(this + 37));
  if (*(__int16 *)(v5 + 8) > a3)
  {
    v6 = *(unsigned __int8 *)(v4 + 114);
    *(_WORD *)(v5 + 8) = a3;
    *(_DWORD *)v5 = a4;
    if (!v6)
      *(_DWORD *)(v5 + 4) = 0;
    *(_BYTE *)(v4 + 112) = 1;
  }
  return this;
}

void ActiveWordCoartBase::ActiveWordCoartBase(ActiveWordCoartBase *this, ActiveWordMgr *a2, HmmNet *a3)
{
  uint64_t v4;
  int *v5;
  __int16 v6;
  int v7;
  size_t v8;
  uint64_t *v9;

  ActiveWord::ActiveWord(this, a2, a3);
  *(_QWORD *)v4 = off_24C216928;
  *(_QWORD *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 56) = 0;
  *(_WORD *)(v4 + 38) = -1;
  *(_WORD *)(v4 + 42) = -1;
  v5 = **(int ***)(*(_QWORD *)(v4 + 16) + 302976);
  v6 = *((_WORD *)v5 + 28);
  *(_WORD *)(v4 + 44) = v6;
  *(_WORD *)(v4 + 40) = v6;
  v7 = *v5;
  v8 = (v7 - 2);
  if (v7 == 2)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v9 = MemChunkAlloc((v7 - 2), 0);
    *((_QWORD *)this + 6) = v9;
    *((_DWORD *)this + 14) = v8;
  }
  memset(v9, 255, v8);
}

void sub_20986DE70(_Unwind_Exception *a1)
{
  ActiveWord *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  ActiveWord::~ActiveWord(v1);
  _Unwind_Resume(a1);
}

uint64_t ActiveWordCoartBase::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  v4 = ActiveWord::sizeObject(a1, a2);
  if (v2 == 3)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = 8;
    v6 = 12;
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v6 = 8;
    if ((v2 & 0xFFFFFFFE) != 2)
    {
      v7 = *(unsigned int *)(a1 + 56);
      if ((int)v7 >= 1)
        v6 += v7;
      v5 = 8;
    }
  }
  return v5 + v6 + v4;
}

uint64_t ActiveWordCoartBase::getEndPics(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  char v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD v27[2];

  v5 = *(unsigned int **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v26 = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + (((unint64_t)v5[4] >> 22) & 0x3F8));
  v7 = **(_QWORD **)(v6 + 302976);
  v8 = *(_WORD *)(v7 + 56);
  LODWORD(v6) = *(_DWORD *)(v6 + 4);
  *(_WORD *)(a1 + 44) = v8;
  *(_WORD *)(a1 + 40) = v8;
  v9 = (_DWORD)v6 == 1;
  if ((_DWORD)v6 == 1)
    v10 = 3;
  else
    v10 = 2;
  if (v9)
    v11 = 38;
  else
    v11 = 42;
  if (v9)
    v12 = 42;
  else
    v12 = 38;
  if (a2 != 0xFFFF)
    v8 = a2;
  *(_WORD *)(a1 + v11) = v8;
  if (a2 == 0xFFFF)
    v13 = v10;
  else
    v13 = 0;
  v14 = *(_DWORD *)v7 - 2;
  *(_DWORD *)(a3 + 8) = 0;
  v15 = *(_DWORD *)(a3 + 12);
  v16 = v14 - v15;
  if (v14 > v15)
  {
    DgnArray<RuleDesc>::reallocElts(a3, v16, 0);
    v5 = *(unsigned int **)(a1 + 8);
  }
  v17 = (_QWORD *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v5 + 192))(v5, v16);
  v18 = *(_DWORD **)(a1 + 8);
  if (v18[6] == -1)
    v19 = 1;
  else
    v19 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 40))(v18);
  v27[0] = 0;
  v27[1] = 0;
  v20 = (unsigned __int16)v14;
  if ((_WORD)v14)
  {
    v21 = 0;
    do
    {
      if (((*(_DWORD *)(*v17 + 4 * (v21 >> 5)) >> v21) & 1) != 0)
      {
        *(_WORD *)(a1 + v12) = v21;
        Voc::getPics(v26, (_DWORD *)(*(_QWORD *)(a1 + 8) + 16), v13, (__int16 *)(a1 + 38), (_WORD *)(a1 + 42), v19, (unsigned int *)v27);
        v22 = v27[0];
        v23 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 8);
        v24 = *(_QWORD *)v27[0];
        *(_WORD *)(v23 + 8) = *(_WORD *)(v27[0] + 8);
        *(_QWORD *)v23 = v24;
        *(_BYTE *)(v23 + 10) = *(_BYTE *)(v22 + 10);
        *(_BYTE *)(v23 + 11) = *(_BYTE *)(v22 + 11);
        ++*(_DWORD *)(a3 + 8);
      }
      ++v21;
    }
    while (v20 != v21);
  }
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)v27);
}

void sub_20986E0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ActiveWordCoartBase::seedInPort(ActiveWordCoartBase *this, unsigned int a2, int a3, int a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  result = *(unsigned __int8 *)(*((_QWORD *)this + 6) + a2);
  if ((_DWORD)result == 255)
  {
    v8 = a2;
    result = (*(uint64_t (**)(ActiveWordCoartBase *))(*(_QWORD *)this + 48))(this);
    *(_BYTE *)(*((_QWORD *)this + 6) + v8) = result;
  }
  v9 = *((_QWORD *)this + 1);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * result);
  if (*(__int16 *)(v10 + 8) > a3)
  {
    v11 = *(unsigned __int8 *)(v9 + 114);
    *(_WORD *)(v10 + 8) = a3;
    *(_DWORD *)v10 = a4;
    if (!v11)
      *(_DWORD *)(v10 + 4) = 0;
    *(_BYTE *)(v9 + 112) = 1;
  }
  return result;
}

void ActiveWordCoart1::~ActiveWordCoart1(ActiveWordCoart1 *this)
{
  *(_QWORD *)this = off_24C216928;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 48);
  ActiveWord::~ActiveWord(this);
}

{
  *(_QWORD *)this = off_24C216928;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 48);
  ActiveWord::~ActiveWord(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t ActiveWordCoart1::addInPort(ActiveWordCoart1 *this, int a2)
{
  uint64_t v3;
  uint64_t v4;

  ActiveWordCoartBase::getEndPics((uint64_t)this, a2, *((_QWORD *)this + 2) + 302992);
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 256))(*((_QWORD *)this + 1), *((_QWORD *)this + 2) + 302992, 2);
  v4 = HmmNet::newInPort(*((HmmNet **)this + 1));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1), v4, v3);
  return v4;
}

uint64_t HmmNet::newInPort(HmmNet *this)
{
  int v2;
  uint64_t *v3;
  unsigned int v4;

  v2 = *((_DWORD *)this + 16);
  if (*((_DWORD *)this + 11))
  {
    v3 = 0;
    v4 = *((_DWORD *)this + 16);
  }
  else
  {
    v3 = MemChunkAlloc(0xCuLL, 0);
    *v3 = 0x100000001;
    *((_DWORD *)v3 + 2) = 1310740000;
    v4 = *((_DWORD *)this + 16);
  }
  if (v4 == *((_DWORD *)this + 17))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 56, 1, 1);
    v4 = *((_DWORD *)this + 16);
  }
  *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v4) = v3;
  *((_DWORD *)this + 16) = v4 + 1;
  return v2;
}

void ActiveWordCoartN::ActiveWordCoartN(ActiveWordCoartN *this, ActiveWordMgr *a2, HmmNet *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(void *);
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  ActiveWordCoartBase::ActiveWordCoartBase(this, a2, a3);
  *v5 = &off_24C2155C0;
  v5[8] = 0;
  v6 = v5 + 8;
  v5[9] = 0;
  v7 = v5 + 9;
  v8 = *(unsigned int *)(v5[1] + 16);
  v9 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + ((v8 >> 22) & 0x3F8))
                                                   + 48)
                                       + 32)
                           + 2 * (v8 & 0xFFFFFF));
  if ((*(unsigned int (**)(HmmNet *))(*(_QWORD *)a3 + 168))(a3))
  {
    v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
    *(_QWORD *)v10 = 0x100000001;
    *(_DWORD *)(v10 + 8) = 1310740000;
    *(_QWORD *)(v10 + 12) = 0;
    *(_DWORD *)(v10 + 20) = -65536;
    *v6 = v10;
    if (v9 == 2)
    {
      *v7 = v10;
      v11 = unpackEndCallBack;
    }
    else
    {
      v11 = unpackMidCallBack;
    }
    (*(void (**)(HmmNet *, uint64_t (*)(void *), ActiveWordCoartN *, uint64_t))(*(_QWORD *)a3 + 176))(a3, v11, this, 3);
  }
  else
  {
    ActiveWordCoartBase::getEndPics((uint64_t)this, 0xFFFF, *((_QWORD *)this + 2) + 302992);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 256))(*((_QWORD *)this + 1), *((_QWORD *)this + 2) + 302992, 1);
    if (v9 == 2)
    {
      v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
      *(_QWORD *)v12 = 0x100000001;
      *(_DWORD *)(v12 + 8) = 1310740000;
      *(_QWORD *)(v12 + 12) = 0;
      *(_DWORD *)(v12 + 20) = -65536;
      *v6 = v12;
      *v7 = v12;
    }
    else
    {
      v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 302976);
      v21 = 0;
      LOWORD(v13) = *(_WORD *)(*(_QWORD *)v13 + 56);
      *((_WORD *)this + 21) = v13;
      v14 = (unsigned int *)*((_QWORD *)this + 1);
      v15 = v14 + 4;
      v16 = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + (((unint64_t)v14[4] >> 22) & 0x3F8));
      *((_WORD *)this + 19) = v13;
      v19 = 0;
      v20 = 0;
      if (v14[6] == -1)
        v17 = 1;
      else
        v17 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v14 + 40))(v14);
      Voc::getPics(v16, v15, 1u, (__int16 *)this + 19, (_WORD *)this + 21, v17, (unsigned int *)&v19);
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t *, uint64_t *, uint64_t))(**((_QWORD **)this + 1) + 208))(*((_QWORD *)this + 1), v19, v20, &v21, v7, 2);
      DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v19);
      v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
      *(_QWORD *)v18 = 0x100000001;
      *(_DWORD *)(v18 + 8) = 1310740000;
      *(_QWORD *)(v18 + 12) = 0;
      *(_DWORD *)(v18 + 20) = -65536;
      *((_QWORD *)this + 8) = v18;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1));
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1));
  }
}

void sub_20986E5D4(_Unwind_Exception *a1)
{
  ActiveWord *v1;

  *(_QWORD *)v1 = off_24C216928;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v1 + 48);
  ActiveWord::~ActiveWord(v1);
  _Unwind_Resume(a1);
}

uint64_t ActiveWordCoartN::addInPort(ActiveWordCoartN *this, __int16 a2)
{
  uint64_t v3;
  __int16 v4;
  BOOL v5;
  __int16 v6;
  __int16 *v7;
  _WORD *v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v16[2];

  v3 = *((_QWORD *)this + 2);
  v4 = *(_WORD *)(**(_QWORD **)(v3 + 302976) + 56);
  LODWORD(v3) = *(_DWORD *)(v3 + 4);
  v5 = (_DWORD)v3 == 1;
  if ((_DWORD)v3 == 1)
    v6 = a2;
  else
    v6 = v4;
  if (!v5)
    v4 = a2;
  *((_WORD *)this + 19) = v6;
  v7 = (__int16 *)((char *)this + 38);
  *((_WORD *)this + 21) = v4;
  v8 = (_WORD *)((char *)this + 42);
  v9 = (unsigned int *)*((_QWORD *)this + 1);
  v10 = v9 + 4;
  if (v5)
    v11 = 2;
  else
    v11 = 3;
  v12 = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + (((unint64_t)v9[4] >> 22) & 0x3F8));
  v16[0] = 0;
  v16[1] = 0;
  if (v9[6] == -1)
    v13 = 1;
  else
    v13 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 40))(v9);
  Voc::getPics(v12, v10, v11, v7, v8, v13, (unsigned int *)v16);
  v14 = HmmNet::unpackInPort(*((HmmNet **)this + 1), v16[0], *((_QWORD *)this + 8));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v16);
  return v14;
}

void sub_20986E718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ActiveWordCoartN::~ActiveWordCoartN(ActiveWordCoartN *this)
{
  *(_QWORD *)this = off_24C216928;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 48);
  ActiveWord::~ActiveWord(this);
}

{
  *(_QWORD *)this = off_24C216928;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 48);
  ActiveWord::~ActiveWord(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t ActiveWordCoartN::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2;
  v3 = ActiveWordCoartBase::sizeObject(a1, a2);
  v4 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 16;
  if (v2 == 3)
    v4 = 0;
  return v4 + v3;
}

void ActiveWordEmbeddedFst::ActiveWordEmbeddedFst(ActiveWordEmbeddedFst *this, ActiveWordMgr *a2, HmmNet *a3)
{
  uint64_t v4;

  ActiveWord::ActiveWord(this, a2, a3);
  *(_QWORD *)v4 = &off_24C217198;
  *((_BYTE *)this + 37) = HmmNet::unpackEmbeddedFst(*(HmmNet **)(v4 + 8));
}

void sub_20986E824(_Unwind_Exception *a1)
{
  ActiveWord *v1;

  ActiveWord::~ActiveWord(v1);
  _Unwind_Resume(a1);
}

void ActiveWordEmbeddedFst::~ActiveWordEmbeddedFst(ActiveWordEmbeddedFst *this)
{
  ActiveWord::~ActiveWord(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t ActiveWordEmbeddedFst::seedInPort(ActiveWordEmbeddedFst *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1), *((unsigned __int8 *)this + 37));
}

uint64_t Active::Active(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_BYTE *)a1 = a2 == 2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  NetMgr::NetMgr(a1 + 16);
  *(_QWORD *)(a1 + 302992) = a5;
  *(_QWORD *)(a1 + 303008) = 0;
  *(_QWORD *)(a1 + 303016) = 0;
  *(_QWORD *)(a1 + 303000) = 0;
  Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::Hash(a1 + 303024, 0, 256);
  HashKEV<CWIDAC,CWIDAC,CWIDAC>::HashKEV(a1 + 303136, 0, 1);
  *(_OWORD *)(a1 + 303240) = 0u;
  return a1;
}

void sub_20986E93C(_Unwind_Exception *a1)
{
  uint64_t v1;
  NetMgr *v2;
  uint64_t v3;

  Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::~Hash(v3);
  DgnIArray<Utterance *>::~DgnIArray(v1 + 303008);
  NetMgr::~NetMgr(v2);
  _Unwind_Resume(a1);
}

void Active::printSize(Active *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned int *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 898, (DgnString *)&v101);
  if (v102)
    v16 = (char *)v101;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v101);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 899, (DgnString *)&v101);
  if (v102)
    v26 = (char *)v101;
  else
    v26 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v26, 4, 4, 0);
  v96 = a3;
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += 4;
  *a5 += 4;
  v100 = 0;
  v101 = 0;
  v99 = 0;
  ActiveWordMgr::printSize((Active *)((char *)this + 16), 0xFFFFFFFFLL, (a3 + 1), &v101, &v100, &v99);
  *a4 += v101;
  *a5 += v100;
  v97 = a6;
  *a6 += v99;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 902, (DgnString *)&v101);
  if (v102)
    v31 = (char *)v101;
  else
    v31 = &byte_209A88803;
  v98 = (a3 + 1);
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, v98, &byte_209A88803, (34 - a3), (34 - a3), v31, 1, 1, 0);
  v32 = (unsigned int *)((char *)this + 303112);
  DgnString::~DgnString((DgnString *)&v101);
  ++*a4;
  ++*a5;
  v33 = (char *)this + 303048;
  v34 = sizeObject((char *)this + 303048);
  v35 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v35 = 8;
    v36 = 2;
  }
  else
  {
    v36 = 3;
  }
  v37 = (unint64_t)*v32 << v36;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v38 = 8;
  else
    v38 = 16;
  v39 = v34 + v38 + v35 + v37 + 13;
  v40 = sizeObject(v33);
  v41 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v41 = 8;
    v42 = 2;
  }
  else
  {
    v42 = 3;
  }
  v43 = (unint64_t)*v32 << v42;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v44 = 8;
  else
    v44 = 16;
  v45 = v40 + v44 + v41 + v43 + 13;
  v46 = sizeObject(v33);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 903, (DgnString *)&v101);
  if (v102)
    v51 = (char *)v101;
  else
    v51 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, v98, &byte_209A88803, v21, v21, v51, v39, v45, v46);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v39;
  *a5 += v45;
  *v97 += v46;
  v52 = (char *)this + 303160;
  v53 = sizeObject((char *)this + 303160);
  v54 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v54 = 8;
    v55 = 2;
  }
  else
  {
    v55 = 3;
  }
  v56 = (unint64_t)*((unsigned int *)this + 75806) << v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v57 = 4;
  else
    v57 = 8;
  v58 = v53 + v57 + v54 + v56 + 13;
  v59 = sizeObject(v52);
  v60 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    v60 = 8;
    v61 = 2;
  }
  else
  {
    v61 = 3;
  }
  v62 = (unint64_t)*((unsigned int *)this + 75806) << v61;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 4;
  else
    v63 = 8;
  v64 = v59 + v63 + v60 + v62 + 13;
  v65 = sizeObject(v52);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 904, (DgnString *)&v101);
  if (v102)
    v70 = (char *)v101;
  else
    v70 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v98, &byte_209A88803, v21, v21, v70, v58, v64, v65);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v58;
  *a5 += v64;
  *v97 += v65;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 906, (DgnString *)&v101);
  if (v102)
    v75 = (char *)v101;
  else
    v75 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, v98, &byte_209A88803, v21, v21, v75, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 908, (DgnString *)&v101);
  if (v102)
    v80 = (char *)v101;
  else
    v80 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, v98, &byte_209A88803, v21, v21, v80, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += 4;
  *a5 += 4;
  v81 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v81 = 16;
  v82 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v82 = 3;
  v83 = *((unsigned int *)this + 75812);
  v84 = (((*((_DWORD *)this + 75813) - v83) + v83) << v82) + v81;
  v85 = (v83 << v82) + v81;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 910, (DgnString *)&v101);
  if (v102)
    v90 = (char *)v101;
  else
    v90 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, v98, &byte_209A88803, v21, v21, v90, v84, v85, 0);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v84;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 911, (DgnString *)&v101);
  if (v102)
    v95 = (char *)v101;
  else
    v95 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, v96, &byte_209A88803, (35 - v96), (35 - v96), v95, *a4, *a5, *v97);
  DgnString::~DgnString((DgnString *)&v101);
}

void sub_20986EFB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t Active::removeActiveWord(Active *this, ActiveWord *a2, unsigned int a3)
{
  char *v6;
  HmmNet *v7;
  uint64_t result;
  unsigned int v9;

  v6 = (char *)this + 303240;
  Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::remove((uint64_t)this + 303024, *((_QWORD *)a2 + 1) + 16);
  v7 = (HmmNet *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  NetMgr::removeNet((Active *)((char *)this + 16), v7);
  (**(void (***)(ActiveWord *))a2)(a2);
  result = MemChunkFree(a2, 0);
  v9 = *((_DWORD *)v6 + 2) - 1;
  *(_QWORD *)(*(_QWORD *)v6 + 8 * a3) = *(_QWORD *)(*(_QWORD *)v6 + 8 * v9);
  *((_DWORD *)v6 + 2) = v9;
  return result;
}

uint64_t *Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::remove(uint64_t a1, uint64_t a2)
{
  uint64_t *result;

  result = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(a1, a2);
  if (*result)
    return (uint64_t *)Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::removeBucket(a1, (char **)result);
  return result;
}

uint64_t Active::prune(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  Active *v3;
  ActiveWord *v4;
  uint64_t v5;

  v1 = (_QWORD *)(this + 303240);
  v2 = *(unsigned int *)(this + 303248);
  if ((int)v2 >= 1)
  {
    v3 = (Active *)this;
    do
    {
      v4 = *(ActiveWord **)(*v1 + 8 * --v2);
      v5 = *((_QWORD *)v4 + 1);
      if (!*(_DWORD *)(v5 + 104) && !*(_BYTE *)(v5 + 112))
        this = Active::removeActiveWord(v3, v4, v2);
    }
    while ((unint64_t)(v2 + 1) > 1);
  }
  return this;
}

uint64_t Active::pruneTimeConstrained(Active *this, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  unsigned int v8;
  ActiveWord *v9;

  v2 = (_QWORD *)((char *)this + 303240);
  v3 = *((unsigned int *)this + 75812);
  if ((int)v3 < 1)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = v3 + 1;
    v8 = v3 - 1;
    do
    {
      v9 = *(ActiveWord **)(*v2 + 8 * v8);
      if (*((_DWORD *)v9 + 8) <= a2)
      {
        Active::removeActiveWord(this, v9, v8);
        v6 = 1;
      }
      --v7;
      --v8;
    }
    while (v7 > 1);
  }
  return v6 & 1;
}

uint64_t Active::newActiveWordNonAcoustic(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  ActiveWordMgr::newActiveWordNonAcoustic((ActiveWordMgr *)(a1 + 16), a2);
  v5 = v4;
  Active::addActiveWord(a1, a2, v4);
  return v5;
}

_QWORD *Active::addActiveWord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v6 = a1 + 303240;
  v11 = a3;
  v7 = *(_DWORD *)(a1 + 303248);
  if (v7 == *(_DWORD *)(a1 + 303252) && v7 + (v7 >> 1) + 256 > v7)
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1 + 303240, (v7 >> 1) + 256, 0);
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = a3;
  *(_DWORD *)(v6 + 8) = v7 + 1;
  result = (_QWORD *)Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::add(a1 + 303024, a2, &v11);
  if (*(_BYTE *)a1)
  {
    v10 = a1 + 303136;
    result = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(v10, a2);
    if (!*result)
      return (_QWORD *)HashKEV<CWIDAC,CWIDAC,CWIDAC>::add(v10, a2);
  }
  return result;
}

uint64_t Active::newActiveWordSilence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  ActiveWordMgr::newActiveWordSilence((ActiveWordMgr *)(a1 + 16), a2);
  v5 = v4;
  Active::addActiveWord(a1, a2, v4);
  return v5;
}

uint64_t Active::newActiveWord(uint64_t a1, unsigned int *a2, int a3, int a4, int a5)
{
  uint64_t v7;
  uint64_t v8;

  ActiveWordMgr::newActiveWord(a1 + 16, a2, a3, a4, a5);
  v8 = v7;
  Active::addActiveWord(a1, (uint64_t)a2, v7);
  return v8;
}

uint64_t Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::add(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v6;
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;

  v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1)
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v6);
  result = CWIDAC::computeHash(a2);
  v8 = result;
  v9 = *(_DWORD *)(a1 + 16);
  if (v9)
    v10 = (-1640531527 * result) >> -(char)v9;
  else
    v10 = 0;
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 32);
  if (!v12)
  {
    result = DgnPool::addChunk((DgnPool *)(a1 + 24));
    v12 = *(_QWORD *)(a1 + 32);
  }
  v13 = (_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v12;
  v14 = *(_DWORD *)a2;
  *(_DWORD *)(v12 + 8) = 0;
  *(_DWORD *)(v12 + 12) = v14;
  *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(v12 + 20) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v12 + 40) = *a3;
  *(_DWORD *)(v12 + 8) = v8;
  ++*(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 20))
  {
    *(_QWORD *)v12 = *v13;
  }
  else
  {
    *(_QWORD *)v12 = 0;
    v15 = (_QWORD *)*v13;
    if (*v13)
    {
      do
      {
        v13 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
  }
  *v13 = v12;
  return result;
}

uint64_t HashKEV<CWIDAC,CWIDAC,CWIDAC>::add(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;

  v4 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v4 >> 1)
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v4);
  result = CWIDAC::computeHash(a2);
  v6 = result;
  v7 = *(_DWORD *)(a1 + 16);
  if (v7)
    v8 = (-1640531527 * result) >> -(char)v7;
  else
    v8 = 0;
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 32);
  if (!v10)
  {
    result = DgnPool::addChunk((DgnPool *)(a1 + 24));
    v10 = *(_QWORD *)(a1 + 32);
  }
  v11 = (_QWORD *)(v9 + 8 * v8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v10;
  v12 = *(_DWORD *)a2;
  *(_DWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 12) = v12;
  *(_DWORD *)(v10 + 16) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(v10 + 20) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(v10 + 8) = v6;
  ++*(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 20))
  {
    *(_QWORD *)v10 = *v11;
  }
  else
  {
    *(_QWORD *)v10 = 0;
    v13 = (_QWORD *)*v11;
    if (*v11)
    {
      do
      {
        v11 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
  }
  *v11 = v10;
  return result;
}

uint64_t Active::scoreActiveWords(uint64_t this, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;

  v7 = (_QWORD *)(this + 303240);
  *(_QWORD *)(this + 8) = 0;
  v8 = *(unsigned int *)(this + 303248);
  if ((int)v8 >= 1)
  {
    v15 = this;
    v16 = v8 + 1;
    do
    {
      v17 = *(_QWORD **)(*v7 + 8 * (v16 - 2));
      v18 = v17[1];
      if (*(_DWORD *)(v18 + 104) || *(_BYTE *)(v18 + 112))
      {
        if (*(_DWORD *)(v18 + 16) == -50331651)
          v19 = a5;
        else
          v19 = 0;
        (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*v17 + 16))(*(_QWORD *)(*v7 + 8 * (v16 - 2)), a2, (v19 + a3), (v19 + a4), a6, a7);
        v20 = (_DWORD *)v17[1];
        *(_DWORD *)(v15 + 8) += v20[26];
        this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v20 + 72))(v20);
        *(_DWORD *)(v15 + 12) += this;
      }
      --v16;
    }
    while (v16 > 1);
  }
  return this;
}

BOOL Active::thresholdActiveWords(Active *this, int a2, __int16 a3, __int16 a4)
{
  _QWORD *v4;
  uint64_t v5;
  BOOL v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  __int16 v16;

  v4 = (_QWORD *)((char *)this + 303240);
  v5 = *((unsigned int *)this + 75812);
  if ((int)v5 < 1)
  {
    return 0;
  }
  else
  {
    v9 = 0;
    v10 = *((__int16 *)this + 132);
    v11 = v5 + 1;
    v12 = v5 - 1;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)(*v4 + 8 * v12) + 8);
      if (*(_DWORD *)(v13 + 104) || *(_BYTE *)(v13 + 112))
      {
        v14 = *(_DWORD *)(v13 + 16);
        v9 = v9 || *(__int16 *)(v13 + 108) <= v10 && v14 != -50331651;
        if (v14 == -50331651)
          v16 = a4;
        else
          v16 = 0;
        HmmNet::thresholdNet((HmmNet *)v13, a2, v16 + a3);
      }
      --v11;
      --v12;
    }
    while (v11 > 1);
  }
  return v9;
}

void Active::beginActiveSyncRecog(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  *(_DWORD *)(a1 + 4) = 0;
  NetMgr::beginNetMgrSyncRecog(a1 + 16, *(unsigned int ***)(a1 + 302992), a2, a3, a4, a5);
}

_QWORD *Active::endActiveSyncRecog(Active *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  HmmNet *v6;

  v2 = (char *)this + 303240;
  Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::removeAll((uint64_t)this + 303024);
  HashKEV<unsigned int,unsigned int,CWIDScope>::removeAll((uint64_t)this + 303136);
  v3 = *((unsigned int *)v2 + 2);
  if ((int)v3 >= 1)
  {
    v4 = v3 + 1;
    do
    {
      v5 = *(_QWORD **)(*(_QWORD *)v2 + 8 * (v4 - 2));
      v6 = (HmmNet *)v5[1];
      v5[1] = 0;
      NetMgr::removeNet((Active *)((char *)this + 16), v6);
      (*(void (**)(_QWORD *))*v5)(v5);
      MemChunkFree(v5, 0);
      --v4;
    }
    while (v4 > 1);
  }
  *((_DWORD *)v2 + 2) = 0;
  return NetMgr::endNetMgrSyncRecog((Active *)((char *)this + 16));
}

uint64_t Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t (*v7)(char *);
  uint64_t (*v8)(_QWORD *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = *(char **)v5;
          v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7)
            result = v7(v5 + 12);
          v8 = *(uint64_t (**)(_QWORD *))(v1 + 104);
          if (v8)
            result = v8((_QWORD *)v5 + 5);
          *(_QWORD *)v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t Active::estimateActivePelsThisFrame(Active *this, BitArray *a2)
{
  char *v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;

  v3 = (char *)this + 303240;
  result = NetMgr::estimateActivePelsPrevFrame((uint64_t)this + 16, a2);
  v5 = *((unsigned int *)v3 + 2);
  if ((int)v5 >= 1)
  {
    v6 = v5 + 1;
    do
    {
      result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8 * (v6 - 2)) + 8);
      if (*(_DWORD *)(result + 104) || *(_BYTE *)(result + 112))
        result = (*(uint64_t (**)(uint64_t, BitArray *))(*(_QWORD *)result + 16))(result, a2);
      --v6;
    }
    while (v6 > 1);
  }
  return result;
}

uint64_t ActiveWord::scoreActiveWord(ActiveWord *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 296))(*((_QWORD *)this + 1));
}

uint64_t ActiveWord::setEmbeddedFstSeedingTime(ActiveWord *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 264))(*((_QWORD *)this + 1));
}

uint64_t ActiveWordCoartBase::scoreActiveWord(ActiveWordCoartBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 296))(*((_QWORD *)this + 1));
}

uint64_t HmmNet::thresholdNet(HmmNet *this, int a2, __int16 a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  result = (*(uint64_t (**)(HmmNet *))(*(_QWORD *)this + 304))(this);
  if (*((__int16 *)this + 54) > a3)
    *((_WORD *)this + 54) = 20000;
  v6 = *((unsigned int *)this + 16);
  if ((int)v6 >= 1)
  {
    v7 = *((_QWORD *)this + 7);
    v8 = v6 + 1;
    do
      *(_WORD *)(*(_QWORD *)(v7 + 8 * (v8-- - 2)) + 8) = 20000;
    while (v8 > 1);
  }
  *((_BYTE *)this + 112) = 0;
  return result;
}

uint64_t Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _DWORD v13[2];
  __int128 v14;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218B08;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v13[1] = 0x3FFF;
  v14 = xmmword_209A593D0;
  v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  v8 = sizeObject((uint64_t)v13, 2);
  if (v7)
    v9 = 8;
  else
    v9 = 12;
  v10 = v9 + v8;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v11 = 4;
  else
    v11 = 8;
  *(_DWORD *)(a1 + 24) = 48;
  *(_DWORD *)(a1 + 28) = v10 + v11;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20986FA9C(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::~Hash(uint64_t a1)
{
  Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t HashKEV<CWIDAC,CWIDAC,CWIDAC>::HashKEV(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD v11[2];
  __int128 v12;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C2190D0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  v11[1] = 0x3FFF;
  v12 = xmmword_209A593D0;
  v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  v8 = sizeObject((uint64_t)v11, 2);
  if (v7)
    v9 = 8;
  else
    v9 = 12;
  *(_DWORD *)(a1 + 24) = 48;
  *(_DWORD *)(a1 + 28) = v9 + v8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20986FBC8(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashKEV<CWIDAC,CWIDAC,CWIDAC>::~HashKEV(uint64_t a1)
{
  HashKEV<CWIDAC,CWIDAC,CWIDAC>::~HashKEV(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218B08;
  if (*(_DWORD *)(a1 + 8))
    Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashKEV<CWIDAC,CWIDAC,CWIDAC>::~HashKEV(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C2190D0;
  if (*(_DWORD *)(a1 + 8))
    HashKEV<unsigned int,unsigned int,CWIDScope>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::removeBucket(uint64_t result, char **a2)
{
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(char *);
  uint64_t (*v5)(_QWORD *);

  v2 = result;
  v3 = *a2;
  *a2 = *(char **)*a2;
  v4 = *(uint64_t (**)(char *))(result + 96);
  if (v4)
    result = v4(v3 + 12);
  v5 = *(uint64_t (**)(_QWORD *))(v2 + 104);
  if (v5)
    result = v5((_QWORD *)v3 + 5);
  *(_QWORD *)v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  --*(_DWORD *)(v2 + 8);
  return result;
}

__n128 AcousticFormat::AcousticFormat(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t AcousticFormat::getMicrosecPerFrame(AcousticFormat *this)
{
  unsigned int v1;
  int v2;

  v1 = *((_DWORD *)this + 3);
  if (v1 && (v2 = *((_DWORD *)this + 6)) != 0)
    return 1000000 * v2 / v1;
  else
    return 0;
}

void MrecInitModule_user_user(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugUserDelta)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugUserDelta", (const char *)&unk_209A6CE41, (const char *)&unk_209A6CE41, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugUserDelta = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugUserDelta);
  }
}

void User::~User(User *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  DSMSetData **v9;

  if (*((_DWORD *)this + 51))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 243, (uint64_t)"user/user", 2, (uint64_t)&errStr_user_user_E_HAS_ADAPTER, a7, a8, *((_WORD *)this + 92));
  if (*((_DWORD *)this + 52))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 244, (uint64_t)"user/user", 6, (uint64_t)&errStr_user_user_E_HAS_PREFILTERER, a7, a8, *((_WORD *)this + 92));
  if (*((_DWORD *)this + 53))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 245, (uint64_t)"user/user", 39, (uint64_t)&errStr_user_user_E_HAS_TRANSDUCER, a7, a8, *((_WORD *)this + 92));
  DgnDelete<EnvMgr>(*(EnvMgr **)this);
  DgnDelete<MulTable>(*((MulTable **)this + 1));
  DgnDelete<Imelda>(*((_QWORD *)this + 2));
  DgnDelete<VarClassMgr>(*((VarClassMgr **)this + 3));
  DgnDelete<FmpeMgr>(*((FmpeMgr **)this + 4));
  DgnDelete<OnlineConstrainedTransAccMgr>(*((_QWORD *)this + 5));
  DgnDelete<PicMgr>(*((PicMgr **)this + 6));
  DgnDelete<PelMgr>(*((PelMgr **)this + 7));
  DgnDelete<GenoneClassTree>(*((GenoneClassTree **)this + 8));
  DgnDelete<SigProcDescriptor>(*((SigProcDescriptor **)this + 9));
  DgnDelete<Lookahead>(*((Lookahead **)this + 18));
  DgnDelete<AdaptStatsHistory>(*((AdaptStatsHistory **)this + 22));
  DgnDelete<NeuralNet>(*((NeuralNet **)this + 46));
  v9 = (DSMSetData **)*((_QWORD *)this + 24);
  if (v9)
    DgnSharedMemSet::unrefDSMEx(v9, *((unsigned int *)this + 50));
  DgnArray<BandwidthTransform>::releaseAll((uint64_t)this + 352);
  DgnArray<SigProcDescriptor>::releaseAll((uint64_t)this + 336);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 280);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 264);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  FileHistory::~FileHistory((User *)((char *)this + 152));
  PhnMgr::~PhnMgr((User *)((char *)this + 80));
}

MulTable *DgnDelete<MulTable>(MulTable *result)
{
  _QWORD *v1;

  if (result)
  {
    MulTable::~MulTable(result);
    return (MulTable *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnDelete<Imelda>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    LinearTransform::~LinearTransform((LinearTransform *)(result + 8));
    return MemChunkFree(v1, 0);
  }
  return result;
}

VarClassMgr *DgnDelete<VarClassMgr>(VarClassMgr *result)
{
  _QWORD *v1;

  if (result)
  {
    VarClassMgr::~VarClassMgr(result);
    return (VarClassMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

FmpeMgr *DgnDelete<FmpeMgr>(FmpeMgr *result)
{
  _QWORD *v1;

  if (result)
  {
    FmpeMgr::~FmpeMgr(result);
    return (FmpeMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnDelete<OnlineConstrainedTransAccMgr>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnPrimArray<unsigned int>::~DgnPrimArray(result + 32);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v1 + 2));
    return MemChunkFree(v1, 0);
  }
  return result;
}

PicMgr *DgnDelete<PicMgr>(PicMgr *result)
{
  _QWORD *v1;

  if (result)
  {
    PicMgr::~PicMgr(result);
    return (PicMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

PelMgr *DgnDelete<PelMgr>(PelMgr *result)
{
  _QWORD *v1;

  if (result)
  {
    PelMgr::~PelMgr(result);
    return (PelMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

GenoneClassTree *DgnDelete<GenoneClassTree>(GenoneClassTree *result)
{
  _QWORD *v1;

  if (result)
  {
    GenoneClassTree::~GenoneClassTree(result);
    return (GenoneClassTree *)MemChunkFree(v1, 0);
  }
  return result;
}

SigProcDescriptor *DgnDelete<SigProcDescriptor>(SigProcDescriptor *result)
{
  _QWORD *v1;

  if (result)
  {
    SigProcDescriptor::~SigProcDescriptor(result);
    return (SigProcDescriptor *)MemChunkFree(v1, 0);
  }
  return result;
}

Lookahead *DgnDelete<Lookahead>(Lookahead *result)
{
  _QWORD *v1;

  if (result)
  {
    Lookahead::~Lookahead(result);
    return (Lookahead *)MemChunkFree(v1, 0);
  }
  return result;
}

AdaptStatsHistory *DgnDelete<AdaptStatsHistory>(AdaptStatsHistory *result)
{
  _QWORD *v1;

  if (result)
  {
    AdaptStatsHistory::~AdaptStatsHistory(result);
    return (AdaptStatsHistory *)MemChunkFree(v1, 0);
  }
  return result;
}

NeuralNet *DgnDelete<NeuralNet>(NeuralNet *result)
{
  _QWORD *v1;

  if (result)
  {
    NeuralNet::~NeuralNet(result);
    return (NeuralNet *)MemChunkFree(v1, 0);
  }
  return result;
}

void User::printSize(User *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  EnvMgr *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  MulTable *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  Imelda *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  VarClassMgr *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  FmpeMgr *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  OnlineConstrainedTransAccMgr *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  PicMgr *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  PelMgr *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  GenoneClassTree *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  SigProcDescriptor *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  Lookahead *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  int v214;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 273, (DgnString *)&v213);
  if (v214)
    v16 = (void *)v213;
  else
    v16 = &unk_209A6CE41;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6CE41, a3, &unk_209A6CE41, v16);
  DgnString::~DgnString((DgnString *)&v213);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6CE41);
  v21 = *(EnvMgr **)this;
  if (*(_QWORD *)this)
  {
    v212 = 0;
    v213 = 0;
    v22 = (a3 + 1);
    v211 = 0;
    EnvMgr::printSize(v21, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  else
  {
    v22 = (a3 + 1);
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v23 = 4;
  else
    v23 = 8;
  v24 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 274, (DgnString *)&v213);
  if (v214)
    v29 = (void *)v213;
  else
    v29 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, v22, &unk_209A6CE41, (34 - a3), (34 - a3), v29, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v23;
  *a5 += v23;
  v30 = (MulTable *)*((_QWORD *)this + 1);
  if (v30)
  {
    v212 = 0;
    v213 = 0;
    v211 = 0;
    MulTable::printSize(v30, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v31 = 4;
  else
    v31 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 276, (DgnString *)&v213);
  if (v214)
    v36 = (void *)v213;
  else
    v36 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v22, &unk_209A6CE41, (34 - a3), (34 - a3), v36, v31, v31, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v31;
  *a5 += v31;
  v37 = (Imelda *)*((_QWORD *)this + 2);
  if (v37)
  {
    v212 = 0;
    v213 = 0;
    v211 = 0;
    Imelda::printSize(v37, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v38 = 4;
  else
    v38 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 277, (DgnString *)&v213);
  if (v214)
    v43 = (void *)v213;
  else
    v43 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, v22, &unk_209A6CE41, (34 - a3), (34 - a3), v43, v38, v38, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v38;
  *a5 += v38;
  v44 = (VarClassMgr *)*((_QWORD *)this + 3);
  if (v44)
  {
    v212 = 0;
    v213 = 0;
    v211 = 0;
    VarClassMgr::printSize(v44, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v45 = 4;
  else
    v45 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 279, (DgnString *)&v213);
  if (v214)
    v50 = (void *)v213;
  else
    v50 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v22, &unk_209A6CE41, (34 - a3), (34 - a3), v50, v45, v45, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v45;
  *a5 += v45;
  v51 = (FmpeMgr *)*((_QWORD *)this + 4);
  if (v51)
  {
    v212 = 0;
    v213 = 0;
    v211 = 0;
    FmpeMgr::printSize(v51, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v52 = 4;
  else
    v52 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 280, (DgnString *)&v213);
  if (v214)
    v57 = (void *)v213;
  else
    v57 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v22, &unk_209A6CE41, (34 - a3), (34 - a3), v57, v52, v52, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v52;
  *a5 += v52;
  v58 = (OnlineConstrainedTransAccMgr *)*((_QWORD *)this + 5);
  if (v58)
  {
    v212 = 0;
    v213 = 0;
    v211 = 0;
    OnlineConstrainedTransAccMgr::printSize(v58, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v59 = 4;
  else
    v59 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 282, (DgnString *)&v213);
  if (v214)
    v64 = (void *)v213;
  else
    v64 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v22, &unk_209A6CE41, (34 - a3), (34 - a3), v64, v59, v59, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v59;
  *a5 += v59;
  v65 = (PicMgr *)*((_QWORD *)this + 6);
  if (v65)
  {
    v212 = 0;
    v213 = 0;
    v211 = 0;
    PicMgr::printSize(v65, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v66 = 4;
  else
    v66 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 283, (DgnString *)&v213);
  if (v214)
    v71 = (void *)v213;
  else
    v71 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v22, &unk_209A6CE41, (34 - a3), (34 - a3), v71, v66, v66, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v66;
  *a5 += v66;
  v72 = (PelMgr *)*((_QWORD *)this + 7);
  if (v72)
  {
    v212 = 0;
    v213 = 0;
    v211 = 0;
    PelMgr::printSize(v72, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 4;
  else
    v73 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 284, (DgnString *)&v213);
  if (v214)
    v78 = (void *)v213;
  else
    v78 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v74, v75, v76, v77, v22, &unk_209A6CE41, (34 - a3), (34 - a3), v78, v73, v73, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v73;
  *a5 += v73;
  v79 = (GenoneClassTree *)*((_QWORD *)this + 8);
  if (v79)
  {
    v212 = 0;
    v213 = 0;
    v211 = 0;
    GenoneClassTree::printSize(v79, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v80 = 4;
  else
    v80 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 285, (DgnString *)&v213);
  if (v214)
    v85 = (void *)v213;
  else
    v85 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, v22, &unk_209A6CE41, (34 - a3), (34 - a3), v85, v80, v80, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v80;
  *a5 += v80;
  v86 = (SigProcDescriptor *)*((_QWORD *)this + 9);
  if (v86)
  {
    v212 = 0;
    v213 = 0;
    v211 = 0;
    SigProcDescriptor::printSize(v86, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v87 = 4;
  else
    v87 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 287, (DgnString *)&v213);
  if (v214)
    v92 = (void *)v213;
  else
    v92 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v22, &unk_209A6CE41, (34 - a3), (34 - a3), v92, v87, v87, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v87;
  *a5 += v87;
  v212 = 0;
  v213 = 0;
  v211 = 0;
  PhnMgr::printSize((User *)((char *)this + 80), 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
  *a4 += v213;
  *a5 += v212;
  *a6 += v211;
  v93 = (Lookahead *)*((_QWORD *)this + 18);
  if (v93)
  {
    v212 = 0;
    v213 = 0;
    v211 = 0;
    Lookahead::printSize(v93, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  v210 = a3;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v94 = 4;
  else
    v94 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 290, (DgnString *)&v213);
  if (v214)
    v99 = (void *)v213;
  else
    v99 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, v22, &unk_209A6CE41, (34 - a3), (34 - a3), v99, v94, v94, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v94;
  *a5 += v94;
  v100 = sizeObject((uint64_t)this + 152, 0);
  v101 = sizeObject((uint64_t)this + 152, 1);
  v102 = sizeObject((uint64_t)this + 152, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 292, (DgnString *)&v213);
  if (v214)
    v107 = (void *)v213;
  else
    v107 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v103, v104, v105, v106, v22, &unk_209A6CE41, v24, v24, v107, v100, v101, v102);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v100;
  *a5 += v101;
  *a6 += v102;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v108 = 4;
  else
    v108 = 8;
  v109 = *((_QWORD *)this + 22);
  if (v109)
  {
    v110 = sizeObject(v109, 0) + v108;
    v111 = *((_QWORD *)this + 22);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v108 = 4;
    else
      v108 = 8;
    if (v111 && (v108 += sizeObject(v111, 1), (v112 = *((_QWORD *)this + 22)) != 0))
      v113 = sizeObject(v112, 3);
    else
      v113 = 0;
  }
  else
  {
    v113 = 0;
    v110 = v108;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 294, (DgnString *)&v213);
  if (v214)
    v118 = (void *)v213;
  else
    v118 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v22, &unk_209A6CE41, v24, v24, v118, v110, v108, v113);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v110;
  *a5 += v108;
  *a6 += v113;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 295, (DgnString *)&v213);
  if (v214)
    v123 = (void *)v213;
  else
    v123 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v22, &unk_209A6CE41, v24, v24, v123, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 297, (DgnString *)&v213);
  if (v214)
    v128 = (void *)v213;
  else
    v128 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v124, v125, v126, v127, v22, &unk_209A6CE41, v24, v24, v128, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v213);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v129 = 4;
  else
    v129 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 298, (DgnString *)&v213);
  if (v214)
    v134 = (void *)v213;
  else
    v134 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v22, &unk_209A6CE41, v24, v24, v134, v129, v129, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v129;
  *a5 += v129;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 299, (DgnString *)&v213);
  if (v214)
    v139 = (void *)v213;
  else
    v139 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v22, &unk_209A6CE41, v24, v24, v139, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 300, (DgnString *)&v213);
  if (v214)
    v144 = (void *)v213;
  else
    v144 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v140, v141, v142, v143, v22, &unk_209A6CE41, v24, v24, v144, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 302, (DgnString *)&v213);
  if (v214)
    v149 = (void *)v213;
  else
    v149 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v22, &unk_209A6CE41, v24, v24, v149, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 304, (DgnString *)&v213);
  if (v214)
    v154 = (void *)v213;
  else
    v154 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v150, v151, v152, v153, v22, &unk_209A6CE41, v24, v24, v154, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 306, (DgnString *)&v213);
  if (v214)
    v159 = (void *)v213;
  else
    v159 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v155, v156, v157, v158, v22, &unk_209A6CE41, v24, v24, v159, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v160 = 12;
  else
    v160 = 16;
  v161 = *((unsigned int *)this + 58);
  v162 = *((_DWORD *)this + 59);
  if (v162 >= v161)
  {
    v163 = 0;
    if ((int)v161 > 0)
      v160 += 4 * (v161 - 1) + 4;
    v164 = v160 + 4 * (v162 - v161);
  }
  else
  {
    v163 = 4 * v161;
    v164 = v160;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 308, (DgnString *)&v213);
  if (v214)
    v169 = (void *)v213;
  else
    v169 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v165, v166, v167, v168, v22, &unk_209A6CE41, v24, v24, v169, v164, v160, v163);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v164;
  *a5 += v160;
  *a6 += v163;
  v170 = sizeObject((uint64_t)this + 240, 0);
  v171 = sizeObject((uint64_t)this + 240, 1);
  v172 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 310, (DgnString *)&v213);
  if (v214)
    v177 = (void *)v213;
  else
    v177 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v173, v174, v175, v176, v22, &unk_209A6CE41, v24, v24, v177, v170, v171, v172);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v170;
  *a5 += v171;
  *a6 += v172;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 312, (DgnString *)&v213);
  if (v214)
    v182 = (void *)v213;
  else
    v182 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v178, v179, v180, v181, v22, &unk_209A6CE41, v24, v24, v182, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 314, (DgnString *)&v213);
  if (v214)
    v187 = (void *)v213;
  else
    v187 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v183, v184, v185, v186, v22, &unk_209A6CE41, v24, v24, v187, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 4;
  *a5 += 4;
  v188 = sizeObject<SigProcDescriptor>((uint64_t)this + 336, 0);
  v189 = sizeObject<SigProcDescriptor>((uint64_t)this + 336, 1);
  v190 = sizeObject<SigProcDescriptor>((uint64_t)this + 336, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 316, (DgnString *)&v213);
  if (v214)
    v195 = (void *)v213;
  else
    v195 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v191, v192, v193, v194, v22, &unk_209A6CE41, v24, v24, v195, v188, v189, v190);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v188;
  *a5 += v189;
  *a6 += v190;
  v196 = (char *)this + 352;
  v197 = sizeObject<BandwidthTransform>((uint64_t)this + 352, 0);
  v198 = sizeObject<BandwidthTransform>((uint64_t)v196, 1);
  v199 = sizeObject<BandwidthTransform>((uint64_t)v196, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 318, (DgnString *)&v213);
  if (v214)
    v204 = (void *)v213;
  else
    v204 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v200, v201, v202, v203, v22, &unk_209A6CE41, v24, v24, v204, v197, v198, v199);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v197;
  *a5 += v198;
  *a6 += v199;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 319, (DgnString *)&v213);
  if (v214)
    v209 = (void *)v213;
  else
    v209 = &unk_209A6CE41;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v205, v206, v207, v208, v210, &unk_209A6CE41, (35 - v210), (35 - v210), v209, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v213);
}

void sub_209871450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<SigProcDescriptor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[344];

  SigProcDescriptor::SigProcDescriptor((SigProcDescriptor *)v10);
  v4 = sizeObject((uint64_t)v10, 2);
  if ((_DWORD)a2 == 3)
  {
    v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 12;
    else
      v5 = 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = v4;
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
          v5 += sizeObject(*(_QWORD *)a1 + 344 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!(_DWORD)a2)
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  SigProcDescriptor::~SigProcDescriptor((SigProcDescriptor *)v10);
  return v5;
}

void sub_2098715B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SigProcDescriptor::~SigProcDescriptor((SigProcDescriptor *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<BandwidthTransform>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  _BYTE v11[72];

  LinearTransform::LinearTransform((LinearTransform *)v11);
  v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3)
  {
    v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 12;
    else
      v5 = 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = v4;
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
          v5 += sizeObject(*(_QWORD *)a1 + 80 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2)
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  LinearTransform::~LinearTransform((LinearTransform *)v11);
  return v5;
}

void sub_2098716BC(_Unwind_Exception *a1)
{
  LinearTransform *v1;

  LinearTransform::~LinearTransform(v1);
  _Unwind_Resume(a1);
}

void User::saveUser(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, uint64_t a5, ProgressCallbackHandler *a6)
{
  DFileProgressInfo *v12;
  _BOOL8 v13;
  uint64_t *v14;
  Lookahead *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NeuralNet *v26;
  Imelda *v27;
  FmpeMgr *v28;
  OnlineConstrainedTransAccMgr *v29;
  VarClassMgr *v30;
  DgnStream *v31;
  FileHistory *v32;
  int64x2_t v33;
  int64x2_t v34;
  _BYTE v35[24];
  _BYTE v36[23];
  char v37;
  int64x2_t v38;
  int64x2_t v39;

  v38 = 0u;
  v39 = 0u;
  SnapTime::recordTime((SnapTime *)&v38, 1, 1, 1, 1);
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v37);
  DFileProgressInfo::attachProgressHandler((DFileProgressInfo *)(a1 + 240), a6, v12);
  if (a4)
  {
    v13 = a4 != 2;
  }
  else if (*(_BYTE *)(a1 + 186))
  {
    v13 = *(_BYTE *)(*(_QWORD *)a1 + 264) != 0;
  }
  else
  {
    v13 = 0;
  }
  DFileOwner::DFileOwner((DFileOwner *)v36);
  *a3 = 1;
  v14 = DFile::openDFile(a2, (const FileSpec *)1, 3, (uint64_t)v36);
  *a3 = 2;
  (*(void (**)(uint64_t *, uint64_t))(*v14 + 96))(v14, a1 + 240);
  DFileProgressInfo::resetReportedInfo((void **)(a1 + 240));
  DFileChecksums::DFileChecksums((DFileChecksums *)v35);
  AdaptStatsHistory::saveASB(*(AdaptStatsHistory **)(a1 + 176), (DFile *)v14, (DFileChecksums *)v35, v13, a5);
  EnvMgr::saveEnvMgr(*(EnvMgr **)a1, (DFile *)v14, (DFileChecksums *)v35, v13, a5);
  PhnMgr::savePhnMgr((PhnMgr *)(a1 + 80), (DFile *)v14, (DFileChecksums *)v35, v13, a5);
  MulTable::saveMulTable(*(MulTable **)(a1 + 8), (DFile *)v14, (DFileChecksums *)v35, v13, a5);
  v15 = *(Lookahead **)(a1 + 144);
  if (v15)
    Lookahead::saveLookahead(v15, (DFile *)v14, (DFileChecksums *)v35, v13, a5);
  SigProcDescriptor::saveSigProcDescriptor(*(SigProcDescriptor **)(a1 + 72), (DFile *)v14, (DFileChecksums *)v35, v13, a5);
  if (*(_DWORD *)(a1 + 360))
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    do
    {
      v33.i32[0] = 2;
      v33.i32[1] = v25;
      DFile::pushCurrentSubDirComponent((DFile *)v14, (const SubDirExtension *)&v33, v16, v17, v18, v19, v20, v21);
      SigProcDescriptor::saveSigProcDescriptor((SigProcDescriptor *)(*(_QWORD *)(a1 + 336) + v24), (DFile *)v14, (DFileChecksums *)v35, v13, a5);
      BandwidthTransform::saveBandwidthTransform((BandwidthTransform *)(*(_QWORD *)(a1 + 352) + v23), (DFile *)v14, (DFileChecksums *)v35, v13, a5);
      DFile::popCurrentSubDirComponent((uint64_t)v14);
      ++v25;
      v24 += 344;
      v23 += 80;
    }
    while (v25 < *(unsigned int *)(a1 + 360));
  }
  v26 = *(NeuralNet **)(a1 + 368);
  if (v26)
    NeuralNet::saveNeuralNet(v26, (DFile *)v14, (DFileChecksums *)v35, v13, a5);
  v27 = *(Imelda **)(a1 + 16);
  if (v27)
    Imelda::saveImelda(v27, (DFile *)v14, (DFileChecksums *)v35, v13, a5);
  v28 = *(FmpeMgr **)(a1 + 32);
  if (v28)
    FmpeMgr::saveFmpeModel(v28, (DFile *)v14, (DFileChecksums *)v35, v13, a5, v19, v20, v21);
  v29 = *(OnlineConstrainedTransAccMgr **)(a1 + 40);
  if (v29)
    OnlineConstrainedTransAccMgr::saveOnlineConstrainedTransAcc(v29, (DFile *)v14, (DFileChecksums *)v35, v13, a5);
  v30 = *(VarClassMgr **)(a1 + 24);
  if (v30)
    VarClassMgr::saveVarClassMgr(v30, (DFile *)v14, (DFileChecksums *)v35, v13, a5);
  PelMgr::savePelMgr(*(PelMgr **)(a1 + 56), (DFile *)v14, (DFileChecksums *)v35, v13, a5, v22);
  PicMgr::savePicMgr(*(PicMgr **)(a1 + 48), (DFile *)v14, (DFileChecksums *)v35, v13, a5);
  GenoneClassTree::saveGenoneClassTree(*(GenoneClassTree **)(a1 + 64), (DFile *)v14, (DFileChecksums *)v35, v13, a5);
  if (!v13)
  {
    if (*(_DWORD *)(a1 + 232))
      User::saveChecksums((User *)a1, (DFile *)v14, (DFileChecksums *)v35, a5);
    v31 = OpenAndWriteMrecHeader((uint64_t)v14, 0x63u, 0, "MRUCH!? ", 19, 2);
    v33.i32[0] = 0;
    writeObject((uint64_t)v31, (uint64_t)v35, &v33);
    writeObjectChecksum((uint64_t)v31, v33.i32);
    if (v31)
    {
      (**(void (***)(DgnStream *))v31)(v31);
      MemChunkFree(v31, 0);
    }
  }
  v33 = 0u;
  v34 = 0u;
  SnapTime::recordTime((SnapTime *)&v33, 1, 1, 1, 1);
  v33 = vsubq_s64(v33, v38);
  v34 = vsubq_s64(v34, v39);
  v32 = (FileHistory *)(a1 + 152);
  FileHistory::addEntryWithElapsedTime(v32, " saveUser time: ", (const SnapTime *)&v33);
  FileHistory::saveFileHistory(v32, (DFile *)v14, v13);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v36, 0);
  *a3 = 0;
  DFileChecksums::~DFileChecksums((DFileChecksums *)v35);
  DFileOwner::~DFileOwner((DFileOwner *)v36);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v37);
}

void sub_209871AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  DFileChecksums::~DFileChecksums((DFileChecksums *)&a13);
  DFileOwner::~DFileOwner((DFileOwner *)&a16);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&a21);
  _Unwind_Resume(a1);
}

void User::saveChecksums(User *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v7;
  uint64_t CurrentSubDirComponents;
  int v9;

  v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x12u, a4, "MRCXM!? ", 15, 3);
  v9 = 0;
  writeObject((uint64_t)v7, (int *)this + 54, &v9);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 224, &v9);
  writeObjectChecksum((uint64_t)v7, &v9);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x12u, v9);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
}

uint64_t *User::newPelScorer(User *this, int a2, double a3, BOOL a4, double a5, char *a6, char *a7, int a8, int a9)
{
  uint64_t v16;
  BOOL v17;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;

  v27 = 0;
  v28 = 0;
  v25 = 0;
  v26 = 0;
  v16 = *(unsigned int *)(*((_QWORD *)this + 7) + 620);
  if ((_DWORD)v16)
    v17 = a9 == 0;
  else
    v17 = 1;
  if (!v17)
  {
    v29 = 0;
    v20 = realloc_array(0, &v29, 4 * v16, 0, 0, 1);
    v27 = v29;
    LODWORD(v28) = v16;
    HIDWORD(v28) = v20 >> 2;
    DgnSplitStringParValueIntoUintArray((char)"(Search|PrefiltererBuild)HierScorerBeamList", (int)"recognizer configuration", (unsigned __int8 *)a6, 3000, 0, 0xBB8u, (uint64_t *)&v27);
    v21 = *(unsigned int *)(*((_QWORD *)this + 7) + 620);
    if (HIDWORD(v26) < v21)
    {
      v29 = 0;
      HIDWORD(v26) = realloc_array(v25, &v29, 4 * v21, 4 * v26, 4 * v26, 1) >> 2;
      v25 = v29;
    }
    LODWORD(v26) = v21;
    DgnSplitStringParValueIntoUintArray((char)"(Search|PrefiltererBuild)HierScorerCutoffRatioList", (int)"recognizer configuration", (unsigned __int8 *)a7, 10, 0, 0x64u, (uint64_t *)&v25);
    LODWORD(v16) = *(_DWORD *)(*((_QWORD *)this + 7) + 620);
  }
  if ((_DWORD)v16)
    v22 = a9 == 0;
  else
    v22 = 1;
  if (v22)
  {
    v23 = MemChunkAlloc(0x298uLL, 0);
    OnDemandPelScorer::OnDemandPelScorer((OnDemandPelScorer *)v23, *((const PelMgr **)this + 7), *((const GenoneClassTree **)this + 8), *((const VarClassMgr **)this + 3), *((const FmpeMgr **)this + 4), *((const NeuralNet **)this + 46), *((const Imelda **)this + 2), a2, a3, a5, a4);
  }
  else
  {
    v23 = MemChunkAlloc(0x320uLL, 0);
    HScorer::HScorer((uint64_t)v23, *((const PelMgr **)this + 7), *((const GenoneClassTree **)this + 8), *((const VarClassMgr **)this + 3), *((const FmpeMgr **)this + 4), *((const NeuralNet **)this + 46), *((const Imelda **)this + 2), a2, a3, a5, a4, &v27, &v25, a8);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return v23;
}

void sub_209871DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

void User::decrementAdapterCount(User *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  v9 = *((_DWORD *)this + 51);
  if (!v9)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 1488, (uint64_t)"user/user", 3, (uint64_t)&errStr_user_user_E_NO_ADAPTER, a7, a8, *((_WORD *)this + 92));
    v9 = *((_DWORD *)this + 51);
  }
  *((_DWORD *)this + 51) = v9 - 1;
}

_QWORD *DgnArray<SigProcDescriptor>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 344 * v2 - 344;
    do
    {
      SigProcDescriptor::~SigProcDescriptor((SigProcDescriptor *)(*(_QWORD *)a1 + v3));
      v3 -= 344;
    }
    while (v3 != -344);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnArray<BandwidthTransform>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 80 * v2 - 72;
    do
    {
      LinearTransform::~LinearTransform((LinearTransform *)(*(_QWORD *)a1 + v3));
      v3 -= 80;
    }
    while (v3 != -72);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void VarClassMgr::~VarClassMgr(VarClassMgr *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnArray<LinearTransform>::releaseAll((uint64_t)this + 16);
}

void PicMgr::~PicMgr(PicMgr *this)
{
  BitArray::~BitArray((PicMgr *)((char *)this + 216));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 200);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 184);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 168);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 152);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);
}

_QWORD *TAllocator::clear(TAllocator *this)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)*((_QWORD *)this + 4);
  if (result)
  {
    do
    {
      v3 = (_QWORD *)*result;
      MEMORY[0x20BD14990]();
      result = v3;
    }
    while (v3);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  return result;
}

void TAllocator::TAllocator(TAllocator *this, uint64_t a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
}

_QWORD *TAllocator::allocate(TAllocator *this, uint64_t a2)
{
  unint64_t v3;
  _QWORD *result;
  char *v5;
  unint64_t v6;
  _QWORD *v7;

  v3 = (a2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v5 = (char *)this + 16;
  result = (_QWORD *)*((_QWORD *)this + 2);
  if (*((_QWORD *)v5 + 1) - (_QWORD)result < v3)
  {
    if (v3 + 8 <= *((_QWORD *)this + 1))
      v6 = *((_QWORD *)this + 1);
    else
      v6 = v3 + 8;
    *(_QWORD *)this += v6;
    v7 = (_QWORD *)operator new[]();
    *v7 = *((_QWORD *)this + 4);
    result = v7 + 1;
    *((_QWORD *)this + 3) = (char *)v7 + v6;
    *((_QWORD *)this + 4) = v7;
  }
  *((_QWORD *)this + 2) = (char *)result + v3;
  return result;
}

uint64_t StartupConfidenceParamSpecMgr(void)
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;

  v68 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v68, (uint64_t)"ConfidenceEnableWordLevel", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceEnableWordLevelBoolHistory);
  v67 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v67, (uint64_t)"ConfidenceEnableUttLevel", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceEnableUttLevelBoolHistory);
  v65 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v65, (uint64_t)"ConfidenceEnableForAllNBest", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceEnableForAllNBestBoolHistory);
  v64 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v64, (uint64_t)"ConfidenceUttNBestHighThresh", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttNBestHighThreshDoubleHistory);
  v63 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v63, (uint64_t)"ConfidenceUttNBestLowThresh", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttNBestLowThreshDoubleHistory);
  v73 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v73, (uint64_t)"ConfidenceWordProbConstantTerm", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbConstantTermDoubleHistory);
  v61 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v61, (uint64_t)"ConfidenceUttProbConstantTerm", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttProbConstantTermDoubleHistory);
  v66 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v66, (uint64_t)"ConfidenceUttProbTotalLMScoreFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttProbTotalLMScoreFactorDoubleHistory);
  v59 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v59, (uint64_t)"ConfidenceUttProbAverageLMScoreFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttProbAverageLMScoreFactorDoubleHistory);
  v62 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v62, (uint64_t)"ConfidenceUttProbUttAverageAMinusBScoreFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttProbUttAverageAMinusBScoreFactorDoubleHistory);
  v60 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v60, (uint64_t)"ConfidenceUttProbNBestWordAverageFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttProbNBestWordAverageFactorDoubleHistory);
  v58 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v58, (uint64_t)"ConfidenceUttProbNBestMaxFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttProbNBestMaxFactorDoubleHistory);
  v56 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v56, (uint64_t)"ConfidenceUttProbNBestMinFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttProbNBestMinFactorDoubleHistory);
  v52 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v52, (uint64_t)"ConfidenceUttProbNBestHighCountFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttProbNBestHighCountFactorDoubleHistory);
  v50 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v50, (uint64_t)"ConfidenceUttProbNBestLowCountFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttProbNBestLowCountFactorDoubleHistory);
  v48 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v48, (uint64_t)"ConfidenceUttProbAverageActiveNodeCountFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttProbAverageActiveNodeCountFactorDoubleHistory);
  v49 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v49, (uint64_t)"ConfidenceUttProbMaxWordsEndingFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttProbMaxWordsEndingFactorDoubleHistory);
  v46 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v46, (uint64_t)"ConfidenceUttProbAverageDurationFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttProbAverageDurationFactorDoubleHistory);
  v47 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v47, (uint64_t)"ConfidenceUttProbLogWordCountFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceUttProbLogWordCountFactorDoubleHistory);
  v70 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v70, (uint64_t)"ConfidenceWordProbLeftContextIndicator2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbLeftContextIndicator2FactorDoubleHistory);
  v69 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v69, (uint64_t)"ConfidenceWordProbLeftContextIndicator1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbLeftContextIndicator1FactorDoubleHistory);
  v72 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v72, (uint64_t)"ConfidenceWordProbRightContextIndicator1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbRightContextIndicator1FactorDoubleHistory);
  v71 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v71, (uint64_t)"ConfidenceWordProbRightContextIndicator2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbRightContextIndicator2FactorDoubleHistory);
  v57 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v57, (uint64_t)"ConfidenceWordProbDurationFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbDurationFactorDoubleHistory);
  v55 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v55, (uint64_t)"ConfidenceWordProbDurationLCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbDurationLCntx2FactorDoubleHistory);
  v54 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v54, (uint64_t)"ConfidenceWordProbDurationLCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbDurationLCntx1FactorDoubleHistory);
  v53 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v53, (uint64_t)"ConfidenceWordProbDurationRCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbDurationRCntx1FactorDoubleHistory);
  v51 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v51, (uint64_t)"ConfidenceWordProbDurationRCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbDurationRCntx2FactorDoubleHistory);
  v45 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v45, (uint64_t)"ConfidenceWordProbAverageActiveNodeCountFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageActiveNodeCountFactorDoubleHistory);
  v44 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v44, (uint64_t)"ConfidenceWordProbAverageActiveNodeCountLCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageActiveNodeCountLCntx2FactorDoubleHistory);
  v43 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v43, (uint64_t)"ConfidenceWordProbAverageActiveNodeCountLCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageActiveNodeCountLCntx1FactorDoubleHistory);
  v42 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v42, (uint64_t)"ConfidenceWordProbAverageActiveNodeCountRCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageActiveNodeCountRCntx1FactorDoubleHistory);
  v41 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v41, (uint64_t)"ConfidenceWordProbAverageActiveNodeCountRCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageActiveNodeCountRCntx2FactorDoubleHistory);
  v27 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v27, (uint64_t)"ConfidenceWordProbAverageAMinusBScoreFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageAMinusBScoreFactorDoubleHistory);
  v25 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v25, (uint64_t)"ConfidenceWordProbAverageAMinusBScoreLCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageAMinusBScoreLCntx2FactorDoubleHistory);
  v23 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v23, (uint64_t)"ConfidenceWordProbAverageAMinusBScoreLCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageAMinusBScoreLCntx1FactorDoubleHistory);
  v22 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v22, (uint64_t)"ConfidenceWordProbAverageAMinusBScoreRCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageAMinusBScoreRCntx1FactorDoubleHistory);
  v21 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v21, (uint64_t)"ConfidenceWordProbAverageAMinusBScoreRCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageAMinusBScoreRCntx2FactorDoubleHistory);
  v40 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v40, (uint64_t)"ConfidenceWordProbLMScoreFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbLMScoreFactorDoubleHistory);
  v39 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v39, (uint64_t)"ConfidenceWordProbLMScoreLCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbLMScoreLCntx2FactorDoubleHistory);
  v36 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v36, (uint64_t)"ConfidenceWordProbLMScoreLCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbLMScoreLCntx1FactorDoubleHistory);
  v35 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v35, (uint64_t)"ConfidenceWordProbLMScoreRCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbLMScoreRCntx1FactorDoubleHistory);
  v32 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v32, (uint64_t)"ConfidenceWordProbLMScoreRCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbLMScoreRCntx2FactorDoubleHistory);
  v38 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v38, (uint64_t)"ConfidenceWordProbNBestScoreFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbNBestScoreFactorDoubleHistory);
  v37 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v37, (uint64_t)"ConfidenceWordProbNBestScoreLCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbNBestScoreLCntx2FactorDoubleHistory);
  v34 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v34, (uint64_t)"ConfidenceWordProbNBestScoreLCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbNBestScoreLCntx1FactorDoubleHistory);
  v33 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v33, (uint64_t)"ConfidenceWordProbNBestScoreRCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbNBestScoreRCntx1FactorDoubleHistory);
  v30 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v30, (uint64_t)"ConfidenceWordProbNBestScoreRCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbNBestScoreRCntx2FactorDoubleHistory);
  v31 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v31, (uint64_t)"ConfidenceWordProbWordsEndingCountFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbWordsEndingCountFactorDoubleHistory);
  v29 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v29, (uint64_t)"ConfidenceWordProbWordsEndingCountLCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbWordsEndingCountLCntx2FactorDoubleHistory);
  v28 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v28, (uint64_t)"ConfidenceWordProbWordsEndingCountLCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbWordsEndingCountLCntx1FactorDoubleHistory);
  v26 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v26, (uint64_t)"ConfidenceWordProbWordsEndingCountRCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbWordsEndingCountRCntx1FactorDoubleHistory);
  v24 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v24, (uint64_t)"ConfidenceWordProbWordsEndingCountRCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbWordsEndingCountRCntx2FactorDoubleHistory);
  v20 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v20, (uint64_t)"ConfidenceWordProbAverageBestScoreFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageBestScoreFactorDoubleHistory);
  v19 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v19, (uint64_t)"ConfidenceWordProbAverageBestScoreLCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageBestScoreLCntx2FactorDoubleHistory);
  v18 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v18, (uint64_t)"ConfidenceWordProbAverageBestScoreLCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageBestScoreLCntx1FactorDoubleHistory);
  v17 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v17, (uint64_t)"ConfidenceWordProbAverageBestScoreRCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageBestScoreRCntx1FactorDoubleHistory);
  v16 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v16, (uint64_t)"ConfidenceWordProbAverageBestScoreRCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageBestScoreRCntx2FactorDoubleHistory);
  v10 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v10, (uint64_t)"ConfidenceWordProbAcousticScoreFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAcousticScoreFactorDoubleHistory);
  v0 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v0, (uint64_t)"ConfidenceWordProbAcousticScoreLCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAcousticScoreLCntx2FactorDoubleHistory);
  v1 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v1, (uint64_t)"ConfidenceWordProbAcousticScoreLCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAcousticScoreLCntx1FactorDoubleHistory);
  v2 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v2, (uint64_t)"ConfidenceWordProbAcousticScoreRCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAcousticScoreRCntx1FactorDoubleHistory);
  v3 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v3, (uint64_t)"ConfidenceWordProbAcousticScoreRCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAcousticScoreRCntx2FactorDoubleHistory);
  v4 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v4, (uint64_t)"ConfidenceWordProbAverageAcousticScoreFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageAcousticScoreFactorDoubleHistory);
  v5 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v5, (uint64_t)"ConfidenceWordProbAverageAcousticScoreLCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageAcousticScoreLCntx2FactorDoubleHistory);
  v6 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v6, (uint64_t)"ConfidenceWordProbAverageAcousticScoreLCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageAcousticScoreLCntx1FactorDoubleHistory);
  v7 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v7, (uint64_t)"ConfidenceWordProbAverageAcousticScoreRCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageAcousticScoreRCntx1FactorDoubleHistory);
  v8 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v8, (uint64_t)"ConfidenceWordProbAverageAcousticScoreRCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbAverageAcousticScoreRCntx2FactorDoubleHistory);
  v15 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v15, (uint64_t)"ConfidenceWordProbLogWordCountFactor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbLogWordCountFactorDoubleHistory);
  v14 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v14, (uint64_t)"ConfidenceWordProbLogWordCountLCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbLogWordCountLCntx2FactorDoubleHistory);
  v13 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v13, (uint64_t)"ConfidenceWordProbLogWordCountLCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbLogWordCountLCntx1FactorDoubleHistory);
  v12 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v12, (uint64_t)"ConfidenceWordProbLogWordCountRCntx1Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbLogWordCountRCntx1FactorDoubleHistory);
  v11 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v11, (uint64_t)"ConfidenceWordProbLogWordCountRCntx2Factor", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sConfidenceWordProbLogWordCountRCntx2FactorDoubleHistory);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v68);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v67);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v65);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v64);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v63);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v48);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v46);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v59);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v61);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v47);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v49);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v52);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v50);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v58);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v56);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v60);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v66);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v62);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v10);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v2);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v3);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v27);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v23);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v25);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v22);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v21);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v4);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v6);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v5);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v7);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v8);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v45);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v43);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v44);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v42);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v41);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v20);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v18);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v19);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v17);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v16);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v73);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v57);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v54);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v55);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v53);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v51);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v40);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v36);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v39);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v35);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v32);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v69);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v70);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v15);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v13);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v14);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v12);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v11);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v38);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v34);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v37);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v33);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v30);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v72);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v71);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v31);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v28);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v29);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v26);
  ParamSpecMgr::addParam(qword_253DF2838, (ParamSpec *)v24);
  return ParamSpecMgr::sortParams((ParamSpecMgr *)qword_253DF2838);
}

_DWORD *ConfidenceParamSet::ConfidenceParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(_QWORD *)a1 = &off_24C2161C0;
  ConfidenceParamSet::setDefaults((ConfidenceParamSet *)a1, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

void sub_20987318C(_Unwind_Exception *a1)
{
  DgnString *v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t ConfidenceParamSet::ConfidenceParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)a1 = &off_24C2161C0;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  return a1;
}

void ConfidenceParamSet::setDefaults(ConfidenceParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;

  *((_BYTE *)this + 40) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2838, 1, 0, 0, a5, a6, a7, a8);
  *((_BYTE *)this + 41) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2838, 2, 0, 0, v9, v10, v11, v12);
  *((_BYTE *)this + 42) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_253DF2838, 3, 0, 0, v13, v14, v15, v16);
  *((double *)this + 6) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 4, 0, 0, v17, v18, v19, v20);
  *((double *)this + 7) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 5, 0, 0, v21, v22, v23, v24);
  *((double *)this + 8) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 6, 0, 0, v25, v26, v27, v28);
  *((double *)this + 9) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 7, 0, 0, v29, v30, v31, v32);
  *((double *)this + 10) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 8, 0, 0, v33, v34, v35, v36);
  *((double *)this + 11) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 9, 0, 0, v37, v38, v39, v40);
  *((double *)this + 12) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 10, 0, 0, v41, v42, v43, v44);
  *((double *)this + 13) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 11, 0, 0, v45, v46, v47, v48);
  *((double *)this + 14) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 12, 0, 0, v49, v50, v51, v52);
  *((double *)this + 15) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 13, 0, 0, v53, v54, v55, v56);
  *((double *)this + 16) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 14, 0, 0, v57, v58, v59, v60);
  *((double *)this + 17) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 15, 0, 0, v61, v62, v63, v64);
  *((double *)this + 18) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 16, 0, 0, v65, v66, v67, v68);
  *((double *)this + 19) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 17, 0, 0, v69, v70, v71, v72);
  *((double *)this + 20) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 18, 0, 0, v73, v74, v75, v76);
  *((double *)this + 21) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 19, 0, 0, v77, v78, v79, v80);
  *((double *)this + 22) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 20, 0, 0, v81, v82, v83, v84);
  *((double *)this + 23) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 21, 0, 0, v85, v86, v87, v88);
  *((double *)this + 24) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 22, 0, 0, v89, v90, v91, v92);
  *((double *)this + 25) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 23, 0, 0, v93, v94, v95, v96);
  *((double *)this + 26) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 24, 0, 0, v97, v98, v99, v100);
  *((double *)this + 27) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 25, 0, 0, v101, v102, v103, v104);
  *((double *)this + 28) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 26, 0, 0, v105, v106, v107, v108);
  *((double *)this + 29) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 27, 0, 0, v109, v110, v111, v112);
  *((double *)this + 30) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 28, 0, 0, v113, v114, v115, v116);
  *((double *)this + 31) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 29, 0, 0, v117, v118, v119, v120);
  *((double *)this + 32) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 30, 0, 0, v121, v122, v123, v124);
  *((double *)this + 33) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 31, 0, 0, v125, v126, v127, v128);
  *((double *)this + 34) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 32, 0, 0, v129, v130, v131, v132);
  *((double *)this + 35) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 33, 0, 0, v133, v134, v135, v136);
  *((double *)this + 36) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 34, 0, 0, v137, v138, v139, v140);
  *((double *)this + 37) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 35, 0, 0, v141, v142, v143, v144);
  *((double *)this + 38) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 36, 0, 0, v145, v146, v147, v148);
  *((double *)this + 39) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 37, 0, 0, v149, v150, v151, v152);
  *((double *)this + 40) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 38, 0, 0, v153, v154, v155, v156);
  *((double *)this + 41) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 39, 0, 0, v157, v158, v159, v160);
  *((double *)this + 42) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 40, 0, 0, v161, v162, v163, v164);
  *((double *)this + 43) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 41, 0, 0, v165, v166, v167, v168);
  *((double *)this + 44) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 42, 0, 0, v169, v170, v171, v172);
  *((double *)this + 45) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 43, 0, 0, v173, v174, v175, v176);
  *((double *)this + 46) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 44, 0, 0, v177, v178, v179, v180);
  *((double *)this + 47) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 45, 0, 0, v181, v182, v183, v184);
  *((double *)this + 48) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 46, 0, 0, v185, v186, v187, v188);
  *((double *)this + 49) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 47, 0, 0, v189, v190, v191, v192);
  *((double *)this + 50) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 48, 0, 0, v193, v194, v195, v196);
  *((double *)this + 51) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 49, 0, 0, v197, v198, v199, v200);
  *((double *)this + 52) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 50, 0, 0, v201, v202, v203, v204);
  *((double *)this + 53) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 51, 0, 0, v205, v206, v207, v208);
  *((double *)this + 54) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 52, 0, 0, v209, v210, v211, v212);
  *((double *)this + 55) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 53, 0, 0, v213, v214, v215, v216);
  *((double *)this + 56) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 54, 0, 0, v217, v218, v219, v220);
  *((double *)this + 57) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 55, 0, 0, v221, v222, v223, v224);
  *((double *)this + 58) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 56, 0, 0, v225, v226, v227, v228);
  *((double *)this + 59) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 57, 0, 0, v229, v230, v231, v232);
  *((double *)this + 60) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 58, 0, 0, v233, v234, v235, v236);
  *((double *)this + 61) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 59, 0, 0, v237, v238, v239, v240);
  *((double *)this + 62) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 60, 0, 0, v241, v242, v243, v244);
  *((double *)this + 63) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 61, 0, 0, v245, v246, v247, v248);
  *((double *)this + 64) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 62, 0, 0, v249, v250, v251, v252);
  *((double *)this + 65) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 63, 0, 0, v253, v254, v255, v256);
  *((double *)this + 66) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 64, 0, 0, v257, v258, v259, v260);
  *((double *)this + 67) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 65, 0, 0, v261, v262, v263, v264);
  *((double *)this + 68) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 66, 0, 0, v265, v266, v267, v268);
  *((double *)this + 69) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 67, 0, 0, v269, v270, v271, v272);
  *((double *)this + 70) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 68, 0, 0, v273, v274, v275, v276);
  *((double *)this + 71) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 69, 0, 0, v277, v278, v279, v280);
  *((double *)this + 72) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 70, 0, 0, v281, v282, v283, v284);
  *((double *)this + 73) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 71, 0, 0, v285, v286, v287, v288);
  *((double *)this + 74) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 72, 0, 0, v289, v290, v291, v292);
  *((double *)this + 75) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_253DF2838, 73, 0, 0, v293, v294, v295, v296);
}

uint64_t ConfidenceParamSet::sizeObject(uint64_t a1, int a2)
{
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2 != 3;
  v4 = sizeObject(a1 + 8);
  v5 = 560;
  if (a2 == 3)
    v5 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    return v4 + 16 * v3;
  else
    return ((a2 != 3) | (2 * (a2 != 3)) | v5) + v4 + 16 * v3;
}

BOOL ConfidenceParamSet::getBoolParameter(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  ParamSpecMgr *v11;
  int v12;
  const void *ParamByParamId;

  switch(a2)
  {
    case 1:
      if ((_DWORD)a3 == 1)
      {
        v11 = (ParamSpecMgr *)qword_253DF2838;
        v12 = 1;
        goto LABEL_89;
      }
      if ((_DWORD)a3)
        goto LABEL_85;
      v8 = a1[40];
      return v8 != 0;
    case 2:
      if ((_DWORD)a3 == 1)
      {
        v11 = (ParamSpecMgr *)qword_253DF2838;
        v12 = 2;
        goto LABEL_89;
      }
      if ((_DWORD)a3)
        goto LABEL_85;
      v8 = a1[41];
      return v8 != 0;
    case 3:
      if ((_DWORD)a3 == 1)
      {
        v11 = (ParamSpecMgr *)qword_253DF2838;
        v12 = 3;
LABEL_89:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
        return v8 != 0;
      }
      if (!(_DWORD)a3)
      {
        v8 = a1[42];
        return v8 != 0;
      }
LABEL_85:
      throwWrongQueryMode(a3, (uint64_t)"BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
    case 4:
      v9 = 4;
      goto LABEL_82;
    case 5:
      v9 = 5;
      goto LABEL_82;
    case 6:
      v9 = 6;
      goto LABEL_82;
    case 7:
      v9 = 7;
      goto LABEL_82;
    case 8:
      v9 = 8;
      goto LABEL_82;
    case 9:
      v9 = 9;
      goto LABEL_82;
    case 10:
      v9 = 10;
      goto LABEL_82;
    case 11:
      v9 = 11;
      goto LABEL_82;
    case 12:
      v9 = 12;
      goto LABEL_82;
    case 13:
      v9 = 13;
      goto LABEL_82;
    case 14:
      v9 = 14;
      goto LABEL_82;
    case 15:
      v9 = 15;
      goto LABEL_82;
    case 16:
      v9 = 16;
      goto LABEL_82;
    case 17:
      v9 = 17;
      goto LABEL_82;
    case 18:
      v9 = 18;
      goto LABEL_82;
    case 19:
      v9 = 19;
      goto LABEL_82;
    case 20:
      v9 = 20;
      goto LABEL_82;
    case 21:
      v9 = 21;
      goto LABEL_82;
    case 22:
      v9 = 22;
      goto LABEL_82;
    case 23:
      v9 = 23;
      goto LABEL_82;
    case 24:
      v9 = 24;
      goto LABEL_82;
    case 25:
      v9 = 25;
      goto LABEL_82;
    case 26:
      v9 = 26;
      goto LABEL_82;
    case 27:
      v9 = 27;
      goto LABEL_82;
    case 28:
      v9 = 28;
      goto LABEL_82;
    case 29:
      v9 = 29;
      goto LABEL_82;
    case 30:
      v9 = 30;
      goto LABEL_82;
    case 31:
      v9 = 31;
      goto LABEL_82;
    case 32:
      v9 = 32;
      goto LABEL_82;
    case 33:
      v9 = 33;
      goto LABEL_82;
    case 34:
      v9 = 34;
      goto LABEL_82;
    case 35:
      v9 = 35;
      goto LABEL_82;
    case 36:
      v9 = 36;
      goto LABEL_82;
    case 37:
      v9 = 37;
      goto LABEL_82;
    case 38:
      v9 = 38;
      goto LABEL_82;
    case 39:
      v9 = 39;
      goto LABEL_82;
    case 40:
      v9 = 40;
      goto LABEL_82;
    case 41:
      v9 = 41;
      goto LABEL_82;
    case 42:
      v9 = 42;
      goto LABEL_82;
    case 43:
      v9 = 43;
      goto LABEL_82;
    case 44:
      v9 = 44;
      goto LABEL_82;
    case 45:
      v9 = 45;
      goto LABEL_82;
    case 46:
      v9 = 46;
      goto LABEL_82;
    case 47:
      v9 = 47;
      goto LABEL_82;
    case 48:
      v9 = 48;
      goto LABEL_82;
    case 49:
      v9 = 49;
      goto LABEL_82;
    case 50:
      v9 = 50;
      goto LABEL_82;
    case 51:
      v9 = 51;
      goto LABEL_82;
    case 52:
      v9 = 52;
      goto LABEL_82;
    case 53:
      v9 = 53;
      goto LABEL_82;
    case 54:
      v9 = 54;
      goto LABEL_82;
    case 55:
      v9 = 55;
      goto LABEL_82;
    case 56:
      v9 = 56;
      goto LABEL_82;
    case 57:
      v9 = 57;
      goto LABEL_82;
    case 58:
      v9 = 58;
      goto LABEL_82;
    case 59:
      v9 = 59;
      goto LABEL_82;
    case 60:
      v9 = 60;
      goto LABEL_82;
    case 61:
      v9 = 61;
      goto LABEL_82;
    case 62:
      v9 = 62;
      goto LABEL_82;
    case 63:
      v9 = 63;
      goto LABEL_82;
    case 64:
      v9 = 64;
      goto LABEL_82;
    case 65:
      v9 = 65;
      goto LABEL_82;
    case 66:
      v9 = 66;
      goto LABEL_82;
    case 67:
      v9 = 67;
      goto LABEL_82;
    case 68:
      v9 = 68;
      goto LABEL_82;
    case 69:
      v9 = 69;
      goto LABEL_82;
    case 70:
      v9 = 70;
      goto LABEL_82;
    case 71:
      v9 = 71;
      goto LABEL_82;
    case 72:
      v9 = 72;
      goto LABEL_82;
    case 73:
      v9 = 73;
LABEL_82:
      throwWrongTypeForParamId(v9, "double", "BOOL", a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t ConfidenceParamSet::getIntParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_76;
    case 2:
      v8 = "BOOL";
      v9 = 2;
      goto LABEL_76;
    case 3:
      v8 = "BOOL";
      v9 = 3;
      goto LABEL_76;
    case 4:
      v8 = "double";
      v9 = 4;
      goto LABEL_76;
    case 5:
      v8 = "double";
      v9 = 5;
      goto LABEL_76;
    case 6:
      v8 = "double";
      v9 = 6;
      goto LABEL_76;
    case 7:
      v8 = "double";
      v9 = 7;
      goto LABEL_76;
    case 8:
      v8 = "double";
      v9 = 8;
      goto LABEL_76;
    case 9:
      v8 = "double";
      v9 = 9;
      goto LABEL_76;
    case 10:
      v8 = "double";
      v9 = 10;
      goto LABEL_76;
    case 11:
      v8 = "double";
      v9 = 11;
      goto LABEL_76;
    case 12:
      v8 = "double";
      v9 = 12;
      goto LABEL_76;
    case 13:
      v8 = "double";
      v9 = 13;
      goto LABEL_76;
    case 14:
      v8 = "double";
      v9 = 14;
      goto LABEL_76;
    case 15:
      v8 = "double";
      v9 = 15;
      goto LABEL_76;
    case 16:
      v8 = "double";
      v9 = 16;
      goto LABEL_76;
    case 17:
      v8 = "double";
      v9 = 17;
      goto LABEL_76;
    case 18:
      v8 = "double";
      v9 = 18;
      goto LABEL_76;
    case 19:
      v8 = "double";
      v9 = 19;
      goto LABEL_76;
    case 20:
      v8 = "double";
      v9 = 20;
      goto LABEL_76;
    case 21:
      v8 = "double";
      v9 = 21;
      goto LABEL_76;
    case 22:
      v8 = "double";
      v9 = 22;
      goto LABEL_76;
    case 23:
      v8 = "double";
      v9 = 23;
      goto LABEL_76;
    case 24:
      v8 = "double";
      v9 = 24;
      goto LABEL_76;
    case 25:
      v8 = "double";
      v9 = 25;
      goto LABEL_76;
    case 26:
      v8 = "double";
      v9 = 26;
      goto LABEL_76;
    case 27:
      v8 = "double";
      v9 = 27;
      goto LABEL_76;
    case 28:
      v8 = "double";
      v9 = 28;
      goto LABEL_76;
    case 29:
      v8 = "double";
      v9 = 29;
      goto LABEL_76;
    case 30:
      v8 = "double";
      v9 = 30;
      goto LABEL_76;
    case 31:
      v8 = "double";
      v9 = 31;
      goto LABEL_76;
    case 32:
      v8 = "double";
      v9 = 32;
      goto LABEL_76;
    case 33:
      v8 = "double";
      v9 = 33;
      goto LABEL_76;
    case 34:
      v8 = "double";
      v9 = 34;
      goto LABEL_76;
    case 35:
      v8 = "double";
      v9 = 35;
      goto LABEL_76;
    case 36:
      v8 = "double";
      v9 = 36;
      goto LABEL_76;
    case 37:
      v8 = "double";
      v9 = 37;
      goto LABEL_76;
    case 38:
      v8 = "double";
      v9 = 38;
      goto LABEL_76;
    case 39:
      v8 = "double";
      v9 = 39;
      goto LABEL_76;
    case 40:
      v8 = "double";
      v9 = 40;
      goto LABEL_76;
    case 41:
      v8 = "double";
      v9 = 41;
      goto LABEL_76;
    case 42:
      v8 = "double";
      v9 = 42;
      goto LABEL_76;
    case 43:
      v8 = "double";
      v9 = 43;
      goto LABEL_76;
    case 44:
      v8 = "double";
      v9 = 44;
      goto LABEL_76;
    case 45:
      v8 = "double";
      v9 = 45;
      goto LABEL_76;
    case 46:
      v8 = "double";
      v9 = 46;
      goto LABEL_76;
    case 47:
      v8 = "double";
      v9 = 47;
      goto LABEL_76;
    case 48:
      v8 = "double";
      v9 = 48;
      goto LABEL_76;
    case 49:
      v8 = "double";
      v9 = 49;
      goto LABEL_76;
    case 50:
      v8 = "double";
      v9 = 50;
      goto LABEL_76;
    case 51:
      v8 = "double";
      v9 = 51;
      goto LABEL_76;
    case 52:
      v8 = "double";
      v9 = 52;
      goto LABEL_76;
    case 53:
      v8 = "double";
      v9 = 53;
      goto LABEL_76;
    case 54:
      v8 = "double";
      v9 = 54;
      goto LABEL_76;
    case 55:
      v8 = "double";
      v9 = 55;
      goto LABEL_76;
    case 56:
      v8 = "double";
      v9 = 56;
      goto LABEL_76;
    case 57:
      v8 = "double";
      v9 = 57;
      goto LABEL_76;
    case 58:
      v8 = "double";
      v9 = 58;
      goto LABEL_76;
    case 59:
      v8 = "double";
      v9 = 59;
      goto LABEL_76;
    case 60:
      v8 = "double";
      v9 = 60;
      goto LABEL_76;
    case 61:
      v8 = "double";
      v9 = 61;
      goto LABEL_76;
    case 62:
      v8 = "double";
      v9 = 62;
      goto LABEL_76;
    case 63:
      v8 = "double";
      v9 = 63;
      goto LABEL_76;
    case 64:
      v8 = "double";
      v9 = 64;
      goto LABEL_76;
    case 65:
      v8 = "double";
      v9 = 65;
      goto LABEL_76;
    case 66:
      v8 = "double";
      v9 = 66;
      goto LABEL_76;
    case 67:
      v8 = "double";
      v9 = 67;
      goto LABEL_76;
    case 68:
      v8 = "double";
      v9 = 68;
      goto LABEL_76;
    case 69:
      v8 = "double";
      v9 = 69;
      goto LABEL_76;
    case 70:
      v8 = "double";
      v9 = 70;
      goto LABEL_76;
    case 71:
      v8 = "double";
      v9 = 71;
      goto LABEL_76;
    case 72:
      v8 = "double";
      v9 = 72;
      goto LABEL_76;
    case 73:
      v8 = "double";
      v9 = 73;
LABEL_76:
      throwWrongTypeForParamId(v9, v8, "int", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

double ConfidenceParamSet::getDoubleParameter(double *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  double result;
  ParamSpecMgr *v10;
  int v11;
  ParamSpecMgr *v12;
  int v13;
  ParamSpecMgr *v14;
  int v15;
  const void *ParamByParamId;
  const void *v17;
  const void *v18;

  switch(a2)
  {
    case 1:
      v8 = 1;
      goto LABEL_6;
    case 2:
      v8 = 2;
      goto LABEL_6;
    case 3:
      v8 = 3;
LABEL_6:
      throwWrongTypeForParamId(v8, "BOOL", "double", a4, a5, a6, a7, a8);
      return 0.0;
    case 4:
      switch((int)a3)
      {
        case 0:
          result = a1[6];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 4;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 4;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 4;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 5:
      switch((int)a3)
      {
        case 0:
          result = a1[7];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 5;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 5;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 5;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 6:
      switch((int)a3)
      {
        case 0:
          result = a1[8];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 6;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 6;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 6;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 7:
      switch((int)a3)
      {
        case 0:
          result = a1[9];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 7;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 7;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 7;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 8:
      switch((int)a3)
      {
        case 0:
          result = a1[10];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 8;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 8;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 8;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 9:
      switch((int)a3)
      {
        case 0:
          result = a1[11];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 9;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 9;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 9;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 10:
      switch((int)a3)
      {
        case 0:
          result = a1[12];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 10;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 10;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 10;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 11:
      switch((int)a3)
      {
        case 0:
          result = a1[13];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 11;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 11;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 11;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 12:
      switch((int)a3)
      {
        case 0:
          result = a1[14];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 12;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 12;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 12;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 13:
      switch((int)a3)
      {
        case 0:
          result = a1[15];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 13;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 13;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 13;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 14:
      switch((int)a3)
      {
        case 0:
          result = a1[16];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 14;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 14;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 14;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 15:
      switch((int)a3)
      {
        case 0:
          result = a1[17];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 15;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 15;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 15;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 16:
      switch((int)a3)
      {
        case 0:
          result = a1[18];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 16;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 16;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 16;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 17:
      switch((int)a3)
      {
        case 0:
          result = a1[19];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 17;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 17;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 17;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 18:
      switch((int)a3)
      {
        case 0:
          result = a1[20];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 18;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 18;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 18;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 19:
      switch((int)a3)
      {
        case 0:
          result = a1[21];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 19;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 19;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 19;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 20:
      switch((int)a3)
      {
        case 0:
          result = a1[22];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 20;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 20;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 20;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 21:
      switch((int)a3)
      {
        case 0:
          result = a1[23];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 21;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 21;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 21;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 22:
      switch((int)a3)
      {
        case 0:
          result = a1[24];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 22;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 22;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 22;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 23:
      switch((int)a3)
      {
        case 0:
          result = a1[25];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 23;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 23;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 23;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 24:
      switch((int)a3)
      {
        case 0:
          result = a1[26];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 24;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 24;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 24;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 25:
      switch((int)a3)
      {
        case 0:
          result = a1[27];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 25;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 25;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 25;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 26:
      switch((int)a3)
      {
        case 0:
          result = a1[28];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 26;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 26;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 26;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 27:
      switch((int)a3)
      {
        case 0:
          result = a1[29];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 27;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 27;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 27;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 28:
      switch((int)a3)
      {
        case 0:
          result = a1[30];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 28;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 28;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 28;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 29:
      switch((int)a3)
      {
        case 0:
          result = a1[31];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 29;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 29;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 29;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 30:
      switch((int)a3)
      {
        case 0:
          result = a1[32];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 30;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 30;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 30;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 31:
      switch((int)a3)
      {
        case 0:
          result = a1[33];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 31;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 31;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 31;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 32:
      switch((int)a3)
      {
        case 0:
          result = a1[34];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 32;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 32;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 32;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 33:
      switch((int)a3)
      {
        case 0:
          result = a1[35];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 33;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 33;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 33;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 34:
      switch((int)a3)
      {
        case 0:
          result = a1[36];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 34;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 34;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 34;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 35:
      switch((int)a3)
      {
        case 0:
          result = a1[37];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 35;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 35;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 35;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 36:
      switch((int)a3)
      {
        case 0:
          result = a1[38];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 36;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 36;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 36;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 37:
      switch((int)a3)
      {
        case 0:
          result = a1[39];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 37;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 37;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 37;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 38:
      switch((int)a3)
      {
        case 0:
          result = a1[40];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 38;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 38;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 38;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 39:
      switch((int)a3)
      {
        case 0:
          result = a1[41];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 39;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 39;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 39;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 40:
      switch((int)a3)
      {
        case 0:
          result = a1[42];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 40;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 40;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 40;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 41:
      switch((int)a3)
      {
        case 0:
          result = a1[43];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 41;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 41;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 41;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 42:
      switch((int)a3)
      {
        case 0:
          result = a1[44];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 42;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 42;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 42;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 43:
      switch((int)a3)
      {
        case 0:
          result = a1[45];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 43;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 43;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 43;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 44:
      switch((int)a3)
      {
        case 0:
          result = a1[46];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 44;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 44;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 44;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 45:
      switch((int)a3)
      {
        case 0:
          result = a1[47];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 45;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 45;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 45;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 46:
      switch((int)a3)
      {
        case 0:
          result = a1[48];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 46;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 46;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 46;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 47:
      switch((int)a3)
      {
        case 0:
          result = a1[49];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 47;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 47;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 47;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 48:
      switch((int)a3)
      {
        case 0:
          result = a1[50];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 48;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 48;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 48;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 49:
      switch((int)a3)
      {
        case 0:
          result = a1[51];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 49;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 49;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 49;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 50:
      switch((int)a3)
      {
        case 0:
          result = a1[52];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 50;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 50;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 50;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 51:
      switch((int)a3)
      {
        case 0:
          result = a1[53];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 51;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 51;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 51;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 52:
      switch((int)a3)
      {
        case 0:
          result = a1[54];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 52;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 52;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 52;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 53:
      switch((int)a3)
      {
        case 0:
          result = a1[55];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 53;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 53;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 53;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 54:
      switch((int)a3)
      {
        case 0:
          result = a1[56];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 54;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 54;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 54;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 55:
      switch((int)a3)
      {
        case 0:
          result = a1[57];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 55;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 55;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 55;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 56:
      switch((int)a3)
      {
        case 0:
          result = a1[58];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 56;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 56;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 56;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 57:
      switch((int)a3)
      {
        case 0:
          result = a1[59];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 57;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 57;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 57;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 58:
      switch((int)a3)
      {
        case 0:
          result = a1[60];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 58;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 58;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 58;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 59:
      switch((int)a3)
      {
        case 0:
          result = a1[61];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 59;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 59;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 59;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 60:
      switch((int)a3)
      {
        case 0:
          result = a1[62];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 60;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 60;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 60;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 61:
      switch((int)a3)
      {
        case 0:
          result = a1[63];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 61;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 61;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 61;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 62:
      switch((int)a3)
      {
        case 0:
          result = a1[64];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 62;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 62;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 62;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 63:
      switch((int)a3)
      {
        case 0:
          result = a1[65];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 63;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 63;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 63;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 64:
      switch((int)a3)
      {
        case 0:
          result = a1[66];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 64;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 64;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 64;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 65:
      switch((int)a3)
      {
        case 0:
          result = a1[67];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 65;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 65;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 65;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 66:
      switch((int)a3)
      {
        case 0:
          result = a1[68];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 66;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 66;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 66;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 67:
      switch((int)a3)
      {
        case 0:
          result = a1[69];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 67;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 67;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 67;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 68:
      switch((int)a3)
      {
        case 0:
          result = a1[70];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 68;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 68;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 68;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 69:
      switch((int)a3)
      {
        case 0:
          result = a1[71];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 69;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 69;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 69;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 70:
      switch((int)a3)
      {
        case 0:
          result = a1[72];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 70;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 70;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 70;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 71:
      switch((int)a3)
      {
        case 0:
          result = a1[73];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 71;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 71;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 71;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 72:
      switch((int)a3)
      {
        case 0:
          result = a1[74];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 72;
          goto LABEL_357;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 72;
          goto LABEL_359;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 72;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 73:
      switch((int)a3)
      {
        case 0:
          result = a1[75];
          break;
        case 1:
          v10 = (ParamSpecMgr *)qword_253DF2838;
          v11 = 73;
LABEL_357:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v10, v11, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          v12 = (ParamSpecMgr *)qword_253DF2838;
          v13 = 73;
LABEL_359:
          v17 = (const void *)ParamSpecMgr::getParamByParamId(v12, v13, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          v14 = (ParamSpecMgr *)qword_253DF2838;
          v15 = 73;
LABEL_361:
          v18 = (const void *)ParamSpecMgr::getParamByParamId(v14, v15, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_147:
          throwWrongQueryMode(a3, (uint64_t)"double", a3, a4, a5, a6, a7, a8);
          return 0.0;
      }
      return result;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      return 0.0;
  }
}

uint64_t ConfidenceParamSet::getStringParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_76;
    case 2:
      v8 = "BOOL";
      v9 = 2;
      goto LABEL_76;
    case 3:
      v8 = "BOOL";
      v9 = 3;
      goto LABEL_76;
    case 4:
      v8 = "double";
      v9 = 4;
      goto LABEL_76;
    case 5:
      v8 = "double";
      v9 = 5;
      goto LABEL_76;
    case 6:
      v8 = "double";
      v9 = 6;
      goto LABEL_76;
    case 7:
      v8 = "double";
      v9 = 7;
      goto LABEL_76;
    case 8:
      v8 = "double";
      v9 = 8;
      goto LABEL_76;
    case 9:
      v8 = "double";
      v9 = 9;
      goto LABEL_76;
    case 10:
      v8 = "double";
      v9 = 10;
      goto LABEL_76;
    case 11:
      v8 = "double";
      v9 = 11;
      goto LABEL_76;
    case 12:
      v8 = "double";
      v9 = 12;
      goto LABEL_76;
    case 13:
      v8 = "double";
      v9 = 13;
      goto LABEL_76;
    case 14:
      v8 = "double";
      v9 = 14;
      goto LABEL_76;
    case 15:
      v8 = "double";
      v9 = 15;
      goto LABEL_76;
    case 16:
      v8 = "double";
      v9 = 16;
      goto LABEL_76;
    case 17:
      v8 = "double";
      v9 = 17;
      goto LABEL_76;
    case 18:
      v8 = "double";
      v9 = 18;
      goto LABEL_76;
    case 19:
      v8 = "double";
      v9 = 19;
      goto LABEL_76;
    case 20:
      v8 = "double";
      v9 = 20;
      goto LABEL_76;
    case 21:
      v8 = "double";
      v9 = 21;
      goto LABEL_76;
    case 22:
      v8 = "double";
      v9 = 22;
      goto LABEL_76;
    case 23:
      v8 = "double";
      v9 = 23;
      goto LABEL_76;
    case 24:
      v8 = "double";
      v9 = 24;
      goto LABEL_76;
    case 25:
      v8 = "double";
      v9 = 25;
      goto LABEL_76;
    case 26:
      v8 = "double";
      v9 = 26;
      goto LABEL_76;
    case 27:
      v8 = "double";
      v9 = 27;
      goto LABEL_76;
    case 28:
      v8 = "double";
      v9 = 28;
      goto LABEL_76;
    case 29:
      v8 = "double";
      v9 = 29;
      goto LABEL_76;
    case 30:
      v8 = "double";
      v9 = 30;
      goto LABEL_76;
    case 31:
      v8 = "double";
      v9 = 31;
      goto LABEL_76;
    case 32:
      v8 = "double";
      v9 = 32;
      goto LABEL_76;
    case 33:
      v8 = "double";
      v9 = 33;
      goto LABEL_76;
    case 34:
      v8 = "double";
      v9 = 34;
      goto LABEL_76;
    case 35:
      v8 = "double";
      v9 = 35;
      goto LABEL_76;
    case 36:
      v8 = "double";
      v9 = 36;
      goto LABEL_76;
    case 37:
      v8 = "double";
      v9 = 37;
      goto LABEL_76;
    case 38:
      v8 = "double";
      v9 = 38;
      goto LABEL_76;
    case 39:
      v8 = "double";
      v9 = 39;
      goto LABEL_76;
    case 40:
      v8 = "double";
      v9 = 40;
      goto LABEL_76;
    case 41:
      v8 = "double";
      v9 = 41;
      goto LABEL_76;
    case 42:
      v8 = "double";
      v9 = 42;
      goto LABEL_76;
    case 43:
      v8 = "double";
      v9 = 43;
      goto LABEL_76;
    case 44:
      v8 = "double";
      v9 = 44;
      goto LABEL_76;
    case 45:
      v8 = "double";
      v9 = 45;
      goto LABEL_76;
    case 46:
      v8 = "double";
      v9 = 46;
      goto LABEL_76;
    case 47:
      v8 = "double";
      v9 = 47;
      goto LABEL_76;
    case 48:
      v8 = "double";
      v9 = 48;
      goto LABEL_76;
    case 49:
      v8 = "double";
      v9 = 49;
      goto LABEL_76;
    case 50:
      v8 = "double";
      v9 = 50;
      goto LABEL_76;
    case 51:
      v8 = "double";
      v9 = 51;
      goto LABEL_76;
    case 52:
      v8 = "double";
      v9 = 52;
      goto LABEL_76;
    case 53:
      v8 = "double";
      v9 = 53;
      goto LABEL_76;
    case 54:
      v8 = "double";
      v9 = 54;
      goto LABEL_76;
    case 55:
      v8 = "double";
      v9 = 55;
      goto LABEL_76;
    case 56:
      v8 = "double";
      v9 = 56;
      goto LABEL_76;
    case 57:
      v8 = "double";
      v9 = 57;
      goto LABEL_76;
    case 58:
      v8 = "double";
      v9 = 58;
      goto LABEL_76;
    case 59:
      v8 = "double";
      v9 = 59;
      goto LABEL_76;
    case 60:
      v8 = "double";
      v9 = 60;
      goto LABEL_76;
    case 61:
      v8 = "double";
      v9 = 61;
      goto LABEL_76;
    case 62:
      v8 = "double";
      v9 = 62;
      goto LABEL_76;
    case 63:
      v8 = "double";
      v9 = 63;
      goto LABEL_76;
    case 64:
      v8 = "double";
      v9 = 64;
      goto LABEL_76;
    case 65:
      v8 = "double";
      v9 = 65;
      goto LABEL_76;
    case 66:
      v8 = "double";
      v9 = 66;
      goto LABEL_76;
    case 67:
      v8 = "double";
      v9 = 67;
      goto LABEL_76;
    case 68:
      v8 = "double";
      v9 = 68;
      goto LABEL_76;
    case 69:
      v8 = "double";
      v9 = 69;
      goto LABEL_76;
    case 70:
      v8 = "double";
      v9 = 70;
      goto LABEL_76;
    case 71:
      v8 = "double";
      v9 = 71;
      goto LABEL_76;
    case 72:
      v8 = "double";
      v9 = 72;
      goto LABEL_76;
    case 73:
      v8 = "double";
      v9 = 73;
LABEL_76:
      throwWrongTypeForParamId(v9, v8, "string", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

uint64_t ConfidenceParamSet::getEnumParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  char v9;

  switch(a2)
  {
    case 1:
      v8 = "BOOL";
      v9 = 1;
      goto LABEL_77;
    case 2:
      v8 = "BOOL";
      v9 = 2;
      goto LABEL_77;
    case 3:
      v8 = "BOOL";
      v9 = 3;
      goto LABEL_77;
    case 4:
      v8 = "double";
      v9 = 4;
      goto LABEL_77;
    case 5:
      v8 = "double";
      v9 = 5;
      goto LABEL_77;
    case 6:
      v8 = "double";
      v9 = 6;
      goto LABEL_77;
    case 7:
      v8 = "double";
      v9 = 7;
      goto LABEL_77;
    case 8:
      v8 = "double";
      v9 = 8;
      goto LABEL_77;
    case 9:
      v8 = "double";
      v9 = 9;
      goto LABEL_77;
    case 10:
      v8 = "double";
      v9 = 10;
      goto LABEL_77;
    case 11:
      v8 = "double";
      v9 = 11;
      goto LABEL_77;
    case 12:
      v8 = "double";
      v9 = 12;
      goto LABEL_77;
    case 13:
      v8 = "double";
      v9 = 13;
      goto LABEL_77;
    case 14:
      v8 = "double";
      v9 = 14;
      goto LABEL_77;
    case 15:
      v8 = "double";
      v9 = 15;
      goto LABEL_77;
    case 16:
      v8 = "double";
      v9 = 16;
      goto LABEL_77;
    case 17:
      v8 = "double";
      v9 = 17;
      goto LABEL_77;
    case 18:
      v8 = "double";
      v9 = 18;
      goto LABEL_77;
    case 19:
      v8 = "double";
      v9 = 19;
      goto LABEL_77;
    case 20:
      v8 = "double";
      v9 = 20;
      goto LABEL_77;
    case 21:
      v8 = "double";
      v9 = 21;
      goto LABEL_77;
    case 22:
      v8 = "double";
      v9 = 22;
      goto LABEL_77;
    case 23:
      v8 = "double";
      v9 = 23;
      goto LABEL_77;
    case 24:
      v8 = "double";
      v9 = 24;
      goto LABEL_77;
    case 25:
      v8 = "double";
      v9 = 25;
      goto LABEL_77;
    case 26:
      v8 = "double";
      v9 = 26;
      goto LABEL_77;
    case 27:
      v8 = "double";
      v9 = 27;
      goto LABEL_77;
    case 28:
      v8 = "double";
      v9 = 28;
      goto LABEL_77;
    case 29:
      v8 = "double";
      v9 = 29;
      goto LABEL_77;
    case 30:
      v8 = "double";
      v9 = 30;
      goto LABEL_77;
    case 31:
      v8 = "double";
      v9 = 31;
      goto LABEL_77;
    case 32:
      v8 = "double";
      v9 = 32;
      goto LABEL_77;
    case 33:
      v8 = "double";
      v9 = 33;
      goto LABEL_77;
    case 34:
      v8 = "double";
      v9 = 34;
      goto LABEL_77;
    case 35:
      v8 = "double";
      v9 = 35;
      goto LABEL_77;
    case 36:
      v8 = "double";
      v9 = 36;
      goto LABEL_77;
    case 37:
      v8 = "double";
      v9 = 37;
      goto LABEL_77;
    case 38:
      v8 = "double";
      v9 = 38;
      goto LABEL_77;
    case 39:
      v8 = "double";
      v9 = 39;
      goto LABEL_77;
    case 40:
      v8 = "double";
      v9 = 40;
      goto LABEL_77;
    case 41:
      v8 = "double";
      v9 = 41;
      goto LABEL_77;
    case 42:
      v8 = "double";
      v9 = 42;
      goto LABEL_77;
    case 43:
      v8 = "double";
      v9 = 43;
      goto LABEL_77;
    case 44:
      v8 = "double";
      v9 = 44;
      goto LABEL_77;
    case 45:
      v8 = "double";
      v9 = 45;
      goto LABEL_77;
    case 46:
      v8 = "double";
      v9 = 46;
      goto LABEL_77;
    case 47:
      v8 = "double";
      v9 = 47;
      goto LABEL_77;
    case 48:
      v8 = "double";
      v9 = 48;
      goto LABEL_77;
    case 49:
      v8 = "double";
      v9 = 49;
      goto LABEL_77;
    case 50:
      v8 = "double";
      v9 = 50;
      goto LABEL_77;
    case 51:
      v8 = "double";
      v9 = 51;
      goto LABEL_77;
    case 52:
      v8 = "double";
      v9 = 52;
      goto LABEL_77;
    case 53:
      v8 = "double";
      v9 = 53;
      goto LABEL_77;
    case 54:
      v8 = "double";
      v9 = 54;
      goto LABEL_77;
    case 55:
      v8 = "double";
      v9 = 55;
      goto LABEL_77;
    case 56:
      v8 = "double";
      v9 = 56;
      goto LABEL_77;
    case 57:
      v8 = "double";
      v9 = 57;
      goto LABEL_77;
    case 58:
      v8 = "double";
      v9 = 58;
      goto LABEL_77;
    case 59:
      v8 = "double";
      v9 = 59;
      goto LABEL_77;
    case 60:
      v8 = "double";
      v9 = 60;
      goto LABEL_77;
    case 61:
      v8 = "double";
      v9 = 61;
      goto LABEL_77;
    case 62:
      v8 = "double";
      v9 = 62;
      goto LABEL_77;
    case 63:
      v8 = "double";
      v9 = 63;
      goto LABEL_77;
    case 64:
      v8 = "double";
      v9 = 64;
      goto LABEL_77;
    case 65:
      v8 = "double";
      v9 = 65;
      goto LABEL_77;
    case 66:
      v8 = "double";
      v9 = 66;
      goto LABEL_77;
    case 67:
      v8 = "double";
      v9 = 67;
      goto LABEL_77;
    case 68:
      v8 = "double";
      v9 = 68;
      goto LABEL_77;
    case 69:
      v8 = "double";
      v9 = 69;
      goto LABEL_77;
    case 70:
      v8 = "double";
      v9 = 70;
      goto LABEL_77;
    case 71:
      v8 = "double";
      v9 = 71;
      goto LABEL_77;
    case 72:
      v8 = "double";
      v9 = 72;
      goto LABEL_77;
    case 73:
      v8 = "double";
      v9 = 73;
LABEL_77:
      throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

void ConfidenceParamSet::setBoolParameter(ConfidenceParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  const char *v9;

  v8 = a2;
  switch(a2)
  {
    case 1:
      if (*((_DWORD *)this + 9))
      {
        v9 = "ConfidenceEnableWordLevel";
        goto LABEL_8;
      }
      *((_BYTE *)this + 40) = a3;
      return;
    case 2:
      if (*((_DWORD *)this + 9))
      {
        v9 = "ConfidenceEnableUttLevel";
        goto LABEL_8;
      }
      *((_BYTE *)this + 41) = a3;
      return;
    case 3:
      if (*((_DWORD *)this + 9))
      {
        v9 = "ConfidenceEnableForAllNBest";
LABEL_8:
        throwParamSetSetFailed(v9, "BOOL", a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *((_BYTE *)this + 42) = a3;
      }
      return;
    case 4:
      throwWrongTypeForParamId(4, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 5:
LABEL_10:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 6:
LABEL_11:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 7:
LABEL_12:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 8:
LABEL_13:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 9:
LABEL_14:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 10:
LABEL_15:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 11:
LABEL_16:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 12:
LABEL_17:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 13:
LABEL_18:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 14:
LABEL_19:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 15:
LABEL_20:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 16:
LABEL_21:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 17:
LABEL_22:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 18:
LABEL_23:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 19:
LABEL_24:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 20:
LABEL_25:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 21:
LABEL_26:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 22:
LABEL_27:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 23:
LABEL_28:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 24:
LABEL_29:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 25:
LABEL_30:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 26:
LABEL_31:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 27:
LABEL_32:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 28:
LABEL_33:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 29:
LABEL_34:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 30:
LABEL_35:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 31:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 32:
LABEL_37:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 33:
LABEL_38:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 34:
LABEL_39:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 35:
LABEL_40:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 36:
LABEL_41:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 37:
LABEL_42:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 38:
LABEL_43:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 39:
LABEL_44:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 40:
LABEL_45:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 41:
LABEL_46:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 42:
LABEL_47:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 43:
LABEL_48:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 44:
LABEL_49:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 45:
LABEL_50:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 46:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 47:
LABEL_52:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 48:
LABEL_53:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 49:
LABEL_54:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 50:
LABEL_55:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 51:
LABEL_56:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 52:
LABEL_57:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 53:
LABEL_58:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 54:
LABEL_59:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 55:
LABEL_60:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 56:
LABEL_61:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 57:
LABEL_62:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 58:
LABEL_63:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 59:
LABEL_64:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 60:
LABEL_65:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 61:
LABEL_66:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 62:
LABEL_67:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 63:
LABEL_68:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 64:
LABEL_69:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 65:
LABEL_70:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 66:
LABEL_71:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 67:
LABEL_72:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 68:
LABEL_73:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 69:
LABEL_74:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_75;
    case 70:
LABEL_75:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_76;
    case 71:
LABEL_76:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_77;
    case 72:
LABEL_77:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_78;
    case 73:
LABEL_78:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
}

void ConfidenceParamSet::setIntParameter(ConfidenceParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 20:
LABEL_21:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 23:
LABEL_24:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 24:
LABEL_25:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 25:
LABEL_26:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 26:
LABEL_27:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 27:
LABEL_28:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 28:
LABEL_29:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 29:
LABEL_30:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 30:
LABEL_31:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 31:
LABEL_32:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 32:
LABEL_33:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 33:
LABEL_34:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 34:
LABEL_35:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 35:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 36:
LABEL_37:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 37:
LABEL_38:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 38:
LABEL_39:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 39:
LABEL_40:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 40:
LABEL_41:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 41:
LABEL_42:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 42:
LABEL_43:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 43:
LABEL_44:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 44:
LABEL_45:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 45:
LABEL_46:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 46:
LABEL_47:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 47:
LABEL_48:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 48:
LABEL_49:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 49:
LABEL_50:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 50:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 51:
LABEL_52:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 52:
LABEL_53:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 53:
LABEL_54:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 54:
LABEL_55:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 55:
LABEL_56:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 56:
LABEL_57:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 57:
LABEL_58:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 58:
LABEL_59:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 59:
LABEL_60:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 60:
LABEL_61:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 61:
LABEL_62:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 62:
LABEL_63:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 63:
LABEL_64:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 64:
LABEL_65:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 65:
LABEL_66:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 66:
LABEL_67:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 67:
LABEL_68:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 68:
LABEL_69:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 69:
LABEL_70:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 70:
LABEL_71:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 71:
LABEL_72:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 72:
LABEL_73:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 73:
LABEL_74:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "int", a3, a4, a5, a6, a7, a8);
}

void ConfidenceParamSet::setDoubleParameter(ConfidenceParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;
  void *ParamByParamId;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  void *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  void *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  void *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  void *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  void *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  void *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  void *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  void *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  void *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  void *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  void *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;

  v9 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_5;
    case 4:
LABEL_5:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 4, a4, a5, a6, a7, a8, a9);
      if (ParamByParamId)
      DoubleParamSpec::validateValue((DoubleParamSpec *)ParamByParamId, a3, 0, 0, v13, v14, v15, v16, v17);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttNBestHighThresh";
        goto LABEL_287;
      }
      *((double *)this + 6) = a3;
      return;
    case 5:
      v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 5, a4, a5, a6, a7, a8, a9);
      if (v25)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v25, a3, 0, 0, v26, v27, v28, v29, v30);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttNBestLowThresh";
        goto LABEL_287;
      }
      *((double *)this + 7) = a3;
      return;
    case 6:
      v31 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 6, a4, a5, a6, a7, a8, a9);
      if (v31)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v31, a3, 0, 0, v32, v33, v34, v35, v36);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttProbAverageActiveNodeCountFactor";
        goto LABEL_287;
      }
      *((double *)this + 8) = a3;
      return;
    case 7:
      v37 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 7, a4, a5, a6, a7, a8, a9);
      if (v37)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v37, a3, 0, 0, v38, v39, v40, v41, v42);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttProbAverageDurationFactor";
        goto LABEL_287;
      }
      *((double *)this + 9) = a3;
      return;
    case 8:
      v43 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 8, a4, a5, a6, a7, a8, a9);
      if (v43)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v43, a3, 0, 0, v44, v45, v46, v47, v48);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttProbAverageLMScoreFactor";
        goto LABEL_287;
      }
      *((double *)this + 10) = a3;
      return;
    case 9:
      v49 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 9, a4, a5, a6, a7, a8, a9);
      if (v49)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v49, a3, 0, 0, v50, v51, v52, v53, v54);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttProbConstantTerm";
        goto LABEL_287;
      }
      *((double *)this + 11) = a3;
      return;
    case 10:
      v55 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 10, a4, a5, a6, a7, a8, a9);
      if (v55)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v55, a3, 0, 0, v56, v57, v58, v59, v60);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttProbLogWordCountFactor";
        goto LABEL_287;
      }
      *((double *)this + 12) = a3;
      return;
    case 11:
      v61 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 11, a4, a5, a6, a7, a8, a9);
      if (v61)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v61, a3, 0, 0, v62, v63, v64, v65, v66);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttProbMaxWordsEndingFactor";
        goto LABEL_287;
      }
      *((double *)this + 13) = a3;
      return;
    case 12:
      v67 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 12, a4, a5, a6, a7, a8, a9);
      if (v67)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v67, a3, 0, 0, v68, v69, v70, v71, v72);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttProbNBestHighCountFactor";
        goto LABEL_287;
      }
      *((double *)this + 14) = a3;
      return;
    case 13:
      v73 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 13, a4, a5, a6, a7, a8, a9);
      if (v73)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v73, a3, 0, 0, v74, v75, v76, v77, v78);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttProbNBestLowCountFactor";
        goto LABEL_287;
      }
      *((double *)this + 15) = a3;
      return;
    case 14:
      v79 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 14, a4, a5, a6, a7, a8, a9);
      if (v79)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v79, a3, 0, 0, v80, v81, v82, v83, v84);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttProbNBestMaxFactor";
        goto LABEL_287;
      }
      *((double *)this + 16) = a3;
      return;
    case 15:
      v85 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 15, a4, a5, a6, a7, a8, a9);
      if (v85)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v85, a3, 0, 0, v86, v87, v88, v89, v90);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttProbNBestMinFactor";
        goto LABEL_287;
      }
      *((double *)this + 17) = a3;
      return;
    case 16:
      v91 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 16, a4, a5, a6, a7, a8, a9);
      if (v91)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v91, a3, 0, 0, v92, v93, v94, v95, v96);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttProbNBestWordAverageFactor";
        goto LABEL_287;
      }
      *((double *)this + 18) = a3;
      return;
    case 17:
      v97 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 17, a4, a5, a6, a7, a8, a9);
      if (v97)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v97, a3, 0, 0, v98, v99, v100, v101, v102);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttProbTotalLMScoreFactor";
        goto LABEL_287;
      }
      *((double *)this + 19) = a3;
      return;
    case 18:
      v103 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 18, a4, a5, a6, a7, a8, a9);
      if (v103)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v103, a3, 0, 0, v104, v105, v106, v107, v108);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceUttProbUttAverageAMinusBScoreFactor";
        goto LABEL_287;
      }
      *((double *)this + 20) = a3;
      return;
    case 19:
      v109 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 19, a4, a5, a6, a7, a8, a9);
      if (v109)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v109, a3, 0, 0, v110, v111, v112, v113, v114);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAcousticScoreFactor";
        goto LABEL_287;
      }
      *((double *)this + 21) = a3;
      return;
    case 20:
      v115 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 20, a4, a5, a6, a7, a8, a9);
      if (v115)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v115, a3, 0, 0, v116, v117, v118, v119, v120);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAcousticScoreLCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 22) = a3;
      return;
    case 21:
      v121 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 21, a4, a5, a6, a7, a8, a9);
      if (v121)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v121, a3, 0, 0, v122, v123, v124, v125, v126);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAcousticScoreLCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 23) = a3;
      return;
    case 22:
      v127 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 22, a4, a5, a6, a7, a8, a9);
      if (v127)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v127, a3, 0, 0, v128, v129, v130, v131, v132);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAcousticScoreRCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 24) = a3;
      return;
    case 23:
      v133 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 23, a4, a5, a6, a7, a8, a9);
      if (v133)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v133, a3, 0, 0, v134, v135, v136, v137, v138);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAcousticScoreRCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 25) = a3;
      return;
    case 24:
      v139 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 24, a4, a5, a6, a7, a8, a9);
      if (v139)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v139, a3, 0, 0, v140, v141, v142, v143, v144);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageAMinusBScoreFactor";
        goto LABEL_287;
      }
      *((double *)this + 26) = a3;
      return;
    case 25:
      v145 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 25, a4, a5, a6, a7, a8, a9);
      if (v145)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v145, a3, 0, 0, v146, v147, v148, v149, v150);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageAMinusBScoreLCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 27) = a3;
      return;
    case 26:
      v151 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 26, a4, a5, a6, a7, a8, a9);
      if (v151)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v151, a3, 0, 0, v152, v153, v154, v155, v156);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageAMinusBScoreLCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 28) = a3;
      return;
    case 27:
      v157 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 27, a4, a5, a6, a7, a8, a9);
      if (v157)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v157, a3, 0, 0, v158, v159, v160, v161, v162);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageAMinusBScoreRCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 29) = a3;
      return;
    case 28:
      v163 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 28, a4, a5, a6, a7, a8, a9);
      if (v163)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v163, a3, 0, 0, v164, v165, v166, v167, v168);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageAMinusBScoreRCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 30) = a3;
      return;
    case 29:
      v169 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 29, a4, a5, a6, a7, a8, a9);
      if (v169)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v169, a3, 0, 0, v170, v171, v172, v173, v174);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageAcousticScoreFactor";
        goto LABEL_287;
      }
      *((double *)this + 31) = a3;
      return;
    case 30:
      v175 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 30, a4, a5, a6, a7, a8, a9);
      if (v175)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v175, a3, 0, 0, v176, v177, v178, v179, v180);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageAcousticScoreLCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 32) = a3;
      return;
    case 31:
      v181 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 31, a4, a5, a6, a7, a8, a9);
      if (v181)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v181, a3, 0, 0, v182, v183, v184, v185, v186);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageAcousticScoreLCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 33) = a3;
      return;
    case 32:
      v187 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 32, a4, a5, a6, a7, a8, a9);
      if (v187)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v187, a3, 0, 0, v188, v189, v190, v191, v192);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageAcousticScoreRCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 34) = a3;
      return;
    case 33:
      v193 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 33, a4, a5, a6, a7, a8, a9);
      if (v193)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v193, a3, 0, 0, v194, v195, v196, v197, v198);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageAcousticScoreRCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 35) = a3;
      return;
    case 34:
      v199 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 34, a4, a5, a6, a7, a8, a9);
      if (v199)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v199, a3, 0, 0, v200, v201, v202, v203, v204);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageActiveNodeCountFactor";
        goto LABEL_287;
      }
      *((double *)this + 36) = a3;
      return;
    case 35:
      v205 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 35, a4, a5, a6, a7, a8, a9);
      if (v205)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v205, a3, 0, 0, v206, v207, v208, v209, v210);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageActiveNodeCountLCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 37) = a3;
      return;
    case 36:
      v211 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 36, a4, a5, a6, a7, a8, a9);
      if (v211)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v211, a3, 0, 0, v212, v213, v214, v215, v216);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageActiveNodeCountLCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 38) = a3;
      return;
    case 37:
      v217 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 37, a4, a5, a6, a7, a8, a9);
      if (v217)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v217, a3, 0, 0, v218, v219, v220, v221, v222);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageActiveNodeCountRCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 39) = a3;
      return;
    case 38:
      v223 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 38, a4, a5, a6, a7, a8, a9);
      if (v223)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v223, a3, 0, 0, v224, v225, v226, v227, v228);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageActiveNodeCountRCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 40) = a3;
      return;
    case 39:
      v229 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 39, a4, a5, a6, a7, a8, a9);
      if (v229)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v229, a3, 0, 0, v230, v231, v232, v233, v234);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageBestScoreFactor";
        goto LABEL_287;
      }
      *((double *)this + 41) = a3;
      return;
    case 40:
      v235 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 40, a4, a5, a6, a7, a8, a9);
      if (v235)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v235, a3, 0, 0, v236, v237, v238, v239, v240);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageBestScoreLCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 42) = a3;
      return;
    case 41:
      v241 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 41, a4, a5, a6, a7, a8, a9);
      if (v241)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v241, a3, 0, 0, v242, v243, v244, v245, v246);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageBestScoreLCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 43) = a3;
      return;
    case 42:
      v247 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 42, a4, a5, a6, a7, a8, a9);
      if (v247)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v247, a3, 0, 0, v248, v249, v250, v251, v252);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageBestScoreRCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 44) = a3;
      return;
    case 43:
      v253 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 43, a4, a5, a6, a7, a8, a9);
      if (v253)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v253, a3, 0, 0, v254, v255, v256, v257, v258);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbAverageBestScoreRCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 45) = a3;
      return;
    case 44:
      v259 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 44, a4, a5, a6, a7, a8, a9);
      if (v259)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v259, a3, 0, 0, v260, v261, v262, v263, v264);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbConstantTerm";
        goto LABEL_287;
      }
      *((double *)this + 46) = a3;
      return;
    case 45:
      v265 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 45, a4, a5, a6, a7, a8, a9);
      if (v265)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v265, a3, 0, 0, v266, v267, v268, v269, v270);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbDurationFactor";
        goto LABEL_287;
      }
      *((double *)this + 47) = a3;
      return;
    case 46:
      v271 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 46, a4, a5, a6, a7, a8, a9);
      if (v271)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v271, a3, 0, 0, v272, v273, v274, v275, v276);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbDurationLCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 48) = a3;
      return;
    case 47:
      v277 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 47, a4, a5, a6, a7, a8, a9);
      if (v277)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v277, a3, 0, 0, v278, v279, v280, v281, v282);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbDurationLCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 49) = a3;
      return;
    case 48:
      v283 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 48, a4, a5, a6, a7, a8, a9);
      if (v283)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v283, a3, 0, 0, v284, v285, v286, v287, v288);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbDurationRCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 50) = a3;
      return;
    case 49:
      v289 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 49, a4, a5, a6, a7, a8, a9);
      if (v289)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v289, a3, 0, 0, v290, v291, v292, v293, v294);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbDurationRCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 51) = a3;
      return;
    case 50:
      v295 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 50, a4, a5, a6, a7, a8, a9);
      if (v295)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v295, a3, 0, 0, v296, v297, v298, v299, v300);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbLMScoreFactor";
        goto LABEL_287;
      }
      *((double *)this + 52) = a3;
      return;
    case 51:
      v301 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 51, a4, a5, a6, a7, a8, a9);
      if (v301)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v301, a3, 0, 0, v302, v303, v304, v305, v306);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbLMScoreLCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 53) = a3;
      return;
    case 52:
      v307 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 52, a4, a5, a6, a7, a8, a9);
      if (v307)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v307, a3, 0, 0, v308, v309, v310, v311, v312);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbLMScoreLCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 54) = a3;
      return;
    case 53:
      v313 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 53, a4, a5, a6, a7, a8, a9);
      if (v313)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v313, a3, 0, 0, v314, v315, v316, v317, v318);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbLMScoreRCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 55) = a3;
      return;
    case 54:
      v319 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 54, a4, a5, a6, a7, a8, a9);
      if (v319)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v319, a3, 0, 0, v320, v321, v322, v323, v324);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbLMScoreRCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 56) = a3;
      return;
    case 55:
      v325 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 55, a4, a5, a6, a7, a8, a9);
      if (v325)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v325, a3, 0, 0, v326, v327, v328, v329, v330);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbLeftContextIndicator1Factor";
        goto LABEL_287;
      }
      *((double *)this + 57) = a3;
      return;
    case 56:
      v331 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 56, a4, a5, a6, a7, a8, a9);
      if (v331)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v331, a3, 0, 0, v332, v333, v334, v335, v336);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbLeftContextIndicator2Factor";
        goto LABEL_287;
      }
      *((double *)this + 58) = a3;
      return;
    case 57:
      v337 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 57, a4, a5, a6, a7, a8, a9);
      if (v337)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v337, a3, 0, 0, v338, v339, v340, v341, v342);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbLogWordCountFactor";
        goto LABEL_287;
      }
      *((double *)this + 59) = a3;
      return;
    case 58:
      v343 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 58, a4, a5, a6, a7, a8, a9);
      if (v343)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v343, a3, 0, 0, v344, v345, v346, v347, v348);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbLogWordCountLCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 60) = a3;
      return;
    case 59:
      v349 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 59, a4, a5, a6, a7, a8, a9);
      if (v349)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v349, a3, 0, 0, v350, v351, v352, v353, v354);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbLogWordCountLCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 61) = a3;
      return;
    case 60:
      v355 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 60, a4, a5, a6, a7, a8, a9);
      if (v355)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v355, a3, 0, 0, v356, v357, v358, v359, v360);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbLogWordCountRCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 62) = a3;
      return;
    case 61:
      v361 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 61, a4, a5, a6, a7, a8, a9);
      if (v361)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v361, a3, 0, 0, v362, v363, v364, v365, v366);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbLogWordCountRCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 63) = a3;
      return;
    case 62:
      v367 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 62, a4, a5, a6, a7, a8, a9);
      if (v367)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v367, a3, 0, 0, v368, v369, v370, v371, v372);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbNBestScoreFactor";
        goto LABEL_287;
      }
      *((double *)this + 64) = a3;
      return;
    case 63:
      v373 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 63, a4, a5, a6, a7, a8, a9);
      if (v373)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v373, a3, 0, 0, v374, v375, v376, v377, v378);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbNBestScoreLCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 65) = a3;
      return;
    case 64:
      v379 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 64, a4, a5, a6, a7, a8, a9);
      if (v379)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v379, a3, 0, 0, v380, v381, v382, v383, v384);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbNBestScoreLCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 66) = a3;
      return;
    case 65:
      v385 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 65, a4, a5, a6, a7, a8, a9);
      if (v385)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v385, a3, 0, 0, v386, v387, v388, v389, v390);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbNBestScoreRCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 67) = a3;
      return;
    case 66:
      v391 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 66, a4, a5, a6, a7, a8, a9);
      if (v391)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v391, a3, 0, 0, v392, v393, v394, v395, v396);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbNBestScoreRCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 68) = a3;
      return;
    case 67:
      v397 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 67, a4, a5, a6, a7, a8, a9);
      if (v397)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v397, a3, 0, 0, v398, v399, v400, v401, v402);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbRightContextIndicator1Factor";
        goto LABEL_287;
      }
      *((double *)this + 69) = a3;
      return;
    case 68:
      v403 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 68, a4, a5, a6, a7, a8, a9);
      if (v403)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v403, a3, 0, 0, v404, v405, v406, v407, v408);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbRightContextIndicator2Factor";
        goto LABEL_287;
      }
      *((double *)this + 70) = a3;
      return;
    case 69:
      v409 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 69, a4, a5, a6, a7, a8, a9);
      if (v409)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v409, a3, 0, 0, v410, v411, v412, v413, v414);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbWordsEndingCountFactor";
        goto LABEL_287;
      }
      *((double *)this + 71) = a3;
      return;
    case 70:
      v415 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 70, a4, a5, a6, a7, a8, a9);
      if (v415)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v415, a3, 0, 0, v416, v417, v418, v419, v420);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbWordsEndingCountLCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 72) = a3;
      return;
    case 71:
      v421 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 71, a4, a5, a6, a7, a8, a9);
      if (v421)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v421, a3, 0, 0, v422, v423, v424, v425, v426);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbWordsEndingCountLCntx2Factor";
        goto LABEL_287;
      }
      *((double *)this + 73) = a3;
      return;
    case 72:
      v427 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 72, a4, a5, a6, a7, a8, a9);
      if (v427)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v427, a3, 0, 0, v428, v429, v430, v431, v432);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbWordsEndingCountRCntx1Factor";
        goto LABEL_287;
      }
      *((double *)this + 74) = a3;
      break;
    case 73:
      v433 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2838, 73, a4, a5, a6, a7, a8, a9);
      if (v433)
      DoubleParamSpec::validateValue((DoubleParamSpec *)v433, a3, 0, 0, v434, v435, v436, v437, v438);
      if (*((_DWORD *)this + 9))
      {
        v24 = "ConfidenceWordProbWordsEndingCountRCntx2Factor";
LABEL_287:
        throwParamSetSetFailed(v24, "double", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((double *)this + 75) = a3;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "double", a4, a5, a6, a7, a8, a9);
      return;
  }
}

void ConfidenceParamSet::setStringParameter(ConfidenceParamSet *this, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 20:
LABEL_21:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 23:
LABEL_24:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 24:
LABEL_25:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 25:
LABEL_26:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 26:
LABEL_27:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 27:
LABEL_28:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 28:
LABEL_29:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 29:
LABEL_30:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 30:
LABEL_31:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 31:
LABEL_32:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 32:
LABEL_33:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 33:
LABEL_34:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 34:
LABEL_35:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 35:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 36:
LABEL_37:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 37:
LABEL_38:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 38:
LABEL_39:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 39:
LABEL_40:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 40:
LABEL_41:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 41:
LABEL_42:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 42:
LABEL_43:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 43:
LABEL_44:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 44:
LABEL_45:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 45:
LABEL_46:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 46:
LABEL_47:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 47:
LABEL_48:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 48:
LABEL_49:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 49:
LABEL_50:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 50:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 51:
LABEL_52:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 52:
LABEL_53:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 53:
LABEL_54:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 54:
LABEL_55:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 55:
LABEL_56:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 56:
LABEL_57:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 57:
LABEL_58:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 58:
LABEL_59:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 59:
LABEL_60:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 60:
LABEL_61:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 61:
LABEL_62:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 62:
LABEL_63:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 63:
LABEL_64:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 64:
LABEL_65:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 65:
LABEL_66:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 66:
LABEL_67:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 67:
LABEL_68:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 68:
LABEL_69:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 69:
LABEL_70:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 70:
LABEL_71:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 71:
LABEL_72:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 72:
LABEL_73:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 73:
LABEL_74:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void ConfidenceParamSet::setEnumParameter(ConfidenceParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 20:
LABEL_21:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 23:
LABEL_24:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 24:
LABEL_25:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 25:
LABEL_26:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 26:
LABEL_27:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 27:
LABEL_28:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 28:
LABEL_29:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 29:
LABEL_30:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 30:
LABEL_31:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 31:
LABEL_32:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 32:
LABEL_33:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 33:
LABEL_34:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 34:
LABEL_35:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 35:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 36:
LABEL_37:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 37:
LABEL_38:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 38:
LABEL_39:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 39:
LABEL_40:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 40:
LABEL_41:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 41:
LABEL_42:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 42:
LABEL_43:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 43:
LABEL_44:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 44:
LABEL_45:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 45:
LABEL_46:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 46:
LABEL_47:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 47:
LABEL_48:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 48:
LABEL_49:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 49:
LABEL_50:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 50:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 51:
LABEL_52:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 52:
LABEL_53:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 53:
LABEL_54:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 54:
LABEL_55:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 55:
LABEL_56:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 56:
LABEL_57:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 57:
LABEL_58:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 58:
LABEL_59:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 59:
LABEL_60:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 60:
LABEL_61:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 61:
LABEL_62:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 62:
LABEL_63:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 63:
LABEL_64:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 64:
LABEL_65:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 65:
LABEL_66:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 66:
LABEL_67:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 67:
LABEL_68:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 68:
LABEL_69:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 69:
LABEL_70:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 70:
LABEL_71:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 71:
LABEL_72:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 72:
LABEL_73:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 73:
LABEL_74:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
}

void ConfidenceParamSet::~ConfidenceParamSet(ConfidenceParamSet *this)
{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((ConfidenceParamSet *)((char *)this + 8));
}

{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((ConfidenceParamSet *)((char *)this + 8));
  JUMPOUT(0x20BD149A8);
}

void TRespellManager::TRespellManager(TRespellManager *this, TInputStream *a2, TLexicon *a3, const TTokenizerParamManager *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t i;
  uint64_t v13;
  __int128 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  _QWORD *exception;
  std::string *v23;
  const char *v24;
  _QWORD *v25;
  std::string *v26;
  __int128 v27;
  __int128 v28;
  void *v29[2];
  uint64_t v30;
  _BYTE v31[24];
  uint64_t v32;
  _BYTE v33[24];
  uint64_t v34;
  _BYTE __p[24];
  uint64_t v36;

  TAllocator::TAllocator(this, 2048);
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_QWORD *)(v8 + 96) = a3;
  *(_QWORD *)(v8 + 104) = a4;
  v9 = (_QWORD *)operator new();
  TRegExp::TRegExp(v9, *((_QWORD *)this + 12) + 240);
  *((_QWORD *)this + 11) = v9;
  if (TInputStream::verifyHeader((uint64_t)a2, "TknRespell", (uint64_t)&pTknRespellVersion, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v33, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if ((v33[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v33, *(std::string::size_type *)&v33[8]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v33;
      v36 = *(_QWORD *)&v33[16];
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v36 >= 0)
      v21 = &__p[8];
    else
      v21 = *(const char **)&__p[8];
    conditionalAssert(v21, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/respellmgr.cpp", 81, v17, v18);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v36) < 0)
      operator delete(*(void **)&__p[8]);
    if ((v33[23] & 0x80000000) != 0)
      operator delete(*(void **)v33);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v23 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v27 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v27;
    }
    *exception = &unk_24C214BA0;
  }
  TFileObjectParser::TFileObjectParser((TFileObjectParser *)__p, a2);
  v10 = *(_QWORD *)__p;
  *(_QWORD *)v33 = dword_209A6EC7C;
  *(_OWORD *)&v33[8] = xmmword_209A57DB0;
  v34 = -1;
  if (TFileObject::verify(*(uint64_t *)__p, (uint64_t)v33, 1uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v29, &byte_209A88803);
    *(_QWORD *)v31 = aPpx;
    if (SHIBYTE(v30) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v31[8], (const std::string::value_type *)v29[0], (std::string::size_type)v29[1]);
    }
    else
    {
      *(_OWORD *)&v31[8] = *(_OWORD *)v29;
      v32 = v30;
    }
    *(_QWORD *)v31 = &unk_24C214BA0;
    if (v32 >= 0)
      v24 = &v31[8];
    else
      v24 = *(const char **)&v31[8];
    conditionalAssert(v24, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/respellmgr.cpp", 93, v19, v20);
    *(_QWORD *)v31 = aPpx;
    if (SHIBYTE(v32) < 0)
      operator delete(*(void **)&v31[8]);
    if (SHIBYTE(v30) < 0)
      operator delete(v29[0]);
    v25 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v31, &byte_209A88803);
    *v25 = aPpx;
    v26 = (std::string *)(v25 + 1);
    if ((v31[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)v31, *(std::string::size_type *)&v31[8]);
    }
    else
    {
      v28 = *(_OWORD *)v31;
      v25[3] = *(_QWORD *)&v31[16];
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v28;
    }
    *v25 = &unk_24C214BA0;
  }
  for (i = *(_QWORD *)(v10 + 24); i; i = *(_QWORD *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), dword_209A6EC7C))
      TRespellManager::addRespellObject(this, (const TFileObject *)i);
  }
  v13 = *((_QWORD *)this + 5);
  v14 = (__int128 *)*((_QWORD *)this + 6);
  v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - v13) >> 3));
  *(_QWORD *)v31 = sortRespellMap;
  if (v14 == (__int128 *)v13)
    v16 = 0;
  else
    v16 = v15;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRespellManager::TRespellMap const&,TRespellManager::TRespellMap const&),TRespellManager::TRespellMap*,false>(v13, v14, (uint64_t (**)(__int128 *, __int128 *))v31, v16, 1, v11);
  TRegExp::doneAdding(*((TRegExp **)this + 11));
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)__p);
}

void sub_20987B140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,void *a34,int a35,__int16 a36,char a37,char a38,int a39,__int16 a40,char a41,char a42)
{
  TRespellManager *v42;
  void **v43;
  void *v46;
  void *v47;
  uint64_t v48;

  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v48);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    TRespellManager::freeMemory(v42);
    __cxa_rethrow();
  }
  v46 = (void *)*((_QWORD *)v42 + 8);
  if (v46)
  {
    *((_QWORD *)v42 + 9) = v46;
    operator delete(v46);
  }
  v47 = *v43;
  if (*v43)
  {
    *((_QWORD *)v42 + 6) = v47;
    operator delete(v47);
  }
  TAllocator::clear(v42);
  _Unwind_Resume(a1);
}

void sub_20987B2B0()
{
  __cxa_end_catch();
  JUMPOUT(0x20987B2B8);
}

void TRespellManager::addRespellObject(TRespellManager *this, const TFileObject *a2)
{
  uint64_t v4;
  char v5;
  TFileObject *v6;
  size_t v7;
  uint64_t v8;
  __int32 *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int32 **v16;
  char *v17;
  char *v18;
  __int32 *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char **v23;
  uint64_t v24;
  __int32 *v25;
  const __int32 *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  unint64_t v41;
  TFileObject **v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  TFileObject **v50;
  char *v51;
  char *v52;
  char *v53;
  TFileObject *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  _QWORD *exception;
  std::string *v59;
  const char *v60;
  _QWORD *v61;
  std::string *v62;
  __int128 v63;
  __int128 v64;
  char v65;
  _BYTE __p[24];
  _QWORD v67[128];
  char v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  char *v72;
  __int32 *v73;
  int64x2_t v74;
  uint64_t v75;
  __int32 *v76;
  int64x2_t v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v74 = vdupq_n_s64(1uLL);
  v73 = dword_209A6EC9C;
  v77 = v74;
  v75 = -1;
  v76 = dword_209A6ECB0;
  v78 = -1;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v73, 2uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(&v71, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v72) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v71, *((std::string::size_type *)&v71 + 1));
    }
    else
    {
      *(_OWORD *)&__p[8] = v71;
      v67[0] = v72;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v67[0] >= 0)
      v57 = &__p[8];
    else
      v57 = *(const char **)&__p[8];
    conditionalAssert(v57, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/respellmgr.cpp", 152, v55, v56);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v67[0]) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v72) < 0)
      operator delete((void *)v71);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v59 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v59, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v63 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v63;
    }
    *exception = &unk_24C214BA0;
  }
  v71 = 0uLL;
  v72 = 0;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)&v71, 0x14uLL);
  v4 = *((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = 0;
    v65 = 0;
    v6 = 0;
    do
    {
      if (!wcscmp(*(const __int32 **)(v4 + 8), dword_209A6EC9C))
      {
        if ((TFileObject::verify((TFileObject *)v4, 1, 0) & 1) != 0)
        {
          v5 = 1;
        }
        else if (*(_DWORD *)(v4 + 40) == 2)
        {
          TRegExp::add(*((const TLocaleInfo ***)this + 11), *(__int32 **)(v4 + 24), (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3);
          v65 = 1;
        }
        else
        {
          v7 = wcslen(*(const __int32 **)(v4 + 24));
          if ((v7 + 1) >> 62)
            v8 = -1;
          else
            v8 = 4 * (v7 + 1);
          v9 = (__int32 *)TAllocator::allocate(this, v8);
          wcscpy(v9, *(const __int32 **)(v4 + 24));
          v10 = *((_QWORD *)&v71 + 1);
          if (*((_QWORD *)&v71 + 1) >= (unint64_t)v72)
          {
            v12 = (uint64_t)(*((_QWORD *)&v71 + 1) - v71) >> 3;
            if ((unint64_t)(v12 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v13 = (uint64_t)&v72[-v71] >> 2;
            if (v13 <= v12 + 1)
              v13 = v12 + 1;
            if ((unint64_t)&v72[-v71] >= 0x7FFFFFFFFFFFFFF8)
              v14 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v14 = v13;
            if (v14)
              v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v72, v14);
            else
              v15 = 0;
            v16 = (__int32 **)&v15[8 * v12];
            *v16 = v9;
            v11 = v16 + 1;
            v17 = (char *)*((_QWORD *)&v71 + 1);
            v18 = (char *)v71;
            if (*((_QWORD *)&v71 + 1) != (_QWORD)v71)
            {
              do
              {
                v19 = (__int32 *)*((_QWORD *)v17 - 1);
                v17 -= 8;
                *--v16 = v19;
              }
              while (v17 != v18);
              v17 = (char *)v71;
            }
            *(_QWORD *)&v71 = v16;
            *((_QWORD *)&v71 + 1) = v11;
            v72 = &v15[8 * v14];
            if (v17)
              operator delete(v17);
          }
          else
          {
            **((_QWORD **)&v71 + 1) = v9;
            v11 = (_QWORD *)(v10 + 8);
          }
          *((_QWORD *)&v71 + 1) = v11;
        }
      }
      else if (!wcscmp(*(const __int32 **)(v4 + 8), dword_209A6ECB0))
      {
        v6 = compileAlt((const TFileObject *)v4, v6, *((TLexicon **)this + 12), this);
      }
      v4 = *(_QWORD *)(v4 + 16);
    }
    while (v4);
    if ((v5 & 1) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v69, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v70) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v69, *((std::string::size_type *)&v69 + 1));
      }
      else
      {
        *(_OWORD *)&__p[8] = v69;
        v67[0] = v70;
      }
      *(_QWORD *)__p = &unk_24C214BA0;
      if (v67[0] >= 0)
        v60 = &__p[8];
      else
        v60 = *(const char **)&__p[8];
      conditionalAssert(v60, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/respellmgr.cpp", 197, v20, v21);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v67[0]) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v70) < 0)
        operator delete((void *)v69);
      v61 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *v61 = aPpx;
      v62 = (std::string *)(v61 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v62, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v64 = *(_OWORD *)__p;
        v61[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v64;
      }
      *v61 = &unk_24C214BA0;
    }
  }
  else
  {
    v65 = 0;
    v6 = 0;
  }
  *(_QWORD *)__p = v67;
  *(_OWORD *)&__p[8] = xmmword_209A57DD0;
  v68 = 1;
  if (*((_QWORD *)&v71 + 1) != (_QWORD)v71)
  {
    v22 = 0;
    v23 = (char **)((char *)this + 40);
    do
    {
      TBuffer<wchar_t>::resize((uint64_t)__p, 0);
      TCollation::collate((_QWORD *)(*((_QWORD *)this + 12) + 256), *(unsigned int **)(v71 + 8 * v22), (uint64_t)__p);
      if ((unint64_t)(*(_QWORD *)&__p[16] + 1) >> 62)
        v24 = -1;
      else
        v24 = 4 * (*(_QWORD *)&__p[16] + 1);
      v25 = (__int32 *)TAllocator::allocate(this, v24);
      if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
      {
        if (v68)
        {
          LODWORD(v69) = 0;
          TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)&v69, 1uLL);
          v26 = *(const __int32 **)__p;
          --*(_QWORD *)&__p[16];
        }
        else
        {
          v26 = *(const __int32 **)__p;
          if (*(_QWORD *)&__p[8])
            *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
        }
      }
      else
      {
        v26 = *(const __int32 **)__p;
        *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
      }
      wcscpy(v25, v26);
      v27 = *(_QWORD *)(v71 + 8 * v22);
      v29 = (_QWORD *)*((_QWORD *)this + 6);
      v28 = *((_QWORD *)this + 7);
      if ((unint64_t)v29 >= v28)
      {
        v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - *v23) >> 3);
        v32 = v31 + 1;
        if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)*v23) >> 3);
        if (2 * v33 > v32)
          v32 = 2 * v33;
        if (v33 >= 0x555555555555555)
          v34 = 0xAAAAAAAAAAAAAAALL;
        else
          v34 = v32;
        if (v34)
          v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)this + 56, v34);
        else
          v35 = 0;
        v36 = &v35[24 * v31];
        *(_QWORD *)v36 = v27;
        *((_QWORD *)v36 + 1) = v25;
        *((_QWORD *)v36 + 2) = v6;
        v38 = (char *)*((_QWORD *)this + 5);
        v37 = (char *)*((_QWORD *)this + 6);
        v39 = v36;
        if (v37 != v38)
        {
          do
          {
            v40 = *(_OWORD *)(v37 - 24);
            *((_QWORD *)v39 - 1) = *((_QWORD *)v37 - 1);
            *(_OWORD *)(v39 - 24) = v40;
            v39 -= 24;
            v37 -= 24;
          }
          while (v37 != v38);
          v37 = *v23;
        }
        v30 = v36 + 24;
        *((_QWORD *)this + 5) = v39;
        *((_QWORD *)this + 6) = v36 + 24;
        *((_QWORD *)this + 7) = &v35[24 * v34];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *v29 = v27;
        v29[1] = v25;
        v30 = v29 + 3;
        v29[2] = v6;
      }
      *((_QWORD *)this + 6) = v30;
      ++v22;
    }
    while (v22 < (uint64_t)(*((_QWORD *)&v71 + 1) - v71) >> 3);
  }
  if ((v65 & 1) != 0)
  {
    v41 = *((_QWORD *)this + 10);
    v42 = (TFileObject **)*((_QWORD *)this + 9);
    if ((unint64_t)v42 >= v41)
    {
      v44 = *((_QWORD *)this + 8);
      v45 = ((uint64_t)v42 - v44) >> 3;
      if ((unint64_t)(v45 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v46 = v41 - v44;
      v47 = v46 >> 2;
      if (v46 >> 2 <= (unint64_t)(v45 + 1))
        v47 = v45 + 1;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v47;
      if (v48)
        v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 80, v48);
      else
        v49 = 0;
      v50 = (TFileObject **)&v49[8 * v45];
      v51 = &v49[8 * v48];
      *v50 = v6;
      v43 = v50 + 1;
      v53 = (char *)*((_QWORD *)this + 8);
      v52 = (char *)*((_QWORD *)this + 9);
      if (v52 != v53)
      {
        do
        {
          v54 = (TFileObject *)*((_QWORD *)v52 - 1);
          v52 -= 8;
          *--v50 = v54;
        }
        while (v52 != v53);
        v52 = (char *)*((_QWORD *)this + 8);
      }
      *((_QWORD *)this + 8) = v50;
      *((_QWORD *)this + 9) = v43;
      *((_QWORD *)this + 10) = v51;
      if (v52)
        operator delete(v52);
    }
    else
    {
      *v42 = v6;
      v43 = v42 + 1;
    }
    *((_QWORD *)this + 9) = v43;
  }
  if (v68 && *(_QWORD **)__p != v67 && *(_QWORD *)__p)
    MEMORY[0x20BD149A8]();
  if ((_QWORD)v71)
  {
    *((_QWORD *)&v71 + 1) = v71;
    operator delete((void *)v71);
  }
}

void sub_20987BB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void *v22;

  if (a20 < 0)
    operator delete(__p);
  __cxa_end_catch();
  v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(_QWORD *)(v20 - 176) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void sub_20987BB44(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_20987BC48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 184);
  if (v3)
  {
    *(_QWORD *)(v1 - 176) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20987BC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  void *v18;

  if (LOBYTE(STACK[0x448]))
  {
    if (a15 != a12 && a15 != 0)
      MEMORY[0x20BD149A8]();
  }
  v18 = *(void **)(v15 - 184);
  if (v18)
  {
    *(_QWORD *)(v15 - 176) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sortRespellMap(uint64_t a1, uint64_t a2)
{
  return wcscmp(*(const __int32 **)(a1 + 8), *(const __int32 **)(a2 + 8)) >> 31;
}

TRegExp *TRespellManager::freeMemory(TRespellManager *this)
{
  TRegExp *result;

  result = (TRegExp *)*((_QWORD *)this + 11);
  if (result)
  {
    TRegExp::~TRegExp(result);
    JUMPOUT(0x20BD149A8);
  }
  return result;
}

void TRespellManager::~TRespellManager(TRespellManager *this)
{
  void *v2;
  void *v3;

  TRespellManager::freeMemory(this);
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  TAllocator::clear(this);
}

unint64_t TRespellManager::find(uint64_t a1, __int32 *a2, size_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  char v9;
  uint64_t v10;
  int v11;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3) - a4;
  if (!v5)
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3);
  v6 = a4;
  v9 = 0;
  do
  {
    v10 = v6 + (v5 >> 1);
    v11 = wcsncmp(a2, *(const __int32 **)(*(_QWORD *)(a1 + 40) + 24 * v10 + 8), a3);
    if (v11 < 1)
    {
      v5 >>= 1;
    }
    else
    {
      v6 = v10 + 1;
      v5 += ~(v5 >> 1);
    }
    if (v11 < 1)
      v9 |= v11 == 0;
  }
  while (v5);
  if ((v9 & 1) == 0)
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3);
  return v6;
}

void TRespellManager::addWords(TRespellManager *this, TVertex *a2, TGraph *a3, TSegmenter *a4)
{
  TGraph *v4;
  unint64_t v6;
  char *v7;
  char v8;
  uint64_t Segment;
  const __int32 **v10;
  int v11;
  uint64_t v12;
  int *v13;
  uint64_t v15;
  unsigned int *v16;
  int v17;
  unsigned __int8 v18;
  BOOL v19;
  size_t v20;
  __int32 *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  __int32 *v26;
  signed int v27;
  unsigned __int8 v28;
  uint64_t PreviousSegment;
  uint64_t v30;
  const __int32 *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t ActiveConfigHandle;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ValidConfig;
  uint64_t v39;
  uint64_t Score;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  const __int32 *v45;
  _QWORD *v46;
  _QWORD *v47;
  TLocaleInfo *v48;
  TLocaleInfo *v49;
  _QWORD *v50;
  unsigned int *v51;
  _QWORD *v52;
  char *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  __int32 *v60;
  _QWORD *v61;
  TLocaleInfo *v62;
  __int32 v63;
  unsigned __int8 v64;
  int v66;
  unsigned __int8 v67;
  const __int32 *v68;
  int v69;
  unsigned __int8 v70;
  __int32 v71;
  unsigned __int8 v72;
  uint64_t v73;
  TLocaleInfo *v74;
  TLocaleInfo *v75;
  TLocaleInfo *v76;
  TLocaleInfo *v77;
  TLocaleInfo *v78;
  char v80;
  char *v81;
  BOOL v83;
  char *v84;
  int v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  const __int32 *v91;
  __int128 v92;
  _BYTE v93[1024];
  char v94;
  __int32 *v95;
  __int128 v96;
  _BYTE v97[785];
  char v98;
  _BYTE *v99;
  __int128 v100;
  _BYTE v101[1024];
  char v102;
  char *v103;
  char *v104;
  uint64_t v105;

  v4 = a3;
  v6 = 0;
  v80 = 0;
  v7 = (char *)*((_QWORD *)a2 + 2);
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v99 = v101;
  v81 = v7;
  v100 = xmmword_209A57DD0;
  v102 = 1;
  v83 = 1;
  v84 = v7;
  v8 = 1;
  do
  {
    Segment = TSegmenter::getSegment(a4, v84);
    v10 = (const __int32 **)Segment;
    if (!Segment)
      break;
    v11 = *(_DWORD *)(Segment + 24);
    if (v11 == 5)
      break;
    v84 = *(char **)(Segment + 8);
    if (v11)
      goto LABEL_5;
    if (!*((_QWORD *)&v100 + 1))
    {
      v17 = **(_DWORD **)Segment;
      if ((v18 & 1) == 0
      {
        v77 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v77);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v77;
        v4 = a3;
      }
      if (v17 <= 8202)
      {
        if (v17 != 32 && v17 != 160)
          goto LABEL_5;
      }
      else
      {
        v19 = v17 == 8203 || v17 == 65279;
        if (!v19 && v17 != 12288)
          goto LABEL_5;
      }
      if (!*((_QWORD *)&v100 + 1))
        break;
    }
    v63 = **v10;
    if ((v64 & 1) == 0
    {
      v74 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v74);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v74;
      v4 = a3;
    }
    if (v63 == 13 || v63 == 10)
    {
      v66 = *(_DWORD *)v99;
      if ((v67 & 1) == 0
      {
        v75 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v75);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v75;
        v4 = a3;
      }
      if (v66 == 13 || v66 == 10)
      {
LABEL_5:
        v12 = 0;
        v13 = (int *)*v10;
        while (v13[v12++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)&v99, *((unint64_t *)&v100 + 1), v13, v12 - 1);
        if ((v8 & 1) != 0)
        {
          v95 = (__int32 *)v97;
          v96 = xmmword_209A57DD0;
          v98 = 1;
          v15 = *((_QWORD *)this + 12);
          if (*((_QWORD *)&v100 + 1) >= (unint64_t)v100)
          {
            if (v102)
            {
              LODWORD(v91) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v99, *((unint64_t *)&v100 + 1), (int *)&v91, 1uLL);
              v16 = (unsigned int *)v99;
              --*((_QWORD *)&v100 + 1);
            }
            else
            {
              v16 = (unsigned int *)v99;
              if ((_QWORD)v100)
                *(_DWORD *)&v99[4 * v100 - 4] = 0;
            }
          }
          else
          {
            v16 = (unsigned int *)v99;
            *(_DWORD *)&v99[4 * *((_QWORD *)&v100 + 1)] = 0;
          }
          TCollation::collate((_QWORD *)(v15 + 256), v16, (uint64_t)&v95);
          v20 = *((_QWORD *)&v96 + 1);
          if (*((_QWORD *)&v96 + 1) >= (unint64_t)v96)
          {
            if (v98)
            {
              LODWORD(v91) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), (int *)&v91, 1uLL);
              v21 = v95;
              v20 = --*((_QWORD *)&v96 + 1);
            }
            else
            {
              v21 = v95;
              if ((_QWORD)v96)
                v95[(_QWORD)v96 - 1] = 0;
            }
          }
          else
          {
            v21 = v95;
            v95[*((_QWORD *)&v96 + 1)] = 0;
          }
          v22 = TRespellManager::find((uint64_t)this, v21, v20, v6);
          v6 = v22;
          v23 = *((_QWORD *)this + 5);
          if (v22 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 6) - v23) >> 3))
          {
            v8 = 0;
          }
          else
          {
            v24 = 24 * v22;
            while (1)
            {
              v25 = *((_QWORD *)&v96 + 1);
              if (*((_QWORD *)&v96 + 1) >= (unint64_t)v96)
              {
                if (v98)
                {
                  LODWORD(v91) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), (int *)&v91, 1uLL);
                  v26 = v95;
                  v25 = --*((_QWORD *)&v96 + 1);
                }
                else
                {
                  v26 = v95;
                  if ((_QWORD)v96)
                    v95[(_QWORD)v96 - 1] = 0;
                }
              }
              else
              {
                v26 = v95;
                v95[*((_QWORD *)&v96 + 1)] = 0;
              }
              if (wcsncmp(v26, *(const __int32 **)(v23 + v24 + 8), v25) < 0)
              {
LABEL_70:
                v8 = 0;
                goto LABEL_72;
              }
              if (*(_DWORD *)(*(_QWORD *)(v23 + v24 + 8) + 4 * *((_QWORD *)&v96 + 1)))
                break;
              if (*(_DWORD *)v99 != 45)
                goto LABEL_45;
              v27 = *((_DWORD *)v99 + 1);
              if ((v28 & 1) == 0
              {
                v48 = (TLocaleInfo *)operator new();
                TLocaleInfo::TLocaleInfo(v48);
                TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v48;
              }
              if (!TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v27)
                || (PreviousSegment = TSegmenter::getPreviousSegment(a4, v81)) != 0
                && (*(_DWORD *)(PreviousSegment + 24) - 1) <= 1)
              {
LABEL_45:
                v30 = *((_QWORD *)this + 12);
                if (*((_QWORD *)&v100 + 1) >= (unint64_t)v100)
                {
                  if (v102)
                  {
                    LODWORD(v91) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&v99, *((unint64_t *)&v100 + 1), (int *)&v91, 1uLL);
                    v31 = (const __int32 *)v99;
                    --*((_QWORD *)&v100 + 1);
                  }
                  else
                  {
                    v31 = (const __int32 *)v99;
                    if ((_QWORD)v100)
                      *(_DWORD *)&v99[4 * v100 - 4] = 0;
                  }
                }
                else
                {
                  v31 = (const __int32 *)v99;
                  *(_DWORD *)&v99[4 * *((_QWORD *)&v100 + 1)] = 0;
                }
                v32 = *(unsigned int **)(v23 + v24);
                v33 = *((_QWORD *)this + 13);
                ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v33 + 16464));
                v35 = *(int *)(v33 + 4 * TParam::getValidConfig((TParam *)(v33 + 16464), ActiveConfigHandle) + 16624);
                v36 = *((_QWORD *)this + 13);
                v37 = TParam::getActiveConfigHandle((TParam *)(v36 + 16112));
                ValidConfig = TParam::getValidConfig((TParam *)(v36 + 16112), v37);
                Score = TLexicon::makeScore(v30, v31, v32, v35, *(int *)(v36 + 4 * ValidConfig + 16272));
                if ((Score & 0x35) == 0)
                {
                  v41 = v39;
                  v91 = (const __int32 *)v93;
                  v92 = xmmword_209A57DD0;
                  v94 = 1;
                  v42 = *(_QWORD *)(v23 + v24 + 16);
                  if ((v43 & 1) == 0
                  {
                    v49 = (TLocaleInfo *)operator new();
                    TLocaleInfo::TLocaleInfo(v49);
                    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v49;
                  }
                  TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v42, (uint64_t)&v91, 1);
                  v44 = *((_QWORD *)this + 12);
                  if (*((_QWORD *)&v92 + 1) >= (unint64_t)v92)
                  {
                    if (v94)
                    {
                      v87 = 0;
                      TBuffer<wchar_t>::insert((uint64_t)&v91, *((unint64_t *)&v92 + 1), &v87, 1uLL);
                      v45 = v91;
                      --*((_QWORD *)&v92 + 1);
                    }
                    else
                    {
                      v45 = v91;
                      if ((_QWORD)v92)
                        v91[v92 - 1] = 0;
                    }
                  }
                  else
                  {
                    v45 = v91;
                    v91[*((_QWORD *)&v92 + 1)] = 0;
                  }
                  v46 = TLexicon::addTempWord(v44, 0, dword_209A6ECD4, 0, v45);
                  v47 = TGraph::addVertex(a3, v84);
                  v87 = 2;
                  v88 = v46;
                  v89 = Score;
                  v90 = v41;
                  TGraph::addEdge(a3, (uint64_t)a2, v47, (uint64_t)&v87);
                  if (v94 && v91 != (const __int32 *)v93 && v91)
                    MEMORY[0x20BD149A8]();
                }
              }
              ++v6;
              v23 = *((_QWORD *)this + 5);
              v24 += 24;
              if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 6) - v23) >> 3))
                goto LABEL_70;
            }
            v8 = 1;
LABEL_72:
            v4 = a3;
          }
          if (v98 && v95 != (__int32 *)v97 && v95)
            MEMORY[0x20BD149A8]();
        }
        else
        {
          v8 = 0;
        }
        if (v83)
        {
          std::vector<TRegExpMatch>::resize((uint64_t)&v103, 0);
          v50 = (_QWORD *)*((_QWORD *)this + 11);
          if (*((_QWORD *)&v100 + 1) >= (unint64_t)v100)
          {
            if (v102)
            {
              LODWORD(v95) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v99, *((unint64_t *)&v100 + 1), (int *)&v95, 1uLL);
              v51 = (unsigned int *)v99;
              --*((_QWORD *)&v100 + 1);
            }
            else
            {
              v51 = (unsigned int *)v99;
              if ((_QWORD)v100)
                *(_DWORD *)&v99[4 * v100 - 4] = 0;
            }
          }
          else
          {
            v51 = (unsigned int *)v99;
            *(_DWORD *)&v99[4 * *((_QWORD *)&v100 + 1)] = 0;
          }
          v83 = TRegExp::match(v50, v51, 3, (uint64_t)&v103);
          if (v103 != v104)
          {
            v52 = TGraph::addVertex(v4, v84);
            v53 = v103;
            if (v104 != v103)
            {
              v54 = v52;
              v55 = 0;
              v56 = 16;
              do
              {
                v95 = (__int32 *)v97;
                v96 = xmmword_209A57DD0;
                v98 = 1;
                v57 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * *(_QWORD *)&v53[v56]);
                if ((v58 & 1) == 0
                {
                  v62 = (TLocaleInfo *)operator new();
                  TLocaleInfo::TLocaleInfo(v62);
                  TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v62;
                }
                TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v57, (uint64_t)&v95, 1);
                v59 = *((_QWORD *)this + 12);
                if (*((_QWORD *)&v96 + 1) >= (unint64_t)v96)
                {
                  if (v98)
                  {
                    LODWORD(v91) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), (int *)&v91, 1uLL);
                    v60 = v95;
                    --*((_QWORD *)&v96 + 1);
                  }
                  else
                  {
                    v60 = v95;
                    if ((_QWORD)v96)
                      v95[(_QWORD)v96 - 1] = 0;
                  }
                }
                else
                {
                  v60 = v95;
                  v95[*((_QWORD *)&v96 + 1)] = 0;
                }
                v61 = TLexicon::addTempWord(v59, 0, dword_209A6ECD4, 0, v60);
                LODWORD(v91) = 2;
                v92 = (unint64_t)v61;
                v93[0] = 0;
                TGraph::addEdge(a3, (uint64_t)a2, v54, (uint64_t)&v91);
                if (v98 && v95 != (__int32 *)v97 && v95)
                  MEMORY[0x20BD149A8]();
                ++v55;
                v53 = v103;
                v56 += 24;
              }
              while (v55 < 0xAAAAAAAAAAAAAAABLL * ((v104 - v103) >> 3));
              v4 = a3;
            }
          }
        }
        else
        {
          v83 = 0;
        }
        continue;
      }
    }
    if (!*((_QWORD *)&v100 + 1))
      break;
    v68 = *v10;
    v69 = **v10;
    if (v69 == 9)
      break;
    if (*(_DWORD *)&v99[4 * *((_QWORD *)&v100 + 1) - 4] != 32)
    {
      if ((v70 & 1) == 0
      {
        v78 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v78);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v78;
        v4 = a3;
      }
      if (v69 <= 8202)
      {
        if (v69 != 32 && v69 != 160)
        {
LABEL_141:
          v68 = *v10;
          goto LABEL_127;
        }
      }
      else if (v69 != 8203 && v69 != 12288 && v69 != 65279)
      {
        goto LABEL_141;
      }
      v68 = *v10;
      if (wcslen(*v10) > 2)
        break;
    }
LABEL_127:
    v71 = *v68;
    if ((v72 & 1) == 0
    {
      v76 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v76);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v76;
      v4 = a3;
    }
    if (v71 != 13 && v71 != 10)
      goto LABEL_136;
    if ((v80 & 1) != 0)
      break;
    if (*(_DWORD *)&v99[4 * *((_QWORD *)&v100 + 1) - 4] == 45)
    {
      v80 = 1;
    }
    else
    {
      v73 = TSegmenter::getSegment(a4, v84);
      if (!v73 || *(_DWORD *)(v73 + 24) == 5)
        break;
      v80 = 1;
      if (**(_DWORD **)v73 != 45)
      {
LABEL_136:
        if (*(_DWORD *)&v99[4 * *((_QWORD *)&v100 + 1) - 4] != 32)
          TBuffer<wchar_t>::insert((uint64_t)&v99, *((unint64_t *)&v100 + 1), (int *)&unk_209A6ECCC, 1uLL);
      }
    }
  }
  while (v83 || (v8 & 1) != 0);
  if (v102)
  {
    if (v99 != v101 && v99 != 0)
      MEMORY[0x20BD149A8]();
  }
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
}

void sub_20987CA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  void *v14;

  MEMORY[0x20BD149A8](v10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0xCE8]))
  {
    if (STACK[0x8D0] != a10 && STACK[0x8D0] != 0)
      MEMORY[0x20BD149A8]();
  }
  v14 = *(void **)(v11 - 112);
  if (v14)
  {
    *(_QWORD *)(v11 - 104) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

void std::vector<TRegExpMatch>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<TRegExpMatch>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void TRespellManager::expandWord(uint64_t a1, TGraph *a2, uint64_t a3, int a4)
{
  TVertex *v7;
  TVertex *v8;
  _QWORD *v9;
  TVertex *v10;
  _QWORD *v11;
  TVertex *v12;
  const __int32 *v13;
  size_t v14;
  unsigned __int8 v15;
  const __int32 **v16;
  TLocaleInfo *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;

  v8 = *(TVertex **)(a3 + 16);
  v7 = *(TVertex **)(a3 + 24);
  if (a4)
  {
    v9 = TLexicon::addTempWord(*(_QWORD *)(a1 + 96), 0, dword_209A6ECF4, 0, 0);
    v10 = (TVertex *)TGraph::addVertex(a2, 0);
    v18 = 6;
    v19 = v9;
    v20 = 0;
    v21 = 0;
    TGraph::addEdge(a2, (uint64_t)v8, v10, (uint64_t)&v18);
    v11 = TLexicon::addTempWord(*(_QWORD *)(a1 + 96), 0, dword_209A6ED44, 0, 0);
    v12 = (TVertex *)TGraph::addVertex(a2, 0);
    v18 = 6;
    v19 = v11;
    v20 = 0;
    v21 = 0;
    TGraph::addEdge(a2, (uint64_t)v12, v7, (uint64_t)&v18);
    v7 = v12;
    v8 = v10;
  }
  v13 = **(const __int32 ***)(a3 + 56);
  LOBYTE(v18) = 0;
  v14 = wcslen(v13);
  {
    v17 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v17);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v17;
  }
  v16 = (const __int32 **)TLocaleInfo::stringToULong(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (uint64_t)&v13[v14 + 1], (BOOL *)&v18, 1);
  addSequence(v16, v8, v7, a2, *(TLexicon **)(a1 + 96), 0, 0, 0);
  TGraph::deleteEdge((uint64_t)a2, a3);
}

void sub_20987CE04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRespellManager::TRespellMap const&,TRespellManager::TRespellMap const&),TRespellManager::TRespellMap*,false>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRespellManager::TRespellMap const&,TRespellManager::TRespellMap const&),TRespellManager::TRespellMap*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 24);
      if ((*a3)((__int128 *)(a2 - 24), (__int128 *)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v11;
        *v8 = v10;
        *(_QWORD *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      v12 = (__int128 *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v13, v12))
    {
      v19 = *(_OWORD *)v13;
      v20 = *(_QWORD *)(v13 + 16);
      v16 = v14;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (((*a3)(&v19, (__int128 *)(v17 + 24)) & 1) == 0)
        {
          v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_OWORD *)v18 = v19;
      *(_QWORD *)(v18 + 16) = v20;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (__int128 *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

void std::vector<TRegExpMatch>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v12[24 * v11];
    v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

uint64_t MrecInitLibrary_channel(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_channel_channel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_snr_channel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_utteranc_channel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughChannel(void)
{
  MrecInitLibrarySet_throughSigproc();
  MrecInitLibrarySet_throughAudiosrc();
  return MrecInitLibrary_channel();
}

uint64_t getCwidForIndex(int a1, unsigned int a2)
{
  if (a2 >> 21)
    return a2 & 0x3FFF | ((a2 >> 14) << 25);
  else
    return a2 | (a1 << 25);
}

uint64_t getIndexForCwid(int a1, unsigned int a2)
{
  int v2;

  if (a2 >> 25 == a1)
    v2 = 0;
  else
    v2 = (a2 >> 25 << 14) | 0x200000;
  return v2 + (a2 & 0xFFFFFF);
}

uint64_t TreePhoneRec::sizeObject(uint64_t a1, int a2)
{
  int v2;

  do
  {
    v2 = a2;
    a2 = 0;
  }
  while (v2 == 2);
  if (v2 == 3)
    return 0;
  else
    return 18;
}

uint64_t TreePhoneRec::setSingleEndingWord(uint64_t this, int a2, unsigned __int16 a3)
{
  *(_WORD *)(this + 20) |= 0x6000u;
  *(_DWORD *)(this + 4) = a2 & 0x3FFFFF | (a3 << 22);
  return this;
}

uint64_t TreePhoneRec::setMultipleEndingWords(uint64_t this, int a2, unsigned __int16 a3)
{
  *(_WORD *)(this + 20) |= 0x2000u;
  *(_DWORD *)(this + 4) = a2 & 0x3FFFFF | (a3 << 22);
  return this;
}

void TTokenizer::TTokenizer(TTokenizer *this, const TDataManager *a2, TDataManager *a3, TLexicon *a4)
{
  TClitics **v7;
  TTokenizerParamManager *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  TDataManager **v12;
  int IntVar;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int32 *v19;
  std::wstring *v20;
  TClitics *v21;
  TNewWords *v22;
  uint64_t v23;
  _QWORD *Registry;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  _QWORD *exception;
  std::string *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  std::wstring v33;
  _BYTE __s[24];
  uint64_t v35;
  uint64_t v36[3];
  void *v37[2];
  uint64_t v38;

  *(_QWORD *)this = &off_24C2137D0;
  *((_QWORD *)this + 1) = -1;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 7) = 0;
  v7 = (TClitics **)((char *)this + 56);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = a4;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v8 = (TTokenizerParamManager *)operator new();
  TTokenizerParamManager::TTokenizerParamManager(v8, (TLocaleInfo *)(*((_QWORD *)this + 5) + 240));
  *((_QWORD *)this + 3) = v8;
  *((_QWORD *)this + 4) = a3;
  *((_DWORD *)this + 30) = 0;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  v9 = *((_QWORD *)v8 + 17);
  *((_QWORD *)v8 + 17) = 1;
  v10 = *((_QWORD *)this + 5);
  ++*(_DWORD *)(v10 + 360);
  v11 = (const char *)(v10 + 72);
  if (*(char *)(v10 + 95) < 0)
    v11 = *(const char **)v11;
  v12 = (TDataManager **)TInputModel::TInputModel((TInputModel *)v36, a2, a3, 0, v11);
  IntVar = TInputModel::getIntVar(v12, "TknVersion", 1);
  if (IntVar != 1)
  {
    tknPrintf("Error: %llu : Expected %s in range [%llu,%llu]\n", v14, v15, v16, v17, IntVar, "TknVersion", 1, 1);
    std::string::basic_string[abi:ne180100]<0>(&v31, &byte_209A88803);
    *(_QWORD *)__s = aPpx;
    if (SHIBYTE(v32) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__s[8], (const std::string::value_type *)v31, *((std::string::size_type *)&v31 + 1));
    }
    else
    {
      *(_OWORD *)&__s[8] = v31;
      v35 = v32;
    }
    *(_QWORD *)__s = &unk_24C214BA0;
    if (v35 >= 0)
      v27 = &__s[8];
    else
      v27 = *(const char **)&__s[8];
    conditionalAssert(v27, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/tokenizer.cpp", 135, v25, v26);
    *(_QWORD *)__s = aPpx;
    if (SHIBYTE(v35) < 0)
      operator delete(*(void **)&__s[8]);
    if (SHIBYTE(v32) < 0)
      operator delete((void *)v31);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__s, &byte_209A88803);
    *exception = aPpx;
    v29 = (std::string *)(exception + 1);
    if ((__s[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
    }
    else
    {
      v30 = *(_OWORD *)__s;
      exception[3] = *(_QWORD *)&__s[16];
      *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
    }
    *exception = &unk_24C214BA0;
  }
  if (!*((_QWORD *)this + 4))
  {
    v18 = operator new();
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)v18 = v18 + 8;
    *((_QWORD *)this + 2) = v18;
    TDataSaver::load((uint64_t **)v18, a2, "TknGrammar", 0);
    TDataSaver::load(*((uint64_t ***)this + 2), a2, "TknDecompound", 0);
    TDataSaver::load(*((uint64_t ***)this + 2), a2, "TknMungeMap", 0);
    TDataSaver::load(*((uint64_t ***)this + 2), a2, "TknRespellMap", 0);
    TDataSaver::load(*((uint64_t ***)this + 2), a2, "TknPattern", 0);
  }
  if (TInputModel::isVar((TInputModel *)v36, "TknParam"))
    TInputModel::getStringVar(v36, (uint64_t)"TknParam", (uint64_t)v37);
  TTokenizerParamManager::initializeParamConfigs(*((TTokenizerParamManager **)this + 3));
  v19 = (__int32 *)TStringParam::get((TStringParam *)(*((_QWORD *)this + 3) + 10744));
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v33, v19);
  std::wstring::resize(&v33, *(_QWORD *)(*((_QWORD *)this + 5) + 384), 48);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v33;
  else
    v20 = (std::wstring *)v33.__r_.__value_.__r.__words[0];
  TStringParam::setOriginal((_QWORD *)(*((_QWORD *)this + 3) + 10744), *(_QWORD *)(*((_QWORD *)this + 3) + 136), (__int32 *)v20);
  if (TInputModel::isVar((TInputModel *)v36, "TknGrammar"))
    TInputModel::getStringVar(v36, (uint64_t)"TknGrammar", (uint64_t)v37);
  if (TInputModel::isVar((TInputModel *)v36, "TknDecompound"))
    TInputModel::getStringVar(v36, (uint64_t)"TknDecompound", (uint64_t)v37);
  if (TInputModel::isVar((TInputModel *)v36, "TknMungeMap"))
    TInputModel::getStringVar(v36, (uint64_t)"TknMungeMap", (uint64_t)v37);
  if (TInputModel::isVar((TInputModel *)v36, "TknRespellMap"))
    TInputModel::getStringVar(v36, (uint64_t)"TknRespellMap", (uint64_t)v37);
  v21 = (TClitics *)operator new();
  TClitics::TClitics(v21, *((TLexicon **)this + 5), *((TTokenizerParamManager **)this + 3));
  *v7 = v21;
  v22 = (TNewWords *)operator new();
  TNewWords::TNewWords(v22, *((TTokenizerParamManager **)this + 3));
  *((_QWORD *)this + 8) = v22;
  TLexicon::cleanCache(*((TLexicon **)this + 5));
  v23 = *((_QWORD *)this + 4);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  Registry = (_QWORD *)TRegisterable<TTokenizer>::getRegistry();
  *((_QWORD *)this + 1) = TBaseRegistry<TLatticeProcessor *>::registerInstance(Registry, (uint64_t)this);
  *((_QWORD *)v8 + 17) = v9;
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
}

void sub_20987E2E8()
{
  __break(1u);
}

void sub_20987E564()
{
  __cxa_end_catch();
  JUMPOUT(0x20987E56CLL);
}

uint64_t TTokenizer::freeMemory(TTokenizer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  void *v13;
  TDecompounder *v14;
  TClitics *v15;
  uint64_t inited;
  TPatternManager *v17;
  TRespellManager *v18;
  TMungeMapManager *v19;
  TDataSaver *v20;
  uint64_t v21;
  uint64_t result;

  v6 = *((_QWORD *)this + 12);
  if (*((_QWORD *)this + 13) != v6)
  {
    v7 = 0;
    do
    {
      v8 = v7 + 1;
      if (*(_QWORD *)(v6 + 8 * v7))
      {
        tknPrintf("Warning: result handle %llu is still alive on tokenizer destruction.\n", a2, a3, a4, a5, v7 + 1);
        v6 = *((_QWORD *)this + 12);
        v9 = *(_QWORD *)(v6 + 8 * v7);
        if (v9)
        {
          if (*(_BYTE *)(v9 + 344))
          {
            v10 = *(_QWORD *)(v9 + 64);
            if (v10 != v9 + 88 && v10 != 0)
              MEMORY[0x20BD149A8]();
          }
          v12 = *(void **)(v9 + 24);
          if (v12)
          {
            *(_QWORD *)(v9 + 32) = v12;
            operator delete(v12);
          }
          v13 = *(void **)v9;
          if (*(_QWORD *)v9)
          {
            *(_QWORD *)(v9 + 8) = v13;
            operator delete(v13);
          }
          MEMORY[0x20BD149A8](v9, 0x1030C404962A615);
          v6 = *((_QWORD *)this + 12);
        }
      }
      v7 = v8;
    }
    while (v8 < (*((_QWORD *)this + 13) - v6) >> 3);
  }
  v14 = (TDecompounder *)*((_QWORD *)this + 6);
  --*(_DWORD *)(*((_QWORD *)this + 5) + 360);
  if (v14)
  {
    TDecompounder::~TDecompounder(v14);
    MEMORY[0x20BD149A8]();
  }
  v15 = (TClitics *)*((_QWORD *)this + 7);
  if (v15)
  {
    TClitics::~TClitics(v15);
    MEMORY[0x20BD149A8]();
  }
  if (*((_QWORD *)this + 8))
  {
    inited = MrecInitModule_sdpres_sdapi();
    MEMORY[0x20BD149A8](inited, 0x70C40AF88C34ELL);
  }
  v17 = (TPatternManager *)*((_QWORD *)this + 9);
  if (v17)
  {
    TPatternManager::~TPatternManager(v17);
    MEMORY[0x20BD149A8]();
  }
  v18 = (TRespellManager *)*((_QWORD *)this + 10);
  if (v18)
  {
    TRespellManager::~TRespellManager(v18);
    MEMORY[0x20BD149A8]();
  }
  v19 = (TMungeMapManager *)*((_QWORD *)this + 11);
  if (v19)
  {
    TMungeMapManager::~TMungeMapManager(v19);
    MEMORY[0x20BD149A8]();
  }
  v20 = (TDataSaver *)*((_QWORD *)this + 2);
  if (v20)
  {
    TDataSaver::~TDataSaver(v20);
    MEMORY[0x20BD149A8]();
  }
  v21 = *((_QWORD *)this + 3);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *TRegisterable<TTokenizer>::~TRegisterable(_QWORD *a1)
{
  uint64_t *Registry;
  uint64_t v3;

  *a1 = &unk_24C214910;
  if (a1[1] != -1)
  {
    Registry = (uint64_t *)TRegisterable<TTokenizer>::getRegistry();
    v3 = *Registry;
    *(_QWORD *)(Registry[1] + 8 * a1[1] - 8) = 0;
    *Registry = v3 - 1;
  }
  return a1;
}

void TTokenizer::~TTokenizer(TTokenizer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;

  *(_QWORD *)this = &off_24C2137D0;
  TTokenizer::freeMemory(this, a2, a3, a4, a5);
  v6 = (void *)*((_QWORD *)this + 12);
  if (v6)
  {
    *((_QWORD *)this + 13) = v6;
    operator delete(v6);
  }
  TRegisterable<TTokenizer>::~TRegisterable(this);
}

{
  TTokenizer::~TTokenizer(this, a2, a3, a4, a5);
  JUMPOUT(0x20BD149A8);
}

uint64_t TTokenizer::save(TTokenizer *this, TDataManager *a2, TDataManager *a3)
{
  uint64_t v6;
  const char *v7;
  void *p_p;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  void *__p;
  uint64_t v18;
  unsigned __int8 v19;
  void *v20[2];
  uint64_t v21;
  _BYTE v22[16];
  unint64_t v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  void *v29;
  char v30;
  _QWORD v31[20];

  v31[19] = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 5);
  v7 = (const char *)(v6 + 72);
  if (*(char *)(v6 + 95) < 0)
    v7 = *(const char **)v7;
  TOutputModel::TOutputModel((TOutputModel *)v22, a2, a3, v7, *((const TDataManager **)this + 4));
  if (a2)
  {
    TDataManager::setIntVar(a2, "TknVersion");
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v24);
    TOutputStream::TOutputStream(v20, &v24, (uint64_t)"TknParam", *((_QWORD *)this + 5) + 240);
    TParamManager::save(*((_QWORD **)this + 3), (_QWORD **)v20, 0);
    std::stringbuf::str();
    if ((v19 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v19 & 0x80u) == 0)
      v9 = v19;
    else
      v9 = v18;
    (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(_QWORD *)a2 + 48))(a2, "TknParam", p_p, v9);
    if ((char)v19 < 0)
      operator delete(__p);
    if (v23 == 1)
    {
      v10 = (_QWORD *)*((_QWORD *)this + 2);
      if (v10)
        TDataSaver::save(v10, a2);
    }
    v24 = (const char *)*MEMORY[0x24BEDB800];
    *(const char **)((char *)&v24 + *((_QWORD *)v24 - 3)) = *(const char **)(MEMORY[0x24BEDB800] + 24);
    v25 = (const char *)(MEMORY[0x24BEDB848] + 16);
    if (v30 < 0)
      operator delete(v29);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD1496C](v31);
  }
  if (a3)
  {
    TDataManager::setIntVar(a3, "TknVersion");
    if (v23 >= 2)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v24);
      TOutputStream::TOutputStream(v20, &v24, (uint64_t)"TknParam", *((_QWORD *)this + 5) + 240);
      TParamManager::save(*((_QWORD **)this + 3), (_QWORD **)v20, 1);
      std::stringbuf::str();
      if ((v19 & 0x80u) == 0)
        v11 = &__p;
      else
        v11 = __p;
      if ((v19 & 0x80u) == 0)
        v12 = v19;
      else
        v12 = v18;
      (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(_QWORD *)a3 + 48))(a3, "TknParam", v11, v12);
      if ((char)v19 < 0)
        operator delete(__p);
      v13 = (_QWORD *)*((_QWORD *)this + 2);
      if (v13)
        TDataSaver::save(v13, a3);
      v24 = (const char *)*MEMORY[0x24BEDB800];
      *(const char **)((char *)&v24 + *((_QWORD *)v24 - 3)) = *(const char **)(MEMORY[0x24BEDB800] + 24);
      v25 = (const char *)(MEMORY[0x24BEDB848] + 16);
      if (v30 < 0)
        operator delete(v29);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x20BD1496C](v31);
    }
    if (!*((_QWORD *)this + 2))
    {
      v14 = 0;
      v20[0] = 0;
      v20[1] = 0;
      v24 = "TknGrammar";
      v25 = "TknDecompound";
      v26 = "TknMungeMap";
      v27 = "TknRespellMap";
      v28 = "TknPattern";
      v21 = 0;
      do
      {
        v15 = (uint64_t)(&v24)[v14];
        if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v15, 0, 0))
        {
          TDataManager::getStringVar(*((_QWORD *)this + 4), v15, (uint64_t)v20);
        }
        ++v14;
      }
      while (v14 != 5);
      if (SHIBYTE(v21) < 0)
        operator delete(v20[0]);
    }
  }
  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_20987EC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t TTokenizer::tokenize(uint64_t a1, char *a2, const char *a3, char *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t ActiveConfigHandle;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t PreviousSegment;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ValidConfig;
  uint64_t i;
  char *v31;
  uint64_t Segment;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  int *v37;
  uint64_t v39;
  int *v40;
  TPatternManager *v41;
  TRespellManager *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t OutEdge;
  uint64_t v50;
  BOOL v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  int **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  int **v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  TPatternManager *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  char v108;
  int v109[2];
  __int128 v110;
  _BYTE v111[1024];
  char v112;
  _QWORD v113[2];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[14];
  int v118[2];
  __int128 v119;
  _BYTE v120[1024];
  char v121;
  _QWORD v122[2];
  uint64_t v123;

  v7 = a5;
  v10 = *(_QWORD *)(a1 + 24);
  v99 = *(_QWORD *)(v10 + 136);
  v100 = v10;
  *(_QWORD *)(v10 + 136) = a5;
  v11 = *(_QWORD *)(a1 + 40) + 240;
  v122[0] = &off_24C214BF0;
  v122[1] = v11;
  v123 = 0;
  TResGraphMaker::clear((uint64_t)v122);
  if (a6)
    v12 = a6;
  else
    v12 = v122;
  v103 = v12;
  v13 = *(_QWORD *)(a1 + 24);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v13 + 144));
  if (*(_BYTE *)(v13 + TParam::getValidConfig((TParam *)(v13 + 144), ActiveConfigHandle) + 296))
    srand(1u);
  *(_QWORD *)v118 = v120;
  v119 = xmmword_209A57DD0;
  v121 = 1;
  if (a3 && *a3)
  {
    v15 = *(_QWORD *)(a1 + 40);
    v16 = TStringParam::get((TStringParam *)(*(_QWORD *)(a1 + 24) + 3752));
    TSegmenter::TSegmenter(v109, a3, v15 + 240, v16);
    v17 = *(_QWORD *)(a1 + 24);
    v18 = TParam::getActiveConfigHandle((TParam *)(v17 + 13960));
    *(_QWORD *)&v110 = *(int *)(v17 + 4 * TParam::getValidConfig((TParam *)(v17 + 13960), v18) + 14120);
    (*(void (**)(int *))(*(_QWORD *)v109 + 16))(v109);
    v19 = strlen(a3);
    PreviousSegment = TSegmenter::getPreviousSegment((TSegmenter *)v109, (char *)&a3[v19]);
    if (*(_DWORD *)(PreviousSegment + 24) != 5)
      TBuffer<wchar_t>::assign((uint64_t)v118, *(int **)PreviousSegment);
    TSegmenter::~TSegmenter((TSegmenter *)v109);
  }
  v21 = a2;
  v102 = v7;
  do
  {
    v22 = *(_QWORD *)(a1 + 40);
    v23 = TStringParam::get((TStringParam *)(*(_QWORD *)(a1 + 24) + 3752));
    TSegmenter::TSegmenter(v117, v21, v22 + 240, v23);
    v24 = *(_QWORD *)(a1 + 24);
    v25 = TParam::getActiveConfigHandle((TParam *)(v24 + 13960));
    v117[1] = *(int *)(v24 + 4 * TParam::getValidConfig((TParam *)(v24 + 13960), v25) + 14120);
    (*(void (**)(_QWORD *))(v117[0] + 16))(v117);
    v26 = v21;
    do
    {
      if (!*v26)
        break;
      v26 = *(char **)(TSegmenter::getSegment((TSegmenter *)v117, v26) + 8);
    }
    while (v26 - v21 <= 2500);
    v27 = *(_QWORD *)(a1 + 24);
    v28 = TParam::getActiveConfigHandle((TParam *)(v27 + 640));
    ValidConfig = TParam::getValidConfig((TParam *)(v27 + 640), v28);
    TGraph::TGraph((TGraph *)v113, v21, (TSegmenter *)v117, *(_BYTE *)(v27 + ValidConfig + 792));
    for (i = (uint64_t)TGraph::addVertex((TGraph *)v113, v21);
          ;
          i = TGraph::getNextVertex((TGraph *)v113, *(_QWORD *)(i + 24) + 1))
    {
      v31 = *(char **)(i + 16);
      if (!*v31)
        break;
      Segment = TSegmenter::getSegment((TSegmenter *)v117, v31);
      v33 = Segment;
      v34 = *(_QWORD *)(i + 16);
      if (v34 - (uint64_t)v21 >= 2501)
      {
        v35 = v116 != v115 && i == v114;
        if (v35
          && (!*(_DWORD *)(Segment + 24) || (unint64_t)(v34 - (_QWORD)v21) > 0x1388 || v34 != *(_QWORD *)(i + 24)))
        {
          goto LABEL_69;
        }
      }
      if (*(_DWORD *)(Segment + 24) == 5)
      {
        *(_QWORD *)v109 = v111;
        v110 = xmmword_209A57DD0;
        v112 = 1;
        TBuffer<wchar_t>::assign((uint64_t)v109, dword_209A6ED98);
        v36 = 0;
        v37 = *(int **)v33;
        while (v37[v36++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)v109, *((unint64_t *)&v110 + 1), v37, v36 - 1);
        v39 = *(_QWORD *)(a1 + 40);
        if (*((_QWORD *)&v110 + 1) >= (unint64_t)v110)
        {
          if (v112)
          {
            LODWORD(v105) = 0;
            TBuffer<wchar_t>::insert((uint64_t)v109, *((unint64_t *)&v110 + 1), (int *)&v105, 1uLL);
            v40 = *(int **)v109;
            --*((_QWORD *)&v110 + 1);
          }
          else
          {
            v40 = *(int **)v109;
            if ((_QWORD)v110)
              *(_DWORD *)(*(_QWORD *)v109 + 4 * v110 - 4) = 0;
          }
        }
        else
        {
          v40 = *(int **)v109;
          *(_DWORD *)(*(_QWORD *)v109 + 4 * *((_QWORD *)&v110 + 1)) = 0;
        }
        v56 = TLexicon::addTempWord(v39, 0, v40, 0, 0);
        v57 = TGraph::addVertex((TGraph *)v113, *(char **)(v33 + 8));
        LODWORD(v105) = 3;
        v106 = v56;
        v107 = 0;
        v108 = 0;
        TGraph::addEdge(v113, i, v57, (uint64_t)&v105);
        if (v112 && *(_BYTE **)v109 != v111)
        {
          if (*(_QWORD *)v109)
            MEMORY[0x20BD149A8]();
        }
      }
      else
      {
        v41 = *(TPatternManager **)(a1 + 72);
        if (v41)
          TPatternManager::addWords(v41, (TVertex *)i, (TGraph *)v113, (TSegmenter *)v117, v7);
        TTokenizer::addWords((TTokenizer *)a1, (TVertex *)i, (TGraph *)v113, (TSegmenter *)v117);
        v42 = *(TRespellManager **)(a1 + 80);
        if (v42)
          TRespellManager::addWords(v42, (TVertex *)i, (TGraph *)v113, (TSegmenter *)v117);
        if (*(_QWORD *)(a1 + 48))
        {
          v43 = *(_QWORD *)(a1 + 24);
          v44 = TParam::getActiveConfigHandle((TParam *)(v43 + 12120));
          if (*(_BYTE *)(v43 + TParam::getValidConfig((TParam *)(v43 + 12120), v44) + 12272))
            TDecompounder::addWords(*(TDecompounder **)(a1 + 48), (char **)i, (TGraph *)v113, (TSegmenter *)v117);
        }
        if (*(_QWORD *)(a1 + 56))
        {
          v45 = *(_QWORD *)(a1 + 24);
          v46 = TParam::getActiveConfigHandle((TParam *)(v45 + 12368));
          if (*(_BYTE *)(v45 + TParam::getValidConfig((TParam *)(v45 + 12368), v46) + 12520))
            TClitics::addWords(*(TClitics **)(a1 + 56), (char **)i, (TGraph *)v113, (TSegmenter *)v117);
        }
        v47 = *(_QWORD *)(a1 + 64);
        if (v47)
          TNewWords::addWords(v47, (TVertex *)i, (TGraph *)v113, (TSegmenter *)v117, *(TLexicon **)(a1 + 40));
        v48 = TGraph::addVertex((TGraph *)v113, *(char **)(v33 + 8));
        OutEdge = TVertex::getOutEdge(i);
        if (OutEdge)
        {
          v50 = *(_QWORD *)(OutEdge + 64);
          v51 = v50 != 0;
          if (v50)
          {
            while (1)
            {
              OutEdge = *(_QWORD *)(OutEdge + 8);
              if (!OutEdge)
                break;
              if (!*(_BYTE *)(OutEdge + 32))
              {
                v52 = 0;
                v53 = *(_QWORD *)(OutEdge + 64);
                v51 = v53 != 0;
                if (!v53)
                  goto LABEL_54;
              }
            }
            v52 = v51;
          }
          else
          {
            v52 = 0;
          }
        }
        else
        {
          v52 = 1;
        }
LABEL_54:
        v54 = TVertex::getInEdge((uint64_t)v48);
        if (v54)
        {
LABEL_55:
          if (*(_QWORD *)(v54 + 64))
          {
            while (1)
            {
              v54 = *(_QWORD *)v54;
              if (!v54)
                break;
              if (!*(_BYTE *)(v54 + 32))
                goto LABEL_55;
            }
          }
          else if ((v52 & 1) == 0)
          {
            continue;
          }
        }
        v55 = TLexicon::addTempWord(*(_QWORD *)(a1 + 40), *(int **)v33, 0, 0, 0);
        v109[0] = 0;
        v110 = (unint64_t)v55;
        v111[0] = 0;
        TGraph::addEdge(v113, i, v48, (uint64_t)v109);
      }
    }
    i = v114;
LABEL_69:
    *(_QWORD *)v109 = v111;
    v110 = xmmword_209A57DD0;
    v112 = 1;
    v58 = (int **)TSegmenter::getSegment((TSegmenter *)v117, *(char **)(i + 24));
    if (v58)
    {
      TBuffer<wchar_t>::assign((uint64_t)v109, *v58);
    }
    else if (a4 && *a4)
    {
      v68 = *(_QWORD *)(a1 + 40);
      v69 = TStringParam::get((TStringParam *)(*(_QWORD *)(a1 + 24) + 3752));
      TSegmenter::TSegmenter(&v105, a4, v68 + 240, v69);
      v70 = *(_QWORD *)(a1 + 24);
      v71 = TParam::getActiveConfigHandle((TParam *)(v70 + 13960));
      v106 = (_QWORD *)*(int *)(v70 + 4 * TParam::getValidConfig((TParam *)(v70 + 13960), v71) + 14120);
      (*(void (**)(uint64_t *))(v105 + 16))(&v105);
      v72 = (int **)TSegmenter::getSegment((TSegmenter *)&v105, a4);
      TBuffer<wchar_t>::assign((uint64_t)v109, *v72);
      TSegmenter::~TSegmenter((TSegmenter *)&v105);
    }
    TTokenizer::deleteBadPaths((TTokenizer *)a1, (TGraph *)v113);
    if (v116 != v115)
    {
      v59 = 0;
      if ((unint64_t)((v116 - v115) >> 3) <= 1)
        v60 = 1;
      else
        v60 = (v116 - v115) >> 3;
      do
      {
        v61 = *(_QWORD *)(v115 + 8 * v59);
        if (!*(_BYTE *)(v61 + 32))
        {
          v62 = *(_QWORD *)(a1 + 80);
          if (v62)
          {
            if (*(_DWORD *)(v61 + 48) == 2)
            {
              v63 = *(_QWORD *)(a1 + 24);
              v64 = TParam::getActiveConfigHandle((TParam *)(v63 + 888));
              v65 = TParam::getValidConfig((TParam *)(v63 + 888), v64);
              TRespellManager::expandWord(v62, (TGraph *)v113, v61, *(unsigned __int8 *)(v63 + v65 + 1040));
            }
          }
        }
        ++v59;
      }
      while (v60 != v59);
    }
    if (*(_QWORD *)(a1 + 88))
    {
      TGraph::minimize((TGraph *)v113);
      v66 = *(_QWORD *)(a1 + 88);
      if (*((_QWORD *)&v119 + 1) >= (unint64_t)v119)
      {
        if (v121)
        {
          LODWORD(v105) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v118, *((unint64_t *)&v119 + 1), (int *)&v105, 1uLL);
          v67 = *(int **)v118;
          --*((_QWORD *)&v119 + 1);
        }
        else
        {
          v67 = *(int **)v118;
          if ((_QWORD)v119)
            *(_DWORD *)(*(_QWORD *)v118 + 4 * v119 - 4) = 0;
        }
      }
      else
      {
        v67 = *(int **)v118;
        *(_DWORD *)(*(_QWORD *)v118 + 4 * *((_QWORD *)&v119 + 1)) = 0;
      }
      if (*((_QWORD *)&v110 + 1) >= (unint64_t)v110)
      {
        if (v112)
        {
          LODWORD(v105) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v109, *((unint64_t *)&v110 + 1), (int *)&v105, 1uLL);
          v73 = *(int **)v109;
          --*((_QWORD *)&v110 + 1);
        }
        else
        {
          v73 = *(int **)v109;
          if ((_QWORD)v110)
            *(_DWORD *)(*(_QWORD *)v109 + 4 * v110 - 4) = 0;
        }
      }
      else
      {
        v73 = *(int **)v109;
        *(_DWORD *)(*(_QWORD *)v109 + 4 * *((_QWORD *)&v110 + 1)) = 0;
      }
      TMungeMapManager::munge(v66, (TGraph *)v113, v67, v73, (TSegmenter *)v117, 0);
    }
    v74 = *(_QWORD *)(a1 + 24);
    v75 = TParam::getActiveConfigHandle((TParam *)(v74 + 14312));
    if (*(_DWORD *)(v74 + 4 * TParam::getValidConfig((TParam *)(v74 + 14312), v75) + 14472))
      TTokenizer::deleteExpensivePaths((TTokenizer *)a1, (TGraph *)v113);
    v76 = (v116 - v115) >> 3;
    if (v116 != v115)
    {
      v77 = 0;
      if (v76 <= 1)
        v78 = 1;
      else
        v78 = (v116 - v115) >> 3;
      do
      {
        v79 = *(_QWORD *)(v115 + 8 * v77);
        if (!*(_BYTE *)(v79 + 32))
        {
          v80 = *(_QWORD *)(a1 + 72);
          if (v80)
          {
            if (*(_DWORD *)(v79 + 48) == 5)
            {
              v81 = *(_QWORD *)(a1 + 24);
              v82 = TParam::getActiveConfigHandle((TParam *)(v81 + 888));
              v83 = TParam::getValidConfig((TParam *)(v81 + 888), v82);
              TPatternManager::expandWord(v80, (TGraph *)v113, v79, *(unsigned __int8 *)(v81 + v83 + 1040));
            }
          }
        }
        ++v77;
      }
      while (v78 != v77);
    }
    if (*(_QWORD *)(a1 + 88))
    {
      TGraph::minimize((TGraph *)v113);
      v84 = *(_QWORD *)(a1 + 88);
      if (*((_QWORD *)&v119 + 1) >= (unint64_t)v119)
      {
        if (v121)
        {
          LODWORD(v105) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v118, *((unint64_t *)&v119 + 1), (int *)&v105, 1uLL);
          v85 = *(int **)v118;
          --*((_QWORD *)&v119 + 1);
        }
        else
        {
          v85 = *(int **)v118;
          if ((_QWORD)v119)
            *(_DWORD *)(*(_QWORD *)v118 + 4 * v119 - 4) = 0;
        }
      }
      else
      {
        v85 = *(int **)v118;
        *(_DWORD *)(*(_QWORD *)v118 + 4 * *((_QWORD *)&v119 + 1)) = 0;
      }
      if (*((_QWORD *)&v110 + 1) >= (unint64_t)v110)
      {
        if (v112)
        {
          LODWORD(v105) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v109, *((unint64_t *)&v110 + 1), (int *)&v105, 1uLL);
          v86 = *(int **)v109;
          --*((_QWORD *)&v110 + 1);
        }
        else
        {
          v86 = *(int **)v109;
          if ((_QWORD)v110)
            *(_DWORD *)(*(_QWORD *)v109 + 4 * v110 - 4) = 0;
        }
      }
      else
      {
        v86 = *(int **)v109;
        *(_DWORD *)(*(_QWORD *)v109 + 4 * *((_QWORD *)&v110 + 1)) = 0;
      }
      TMungeMapManager::munge(v84, (TGraph *)v113, v85, v86, (TSegmenter *)v117, v76);
    }
    TGraph::minimize((TGraph *)v113);
    v87 = *(_QWORD *)(a1 + 24);
    v88 = TParam::getActiveConfigHandle((TParam *)(v87 + 15264));
    if (*(_BYTE *)(v87 + TParam::getValidConfig((TParam *)(v87 + 15264), v88) + 15416))
      TTokenizer::addClones((TTokenizer *)a1, (TGraph *)v113);
    v89 = *(_QWORD *)(a1 + 24);
    v90 = TParam::getActiveConfigHandle((TParam *)(v89 + 17872));
    if (*(_BYTE *)(v89 + TParam::getValidConfig((TParam *)(v89 + 17872), v90) + 18024))
      TTokenizer::chooseBestPath((TTokenizer *)a1, (TGraph *)v113);
    (*(void (**)(_QWORD *, _QWORD *, int64_t))(*v103 + 16))(v103, v113, v21 - a2);
    v91 = *(_BYTE **)(v114 + 16);
    v92 = *v91;
    if (*v91)
    {
      TBuffer<wchar_t>::resize((uint64_t)v118, 0);
      v93 = TSegmenter::getPreviousSegment((TSegmenter *)v117, *(char **)(v114 + 16));
      if (*(_DWORD *)(v93 + 24) != 5)
        TBuffer<wchar_t>::assign((uint64_t)v118, *(int **)v93);
      v21 = *(char **)(v114 + 24);
    }
    TLexicon::cleanCache(*(TLexicon **)(a1 + 40));
    v94 = *(_QWORD *)(a1 + 64);
    if (v94)
      *(_QWORD *)(v94 + 40) = 0;
    v95 = *(TPatternManager **)(a1 + 72);
    if (v95)
      TPatternManager::clear(v95);
    v7 = v102;
    if (v112 && *(_BYTE **)v109 != v111 && *(_QWORD *)v109)
      MEMORY[0x20BD149A8]();
    TGraph::~TGraph((TGraph *)v113);
    TSegmenter::~TSegmenter((TSegmenter *)v117);
  }
  while (v92);
  if (v103 == v122)
  {
    v97 = v123;
    v123 = 0;
    TResGraphMaker::clear((uint64_t)v122);
    v96 = TTokenizer::registerResult((_QWORD *)a1, v97);
  }
  else
  {
    v96 = -1;
  }
  if (v121 && *(_BYTE **)v118 != v120 && *(_QWORD *)v118)
    MEMORY[0x20BD149A8]();
  v122[0] = &off_24C214BF0;
  TResGraphMaker::clear((uint64_t)v122);
  *(_QWORD *)(v100 + 136) = v99;
  return v96;
}

void sub_20987F82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;

  TSegmenter::~TSegmenter((TSegmenter *)&a34);
  if (LOBYTE(STACK[0xA08]))
  {
    if (STACK[0x5F0] != a10 && STACK[0x5F0] != 0)
      MEMORY[0x20BD149A8]();
  }
  TResGraphMaker::~TResGraphMaker((TResGraphMaker *)(v34 - 112));
  *(_QWORD *)(a12 + 136) = a11;
  _Unwind_Resume(a1);
}

void TTokenizer::addWords(TTokenizer *this, TVertex *a2, TGraph *a3, TSegmenter *a4)
{
  __int32 *v7;
  _QWORD *v8;
  char *v9;
  void **v10;
  uint64_t v11;
  uint64_t ActiveConfigHandle;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ValidConfig;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  signed int v22;
  unsigned __int8 v23;
  uint64_t PreviousSegment;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  int v30;
  unsigned __int8 v31;
  TLocaleInfo *v33;
  TLocaleInfo *v34;
  int v36;
  uint64_t v37;
  __int128 v38;
  void *__p[2];
  char v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  v7 = (__int32 *)TStringParam::get((TStringParam *)(*((_QWORD *)this + 3) + 10744));
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v7);
  v8 = (_QWORD *)*((_QWORD *)this + 5);
  v9 = (char *)*((_QWORD *)a2 + 2);
  if (v40 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  v11 = *((_QWORD *)this + 3);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v11 + 16464));
  v13 = *(int *)(v11 + 4 * TParam::getValidConfig((TParam *)(v11 + 16464), ActiveConfigHandle) + 16624);
  v14 = *((_QWORD *)this + 3);
  v15 = TParam::getActiveConfigHandle((TParam *)(v14 + 16112));
  ValidConfig = TParam::getValidConfig((TParam *)(v14 + 16112), v15);
  TLexicon::findHeadClonesCollatedPrefix(v8, v9, a4, v10, v13, *(int *)(v14 + 4 * ValidConfig + 16272), &v41);
  v17 = (char *)v41;
  if (v42 != v41)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0x253DF2000uLL;
    do
    {
      v21 = **(_DWORD ***)&v17[v18];
      if (*v21 != 45)
        goto LABEL_12;
      v22 = v21[1];
      if ((v23 & 1) == 0
      {
        v33 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v33);
        v20 = 0x253DF2000uLL;
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v33;
      }
      if (!TLocaleInfo::isAlpha(*(_QWORD *)(v20 + 1744), v22))
        goto LABEL_12;
      PreviousSegment = TSegmenter::getPreviousSegment(a4, *((char **)a2 + 2));
      v26 = PreviousSegment;
      if (PreviousSegment)
      {
        if (!*(_DWORD *)(PreviousSegment + 24))
        {
          v29 = v25;
          v30 = **(_DWORD **)PreviousSegment;
          if ((v31 & 1) == 0
          {
            v34 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v34);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v34;
          }
          if (v30 == 13 || v30 == 10)
          {
            v20 = 0x253DF2000;
            v26 = TSegmenter::getPreviousSegment(a4, v29);
            if (!v26)
              goto LABEL_13;
          }
          else
          {
            v20 = 0x253DF2000;
          }
        }
        if ((*(_DWORD *)(v26 + 24) - 1) <= 1)
        {
LABEL_12:
          v27 = TGraph::addVertex(a3, (char *)(*((_QWORD *)a2 + 2) + *(_QWORD *)((char *)v41 + v18 + 8)));
          v28 = *(_QWORD *)((char *)v41 + v18);
          v36 = 1;
          v37 = v28;
          v38 = *(_OWORD *)((char *)v41 + v18 + 16);
          TGraph::addEdge(a3, (uint64_t)a2, v27, (uint64_t)&v36);
        }
      }
LABEL_13:
      ++v19;
      v17 = (char *)v41;
      v18 += 32;
    }
    while (v19 < (v42 - (_BYTE *)v41) >> 5);
  }
  std::vector<TLexiconMatch>::resize((uint64_t)&v41, 0);
  if (v40 < 0)
    operator delete(__p[0]);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
}

void sub_20987FC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22)
{
  MEMORY[0x20BD149A8](a9, 0x1070C40ADD13FEBLL);
  if (a20 < 0)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void TTokenizer::deleteBadPaths(TTokenizer *this, TGraph *a2)
{
  uint64_t v4;
  uint64_t ActiveConfigHandle;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t OutEdge;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v114;
  unint64_t v115;
  unint64_t v116;
  TVertex *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  char v127;
  void *__p;
  uint64_t *v129;
  unint64_t v130;
  void *v131[3];
  _QWORD *v132;
  _BYTE *v133;
  uint64_t v134;

  v132 = 0;
  v133 = 0;
  v134 = 0;
  TGraph::topologicalSort(a2, (void **)&v132, 0);
  std::vector<TEdgeStat>::vector(v131, (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
  *((_BYTE *)v131[0] + 72 * *(_QWORD *)(*((_QWORD *)a2 + 8) + 40) + 64) = 1;
  __p = 0;
  v129 = 0;
  v130 = 0;
  v4 = *((_QWORD *)this + 3);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v4 + 15760));
  if (*(_DWORD *)(v4 + 4 * TParam::getValidConfig((TParam *)(v4 + 15760), ActiveConfigHandle) + 15920) != -1)
  {
    v6 = *((_QWORD *)this + 3) + 15760;
    v7 = ((char *)v129 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v8 = (uint64_t)(v130 - (_QWORD)__p) >> 2;
    if (v8 <= v7 + 1)
      v8 = v7 + 1;
    if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
      v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v130, v9);
    else
      v10 = 0;
    v11 = (uint64_t *)&v10[8 * v7];
    v12 = &v10[8 * v9];
    *v11 = v6;
    v13 = v11 + 1;
    v15 = (char *)__p;
    v14 = (char *)v129;
    if (v129 != __p)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v11 = v16;
      }
      while (v14 != v15);
      v14 = (char *)__p;
    }
    __p = v11;
    v129 = v13;
    v130 = (unint64_t)v12;
    if (v14)
      operator delete(v14);
    v129 = v13;
  }
  v17 = *((_QWORD *)this + 3);
  v18 = TParam::getActiveConfigHandle((TParam *)(v17 + 16816));
  if (*(_DWORD *)(v17 + 4 * TParam::getValidConfig((TParam *)(v17 + 16816), v18) + 16976) != -1)
  {
    v19 = *((_QWORD *)this + 3) + 16816;
    v20 = v129;
    if ((unint64_t)v129 >= v130)
    {
      v22 = ((char *)v129 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v22 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v23 = (uint64_t)(v130 - (_QWORD)__p) >> 2;
      if (v23 <= v22 + 1)
        v23 = v22 + 1;
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v130, v24);
      else
        v25 = 0;
      v26 = (uint64_t *)&v25[8 * v22];
      v27 = &v25[8 * v24];
      *v26 = v19;
      v21 = v26 + 1;
      v29 = (char *)__p;
      v28 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          v30 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *--v26 = v30;
        }
        while (v28 != v29);
        v28 = (char *)__p;
      }
      __p = v26;
      v129 = v21;
      v130 = (unint64_t)v27;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *v129 = v19;
      v21 = v20 + 1;
    }
    v129 = v21;
  }
  v31 = *((_QWORD *)this + 3);
  v32 = TParam::getActiveConfigHandle((TParam *)(v31 + 17168));
  if (*(_DWORD *)(v31 + 4 * TParam::getValidConfig((TParam *)(v31 + 17168), v32) + 17328) != -1)
  {
    v33 = *((_QWORD *)this + 3) + 17168;
    v34 = v129;
    if ((unint64_t)v129 >= v130)
    {
      v36 = ((char *)v129 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v36 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v37 = (uint64_t)(v130 - (_QWORD)__p) >> 2;
      if (v37 <= v36 + 1)
        v37 = v36 + 1;
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      if (v38)
        v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v130, v38);
      else
        v39 = 0;
      v40 = (uint64_t *)&v39[8 * v36];
      v41 = &v39[8 * v38];
      *v40 = v33;
      v35 = v40 + 1;
      v43 = (char *)__p;
      v42 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          v44 = *((_QWORD *)v42 - 1);
          v42 -= 8;
          *--v40 = v44;
        }
        while (v42 != v43);
        v42 = (char *)__p;
      }
      __p = v40;
      v129 = v35;
      v130 = (unint64_t)v41;
      if (v42)
        operator delete(v42);
    }
    else
    {
      *v129 = v33;
      v35 = v34 + 1;
    }
    v129 = v35;
  }
  v45 = *((_QWORD *)this + 3);
  v46 = TParam::getActiveConfigHandle((TParam *)(v45 + 17520));
  if (*(_DWORD *)(v45 + 4 * TParam::getValidConfig((TParam *)(v45 + 17520), v46) + 17680) != -1)
  {
    v47 = *((_QWORD *)this + 3) + 17520;
    v48 = v129;
    if ((unint64_t)v129 >= v130)
    {
      v50 = ((char *)v129 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v50 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v51 = (uint64_t)(v130 - (_QWORD)__p) >> 2;
      if (v51 <= v50 + 1)
        v51 = v50 + 1;
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      if (v52)
        v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v130, v52);
      else
        v53 = 0;
      v54 = (uint64_t *)&v53[8 * v50];
      v55 = &v53[8 * v52];
      *v54 = v47;
      v49 = v54 + 1;
      v57 = (char *)__p;
      v56 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          v58 = *((_QWORD *)v56 - 1);
          v56 -= 8;
          *--v54 = v58;
        }
        while (v56 != v57);
        v56 = (char *)__p;
      }
      __p = v54;
      v129 = v49;
      v130 = (unint64_t)v55;
      if (v56)
        operator delete(v56);
    }
    else
    {
      *v129 = v47;
      v49 = v48 + 1;
    }
    v129 = v49;
  }
  v59 = *((_QWORD *)this + 3);
  v60 = TParam::getActiveConfigHandle((TParam *)(v59 + 18120));
  if (*(_DWORD *)(v59 + 4 * TParam::getValidConfig((TParam *)(v59 + 18120), v60) + 18280) != -1)
  {
    v61 = *((_QWORD *)this + 3) + 18120;
    v62 = v129;
    if ((unint64_t)v129 >= v130)
    {
      v64 = ((char *)v129 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v64 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v65 = (uint64_t)(v130 - (_QWORD)__p) >> 2;
      if (v65 <= v64 + 1)
        v65 = v64 + 1;
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v66 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v66 = v65;
      if (v66)
        v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v130, v66);
      else
        v67 = 0;
      v68 = (uint64_t *)&v67[8 * v64];
      v69 = &v67[8 * v66];
      *v68 = v61;
      v63 = v68 + 1;
      v71 = (char *)__p;
      v70 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          v72 = *((_QWORD *)v70 - 1);
          v70 -= 8;
          *--v68 = v72;
        }
        while (v70 != v71);
        v70 = (char *)__p;
      }
      __p = v68;
      v129 = v63;
      v130 = (unint64_t)v69;
      if (v70)
        operator delete(v70);
    }
    else
    {
      *v129 = v61;
      v63 = v62 + 1;
    }
    v129 = v63;
  }
  v73 = *((_QWORD *)this + 3);
  v74 = TParam::getActiveConfigHandle((TParam *)(v73 + 18472));
  if (*(_DWORD *)(v73 + 4 * TParam::getValidConfig((TParam *)(v73 + 18472), v74) + 18632) != -1)
  {
    v75 = *((_QWORD *)this + 3) + 18472;
    v76 = v129;
    if ((unint64_t)v129 >= v130)
    {
      v78 = ((char *)v129 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v78 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v79 = (uint64_t)(v130 - (_QWORD)__p) >> 2;
      if (v79 <= v78 + 1)
        v79 = v78 + 1;
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v80 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v80 = v79;
      if (v80)
        v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v130, v80);
      else
        v81 = 0;
      v82 = (uint64_t *)&v81[8 * v78];
      v83 = &v81[8 * v80];
      *v82 = v75;
      v77 = v82 + 1;
      v85 = (char *)__p;
      v84 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          v86 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *--v82 = v86;
        }
        while (v84 != v85);
        v84 = (char *)__p;
      }
      __p = v82;
      v129 = v77;
      v130 = (unint64_t)v83;
      if (v84)
        operator delete(v84);
    }
    else
    {
      *v129 = v75;
      v77 = v76 + 1;
    }
    v129 = v77;
  }
  v87 = *((_QWORD *)this + 3);
  v88 = TParam::getActiveConfigHandle((TParam *)(v87 + 18824));
  if (*(_DWORD *)(v87 + 4 * TParam::getValidConfig((TParam *)(v87 + 18824), v88) + 18984) == -1)
  {
    v91 = v129;
  }
  else
  {
    v89 = *((_QWORD *)this + 3) + 18824;
    v90 = v129;
    if ((unint64_t)v129 >= v130)
    {
      v92 = ((char *)v129 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v92 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v93 = (uint64_t)(v130 - (_QWORD)__p) >> 2;
      if (v93 <= v92 + 1)
        v93 = v92 + 1;
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v94 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v94 = v93;
      if (v94)
        v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v130, v94);
      else
        v95 = 0;
      v96 = (uint64_t *)&v95[8 * v92];
      v97 = &v95[8 * v94];
      *v96 = v89;
      v91 = v96 + 1;
      v99 = (char *)__p;
      v98 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          v100 = *((_QWORD *)v98 - 1);
          v98 -= 8;
          *--v96 = v100;
        }
        while (v98 != v99);
        v98 = (char *)__p;
      }
      __p = v96;
      v129 = v91;
      v130 = (unint64_t)v97;
      if (v98)
        operator delete(v98);
    }
    else
    {
      *v129 = v89;
      v91 = v90 + 1;
    }
    v129 = v91;
  }
  v101 = 126 - 2 * __clz(((char *)v91 - (_BYTE *)__p) >> 3);
  *(_QWORD *)&v123 = sortPruningParams;
  if (v91 == __p)
    v102 = 0;
  else
    v102 = v101;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,false>((uint64_t)__p, v91, (uint64_t (**)(uint64_t, uint64_t))&v123, v102, 1);
  v103 = v132;
  if (v133 != (_BYTE *)v132)
  {
    v104 = 0;
    do
    {
      OutEdge = TVertex::getOutEdge(v103[v104]);
      if (OutEdge)
      {
LABEL_132:
        v127 = 0;
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        computeEdgeStat(OutEdge, *((_QWORD *)this + 3), (uint64_t *)&__p, (uint64_t)&v123);
        v106 = 0;
        v107 = *(_QWORD *)(*(_QWORD *)(OutEdge + 24) + 40);
        v108 = (char *)v131[0];
        v109 = (char *)v131[0] + 72 * *(_QWORD *)(*(_QWORD *)(OutEdge + 16) + 40);
        do
        {
          *(__int128 *)((char *)&v123 + v106) = (__int128)vaddq_s64(*(int64x2_t *)((char *)&v123 + v106), *(int64x2_t *)&v109[v106]);
          v106 += 16;
        }
        while (v106 != 64);
        v110 = &v108[72 * v107];
        if (v110[64])
        {
          v111 = 0;
          while (1)
          {
            v112 = *(_QWORD *)((char *)&v123 + v111);
            v113 = *(_QWORD *)&v110[v111];
            v114 = v112 >= v113;
            if (v112 != v113)
              break;
            v111 += 8;
            if (v111 == 56)
            {
              v114 = *((_QWORD *)&v126 + 1) >= *((_QWORD *)v110 + 7);
              break;
            }
          }
          if (v114)
            goto LABEL_141;
        }
        *((_OWORD *)v110 + 1) = v124;
        *((_OWORD *)v110 + 2) = v125;
        *((_OWORD *)v110 + 3) = v126;
        v110[64] = v127;
        *(_OWORD *)v110 = v123;
LABEL_141:
        while (1)
        {
          OutEdge = *(_QWORD *)(OutEdge + 8);
          if (!OutEdge)
            break;
          if (!*(_BYTE *)(OutEdge + 32))
            goto LABEL_132;
        }
      }
      ++v104;
      v103 = v132;
    }
    while (v104 < (v133 - (_BYTE *)v132) >> 3);
    if (v133 != (_BYTE *)v132)
    {
      v115 = 0;
      v116 = (v133 - (_BYTE *)v132) >> 3;
      do
      {
        v117 = (TVertex *)v103[v116 + ~v115];
        v118 = TVertex::getOutEdge((uint64_t)v117);
        if (v118)
        {
LABEL_148:
          v127 = 0;
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          computeEdgeStat(v118, *((_QWORD *)this + 3), (uint64_t *)&__p, (uint64_t)&v123);
          v119 = 0;
          v120 = *(_QWORD *)(*(_QWORD *)(v118 + 24) + 40);
          v121 = (char *)v131[0];
          v122 = (char *)v131[0] + 72 * *(_QWORD *)(*(_QWORD *)(v118 + 16) + 40);
          do
          {
            *(__int128 *)((char *)&v123 + v119) = (__int128)vaddq_s64(*(int64x2_t *)((char *)&v123 + v119), *(int64x2_t *)&v122[v119]);
            v119 += 16;
          }
          while (v119 != 64);
          if (memcmp(&v123, &v121[72 * v120], 0x40uLL))
            TGraph::deleteEdge((uint64_t)a2, v118);
          while (1)
          {
            v118 = *(_QWORD *)(v118 + 8);
            if (!v118)
              break;
            if (!*(_BYTE *)(v118 + 32))
              goto LABEL_148;
          }
        }
        if (v117 != *((TVertex **)a2 + 9) && !TVertex::getOutEdge((uint64_t)v117))
          TGraph::deleteVertex(a2, v117);
        ++v115;
        v103 = v132;
        v116 = (v133 - (_BYTE *)v132) >> 3;
      }
      while (v115 < v116);
    }
  }
  if (__p)
  {
    v129 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v131[0])
  {
    v131[1] = v131[0];
    operator delete(v131[0]);
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
}

void sub_209880678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  v24 = *(void **)(v22 - 88);
  if (v24)
  {
    *(_QWORD *)(v22 - 80) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void TTokenizer::deleteExpensivePaths(TTokenizer *this, TGraph *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  void ***v10;
  char *v11;
  char *v12;
  char *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ActiveConfigHandle;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t i;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  char *v49;
  int *begin;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t j;
  uint64_t v66;
  uint64_t NGramScore;
  uint64_t v68;
  std::vector<int>::pointer end;
  unint64_t v70;
  TVertex *v71;
  _DWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  std::vector<int> v76;
  uint64_t v77[2];
  uint64_t v78;
  _BYTE v79[32];
  void *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  void *v85[3];
  void *v86[3];
  void *v87[3];
  void *__p;
  char *v89;
  char *v90;
  _BYTE v91[40];
  char *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t *v97;

  v92 = 0;
  v93 = 0;
  v94 = 0;
  TGraph::topologicalSort(a2, (void **)&v92, 0);
  TAllocator::TAllocator((TAllocator *)v91, 2048);
  __p = 0;
  v89 = 0;
  v90 = 0;
  std::vector<unsigned long>::vector(v87, (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
  std::vector<unsigned long>::vector(v86, (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
  memset(v85, 0, sizeof(v85));
  v4 = v89;
  if (v89 >= v90)
  {
    v6 = (v89 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v6 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v7 = (v90 - (_BYTE *)__p) >> 2;
    if (v7 <= v6 + 1)
      v7 = v6 + 1;
    if ((unint64_t)(v90 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
      v8 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v8 = v7;
    if (v8)
      v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v90, v8);
    else
      v9 = 0;
    v10 = (void ***)&v9[8 * v6];
    v11 = &v9[8 * v8];
    *v10 = v85;
    v5 = (char *)(v10 + 1);
    v13 = (char *)__p;
    v12 = v89;
    if (v89 != __p)
    {
      do
      {
        v14 = (void **)*((_QWORD *)v12 - 1);
        v12 -= 8;
        *--v10 = v14;
      }
      while (v12 != v13);
      v12 = (char *)__p;
    }
    __p = v10;
    v89 = v5;
    v90 = v11;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_QWORD *)v89 = v85;
    v5 = v4 + 8;
  }
  v89 = v5;
  v15 = *((_QWORD *)a2 + 8);
  *((_QWORD *)v87[0] + *(_QWORD *)(v15 + 40)) = 0;
  *((_QWORD *)v86[0] + *(_QWORD *)(v15 + 40)) = 1;
  v82 = 0;
  v83 = 0;
  v84 = 1;
  v80 = &unk_24C219758;
  v81 = 0;
  v16 = *((_QWORD *)this + 3);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v16 + 14312));
  v18 = *(int *)(v16 + 4 * TParam::getValidConfig((TParam *)(v16 + 14312), ActiveConfigHandle) + 14472);
  v19 = *((_QWORD *)this + 3);
  v20 = TParam::getActiveConfigHandle((TParam *)(v19 + 14664));
  v21 = *(int *)(v19 + 4 * TParam::getValidConfig((TParam *)(v19 + 14664), v20) + 14824);
  if ((unint64_t)(v93 - v92) >= 9)
  {
    v22 = 1;
    do
    {
      THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::clear(&v80);
      v23 = TVertex::getInEdge(*(_QWORD *)&v92[8 * v22]);
      v24 = v86[0];
      if (v23)
      {
LABEL_20:
        v25 = *(_QWORD *)(*(_QWORD *)(v23 + 16) + 40);
        for (i = *((_QWORD *)v87[0] + v25); i < v24[v25]; ++i)
        {
          v27 = TAllocator::allocate((TAllocator *)v91, 24);
          v28 = v27;
          v29 = *((_QWORD *)__p + i);
          *v27 = v23;
          v27[1] = v29;
          if (v29)
            v29 = *(_QWORD *)(v29 + 16);
          v27[2] = v29 + v21;
          TDecodeLink::computeHistory(v27, (uint64_t)v79, v18);
          if (*(_QWORD *)v79)
            v28[2] += TLexicon::getNGramScore(*((TLexicon **)this + 5), *(const TWord **)&v79[24], *(const TWord **)&v79[16], *(const TWord **)&v79[8], *(const TWord **)v79, 0);
          v95 = *(_OWORD *)v79;
          v96 = *(_OWORD *)&v79[16];
          v97 = 0;
          THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::find((uint64_t)&v80, &v95, v77);
          if (v78)
          {
            if ((unint64_t)v28[2] < *(_QWORD *)(*(_QWORD *)(v78 + 40) + 16))
              *(_QWORD *)(v78 + 40) = v28;
          }
          else
          {
            v95 = *(_OWORD *)v79;
            v96 = *(_OWORD *)&v79[16];
            v97 = v28;
            THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::insert((uint64_t)&v80, &v95, v30, v31, v32, (uint64_t)&v76);
          }
          v24 = v86[0];
        }
        while (1)
        {
          v23 = *(_QWORD *)v23;
          if (!v23)
            break;
          if (!*(_BYTE *)(v23 + 32))
            goto LABEL_20;
        }
      }
      v33 = v89 - (_BYTE *)__p;
      v34 = *(_QWORD *)&v92[8 * v22];
      *((_QWORD *)v87[0] + *(_QWORD *)(v34 + 40)) = (v89 - (_BYTE *)__p) >> 3;
      v24[*(_QWORD *)(v34 + 40)] = v83 + (v33 >> 3);
      std::vector<TPItnTagHandle_fake **>::reserve(&__p, v24[*(_QWORD *)(v34 + 40)]);
      if (v82 >= 1)
      {
        v35 = v81;
        v36 = (unint64_t)&v81[v82];
        while (1)
        {
          v37 = (_QWORD *)*v35;
          if (*v35)
            break;
          if ((unint64_t)++v35 >= v36)
            goto LABEL_38;
        }
        v38 = v89;
        do
        {
LABEL_41:
          if (v38 >= v90)
          {
            v39 = (v38 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v39 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v40 = (v90 - (_BYTE *)__p) >> 2;
            if (v40 <= v39 + 1)
              v40 = v39 + 1;
            if ((unint64_t)(v90 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v41 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v41 = v40;
            if (v41)
              v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v90, v41);
            else
              v42 = 0;
            v43 = &v42[8 * v39];
            *(_QWORD *)v43 = v37[5];
            v38 = v43 + 8;
            v45 = (char *)__p;
            v44 = v89;
            if (v89 != __p)
            {
              do
              {
                v46 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *((_QWORD *)v43 - 1) = v46;
                v43 -= 8;
              }
              while (v44 != v45);
              v44 = (char *)__p;
            }
            __p = v43;
            v89 = v38;
            v90 = &v42[8 * v41];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *(_QWORD *)v38 = v37[5];
            v38 += 8;
          }
          v89 = v38;
          v37 = (_QWORD *)*v37;
        }
        while (v37);
        v47 = v35 + 1;
        while ((unint64_t)v47 < v36)
        {
          v48 = (_QWORD *)*v47++;
          v37 = v48;
          if (v48)
          {
            v35 = v47 - 1;
            goto LABEL_41;
          }
        }
      }
LABEL_38:
      ++v22;
    }
    while (v22 < (v93 - v92) >> 3);
  }
  std::vector<int>::vector((std::vector<int> *)v79, (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
  std::vector<int>::vector(&v76, (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
  v49 = v93;
  begin = v76.__begin_;
  v76.__begin_[*(_QWORD *)(*((_QWORD *)v93 - 1) + 40)] = 1;
  v51 = v92;
  v52 = v49 - v92;
  if (v52 != 8)
  {
    v53 = 0;
    v54 = v52 >> 3;
    do
    {
      v55 = *(_QWORD *)&v51[8 * v54 + 8 * ~v53];
      v56 = *(_QWORD *)(v55 + 40);
      if (v76.__begin_[v56])
      {
        v57 = *((_QWORD *)v87[0] + v56);
        v58 = *((_QWORD *)v86[0] + v56);
        v59 = 0;
        v60 = v58 > v57;
        v61 = v58 - v57;
        if (v60)
        {
          v62 = (char *)__p + 8 * v57;
          do
          {
            if (!v59 || *(_QWORD *)(*(_QWORD *)v62 + 16) < *(_QWORD *)(v59 + 16))
              v59 = *(_QWORD *)v62;
            v62 += 8;
            --v61;
          }
          while (v61);
        }
        v63 = TVertex::getInEdge(v55);
        if (v63)
        {
LABEL_73:
          v64 = *(_QWORD *)(*(_QWORD *)(v63 + 16) + 40);
          for (j = *((_QWORD *)v87[0] + v64); ; ++j)
          {
            if (j >= *((_QWORD *)v86[0] + v64))
              goto LABEL_83;
            v66 = *((_QWORD *)__p + j);
            v77[0] = v63;
            v77[1] = v66;
            if (v66)
              v66 = *(_QWORD *)(v66 + 16);
            v78 = v66 + v21;
            TDecodeLink::computeHistory(v77, (uint64_t)&v95, v18);
            if ((_QWORD)v95)
            {
              NGramScore = TLexicon::getNGramScore(*((TLexicon **)this + 5), *((const TWord **)&v96 + 1), (const TWord *)v96, *((const TWord **)&v95 + 1), (const TWord *)v95, 0);
              v68 = v78 + NGramScore;
              v78 += NGramScore;
            }
            else
            {
              v68 = v78;
            }
            if (*(_QWORD *)(v59 + 16) == v68)
              break;
          }
          *(_DWORD *)(*(_QWORD *)v79 + 4 * *(_QWORD *)(v63 + 40)) = 1;
          v76.__begin_[v64] = 1;
LABEL_83:
          while (1)
          {
            v63 = *(_QWORD *)v63;
            if (!v63)
              break;
            if (!*(_BYTE *)(v63 + 32))
              goto LABEL_73;
          }
        }
      }
      ++v53;
      v51 = v92;
      v54 = (v93 - v92) >> 3;
    }
    while (v53 < v54 - 1);
    begin = v76.__begin_;
  }
  end = v76.__end_;
  if (v76.__end_ != begin)
  {
    v70 = 0;
    do
    {
      if (!begin[v70])
      {
        v71 = *(TVertex **)(*((_QWORD *)a2 + 10) + 8 * v70);
        if (!*((_BYTE *)v71 + 32))
        {
          TGraph::deleteVertex(a2, v71);
          begin = v76.__begin_;
          end = v76.__end_;
        }
      }
      ++v70;
    }
    while (v70 < end - begin);
  }
  v73 = *(_QWORD *)&v79[8];
  v72 = *(_DWORD **)v79;
  if (*(_QWORD *)&v79[8] == *(_QWORD *)v79)
  {
    v72 = *(_DWORD **)&v79[8];
    if (begin)
    {
LABEL_101:
      v76.__end_ = begin;
      operator delete(begin);
      v72 = *(_DWORD **)v79;
    }
  }
  else
  {
    v74 = 0;
    do
    {
      if (!v72[v74])
      {
        v75 = *(_QWORD *)(*((_QWORD *)a2 + 13) + 8 * v74);
        if (!*(_BYTE *)(v75 + 32))
        {
          TGraph::deleteEdge((uint64_t)a2, v75);
          v73 = *(_QWORD *)&v79[8];
          v72 = *(_DWORD **)v79;
        }
      }
      ++v74;
    }
    while (v74 < (v73 - (uint64_t)v72) >> 2);
    begin = v76.__begin_;
    if (v76.__begin_)
      goto LABEL_101;
  }
  if (v72)
  {
    *(_QWORD *)&v79[8] = v72;
    operator delete(v72);
  }
  THashBase<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THashMapCompare<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,std::equal_to<TDecodeLink::THistory>>,THashMapFunction<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THash<TDecodeLink::THistory>>>::~THashBase(&v80);
  if (v86[0])
  {
    v86[1] = v86[0];
    operator delete(v86[0]);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  if (__p)
  {
    v89 = (char *)__p;
    operator delete(__p);
  }
  TAllocator::clear((TAllocator *)v91);
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
}

void sub_209880E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  uint64_t v37;
  void *v39;

  if (__p)
    operator delete(__p);
  if (a33)
    operator delete(a33);
  if (a36)
    operator delete(a36);
  TAllocator::clear((TAllocator *)(v37 - 192));
  v39 = *(void **)(v37 - 152);
  if (v39)
  {
    *(_QWORD *)(v37 - 144) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

void TTokenizer::addClones(TTokenizer *this, TGraph *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int32 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  _OWORD v14[2];
  void *__p[2];
  char v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = *((_QWORD *)a2 + 13);
  v3 = *((_QWORD *)a2 + 14);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v5 = (__int32 *)TStringParam::get((TStringParam *)(*((_QWORD *)this + 3) + 10744));
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v5);
  if (v3 == v4)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    if ((unint64_t)((v3 - v4) >> 3) <= 1)
      v8 = 1;
    else
      v8 = (v3 - v4) >> 3;
    do
    {
      v9 = *(_QWORD *)(*((_QWORD *)a2 + 13) + 8 * v7);
      if (!*(_BYTE *)(v9 + 32))
      {
        v10 = *(_OWORD *)(v9 + 64);
        v14[0] = *(_OWORD *)(v9 + 48);
        v14[1] = v10;
        if (LODWORD(v14[0]) == 1)
        {
          TWord::getClones(*((uint64_t *)&v14[0] + 1), (uint64_t)&v17);
          v6 = v18;
          if (v18 != v17)
          {
            v11 = 0;
            v6 = v17;
            do
            {
              v12 = v6[v11];
              *((_QWORD *)&v14[0] + 1) = v12;
              if (v16 >= 0)
                v13 = __p;
              else
                v13 = (void **)__p[0];
              if (!TWord::applyMask(v12, v13))
                TGraph::addEdge(a2, *(_QWORD *)(v9 + 16), *(_QWORD **)(v9 + 24), (uint64_t)v14);
              ++v11;
              v6 = v17;
            }
            while (v11 < ((char *)v18 - (_BYTE *)v17) >> 3);
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  if (v16 < 0)
  {
    operator delete(__p[0]);
    v6 = v17;
  }
  if (v6)
  {
    v18 = v6;
    operator delete(v6);
  }
}

void sub_20988104C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TTokenizer::chooseBestPath(TTokenizer *this, TGraph *a2)
{
  _QWORD *v4;
  unint64_t v5;
  TVertex *v6;
  unint64_t OutEdgeCount;
  uint64_t v8;
  uint64_t ActiveConfigHandle;
  unint64_t v10;
  uint64_t OutEdge;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  TGraph::topologicalSort(a2, (void **)&v13, 0);
  v4 = v14;
  if (v14 != v13)
  {
    v5 = 0;
    v4 = v13;
    do
    {
      v6 = (TVertex *)v4[v5];
      if (!*((_BYTE *)v6 + 32))
      {
        if (v6 == *((TVertex **)a2 + 8) || TVertex::getInEdge(v4[v5]))
        {
          OutEdgeCount = TVertex::getOutEdgeCount(v6);
          if (OutEdgeCount >= 2
            && (v8 = *((_QWORD *)this + 3),
                ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v8 + 392)),
                *(_BYTE *)(v8 + TParam::getValidConfig((TParam *)(v8 + 392), ActiveConfigHandle) + 544)))
          {
            v10 = rand() % OutEdgeCount;
          }
          else
          {
            v10 = 0;
          }
          OutEdge = TVertex::getOutEdge((uint64_t)v6);
          if (OutEdge)
          {
            v12 = 0;
LABEL_14:
            if (v10 != v12)
              TGraph::deleteEdge((uint64_t)a2, OutEdge);
            while (1)
            {
              OutEdge = *(_QWORD *)(OutEdge + 8);
              if (!OutEdge)
                break;
              if (!*(_BYTE *)(OutEdge + 32))
              {
                ++v12;
                goto LABEL_14;
              }
            }
          }
        }
        else
        {
          TGraph::deleteVertex(a2, v6);
        }
      }
      ++v5;
      v4 = v13;
    }
    while (v5 < v14 - v13);
  }
  if (v4)
  {
    v14 = v4;
    operator delete(v4);
  }
}

void sub_2098811DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TTokenizer::registerResult(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[14];
  v4 = (uint64_t)(a1 + 14);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *(_QWORD *)(v4 - 16);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)a1[12];
    v18 = (char *)a1[13];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    a1[12] = v16;
    a1[13] = v8;
    a1[14] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[13] = v8;
  return ((uint64_t)v8 - a1[12]) >> 3;
}

void std::vector<TLexiconMatch>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    std::vector<TLexiconMatch>::__append((void **)a1, a2 - v2);
  }
}

BOOL sortPruningParams(const TIntParam *a1, const TIntParam *a2)
{
  TParam *v3;
  uint64_t ActiveConfigHandle;
  uint64_t v5;

  v3 = a1;
  ActiveConfigHandle = TParam::getActiveConfigHandle(a1);
  LODWORD(v3) = *((_DWORD *)v3 + TParam::getValidConfig(v3, ActiveConfigHandle) + 40);
  v5 = TParam::getActiveConfigHandle(a2);
  return (int)v3 < *((_DWORD *)a2 + TParam::getValidConfig(a2, v5) + 40);
}

uint64_t computeEdgeStat(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int32 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  char v34;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int32 *v46;
  __int32 *v47;
  __n128 v48;
  uint64_t v49;
  char v50;

  *(_BYTE *)(a4 + 64) = 1;
  if (*(_DWORD *)(result + 48) != 6)
  {
    v5 = *a3;
    if (a3[1] != *a3)
    {
      v7 = result;
      v8 = 0;
      v9 = *(unsigned __int8 *)(result + 72);
      v10 = a2 + 15760;
      v11 = *(_QWORD *)(result + 64);
      v12 = a2 + 16816;
      v13 = a2 + 17168;
      v14 = a2 + 17520;
      v15 = a2 + 18120;
      v16 = a2 + 18472;
      v17 = a2 + 18824;
      v18 = (__int32 *)&v49;
      v19 = v11 & 0x30;
      v20 = v11 & 0x35;
      v21 = v11 & 0xC0;
      v22 = v11 & 0xD;
      if ((v11 & 5) != 0)
        v23 = 3;
      else
        v23 = 2;
      v24 = (__n128)xmmword_209A57DD0;
      while (1)
      {
        v25 = *(_QWORD *)(v5 + 8 * v8);
        if (v25 == v10)
          break;
        if (v25 == v12)
        {
          if (!*(_DWORD *)(v7 + 48))
            goto LABEL_25;
        }
        else
        {
          if (v25 == v13)
          {
            if (!v20)
              goto LABEL_27;
LABEL_25:
            v27 = 1;
            goto LABEL_26;
          }
          if (v25 == v14)
            goto LABEL_25;
          if (v25 == v15)
          {
            if (*(_DWORD *)(v7 + 48) != 5)
              goto LABEL_27;
            goto LABEL_25;
          }
          if (v25 == v16)
          {
            if (*(_DWORD *)(v7 + 48) == 4)
              goto LABEL_25;
          }
          else if (v25 == v17)
          {
            v26 = v23;
            if (v22)
              goto LABEL_15;
            if ((v11 & 2) != 0)
            {
              v28 = *(_QWORD *)(v7 + 16);
              v44 = v11;
              v45 = v9;
              v46 = v18;
              v42 = v16;
              v43 = v15;
              v40 = v19;
              v41 = v17;
              v39 = v20;
              v38 = v23;
              v37 = v24;
              result = TVertex::getInEdge(v28);
              v24 = v37;
              v23 = v38;
              v22 = 0;
              v20 = v39;
              v19 = v40;
              v17 = v41;
              v16 = v42;
              v15 = v43;
              v11 = v44;
              v9 = v45;
              v18 = v46;
              if (result)
              {
                if (*(_QWORD *)(v28 + 16) == *(_QWORD *)(v28 + 24))
                  goto LABEL_55;
                v47 = v46;
                v48 = v37;
                v50 = 1;
                v29 = TVertex::getInEdge(v28);
                v11 = v44;
                v9 = v45;
                v18 = v46;
                v16 = v42;
                v15 = v43;
                v19 = v40;
                v17 = v41;
                v22 = 0;
                v20 = v39;
                v23 = v38;
                v24 = v37;
                result = 44;
                if (v29)
                {
LABEL_33:
                  v30 = *(_DWORD *)(v29 + 48);
                  v31 = v30 > 5;
                  v32 = (1 << v30) & 0x2C;
                  if (!v31 && v32 != 0)
                  {
LABEL_56:
                    v34 = 0;
                    goto LABEL_45;
                  }
                  result = TWord::getWrittenForm(*(__int32 ***)(v29 + 56), (uint64_t)&v47);
                  if (v48.n128_u64[1] > 1)
                  {
                    v34 = 0;
                    v11 = v44;
                    v9 = v45;
                    v18 = v46;
                    v16 = v42;
                    v15 = v43;
                    v19 = v40;
                    v17 = v41;
                    v22 = 0;
                    v20 = v39;
                    v23 = v38;
                    v24 = v37;
                    goto LABEL_45;
                  }
                  result = (uint64_t)wcschr((__int32 *)".", *v47);
                  v11 = v44;
                  v9 = v45;
                  v18 = v46;
                  v16 = v42;
                  v15 = v43;
                  v19 = v40;
                  v17 = v41;
                  v22 = 0;
                  v20 = v39;
                  v23 = v38;
                  v24 = v37;
                  if (!result)
                    goto LABEL_56;
                  result = 44;
                  while (1)
                  {
                    v29 = *(_QWORD *)v29;
                    if (!v29)
                      break;
                    if (!*(_BYTE *)(v29 + 32))
                      goto LABEL_33;
                  }
                }
                v34 = 1;
LABEL_45:
                if (v50)
                {
                  result = (uint64_t)v47;
                  if (v47 != v18 && v47 != 0)
                  {
                    result = MEMORY[0x20BD149A8](v24);
                    v24 = v37;
                    v23 = v38;
                    v22 = 0;
                    v20 = v39;
                    v19 = v40;
                    v17 = v41;
                    v16 = v42;
                    v15 = v43;
                    v11 = v44;
                    v9 = v45;
                    v18 = v46;
                  }
                }
                if ((v34 & 1) == 0)
                {
LABEL_55:
                  v26 = 1;
LABEL_15:
                  *(_QWORD *)(a4 + 8 * v8) += v26;
                }
              }
            }
            v36 = *(_QWORD *)(a4 + 8 * v8);
            if (v19)
            {
              v36 += 3;
              *(_QWORD *)(a4 + 8 * v8) = v36;
            }
            v27 = v36 + v9;
LABEL_26:
            *(_QWORD *)(a4 + 8 * v8) = v27;
          }
        }
LABEL_27:
        ++v8;
        v5 = *a3;
        if (v8 >= (a3[1] - *a3) >> 3)
          return result;
      }
      if (!v21)
        goto LABEL_27;
      goto LABEL_25;
    }
  }
  return result;
}

void sub_2098816C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (LOBYTE(STACK[0x480]) && a22 != a21)
  {
    if (a22)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

void TDecodeLink::computeHistory(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;

  v3 = 0;
  if (!a3 || !a1)
    goto LABEL_15;
  v3 = 0;
  while (1)
  {
    v4 = *a1;
    if (!*a1)
      goto LABEL_10;
    v5 = *(_DWORD *)(v4 + 48);
    if (v5 == 5 || v5 == 3)
      break;
    v4 = *(_QWORD *)(v4 + 56);
LABEL_10:
    *(_QWORD *)(a2 + 8 * v3++) = v4;
    if (v3 < a3)
    {
      a1 = (uint64_t *)a1[1];
      if (a1)
        continue;
    }
    goto LABEL_14;
  }
  *(_QWORD *)(a2 + 8 * v3++) = 0;
LABEL_14:
  if (v3 <= 3)
LABEL_15:
    bzero((void *)(a2 + 8 * v3), 32 - 8 * v3);
}

double TTokenizer::getResultInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  double result;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 96) + 8 * a2 - 8);
  v4 = (v3[1] - *v3) >> 4;
  *(_DWORD *)a3 = (v3[4] - v3[3]) >> 5;
  *(_DWORD *)(a3 + 4) = v4;
  *(_DWORD *)(a3 + 8) = v3[10];
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a3 + 12) = 0x100000001;
  return result;
}

uint64_t TTokenizer::release(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  void *v9;

  v2 = this;
  if (a2)
  {
    v3 = a2 - 1;
    v4 = *(_QWORD *)(this + 96);
    if (a2 - 1 < (unint64_t)((*(_QWORD *)(this + 104) - v4) >> 3))
    {
      v5 = *(_QWORD *)(v4 + 8 * v3);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 344))
        {
          v6 = *(_QWORD *)(v5 + 64);
          if (v6 != v5 + 88 && v6 != 0)
            MEMORY[0x20BD149A8]();
        }
        v8 = *(void **)(v5 + 24);
        if (v8)
        {
          *(_QWORD *)(v5 + 32) = v8;
          operator delete(v8);
        }
        v9 = *(void **)v5;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)(v5 + 8) = v9;
          operator delete(v9);
        }
        this = MEMORY[0x20BD149A8](v5, 0x1030C404962A615);
      }
    }
  }
  else
  {
    v3 = -1;
  }
  *(_QWORD *)(*(_QWORD *)(v2 + 96) + 8 * v3) = 0;
  return this;
}

_QWORD *TTokenizer::getResultData(_QWORD *result, uint64_t a2, void *__dst, void *a4, void *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  char v19;

  if (a2 && (v11 = result[12], a2 - 1 < (unint64_t)((result[13] - v11) >> 3)))
  {
    v12 = *(_QWORD *)(v11 + 8 * (a2 - 1));
    if (!__dst)
      goto LABEL_8;
  }
  else
  {
    v12 = 0;
    if (!__dst)
      goto LABEL_8;
  }
  v13 = *(_QWORD *)(v12 + 8) - *(_QWORD *)v12;
  if (v13)
    result = memmove(__dst, *(const void **)v12, v13);
LABEL_8:
  if (a4)
  {
    v14 = *(_BYTE **)(v12 + 24);
    v15 = *(_BYTE **)(v12 + 32);
    if (v15 != v14)
      result = memmove(a4, v14, v15 - v14);
  }
  if (a5)
  {
    v16 = (_QWORD *)(v12 + 64);
    v18 = *(_QWORD *)(v12 + 72);
    v17 = *(_QWORD *)(v12 + 80);
    if (v17 >= v18)
    {
      if (*(_BYTE *)(v12 + 344))
      {
        v19 = 0;
        TBuffer<char>::insert((uint64_t)v16, v17, &v19, 1uLL);
        --*(_QWORD *)(v12 + 80);
      }
      else if (v18)
      {
        *(_BYTE *)(v18 + *v16 - 1) = 0;
      }
    }
    else
    {
      *(_BYTE *)(*v16 + v17) = 0;
    }
    result = memcpy(a5, *(const void **)(v12 + 64), *(_QWORD *)(v12 + 80));
  }
  if (a6)
    *a6 = *(_QWORD *)(v12 + 48);
  if (a7)
    *a7 = *(_QWORD *)(v12 + 56);
  return result;
}

_QWORD *THashBase<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THashMapCompare<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,std::equal_to<TDecodeLink::THistory>>,THashMapFunction<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THash<TDecodeLink::THistory>>>::~THashBase(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C219E18;
  THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::clear(a1);
  v2 = a1[1];
  if (v2)
    MEMORY[0x20BD14990](v2, 0x20C8093837F09);
  return a1;
}

void THashBase<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THashMapCompare<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,std::equal_to<TDecodeLink::THistory>>,THashMapFunction<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THash<TDecodeLink::THistory>>>::~THashBase(_QWORD *a1)
{
  THashBase<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THashMapCompare<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,std::equal_to<TDecodeLink::THistory>>,THashMapFunction<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THash<TDecodeLink::THistory>>>::~THashBase(a1);
  JUMPOUT(0x20BD149A8);
}

void TRegisterable<TTokenizer>::~TRegisterable(_QWORD *a1)
{
  TRegisterable<TTokenizer>::~TRegisterable(a1);
  JUMPOUT(0x20BD149A8);
}

void std::vector<TLexiconMatch>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (a2 <= (v6 - (_BYTE *)v7) >> 5)
  {
    if (a2)
    {
      v14 = 32 * a2;
      v15 = &v7[4 * a2];
      do
      {
        *v7 = 0;
        v7[1] = 0;
        *((_BYTE *)v7 + 24) = 0;
        v7[2] = 0;
        v7 += 4;
        v14 -= 32;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (char *)v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>(v4, v12);
    else
      v13 = 0;
    v16 = &v13[32 * v10];
    v17 = &v16[32 * a2];
    v18 = 32 * a2;
    v19 = v16;
    do
    {
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = 0;
      v19[24] = 0;
      *((_QWORD *)v19 + 2) = 0;
      v19 += 32;
      v18 -= 32;
    }
    while (v18);
    v20 = &v13[32 * v12];
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        v23 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v16 - 1) = v23;
        v16 -= 32;
        v21 -= 32;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
      operator delete(v21);
  }
}

_QWORD *std::vector<TEdgeStat>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<TEdgeStat>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 72 * a2;
    v6 = 72 * a2;
    do
    {
      *(_BYTE *)(v4 + 64) = 0;
      *(_OWORD *)(v4 + 32) = 0uLL;
      *(_OWORD *)(v4 + 48) = 0uLL;
      *(_OWORD *)v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      v4 += 72;
      v6 -= 72;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_209881BB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TEdgeStat>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TEdgeStat>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TEdgeStat>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(*(a2 - 1), *v9);
        if ((_DWORD)result)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v9, v9 + 1, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v9, v9 + 1, v9 + 2, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, (unsigned int (**)(_QWORD))a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(&v9[v13 >> 1], v9, a2 - 1, (unsigned int (**)(_QWORD))a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v9, &v9[v13 >> 1], a2 - 1, (unsigned int (**)(_QWORD))a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v9 + 1, v15 - 1, a2 - 2, (unsigned int (**)(_QWORD))a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v9 + 2, &v9[v14 + 1], a2 - 3, (unsigned int (**)(_QWORD))a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v15 - 1, v15, &v9[v14 + 1], (unsigned int (**)(_QWORD))a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(*(v9 - 1), *v9) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v9, v17, (unsigned int (**)(_QWORD))a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v17 + 1, a2, (unsigned int (**)(_QWORD))a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,TIntParam const**>((char *)v9, (char *)a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if ((uint64_t *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      v7 = 0;
      v8 = (uint64_t *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (*a3)(v9, v10);
        if ((_DWORD)result)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(_QWORD *)((char *)v4 + v12 + 8) = *(_QWORD *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*a3)(v11, *(_QWORD *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              v13 = (_QWORD *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v11;
        }
        v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    for (i = (_QWORD *)(result + 8); v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (*a3)(v7, v8);
      if ((_DWORD)result)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          result = (*a3)(v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, unsigned int (**a4)(_QWORD))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!((unsigned int (*)(_QWORD, _QWORD))*a4)(*a2, *a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  v10 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(*a3))
      return 1;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2;
  v6 = *a1;
  if (((*a3)(*a1, *(a2 - 1)) & 1) != 0)
  {
    v7 = a1;
    do
    {
      v8 = v7[1];
      ++v7;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    v9 = a1 + 1;
    do
    {
      v7 = v9;
      if (v9 >= v4)
        break;
      ++v9;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
      v10 = *--v4;
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    v11 = *v7;
    *v7 = *v4;
    *v4 = v11;
    do
    {
      v12 = v7[1];
      ++v7;
    }
    while (!(*a3)(v6, v12));
    do
      v13 = *--v4;
    while (((*a3)(v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1)
    *a1 = *(v7 - 1);
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = 0;
  v7 = *a1;
  do
    v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      v11 = *--a2;
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    v13 = &a1[v6];
    v14 = a2;
    do
    {
      v15 = *v13;
      *v13 = *v14;
      *v14 = v15;
      do
      {
        v16 = v13[1];
        ++v13;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
        v17 = *--v14;
      while (!(*a3)(v17, v7));
    }
    while (v13 < v14);
    v10 = v13 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int (**a5)(_QWORD))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a2, a3, a5);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, unsigned int (**a6)(_QWORD))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a2, a3, a4, a6);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a5, *a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a4, *a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a3, *a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a2, *a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,TIntParam const**>(char *a1, char *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != (char *)a3)
    {
      v14 = (uint64_t *)a2;
      do
      {
        if ((*a4)(*v14, *(_QWORD *)a1))
        {
          v15 = *v14;
          *v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = (char *)a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      v17 = a2 - 8;
      do
      {
        v18 = *(_QWORD *)a1;
        v19 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, (unsigned int (**)(_QWORD, _QWORD))a4, v16);
        if (v17 == v19)
        {
          *(_QWORD *)v19 = v18;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v17;
          *(_QWORD *)v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
        v17 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v10 = ((uint64_t)a4 - result) >> 2;
      v11 = v10 + 1;
      v12 = (_QWORD *)(result + 8 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        v11 = v13;
      }
      result = ((uint64_t (*)(_QWORD, _QWORD))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        v14 = *v5;
        do
        {
          v15 = v12;
          *v5 = *v12;
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (_QWORD *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              v16 = 2 * v11 + 2;
            }
          }
          result = ((uint64_t (*)(_QWORD, uint64_t))*a2)(*v12, v14);
          v5 = v15;
          v11 = v16;
        }
        while (!(_DWORD)result);
        *v15 = v14;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(_QWORD *a1, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1[v6 + 1], a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = (uint64_t *)(a2 - 8);
    result = (*a3)(*v8, *(_QWORD *)(a2 - 8));
    if ((_DWORD)result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        result = (*a3)(*v8, v10);
        v9 = v11;
      }
      while ((result & 1) != 0);
      *v11 = v10;
    }
  }
  return result;
}

void THashMap<TDecodeLink::THistory,TDecodeLink const*,THash<TDecodeLink::THistory>,std::equal_to<TDecodeLink::THistory>>::~THashMap(_QWORD *a1)
{
  THashBase<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THashMapCompare<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,std::equal_to<TDecodeLink::THistory>>,THashMapFunction<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THash<TDecodeLink::THistory>>>::~THashBase(a1);
  JUMPOUT(0x20BD149A8);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_209882B74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

TFileObject *compileAlt(const TFileObject *a1, TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  int v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  const __int32 **v16;
  const __int32 *v17;
  size_t v18;
  uint64_t v19;
  __int32 *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  void **v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  void **v40;
  size_t v41;
  uint64_t v42;
  __int32 *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  _QWORD *v65;
  std::string *v66;
  const char *v67;
  _QWORD *v68;
  std::string *v69;
  const char *v70;
  _QWORD *exception;
  std::string *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  void *v76[2];
  uint64_t v77;
  _BYTE __p[24];
  uint64_t v79;
  _BYTE v80[24];
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)a1 + 10))
  {
    if (TLexicon::checkName((uint64_t)a3, *((int **)a1 + 3), 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      loggableFileObject((uint64_t *)a1);
      v52 = v80[23];
      v53 = *(_BYTE **)v80;
      loggableUnicode(*((unsigned int **)a1 + 3), __p);
      v58 = v80;
      if (v52 < 0)
        v58 = v53;
      if (__p[23] >= 0)
        v59 = __p;
      else
        v59 = *(_BYTE **)__p;
      tknPrintf("Error: %s'%s' is an invalid token name.\n", v54, v55, v56, v57, v58, v59);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if ((v80[23] & 0x80000000) != 0)
        operator delete(*(void **)v80);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *(_QWORD *)v80 = aPpx;
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v80[8], *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        *(_OWORD *)&v80[8] = *(_OWORD *)__p;
        v81 = *(_QWORD *)&__p[16];
      }
      *(_QWORD *)v80 = &unk_24C214BA0;
      if (v81 >= 0)
        v70 = &v80[8];
      else
        v70 = *(const char **)&v80[8];
      conditionalAssert(v70, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 155, v60, v61);
      *(_QWORD *)v80 = aPpx;
      if (SHIBYTE(v81) < 0)
        operator delete(*(void **)&v80[8]);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v80, &byte_209A88803);
      *exception = aPpx;
      v72 = (std::string *)(exception + 1);
      if ((v80[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v72, *(const std::string::value_type **)v80, *(std::string::size_type *)&v80[8]);
      }
      else
      {
        v75 = *(_OWORD *)v80;
        exception[3] = *(_QWORD *)&v80[16];
        *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v75;
      }
      *exception = &unk_24C214BA0;
    }
    if (*(_BYTE *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone((uint64_t)a3, *((__int32 **)a1 + 3)))
    {
      loggableFileObject((uint64_t *)a1);
      v8 = v80[23];
      v9 = *(_BYTE **)v80;
      loggableUnicode(*((unsigned int **)a1 + 3), __p);
      v14 = v80;
      if (v8 < 0)
        v14 = v9;
      if (__p[23] >= 0)
        v15 = __p;
      else
        v15 = *(_BYTE **)__p;
      tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v10, v11, v12, v13, v14, v15);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if ((v80[23] & 0x80000000) != 0)
        operator delete(*(void **)v80);
    }
    v17 = (const __int32 *)*((_QWORD *)a1 + 3);
    v16 = (const __int32 **)((char *)a1 + 24);
    v18 = wcslen(v17);
    if ((v18 + 1) >> 62)
      v19 = -1;
    else
      v19 = 4 * (v18 + 1);
    v20 = (__int32 *)TAllocator::allocate(a4, v19);
    wcscpy(v20, *v16);
    v21 = TAllocator::allocate(a4, 48);
    *((_DWORD *)v21 + 10) = 1;
    v21[3] = v20;
    v21[4] = 0;
    *v21 = 0;
    v21[1] = "T";
    v21[2] = 0;
    goto LABEL_60;
  }
  *(_QWORD *)v80 = &unk_209A6F590;
  *(int64x2_t *)&v80[8] = vdupq_n_s64(1uLL);
  v81 = -1;
  if (TFileObject::verify((uint64_t)a1, (uint64_t)v80, 1uLL, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v76, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v77) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v76[0], (std::string::size_type)v76[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v76;
      v79 = v77;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v79 >= 0)
      v64 = &__p[8];
    else
      v64 = *(const char **)&__p[8];
    conditionalAssert(v64, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 88, v62, v63);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v79) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v77) < 0)
      operator delete(v76[0]);
    v65 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *v65 = aPpx;
    v66 = (std::string *)(v65 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v66, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v73 = *(_OWORD *)__p;
      v65[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v73;
    }
    *v65 = &unk_24C214BA0;
  }
  v22 = *((_QWORD *)a1 + 3);
  if (!v22)
  {
    v21 = 0;
    goto LABEL_58;
  }
  v23 = 0;
  v21 = 0;
  v24 = 0;
  do
  {
    if ((TFileObject::verify((TFileObject *)v22, 0, 0) & 1) != 0)
      goto LABEL_32;
    if (TLexicon::checkName((uint64_t)a3, *(int **)(v22 + 24), 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      loggableFileObject((uint64_t *)v22);
      v25 = __p[23];
      v26 = *(_BYTE **)__p;
      loggableUnicode(*(unsigned int **)(v22 + 24), v76);
      v31 = __p;
      if (v25 < 0)
        v31 = v26;
      if (v77 >= 0)
        v32 = v76;
      else
        v32 = (void **)v76[0];
      tknPrintf("Error: %s'%s' is an invalid token name.\n", v27, v28, v29, v30, v31, v32);
      if (SHIBYTE(v77) < 0)
        operator delete(v76[0]);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
LABEL_32:
      v24 = 1;
      goto LABEL_33;
    }
    if (*(_BYTE *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone((uint64_t)a3, *(__int32 **)(v22 + 24)))
    {
      loggableFileObject((uint64_t *)v22);
      v33 = __p[23];
      v34 = *(_BYTE **)__p;
      loggableUnicode(*(unsigned int **)(v22 + 24), v76);
      v39 = __p;
      if (v33 < 0)
        v39 = v34;
      if (v77 >= 0)
        v40 = v76;
      else
        v40 = (void **)v76[0];
      tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v35, v36, v37, v38, v39, v40);
      if (SHIBYTE(v77) < 0)
        operator delete(v76[0]);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v41 = wcslen(*(const __int32 **)(v22 + 24));
    if ((v41 + 1) >> 62)
      v42 = -1;
    else
      v42 = 4 * (v41 + 1);
    v43 = (__int32 *)TAllocator::allocate(a4, v42);
    wcscpy(v43, *(const __int32 **)(v22 + 24));
    v44 = TAllocator::allocate(a4, 48);
    *((_DWORD *)v44 + 10) = 1;
    v44[3] = v43;
    v44[4] = 0;
    *v44 = 0;
    v44[1] = "T";
    v44[2] = 0;
    if (v23)
      v23[2] = v44;
    if (!v21)
      v21 = v44;
    v23 = v44;
LABEL_33:
    v22 = *(_QWORD *)(v22 + 16);
  }
  while (v22);
  if ((v24 & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v76, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v77) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v76[0], (std::string::size_type)v76[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v76;
      v79 = v77;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v79 >= 0)
      v67 = &__p[8];
    else
      v67 = *(const char **)&__p[8];
    conditionalAssert(v67, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 130, v45, v46);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v79) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v77) < 0)
      operator delete(v76[0]);
    v68 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *v68 = aPpx;
    v69 = (std::string *)(v68 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v69, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v74 = *(_OWORD *)__p;
      v68[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v74;
    }
    *v68 = &unk_24C214BA0;
  }
LABEL_58:
  if (v21[2])
  {
    v47 = TAllocator::allocate(a4, 48);
    *((_DWORD *)v47 + 10) = 0;
    v47[3] = v21;
    v47[4] = 0;
    *v47 = 0;
    v47[1] = "S";
    v47[2] = 0;
    v21 = v47;
  }
LABEL_60:
  if (!a2)
    return (TFileObject *)v21;
  if (!wcscmp(*((const __int32 **)a2 + 1), (const __int32 *)"A"))
  {
    v49 = *((_QWORD *)a2 + 3);
    do
    {
      v50 = v49;
      v49 = *(_QWORD *)(v49 + 16);
    }
    while (v49);
    *(_QWORD *)(v50 + 16) = v21;
  }
  else
  {
    *((_QWORD *)a2 + 2) = v21;
    v48 = TAllocator::allocate(a4, 48);
    *((_DWORD *)v48 + 10) = 0;
    v48[3] = a2;
    v48[4] = 0;
    v48[1] = "A";
    v48[2] = 0;
    a2 = (TFileObject *)v48;
    *v48 = 0;
  }
  return a2;
}

void sub_2098833B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,void *__p,void *a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;

  if (a32 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

void TArrayObject::TArrayObject(TArrayObject *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  void **v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned int *v9;
  unsigned __int8 v10;
  unsigned int v11;
  uint64_t v12;
  TFileObject **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  TLocaleInfo *v29;
  TLocaleInfo *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  _QWORD *exception;
  std::string *v35;
  __int128 v36;
  char *v39;
  void *v40[2];
  uint64_t v41;
  _BYTE __p[24];
  uint64_t v43;
  char v44;

  *((_QWORD *)this + 1) = 0;
  v39 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v5 = (void **)((char *)this + 32);
  *(_QWORD *)this = &unk_24C213FF8;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v44 = 0;
  v6 = *((_QWORD *)a2 + 3);
  if (!v6)
    return;
  do
  {
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"N"))
    {
      if (*((char *)this + 31) < 0)
      {
        if (!*((_QWORD *)this + 2))
        {
LABEL_25:
          MEMORY[0x20BD147A4](v39, *(_QWORD *)(v6 + 24));
          goto LABEL_33;
        }
      }
      else if (!*((_BYTE *)this + 31))
      {
        goto LABEL_25;
      }
      loggableFileObject((uint64_t *)v6);
      if (__p[23] >= 0)
        v23 = __p;
      else
        v23 = *(_BYTE **)__p;
      tknPrintf("Error: %sRedefinition\n", v19, v20, v21, v22, v23);
    }
    else
    {
      v7 = **(_DWORD **)(v6 + 8);
      if ((v8 & 1) == 0
      {
        v29 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v29);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v29;
      }
      if ((int)v7 < 48
        || v7 >= 0x3A
        && (v7 < 0x660
         || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7) == -1))
      {
        loggableFileObject((uint64_t *)v6);
        if (__p[23] >= 0)
          v18 = __p;
        else
          v18 = *(_BYTE **)__p;
        tknPrintf("Error: %sInvalid attribute\n", v14, v15, v16, v17, v18);
      }
      else
      {
        v9 = *(unsigned int **)(v6 + 8);
        if ((v10 & 1) == 0
        {
          v30 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v30);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v30;
        }
        v11 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9, (BOOL *)&v44);
        if (!v44 && v11 >> 4 < 0x271)
        {
          v12 = v11;
          v13 = (TFileObject **)*((_QWORD *)this + 4);
          if (v11 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v13) >> 3))
          {
            std::vector<TPItnTagHandle_fake **>::reserve(v5, 2 * (v11 + 1));
            *(_QWORD *)__p = 0;
            std::vector<TSegment const*>::resize((uint64_t)v5, v12 + 1, __p);
            v13 = (TFileObject **)*v5;
          }
          *((_QWORD *)*v5 + v12) = compileAlt((const TFileObject *)v6, v13[v12], a3, a4);
          goto LABEL_33;
        }
        loggableFileObject((uint64_t *)v6);
        if (__p[23] >= 0)
          v28 = __p;
        else
          v28 = *(_BYTE **)__p;
        tknPrintf("Error: %sBad index (not an integer or greater than 10000)\n", v24, v25, v26, v27, v28);
      }
    }
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v44 = 1;
LABEL_33:
    v6 = *(_QWORD *)(v6 + 16);
  }
  while (v6);
  if (v44)
  {
    std::string::basic_string[abi:ne180100]<0>(v40, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v41) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v40[0], (std::string::size_type)v40[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v40;
      v43 = v41;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v43 >= 0)
      v33 = &__p[8];
    else
      v33 = *(const char **)&__p[8];
    conditionalAssert(v33, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 286, v31, v32);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v43) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v35 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v36 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
    }
    *exception = &unk_24C214BA0;
  }
}

void sub_2098838D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, void *a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  uint64_t v30;
  void *v32;

  MEMORY[0x20BD149A8](v30, 0x1070C40ADD13FEBLL);
  v32 = *v29;
  if (*v29)
  {
    *(_QWORD *)(v28 + 40) = v32;
    operator delete(v32);
  }
  *(_QWORD *)v28 = &unk_24C214BC0;
  if (*(char *)(v28 + 31) < 0)
    operator delete(*a12);
  _Unwind_Resume(a1);
}

uint64_t TArrayObject::checkNoGap(TArrayObject *this, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  char v6;
  unsigned int **v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void *__p[2];
  char v17;

  if (a2 >= a3)
  {
    v6 = 0;
  }
  else
  {
    v4 = a2;
    v6 = 0;
    v7 = (unsigned int **)((char *)this + 8);
    do
    {
      v8 = *((_QWORD *)this + 4);
      if (v4 >= (*((_QWORD *)this + 5) - v8) >> 3 || !*(_QWORD *)(v8 + 8 * v4))
      {
        v9 = (unsigned int *)v7;
        if (*((char *)this + 31) < 0)
          v9 = *v7;
        loggableUnicode(v9, __p);
        if (v17 >= 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        tknPrintf("Error: Array '%s' : Attribute '%llu' : Missing declaration\n", v10, v11, v12, v13, v14, v4);
        if (v17 < 0)
          operator delete(__p[0]);
        v6 = 1;
      }
      ++v4;
    }
    while (a3 != v4);
  }
  return v6 & 1;
}

void sub_209883AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TDigitObject::TDigitObject(TDigitObject *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  _QWORD *v8;
  int v9;
  uint64_t i;
  unsigned int *v11;
  unsigned __int8 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  _QWORD *exception;
  std::string *v20;
  const char *v21;
  _QWORD *v22;
  std::string *v23;
  __int128 v24;
  __int128 v25;
  TLocaleInfo *v26;
  char *v27;
  void *v28[2];
  uint64_t v29;
  _BYTE __p[24];
  uint64_t v31;
  BOOL v32;
  const char *v33;
  int64x2_t v34;
  uint64_t v35;
  const char *v36;
  int64x2_t v37;
  uint64_t v38;
  const char *v39;
  int64x2_t v40;
  uint64_t v41;
  const char *v42;
  int64x2_t v43;
  uint64_t v44;
  const char *v45;
  int64x2_t v46;
  uint64_t v47;
  const char *v48;
  int64x2_t v49;
  uint64_t v50;
  const char *v51;
  int64x2_t v52;
  uint64_t v53;
  const char *v54;
  int64x2_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  __int128 v59;
  const char *v60;
  uint64_t v61;
  __int128 v62;
  const char *v63;
  uint64_t v64;
  __int128 v65;
  const char *v66;
  uint64_t v67;
  __int128 v68;
  const char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 1) = 0;
  v27 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v8 = (_QWORD *)((char *)this + 32);
  *(_QWORD *)this = &off_24C2140F0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v33 = "0";
  v34 = vdupq_n_s64(1uLL);
  v35 = -1;
  v36 = "1";
  v37 = v34;
  v38 = -1;
  v39 = "2";
  v40 = v34;
  v41 = -1;
  v42 = "3";
  v43 = v34;
  v44 = -1;
  v45 = "4";
  v46 = v34;
  v47 = -1;
  v48 = "5";
  v49 = v34;
  v50 = -1;
  v51 = "6";
  v52 = v34;
  v53 = -1;
  v54 = "7";
  v55 = v34;
  v56 = -1;
  v57 = "8";
  v58 = 1;
  v59 = xmmword_209A57D70;
  v60 = "9";
  v61 = 1;
  v62 = xmmword_209A57D70;
  v63 = "D";
  v64 = 3;
  v65 = xmmword_209A57D70;
  v66 = "T";
  v67 = 3;
  v68 = xmmword_209A57D70;
  v69 = "N";
  v70 = 0;
  v71 = xmmword_209A57D70;
  v9 = TFileObject::verify((uint64_t)a2, (uint64_t)&v33, 0xDuLL, 1);
  v32 = v9;
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v29) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v28[0], (std::string::size_type)v28[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v28;
      v31 = v29;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v31 >= 0)
      v18 = &__p[8];
    else
      v18 = *(const char **)&__p[8];
    conditionalAssert(v18, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 422, v14, v15);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v31) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v29) < 0)
      operator delete(v28[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v20 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v24 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v24;
    }
    *exception = &unk_24C214BA0;
  }
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)__p = 0;
  std::vector<TSegment const*>::resize((uint64_t)v8, 0xAuLL, __p);
  for (i = *((_QWORD *)a2 + 3); i; i = *(_QWORD *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), (const __int32 *)"N"))
    {
      v32 = TFileObject::verify((TFileObject *)i, 0, 0);
      MEMORY[0x20BD147A4](v27, *(_QWORD *)(i + 24));
    }
    else if (!wcscmp(*(const __int32 **)(i + 8), (const __int32 *)"D"))
    {
      *((_QWORD *)this + 7) = compileAlt((const TFileObject *)i, *((TFileObject **)this + 7), a3, a4);
    }
    else if (!wcscmp(*(const __int32 **)(i + 8), (const __int32 *)"T"))
    {
      *((_QWORD *)this + 8) = compileAlt((const TFileObject *)i, *((TFileObject **)this + 8), a3, a4);
    }
    else
    {
      v11 = *(unsigned int **)(i + 8);
      if ((v12 & 1) == 0
      {
        v26 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v26);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v26;
      }
      v13 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, &v32);
      *(_QWORD *)(*v8 + 8 * v13) = compileAlt((const TFileObject *)i, *(TFileObject **)(*v8 + 8 * v13), a3, a4);
    }
  }
  if (v32)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v29) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v28[0], (std::string::size_type)v28[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v28;
      v31 = v29;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v31 >= 0)
      v21 = &__p[8];
    else
      v21 = *(const char **)&__p[8];
    conditionalAssert(v21, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 453, v16, v17);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v31) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v29) < 0)
      operator delete(v28[0]);
    v22 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *v22 = aPpx;
    v23 = (std::string *)(v22 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v25 = *(_OWORD *)__p;
      v22[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v25;
    }
    *v22 = &unk_24C214BA0;
  }
}

void sub_209884050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  void *v29;

  MEMORY[0x20BD149A8](a9, 0x1070C40ADD13FEBLL);
  v29 = *v27;
  if (*v27)
  {
    *(_QWORD *)(v26 + 40) = v29;
    operator delete(v29);
  }
  *(_QWORD *)v26 = &unk_24C214BC0;
  if (*(char *)(v26 + 31) < 0)
    operator delete(*a10);
  _Unwind_Resume(a1);
}

const char *TDigitObject::build(const char *result, unsigned int *a2, TVertex *a3, TVertex *a4, TGraph *this, TLexicon *a6)
{
  unsigned int v6;
  unsigned int *v10;
  unsigned __int8 v11;
  int DigitExtended;
  unsigned int v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned __int8 v17;
  int v18;
  unint64_t v19;
  TLocaleInfo *v20;
  uint64_t v21;
  TVertex *v22;
  unsigned int v23;
  TVertex *v24;
  unint64_t v25;
  __int128 *i;
  unint64_t v27;
  TVertex *j;
  TVertex *v29;
  __int128 v30;
  TLocaleInfo *v31;
  unsigned int *v32;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v34 = (uint64_t)result;
  v6 = *a2;
  if (*a2)
  {
    v10 = a2;
    do
    {
      if ((v11 & 1) == 0
      {
        v31 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v31);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v31;
      }
      DigitExtended = v6 - 48;
      if ((int)v6 < 48)
        goto LABEL_8;
      if (v6 <= 0x39)
        goto LABEL_9;
      if (v6 < 0x660)
LABEL_8:
        DigitExtended = -1;
      else
        DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6);
LABEL_9:
      v13 = *v10;
      if (*v10)
      {
        v14 = 0;
        v15 = v10;
        v16 = v10 + 1;
        while (1)
        {
          if ((v17 & 1) == 0
          {
            v20 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v20);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v20;
          }
          v18 = v13 - 48;
          if ((int)v13 < 48)
            goto LABEL_16;
          if (v13 <= 0x39)
            goto LABEL_17;
          if (v13 < 0x660)
LABEL_16:
            v18 = -1;
          else
            v18 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v13);
LABEL_17:
          if (v18 != DigitExtended)
          {
            v19 = v14;
            goto LABEL_24;
          }
          v19 = v14 + 1;
          v13 = v16[v14++];
          if (!v13)
            goto LABEL_24;
        }
      }
      v15 = v10;
      v19 = 0;
LABEL_24:
      v21 = *(_QWORD *)(*(_QWORD *)(v34 + 32) + 8 * DigitExtended);
      if (*(_QWORD *)(v34 + 64) && (v19 > 4 || v19 == 3))
      {
        v22 = (TVertex *)TGraph::addVertex(this, 0);
        addSequence(*(const __int32 ***)(v34 + 64), a3, v22, this, a6, 0, 0, 0);
        v10 = v15 + 3;
        v23 = v15[3];
        goto LABEL_44;
      }
      if (v19 >= 2 && *(_QWORD *)(v34 + 56))
      {
        v22 = (TVertex *)TGraph::addVertex(this, 0);
        addSequence(*(const __int32 ***)(v34 + 56), a3, v22, this, a6, 0, 0, 0);
        v10 = v15 + 2;
        v23 = v15[2];
LABEL_44:
        v24 = a4;
        if (v23)
          v24 = (TVertex *)TGraph::addVertex(this, 0);
LABEL_48:
        result = addSequence((const __int32 **)v21, v22, v24, this, a6, 0, 0, 0);
        goto LABEL_49;
      }
      v32 = &v15[v19];
      v24 = a4;
      if (*v32)
        v24 = (TVertex *)TGraph::addVertex(this, 0);
      result = (const char *)wcscmp(*(const __int32 **)(v21 + 8), (const __int32 *)"A");
      if ((_DWORD)result)
      {
        if (v19)
        {
          v25 = v19 - 1;
          if (v19 == 1)
          {
            v22 = a3;
            v10 = &v15[v19];
          }
          else
          {
            v10 = &v15[v19];
            do
            {
              v22 = (TVertex *)TGraph::addVertex(this, 0);
              addSequence((const __int32 **)v21, a3, v22, this, a6, 0, 0, 0);
              a3 = v22;
              --v25;
            }
            while (v25);
          }
          goto LABEL_48;
        }
      }
      else
      {
        for (i = *(__int128 **)(v21 + 24); i; i = (__int128 *)*((_QWORD *)i + 2))
        {
          v27 = v19;
          for (j = a3; v27; --v27)
          {
            v29 = v24;
            if (v27 != 1)
              v29 = (TVertex *)TGraph::addVertex(this, 0);
            v30 = i[1];
            v35 = *i;
            v36 = v30;
            v37 = i[2];
            *(_QWORD *)&v36 = 0;
            result = addSequence((const __int32 **)&v35, j, v29, this, a6, 0, 0, 0);
            j = v29;
          }
        }
      }
      v10 = v32;
LABEL_49:
      v6 = *v10;
      a3 = v24;
    }
    while (*v10);
  }
  return result;
}

void sub_209884510(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

const char *addSequence(const __int32 **a1, TVertex *a2, TVertex *a3, TGraph *a4, TLexicon *a5, const char *a6, const char *a7, const char *a8)
{
  const TFileObject *v13;
  uint64_t v14;
  TVertex *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned __int8 v20;
  const char *v21;
  int v22;
  uint64_t v23;
  const char *v24;
  TLocaleInfo *v25;
  BOOL v29;

  v13 = (const TFileObject *)a1;
  if (wcscmp(a1[1], (const __int32 *)"S") || (v13 = (const TFileObject *)*((_QWORD *)v13 + 3)) != 0)
  {
    while (!wcscmp(*((const __int32 **)v13 + 1), (const __int32 *)"S"))
    {
LABEL_37:
      v13 = (const TFileObject *)*((_QWORD *)v13 + 2);
      if (!v13)
        return a7;
    }
    v14 = *((_QWORD *)v13 + 2);
    v15 = a3;
    v16 = a7;
    if (v14)
    {
      if (!wcscmp(*(const __int32 **)(v14 + 8), (const __int32 *)"S"))
      {
        do
        {
          v18 = v14;
          v14 = *(_QWORD *)(v14 + 16);
          if (!v14)
          {
            v15 = a3;
            goto LABEL_7;
          }
        }
        while (!wcscmp(*(const __int32 **)(v14 + 8), (const __int32 *)"S"));
        if (a6)
        {
          v29 = 0;
          v19 = *(unsigned int **)(v18 + 24);
          if ((v20 & 1) == 0
          {
            v25 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v25);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v25;
          }
          v21 = &a6[TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v19, &v29)];
          while (v21 > a7)
          {
            v22 = *--v21;
            v23 = v22;
            if (v22 < 0)
            {
              if (!__maskrune(v23, 0x4000uLL))
              {
LABEL_22:
                v16 = v21 + 1;
                if (v21 + 1 >= a8)
                  break;
                v15 = (TVertex *)TGraph::addVertex(a4, (char *)v21 + 1);
                if (a8)
                  goto LABEL_9;
                goto LABEL_24;
              }
            }
            else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v23 + 60) & 0x4000) == 0)
            {
              goto LABEL_22;
            }
          }
        }
      }
      v15 = (TVertex *)TGraph::addVertex(a4, 0);
LABEL_7:
      v16 = a7;
    }
    if (a8)
    {
LABEL_9:
      if (*((_QWORD *)v15 + 3))
        v17 = (const char *)*((_QWORD *)v15 + 3);
      else
        v17 = a8;
    }
    else
    {
LABEL_24:
      v17 = 0;
    }
    if (!wcscmp(*((const __int32 **)v13 + 1), (const __int32 *)"T"))
    {
      addToken((__int32 **)v13, a2, v15, a4, a5);
    }
    else
    {
      if (!wcscmp(*((const __int32 **)v13 + 1), (const __int32 *)"A"))
      {
        v24 = addAlt(v13, a2, v15, a4, a5, a6, a7, v17);
        goto LABEL_32;
      }
      if (!wcscmp(*((const __int32 **)v13 + 1), (const __int32 *)"P"))
      {
        addPattern((uint64_t)v13, (uint64_t)a2, (uint64_t)v15, (uint64_t)a4, (uint64_t)a5);
        goto LABEL_34;
      }
      if (!wcscmp(*((const __int32 **)v13 + 1), (const __int32 *)"S"))
      {
        v24 = (const char *)addSequence(v13, a2, v15, a4, a5, a6, a7, v17);
LABEL_32:
        a7 = v24;
      }
    }
LABEL_34:
    if (v16 > a7)
      a7 = v16;
    a2 = v15;
    goto LABEL_37;
  }
  return a7;
}

void sub_209884824(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TRomanObject::TRomanObject(TRomanObject *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  char *v7;
  _QWORD *v8;
  uint64_t i;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  _QWORD *exception;
  std::string *v15;
  __int128 v16;
  void *v17[2];
  uint64_t v18;
  _BYTE __p[24];
  uint64_t v20;
  const char *v21;
  int64x2_t v22;
  uint64_t v23;
  const char *v24;
  int64x2_t v25;
  uint64_t v26;
  const char *v27;
  int64x2_t v28;
  uint64_t v29;
  const char *v30;
  int64x2_t v31;
  uint64_t v32;
  const char *v33;
  int64x2_t v34;
  uint64_t v35;
  const char *v36;
  int64x2_t v37;
  uint64_t v38;
  const char *v39;
  int64x2_t v40;
  uint64_t v41;
  const char *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 1) = 0;
  v7 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v8 = (_QWORD *)((char *)this + 32);
  *(_QWORD *)this = &off_24C214140;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v21 = "I";
  v22 = vdupq_n_s64(1uLL);
  v23 = -1;
  v24 = "V";
  v25 = v22;
  v26 = -1;
  v27 = "X";
  v28 = v22;
  v29 = -1;
  v30 = "L";
  v31 = v22;
  v32 = -1;
  v33 = "C";
  v34 = v22;
  v35 = -1;
  v36 = "D";
  v37 = v22;
  v38 = -1;
  v39 = "M";
  v40 = v22;
  v41 = -1;
  v42 = "N";
  v43 = xmmword_209A57D60;
  v44 = -1;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v21, 8uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v17, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v18) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v17[0], (std::string::size_type)v17[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v17;
      v20 = v18;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v20 >= 0)
      v13 = &__p[8];
    else
      v13 = *(const char **)&__p[8];
    conditionalAssert(v13, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 594, v11, v12);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v20) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v15 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v16 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    }
    *exception = &unk_24C214BA0;
  }
  *(_QWORD *)__p = 0;
  std::vector<TSegment const*>::resize((uint64_t)v8, 7uLL, __p);
  for (i = *((_QWORD *)a2 + 3); i; i = *(_QWORD *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), (const __int32 *)"N"))
    {
      MEMORY[0x20BD147A4](v7, *(_QWORD *)(i + 24));
    }
    else
    {
      v10 = (char *)wcschr((__int32 *)"I", **(_DWORD **)(i + 8)) - "I";
      *(_QWORD *)(*v8 + 8 * (v10 >> 2)) = compileAlt((const TFileObject *)i, *(TFileObject **)(*v8 + 2 * v10), a3, a4);
    }
  }
}

void sub_209884B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  void **v25;
  void **v26;
  void *v27;
  int v28;
  void *v30;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      v30 = *v26;
      if (*v26)
      {
        *(_QWORD *)(v24 + 40) = v30;
        operator delete(v30);
      }
      *(_QWORD *)v24 = &unk_24C214BC0;
      if (*(char *)(v24 + 31) < 0)
        operator delete(*v25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t TRomanObject::build(uint64_t a1, unsigned int *a2, TVertex *a3, TVertex *a4, TGraph *a5, TLexicon *a6)
{
  unsigned __int8 v12;
  unsigned int v13;
  uint64_t result;
  _BYTE *v15;
  _DWORD *i;
  __int32 v17;
  __int32 *v18;
  TVertex *v19;
  TLocaleInfo *v21;
  _BYTE *v22;
  __int128 v23;
  _BYTE v24[1024];
  char v25;
  BOOL v26;
  int v27[3];

  v26 = 0;
  {
    v21 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v21);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v21;
  }
  v13 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, &v26);
  v22 = v24;
  v23 = xmmword_209A57DD0;
  v25 = 1;
  result = arabicToRoman(v13, (uint64_t)&v22);
  if (*((_QWORD *)&v23 + 1) >= (unint64_t)v23)
  {
    if (v25)
    {
      v27[0] = 0;
      result = TBuffer<wchar_t>::insert((uint64_t)&v22, *((unint64_t *)&v23 + 1), v27, 1uLL);
      v15 = v22;
      --*((_QWORD *)&v23 + 1);
    }
    else
    {
      v15 = v22;
      if ((_QWORD)v23)
        *(_DWORD *)&v22[4 * v23 - 4] = 0;
    }
  }
  else
  {
    v15 = v22;
    *(_DWORD *)&v22[4 * *((_QWORD *)&v23 + 1)] = 0;
  }
  for (i = v15 + 4; ; ++i)
  {
    v17 = *(i - 1);
    if (!v17)
      break;
    v18 = wcschr((__int32 *)"I", v17);
    v19 = a4;
    if (*i)
      v19 = (TVertex *)TGraph::addVertex(a5, 0);
    result = (uint64_t)addSequence(*(const __int32 ***)(*(_QWORD *)(a1 + 32) + 2 * ((char *)v18 - "I")), a3, v19, a5, a6, 0, 0, 0);
    a3 = v19;
  }
  if (v25)
  {
    result = (uint64_t)v22;
    if (v22 != v24 && v22 != 0)
      return MEMORY[0x20BD149A8]();
  }
  return result;
}

void sub_209884E08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TCountingObject::TCountingObject(uint64_t a1, uint64_t a2, uint64_t *a3, TLexicon *a4, TAllocator *a5)
{
  uint64_t *v7;
  int v9;
  TFileObject **v10;
  uint64_t v11;
  int v12;
  uint64_t Array;
  TFileObject *v14;
  TFileObject *v15;
  TFileObject *v16;
  TFileObject *v17;
  TFileObject *v18;
  TFileObject *v19;
  TFileObject *v20;
  TFileObject *v21;
  unsigned int *v22;
  unsigned __int8 v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  const TArrayObject *v36;
  const TArrayObject *v37;
  unint64_t v38;
  char v39;
  char v40;
  const TArrayObject *v41;
  const TArrayObject *v42;
  unint64_t v43;
  char v44;
  char v45;
  const TArrayObject *v46;
  const TArrayObject *v47;
  unint64_t v48;
  char v49;
  char v50;
  char v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  _QWORD *exception;
  std::string *v61;
  const char *v62;
  _QWORD *v63;
  std::string *v64;
  const char *v65;
  _QWORD *v66;
  std::string *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  TLocaleInfo *v71;
  uint64_t *v72;
  uint64_t v74;
  void *v75[2];
  uint64_t v76;
  _BYTE __p[24];
  uint64_t v78;
  char v79;
  const char *v80;
  __int128 v81;
  uint64_t v82;
  const char *v83;
  __int128 v84;
  uint64_t v85;
  const char *v86;
  __int128 v87;
  uint64_t v88;
  const char *v89;
  __int128 v90;
  uint64_t v91;
  const char *v92;
  __int128 v93;
  uint64_t v94;
  const char *v95;
  __int128 v96;
  uint64_t v97;
  const char *v98;
  __int128 v99;
  uint64_t v100;
  const char *v101;
  __int128 v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  __int128 v106;
  const char *v107;
  uint64_t v108;
  __int128 v109;
  const char *v110;
  uint64_t v111;
  __int128 v112;
  const char *v113;
  uint64_t v114;
  __int128 v115;
  const char *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;

  v7 = (uint64_t *)a2;
  v119 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = 0;
  v74 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_24C2153A0;
  v80 = "E";
  v81 = xmmword_209A57DB0;
  v82 = -1;
  v83 = "I";
  v84 = xmmword_209A57DB0;
  v85 = -1;
  v86 = "N";
  v87 = xmmword_209A57DB0;
  v88 = -1;
  v89 = "Z";
  v90 = xmmword_209A57DB0;
  v91 = -1;
  v92 = "D";
  v93 = xmmword_209A57D60;
  v94 = -1;
  v95 = "C";
  v96 = xmmword_209A57D60;
  v97 = -1;
  v98 = "C";
  v99 = xmmword_209A57D60;
  v100 = -1;
  v101 = "L";
  v102 = xmmword_209A57D80;
  v103 = -1;
  v104 = "L";
  v105 = 2;
  v106 = xmmword_209A57D70;
  v107 = "E";
  v108 = 2;
  v109 = xmmword_209A57D70;
  v110 = "E";
  v111 = 2;
  v112 = xmmword_209A57D70;
  v113 = "W";
  v114 = 2;
  v115 = xmmword_209A57D70;
  v116 = "N";
  v117 = 0;
  v118 = xmmword_209A57D70;
  v9 = TFileObject::verify(a2, (uint64_t)&v80, 0xDuLL, 1);
  v79 = v9;
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v75, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v76) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v75[0], (std::string::size_type)v75[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v75;
      v78 = v76;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v78 >= 0)
      v59 = &__p[8];
    else
      v59 = *(const char **)&__p[8];
    conditionalAssert(v59, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 740, v53, v54);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v78) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v76) < 0)
      operator delete(v75[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v61 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v61, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v68 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v68;
    }
    *exception = &unk_24C214BA0;
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v10 = (TFileObject **)(a1 + 96);
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 3;
  *(_BYTE *)(a1 + 136) = 0;
  v11 = v7[3];
  if (v11)
  {
    v72 = v7;
    v12 = 0;
    while (1)
    {
      if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"N"))
      {
        MEMORY[0x20BD147A4](v74, *(_QWORD *)(v11 + 24));
      }
      else
      {
        if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"E"))
        {
          v14 = *v10;
          v15 = compileAlt((const TFileObject *)v11, *v10, a4, a5);
          if (!v14)
            ++v12;
          *v10 = v15;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"I"))
        {
          v16 = *(TFileObject **)(a1 + 104);
          v17 = compileAlt((const TFileObject *)v11, v16, a4, a5);
          if (!v16)
            ++v12;
          *(_QWORD *)(a1 + 104) = v17;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"N"))
        {
          v18 = *(TFileObject **)(a1 + 112);
          v19 = compileAlt((const TFileObject *)v11, v18, a4, a5);
          if (!v18)
            ++v12;
          *(_QWORD *)(a1 + 112) = v19;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"Z"))
        {
          v20 = *(TFileObject **)(a1 + 120);
          v21 = compileAlt((const TFileObject *)v11, v20, a4, a5);
          if (!v20)
            ++v12;
          *(_QWORD *)(a1 + 120) = v21;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"D"))
        {
          if (TFileObject::verify((TFileObject *)v11, 0, 0))
          {
            std::string::basic_string[abi:ne180100]<0>(v75, &byte_209A88803);
            *(_QWORD *)__p = aPpx;
            if (SHIBYTE(v76) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v75[0], (std::string::size_type)v75[1]);
            }
            else
            {
              *(_OWORD *)&__p[8] = *(_OWORD *)v75;
              v78 = v76;
            }
            *(_QWORD *)__p = &unk_24C214BA0;
            if (v78 >= 0)
              v65 = &__p[8];
            else
              v65 = *(const char **)&__p[8];
            conditionalAssert(v65, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 787, v57, v58);
            *(_QWORD *)__p = aPpx;
            if (SHIBYTE(v78) < 0)
              operator delete(*(void **)&__p[8]);
            if (SHIBYTE(v76) < 0)
              operator delete(v75[0]);
            v66 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
            *v66 = aPpx;
            v67 = (std::string *)(v66 + 1);
            if ((__p[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v67, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            }
            else
            {
              v70 = *(_OWORD *)__p;
              v66[3] = *(_QWORD *)&__p[16];
              *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v70;
            }
            *v66 = &unk_24C214BA0;
          }
          if (wcscmp(*(const __int32 **)(v11 + 24), (const __int32 *)"I"))
          {
            v22 = *(unsigned int **)(v11 + 24);
            if ((v23 & 1) == 0
            {
              v71 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v71);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v71;
            }
            v24 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v22, (BOOL *)&v79);
            *(_QWORD *)(a1 + 128) = v24;
            if (v24 - 2 <= 2 && !v79)
              goto LABEL_50;
            loggableFileObject((uint64_t *)v11);
            v29 = __p;
            if (__p[23] < 0)
              v29 = *(_BYTE **)__p;
            tknPrintf("Error: %sValue is out of range, must be 2, 3, 4, or I\n", v25, v26, v27, v28, v29);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            v30 = 1;
            goto LABEL_49;
          }
          *(_QWORD *)(a1 + 128) = 7;
          *(_BYTE *)(a1 + 136) = 1;
        }
        else
        {
          if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"C"))
          {
            Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(_QWORD *)(a1 + 32) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"C"))
          {
            Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(_QWORD *)(a1 + 40) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"L"))
          {
            Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(_QWORD *)(a1 + 48) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"L"))
          {
            Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(_QWORD *)(a1 + 56) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"E"))
          {
            Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(_QWORD *)(a1 + 64) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"E"))
          {
            Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(_QWORD *)(a1 + 72) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"W"))
          {
            Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(_QWORD *)(a1 + 80) = Array;
LABEL_48:
            v30 = v79 | (Array == 0);
LABEL_49:
            v79 = v30;
          }
        }
      }
LABEL_50:
      v11 = *(_QWORD *)(v11 + 16);
      if (!v11)
      {
        v7 = v72;
        if (v12 >= 2)
        {
          loggableFileObject(v72);
          if (__p[23] >= 0)
            v35 = __p;
          else
            v35 = *(_BYTE **)__p;
          tknPrintf("Error: %sAttributes EnxAnd, ItaAnd, NldAnd, and ZhoZero are exclusive\n", v31, v32, v33, v34, v35);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v79 = 1;
        }
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 88) = 0;
  v36 = *(const TArrayObject **)(a1 + 32);
  if (v36)
  {
    v37 = *(const TArrayObject **)(a1 + 40);
    if (v37)
    {
      v38 = (((uint64_t)(*((_QWORD *)v37 + 5) - *((_QWORD *)v37 + 4)) >> 3)
           / (unint64_t)(10 * *(_QWORD *)(a1 + 128))
           + 2)
          * *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 88) = v38;
      if (*(_BYTE *)(a1 + 136))
        *(_QWORD *)(a1 + 88) = v38 - 2;
      v39 = TCountingObject::checkChunk((TCountingObject *)a1, (const TFileObject *)v7, v36, v37);
      v79 |= v39;
      v40 = TCountingObject::checkMagnitude((TCountingObject *)a1, (const TFileObject *)v7, *(const TArrayObject **)(a1 + 40));
      v79 |= v40;
    }
  }
  v41 = *(const TArrayObject **)(a1 + 48);
  if (v41)
  {
    v42 = *(const TArrayObject **)(a1 + 56);
    if (v42)
    {
      v43 = (((uint64_t)(*((_QWORD *)v42 + 5) - *((_QWORD *)v42 + 4)) >> 3)
           / (unint64_t)(10 * *(_QWORD *)(a1 + 128))
           + 2)
          * *(_QWORD *)(a1 + 128);
      if (*(_BYTE *)(a1 + 136))
        v43 -= 2;
      if (v43 >= *(_QWORD *)(a1 + 88))
        v43 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v43;
      v44 = TCountingObject::checkChunk((TCountingObject *)a1, (const TFileObject *)v7, v41, v42);
      v79 |= v44;
      v45 = TCountingObject::checkMagnitude((TCountingObject *)a1, (const TFileObject *)v7, *(const TArrayObject **)(a1 + 56));
      v79 |= v45;
    }
  }
  v46 = *(const TArrayObject **)(a1 + 64);
  if (v46 && (v47 = *(const TArrayObject **)(a1 + 72)) != 0)
  {
    v48 = (((uint64_t)(*((_QWORD *)v47 + 5) - *((_QWORD *)v47 + 4)) >> 3)
         / (unint64_t)(10 * *(_QWORD *)(a1 + 128))
         + 2)
        * *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 136))
      v48 -= 2;
    if (v48 >= *(_QWORD *)(a1 + 88))
      v48 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v48;
    v49 = TCountingObject::checkChunk((TCountingObject *)a1, (const TFileObject *)v7, v46, v47);
    v79 |= v49;
    v50 = TCountingObject::checkMagnitude((TCountingObject *)a1, (const TFileObject *)v7, *(const TArrayObject **)(a1 + 72));
    v51 = v79 | v50;
    v79 |= v50;
  }
  else
  {
    v51 = v79;
  }
  if (v51)
  {
    std::string::basic_string[abi:ne180100]<0>(v75, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v76) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v75[0], (std::string::size_type)v75[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v75;
      v78 = v76;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v78 >= 0)
      v62 = &__p[8];
    else
      v62 = *(const char **)&__p[8];
    conditionalAssert(v62, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 897, v55, v56);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v78) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v76) < 0)
      operator delete(v75[0]);
    v63 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *v63 = aPpx;
    v64 = (std::string *)(v63 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v64, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v69 = *(_OWORD *)__p;
      v63[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v69;
    }
    *v63 = &unk_24C214BA0;
  }
  return a1;
}

void sub_20988594C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  MEMORY[0x20BD149A8](a11, 0x1070C40ADD13FEBLL);
  *(_QWORD *)v30 = &unk_24C214BC0;
  if (*(char *)(v30 + 31) < 0)
    operator delete(*a14);
  _Unwind_Resume(a1);
}

uint64_t TCountingObject::getArray(int a1, const __int32 **this, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const __int32 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  _QWORD *exception;
  std::string *v19;
  __int128 v20;
  void *v21[2];
  uint64_t v22;
  _BYTE __p[24];
  uint64_t v24;

  if ((TFileObject::verify((TFileObject *)this, 0, 0) & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v22) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v21[0], (std::string::size_type)v21[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v21;
      v24 = v22;
    }
    *(_QWORD *)__p = &unk_24C214BA0;
    if (v24 >= 0)
      v17 = &__p[8];
    else
      v17 = *(const char **)&__p[8];
    conditionalAssert(v17, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 905, v15, v16);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v24) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v19 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v20 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    }
    *exception = &unk_24C214BA0;
  }
  v5 = *a3;
  if (a3[1] == *a3)
  {
LABEL_8:
    loggableFileObject((uint64_t *)this);
    if (__p[23] >= 0)
      v13 = __p;
    else
      v13 = *(_BYTE **)__p;
    tknPrintf("Error: %sArray name does not exist\n", v9, v10, v11, v12, v13);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    return 0;
  }
  else
  {
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      v8 = (const __int32 *)(v7 + 8);
      if (*(char *)(v7 + 31) < 0)
        v8 = *(const __int32 **)v8;
      if (!wcscmp(this[3], v8))
        return *(_QWORD *)(*a3 + 8 * v6);
      ++v6;
      v5 = *a3;
      if (v6 >= (a3[1] - *a3) >> 3)
        goto LABEL_8;
    }
  }
}

void sub_209885C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t TCountingObject::checkChunk(TCountingObject *this, const TFileObject *a2, const TArrayObject *a3, const TArrayObject *a4)
{
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *p_p;
  void *__p;
  char v24;

  v8 = TArrayObject::checkNoGap(a3, 0, 0xAuLL);
  v9 = *((_QWORD *)this + 16);
  if (v9 >= 2)
  {
    v10 = 100;
    v11 = 1;
    v12 = 10;
    do
    {
      v13 = *((_QWORD *)a4 + 4);
      if (10 * v11 >= (*((_QWORD *)a4 + 5) - v13) >> 3 || !*(_QWORD *)(v13 + 80 * v11))
      {
        v14 = *((_BYTE *)this + 136) && (v11 & 0xFFFFFFFFFFFFFFFDLL) == 4;
        if (!v14 && v12 < v10)
        {
          do
          {
            v16 = *((_QWORD *)a3 + 4);
            if (v12 >= (*((_QWORD *)a3 + 5) - v16) >> 3 || !*(_QWORD *)(v16 + 8 * v12))
            {
              loggableFileObject((uint64_t *)a2);
              if (v24 >= 0)
                p_p = &__p;
              else
                p_p = __p;
              tknPrintf("Error: %sCannot make spoken form for '%llu'\n", v17, v18, v19, v20, p_p, v12);
              if (v24 < 0)
                operator delete(__p);
              v8 = 1;
            }
            ++v12;
          }
          while (v10 != v12);
          v9 = *((_QWORD *)this + 16);
        }
      }
      v12 = v10;
      v10 *= 10;
      v11 += 2;
    }
    while (v11 < v9);
  }
  return v8 & 1;
}

void sub_209885E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TCountingObject::checkMagnitude(TCountingObject *this, const TFileObject *a2, const TArrayObject *a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  unint64_t i;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void *__p[2];
  char v35;

  if (*(_QWORD *)a2)
    v6 = *(_QWORD *)(*(_QWORD *)a2 + 72);
  else
    v6 = 3;
  v7 = *((_QWORD *)a3 + 4);
  v8 = (*((_QWORD *)a3 + 5) - v7) >> 3;
  if (v8 > 10 * *((_QWORD *)this + 16)
    && (v9 = 10 * *((_QWORD *)this + 16), *(_QWORD *)(v7 + 80 * *((_QWORD *)this + 16))))
  {
    v10 = 0;
  }
  else
  {
    loggableFileObject((uint64_t *)a2);
    if (v35 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    tknPrintf("Error: %sMagnitude '%llu' hasn't been specified and is needed\n", v11, v12, v13, v14, v15, 10 * *((_QWORD *)this + 16));
    if (v35 < 0)
      operator delete(__p[0]);
    v7 = *((_QWORD *)a3 + 4);
    v9 = 10 * *((_QWORD *)this + 16);
    v8 = (*((_QWORD *)a3 + 5) - v7) >> 3;
    v10 = 1;
  }
  for (i = v9 + 10; i < v8; ++i)
  {
    v17 = *((_QWORD *)this + 16);
    if (i % (10 * v17))
    {
      if (i / 0xA % v17 && *(_QWORD *)(v7 + 8 * i))
      {
        if (v6 < 3)
        {
          loggableFileObject((uint64_t *)a2);
          if (v35 >= 0)
            v32 = __p;
          else
            v32 = (void **)__p[0];
          tknPrintf("Warning: %sMagnitude '%llu' is not supported\n", v28, v29, v30, v31, v32, i);
          if (v35 < 0)
            operator delete(__p[0]);
          goto LABEL_38;
        }
        loggableFileObject((uint64_t *)a2);
        if (v35 >= 0)
          v22 = __p;
        else
          v22 = (void **)__p[0];
        tknPrintf("Error: %sMagnitude '%llu' is not supported\n", v18, v19, v20, v21, v22, i);
        goto LABEL_30;
      }
    }
    else if (!*(_QWORD *)(v7 + 8 * i)
           && (v8 <= i + 10 * v17 || !*(_QWORD *)(v7 + 80 * v17 + 8 * i) || *((_BYTE *)this + 136)))
    {
      loggableFileObject((uint64_t *)a2);
      if (v35 >= 0)
        v27 = __p;
      else
        v27 = (void **)__p[0];
      tknPrintf("Error: %sMagnitude '%llu' hasn't been specified and is needed\n", v23, v24, v25, v26, v27, i);
LABEL_30:
      if (v35 < 0)
        operator delete(__p[0]);
      v10 = 1;
    }
LABEL_38:
    v7 = *((_QWORD *)a3 + 4);
    v8 = (*((_QWORD *)a3 + 5) - v7) >> 3;
  }
  return v10 & 1;
}

void sub_209886090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TCountingObject::getChunk(TCountingObject *this, int a2, int a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((!a3 || (v4 = *((_QWORD *)this + 8)) == 0) && (!a2 || (v4 = *((_QWORD *)this + 6)) == 0))
    v4 = *((_QWORD *)this + 4);
  v6 = v4 + 32;
  v5 = *(_QWORD *)(v4 + 32);
  if (a4 >= (*(_QWORD *)(v6 + 8) - v5) >> 3)
    return 0;
  else
    return *(_QWORD *)(v5 + 8 * a4);
}

uint64_t TCountingObject::getMagnitude(TCountingObject *this, int a2, int a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a5 > 9)
    return 0;
  v5 = a5 + 10 * a4;
  if ((!a3 || (v6 = *((_QWORD *)this + 9)) == 0) && (!a2 || (v6 = *((_QWORD *)this + 7)) == 0))
    v6 = *((_QWORD *)this + 5);
  v8 = v6 + 32;
  v7 = *(_QWORD *)(v6 + 32);
  if (v5 >= (*(_QWORD *)(v8 + 8) - v7) >> 3)
    return 0;
  else
    return *(_QWORD *)(v7 + 8 * v5);
}

char *TCountingObject::addHundredChunk(TCountingObject *this, unint64_t a2, int a3, int a4, int a5, int a6, TVertex *a7, TVertex *a8, TGraph *a9, TLexicon *a10)
{
  _BOOL4 v16;
  _BOOL4 v18;
  const __int32 **v19;
  TLexicon *v20;
  TGraph *v21;
  char *result;
  char *v23;
  const __int32 **v24;
  TVertex *v25;
  const __int32 **v26;
  TVertex *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  TVertex *v40;
  TVertex *v41;
  int v42;
  uint64_t Magnitude;
  int v44;
  const __int32 **v45;
  const __int32 **v46;
  TVertex *v47;
  TVertex *v48;
  TGraph *v49;
  TLexicon *v50;
  const __int32 **v51;
  TVertex *v52;
  TVertex *v53;
  const __int32 **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const __int32 **v59;
  TVertex *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const __int32 **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  TVertex *v68;
  _BOOL4 v69;
  _BOOL4 v70;
  TVertex *v71;
  const __int32 **v72;
  const __int32 **v73;
  _BOOL4 v74;

  v16 = 0;
  if (a2 && a3)
    v16 = a2 <= 0x63 && *((_QWORD *)this + 12) || a2 < 0xD && *((_QWORD *)this + 14) != 0;
  v18 = 0;
  if (a2 && a4)
    v18 = *((_QWORD *)this + 15) != 0;
  v74 = v18;
  v19 = (const __int32 **)*((_QWORD *)this + 12);
  if (!v19)
    v19 = (const __int32 **)*((_QWORD *)this + 14);
  v73 = v19;
  v21 = a9;
  v20 = a10;
  v72 = (const __int32 **)*((_QWORD *)this + 15);
  result = (char *)TCountingObject::getChunk(this, a5, a6, a2);
  if (result)
  {
    v23 = result;
    result = (char *)addSequence((const __int32 **)result, a7, a8, a9, a10, 0, 0, 0);
    if (v16 || v74)
    {
      if (v16)
        v24 = v73;
      else
        v24 = v72;
      v25 = (TVertex *)TGraph::addVertex(a9, 0);
      addSequence(v24, a7, v25, a9, a10, 0, 0, 0);
      v26 = (const __int32 **)v23;
      v27 = v25;
      goto LABEL_59;
    }
    return result;
  }
  v69 = v16;
  v70 = a6;
  v68 = a7;
  if (a2 < 0xA)
  {
    v28 = 0;
    v29 = 1;
    v30 = a2;
    v31 = a5;
    goto LABEL_42;
  }
  v28 = 1;
  v29 = 1;
  v30 = a2;
  v31 = a5;
  while (v30 > 0x63 || !*((_BYTE *)this + 136))
  {
    v29 *= 10;
    v32 = v30 / 0xA;
    ++v28;
    v33 = v30 > 0x63;
    v30 /= 0xAuLL;
    if (!v33)
    {
      --v28;
      v30 = v32;
      goto LABEL_42;
    }
  }
  if (v28 != 6)
  {
    if (v28 == 4)
    {
      v34 = v30 / 0xAu + 40;
      v35 = *(_QWORD *)(*((_QWORD *)this + 5) + 32);
      v36 = *(_QWORD *)(*((_QWORD *)this + 5) + 40) - v35;
      if ((v34 >= v36 >> 3 || !*(_QWORD *)(v35 + 8 * v34))
        && ((unint64_t)v36 < 0x141 || !*(_QWORD *)(v35 + 320)))
      {
        v28 = 3;
        goto LABEL_42;
      }
    }
    goto LABEL_41;
  }
  v37 = v30 / 0xAu + 60;
  v38 = *(_QWORD *)(*((_QWORD *)this + 5) + 32);
  v39 = *(_QWORD *)(*((_QWORD *)this + 5) + 40) - v38;
  if (v37 < v39 >> 3 && *(_QWORD *)(v38 + 8 * v37) || (unint64_t)v39 >= 0x1E1 && *(_QWORD *)(v38 + 480))
  {
LABEL_41:
    v29 *= 10;
    v30 = v30 / 0xAu;
    goto LABEL_42;
  }
  v28 = 5;
LABEL_42:
  if (a2 == v29 * v30)
  {
    v40 = a8;
  }
  else
  {
    v41 = (TVertex *)TGraph::addVertex(a9, 0);
    result = (char *)TCountingObject::addHundredChunk(this, a2 - v29 * v30, v28 == 2, 0, 0, v70, v41, a8, a9, a10);
    if (*((_QWORD *)this + 15) && a2 - v29 * v30 < v29 / 0xA)
    {
      v40 = (TVertex *)TGraph::addVertex(a9, 0);
      result = (char *)addSequence(*((const __int32 ***)this + 15), v40, v41, a9, a10, 0, 0, 0);
    }
    else
    {
      v40 = v41;
    }
  }
  if (v30)
  {
    v71 = v40;
    v42 = a2 == v29 * v30 && v70;
    Magnitude = TCountingObject::getMagnitude(this, v31, v42, v28, v30);
    v44 = v69 || v74;
    if (!Magnitude)
    {
      if (v44)
      {
        if (v69)
          v51 = v73;
        else
          v51 = v72;
        v52 = (TVertex *)TGraph::addVertex(a9, 0);
        addSequence(v51, v68, v52, a9, a10, 0, 0, 0);
        v53 = (TVertex *)TGraph::addVertex(a9, 0);
        v54 = 0;
        v55 = *(_QWORD *)(*((_QWORD *)this + 4) + 32);
        if (v30 < (*(_QWORD *)(*((_QWORD *)this + 4) + 40) - v55) >> 3)
          v54 = *(const __int32 ***)(v55 + 8 * v30);
        addSequence(v54, v52, v53, a9, a10, 0, 0, 0);
        if (!v42 || (v56 = *((_QWORD *)this + 9)) == 0)
          v56 = *((_QWORD *)this + 5);
        v58 = v56 + 32;
        v57 = *(_QWORD *)(v56 + 32);
        if (10 * v28 >= (unint64_t)((*(_QWORD *)(v58 + 8) - v57) >> 3))
          v59 = 0;
        else
          v59 = *(const __int32 ***)(v57 + 80 * v28);
        addSequence(v59, v53, v71, a9, a10, 0, 0, 0);
      }
      v60 = (TVertex *)TGraph::addVertex(a9, 0);
      if (!v31 || (v61 = *((_QWORD *)this + 6)) == 0)
        v61 = *((_QWORD *)this + 4);
      v63 = v61 + 32;
      v62 = *(_QWORD *)(v61 + 32);
      if (v30 >= (*(_QWORD *)(v63 + 8) - v62) >> 3)
        v64 = 0;
      else
        v64 = *(const __int32 ***)(v62 + 8 * v30);
      addSequence(v64, v68, v60, a9, a10, 0, 0, 0);
      if (!v42 || (v65 = *((_QWORD *)this + 9)) == 0)
        v65 = *((_QWORD *)this + 5);
      v67 = v65 + 32;
      v66 = *(_QWORD *)(v65 + 32);
      if (10 * v28 >= (unint64_t)((*(_QWORD *)(v67 + 8) - v66) >> 3))
        v26 = 0;
      else
        v26 = *(const __int32 ***)(v66 + 80 * v28);
      v49 = a9;
      v48 = v71;
      v50 = a10;
      v27 = v60;
      return (char *)addSequence(v26, v27, v48, v49, v50, 0, 0, 0);
    }
    v45 = (const __int32 **)Magnitude;
    v21 = a9;
    a8 = v40;
    v20 = a10;
    if (v44)
    {
      if (v69)
        v46 = v73;
      else
        v46 = v72;
      v47 = (TVertex *)TGraph::addVertex(a9, 0);
      addSequence(v46, v68, v47, a9, a10, 0, 0, 0);
      addSequence(v45, v47, v71, a9, a10, 0, 0, 0);
    }
    v26 = v45;
    v27 = v68;
LABEL_59:
    v48 = a8;
    v49 = v21;
    v50 = v20;
    return (char *)addSequence(v26, v27, v48, v49, v50, 0, 0, 0);
  }
  return result;
}

unint64_t TCountingObject::build(uint64_t a1, __int32 *a2, TVertex *a3, TVertex *a4, TGraph *a5, TLexicon *a6)
{
  TGraph *v6;
  uint64_t v8;
  __int32 *v9;
  __int32 v10;
  unsigned int v11;
  unsigned __int8 v12;
  unsigned int DigitExtended;
  TLocaleInfo *v14;
  unint64_t result;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unsigned __int8 v31;
  int v32;
  _BYTE *v33;
  unsigned __int8 v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  unsigned __int8 v38;
  unsigned int v39;
  TVertex *v40;
  TVertex *v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t Magnitude;
  const __int32 **v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  TVertex *v51;
  uint64_t v52;
  TVertex *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  TLocaleInfo *v63;
  TLocaleInfo *v64;
  TLocaleInfo *v65;
  TLocaleInfo *v66;
  TLocaleInfo *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  BOOL v73;
  BOOL v76;
  _DWORD *v77;
  size_t v78;
  char *v79;
  _BYTE *v82;
  __int128 v83;
  _BYTE v84[1024];
  char v85;
  int v86[3];

  v6 = a5;
  v8 = a1;
  do
  {
    v9 = a2;
    v10 = a2[1];
    ++a2;
    if (!v10)
      break;
    v11 = *v9;
    if ((v12 & 1) == 0
    {
      v14 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v14);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v14;
      v6 = a5;
      v8 = a1;
    }
    DigitExtended = v11 - 48;
    if ((int)v11 < 48)
      break;
    if (v11 > 0x39)
    {
      if (v11 < 0x660)
        break;
      DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11);
    }
  }
  while (!DigitExtended);
  result = wcslen(v9);
  v16 = result;
  v17 = *(_QWORD *)(v8 + 128);
  v78 = v17;
  if (result <= v17)
  {
    v18 = *(_QWORD *)(a1 + 80);
    if (v18)
    {
      LOBYTE(v82) = 0;
      if ((v19 & 1) == 0
      {
        v67 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v67);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v67;
        v6 = a5;
      }
      result = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (unsigned int *)v9, (BOOL *)&v82);
      v20 = *(_QWORD *)(v18 + 32);
      if (result < (unint64_t)((*(_QWORD *)(v18 + 40) - v20) >> 3))
      {
        result = *(_QWORD *)(v20 + 8 * result);
        if (result)
          return (unint64_t)addSequence((const __int32 **)result, a3, a4, v6, a6, 0, 0, 0);
      }
    }
  }
  v82 = v84;
  v83 = xmmword_209A57DD0;
  v85 = 1;
  v21 = v16 / v17;
  v22 = v16 % v17;
  if (v16 % v17)
  {
    TBuffer<wchar_t>::insert((uint64_t)&v82, 0, (int *)"0", v17 - v22);
    TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v9, v16 % v17);
    v86[0] = v21 + 48;
    result = TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v86, 1uLL);
    v9 += v22;
  }
  v23 = 4 * v17;
  if (v17 <= v16)
  {
    v24 = 0;
    v25 = v21 + 48;
    if (v21 <= 1)
      v21 = 1;
    do
    {
      result = wcsncmp(v9, (const __int32 *)"0", v17);
      if ((_DWORD)result)
      {
        TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v9, v17);
        v86[0] = v25 + ~v24;
        result = TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v86, 1uLL);
      }
      ++v24;
      v9 = (__int32 *)((char *)v9 + v23);
      --v21;
    }
    while (v21);
  }
  if (*((_QWORD *)&v83 + 1) >= (unint64_t)v83)
  {
    if (v85)
    {
      v86[0] = 0;
      result = TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v86, 1uLL);
      v26 = v82;
      --*((_QWORD *)&v83 + 1);
    }
    else
    {
      v26 = v82;
      if ((_QWORD)v83)
        *(_DWORD *)&v82[4 * v83 - 4] = 0;
    }
  }
  else
  {
    v26 = v82;
    *(_DWORD *)&v82[4 * *((_QWORD *)&v83 + 1)] = 0;
  }
  if (*v26)
  {
    v27 = 0;
    v28 = 0;
    v76 = 0;
    v69 = 10 * v17;
    v70 = v23 + 4;
    v68 = (uint64_t)&v26[2 * v17 + 1];
    v29 = 1;
    v77 = &v26[v17];
    v71 = v26;
    do
    {
      v30 = *(_DWORD *)((char *)v77 + v27);
      if ((v31 & 1) == 0
      {
        v63 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v63);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v63;
        v6 = a5;
        v17 = v78;
      }
      v32 = v30 - 48;
      if ((int)v30 < 48)
        goto LABEL_39;
      if (v30 <= 0x39)
        goto LABEL_40;
      if (v30 < 0x660)
LABEL_39:
        v32 = -1;
      else
        v32 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v30);
LABEL_40:
      if (*((_QWORD *)&v83 + 1) >= (unint64_t)v83)
      {
        if (v85)
        {
          v86[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v86, 1uLL);
          v33 = v82;
          --*((_QWORD *)&v83 + 1);
        }
        else
        {
          v33 = v82;
          if ((_QWORD)v83)
            *(_DWORD *)&v82[4 * v83 - 4] = 0;
        }
      }
      else
      {
        v33 = v82;
        *(_DWORD *)&v82[4 * *((_QWORD *)&v83 + 1)] = 0;
      }
      *(_DWORD *)&v33[4 * v17 + 4 * ((unint64_t)((char *)v26 + v27 - v33) >> 2)] = 0;
      LOBYTE(v86[0]) = 0;
      if ((v34 & 1) == 0
      {
        v64 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v64);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v64;
        v6 = a5;
      }
      v35 = v76;
      v36 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (_DWORD *)((char *)v26 + v27), (BOOL *)v86);
      v73 = v28;
      if (!(v29 & 1 | (*(_QWORD *)(a1 + 120) == 0)))
      {
        v37 = *(_DWORD *)((char *)v26 + v27);
        if ((v38 & 1) == 0
        {
          v65 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v65);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v65;
          v6 = a5;
          v35 = v76;
        }
        v39 = v37 - 48;
        if ((int)v37 >= 48)
        {
          if (v37 > 0x39)
          {
            if (v37 < 0x660)
              goto LABEL_57;
            v39 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v37);
          }
          if (!v39 && v36)
          {
            v40 = (TVertex *)TGraph::addVertex(v6, 0);
            addSequence(*(const __int32 ***)(a1 + 120), a3, v40, v6, a6, 0, 0, 0);
            v73 = 0;
            if (!v35)
              goto LABEL_62;
            goto LABEL_58;
          }
        }
      }
LABEL_57:
      v40 = a3;
      if (!v35)
        goto LABEL_62;
LABEL_58:
      if (*(_QWORD *)(a1 + 104) && (v36 < 0x64 || !(v36 % 0x64)))
      {
        v41 = (TVertex *)TGraph::addVertex(v6, 0);
        addSequence(*(const __int32 ***)(a1 + 104), v40, v41, v6, a6, 0, 0, 0);
        v40 = v41;
      }
LABEL_62:
      v42 = v32;
      if (!v32)
      {
        result = (unint64_t)TCountingObject::addHundredChunk((TCountingObject *)a1, v36, (v29 & 1) == 0, v73, v29 & 1, 1, v40, a4, v6, a6);
        break;
      }
      v76 = v32 == 1;
      v79 = (char *)v77 + v27;
      v43 = *(_DWORD *)((char *)v77 + v27 + 4);
      a3 = a4;
      if (v43)
        a3 = (TVertex *)TGraph::addVertex(a5, 0);
      v44 = v78 * v32;
      Magnitude = TCountingObject::getMagnitude((TCountingObject *)a1, v29 & 1, v43 == 0, v44, v36);
      if (!Magnitude)
      {
        if (v43 || (v48 = *(_QWORD *)(a1 + 72)) == 0)
          v48 = *(_QWORD *)(a1 + 40);
        v50 = v48 + 32;
        v49 = *(_QWORD *)(v48 + 32);
        if (10 * v44 < (unint64_t)((*(_QWORD *)(v50 + 8) - v49) >> 3))
        {
          v46 = *(const __int32 ***)(v49 + 80 * v44);
          if (v46)
          {
            v6 = a5;
            v51 = (TVertex *)TGraph::addVertex(a5, 0);
            TCountingObject::addHundredChunk((TCountingObject *)a1, v36, 0, v73, v29 & 1, 0, v40, v51, a5, a6);
            v40 = v51;
            goto LABEL_68;
          }
        }
        if (v36 <= 9
          && (v52 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32),
              v69 + v36 < (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) - v52) >> 3)
          && (v46 = *(const __int32 ***)(v52 + 8 * (v69 + v36))) != 0)
        {
          v53 = v40;
        }
        else
        {
          v53 = (TVertex *)TGraph::addVertex(a5, 0);
          TCountingObject::addHundredChunk((TCountingObject *)a1, v36, 0, v73, v29 & 1, 0, v40, v53, a5, a6);
          v54 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32);
          if (v69 >= (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) - v54) >> 3)
            v46 = 0;
          else
            v46 = *(const __int32 ***)(v54 + 8 * v69);
        }
        if (*((_DWORD *)v79 + 1))
        {
          v55 = *(_DWORD *)(v68 + v27);
          if ((v56 & 1) == 0
          {
            v66 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v66);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v66;
          }
          v57 = v55 - 48;
          if ((int)v55 < 48)
            goto LABEL_89;
          if (v55 <= 0x39)
            goto LABEL_90;
          if (v55 < 0x660)
LABEL_89:
            v57 = -1;
          else
            v57 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v55);
LABEL_90:
          v58 = v57;
        }
        else
        {
          v58 = 0;
        }
        if (v58 + 1 >= v42)
        {
          v40 = v53;
        }
        else
        {
          v40 = (TVertex *)TGraph::addVertex(a5, 0);
          addSequence(v46, v53, v40, a5, a6, 0, 0, 0);
          v59 = v69 * (v42 - 1);
          if (v43 || (v60 = *(_QWORD *)(a1 + 72)) == 0)
            v60 = *(_QWORD *)(a1 + 40);
          v62 = v60 + 32;
          v61 = *(_QWORD *)(v60 + 32);
          if (v59 >= (*(_QWORD *)(v62 + 8) - v61) >> 3)
            v46 = 0;
          else
            v46 = *(const __int32 ***)(v61 + 8 * v59);
        }
        goto LABEL_67;
      }
      v46 = (const __int32 **)Magnitude;
LABEL_67:
      v6 = a5;
LABEL_68:
      result = (unint64_t)addSequence(v46, v40, a3, v6, a6, 0, 0, 0);
      v29 = 0;
      v26 = v71;
      v27 += v70;
      HIDWORD(v47) = -858993459 * v36;
      LODWORD(v47) = -858993459 * v36;
      v28 = (v47 >> 1) < 0x1999999A;
      v17 = v78;
    }
    while (*((_DWORD *)v79 + 1));
  }
  if (v85)
  {
    result = (unint64_t)v82;
    if (v82 != v84)
    {
      if (v82)
        return MEMORY[0x20BD149A8]();
    }
  }
  return result;
}

void sub_209887100(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TChartSeeder::makeTerminals(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, TAllocator *a6)
{
  char *v6;
  BOOL Terminals;
  char *v11;
  uint64_t Segment;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int32 *v21;
  int v22;
  int *v23;
  int v24;
  unsigned __int8 v25;
  int v27;
  unsigned __int8 v28;
  BOOL v29;
  int v30;
  TLocaleInfo *v31;
  TLocaleInfo *v32;
  uint64_t v33;
  uint64_t v34;
  __int32 *v35;
  __int32 *v36;
  uint64_t v37;
  char *v38;
  _QWORD *ClientData;
  __int128 v43;
  const char *v44;
  __int32 *v45;
  __int128 v46;
  _BYTE v47[1024];
  char v48;

  v6 = (char *)(*(_QWORD *)(a1 + 8) + a2);
  if (*v6 && *(_QWORD *)(a1 + 32) > a2)
  {
    v45 = (__int32 *)v47;
    v46 = xmmword_209A57DD0;
    v48 = 1;
    Terminals = 1;
    v11 = v6;
    while (Terminals)
    {
      Segment = TSegmenter::getSegment(*(TSegmenter **)(a1 + 16), v11);
      v13 = Segment;
      if (!Segment)
        break;
      v14 = *(_DWORD *)(Segment + 24);
      if (v14 == 5)
        break;
      v15 = *(int **)Segment;
      if (wcslen(*(const __int32 **)Segment) + *((_QWORD *)&v46 + 1) > *(_QWORD *)(a1 + 32))
        break;
      if (!v14)
      {
        v22 = 0;
        while (1)
        {
          if (!v13)
            goto LABEL_68;
          if (*(_DWORD *)(v13 + 24))
            goto LABEL_12;
          v23 = *(int **)v13;
          v11 = *(char **)(v13 + 8);
          v24 = **(_DWORD **)v13;
          if (v24 == 9)
          {
LABEL_52:
            if (*(_DWORD *)(v13 + 24))
              goto LABEL_12;
            goto LABEL_68;
          }
          if (!*((_QWORD *)&v46 + 1) || v45[*((_QWORD *)&v46 + 1) - 1] != 32)
          {
            if ((v25 & 1) == 0
            {
              v32 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v32);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v32;
            }
            if (v24 <= 8202)
            {
              if (v24 != 32 && v24 != 160)
                goto LABEL_47;
            }
            else if (v24 != 8203 && v24 != 12288 && v24 != 65279)
            {
LABEL_47:
              v23 = *(int **)v13;
              goto LABEL_33;
            }
            v23 = *(int **)v13;
            if (wcslen(*(const __int32 **)v13) > 2)
              goto LABEL_52;
          }
LABEL_33:
          v27 = *v23;
          if ((v28 & 1) == 0
          {
            v31 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v31);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v31;
          }
          v29 = v27 == 10 || v27 == 13;
          v30 = !v29;
          if (v29 && ((v22 ^ 1) & 1) == 0)
            goto LABEL_52;
          if (!*((_QWORD *)&v46 + 1) || v45[*((_QWORD *)&v46 + 1) - 1] != 32)
            TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), (int *)" ", 1uLL);
          v22 |= v30 ^ 1;
          v13 = TSegmenter::getSegment(*(TSegmenter **)(a1 + 16), v11);
        }
      }
      v16 = 0;
      v11 = *(char **)(v13 + 8);
      while (v15[v16++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), v15, v16 - 1);
LABEL_12:
      v19 = *(char **)a3;
      v18 = *(_QWORD *)(a3 + 8);
      v20 = *(_QWORD *)(a1 + 24);
      if (*((_QWORD *)&v46 + 1) >= (unint64_t)v46)
      {
        if (v48)
        {
          LODWORD(v43) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), (int *)&v43, 1uLL);
          v21 = v45;
          --*((_QWORD *)&v46 + 1);
        }
        else
        {
          v21 = v45;
          if ((_QWORD)v46)
            v45[(_QWORD)v46 - 1] = 0;
        }
      }
      else
      {
        v21 = v45;
        v45[*((_QWORD *)&v46 + 1)] = 0;
      }
      Terminals = TGrammar::getTerminals(v20, (unsigned int *)v21, (char **)a3);
      v33 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
      if ((v18 - (uint64_t)v19) >> 3 != v33 >> 3)
      {
        *(_QWORD *)&v43 = v11 - v6;
        std::vector<unsigned long>::resize(a4, v33 >> 3, &v43);
        v44 = "s";
        if ((unint64_t)(*((_QWORD *)&v46 + 1) + 1) >> 62)
          v34 = -1;
        else
          v34 = 4 * (*((_QWORD *)&v46 + 1) + 1);
        v35 = (__int32 *)TAllocator::allocate(a6, v34);
        if (*((_QWORD *)&v46 + 1) >= (unint64_t)v46)
        {
          if (v48)
          {
            LODWORD(v43) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), (int *)&v43, 1uLL);
            v36 = v45;
            --*((_QWORD *)&v46 + 1);
          }
          else
          {
            v36 = v45;
            if ((_QWORD)v46)
              v45[(_QWORD)v46 - 1] = 0;
          }
        }
        else
        {
          v36 = v45;
          v45[*((_QWORD *)&v46 + 1)] = 0;
        }
        wcscpy(v35, v36);
        *(_QWORD *)&v43 = 1;
        *((_QWORD *)&v43 + 1) = v35;
        v38 = *(char **)a3;
        v37 = *(_QWORD *)(a3 + 8);
        ClientData = TGrammarCompiler::makeClientData((uint64_t *)&v44, &v43, 1, a6);
        std::vector<TSegment const*>::resize(a5, (v37 - (uint64_t)v38) >> 3, &ClientData);
      }
    }
LABEL_68:
    if (v48)
    {
      if (v45 != (__int32 *)v47 && v45 != 0)
        MEMORY[0x20BD149A8]();
    }
  }
}

void sub_209887664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  MEMORY[0x20BD149A8](v16, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x450]) && a16 != a9)
  {
    if (a16)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((void **)a1, a2 - v3, a3);
  }
}

void TPatternManager::TPatternManager(TPatternManager *this, TInputStream *a2, TInputStream *a3, TLexicon *a4, TTokenizerParamManager *a5)
{
  TGrammarCompiler *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  const __int32 *v31;
  uint64_t v32;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t i;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  _QWORD *v48;
  std::string *v49;
  const char *v50;
  _QWORD *exception;
  std::string *v52;
  const char *v53;
  _QWORD *v54;
  std::string *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void *v59[2];
  uint64_t v60;
  _BYTE v61[24];
  uint64_t v62;
  void *__p[2];
  uint64_t v64;
  _BYTE *v65;
  __int128 v66;
  _BYTE v67[1024];
  char v68;
  _BYTE v69[24];
  uint64_t v70;
  const char *v71;
  __int128 v72;
  uint64_t v73;
  const char *v74;
  __int128 v75;
  uint64_t v76;
  const char *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  TAllocator::TAllocator((TPatternManager *)((char *)this + 40), 2048);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 1) = a4;
  *((_QWORD *)this + 2) = a5;
  *(_QWORD *)this = -1;
  *((_QWORD *)this + 22) = 0;
  v10 = (TGrammarCompiler *)operator new();
  TGrammarCompiler::TGrammarCompiler(v10, (const TLocaleInfo *)(*((_QWORD *)this + 1) + 240));
  *((_QWORD *)this + 3) = v10;
  v11 = operator new();
  TParser::TParser(v11, *(_QWORD *)(*((_QWORD *)this + 3) + 56));
  *((_QWORD *)this + 4) = v11;
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)"G", (uint64_t)callBackGetLength, 1, 1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)"F", (uint64_t)callBackFind, 2, 2, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)"C", (uint64_t)callBackCopy, 2, 3, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)"F", (uint64_t)callBackFormat, 1, -1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)"D", (uint64_t)callBackDigitToRoman, 1, 1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)"R", (uint64_t)callBackRomanToDigit, 1, 1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)"A", (uint64_t)callBackSeqAlt, 1, -1, (uint64_t)"A", (uint64_t)a4);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)"S", (uint64_t)callBackSeqAlt, 1, -1, (uint64_t)"S", (uint64_t)a4);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)"S", (uint64_t)callBackSync, 1, 1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)"L", (uint64_t)callBackLookup, 1, 1, (uint64_t)a4, (uint64_t)a5);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)"G", (uint64_t)callBackGetCategoryTag, 1, 1, (uint64_t)a4, 0);
  v65 = v67;
  v66 = xmmword_209A57DD0;
  v68 = 1;
  TParamManager::begin((uint64_t)a5, v69);
  while (1)
  {
    TParamManager::end((uint64_t)a5, __p);
    v12 = *(_QWORD **)v69;
    if (*(void **)v69 == __p[0])
      break;
    v13 = *(_QWORD *)(*(_QWORD *)v69 + 40);
    if (v13 && (v14 = v13 - 1, v15 = *((_QWORD *)a5 + 3), v14 < (*((_QWORD *)a5 + 4) - v15) >> 3))
      v16 = *(_QWORD *)(v15 + 8 * v14);
    else
      v16 = 0;
    if (*(char *)(v16 + 111) < 0)
    {
      if (*(_QWORD *)(v16 + 96))
        goto LABEL_22;
    }
    else if (*(_BYTE *)(v16 + 111))
    {
      goto LABEL_22;
    }
    TBuffer<wchar_t>::assign((uint64_t)&v65, (int *)"P");
    v17 = (int *)(v16 + 16);
    if (*(char *)(v16 + 39) < 0)
      v17 = *(int **)v17;
    v18 = 0;
    while (v17[v18++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v65, *((unint64_t *)&v66 + 1), v17, v18 - 1);
    v20 = (_QWORD *)*((_QWORD *)this + 3);
    if (*((_QWORD *)&v66 + 1) >= (unint64_t)v66)
    {
      if (v68)
      {
        LODWORD(__p[0]) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v65, *((unint64_t *)&v66 + 1), (int *)__p, 1uLL);
        v21 = (uint64_t)v65;
        --*((_QWORD *)&v66 + 1);
      }
      else
      {
        v21 = (uint64_t)v65;
        if ((_QWORD)v66)
          *(_DWORD *)&v65[4 * v66 - 4] = 0;
      }
    }
    else
    {
      v21 = (uint64_t)v65;
      *(_DWORD *)&v65[4 * *((_QWORD *)&v66 + 1)] = 0;
    }
    TGrammarCompiler::registerFunction(v20, v21, (uint64_t)callBackParam, 0, 0, v16, (uint64_t)this);
    v12 = *(_QWORD **)v69;
LABEL_22:
    v22 = (_QWORD *)v12[1];
    if (v22)
    {
      do
      {
        v23 = v22;
        v22 = (_QWORD *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        v23 = (_QWORD *)v12[2];
        v24 = *v23 == (_QWORD)v12;
        v12 = v23;
      }
      while (!v24);
    }
    *(_QWORD *)v69 = v23;
  }
  v25 = *((_QWORD *)a4 + 42);
  TParamManager::begin(v25, v69);
  while (1)
  {
    TParamManager::end(v25, __p);
    if (*(void **)v69 == __p[0])
      break;
    v26 = *(_QWORD *)(*(_QWORD *)v69 + 40);
    if (v26 && (v27 = v26 - 1, v28 = *(_QWORD *)(v25 + 24), v27 < (*(_QWORD *)(v25 + 32) - v28) >> 3))
      v29 = *(_QWORD *)(v28 + 8 * v27);
    else
      v29 = 0;
    v30 = (int *)(v29 + 16);
    v31 = (const __int32 *)(v29 + 16);
    if (*(char *)(v29 + 39) < 0)
      v31 = *(const __int32 **)v30;
    TParamManager::find((uint64_t)a5, v31, (uint64_t *)__p);
    TParamManager::end((uint64_t)a5, v61);
    if (__p[0] == *(void **)v61)
    {
      TBuffer<wchar_t>::assign((uint64_t)&v65, (int *)"P");
      if (*(char *)(v29 + 39) < 0)
        v30 = *(int **)v30;
      v32 = 0;
      while (v30[v32++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v65, *((unint64_t *)&v66 + 1), v30, v32 - 1);
      v34 = (_QWORD *)*((_QWORD *)this + 3);
      if (*((_QWORD *)&v66 + 1) >= (unint64_t)v66)
      {
        if (v68)
        {
          LODWORD(__p[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v65, *((unint64_t *)&v66 + 1), (int *)__p, 1uLL);
          v35 = (uint64_t)v65;
          --*((_QWORD *)&v66 + 1);
        }
        else
        {
          v35 = (uint64_t)v65;
          if ((_QWORD)v66)
            *(_DWORD *)&v65[4 * v66 - 4] = 0;
        }
      }
      else
      {
        v35 = (uint64_t)v65;
        *(_DWORD *)&v65[4 * *((_QWORD *)&v66 + 1)] = 0;
      }
      TGrammarCompiler::registerFunction(v34, v35, (uint64_t)callBackParam, 0, 0, v29, 0);
    }
    v36 = *(_QWORD **)v69;
    v37 = *(_QWORD **)(*(_QWORD *)v69 + 8);
    if (v37)
    {
      do
      {
        v38 = v37;
        v37 = (_QWORD *)*v37;
      }
      while (v37);
    }
    else
    {
      do
      {
        v38 = (_QWORD *)v36[2];
        v24 = *v38 == (_QWORD)v36;
        v36 = v38;
      }
      while (!v24);
    }
    *(_QWORD *)v69 = v38;
  }
  if (*((_BYTE *)a2 + 8))
  {
    if (TInputStream::verifyHeader((uint64_t)a2, "TknPattern", (uint64_t)&pTknPatternVersion, 3))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *(_QWORD *)v69 = aPpx;
      if (SHIBYTE(v64) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v69[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v69[8] = *(_OWORD *)__p;
        v70 = v64;
      }
      *(_QWORD *)v69 = &unk_24C214BA0;
      if (v70 >= 0)
        v50 = &v69[8];
      else
        v50 = *(const char **)&v69[8];
      conditionalAssert(v50, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 1769, v43, v44);
      *(_QWORD *)v69 = aPpx;
      if (SHIBYTE(v70) < 0)
        operator delete(*(void **)&v69[8]);
      if (SHIBYTE(v64) < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v69, &byte_209A88803);
      *exception = aPpx;
      v52 = (std::string *)(exception + 1);
      if ((v69[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)v69, *(std::string::size_type *)&v69[8]);
      }
      else
      {
        v57 = *(_OWORD *)v69;
        exception[3] = *(_QWORD *)&v69[16];
        *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v57;
      }
      *exception = &unk_24C214BA0;
    }
    TFileObjectParser::TFileObjectParser((TFileObjectParser *)__p, a2);
    v39 = __p[0];
    *(_OWORD *)&v69[8] = xmmword_209A57DB0;
    *(_QWORD *)v69 = "A";
    v72 = xmmword_209A57DB0;
    v70 = -1;
    v71 = "C";
    v75 = xmmword_209A57DB0;
    v73 = -1;
    v74 = "D";
    v78 = xmmword_209A57DB0;
    v76 = -1;
    v77 = "R";
    v79 = 1;
    if (TFileObject::verify((uint64_t)__p[0], (uint64_t)v69, 4uLL, 1))
    {
      std::string::basic_string[abi:ne180100]<0>(v59, &byte_209A88803);
      *(_QWORD *)v61 = aPpx;
      if (SHIBYTE(v60) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v61[8], (const std::string::value_type *)v59[0], (std::string::size_type)v59[1]);
      }
      else
      {
        *(_OWORD *)&v61[8] = *(_OWORD *)v59;
        v62 = v60;
      }
      *(_QWORD *)v61 = &unk_24C214BA0;
      if (v62 >= 0)
        v53 = &v61[8];
      else
        v53 = *(const char **)&v61[8];
      conditionalAssert(v53, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 1785, v45, v46);
      *(_QWORD *)v61 = aPpx;
      if (SHIBYTE(v62) < 0)
        operator delete(*(void **)&v61[8]);
      if (SHIBYTE(v60) < 0)
        operator delete(v59[0]);
      v54 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v61, &byte_209A88803);
      *v54 = aPpx;
      v55 = (std::string *)(v54 + 1);
      if ((v61[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v55, *(const std::string::value_type **)v61, *(std::string::size_type *)&v61[8]);
      }
      else
      {
        v58 = *(_OWORD *)v61;
        v54[3] = *(_QWORD *)&v61[16];
        *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v58;
      }
      *v54 = &unk_24C214BA0;
    }
    for (i = v39[3]; i; i = *(_QWORD *)(i + 16))
    {
      if (!wcscmp(*(const __int32 **)(i + 8), (const __int32 *)"A"))
      {
        TPatternManager::addArrayObject((TLexicon **)this, (const TFileObject *)i);
      }
      else if (!wcscmp(*(const __int32 **)(i + 8), (const __int32 *)"C"))
      {
        TPatternManager::addCountingObject(this, (const TFileObject *)i);
      }
      else if (!wcscmp(*(const __int32 **)(i + 8), (const __int32 *)"D"))
      {
        TPatternManager::addDigitObject((TLexicon **)this, (const TFileObject *)i);
      }
      else if (!wcscmp(*(const __int32 **)(i + 8), (const __int32 *)"R"))
      {
        TPatternManager::addRomanObject((TLexicon **)this, (const TFileObject *)i);
      }
    }
    TFileObjectParser::~TFileObjectParser((TFileObjectParser *)__p);
  }
  if (TInputStream::verifyHeader((uint64_t)a3, "TknGrammar", (uint64_t)pTknGrammarVersion, 2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *(_QWORD *)v69 = aPpx;
    if (SHIBYTE(v64) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v69[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v69[8] = *(_OWORD *)__p;
      v70 = v64;
    }
    *(_QWORD *)v69 = &unk_24C214BA0;
    if (v70 >= 0)
      v47 = &v69[8];
    else
      v47 = *(const char **)&v69[8];
    conditionalAssert(v47, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 1820, v41, v42);
    *(_QWORD *)v69 = aPpx;
    if (SHIBYTE(v70) < 0)
      operator delete(*(void **)&v69[8]);
    if (SHIBYTE(v64) < 0)
      operator delete(__p[0]);
    v48 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v69, &byte_209A88803);
    *v48 = aPpx;
    v49 = (std::string *)(v48 + 1);
    if ((v69[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v49, *(const std::string::value_type **)v69, *(std::string::size_type *)&v69[8]);
    }
    else
    {
      v56 = *(_OWORD *)v69;
      v48[3] = *(_QWORD *)&v69[16];
      *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v56;
    }
    *v48 = &unk_24C214BA0;
  }
  TGrammarCompiler::registerRules(*((_QWORD *)this + 3), a3, 0);
  TGrammarCompiler::finalize(*((TGrammarCompiler **)this + 3));
  if (v68 && v65 != v67 && v65)
    MEMORY[0x20BD149A8](v65, 0x1000C4052888210);
}

void sub_209888398(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  TPatternManager *v33;
  uint64_t v36;

  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v36);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    TPatternManager::freeMemory(v33);
    __cxa_rethrow();
  }
  JUMPOUT(0x209888588);
}

void sub_2098884F0()
{
  uint64_t v0;

  MEMORY[0x20BD149A8](v0, 0x10F0C4009B12AA1);
  JUMPOUT(0x2098885BCLL);
}

void sub_20988852C()
{
  JUMPOUT(0x209888534);
}

void sub_209888554()
{
  _QWORD *v0;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  TAllocator *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  __cxa_end_catch();
  if (v10)
  {
    if (v9 != v8 && v9 != 0)
      MEMORY[0x20BD149A8]();
  }
  v2 = (void *)v0[19];
  if (v2)
  {
    v0[20] = v2;
    operator delete(v2);
  }
  v3 = (void *)v0[16];
  if (v3)
  {
    v0[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)v0[13];
  if (v4)
  {
    v0[14] = v4;
    operator delete(v4);
  }
  v5 = *v7;
  if (*v7)
  {
    v0[11] = v5;
    operator delete(v5);
  }
  TAllocator::clear(v6);
  JUMPOUT(0x209888610);
}

void sub_209888608(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x209888610);
  __clang_call_terminate(a1);
}

uint64_t callBackSeqAlt(uint64_t a1, unint64_t a2, __int32 *a3, uint64_t a4, TAllocator *a5)
{
  size_t v10;
  uint64_t v11;
  __int32 *v12;

  v10 = callBackSeqAltHelper(a1, a2, a3, a4, 0);
  if (v10 >= 2)
  {
    if (v10 >> 62)
      v11 = -1;
    else
      v11 = 4 * v10;
    v12 = (__int32 *)TAllocator::allocate(a5, v11);
    callBackSeqAltHelper(a1, a2, a3, a4, v12);
  }
  return 1;
}

uint64_t callBackSync(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  int *v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  int v18;

  if (a2 <= 1 && *(_QWORD *)a1 > 1uLL)
    return 0;
  v7 = *(int **)(a1 + 8);
  if (*v7)
  {
    v8 = wcslen(*(const __int32 **)(a1 + 8));
    v9 = v8 + 10;
    if ((v8 + 10) >> 62)
      v10 = -1;
    else
      v10 = 4 * (v8 + 10);
    v13 = TAllocator::allocate(a5, v10);
    v14 = v9;
    v15 = 0;
    v17 = 0;
    TBuffer<wchar_t>::assign((uint64_t)&v13, (int *)"S");
    v11 = 0;
    while (v7[v11++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v13, v15, v7, v11 - 1);
    v18 = 34;
    TBuffer<wchar_t>::insert((uint64_t)&v13, v15, &v18, 1uLL);
    if (v15 < v14)
    {
      *((_DWORD *)v13 + v15) = 0;
LABEL_17:
      if (v17 && v13 != &v16)
      {
        if (v13)
          MEMORY[0x20BD149A8]();
      }
      return 1;
    }
    if (v17)
    {
      v18 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v13, v15--, &v18, 1uLL);
      goto LABEL_17;
    }
    if (v14)
    {
      *((_DWORD *)v13 + v14 - 1) = 0;
      goto LABEL_17;
    }
  }
  return 1;
}

void sub_209888828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (LOBYTE(STACK[0x420]))
    callBackSync(va);
  _Unwind_Resume(a1);
}

uint64_t callBackLookup(_QWORD *a1, unint64_t a2, _QWORD *a3, uint64_t a4, TAllocator *a5)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *p_p;
  uint64_t v14;
  char *v15;
  uint64_t ActiveConfigHandle;
  size_t v17;
  uint64_t v18;
  uint64_t ValidConfig;
  uint64_t i;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void *v25;
  void **v26;
  void *v28;
  _BYTE *v29;
  uint64_t v30;
  void *__p;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (a2 <= 1 && *a1 > 1uLL)
    return 0;
  v8 = (unsigned int *)a1[1];
  if (!*v8)
    return 1;
  if (TLexicon::checkName((uint64_t)a3, (int *)v8, 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    loggableUnicode(v8, &__p);
    if (v32 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    tknPrintf("Error: '%s' : Lookup requested for an invalid word name.\n", v9, v10, v11, v12, p_p);
    if (v32 < 0)
      operator delete(__p);
    return 0;
  }
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v15 = TStringParam::get((TStringParam *)(a4 + 10744));
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(a4 + 16464));
  v17 = *(int *)(a4 + 4 * TParam::getValidConfig((TParam *)(a4 + 16464), ActiveConfigHandle) + 16624);
  v18 = TParam::getActiveConfigHandle((TParam *)(a4 + 16112));
  ValidConfig = TParam::getValidConfig((TParam *)(a4 + 16112), v18);
  TLexicon::findHeadClonesCollated(a3, v8, v15, v17, *(int *)(a4 + 4 * ValidConfig + 16272), &v28);
  for (i = 0; i != 1600; i += 16)
    *(void **)((char *)&__p + i) = 0;
  v21 = 0;
  v22 = 0;
  v23 = (v29 - (_BYTE *)v28) >> 5;
  v24 = (char *)v28 + 16;
  do
  {
    if (v23 == v21)
      break;
    if ((*v24 & 0x35) == 0)
    {
      v25 = (void *)**((_QWORD **)v24 - 2);
      v26 = &__p + 2 * v22;
      *v26 = (void *)1;
      v26[1] = v25;
      ++v22;
    }
    ++v21;
    v24 += 32;
  }
  while (v21 != 100);
  std::vector<TLexiconMatch>::resize((uint64_t)&v28, 0);
  if (v22)
  {
    if (v22 == 1)
      v14 = (uint64_t)__p;
    else
      v14 = callBackSeqAlt((uint64_t)&__p, v22, (__int32 *)"A", (uint64_t)a3, a5);
  }
  else
  {
    v14 = 1;
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  return v14;
}

void sub_209888AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TPatternManager::addArrayObject(TLexicon **this, const TFileObject *a2)
{
  uint64_t v4;
  TLexicon *v5;
  TLexicon **v6;
  unint64_t v7;
  const __int32 *v8;
  uint64_t v9;
  const __int32 *v10;
  int *v11;
  uint64_t v12;
  TLexicon *v14;
  uint64_t v15;
  TLexicon *v16;
  uint64_t *v17;
  TLexicon *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  TLexicon *v25;
  TLexicon *v26;
  TLexicon *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  _QWORD *exception;
  std::string *v39;
  __int128 v40;
  _BYTE __p[24];
  _QWORD v42[128];
  char v43;
  __int128 v44;
  uint64_t v45;

  v4 = operator new();
  TArrayObject::TArrayObject((TArrayObject *)v4, a2, this[1], (TAllocator *)(this + 5));
  v5 = this[10];
  v6 = this + 10;
  if (this[11] != v5)
  {
    v7 = 0;
    do
    {
      v8 = (const __int32 *)(v4 + 8);
      if (*(char *)(v4 + 31) < 0)
        v8 = *(const __int32 **)(v4 + 8);
      v9 = *((_QWORD *)v5 + v7);
      v10 = (const __int32 *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
        v10 = *(const __int32 **)v10;
      if (!wcscmp(v8, v10))
      {
        loggableFileObject((uint64_t *)a2);
        if (__p[23] >= 0)
          v34 = __p;
        else
          v34 = *(_BYTE **)__p;
        tknPrintf("Error: %sArray name already defined\n", v30, v31, v32, v33, v34);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        std::string::basic_string[abi:ne180100]<0>(&v44, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v45) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v44, *((std::string::size_type *)&v44 + 1));
        }
        else
        {
          *(_OWORD *)&__p[8] = v44;
          v42[0] = v45;
        }
        *(_QWORD *)__p = &unk_24C214BA0;
        if (v42[0] >= 0)
          v37 = &__p[8];
        else
          v37 = *(const char **)&__p[8];
        conditionalAssert(v37, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 1912, v35, v36);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v42[0]) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v45) < 0)
          operator delete((void *)v44);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *exception = aPpx;
        v39 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v40 = *(_OWORD *)__p;
          exception[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        }
        *exception = &unk_24C214BA0;
      }
      ++v7;
      v5 = this[10];
    }
    while (v7 < (this[11] - v5) >> 3);
  }
  *(_QWORD *)__p = v42;
  *(_OWORD *)&__p[8] = xmmword_209A57DD0;
  v43 = 1;
  TBuffer<wchar_t>::assign((uint64_t)__p, (int *)"A");
  v11 = (int *)(v4 + 8);
  if (*(char *)(v4 + 31) < 0)
    v11 = *(int **)v11;
  v12 = 0;
  while (v11[v12++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v11, v12 - 1);
  v14 = this[3];
  if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
  {
    if (v43)
    {
      LODWORD(v44) = 0;
      TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)&v44, 1uLL);
      v15 = *(_QWORD *)__p;
      --*(_QWORD *)&__p[16];
    }
    else
    {
      v15 = *(_QWORD *)__p;
      if (*(_QWORD *)&__p[8])
        *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)__p;
    *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
  }
  TGrammarCompiler::registerFunction(v14, v15, (uint64_t)callBackObject, 1, 1, v4, 0);
  v16 = this[12];
  v17 = (uint64_t *)this[11];
  if (v17 >= (uint64_t *)v16)
  {
    v19 = ((char *)v17 - (char *)*v6) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v20 = v16 - *v6;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(this + 12), v22);
    else
      v23 = 0;
    v24 = (uint64_t *)&v23[8 * v19];
    v25 = (TLexicon *)&v23[8 * v22];
    *v24 = v4;
    v18 = (TLexicon *)(v24 + 1);
    v27 = this[10];
    v26 = this[11];
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 = (TLexicon *)((char *)v26 - 8);
        *--v24 = v28;
      }
      while (v26 != v27);
      v26 = *v6;
    }
    this[10] = (TLexicon *)v24;
    this[11] = v18;
    this[12] = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v17 = v4;
    v18 = (TLexicon *)(v17 + 1);
  }
  this[11] = v18;
  if (v43)
  {
    if (*(_QWORD **)__p != v42 && *(_QWORD *)__p != 0)
      MEMORY[0x20BD149A8]();
  }
}

void sub_209888ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1093C40918A3909);
  _Unwind_Resume(a1);
}

void TPatternManager::addCountingObject(TPatternManager *this, const TFileObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  char **v6;
  unint64_t v7;
  const __int32 *v8;
  uint64_t v9;
  const __int32 *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  _QWORD *exception;
  std::string *v39;
  __int128 v40;
  _BYTE __p[24];
  _QWORD v42[128];
  char v43;
  __int128 v44;
  uint64_t v45;

  v4 = operator new();
  TCountingObject::TCountingObject(v4, (uint64_t)a2, (uint64_t *)this + 10, *((TLexicon **)this + 1), (TPatternManager *)((char *)this + 40));
  v5 = *((_QWORD *)this + 13);
  v6 = (char **)((char *)this + 104);
  if (*((_QWORD *)this + 14) != v5)
  {
    v7 = 0;
    do
    {
      v8 = (const __int32 *)(v4 + 8);
      if (*(char *)(v4 + 31) < 0)
        v8 = *(const __int32 **)(v4 + 8);
      v9 = *(_QWORD *)(v5 + 8 * v7);
      v10 = (const __int32 *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
        v10 = *(const __int32 **)v10;
      if (!wcscmp(v8, v10))
      {
        loggableFileObject((uint64_t *)a2);
        if (__p[23] >= 0)
          v34 = __p;
        else
          v34 = *(_BYTE **)__p;
        tknPrintf("Error: %sCounting name already defined\n", v30, v31, v32, v33, v34);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        std::string::basic_string[abi:ne180100]<0>(&v44, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v45) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v44, *((std::string::size_type *)&v44 + 1));
        }
        else
        {
          *(_OWORD *)&__p[8] = v44;
          v42[0] = v45;
        }
        *(_QWORD *)__p = &unk_24C214BA0;
        if (v42[0] >= 0)
          v37 = &__p[8];
        else
          v37 = *(const char **)&__p[8];
        conditionalAssert(v37, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 1881, v35, v36);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v42[0]) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v45) < 0)
          operator delete((void *)v44);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *exception = aPpx;
        v39 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v40 = *(_OWORD *)__p;
          exception[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        }
        *exception = &unk_24C214BA0;
      }
      ++v7;
      v5 = *((_QWORD *)this + 13);
    }
    while (v7 < (*((_QWORD *)this + 14) - v5) >> 3);
  }
  *(_QWORD *)__p = v42;
  *(_OWORD *)&__p[8] = xmmword_209A57DD0;
  v43 = 1;
  TBuffer<wchar_t>::assign((uint64_t)__p, (int *)"C");
  v11 = (int *)(v4 + 8);
  if (*(char *)(v4 + 31) < 0)
    v11 = *(int **)v11;
  v12 = 0;
  while (v11[v12++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v11, v12 - 1);
  v14 = (_QWORD *)*((_QWORD *)this + 3);
  if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
  {
    if (v43)
    {
      LODWORD(v44) = 0;
      TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)&v44, 1uLL);
      v15 = *(_QWORD *)__p;
      --*(_QWORD *)&__p[16];
    }
    else
    {
      v15 = *(_QWORD *)__p;
      if (*(_QWORD *)&__p[8])
        *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)__p;
    *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
  }
  TGrammarCompiler::registerFunction(v14, v15, (uint64_t)callBackObject, 1, 1, v4, 0);
  v16 = *((_QWORD *)this + 15);
  v17 = (uint64_t *)*((_QWORD *)this + 14);
  if ((unint64_t)v17 >= v16)
  {
    v19 = ((char *)v17 - *v6) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v20 = v16 - (_QWORD)*v6;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 120, v22);
    else
      v23 = 0;
    v24 = (uint64_t *)&v23[8 * v19];
    v25 = &v23[8 * v22];
    *v24 = v4;
    v18 = v24 + 1;
    v27 = (char *)*((_QWORD *)this + 13);
    v26 = (char *)*((_QWORD *)this + 14);
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v24 = v28;
      }
      while (v26 != v27);
      v26 = *v6;
    }
    *((_QWORD *)this + 13) = v24;
    *((_QWORD *)this + 14) = v18;
    *((_QWORD *)this + 15) = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v17 = v4;
    v18 = v17 + 1;
  }
  *((_QWORD *)this + 14) = v18;
  if (v43)
  {
    if (*(_QWORD **)__p != v42 && *(_QWORD *)__p != 0)
      MEMORY[0x20BD149A8]();
  }
}

void sub_209889378(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, void *a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        __cxa_rethrow();
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_209889484()
{
  __cxa_end_catch();
  JUMPOUT(0x20988948CLL);
}

void TPatternManager::addDigitObject(TLexicon **this, const TFileObject *a2)
{
  uint64_t v4;
  TLexicon *v5;
  TLexicon **v6;
  unint64_t v7;
  const __int32 *v8;
  uint64_t v9;
  const __int32 *v10;
  int *v11;
  uint64_t v12;
  TLexicon *v14;
  uint64_t v15;
  TLexicon *v16;
  uint64_t *v17;
  TLexicon *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  TLexicon *v25;
  TLexicon *v26;
  TLexicon *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  _QWORD *exception;
  std::string *v39;
  __int128 v40;
  _BYTE __p[24];
  _QWORD v42[128];
  char v43;
  __int128 v44;
  uint64_t v45;

  v4 = operator new();
  TDigitObject::TDigitObject((TDigitObject *)v4, a2, this[1], (TAllocator *)(this + 5));
  v5 = this[16];
  v6 = this + 16;
  if (this[17] != v5)
  {
    v7 = 0;
    do
    {
      v8 = (const __int32 *)(v4 + 8);
      if (*(char *)(v4 + 31) < 0)
        v8 = *(const __int32 **)(v4 + 8);
      v9 = *((_QWORD *)v5 + v7);
      v10 = (const __int32 *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
        v10 = *(const __int32 **)v10;
      if (!wcscmp(v8, v10))
      {
        loggableFileObject((uint64_t *)a2);
        if (__p[23] >= 0)
          v34 = __p;
        else
          v34 = *(_BYTE **)__p;
        tknPrintf("Error: %sDigit name already defined\n", v30, v31, v32, v33, v34);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        std::string::basic_string[abi:ne180100]<0>(&v44, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v45) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v44, *((std::string::size_type *)&v44 + 1));
        }
        else
        {
          *(_OWORD *)&__p[8] = v44;
          v42[0] = v45;
        }
        *(_QWORD *)__p = &unk_24C214BA0;
        if (v42[0] >= 0)
          v37 = &__p[8];
        else
          v37 = *(const char **)&__p[8];
        conditionalAssert(v37, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 1937, v35, v36);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v42[0]) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v45) < 0)
          operator delete((void *)v44);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *exception = aPpx;
        v39 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v40 = *(_OWORD *)__p;
          exception[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        }
        *exception = &unk_24C214BA0;
      }
      ++v7;
      v5 = this[16];
    }
    while (v7 < (this[17] - v5) >> 3);
  }
  *(_QWORD *)__p = v42;
  *(_OWORD *)&__p[8] = xmmword_209A57DD0;
  v43 = 1;
  TBuffer<wchar_t>::assign((uint64_t)__p, (int *)"D");
  v11 = (int *)(v4 + 8);
  if (*(char *)(v4 + 31) < 0)
    v11 = *(int **)v11;
  v12 = 0;
  while (v11[v12++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v11, v12 - 1);
  v14 = this[3];
  if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
  {
    if (v43)
    {
      LODWORD(v44) = 0;
      TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)&v44, 1uLL);
      v15 = *(_QWORD *)__p;
      --*(_QWORD *)&__p[16];
    }
    else
    {
      v15 = *(_QWORD *)__p;
      if (*(_QWORD *)&__p[8])
        *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)__p;
    *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
  }
  TGrammarCompiler::registerFunction(v14, v15, (uint64_t)callBackObject, 1, 1, v4, 0);
  v16 = this[18];
  v17 = (uint64_t *)this[17];
  if (v17 >= (uint64_t *)v16)
  {
    v19 = ((char *)v17 - (char *)*v6) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v20 = v16 - *v6;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(this + 18), v22);
    else
      v23 = 0;
    v24 = (uint64_t *)&v23[8 * v19];
    v25 = (TLexicon *)&v23[8 * v22];
    *v24 = v4;
    v18 = (TLexicon *)(v24 + 1);
    v27 = this[16];
    v26 = this[17];
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 = (TLexicon *)((char *)v26 - 8);
        *--v24 = v28;
      }
      while (v26 != v27);
      v26 = *v6;
    }
    this[16] = (TLexicon *)v24;
    this[17] = v18;
    this[18] = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v17 = v4;
    v18 = (TLexicon *)(v17 + 1);
  }
  this[17] = v18;
  if (v43)
  {
    if (*(_QWORD **)__p != v42 && *(_QWORD *)__p != 0)
      MEMORY[0x20BD149A8]();
  }
}

void sub_20988988C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x10B3C40CE74B16CLL);
  _Unwind_Resume(a1);
}

void TPatternManager::addRomanObject(TLexicon **this, const TFileObject *a2)
{
  uint64_t v4;
  TLexicon *v5;
  TLexicon **v6;
  unint64_t v7;
  const __int32 *v8;
  uint64_t v9;
  const __int32 *v10;
  int *v11;
  uint64_t v12;
  TLexicon *v14;
  uint64_t v15;
  TLexicon *v16;
  uint64_t *v17;
  TLexicon *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  TLexicon *v25;
  TLexicon *v26;
  TLexicon *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  _QWORD *exception;
  std::string *v39;
  __int128 v40;
  _BYTE __p[24];
  _QWORD v42[128];
  char v43;
  __int128 v44;
  uint64_t v45;

  v4 = operator new();
  TRomanObject::TRomanObject((TRomanObject *)v4, a2, this[1], (TAllocator *)(this + 5));
  v5 = this[19];
  v6 = this + 19;
  if (this[20] != v5)
  {
    v7 = 0;
    do
    {
      v8 = (const __int32 *)(v4 + 8);
      if (*(char *)(v4 + 31) < 0)
        v8 = *(const __int32 **)(v4 + 8);
      v9 = *((_QWORD *)v5 + v7);
      v10 = (const __int32 *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
        v10 = *(const __int32 **)v10;
      if (!wcscmp(v8, v10))
      {
        loggableFileObject((uint64_t *)a2);
        if (__p[23] >= 0)
          v34 = __p;
        else
          v34 = *(_BYTE **)__p;
        tknPrintf("Error: %sRoman name already defined\n", v30, v31, v32, v33, v34);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        std::string::basic_string[abi:ne180100]<0>(&v44, &byte_209A88803);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v45) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v44, *((std::string::size_type *)&v44 + 1));
        }
        else
        {
          *(_OWORD *)&__p[8] = v44;
          v42[0] = v45;
        }
        *(_QWORD *)__p = &unk_24C214BA0;
        if (v42[0] >= 0)
          v37 = &__p[8];
        else
          v37 = *(const char **)&__p[8];
        conditionalAssert(v37, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 1962, v35, v36);
        *(_QWORD *)__p = aPpx;
        if (SHIBYTE(v42[0]) < 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v45) < 0)
          operator delete((void *)v44);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *exception = aPpx;
        v39 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          v40 = *(_OWORD *)__p;
          exception[3] = *(_QWORD *)&__p[16];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        }
        *exception = &unk_24C214BA0;
      }
      ++v7;
      v5 = this[19];
    }
    while (v7 < (this[20] - v5) >> 3);
  }
  *(_QWORD *)__p = v42;
  *(_OWORD *)&__p[8] = xmmword_209A57DD0;
  v43 = 1;
  TBuffer<wchar_t>::assign((uint64_t)__p, (int *)"R");
  v11 = (int *)(v4 + 8);
  if (*(char *)(v4 + 31) < 0)
    v11 = *(int **)v11;
  v12 = 0;
  while (v11[v12++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v11, v12 - 1);
  v14 = this[3];
  if (*(_QWORD *)&__p[16] >= *(_QWORD *)&__p[8])
  {
    if (v43)
    {
      LODWORD(v44) = 0;
      TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)&v44, 1uLL);
      v15 = *(_QWORD *)__p;
      --*(_QWORD *)&__p[16];
    }
    else
    {
      v15 = *(_QWORD *)__p;
      if (*(_QWORD *)&__p[8])
        *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[8] - 4) = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)__p;
    *(_DWORD *)(*(_QWORD *)__p + 4 * *(_QWORD *)&__p[16]) = 0;
  }
  TGrammarCompiler::registerFunction(v14, v15, (uint64_t)callBackObject, 1, 1, v4, 0);
  v16 = this[21];
  v17 = (uint64_t *)this[20];
  if (v17 >= (uint64_t *)v16)
  {
    v19 = ((char *)v17 - (char *)*v6) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v20 = v16 - *v6;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(this + 21), v22);
    else
      v23 = 0;
    v24 = (uint64_t *)&v23[8 * v19];
    v25 = (TLexicon *)&v23[8 * v22];
    *v24 = v4;
    v18 = (TLexicon *)(v24 + 1);
    v27 = this[19];
    v26 = this[20];
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 = (TLexicon *)((char *)v26 - 8);
        *--v24 = v28;
      }
      while (v26 != v27);
      v26 = *v6;
    }
    this[19] = (TLexicon *)v24;
    this[20] = v18;
    this[21] = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v17 = v4;
    v18 = (TLexicon *)(v17 + 1);
  }
  this[20] = v18;
  if (v43)
  {
    if (*(_QWORD **)__p != v42 && *(_QWORD *)__p != 0)
      MEMORY[0x20BD149A8]();
  }
}

void sub_209889D40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1093C40918A3909);
  _Unwind_Resume(a1);
}

uint64_t TPatternManager::freeMemory(TPatternManager *this)
{
  TParser *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v2 = (TParser *)*((_QWORD *)this + 4);
  if (v2)
  {
    TParser::~TParser(v2);
    MEMORY[0x20BD149A8]();
  }
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v5 = *((_QWORD *)this + 19);
  v4 = *((_QWORD *)this + 20);
  if (v4 != v5)
  {
    v6 = 0;
    do
    {
      result = *(_QWORD *)(v5 + 8 * v6);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v5 = *((_QWORD *)this + 19);
        v4 = *((_QWORD *)this + 20);
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 3);
  }
  v8 = *((_QWORD *)this + 16);
  v7 = *((_QWORD *)this + 17);
  if (v7 != v8)
  {
    v9 = 0;
    do
    {
      result = *(_QWORD *)(v8 + 8 * v9);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v8 = *((_QWORD *)this + 16);
        v7 = *((_QWORD *)this + 17);
      }
      ++v9;
    }
    while (v9 < (v7 - v8) >> 3);
  }
  v11 = *((_QWORD *)this + 13);
  v10 = *((_QWORD *)this + 14);
  if (v10 != v11)
  {
    v12 = 0;
    do
    {
      result = *(_QWORD *)(v11 + 8 * v12);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v11 = *((_QWORD *)this + 13);
        v10 = *((_QWORD *)this + 14);
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  v14 = *((_QWORD *)this + 10);
  v13 = *((_QWORD *)this + 11);
  if (v13 != v14)
  {
    v15 = 0;
    do
    {
      result = *(_QWORD *)(v14 + 8 * v15);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v14 = *((_QWORD *)this + 10);
        v13 = *((_QWORD *)this + 11);
      }
      ++v15;
    }
    while (v15 < (v13 - v14) >> 3);
  }
  return result;
}

void TPatternManager::~TPatternManager(TPatternManager *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  TPatternManager::freeMemory(this);
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
  {
    *((_QWORD *)this + 11) = v5;
    operator delete(v5);
  }
  TAllocator::clear((TPatternManager *)((char *)this + 40));
}

uint64_t callBackObject(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, TAllocator *a5)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned __int8 v11;
  unsigned int v12;
  TLocaleInfo *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *p_p;
  __int32 *v20;
  size_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  TLocaleInfo *v28;
  void *__p;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  char v33;
  int v34;

  if (a2 <= 1 && *(_QWORD *)a1 > 1uLL)
    return 0;
  v8 = *(unsigned int **)(a1 + 8);
  v9 = *v8;
  if (*v8)
  {
    v10 = v8 + 1;
    do
    {
      if ((v11 & 1) == 0
      {
        v13 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v13);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v13;
      }
      if ((int)v9 < 48
        || v9 >= 0x3A
        && (v9 < 0x660
         || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9) == -1))
      {
        loggableUnicode(*(unsigned int **)(a1 + 8), &__p);
        if (v31 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        tknPrintf("Error: ${Counting, Array, Roman}...() : the argument (%s) must be a number\n", v14, v15, v16, v17, p_p);
        if (SHIBYTE(v31) < 0)
          operator delete(__p);
        return 0;
      }
      v12 = *v10++;
      v9 = v12;
    }
    while (v12);
    v20 = *(__int32 **)(a1 + 8);
    if ((*(unsigned int (**)(unint64_t, __int32 *))(*(_QWORD *)a3 + 16))(a3, v20))
    {
      v22 = wcslen(v20);
      v23 = v22 + 54;
      if ((v22 + 54) >> 62)
        v24 = -1;
      else
        v24 = 4 * (v22 + 54);
      __p = TAllocator::allocate(a5, v24);
      v30 = v23;
      v31 = 0;
      v33 = 0;
      TBuffer<wchar_t>::assign((uint64_t)&__p, (int *)"P");
      if ((v25 & 1) == 0
      {
        v28 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v28);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v28;
      }
      TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, (uint64_t)&__p, 1);
      TBuffer<wchar_t>::insert((uint64_t)&__p, v31, (int *)"\"", 0xBuLL);
      v26 = 0;
      while (v20[v26++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&__p, v31, v20, v26 - 1);
      TBuffer<wchar_t>::insert((uint64_t)&__p, v31, (int *)"\"", 3uLL);
      if (v31 >= v30)
      {
        if (v33)
        {
          v34 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&__p, v31--, &v34, 1uLL);
        }
        else
        {
          if (!v30)
            return 1;
          *((_DWORD *)__p + v30 - 1) = 0;
        }
      }
      else
      {
        *((_DWORD *)__p + v31) = 0;
      }
      if (v33 && __p != &v32)
      {
        if (__p)
          MEMORY[0x20BD149A8]();
      }
    }
  }
  return 1;
}

void sub_20988A298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  MEMORY[0x20BD149A8](v13, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]))
  {
    if (__p != &a13 && __p != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

TAllocator *TPatternManager::clear(TPatternManager *this)
{
  uint64_t v2;
  TAllocator *result;
  unint64_t v4;

  v2 = *((_QWORD *)this + 4);
  v4 = *(_QWORD *)(v2 + 48);
  result = (TAllocator *)(v2 + 48);
  if (v4 >= 0x801)
    result = (TAllocator *)TAllocator::clear(result);
  *((_QWORD *)this + 22) = 0;
  return result;
}

void TPatternManager::addWords(TPatternManager *this, TVertex *a2, TGraph *a3, TSegmenter *a4, uint64_t a5)
{
  char *v9;
  uint64_t Segment;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  BOOL v15;
  int v16;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ActiveConfigHandle;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *AllProductions;
  _QWORD *v27;
  int v28;
  unsigned __int8 v29;
  BOOL v31;
  int v32;
  _DWORD *v34;
  __int32 *v35;
  __int32 *v36;
  uint64_t PreviousSegment;
  char *v38;
  char *v39;
  uint64_t v40;
  int *v41;
  char *v43;
  unsigned int *v44;
  BOOL v45;
  __int32 *v46;
  __int32 *v47;
  uint64_t i;
  uint64_t v49;
  int *v50;
  unsigned int *v52;
  BOOL v53;
  unint64_t v54;
  TLocaleInfo *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t ValidConfig;
  uint64_t v60;
  const char *p_p;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  const __int32 *v68;
  void *v69;
  const __int32 *v70;
  const __int32 *v71;
  int *v72;
  int *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  TAllocator *v77;
  unint64_t v78;
  TGraph *v79;
  TLocaleInfo *v80;
  TGraph *v81;
  uint64_t v82;
  unsigned int *v83;
  unint64_t v84;
  unint64_t v85;
  void *__p;
  const __int32 *v87;
  char v88;
  unsigned int *v89;
  __int128 v90;
  _BYTE v91[48];
  void *v92;
  char v93;
  _BYTE v94[936];
  char v95;
  _BYTE v96[40];
  _QWORD v97[5];
  int v98[3];

  *(_QWORD *)this = a5;
  v9 = (char *)*((_QWORD *)a2 + 2);
  Segment = TSegmenter::getSegment(a4, v9);
  if (!Segment)
    return;
  v11 = Segment;
  if (*(_DWORD *)(Segment + 24) == 5)
    return;
  v12 = **(_DWORD **)Segment;
  {
    v79 = a3;
    v80 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v80);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v80;
    a3 = v79;
  }
  if (v12 > 159)
  {
    v15 = v12 == 12288;
    if (v12 >= 12288)
    {
      v16 = 65279;
    }
    else
    {
      v15 = v12 == 160;
      v16 = 8203;
    }
    if (v15 || v12 == v16)
      return;
  }
  else if (v12 <= 0x20 && ((1 << v12) & 0x100002600) != 0)
  {
    return;
  }
  v81 = a3;
  v18 = *(_QWORD *)(v11 + 8) - (_QWORD)v9 >= 0x32uLL || (unint64_t)v9 >= *((_QWORD *)this + 22);
  v19 = 50;
  v85 = *(_QWORD *)(v11 + 8) - (_QWORD)v9;
  if (!v18)
    v19 = *(_QWORD *)(v11 + 8) - (_QWORD)v9;
  v20 = *((_QWORD *)this + 2);
  v21 = *(_QWORD *)(*((_QWORD *)this + 3) + 56);
  v97[0] = &off_24C214028;
  v97[1] = v9;
  v97[2] = a4;
  v97[3] = v21;
  v97[4] = v19;
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v20 + 21160));
  v23 = *(int *)(v20 + 4 * TParam::getValidConfig((TParam *)(v20 + 21160), ActiveConfigHandle) + 21320);
  v24 = *((_QWORD *)this + 4);
  v25 = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(v24 + 24) = v23;
  (*(void (**)(void))(v25 + 16))();
  AllProductions = (_QWORD *)TParser::getAllProductions(*((_QWORD **)this + 4), (uint64_t)v97);
  TAllocator::TAllocator((TAllocator *)v96, 2048);
  if (!AllProductions)
  {
    v56 = 0;
    goto LABEL_103;
  }
  v84 = 0;
  v27 = AllProductions;
  do
  {
    v28 = **(_DWORD **)TSegmenter::getPreviousSegment(a4, &v9[v27[2]]);
    if ((v29 & 1) == 0
    {
      v55 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v55);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v55;
    }
    if (v28 > 159)
    {
      v31 = v28 == 12288;
      if (v28 >= 12288)
      {
        v32 = 65279;
      }
      else
      {
        v31 = v28 == 160;
        v32 = 8203;
      }
      if (v31 || v28 == v32)
        goto LABEL_43;
    }
    else if (v28 <= 0x20 && ((1 << v28) & 0x100002600) != 0)
    {
      goto LABEL_43;
    }
    if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)v27, (__int32 *)"s", (TAllocator *)v96, 0) <= 1)
    {
      if (*v34)
      {
        if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)v27, (__int32 *)"l", (TAllocator *)v96, 0) <= 1)
        {
          v36 = v35;
          if (!*v35)
            goto LABEL_91;
          v89 = (unsigned int *)v91;
          v90 = xmmword_209A57DD0;
          v95 = 1;
          PreviousSegment = TSegmenter::getPreviousSegment(a4, v9);
          v39 = v38;
          while (PreviousSegment && *(_DWORD *)(PreviousSegment + 24) != 5)
          {
            if (*((_QWORD *)&v90 + 1) > 0x31uLL)
              goto LABEL_59;
            v40 = 0;
            v41 = *(int **)PreviousSegment;
            while (v41[v40++])
              ;
            TBuffer<wchar_t>::insert((uint64_t)&v89, 0, v41, v40 - 1);
            PreviousSegment = TSegmenter::getPreviousSegment(a4, v39);
            v39 = v43;
          }
          if (!*((_QWORD *)&v90 + 1))
            TBuffer<wchar_t>::assign((uint64_t)&v89, (int *)"\n");
LABEL_59:
          TRegExp::TRegExp((uint64_t)&__p, v36, *((_QWORD *)this + 1) + 240);
          if (*((_QWORD *)&v90 + 1) >= (unint64_t)v90)
          {
            if (v95)
            {
              v98[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), v98, 1uLL);
              v44 = v89;
              --*((_QWORD *)&v90 + 1);
            }
            else
            {
              v44 = v89;
              if ((_QWORD)v90)
                v89[(_QWORD)v90 - 1] = 0;
            }
          }
          else
          {
            v44 = v89;
            v89[*((_QWORD *)&v90 + 1)] = 0;
          }
          v45 = TRegExp::match(&__p, v44, 1);
          TRegExp::~TRegExp((TRegExp *)&__p);
          if (v95 && v89 != (unsigned int *)v91 && v89)
            MEMORY[0x20BD149A8]();
          if (v45)
          {
LABEL_91:
            if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)v27, (__int32 *)"r", (TAllocator *)v96, 0) <= 1)
            {
              v47 = v46;
              if (!*v46)
                goto LABEL_92;
              v89 = (unsigned int *)v91;
              v90 = xmmword_209A57DD0;
              v95 = 1;
              for (i = TSegmenter::getSegment(a4, &v9[v27[2]]);
                    i && *(_DWORD *)(i + 24) != 5;
                    i = TSegmenter::getSegment(a4, *(char **)(i + 8)))
              {
                if (*((_QWORD *)&v90 + 1) > 0x31uLL)
                  goto LABEL_81;
                v49 = 0;
                v50 = *(int **)i;
                while (v50[v49++])
                  ;
                TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), v50, v49 - 1);
              }
              if (!*((_QWORD *)&v90 + 1))
                TBuffer<wchar_t>::assign((uint64_t)&v89, (int *)"\n");
LABEL_81:
              TRegExp::TRegExp((uint64_t)&__p, v47, *((_QWORD *)this + 1) + 240);
              if (*((_QWORD *)&v90 + 1) >= (unint64_t)v90)
              {
                if (v95)
                {
                  v98[0] = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), v98, 1uLL);
                  v52 = v89;
                  --*((_QWORD *)&v90 + 1);
                }
                else
                {
                  v52 = v89;
                  if ((_QWORD)v90)
                    v89[(_QWORD)v90 - 1] = 0;
                }
              }
              else
              {
                v52 = v89;
                v89[*((_QWORD *)&v90 + 1)] = 0;
              }
              v53 = TRegExp::match(&__p, v52, 2);
              TRegExp::~TRegExp((TRegExp *)&__p);
              if (v95 && v89 != (unsigned int *)v91 && v89)
                MEMORY[0x20BD149A8]();
              if (v53)
              {
LABEL_92:
                v54 = v84;
                if (v27[2] > v84)
                  v54 = v27[2];
                v84 = v54;
              }
            }
          }
        }
      }
      else
      {
        tknPrintString("Error: Top production 'spoken' attribute is an empty string\n");
      }
    }
LABEL_43:
    v27 = (_QWORD *)*v27;
  }
  while (v27);
  v56 = v84;
  if (v84)
  {
    if ((unint64_t)&v9[v84] <= *((_QWORD *)this + 22))
      v56 = v85;
    else
      *((_QWORD *)this + 22) = &v9[v84];
  }
  else
  {
    AllProductions = 0;
  }
LABEL_103:
  v57 = *((_QWORD *)this + 2);
  v58 = TParam::getActiveConfigHandle((TParam *)(v57 + 21512));
  ValidConfig = TParam::getValidConfig((TParam *)(v57 + 21512), v58);
  v60 = MEMORY[0x24BEDB848];
  if (*(_BYTE *)(v57 + ValidConfig + 21664))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v89);
    TParser::logChart(*((uint64_t **)this + 4), &v89);
    std::stringbuf::str();
    if (v88 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    tknPrintString(p_p);
    if (v88 < 0)
      operator delete(__p);
    v89 = (unsigned int *)*MEMORY[0x24BEDB800];
    *(unsigned int **)((char *)&v89 + *((_QWORD *)v89 - 3)) = *(unsigned int **)(MEMORY[0x24BEDB800] + 24);
    *(_QWORD *)&v90 = v60 + 16;
    if (v93 < 0)
      operator delete(v92);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD1496C](v94);
  }
  if (AllProductions)
  {
    v62 = (unsigned int *)*MEMORY[0x24BEDB800];
    v83 = *(unsigned int **)(MEMORY[0x24BEDB800] + 24);
    v82 = v60 + 16;
    do
    {
      v63 = AllProductions[2];
      if (v63 == v56 || v63 == v85)
      {
        v65 = *((_QWORD *)this + 2);
        v66 = TParam::getActiveConfigHandle((TParam *)(v65 + 21760));
        if (*(_BYTE *)(v65 + TParam::getValidConfig((TParam *)(v65 + 21760), v66) + 21912))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v89);
          TParser::logTree(*((_QWORD *)this + 4), AllProductions, &v89);
          std::stringbuf::str();
          if (v88 >= 0)
            v67 = (const char *)&__p;
          else
            v67 = (const char *)__p;
          tknPrintString(v67);
          if (v88 < 0)
            operator delete(__p);
          v89 = v62;
          *(unsigned int **)((char *)&v89 + *((_QWORD *)v62 - 3)) = v83;
          *(_QWORD *)&v90 = v82;
          if (v93 < 0)
            operator delete(v92);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x20BD1496C](v94);
        }
        __p = (void *)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, (__int32 *)"s", (TAllocator *)v96, 0);
        v87 = v68;
        if ((unint64_t)__p <= 1)
        {
          if (*v68)
          {
            v69 = (void *)callBackSeqAlt((uint64_t)&__p, 1uLL, (__int32 *)"S", *((_QWORD *)this + 1), (TAllocator *)v96);
            v71 = v70;
            __p = v69;
            v87 = v70;
            if ((unint64_t)v69 <= 1
              && v70
              && (unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, (__int32 *)"n", (TAllocator *)v96, 0) <= 1)
            {
              v73 = v72;
              v74 = TGraph::addVertex(v81, &v9[AllProductions[2]]);
              v75 = TLexicon::addTempWord(*((_QWORD *)this + 1), v73, (int *)"p", 0, v71);
              LODWORD(v89) = 5;
              v90 = (unint64_t)v75;
              v91[0] = 0;
              TGraph::addEdge(v81, (uint64_t)a2, v74, (uint64_t)&v89);
            }
          }
        }
      }
      AllProductions = (_QWORD *)*AllProductions;
    }
    while (AllProductions);
  }
  v76 = *((_QWORD *)this + 4);
  v78 = *(_QWORD *)(v76 + 48);
  v77 = (TAllocator *)(v76 + 48);
  if (v78 >= 0x801)
    TAllocator::clear(v77);
  TAllocator::clear((TAllocator *)v96);
}

void sub_20988AC88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

_QWORD *addToken(__int32 **a1, TVertex *a2, TVertex *a3, TGraph *a4, TLexicon *a5)
{
  uint64_t HeadClone;
  int v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  HeadClone = TLexicon::findHeadClone((uint64_t)a5, a1[3]);
  if (HeadClone)
  {
    v11 = 1;
  }
  else
  {
    HeadClone = (uint64_t)TLexicon::addTempWord((uint64_t)a5, a1[3], 0, 0, 0);
    v11 = 4;
  }
  v13 = v11;
  v14 = HeadClone;
  v15 = 0;
  v16 = 0;
  return TGraph::addEdge(a4, (uint64_t)a2, a3, (uint64_t)&v13);
}

const char *addAlt(const TFileObject *a1, TVertex *a2, TVertex *a3, TGraph *a4, TLexicon *a5, const char *a6, const char *a7, const char *a8)
{
  uint64_t v9;
  const char *v16;
  unint64_t v17;

  v9 = *((_QWORD *)a1 + 3);
  if (v9)
  {
    v16 = a7;
    while (1)
    {
      if (!wcscmp(*(const __int32 **)(v9 + 8), (const __int32 *)"T"))
      {
        addToken((__int32 **)v9, a2, a3, a4, a5);
      }
      else
      {
        if (!wcscmp(*(const __int32 **)(v9 + 8), (const __int32 *)"A"))
        {
          v17 = addAlt((const TFileObject *)v9, a2, a3, a4, a5, a6, a7, a8);
LABEL_10:
          if (v17 > (unint64_t)a7)
            v16 = (const char *)v17;
          goto LABEL_14;
        }
        if (!wcscmp(*(const __int32 **)(v9 + 8), (const __int32 *)"P"))
        {
          addPattern(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
        }
        else if (!wcscmp(*(const __int32 **)(v9 + 8), (const __int32 *)"S"))
        {
          v17 = addSequence((const TFileObject *)v9, a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_10;
        }
      }
LABEL_14:
      v9 = *(_QWORD *)(v9 + 16);
      if (!v9)
        return v16;
    }
  }
  return a7;
}

uint64_t addPattern(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  TLocaleInfo *v14;
  BOOL v16;

  v8 = 0;
  v9 = 0;
  v10 = *(_QWORD *)(a1 + 24);
  do
  {
    if (!wcscmp(*(const __int32 **)(v10 + 8), (const __int32 *)"A"))
    {
      v16 = 0;
      v11 = *(_QWORD *)(v10 + 24);
      if ((v12 & 1) == 0
      {
        v14 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v14);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v14;
      }
      v8 = TLocaleInfo::stringToULong(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, &v16, 1);
    }
    else if (!wcscmp(*(const __int32 **)(v10 + 8), (const __int32 *)"V"))
    {
      v9 = *(_QWORD *)(v10 + 24);
    }
    v10 = *(_QWORD *)(v10 + 16);
  }
  while (v10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, v9, a2, a3, a4, a5);
}

void sub_20988B11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x20BD149A8](a10, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TPatternManager::expandWord(uint64_t a1, TGraph *a2, uint64_t a3, int a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  const char **v11;
  TVertex *v12;
  _QWORD *v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  size_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  int *v22;
  __int128 v23;
  _BYTE v24[785];
  char v25;
  const __int32 ***v26;
  __int128 v27;
  _BYTE v28[1024];
  char v29;

  v8 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD **)(a3 + 24);
  if (a4)
  {
    v26 = (const __int32 ***)v28;
    v27 = xmmword_209A57DD0;
    v29 = 1;
    TWord::getWrittenForm(*(__int32 ***)(a3 + 56), (uint64_t)&v26);
    v22 = (int *)v24;
    v23 = xmmword_209A57DD0;
    v25 = 1;
    TBuffer<wchar_t>::assign((uint64_t)&v22, (int *)"d");
    TBuffer<wchar_t>::operator+=((uint64_t)&v22, (uint64_t)&v26);
    v9 = *(_QWORD *)(a1 + 8);
    if (*((_QWORD *)&v23 + 1) >= (unint64_t)v23)
    {
      if (v25)
      {
        v18 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v22, *((unint64_t *)&v23 + 1), &v18, 1uLL);
        v10 = v22;
        --*((_QWORD *)&v23 + 1);
      }
      else
      {
        v10 = v22;
        if ((_QWORD)v23)
          v22[(_QWORD)v23 - 1] = 0;
      }
    }
    else
    {
      v10 = v22;
      v22[*((_QWORD *)&v23 + 1)] = 0;
    }
    v13 = TLexicon::addTempWord(v9, 0, v10, 0, 0);
    v12 = (TVertex *)TGraph::addVertex(a2, 0);
    v18 = 6;
    v19 = v13;
    v20 = 0;
    v21 = 0;
    TGraph::addEdge(a2, v8, v12, (uint64_t)&v18);
    TBuffer<wchar_t>::assign((uint64_t)&v22, (int *)"d");
    TBuffer<wchar_t>::operator+=((uint64_t)&v22, (uint64_t)&v26);
    v14 = *(_QWORD *)(a1 + 8);
    if (*((_QWORD *)&v23 + 1) >= (unint64_t)v23)
    {
      if (v25)
      {
        v18 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v22, *((unint64_t *)&v23 + 1), &v18, 1uLL);
        v15 = v22;
        --*((_QWORD *)&v23 + 1);
      }
      else
      {
        v15 = v22;
        if ((_QWORD)v23)
          v22[(_QWORD)v23 - 1] = 0;
      }
    }
    else
    {
      v15 = v22;
      v22[*((_QWORD *)&v23 + 1)] = 0;
    }
    v16 = TLexicon::addTempWord(v14, 0, v15, 0, 0);
    v11 = (const char **)TGraph::addVertex(a2, 0);
    v18 = 6;
    v19 = v16;
    v20 = 0;
    v21 = 0;
    TGraph::addEdge(a2, (uint64_t)v11, v7, (uint64_t)&v18);
    if (v25 && v22 != (int *)v24 && v22)
      MEMORY[0x20BD149A8]();
    if (v29 && v26 != (const __int32 ***)v28 && v26)
      MEMORY[0x20BD149A8]();
  }
  else
  {
    v11 = *(const char ***)(a3 + 24);
    v12 = *(TVertex **)(a3 + 16);
  }
  v17 = wcslen(**(const __int32 ***)(a3 + 56));
  TFileObjectParser::TFileObjectParser(&v26, **(_QWORD **)(a3 + 56) + 4 * v17 + 4, 1, *(_QWORD *)(a1 + 8) + 240);
  addSequence(v26[3], v12, (TVertex *)v11, a2, *(TLexicon **)(a1 + 8), *((const char **)v12 + 2), *((const char **)v12 + 2), v11[3]);
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v26);
  TGraph::deleteEdge((uint64_t)a2, a3);
}

void sub_20988B448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;

  if (LOBYTE(STACK[0x448]) && a15 != v16 && a15)
    MEMORY[0x20BD149A8]();
  if (LOBYTE(STACK[0x868]))
  {
    v18 = STACK[0x450];
    if (STACK[0x450] != v15)
    {
      if (v18)
        MEMORY[0x20BD149A8](v18, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

void TDigitObject::~TDigitObject(TDigitObject *this)
{
  TDigitObject::~TDigitObject(this);
  JUMPOUT(0x20BD149A8);
}

{
  void *v2;

  *(_QWORD *)this = &off_24C2140F0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_24C214BC0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t TDigitObject::isBuildable()
{
  return 1;
}

void TRomanObject::~TRomanObject(TRomanObject *this)
{
  TRomanObject::~TRomanObject(this);
  JUMPOUT(0x20BD149A8);
}

{
  void *v2;

  *(_QWORD *)this = &off_24C214140;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_24C214BC0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

BOOL TRomanObject::isBuildable(uint64_t a1, unsigned int *a2)
{
  unsigned __int8 v3;
  unsigned int v4;
  TLocaleInfo *v7;
  BOOL v8;

  v8 = 0;
  {
    v7 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v7);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v7;
  }
  v4 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, &v8);
  return !v8 && v4 < 0xBB8;
}

void sub_20988B5FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TCountingObject::~TCountingObject(void **this)
{
  *this = &unk_24C214BC0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_24C214BC0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD149A8);
}

BOOL TCountingObject::isBuildable(uint64_t a1, __int32 *a2)
{
  __int32 *v4;
  __int32 v5;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned int DigitExtended;
  TLocaleInfo *v9;

  do
  {
    v4 = a2;
    v5 = a2[1];
    ++a2;
    if (!v5)
      break;
    v6 = *v4;
    {
      v9 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v9);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v9;
    }
    DigitExtended = v6 - 48;
    if ((int)v6 < 48)
      break;
    if (v6 > 0x39)
    {
      if (v6 < 0x660)
        return wcslen(v4) <= *(_QWORD *)(a1 + 88);
      DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6);
    }
  }
  while (!DigitExtended);
  return wcslen(v4) <= *(_QWORD *)(a1 + 88);
}

void sub_20988B79C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TChartSeeder::~TChartSeeder(TChartSeeder *this)
{
  JUMPOUT(0x20BD149A8);
}

void TArrayObject::~TArrayObject(TArrayObject *this)
{
  TArrayObject::~TArrayObject(this);
  JUMPOUT(0x20BD149A8);
}

{
  void *v2;

  *(_QWORD *)this = &unk_24C213FF8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_24C214BC0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

BOOL TArrayObject::isBuildable(uint64_t a1, __int32 *a2)
{
  __int32 *v4;
  __int32 v5;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned int DigitExtended;
  TLocaleInfo *v9;
  unsigned __int8 v10;
  unsigned int v11;
  uint64_t v12;
  TLocaleInfo *v14;
  BOOL v15;

  do
  {
    v4 = a2;
    v5 = a2[1];
    ++a2;
    if (!v5)
      break;
    v6 = *v4;
    {
      v9 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v9);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v9;
    }
    DigitExtended = v6 - 48;
    if ((int)v6 < 48)
      break;
    if (v6 > 0x39)
    {
      if (v6 < 0x660)
        break;
      DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6);
    }
  }
  while (!DigitExtended);
  if (wcslen(v4) > 5)
    return 0;
  v15 = 0;
  {
    v14 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v14);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v14;
  }
  v11 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (unsigned int *)v4, &v15);
  if (v15)
    return 0;
  v12 = *(_QWORD *)(a1 + 32);
  return v11 < (unint64_t)((*(_QWORD *)(a1 + 40) - v12) >> 3) && *(_QWORD *)(v12 + 8 * v11) != 0;
}

void sub_20988B97C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

const char *TArrayObject::build(uint64_t a1, unsigned int *a2, TVertex *a3, TVertex *a4, TGraph *a5, TLexicon *a6)
{
  unsigned __int8 v12;
  unsigned int v13;
  TLocaleInfo *v15;
  BOOL v16;

  v16 = 0;
  {
    v15 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v15);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v15;
  }
  v13 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, &v16);
  return addSequence(*(const __int32 ***)(*(_QWORD *)(a1 + 32) + 8 * v13), a3, a4, a5, a6, 0, 0, 0);
}

void sub_20988BAA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

size_t callBackSeqAltHelper(uint64_t a1, unint64_t a2, __int32 *a3, uint64_t a4, __int32 *a5)
{
  __int32 *v5;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  const __int32 **v15;
  __int32 *v16;
  __int32 *v17;
  int v18;
  uint64_t v19;
  int *v20;
  size_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *p_p;
  BOOL v34;
  __int32 *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  void *__p;
  __int128 v41;
  _BYTE v42[1024];
  char v43;
  int v44[3];

  v5 = a5;
  if (a5)
  {
    wcscpy(a5, a3);
    v8 = (char *)&v5[wcslen(v5)];
    strcpy(v8, " ");
    v5 = (__int32 *)&v8[4 * wcslen((const __int32 *)v8)];
  }
  if (a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 1;
    v12 = 1;
    while (1)
    {
      if (a2 <= v11)
        v13 = v11;
      else
        v13 = a2;
      if (*(_QWORD *)(a1 + 16 * v9) > 1uLL)
        return 0;
      v14 = a1 + 16 * v9;
      v17 = *(__int32 **)(v14 + 8);
      v15 = (const __int32 **)(v14 + 8);
      v16 = v17;
      if (*v17)
      {
        v18 = wcsncmp(v16, (const __int32 *)"S", 8uLL);
        v34 = v18 == 0;
        if (v18)
          goto LABEL_11;
        if (v10)
        {
          v22 = wcscmp(a3, (const __int32 *)"A");
          if (!((v22 != 0) | v12 & 1))
          {
            v23 = v9;
            while (++v23 < a2)
            {
              if (wcsncmp(*v15, (const __int32 *)"S", 8uLL))
                goto LABEL_29;
            }
            v23 = v13;
LABEL_29:
            if (v23 == a2)
              goto LABEL_57;
LABEL_11:
            if (!wcsncmp(v16, (const __int32 *)"S", 6uLL)
              || !wcsncmp(v16, (const __int32 *)"A", 6uLL)
              || !wcsncmp(v16, (const __int32 *)"P", 0xAuLL)
              || !wcsncmp(v16, (const __int32 *)"S", 7uLL))
            {
              v21 = wcslen(v16);
              if (v5)
              {
                wcscpy(v5, v16);
                v5 += wcslen(v5);
              }
            }
            else
            {
              if (TLexicon::checkName(a4, v16, 0, 0xFFFFFFFFFFFFFFFFLL))
              {
                loggableUnicode((unsigned int *)v16, &__p);
                if (v41 >= 0)
                  p_p = &__p;
                else
                  p_p = __p;
                tknPrintf("Warning: '%s' : The tokenizer grammar constructed an invalid word name.\n", v27, v28, v29, v30, p_p);
                if (SHIBYTE(v41) < 0)
                  operator delete(__p);
                return 0;
              }
              __p = v42;
              v41 = xmmword_209A57DD0;
              v43 = 1;
              slashEscape((uint64_t)v16, (uint64_t)&__p);
              v19 = *((_QWORD *)&v41 + 1);
              if (v5)
              {
                v35 = v5;
                v36 = *((_QWORD *)&v41 + 1) + 11;
                v37 = 0;
                v39 = 0;
                TBuffer<wchar_t>::assign((uint64_t)&v35, (int *)"T");
                if (*((_QWORD *)&v41 + 1) >= (unint64_t)v41)
                {
                  if (v43)
                  {
                    v44[0] = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v41 + 1), v44, 1uLL);
                    v20 = (int *)__p;
                    --*((_QWORD *)&v41 + 1);
                  }
                  else
                  {
                    v20 = (int *)__p;
                    if ((_QWORD)v41)
                      *((_DWORD *)__p + v41 - 1) = 0;
                  }
                }
                else
                {
                  v20 = (int *)__p;
                  *((_DWORD *)__p + *((_QWORD *)&v41 + 1)) = 0;
                }
                v24 = 0;
                while (v20[v24++])
                  ;
                TBuffer<wchar_t>::insert((uint64_t)&v35, v37, v20, v24 - 1);
                v44[0] = 34;
                TBuffer<wchar_t>::insert((uint64_t)&v35, v37, v44, 1uLL);
                if (v37 < v36)
                {
                  v35[v37] = 0;
                  goto LABEL_43;
                }
                if (v39)
                {
                  v44[0] = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v35, v37--, v44, 1uLL);
                  goto LABEL_43;
                }
                if (v36)
                {
                  v35[v36 - 1] = 0;
LABEL_43:
                  v5 += wcslen(v5);
                  if (v39 && v35 != (__int32 *)&v38 && v35)
                    MEMORY[0x20BD149A8]();
                }
                else
                {
                  v5 += wcslen(v5);
                }
              }
              if (v43 && __p != v42 && __p)
                MEMORY[0x20BD149A8]();
              v21 = v19 + 10;
            }
            v10 += v21;
            v12 = v34;
            goto LABEL_53;
          }
          v12 |= v22 == 0;
        }
      }
LABEL_53:
      ++v9;
      ++v11;
      if (v9 == a2)
        goto LABEL_57;
    }
  }
  v10 = 0;
LABEL_57:
  if (v5)
    strcpy((char *)v5, "}");
  if (v10)
    return v10 + wcslen(a3) + 6;
  else
    return 0;
}

void sub_20988BF48(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x477]) < 0)
    operator delete((void *)STACK[0x460]);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void MrecInitModule_timer_mrecutil(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDiagnosticComputeFullTimingStats)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DiagnosticComputeFullTimingStats", byte_209A6F780, byte_209A6F780, 0, SetShadowDiagnosticComputeFullTimingStats, 0);
    *v1 = &unk_24C214CE8;
    gParDiagnosticComputeFullTimingStats = (uint64_t)v1;
    gShadowDiagnosticComputeFullTimingStats = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticComputeFullTimingStats);
  }
}

void MrecTime::MrecTime(MrecTime *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
}

double MrecTime::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

DgnString *MrecTime::formatAndAppendToString(MrecTime *this, DgnString *a2)
{
  char __str[100];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x64uLL, "%04u-%02u-%02u %02u:%02u:%02u", *((_DWORD *)this + 5) + 1900, *((_DWORD *)this + 4) + 1, *((_DWORD *)this + 3), *((_DWORD *)this + 2), *((_DWORD *)this + 1), *(_DWORD *)this);
  return DgnString::operator+=(a2, __str);
}

double MrecTime::setToCurrentLocalTime(MrecTime *this)
{
  tm *v2;
  double result;
  time_t v4;

  v4 = time(0);
  v2 = localtime(&v4);
  if (!v2)
    errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/timer.cpp", 157, "mrecutil/timer", 5, "%s", byte_209A6F780);
  *(_OWORD *)this = *(_OWORD *)&v2->tm_sec;
  result = *(double *)&v2->tm_mon;
  *((double *)this + 2) = result;
  return result;
}

uint64_t MrecTime::setToPreprocessorStyleDateAndTime(MrecTime *this, const char *a2, const char *a3)
{
  uint64_t v5;
  int v7;
  char __s1[8];
  __int16 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  *(_QWORD *)__s1 = 0;
  v7 = 0;
  sscanf(a2, "%s %u %u", __s1, (char *)this + 12, &v7);
  v5 = 0;
  *((_DWORD *)this + 5) = v7 - 1900;
  while (strcmp(__s1, MrecTime::setToPreprocessorStyleDateAndTime(char const*,char const*)::ppMonth[v5]))
  {
    if (++v5 == 12)
      return sscanf(a3, "%u:%u:%u", (char *)this + 8, (char *)this + 4, this);
  }
  *((_DWORD *)this + 4) = v5;
  return sscanf(a3, "%u:%u:%u", (char *)this + 8, (char *)this + 4, this);
}

DgnString *MrecTime::appendLocalTimeToString(MrecTime *this, DgnString *a2)
{
  _QWORD v4[3];

  memset(v4, 0, sizeof(v4));
  MrecTime::setToCurrentLocalTime((MrecTime *)v4);
  return MrecTime::formatAndAppendToString((MrecTime *)v4, this);
}

_DWORD *MrecTime::unpackLittleEndMrecTime(_DWORD *this, const unsigned int *a2)
{
  *this = *a2;
  this[1] = a2[1];
  this[2] = a2[2];
  this[3] = a2[3];
  this[4] = a2[4];
  this[5] = a2[5];
  return this;
}

unsigned int *MrecTime::packLittleEndMrecTime(unsigned int *this, unsigned int *a2)
{
  *a2 = *this;
  a2[1] = this[1];
  a2[2] = this[2];
  a2[3] = this[3];
  a2[4] = this[4];
  a2[5] = this[5];
  return this;
}

uint64_t ClockTimer::getCurrentCpuMicrosec(ClockTimer *this)
{
  rusage v2;

  getrusage(0, &v2);
  return v2.ru_stime.tv_usec + (uint64_t)v2.ru_utime.tv_usec + 1000000 * (v2.ru_stime.tv_sec + v2.ru_utime.tv_sec);
}

__darwin_time_t ClockTimer::getCurrentMicrosec(ClockTimer *this)
{
  int *v1;
  timeval v3;

  if (gettimeofday(&v3, 0))
  {
    v1 = __error();
    errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/timer.cpp", 410, "mrecutil/timer", 6, "%d", *v1);
  }
  return v3.tv_usec + 1000000 * v3.tv_sec;
}

__darwin_time_t ClockTimer::getCurrentTickMicrosec(ClockTimer *this)
{
  int *v1;
  timeval v3;

  if (gettimeofday(&v3, 0))
  {
    v1 = __error();
    errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/timer.cpp", 486, "mrecutil/timer", 6, "%d", *v1);
  }
  return v3.tv_usec + 1000000 * v3.tv_sec;
}

uint64_t ClockTimer::initClockTimer(ClockTimer *this)
{
  ClockTimer *CurrentMicrosec;
  uint64_t result;
  rusage v4;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 1;
  *((_QWORD *)this + 2) = 0x100000001;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  CurrentMicrosec = (ClockTimer *)ClockTimer::getCurrentMicrosec(this);
  if (!CurrentMicrosec)
    errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/timer.cpp", 571, "mrecutil/timer", 4, "%s", (const char *)&warnStr_mrecutil_timer_W_BAD_ELAPSED_MICROSEC);
  *(_BYTE *)this = 1;
  *((_QWORD *)this + 5) = ClockTimer::getCurrentMicrosec(CurrentMicrosec);
  result = getrusage(0, &v4);
  *((_QWORD *)this + 6) = v4.ru_stime.tv_usec
                        + (uint64_t)v4.ru_utime.tv_usec
                        + 1000000 * (v4.ru_stime.tv_sec + v4.ru_utime.tv_sec);
  return result;
}

double ClockTimer::initCyclesPerSecondAndSpeedFactor(ClockTimer *this)
{
  double result;

  *((_QWORD *)this + 1) = 1;
  *(_QWORD *)&result = 0x100000001;
  *((_QWORD *)this + 2) = 0x100000001;
  *((_BYTE *)this + 24) = 1;
  return result;
}

uint64_t ClockTimer::getCyclesPerSecond(ClockTimer *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t ClockTimer::getDynamicSpeechRecognitionSpeedFactor(ClockTimer *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t ClockTimer::getStaticSpeechRecognitionSpeedFactor(ClockTimer *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t ClockTimer::useFreeTimeVoid(ClockTimer *this)
{
  return usleep(0x2710u);
}

int64x2_t ClockTimer::useFreeTime@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;

  v5 = 0u;
  v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  usleep(0x2710u);
  *a1 = 0u;
  a1[1] = 0u;
  SnapTime::recordTime((SnapTime *)a1, 1, 0, 0, 0);
  result = vsubq_s64(*a1, v5);
  v4 = vsubq_s64(a1[1], v6);
  *a1 = result;
  a1[1] = v4;
  return result;
}

__darwin_time_t ClockTimer::getPlatformAbsoluteTime(ClockTimer *this)
{
  timeval v2;

  gettimeofday(&v2, 0);
  return v2.tv_usec + 1000000 * v2.tv_sec;
}

uint64_t SnapTime::appendReadableTimeToString(SnapTime *this, DgnString *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  DgnString::preAllocate((unint64_t)a2, 512);
  return DgnString::printfAppend(a2, "%15llu cycles (%11llu microsec, %11llu tickMicrosec, %11llu cpuMicrosec, %11llu cycleMicrosec)", v4, v5, v6, *(_QWORD *)this, *((_QWORD *)this + 1), *((_QWORD *)this + 2), *((_QWORD *)this + 3), 1000000 * (*(_QWORD *)this % (unint64_t)qword_253DF27C8) / qword_253DF27C8+ 1000000 * (*(_QWORD *)this / (unint64_t)qword_253DF27C8));
}

uint64_t SnapTime::sizeObject(uint64_t a1, int a2)
{
  return 32 * (a2 != 3);
}

void SetShadowDiagnosticComputeFullTimingStats(void)
{
  gShadowDiagnosticComputeFullTimingStats = *(_BYTE *)(gParDiagnosticComputeFullTimingStats + 41);
}

void MrecInitModule_trgrm_voc(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;

  if (!gParDebugWordFst)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugWordFst", byte_209A6F784, byte_209A6F784, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugWordFst = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordFst);
  }
  if (!gParDebugWordFstSelfLoop)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugWordFstSelfLoop", byte_209A6F784, byte_209A6F784, 1, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugWordFstSelfLoop = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordFstSelfLoop);
  }
  if (!gParDebugWordFstShowPronlessWords)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugWordFstShowPronlessWords", byte_209A6F784, byte_209A6F784, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugWordFstShowPronlessWords = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordFstShowPronlessWords);
  }
  if (!gParDebugTransducerGrammarIO)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugTransducerGrammarIO", byte_209A6F784, byte_209A6F784, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDebugTransducerGrammarIO = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugTransducerGrammarIO);
  }
}

StateMgr *DgnDelete<StateMgr>(StateMgr *result)
{
  _QWORD *v1;

  if (result)
  {
    StateMgr::~StateMgr(result);
    return (StateMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

RuleMgr *DgnDelete<RuleMgr>(RuleMgr *result)
{
  _QWORD *v1;

  if (result)
  {
    RuleMgr::~RuleMgr(result);
    return (RuleMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

void MrecInitModule_spdebug_sigproc(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugSignalProcessing)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugSignalProcessing", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugSignalProcessing = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugSignalProcessing);
  }
}

void MrecInitModule_dsmset_mrecutil(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugDgnSharedMemSet)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugDgnSharedMemSet", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugDgnSharedMemSet = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugDgnSharedMemSet);
  }
}

uint64_t *DgnSharedMemSet::createSet(DgnSharedMemSet *this, const DgnString *a2, const DgnString *a3)
{
  uint64_t *v5;
  DSMSetData *v6;
  uint64_t *result;

  v5 = MemChunkAlloc(0x130uLL, 0);
  DSMSetData::DSMSetData((DSMSetData *)v5, this, a2);
  DSMSetData::refMaybeCreateSetRecordBlobEx(v6);
  result = MemChunkAlloc(8uLL, 0);
  *result = (uint64_t)v5;
  return result;
}

uint64_t DgnSharedMemSet::getSetPrefixName(DgnSharedMemSet *this)
{
  return *(_QWORD *)this + 16;
}

uint64_t DgnSharedMemSet::getSetCacheDir(DgnSharedMemSet *this)
{
  return *(_QWORD *)this;
}

uint64_t DgnSharedMemSet::getMaybeReserveAndRefDSMIdEx(DSMSetData **this, char **a2, int a3)
{
  DSMSetData *v6;
  char *v7;
  char v8;
  int v9;
  unsigned __int8 *v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  pthread_mutex_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int8x16_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  __int32 v32;
  __int32 v33;
  const char *v34;
  int v35;
  const char *v36;
  const char *v37;
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unint64_t v48;
  _BOOL4 v49;
  DSMHeadData *v50;
  const DgnString *v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  pthread_t v56;
  __darwin_time_t PlatformAbsoluteTime;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  void **v62;
  DSMHeadData *v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  int v67;
  char *v69;
  int v70;
  ClockTimer *v71;
  DSMSetData **v72;
  unsigned int v73;
  DSMHeadData *v74;
  unint64_t v75;
  int v76;
  const char *v77;
  int v78;
  uint64_t v79;
  uint64_t v81;
  size_t v82;

  v6 = *this;
  v7 = *a2;
  if (!*((_DWORD *)a2 + 2))
    v7 = &byte_209A88803;
  v8 = *v7;
  if (*v7)
  {
    v9 = 0;
    v10 = (unsigned __int8 *)(v7 + 1);
    do
    {
      HIDWORD(v11) = v9;
      LODWORD(v11) = v9;
      v9 = (v11 >> 19) + v8;
      v12 = *v10++;
      v8 = v12;
    }
    while (v12);
  }
  else
  {
    v9 = 0;
  }
  v81 = -1;
  v82 = 0;
  v13 = *(_DWORD *)(*((_QWORD *)v6 + 34) + 48);
  v14 = sysconf(29);
  if (v14 <= 0x10000)
    v15 = 0x10000;
  else
    v15 = v14;
  v18 = (char *)mmap(0, v15, 3, 1, v13, 0);
  v81 = (uint64_t)v18;
  v82 = v15;
  if (v18 == (char *)-1)
  {
    if (*((_DWORD *)*this + 6))
      v19 = (char *)*((_QWORD *)*this + 2);
    else
      v19 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 191, (uint64_t)"mrecutil/dsmset", 3, (uint64_t)"%.500s", v16, v17, (char)v19);
    v18 = (char *)v81;
  }
  v20 = (pthread_mutex_t *)((char *)v6 + 32);
  pthread_mutex_lock((pthread_mutex_t *)((char *)v6 + 32));
  ++*((_DWORD *)v6 + 24);
  *((_QWORD *)v6 + 13) = pthread_self();
  v79 = (uint64_t)v6 + 112;
  if (DgnSharedLock::acquire((sem_t **)v6 + 14, 0xEA60u))
  {
    if (*((_DWORD *)*this + 6))
      v23 = (char *)*((_QWORD *)*this + 2);
    else
      v23 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 201, (uint64_t)"mrecutil/dsmset", 2, (uint64_t)"%.500s", v21, v22, (char)v23);
  }
  v70 = a3;
  v72 = this;
  v24 = 0;
  v25 = 0;
  v26 = (-1640531527 * v9);
  v69 = v18;
  v27 = (int8x16_t *)(v18 + 56);
  v28 = 0xFFFFFFFFLL;
  v29 = -1023;
  while (v29)
  {
    v30 = *((_QWORD *)v6 + 34);
    v31 = veorq_s8(*v27, v27[1]);
    *(int8x8_t *)v31.i8 = veor_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
    v32 = v27[2].i32[1];
    if ((v27[2].i32[0] ^ v27[2].i32[2] ^ v27[2].i32[3] ^ v32 ^ v31.i32[1] ^ v31.i32[0]) == v27[3].i32[0])
    {
      v33 = v27[2].i32[2];
      if (v33 != 1)
      {
        if (v33)
        {
          if (v32 == (_DWORD)v26)
          {
            if (!*(_DWORD *)(v30 + v24 + 120))
            {
              DgnString::DgnString((DgnString *)&v77);
              DSMSetData::getDSMName(*v72, v29 + 1024, v26, v27[2].u32[0], (DgnString *)&v77);
              if (v78)
                v36 = v77;
              else
                v36 = &byte_209A88803;
              if (*((_DWORD *)a2 + 2))
                v37 = *a2;
              else
                v37 = &byte_209A88803;
              if (!strcmp(v36, v37))
              {
                v38 = *(_DWORD *)(v30 + v24 + 152);
                if (!v38)
                {
                  v39 = v27[2].i32[3] + 1;
                  v27[2].i32[3] = v39;
                  v40 = v27->i64[1] ^ v27->i64[0] ^ v27[1].i64[0] ^ v27[1].i64[1];
                  v27[3].i32[0] = v27[2].i32[0] ^ v27[2].i32[2] ^ v27[2].i32[1] ^ v39 ^ HIDWORD(v40) ^ v40;
                }
                *(_DWORD *)(v30 + v24 + 152) = v38 + 1;
                v25 = 1;
                v35 = 7;
                v28 = v29 + 1024;
              }
              else
              {
                v35 = 0;
              }
              DgnString::~DgnString((DgnString *)&v77);
              v20 = (pthread_mutex_t *)((char *)v6 + 32);
              goto LABEL_36;
            }
            if (*((_DWORD *)a2 + 2))
              v34 = *a2;
            else
              v34 = &byte_209A88803;
            if (!strcmp(v34, (const char *)(*(_QWORD *)(v30 + v24 + 136) + 16)))
            {
              v28 = (v29 + 1024);
              ++*(_DWORD *)(v30 + v24 + 152);
              goto LABEL_77;
            }
          }
        }
        else if ((_DWORD)v28 == -1)
        {
          v28 = (v29 + 1024);
        }
        else
        {
          v28 = v28;
        }
      }
    }
    v35 = 6;
LABEL_36:
    ++v29;
    v24 += 80;
    v27 = (int8x16_t *)((char *)v27 + 56);
    if (v35 == 7)
      break;
  }
  if ((v25 & 1) != 0 || !v70)
  {
    if ((v25 & 1) == 0)
      v28 = 0xFFFFFFFFLL;
  }
  else
  {
    if ((_DWORD)v28 == -1)
    {
      if (*((_DWORD *)*v72 + 6))
        v41 = (char *)*((_QWORD *)*v72 + 2);
      else
        v41 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 326, (uint64_t)"mrecutil/dsmset", 4, (uint64_t)"%.500s", v21, v22, (char)v41);
    }
    DgnString::DgnString((DgnString *)&v77);
    DSMSetData::getSysReserveName(v6, v26, v28, (DgnString *)&v77);
    v42 = *((_DWORD *)a2 + 2);
    v43 = v42 != 0;
    v44 = v42 - 1;
    if (v43)
      v45 = v44;
    else
      v45 = 0;
    v46 = sysconf(29);
    v47 = (v45 & 0xFFFFFFF0) + 32;
    v48 = ((v46 - 1) + (unint64_t)v47) & ~(unint64_t)(v46 - 1);
    v76 = -1;
    v49 = DSMHandle::open((DSMHandle *)&v76, *v72, a2, &v77, v48, 1, 1);
    v50 = (DSMHeadData *)mmap(0, v48, 3, 1, v76, 0);
    v74 = v50;
    v75 = v48;
    if (v50 == (DSMHeadData *)-1 && v49)
    {
      DSMHandle::unlink((const char **)*v72, &v77, v51);
      goto LABEL_68;
    }
    if (v50 == (DSMHeadData *)-1)
    {
LABEL_68:
      if (*((_DWORD *)a2 + 2))
        v55 = *a2;
      else
        v55 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 355, (uint64_t)"mrecutil/dsmset", 5, (uint64_t)"%.500s %.500s %llu", v52, v53, (char)v55);
      v50 = v74;
    }
    DSMHeadData::init(v50, (const DgnString *)a2, 0);
    v56 = pthread_self();
    v71 = (ClockTimer *)getpid();
    v73 = v47;
    PlatformAbsoluteTime = ClockTimer::getPlatformAbsoluteTime(v71);
    v58 = *((_QWORD *)v6 + 34);
    v59 = v58 + 80 * v28;
    *(_DWORD *)(v59 + 72) = 1;
    *(_QWORD *)(v59 + 24) = v56;
    v60 = v76;
    v76 = -1;
    v61 = *(_DWORD *)(v59 + 52);
    if (v61 != -1)
      close(v61);
    *(_DWORD *)(v59 + 52) = v60;
    v62 = (void **)(v58 + 80 * v28 + 56);
    v63 = v74;
    v64 = v75;
    v74 = (DSMHeadData *)-1;
    if (v63 != (DSMHeadData *)-1)
      munmap(*v62, *(_QWORD *)(v58 + 80 * v28 + 64));
    *v62 = v63;
    v65 = v58 + 80 * v28;
    *(_QWORD *)(v65 + 64) = v64;
    *(_QWORD *)(v65 + 8) = 0;
    *(_QWORD *)(v65 + 16) = (int)v71;
    *(_QWORD *)v59 = PlatformAbsoluteTime;
    *(_DWORD *)(v65 + 32) = v73;
    *(_DWORD *)(v65 + 36) = 2;
    *(_DWORD *)(v65 + 44) = v26;
    v66 = &v69[56 * v28];
    *(_QWORD *)v66 = PlatformAbsoluteTime;
    *((_QWORD *)v66 + 1) = 0;
    *((_QWORD *)v66 + 2) = 0;
    *((_QWORD *)v66 + 3) = (int)v71;
    *((_DWORD *)v66 + 8) = v73;
    *((_DWORD *)v66 + 9) = v26;
    *((_DWORD *)v66 + 11) = 1;
    *((_DWORD *)v66 + 12) = v26 ^ PlatformAbsoluteTime ^ v71 ^ ((PlatformAbsoluteTime ^ (unint64_t)(int)v71) >> 32) ^ v73 ^ 3;
    __dmb(0xBu);
    *(_DWORD *)(v65 + 40) = 1;
    *((_DWORD *)v66 + 10) = 2;
    DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&v74);
    DSMHandle::~DSMHandle((DSMHandle *)&v76);
    DgnString::~DgnString((DgnString *)&v77);
    v20 = (pthread_mutex_t *)((char *)v6 + 32);
  }
LABEL_77:
  Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch(&v79);
  v67 = *((_DWORD *)v6 + 24) - 1;
  *((_DWORD *)v6 + 24) = v67;
  if (!v67)
    *((_QWORD *)v6 + 13) = 0;
  pthread_mutex_unlock(v20);
  DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&v81);
  return v28;
}

void sub_20988D268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, pthread_mutex_t *a15, char a16, uint64_t a17, int a18, char a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  int v27;

  Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch(&a24);
  v27 = *(_DWORD *)(v24 + 96) - 1;
  *(_DWORD *)(v24 + 96) = v27;
  if (!v27)
    *(_QWORD *)(v24 + 104) = 0;
  pthread_mutex_unlock(a15);
  DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)(v25 - 96));
  _Unwind_Resume(a1);
}

void DSMHeadData::init(DSMHeadData *this, const DgnString *a2, uint64_t a3)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  DSMHeadData *v10;
  int v11;

  v4 = *((_DWORD *)a2 + 2);
  LODWORD(v5) = v4 - 1;
  if (v4)
    v5 = v5;
  else
    v5 = 0;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 1) = v5;
  *((_QWORD *)this + 1) = a3;
  if (v4 >= 2)
  {
    v6 = 0;
    do
    {
      *((_BYTE *)this + v6 + 16) = *(_BYTE *)(*(_QWORD *)a2 + v6);
      ++v6;
    }
    while (v6 < v5);
  }
  v7 = (v5 & 0xFFFFFFF0) + 32;
  if (v5 < (v5 & 0xFFFFFFF0) + 16)
    bzero((char *)this + v5 + 16, (v5 & 0xFFFFFFF0 | (v4 != 0)) - v4 + 15 + 1);
  v8 = 0;
  if (v7)
  {
    LODWORD(v9) = v7 >> 2;
    if (v7 >> 2 <= 1)
      v9 = 1;
    else
      v9 = v9;
    v10 = this;
    do
    {
      v11 = *(_DWORD *)v10;
      v10 = (DSMHeadData *)((char *)v10 + 4);
      v8 ^= v11;
      --v9;
    }
    while (v9);
  }
  *(_DWORD *)this = v8;
}

BOOL DgnSharedMemSet::waitTilCreatedAndMapEx(DSMSetData **this, uint64_t a2, char **a3, unsigned int a4)
{
  uint64_t v7;
  unsigned int v8;
  int8x16_t *v9;
  __int32 *i;
  _BOOL4 isProcessAlive;
  int v13;
  __int32 v14;
  DSMSetData *v15;
  pthread_mutex_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  pthread_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int *v43;
  int v44;
  int v45;
  void **v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  pthread_mutex_t *v54;
  __int32 v55;
  __int32 v56;
  uint64_t v57;
  DSMSetData *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  const char *v62;
  timespec __rqtp;

  v7 = *((_QWORD *)*this + 32);
  v8 = a2;
  v9 = (int8x16_t *)(v7 + 56 * a2);
  v57 = *((_QWORD *)*this + 34);
  for (i = &v9[2].i32[2]; *i == 2; a4 = v13 - 100)
  {
    isProcessAlive = DSMGlobalRecord::isProcessAlive(*(DSMGlobalRecord **)(v7 + 56 * v8 + 24));
    if (!a4 || !isProcessAlive)
      break;
    __rqtp = (timespec)xmmword_209A6F7A0;
    nanosleep(&__rqtp, 0);
    v13 = a4 <= 0x64 ? 100 : a4;
  }
  v14 = *i;
  if (*i != 2)
  {
    v15 = *this;
    v16 = (pthread_mutex_t *)((char *)*this + 32);
    pthread_mutex_lock(v16);
    ++*((_DWORD *)v15 + 24);
    v58 = v15;
    *((_QWORD *)v15 + 13) = pthread_self();
    __rqtp.tv_sec = (__darwin_time_t)*this + 112;
    LODWORD(__rqtp.tv_nsec) = 2;
    LODWORD(__rqtp.tv_nsec) = DgnSharedLock::acquire((sem_t **)__rqtp.tv_sec, 0xEA60u);
    if (LODWORD(__rqtp.tv_nsec))
    {
      if (*((_DWORD *)*this + 6))
        v19 = (char *)*((_QWORD *)*this + 2);
      else
        v19 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 496, (uint64_t)"mrecutil/dsmset", 2, (uint64_t)"%.500s", v17, v18, (char)v19);
    }
    v20 = v7 + 56 * v8;
    v22 = *(_DWORD *)(v20 + 32);
    v21 = (_DWORD *)(v20 + 32);
    v23 = veorq_s8(*v9, v9[1]);
    *(int8x8_t *)v23.i8 = veor_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
    if ((v22 ^ *i ^ v21[1] ^ v21[3] ^ v23.i32[1] ^ v23.i32[0]) != v21[4])
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 499, (uint64_t)"mrecutil/dsmset", 7, (uint64_t)"%d %.500s %.500s", v17, v18, a2);
    if ((*(_DWORD *)(*((_QWORD *)*this + 32) + 56 * v8 + 40) - 3) >= 2)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 503, (uint64_t)"mrecutil/dsmset", 8, (uint64_t)"%d %.500s %d %.500s", v17, v18, a2);
    v56 = v14;
    v24 = v57;
    v25 = v57 + 80 * v8;
    v27 = *(_DWORD *)(v25 + 40);
    v26 = (int *)(v25 + 40);
    if (!v27)
    {
      v54 = v16;
      DgnString::DgnString((DgnString *)&v62);
      DSMSetData::getSysName(*this, v21[1], a2, (DgnString *)&v62);
      v55 = *i;
      v28 = *i == 4;
      v61 = -1;
      DSMHandle::open((DSMHandle *)&v61, *this, a3, &v62, 0xFFFFFFFFFFFFFFFFLL, v28, 0);
      v31 = v61;
      if (v61 == -1)
      {
        if (*((_DWORD *)a3 + 2))
          v32 = *a3;
        else
          v32 = &byte_209A88803;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 521, (uint64_t)"mrecutil/dsmset", 6, (uint64_t)"%.500s %.500s", v29, v30, (char)v32);
        v31 = v61;
      }
      v59 = -1;
      v60 = 0;
      v33 = *((_QWORD *)v21 - 3);
      if (v55 == 4)
        v34 = 3;
      else
        v34 = 1;
      v59 = (uint64_t)mmap(0, *((_QWORD *)v21 - 3), v34, 1, v31, 0);
      v60 = v33;
      if (v59 == -1)
      {
        if (*((_DWORD *)a3 + 2))
          v37 = *a3;
        else
          v37 = &byte_209A88803;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 528, (uint64_t)"mrecutil/dsmset", 5, (uint64_t)"%.500s %.500s %llu", v35, v36, (char)v37);
      }
      *(_QWORD *)(v57 + 80 * a2) = v9->i64[0];
      v38 = v57 + 80 * v8;
      *(_QWORD *)(v38 + 8) = *((_QWORD *)v21 - 2);
      *(_DWORD *)(v38 + 32) = *v21;
      *(_DWORD *)(v38 + 36) = *i;
      *(_QWORD *)(v38 + 16) = *((_QWORD *)v21 - 1);
      v39 = pthread_self();
      v40 = v57 + 80 * v8;
      v41 = v61;
      v61 = -1;
      v44 = *(_DWORD *)(v40 + 48);
      v43 = (int *)(v40 + 48);
      v42 = v44;
      *((_QWORD *)v43 - 3) = v39;
      if (v55 == 4)
        v45 = 9;
      else
        v45 = 8;
      if (v42 != -1)
        close(v42);
      *v43 = v41;
      v46 = (void **)(v57 + 80 * v8 + 56);
      v48 = (void *)v59;
      v47 = v60;
      v59 = -1;
      if (v48 != (void *)-1)
        munmap(*v46, *(_QWORD *)(v57 + 80 * v8 + 64));
      *v46 = v48;
      *(_QWORD *)(v57 + 80 * v8 + 64) = v47;
      __dmb(0xBu);
      *v26 = v45;
      DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&v59);
      DSMHandle::~DSMHandle((DSMHandle *)&v61);
      DgnString::~DgnString((DgnString *)&v62);
      v16 = v54;
      v24 = v57;
    }
    if (*((_DWORD *)a3 + 2))
      v49 = *a3;
    else
      v49 = &byte_209A88803;
    v14 = v56;
    if (strcmp(v49, (const char *)(*(_QWORD *)(v24 + 80 * v8 + 56) + 16)))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 561, (uint64_t)"mrecutil/dsmset", 9, (uint64_t)"%d %.500s %.500s %.500s", v50, v51, a2);
    Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch(&__rqtp.tv_sec);
    v52 = *((_DWORD *)v58 + 24) - 1;
    *((_DWORD *)v58 + 24) = v52;
    if (!v52)
      *((_QWORD *)v58 + 13) = 0;
    pthread_mutex_unlock(v16);
  }
  return v14 != 2;
}

void sub_20988D994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, pthread_mutex_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,int a22,char a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  int v28;

  DgnString::~DgnString((DgnString *)&a25);
  Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch((uint64_t *)(v26 - 96));
  v28 = *(_DWORD *)(a17 + 96) - 1;
  *(_DWORD *)(a17 + 96) = v28;
  if (!v28)
    *(_QWORD *)(a17 + 104) = 0;
  pthread_mutex_unlock(a14);
  _Unwind_Resume(a1);
}

char *DgnSharedMemSet::openDSMWithSizeEx(DSMSetData **a1, uint64_t a2, int a3, uint64_t *a4)
{
  DSMSetData *v8;
  uint64_t v9;
  uint64_t v10;
  pthread_mutex_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  DSMMappedPtr *v22;
  uint64_t v23;
  unint64_t v24;
  _BOOL4 v25;
  DSMHeadData *v26;
  const DgnString *v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  DSMHeadData *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  DSMHeadData *v38;
  int v39;
  _DWORD *v41;
  unsigned int *v42;
  DSMHeadData *v43;
  unint64_t v44;
  int v45;
  char *v46;
  int v47;
  const char *v48;

  v8 = *a1;
  v9 = *((_QWORD *)*a1 + 32);
  v10 = *((_QWORD *)*a1 + 34);
  v11 = (pthread_mutex_t *)((char *)*a1 + 32);
  pthread_mutex_lock(v11);
  ++*((_DWORD *)v8 + 24);
  *((_QWORD *)v8 + 13) = pthread_self();
  v14 = a2;
  switch(a3)
  {
    case 0:
      if (*(_DWORD *)(v9 + 56 * a2 + 40) != 2)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 610, (uint64_t)"mrecutil/dsmset", 8, (uint64_t)"%d %.500s %d %.500s", v12, v13, a2);
      if (a4)
        *a4 = 0;
      v16 = 0;
      *(_DWORD *)(v10 + 80 * a2 + 40) = 2;
      goto LABEL_25;
    case 1:
      v41 = (_DWORD *)(v10 + 80 * a2 + 40);
      v17 = *a4;
      v18 = v10 + 80 * a2;
      v19 = *(unsigned int *)(v18 + 32);
      v42 = (unsigned int *)(v18 + 32);
      v20 = sysconf(29);
      DgnString::DgnString((DgnString *)&v48);
      DSMSetData::getSysName(*a1, *(unsigned int *)(v10 + 80 * a2 + 44), a2, (DgnString *)&v48);
      v21 = v10 + 80 * a2;
      v23 = *(_QWORD *)(v21 + 56);
      v22 = (DSMMappedPtr *)(v21 + 56);
      DgnString::DgnString((DgnString *)&v46, (const char *)(v23 + 16));
      v24 = (v17 + v19 + (v20 - 1)) & ~(unint64_t)(v20 - 1);
      v45 = -1;
      v25 = DSMHandle::open((DSMHandle *)&v45, *a1, &v46, &v48, v24, 1, 1);
      v26 = (DSMHeadData *)mmap(0, v24, 3, 1, v45, 0);
      v43 = v26;
      v44 = v24;
      if (v26 == (DSMHeadData *)-1 && v25)
      {
        DSMHandle::unlink((const char **)*a1, &v48, v27);
      }
      else if (v26 != (DSMHeadData *)-1)
      {
        goto LABEL_17;
      }
      if (v47)
        LOBYTE(v31) = (_BYTE)v46;
      else
        v31 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 663, (uint64_t)"mrecutil/dsmset", 5, (uint64_t)"%.500s %.500s %llu", v28, v29, (char)v31);
      v26 = v43;
LABEL_17:
      DSMHeadData::init(v26, (const DgnString *)&v46, *a4);
      v32 = v43;
      v33 = *v42;
      v34 = v10 + 80 * v14;
      *(_QWORD *)(v34 + 8) = *a4;
      DSMHandle::~DSMHandle((DSMHandle *)(v34 + 48));
      v35 = v45;
      v45 = -1;
      v36 = *(_DWORD *)(v34 + 48);
      if (v36 != -1)
        close(v36);
      *(_DWORD *)(v34 + 48) = v35;
      DSMMappedPtr::~DSMMappedPtr(v22);
      v38 = v43;
      v37 = v44;
      v43 = (DSMHeadData *)-1;
      if (v38 != (DSMHeadData *)-1)
        munmap(*(void **)v22, *(_QWORD *)(v10 + 80 * v14 + 64));
      v16 = (char *)v32 + v33;
      *(_QWORD *)v22 = v38;
      *(_QWORD *)(v10 + 80 * v14 + 64) = v37;
      *v41 = 6;
      DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&v43);
      DSMHandle::~DSMHandle((DSMHandle *)&v45);
      DgnString::~DgnString((DgnString *)&v46);
      DgnString::~DgnString((DgnString *)&v48);
LABEL_25:
      v39 = *((_DWORD *)v8 + 24) - 1;
      *((_DWORD *)v8 + 24) = v39;
      if (!v39)
        *((_QWORD *)v8 + 13) = 0;
      pthread_mutex_unlock(v11);
      return v16;
    case 2:
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 622, (uint64_t)"mrecutil/dsmset", 1, (uint64_t)"%.500s", v12, v13, (char)"eDSMOM_ReadValidate");
      goto LABEL_11;
    case 3:
    case 4:
      v15 = v10 + 80 * a2;
      v16 = (char *)(*(_QWORD *)(v15 + 56) + *(unsigned int *)(v15 + 32));
      *a4 = *(_QWORD *)(v15 + 8);
      goto LABEL_25;
    default:
LABEL_11:
      v16 = 0;
      goto LABEL_25;
  }
}

void sub_20988DDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19, __int16 a20,char a21,uint64_t a22,char a23)
{
  pthread_mutex_t *v23;
  uint64_t v24;
  int v26;

  DSMHandle::~DSMHandle((DSMHandle *)&a19);
  DgnString::~DgnString((DgnString *)&a21);
  DgnString::~DgnString((DgnString *)&a23);
  v26 = *(_DWORD *)(v24 + 96) - 1;
  *(_DWORD *)(v24 + 96) = v26;
  if (!v26)
    *(_QWORD *)(v24 + 104) = 0;
  pthread_mutex_unlock(v23);
  _Unwind_Resume(a1);
}

uint64_t DgnSharedMemSet::closeDSMEx(DgnSharedMemSet *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v3 = *(_QWORD *)this;
  v4 = *(_QWORD *)(*(_QWORD *)this + 272);
  v5 = (pthread_mutex_t *)(*(_QWORD *)this + 32);
  pthread_mutex_lock(v5);
  ++*(_DWORD *)(v3 + 96);
  *(_QWORD *)(v3 + 104) = pthread_self();
  v6 = v4 + 80 * a2;
  v9 = *(_DWORD *)(v6 + 40);
  v7 = (int *)(v6 + 40);
  v8 = v9;
  if ((v9 - 10) <= 0xFFFFFFFD)
  {
    switch(v8)
    {
      case 2:
        v10 = 3;
        break;
      case 6:
        v10 = 7;
        break;
      case 4:
        v10 = 5;
        break;
      default:
        goto LABEL_9;
    }
    *v7 = v10;
  }
LABEL_9:
  v11 = *(_DWORD *)(v3 + 96) - 1;
  *(_DWORD *)(v3 + 96) = v11;
  if (!v11)
    *(_QWORD *)(v3 + 104) = 0;
  return pthread_mutex_unlock(v5);
}

BOOL DgnSharedMemSet::createMaybeRemapDSMEx(DSMSetData **this, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  DSMSetData *v14;
  pthread_mutex_t *v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  __darwin_time_t PlatformAbsoluteTime;
  uint64_t v26;
  int *v27;
  unsigned int *v28;
  int v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  int v33;
  int v34;
  const DgnString *v35;
  _BOOL4 v36;
  int v37;
  const char *v39;
  BOOL v40;
  sem_t **v41;
  _BOOL4 v42;
  uint64_t v43;
  size_t v44;

  v6 = *((_QWORD *)*this + 34);
  v43 = -1;
  v44 = 0;
  v7 = *(_DWORD *)(v6 + 48);
  v8 = sysconf(29);
  if (v8 <= 0x10000)
    v9 = 0x10000;
  else
    v9 = v8;
  v12 = (char *)mmap(0, v9, 3, 1, v7, 0);
  v43 = (uint64_t)v12;
  v44 = v9;
  if (v12 == (char *)-1)
  {
    if (*((_DWORD *)*this + 6))
      v13 = (char *)*((_QWORD *)*this + 2);
    else
      v13 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 757, (uint64_t)"mrecutil/dsmset", 3, (uint64_t)"%.500s", v10, v11, (char)v13);
    v12 = (char *)v43;
  }
  v14 = *this;
  v15 = (pthread_mutex_t *)((char *)*this + 32);
  pthread_mutex_lock(v15);
  ++*((_DWORD *)v14 + 24);
  *((_QWORD *)v14 + 13) = pthread_self();
  v41 = (sem_t **)((char *)*this + 112);
  v16 = DgnSharedLock::acquire(v41, 0xEA60u);
  v42 = v16;
  if (v16)
  {
    if (*((_DWORD *)*this + 6))
      v19 = (char *)*((_QWORD *)*this + 2);
    else
      v19 = &byte_209A88803;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 765, (uint64_t)"mrecutil/dsmset", 2, (uint64_t)"%.500s", v17, v18, (char)v19);
  }
  if (a3)
    v20 = 4;
  else
    v20 = 3;
  v40 = 0;
  if ((a3 & 1) == 0)
  {
    v21 = v6 + 80 * a2;
    v22 = (_BYTE *)(v21 + 56);
    v16 = DSMMappedPtr::remap((DSMMappedPtr *)(v21 + 56), *(_DWORD *)(v21 + 48), 0, &v40);
    if (!v16)
    {
      DgnString::DgnString((DgnString *)&v39);
      DSMSetData::getSysName(*this, *(unsigned int *)(v6 + 80 * a2 + 44), a2, (DgnString *)&v39);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 795, (uint64_t)"mrecutil/dsmset", 5, (uint64_t)"%.500s %.500s %llu", v23, v24, *v22 + 16);
      DgnString::~DgnString((DgnString *)&v39);
    }
  }
  PlatformAbsoluteTime = ClockTimer::getPlatformAbsoluteTime((ClockTimer *)v16);
  v26 = v6 + 80 * a2;
  v27 = (int *)(v26 + 40);
  *(_QWORD *)v26 = PlatformAbsoluteTime;
  v29 = *(_DWORD *)(v26 + 44);
  v28 = (unsigned int *)(v26 + 44);
  *(_DWORD *)(v26 + 36) = v20;
  v30 = *(_QWORD *)(v26 + 64);
  v31 = &v12[56 * a2];
  *((_QWORD *)v31 + 1) = v30;
  v32 = *(_OWORD *)(v26 + 8);
  *((_OWORD *)v31 + 1) = v32;
  v33 = *(_DWORD *)(v26 + 32);
  *((_DWORD *)v31 + 8) = v33;
  *((_DWORD *)v31 + 9) = v29;
  *(_QWORD *)v31 = PlatformAbsoluteTime;
  *((_DWORD *)v31 + 12) = *((_DWORD *)v31 + 11) ^ v32 ^ v30 ^ PlatformAbsoluteTime ^ DWORD2(v32) ^ (((unint64_t)v32 ^ v30 ^ PlatformAbsoluteTime ^ *((_QWORD *)&v32 + 1)) >> 32) ^ v29 ^ v33 ^ v20;
  if (a3)
    v34 = 9;
  else
    v34 = 8;
  __dmb(0xBu);
  *((_DWORD *)v31 + 10) = v20;
  *v27 = v34;
  DSMHandle::~DSMHandle((DSMHandle *)(v28 + 2));
  DgnString::DgnString((DgnString *)&v39);
  DSMSetData::getSysReserveName(*this, *v28, a2, (DgnString *)&v39);
  DSMHandle::unlink((const char **)*this, &v39, v35);
  v36 = v40;
  DgnString::~DgnString((DgnString *)&v39);
  Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch((uint64_t *)&v41);
  v37 = *((_DWORD *)v14 + 24) - 1;
  *((_DWORD *)v14 + 24) = v37;
  if (!v37)
    *((_QWORD *)v14 + 13) = 0;
  pthread_mutex_unlock(v15);
  DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&v43);
  return v36;
}

void sub_20988E25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  pthread_mutex_t *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch((uint64_t *)va);
  v10 = *(_DWORD *)(v8 + 96) - 1;
  *(_DWORD *)(v8 + 96) = v10;
  if (!v10)
    *(_QWORD *)(v8 + 104) = 0;
  pthread_mutex_unlock(v7);
  DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)va1);
  _Unwind_Resume(a1);
}

uint64_t DgnSharedMemSet::getGlobalState(DgnSharedMemSet *this, unsigned int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 256) + 56 * a2 + 40);
}

BOOL DgnSharedMemSet::isCurThreadDSMOwner(DgnSharedMemSet *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  pthread_t v5;
  pid_t v6;
  pthread_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)this + 272);
  if (!*(_DWORD *)(v2 + 80 * a2 + 40))
    return 0;
  v3 = v2 + 80 * a2;
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(pthread_t *)(v3 + 24);
  v6 = getpid();
  v7 = pthread_self();
  return v4 == v6 && v5 == v7;
}

uint64_t DgnSharedMemSet::unrefDSMEx(DSMSetData **this, uint64_t a2)
{
  DSMSetData *v4;
  uint64_t v5;
  uint64_t v6;
  pthread_mutex_t *v7;
  _DWORD *v8;
  int v9;
  int v10;
  unsigned int v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int8x16_t *v19;
  __int32 *v20;
  int8x16_t v21;
  int8x8_t v22;
  __int32 v23;
  int8x16_t *v24;
  __int32 v25;
  __int32 *v26;
  __int32 v27;
  __int32 *v28;
  int8x16_t *v29;
  int8x16_t v30;
  const DgnString *v31;
  int8x16_t v32;
  __int32 v33;
  const DgnString *v34;
  uint64_t v35;
  int v36;
  uint64_t v38;
  _QWORD *v39;
  pthread_mutex_t *v40;
  const char *v41[2];
  sem_t **v42;
  uint64_t v44;
  size_t v45;

  v4 = *this;
  v5 = *((_QWORD *)*this + 34);
  v6 = v5 + 80 * a2;
  v7 = (pthread_mutex_t *)((char *)*this + 32);
  pthread_mutex_lock(v7);
  ++*((_DWORD *)v4 + 24);
  *((_QWORD *)v4 + 13) = pthread_self();
  v8 = (_DWORD *)(v6 + 72);
  v9 = *(_DWORD *)(v6 + 72) - 1;
  *(_DWORD *)(v6 + 72) = v9;
  if (!v9)
  {
    v38 = v5;
    v39 = (_QWORD *)v6;
    v44 = -1;
    v45 = 0;
    v10 = *(_DWORD *)(*((_QWORD *)*this + 34) + 48);
    v40 = v7;
    v11 = sysconf(29);
    if (v11 <= 0x10000)
      v12 = 0x10000;
    else
      v12 = v11;
    v44 = (uint64_t)mmap(0, v12, 3, 1, v10, 0);
    v45 = v12;
    if (v44 == -1)
    {
      if (*((_DWORD *)*this + 6))
        v15 = (char *)*((_QWORD *)*this + 2);
      else
        v15 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 1024, (uint64_t)"mrecutil/dsmset", 3, (uint64_t)"%.500s", v13, v14, (char)v15);
    }
    v42 = (sem_t **)((char *)*this + 112);
    if (DgnSharedLock::acquire(v42, 0xEA60u))
    {
      if (*((_DWORD *)*this + 6))
        v18 = (char *)*((_QWORD *)*this + 2);
      else
        v18 = &byte_209A88803;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 1029, (uint64_t)"mrecutil/dsmset", 2, (uint64_t)"%.500s", v16, v17, (char)v18);
    }
    v19 = (int8x16_t *)(v44 + 56 * a2);
    v20 = &v19[2].i32[2];
    v21 = veorq_s8(*v19, v19[1]);
    v22 = veor_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
    v24 = v19 + 2;
    v23 = v19[2].i32[0];
    v26 = &v19[2].i32[1];
    v25 = v19[2].i32[1];
    v28 = &v19[2].i32[3];
    v27 = v19[2].i32[3];
    v29 = v19 + 3;
    if ((v23 ^ v19[2].i32[2] ^ v25 ^ v27 ^ v22.i32[1] ^ v22.i32[0]) != v19[3].i32[0] || *v20 == 1)
    {
      if (*v20 != 1)
      {
        DSMGlobalRecord::reset(v44 + 56 * a2);
        *v20 = 1;
        v30 = veorq_s8(*v19, v19[1]);
        *(int8x8_t *)v30.i8 = veor_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
        v29->i32[0] = v24->i32[0] ^ *v20 ^ *v26 ^ *v28 ^ v30.i32[1] ^ v30.i32[0];
      }
      goto LABEL_26;
    }
    if (*v20 == 2)
    {
      DgnString::DgnString((DgnString *)v41);
      DSMSetData::getSysReserveName(*this, *v26, a2, (DgnString *)v41);
      DSMHandle::unlink((const char **)*this, v41, v31);
      if (*v28 < 2)
      {
        DSMGlobalRecord::reset((uint64_t)v19);
      }
      else
      {
        DSMGlobalRecord::reset((uint64_t)v19);
        *v20 = 1;
        v32 = veorq_s8(*v19, v19[1]);
        *(int8x8_t *)v32.i8 = veor_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
        v29->i32[0] = v24->i32[0] ^ *v20 ^ *v26 ^ *v28 ^ v32.i32[1] ^ v32.i32[0];
      }
    }
    else
    {
      v33 = v27 - 1;
      *v28 = v33;
      v29->i32[0] = v23 ^ v25 ^ *v20 ^ v33 ^ v22.i32[1] ^ v22.i32[0];
      if (v33)
      {
LABEL_26:
        v35 = v38 + 80 * a2;
        DSMHandle::~DSMHandle((DSMHandle *)(v35 + 48));
        DSMHandle::~DSMHandle((DSMHandle *)(v35 + 52));
        DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)(v35 + 56));
        *(_DWORD *)(v35 + 40) = 0;
        __dmb(0xBu);
        *v39 = 0;
        v39[1] = 0;
        *(_QWORD *)(v35 + 16) = -1;
        *(_QWORD *)(v35 + 24) = -1;
        *(_QWORD *)(v35 + 32) = 0;
        *(_DWORD *)(v35 + 44) = 0;
        *v8 = 0;
        Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch((uint64_t *)&v42);
        DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&v44);
        v7 = v40;
        goto LABEL_27;
      }
      DgnString::DgnString((DgnString *)v41);
      DSMSetData::getSysName(*this, *v26, a2, (DgnString *)v41);
      DSMHandle::unlink((const char **)*this, v41, v34);
      DSMGlobalRecord::reset((uint64_t)v19);
    }
    DgnString::~DgnString((DgnString *)v41);
    goto LABEL_26;
  }
LABEL_27:
  v36 = *((_DWORD *)v4 + 24) - 1;
  *((_DWORD *)v4 + 24) = v36;
  if (!v36)
    *((_QWORD *)v4 + 13) = 0;
  return pthread_mutex_unlock(v7);
}

void sub_20988E73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, pthread_mutex_t *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  int v21;

  Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch(&a17);
  DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&a19);
  v21 = *(_DWORD *)(v19 + 96) - 1;
  *(_DWORD *)(v19 + 96) = v21;
  if (!v21)
    *(_QWORD *)(v19 + 104) = 0;
  pthread_mutex_unlock(a14);
  _Unwind_Resume(a1);
}

DgnString *DgnSharedMemSet::getMappedDSMName@<X0>(DgnSharedMemSet *this@<X0>, unsigned int a2@<W1>, DgnString *a3@<X8>)
{
  return DgnString::DgnString(a3, (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 272) + 80 * a2 + 56) + 16));
}

void DgnSharedMemSet::printSize(DSMSetData **this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  DSMSetData *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 1116, (DgnString *)&v36);
  if (v37)
    v16 = (char *)v36;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v36);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = *this;
  if (*this)
  {
    v35 = 0;
    v36 = 0;
    v22 = (a3 + 1);
    v34 = 0;
    DSMSetData::printSize(v21, 0xFFFFFFFFLL, v22, &v36, &v35, &v34);
    *a4 += v36;
    *a5 += v35;
    *a6 += v34;
  }
  else
  {
    v22 = (a3 + 1);
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v23 = 4;
  else
    v23 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 1119, (DgnString *)&v36);
  if (v37)
    v28 = (char *)v36;
  else
    v28 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v22, &byte_209A88803, (34 - a3), (34 - a3), v28, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v36);
  *a4 += v23;
  *a5 += v23;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 1121, (DgnString *)&v36);
  if (v37)
    v33 = (char *)v36;
  else
    v33 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, a3, &byte_209A88803, (35 - a3), (35 - a3), v33, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v36);
}

void sub_20988E9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DSMSetData::DSMSetData(DSMSetData *this, const DgnString *a2, const DgnString *a3)
{
  DgnString *v5;

  v5 = DgnString::DgnString(this, a2);
  DgnString::DgnString((DgnString *)((char *)v5 + 16), a3);
  recursive_mutex_init((_opaque_pthread_mutex_t *)((char *)this + 32));
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = -1;
  *((_QWORD *)this + 15) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_QWORD *)this + 36) = -1;
  *((_DWORD *)this + 74) = -1;
}

void sub_20988EA68(_Unwind_Exception *a1)
{
  DgnString *v1;
  DgnString *v2;

  DgnString::~DgnString(v2);
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void UttFile::printSize(UttFile *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  int v86;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 148, (DgnString *)&v85);
  if (v86)
    v16 = v85;
  else
    v16 = &unk_209A6F82F;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6F82F, a3, &unk_209A6F82F, v16);
  DgnString::~DgnString((DgnString *)&v85);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6F82F);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 150, (DgnString *)&v85);
  if (v86)
    v27 = v85;
  else
    v27 = &unk_209A6F82F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6F82F, (34 - a3), (34 - a3), v27, 1, 1, 0);
  v82 = a3;
  DgnString::~DgnString((DgnString *)&v85);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 152, (DgnString *)&v85);
  if (v86)
    v32 = v85;
  else
    v32 = &unk_209A6F82F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6F82F, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v85);
  *a4 += 4;
  *a5 += 4;
  v33 = sizeObject((uint64_t)this + 8, 0);
  v34 = sizeObject((uint64_t)this + 8, 1);
  v35 = sizeObject((uint64_t)this + 8, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 154, (DgnString *)&v85);
  if (v86)
    v40 = v85;
  else
    v40 = &unk_209A6F82F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, v21, &unk_209A6F82F, v22, v22, v40, v33, v34, v35);
  DgnString::~DgnString((DgnString *)&v85);
  *a4 += v33;
  *a5 += v34;
  *a6 += v35;
  v41 = FileSpec::sizeObject((uint64_t)this + 48);
  v42 = FileSpec::sizeObject((uint64_t)this + 48);
  v43 = FileSpec::sizeObject((uint64_t)this + 48);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 155, (DgnString *)&v85);
  if (v86)
    v48 = v85;
  else
    v48 = &unk_209A6F82F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, v21, &unk_209A6F82F, v22, v22, v48, v41, v42, v43);
  DgnString::~DgnString((DgnString *)&v85);
  *a4 += v41;
  *a5 += v42;
  *a6 += v43;
  v49 = *((_QWORD *)this + 8);
  if (v49)
  {
    v84 = 0;
    v85 = 0;
    v83 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t *, uint64_t *))(*(_QWORD *)v49 + 16))(v49, 0xFFFFFFFFLL, v21, &v85, &v84, &v83);
    *a4 += (unint64_t)v85;
    *a5 += v84;
    *a6 += v83;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v50 = 4;
  else
    v50 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 156, (DgnString *)&v85);
  if (v86)
    v55 = v85;
  else
    v55 = &unk_209A6F82F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, v21, &unk_209A6F82F, v22, v22, v55, v50, v50, 0);
  DgnString::~DgnString((DgnString *)&v85);
  *a4 += v50;
  *a5 += v50;
  v56 = *((_QWORD *)this + 9);
  if (v56)
  {
    v84 = 0;
    v85 = 0;
    v83 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t *, uint64_t *))(*(_QWORD *)v56 + 16))(v56, 0xFFFFFFFFLL, v21, &v85, &v84, &v83);
    *a4 += (unint64_t)v85;
    *a5 += v84;
    *a6 += v83;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v57 = 4;
  else
    v57 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 158, (DgnString *)&v85);
  if (v86)
    v62 = v85;
  else
    v62 = &unk_209A6F82F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6F82F, v22, v22, v62, v57, v57, 0);
  DgnString::~DgnString((DgnString *)&v85);
  *a4 += v57;
  *a5 += v57;
  v63 = *((_QWORD *)this + 10);
  if (v63)
  {
    v84 = 0;
    v85 = 0;
    v83 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t *, uint64_t *))(*(_QWORD *)v63 + 16))(v63, 0xFFFFFFFFLL, v21, &v85, &v84, &v83);
    *a4 += (unint64_t)v85;
    *a5 += v84;
    *a6 += v83;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v64 = 4;
  else
    v64 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 159, (DgnString *)&v85);
  if (v86)
    v69 = v85;
  else
    v69 = &unk_209A6F82F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v21, &unk_209A6F82F, v22, v22, v69, v64, v64, 0);
  DgnString::~DgnString((DgnString *)&v85);
  *a4 += v64;
  *a5 += v64;
  v70 = *((_QWORD *)this + 11);
  if (v70)
  {
    v84 = 0;
    v85 = 0;
    v83 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t *, uint64_t *))(*(_QWORD *)v70 + 16))(v70, 0xFFFFFFFFLL, v21, &v85, &v84, &v83);
    *a4 += (unint64_t)v85;
    *a5 += v84;
    *a6 += v83;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v71 = 4;
  else
    v71 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 160, (DgnString *)&v85);
  if (v86)
    v76 = v85;
  else
    v76 = &unk_209A6F82F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v21, &unk_209A6F82F, v22, v22, v76, v71, v71, 0);
  DgnString::~DgnString((DgnString *)&v85);
  *a4 += v71;
  *a5 += v71;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 161, (DgnString *)&v85);
  if (v86)
    v81 = v85;
  else
    v81 = &unk_209A6F82F;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v82, &unk_209A6F82F, (35 - v82), (35 - v82), v81, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v85);
}

void sub_20988F13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

size_t xprintStringFancy(size_t result, int a2, int a3, const char *a4, int a5)
{
  char *v7;
  uint64_t v8;
  void *v11;

  v7 = (char *)result;
  v8 = DgnPrinterMgr::smpDgnPrinterMgr;
  if (DgnPrinterMgr::smpDgnPrinterMgr)
  {
    if (*(_QWORD *)DgnPrinterMgr::smpDgnPrinterMgr == -1
      || (v11 = pthread_getspecific(*(_QWORD *)DgnPrinterMgr::smpDgnPrinterMgr)) == 0)
    {
      v11 = (void *)(v8 + 8);
    }
    return DgnPrinter::xprint((size_t)v11, v7, a2, a3, a4, a5);
  }
  else
  {
    if (a3)
      result = MrecInitModule_sdpres_sdapi();
    if (a2)
      return xalogString(v7);
  }
  return result;
}

size_t DgnPrinter::xprint(size_t this, char *a2, int a3, int a4, const char *a5, int a6)
{
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  size_t v15;
  int v16;
  unsigned int v17;

  v11 = this;
  if (a5)
  {
    this = strlen(a5);
    v12 = this;
    if (!a4)
      goto LABEL_4;
    goto LABEL_3;
  }
  v12 = 0;
  if (a4)
LABEL_3:
    this = MrecInitModule_sdpres_sdapi();
LABEL_4:
  if (a3)
  {
    this = strlen((const char *)(v11 + 212));
    v17 = this;
    v13 = *a2;
    if (*a2)
    {
      while (1)
      {
        if (*(_BYTE *)(v11 + 8404))
          goto LABEL_7;
        if (v13 != 10 && (_DWORD)this == 8190)
          break;
LABEL_8:
        v14 = *a2;
        v15 = (this + 1);
        v17 = this + 1;
        *(_BYTE *)(v11 + this + 212) = v14;
        if (*a2 == 10)
        {
          *(_BYTE *)(v11 + v15 + 212) = 0;
          xalogString((const char *)(v11 + 212));
          v15 = 0;
          v17 = 0;
          *(_BYTE *)(v11 + 8404) = 1;
        }
        v16 = *++a2;
        v13 = v16;
        this = v15;
        if (!v16)
          goto LABEL_19;
      }
      *(_BYTE *)(v11 + 8402) = 0;
      DgnPrinter::xprint((DgnPrinter *)v11, "\n[forced newline for overly long log line]\n", 1, 0, a5, 0);
      v17 = 0;
      if (!*(_BYTE *)(v11 + 8404))
      {
        LODWORD(this) = 0;
        goto LABEL_8;
      }
LABEL_7:
      DgnPrinter::addLinePrefix((DgnPrinter *)v11, (char *)(v11 + 212), 0x1FFEu, &v17, a5, v12, a6);
      *(_BYTE *)(v11 + 8404) = 0;
      LODWORD(this) = v17;
      goto LABEL_8;
    }
    LODWORD(v15) = this;
LABEL_19:
    *(_BYTE *)(v11 + v15 + 212) = 0;
  }
  return this;
}

void xprintf(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const char *v5;
  char *Buffer;
  size_t i;
  int v8;
  char *v9;
  char *v10;
  _BYTE v11[8192];
  unsigned int __size;
  char __size_4;
  char *v14;
  int v15;
  uint64_t v16;
  va_list va;

  va_start(va, a5);
  v5 = (const char *)MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v16 = *MEMORY[0x24BDAC8D0];
  DgnString::DgnString((DgnString *)&v14);
  v11[0] = 0;
  __size = 0x2000;
  __size_4 = 0;
  Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v11, 0);
  for (i = __size; ; i = __size)
  {
    v8 = vsnprintf(Buffer, i, v5, va);
    if ((v8 & 0x80000000) == 0 && v8 < i)
      break;
    Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v11, 1);
  }
  if (v15)
    v9 = v14;
  else
    v9 = &byte_209A88803;
  if (__size_4)
    v10 = v9;
  else
    v10 = v11;
  xprintStringFancy((size_t)v10, 1, 1, 0, 0);
  DgnString::~DgnString((DgnString *)&v14);
}

void sub_20988F4D8(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void xlprintf(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const char *v5;
  char *Buffer;
  size_t i;
  int v8;
  char *v9;
  char *v10;
  _BYTE v11[8192];
  unsigned int __size;
  char __size_4;
  char *v14;
  int v15;
  uint64_t v16;
  va_list va;

  va_start(va, a5);
  v5 = (const char *)MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v16 = *MEMORY[0x24BDAC8D0];
  DgnString::DgnString((DgnString *)&v14);
  v11[0] = 0;
  __size = 0x2000;
  __size_4 = 0;
  Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v11, 0);
  for (i = __size; ; i = __size)
  {
    v8 = vsnprintf(Buffer, i, v5, va);
    if ((v8 & 0x80000000) == 0 && v8 < i)
      break;
    Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v11, 1);
  }
  if (v15)
    v9 = v14;
  else
    v9 = &byte_209A88803;
  if (__size_4)
    v10 = v9;
  else
    v10 = v11;
  xprintStringFancy((size_t)v10, 1, 0, 0, 0);
  DgnString::~DgnString((DgnString *)&v14);
}

void sub_20988F630(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void xgenprintf(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, ...)
{
  int v5;
  const char *v6;
  const char *v7;
  int v8;
  int v9;
  int v10;
  char *Buffer;
  size_t i;
  int v13;
  char *v14;
  char *v15;
  _BYTE v16[8192];
  unsigned int __size;
  char __size_4;
  char *v19;
  int v20;
  uint64_t v21;
  va_list va;

  va_start(va, a5);
  v5 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v7 = v6;
  v9 = v8;
  v10 = v5;
  v21 = *MEMORY[0x24BDAC8D0];
  DgnString::DgnString((DgnString *)&v19);
  v16[0] = 0;
  __size = 0x2000;
  __size_4 = 0;
  Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v16, 0);
  for (i = __size; ; i = __size)
  {
    v13 = vsnprintf(Buffer, i, v7, va);
    if ((v13 & 0x80000000) == 0 && v13 < i)
      break;
    Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v16, 1);
  }
  if (v20)
    v14 = v19;
  else
    v14 = &byte_209A88803;
  if (__size_4)
    v15 = v14;
  else
    v15 = v16;
  xprintStringFancy((size_t)v15, v10, v9, 0, 0);
  DgnString::~DgnString((DgnString *)&v19);
}

void sub_20988F798(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

size_t xprintString(const char *a1)
{
  return xprintStringFancy((size_t)a1, 1, 1, 0, 0);
}

size_t xlprintString(const char *a1)
{
  return xprintStringFancy((size_t)a1, 1, 0, 0, 0);
}

void DgnPrinterMgr::DgnPrinterMgr(DgnPrinterMgr *this)
{
  int v2;
  pthread_key_t v3;
  pthread_key_t v4;

  *((_QWORD *)this + 1) = ClockTimer::getCurrentMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 116) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_BYTE *)this + 220) = 0;
  *((_BYTE *)this + 8412) = 1;
  DgnReadWriteLock::DgnReadWriteLock((DgnPrinterMgr *)((char *)this + 8416));
  recursive_mutex_init((_opaque_pthread_mutex_t *)((char *)this + 8848));
  *((_DWORD *)this + 2228) = 0;
  *((_QWORD *)this + 1115) = 0;
  v4 = 0;
  v2 = pthread_key_create(&v4, 0);
  v3 = v4;
  if (v2)
    v3 = -1;
  *(_QWORD *)this = v3;
  *((_BYTE *)this + 8744) = 0;
  *((_DWORD *)this + 2211) = 0;
  *((_OWORD *)this + 558) = 0u;
  *((_BYTE *)this + 8944) = 0;
}

void sub_20988F8B0(_Unwind_Exception *a1)
{
  DgnPrinter *v1;
  pthread_rwlock_t *v2;
  DgnLock *v3;

  DgnLock::~DgnLock(v3);
  DgnReadWriteLock::~DgnReadWriteLock(v2);
  DgnPrinter::~DgnPrinter(v1);
  _Unwind_Resume(a1);
}

void DgnPrinter::DgnPrinter(DgnPrinter *this)
{
  *(_QWORD *)this = ClockTimer::getCurrentMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 108) = 0;
  *((_DWORD *)this + 52) = 0;
  *((_BYTE *)this + 212) = 0;
  *((_BYTE *)this + 8404) = 1;
}

void DgnPrinterMgr::startupDgnPrinterMgr(DgnPrinterMgr *this)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = MemChunkAlloc(0x22F8uLL, 0);
  DgnPrinterMgr::DgnPrinterMgr((DgnPrinterMgr *)v1);
  DgnPrinterMgr::smpDgnPrinterMgr = v2;
}

uint64_t DgnPrinterMgr::setAsCurrentPrinter(DgnPrinterMgr *this, DgnPrinter *a2)
{
  DgnPrinterMgr *v3;
  BOOL v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (DgnPrinterMgr *)pthread_getspecific(*(_QWORD *)DgnPrinterMgr::smpDgnPrinterMgr);
  if (v3)
    v4 = v3 == this;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = pthread_self();
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 173, (uint64_t)"mrecutil/xprhelp", 2, (uint64_t)"%llu", v6, v7, v5);
  }
  return pthread_setspecific(*(_QWORD *)DgnPrinterMgr::smpDgnPrinterMgr, this);
}

void DgnPrinterMgr::printSize(DgnPrinterMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  DgnPrinter *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 183, (DgnString *)&v74);
  if (v75)
    v16 = (char *)v74;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v74);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v73 = 0;
  v74 = 0;
  v21 = (a3 + 1);
  v72 = 0;
  DgnPrinter::printSize(v22, 0xFFFFFFFFLL, v21, &v74, &v73, &v72);
  *a4 += v74;
  *a5 += v73;
  *a6 += v72;
  v23 = sizeObject((uint64_t)this + 8416, 0);
  v24 = sizeObject((uint64_t)this + 8416, 1);
  v25 = sizeObject((uint64_t)this + 8416, 3);
  v71 = a3;
  v26 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 186, (DgnString *)&v74);
  if (v75)
    v31 = (char *)v74;
  else
    v31 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, v21, &byte_209A88803, v26, v26, v31, v23, v24, v25);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += v23;
  *a5 += v24;
  *a6 += v25;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 188, (DgnString *)&v74);
  if (v75)
    v36 = (char *)v74;
  else
    v36 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v21, &byte_209A88803, v26, v26, v36, 100, 100, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 100;
  *a5 += 100;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 190, (DgnString *)&v74);
  if (v75)
    v41 = (char *)v74;
  else
    v41 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, v21, &byte_209A88803, v26, v26, v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 4;
  *a5 += 4;
  v42 = (char *)this + 8848;
  v43 = sizeObject((uint64_t)this + 8848, 0);
  v44 = sizeObject((uint64_t)v42, 1);
  v45 = sizeObject((uint64_t)v42, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 191, (DgnString *)&v74);
  if (v75)
    v50 = (char *)v74;
  else
    v50 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v21, &byte_209A88803, v26, v26, v50, v43, v44, v45);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += v43;
  *a5 += v44;
  *a6 += v45;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 193, (DgnString *)&v74);
  if (v75)
    v55 = (char *)v74;
  else
    v55 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, v21, &byte_209A88803, v26, v26, v55, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 195, (DgnString *)&v74);
  if (v75)
    v60 = (char *)v74;
  else
    v60 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, v21, &byte_209A88803, v26, v26, v60, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 197, (DgnString *)&v74);
  if (v75)
    v65 = (char *)v74;
  else
    v65 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, v21, &byte_209A88803, v26, v26, v65, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v74);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 198, (DgnString *)&v74);
  if (v75)
    v70 = (char *)v74;
  else
    v70 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v71, &byte_209A88803, (35 - v71), (35 - v71), v70, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v74);
}

void sub_20988FEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DgnPrinter::printSize(DgnPrinter *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 386, (DgnString *)&v55);
  if (v56)
    v15 = v55;
  else
    v15 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_209A88803, a3, &byte_209A88803, v15);
  DgnString::~DgnString((DgnString *)&v55);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_209A88803);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 388, (DgnString *)&v55);
  if (v56)
    v24 = v55;
  else
    v24 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v20, v21, v22, v23, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v24, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v55);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 390, (DgnString *)&v55);
  if (v56)
    v29 = v55;
  else
    v29 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v29, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v55);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 392, (DgnString *)&v55);
  if (v56)
    v34 = v55;
  else
    v34 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v34, 100, 100, 0);
  DgnString::~DgnString((DgnString *)&v55);
  *a4 += 100;
  *a5 += 100;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 394, (DgnString *)&v55);
  if (v56)
    v39 = v55;
  else
    v39 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v39, 100, 100, 0);
  DgnString::~DgnString((DgnString *)&v55);
  *a4 += 100;
  *a5 += 100;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 396, (DgnString *)&v55);
  if (v56)
    v44 = v55;
  else
    v44 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v44, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v55);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 398, (DgnString *)&v55);
  if (v56)
    v49 = v55;
  else
    v49 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v49, 0x2000, 0x2000, 0);
  DgnString::~DgnString((DgnString *)&v55);
  *a4 += 0x2000;
  *a5 += 0x2000;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 415, (DgnString *)&v55);
  if (v56)
    v54 = v55;
  else
    v54 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, a3, &byte_209A88803, (35 - a3), (35 - a3), v54, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v55);
}

void sub_209890278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

pthread_rwlock_t **DgnPrinterMgr::setLogLinePrefix(DgnPrinterMgr *this, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  pthread_rwlock_t *v8;

  v8 = (pthread_rwlock_t *)((char *)this + 8416);
  DgnReadWriteLock::acquireWrite((pthread_rwlock_t *)((char *)this + 8416));
  if (strlen(a2) >= 0x64)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 217, (uint64_t)"mrecutil/xprhelp", 1, (uint64_t)"%d", v4, v5, 100);
  v6 = strcpy((char *)this + 8744, a2);
  *((_DWORD *)this + 2211) = strlen(v6);
  return Latch<DgnReadWriteLock,WriteLatchAdapter>::~Latch(&v8);
}

void sub_209890340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<DgnReadWriteLock,WriteLatchAdapter>::~Latch((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

uint64_t DgnPrinterMgr::setShowLogLineTimeStamps(DgnPrinterMgr *this, char a2)
{
  pthread_mutex_t *v4;
  int v5;

  v4 = (pthread_mutex_t *)((char *)this + 8848);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8848));
  ++*((_DWORD *)this + 2228);
  *((_QWORD *)this + 1115) = pthread_self();
  *((_BYTE *)this + 8944) = a2;
  v5 = *((_DWORD *)this + 2228) - 1;
  *((_DWORD *)this + 2228) = v5;
  if (!v5)
    *((_QWORD *)this + 1115) = 0;
  return pthread_mutex_unlock(v4);
}

pthread_rwlock_t **DgnPrinterMgr::addLinePrefix(DgnPrinterMgr *this, char *a2, unsigned int a3, unsigned int *a4)
{
  pthread_rwlock_t *v8;

  v8 = (pthread_rwlock_t *)((char *)this + 8416);
  DgnReadWriteLock::acquireRead((pthread_rwlock_t *)((char *)this + 8416));
  if (*((_DWORD *)this + 2211))
  {
    strcpy(&a2[*a4], (const char *)this + 8744);
    *a4 += *((_DWORD *)this + 2211);
  }
  return Latch<DgnReadWriteLock,ReadLatchAdapter>::~Latch(&v8);
}

uint64_t DgnPrinterMgr::maybeSetTimeStampingBase(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  pthread_mutex_t *v4;
  int v5;

  if (!*(_QWORD *)(this + 8928))
  {
    v3 = this;
    v4 = (pthread_mutex_t *)(this + 8848);
    pthread_mutex_lock((pthread_mutex_t *)(this + 8848));
    ++*(_DWORD *)(v3 + 8912);
    *(_QWORD *)(v3 + 8920) = pthread_self();
    *(_QWORD *)(v3 + 8928) = a2;
    *(_QWORD *)(v3 + 8936) = a2;
    v5 = *(_DWORD *)(v3 + 8912) - 1;
    *(_DWORD *)(v3 + 8912) = v5;
    if (!v5)
      *(_QWORD *)(v3 + 8920) = 0;
    return pthread_mutex_unlock(v4);
  }
  return this;
}

uint64_t DgnPrinterMgr::getDeltasAndResetLast(DgnPrinterMgr *this, unint64_t *a2, unint64_t *a3, unint64_t *a4, __darwin_time_t *a5)
{
  pthread_mutex_t *v10;
  __darwin_time_t CurrentMicrosec;
  int v12;

  v10 = (pthread_mutex_t *)((char *)this + 8848);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8848));
  ++*((_DWORD *)this + 2228);
  *((_QWORD *)this + 1115) = pthread_self();
  CurrentMicrosec = ClockTimer::getCurrentMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
  DgnPrinterMgr::maybeSetTimeStampingBase(DgnPrinterMgr::smpDgnPrinterMgr, CurrentMicrosec);
  *a2 = CurrentMicrosec - *((_QWORD *)this + 1116);
  *a3 = CurrentMicrosec - *((_QWORD *)this + 1117);
  *a4 = CurrentMicrosec - *a5;
  *((_QWORD *)this + 1117) = CurrentMicrosec;
  *a5 = CurrentMicrosec;
  v12 = *((_DWORD *)this + 2228) - 1;
  *((_DWORD *)this + 2228) = v12;
  if (!v12)
    *((_QWORD *)this + 1115) = 0;
  return pthread_mutex_unlock(v10);
}

void sub_209890590(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  uint64_t v2;
  int v4;

  v4 = *(_DWORD *)(v2 + 8912) - 1;
  *(_DWORD *)(v2 + 8912) = v4;
  if (!v4)
    *(_QWORD *)(v2 + 8920) = 0;
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t logMaybeSetTimeStampingBase(uint64_t a1)
{
  return DgnPrinterMgr::maybeSetTimeStampingBase(DgnPrinterMgr::smpDgnPrinterMgr, a1);
}

pthread_rwlock_t **logSetLinePrefix(const char *a1)
{
  return DgnPrinterMgr::setLogLinePrefix((DgnPrinterMgr *)DgnPrinterMgr::smpDgnPrinterMgr, a1);
}

uint64_t logSetShowLineTimeStamps(char a1)
{
  return DgnPrinterMgr::setShowLogLineTimeStamps((DgnPrinterMgr *)DgnPrinterMgr::smpDgnPrinterMgr, a1);
}

char *DgnPrinter::addLinePrefix(DgnPrinter *this, char *a2, unsigned int a3, unsigned int *a4, const char *a5, int a6, int a7)
{
  char *result;
  char *v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  DgnPrinterMgr::addLinePrefix((DgnPrinterMgr *)DgnPrinterMgr::smpDgnPrinterMgr, a2, a3, a4);
  if (*((_DWORD *)this + 52))
  {
    strcpy(&a2[*a4], (const char *)this + 108);
    *a4 += *((_DWORD *)this + 52);
  }
  result = (char *)DgnPrinterMgr::smpDgnPrinterMgr;
  if (!*(_BYTE *)(DgnPrinterMgr::smpDgnPrinterMgr + 8944))
  {
    v17 = *a4;
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v19 = 0;
  v20 = 0;
  v18 = 0;
  DgnPrinterMgr::getDeltasAndResetLast((DgnPrinterMgr *)DgnPrinterMgr::smpDgnPrinterMgr, &v20, &v19, &v18, (__darwin_time_t *)this);
  v15 = (char *)this + 8;
  snprintf(v15, 0x64uLL, "[%llu.%06llu (mrinc %llu.%06llu) (thinc %llu.%06llu)] ", v20 / 0xF4240, v20 % 0xF4240, v19 / 0xF4240, v19 % 0xF4240, v18 / 0xF4240, v18 % 0xF4240);
  v16 = strlen(v15);
  result = strcpy(&a2[*a4], v15);
  v17 = *a4 + v16;
  *a4 = v17;
  if (a6)
  {
LABEL_5:
    result = strcpy(&a2[v17], a5);
    v17 = *a4 + a6;
    *a4 = v17;
  }
LABEL_6:
  if (a7 && a3 - v17 >= a7 + 2)
  {
    do
    {
      a2[v17] = 32;
      v17 = *a4 + 1;
      *a4 = v17;
      --a7;
    }
    while (a7);
  }
  a2[v17] = 0;
  return result;
}

void DgnPrinter::~DgnPrinter(DgnPrinter *this)
{
  if (!*((_BYTE *)this + 8404))
    DgnPrinter::xprint((size_t)this, "\n[flushed previous partial line]\n", 1, 0, 0, 0);
  *((_BYTE *)this + 212) = 0;
}

char *DgnPrinter::setInstancePrefix(DgnPrinter *this, const char *__s)
{
  unsigned int v4;
  int v5;

  v4 = strlen(__s);
  if (v4 >= 0x63)
    v5 = 99;
  else
    v5 = v4;
  *((_DWORD *)this + 52) = v5;
  return strcpy((char *)this + 108, __s);
}

pthread_rwlock_t **Latch<DgnReadWriteLock,WriteLatchAdapter>::~Latch(pthread_rwlock_t **a1)
{
  pthread_rwlock_t *v2;

  v2 = *a1;
  if (v2)
  {
    DgnReadWriteLock::releaseRead(v2);
    *a1 = 0;
  }
  return a1;
}

pthread_rwlock_t **Latch<DgnReadWriteLock,ReadLatchAdapter>::~Latch(pthread_rwlock_t **a1)
{
  pthread_rwlock_t *v2;

  v2 = *a1;
  if (v2)
  {
    DgnReadWriteLock::releaseRead(v2);
    *a1 = 0;
  }
  return a1;
}

void TLattProcParamManager::TLattProcParamManager(TLattProcParamManager *this, TLocaleInfo *a2)
{
  _QWORD *v3;
  TParam *v4;

  TParamManager::TParamManager(this, 0, a2);
  *v3 = &unk_24C217520;
  v4 = (TParam *)(v3 + 18);
  TIntParam::TIntParam((TIntParam *)(v3 + 18), (uint64_t)"C", (uint64_t)"I", 256, 0, 0x7FFFFFFF, 0, (uint64_t)"1", (uint64_t)&unk_209A6FB38);
  TParamManager::add(this, v4);
}

void sub_209890920(_Unwind_Exception *a1)
{
  TParamManager *v1;
  void **v2;

  TParam::~TParam(v2);
  TParamManager::~TParamManager(v1);
  _Unwind_Resume(a1);
}

uint64_t TLatticeProcessor::TLatticeProcessor(uint64_t result, uint64_t a2, int a3)
{
  *(_QWORD *)result = off_24C215D80;
  *(_QWORD *)(result + 8) = -1;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 32) = result + 40;
  *(_QWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 24) = a3;
  if (a3)
    ++*(_DWORD *)(a2 + 360);
  return result;
}

_QWORD *TRegisterable<TLatticeProcessor>::~TRegisterable(_QWORD *a1)
{
  uint64_t *Registry;
  uint64_t v3;

  *a1 = &unk_24C214970;
  if (a1[1] != -1)
  {
    Registry = (uint64_t *)TRegisterable<TLatticeProcessor>::getRegistry();
    v3 = *Registry;
    *(_QWORD *)(Registry[1] + 8 * a1[1] - 8) = 0;
    *Registry = v3 - 1;
  }
  return a1;
}

void TLatticeProcessor::~TLatticeProcessor(TLatticeProcessor *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24C215D80;
  v2 = *((_QWORD *)this + 2);
  if (v2 && *((_BYTE *)this + 24))
    --*(_DWORD *)(v2 + 360);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  TRegisterable<TLatticeProcessor>::~TRegisterable(this);
}

void TLatticeProcessor::clearLoadedLmData(TLatticeProcessor *this, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  _BYTE v24[96];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = (char *)*((_QWORD *)this + 4);
  v5 = (char *)this + 40;
  if (v4 == (char *)this + 40)
  {
    v8 = 0;
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      SDVoc_GetInfo(*((_QWORD *)v4 + 4), (uint64_t)v24);
      v9 = (char *)*((_QWORD *)v4 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char *)*((_QWORD *)v4 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v4;
          v4 = v10;
        }
        while (!v11);
      }
      v6 += v27;
      v7 += v26;
      v8 += v25;
      v4 = v10;
    }
    while (v10 != v5);
  }
  v12 = v7 + v8;
  if (v12 + v6 > a2 << 20)
  {
    v13 = a2 << 20;
    v14 = (char *)*((_QWORD *)this + 4);
    if (v14 != v5)
    {
      do
      {
        SDLm_ClearLoadedData(*((_QWORD *)v14 + 4), 4uLL);
        v15 = (char *)*((_QWORD *)v14 + 1);
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = *(char **)v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (char *)*((_QWORD *)v14 + 2);
            v11 = *(_QWORD *)v16 == (_QWORD)v14;
            v14 = v16;
          }
          while (!v11);
        }
        v14 = v16;
      }
      while (v16 != v5);
    }
    if (v12 > v13 >> 1)
    {
      v17 = v13 >> 1;
      v18 = (char *)*((_QWORD *)this + 4);
      if (v18 != v5)
      {
        do
        {
          SDLm_ClearLoadedData(*((_QWORD *)v18 + 4), 3uLL);
          v19 = (char *)*((_QWORD *)v18 + 1);
          if (v19)
          {
            do
            {
              v20 = v19;
              v19 = *(char **)v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = (char *)*((_QWORD *)v18 + 2);
              v11 = *(_QWORD *)v20 == (_QWORD)v18;
              v18 = v20;
            }
            while (!v11);
          }
          v18 = v20;
        }
        while (v20 != v5);
      }
      if (v8 > v17)
      {
        v21 = (char *)*((_QWORD *)this + 4);
        if (v21 != v5)
        {
          do
          {
            SDLm_ClearLoadedData(*((_QWORD *)v21 + 4), 2uLL);
            v22 = (char *)*((_QWORD *)v21 + 1);
            if (v22)
            {
              do
              {
                v23 = v22;
                v22 = *(char **)v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                v23 = (char *)*((_QWORD *)v21 + 2);
                v11 = *(_QWORD *)v23 == (_QWORD)v21;
                v21 = v23;
              }
              while (!v11);
            }
            v21 = v23;
          }
          while (v23 != v5);
        }
      }
    }
  }
}

uint64_t TLatticeProcessor::combineMrecData(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 36) += *(_DWORD *)(a2 + 36);
  v3 = *(_DWORD *)(a2 + 48) - a3 + *(_DWORD *)(result + 48);
  *(_DWORD *)(result + 44) += *(_DWORD *)(a2 + 44);
  *(_DWORD *)(result + 48) = v3;
  *(int32x2_t *)(result + 52) = vadd_s32(*(int32x2_t *)(result + 52), *(int32x2_t *)(a2 + 52));
  *(_DWORD *)(result + 60) += *(_DWORD *)(a2 + 60);
  *(_QWORD *)(result + 64) = 0xBFF0000000000000;
  v4 = *(_DWORD *)(result + 76);
  if (!v4)
  {
    v6 = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(result + 72) = *(_DWORD *)(a2 + 72);
    goto LABEL_6;
  }
  v5 = *(_DWORD *)(a2 + 76);
  if (v5 && *(_DWORD *)(result + 72) + v4 == *(_DWORD *)(a2 + 72))
  {
    v6 = v5 + v4;
LABEL_6:
    *(_DWORD *)(result + 76) = v6;
  }
  if (*(_DWORD *)(result + 80) && *(_DWORD *)(a2 + 80))
  {
    v7 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(result + 84) += *(_DWORD *)(a2 + 84);
    *(_DWORD *)(result + 88) = v7;
    *(_DWORD *)(result + 92) += *(_DWORD *)(a2 + 92) - a3;
  }
  else
  {
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
  }
  return result;
}

void TRegisterable<TLatticeProcessor>::~TRegisterable(_QWORD *a1)
{
  TRegisterable<TLatticeProcessor>::~TRegisterable(a1);
  JUMPOUT(0x20BD149A8);
}

void CTFTMgr::~CTFTMgr(CTFTMgr *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 240);
  DgnArray<LinearTransform>::releaseAll((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 200);
  DgnArray<LinearTransform>::releaseAll((uint64_t)this + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160);
  DgnArray<LinearTransform>::releaseAll((uint64_t)this + 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120);
  DgnArray<LinearTransform>::releaseAll((uint64_t)this + 104);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80);
  DgnArray<LinearTransform>::releaseAll((uint64_t)this + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24);
}

void CTFTMgr::printSize(CTFTMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  void *v192;
  int v193;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 342, (DgnString *)&v192);
  if (v193)
    v16 = v192;
  else
    v16 = &unk_209A6FB78;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6FB78, a3, &unk_209A6FB78, v16);
  DgnString::~DgnString((DgnString *)&v192);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6FB78);
  v21 = (a3 + 1);
  v191 = a3;
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v27 = v192;
  else
    v27 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, v21, &unk_209A6FB78, v22, v22, v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  v28 = sizeObject((uint64_t)this + 4, 0);
  v29 = sizeObject((uint64_t)this + 4, 1);
  v30 = sizeObject((uint64_t)this + 4, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v35 = v192;
  else
    v35 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, v21, &unk_209A6FB78, v22, v22, v35, v28, v29, v30);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v28;
  *a5 += v29;
  *a6 += v30;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v40 = v192;
  else
    v40 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, v21, &unk_209A6FB78, v22, v22, v40, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v45 = v192;
  else
    v45 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v41, v42, v43, v44, v21, &unk_209A6FB78, v22, v22, v45, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v50 = v192;
  else
    v50 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v21, &unk_209A6FB78, v22, v22, v50, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v51 = 12;
  else
    v51 = 16;
  v52 = *((unsigned int *)this + 8);
  v53 = *((_DWORD *)this + 9);
  if (v53 >= v52)
  {
    v54 = 0;
    if ((int)v52 > 0)
      v51 += 4 * (v52 - 1) + 4;
    v55 = v51 + 4 * (v53 - v52);
  }
  else
  {
    v54 = 4 * v52;
    v55 = v51;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v60 = v192;
  else
    v60 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, v21, &unk_209A6FB78, v22, v22, v60, v55, v51, v54);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v55;
  *a5 += v51;
  *a6 += v54;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v61 = 12;
  else
    v61 = 16;
  v62 = *((unsigned int *)this + 12);
  v63 = *((_DWORD *)this + 13);
  if (v63 >= v62)
  {
    v64 = 0;
    if ((int)v62 > 0)
      v61 += 4 * (v62 - 1) + 4;
    v65 = v61 + 4 * (v63 - v62);
  }
  else
  {
    v64 = 4 * v62;
    v65 = v61;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v70 = v192;
  else
    v70 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v21, &unk_209A6FB78, v22, v22, v70, v65, v61, v64);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v65;
  *a5 += v61;
  *a6 += v64;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v75 = v192;
  else
    v75 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, v21, &unk_209A6FB78, v22, v22, v75, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  v76 = sizeObject<LinearTransform>((uint64_t)this + 64, 0);
  v77 = sizeObject<LinearTransform>((uint64_t)this + 64, 1);
  v78 = sizeObject<LinearTransform>((uint64_t)this + 64, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v83 = v192;
  else
    v83 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, v21, &unk_209A6FB78, v22, v22, v83, v76, v77, v78);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v76;
  *a5 += v77;
  *a6 += v78;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v84 = 12;
  else
    v84 = 16;
  v85 = *((unsigned int *)this + 22);
  v86 = *((_DWORD *)this + 23);
  if (v86 >= v85)
  {
    v87 = 0;
    if ((int)v85 > 0)
      v84 += 4 * (v85 - 1) + 4;
    v88 = v84 + 4 * (v86 - v85);
  }
  else
  {
    v87 = 4 * v85;
    v88 = v84;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v93 = v192;
  else
    v93 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v89, v90, v91, v92, v21, &unk_209A6FB78, v22, v22, v93, v88, v84, v87);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v88;
  *a5 += v84;
  *a6 += v87;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v98 = v192;
  else
    v98 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v21, &unk_209A6FB78, v22, v22, v98, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  v99 = sizeObject<LinearTransform>((uint64_t)this + 104, 0);
  v100 = sizeObject<LinearTransform>((uint64_t)this + 104, 1);
  v101 = sizeObject<LinearTransform>((uint64_t)this + 104, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v106 = v192;
  else
    v106 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v21, &unk_209A6FB78, v22, v22, v106, v99, v100, v101);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v99;
  *a5 += v100;
  *a6 += v101;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v107 = 12;
  else
    v107 = 16;
  v108 = *((unsigned int *)this + 32);
  v109 = *((_DWORD *)this + 33);
  if (v109 >= v108)
  {
    v110 = 0;
    if ((int)v108 > 0)
      v107 += 4 * (v108 - 1) + 4;
    v111 = v107 + 4 * (v109 - v108);
  }
  else
  {
    v110 = 4 * v108;
    v111 = v107;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v116 = v192;
  else
    v116 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, v21, &unk_209A6FB78, v22, v22, v116, v111, v107, v110);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v111;
  *a5 += v107;
  *a6 += v110;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v121 = v192;
  else
    v121 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v117, v118, v119, v120, v21, &unk_209A6FB78, v22, v22, v121, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  v122 = sizeObject<LinearTransform>((uint64_t)this + 144, 0);
  v123 = sizeObject<LinearTransform>((uint64_t)this + 144, 1);
  v124 = sizeObject<LinearTransform>((uint64_t)this + 144, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v129 = v192;
  else
    v129 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v125, v126, v127, v128, v21, &unk_209A6FB78, v22, v22, v129, v122, v123, v124);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v122;
  *a5 += v123;
  *a6 += v124;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v130 = 12;
  else
    v130 = 16;
  v131 = *((unsigned int *)this + 42);
  v132 = *((_DWORD *)this + 43);
  if (v132 >= v131)
  {
    v133 = 0;
    if ((int)v131 > 0)
      v130 += 4 * (v131 - 1) + 4;
    v134 = v130 + 4 * (v132 - v131);
  }
  else
  {
    v133 = 4 * v131;
    v134 = v130;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v139 = v192;
  else
    v139 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v21, &unk_209A6FB78, v22, v22, v139, v134, v130, v133);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v134;
  *a5 += v130;
  *a6 += v133;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v144 = v192;
  else
    v144 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v140, v141, v142, v143, v21, &unk_209A6FB78, v22, v22, v144, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  v145 = sizeObject<LinearTransform>((uint64_t)this + 184, 0);
  v146 = sizeObject<LinearTransform>((uint64_t)this + 184, 1);
  v147 = sizeObject<LinearTransform>((uint64_t)this + 184, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v152 = v192;
  else
    v152 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v148, v149, v150, v151, v21, &unk_209A6FB78, v22, v22, v152, v145, v146, v147);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v145;
  *a5 += v146;
  *a6 += v147;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v153 = 12;
  else
    v153 = 16;
  v154 = *((unsigned int *)this + 52);
  v155 = *((_DWORD *)this + 53);
  if (v155 >= v154)
  {
    v156 = 0;
    if ((int)v154 > 0)
      v153 += 4 * (v154 - 1) + 4;
    v157 = v153 + 4 * (v155 - v154);
  }
  else
  {
    v156 = 4 * v154;
    v157 = v153;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v162 = v192;
  else
    v162 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v158, v159, v160, v161, v21, &unk_209A6FB78, v22, v22, v162, v157, v153, v156);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v157;
  *a5 += v153;
  *a6 += v156;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v167 = v192;
  else
    v167 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v163, v164, v165, v166, v21, &unk_209A6FB78, v22, v22, v167, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  v168 = sizeObject<LinearTransform>((uint64_t)this + 224, 0);
  v169 = sizeObject<LinearTransform>((uint64_t)this + 224, 1);
  v170 = sizeObject<LinearTransform>((uint64_t)this + 224, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v175 = v192;
  else
    v175 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v171, v172, v173, v174, v21, &unk_209A6FB78, v22, v22, v175, v168, v169, v170);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v168;
  *a5 += v169;
  *a6 += v170;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v176 = 12;
  else
    v176 = 16;
  v177 = *((unsigned int *)this + 62);
  v178 = *((_DWORD *)this + 63);
  if (v178 >= v177)
  {
    v179 = 0;
    if ((int)v177 > 0)
      v176 += 4 * (v177 - 1) + 4;
    v180 = v176 + 4 * (v178 - v177);
  }
  else
  {
    v179 = 4 * v177;
    v180 = v176;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193)
    v185 = v192;
  else
    v185 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v181, v182, v183, v184, v21, &unk_209A6FB78, v22, v22, v185, v180, v176, v179);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v180;
  *a5 += v176;
  *a6 += v179;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 345, (DgnString *)&v192);
  if (v193)
    v190 = v192;
  else
    v190 = &unk_209A6FB78;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v186, v187, v188, v189, v191, &unk_209A6FB78, (35 - v191), (35 - v191), v190, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v192);
}

void sub_209891B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<LinearTransform>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[72];

  LinearTransform::LinearTransform((LinearTransform *)v10);
  v4 = LinearTransform::sizeObject((uint64_t)v10, 2);
  if (a2 == 3)
  {
    v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v5 = 12;
    else
      v5 = 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = v4;
      v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        v8 = v7 + 1;
        do
          v5 += LinearTransform::sizeObject(*(_QWORD *)a1 + 72 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2)
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  LinearTransform::~LinearTransform((LinearTransform *)v10);
  return v5;
}

void sub_209891CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  LinearTransform::~LinearTransform((LinearTransform *)va);
  _Unwind_Resume(a1);
}

void CTFTMgr::saveCTFT(CTFTMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v13;
  int v14;
  int v15;
  DgnStream *v16;
  uint64_t CurrentSubDirComponents;
  int v18;

  v13 = (int *)((char *)this + 56);
  v14 = *((_DWORD *)this + 8);
  if (*((_DWORD *)this + 14))
  {
    if (v14)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v14)
LABEL_3:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 408, (uint64_t)"sigproc/ctftmgr", 20, (uint64_t)"%s", a7, a8, (char)&errStr_sigproc_ctftmgr_E_CTFT_SAVE);
LABEL_4:
  v15 = *((_DWORD *)this + 12);
  if (*((_DWORD *)this + 34))
  {
    if (v15)
      goto LABEL_6;
LABEL_11:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 411, (uint64_t)"sigproc/ctftmgr", 20, (uint64_t)"%s", a7, a8, (char)&errStr_sigproc_ctftmgr_E_CTFT_SAVE);
    if (a4)
      goto LABEL_7;
    goto LABEL_12;
  }
  if (v15)
    goto LABEL_11;
LABEL_6:
  if (a4)
  {
LABEL_7:
    CTFTMgr::saveCTFTText(this, a2, a5);
    return;
  }
LABEL_12:
  v16 = OpenAndWriteMrecHeader((uint64_t)a2, 0x23u, a5, "MRCTFTM!", 22, 7);
  v18 = 0;
  writeObject((uint64_t)v16, (int *)this, &v18);
  writeObject((uint64_t)v16, (int *)this + 1, &v18);
  writeObject((uint64_t)v16, (int *)this + 2, &v18);
  writeObject((uint64_t)v16, (int *)this + 3, &v18);
  writeObject<unsigned int>((uint64_t)v16, (uint64_t)this + 24, &v18);
  writeObject<unsigned int>((uint64_t)v16, (uint64_t)this + 40, &v18);
  writeObject((uint64_t)v16, v13, &v18);
  writeObject<LinearTransform>(v16, (uint64_t)this + 64, (unsigned int *)&v18);
  writeObject<unsigned int>((uint64_t)v16, (uint64_t)this + 80, &v18);
  writeObject((uint64_t)v16, (int *)this + 24, &v18);
  writeObject<LinearTransform>(v16, (uint64_t)this + 104, (unsigned int *)&v18);
  writeObject<unsigned int>((uint64_t)v16, (uint64_t)this + 120, &v18);
  writeObject((uint64_t)v16, (int *)this + 34, &v18);
  writeObject<LinearTransform>(v16, (uint64_t)this + 144, (unsigned int *)&v18);
  writeObject<unsigned int>((uint64_t)v16, (uint64_t)this + 160, &v18);
  writeObject((uint64_t)v16, (int *)this + 44, &v18);
  writeObject<LinearTransform>(v16, (uint64_t)this + 184, (unsigned int *)&v18);
  writeObject<unsigned int>((uint64_t)v16, (uint64_t)this + 200, &v18);
  writeObjectChecksum((uint64_t)v16, &v18);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x23u, v18);
  if (v16)
  {
    (**(void (***)(DgnStream *))v16)(v16);
    MemChunkFree(v16, 0);
  }
}

void CTFTMgr::saveCTFTText(CTFTMgr *this, DFile *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  const char *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  const char *v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  const char *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  const char *v103;
  int v104;
  void *v105[2];
  _DWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110[35];

  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v110);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v110, (uint64_t)a2, 0x24u, a3);
  v108 = 0;
  v109 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v110, sLTF_Versions, (uint64_t)&v108, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v110, "LinearTransformFeatures", (_QWORD *)(v108 + 8 * (v109 - 1)));
  v106 = 0;
  v107 = 0;
  v105[0] = 0;
  v11 = realloc_array(0, v105, 0x14uLL, 0, 0, 1);
  v106 = v105[0];
  LODWORD(v107) = 5;
  HIDWORD(v107) = v11 >> 2;
  DgnArray<DgnString>::DgnArray(v105, 5);
  DgnString::operator=((DgnString *)v105[0], "TableName");
  *v106 = 0;
  DgnString::operator=((DgnString *)((char *)v105[0] + 16), "UnsValue1");
  v106[1] = 3;
  DgnString::operator=((DgnString *)((char *)v105[0] + 32), "IntValue1");
  v106[2] = 1;
  DgnString::operator=((DgnString *)((char *)v105[0] + 48), "IntValue2");
  v106[3] = 1;
  DgnString::operator=((DgnString *)((char *)v105[0] + 64), "IntValue3");
  v106[4] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v110, (uint64_t)&v106, (uint64_t)v105);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "ModelFeatureDim", *(unsigned int *)this);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "TransformIntScale", 1 << *((_DWORD *)this + 1));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "NumberOfSpeakerTransforms", *((unsigned int *)this + 14));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "NumberOfChannelTransforms", *((unsigned int *)this + 34));
  if (*((_DWORD *)this + 14))
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "NumberOfHierScorerSpeakerTransforms", *((unsigned int *)this + 24));
  if (*((_DWORD *)this + 34))
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "NumberOfHierScorerChannelTransforms", *((unsigned int *)this + 44));
  DgnString::DgnString((DgnString *)&v103, "None");
  if (*((_DWORD *)this + 14))
  {
    v12 = *((unsigned int *)this + 8);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = (int *)*((_QWORD *)this + 3);
      do
      {
        v15 = *v14++;
        if (v15 != -1)
          ++v13;
        --v12;
      }
      while (v12);
    }
    else
    {
      v13 = 0;
    }
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "NumberOfSpeakerTransformationClasses", v13);
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "SpeakerTransformDim", *((unsigned int *)this + 2));
    v17 = *((_QWORD *)this + 8);
    v18 = *(_DWORD *)(v17 + 32);
    if (v18)
    {
      if (*(_DWORD *)(*(_QWORD *)(v17 + 24) + 8) != 1 || v18 == 1)
        v20 = "Full";
      else
        v20 = "Diagonal";
      DgnString::operator=((DgnString *)&v103, v20);
    }
    if (v104)
      v21 = v103;
    else
      v21 = (const char *)&unk_209A6FB78;
    DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v110, "SpeakerTransformMatrixType", v21);
    v22 = *((_QWORD *)this + 8);
    v101 = 0;
    v102 = 0;
    DgnPrimArray<int>::copyArraySlice((unint64_t)&v101, (uint64_t *)(v22 + 8), 0, *(_DWORD *)(v22 + 16));
    v16 = v102 != 0;
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v101);
    DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v110, "HasSpeakerTransformOffsets", v16);
  }
  else
  {
    v16 = 0;
  }
  DgnString::DgnString((DgnString *)&v101, "None");
  if (*((_DWORD *)this + 34))
  {
    v23 = *((unsigned int *)this + 12);
    if ((_DWORD)v23)
    {
      v24 = 0;
      v25 = (int *)*((_QWORD *)this + 5);
      do
      {
        v26 = *v25++;
        if (v26 != -1)
          ++v24;
        --v23;
      }
      while (v23);
    }
    else
    {
      v24 = 0;
    }
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "NumberOfChannelTransformationClasses", v24);
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "ChannelTransformDim", *((unsigned int *)this + 3));
    v28 = *((_QWORD *)this + 18);
    v29 = *(_DWORD *)(v28 + 32);
    if (v29)
    {
      if (*(_DWORD *)(*(_QWORD *)(v28 + 24) + 8) != 1 || v29 == 1)
        v31 = "Full";
      else
        v31 = "Diagonal";
      DgnString::operator=((DgnString *)&v101, v31);
    }
    if ((_DWORD)v102)
      v32 = v101;
    else
      v32 = (const char *)&unk_209A6FB78;
    DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v110, "ChannelTransformMatrixType", v32);
    v33 = *((_QWORD *)this + 18);
    v99 = 0;
    v100 = 0;
    DgnPrimArray<int>::copyArraySlice((unint64_t)&v99, (uint64_t *)(v33 + 8), 0, *(_DWORD *)(v33 + 16));
    v27 = v100 != 0;
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v99);
    DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v110, "HasChannelTransformOffsets", v27);
  }
  else
  {
    v27 = 0;
  }
  if (v104)
    v34 = v103;
  else
    v34 = (const char *)&unk_209A6FB78;
  v35 = strcmp(v34, "None");
  LODWORD(v40) = *((_DWORD *)this + 14);
  if (v35)
  {
    v41 = strcmp(v34, "Diagonal");
    if (!(_DWORD)v40)
      goto LABEL_61;
    v42 = v41;
    v43 = 0;
    v44 = 24;
    do
    {
      writeIntMatrix((DgnTextFileWriter *)v110, "SpeakerTransAccMatrix", v42 == 0, (_QWORD *)(*((_QWORD *)this + 8) + v44), v43++, *((_DWORD *)this + 2), *((_DWORD *)this + 2));
      v40 = *((unsigned int *)this + 14);
      v44 += 72;
    }
    while (v43 < v40);
  }
  if (v16)
  {
    if (!(_DWORD)v40)
      goto LABEL_61;
    v45 = 0;
    v46 = 16;
    do
    {
      v47 = *((_QWORD *)this + 8);
      v99 = 0;
      v100 = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)&v99, (uint64_t *)(v47 + v46 - 8), 0, *(_DWORD *)(v47 + v46));
      writeIntOffset((DgnTextFileWriter *)v110, "SpeakerTransAccOffset", &v99, v45, *((_DWORD *)this + 2));
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v99);
      ++v45;
      v40 = *((unsigned int *)this + 14);
      v46 += 72;
    }
    while (v45 < v40);
  }
  if ((_DWORD)v40)
  {
    v48 = 0;
    do
    {
      writeLogDeterminant((DgnTextFileWriter *)v110, "SpeakerTransAccLogDeterminant", *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v48), v48, v36, v37, v38, v39, v98);
      ++v48;
    }
    while (v48 < *((unsigned int *)this + 14));
  }
LABEL_61:
  v49 = *((unsigned int *)this + 8);
  if ((_DWORD)v49)
  {
    v50 = 0;
    v51 = 0;
    do
    {
      if (*(_DWORD *)(*((_QWORD *)this + 3) + 4 * v50) != -1)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v110, 0, "SpeakerClassNodeIdToTransformMap");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v110, 1u, v51);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v110, 2u, v50);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v110, 3u, *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v50));
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v110, 4u, 0);
        DgnTextFileWriter::writeNextLine(v110);
        ++v51;
        v49 = *((unsigned int *)this + 8);
      }
      ++v50;
    }
    while (v50 < v49);
  }
  if (v104)
    v52 = v103;
  else
    v52 = (const char *)&unk_209A6FB78;
  if (strcmp(v52, "None"))
  {
    v57 = strcmp(v52, "Diagonal");
    if (*((_DWORD *)this + 24))
    {
      v58 = v57;
      v59 = 0;
      v60 = 24;
      do
      {
        writeIntMatrix((DgnTextFileWriter *)v110, "HierScorerSpeakerTransAccMatrix", v58 == 0, (_QWORD *)(*((_QWORD *)this + 13) + v60), v59++, *((_DWORD *)this + 2), *((_DWORD *)this + 2));
        v60 += 72;
      }
      while (v59 < *((unsigned int *)this + 24));
    }
  }
  LODWORD(v61) = *((_DWORD *)this + 24);
  if (v16)
  {
    if (!(_DWORD)v61)
      goto LABEL_80;
    v62 = 0;
    v63 = 16;
    do
    {
      v64 = *((_QWORD *)this + 13);
      v99 = 0;
      v100 = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)&v99, (uint64_t *)(v64 + v63 - 8), 0, *(_DWORD *)(v64 + v63));
      writeIntOffset((DgnTextFileWriter *)v110, "HierScorerSpeakerTransAccOffset", &v99, v62, *((_DWORD *)this + 2));
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v99);
      ++v62;
      v61 = *((unsigned int *)this + 24);
      v63 += 72;
    }
    while (v62 < v61);
  }
  if ((_DWORD)v61)
  {
    v65 = 0;
    do
    {
      writeLogDeterminant((DgnTextFileWriter *)v110, "HierScorerSpeakerTransAccLogDeterminant", *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v65), v65, v53, v54, v55, v56, v98);
      ++v65;
    }
    while (v65 < *((unsigned int *)this + 24));
  }
LABEL_80:
  if ((_DWORD)v102)
    v66 = v101;
  else
    v66 = (const char *)&unk_209A6FB78;
  v67 = strcmp(v66, "None");
  LODWORD(v72) = *((_DWORD *)this + 34);
  if (v67)
  {
    v73 = strcmp(v66, "Diagonal");
    if (!(_DWORD)v72)
      goto LABEL_94;
    v74 = v73;
    v75 = 0;
    v76 = 24;
    do
    {
      writeIntMatrix((DgnTextFileWriter *)v110, "ChannelTransAccMatrix", v74 == 0, (_QWORD *)(*((_QWORD *)this + 18) + v76), v75++, *((_DWORD *)this + 3), *((_DWORD *)this + 3));
      v72 = *((unsigned int *)this + 34);
      v76 += 72;
    }
    while (v75 < v72);
  }
  if (v27)
  {
    if (!(_DWORD)v72)
      goto LABEL_94;
    v77 = 0;
    v78 = 16;
    do
    {
      v79 = *((_QWORD *)this + 18);
      v99 = 0;
      v100 = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)&v99, (uint64_t *)(v79 + v78 - 8), 0, *(_DWORD *)(v79 + v78));
      writeIntOffset((DgnTextFileWriter *)v110, "ChannelTransAccOffset", &v99, v77, *((_DWORD *)this + 3));
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v99);
      ++v77;
      v72 = *((unsigned int *)this + 34);
      v78 += 72;
    }
    while (v77 < v72);
  }
  if ((_DWORD)v72)
  {
    v80 = 0;
    do
    {
      writeLogDeterminant((DgnTextFileWriter *)v110, "ChannelTransAccLogDeterminant", *(_DWORD *)(*((_QWORD *)this + 20) + 4 * v80), v80, v68, v69, v70, v71, v98);
      ++v80;
    }
    while (v80 < *((unsigned int *)this + 34));
  }
LABEL_94:
  v81 = *((unsigned int *)this + 12);
  if ((_DWORD)v81)
  {
    v82 = 0;
    v83 = 0;
    do
    {
      if (*(_DWORD *)(*((_QWORD *)this + 5) + 4 * v82) != -1)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v110, 0, "ChannelClassNodeIdToTransformMap");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v110, 1u, v83);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v110, 2u, v82);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v110, 3u, *(_DWORD *)(*((_QWORD *)this + 5) + 4 * v82));
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v110, 4u, 0);
        DgnTextFileWriter::writeNextLine(v110);
        ++v83;
        v81 = *((unsigned int *)this + 12);
      }
      ++v82;
    }
    while (v82 < v81);
  }
  if ((_DWORD)v102)
    v84 = v101;
  else
    v84 = (const char *)&unk_209A6FB78;
  if (strcmp(v84, "None"))
  {
    v89 = strcmp(v84, "Diagonal");
    if (*((_DWORD *)this + 44))
    {
      v90 = v89;
      v91 = 0;
      v92 = 24;
      do
      {
        writeIntMatrix((DgnTextFileWriter *)v110, "HierScorerChannelTransAccMatrix", v90 == 0, (_QWORD *)(*((_QWORD *)this + 23) + v92), v91++, *((_DWORD *)this + 3), *((_DWORD *)this + 3));
        v92 += 72;
      }
      while (v91 < *((unsigned int *)this + 44));
    }
  }
  LODWORD(v93) = *((_DWORD *)this + 44);
  if (v27)
  {
    if (!(_DWORD)v93)
      goto LABEL_113;
    v94 = 0;
    v95 = 16;
    do
    {
      v96 = *((_QWORD *)this + 23);
      v99 = 0;
      v100 = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)&v99, (uint64_t *)(v96 + v95 - 8), 0, *(_DWORD *)(v96 + v95));
      writeIntOffset((DgnTextFileWriter *)v110, "HierScorerChannelTransAccOffset", &v99, v94, *((_DWORD *)this + 3));
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v99);
      ++v94;
      v93 = *((unsigned int *)this + 44);
      v95 += 72;
    }
    while (v94 < v93);
  }
  if ((_DWORD)v93)
  {
    v97 = 0;
    do
    {
      writeLogDeterminant((DgnTextFileWriter *)v110, "HierScorerChannelTransAccLogDeterminant", *(_DWORD *)(*((_QWORD *)this + 25) + 4 * v97), v97, v85, v86, v87, v88, v98);
      ++v97;
    }
    while (v97 < *((unsigned int *)this + 44));
  }
LABEL_113:
  DgnString::~DgnString((DgnString *)&v101);
  DgnString::~DgnString((DgnString *)&v103);
  DgnArray<DgnString>::releaseAll((uint64_t)v105);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v106);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v108);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v110);
}

void sub_2098929D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  uint64_t v14;
  va_list va3;
  uint64_t v16;
  uint64_t v17;
  va_list va4;
  uint64_t v19;
  va_list va5;

  va_start(va5, a4);
  va_start(va4, a4);
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v14 = va_arg(va4, _QWORD);
  v16 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v17 = va_arg(va5, _QWORD);
  v19 = va_arg(va5, _QWORD);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnArray<DgnString>::releaseAll((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va4);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va5);
  _Unwind_Resume(a1);
}

uint64_t writeObject<LinearTransform>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject((uint64_t)a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = LinearTransform::writeObject((LinearTransform *)(*(_QWORD *)a2 + v7), a1, a3);
      ++v8;
      v7 += 72;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void writeIntMatrix(DgnTextFileWriter *this, char *a2, int a3, _QWORD *a4, int a5, unsigned int a6, int a7)
{
  unsigned int i;
  uint64_t v14;
  uint64_t v15;

  if (a6)
  {
    for (i = 0; i < a6; ++i)
    {
      if (a7)
      {
        v14 = 0;
        do
        {
          DgnTextFileWriter::setLineFieldValue(this, 0, a2);
          DgnTextFileWriter::setLineFieldUnsignedValue(this, 1u, a5);
          if (a3)
          {
            i = v14;
            v15 = 0;
          }
          else
          {
            v15 = v14;
          }
          DgnTextFileWriter::setLineFieldUnsignedValue(this, 2u, i);
          DgnTextFileWriter::setLineFieldUnsignedValue(this, 3u, v14);
          DgnTextFileWriter::setLineFieldIntegerValue(this, 4u, *(_DWORD *)(*(_QWORD *)(*a4 + 16 * i) + 4 * v15));
          DgnTextFileWriter::writeNextLine((void **)this);
          ++v14;
        }
        while (a7 != v14);
      }
    }
  }
}

void writeIntOffset(DgnTextFileWriter *this, char *a2, _QWORD *a3, int a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;

  if (a5)
  {
    v9 = 0;
    v10 = a5;
    do
    {
      DgnTextFileWriter::setLineFieldValue(this, 0, a2);
      DgnTextFileWriter::setLineFieldUnsignedValue(this, 1u, a4);
      DgnTextFileWriter::setLineFieldUnsignedValue(this, 2u, v9);
      DgnTextFileWriter::setLineFieldUnsignedValue(this, 3u, 0);
      DgnTextFileWriter::setLineFieldIntegerValue(this, 4u, *(_DWORD *)(*a3 + 4 * v9));
      DgnTextFileWriter::writeNextLine((void **)this);
      ++v9;
    }
    while (v10 != v9);
  }
}

void writeLogDeterminant(DgnTextFileWriter *a1, char *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9)
{
  DgnTextFileWriter::setLineFieldValue(a1, 0, a2);
  DgnTextFileWriter::setLineFieldUnsignedValue(a1, 1u, a4);
  DgnTextFileWriter::setLineFieldIntegerValue(a1, 2u, 0);
  DgnTextFileWriter::setLineFieldIntegerValue(a1, 3u, 0);
  DgnTextFileWriter::setLineFieldIntegerValue(a1, 4u, a3);
  DgnTextFileWriter::writeNextLine((void **)a1);
}

void MrecInitModule_recoggrm_recogctl(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugPronGuesser)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugPronGuesser", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugPronGuesser = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPronGuesser);
  }
}

void dismantleRecogGrammarIArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  if (*(_DWORD *)(a1 + 8))
  {
    v9 = 0;
    do
    {
      RecogGrammar::unlinkStates(*(RecogGrammar **)(*(_QWORD *)a1 + 8 * v9++), a2, a3, a4, a5, a6, a7, a8);
      v10 = *(unsigned int *)(a1 + 8);
    }
    while (v9 < v10);
    if ((_DWORD)v10)
    {
      v11 = 0;
      do
      {
        RecogGrammar::killStates(*(RecogGrammar **)(*(_QWORD *)a1 + 8 * v11), a2, a3, a4, a5, a6, a7, a8);
        v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v12)
        {
          (*(void (**)(_QWORD))*v12)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v11));
          MemChunkFree(v12, 0);
        }
        ++v11;
      }
      while (v11 < *(unsigned int *)(a1 + 8));
    }
  }
  *(_DWORD *)(a1 + 8) = 0;
}

void RecogGrammar::unlinkStates(RecogGrammar *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  StateMgr *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*((_DWORD *)this + 6))
  {
    v9 = 0;
    v10 = *(StateMgr **)(*(_QWORD *)(*(_QWORD *)(ModelMgr::smpModelMgr + 264) + 8 * *((unsigned __int16 *)this + 4))
                       + 56);
    do
    {
      StateMgr::setEmptyStateTransition(v10, *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v9), 1, a4, a5, a6, a7, a8);
      StateMgr::setWordAliasState(v10, *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v9++), 0, 1, v11, v12, v13, v14);
    }
    while (v9 < *((unsigned int *)this + 6));
  }
}

_QWORD *RecogGrammar::killStates(RecogGrammar *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *result;

  v9 = (_QWORD *)*((_QWORD *)this + 4);
  if (v9)
  {
    MemChunkFree(v9, 0);
    *((_QWORD *)this + 4) = 0;
  }
  *((_QWORD *)this + 5) = 0;
  v10 = (_QWORD *)*((_QWORD *)this + 6);
  if (v10)
  {
    MemChunkFree(v10, 0);
    *((_QWORD *)this + 6) = 0;
  }
  *((_QWORD *)this + 7) = 0;
  v11 = *((_DWORD *)this + 6);
  if (v11)
  {
    v12 = ModelMgr::smpModelMgr;
    do
    {
      v13 = v11 - 1;
      v14 = *(unsigned int *)(*((_QWORD *)this + 2) + 4 * v13);
      *((_DWORD *)this + 6) = v13;
      StateMgr::killState(*(StateMgr **)(*(_QWORD *)(*(_QWORD *)(v12 + 264) + 8 * *((unsigned __int16 *)this + 4)) + 56), v14, 1, a4, a5, a6, a7, a8);
      v11 = *((_DWORD *)this + 6);
    }
    while (v11);
  }
  result = (_QWORD *)*((_QWORD *)this + 2);
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *((_QWORD *)this + 2) = 0;
  }
  *((_QWORD *)this + 3) = 0;
  *((_WORD *)this + 4) = 127;
  *((_BYTE *)this + 10) = 0;
  return result;
}

void PronGenerator::PronGenerator(PronGenerator *this, unsigned int a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, PronGuessParamSet *a7, uint64_t a8)
{
  int v8;

  *(_WORD *)this = a2;
  *((_WORD *)this + 1) = a3;
  *((_DWORD *)this + 1) = a4;
  *((_DWORD *)this + 2) = a5;
  *((_QWORD *)this + 3) = a7;
  v8 = *((_DWORD *)a7 + 14);
  *((_DWORD *)this + 3) = a6;
  *((_DWORD *)this + 4) = v8;
  StateMgr::getColls(*(StateMgr **)(*(_QWORD *)(*(_QWORD *)(ModelMgr::smpModelMgr + 264) + 8 * a2) + 56), a4, 1, a4, a5, a6, (uint64_t)a7, a8);
}

void PronGenerator::~PronGenerator(PronGenerator *this)
{
  *((_QWORD *)this + 3) = 0;
}

uint64_t *RecogGrammar::newEndOfUtteranceRecogGrammar(RecogGrammar *this)
{
  __int16 v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (__int16)this;
  v2 = MemChunkAlloc(0x40uLL, 0);
  *v2 = (uint64_t)&off_24C213FC0;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_WORD *)v2 + 4) = v1;
  *((_BYTE *)v2 + 10) = 0;
  RecogGrammar::setupEndOfUtteranceGrammar((RecogGrammar *)v2, v3, v4, v5, v6, v7, v8, v9);
  return v2;
}

void RecogGrammar::setupEndOfUtteranceGrammar(RecogGrammar *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int NewState;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  NewState = RecogGrammar::getNewState(this, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_DWORD *)this + 10);
  if (v14 == *((_DWORD *)this + 11))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 32, 1, 1);
    v14 = *((_DWORD *)this + 10);
  }
  *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v14) = NewState;
  ++*((_DWORD *)this + 10);
  v15 = *((_DWORD *)this + 14);
  if (v15 == *((_DWORD *)this + 15))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 48, 1, 1);
    v15 = *((_DWORD *)this + 14);
  }
  *(_DWORD *)(*((_QWORD *)this + 6) + 4 * v15) = NewState;
  v16 = *(_QWORD *)(*(_QWORD *)(ModelMgr::smpModelMgr + 264) + 8 * *((unsigned __int16 *)this + 4));
  ++*((_DWORD *)this + 14);
  StateMgr::setEndOfUtteranceAllowed(*(StateMgr **)(v16 + 56), NewState, 1, 1, v9, v10, v11, v12);
}

uint64_t *RecogGrammar::newPronGuessRecogGrammar(RecogGrammar *this, const PronGenerator *a2, CharInfo **a3, const DgnString *a4)
{
  uint64_t *v7;
  WordStatesRecogGrammar *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = MemChunkAlloc(0xA8uLL, 0);
  WordStatesRecogGrammar::WordStatesRecogGrammar((WordStatesRecogGrammar *)v7, *(_WORD *)this);
  WordStatesRecogGrammar::setupPronGuessGrammar(v8, this, (uint64_t)a2, a3, v9, v10, v11, v12);
  return v7;
}

uint64_t WordStatesRecogGrammar::setupPronGuessGrammar(WordStatesRecogGrammar *this, const PronGenerator *a2, uint64_t a3, CharInfo **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  CharInfo *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  CharInfo *v39;
  char *v40;
  unsigned int v41;
  unsigned int *v42;
  int v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  RecogGrammar *v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unsigned int v211;
  uint64_t v212;
  int v213;
  RecogGrammar *v214;
  uint64_t v215;
  _DWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  RecogGrammar *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  BOOL v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  RecogGrammar *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unsigned int v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  RecogGrammar *v310;
  uint64_t v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  unsigned int v328;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  int v333;
  unint64_t v334;
  unsigned int v336;
  unsigned int v337;
  RecogGrammar *v338;
  CollMgr *v339;
  unsigned int v340;
  unsigned int v342;
  StateMgr *v343;
  unsigned int *v344;
  uint64_t v345;
  _QWORD v346[2];
  unsigned int v347[4];
  unsigned int v348[2];
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  int v357;
  _DWORD v358[4];
  _QWORD v359[2];
  _QWORD v360[2];
  _QWORD v361[2];
  void *v362[2];
  _QWORD *v363;
  uint64_t v364;
  void *v365;
  uint64_t v366;
  unsigned int *v367;
  uint64_t v368;
  _QWORD v369[2];
  uint64_t v370;
  uint64_t v371;
  void *v372[2];

  v333 = a3;
  v9 = *(_QWORD *)(*(_QWORD *)(ModelMgr::smpModelMgr + 264) + 8 * *((unsigned __int16 *)this + 4));
  v10 = **(_DWORD **)(v9 + 8);
  v370 = 0;
  v371 = 0;
  if (*((_DWORD *)a4 + 2))
    v11 = *a4;
  else
    v11 = (CharInfo *)&byte_209A88803;
  if (v10)
  {
    CharInfo::getLogicalCharLengthsForEncodedCharString(v11, (uint64_t)&v370, a3, (unsigned int *)a4, a5, a6, a7, a8);
    v12 = v371;
  }
  else if (*(_BYTE *)v11)
  {
    LODWORD(v12) = 0;
    v13 = (unsigned __int8 *)v11 + 1;
    do
    {
      if ((_DWORD)v12 == HIDWORD(v371))
      {
        DgnPrimArray<char>::reallocElts((uint64_t)&v370, 1, 1);
        LODWORD(v12) = v371;
      }
      *(_BYTE *)(v370 + v12) = 1;
      v12 = (v371 + 1);
      LODWORD(v371) = v371 + 1;
    }
    while (*v13++);
  }
  else
  {
    v12 = 0;
  }
  v338 = this;
  v15 = *((unsigned __int16 *)a2 + 1);
  v343 = *(StateMgr **)(v9 + 56);
  StateMgr::checkCollIdExposed(v343, *((_DWORD *)a2 + 1), v15, (uint64_t)a4, a5, a6, a7, a8);
  v16 = *(uint64_t **)(v9 + 48);
  v339 = *(CollMgr **)(v9 + 16);
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v369, v12);
  v367 = 0;
  v368 = 0;
  if ((_DWORD)v12)
  {
    v365 = 0;
    v17 = realloc_array(0, &v365, 4 * v12, 0, 0, 1);
    v366 = 0;
    v367 = (unsigned int *)v365;
    LODWORD(v368) = v12;
    HIDWORD(v368) = v17 >> 2;
    v364 = 0;
    v365 = 0;
    v363 = 0;
    if ((v333 & 1) == 0)
      goto LABEL_21;
    v362[0] = 0;
    HIDWORD(v366) = realloc_array(0, v362, 4 * v12, 0, 0, 1) >> 2;
    v365 = v362[0];
    v18 = HIDWORD(v364);
  }
  else
  {
    LODWORD(v368) = 0;
    v365 = 0;
    v366 = 0;
    v363 = 0;
    v364 = 0;
    if ((v333 & 1) == 0)
      goto LABEL_21;
    v18 = 0;
  }
  LODWORD(v366) = v12;
  if (v18 < v12)
  {
    v362[0] = 0;
    HIDWORD(v364) = realloc_array(v363, v362, 4 * v12, 4 * v364, 4 * v364, 1) >> 2;
    v363 = v362[0];
  }
  LODWORD(v364) = v12;
LABEL_21:
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v362, v12);
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v361, v12);
  v19 = (v12 + 1);
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v360, v19);
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v359, v19);
  DgnString::DgnString((DgnString *)v358);
  v337 = v12;
  DgnString::DgnString((DgnString *)&v356);
  v354 = 0;
  v355 = 0;
  v352 = 0;
  v353 = 0;
  v350 = 0;
  v351 = 0;
  v27 = *((_QWORD *)a2 + 3);
  v28 = *(_DWORD *)(v27 + 48);
  v29 = *(char **)(v27 + 40);
  if (v28)
    v30 = v29;
  else
    v30 = &byte_209A88803;
  if ((_DWORD)v12)
  {
    v31 = 0;
    v336 = 0;
    v331 = 1;
    v332 = (char *)this + 64;
    v334 = v19;
    do
    {
      v330 = v31 + 1;
      if (v31 + 1 < v19)
      {
        v32 = 0;
        v33 = v331;
        do
        {
          v32 += *(unsigned __int8 *)(v33 + v370 - 1);
          DgnString::setToMid(v358, (const DgnString *)a4, v336, v32);
          DgnString::operator=((DgnString *)&v356, (DgnString *)v358);
          DgnString::operator+=((DgnString *)&v356, v30);
          LODWORD(v355) = 0;
          LOBYTE(v347[0]) = 0;
          if (v357)
            v35 = v356;
          else
            v35 = &byte_209A88803;
          StateMgr::getWordsWithPrefix((uint64_t *)v343, *((_DWORD *)a2 + 1), v15, v35, &byte_209A88803, (uint64_t)&v354, (uint64_t)v347, v34);
          if ((_DWORD)v355)
          {
            v36 = 0;
            v37 = 0;
            do
            {
              v38 = *(unsigned int *)(v354 + 4 * v36);
              if (*v30
                || (v357 ? (v39 = (CharInfo *)v356) : (v39 = (CharInfo *)&byte_209A88803),
                    !CollMgr::collStrcmpUns8(v339, v15, v39, (CharInfo *)(v16[28] + *(unsigned int *)(v16[25] + 4 * v38)), v23, v24, v25, v26)))
              {
                v37 = v37 || StateMgr::isWordIdInState(v343, *((_DWORD *)a2 + 2), v38, 1, v23, v24, v25, v26);
              }
              else
              {
                LODWORD(v355) = v36;
              }
              ++v36;
            }
            while (v36 < v355);
            if ((_DWORD)v355)
            {
              v40 = (char *)v362[0] + 16 * v31;
              v42 = (unsigned int *)(v40 + 8);
              v41 = *((_DWORD *)v40 + 2);
              if (v41 == *((_DWORD *)v40 + 3))
              {
                DgnPrimArray<char>::reallocElts((uint64_t)v362[0] + 16 * v31, 1, 1);
                v41 = *v42;
                v43 = v355;
              }
              else
              {
                v43 = 1;
              }
              *(_BYTE *)(*(_QWORD *)v40 + v41) = v37;
              *v42 = v41 + 1;
              LODWORD(v351) = 0;
              if (v43)
              {
                v44 = 0;
                do
                {
                  WordList::lookupAll(v16, *(_DWORD *)(v354 + 4 * v44), (uint64_t)&v352);
                  v45 = v353;
                  v20 = (v351 + v353 - HIDWORD(v351));
                  if ((v351 + v353) > HIDWORD(v351))
                  {
                    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v350, v20, 1);
                    v45 = v353;
                  }
                  if (v45)
                  {
                    v46 = 0;
                    v47 = v352;
                    v48 = v350;
                    do
                    {
                      *(_DWORD *)(v48 + 4 * (v46 + v351)) = *(_DWORD *)(v47 + 4 * v46);
                      ++v46;
                      v49 = v353;
                    }
                    while (v46 < v353);
                  }
                  else
                  {
                    v49 = 0;
                  }
                  LODWORD(v351) = v351 + v49;
                  ++v44;
                }
                while (v44 < v355);
              }
              v50 = v31;
              v348[0] = RecogGrammar::getNewState(v338, v20, v21, v22, v23, v24, v25, v26);
              HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v332, (int *)v348);
              v51 = v348[0];
              StateMgr::addWordIdArray(v343, v348[0], (uint64_t)&v350, 1, v52, v53, v54, v55);
              StateMgr::setLeftWBAllowed(v343, v51, v31 == 0, 1, v56, v57, v58, v59);
              StateMgr::setRightWBAllowed(v343, v51, v33 == v337, 1, v60, v61, v62, v63);
              v64 = v360[0] + 16 * v33;
              v66 = (unsigned int *)(v64 + 8);
              v65 = *(_DWORD *)(v64 + 8);
              if (v65 == *(_DWORD *)(v64 + 12))
              {
                DgnPrimArray<short>::reallocElts(v360[0] + 16 * v33, 1, 1);
                v65 = *v66;
              }
              *(_WORD *)(*(_QWORD *)v64 + 2 * v65) = v31;
              *v66 = v65 + 1;
              v67 = v359[0] + 16 * v33;
              v68 = v369[0];
              v69 = *(_DWORD *)(v369[0] + 16 * v31 + 8);
              v71 = (unsigned int *)(v67 + 8);
              v70 = *(_DWORD *)(v67 + 8);
              if (v70 == *(_DWORD *)(v67 + 12))
              {
                DgnPrimArray<short>::reallocElts(v359[0] + 16 * v33, 1, 1);
                v70 = *v71;
                v68 = v369[0];
                v72 = v50;
                v73 = *(unsigned int *)(v369[0] + 16 * v50 + 8);
              }
              else
              {
                v73 = *(unsigned int *)(v369[0] + 16 * v50 + 8);
                v72 = v50;
              }
              *(_WORD *)(*(_QWORD *)v67 + 2 * v70) = v69;
              *v71 = v70 + 1;
              v74 = v68 + 16 * v72;
              v75 = (_DWORD *)(v74 + 8);
              v31 = v72;
              if (v73 == *(_DWORD *)(v74 + 12))
              {
                DgnPrimArray<unsigned int>::reallocElts(v74, 1, 1);
                v73 = *v75;
                v31 = v50;
              }
              *(_DWORD *)(*(_QWORD *)v74 + 4 * v73) = v51;
              ++*v75;
              v76 = v361[0] + 16 * v31;
              v78 = (unsigned int *)(v76 + 8);
              v77 = *(_DWORD *)(v76 + 8);
              if (v77 == *(_DWORD *)(v76 + 12))
              {
                DgnPrimArray<short>::reallocElts(v361[0] + 16 * v31, 1, 1);
                v77 = *v78;
                v31 = v50;
              }
              *(_WORD *)(*(_QWORD *)v76 + 2 * v77) = v33;
              *v78 = v77 + 1;
            }
          }
          ++v33;
          v19 = v334;
        }
        while ((_DWORD)v334 != (_DWORD)v33);
      }
      v348[0] = RecogGrammar::getNewState(v338, v20, v21, v22, v23, v24, v25, v26);
      HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v332, (int *)v348);
      v79 = v348[0];
      v367[v31] = v348[0];
      StateMgr::setSkipAllowed(v343, v79, 1, 1, v80, v81, v82, v83);
      StateMgr::setLeftWBAllowed(v343, v367[v31], v31 == 0, 1, v84, v85, v86, v87);
      StateMgr::setRightWBAllowed(v343, v367[v31], v31 == 0, 1, v88, v89, v90, v91);
      if (v333)
      {
        v348[0] = RecogGrammar::getNewState(v338, v20, v21, v22, v23, v24, v25, v26);
        HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v332, (int *)v348);
        v92 = v348[0];
        *((_DWORD *)v365 + v31) = v348[0];
        StateMgr::setWordPenalty(v343, v92, *((_DWORD *)a2 + 4), 1, v93, v94, v95, v96);
        StateMgr::setWordAliasState(v343, *((_DWORD *)v365 + v31), *((_DWORD *)a2 + 3), 1, v97, v98, v99, v100);
        StateMgr::setLeftWBAllowed(v343, *((_DWORD *)v365 + v31), 0, 1, v101, v102, v103, v104);
        StateMgr::setRightWBAllowed(v343, *((_DWORD *)v365 + v31), 0, 1, v105, v106, v107, v108);
        v348[0] = RecogGrammar::getNewState(v338, v109, v110, v111, v112, v113, v114, v115);
        HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v332, (int *)v348);
        v116 = v348[0];
        *((_DWORD *)v363 + v31) = v348[0];
        StateMgr::setSkipAllowed(v343, v116, 1, 1, v117, v118, v119, v120);
        StateMgr::setLeftWBAllowed(v343, *((_DWORD *)v363 + v31), 0, 1, v121, v122, v123, v124);
        StateMgr::setRightWBAllowed(v343, *((_DWORD *)v363 + v31), 0, 1, v125, v126, v127, v128);
      }
      v336 += *(unsigned __int8 *)(v370 + v31);
      ++v331;
      v31 = v330;
    }
    while (v330 != v337);
  }
  *(_QWORD *)v348 = 0;
  v349 = 0;
  if (v333)
  {
    v129 = v338;
    v130 = v337;
    v347[0] = RecogGrammar::getNewState(v338, v20, v21, v22, v23, v24, v25, v26);
    HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v338 + 64, (int *)v347);
    v340 = v347[0];
    StateMgr::setWordPenalty(v343, v347[0], *((_DWORD *)a2 + 4), 1, v131, v132, v133, v134);
    StateMgr::setWordAliasState(v343, v340, *((_DWORD *)a2 + 3), 1, v135, v136, v137, v138);
    StateMgr::setLeftWBAllowed(v343, v340, 1, 1, v139, v140, v141, v142);
    StateMgr::setRightWBAllowed(v343, v340, 0, 1, v143, v144, v145, v146);
    v347[0] = RecogGrammar::getNewState(v338, v147, v148, v149, v150, v151, v152, v153);
    HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v338 + 64, (int *)v347);
    v154 = v347[0];
    StateMgr::setWordPenalty(v343, v347[0], *((_DWORD *)a2 + 4), 1, v155, v156, v157, v158);
    StateMgr::setWordAliasState(v343, v154, *((_DWORD *)a2 + 3), 1, v159, v160, v161, v162);
    StateMgr::setLeftWBAllowed(v343, v154, 0, 1, v163, v164, v165, v166);
    StateMgr::setRightWBAllowed(v343, v154, 1, 1, v167, v168, v169, v170);
    v347[0] = RecogGrammar::getNewState(v338, v171, v172, v173, v174, v175, v176, v177);
    HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v338 + 64, (int *)v347);
    v178 = v347[0];
    StateMgr::setWordPenalty(v343, v347[0], *((_DWORD *)a2 + 4), 1, v179, v180, v181, v182);
    StateMgr::setWordAliasState(v343, v178, *((_DWORD *)a2 + 3), 1, v183, v184, v185, v186);
    StateMgr::setLeftWBAllowed(v343, v178, 1, 1, v187, v188, v189, v190);
    StateMgr::setRightWBAllowed(v343, v178, 1, 1, v191, v192, v193, v194);
    v195 = *((_DWORD *)v338 + 10);
    if (v195 == *((_DWORD *)v338 + 11))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v338 + 32, 1, 1);
      v195 = *((_DWORD *)v338 + 10);
    }
    *(_DWORD *)(*((_QWORD *)v338 + 4) + 4 * v195) = v178;
    ++*((_DWORD *)v338 + 10);
    v196 = *((_DWORD *)v338 + 14);
    if (v196 == *((_DWORD *)v338 + 15))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v338 + 48, 1, 1);
      v196 = *((_DWORD *)v338 + 14);
    }
    *(_DWORD *)(*((_QWORD *)v338 + 6) + 4 * v196) = v178;
    ++*((_DWORD *)v338 + 14);
  }
  else
  {
    v340 = 0;
    v154 = 0;
    v130 = v337;
    v129 = v338;
  }
  v197 = *v367;
  v198 = *((_DWORD *)v129 + 10);
  if (v198 == *((_DWORD *)v129 + 11))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v129 + 32, 1, 1);
    v198 = *((_DWORD *)v129 + 10);
  }
  *(_DWORD *)(*((_QWORD *)v129 + 4) + 4 * v198) = v197;
  ++*((_DWORD *)v129 + 10);
  BitArray::BitArray((BitArray *)v347, v130);
  BitArray::BitArray((BitArray *)v346, v130);
  if (!v130)
  {
    LODWORD(v203) = -1;
LABEL_164:
    v279 = (uint64_t)v129 + 64;
    v280 = (uint64_t)v129 + 48;
    v281 = v203;
    while (1)
    {
      if (((*(_DWORD *)(v346[0] + 4 * (v281 >> 5)) >> v281) & 1) != 0)
      {
        LODWORD(v349) = 0;
        v344 = 0;
        v345 = 0;
        v372[0] = 0;
        v282 = realloc_array(0, v372, 4uLL, 0, 0, 1);
        v344 = (unsigned int *)v372[0];
        LODWORD(v345) = 1;
        HIDWORD(v345) = v282 >> 2;
        v290 = v360[0];
        if (*(_DWORD *)(v360[0] + 16 * v281 + 8))
        {
          v291 = 0;
          while (1)
          {
            v292 = *(unsigned __int16 *)(*(_QWORD *)(v290 + 16 * v281) + 2 * v291);
            v293 = *(unsigned __int16 *)(*(_QWORD *)(v359[0] + 16 * v281) + 2 * v291);
            if (*(_BYTE *)(*((_QWORD *)v362[0] + 2 * v292) + v293))
              *(_DWORD *)(v346[0] + ((v292 >> 3) & 0x1FFC)) |= 1 << v292;
            LODWORD(v372[0]) = RecogGrammar::getNewState(v338, v283, v284, v285, v286, v287, v288, v289);
            HashKEV<unsigned int,unsigned int,CWIDScope>::add(v279, (int *)v372);
            v294 = v372[0];
            v295 = *(_DWORD *)(*(_QWORD *)(v369[0] + 16 * v292) + 4 * v293);
            StateMgr::setWordAliasState(v343, v372[0], v295, 1, v296, v297, v298, v299);
            StateMgr::setRightWBAllowed(v343, v294, 1, 1, v300, v301, v302, v303);
            StateMgr::setLeftWBAllowed(v343, v294, (_DWORD)v292 == 0, 1, v304, v305, v306, v307);
            v310 = v338;
            v311 = *((unsigned int *)v338 + 14);
            if (v311 == *((_DWORD *)v338 + 15))
            {
              DgnPrimArray<unsigned int>::reallocElts(v280, 1, 1);
              v310 = v338;
              v311 = *((unsigned int *)v338 + 14);
            }
            *(_DWORD *)(*((_QWORD *)v310 + 6) + 4 * v311) = v294;
            ++*((_DWORD *)v310 + 14);
            *v344 = v294;
            StateMgr::addStateTransition((unint64_t)v343, v367[v292], (uint64_t *)&v344, 1, 0, 0, v308, v309);
            if ((_DWORD)v292)
            {
              if (v333)
                break;
            }
            if ((_DWORD)v292)
              goto LABEL_176;
LABEL_182:
            ++v291;
            v290 = v360[0];
            if (v291 >= *(unsigned int *)(v360[0] + 16 * v281 + 8))
              goto LABEL_183;
          }
          StateMgr::addStateTransition((unint64_t)v343, *((_DWORD *)v363 + v292), (uint64_t *)&v344, 1, 0, 0, v288, v289);
LABEL_176:
          if (((*(_DWORD *)(*(_QWORD *)v347 + ((v292 >> 3) & 0x1FFC)) >> v292) & 1) != 0)
          {
            LODWORD(v372[0]) = RecogGrammar::getNewState(v338, v283, v284, v285, v286, v287, v288, v289);
            HashKEV<unsigned int,unsigned int,CWIDScope>::add(v279, (int *)v372);
            v312 = v372[0];
            StateMgr::setWordAliasState(v343, v372[0], v295, 1, v313, v314, v315, v316);
            StateMgr::setRightWBAllowed(v343, v312, 1, 1, v317, v318, v319, v320);
            StateMgr::setLeftWBAllowed(v343, v312, 1, 1, v321, v322, v323, v324);
            v325 = *((unsigned int *)v338 + 14);
            if (v325 == *((_DWORD *)v338 + 15))
            {
              DgnPrimArray<unsigned int>::reallocElts(v280, 1, 1);
              v325 = *((unsigned int *)v338 + 14);
            }
            *(_DWORD *)(*((_QWORD *)v338 + 6) + 4 * v325) = v312;
            ++*((_DWORD *)v338 + 14);
            v326 = v349;
            if (v349 == (unint64_t)HIDWORD(v349))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
              v326 = v349;
            }
            *(_DWORD *)(*(_QWORD *)v348 + 4 * v326) = v312;
            LODWORD(v349) = v349 + 1;
          }
          goto LABEL_182;
        }
LABEL_183:
        if ((_DWORD)v349)
          StateMgr::addStateTransition((unint64_t)v343, *v367, (uint64_t *)v348, 1, 0, 0, v288, v289);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v344);
        v129 = v338;
      }
      if (!(_DWORD)--v281)
        goto LABEL_187;
    }
  }
  v342 = v154;
  v201 = 0;
  v202 = (uint64_t)v129 + 48;
  v203 = v130 - 1;
  v204 = v130;
  do
  {
    v205 = v369[0] + 16 * v201;
    if (*(_DWORD *)(v205 + 8))
    {
      StateMgr::addStateTransition((unint64_t)v343, v367[v201], (uint64_t *)v205, 1, 0, 0, v199, v200);
      v208 = v369[0];
      if (*(_DWORD *)(v369[0] + 16 * v201 + 8))
      {
        v209 = 0;
        while (1)
        {
          v210 = *(unsigned __int16 *)(*(_QWORD *)(v361[0] + 16 * v201) + 2 * v209);
          if (v337 <= v210)
          {
            v213 = *(_DWORD *)(*(_QWORD *)(v208 + 16 * v201) + 4 * v209);
            v214 = v338;
            v215 = *((unsigned int *)v338 + 14);
            if (v215 == *((_DWORD *)v338 + 15))
            {
              DgnPrimArray<unsigned int>::reallocElts(v202, 1, 1);
              v214 = v338;
              v215 = *((unsigned int *)v338 + 14);
            }
            *(_DWORD *)(*((_QWORD *)v214 + 6) + 4 * v215) = v213;
            ++*((_DWORD *)v214 + 14);
          }
          else
          {
            LODWORD(v349) = 0;
            v211 = v367[v210];
            if (HIDWORD(v349))
            {
              v212 = 0;
            }
            else
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
              v212 = v349;
              v208 = v369[0];
            }
            *(_DWORD *)(*(_QWORD *)v348 + 4 * v212) = v211;
            LODWORD(v349) = v349 + 1;
            StateMgr::addStateTransition((unint64_t)v343, *(_DWORD *)(*(_QWORD *)(v208 + 16 * v201) + 4 * v209), (uint64_t *)v348, 1, 0, 0, v199, v200);
          }
          if (!*(_BYTE *)(*((_QWORD *)v362[0] + 2 * v201) + v209))
            goto LABEL_100;
          if (v337 == (_DWORD)v210)
            break;
          if (!v201)
          {
            v216 = (_DWORD *)(*(_QWORD *)v347 + ((v210 >> 3) & 0x1FFC));
            goto LABEL_99;
          }
          StateMgr::setSkipAllowed(v343, *(_DWORD *)(*(_QWORD *)(v369[0] + 16 * v201) + 4 * v209), 1, 1, v206, v207, v199, v200);
LABEL_100:
          ++v209;
          v208 = v369[0];
          if (v209 >= *(unsigned int *)(v369[0] + 16 * v201 + 8))
            goto LABEL_101;
        }
        v216 = (_DWORD *)(v346[0] + 4 * (v201 >> 5));
        LOBYTE(v210) = v201;
LABEL_99:
        *v216 |= 1 << v210;
        goto LABEL_100;
      }
    }
LABEL_101:
    if (v333)
    {
      if (!v201)
      {
        LODWORD(v349) = 0;
        if (HIDWORD(v349))
        {
          v217 = 0;
        }
        else
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          v217 = v349;
        }
        *(_DWORD *)(*(_QWORD *)v348 + 4 * v217) = v340;
        LODWORD(v349) = v349 + 1;
        StateMgr::addStateTransition((unint64_t)v343, *v367, (uint64_t *)v348, 1, 0, 0, v199, v200);
        LODWORD(v349) = 0;
        v220 = *(_DWORD *)v365;
        if (HIDWORD(v349))
        {
          v221 = 0;
        }
        else
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          v221 = v349;
        }
        v222 = *(_QWORD *)v348;
        *(_DWORD *)(*(_QWORD *)v348 + 4 * v221) = v220;
        v223 = v349 + 1;
        LODWORD(v349) = v349 + 1;
        v224 = v342;
        if (v337 != 1)
          v224 = *((_DWORD *)v363 + 1);
        if (v223 == HIDWORD(v349))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          v223 = v349;
          v222 = *(_QWORD *)v348;
        }
        *(_DWORD *)(v222 + 4 * v223) = v224;
        LODWORD(v349) = v349 + 1;
        StateMgr::addStateTransition((unint64_t)v343, v340, (uint64_t *)v348, 1, 0, 0, v218, v219);
        if (v337 != 1)
          StateMgr::addStateTransition((unint64_t)v343, *(_DWORD *)v365, (uint64_t *)v348, 1, 0, 0, v199, v200);
      }
      if (v201 == v203)
      {
        LODWORD(v349) = 0;
        v225 = *((_DWORD *)v365 + v203);
        if (HIDWORD(v349))
        {
          v226 = 0;
        }
        else
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          v226 = v349;
        }
        v227 = *(_QWORD *)v348;
        *(_DWORD *)(*(_QWORD *)v348 + 4 * v226) = v225;
        v228 = v349 + 1;
        LODWORD(v349) = v228;
        if (v228 == HIDWORD(v349))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          v228 = v349;
          v227 = *(_QWORD *)v348;
        }
        *(_DWORD *)(v227 + 4 * v228) = v342;
        LODWORD(v349) = v349 + 1;
        StateMgr::addStateTransition((unint64_t)v343, *((_DWORD *)v365 + v203), (uint64_t *)v348, 1, 0, 0, v199, v200);
        v229 = v338;
        v230 = *((unsigned int *)v338 + 14);
        if (v230 == *((_DWORD *)v338 + 15))
        {
          DgnPrimArray<unsigned int>::reallocElts(v202, 1, 1);
          v229 = v338;
          v230 = *((unsigned int *)v338 + 14);
        }
        *(_DWORD *)(*((_QWORD *)v229 + 6) + 4 * v230) = v342;
        ++*((_DWORD *)v229 + 14);
        if (v337 != 1)
        {
          StateMgr::addStateTransition((unint64_t)v343, v367[v203], (uint64_t *)v348, 1, 0, 0, v199, v200);
          StateMgr::addStateTransition((unint64_t)v343, *((_DWORD *)v363 + v203), (uint64_t *)(v369[0] + 16 * v203), 1, 0, 0, v231, v232);
          LODWORD(v349) = 0;
          if (HIDWORD(v349))
          {
            v235 = 0;
          }
          else
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
            v235 = v349;
          }
          *(_DWORD *)(*(_QWORD *)v348 + 4 * v235) = v342;
          LODWORD(v349) = v349 + 1;
          StateMgr::addStateTransition((unint64_t)v343, *((_DWORD *)v363 + v203), (uint64_t *)v348, 1, 0, 0, v233, v234);
        }
      }
      if (v201 && v201 < v203)
      {
        LODWORD(v349) = 0;
        v236 = *((_DWORD *)v365 + v201);
        if (HIDWORD(v349))
        {
          v237 = 0;
        }
        else
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          v237 = v349;
        }
        *(_DWORD *)(*(_QWORD *)v348 + 4 * v237) = v236;
        LODWORD(v349) = v349 + 1;
        StateMgr::addStateTransition((unint64_t)v343, v367[v201], (uint64_t *)v348, 1, 0, 0, v199, v200);
        v240 = *((_DWORD *)v363 + v201 + 1);
        v241 = v349;
        if (v349 == (unint64_t)HIDWORD(v349))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          v241 = v349;
        }
        *(_DWORD *)(*(_QWORD *)v348 + 4 * v241) = v240;
        LODWORD(v349) = v349 + 1;
        StateMgr::addStateTransition((unint64_t)v343, *((_DWORD *)v365 + v201), (uint64_t *)v348, 1, 0, 0, v238, v239);
        StateMgr::addStateTransition((unint64_t)v343, *((_DWORD *)v363 + v201), (uint64_t *)(v369[0] + 16 * v201), 1, 0, 0, v242, v243);
        LODWORD(v349) = 0;
        v246 = v363;
        v247 = *((_DWORD *)v363 + v201 + 1);
        if (HIDWORD(v349))
        {
          v248 = 0;
        }
        else
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          v248 = v349;
          v246 = v363;
        }
        *(_DWORD *)(*(_QWORD *)v348 + 4 * v248) = v247;
        LODWORD(v349) = v349 + 1;
        StateMgr::addStateTransition((unint64_t)v343, *((_DWORD *)v246 + v201), (uint64_t *)v348, 1, 0, 0, v244, v245);
      }
    }
    ++v201;
  }
  while (v201 != v130);
  if (v337 >= 2)
  {
    v249 = 1;
    do
    {
      if (((*(_DWORD *)(*(_QWORD *)v347 + 4 * (v249 >> 5)) >> v249) & 1) != 0)
      {
        LODWORD(v349) = 0;
        v344 = 0;
        v345 = 0;
        v372[0] = 0;
        v250 = realloc_array(0, v372, 4uLL, 0, 0, 1);
        v344 = (unsigned int *)v372[0];
        LODWORD(v345) = 1;
        HIDWORD(v345) = v250 >> 2;
        if (*(_DWORD *)(v369[0] + 16 * v249 + 8))
        {
          v258 = 0;
          do
          {
            v259 = *(unsigned __int16 *)(*(_QWORD *)(v361[0] + 16 * v249) + 2 * v258);
            if (*(_BYTE *)(*((_QWORD *)v362[0] + 2 * v249) + v258))
              v260 = v337 > v259;
            else
              v260 = 0;
            if (v260)
              *(_DWORD *)(*(_QWORD *)v347 + ((v259 >> 3) & 0x1FFC)) |= 1 << v259;
            LODWORD(v372[0]) = RecogGrammar::getNewState(v338, v251, v252, v253, v254, v255, v256, v257);
            HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v338 + 64, (int *)v372);
            v261 = v372[0];
            StateMgr::setWordAliasState(v343, v372[0], *(_DWORD *)(*(_QWORD *)(v369[0] + 16 * v249) + 4 * v258), 1, v262, v263, v264, v265);
            StateMgr::setLeftWBAllowed(v343, v261, 1, 1, v266, v267, v268, v269);
            if (v337 <= v259)
            {
              StateMgr::setRightWBAllowed(v343, v261, 1, 1, v270, v271, v272, v273);
              v276 = v338;
              v277 = *((unsigned int *)v338 + 14);
              if (v277 == *((_DWORD *)v338 + 15))
              {
                DgnPrimArray<unsigned int>::reallocElts(v202, 1, 1);
                v276 = v338;
                v277 = *((unsigned int *)v338 + 14);
              }
              *(_DWORD *)(*((_QWORD *)v276 + 6) + 4 * v277) = v261;
              ++*((_DWORD *)v276 + 14);
            }
            else
            {
              StateMgr::setRightWBAllowed(v343, v261, 0, 1, v270, v271, v272, v273);
              *v344 = v367[v259];
              StateMgr::addStateTransition((unint64_t)v343, v261, (uint64_t *)&v344, 1, 0, 0, v274, v275);
            }
            v278 = v349;
            if (v349 == (unint64_t)HIDWORD(v349))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
              v278 = v349;
            }
            *(_DWORD *)(*(_QWORD *)v348 + 4 * v278) = v261;
            LODWORD(v349) = v349 + 1;
            ++v258;
          }
          while (v258 < *(unsigned int *)(v369[0] + 16 * v249 + 8));
        }
        StateMgr::addStateTransition((unint64_t)v343, *v367, (uint64_t *)v348, 1, 0, 0, v256, v257);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v344);
      }
      ++v249;
    }
    while (v249 != v204);
  }
  v129 = v338;
  if ((_DWORD)v203)
    goto LABEL_164;
LABEL_187:
  if ((v333 & 1) != 0 && (*(_BYTE *)v346[0] & 1) != 0)
  {
    v327 = *v367;
    v328 = *((_DWORD *)v129 + 14);
    if (v328 == *((_DWORD *)v129 + 15))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v129 + 48, 1, 1);
      v328 = *((_DWORD *)v129 + 14);
    }
    *(_DWORD *)(*((_QWORD *)v129 + 6) + 4 * v328) = v327;
    ++*((_DWORD *)v129 + 14);
  }
  BitArray::~BitArray((BitArray *)v346);
  BitArray::~BitArray((BitArray *)v347);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v350);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v352);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v354);
  DgnString::~DgnString((DgnString *)&v356);
  DgnString::~DgnString((DgnString *)v358);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v359);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v360);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v361);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v362);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v363);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v365);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v367);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v369);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v370);
}

void sub_209894784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39)
{
  uint64_t v39;

  BitArray::~BitArray((BitArray *)&a25);
  BitArray::~BitArray((BitArray *)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a29);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a33);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a35);
  DgnString::~DgnString((DgnString *)&a37);
  DgnString::~DgnString((DgnString *)&a39);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v39 - 240);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v39 - 224);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v39 - 208);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v39 - 192);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v39 - 176);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v39 - 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v39 - 144);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v39 - 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v39 - 112);
  _Unwind_Resume(a1);
}

double RecogGrammar::newSequenceRecogGrammar(RecogGrammar *this)
{
  __int16 v1;
  uint64_t *v2;
  double result;

  v1 = (__int16)this;
  v2 = MemChunkAlloc(0x50uLL, 0);
  result = 0.0;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_WORD *)v2 + 4) = v1;
  *((_BYTE *)v2 + 10) = 0;
  v2[8] = 0;
  v2[9] = 0;
  *v2 = (uint64_t)&off_24C2170E0;
  return result;
}

void RecogGrammar::~RecogGrammar(RecogGrammar *this)
{
  char *v2;

  *(_QWORD *)this = &off_24C213FC0;
  v2 = (char *)this + 16;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v2);
}

{
  RecogGrammar::~RecogGrammar(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t RecogGrammar::getNewState(RecogGrammar *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;

  v9 = StateMgr::newState(*(StateMgr **)(*(_QWORD *)(*(_QWORD *)(ModelMgr::smpModelMgr + 264) + 8 * *((unsigned __int16 *)this + 4))+ 56), 0, a3, a4, a5, a6, a7, a8);
  v10 = *((_DWORD *)this + 6);
  if (v10 == *((_DWORD *)this + 7))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 16, 1, 1);
    v10 = *((_DWORD *)this + 6);
  }
  *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v10) = v9;
  ++*((_DWORD *)this + 6);
  return v9;
}

uint64_t RecogGrammar::hasInStateSet(RecogGrammar *this, const unsigned int *a2)
{
  return 0;
}

uint64_t RecogGrammar::finalize(uint64_t this)
{
  *(_BYTE *)(this + 10) = 1;
  return this;
}

uint64_t RecogGrammar::getStartStates(RecogGrammar *this)
{
  return (uint64_t)this + 32;
}

uint64_t RecogGrammar::setTransitionsTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  if (*(_DWORD *)(a2 + 8))
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v11);
      v13 = *(_DWORD *)(v12 + 40);
      v14 = v10 + v13;
      if (v14 > HIDWORD(v23))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v22, v14 - HIDWORD(v23), 1);
        v13 = *(_DWORD *)(v12 + 40);
      }
      if (v13)
      {
        v15 = 0;
        v16 = *(_QWORD *)(v12 + 32);
        v17 = v22;
        do
        {
          *(_DWORD *)(v17 + 4 * (v15 + v23)) = *(_DWORD *)(v16 + 4 * v15);
          ++v15;
          v18 = *(unsigned int *)(v12 + 40);
        }
        while (v15 < v18);
      }
      else
      {
        LODWORD(v18) = 0;
      }
      v10 = v23 + v18;
      LODWORD(v23) = v23 + v18;
      ++v11;
    }
    while (v11 < *(unsigned int *)(a2 + 8));
  }
  if (*(_DWORD *)(a1 + 56))
  {
    v19 = 0;
    v20 = ModelMgr::smpModelMgr;
    do
      StateMgr::addStateTransition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 264) + 8 * *(unsigned __int16 *)(a1 + 8)) + 56), *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v19++), &v22, 1, 0, 0, a7, a8);
    while (v19 < *(unsigned int *)(a1 + 56));
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
}

void sub_209894B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void WordStatesRecogGrammar::WordStatesRecogGrammar(WordStatesRecogGrammar *this, __int16 a2)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_WORD *)this + 4) = a2;
  *((_BYTE *)this + 10) = 0;
  *(_QWORD *)this = &off_24C217788;
  HashKEV<unsigned int,unsigned int,StateIdScope>::HashKEV((uint64_t)this + 64, 0, 16);
}

void sub_209894BDC(_Unwind_Exception *a1)
{
  RecogGrammar *v1;

  RecogGrammar::~RecogGrammar(v1);
  _Unwind_Resume(a1);
}

void WordStatesRecogGrammar::~WordStatesRecogGrammar(WordStatesRecogGrammar *this)
{
  *(_QWORD *)this = &off_24C217788;
  HashKEV<unsigned int,unsigned int,StateIdScope>::~HashKEV((uint64_t)this + 64);
  RecogGrammar::~RecogGrammar(this);
}

{
  *(_QWORD *)this = &off_24C217788;
  HashKEV<unsigned int,unsigned int,StateIdScope>::~HashKEV((uint64_t)this + 64);
  RecogGrammar::~RecogGrammar(this);
  JUMPOUT(0x20BD149A8);
}

BOOL WordStatesRecogGrammar::hasInStateSet(WordStatesRecogGrammar *this, unsigned int *a2)
{
  return *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this + 64, (int *)a2) != 0;
}

void ContainerRecogGrammar::~ContainerRecogGrammar(ContainerRecogGrammar *this)
{
  *(_QWORD *)this = &off_24C217218;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 64);
  RecogGrammar::~RecogGrammar(this);
}

{
  *(_QWORD *)this = &off_24C217218;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 64);
  RecogGrammar::~RecogGrammar(this);
  JUMPOUT(0x20BD149A8);
}

unint64_t ContainerRecogGrammar::add(unint64_t this, RecogGrammar *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 72);
  if (v4 == *(_DWORD *)(this + 76))
  {
    this = DgnPrimArray<unsigned long long>::reallocElts(this + 64, 1, 1);
    v4 = *(_DWORD *)(v3 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * v4) = a2;
  *(_DWORD *)(v3 + 72) = v4 + 1;
  return this;
}

void SequenceRecogGrammar::~SequenceRecogGrammar(SequenceRecogGrammar *this)
{
  *(_QWORD *)this = &off_24C217218;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 64);
  RecogGrammar::~RecogGrammar(this);
}

{
  *(_QWORD *)this = &off_24C217218;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 64);
  RecogGrammar::~RecogGrammar(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t SequenceRecogGrammar::hasInStateSet(SequenceRecogGrammar *this, const unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!*((_DWORD *)this + 18))
    return 0;
  v4 = 0;
  do
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v4);
    result = (*(uint64_t (**)(uint64_t, const unsigned int *))(*(_QWORD *)v5 + 32))(v5, a2);
    if ((_DWORD)result)
      break;
    ++v4;
  }
  while (v4 < *((unsigned int *)this + 18));
  return result;
}

uint64_t SequenceRecogGrammar::finalize(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  void *v16;

  v1 = this;
  if (!*(_BYTE *)(this + 10) && *(_DWORD *)(this + 72))
  {
    (*(void (**)(_QWORD))(***(_QWORD ***)(this + 64) + 24))(**(_QWORD **)(this + 64));
    DgnPrimArray<int>::copyArraySlice(v1 + 32, (uint64_t *)(**(_QWORD **)(v1 + 64) + 32), 0, *(_DWORD *)(**(_QWORD **)(v1 + 64) + 40));
    v16 = 0;
    v2 = realloc_array(0, &v16, 8uLL, 0, 0, 1);
    v3 = 0;
    v13 = v16;
    v14 = 1;
    v15 = v2 >> 3;
    while (1)
    {
      v4 = (*(_DWORD *)(v1 + 72) - 1);
      v5 = *(_QWORD *)(v1 + 64);
      if (v3 >= v4)
        break;
      *v13 = *(_QWORD *)(v5 + 8 * v3 + 8);
      (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 24))(*v13);
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 64) + 8 * v3++);
      RecogGrammar::setTransitionsTo(v6, (uint64_t)&v13, v7, v8, v9, v10, v11, v12);
    }
    DgnPrimArray<int>::copyArraySlice(v1 + 48, (uint64_t *)(*(_QWORD *)(v5 + 8 * v4) + 48), 0, *(_DWORD *)(*(_QWORD *)(v5 + 8 * v4) + 56));
    this = DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v13);
  }
  *(_BYTE *)(v1 + 10) = 1;
  return this;
}

void sub_209894F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t **result;
  uint64_t *v6;
  uint64_t **v7;

  v2 = *a2;
  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
    v4 = (-1640531527 * *a2) >> -(char)v3;
  else
    v4 = 0;
  result = (uint64_t **)(*(_QWORD *)(a1 + 80) + 8 * v4);
  v6 = *result;
  if (*result)
  {
    do
    {
      v7 = (uint64_t **)v6;
      if (*((_DWORD *)v6 + 2) == v2 && *((_DWORD *)v6 + 3) == v2)
        break;
      v6 = (uint64_t *)*v6;
      result = v7;
    }
    while (*v7);
  }
  return result;
}

uint64_t TLocaleInfo::composeCharacter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  if ((int)a3 < 768)
  {
LABEL_2:
    if (a3 == 3634 && (_DWORD)a2 == 3661)
      return 3635;
    else
      return 0;
  }
  if (a3 >= 0x370)
  {
    if (a3 > 0xE30)
    {
      if (a3 > 0xE4E)
        goto LABEL_2;
      if (a3 > 0xE33)
      {
        if (a3 - 3655 >= 0xFFFFFFF4)
          goto LABEL_2;
      }
      else if (a3 != 3633)
      {
        goto LABEL_2;
      }
    }
    else
    {
      if (a3 == 1600)
        return a2;
      if (a3 < 0x64B)
        goto LABEL_2;
      if (a3 < 0x660 || (a3 & 0xFFFFFFFB) == 0x670)
        return a2;
      if (a3 != 2364 || *(_QWORD *)(a1 + 72) <= 3uLL)
        goto LABEL_2;
      if ((a2 - 2356) >= 0xFFFFFFE1)
        return s_szTableNuktaComposition0915to0933[(a2 - 2325)];
    }
    return 0;
  }
  if (a3 > 0x345)
    return 0;
  v4 = (int *)*(&s_szTableCharacterComposition0300to0345 + a3 - 768);
  if (!v4)
    return 0;
  v5 = *v4 - 1;
  if (*v4 < 1)
    return 0;
  if (*v4 == 1)
  {
    v6 = 0;
LABEL_36:
    if (*(int *)((char *)v4 + ((4 * v6) | 4)) == (_DWORD)a2)
      return v4[v6 + 2];
    return 0;
  }
  v7 = 0;
  while (1)
  {
    v8 = (v5 + v7) | 1;
    v9 = v4[v8];
    if (v9 == (_DWORD)a2)
      return v4[v8 + 1];
    v10 = (v5 + v7) / 2;
    if (v9 >= (int)a2)
      v5 = v10 - 1;
    else
      v7 = v10 + 1;
    if (v7 >= v5)
    {
      v6 = 2 * v7;
      goto LABEL_36;
    }
  }
}

uint64_t TLocaleInfo::splitDiacritic(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  if ((int)a2 <= 191)
  {
    if (a2 == 105 && *(_BYTE *)(a1 + 80))
      return 0x30700000131;
    return a2;
  }
  if (a2 <= 0x233)
    return s_szTableBaseCharacter00C0to0233[a2 - 192] | ((unint64_t)s_szTableDiacritic00C0to0233[a2 - 192] << 32);
  v3 = a2 - 902;
  if (a2 < 0x386)
    return a2;
  if (a2 <= 0x3D4)
  {
    v4 = (unsigned int *)&s_szTableBaseCharacter0386to03D4;
    v5 = (unsigned int *)&s_szTableDiacritic0386to03D4;
    return v4[v3] | ((unint64_t)v5[v3] << 32);
  }
  v3 = a2 - 1024;
  if (a2 < 0x400)
    return a2;
  if (a2 <= 0x4F9)
  {
    v4 = (unsigned int *)&s_szTableBaseCharacter0400to04F9;
    v5 = (unsigned int *)&s_szTableDiacritic0400to04F9;
    return v4[v3] | ((unint64_t)v5[v3] << 32);
  }
  v6 = a2 - 2345;
  if (a2 < 0x929)
    return a2;
  if (a2 > 0x95F)
  {
    v3 = a2 - 7680;
    if (a2 - 7680 <= 0x1FC)
    {
      v4 = (unsigned int *)&s_szTableBaseCharacter1E00to1FFC;
      v5 = (unsigned int *)&s_szTableDiacritic1E00to1FFC;
      return v4[v3] | ((unint64_t)v5[v3] << 32);
    }
    return a2;
  }
  if (a2 < 0x958)
  {
    if (v6 <= 0xB && ((1 << v6) & 0x901) != 0)
    {
      v7 = a2 - 1;
      return v7 | 0x93C00000000;
    }
    return a2;
  }
  v7 = s_szTableNuktaBaseCharacter0958to095F[a2 - 2392];
  return v7 | 0x93C00000000;
}

unint64_t TLocaleInfo::decomposeCharacter(uint64_t a1, int a2, uint64_t *a3)
{
  unsigned int v4;
  unint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  int *v14;
  int v15;
  int v16;
  int v17;

  v4 = a2;
  v6 = a3[2];
  v16 = a2;
  TBuffer<wchar_t>::insert((uint64_t)a3, v6, &v16, 1uLL);
  result = TLocaleInfo::splitDiacritic(a1, v4);
  if (v4)
  {
    v8 = HIDWORD(result);
    if (HIDWORD(result))
    {
      if (HIDWORD(result) != v4)
      {
        LODWORD(v9) = 0;
        do
        {
          v10 = v4;
          v4 = result;
          v17 = v8;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v17, 1uLL);
          result = TLocaleInfo::splitDiacritic(a1, v4);
          v9 = (v9 + 1);
          if (v10 == v4)
            break;
          v8 = HIDWORD(result);
          if (!HIDWORD(result))
            break;
        }
        while (v4 != HIDWORD(result));
        if ((_DWORD)v9)
        {
          v11 = *a3;
          if ((_DWORD)v9 != 1)
          {
            v12 = v9 >> 1;
            v13 = (int *)(v11 + 4 * v6 + 4);
            v14 = (int *)(v11 + 4 * (v6 + v9));
            do
            {
              v15 = *v13;
              *v13++ = *v14;
              *v14-- = v15;
              --v12;
            }
            while (v12);
          }
          *(_DWORD *)(v11 + 4 * v6) = v4;
        }
      }
    }
  }
  return result;
}

uint64_t TLocaleInfo::removeDiacritics(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  do
  {
    v3 = a2;
    a2 = TLocaleInfo::splitDiacritic(a1, a2);
  }
  while ((_DWORD)v3 != (_DWORD)a2);
  return v3;
}

uint64_t TLocaleInfo::katakanaToHiragana(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  int *v5;
  uint64_t result;
  int v7;
  int v8;

  v3 = *a2;
  if (*a2)
  {
    v5 = a2 + 1;
    do
    {
      if ((v3 - 12449) < 0x56)
        v3 -= 96;
      v8 = v3;
      result = TBuffer<wchar_t>::insert(a3, *(_QWORD *)(a3 + 16), &v8, 1uLL);
      v7 = *v5++;
      v3 = v7;
    }
    while (v7);
  }
  return result;
}

void TLocaleInfo::katakanaToRomaji(uint64_t a1, int *a2, _QWORD *a3)
{
  int *v4;
  int v5;
  int v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  int *v12;
  int v13;
  uint64_t v14;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  size_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v27;

  v4 = a2;
  v5 = *a2;
  if (*a2 == 12540)
  {
    do
    {
      v27 = 45;
      TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v27, 1uLL);
      v6 = v4[1];
      ++v4;
      v5 = v6;
    }
    while (v6 == 12540);
  }
  for (; v5; v4 = v11 + 1)
  {
    if ((v5 - 12535) > 0xFFFFFFA9)
    {
      v12 = (int *)*(&s_szTableKatakanaToRomaji + (v5 - 12449));
      v11 = v4 + 1;
      v13 = v4[1];
      if (v13 == 12540)
      {
        v14 = 0;
        while (v12[v14++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], (int *)*(&s_szTableKatakanaToRomaji + (v5 - 12449)), v14 - 1);
        v16 = a3[2];
        v17 = *(_DWORD *)(*a3 + 4 * v16 - 4);
        v27 = v17;
        TBuffer<wchar_t>::insert((uint64_t)a3, v16, &v27, 1uLL);
        if (v4[2] != 12540)
          goto LABEL_31;
        v18 = v4 + 3;
        do
        {
          v27 = v17;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v27, 1uLL);
          v19 = *v18++;
        }
        while (v19 == 12540);
        goto LABEL_30;
      }
      if ((v5 - 12461) <= 0x3D && ((1 << (v5 + 83)) & 0x200400E040100C03) != 0)
      {
        if ((v13 - 12515) <= 4 && ((1 << (v13 + 29)) & 0x15) != 0)
        {
          v20 = wcslen((const __int32 *)*(&s_szTableKatakanaToRomaji + (v5 - 12449)));
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], v12, v20 - 1);
          if (v5 != 12472 && v20 == 2)
          {
            v27 = 121;
            TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v27, 1uLL);
          }
          if (v13 == 12517)
            v21 = 117;
          else
            v21 = 111;
          if (v13 == 12515)
            v22 = 97;
          else
            v22 = v21;
          v27 = v22;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v27, 1uLL);
          if (v4[2] != 12540)
            goto LABEL_31;
          v18 = v4 + 3;
          do
          {
            v27 = v22;
            TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v27, 1uLL);
            v23 = *v18++;
          }
          while (v23 == 12540);
LABEL_30:
          v11 = v18 - 2;
          goto LABEL_31;
        }
        v24 = 0;
        v7 = a3[2];
        while (v12[v24++])
          ;
      }
      else
      {
        v24 = 0;
        v7 = a3[2];
        while (v12[v24++])
          ;
      }
      v10 = v24 - 1;
      v9 = (uint64_t)a3;
      v8 = (int *)*(&s_szTableKatakanaToRomaji + (v5 - 12449));
    }
    else
    {
      v27 = v5;
      v7 = a3[2];
      v8 = &v27;
      v9 = (uint64_t)a3;
      v10 = 1;
    }
    TBuffer<wchar_t>::insert(v9, v7, v8, v10);
    v11 = v4;
LABEL_31:
    v5 = v11[1];
  }
}

uint64_t TLocaleInfo::isKtivMenukad(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t result;
  unsigned int v5;

  while (1)
  {
    v2 = *a2;
    if ((int)*a2 <= 8202)
    {
      if (v2 == 32 || v2 == 160)
        goto LABEL_21;
      if (!v2)
        return 0;
    }
    else
    {
      if (v2 == 8203)
        goto LABEL_21;
      if (v2 == 12288 || v2 == 65279)
        goto LABEL_21;
    }
    if ((int)v2 < 1425)
      return 0;
    if (v2 < 0x5F5)
      break;
    if (v2 - 64285 >= 0x33)
      return 0;
    result = 1;
    if (v2 >> 5 < 0x7D9 || v2 - 64298 < 0x25)
      return result;
LABEL_21:
    ++a2;
  }
  if (v2 >= 0x5AF)
  {
    if (v2 <= 0x5C7)
    {
      result = 1;
      v5 = v2 - 1470;
      if (v5 > 8 || ((1 << v5) & 0x125) == 0)
        return result;
    }
    goto LABEL_21;
  }
  return 1;
}

uint64_t TLocaleInfo::ktivMenukadToKtivMaleh(uint64_t a1, int *a2, _QWORD *a3)
{
  unint64_t v5;
  char v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  __int32 v10;
  int32x4_t v11;
  unsigned int v12;
  int32x4_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v19;

  v5 = a3[2];
  v6 = 1;
  while (1)
  {
    v7 = *a2;
    if (*a2 <= 8202)
    {
      if (v7 == 32 || v7 == 160)
        goto LABEL_11;
      if (!v7)
        goto LABEL_78;
    }
    else
    {
      v8 = v7 == 8203 || v7 == 65279;
      if (v8 || v7 == 12288)
      {
LABEL_11:
        v19 = *a2;
        v6 = 1;
        TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
        goto LABEL_12;
      }
    }
    if (v7 < 1425)
      goto LABEL_78;
    if (v7 >= 0x5F5)
      break;
    if (v7 >= 0x5AF)
    {
      if (v7 > 0x5C7)
        goto LABEL_23;
      if ((v7 & 0xFFFFFFFE) == 0x5BA)
      {
        v9 = a3[2];
        if (v9 <= v5 || *(_DWORD *)(*a3 + 4 * v9 - 4) == 1493)
          goto LABEL_73;
LABEL_49:
        v19 = 1493;
LABEL_72:
        TBuffer<wchar_t>::insert((uint64_t)a3, v9, &v19, 1uLL);
        goto LABEL_73;
      }
      v6 = 0;
      if ((v7 - 1460) > 0x12)
        goto LABEL_12;
      if (((1 << (v7 + 76)) & 0x49400) != 0)
        goto LABEL_52;
      if (v7 != 1460)
        goto LABEL_12;
      v9 = a3[2];
      if (v9 > v5 && *(_DWORD *)(*a3 + 4 * v9 - 4) != 1497)
      {
        v15 = a2[1];
        if (!v15 || v15 != 1456 && a2[2] != 1456)
          goto LABEL_44;
      }
    }
LABEL_73:
    v6 = 0;
LABEL_12:
    ++a2;
  }
  if ((v7 - 64285) < 0x33)
  {
LABEL_23:
    if (v7 > 64284)
    {
      if (v7 <= 64286)
      {
        if (v7 != 64285)
          goto LABEL_73;
        goto LABEL_42;
      }
      if (v7 == 64287)
        goto LABEL_45;
      if (v7 == 64313)
      {
LABEL_42:
        v9 = a3[2];
        if (!(v6 & 1 | (v9 <= v5)))
        {
          v10 = *(_DWORD *)(*a3 + 4 * v9 - 4);
          v11.i32[0] = v10 & 0xFFFFFFFB;
          v11.i32[1] = v10;
          v11.i32[2] = v10;
          v11.i32[3] = v10 & 0xFFFFFFFD;
          v12 = a2[1];
          v13 = vdupq_n_s32(v12);
          if ((vmaxvq_u8((uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v11, (int32x4_t)xmmword_209A6FC10), (int16x8_t)vceqq_s32(v13, (int32x4_t)xmmword_209A6FC00)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v13, (int32x4_t)xmmword_209A6FC20), (int16x8_t)vceqq_s32(v13, (int32x4_t)xmmword_209A6FC30)))) & 1) == 0&& v12 != 64309&& v12 != 64313)
          {
            v19 = 1497;
            TBuffer<wchar_t>::insert((uint64_t)a3, v9, &v19, 1uLL);
            v9 = a3[2];
          }
        }
LABEL_44:
        v19 = 1497;
        goto LABEL_72;
      }
      if (v7 != 64309)
        goto LABEL_39;
    }
    else
    {
      if (v7 > 1519)
      {
        if (v7 == 1520)
        {
LABEL_69:
          v14 = 1493;
          v19 = 1493;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
          goto LABEL_70;
        }
        if (v7 == 1521)
        {
          v19 = 1493;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
          v19 = 1497;
LABEL_71:
          v9 = a3[2];
          goto LABEL_72;
        }
        if (v7 != 1522)
        {
LABEL_39:
          if (v7 >= 0xFB2A)
          {
            if (v7 > 0xFB2D)
            {
              if (v7 > 0xFB30)
              {
                if (v7 > 0xFB4A)
                {
                  switch(v7)
                  {
                    case 64331:
                      goto LABEL_69;
                    case 64332:
                      v7 = 1489;
                      goto LABEL_52;
                    case 64333:
                      v7 = 1499;
                      goto LABEL_52;
                    case 64334:
                      v7 = 1492;
                      goto LABEL_52;
                    case 64335:
                      v19 = 1488;
                      TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
                      v7 = 1500;
                      goto LABEL_52;
                    default:
                      goto LABEL_52;
                  }
                }
                v7 -= 62816;
              }
              else
              {
                v7 = 1488;
              }
            }
            else
            {
              v7 = 1513;
            }
          }
LABEL_52:
          v19 = v7;
          goto LABEL_71;
        }
LABEL_45:
        v14 = 1497;
        v19 = 1497;
        TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
LABEL_70:
        v19 = v14;
        goto LABEL_71;
      }
      if (v7 != 1493)
      {
        if (v7 != 1497)
          goto LABEL_39;
        goto LABEL_42;
      }
    }
    v9 = a3[2];
    if (!(v6 & 1 | (v9 <= v5)) && *(_DWORD *)(*a3 + 4 * v9 - 4) != 1493)
    {
      v19 = 1493;
      TBuffer<wchar_t>::insert((uint64_t)a3, v9, &v19, 1uLL);
      v9 = a3[2];
    }
    goto LABEL_49;
  }
LABEL_78:
  v16 = 0;
  while (a2[v16++])
    ;
  return TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], a2, v16 - 1);
}

uint64_t TLocaleInfo::getDigitExtended(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t result;
  unsigned int v5;
  int v6;
  unsigned int v7;

  if ((int)a2 >= 65296)
  {
    v2 = a2 - 65296;
    v3 = a2 >= 0xFF1A;
    goto LABEL_3;
  }
  result = a2 - 1632;
  if ((int)a2 < 1632)
    return 0xFFFFFFFFLL;
  if (a2 <= 0x669)
    return result;
  result = a2 - 1776;
  if (a2 < 0x6F0)
    return 0xFFFFFFFFLL;
  if (a2 <= 0x6F9)
    return result;
  result = a2 - 1984;
  if (a2 < 0x7C0)
    return 0xFFFFFFFFLL;
  if (a2 <= 0x7C9)
    return result;
  result = a2 - 2406;
  if (a2 < 0x966)
    return 0xFFFFFFFFLL;
  if (a2 <= 0x96F)
    return result;
  result = a2 - 2534;
  if (a2 < 0x9E6)
    return 0xFFFFFFFFLL;
  if (a2 <= 0x9EF)
    return result;
  result = a2 - 2662;
  if (a2 < 0xA66)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xA6F)
    return result;
  result = a2 - 2790;
  if (a2 < 0xAE6)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xAEF)
    return result;
  result = a2 - 2918;
  if (a2 < 0xB66)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xB6F)
    return result;
  result = a2 - 3046;
  if (a2 < 0xBE6)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xBEF)
    return result;
  result = a2 - 3174;
  if (a2 < 0xC66)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xC6F)
    return result;
  result = a2 - 3302;
  if (a2 < 0xCE6)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xCEF)
    return result;
  result = a2 - 3430;
  if (a2 < 0xD66)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xD6F)
    return result;
  result = a2 - 3664;
  if (a2 < 0xE50)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xE59)
    return result;
  result = a2 - 3792;
  if (a2 < 0xED0)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xED9)
    return result;
  result = a2 - 3872;
  if (a2 < 0xF20)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xF29)
    return result;
  if (a2 >> 6 < 0x41)
    return 0xFFFFFFFFLL;
  v5 = a2 >> 1;
  if (a2 >> 1 <= 0x824)
  {
    v6 = -4160;
    return a2 + v6;
  }
  v7 = a2 >> 4;
  if (a2 >> 4 < 0x109)
    return 0xFFFFFFFFLL;
  if (v5 <= 0x84C)
  {
    v6 = -4240;
    return a2 + v6;
  }
  if (a2 < 0x1369)
    return 0xFFFFFFFFLL;
  if (v5 <= 0x9B8)
  {
    v6 = -4968;
    return a2 + v6;
  }
  if (a2 >> 5 < 0xBF)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xBF4)
  {
    v6 = -6112;
    return a2 + v6;
  }
  if (v7 < 0x181)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xC0C)
  {
    v6 = -6160;
    return a2 + v6;
  }
  if (v5 < 0xCA3)
    return 0xFFFFFFFFLL;
  if (v7 <= 0x194)
  {
    v6 = -6470;
    return a2 + v6;
  }
  if (v7 < 0x19D)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xCEC)
  {
    v6 = -6608;
    return a2 + v6;
  }
  if (a2 == 6618)
    return 1;
  if (a2 >> 7 < 0x35)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xD44)
  {
    v6 = -6784;
    return a2 + v6;
  }
  if (v7 < 0x1A9)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xD4C)
  {
    v6 = -6800;
    return a2 + v6;
  }
  if (v7 < 0x1B5)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xDAC)
  {
    v6 = -6992;
    return a2 + v6;
  }
  if (v7 < 0x1BB)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xDDC)
  {
    v6 = -7088;
    return a2 + v6;
  }
  if (a2 >> 6 < 0x71)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xE24)
  {
    v6 = -7232;
    return a2 + v6;
  }
  if (v7 < 0x1C5)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xE2C)
  {
    v6 = -7248;
    return a2 + v6;
  }
  if (a2 >> 5 < 0x531)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xA629)
  {
    v6 = -42528;
    return a2 + v6;
  }
  if (v7 < 0xA8D)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xA8D9)
  {
    v6 = -43216;
    return a2 + v6;
  }
  if (a2 >> 8 < 0xA9)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xA909)
  {
    v6 = -43264;
    return a2 + v6;
  }
  if (v7 < 0xA9D)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xA9D9)
  {
    v6 = -43472;
    return a2 + v6;
  }
  if (v7 < 0xAA5)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xAA59)
  {
    v6 = -43600;
    return a2 + v6;
  }
  v2 = a2 - 44016;
  v3 = a2 - 44016 >= 0xA;
LABEL_3:
  if (v3)
    return 0xFFFFFFFFLL;
  else
    return v2;
}

uint64_t TLocaleInfo::stringToUInt(uint64_t DigitExtended, unsigned int *a2, unsigned int **a3)
{
  unsigned int *v4;
  unsigned int *i;
  signed int v6;
  uint64_t v9;
  unsigned int v10;
  int v11;

  v4 = a2;
  for (i = a2 + 1; ; ++i)
  {
    v6 = *(i - 1);
    if (v6 > 159)
      break;
    if (v6 > 0x20 || ((1 << v6) & 0x100002600) == 0)
      goto LABEL_18;
LABEL_17:
    ;
  }
  if (v6 >= 12288)
  {
    if (v6 != 65279 && v6 != 12288)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v6 == 160 || v6 == 8203)
    goto LABEL_17;
LABEL_18:
  v9 = (v6 - 48);
  if (v6 < 48
    || v6 > 0x39
    && (v6 < 0x660
     || (DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v6),
         v9 = DigitExtended,
         (_DWORD)DigitExtended == -1)))
  {
    v9 = 0;
  }
  else
  {
    v10 = *i;
    if ((int)*i >= 48)
    {
      v4 = i;
      while (1)
      {
        if (v10 > 0x39)
        {
          if (v10 < 0x660)
            goto LABEL_31;
          DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v10);
          if ((_DWORD)DigitExtended == -1)
            goto LABEL_31;
        }
        else
        {
          DigitExtended = v10 - 48;
        }
        v9 = (DigitExtended + 10 * v9);
        v11 = v4[1];
        ++v4;
        v10 = v11;
        if (v11 <= 47)
          goto LABEL_31;
      }
    }
    v4 = i;
  }
LABEL_31:
  *a3 = v4;
  return v9;
}

uint64_t TLocaleInfo::stringToUInt(uint64_t a1, unsigned int *a2, BOOL *a3)
{
  uint64_t result;
  unsigned int *v6;
  int v7;
  unsigned int *v10;

  v10 = 0;
  LODWORD(result) = TLocaleInfo::stringToInt(a1, a2, &v10);
  v6 = v10;
  if (v10 == a2)
  {
    result = 0;
    *a3 = 1;
    return result;
  }
  while (1)
  {
    v7 = *v6;
    if ((int)*v6 > 159)
      break;
    if (v7 > 0x20 || ((1 << v7) & 0x100002600) == 0)
      goto LABEL_18;
LABEL_17:
    ++v6;
  }
  if (v7 >= 12288)
  {
    if (v7 != 65279 && v7 != 12288)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v7 == 160 || v7 == 8203)
    goto LABEL_17;
LABEL_18:
  *a3 = v7 != 0;
  if (v7)
    return 0;
  else
    return result;
}

uint64_t TLocaleInfo::stringToInt(uint64_t DigitExtended, unsigned int *a2, unsigned int **a3)
{
  unsigned int *i;
  int v6;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  int v12;
  int v13;
  uint64_t result;

  for (i = a2 + 1; ; ++i)
  {
    v6 = *(i - 1);
    if (v6 <= 159)
      break;
    if (v6 >= 12288)
    {
      if (v6 != 65279 && v6 != 12288)
        goto LABEL_17;
    }
    else if (v6 != 160 && v6 != 8203)
    {
      goto LABEL_17;
    }
LABEL_14:
    ;
  }
  if (v6 > 0x2D)
    goto LABEL_17;
  if (((1 << v6) & 0x100002600) != 0)
    goto LABEL_14;
  if (((1 << v6) & 0x280000000000) != 0)
  {
    v8 = *i;
    goto LABEL_18;
  }
LABEL_17:
  --i;
  v8 = v6;
  v6 = 0;
LABEL_18:
  v9 = v8 - 48;
  if ((int)v8 < 48
    || v8 > 0x39
    && (v8 < 0x660
     || (DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v8),
         v9 = DigitExtended,
         (_DWORD)DigitExtended == -1)))
  {
    result = 0;
    *a3 = a2;
  }
  else
  {
    v12 = i[1];
    v11 = i + 1;
    v10 = v12;
    if (v12 >= 48)
    {
      do
      {
        if (v10 > 0x39)
        {
          if (v10 < 0x660)
            break;
          DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v10);
          if ((_DWORD)DigitExtended == -1)
            break;
        }
        else
        {
          DigitExtended = v10 - 48;
        }
        v9 = DigitExtended + 10 * v9;
        v13 = v11[1];
        ++v11;
        v10 = v13;
      }
      while (v13 > 47);
    }
    *a3 = v11;
    if (v6 == 45)
      return -v9;
    else
      return v9;
  }
  return result;
}

BOOL TLocaleInfo::stringToBool(uint64_t DigitExtended, uint64_t a2, _QWORD *a3)
{
  unsigned int *i;
  signed int v6;
  unsigned int v9;
  unsigned int v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  signed int *v15;

  for (i = (unsigned int *)(a2 + 4); ; ++i)
  {
    v6 = *(i - 1);
    if (v6 > 159)
      break;
    if (v6 > 0x20 || ((1 << v6) & 0x100002600) == 0)
      goto LABEL_18;
LABEL_17:
    ;
  }
  if (v6 >= 12288)
  {
    if (v6 != 65279 && v6 != 12288)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v6 == 160 || v6 == 8203)
    goto LABEL_17;
LABEL_18:
  *a3 = i - 1;
  v9 = v6 - 48;
  if (v6 < 48
    || v6 > 0x39
    && (v6 < 0x660
     || (DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v6),
         v9 = DigitExtended,
         (_DWORD)DigitExtended == -1)))
  {
    v12 = wcsncasecmp((const __int32 *)i - 1, dword_209A72338, 4uLL);
    v13 = *a3;
    if ((_DWORD)v12 || (TLocaleInfo::isAlpha(v12, *(_DWORD *)(v13 + 16)) & 1) != 0)
    {
      v14 = wcsncasecmp((const __int32 *)v13, dword_209A7234C, 5uLL);
      if ((_DWORD)v14)
        goto LABEL_32;
      v15 = (signed int *)(*a3 + 20);
      if ((TLocaleInfo::isAlpha(v14, *v15) & 1) != 0)
        goto LABEL_32;
      result = 0;
      *a3 = v15;
    }
    else
    {
      *a3 = v13 + 16;
      return 1;
    }
  }
  else
  {
    if (v9 <= 1)
    {
      v10 = *i;
      if ((int)*i < 48
        || v10 >= 0x3A && (v10 < 0x660 || TLocaleInfo::getDigitExtended(DigitExtended, v10) == -1))
      {
        *a3 = i;
        return v9 != 0;
      }
    }
LABEL_32:
    result = 0;
    *a3 = a2;
  }
  return result;
}

uint64_t TLocaleInfo::isAlpha(uint64_t a1, signed int a2)
{
  uint64_t result;
  uint64_t v3;
  _DWORD *v4;
  _BOOL4 v5;
  unsigned int v6;
  _BOOL4 v7;
  _BOOL4 v9;
  _BOOL4 v11;
  _BOOL4 v13;
  _BOOL4 v15;
  unsigned int v16;

  result = 0;
  if (BYTE1(a2) <= 0x1Du)
  {
    switch(BYTE1(a2))
    {
      case 0:
        v11 = (a2 & 0xFFFFFFC0) == 0xC0 && (a2 & 0xFFFFFFDF) != 215;
        return (a2 & 0xFFFFFFDF) - 65 < 0x1A || v11;
      case 1:
        v3 = a2 - 256;
        if (s_szTableLowercase0100to024F[v3] != a2)
          return 1;
        v4 = s_szTableUppercase0100to0292;
        return v4[v3] != a2;
      case 2:
        if (a2 > 658)
          return 0;
        v3 = a2 - 256;
        if (s_szTableUppercase0100to0292[v3] != a2)
          return 1;
        if (a2 > 591)
          return 0;
        v4 = s_szTableLowercase0100to024F;
        break;
      case 3:
        v3 = (a2 - 880);
        if (a2 < 880)
          return 0;
        if (s_szTableLowercase0370to03FF[v3] != a2)
          return 1;
        v4 = &s_szTableUppercase0370to03FF;
        return v4[v3] != a2;
      case 4:
      case 5:
        result = 1;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_209A6FC70, (uint32x4_t)vaddq_s32(vdupq_n_s32(a2), (int32x4_t)xmmword_209A6FC60)))) & 1) == 0)
        {
          v5 = (a2 - 1329) < 0x26 || (a2 - 1377) < 0x26;
          if (a2 == 1231)
            v5 = 1;
          v6 = a2 == 1216 || v5;
          if ((a2 - 1024) >= 0x60)
            return v6;
          else
            return 1;
        }
        return result;
      case 0x10:
        return (a2 - 4256) < 0x26;
      default:
        return result;
    }
    return v4[v3] != a2;
  }
  if (BYTE1(a2) > 0x2Cu)
  {
    if (BYTE1(a2) <= 0xA6u)
    {
      v7 = (a2 - 42560) < 0x2E || (a2 - 42624) < 0x18;
      if (BYTE1(a2) != 166)
        v7 = 0;
      if (BYTE1(a2) == 45)
        return a2 < 11558;
      else
        return v7;
    }
    if (BYTE1(a2) != 167)
    {
      v9 = (a2 - 65313) < 0x1A || (a2 - 65345) < 0x1A;
      return BYTE1(a2) == 255 && v9;
    }
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_209A6FC50, (uint32x4_t)vaddq_s32(vdupq_n_s32(a2), (int32x4_t)xmmword_209A6FC40)))) & 1) == 0)
    {
      if ((a2 - 42877) >= 0x10)
        return 0;
      else
        return (0xC001u >> (a2 - 125)) & 1;
    }
    return 1;
  }
  if (BYTE1(a2) > 0x20u)
  {
    if (BYTE1(a2) == 33)
    {
      result = 1;
      if ((a2 - 8526) > 0x36 || ((1 << (a2 - 78)) & 0x60000000000001) == 0)
        return a2 == 8498;
      return result;
    }
    if (BYTE1(a2) != 44)
      return result;
    if (a2 >> 5 != 355)
    {
      v15 = a2 != 11311 && (a2 - 11264) < 0x5F;
      v16 = (a2 - 11499) < 4 || v15;
      if ((a2 - 11392) >= 0xF)
        return v16;
      else
        return 1;
    }
    v3 = (a2 - 11360);
    if (s_szTableLowercase2C60to2C7F[v3] == a2)
    {
      v4 = &s_szTableUppercase2C60to2C76;
      return v4[v3] != a2;
    }
    return 1;
  }
  if (BYTE1(a2) == 30)
  {
    v13 = a2 == 7838 || a2 == 7835;
    return (a2 - 7840) < 0xFFFFFFF6 || v13;
  }
  else if (BYTE1(a2) == 31)
  {
    if (a2 > 8188)
      return 0;
    v3 = a2 - 7936;
    if (s_szTableLowercase1F00to1FFC[v3] == a2)
    {
      if (a2 <= 8179)
      {
        v4 = &s_szTableUppercase1F00to1FF3;
        return v4[v3] != a2;
      }
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t TLocaleInfo::stringToBool(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t result;
  int *v6;
  int v7;
  int *v10;

  v10 = 0;
  LODWORD(result) = TLocaleInfo::stringToBool(a1, a2, &v10);
  v6 = v10;
  if (v10 == (int *)a2)
  {
    result = 0;
    *a3 = 1;
    return result;
  }
  while (1)
  {
    v7 = *v6;
    if (*v6 > 159)
      break;
    if (v7 > 0x20 || ((1 << v7) & 0x100002600) == 0)
      goto LABEL_18;
LABEL_17:
    ++v6;
  }
  if (v7 >= 12288)
  {
    if (v7 != 65279 && v7 != 12288)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v7 == 160 || v7 == 8203)
    goto LABEL_17;
LABEL_18:
  *a3 = v7 != 0;
  if (v7)
    return 0;
  else
    return result;
}

uint64_t TLocaleInfo::toNarrow(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v3;

  if ((_DWORD)a2 == 12288)
    return 32;
  result = a2;
  if ((int)a2 >= 65281)
  {
    if (a2 > 0xFF5E)
    {
      switch((int)a2)
      {
        case 65504:
          result = 162;
          break;
        case 65505:
          result = 163;
          break;
        case 65506:
          result = 172;
          break;
        case 65507:
          result = 175;
          break;
        case 65508:
          result = 166;
          break;
        case 65509:
          result = 165;
          break;
        case 65510:
          result = 8361;
          break;
        default:
          if ((_DWORD)a2 == 65376)
            v3 = 10630;
          else
            v3 = a2;
          if ((_DWORD)a2 == 65375)
            result = 10629;
          else
            result = v3;
          break;
      }
    }
    else
    {
      return (a2 - 65248);
    }
  }
  return result;
}

uint64_t TLocaleInfo::normalizeWidth(uint64_t a1, uint64_t a2)
{
  if ((a2 - 65377) > 0x7B)
    return TLocaleInfo::toNarrow(a1, a2);
  else
    return s_szTableNormalizeWidthFF61toFFDC[(a2 - 65377)];
}

uint64_t TLocaleInfo::toWide(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = a2;
  if ((a2 - 33) <= 0x5D)
    return (a2 + 65248);
  if ((int)a2 > 10628)
  {
    if ((_DWORD)a2 == 10630)
      return 65376;
    if ((_DWORD)a2 == 10629)
      return 65375;
  }
  else
  {
    if ((_DWORD)a2 == 32)
      return 12288;
    if ((_DWORD)a2 == 8361)
      return 65510;
  }
  if ((a2 - 176) >= 0xFFFFFFF2 && (a2 - 162) <= 0xD && ((0x241Bu >> (a2 + 94)) & 1) != 0)
    return dword_209A75A54[(int)a2 - 162];
  return result;
}

uint64_t TLocaleInfo::isUpper(uint64_t a1, int a2)
{
  uint64_t result;
  _BOOL4 v4;
  _BOOL4 v5;
  BOOL v6;
  _BOOL4 v9;
  int v10;
  int v11;
  _DWORD *v12;
  _BOOL4 v13;
  _BOOL4 v14;

  result = 0;
  if (BYTE1(a2) > 0x1Du)
  {
    if (BYTE1(a2) <= 0x2Bu)
    {
      if (BYTE1(a2) == 30)
      {
        if (a2 >> 5 >= 0xF5)
          v13 = (a2 & 1) == 0;
        else
          v13 = a2 == 7838;
        if (a2 <= 7829)
          return (a2 & 1) == 0;
        else
          return v13;
      }
      if (BYTE1(a2) != 31)
      {
        v5 = a2 == 8498 || a2 == 8579;
        v6 = BYTE1(a2) == 33;
        return v6 && v5;
      }
      if (a2 > 8188)
        return 0;
      v10 = s_szTableLowercase1F00to1FFC[a2 - 7936];
      return v10 != a2;
    }
    if (BYTE1(a2) <= 0xA6u)
    {
      if (BYTE1(a2) != 44)
      {
        v4 = (a2 - 42624) <= 0x17 && (a2 & 1) == 0;
        if ((a2 - 42560) <= 0x2D)
          v5 = (a2 & 1) == 0;
        else
          v5 = v4;
        v6 = BYTE1(a2) == 166;
        return v6 && v5;
      }
      if (a2 >> 5 != 355)
      {
        if ((a2 - 11499) <= 3)
          v14 = (a2 & 1) == 0;
        else
          v14 = (a2 - 11264) < 0x2F;
        if ((a2 - 11392) <= 0xE)
          return (a2 & 1) == 0;
        else
          return v14;
      }
      v11 = a2 - 11360;
      v12 = s_szTableLowercase2C60to2C7F;
LABEL_50:
      v10 = v12[v11];
      return v10 != a2;
    }
    if (BYTE1(a2) != 167)
    {
      v5 = (a2 - 65313) < 0x1A;
      v6 = BYTE1(a2) == 255;
      return v6 && v5;
    }
    if ((a2 - 42786) > 0xD && (a2 - 42802) > 0x3D)
    {
      if ((a2 - 42873) <= 3)
        return (a2 & 1) == 0;
      if ((a2 - 42878) > 9)
        return a2 == 42877 || a2 == 42891;
    }
    return a2 & 1;
  }
  switch(BYTE1(a2))
  {
    case 0:
      v9 = a2 != 215 && (a2 - 192) < 0x1F;
      return (a2 - 65) < 0x1A || v9;
    case 1:
      goto LABEL_44;
    case 2:
      if (a2 > 591)
        return 0;
LABEL_44:
      v10 = s_szTableLowercase0100to024F[a2 - 256];
      return v10 != a2;
    case 3:
      v11 = a2 - 880;
      if (a2 < 880)
        return 0;
      v12 = s_szTableLowercase0370to03FF;
      goto LABEL_50;
    case 4:
    case 5:
      if ((a2 - 1120) <= 0x21 || (a2 - 1162) <= 0x35)
        return (a2 & 1) == 0;
      if ((a2 - 1217) <= 0xD)
        return a2 & 1;
      if ((a2 - 1232) <= 0x55)
        return (a2 & 1) == 0;
      result = 1;
      if (a2 != 1216)
        result = (a2 - 1024) < 0x30 || (a2 - 1329) < 0x26;
      break;
    case 0x10:
      return (a2 - 4256) < 0x26;
    default:
      return result;
  }
  return result;
}

uint64_t TLocaleInfo::isLower(uint64_t a1, int a2)
{
  uint64_t result;
  BOOL v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  _BOOL4 v14;

  if (BYTE1(a2) <= 0x1Eu)
  {
    switch(BYTE1(a2))
    {
      case 0:
        v14 = a2 != 247 && (a2 - 223) < 0x21;
        return (a2 - 97) < 0x1A || v14;
      case 1:
        goto LABEL_41;
      case 2:
        if (a2 > 658)
          return 0;
LABEL_41:
        v11 = s_szTableUppercase0100to0292[a2 - 256];
        return v11 != a2;
      case 3:
        v6 = a2 - 880;
        if (a2 < 880)
          return 0;
        v7 = &s_szTableUppercase0370to03FF;
        goto LABEL_57;
      case 4:
      case 5:
        if ((a2 - 1120) <= 0x21 || (a2 - 1162) <= 0x35)
          return a2 & 1;
        if ((a2 - 1217) <= 0xD)
          return (a2 & 1) == 0;
        if ((a2 - 1232) <= 0x55)
          return a2 & 1;
        result = 1;
        if (a2 == 1231 || (a2 - 1072) < 0x30)
          return result;
        v3 = (a2 - 1377) >= 0x26;
        break;
      default:
        if (a2 >> 5 >= 0xF5)
          v10 = a2 & 1;
        else
          v10 = a2 == 7835;
        if (a2 <= 7829)
          v8 = a2 & 1;
        else
          v8 = v10;
        v9 = BYTE1(a2) == 30;
        goto LABEL_37;
    }
    return !v3;
  }
  if (BYTE1(a2) <= 0x2Cu)
  {
    switch(BYTE1(a2))
    {
      case 0x1Fu:
        if (a2 <= 8179)
        {
          v11 = s_szTableUppercase1F00to1FF3[a2 - 7936];
          return v11 != a2;
        }
        break;
      case 0x21u:
        return a2 == 8526 || a2 == 8580;
      case 0x2Cu:
        v6 = a2 - 11360;
        if ((a2 - 11360) > 0x16)
        {
          if ((a2 - 11392) > 0xE && (a2 - 11499) > 3)
          {
            v3 = (a2 - 11312) >= 0x2F;
            return !v3;
          }
          return a2 & 1;
        }
        v7 = &s_szTableUppercase2C60to2C76;
LABEL_57:
        v11 = v7[v6];
        return v11 != a2;
    }
    return 0;
  }
  if (BYTE1(a2) > 0xA6u)
  {
    if (BYTE1(a2) != 167)
    {
      v8 = (a2 - 65345) < 0x1A;
      v9 = BYTE1(a2) == 255;
LABEL_37:
      if (v9)
        return v8;
      else
        return 0;
    }
    if ((a2 - 42786) > 0xD && (a2 - 42802) > 0x3D)
    {
      if ((a2 - 42873) <= 3)
        return (a2 & 1) == 0;
      if ((a2 - 42878) > 9)
        return a2 == 42892;
    }
    return a2 & 1;
  }
  if ((a2 - 42624) <= 0x17)
    v4 = a2 & 1;
  else
    v4 = 0;
  if ((a2 - 42560) <= 0x2D)
    v5 = a2 & 1;
  else
    v5 = v4;
  if (BYTE1(a2) != 166)
    v5 = 0;
  if (BYTE1(a2) == 45)
    return a2 < 11558;
  else
    return v5;
}

uint64_t TLocaleInfo::toUpper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned int *v5;

  v2 = a2;
  if ((int)a2 <= 127)
  {
    if ((_DWORD)a2 == 105 && *(_BYTE *)(a1 + 80))
      return 304;
    else
      return __toupper(a2);
  }
  if (!TLocaleInfo::isLower(a1, a2))
    return v2;
  if (BYTE1(v2) <= 0x1Eu)
  {
    switch(BYTE1(v2))
    {
      case 0:
        if ((_DWORD)v2 != 247 && (v2 - 224) <= 0x1E)
          return (v2 - 32);
        if ((_DWORD)v2 == 255)
          return 376;
        return v2;
      case 1:
        return s_szTableUppercase0100to0292[(int)v2 - 256];
      case 2:
        if (v2 <= 0x292)
          return s_szTableUppercase0100to0292[(int)v2 - 256];
        return v2;
      case 3:
        v4 = v2 - 880;
        if (v2 < 0x370)
          return v2;
        v5 = (unsigned int *)&s_szTableUppercase0370to03FF;
        return v5[v4];
      case 4:
      case 5:
        if ((v2 - 1120) <= 0x21 || (v2 - 1162) <= 0x35)
          return v2 & 0xFFFFFFFE;
        if ((v2 - 1217) <= 0xD)
          return v2 + (v2 & 1) - 1;
        if ((v2 - 1232) <= 0x55)
          return v2 & 0xFFFFFFFE;
        if ((v2 - 1072) <= 0x1F)
          return (v2 - 32);
        if ((v2 & 0xFFFFFFF0) == 0x450)
          return (v2 - 80);
        if ((_DWORD)v2 == 1231)
          return 1216;
        if ((v2 - 1377) <= 0x25)
          return (v2 - 48);
        return v2;
      default:
        if (BYTE1(v2) != 30)
          return v2;
        if (v2 >> 1 <= 0xF4A)
          return v2 & 0xFFFFFFFE;
        if ((_DWORD)v2 == 7835)
          return 7776;
        if (v2 >> 5 >= 0xF5)
          return v2 & 0xFFFFFFFE;
        return v2;
    }
  }
  if (BYTE1(v2) <= 0x2Cu)
  {
    switch(BYTE1(v2))
    {
      case 0x1Fu:
        if (v2 >> 2 <= 0x7FC)
          return s_szTableUppercase1F00to1FF3[(int)v2 - 7936];
        break;
      case 0x21u:
        if ((_DWORD)v2 == 8526)
        {
          return 8498;
        }
        else if ((_DWORD)v2 == 8580)
        {
          return 8579;
        }
        break;
      case 0x2Cu:
        v4 = v2 - 11360;
        if ((v2 - 11360) > 0x16)
        {
          if ((v2 - 11392) <= 0xE || (v2 - 11499) <= 3)
            return v2 & 0xFFFFFFFE;
          if ((v2 - 11312) <= 0x2E)
            return (v2 - 48);
        }
        else
        {
          v5 = (unsigned int *)&s_szTableUppercase2C60to2C76;
          return v5[v4];
        }
        break;
      default:
        return v2;
    }
  }
  else if (BYTE1(v2) > 0xA6u)
  {
    if (BYTE1(v2) == 167)
    {
      if ((v2 - 42786) <= 0xD || (v2 - 42802) <= 0x3D)
        return v2 & 0xFFFFFFFE;
      if ((v2 - 42873) <= 3)
        return v2 + (v2 & 1) - 1;
      if ((v2 - 42878) <= 9)
        return v2 & 0xFFFFFFFE;
      if ((_DWORD)v2 == 42892)
        return 42891;
    }
    else if (BYTE1(v2) == 255 && (v2 - 65345) <= 0x19)
    {
      return (v2 - 32);
    }
  }
  else
  {
    if (BYTE1(v2) != 45)
    {
      if (BYTE1(v2) != 166 || (v2 - 42560) > 0x2D && (v2 - 42624) > 0x17)
        return v2;
      return v2 & 0xFFFFFFFE;
    }
    if ((v2 - 11520) <= 0x25)
      return (v2 - 7264);
  }
  return v2;
}

uint64_t TLocaleInfo::toLower(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  _DWORD *v5;

  v2 = a2;
  if ((int)a2 <= 127)
  {
    if ((_DWORD)a2 == 73 && *(_BYTE *)(a1 + 80))
      return 305;
    else
      return __tolower(a2);
  }
  if (!TLocaleInfo::isUpper(a1, a2))
    return v2;
  if (BYTE1(v2) <= 0x1Du)
  {
    switch(BYTE1(v2))
    {
      case 0:
        if ((_DWORD)v2 != 215 && (v2 - 192) <= 0x1E)
          return (v2 + 32);
        return v2;
      case 1:
        return s_szTableLowercase0100to024F[(int)v2 - 256];
      case 2:
        if (v2 <= 0x24F)
          return s_szTableLowercase0100to024F[(int)v2 - 256];
        return v2;
      case 3:
        v4 = v2 - 880;
        if (v2 < 0x370)
          return v2;
        v5 = s_szTableLowercase0370to03FF;
        return v5[v4];
      case 4:
      case 5:
        if ((v2 - 1120) <= 0x21 || (v2 - 1162) <= 0x35)
          return v2 | 1;
        if ((v2 - 1217) <= 0xD)
          return (v2 & 1) + v2;
        if ((v2 - 1232) <= 0x55)
          return v2 | 1;
        if ((v2 & 0xFFFFFFF0) == 0x400)
          return (v2 + 80);
        if ((v2 - 1040) <= 0x1F)
          return (v2 + 32);
        if ((_DWORD)v2 == 1216)
          return 1231;
        if ((v2 - 1329) <= 0x25)
          return (v2 + 48);
        return v2;
      case 0x10:
        if ((v2 - 4256) <= 0x25)
          return (v2 + 7264);
        return v2;
      default:
        return v2;
    }
  }
  if (BYTE1(v2) <= 0x2Bu)
  {
    switch(BYTE1(v2))
    {
      case 0x1Eu:
        if (v2 >> 1 <= 0xF4A || v2 >> 5 >= 0xF5)
          return v2 | 1;
        if ((_DWORD)v2 == 7838)
          return 223;
        break;
      case 0x1Fu:
        if (v2 <= 0x1FFC)
          return s_szTableLowercase1F00to1FFC[(int)v2 - 7936];
        break;
      case 0x21u:
        if ((_DWORD)v2 == 8498)
        {
          return 8526;
        }
        else if ((_DWORD)v2 == 8579)
        {
          return 8580;
        }
        break;
    }
  }
  else if (BYTE1(v2) > 0xA6u)
  {
    if (BYTE1(v2) == 167)
    {
      if ((v2 - 42786) <= 0xD || (v2 - 42802) <= 0x3D)
        return (v2 & 1) + v2;
      if ((v2 - 42873) <= 3)
        return v2 | 1;
      if ((v2 - 42878) <= 9)
        return (v2 & 1) + v2;
      if ((_DWORD)v2 == 42877)
      {
        return 7545;
      }
      else if ((_DWORD)v2 == 42891)
      {
        return 42892;
      }
    }
    else if (BYTE1(v2) == 255 && (v2 - 65313) <= 0x19)
    {
      return (v2 + 32);
    }
  }
  else
  {
    if (BYTE1(v2) != 44)
    {
      if (BYTE1(v2) != 166 || (v2 - 42560) > 0x2D && (v2 - 42624) > 0x17)
        return v2;
      return v2 | 1;
    }
    if (v2 >> 5 == 355)
    {
      v4 = v2 - 11360;
      v5 = s_szTableLowercase2C60to2C7F;
      return v5[v4];
    }
    else
    {
      if ((v2 - 11392) <= 0xE || (v2 - 11499) <= 3)
        return v2 | 1;
      if ((v2 - 11264) <= 0x2E)
        return (v2 + 48);
    }
  }
  return v2;
}

double TLocaleInfo::stringToFloat(uint64_t a1, __int32 *a2, BOOL *a3)
{
  double v4;
  std::wstring __p;
  _QWORD v7[12];
  char v8;
  void (__cdecl **v9)(std::wistringstream *__hidden);
  double v10;

  v10 = 0.0;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, a2);
  std::wistringstream::basic_istringstream[abi:ne180100]((uint64_t)v7, &__p, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  MEMORY[0x20BD14840](v7, &v10);
  *a3 = (*(_DWORD *)((_BYTE *)&v7[4] + *(_QWORD *)(v7[0] - 24)) & 7) != 2;
  v4 = v10;
  if (v8 < 0)
    operator delete((void *)v7[10]);
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x20BD14978](&v9);
  return v4;
}

void sub_2098976FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::wistringstream::~wistringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::wistringstream::basic_istringstream[abi:ne180100](uint64_t a1, const std::wstring *a2, int a3)
{
  uint64_t v6;

  *(_QWORD *)(a1 + 120) = &unk_24C211B68;
  v6 = a1 + 16;
  *(_QWORD *)a1 = &unk_24C211B40;
  *(_QWORD *)(a1 + 8) = 0;
  std::ios_base::init((std::ios_base *)(a1 + 120), (void *)(a1 + 16));
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  std::wstringbuf::basic_stringbuf[abi:ne180100](v6, a2, a3 | 8);
  return a1;
}

void sub_2098977C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::wistream::~wistream();
  MEMORY[0x20BD14978](v1);
  _Unwind_Resume(a1);
}

uint64_t std::wistringstream::~wistringstream(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 120;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x20BD14978](v2);
  return a1;
}

uint64_t TLocaleInfo::stringToULong(uint64_t a1, uint64_t a2, BOOL *a3, int a4)
{
  unsigned int *i;
  int v7;
  unsigned __int8 v8;
  BOOL v9;
  unsigned int v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned int v19;
  TLocaleInfo *v20;
  TLocaleInfo *v21;
  int v22;
  unsigned __int8 v23;
  uint64_t result;
  TLocaleInfo *v27;
  TLocaleInfo *v28;
  TLocaleInfo *v29;
  TLocaleInfo *v30;

  for (i = (unsigned int *)(a2 + 4); ; ++i)
  {
    v7 = *(i - 1);
    {
      v29 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v29);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v29;
    }
    if (v7 > 159)
      break;
    v9 = v7 > 0x20 || ((1 << v7) & 0x100002600) == 0;
    if (v9)
      goto LABEL_21;
LABEL_18:
    ;
  }
  if (v7 >= 12288)
  {
    if (v7 != 65279 && v7 != 12288)
      goto LABEL_21;
    goto LABEL_18;
  }
  if (v7 == 160 || v7 == 8203)
    goto LABEL_18;
LABEL_21:
  v11 = *(i - 1);
  if (!a4)
  {
    if ((v12 & 1) == 0
    {
      v28 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v28);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v28;
    }
    v13 = v11 - 48;
    if ((int)v11 >= 48)
    {
      if (v11 <= 0x39)
        goto LABEL_34;
      if (v11 >= 0x660)
      {
        LODWORD(v13) = TLocaleInfo::getDigitExtended(v13, v11);
        goto LABEL_33;
      }
    }
LABEL_83:
    result = 0;
    *a3 = 1;
    return result;
  }
  {
    v27 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v27);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v27;
  }
  LODWORD(v13) = v11 - 48;
  if ((int)v11 < 48)
    goto LABEL_83;
  if (v11 <= 0x39)
    goto LABEL_34;
  if (v11 < 0x41)
    goto LABEL_83;
  if (v11 <= 0x46)
  {
    LODWORD(v13) = v11 - 55;
    goto LABEL_34;
  }
  if (v11 - 97 >= 6)
    goto LABEL_83;
  LODWORD(v13) = v11 - 87;
LABEL_33:
  if ((_DWORD)v13 == -1)
    goto LABEL_83;
LABEL_34:
  v14 = (int)v13;
  v15 = *i;
  if (!*i)
    goto LABEL_59;
  if (a4)
    v16 = 16;
  else
    v16 = 10;
  while (2)
  {
    if (a4)
    {
      if ((v17 & 1) == 0
      {
        v20 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v20);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v20;
      }
      LODWORD(v18) = v15 - 48;
      if ((int)v15 < 48)
        break;
      if (v15 <= 0x39)
        goto LABEL_53;
      if (v15 < 0x41)
        break;
      if (v15 <= 0x46)
      {
        LODWORD(v18) = v15 - 55;
        goto LABEL_53;
      }
      if (v15 - 97 >= 6)
        break;
      LODWORD(v18) = v15 - 87;
      goto LABEL_52;
    }
    if ((v17 & 1) == 0
    {
      v21 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v21);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v21;
    }
    v18 = v15 - 48;
    if ((int)v15 >= 48)
    {
      if (v15 <= 0x39)
      {
LABEL_53:
        v14 = v14 * v16 + (int)v18;
        v19 = i[1];
        ++i;
        v15 = v19;
        if (!v19)
          break;
        continue;
      }
      if (v15 < 0x660)
        break;
      LODWORD(v18) = TLocaleInfo::getDigitExtended(v18, v15);
LABEL_52:
      if ((_DWORD)v18 == -1)
        break;
      goto LABEL_53;
    }
    break;
  }
LABEL_59:
  while (2)
  {
    v22 = *i;
    if ((v23 & 1) == 0
    {
      v30 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v30);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v30;
    }
    if (v22 <= 159)
    {
      if (v22 > 0x20 || ((1 << v22) & 0x100002600) == 0)
        goto LABEL_78;
      goto LABEL_75;
    }
    if (v22 >= 12288)
    {
      if (v22 != 65279 && v22 != 12288)
        goto LABEL_78;
LABEL_75:
      ++i;
      continue;
    }
    break;
  }
  if (v22 == 160 || v22 == 8203)
    goto LABEL_75;
LABEL_78:
  v9 = *i == 0;
  *a3 = *i != 0;
  if (v9)
    return v14;
  else
    return 0;
}

void sub_209897C78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TLocaleInfo::valueToString(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v12;
  int v13;

  v5 = a2;
  if (a4)
    v6 = 16;
  else
    v6 = 10;
  if (v6 <= a2)
  {
    v7 = 1;
    v8 = a2;
    do
    {
      v8 /= v6;
      v7 *= v6;
    }
    while (v6 <= v8);
    if (v7)
    {
      do
      {
        if (v5 / v7 >= 0xA)
          v9 = 55;
        else
          v9 = 48;
        v12 = v9 + v5 / v7;
        TBuffer<wchar_t>::insert(a3, *(_QWORD *)(a3 + 16), &v12, 1uLL);
        v5 %= v7;
        v7 /= v6;
      }
      while (v7 > 1);
    }
  }
  if (v5 >= 0xA)
    v10 = 55;
  else
    v10 = 48;
  v13 = v10 + v5;
  return TBuffer<wchar_t>::insert(a3, *(_QWORD *)(a3 + 16), &v13, 1uLL);
}

void `virtual thunk to'std::wistringstream::~wistringstream(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[103] < 0)
    operator delete(*((void **)v1 + 10));
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  JUMPOUT(0x20BD14978);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[103] < 0)
    operator delete(*((void **)v1 + 10));
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x20BD14978](v1 + 120);
  JUMPOUT(0x20BD149A8);
}

void std::wistringstream::~wistringstream(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 120;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x20BD14978](v1);
  JUMPOUT(0x20BD149A8);
}

uint64_t std::wstringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::wstring *a2, int a3)
{
  uint64_t v6;

  v6 = std::wstreambuf::basic_streambuf();
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::wstring::operator=((std::wstring *)(v6 + 64), a2);
  std::wstringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_209897FF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::wstreambuf::~wstreambuf();
  _Unwind_Resume(a1);
}

void std::wstringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::wstring *v2;
  char v3;
  std::wstring *v4;
  unint64_t v5;
  int v6;
  char *v7;
  std::wstring::size_type v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::wstring *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::wstring **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    v7 = (char *)v4 + 4 * v5;
    *(_QWORD *)(a1 + 88) = v7;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v7;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + 4 * v5;
    v8 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 4;
    std::wstring::resize(v2, v8, 0);
    v9 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + 4 * v9;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v10 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v11 = (v10 + ((v5 - 0x80000000 - v10) >> 1)) >> 30;
        v4 = (std::wstring *)((char *)v4 + 0x1FFFFFFFCLL * v11 + 0x1FFFFFFFCLL);
        v5 = v5 - 0x7FFFFFFF - 0x7FFFFFFF * v11;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + 4 * v5;
    }
  }
}

void MrecInitModule_voc_voc(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugVocGetPics)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugVocGetPics", (const char *)&unk_209A75B12, (const char *)&unk_209A75B12, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugVocGetPics = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugVocGetPics);
  }
}

void Voc::Voc(Voc *this, __int16 a2)
{
  SvcCompatData::SvcCompatData((Voc *)((char *)this + 40));
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  FileSpec::FileSpec((Voc *)((char *)this + 104));
  FileHistory::FileHistory((Voc *)((char *)this + 144));
  PhnMgr::PhnMgr((Voc *)((char *)this + 184));
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::HashProbeKEV((uint64_t)this + 312, 0, 16);
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  MrecTime::MrecTime((Voc *)((char *)this + 416));
  DgnString::DgnString((Voc *)((char *)this + 448));
  DgnString::DgnString((Voc *)((char *)this + 464));
  DgnString::DgnString((Voc *)((char *)this + 488));
  DgnString::DgnString((Voc *)((char *)this + 504));
  DFileProgressInfo::DFileProgressInfo((Voc *)((char *)this + 520));
  *((_WORD *)this + 84) = a2;
  *((_DWORD *)this + 66) = 0;
  *((_BYTE *)this + 288) = 0;
  *(_QWORD *)((char *)this + 170) = 0;
  *((_QWORD *)this + 31) = 0;
  *(_QWORD *)((char *)this + 253) = 0;
  *((_DWORD *)this + 77) = 0;
  *(_QWORD *)((char *)this + 300) = 0;
  *(_QWORD *)((char *)this + 292) = 0;
  *((_QWORD *)this + 43) = this;
  *((_QWORD *)this + 54) = this;
  *((_BYTE *)this + 178) = 0;
  *((_QWORD *)this + 15) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 32) = -1;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 110) = 0;
  *((_DWORD *)this + 120) = 0;
  *((_DWORD *)this + 152) = 0;
}

void sub_2098982FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, SvcCompatData *a10, FileHistory *a11, FileSpec *a12)
{
  DgnString *v12;
  uint64_t v13;
  uint64_t v14;
  DgnString *v15;
  DgnString *v16;
  PhnMgr *v17;
  DgnString *v18;
  DgnString *v19;

  DgnString::~DgnString(v16);
  DgnString::~DgnString(v15);
  DgnString::~DgnString(v12);
  DgnString::~DgnString(v19);
  DgnString::~DgnString(v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14 + 400);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14 + 384);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14 + 368);
  DgnIArray<Utterance *>::~DgnIArray(v14 + 352);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14 + 328);
  MrecInitModule_sdpres_sdapi();
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14 + 272);
  PhnMgr::~PhnMgr(v17);
  FileHistory::~FileHistory(a11);
  FileSpec::~FileSpec(a12);
  DgnIOwnArray<WordNgramTemplate *>::releaseAll(v13);
  SvcCompatData::SvcCompatData(a10);
  _Unwind_Resume(a1);
}

void sub_2098983BC()
{
  JUMPOUT(0x209898348);
}

void sub_2098983C4()
{
  JUMPOUT(0x209898384);
}

void sub_2098983CC()
{
  JUMPOUT(0x209898394);
}

void sub_2098983D4()
{
  JUMPOUT(0x20989839CLL);
}

void sub_2098983DC()
{
  JUMPOUT(0x2098983A4);
}

void Voc::~Voc(Voc *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  DSMSetData **v10;

  if (*((_WORD *)this + 85))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 196, (uint64_t)"voc/voc", 1, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete voc");
  if (*((_WORD *)this + 86))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 200, (uint64_t)"voc/voc", 1, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete voc");
  if (*((_WORD *)this + 87))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 203, (uint64_t)"voc/voc", 1, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete voc");
  if (*((_WORD *)this + 88))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 206, (uint64_t)"voc/voc", 1, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete voc");
  if (*((_DWORD *)this + 62))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 210, (uint64_t)"voc/voc", 1, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete voc");
  if (*((_DWORD *)this + 63))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 214, (uint64_t)"voc/voc", 1, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete voc");
  if (*((_DWORD *)this + 64))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 218, (uint64_t)"voc/voc", 1, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete voc");
  DgnDelete<RuleMgr>(*((RuleMgr **)this + 8));
  *((_QWORD *)this + 8) = 0;
  DgnDelete<StateMgr>(*((StateMgr **)this + 7));
  *((_QWORD *)this + 7) = 0;
  DgnDelete<EnvMgr>(*(EnvMgr **)this);
  *(_QWORD *)this = 0;
  DgnDelete<CharInfo>(*((_QWORD *)this + 1));
  *((_QWORD *)this + 1) = 0;
  DgnDelete<CollMgr>(*((CollMgr **)this + 2));
  *((_QWORD *)this + 2) = 0;
  DgnDelete<PronCollMgr>(*((PronCollMgr **)this + 3));
  *((_QWORD *)this + 3) = 0;
  v9 = (_QWORD *)*((_QWORD *)this + 9);
  if (v9)
  {
    (*(void (**)(_QWORD))*v9)(*((_QWORD *)this + 9));
    MemChunkFree(v9, 0);
  }
  *((_QWORD *)this + 9) = 0;
  DgnDelete<WordList>(*((WordList **)this + 6));
  *((_QWORD *)this + 6) = 0;
  DgnDelete<CharInfo>(*((_QWORD *)this + 4));
  *((_QWORD *)this + 4) = 0;
  v10 = (DSMSetData **)*((_QWORD *)this + 15);
  if (v10)
    DgnSharedMemSet::unrefDSMEx(v10, *((unsigned int *)this + 32));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 560);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 544);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 528);
  DgnString::~DgnString((Voc *)((char *)this + 504));
  DgnString::~DgnString((Voc *)((char *)this + 488));
  DgnString::~DgnString((Voc *)((char *)this + 464));
  DgnString::~DgnString((Voc *)((char *)this + 448));
  DgnString::~DgnString((Voc *)((char *)this + 416));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 400);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 384);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 368);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 352);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  MrecInitModule_sdpres_sdapi();
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 272);
  PhnMgr::~PhnMgr((Voc *)((char *)this + 184));
  FileHistory::~FileHistory((Voc *)((char *)this + 144));
  FileSpec::~FileSpec((Voc *)((char *)this + 104));
  DgnIOwnArray<WordNgramTemplate *>::releaseAll((uint64_t)this + 80);
  SvcCompatData::SvcCompatData((Voc *)((char *)this + 40));
}

CollMgr *DgnDelete<CollMgr>(CollMgr *result)
{
  _QWORD *v1;

  if (result)
  {
    CollMgr::~CollMgr(result);
    return (CollMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

PronCollMgr *DgnDelete<PronCollMgr>(PronCollMgr *result)
{
  _QWORD *v1;

  if (result)
  {
    PronCollMgr::~PronCollMgr(result);
    return (PronCollMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

WordList *DgnDelete<WordList>(WordList *result)
{
  _QWORD *v1;

  if (result)
  {
    WordList::~WordList(result);
    return (WordList *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t Voc::computePrefLmScores(Voc *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t CollWords;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void **v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  _WORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;

  v35 = 0;
  v36 = 0;
  v9 = *((_DWORD *)this + 66);
  if (!v9)
  {
    v20 = *(unsigned int *)(*((_QWORD *)this + 6) + 388);
    v21 = (_QWORD *)((char *)this + 272);
    v22 = *((_DWORD *)this + 71);
    if (v20 <= v22)
    {
      *((_DWORD *)this + 70) = v20;
      if (!(_DWORD)v20)
      {
LABEL_25:
        v11 = &v35;
        goto LABEL_26;
      }
    }
    else
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 272, v20 - v22, 0);
      *((_DWORD *)this + 70) = v20;
    }
    v23 = 0;
    do
    {
      v24 = *((_QWORD *)this + 6);
      if (v23 < *(unsigned int *)(v24 + 388) && *(_BYTE *)(*(_QWORD *)(v24 + 104) + v23))
      {
        v25 = v36;
        if (v36 == (unint64_t)HIDWORD(v36))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v35, 1, 1);
          v25 = v36;
        }
        *(_DWORD *)(v35 + 4 * v25) = v23;
        LODWORD(v36) = v36 + 1;
      }
      else
      {
        *(_WORD *)(*v21 + 2 * v23) = 20000;
      }
      ++v23;
    }
    while (v20 != v23);
    goto LABEL_25;
  }
  CollWords = StateMgr::getCollWords(*((StateMgr **)this + 7), v9, 0xFFFFu, 1, a5, a6, a7, a8);
  v11 = (uint64_t *)CollWords;
  v12 = *(unsigned int *)(CollWords + 8);
  if (!(_DWORD)v12)
  {
    v18 = (void **)((char *)this + 272);
    v19 = *((_DWORD *)this + 71);
    v17 = 1;
    if (v19)
    {
LABEL_14:
      *((_DWORD *)this + 70) = v17;
      goto LABEL_15;
    }
LABEL_13:
    DgnPrimArray<short>::reallocElts((uint64_t)v18, v17 - v19, 0);
    goto LABEL_14;
  }
  v13 = 0;
  v14 = *(unsigned int **)CollWords;
  do
  {
    v16 = *v14++;
    v15 = v16;
    if (v13 <= v16)
      v13 = v15;
    --v12;
  }
  while (v12);
  v17 = v13 + 1;
  v18 = (void **)((char *)this + 272);
  v19 = *((_DWORD *)this + 71);
  if (v19 < v13 + 1)
    goto LABEL_13;
  *((_DWORD *)this + 70) = v17;
  if (v13 != -1)
LABEL_15:
    memset_pattern16(*v18, &unk_209A75B40, 2 * v17);
LABEL_26:
  if (*((_DWORD *)v11 + 2))
  {
    v34[0] = 0;
    v34[1] = 0;
    (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**((_QWORD **)this + 9) + 520))(*((_QWORD *)this + 9), v11, v34);
    v26 = *((unsigned int *)v11 + 2);
    if ((_DWORD)v26)
    {
      v27 = (unsigned int *)*v11;
      v28 = (_WORD *)v34[0];
      v29 = **((_DWORD **)this + 4);
      v30 = *((_QWORD *)this + 34);
      do
      {
        v32 = *v27++;
        v31 = v32;
        LOWORD(v32) = *v28++;
        *(_WORD *)(v30 + 2 * v31) = v32 + v29;
        --v26;
      }
      while (v26);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v34);
  }
  *((_BYTE *)this + 260) = 1;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v35);
}

void sub_209898990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *Voc::notifyPrefLmScoresBad(Voc *this)
{
  _QWORD *result;

  *((_BYTE *)this + 260) = 0;
  result = (_QWORD *)*((_QWORD *)this + 34);
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *((_QWORD *)this + 34) = 0;
  }
  *((_QWORD *)this + 35) = 0;
  return result;
}

uint64_t Voc::getPrefPron(uint64_t this, unsigned int a2, const unsigned __int16 **a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;

  *a3 = (const unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(this + 48) + 72)
                                 + 2 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(this + 48) + 48) + 4 * a2));
  v4 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(this + 48) + 32) + 2 * a2);
  *a4 = v4;
  v5 = *(_DWORD *)(this + 300);
  if (v5 < v4 && v5 != 0)
    v4 = *(_DWORD *)(this + 300);
  *a4 = v4;
  return this;
}

uint64_t Voc::computePrefWordIdsSortedByPron(Voc *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t CollWords;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t i;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  CollWords = StateMgr::getCollWords(*((StateMgr **)this + 7), *((_DWORD *)this + 76), 0xFFFFu, 1, a5, a6, a7, a8);
  v17 = 0;
  v18 = 0;
  v10 = *(unsigned int *)(CollWords + 8);
  if ((_DWORD)v10)
  {
    v11 = CollWords;
    v12 = 0;
    v13 = 0;
    for (i = 0; i < v10; ++i)
    {
      v15 = *(unsigned int *)(*(_QWORD *)v11 + 4 * i);
      if (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 32) + 2 * v15))
      {
        if (v13 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v13 = v18;
          v12 = v17;
        }
        *(_DWORD *)(v12 + 4 * v13) = v15;
        v13 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v10 = *(unsigned int *)(v11 + 8);
      }
    }
  }
  PrefiltererWordIdPronCollArray::addArray((unsigned int *)this + 104, (uint64_t)&v17);
  *((_BYTE *)this + 288) = 1;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
}

void sub_209898B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *Voc::notifyPrefWordIdsSortedByPronBad(Voc *this)
{
  PrefiltererWordIdPronCollArray *v2;

  *((_BYTE *)this + 288) = 0;
  v2 = (Voc *)((char *)this + 416);
  PrefiltererWordIdPronCollArray::removeAll((uint64_t)this + 416);
  PrefiltererWordIdPronCollArray::compact(v2);
  return Voc::clearPrefPicModels(this);
}

_QWORD *Voc::clearPrefPicModels(Voc *this)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;

  *((_DWORD *)this + 78) = 0;
  if (*((_DWORD *)this + 84))
  {
    v2 = 0;
    v3 = *((_QWORD *)this + 41);
    do
      *(_DWORD *)(v3 + 4 * v2++) = -1;
    while (v2 < *((unsigned int *)this + 84));
  }
  v4 = (_QWORD *)*((_QWORD *)this + 44);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((_QWORD *)this + 44) = 0;
  }
  *((_QWORD *)this + 45) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 46);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((_QWORD *)this + 46) = 0;
  }
  *((_QWORD *)this + 47) = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 48);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((_QWORD *)this + 48) = 0;
  }
  *((_QWORD *)this + 49) = 0;
  result = (_QWORD *)*((_QWORD *)this + 50);
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *((_QWORD *)this + 50) = 0;
  }
  *((_QWORD *)this + 51) = 0;
  return result;
}

void Voc::loadPrefLmScores(Voc *this, char **a2, DFileChecksums *a3)
{
  uint64_t v6;
  uint64_t v7;
  DgnStream *v8;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t CurrentSubDirComponents;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  v22 = 0;
  v8 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x40u, 1, "MRPRLM!?", (_DWORD *)&v22 + 1, &v22);
  if (HIDWORD(v22) == 17 && (_DWORD)v22 == 2)
  {
    MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRPRLM!?", 17, 2, 23, 4, v6, v7);
    v21 = 0;
    v14 = (_QWORD *)((char *)this + 272);
    readObject<short>(v8, (uint64_t)this + 272, &v21);
    v20 = 0;
    readObject((uint64_t)v8, &v20, &v21);
    readObjectChecksumAndVerify(v8, v21);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents((DFile *)a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x40u, v21);
    if (v8)
    {
      (**(void (***)(DgnStream *))v8)(v8);
      MemChunkFree(v8, 0);
    }
    *((_BYTE *)this + 260) = 0;
    v16 = (_QWORD *)*((_QWORD *)this + 34);
    if (v16)
    {
      MemChunkFree(v16, 0);
      *v14 = 0;
    }
    *((_QWORD *)this + 35) = 0;
    goto LABEL_26;
  }
  v10 = HIDWORD(v22) == 23 && (_DWORD)v22 == 3;
  v11 = v10;
  if (v10)
  {
    v12 = 23;
    v13 = 3;
  }
  else
  {
    if (*((_DWORD *)a2 + 6))
      v17 = a2[2];
    else
      v17 = (char *)&unk_209A75B12;
    MrecHeaderCheckVersions(v17, "MRPRLM!?", HIDWORD(v22), v22, 0x17u, 4u);
    v13 = v22;
    v12 = HIDWORD(v22);
  }
  MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRPRLM!?", v12, v13, 23, 4, v6, v7);
  v21 = 0;
  readObject((uint64_t)v8, (_DWORD *)this + 66, &v21);
  v14 = (_QWORD *)((char *)this + 272);
  readObject<short>(v8, (uint64_t)this + 272, &v21);
  v20 = 0;
  readObjectChecksumAndVerify(v8, v21);
  v18 = DFile::getCurrentSubDirComponents((DFile *)a2);
  DFileChecksums::addChecksum((uint64_t)a3, v18, 0x40u, v21);
  if (v8)
  {
    (**(void (***)(DgnStream *))v8)(v8);
    MemChunkFree(v8, 0);
  }
  *((_BYTE *)this + 260) = *((_DWORD *)this + 70) != 0;
  if (v11)
  {
LABEL_26:
    *((_DWORD *)this + 66) = 0;
    *((_BYTE *)this + 260) = 0;
    v19 = (_QWORD *)*((_QWORD *)this + 34);
    if (v19)
    {
      MemChunkFree(v19, 0);
      *v14 = 0;
    }
    *((_QWORD *)this + 35) = 0;
  }
}

void Voc::savePrefLmScores(Voc *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v7;
  uint64_t CurrentSubDirComponents;
  int v9;

  v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x40u, a4, "MRPRLM!?", 23, 4);
  v9 = 0;
  writeObject((uint64_t)v7, (int *)this + 66, &v9);
  writeObject<short>((uint64_t)v7, (uint64_t)this + 272, &v9);
  writeObjectChecksum((uint64_t)v7, &v9);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x40u, v9);
  if (v7)
  {
    (**(void (***)(DgnStream *))v7)(v7);
    MemChunkFree(v7, 0);
  }
}

void Voc::loadPrefWordIdsSortedByPron(Voc *this, DFile *a2, DFileChecksums *a3)
{
  uint64_t v6;
  uint64_t v7;
  DgnStream *v8;
  int v9;
  BOOL v10;
  _BOOL4 v11;
  BOOL v12;
  BOOL v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  uint64_t CurrentSubDirComponents;
  int v19;
  unsigned int v20;
  uint64_t v21;

  v21 = 0;
  v8 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x48u, 1, "MRPRWD!?", (_DWORD *)&v21 + 1, &v21);
  v9 = v21;
  v10 = (v21 & 0xFFFFFFFE) == 2;
  v11 = (v21 & 0xFFFFFFFE) == 2 && HIDWORD(v21) == 23;
  if ((_DWORD)v21 == 4)
    v10 = 1;
  v12 = HIDWORD(v21) == 23 && v10;
  v13 = (_DWORD)v21 == 2 && HIDWORD(v21) == 23;
  if (v12)
  {
    v14 = 23;
  }
  else
  {
    if (*((_DWORD *)a2 + 6))
      v15 = (char *)*((_QWORD *)a2 + 2);
    else
      v15 = (char *)&unk_209A75B12;
    MrecHeaderCheckVersions(v15, "MRPRWD!?", HIDWORD(v21), v21, 0x18u, 5u);
    v9 = v21;
    v14 = HIDWORD(v21);
  }
  MrecHeaderCheckLatestVersionIfShared(a2, "MRPRWD!?", v14, v9, 24, 5, v6, v7);
  v20 = 0;
  if (!v13)
  {
    v19 = 0;
    readObject((uint64_t)v8, &v19, &v20);
    v16 = v19 - 1;
    if ((v19 - 2) >= 4)
      v16 = 0;
    *((_DWORD *)this + 73) = v16;
  }
  if (!v12)
  {
    v19 = 0;
    readObject((uint64_t)v8, &v19, &v20);
    v17 = v19 - 1;
    if ((v19 - 2) >= 3)
      v17 = 0;
    *((_DWORD *)this + 74) = v17;
  }
  readObject((uint64_t)v8, (_DWORD *)this + 75, &v20);
  readObject((uint64_t)v8, (_DWORD *)this + 76, &v20);
  if (!v13)
  {
    readObject((uint64_t)v8, (_DWORD *)this + 77, &v20);
    readObject<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>(v8, (_DWORD *)this + 78, &v20);
    readObject<OpaquePelIdAndDurId>((uint64_t)v8, (uint64_t)this + 352, &v20);
    readObject<unsigned short>(v8, (uint64_t)this + 368, &v20);
    readObject<unsigned int>(v8, (uint64_t)this + 384, &v20);
    readObject<unsigned int>(v8, (uint64_t)this + 400, &v20);
  }
  PrefiltererWordIdPronCollArray::readObject((Voc *)((char *)this + 416), v8, &v20);
  readObjectChecksumAndVerify(v8, v20);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x48u, v20);
  if (v8)
  {
    (**(void (***)(DgnStream *))v8)(v8);
    MemChunkFree(v8, 0);
  }
  *((_BYTE *)this + 288) = 1;
  if (v11)
  {
    *((_DWORD *)this + 76) = 0;
    Voc::notifyPrefWordIdsSortedByPronBad(this);
  }
}

void readObject<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>(DgnStream *a1, _DWORD *a2, unsigned int *a3)
{
  readObject((uint64_t)a1, a2, a3);
  readObject((uint64_t)a1, a2 + 1, a3);
  readObject((uint64_t)a1, a2 + 2, a3);
  readObject<unsigned int>(a1, (uint64_t)(a2 + 4), a3);
}

uint64_t readObject<OpaquePelIdAndDurId>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v11 = 0;
  result = readObject(a1, &v11, a3);
  v7 = v11;
  v8 = *(_DWORD *)(a2 + 12);
  if (v11 <= v8)
  {
    *(_DWORD *)(a2 + 8) = v11;
    if (!v7)
      return result;
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a2, v11 - v8, 0);
    *(_DWORD *)(a2 + 8) = v7;
  }
  v9 = 0;
  v10 = 0;
  do
  {
    result = readObject(a1, (unsigned __int16 *)(*(_QWORD *)a2 + v9), a3);
    ++v10;
    v9 += 4;
  }
  while (v10 < *(unsigned int *)(a2 + 8));
  return result;
}

void Voc::savePrefWordIdsSortedByPron(Voc *this, DFile *a2, DFileChecksums *a3, int a4)
{
  DgnStream *v7;
  DgnStream *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t CurrentSubDirComponents;
  int v14;
  int v15;
  unsigned int v16;

  v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x48u, a4, "MRPRWD!?", 24, 5);
  v8 = v7;
  v9 = *((_DWORD *)this + 73);
  if (v9 < 5)
    v10 = v9 + 1;
  else
    v10 = 0;
  v15 = v10;
  v16 = 0;
  writeObject((uint64_t)v7, &v15, &v16);
  v11 = *((_DWORD *)this + 74);
  if (v11 < 4)
    v12 = v11 + 1;
  else
    v12 = 0;
  v14 = v12;
  writeObject((uint64_t)v8, &v14, &v16);
  writeObject((uint64_t)v8, (int *)this + 75, &v16);
  writeObject((uint64_t)v8, (int *)this + 76, &v16);
  writeObject((uint64_t)v8, (int *)this + 77, &v16);
  writeObject<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>((uint64_t)v8, (int *)this + 78, &v16);
  writeObject<OpaquePelIdAndDurId>((uint64_t)v8, (uint64_t)this + 352, &v16);
  writeObject<unsigned short>((uint64_t)v8, (uint64_t)this + 368, &v16);
  writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 384, &v16);
  writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 400, &v16);
  PrefiltererWordIdPronCollArray::writeObject((Voc *)((char *)this + 416), v8, &v16);
  writeObjectChecksum((uint64_t)v8, (int *)&v16);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x48u, v16);
  if (v8)
  {
    (**(void (***)(DgnStream *))v8)(v8);
    MemChunkFree(v8, 0);
  }
}

uint64_t writeObject<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>(uint64_t a1, int *a2, _DWORD *a3)
{
  int v7;
  int v8;
  int v9;

  v9 = *a2;
  writeObject(a1, &v9, a3);
  v8 = a2[1];
  writeObject(a1, &v8, a3);
  v7 = a2[2];
  writeObject(a1, &v7, a3);
  return writeObject<unsigned int>(a1, (uint64_t)(a2 + 4), a3);
}

uint64_t writeObject<OpaquePelIdAndDurId>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject(a1, (unsigned __int16 *)(*(_QWORD *)a2 + v7), a3);
      ++v8;
      v7 += 4;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void Voc::loadAndDiscardReproData(Voc *this, DFile *a2)
{
  _BYTE v3[232];

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v3);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v3, (uint64_t)a2, 0x4Cu, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v3, "ReproData");
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v3);
}

void sub_209899518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va);
  _Unwind_Resume(a1);
}

void Voc::loadAndDiscardReproResult(Voc *this, DFile *a2)
{
  uint64_t FileVersion;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[232];

  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v6);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v6, (uint64_t)a2, 0x4Du, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v6, "ResultData");
  FileVersion = DgnTextFile::getFileVersion((DgnTextFile *)v6);
  if ((_DWORD)FileVersion != 19 || (HIDWORD(FileVersion) - 5) >= 7)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 692, (uint64_t)"voc/voc", 31, (uint64_t)"%s", v4, v5, (char)&errStr_voc_voc_E_RSD_PRESENT);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v6);
}

void sub_2098995D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va);
  _Unwind_Resume(a1);
}

uint64_t Voc::getVocSvcCompatibility(Voc *this, DFile *a2, DFile *a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;
  void *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int v32;
  int v33;
  int v34;
  int v35;

  v3 = (int)a3;
  if ((DFile::subFileExists((uint64_t)this, 0x2Fu) & 1) != 0)
  {
    v8 = DFile::subFileExists((uint64_t)this, 0x51u);
    v11 = v8;
    if (a2)
    {
      v12 = DFile::subFileExists((uint64_t)a2, 0x51u);
      if ((v11 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      v12 = 0;
      if ((v8 & 1) != 0)
      {
LABEL_4:
        SvcCompatData::SvcCompatData((SvcCompatData *)&v34);
        SvcCompatData::loadSvcCompatData((SvcCompatData *)&v34, this, 0);
        if (v34 != 2)
        {
          if (v34 != 1)
          {
            if (v34)
            {
              if (v3)
              {
                if (*((_DWORD *)this + 6))
                  v24 = (void *)*((_QWORD *)this + 2);
                else
                  v24 = &unk_209A75B12;
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 837, (uint64_t)"voc/voc", 18, (uint64_t)"%.500s", v13, v14, (char)v24);
              }
              goto LABEL_77;
            }
            if (a2)
              v15 = 3;
            else
              v15 = 1;
            if (!a2 || !v3)
              goto LABEL_78;
            if (*((_DWORD *)this + 6))
              v16 = (void *)*((_QWORD *)this + 2);
            else
              v16 = &unk_209A75B12;
            v27 = "%.500s %.500s";
            v28 = 20;
            v29 = 758;
            goto LABEL_76;
          }
          if (a2)
          {
            v23 = v12 & v3;
            if (v12)
              v15 = 3;
            else
              v15 = 4;
            if (v23 != 1)
              goto LABEL_78;
            if (*((_DWORD *)this + 6))
              v16 = (void *)*((_QWORD *)this + 2);
            else
              v16 = &unk_209A75B12;
            v27 = "%.500s %.500s";
            v28 = 19;
            v29 = 781;
            goto LABEL_76;
          }
          if (v3)
          {
            v25 = 772;
            if (!*((_DWORD *)this + 6))
              goto LABEL_61;
            goto LABEL_58;
          }
          goto LABEL_63;
        }
        if (!a2)
        {
          if (v3)
          {
            v25 = 795;
            if (!*((_DWORD *)this + 6))
            {
LABEL_61:
              v26 = &unk_209A75B12;
              goto LABEL_62;
            }
LABEL_58:
            v26 = (void *)*((_QWORD *)this + 2);
LABEL_62:
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", v25, (uint64_t)"voc/voc", 21, (uint64_t)"%.500s", v13, v14, (char)v26);
          }
LABEL_63:
          v15 = 2;
LABEL_78:
          SvcCompatData::SvcCompatData((SvcCompatData *)&v34);
          return v15;
        }
        if ((v12 & 1) == 0)
        {
          if (!v3)
          {
LABEL_77:
            v15 = 3;
            goto LABEL_78;
          }
          if (*((_DWORD *)this + 6))
            v16 = (void *)*((_QWORD *)this + 2);
          else
            v16 = &unk_209A75B12;
          v27 = "%.500s %.500s";
          v28 = 19;
          v29 = 804;
LABEL_76:
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", v29, (uint64_t)"voc/voc", v28, (uint64_t)v27, v13, v14, (char)v16);
          goto LABEL_77;
        }
        SvcCompatData::SvcCompatData((SvcCompatData *)&v32);
        SvcCompatData::loadSvcCompatData((SvcCompatData *)&v32, a2, 0);
        if (v32 == 3)
        {
          if (v35 == v33)
            v15 = 0;
          else
            v15 = 3;
          if (v35 == v33 || !v3)
            goto LABEL_87;
          if (*((_DWORD *)this + 6))
            v22 = (void *)*((_QWORD *)this + 2);
          else
            v22 = &unk_209A75B12;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 824, (uint64_t)"voc/voc", 17, (uint64_t)"%.500s %.500s", v20, v21, (char)v22);
        }
        else if (v3)
        {
          if (*((_DWORD *)a2 + 6))
            v30 = (void *)*((_QWORD *)a2 + 2);
          else
            v30 = &unk_209A75B12;
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 814, (uint64_t)"voc/voc", 18, (uint64_t)"%.500s", v20, v21, (char)v30);
        }
        v15 = 3;
LABEL_87:
        SvcCompatData::SvcCompatData((SvcCompatData *)&v32);
        goto LABEL_78;
      }
    }
    v18 = v12 ^ 1;
    if (!a2)
      v18 = 1;
    if (v18)
      v15 = 4;
    else
      v15 = 3;
    if ((v18 & 1) == 0 && v3)
    {
      if (*((_DWORD *)this + 6))
        v19 = (void *)*((_QWORD *)this + 2);
      else
        v19 = &unk_209A75B12;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 741, (uint64_t)"voc/voc", 19, (uint64_t)"%.500s %.500s", v9, v10, (char)v19);
      return 3;
    }
  }
  else
  {
    if (a2)
      v15 = 3;
    else
      v15 = 1;
    if (a2 && v3)
    {
      if (*((_DWORD *)this + 6))
        v17 = (void *)*((_QWORD *)this + 2);
      else
        v17 = &unk_209A75B12;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 715, (uint64_t)"voc/voc", 19, (uint64_t)"%.500s %.500s", v6, v7, (char)v17);
      return 3;
    }
  }
  return v15;
}

void sub_209899A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  SvcCompatData::SvcCompatData((SvcCompatData *)va);
  _Unwind_Resume(a1);
}

_QWORD *Voc::loadVoc(Voc *this, DFile *a2, DFile *a3, DgnSharedMemSet *a4, uint64_t a5, uint64_t a6, int a7, char a8, BOOL *a9, DFileChecksums *a10, BOOL *a11)
{
  DFile *v19;
  DFile *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t WordListInTextFormat;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  EnvMgr *v29;
  uint64_t *v30;
  CharInfo *v31;
  uint64_t *v32;
  CollMgr *v33;
  uint64_t *v34;
  unsigned int **v35;
  uint64_t *v36;
  VocCompatData *v37;
  uint64_t *v38;
  WordList *v39;
  uint64_t *v40;
  uint64_t v41;
  DFileChecksums *v42;
  DgnSharedMemStream *v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int32 v53;
  uint64_t *v54;
  unsigned int v55;
  char v56;
  void *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  StateMgr *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *SubFileExtensionString;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  BOOL v86[8];
  unsigned int v87;
  int v88;
  __int16 v89;
  int v90;
  int v91;
  int64x2_t v92;
  int64x2_t v93;
  int v94;
  int v95;
  BOOL v96;
  uint64_t *v97;
  int v98;
  int64x2_t v99;
  int64x2_t v100;

  v99 = 0u;
  v100 = 0u;
  SnapTime::recordTime((SnapTime *)&v99, 1, 1, 1, 1);
  EnvHolder::errorIfFileObviouslyIsNotOfTypeVoc(a2, v19);
  *((_QWORD *)this + 6) = 0;
  if ((a8 & 1) != 0)
  {
    if (a3)
    {
      if (*((_DWORD *)a3 + 6))
        v23 = (void *)*((_QWORD *)a3 + 2);
      else
        v23 = &unk_209A75B12;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 866, (uint64_t)"voc/voc", 22, (uint64_t)"%.500s %.500s", v21, v22, (char)v23);
      *((_QWORD *)this + 12) = a6;
      v24 = (_QWORD *)((char *)this + 96);
      goto LABEL_14;
    }
    *((_QWORD *)this + 12) = a6;
    v24 = (_QWORD *)((char *)this + 96);
    if (!a6)
    {
LABEL_11:
      v91 = 1;
      goto LABEL_17;
    }
LABEL_10:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 872, (uint64_t)"voc/voc", 28, (uint64_t)"%lld %.500s", v21, v22, a6);
    goto LABEL_11;
  }
  Voc::getVocSvcCompatibility(a2, a3, (DFile *)1);
  *((_QWORD *)this + 12) = a6;
  v24 = (_QWORD *)((char *)this + 96);
  if (!a3 && a6)
    goto LABEL_10;
  if (!a3)
    goto LABEL_11;
LABEL_14:
  if (a6 <= -2)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 877, (uint64_t)"voc/voc", 27, (uint64_t)"%lld %.500s %.500s", v21, v22, a6);
  v91 = 0;
LABEL_17:
  if (a7)
    *v24 = 0;
  WordListInTextFormat = WordList::willLoadWordListInTextFormat(a2, v20);
  if ((_DWORD)WordListInTextFormat
    && *((_DWORD *)this + 32) != -1
    && *(_DWORD *)(DgnSharedMemSet::getSetCacheDir(*((DgnSharedMemSet **)this + 15)) + 8) <= 1u)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 884, (uint64_t)"voc/voc", 32, (uint64_t)"%s", v26, v27, (char)&errStr_voc_voc_E_VOC_UNSHARABLE);
  }
  v28 = MemChunkAlloc(0x110uLL, 0);
  v29 = EnvMgr::EnvMgr((EnvMgr *)v28, 2u);
  *(_QWORD *)this = v29;
  EnvMgr::loadEnvMgr(v29, a2, a10);
  v30 = MemChunkAlloc(4uLL, 0);
  CharInfo::CharInfo((CharInfo *)v30);
  *((_QWORD *)this + 1) = v31;
  CharInfo::loadCharInfo(v31, (char **)a2, a10, WordListInTextFormat);
  v32 = MemChunkAlloc(0x148uLL, 0);
  v33 = CollMgr::CollMgr((CollMgr *)v32, *((const CharInfo **)this + 1));
  *((_QWORD *)this + 2) = v33;
  CollMgr::loadCollMgr(v33, (char **)a2, a10, WordListInTextFormat);
  PhnMgr::loadPhnMgr((Voc *)((char *)this + 184), (char **)a2, a10, WordListInTextFormat);
  v34 = MemChunkAlloc(0x18uLL, 0);
  v35 = (unsigned int **)TRegExp::TRegExp(v34, (uint64_t)this + 184);
  *((_QWORD *)this + 3) = v35;
  PronCollMgr::loadPronCollMgr(v35, (char **)a2, a10, WordListInTextFormat);
  v36 = MemChunkAlloc(0x10uLL, 0);
  DgnString::DgnString((DgnString *)v36);
  *((_QWORD *)this + 4) = v37;
  VocCompatData::loadVocCompatData(v37, (char **)a2, a10, WordListInTextFormat);
  v38 = MemChunkAlloc(0x290uLL, 0);
  v39 = WordList::WordList((WordList *)v38, *((CollMgr **)this + 2), *((const PronCollMgr **)this + 3), (Voc *)((char *)this + 184));
  *((_QWORD *)this + 6) = v39;
  WordList::loadWordList(v39, a2, a10);
  DgnIOwnArray<HashKEV<unsigned int,unsigned int,StateIdScope> *>::DgnIOwnArray(&v97, 1);
  if (a4)
  {
    v40 = MemChunkAlloc(0x50uLL, 0);
    v41 = DgnSharedMemStream::DgnSharedMemStream(v40, a4, a5, 0);
    *v97 = v41;
  }
  v96 = 0;
  v42 = (DFileChecksums *)*v97;
  if (*((_DWORD *)this + 32) == -1)
    v43 = 0;
  else
    v43 = (DgnSharedMemStream *)(*(_DWORD *)(DgnSharedMemSet::getSetCacheDir(*((DgnSharedMemSet **)this + 15)) + 8) < 2u);
  HIBYTE(v89) = a8;
  LOBYTE(v89) = a7;
  v44 = LanguageModel::CreateAndLoadLanguageModel(a2, a3, a10, v42, v43, WordListInTextFormat, 1, 0, *(_DWORD *)(*((_QWORD *)this + 4) + 4), v87, *((const WordList **)this + 6), 0, 0xFFFFFFu, 0xFFFFFFu, v89, a9, &v96, 0);
  *((_QWORD *)this + 9) = v44;
  v90 = a7;
  if (a4)
  {
    v45 = 0;
  }
  else
  {
    v45 = (*(uint64_t (**)(uint64_t *))(*v44 + 32))(v44);
    v44 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v46 = a8;
  v94 = 0;
  v95 = 0;
  (*(void (**)(uint64_t *, int *, int *))(*v44 + 152))(v44, &v95, &v94);
  v53 = 0;
  do
  {
    v92.i32[0] = 4;
    v92.i32[1] = v53;
    DFile::pushCurrentSubDirComponent(a2, (const SubDirExtension *)&v92, v47, v48, v49, v50, v51, v52);
    if ((DFile::subFileExists((uint64_t)a2, 0x76u) & 1) != 0 || DFile::subFileExists((uint64_t)a2, 0x75u))
    {
      v54 = MemChunkAlloc(0xB0uLL, 0);
      WordNgramTemplate::WordNgramTemplate((WordNgramTemplate *)v54, *((const WordList **)this + 6), v95, v94);
      v55 = *((_DWORD *)this + 22);
      if (v55 == *((_DWORD *)this + 23))
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 80, 1, 1);
        v55 = *((_DWORD *)this + 22);
      }
      *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v55) = v54;
      *((_DWORD *)this + 22) = v55 + 1;
      WordNgramTemplate::loadWordNgramTemplate(*(WordNgramTemplate **)(*((_QWORD *)this + 10) + 8 * v53), a2, a10, WordListInTextFormat);
      v56 = 1;
    }
    else
    {
      v56 = 0;
    }
    DFile::popCurrentSubDirComponent((uint64_t)a2);
    ++v53;
  }
  while ((v56 & 1) != 0);
  LOBYTE(v88) = *a9;
  v86[4] = *((_DWORD *)this + 22) != 0;
  *(_DWORD *)v86 = 0xFFFFFF;
  (*(void (**)(_QWORD, _QWORD, DFile *, DFileChecksums *, uint64_t, uint64_t, _QWORD, uint64_t, BOOL *, char *, int, uint64_t, _QWORD))(**((_QWORD **)this + 9) + 48))(*((_QWORD *)this + 9), *((_QWORD *)this + 9), a2, a10, *v97, WordListInTextFormat, 0, 0xFFFFFFLL, *(BOOL **)v86, (char *)this + 80, v88, v45, *((_QWORD *)this + 12));
  if ((_DWORD)WordListInTextFormat)
  {
    if (*((_DWORD *)a2 + 6))
      v57 = (void *)*((_QWORD *)a2 + 2);
    else
      v57 = &unk_209A75B12;
    (*(void (**)(_QWORD, uint64_t, void *))(**((_QWORD **)this + 9) + 216))(*((_QWORD *)this + 9), 1, v57);
  }
  if (((v91 | v90) & 1) == 0 && !v96 && (v46 & 1) == 0 && !*a9)
    FileSpec::operator=((Voc *)((char *)this + 104), (DFile *)((char *)a3 + 16));
  DgnIOwnArray<ParamSetBase *>::destructAt((uint64_t)&v97, 0, v98);
  v98 = 0;
  if (v96 || *a9 || (v46 & 1) != 0)
  {
    if (!DFile::subFileExists((uint64_t)a2, 0x51u))
      goto LABEL_53;
    SvcCompatData::SvcCompatData((SvcCompatData *)&v92);
    SvcCompatData::loadSvcCompatData((SvcCompatData *)&v92, a2, a10);
    goto LABEL_52;
  }
  if (!DFile::subFileExists((uint64_t)a2, 0x51u))
  {
    if ((v91 & 1) != 0)
      goto LABEL_53;
    if ((DFile::subFileExists((uint64_t)a3, 0x51u) & 1) == 0)
    {
      *((_DWORD *)this + 10) = 1;
      goto LABEL_53;
    }
    if (*((_DWORD *)a2 + 6))
      v80 = (void *)*((_QWORD *)a2 + 2);
    else
      v80 = &unk_209A75B12;
    v84 = 1061;
    goto LABEL_99;
  }
  v74 = (_DWORD *)((char *)this + 40);
  SvcCompatData::loadSvcCompatData((Voc *)((char *)this + 40), a2, a10);
  if ((v91 & 1) == 0)
  {
    if (DFile::subFileExists((uint64_t)a3, 0x51u))
    {
      SvcCompatData::SvcCompatData((SvcCompatData *)&v92);
      SvcCompatData::loadSvcCompatData((SvcCompatData *)&v92, a3, 0);
      if (v92.i32[0] != 3)
      {
        if (*((_DWORD *)a3 + 6))
          v83 = (void *)*((_QWORD *)a3 + 2);
        else
          v83 = &unk_209A75B12;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1028, (uint64_t)"voc/voc", 18, (uint64_t)"%.500s", v81, v82, (char)v83);
      }
      if (v92.i32[1] != *((_DWORD *)this + 11))
      {
        if (*((_DWORD *)a2 + 6))
          v85 = (void *)*((_QWORD *)a2 + 2);
        else
          v85 = &unk_209A75B12;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1032, (uint64_t)"voc/voc", 17, (uint64_t)"%.500s %.500s", v81, v82, (char)v85);
      }
LABEL_52:
      SvcCompatData::SvcCompatData((SvcCompatData *)&v92);
      goto LABEL_53;
    }
    if (*v74 == 1)
      goto LABEL_53;
    if (*((_DWORD *)a2 + 6))
      v80 = (void *)*((_QWORD *)a2 + 2);
    else
      v80 = &unk_209A75B12;
    v84 = 1039;
LABEL_99:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", v84, (uint64_t)"voc/voc", 19, (uint64_t)"%.500s %.500s", v78, v79, (char)v80);
    goto LABEL_53;
  }
  if (*v74)
  {
    if (*((_DWORD *)a2 + 6))
      v77 = (void *)*((_QWORD *)a2 + 2);
    else
      v77 = &unk_209A75B12;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1046, (uint64_t)"voc/voc", 21, (uint64_t)"%.500s", v75, v76, (char)v77);
  }
LABEL_53:
  v58 = MemChunkAlloc(0x300uLL, 0);
  *((_QWORD *)this + 7) = StateMgr::StateMgr((StateMgr *)v58, this);
  if (DFile::subFileExists((uint64_t)a2, 0x59u))
    StateMgr::loadStateMgr(*((StateMgr **)this + 7), a2, a10, WordListInTextFormat, *((unsigned __int16 *)this + 84));
  v59 = MemChunkAlloc(0x58uLL, 0);
  *((_QWORD *)this + 8) = RuleMgr::RuleMgr((RuleMgr *)v59, this);
  if (DFile::subFileExists((uint64_t)a2, 0x4Eu))
  {
    v67 = (StateMgr *)*((_QWORD *)this + 7);
    if (!*((_DWORD *)v67 + 181))
      StateMgr::makeSpecialEouStateId(v67, v60, v61, v62, v63, v64, v65, v66);
    RuleMgr::loadRuleMgr(*((RuleMgr **)this + 8), a2, a10, WordListInTextFormat, a11, *((unsigned __int16 *)this + 84));
  }
  if (DFile::subFileExists((uint64_t)a2, 0x40u))
  {
    if ((_DWORD)WordListInTextFormat)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1103, (uint64_t)"voc/voc", 16, (uint64_t)"%s", v68, v69, (char)&errStr_voc_voc_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
    Voc::loadPrefLmScores(this, (char **)a2, a10);
  }
  if (DFile::subFileExists((uint64_t)a2, 0x48u))
  {
    if ((_DWORD)WordListInTextFormat)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1110, (uint64_t)"voc/voc", 16, (uint64_t)"%s", v70, v71, (char)&errStr_voc_voc_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
    Voc::loadPrefWordIdsSortedByPron(this, a2, a10);
  }
  if ((WordListInTextFormat & 1) == 0)
  {
    *((_DWORD *)this + 152) = 0;
    SubFileExtensionString = GetSubFileExtensionString(0x2Fu);
    *((_DWORD *)this + 152) ^= DFileChecksums::getChecksum(a10, SubFileExtensionString);
  }
  FileHistory::loadFileHistory((Voc *)((char *)this + 144), a2, WordListInTextFormat);
  v92 = 0u;
  v93 = 0u;
  SnapTime::recordTime((SnapTime *)&v92, 1, 1, 1, 1);
  v92 = vsubq_s64(v92, v99);
  v93 = vsubq_s64(v93, v100);
  FileHistory::addEntryWithElapsedTime((Voc *)((char *)this + 144), " loadVoc time: ", (const SnapTime *)&v92);
  if (*a9)
    FileHistory::addEntry((Voc *)((char *)this + 144), " Lobotomized one or more LMs without matching static components");
  if (v96)
    FileHistory::addEntry((Voc *)((char *)this + 144), " Reabsorbed one or more static LM components into dynamic LM");
  *((_BYTE *)this + 178) = WordListInTextFormat;
  return DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)&v97);
}

void sub_20989A4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void Voc::saveVocShared(Voc *this, DgnSharedMemSet *a2, uint64_t a3, const FileSpec *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[80];

  DgnSharedMemStream::DgnSharedMemStream((DgnSharedMemStream *)v32, a2, a3);
  DgnSharedMemStream::openDSM((uint64_t)v32, 0, -1, v9, v10, v11, v12, v13);
  (*(void (**)(_QWORD, _BYTE *, uint64_t))(**((_QWORD **)this + 9) + 80))(*((_QWORD *)this + 9), v32, a5);
  v21 = DgnSharedMemStream::tell((DgnSharedMemStream *)v32, v14, v15, v16, v17, v18, v19, v20);
  DgnSharedMemStream::closeDSM((uint64_t)v32);
  DgnSharedMemStream::openDSM((uint64_t)v32, 1, v21, v22, v23, v24, v25, v26);
  (*(void (**)(_QWORD, _BYTE *, uint64_t))(**((_QWORD **)this + 9) + 80))(*((_QWORD *)this + 9), v32, a5);
  DgnSharedMemStream::closeDSM((uint64_t)v32);
  if (DgnSharedMemSet::createMaybeRemapDSMEx((DSMSetData **)a2, a3, 0))
  {
    DgnSharedMemStream::openDSM((uint64_t)v32, 3, -1, v27, v28, v29, v30, v31);
    (*(void (**)(_QWORD, _BYTE *, uint64_t))(**((_QWORD **)this + 9) + 88))(*((_QWORD *)this + 9), v32, a5);
    DgnSharedMemStream::closeDSM((uint64_t)v32);
  }
  DgnSharedMemStream::~DgnSharedMemStream((DgnSharedMemStream *)v32);
}

void sub_20989A614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnSharedMemStream::~DgnSharedMemStream((DgnSharedMemStream *)&a9);
  _Unwind_Resume(a1);
}

void Voc::writeVocGroupInfo(uint64_t a1, VocGroupInfo *a2, uint64_t a3)
{
  uint64_t *v5;
  _BYTE v6[16];

  DFileOwner::DFileOwner((DFileOwner *)v6);
  v5 = DFile::openDFile(a3, (const FileSpec *)2, 2, (uint64_t)v6);
  VocGroupInfo::saveVocGroupInfo(a2, (DFile *)v5);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v6, 0);
  DFileOwner::~DFileOwner((DFileOwner *)v6);
}

void sub_20989A694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DFileOwner::~DFileOwner((DFileOwner *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Voc::shouldSaveSubFilesInTextFormat(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!a2)
  {
    if (*(_BYTE *)(a1 + 178) && *(_BYTE *)(*(_QWORD *)a1 + 264))
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72));
    return 0;
  }
  if (a2 == 2)
    return 0;
  if (a2 == 1 && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72)) & 1) == 0)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1207, (uint64_t)"voc/voc", 23, (uint64_t)"%s", v2, v3, (char)&errStr_voc_voc_E_LM_SAVE_TEXT);
  return 1;
}

void Voc::saveVoc(uint64_t a1, uint64_t a2, char **a3, _DWORD *a4, DFileChecksums *a5, uint64_t a6, DFileChecksums *a7, unsigned int a8, unsigned int a9)
{
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  FileHistory *v41;
  const char *v42;
  int v43;
  _DWORD v44[2];
  _BYTE v45[16];
  _BYTE v46[16];
  int64x2_t v47;
  int64x2_t v48;
  char __str[16];
  int64x2_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v47 = 0u;
  v48 = 0u;
  SnapTime::recordTime((SnapTime *)&v47, 1, 1, 1, 1);
  DFileOwner::DFileOwner((DFileOwner *)v46);
  DFileOwner::DFileOwner((DFileOwner *)v45);
  *a4 = 1;
  v17 = DFile::openDFile(a2, (const FileSpec *)1, 2, (uint64_t)v46);
  if (FileSpec::isValid(a3))
  {
    if ((_DWORD)a6)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1260, (uint64_t)"voc/voc", 26, (uint64_t)"%s", v18, v19, (char)&errStr_voc_voc_E_NO_TEXT_SVC);
    v20 = DFile::openDFile((uint64_t)a3, (const FileSpec *)1, 9, (uint64_t)v45);
  }
  else
  {
    v20 = 0;
  }
  (*(void (**)(uint64_t *, uint64_t))(*v17 + 96))(v17, a1 + 520);
  *a4 = 2;
  DFileProgressInfo::resetReportedInfo((void **)(a1 + 520));
  EnvMgr::saveEnvMgr(*(EnvMgr **)a1, (DFile *)v17, a5, a6, (int)a7);
  CharInfo::saveCharInfo(*(CharInfo **)(a1 + 8), (DFile *)v17, a5, a6, (int)a7);
  CollMgr::saveCollMgr(*(CollMgr **)(a1 + 16), (DFile *)v17, a5, a6, (int)a7);
  PhnMgr::savePhnMgr((PhnMgr *)(a1 + 184), (DFile *)v17, a5, a6, (int)a7);
  PronCollMgr::savePronCollMgr(*(PronCollMgr **)(a1 + 24), (DFile *)v17, a5, a6, (int)a7);
  VocCompatData::saveVocCompatData(*(VocCompatData **)(a1 + 32), (DFile *)v17, a5, a6, (int)a7);
  WordList::saveWordList(*(WordList **)(a1 + 48), (DFile *)v17, a5, a6, a7);
  SvcCompatData::SvcCompatData((SvcCompatData *)v44, (const SvcCompatData *)(a1 + 40));
  if (v20)
  {
    DFileChecksums::DFileChecksums((DFileChecksums *)__str);
    v21 = *(_QWORD *)(a1 + 72);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    (*(void (**)(uint64_t, uint64_t *, uint64_t *, DFileChecksums *, char *, DFileChecksums *, uint64_t, _QWORD, unint64_t))(*(_QWORD *)v21 + 96))(v21, v17, v20, a5, __str, a7, v22, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), __PAIR64__(a9, a8));
    v44[0] = 2;
    v44[1] = v50.i32[0];
    SvcCompatData::SvcCompatData(&v42, 3, v50.i32[0]);
    SvcCompatData::saveSvcCompatData((SvcCompatData *)&v42, (DFile *)v20, 0);
    SvcCompatData::SvcCompatData((SvcCompatData *)&v42);
    DFileChecksums::~DFileChecksums((DFileChecksums *)__str);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t *, DFileChecksums *, uint64_t, DFileChecksums *))(**(_QWORD **)(a1 + 72)
                                                                                           + 72))(*(_QWORD *)(a1 + 72), v17, a5, a6, a7);
  }
  if (*(_DWORD *)(a1 + 88))
  {
    v29 = 0;
    do
    {
      *(_DWORD *)__str = 4;
      *(_DWORD *)&__str[4] = v29;
      DFile::pushCurrentSubDirComponent((DFile *)v17, (const SubDirExtension *)__str, v23, v24, v25, v26, v27, v28);
      WordNgramTemplate::saveWordNgramTemplate(*(WordNgramTemplate **)(*(_QWORD *)(a1 + 80) + 8 * v29), (DFile *)v17, a5, a6, (int)a7);
      DFile::popCurrentSubDirComponent((uint64_t)v17);
      ++v29;
    }
    while (v29 < *(unsigned int *)(a1 + 88));
  }
  if ((a6 & 1) == 0)
  {
    SvcCompatData::saveSvcCompatData((SvcCompatData *)v44, (DFile *)v17, a5);
    StateMgr::saveStateMgr(*(StateMgr **)(a1 + 56), (DFile *)v17, a5, 0, (int)a7, v30, v31, v32);
    RuleMgr::saveRuleMgr(*(RuleMgr **)(a1 + 64), (DFile *)v17, a5, 0, (int)a7, v33, v34, v35);
    if (*(_BYTE *)(a1 + 260))
      Voc::savePrefLmScores((Voc *)a1, (DFile *)v17, a5, (int)a7);
    if (*(_BYTE *)(a1 + 288))
      Voc::savePrefWordIdsSortedByPron((Voc *)a1, (DFile *)v17, a5, (int)a7);
  }
  v36 = *(_DWORD *)(a1 + 480);
  if (*(_DWORD *)(a1 + 440) | v36)
  {
    snprintf(__str, 0x64uLL, " %u words added, %u words deleted since last save", *(_DWORD *)(a1 + 440), v36);
    FileHistory::addEntry((FileHistory *)(a1 + 144), __str);
    if (*(_DWORD *)(a1 + 440))
    {
      DgnString::DgnString((DgnString *)&v42, " First added word: ");
      DgnString::operator+=(&v42, a1 + 448);
      if (v43)
        v37 = v42;
      else
        v37 = (const char *)&unk_209A75B12;
      FileHistory::addEntry((FileHistory *)(a1 + 144), v37);
      DgnString::operator=((DgnString *)&v42, " Last added word: ");
      DgnString::operator+=(&v42, a1 + 464);
      if (v43)
        v38 = v42;
      else
        v38 = (const char *)&unk_209A75B12;
      FileHistory::addEntry((FileHistory *)(a1 + 144), v38);
      DgnString::~DgnString((DgnString *)&v42);
    }
    if (*(_DWORD *)(a1 + 480))
    {
      DgnString::DgnString((DgnString *)&v42, " First deleted word: ");
      DgnString::operator+=(&v42, a1 + 488);
      if (v43)
        v39 = v42;
      else
        v39 = (const char *)&unk_209A75B12;
      FileHistory::addEntry((FileHistory *)(a1 + 144), v39);
      DgnString::operator=((DgnString *)&v42, " Last deleted word: ");
      DgnString::operator+=(&v42, a1 + 504);
      if (v43)
        v40 = v42;
      else
        v40 = (const char *)&unk_209A75B12;
      FileHistory::addEntry((FileHistory *)(a1 + 144), v40);
      DgnString::~DgnString((DgnString *)&v42);
    }
  }
  *(_DWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  if (v20)
    FileHistory::addEntry((FileHistory *)(a1 + 144), " Saved voc as static and dynamic parts");
  *(_OWORD *)__str = 0u;
  v50 = 0u;
  SnapTime::recordTime((SnapTime *)__str, 1, 1, 1, 1);
  *(int64x2_t *)__str = vsubq_s64(*(int64x2_t *)__str, v47);
  v50 = vsubq_s64(v50, v48);
  v41 = (FileHistory *)(a1 + 144);
  FileHistory::addEntryWithElapsedTime(v41, " saveVoc time: ", (const SnapTime *)__str);
  FileHistory::saveFileHistory(v41, (DFile *)v17, a6);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v46, 0);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v45, 0);
  *a4 = 0;
  SvcCompatData::SvcCompatData((SvcCompatData *)v44);
  DFileOwner::~DFileOwner((DFileOwner *)v45);
  DFileOwner::~DFileOwner((DFileOwner *)v46);
}

void sub_20989ACE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  SvcCompatData::SvcCompatData((SvcCompatData *)va);
  DFileOwner::~DFileOwner((DFileOwner *)va1);
  DFileOwner::~DFileOwner((DFileOwner *)va2);
  _Unwind_Resume(a1);
}

void Voc::printSize(Voc *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  EnvMgr *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  CharInfo *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  CollMgr *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  PronCollMgr *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  VocCompatData *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  WordList *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  StateMgr *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  RuleMgr *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  void *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  void *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  void *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  void *v373;
  uint64_t v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  int v379;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1445, (DgnString *)&v378);
  if (v379)
    v16 = (void *)v378;
  else
    v16 = &unk_209A75B12;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A75B12, a3, &unk_209A75B12, v16);
  DgnString::~DgnString((DgnString *)&v378);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A75B12);
  v21 = *(EnvMgr **)this;
  if (*(_QWORD *)this)
  {
    v377 = 0;
    v378 = 0;
    v22 = (a3 + 1);
    v376 = 0;
    EnvMgr::printSize(v21, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *a6 += v376;
  }
  else
  {
    v22 = (a3 + 1);
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v23 = 4;
  else
    v23 = 8;
  v24 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1446, (DgnString *)&v378);
  if (v379)
    v29 = (void *)v378;
  else
    v29 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, v22, &unk_209A75B12, (34 - a3), (34 - a3), v29, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v23;
  *a5 += v23;
  v30 = (CharInfo *)*((_QWORD *)this + 1);
  if (v30)
  {
    v377 = 0;
    v378 = 0;
    v376 = 0;
    CharInfo::printSize(v30, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *a6 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v31 = 4;
  else
    v31 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1448, (DgnString *)&v378);
  if (v379)
    v36 = (void *)v378;
  else
    v36 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v22, &unk_209A75B12, (34 - a3), (34 - a3), v36, v31, v31, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v31;
  *a5 += v31;
  v37 = (CollMgr *)*((_QWORD *)this + 2);
  if (v37)
  {
    v377 = 0;
    v378 = 0;
    v376 = 0;
    CollMgr::printSize(v37, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *a6 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v38 = 4;
  else
    v38 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1449, (DgnString *)&v378);
  if (v379)
    v43 = (void *)v378;
  else
    v43 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, v22, &unk_209A75B12, (34 - a3), (34 - a3), v43, v38, v38, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v38;
  *a5 += v38;
  v44 = (PronCollMgr *)*((_QWORD *)this + 3);
  if (v44)
  {
    v377 = 0;
    v378 = 0;
    v376 = 0;
    PronCollMgr::printSize(v44, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *a6 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v45 = 4;
  else
    v45 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1451, (DgnString *)&v378);
  if (v379)
    v50 = (void *)v378;
  else
    v50 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v22, &unk_209A75B12, (34 - a3), (34 - a3), v50, v45, v45, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v45;
  *a5 += v45;
  v51 = (VocCompatData *)*((_QWORD *)this + 4);
  if (v51)
  {
    v377 = 0;
    v378 = 0;
    v376 = 0;
    VocCompatData::printSize(v51, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *a6 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v52 = 4;
  else
    v52 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1453, (DgnString *)&v378);
  if (v379)
    v57 = (void *)v378;
  else
    v57 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v22, &unk_209A75B12, (34 - a3), (34 - a3), v57, v52, v52, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v52;
  *a5 += v52;
  v58 = (WordList *)*((_QWORD *)this + 6);
  if (v58)
  {
    v377 = 0;
    v378 = 0;
    v376 = 0;
    WordList::printSize(v58, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *a6 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v59 = 4;
  else
    v59 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1455, (DgnString *)&v378);
  if (v379)
    v64 = (void *)v378;
  else
    v64 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v22, &unk_209A75B12, (34 - a3), (34 - a3), v64, v59, v59, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v59;
  *a5 += v59;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1457, (DgnString *)&v378);
  if (v379)
    v69 = (void *)v378;
  else
    v69 = &unk_209A75B12;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v65, v66, v67, v68, v22, &unk_209A75B12, v22, &unk_209A75B12, v69);
  v375 = a6;
  DgnString::~DgnString((DgnString *)&v378);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v70, v71, v72, v73, v22, &unk_209A75B12);
  v74 = *((unsigned int *)this + 22);
  v374 = a3;
  if ((_DWORD)v74)
  {
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = (a3 + 2);
    do
    {
      v80 = *((_QWORD *)this + 10);
      if (*(_QWORD *)(v80 + 8 * v75))
      {
        v377 = 0;
        v378 = 0;
        v376 = 0;
        WordNgramTemplate::printSize(*(WordNgramTemplate **)(v80 + 8 * v75), v75, v79, &v378, &v377, &v376);
        v78 += v378;
        v77 += v377;
        v76 += v376;
        v74 = *((unsigned int *)this + 22);
      }
      ++v75;
    }
    while (v75 < v74);
  }
  else
  {
    v78 = 0;
    v77 = 0;
    v76 = 0;
    v74 = 0;
  }
  v81 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v81 = 16;
  v82 = v81 + v78;
  v83 = v81 + v77;
  v84 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v84 = 3;
  v85 = v82 + ((unint64_t)*((unsigned int *)this + 23) << v84);
  v86 = v83 + (v74 << v84);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1457, (DgnString *)&v378);
  if (v379)
    v91 = (void *)v378;
  else
    v91 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v22, &unk_209A75B12, v24, v24, v91, v85, v86, v76);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v85;
  *a5 += v86;
  *v375 += v76;
  v92 = (StateMgr *)*((_QWORD *)this + 7);
  if (v92)
  {
    v377 = 0;
    v378 = 0;
    v376 = 0;
    StateMgr::printSize(v92, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *v375 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v93 = 4;
  else
    v93 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1459, (DgnString *)&v378);
  if (v379)
    v98 = (void *)v378;
  else
    v98 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v22, &unk_209A75B12, v24, v24, v98, v93, v93, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v93;
  *a5 += v93;
  v99 = (RuleMgr *)*((_QWORD *)this + 8);
  if (v99)
  {
    v377 = 0;
    v378 = 0;
    v376 = 0;
    RuleMgr::printSize(v99, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *v375 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v100 = 4;
  else
    v100 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1460, (DgnString *)&v378);
  if (v379)
    v105 = (void *)v378;
  else
    v105 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v22, &unk_209A75B12, v24, v24, v105, v100, v100, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v100;
  *a5 += v100;
  v106 = *((_QWORD *)this + 9);
  if (v106)
  {
    v377 = 0;
    v378 = 0;
    v376 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v106 + 16))(v106, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *v375 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v107 = 4;
  else
    v107 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1462, (DgnString *)&v378);
  if (v379)
    v112 = (void *)v378;
  else
    v112 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v108, v109, v110, v111, v22, &unk_209A75B12, v24, v24, v112, v107, v107, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v107;
  *a5 += v107;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1464, (DgnString *)&v378);
  if (v379)
    v117 = (void *)v378;
  else
    v117 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v113, v114, v115, v116, v22, &unk_209A75B12, v24, v24, v117, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 8;
  *a5 += 8;
  v377 = 0;
  v378 = 0;
  v376 = 0;
  PhnMgr::printSize((Voc *)((char *)this + 184), 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
  *a4 += v378;
  *a5 += v377;
  *v375 += v376;
  v118 = FileSpec::sizeObject((uint64_t)this + 104);
  v119 = FileSpec::sizeObject((uint64_t)this + 104);
  v120 = FileSpec::sizeObject((uint64_t)this + 104);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1467, (DgnString *)&v378);
  if (v379)
    v125 = (void *)v378;
  else
    v125 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v121, v122, v123, v124, v22, &unk_209A75B12, v24, v24, v125, v118, v119, v120);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v118;
  *a5 += v119;
  *v375 += v120;
  v126 = sizeObject((uint64_t)this + 144, 0);
  v127 = sizeObject((uint64_t)this + 144, 1);
  v128 = sizeObject((uint64_t)this + 144, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1468, (DgnString *)&v378);
  if (v379)
    v133 = (void *)v378;
  else
    v133 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v129, v130, v131, v132, v22, &unk_209A75B12, v24, v24, v133, v126, v127, v128);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v126;
  *a5 += v127;
  *v375 += v128;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1469, (DgnString *)&v378);
  if (v379)
    v138 = (void *)v378;
  else
    v138 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v134, v135, v136, v137, v22, &unk_209A75B12, v24, v24, v138, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1471, (DgnString *)&v378);
  if (v379)
    v143 = (void *)v378;
  else
    v143 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v139, v140, v141, v142, v22, &unk_209A75B12, v24, v24, v143, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1473, (DgnString *)&v378);
  if (v379)
    v148 = (void *)v378;
  else
    v148 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v144, v145, v146, v147, v22, &unk_209A75B12, v24, v24, v148, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1475, (DgnString *)&v378);
  if (v379)
    v153 = (void *)v378;
  else
    v153 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v149, v150, v151, v152, v22, &unk_209A75B12, v24, v24, v153, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1477, (DgnString *)&v378);
  if (v379)
    v158 = (void *)v378;
  else
    v158 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v154, v155, v156, v157, v22, &unk_209A75B12, v24, v24, v158, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1479, (DgnString *)&v378);
  if (v379)
    v163 = (void *)v378;
  else
    v163 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v159, v160, v161, v162, v22, &unk_209A75B12, v24, v24, v163, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1481, (DgnString *)&v378);
  if (v379)
    v168 = (void *)v378;
  else
    v168 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v164, v165, v166, v167, v22, &unk_209A75B12, v24, v24, v168, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1483, (DgnString *)&v378);
  if (v379)
    v173 = (void *)v378;
  else
    v173 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v169, v170, v171, v172, v22, &unk_209A75B12, v24, v24, v173, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1485, (DgnString *)&v378);
  if (v379)
    v178 = (void *)v378;
  else
    v178 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v174, v175, v176, v177, v22, &unk_209A75B12, v24, v24, v178, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v378);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1487, (DgnString *)&v378);
  if (v379)
    v183 = (void *)v378;
  else
    v183 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v179, v180, v181, v182, v22, &unk_209A75B12, v24, v24, v183, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v184 = 12;
  else
    v184 = 16;
  v185 = *((unsigned int *)this + 70);
  v186 = *((_DWORD *)this + 71);
  if (v186 >= v185)
  {
    v187 = 0;
    if ((int)v185 > 0)
      v184 = (v184 | 2) + 2 * (v185 - 1);
    v188 = v184 + 2 * (v186 - v185);
  }
  else
  {
    v187 = 2 * v185;
    v188 = v184;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1489, (DgnString *)&v378);
  if (v379)
    v193 = (void *)v378;
  else
    v193 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v189, v190, v191, v192, v22, &unk_209A75B12, v24, v24, v193, v188, v184, v187);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v188;
  *a5 += v184;
  *v375 += v187;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1491, (DgnString *)&v378);
  if (v379)
    v198 = (void *)v378;
  else
    v198 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v194, v195, v196, v197, v22, &unk_209A75B12, v24, v24, v198, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v378);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1493, (DgnString *)&v378);
  if (v379)
    v203 = (void *)v378;
  else
    v203 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v199, v200, v201, v202, v22, &unk_209A75B12, v24, v24, v203, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1495, (DgnString *)&v378);
  if (v379)
    v208 = (void *)v378;
  else
    v208 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v204, v205, v206, v207, v22, &unk_209A75B12, v24, v24, v208, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1497, (DgnString *)&v378);
  if (v379)
    v213 = (void *)v378;
  else
    v213 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v209, v210, v211, v212, v22, &unk_209A75B12, v24, v24, v213, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1499, (DgnString *)&v378);
  if (v379)
    v218 = (void *)v378;
  else
    v218 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v214, v215, v216, v217, v22, &unk_209A75B12, v24, v24, v218, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1501, (DgnString *)&v378);
  if (v379)
    v223 = (void *)v378;
  else
    v223 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v219, v220, v221, v222, v22, &unk_209A75B12, v24, v24, v223, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  v224 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v224 = 12;
  v225 = *((unsigned int *)this + 84);
  v226 = *((_DWORD *)this + 85);
  if (v226 >= v225)
  {
    v229 = 0;
    if ((int)v225 > 0)
      v224 += 4 * (v225 - 1) + 4;
    v231 = v226 - v225;
    v232 = 16;
    if (!gShadowDiagnosticShowIdealizedObjectSizes)
      v232 = 20;
    v228 = v232 + v224;
    v230 = v232 + v224 + 4 * v231;
  }
  else
  {
    v227 = 4;
    if (!gShadowDiagnosticShowIdealizedObjectSizes)
      v227 = 8;
    v228 = v224 + v227 + 12;
    v229 = 4 * v225;
    v230 = v228;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1503, (DgnString *)&v378);
  if (v379)
    v237 = (void *)v378;
  else
    v237 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v233, v234, v235, v236, v22, &unk_209A75B12, v24, v24, v237, v230, v228, v229);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v230;
  *a5 += v228;
  *v375 += v229;
  v238 = sizeObject<ParseToken>((uint64_t)this + 352, 0);
  v239 = sizeObject<ParseToken>((uint64_t)this + 352, 1);
  sizeObject((uint64_t)&v378, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1505, (DgnString *)&v378);
  if (v379)
    v244 = (void *)v378;
  else
    v244 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v240, v241, v242, v243, v22, &unk_209A75B12, v24, v24, v244, v238, v239, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v238;
  *a5 += v239;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v245 = 12;
  else
    v245 = 16;
  v246 = *((unsigned int *)this + 94);
  v247 = *((_DWORD *)this + 95);
  if (v247 >= v246)
  {
    v248 = 0;
    if ((int)v246 > 0)
      v245 = (v245 | 2) + 2 * (v246 - 1);
    v249 = v245 + 2 * (v247 - v246);
  }
  else
  {
    v248 = 2 * v246;
    v249 = v245;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1507, (DgnString *)&v378);
  if (v379)
    v254 = (void *)v378;
  else
    v254 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v250, v251, v252, v253, v22, &unk_209A75B12, v24, v24, v254, v249, v245, v248);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v249;
  *a5 += v245;
  *v375 += v248;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v255 = 12;
  else
    v255 = 16;
  v256 = *((unsigned int *)this + 98);
  v257 = *((_DWORD *)this + 99);
  if (v257 >= v256)
  {
    v258 = 0;
    if ((int)v256 > 0)
      v255 += 4 * (v256 - 1) + 4;
    v259 = v255 + 4 * (v257 - v256);
  }
  else
  {
    v258 = 4 * v256;
    v259 = v255;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1509, (DgnString *)&v378);
  if (v379)
    v264 = (void *)v378;
  else
    v264 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v260, v261, v262, v263, v22, &unk_209A75B12, v24, v24, v264, v259, v255, v258);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v259;
  *a5 += v255;
  *v375 += v258;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v265 = 12;
  else
    v265 = 16;
  v266 = *((unsigned int *)this + 102);
  v267 = *((_DWORD *)this + 103);
  if (v267 >= v266)
  {
    v268 = 0;
    if ((int)v266 > 0)
      v265 += 4 * (v266 - 1) + 4;
    v269 = v265 + 4 * (v267 - v266);
  }
  else
  {
    v268 = 4 * v266;
    v269 = v265;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1511, (DgnString *)&v378);
  if (v379)
    v274 = (void *)v378;
  else
    v274 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v270, v271, v272, v273, v22, &unk_209A75B12, v24, v24, v274, v269, v265, v268);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v269;
  *a5 += v265;
  *v375 += v268;
  v275 = PrefiltererWordIdPronCollArray::sizeObject((uint64_t)this + 416, 0);
  v276 = PrefiltererWordIdPronCollArray::sizeObject((uint64_t)this + 416, 1);
  v277 = PrefiltererWordIdPronCollArray::sizeObject((uint64_t)this + 416, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1513, (DgnString *)&v378);
  if (v379)
    v282 = (void *)v378;
  else
    v282 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v278, v279, v280, v281, v22, &unk_209A75B12, v24, v24, v282, v275, v276, v277);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v275;
  *a5 += v276;
  *v375 += v277;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1515, (DgnString *)&v378);
  if (v379)
    v287 = (void *)v378;
  else
    v287 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v283, v284, v285, v286, v22, &unk_209A75B12, v24, v24, v287, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v378);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v288 = 4;
  else
    v288 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1516, (DgnString *)&v378);
  if (v379)
    v293 = (void *)v378;
  else
    v293 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v289, v290, v291, v292, v22, &unk_209A75B12, v24, v24, v293, v288, v288, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v288;
  *a5 += v288;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1517, (DgnString *)&v378);
  if (v379)
    v298 = (void *)v378;
  else
    v298 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v294, v295, v296, v297, v22, &unk_209A75B12, v24, v24, v298, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v299 = 4;
  else
    v299 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1519, (DgnString *)&v378);
  if (v379)
    v304 = (void *)v378;
  else
    v304 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v300, v301, v302, v303, v22, &unk_209A75B12, v24, v24, v304, v299, v299, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v299;
  *a5 += v299;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1521, (DgnString *)&v378);
  if (v379)
    v309 = (void *)v378;
  else
    v309 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v305, v306, v307, v308, v22, &unk_209A75B12, v24, v24, v309, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  v310 = sizeObject((char *)this + 448);
  v311 = sizeObject((char *)this + 448);
  v312 = sizeObject((char *)this + 448);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1523, (DgnString *)&v378);
  if (v379)
    v317 = (void *)v378;
  else
    v317 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v313, v314, v315, v316, v22, &unk_209A75B12, v24, v24, v317, v310, v311, v312);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v310;
  *a5 += v311;
  *v375 += v312;
  v318 = sizeObject((char *)this + 464);
  v319 = sizeObject((char *)this + 464);
  v320 = sizeObject((char *)this + 464);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1525, (DgnString *)&v378);
  if (v379)
    v325 = (void *)v378;
  else
    v325 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v321, v322, v323, v324, v22, &unk_209A75B12, v24, v24, v325, v318, v319, v320);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v318;
  *a5 += v319;
  *v375 += v320;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1527, (DgnString *)&v378);
  if (v379)
    v330 = (void *)v378;
  else
    v330 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v326, v327, v328, v329, v22, &unk_209A75B12, v24, v24, v330, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  v331 = sizeObject((char *)this + 488);
  v332 = sizeObject((char *)this + 488);
  v333 = sizeObject((char *)this + 488);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1529, (DgnString *)&v378);
  if (v379)
    v338 = (void *)v378;
  else
    v338 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v334, v335, v336, v337, v22, &unk_209A75B12, v24, v24, v338, v331, v332, v333);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v331;
  *a5 += v332;
  *v375 += v333;
  v339 = sizeObject((char *)this + 504);
  v340 = sizeObject((char *)this + 504);
  v341 = sizeObject((char *)this + 504);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1531, (DgnString *)&v378);
  if (v379)
    v346 = (void *)v378;
  else
    v346 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v342, v343, v344, v345, v22, &unk_209A75B12, v24, v24, v346, v339, v340, v341);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v339;
  *a5 += v340;
  *v375 += v341;
  v347 = sizeObject((uint64_t)this + 520, 0);
  v348 = sizeObject((uint64_t)this + 520, 1);
  v349 = sizeObject((uint64_t)this + 520, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1533, (DgnString *)&v378);
  if (v379)
    v354 = (void *)v378;
  else
    v354 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v350, v351, v352, v353, v22, &unk_209A75B12, v24, v24, v354, v347, v348, v349);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v347;
  *a5 += v348;
  *v375 += v349;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1535, (DgnString *)&v378);
  if (v379)
    v359 = (void *)v378;
  else
    v359 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v355, v356, v357, v358, v22, &unk_209A75B12, v24, v24, v359, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  v360 = (char *)this + 40;
  v361 = sizeObject((uint64_t)this + 40, 0);
  v362 = sizeObject((uint64_t)v360, 1);
  v363 = sizeObject((uint64_t)v360, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1537, (DgnString *)&v378);
  if (v379)
    v368 = (void *)v378;
  else
    v368 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v364, v365, v366, v367, v22, &unk_209A75B12, v24, v24, v368, v361, v362, v363);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v361;
  *a5 += v362;
  *v375 += v363;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1538, (DgnString *)&v378);
  if (v379)
    v373 = (void *)v378;
  else
    v373 = &unk_209A75B12;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v369, v370, v371, v372, v374, &unk_209A75B12, (35 - v374), (35 - v374), v373, *a4, *a5, *v375);
  DgnString::~DgnString((DgnString *)&v378);
}

void sub_20989CC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

DgnSharedMemSet *Voc::canUnloadCachedLM(Voc *this)
{
  DgnSharedMemSet *result;

  result = (DgnSharedMemSet *)*((_QWORD *)this + 15);
  if (result)
    return (DgnSharedMemSet *)(*(_DWORD *)(DgnSharedMemSet::getSetCacheDir(result) + 8) > 1u);
  return result;
}

uint64_t Voc::isPhonemeSetCompatibleWithVoc(Voc *this, const Voc *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  if ((PhnMgr::operator==((uint64_t)this + 184, (uint64_t)a2 + 184) & 1) == 0)
  {
    if (a3)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1655, (uint64_t)"voc/voc", 25, (uint64_t)"%.500s", v6, v7, (char)"phoneme sets");
    return 0;
  }
  if ((DgnArray<DgnPrimArray<BOOL>>::operator==((uint64_t *)(*((_QWORD *)this + 6) + 400), (uint64_t *)(*((_QWORD *)a2 + 6) + 400)) & 1) == 0)
  {
    if (a3)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1661, (uint64_t)"voc/voc", 25, (uint64_t)"%.500s", v8, v9, (char)"liaison seed tables");
    return 0;
  }
  result = PronCollMgr::operator==(*((_QWORD *)this + 3), *((_QWORD *)a2 + 3));
  if ((result & 1) == 0 && a3)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1666, (uint64_t)"voc/voc", 25, (uint64_t)"%.500s", v11, v12, (char)"pron collations");
    return 0;
  }
  return result;
}

unsigned int *Voc::addPrefWordIdsSortedByPron(uint64_t a1, uint64_t a2)
{
  return PrefiltererWordIdPronCollArray::addArray((unsigned int *)(a1 + 416), a2);
}

uint64_t Voc::removePrefWordIdsSortedByPron(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = PrefiltererWordIdPronCollArray::removeArray(a1 + 416, a2);
  if (*(_DWORD *)(a1 + 376) && *(_DWORD *)(a2 + 8))
  {
    v5 = 0;
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a1 + 368);
    v8 = *(_QWORD *)(a1 + 384);
    do
    {
      v9 = *(unsigned int *)(v6 + 4 * v5);
      *(_WORD *)(v7 + 2 * v9) = 0;
      *(_DWORD *)(v8 + 4 * v9) = 0;
      ++v5;
    }
    while (v5 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t Voc::notifyWordFamilyAdded(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WordList *v12;
  const char *v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  DgnString *v34;
  _QWORD v35[2];

  StateMgr::addWordIdsToStatesWithId(*(StateMgr **)(a1 + 56), a3, a2, a4, a5, a6, a7, a8);
  v12 = *(WordList **)(a1 + 48);
  v13 = (const char *)(*((_QWORD *)v12 + 28) + *(unsigned int *)(*((_QWORD *)v12 + 25) + 4 * a2));
  result = WordList::numAltProns(v12, v13);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = result;
    v16 = 0;
    do
    {
      v17 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v16);
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 360))(*(_QWORD *)(a1 + 72), v17, a4);
      if (*(_DWORD *)(a1 + 88))
      {
        v24 = 0;
        do
          result = WordNgramTemplate::addWord(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v24++), v17, a4);
        while (v24 < *(unsigned int *)(a1 + 88));
      }
      ++v16;
      v25 = *(unsigned int *)(a3 + 8);
    }
    while (v16 < v25);
    if ((_DWORD)v25)
    {
      if (*(_BYTE *)(a1 + 260))
      {
        v26 = *(_DWORD *)(a1 + 264);
        if (!v26
          || (result = StateMgr::isWordIdInState(*(StateMgr **)(a1 + 56), v26, a2, 1, v20, v21, v22, v23), (_DWORD)result))
        {
          v35[0] = 0;
          v35[1] = 0;
          (*(void (**)(_QWORD, uint64_t, _QWORD *))(**(_QWORD **)(a1 + 72) + 520))(*(_QWORD *)(a1 + 72), a3, v35);
          v27 = *(unsigned int *)(a3 + 8);
          if ((_DWORD)v27)
          {
            v28 = 0;
            v29 = *(_DWORD *)(a1 + 280);
            do
            {
              v30 = *(unsigned int *)(*(_QWORD *)a3 + 4 * v28);
              if (v30 >= v29)
              {
                do
                {
                  if (v29 == *(_DWORD *)(a1 + 284))
                  {
                    DgnPrimArray<short>::reallocElts(a1 + 272, 1, 1);
                    v29 = *(_DWORD *)(a1 + 280);
                  }
                  v31 = *(_QWORD *)(a1 + 272);
                  *(_WORD *)(v31 + 2 * v29++) = 20000;
                  *(_DWORD *)(a1 + 280) = v29;
                }
                while (v30 >= v29);
                v27 = *(unsigned int *)(a3 + 8);
              }
              else
              {
                v31 = *(_QWORD *)(a1 + 272);
              }
              *(_WORD *)(v31 + 2 * v30) = *(_WORD *)(v35[0] + 2 * v28++) + **(_WORD **)(a1 + 32);
            }
            while (v28 < v27);
          }
          result = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v35);
        }
      }
    }
    v32 = *(_DWORD *)(a3 + 8);
    if (v32)
    {
      v33 = *(_DWORD *)(a1 + 440);
      if (v33)
      {
        *(_DWORD *)(a1 + 440) = v33 + v32;
        if ((_DWORD)a4 != 0xFFFFFF)
          return DgnString::stringPrintf((DgnString *)(a1 + 464), "%.500s pron %u (cloned from %u)", v18, v19, v20, v13, (v15 + v32 - 1), a4);
      }
      else
      {
        v34 = (DgnString *)(a1 + 448);
        if ((_DWORD)a4 != 0xFFFFFF)
        {
          DgnString::stringPrintf(v34, "%.500s pron %u (cloned from %u)", v18, v19, v20, v13, v15, a4);
          v32 = *(_DWORD *)(a3 + 8);
          *(_DWORD *)(a1 + 440) += v32;
          return DgnString::stringPrintf((DgnString *)(a1 + 464), "%.500s pron %u (cloned from %u)", v18, v19, v20, v13, (v15 + v32 - 1), a4);
        }
        DgnString::stringPrintf(v34, "%.500s pron %u", v18, v19, v20, v13, v15);
        v32 = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a1 + 440) += v32;
      }
      return DgnString::stringPrintf((DgnString *)(a1 + 464), "%.500s pron %u", v18, v19, v20, v13, (v15 + v32 - 1));
    }
  }
  return result;
}

void sub_20989D194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Voc::notifyWordFamilyAboutToDeleteProns(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(result + 288))
  {
    v8 = result;
    if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 32) + 2 * a3))
    {
      v13 = 0;
      v14 = 0;
      if (*(_DWORD *)(a2 + 8))
      {
        v10 = 0;
        do
        {
          if (StateMgr::isWordIdInState(*(StateMgr **)(v8 + 56), *(_DWORD *)(v8 + 304), *(_DWORD *)(*(_QWORD *)a2 + 4 * v10), 1, a5, a6, a7, a8))
          {
            v11 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v10);
            v12 = v14;
            if (v14 == (unint64_t)HIDWORD(v14))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v13, 1, 1);
              v12 = v14;
            }
            *(_DWORD *)(v13 + 4 * v12) = v11;
            LODWORD(v14) = v14 + 1;
          }
          ++v10;
        }
        while (v10 < *(unsigned int *)(a2 + 8));
      }
      Voc::removePrefWordIdsSortedByPron(v8, (uint64_t)&v13);
      return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v13);
    }
  }
  return result;
}

void sub_20989D280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Voc::notifyWordFamilyChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::notifyPronsChanged(*(StateMgr **)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
}

void Voc::notifyWordFamilyDeleted(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  DgnString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;

  v7 = a3;
  v10 = (DgnString *)(a1 + 504);
  DgnString::stringPrintf((DgnString *)(a1 + 504), "%.500s pron %u", a3, a4, a5, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 224)+ *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 200) + 4 * a3), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 104) + **a2));
  v16 = *(_DWORD *)(a1 + 480);
  if (!v16)
  {
    DgnString::operator=((DgnString *)(a1 + 488), v10);
    v16 = *(_DWORD *)(a1 + 480);
  }
  *(_DWORD *)(a1 + 480) = v16 + *((_DWORD *)a2 + 2);
  StateMgr::deleteWordIdsFromStatesWithId(*(StateMgr **)(a1 + 56), (uint64_t)a2, v7, v11, v12, v13, v14, v15);
  LODWORD(v21) = *((_DWORD *)a2 + 2);
  if ((_DWORD)v21)
  {
    v22 = 0;
    do
    {
      v23 = (*a2)[v22];
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 376))(*(_QWORD *)(a1 + 72), v23, a4, a5);
      if (*(_DWORD *)(a1 + 88))
      {
        v24 = 0;
        do
          WordNgramTemplate::deleteWord(*(WordNgramTemplate **)(*(_QWORD *)(a1 + 80) + 8 * v24++), v23);
        while (v24 < *(unsigned int *)(a1 + 88));
      }
      ++v22;
      v21 = *((unsigned int *)a2 + 2);
    }
    while (v22 < v21);
  }
  if (*(_BYTE *)(a1 + 260))
  {
    v25 = *(_DWORD *)(a1 + 264);
    if (v25)
    {
      if (!StateMgr::isWordIdInState(*(StateMgr **)(a1 + 56), v25, v7, 1, v17, v18, v19, v20))
        return;
      LODWORD(v21) = *((_DWORD *)a2 + 2);
    }
    if ((_DWORD)v21)
    {
      v26 = *a2;
      v27 = *(_QWORD *)(a1 + 272);
      v21 = v21;
      do
      {
        v28 = *v26++;
        *(_WORD *)(v27 + 2 * v28) = 20000;
        --v21;
      }
      while (v21);
    }
  }
}

unint64_t Voc::addPrefPicModelIdPron(unint64_t result, unsigned int a2, uint64_t *a3)
{
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v5 = result;
  v6 = *(_DWORD *)(result + 376);
  if (v6 <= a2)
  {
    do
    {
      if (v6 == *(_DWORD *)(v5 + 380))
      {
        result = DgnPrimArray<short>::reallocElts(v5 + 368, 1, 1);
        v6 = *(_DWORD *)(v5 + 376);
      }
      *(_WORD *)(*(_QWORD *)(v5 + 368) + 2 * v6) = 0;
      *(_DWORD *)(v5 + 376) = v6 + 1;
      v8 = *(unsigned int *)(v5 + 392);
      if (v8 == *(_DWORD *)(v5 + 396))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(v5 + 384, 1, 1);
        v8 = *(unsigned int *)(v5 + 392);
      }
      v7 = *(_QWORD *)(v5 + 384);
      *(_DWORD *)(v7 + 4 * v8) = 0;
      ++*(_DWORD *)(v5 + 392);
      v6 = *(_DWORD *)(v5 + 376);
    }
    while (v6 <= a2);
  }
  else
  {
    v7 = *(_QWORD *)(result + 384);
  }
  *(_WORD *)(*(_QWORD *)(v5 + 368) + 2 * a2) = *((_DWORD *)a3 + 2);
  *(_DWORD *)(v7 + 4 * a2) = *(_DWORD *)(v5 + 408);
  v9 = *((_DWORD *)a3 + 2);
  v10 = *(_DWORD *)(v5 + 408) + v9;
  v11 = *(_DWORD *)(v5 + 412);
  if (v10 > v11)
  {
    result = DgnPrimArray<unsigned int>::reallocElts(v5 + 400, v10 - v11, 1);
    v9 = *((_DWORD *)a3 + 2);
  }
  if (v9)
  {
    v12 = 0;
    v13 = *a3;
    v14 = *(_QWORD *)(v5 + 400);
    do
    {
      *(_DWORD *)(v14 + 4 * (v12 + *(_DWORD *)(v5 + 408))) = *(_DWORD *)(v13 + 4 * v12);
      ++v12;
      v15 = *((unsigned int *)a3 + 2);
    }
    while (v12 < v15);
  }
  else
  {
    LODWORD(v15) = 0;
  }
  *(_DWORD *)(v5 + 408) += v15;
  return result;
}

_QWORD *Voc::getPrefPicModelIdPron(_QWORD *this, unsigned int a2, const unsigned int **a3, unsigned int *a4)
{
  *a3 = (const unsigned int *)(this[50] + 4 * *(unsigned int *)(this[48] + 4 * a2));
  *a4 = *(unsigned __int16 *)(this[46] + 2 * a2);
  return this;
}

uint64_t Voc::findOrAddPrefPicModel(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;

  v4 = *(_DWORD *)(a1 + 360) | (a2[2] << 24);
  v5 = HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::insert(a1 + 312, v4, a2);
  if ((_DWORD)v5 == v4)
  {
    v6 = a2[2];
    v7 = *(_DWORD *)(a1 + 360) + v6;
    v8 = *(_DWORD *)(a1 + 364);
    if (v7 > v8)
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 352, v7 - v8, 1);
      v6 = a2[2];
    }
    if (v6)
    {
      v9 = 0;
      do
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 352) + 4 * (v9 + *(_DWORD *)(a1 + 360))) = *(_DWORD *)(*(_QWORD *)a2 + 4 * v9);
        ++v9;
        v10 = a2[2];
      }
      while (v9 < v10);
    }
    else
    {
      LODWORD(v10) = 0;
    }
    *(_DWORD *)(a1 + 360) += v10;
  }
  return v5;
}

uint64_t HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::insert(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned __int16 *v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;

  v6 = *(_DWORD *)(a1 + 4);
  if (*(_DWORD *)a1 >= v6 >> 1)
    HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::upSize(a1, 2 * v6);
  v7 = a3[2];
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = (unsigned __int16 *)(*(_QWORD *)a3 + 2);
    do
    {
      HIDWORD(v10) = v8;
      LODWORD(v10) = v8;
      v11 = (v10 >> 19) + *(v9 - 1);
      v12 = *v9;
      v9 += 2;
      HIDWORD(v10) = v11;
      LODWORD(v10) = v11;
      v8 = (v10 >> 19) + v12;
      --v7;
    }
    while (v7);
    LODWORD(v7) = -1640531527 * v8;
  }
  v13 = *(_DWORD *)(a1 + 8);
  v14 = v7 >> -(char)v13;
  if (v13)
    v15 = v14;
  else
    v15 = 0;
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(_DWORD *)(v16 + 4 * v15);
  if (v17 == -1)
  {
LABEL_18:
    v19 = (unsigned int *)(v16 + 4 * v15);
    *v19 = a2;
    ++*(_DWORD *)a1;
    return *v19;
  }
  if (!Voc::equalKeys(*(_QWORD *)(a1 + 32), v17, (unsigned __int16 **)a3))
  {
    do
    {
      v15 = (_DWORD)v15 + 1 == *(_DWORD *)(a1 + 4) ? 0 : (v15 + 1);
      v16 = *(_QWORD *)(a1 + 16);
      v18 = *(_DWORD *)(v16 + 4 * v15);
      if (v18 == -1)
        goto LABEL_18;
    }
    while (!Voc::equalKeys(*(_QWORD *)(a1 + 32), v18, (unsigned __int16 **)a3));
  }
  v19 = (unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v15);
  return *v19;
}

void Voc::deleteWordsFromWordList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9;

  v9 = 0;
  WordList::deleteWords(*(EnvMgr ***)(a1 + 48), a2, &v9, a4, a5, a6, a7, a8);
  if (v9)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 400))(*(_QWORD *)(a1 + 72));
}

void Voc::verifyCanDeleteWords(Voc *this, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 9) + 192))(*((_QWORD *)this + 9)))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1970, (uint64_t)"voc/voc", 2, (uint64_t)"%d %.500s %d", v3, v4, a2);
}

uint64_t Voc::deleteWordIdArrayFamily(Voc *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  __int16 v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;

  Voc::verifyCanDeleteWords(a1, **(_DWORD **)a2);
  v12 = *(unsigned int *)(a2 + 8);
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = *(unsigned int *)(*a3 + 16 * v14 + 8);
      if (HIDWORD(v25) < v15)
        break;
      LODWORD(v25) = *(_DWORD *)(*a3 + 16 * v14 + 8);
      if ((_DWORD)v15)
        goto LABEL_6;
LABEL_8:
      Voc::notifyWordFamilyAboutToDeleteProns((uint64_t)a1, (uint64_t)&v24, *(_DWORD *)(*(_QWORD *)a2 + 4 * v14), v7, v8, v9, v10, v11);
      Voc::notifyWordFamilyDeleted((uint64_t)a1, (unsigned int **)&v24, *(unsigned int *)(*(_QWORD *)a2 + 4 * v14), (uint64_t)&v23 + 1, (uint64_t)&v23);
      v13 = v25;
      if ((v27 + v25) > HIDWORD(v27))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v26, (v27 + v25 - HIDWORD(v27)), 1);
        v13 = v25;
      }
      if (v13)
      {
        v19 = 0;
        v20 = v24;
        v21 = v26;
        do
        {
          *(_DWORD *)(v21 + 4 * (v19 + v27)) = v20[v19];
          ++v19;
        }
        while (v19 < v25);
        v13 = v25;
      }
      LODWORD(v27) = v27 + v13;
      if (++v14 == v12)
        goto LABEL_15;
    }
    v28 = 0;
    v16 = realloc_array(v24, &v28, 4 * v15, 4 * v13, 4 * v13, 1);
    v24 = v28;
    LODWORD(v25) = v15;
    HIDWORD(v25) = v16 >> 2;
LABEL_6:
    v17 = *(_QWORD *)(*a3 + 16 * v14);
    v18 = v24;
    do
      *v18++ = *(_DWORD *)(v17 + 4 * --v15);
    while (v15);
    goto LABEL_8;
  }
LABEL_15:
  Voc::deleteWordsFromWordList((uint64_t)a1, (uint64_t)&v26, v6, v7, v8, v9, v10, v11);
  if (HIBYTE(v23))
    (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 9) + 384))(*((_QWORD **)a1 + 9));
  if ((_BYTE)v23)
    (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 9) + 392))(*((_QWORD **)a1 + 9));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v24);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
}

void sub_20989D9E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Voc::createWord(Voc *this, char *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if (!a2 || !*a2)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 2020, (uint64_t)"voc/voc", 15, (uint64_t)"%s", a7, a8, (char)&errStr_voc_voc_E_BAD_WORDNAME);
  if (WordList::lookupWord(*((WordList **)this + 6), a2) != 0xFFFFFF)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 2023, (uint64_t)"voc/voc", 5, (uint64_t)"%d %.500s", v12, v13, *((_WORD *)this + 84));
  v14 = WordList::addWord(*((WordList **)this + 6), (CharInfo *)a2, 1, 1, 1, a4);
  v20 = 0;
  v21 = 0;
  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v20, 1, 1);
  *(_DWORD *)(v20 + 4 * v21) = v14;
  LODWORD(v21) = v21 + 1;
  Voc::notifyWordFamilyAdded((uint64_t)this, v14, (uint64_t)&v20, a3, v15, v16, v17, v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
  return v14;
}

void sub_20989DB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Voc::addClientPronsAvoidDuplicates(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6, _QWORD *a7, int a8, uint64_t a9, uint64_t a10)
{
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a4 + 8) = 0;
  return WordList::addClientPronsAvoidDuplicates(*(uint64_t **)(a1 + 48), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t Voc::deleteWordClientProns(WordList **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v35;
  _QWORD v36[2];

  WordList::verifyModifiable(a1[6], a2, a3, a4, a5, a6, a7, a8);
  v12 = (uint64_t *)a1[6];
  v13 = v12[28] + *(unsigned int *)(v12[25] + 4 * a2);
  v36[0] = 0;
  v36[1] = 0;
  WordList::lookupAllClientAddedProns(v12, v13, (uint64_t)v36);
  Voc::notifyWordFamilyAboutToDeleteProns((uint64_t)a1, (uint64_t)v36, a2, v14, v15, v16, v17, v18);
  WordList::deleteWordClientProns((uint64_t)a1[6], a2, (uint64_t)v36, a3, a4, v19, v20, v21);
  if (*(_DWORD *)(a4 + 8))
  {
    Voc::verifyCanDeleteWords((Voc *)a1, a2);
    v35 = 0;
    Voc::notifyWordFamilyDeleted((uint64_t)a1, (unsigned int **)a4, a2, (uint64_t)&v35 + 1, (uint64_t)&v35);
    Voc::deleteWordsFromWordList((uint64_t)a1, a4, v28, v29, v30, v31, v32, v33);
  }
  if (*(_DWORD *)(a3 + 8))
    StateMgr::notifyPronsChanged(a1[7], a3, v22, v23, v24, v25, v26, v27);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v36);
}

void sub_20989DC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Voc::getVocReferringLatticeRefCount(Voc *this)
{
  return *((unsigned __int16 *)this + 85);
}

uint64_t Voc::addVocReferringPrefilterResultRef(uint64_t this)
{
  ++*(_WORD *)(this + 172);
  return this;
}

uint64_t Voc::removeVocReferringPrefilterResultRef(uint64_t this)
{
  --*(_WORD *)(this + 172);
  return this;
}

uint64_t Voc::getVocReferringPrefilterResultRefCount(Voc *this)
{
  return *((unsigned __int16 *)this + 86);
}

uint64_t Voc::addVocReferringSausageRef(uint64_t this)
{
  ++*(_WORD *)(this + 174);
  return this;
}

uint64_t Voc::removeVocReferringSausageRef(uint64_t this)
{
  --*(_WORD *)(this + 174);
  return this;
}

uint64_t Voc::getVocReferringSausageRefCount(Voc *this)
{
  return *((unsigned __int16 *)this + 87);
}

uint64_t Voc::getVocReferringReproRefCount(Voc *this)
{
  return *((unsigned __int16 *)this + 88);
}

uint64_t Voc::getPics(uint64_t a1, _DWORD *a2, unsigned int a3, __int16 *a4, _WORD *a5, char a6, unsigned int *a7)
{
  _DWORD *v8;
  uint64_t result;
  unsigned int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  _QWORD *v15;
  unsigned int v16;
  __int16 *v17;
  uint64_t v18;
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  __int16 v22;
  unsigned int v23;
  char v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  _WORD *v31;
  uint64_t v32;
  __int16 v33;
  _WORD *v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  __int16 *v44;
  uint64_t v45;
  unsigned int v47;
  uint64_t v48;

  v8 = a2;
  result = *a2 & 0xFFFFFF;
  LOWORD(v11) = a4[1];
  v12 = *a4;
  LOWORD(v13) = *a5;
  v14 = a5[1];
  v15 = *(_QWORD **)(a1 + 48);
  v16 = *(unsigned __int16 *)(v15[4] + 2 * result);
  v17 = (__int16 *)(v15[9] + 2 * *(unsigned int *)(v15[6] + 4 * result));
  v18 = a3;
  v19 = *a5;
  v20 = v16;
  switch(a3)
  {
    case 0u:
      goto LABEL_13;
    case 1u:
      v19 = v17[v16 - 1];
      LOWORD(v11) = v12;
      v21 = *v17++;
      v12 = v21;
      v20 = v16 - 2;
      goto LABEL_7;
    case 2u:
      if (v16 < 2)
        goto LABEL_12;
      if (v16 != 2)
        LOWORD(v13) = v17[2];
      v19 = v17[1];
      v20 = 1;
LABEL_7:
      v14 = v13;
      goto LABEL_13;
    case 3u:
      v17 += v16 - 1;
      if (v16 >= 2)
      {
        if (v16 != 2)
          v12 = *(v17 - 2);
        LOWORD(v11) = v12;
        v12 = *(v17 - 1);
      }
LABEL_12:
      v20 = 1;
      v19 = *a5;
LABEL_13:
      v22 = *v17;
      v23 = a7[3];
      if (v20 > v23)
      {
        v48 = *a2 & 0xFFFFFF;
        v47 = a3;
        v45 = a3;
        v43 = a1;
        v44 = v17;
        v24 = a6;
        v25 = v11;
        DgnArray<RuleDesc>::reallocElts((uint64_t)a7, v20 - v23, 0);
        LOWORD(v11) = v25;
        a1 = v43;
        v17 = v44;
        v18 = v45;
        v8 = a2;
        a6 = v24;
        result = v48;
        a3 = v47;
      }
      v26 = a7[2];
      if (v26 < v20)
      {
        v27 = v20 - v26;
        v28 = 12 * v26;
        do
        {
          v29 = *(_QWORD *)a7 + v28;
          *(_QWORD *)v29 = -1;
          *(_DWORD *)(v29 + 8) = 0xFFFF;
          v28 += 12;
          --v27;
        }
        while (v27);
      }
      a7[2] = v20;
      if (v20 < 2)
      {
        LOWORD(v13) = v19;
        v30 = v19;
LABEL_24:
        v19 = v14;
      }
      else
      {
        v30 = v17[1];
        LOWORD(v13) = v19;
        if (v20 != 2)
          v19 = v17[2];
      }
      v31 = *(_WORD **)a7;
      *v31 = v11;
      v31[1] = v12;
      v31[2] = v22;
      v31[3] = v30;
      v31[4] = v19;
      v31[5] = 0;
      if (v20 >= 2)
      {
        v32 = 12;
        v11 = 3;
        do
        {
          v33 = v12;
          v12 = v22;
          v22 = v30;
          v30 = v19;
          v19 = v13;
          if (12 * (v20 - 2) != v32)
          {
            v19 = v14;
            if (12 * (v20 - 1) != v32)
              v19 = v17[v11];
          }
          v34 = (_WORD *)(*(_QWORD *)a7 + v32);
          *v34 = v33;
          v34[1] = v12;
          v34[2] = v22;
          v34[3] = v30;
          v34[4] = v19;
          v34[5] = 0;
          ++v11;
          v32 += 12;
        }
        while (12 * v20 != v32);
      }
      if ((a6 & 1) != 0 || (v35 = v8[2], !(_DWORD)v35))
      {
        v13 = 1;
        v37 = 1;
      }
      else
      {
        v36 = *(_QWORD *)(a1 + 56);
        v13 = *(_BYTE *)(*(_QWORD *)(v36 + 352) + v35) != 0;
        v37 = *(unsigned __int8 *)(*(_QWORD *)(v36 + 368) + v35) != 0;
      }
      if (a3 <= 3)
      {
        switch(a3)
        {
          case 0u:
            if (v13)
              *(_BYTE *)(*(_QWORD *)a7 + 10) = 1;
            if (v37)
              *(_BYTE *)(*(_QWORD *)a7 + 12 * (v20 - 1) + 11) = 1;
            goto LABEL_53;
          case 1u:
            --v20;
LABEL_53:
            if (v20 > a3)
            {
              v40 = 0;
              v41 = 11;
              do
              {
                v42 = v18 + v40 + *(_DWORD *)(v15[6] + 4 * result);
                if (((*(_DWORD *)(v15[11] + 4 * (v42 >> 5)) >> v42) & 1) != 0)
                {
                  if (v37)
                    *(_BYTE *)(*(_QWORD *)a7 + v41) = 1;
                  if (v13)
                    *(_BYTE *)(*(_QWORD *)a7 + 12 * (v40 + 1) + 10) = 1;
                }
                v41 += 12;
                ++v40;
              }
              while (v18 - v20 + v40);
            }
            break;
          case 2u:
            if (v13)
              *(_BYTE *)(*(_QWORD *)a7 + 10) = 1;
            if (v37)
            {
              v38 = *(unsigned int *)(v15[6] + 4 * result);
              if (((*(_DWORD *)(v15[11] + ((v38 >> 3) & 0x1FFFFFFC)) >> v38) & 1) != 0)
                *(_BYTE *)(*(_QWORD *)a7 + 11) = 1;
            }
            break;
          case 3u:
            if (v37)
              *(_BYTE *)(*(_QWORD *)a7 + 11) = 1;
            if (v13)
            {
              if (v16 == 1
                || (v39 = v16 + *(_DWORD *)(v15[6] + 4 * result) - 2,
                    ((*(_DWORD *)(v15[11] + 4 * (v39 >> 5)) >> v39) & 1) != 0))
              {
                *(_BYTE *)(*(_QWORD *)a7 + 10) = 1;
              }
            }
            break;
          default:
            goto LABEL_23;
        }
      }
      return result;
    default:
LABEL_23:
      v20 = 0;
      v22 = *v17;
      a7[2] = 0;
      v30 = v13;
      goto LABEL_24;
  }
}

uint64_t HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::HashProbeKEV(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;

  HashProbeBase::HashProbeBase((HashProbeBase *)a1, a2);
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 8));
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = v6;
  HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::initBuckets((_DWORD *)a1);
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

void sub_20989E114(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

_DWORD *HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::initBuckets(_DWORD *result)
{
  _DWORD *v1;
  uint64_t *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;

  v1 = result;
  v2 = (uint64_t *)(result + 4);
  v3 = result[1];
  v4 = result[7];
  if (v3 <= v4)
  {
    result[6] = v3;
    v5 = result + 6;
    if (!v3)
      return result;
  }
  else
  {
    result = (_DWORD *)DgnPrimArray<unsigned int>::reallocElts((uint64_t)(result + 4), v3 - v4, 0);
    v1[6] = v3;
    v5 = v1 + 6;
  }
  v6 = 0;
  v7 = *v2;
  do
    *(_DWORD *)(v7 + 4 * v6++) = -1;
  while (v6 < *v5);
  return result;
}

_QWORD *DgnIOwnArray<WordNgramTemplate *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<WordNgramTemplate>(*(_QWORD *)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnDelete<WordNgramTemplate>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnPrimArray<unsigned int>::~DgnPrimArray(result + 144);
    Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::~Hash((uint64_t)(v1 + 4));
    return MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218C20;
  if (*(_DWORD *)(a1 + 8))
    Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t (*v7)(char *);
  uint64_t (*v8)(_QWORD *);

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 80);
      v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = *(char **)v5;
          v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7)
            result = v7(v5 + 12);
          v8 = *(uint64_t (**)(_QWORD *))(v1 + 104);
          if (v8)
            result = v8((_QWORD *)v5 + 2);
          *(_QWORD *)v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v1 + 32) = v5;
          v5 = v6;
        }
        while (v6);
        v4 = *(_QWORD *)(v1 + 80);
        v2 = *(unsigned int *)(v1 + 88);
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

void Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::~Hash(uint64_t a1)
{
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::upSize(uint64_t a1, int a2)
{
  uint64_t *v4;
  _QWORD *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v16 = 0;
  RoundUpToPowerOf2(a2, &v16);
  v4 = (uint64_t *)(a1 + 16);
  v14 = 0;
  v15 = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)&v14, (uint64_t *)(a1 + 16), 0, *(_DWORD *)(a1 + 24));
  v5 = *(_QWORD **)(a1 + 16);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *v4 = 0;
  }
  *(_QWORD *)(a1 + 24) = 0;
  v6 = v16;
  *(_DWORD *)(a1 + 4) = a2;
  *(_DWORD *)(a1 + 8) = v6;
  HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::initBuckets((_DWORD *)a1);
  v7 = v15;
  if ((_DWORD)v15)
  {
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(v14 + 4 * v8);
      if (v9 != -1)
      {
        v10 = Voc::computeHash(*(_QWORD *)(a1 + 32), *(_DWORD *)(v14 + 4 * v8));
        if (v16)
          v11 = (-1640531527 * v10) >> -(char)v16;
        else
          v11 = 0;
        v12 = *v4;
        while (*(_DWORD *)(v12 + 4 * v11) != -1)
        {
          if ((_DWORD)v11 + 1 == *(_DWORD *)(a1 + 4))
            v11 = 0;
          else
            v11 = (v11 + 1);
        }
        *(_DWORD *)(v12 + 4 * v11) = v9;
        v7 = v15;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v14);
}

void sub_20989E470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL Voc::equalKeys(uint64_t a1, unsigned int a2, unsigned __int16 **a3)
{
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;

  v3 = HIBYTE(a2);
  if ((_DWORD)v3 != *((_DWORD *)a3 + 2))
    return 0;
  if (!(_DWORD)v3)
    return 1;
  v5 = *(_QWORD *)(a1 + 352);
  v6 = *a3;
  v7 = v3 <= 1 ? 1 : v3;
  if (*(unsigned __int16 *)(v5 + 4 * (a2 & 0xFFFFFF)) != *v6)
    return 0;
  v4 = 0;
  v8 = v6 + 2;
  v9 = (unsigned __int16 *)(v5 + 4 * (a2 & 0xFFFFFF) + 4);
  v10 = 1;
  do
  {
    if (*(v9 - 1) != *(v8 - 1))
      break;
    v4 = v10 >= v3;
    if (v7 == v10)
      break;
    v12 = *v9;
    v9 += 2;
    v11 = v12;
    v13 = *v8;
    v8 += 2;
    ++v10;
  }
  while (v11 == v13);
  return v4;
}

uint64_t Voc::computeHash(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned __int16 *v5;
  unint64_t v6;
  int v7;
  int v8;

  if (!HIBYTE(a2))
    return 0;
  v2 = this;
  LODWORD(this) = 0;
  v3 = a2 & 0xFFFFFF;
  v4 = v3 + HIBYTE(a2);
  v5 = (unsigned __int16 *)(*(_QWORD *)(v2 + 352) + 4 * v3 + 2);
  do
  {
    HIDWORD(v6) = this;
    LODWORD(v6) = this;
    v7 = (v6 >> 19) + *(v5 - 1);
    v8 = *v5;
    v5 += 2;
    HIDWORD(v6) = v7;
    LODWORD(v6) = v7;
    this = (v6 >> 19) + v8;
    ++v3;
  }
  while (v3 < v4);
  return this;
}

uint64_t *TransducerGrammarMgr::startupTransducerGrammarMgr(uint64_t a1)
{
  uint64_t *result;

  result = MemChunkAlloc(8uLL, 0);
  *result = a1;
  TransducerGrammarMgr::smpTransducerGrammarMgr = (uint64_t)result;
  return result;
}

void TransducerGrammarMgr::printSize(TransducerGrammarMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/trgrmmgr.cpp", 67, (DgnString *)&v31);
  if (v32)
    v15 = v31;
  else
    v15 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_209A88803, a3, &byte_209A88803, v15);
  DgnString::~DgnString((DgnString *)&v31);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_209A88803);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v20 = 4;
  else
    v20 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/trgrmmgr.cpp", 69, (DgnString *)&v31);
  if (v32)
    v25 = v31;
  else
    v25 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v25, v20, v20, 0);
  DgnString::~DgnString((DgnString *)&v31);
  *a4 += v20;
  *a5 += v20;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/trgrmmgr.cpp", 71, (DgnString *)&v31);
  if (v32)
    v30 = v31;
  else
    v30 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, a3, &byte_209A88803, (35 - a3), (35 - a3), v30, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v31);
}

void sub_20989E758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void OnePhonemeSyncNet::~OnePhonemeSyncNet(OnePhonemeSyncNet *this)
{
  Sequence *v2;

  *(_QWORD *)this = &off_24C215B28;
  HmmNet::deleteInPorts((uint64_t)this);
  BaseSyncNet::~BaseSyncNet(this, v2);
}

{
  OnePhonemeSyncNet::~OnePhonemeSyncNet(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t OnePhonemeSyncNet::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v7;

  v2 = a2;
  v4 = BaseSyncNet::sizeObject(a1, a2);
  v5 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v5)
  {
    for (i = 0; i < v5; ++i)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
      if (v7)
      {
        v4 += sizeObject(v7, v2);
        v5 = *(unsigned int *)(a1 + 64);
      }
    }
  }
  return v4;
}

uint64_t OnePhonemeSyncNet::attachInPort(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * a2) = a3;
  return result;
}

double OnePhonemeSyncNet::addEpsilonNode(OnePhonemeSyncNet *this)
{
  uint64_t *v1;
  double result;

  v1 = MemChunkAlloc(0x18uLL, 0);
  *(_QWORD *)&result = 0x100000001;
  *v1 = 0x100000001;
  *((_DWORD *)v1 + 2) = 1310740000;
  *(uint64_t *)((char *)v1 + 12) = 0;
  *((_DWORD *)v1 + 5) = -65536;
  return result;
}

uint64_t OnePhonemeSyncNet::scoreNetInternal(OnePhonemeSyncNet *this, int a2, int a3, int a4, int a5, int a6)
{
  int v8;
  _BOOL4 v9;
  int v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t (*v17)(_QWORD *);
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(_QWORD *);
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *BestPredWithTrace;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t BestPred;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;

  v8 = *((_DWORD *)this + 26);
  v42 = 0;
  v41 = *((_DWORD *)this + 38);
  if (v8)
    v9 = *((_DWORD *)this + 71) <= a3;
  else
    v9 = 0;
  *((_BYTE *)this + 282) = v9;
  *((_DWORD *)this + 71) = 20000;
  v10 = BaseSyncNet::scoreIntSilNode1<false>((uint64_t)this, v9, *((unsigned __int8 *)this + 114), a3, a4, a5, a6, &v42);
  v11 = v10;
  if (v10 != 20000)
  {
    v12 = **((_QWORD **)this + 9);
    v13 = *(_DWORD **)(v12 + 16);
    *(_WORD *)(v12 + 8) = v10;
    *(_DWORD *)v12 = *v13;
    *(_DWORD *)(v12 + 4) = v13[1];
  }
  if (*((_BYTE *)this + 282))
  {
    v15 = *((_QWORD *)this + 26);
    v14 = (uint64_t *)*((_QWORD *)this + 27);
    v16 = *((_DWORD *)this + 56);
    v17 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 25);
    v18 = *((_QWORD *)this + 1);
    v19 = -25056;
    goto LABEL_10;
  }
  if (*((_BYTE *)this + 112))
  {
    v14 = (uint64_t *)*((_QWORD *)this + 27);
    v16 = *((_DWORD *)this + 56);
    v17 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 23);
    v15 = *((_QWORD *)this + 24);
    v18 = *((_QWORD *)this + 1);
    v19 = -25052;
LABEL_10:
    *(_DWORD *)(v18 + (v19 | 0x40000u)) += v16;
    do
    {
      v20 = *v14++;
      v21 = (_QWORD *)(v20 + (v15 >> 1));
      v22 = v17;
      if ((v15 & 1) != 0)
        v22 = *(uint64_t (**)(_QWORD *))(*v21 + v17);
      v23 = v22(v21);
      if (v23 < *((_DWORD *)this + 71))
        *((_DWORD *)this + 71) = v23;
      --v16;
    }
    while (v16);
    *((_BYTE *)this + 281) = 1;
    v24 = *((unsigned int *)this + 20);
    if (*((_BYTE *)this + 114))
    {
      if ((int)v24 >= 1)
      {
        v25 = v24 + 1;
        do
        {
          v26 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v25 - 2));
          v27 = *((_QWORD *)this + 1) + 302936;
          v43 = 0;
          BestPredWithTrace = PredStruct::getBestPredWithTrace((unsigned __int16 *)(v26 + 16), &v43, v27, a4);
          v29 = *((__int16 *)BestPredWithTrace + 4);
          *(_WORD *)(v26 + 8) = *((_WORD *)BestPredWithTrace + 4);
          *(_DWORD *)v26 = *(_DWORD *)BestPredWithTrace;
          *(_DWORD *)(v26 + 4) = v43;
          if (v11 >= v29)
            v11 = v29;
          --v25;
        }
        while (v25 > 1);
      }
    }
    else if ((int)v24 >= 1)
    {
      v30 = v24 + 1;
      do
      {
        v31 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v30 - 2));
        BestPred = PredStruct::getBestPred((PredStruct *)(v31 + 16));
        v33 = *(__int16 *)(BestPred + 8);
        *(_WORD *)(v31 + 8) = *(_WORD *)(BestPred + 8);
        *(_DWORD *)v31 = *(_DWORD *)BestPred;
        *(_DWORD *)(v31 + 4) = *(_DWORD *)(BestPred + 4);
        if (v11 >= v33)
          v11 = v33;
        --v30;
      }
      while (v30 > 1);
    }
    goto LABEL_33;
  }
  if (*((_BYTE *)this + 281))
  {
    *((_BYTE *)this + 281) = 0;
    v34 = *((unsigned int *)this + 20);
    if ((int)v34 >= 2)
    {
      v35 = *((_QWORD *)this + 9);
      v36 = v34 + 1;
      do
        *(_WORD *)(*(_QWORD *)(v35 + 8 * (v36-- - 2)) + 8) = 20000;
      while (v36 > 2);
    }
  }
LABEL_33:
  v37 = *(_QWORD *)this;
  v38 = *((_QWORD *)this + 1) + 302580;
  ++*(_DWORD *)v38;
  *(_QWORD *)(v38 + 20) += v42;
  *((_DWORD *)this + 26) = v41;
  result = (*(uint64_t (**)(OnePhonemeSyncNet *))(v37 + 328))(this);
  *((_WORD *)this + 55) = result;
  *((_WORD *)this + 54) = v11;
  v40 = *((_QWORD *)this + 1);
  if (v11 < *(__int16 *)(v40 + 246))
    *(_WORD *)(v40 + 246) = v11;
  return result;
}

uint64_t BaseSyncNet::scoreIntSilNode1<false>(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, _DWORD *a8)
{
  _BYTE *v14;
  int v15;
  unsigned __int16 *v17;
  uint64_t *BestPredWithTrace;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v23;

  *(_BYTE *)(a1 + 113) = 0;
  v14 = (_BYTE *)(a1 + 113);
  v23 = -1;
  v15 = *(_DWORD *)(a1 + 152);
  if (a2)
  {
    v17 = (unsigned __int16 *)(a1 + 264);
    if (a3)
      BestPredWithTrace = PredStruct::getBestPredWithTrace(v17, &v23, *(_QWORD *)(a1 + 8) + 302936, a4);
    else
      BestPredWithTrace = (uint64_t *)PredStruct::getBestPred((PredStruct *)v17);
    v19 = (uint64_t)BestPredWithTrace;
    if (*((__int16 *)BestPredWithTrace + 4) <= a4)
    {
      v20 = (v15 != 0) | 0x20;
      goto LABEL_10;
    }
  }
  else
  {
    v19 = 0;
  }
  if (!v15)
  {
    *(_DWORD *)(a1 + 248) = 1310740000;
    return 20000;
  }
  v20 = 1;
LABEL_10:
  v21 = a1 + 240;
  if (a3)
    Node::scoreNodeWithPatternNBest(v21, v19, v23, v20, a5, a6, *(_QWORD *)(a1 + 8), 0, a7, v14, (HmmNet *)a1);
  else
    Node::scoreNodeWithPattern(v21, v19, v20, a5, a6, *(_QWORD *)(a1 + 8), 0, a7, v14, (HmmNet *)a1);
  ++*a8;
  return *(__int16 *)(a1 + 248);
}

uint64_t OnePhonemeSyncNet::thresholdNetInternal(OnePhonemeSyncNet *this, uint64_t a2, int a3)
{
  uint64_t result;

  result = BaseSyncNet::scoreIntSilNode2((uint64_t)this, a2, a3);
  *((_DWORD *)this + 26) = 1;
  if (*((__int16 *)this + 55) > a3)
  {
    *((_DWORD *)this + 26) = 0;
    *((_WORD *)this + 55) = 20000;
  }
  return result;
}

uint64_t OnePhonemeSyncNet::calcNumActiveNodes(OnePhonemeSyncNet *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;

  v2 = *((unsigned int *)this + 38);
  if (*((_DWORD *)this + 71) <= a2)
  {
    v3 = *((unsigned int *)this + 56);
    if ((_DWORD)v3)
    {
      v5 = (uint64_t *)*((_QWORD *)this + 27);
      do
      {
        v6 = *v5++;
        v2 = Sequence::calcNumActiveNodes(v6, a2) + v2;
        --v3;
      }
      while (v3);
    }
  }
  return v2;
}

uint64_t *OnePhonemeSyncNet::addNodesSequential(uint64_t a1, Sequence *a2, int a3)
{
  uint64_t *result;
  uint64_t *v5;
  unsigned int v6;

  if (a3 == 2)
  {
    v5 = Sequence::newSequence(a2);
    v6 = *(_DWORD *)(a1 + 224);
    if (v6 == *(_DWORD *)(a1 + 228))
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1 + 216, 1, 1);
      v6 = *(_DWORD *)(a1 + 224);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * v6) = v5;
    *(_DWORD *)(a1 + 224) = v6 + 1;
    return v5 + 2;
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    result = (uint64_t *)(a1 + 240);
    *(_BYTE *)(a1 + 280) = 1;
  }
  return result;
}

uint64_t HmmNet::isTraceNet(HmmNet *this)
{
  return 0;
}

uint64_t AcousticNet::nActiveSilNodes(AcousticNet *this)
{
  return *((unsigned int *)this + 38);
}

uint64_t HmmNet::getInPortStatus(HmmNet *this)
{
  return 0;
}

uint64_t AcousticNet::isAcoustic(AcousticNet *this)
{
  return 1;
}

uint64_t BaseSyncNet::canCallBack(BaseSyncNet *this)
{
  return 1;
}

uint64_t BaseSyncNet::addCallBack(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)(result + 160) = a2;
  *(_QWORD *)(result + 168) = a3;
  *(_DWORD *)(result + 176) = a4;
  return result;
}

uint64_t AcousticNet::getRemainder(AcousticNet *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t AcousticNet::getExitContext(AcousticNet *this)
{
  return (uint64_t)this + 128;
}

uint64_t AcousticNet::getExitContextPtr(AcousticNet *this)
{
  return (uint64_t)this + 128;
}

uint64_t *Sequence::newSequence(Sequence *this)
{
  unsigned int v1;
  uint64_t *result;
  uint64_t *v3;
  uint64_t v4;

  v1 = this;
  result = MemChunkAlloc(24 * (int)this + 16, 0);
  *result = 0;
  *((_WORD *)result + 4) = 0;
  *((_WORD *)result + 5) = v1;
  if (v1)
  {
    v3 = result + 3;
    v4 = v1;
    do
    {
      *(v3 - 1) = 0x100000001;
      *(_DWORD *)v3 = 1310740000;
      *(uint64_t *)((char *)v3 + 4) = 0;
      *((_DWORD *)v3 + 3) = -65536;
      v3 += 3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t PredStruct::getBestPred(PredStruct *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;

  v1 = *((unsigned __int16 *)this + 4);
  if (v1 == 1)
    return *(_QWORD *)this;
  v3 = *(_QWORD *)this;
  v4 = v1 - 1;
  result = *(_QWORD *)(*(_QWORD *)this + 8 * (v1 - 1));
  v5 = *(__int16 *)(result + 8);
  v6 = v4 - 1;
  do
  {
    if (v5 >= *(__int16 *)(*(_QWORD *)(v3 + 8 * v6) + 8))
    {
      result = *(_QWORD *)(v3 + 8 * v6);
      v5 = *(__int16 *)(result + 8);
    }
  }
  while ((unint64_t)v6--);
  return result;
}

uint64_t ustrcmp(_BYTE *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t v4;

  while (1)
  {
    v2 = *a1;
    if (!*a1)
      break;
    ++a1;
    v3 = *a2++;
    v4 = (v2 - v3);
    if ((_DWORD)v4)
      return v4;
  }
  return -*a2;
}

uint64_t ustrncmp(_BYTE *a1, unsigned __int8 *a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  while (1)
  {
    if (!a3)
      return 0;
    v3 = *a1;
    if (!*a1)
      break;
    ++a1;
    v4 = *a2++;
    --a3;
    v5 = (v3 - v4);
    if ((_DWORD)v5)
      return v5;
  }
  return -*a2;
}

uint64_t Uns8StringLength(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  LODWORD(result) = -1;
  do
    result = (result + 1);
  while (*(_BYTE *)(v1 + result));
  return result;
}

uint64_t Uns32StringLength(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  LODWORD(result) = -1;
  do
    result = (result + 1);
  while (*(_DWORD *)(v1 + 4 * result));
  return result;
}

uint64_t isValidName(const char *a1)
{
  unsigned int v1;
  const char *v2;
  unsigned int v3;

  if ((*a1 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *(unsigned __int8 *)a1 + 60) & 0x500) != 0)
  {
    v1 = *((unsigned __int8 *)a1 + 1);
    if (!a1[1])
      return 1;
    v2 = a1 + 2;
    while ((v1 & 0x80) == 0 && ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v1 + 60) & 0x500) != 0 || v1 == 95))
    {
      v3 = *(unsigned __int8 *)v2++;
      v1 = v3;
      if (!v3)
        return 1;
    }
  }
  return 0;
}

uint64_t isValidRestrictedName(const char *a1)
{
  uint64_t result;

  result = isValidName(a1);
  if ((_DWORD)result)
    return *(unsigned __int8 *)a1 - 58 < 0xFFFFFFF6;
  return result;
}

uint64_t SDColl_StringCompare(unint64_t a1, unint64_t a2, CharInfo *a3, CharInfo *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ModelMgr *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CollMgr *v23;
  uint64_t v24;
  _BYTE v26[151];
  char v27;

  v8 = SdapiInsurance::SdapiInsurance(v26, "SDColl_StringCompare", 1, 1, 39);
  if (v26[97])
  {
    if (!a3)
      throwBadStringPointer(v8, v9, v10, v11, v12, v13, v14, v15);
    v27 = 0;
    if (!a4)
      throwBadStringPointer(v8, v9, v10, v11, v12, v13, v14, v15);
    v27 = 0;
    if (gbShowCalls)
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, '%.500s', '%.500s')\n", v9, v10, v11, v12, "SDColl_StringCompare", a1, a2, a3, a4);
    v16 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0)
      throwBadSdapiArgument("SDhVoc", a1, v10, v11, v12, v13, v14, v15);
    if ((unsigned __int16)a1 - 1 >= 0x7B)
      throwBadSdapiArgument("SDhVoc", a1, v10, v11, v12, v13, v14, v15);
    v23 = *(CollMgr **)(ModelMgr::getVocOrThrow(v16, (unsigned __int16)a1, v10, v11, v12, v13, v14, v15) + 16);
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else if (a2 == -2)
    {
      LOWORD(a2) = -2;
    }
    else
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhColl", a2, v17, v18, v19, v20, v21, v22);
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2)
        throwBadSdapiArgument("SDhColl", a2, v17, v18, v19, v20, v21, v22);
    }
    v24 = CollMgr::collStrcmpUns8(v23, a2, a3, a4, v19, v20, v21, v22);
  }
  else
  {
    v24 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v26);
  return v24;
}

void sub_20989F200()
{
  __cxa_end_catch();
  JUMPOUT(0x20989F20CLL);
}

void MrecInitModule_wavedata_frame(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugWaveCompression)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugWaveCompression", byte_209A75B64, byte_209A75B64, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugWaveCompression = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWaveCompression);
  }
}

void WaveData::WaveData(WaveData *this, const WaveData *a2)
{
  uint64_t v4;

  BitArray::BitArray(this, a2);
  *(_QWORD *)(v4 + 32) = 0;
  *(_WORD *)(v4 + 24) = *((_WORD *)a2 + 12);
  *(_WORD *)(v4 + 26) = 0;
  *(_DWORD *)(v4 + 28) = 0;
  *(_DWORD *)(v4 + 16) = *((_DWORD *)a2 + 4);
  *(_DWORD *)(v4 + 20) = 0;
  *(_DWORD *)(v4 + 40) = 0;
  *(_WORD *)(v4 + 52) = *((_WORD *)a2 + 26);
  DgnPrimFixArray<short>::copyArraySlice((uint64_t *)(v4 + 32), (uint64_t *)a2 + 4, 0, *((_DWORD *)a2 + 10));
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
}

void sub_20989F318(_Unwind_Exception *a1)
{
  BitArray *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  BitArray::~BitArray(v1);
  _Unwind_Resume(a1);
}

void WaveData::~WaveData(WaveData *this)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 32);
  BitArray::~BitArray(this);
}

uint64_t *DgnPrimFixArray<short>::copyArraySlice(uint64_t *result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;

  v7 = result;
  if (!a4 || *((_DWORD *)result + 2))
  {
    if (!a4)
      return result;
  }
  else
  {
    result = MemChunkAlloc(2 * a4, 0);
    *v7 = (uint64_t)result;
    *((_DWORD *)v7 + 2) = a4;
  }
  v8 = *a2;
  v9 = (_WORD *)*v7;
  v10 = a4;
  do
  {
    *v9++ = *(_WORD *)(v8 + 2 * a3++);
    --v10;
  }
  while (v10);
  return result;
}

unint64_t DgnPRandom::normalizedNext(DgnPRandom *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  int32x2_t v4;

  v2 = *((int *)this + 58);
  v3 = *((_DWORD *)this + v2 + 1) + *((_DWORD *)this + *((int *)this + 57) + 1);
  *((_DWORD *)this + v2 + 1) = v3;
  v4 = vadd_s32(*(int32x2_t *)((char *)this + 228), (int32x2_t)-1);
  *(int8x8_t *)((char *)this + 228) = vbsl_s8((int8x8_t)vceqz_s32(v4), (int8x8_t)0x3700000037, (int8x8_t)v4);
  return (v3 * (unint64_t)a2) >> 32;
}

uint64_t DgnPRandom::initialize(uint64_t this, int a2)
{
  uint64_t v2;
  int *v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int32x2_t v8;
  int8x8_t v9;

  v2 = 224;
  v3 = &sPRandTable;
  do
  {
    v4 = *v3++;
    *(_DWORD *)(this + v2) = v4;
    v2 -= 4;
  }
  while (v2 != 4);
  *(_QWORD *)(this + 228) = 0x3700000018;
  if (a2)
    *(_DWORD *)(this + 8) = a2;
  *(_BYTE *)this = 1;
  v5 = (unsigned __int16)a2 + 10001;
  v6 = 24;
  v7 = 55;
  do
  {
    *(_DWORD *)(this + 4 + 4 * v7) += *(_DWORD *)(this + 4 + 4 * v6);
    v8 = vadd_s32(*(int32x2_t *)(this + 228), (int32x2_t)-1);
    v9 = vbsl_s8((int8x8_t)vceqz_s32(v8), (int8x8_t)0x3700000037, (int8x8_t)v8);
    *(int8x8_t *)(this + 228) = v9;
    v7 = v9.i32[1];
    v6 = v9.i32[0];
    --v5;
  }
  while (v5 > 1);
  return this;
}

void IntruderSet::~IntruderSet(IntruderSet *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this);
}

uint64_t writeObject<DgnPrimArray<unsigned char>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject<unsigned char>(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void readObject<DgnPrimArray<unsigned char>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;

  v16 = 0;
  readObject((uint64_t)a1, &v16, a3);
  v6 = v16;
  v7 = *(_DWORD *)(a2 + 12);
  if (v16 > v7)
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v16 - v7, 0);
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v11 = v6 - v8;
      v12 = 16 * v8;
      do
      {
        v13 = (_QWORD *)(*(_QWORD *)a2 + v12);
        *v13 = 0;
        v13[1] = 0;
        v12 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    v9 = (int)v8;
    v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a2 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if ((_DWORD)v6)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      readObject<unsigned char>(a1, *(_QWORD *)a2 + v14, a3);
      ++v15;
      v14 += 16;
    }
    while (v15 < *(unsigned int *)(a2 + 8));
  }
}

uint64_t IntruderSet::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sizeObject<DgnPrimArray<unsigned char>>(a1, a2);
  v5 = sizeObject<unsigned short>(a1 + 16, a2) + v4;
  v6 = sizeObject<unsigned short>(a1 + 32, a2);
  v7 = v5 + v6 + sizeObject<unsigned int>(a1 + 48, a2);
  v8 = sizeObject<unsigned int>(a1 + 64, a2);
  v9 = v8 + sizeObject<unsigned short>(a1 + 80, a2);
  v10 = v7 + v9 + sizeObject<unsigned short>(a1 + 96, a2);
  return v10 + sizeObject<unsigned short>(a1 + 112, a2);
}

uint64_t sizeObject<DgnPrimArray<unsigned char>>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];

  v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  else
    v3 = 16;
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v2 = v3;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 8);
      v2 = v3;
      if ((int)v6 >= 1)
      {
        v7 = v6 + 1;
        v2 = v3;
        do
          v2 += sizeObject<unsigned char>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2)
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  return v2;
}

void sub_20989F8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IntruderMgr::~IntruderMgr(IntruderMgr *this)
{
  _QWORD *v2;

  *((_QWORD *)this + 1) = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    (*(void (**)(_QWORD))(*v2 + 16))(*((_QWORD *)this + 2));
    MemChunkFree(v2, 0);
  }
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 17) = 0;
  *((_WORD *)this + 44) = 0;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 176);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 160);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 144);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnIOwnArray<IntruderSet *>::releaseAll((uint64_t)this + 72);
  AdaptConfig::clear((_QWORD *)this + 5);
  FileSpec::~FileSpec((IntruderMgr *)((char *)this + 24));
}

void IntruderMgr::printSize(IntruderMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 388, (DgnString *)&v154);
  if ((_DWORD)v155)
    v16 = v154;
  else
    v16 = &unk_209A75C58;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A75C58, a3, &unk_209A75C58, v16);
  DgnString::~DgnString((DgnString *)&v154);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A75C58);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 389, (DgnString *)&v154);
  if ((_DWORD)v155)
    v27 = v154;
  else
    v27 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A75C58, (34 - a3), (34 - a3), v27, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 390, (DgnString *)&v154);
  if ((_DWORD)v155)
    v32 = v154;
  else
    v32 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A75C58, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v33 = 4;
  else
    v33 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 391, (DgnString *)&v154);
  if ((_DWORD)v155)
    v38 = v154;
  else
    v38 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), &unk_209A75C58, (34 - a3), (34 - a3), v38, v33, v33, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v33;
  *a5 += v33;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 4;
  else
    v39 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 392, (DgnString *)&v154);
  if ((_DWORD)v155)
    v44 = v154;
  else
    v44 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &unk_209A75C58, (34 - a3), (34 - a3), v44, v39, v39, 0);
  v153 = a3;
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v39;
  *a5 += v39;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v45 = 4;
  else
    v45 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 393, (DgnString *)&v154);
  if ((_DWORD)v155)
    v50 = v154;
  else
    v50 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, (a3 + 1), &unk_209A75C58, (34 - a3), (34 - a3), v50, v45, v45, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v45;
  *a5 += v45;
  v51 = sizeObject((uint64_t)this + 40, 0);
  v52 = sizeObject((uint64_t)this + 40, 1);
  v53 = sizeObject((uint64_t)this + 40, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 394, (DgnString *)&v154);
  if ((_DWORD)v155)
    v58 = v154;
  else
    v58 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v21, &unk_209A75C58, v22, v22, v58, v51, v52, v53);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v51;
  *a5 += v52;
  *a6 += v53;
  v59 = FileSpec::sizeObject((uint64_t)this + 24);
  v60 = FileSpec::sizeObject((uint64_t)this + 24);
  v61 = FileSpec::sizeObject((uint64_t)this + 24);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 395, (DgnString *)&v154);
  if ((_DWORD)v155)
    v66 = v154;
  else
    v66 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v21, &unk_209A75C58, v22, v22, v66, v59, v60, v61);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v59;
  *a5 += v60;
  *a6 += v61;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 397, (DgnString *)&v154);
  if ((_DWORD)v155)
    v71 = v154;
  else
    v71 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v21, &unk_209A75C58, v22, v22, v71, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 399, (DgnString *)&v154);
  if ((_DWORD)v155)
    v76 = v154;
  else
    v76 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v21, &unk_209A75C58, v22, v22, v76, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += 4;
  *a5 += 4;
  v77 = sizeObject<IntruderSet *>((uint64_t)this + 72, 0);
  v78 = sizeObject<IntruderSet *>((uint64_t)this + 72, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 401, (DgnString *)&v154);
  if ((_DWORD)v155)
    v83 = v154;
  else
    v83 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, v21, &unk_209A75C58, v22, v22, v83, v77, v78, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v77;
  *a5 += v78;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v84 = 12;
  else
    v84 = 16;
  v85 = *((unsigned int *)this + 26);
  v86 = *((_DWORD *)this + 27);
  if (v86 >= v85)
  {
    v87 = 0;
    if ((int)v85 > 0)
      v84 += 8 * (v85 - 1) + 8;
    v88 = v84 + 8 * (v86 - v85);
  }
  else
  {
    v87 = 8 * v85;
    v88 = v84;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 403, (DgnString *)&v154);
  if ((_DWORD)v155)
    v93 = v154;
  else
    v93 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v89, v90, v91, v92, v21, &unk_209A75C58, v22, v22, v93, v88, v84, v87);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v88;
  *a5 += v84;
  *a6 += v87;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v94 = 12;
  else
    v94 = 16;
  v95 = *((unsigned int *)this + 30);
  v96 = *((_DWORD *)this + 31);
  if (v96 >= v95)
  {
    v97 = 0;
    if ((int)v95 > 0)
      v94 += 8 * (v95 - 1) + 8;
    v98 = v94 + 8 * (v96 - v95);
  }
  else
  {
    v97 = 8 * v95;
    v98 = v94;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 405, (DgnString *)&v154);
  if ((_DWORD)v155)
    v103 = v154;
  else
    v103 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v99, v100, v101, v102, v21, &unk_209A75C58, v22, v22, v103, v98, v94, v97);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v98;
  *a5 += v94;
  *a6 += v97;
  v104 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 128, 0);
  v105 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 128, 1);
  v154 = 0;
  v155 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v154);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 407, (DgnString *)&v154);
  if ((_DWORD)v155)
    v110 = v154;
  else
    v110 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v21, &unk_209A75C58, v22, v22, v110, v104, v105, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v104;
  *a5 += v105;
  v111 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 144, 0);
  v112 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 144, 1);
  v154 = 0;
  v155 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v154);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 409, (DgnString *)&v154);
  if ((_DWORD)v155)
    v117 = v154;
  else
    v117 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v113, v114, v115, v116, v21, &unk_209A75C58, v22, v22, v117, v111, v112, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v111;
  *a5 += v112;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 411, (DgnString *)&v154);
  if ((_DWORD)v155)
    v122 = v154;
  else
    v122 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v118, v119, v120, v121, v21, &unk_209A75C58, v22, v22, v122, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v154);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 413, (DgnString *)&v154);
  if ((_DWORD)v155)
    v127 = v154;
  else
    v127 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v123, v124, v125, v126, v21, &unk_209A75C58, v22, v22, v127, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v154);
  ++*a4;
  ++*a5;
  v128 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 160, 0);
  v129 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 160, 1);
  v154 = 0;
  v155 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v154);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 414, (DgnString *)&v154);
  if ((_DWORD)v155)
    v134 = v154;
  else
    v134 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v21, &unk_209A75C58, v22, v22, v134, v128, v129, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v128;
  *a5 += v129;
  v135 = (char *)this + 176;
  v136 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 176, 0);
  v137 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)v135, 1);
  v154 = 0;
  v155 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v154);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 415, (DgnString *)&v154);
  if ((_DWORD)v155)
    v142 = v154;
  else
    v142 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v138, v139, v140, v141, v21, &unk_209A75C58, v22, v22, v142, v136, v137, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v136;
  *a5 += v137;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 416, (DgnString *)&v154);
  if ((_DWORD)v155)
    v147 = v154;
  else
    v147 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v143, v144, v145, v146, v21, &unk_209A75C58, v22, v22, v147, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 417, (DgnString *)&v154);
  if ((_DWORD)v155)
    v152 = v154;
  else
    v152 = &unk_209A75C58;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v148, v149, v150, v151, v153, &unk_209A75C58, (35 - v153), (35 - v153), v152, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v154);
}

void sub_2098A048C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<IntruderSet *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += IntruderSet::sizeObject(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t DgnArray<DgnPrimArray<unsigned char>>::copyArraySlice(uint64_t result, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v7 = result;
  v8 = *(unsigned int *)(result + 8);
  if ((int)v8 >= 1)
  {
    v9 = 16 * v8 - 16;
    do
    {
      result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)v7 + v9);
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(v7 + 8) = 0;
  v10 = *(_DWORD *)(v7 + 12);
  if (a4 <= v10)
  {
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_14;
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(v7, a4 - v10, 0);
    v11 = *(_DWORD *)(v7 + 8);
  }
  v13 = 0;
  v12 = v11;
  do
  {
    v14 = *a2 + 16 * (a3 + v13);
    v15 = (_QWORD *)(*(_QWORD *)v7 + 16 * v12);
    *v15 = 0;
    v15[1] = 0;
    result = DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v15, (_QWORD *)v14, 0, *(_DWORD *)(v14 + 8));
    v12 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      v16 = (int)v12;
      v17 = 16 * (int)v12 - 16;
      do
      {
        --v16;
        result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)v7 + v17);
        v17 -= 16;
      }
      while (v16 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    v18 = a4 - (unint64_t)v12;
    v19 = 16 * v12;
    do
    {
      v20 = (_QWORD *)(*(_QWORD *)v7 + v19);
      *v20 = 0;
      v20[1] = 0;
      v19 += 16;
      --v18;
    }
    while (v18);
  }
LABEL_17:
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

_QWORD *DgnIOwnArray<IntruderSet *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<IntruderSet>(*(IntruderSet **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t TInputStream::verifyVersion(TInputStream *this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int *v16;
  unsigned __int8 v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD *v21;
  TLocaleInfo *v22;
  void *__p[2];
  char v24;

  v10 = (char *)this + 152;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v15 = (char *)std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::find<std::string>((uint64_t)v10, (const void **)__p);
  if (v24 < 0)
    operator delete(__p[0]);
  if ((char *)this + 160 != v15)
  {
    LOBYTE(__p[0]) = 0;
    v16 = (unsigned int *)(v15 + 56);
    if (v15[79] < 0)
      v16 = *(unsigned int **)v16;
    if ((v17 & 1) == 0
    {
      v22 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v22);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v22;
    }
    v18 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v16, (BOOL *)__p);
    if (LOBYTE(__p[0]))
    {
      v19 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v19 = (_QWORD *)*v19;
      tknPrintf("Error: %s : Expected %s in range [%llu,%llu]\n", v11, v12, v13, v14, v19, a2, a3, a4);
      return 1;
    }
    a5 = v18;
  }
  if (a5 >= a3 && a5 <= a4)
    return 0;
  v21 = (_QWORD *)((char *)this + 16);
  if (*((char *)this + 39) < 0)
    v21 = (_QWORD *)*v21;
  tknPrintf("Error: %s : %llu : Expected %s in range [%llu,%llu]\n", v11, v12, v13, v14, v21, a5, a2, a3, a4);
  return 1;
}

void sub_2098A0908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  MEMORY[0x20BD149A8](v19, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TInputStream::verifyHeader(uint64_t a1, char *__s, uint64_t a3, uint64_t a4)
{
  const void **v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  const void *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  const void *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v8 = (const void **)(a1 + 40);
  v9 = strlen(__s);
  v13 = v9;
  v14 = *(unsigned __int8 *)(a1 + 63);
  if (*(char *)(a1 + 63) < 0)
  {
    if (v9 != *(_QWORD *)(a1 + 48))
      goto LABEL_9;
    if (v9 == -1)
      goto LABEL_57;
    v15 = *v8;
  }
  else
  {
    if (v9 != v14)
      goto LABEL_9;
    v15 = v8;
    if (v13 == -1)
LABEL_57:
      std::wstring::__throw_out_of_range[abi:ne180100]();
  }
  if (memcmp(v15, __s, v13))
  {
LABEL_9:
    v16 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
    {
      v16 = (_QWORD *)*v16;
      if ((v14 & 0x80) == 0)
        goto LABEL_11;
    }
    else if ((v14 & 0x80) == 0)
    {
LABEL_11:
      tknPrintf("Error: File '%s' : '%s' : Bad file type, expected '%s'\n", v10, v13, v11, v12, v16, v8, __s);
      return 1;
    }
    v8 = (const void **)*v8;
    goto LABEL_11;
  }
  v38 = a3;
  if (!a4)
  {
LABEL_37:
    v28 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v28 = (_QWORD *)*v28;
    v29 = (_QWORD *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v29 = (_QWORD *)*v29;
    tknPrintf("Error: File '%s' : '%s' : Unsupported file version prefix. Supported file versions: ", v10, v13, v11, v12, v28, v29);
    if (a4)
    {
      v34 = (_QWORD *)(v38 + 24);
      v35 = 1;
      do
      {
        if (!*(v34 - 2))
        {
          if ((v35 & 1) == 0)
            tknPrintString(", ");
          if (*(_BYTE *)*(v34 - 1))
            tknPrintf("%s.", v30, v31, v32, v33, *(v34 - 1));
          tknPrintf("%llu", v30, v31, v32, v33, *v34);
          v35 = 0;
        }
        v34 += 4;
        --a4;
      }
      while (a4);
    }
    tknPrintString("\n");
    return 1;
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = *(unsigned __int8 *)(a1 + 95);
  v22 = v38 + 16;
  v23 = a4;
  do
  {
    v24 = strlen(*(const char **)v22);
    v13 = v24;
    if ((v21 & 0x80) != 0)
    {
      if (v24 != *(_QWORD *)(a1 + 80))
        goto LABEL_31;
      if (v24 == -1)
        std::wstring::__throw_out_of_range[abi:ne180100]();
      v25 = *(const void **)(a1 + 72);
    }
    else
    {
      v25 = (const void *)(a1 + 72);
      if (v13 != v21)
        goto LABEL_31;
    }
    if (!memcmp(v25, *(const void **)v22, v13))
    {
      if (*(_QWORD *)(a1 + 96) == *(_QWORD *)(v22 + 8))
        v23 = v18;
      if (v20)
        v26 = v20;
      else
        v26 = *(_QWORD *)(v22 + 8);
      if (!*(_QWORD *)(v22 - 8))
      {
        v20 = v26;
        v19 = *(_QWORD *)(v22 + 8);
      }
    }
LABEL_31:
    ++v18;
    v22 += 32;
  }
  while (a4 != v18);
  if (!v20)
    goto LABEL_37;
  if (v23 == a4)
  {
    v27 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v27 = (_QWORD *)*v27;
    tknPrintf("Error: %s : %llu : Expected file version in range [%llu,%llu]\n", v10, v13, v11, v12, v27, *(_QWORD *)(a1 + 96), v20, v19);
    return 1;
  }
  v36 = *(_QWORD *)(v38 + 32 * v23 + 8);
  if (v36)
  {
    v37 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v37 = (_QWORD *)*v37;
    tknPrintf("Error: %s : %llu : Deprecated in or around TextProc version %s. Expected file version in range [%llu,%llu]\n", v10, v13, v11, v12, v37, *(_QWORD *)(a1 + 96), v36, v20, v19);
    return 1;
  }
  return 0;
}

uint64_t TInputStream::readHeader(TInputStream *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *NextToken;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::string *p_str;
  int v60;
  int v62;
  uint64_t v63;
  unint64_t v64;
  std::string *p_second;
  std::pair<std::string, std::string> *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::string::size_type v71;
  uint64_t *v72;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  std::pair<std::string, std::string> *v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  _QWORD *v117;
  std::string *v118;
  const char *size;
  _QWORD *v120;
  std::string *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  _QWORD *exception;
  std::string *v132;
  const char *v133;
  _QWORD *v134;
  std::string *v135;
  const char *v136;
  _QWORD *v137;
  std::string *v138;
  const char *v139;
  _QWORD *v140;
  std::string *v141;
  const char *v142;
  _QWORD *v143;
  std::string *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  _QWORD *v176;
  std::string *v177;
  const char *v178;
  _QWORD *v179;
  std::string *v180;
  const char *v181;
  _QWORD *v182;
  std::string *v183;
  const char *v184;
  _QWORD *v185;
  std::string *v186;
  const char *v187;
  _QWORD *v188;
  std::string *v189;
  const char *v190;
  _QWORD *v191;
  std::string *v192;
  const char *v193;
  _QWORD *v194;
  std::string *v195;
  const char *v196;
  _QWORD *v197;
  std::string *v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  const char *v207;
  _QWORD *v208;
  std::string *v209;
  __int128 v210;
  int v211;
  std::string *v212;
  void *v213[2];
  uint64_t v214;
  _BYTE v215[24];
  uint64_t v216;
  std::vector<std::pair<std::string, std::string>> v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  std::string __str;
  void *__p[2];
  char v229;
  uint64_t v230;
  char v231;
  char v232;
  _BYTE __s[24];
  _BYTE v234[17];
  char v235;
  _BYTE v236[24];
  _QWORD v237[2];
  char v238;
  char *__s1;
  __int128 v240;
  _BYTE v241[256];
  char v242;
  uint64_t v243;

  v243 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 8))
    return 0;
  v212 = (std::string *)((char *)this + 72);
  MEMORY[0x20BD14750]();
  *((_QWORD *)this + 12) = 1;
  if (*((char *)this + 63) < 0)
  {
    **((_BYTE **)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
  }
  else
  {
    *((_BYTE *)this + 40) = 0;
    *((_BYTE *)this + 63) = 0;
  }
  std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  *((_QWORD *)this + 19) = (char *)this + 160;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 20) = 0;
  std::istream::tellg();
  v3 = v230;
  __s1 = v241;
  v240 = xmmword_209A57DD0;
  v242 = 1;
  TInputStream::getNextLine((uint64_t)this, (uint64_t)&__s1);
  if (*((_QWORD *)&v240 + 1) >= (unint64_t)v240)
  {
    if (v242)
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v240 + 1), (char *)&__str, 1uLL);
      --*((_QWORD *)&v240 + 1);
    }
    else if ((_QWORD)v240)
    {
      __s1[(_QWORD)v240 - 1] = 0;
    }
  }
  else
  {
    __s1[*((_QWORD *)&v240 + 1)] = 0;
  }
  v4 = __s1;
  if (!strncmp(__s1, "TKNHEADER_", 0xAuLL))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_209A57DD0;
    v231 = 1;
    while (1)
    {
      if (*((_QWORD *)&v240 + 1) >= (unint64_t)v240)
      {
        if (v242)
        {
          v236[0] = 0;
          TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v240 + 1), v236, 1uLL);
          --*((_QWORD *)&v240 + 1);
        }
        else if ((_QWORD)v240)
        {
          __s1[(_QWORD)v240 - 1] = 0;
        }
      }
      else
      {
        __s1[*((_QWORD *)&v240 + 1)] = 0;
      }
      NextToken = getNextToken(__s1, (uint64_t)&__str, " ");
      if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
      {
        if (v231)
        {
          v236[0] = 0;
          TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, v236, 1uLL);
        }
        else if (__str.__r_.__value_.__l.__size_)
        {
          *(_BYTE *)(__str.__r_.__value_.__l.__size_ + __str.__r_.__value_.__r.__words[0] - 1) = 0;
        }
      }
      else
      {
        *(_BYTE *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__r.__words[2]) = 0;
      }
      v6 = (void **)__str.__r_.__value_.__r.__words[0];
      if (!strcmp(__str.__r_.__value_.__l.__data_, "TKNHEADER_END"))
        break;
      if (!NextToken)
      {
        v77 = (_QWORD *)((char *)this + 16);
        if (*((char *)this + 39) < 0)
          v77 = (_QWORD *)*v77;
        v78 = TBuffer<char>::c_str((uint64_t)&__s1);
        tknPrintf("Error: File '%s' : '%s' : Bad entry in file header\n", v79, v80, v81, v82, v77, v78);
        std::string::basic_string[abi:ne180100]<0>(__s, &byte_209A88803);
        *(_QWORD *)v236 = aPpx;
        if ((__s[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v236[8], *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
        }
        else
        {
          *(_OWORD *)&v236[8] = *(_OWORD *)__s;
          v237[0] = *(_QWORD *)&__s[16];
        }
        *(_QWORD *)v236 = &unk_24C215870;
        if (v237[0] >= 0)
          v130 = &v236[8];
        else
          v130 = *(const char **)&v236[8];
        conditionalAssert(v130, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 239, v83, v84);
        *(_QWORD *)v236 = aPpx;
        if (SHIBYTE(v237[0]) < 0)
          operator delete(*(void **)&v236[8]);
        if ((__s[23] & 0x80000000) != 0)
          operator delete(*(void **)__s);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v236, &byte_209A88803);
        *exception = aPpx;
        v132 = (std::string *)(exception + 1);
        if ((v236[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v132, *(const std::string::value_type **)v236, *(std::string::size_type *)&v236[8]);
        }
        else
        {
          v162 = *(_OWORD *)v236;
          exception[3] = *(_QWORD *)&v236[16];
          *(_OWORD *)&v132->__r_.__value_.__l.__data_ = v162;
        }
        *exception = &unk_24C215870;
      }
      if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
      {
        if (v231)
        {
          v236[0] = 0;
          TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, v236, 1uLL);
        }
        else if (__str.__r_.__value_.__l.__size_)
        {
          *((_BYTE *)v6 + __str.__r_.__value_.__l.__size_ - 1) = 0;
        }
      }
      else
      {
        *((_BYTE *)v6 + __str.__r_.__value_.__r.__words[2]) = 0;
      }
      v11 = __str.__r_.__value_.__r.__words[0];
      if (!strcmp(__str.__r_.__value_.__l.__data_, "TKNHEADER_FILETYPE"))
      {
        getNextToken(NextToken, (uint64_t)&__str, " ");
        if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
        {
          if (v231)
          {
            v236[0] = 0;
            TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, v236, 1uLL);
          }
          else if (__str.__r_.__value_.__l.__size_)
          {
            *(_BYTE *)(__str.__r_.__value_.__l.__size_ + __str.__r_.__value_.__r.__words[0] - 1) = 0;
          }
        }
        else
        {
          *(_BYTE *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__r.__words[2]) = 0;
        }
        MEMORY[0x20BD14750]((char *)this + 40, __str.__r_.__value_.__r.__words[0]);
      }
      else
      {
        if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
        {
          if (v231)
          {
            v236[0] = 0;
            TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, v236, 1uLL);
          }
          else if (__str.__r_.__value_.__l.__size_)
          {
            *(_BYTE *)(__str.__r_.__value_.__l.__size_ + v11 - 1) = 0;
          }
        }
        else
        {
          *(_BYTE *)(v11 + __str.__r_.__value_.__r.__words[2]) = 0;
        }
        if (strcmp(__str.__r_.__value_.__l.__data_, "TKNHEADER_FILEVERSION"))
        {
          v88 = (_QWORD *)((char *)this + 16);
          if (*((char *)this + 39) < 0)
            v88 = (_QWORD *)*v88;
          v89 = TBuffer<char>::c_str((uint64_t)&__str);
          tknPrintf("Error: File '%s' : '%s' : Bad entry in file header\n", v90, v91, v92, v93, v88, v89);
          std::string::basic_string[abi:ne180100]<0>(__s, &byte_209A88803);
          *(_QWORD *)v236 = aPpx;
          if ((__s[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v236[8], *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
          }
          else
          {
            *(_OWORD *)&v236[8] = *(_OWORD *)__s;
            v237[0] = *(_QWORD *)&__s[16];
          }
          *(_QWORD *)v236 = &unk_24C215870;
          if (v237[0] >= 0)
            v136 = &v236[8];
          else
            v136 = *(const char **)&v236[8];
          conditionalAssert(v136, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 255, v94, v95);
          *(_QWORD *)v236 = aPpx;
          if (SHIBYTE(v237[0]) < 0)
            operator delete(*(void **)&v236[8]);
          if ((__s[23] & 0x80000000) != 0)
            operator delete(*(void **)__s);
          v137 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v236, &byte_209A88803);
          *v137 = aPpx;
          v138 = (std::string *)(v137 + 1);
          if ((v236[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v138, *(const std::string::value_type **)v236, *(std::string::size_type *)&v236[8]);
          }
          else
          {
            v164 = *(_OWORD *)v236;
            v137[3] = *(_QWORD *)&v236[16];
            *(_OWORD *)&v138->__r_.__value_.__l.__data_ = v164;
          }
          *v137 = &unk_24C215870;
        }
        *((_QWORD *)this + 12) = atol(NextToken);
      }
      if (!TInputStream::getNextLine((uint64_t)this, (uint64_t)&__s1))
      {
        v16 = (_QWORD *)((char *)this + 16);
        if (*((char *)this + 39) < 0)
          v16 = (_QWORD *)*v16;
        tknPrintf("Error: File '%s' : Missing TKNHEADER_END\n", v12, v13, v14, v15, v16);
        std::string::basic_string[abi:ne180100]<0>(__s, &byte_209A88803);
        *(_QWORD *)v236 = aPpx;
        if ((__s[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v236[8], *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
        }
        else
        {
          *(_OWORD *)&v236[8] = *(_OWORD *)__s;
          v237[0] = *(_QWORD *)&__s[16];
        }
        *(_QWORD *)v236 = &unk_24C215870;
        if (v237[0] >= 0)
          v116 = &v236[8];
        else
          v116 = *(const char **)&v236[8];
        conditionalAssert(v116, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 263, v17, v18);
        *(_QWORD *)v236 = aPpx;
        if (SHIBYTE(v237[0]) < 0)
          operator delete(*(void **)&v236[8]);
        if ((__s[23] & 0x80000000) != 0)
          operator delete(*(void **)__s);
        v117 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v236, &byte_209A88803);
        *v117 = aPpx;
        v118 = (std::string *)(v117 + 1);
        if ((v236[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v118, *(const std::string::value_type **)v236, *(std::string::size_type *)&v236[8]);
        }
        else
        {
          v148 = *(_OWORD *)v236;
          v117[3] = *(_QWORD *)&v236[16];
          *(_OWORD *)&v118->__r_.__value_.__l.__data_ = v148;
        }
        *v117 = &unk_24C215870;
      }
    }
    if (!NextToken)
    {
      v145 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v145 = (_QWORD *)*v145;
      tknPrintf("Error: '%s' : TKNHEADER_END does not take a parameter\n", v7, v8, v9, v10, v145);
      std::string::basic_string[abi:ne180100]<0>(__s, &byte_209A88803);
      *(_QWORD *)v236 = aPpx;
      if ((__s[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v236[8], *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
      }
      else
      {
        *(_OWORD *)&v236[8] = *(_OWORD *)__s;
        v237[0] = *(_QWORD *)&__s[16];
      }
      *(_QWORD *)v236 = &unk_24C215870;
      if (v237[0] >= 0)
        v178 = &v236[8];
      else
        v178 = *(const char **)&v236[8];
      conditionalAssert(v178, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 228, v146, v147);
      *(_QWORD *)v236 = aPpx;
      if (SHIBYTE(v237[0]) < 0)
        operator delete(*(void **)&v236[8]);
      if ((__s[23] & 0x80000000) != 0)
        operator delete(*(void **)__s);
      v179 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v236, &byte_209A88803);
      *v179 = aPpx;
      v180 = (std::string *)(v179 + 1);
      if ((v236[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v180, *(const std::string::value_type **)v236, *(std::string::size_type *)&v236[8]);
      }
      else
      {
        v200 = *(_OWORD *)v236;
        v179[3] = *(_QWORD *)&v236[16];
        *(_OWORD *)&v180->__r_.__value_.__l.__data_ = v200;
      }
      *v179 = &unk_24C215870;
    }
    if (*((char *)this + 63) < 0)
    {
      if (*((_QWORD *)this + 6))
      {
LABEL_60:
        if (v231 && v6 != __p && v6)
        {
          v19 = v6;
          goto LABEL_256;
        }
LABEL_257:
        v2 = 1;
        goto LABEL_258;
      }
    }
    else if (*((_BYTE *)this + 63))
    {
      goto LABEL_60;
    }
    v20 = (_QWORD *)((char *)this + 16);
    if (*((char *)this + 39) < 0)
      v20 = (_QWORD *)*v20;
    tknPrintf("Error: File '%s' : Missing TKNHEADER_FILETYPE\n", v7, v8, v9, v10, v20);
    std::string::basic_string[abi:ne180100]<0>(__s, &byte_209A88803);
    *(_QWORD *)v236 = aPpx;
    if ((__s[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v236[8], *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
    }
    else
    {
      *(_OWORD *)&v236[8] = *(_OWORD *)__s;
      v237[0] = *(_QWORD *)&__s[16];
    }
    *(_QWORD *)v236 = &unk_24C215870;
    if (v237[0] >= 0)
      v181 = &v236[8];
    else
      v181 = *(const char **)&v236[8];
    conditionalAssert(v181, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 269, v21, v22);
    *(_QWORD *)v236 = aPpx;
    if (SHIBYTE(v237[0]) < 0)
      operator delete(*(void **)&v236[8]);
    if ((__s[23] & 0x80000000) != 0)
      operator delete(*(void **)__s);
    v182 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v236, &byte_209A88803);
    *v182 = aPpx;
    v183 = (std::string *)(v182 + 1);
    if ((v236[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v183, *(const std::string::value_type **)v236, *(std::string::size_type *)&v236[8]);
    }
    else
    {
      v201 = *(_OWORD *)v236;
      v182[3] = *(_QWORD *)&v236[16];
      *(_OWORD *)&v183->__r_.__value_.__l.__data_ = v201;
    }
    *v182 = &unk_24C215870;
  }
  if (*((_QWORD *)&v240 + 1) >= (unint64_t)v240)
  {
    if (v242)
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v240 + 1), (char *)&__str, 1uLL);
      --*((_QWORD *)&v240 + 1);
    }
    else if ((_QWORD)v240)
    {
      v4[(_QWORD)v240 - 1] = 0;
    }
  }
  else
  {
    v4[*((_QWORD *)&v240 + 1)] = 0;
  }
  if (!strcmp(__s1, "HEADER_BEGIN"))
  {
    *(_QWORD *)v236 = v237;
    *(_OWORD *)&v236[8] = xmmword_209A57DD0;
    v23 = 1;
    v238 = 1;
    *(_QWORD *)__s = v234;
    *(_OWORD *)&__s[8] = xmmword_209A57DD0;
    v235 = 1;
    v211 = *(_DWORD *)(*((_QWORD *)this + 22) + 64);
    memset(&v217, 0, sizeof(v217));
    while (1)
    {
      if (!TInputStream::getNextLine((uint64_t)this, (uint64_t)&__s1))
      {
        v85 = (_QWORD *)((char *)this + 16);
        if (*((char *)this + 39) < 0)
          v85 = (_QWORD *)*v85;
        tknPrintf("Error: File '%s' : Missing HEADER_END\n", v24, v25, v26, v27, v85);
        std::string::basic_string[abi:ne180100]<0>(v215, &byte_209A88803);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
        if ((v215[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
        }
        else
        {
          *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
          __p[0] = *(void **)&v215[16];
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C215870;
        if (SHIBYTE(__p[0]) >= 0)
          size = &__str.__r_.__value_.__s.__data_[8];
        else
          size = (const char *)__str.__r_.__value_.__l.__size_;
        conditionalAssert(size, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 384, v86, v87);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
        if (SHIBYTE(__p[0]) < 0)
          operator delete((void *)__str.__r_.__value_.__l.__size_);
        if ((v215[23] & 0x80000000) != 0)
          operator delete(*(void **)v215);
        v120 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__str, &byte_209A88803);
        *v120 = aPpx;
        v121 = (std::string *)(v120 + 1);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v121, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          v161 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v120[3] = *((_QWORD *)&__str.__r_.__value_.__l + 2);
          *(_OWORD *)&v121->__r_.__value_.__l.__data_ = v161;
        }
        *v120 = &unk_24C215870;
      }
      if (*((_QWORD *)&v240 + 1) >= (unint64_t)v240)
      {
        if (v242)
        {
          v215[0] = 0;
          TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v240 + 1), v215, 1uLL);
          --*((_QWORD *)&v240 + 1);
        }
        else if ((_QWORD)v240)
        {
          __s1[(_QWORD)v240 - 1] = 0;
        }
      }
      else
      {
        __s1[*((_QWORD *)&v240 + 1)] = 0;
      }
      v28 = getNextToken(__s1, (uint64_t)v236, " ");
      v29 = getNextToken(v28, (uint64_t)__s, " ");
      if (*(_QWORD *)&v236[16] >= *(_QWORD *)&v236[8])
      {
        if (v238)
        {
          v215[0] = 0;
          TBuffer<char>::insert((uint64_t)v236, *(unint64_t *)&v236[16], v215, 1uLL);
          --*(_QWORD *)&v236[16];
        }
        else if (*(_QWORD *)&v236[8])
        {
          *(_BYTE *)(*(_QWORD *)&v236[8] + *(_QWORD *)v236 - 1) = 0;
        }
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)v236 + *(_QWORD *)&v236[16]) = 0;
      }
      v30 = *(_QWORD *)v236;
      if (!strcmp(*(const char **)v236, "HEADER_END"))
      {
        if (v29)
        {
          v149 = (_QWORD *)((char *)this + 16);
          if (*((char *)this + 39) < 0)
            v149 = (_QWORD *)*v149;
          tknPrintf("Error: '%s' : HEADER_END does not take a parameter\n", v31, v32, v33, v34, v149);
          std::string::basic_string[abi:ne180100]<0>(v215, &byte_209A88803);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
          if ((v215[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
          }
          else
          {
            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
            __p[0] = *(void **)&v215[16];
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C215870;
          if (SHIBYTE(__p[0]) >= 0)
            v184 = &__str.__r_.__value_.__s.__data_[8];
          else
            v184 = (const char *)__str.__r_.__value_.__l.__size_;
          conditionalAssert(v184, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 297, v150, v151);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
          if (SHIBYTE(__p[0]) < 0)
            operator delete((void *)__str.__r_.__value_.__l.__size_);
          if ((v215[23] & 0x80000000) != 0)
            operator delete(*(void **)v215);
          v185 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, &byte_209A88803);
          *v185 = aPpx;
          v186 = (std::string *)(v185 + 1);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v186, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else
          {
            v202 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v185[3] = *((_QWORD *)&__str.__r_.__value_.__l + 2);
            *(_OWORD *)&v186->__r_.__value_.__l.__data_ = v202;
          }
          *v185 = &unk_24C215870;
        }
        if ((*((char *)this + 63) & 0x80000000) == 0)
        {
          if (*((_BYTE *)this + 63))
            goto LABEL_230;
LABEL_264:
          v74 = (_QWORD *)((char *)this + 16);
          if (*((char *)this + 39) < 0)
            v74 = (_QWORD *)*v74;
          tknPrintf("Error: File '%s' : Missing FILE_TYPE\n", v31, v32, v33, v34, v74);
          std::string::basic_string[abi:ne180100]<0>(v215, &byte_209A88803);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
          if ((v215[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
          }
          else
          {
            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
            __p[0] = *(void **)&v215[16];
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C215870;
          if (SHIBYTE(__p[0]) >= 0)
            v187 = &__str.__r_.__value_.__s.__data_[8];
          else
            v187 = (const char *)__str.__r_.__value_.__l.__size_;
          conditionalAssert(v187, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 390, v75, v76);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
          if (SHIBYTE(__p[0]) < 0)
            operator delete((void *)__str.__r_.__value_.__l.__size_);
          if ((v215[23] & 0x80000000) != 0)
            operator delete(*(void **)v215);
          v188 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, &byte_209A88803);
          *v188 = aPpx;
          v189 = (std::string *)(v188 + 1);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v189, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else
          {
            v203 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v188[3] = *((_QWORD *)&__str.__r_.__value_.__l + 2);
            *(_OWORD *)&v189->__r_.__value_.__l.__data_ = v203;
          }
          *v188 = &unk_24C215870;
        }
        if (!*((_QWORD *)this + 6))
          goto LABEL_264;
LABEL_230:
        if (*(_DWORD *)(*((_QWORD *)this + 22) + 64) != v211)
        {
          v152 = (_QWORD *)((char *)this + 16);
          if (*((char *)this + 39) < 0)
            v152 = (_QWORD *)*v152;
          tknPrintf("Error: File '%s' : File codepage does not match the voc codepage\n", v31, v32, v33, v34, v152);
          std::string::basic_string[abi:ne180100]<0>(v215, &byte_209A88803);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
          if ((v215[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
          }
          else
          {
            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
            __p[0] = *(void **)&v215[16];
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C216908;
          if (SHIBYTE(__p[0]) >= 0)
            v190 = &__str.__r_.__value_.__s.__data_[8];
          else
            v190 = (const char *)__str.__r_.__value_.__l.__size_;
          conditionalAssert(v190, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 397, v153, v154);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
          if (SHIBYTE(__p[0]) < 0)
            operator delete((void *)__str.__r_.__value_.__l.__size_);
          if ((v215[23] & 0x80000000) != 0)
            operator delete(*(void **)v215);
          v191 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, &byte_209A88803);
          *v191 = aPpx;
          v192 = (std::string *)(v191 + 1);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v192, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else
          {
            v204 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v191[3] = *((_QWORD *)&__str.__r_.__value_.__l + 2);
            *(_OWORD *)&v192->__r_.__value_.__l.__data_ = v204;
          }
          *v191 = &unk_24C216908;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_209A57DD0;
        v232 = 1;
        if (v217.__end_ == v217.__begin_)
          goto LABEL_247;
        v63 = 0;
        v64 = 0;
        do
        {
          TBuffer<wchar_t>::resize((uint64_t)&__str, 0);
          p_second = &v217.__begin_[v63].second;
          if (SHIBYTE(v217.__begin_[v63].second.__r_.__value_.__r.__words[2]) < 0)
            p_second = (std::string *)p_second->__r_.__value_.__r.__words[0];
          TLocaleInfo::multiByteToUnicode(*((_QWORD *)this + 22), (unsigned __int8 *)p_second, (uint64_t)&__str);
          v66 = &v217.__begin_[v63];
          if (SHIBYTE(v217.__begin_[v63].first.__r_.__value_.__r.__words[2]) < 0)
            v66 = (std::pair<std::string, std::string> *)v66->first.__r_.__value_.__r.__words[0];
          if (TInputStream::isParameter(this, (char *)v66))
          {
            v112 = (_QWORD *)((char *)this + 16);
            if (*((char *)this + 39) < 0)
              v112 = (_QWORD *)*v112;
            v113 = &v217.__begin_[v63];
            if (SHIBYTE(v217.__begin_[v63].first.__r_.__value_.__r.__words[2]) < 0)
              v113 = (std::pair<std::string, std::string> *)v113->first.__r_.__value_.__r.__words[0];
            tknPrintf("Error: %s : Duplicate setting for %s parameter\n", v67, v68, v69, v70, v112, v113);
            std::string::basic_string[abi:ne180100]<0>(v213, &byte_209A88803);
            *(_QWORD *)v215 = aPpx;
            if (SHIBYTE(v214) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v215[8], (const std::string::value_type *)v213[0], (std::string::size_type)v213[1]);
            }
            else
            {
              *(_OWORD *)&v215[8] = *(_OWORD *)v213;
              v216 = v214;
            }
            *(_QWORD *)v215 = &unk_24C214BA0;
            if (v216 >= 0)
              v133 = &v215[8];
            else
              v133 = *(const char **)&v215[8];
            conditionalAssert(v133, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 414, v114, v115);
            *(_QWORD *)v215 = aPpx;
            if (SHIBYTE(v216) < 0)
              operator delete(*(void **)&v215[8]);
            if (SHIBYTE(v214) < 0)
              operator delete(v213[0]);
            v134 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v215, &byte_209A88803);
            *v134 = aPpx;
            v135 = (std::string *)(v134 + 1);
            if ((v215[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v135, *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
            }
            else
            {
              v163 = *(_OWORD *)v215;
              v134[3] = *(_QWORD *)&v215[16];
              *(_OWORD *)&v135->__r_.__value_.__l.__data_ = v163;
            }
            *v134 = &unk_24C214BA0;
          }
          if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
          {
            if (v232)
            {
              *(_DWORD *)v215 = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2], (int *)v215, 1uLL);
              v71 = __str.__r_.__value_.__r.__words[0];
              --__str.__r_.__value_.__r.__words[2];
            }
            else
            {
              v71 = __str.__r_.__value_.__r.__words[0];
              if (__str.__r_.__value_.__l.__size_)
                *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * __str.__r_.__value_.__l.__size_ - 4) = 0;
            }
          }
          else
          {
            v71 = __str.__r_.__value_.__r.__words[0];
            *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * __str.__r_.__value_.__r.__words[2]) = 0;
          }
          *(_QWORD *)v215 = &v217.__begin_[v63];
          v72 = std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 19, (const void **)&v217.__begin_[v63].first.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)v215);
          MEMORY[0x20BD147A4](v72 + 7, v71);
          ++v64;
          ++v63;
        }
        while (v64 < 0xAAAAAAAAAAAAAAABLL * (((char *)v217.__end_ - (char *)v217.__begin_) >> 4));
        if (v232)
        {
LABEL_247:
          if ((void **)__str.__r_.__value_.__l.__data_ != __p && __str.__r_.__value_.__r.__words[0])
            MEMORY[0x20BD149A8]();
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (v235 && *(_BYTE **)__s != v234 && *(_QWORD *)__s)
          MEMORY[0x20BD149A8]();
        if (v238)
        {
          v19 = *(void ***)v236;
          if (*(_QWORD **)v236 != v237)
          {
            if (*(_QWORD *)v236)
LABEL_256:
              MEMORY[0x20BD149A8](v19, 0x1000C4077774924);
          }
        }
        goto LABEL_257;
      }
      if (!v29)
      {
        v96 = (_QWORD *)((char *)this + 16);
        if (*((char *)this + 39) < 0)
          v96 = (_QWORD *)*v96;
        v97 = TBuffer<char>::c_str((uint64_t)&__s1);
        tknPrintf("Error: File '%s' : %s : Syntax error in header\n", v98, v99, v100, v101, v96, v97);
        std::string::basic_string[abi:ne180100]<0>(v215, &byte_209A88803);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
        if ((v215[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
        }
        else
        {
          *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
          __p[0] = *(void **)&v215[16];
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C215870;
        if (SHIBYTE(__p[0]) >= 0)
          v139 = &__str.__r_.__value_.__s.__data_[8];
        else
          v139 = (const char *)__str.__r_.__value_.__l.__size_;
        conditionalAssert(v139, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 308, v102, v103);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
        if (SHIBYTE(__p[0]) < 0)
          operator delete((void *)__str.__r_.__value_.__l.__size_);
        if ((v215[23] & 0x80000000) != 0)
          operator delete(*(void **)v215);
        v140 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__str, &byte_209A88803);
        *v140 = aPpx;
        v141 = (std::string *)(v140 + 1);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v141, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          v165 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v140[3] = *((_QWORD *)&__str.__r_.__value_.__l + 2);
          *(_OWORD *)&v141->__r_.__value_.__l.__data_ = v165;
        }
        *v140 = &unk_24C215870;
      }
      if (*(_QWORD *)&v236[16] >= *(_QWORD *)&v236[8])
      {
        if (v238)
        {
          v215[0] = 0;
          TBuffer<char>::insert((uint64_t)v236, *(unint64_t *)&v236[16], v215, 1uLL);
          --*(_QWORD *)&v236[16];
        }
        else if (*(_QWORD *)&v236[8])
        {
          *(_BYTE *)(*(_QWORD *)&v236[8] + v30 - 1) = 0;
        }
      }
      else
      {
        *(_BYTE *)(v30 + *(_QWORD *)&v236[16]) = 0;
      }
      v35 = *(_QWORD *)v236;
      if (!strcmp(*(const char **)v236, "VERSION"))
        break;
      if (*(_QWORD *)&v236[16] >= *(_QWORD *)&v236[8])
      {
        if (v238)
        {
          v215[0] = 0;
          TBuffer<char>::insert((uint64_t)v236, *(unint64_t *)&v236[16], v215, 1uLL);
          --*(_QWORD *)&v236[16];
        }
        else if (*(_QWORD *)&v236[8])
        {
          *(_BYTE *)(*(_QWORD *)&v236[8] + v35 - 1) = 0;
        }
      }
      else
      {
        *(_BYTE *)(v35 + *(_QWORD *)&v236[16]) = 0;
      }
      v40 = *(_QWORD *)v236;
      if (!strcmp(*(const char **)v236, "FILE_TYPE"))
      {
        if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
        {
          if (v235)
          {
            v215[0] = 0;
            TBuffer<char>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v215, 1uLL);
            --*(_QWORD *)&__s[16];
          }
          else if (*(_QWORD *)&__s[8])
          {
            *(_BYTE *)(*(_QWORD *)&__s[8] + *(_QWORD *)__s - 1) = 0;
          }
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)__s + *(_QWORD *)&__s[16]) = 0;
        }
        MEMORY[0x20BD14750]((char *)this + 40, *(_QWORD *)__s);
        goto LABEL_188;
      }
      if (*(_QWORD *)&v236[16] >= *(_QWORD *)&v236[8])
      {
        if (v238)
        {
          v215[0] = 0;
          TBuffer<char>::insert((uint64_t)v236, *(unint64_t *)&v236[16], v215, 1uLL);
          --*(_QWORD *)&v236[16];
        }
        else if (*(_QWORD *)&v236[8])
        {
          *(_BYTE *)(*(_QWORD *)&v236[8] + v40 - 1) = 0;
        }
      }
      else
      {
        *(_BYTE *)(v40 + *(_QWORD *)&v236[16]) = 0;
      }
      v41 = *(_QWORD *)v236;
      if (!strcmp(*(const char **)v236, "FILE_VERSION"))
      {
        if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
        {
          if (v235)
          {
            v215[0] = 0;
            TBuffer<char>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v215, 1uLL);
            --*(_QWORD *)&__s[16];
          }
          else if (*(_QWORD *)&__s[8])
          {
            *(_BYTE *)(*(_QWORD *)&__s[8] + *(_QWORD *)__s - 1) = 0;
          }
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)__s + *(_QWORD *)&__s[16]) = 0;
        }
        v48 = *(_QWORD *)__s;
        v49 = strrchr(*(char **)__s, 46);
        if (v49)
        {
          v50 = v49;
          if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
          {
            if (v235)
            {
              v215[0] = 0;
              TBuffer<char>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v215, 1uLL);
              --*(_QWORD *)&__s[16];
            }
            else if (*(_QWORD *)&__s[8])
            {
              *(_BYTE *)(*(_QWORD *)&__s[8] + v48 - 1) = 0;
            }
          }
          else
          {
            *(_BYTE *)(v48 + *(_QWORD *)&__s[16]) = 0;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, *(char **)__s);
          if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
          {
            if (v235)
            {
              v215[0] = 0;
              TBuffer<char>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v215, 1uLL);
              --*(_QWORD *)&__s[16];
            }
            else if (*(_QWORD *)&__s[8])
            {
              *(_BYTE *)(*(_QWORD *)&__s[8] + *(_QWORD *)__s - 1) = 0;
            }
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)__s + *(_QWORD *)&__s[16]) = 0;
          }
          std::string::assign(v212, &__str, 0, (std::string::size_type)&v50[-*(_QWORD *)__s]);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v51 = v50 + 1;
        }
        else
        {
          if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
          {
            if (v235)
            {
              v215[0] = 0;
              TBuffer<char>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v215, 1uLL);
              --*(_QWORD *)&__s[16];
            }
            else if (*(_QWORD *)&__s[8])
            {
              *(_BYTE *)(*(_QWORD *)&__s[8] + v48 - 1) = 0;
            }
          }
          else
          {
            *(_BYTE *)(v48 + *(_QWORD *)&__s[16]) = 0;
          }
          v51 = *(const char **)__s;
        }
        *((_QWORD *)this + 12) = atol(v51);
        goto LABEL_188;
      }
      if (*(_QWORD *)&v236[16] >= *(_QWORD *)&v236[8])
      {
        if (v238)
        {
          v215[0] = 0;
          TBuffer<char>::insert((uint64_t)v236, *(unint64_t *)&v236[16], v215, 1uLL);
          --*(_QWORD *)&v236[16];
        }
        else if (*(_QWORD *)&v236[8])
        {
          *(_BYTE *)(*(_QWORD *)&v236[8] + v41 - 1) = 0;
        }
      }
      else
      {
        *(_BYTE *)(v41 + *(_QWORD *)&v236[16]) = 0;
      }
      v42 = *(_QWORD *)v236;
      if (!strcmp(*(const char **)v236, "PARAMETER"))
      {
        v43 = getNextToken(v28 + 1, (uint64_t)v236, "=");
        if (!v43)
        {
          v104 = (_QWORD *)((char *)this + 16);
          if (*((char *)this + 39) < 0)
            v104 = (_QWORD *)*v104;
          v105 = TBuffer<char>::c_str((uint64_t)&__s1);
          tknPrintf("Error: File '%s' : %s : PARAMETER must contain 'name=value'\n", v106, v107, v108, v109, v104, v105);
          std::string::basic_string[abi:ne180100]<0>(v215, &byte_209A88803);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
          if ((v215[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
          }
          else
          {
            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
            __p[0] = *(void **)&v215[16];
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C215870;
          if (SHIBYTE(__p[0]) >= 0)
            v142 = &__str.__r_.__value_.__s.__data_[8];
          else
            v142 = (const char *)__str.__r_.__value_.__l.__size_;
          conditionalAssert(v142, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 353, v110, v111);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
          if (SHIBYTE(__p[0]) < 0)
            operator delete((void *)__str.__r_.__value_.__l.__size_);
          if ((v215[23] & 0x80000000) != 0)
            operator delete(*(void **)v215);
          v143 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, &byte_209A88803);
          *v143 = aPpx;
          v144 = (std::string *)(v143 + 1);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v144, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else
          {
            v166 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v143[3] = *((_QWORD *)&__str.__r_.__value_.__l + 2);
            *(_OWORD *)&v144->__r_.__value_.__l.__data_ = v166;
          }
          *v143 = &unk_24C215870;
        }
        if (*(_QWORD *)&v236[16] >= *(_QWORD *)&v236[8])
        {
          if (v238)
          {
            LOBYTE(v213[0]) = 0;
            TBuffer<char>::insert((uint64_t)v236, *(unint64_t *)&v236[16], (char *)v213, 1uLL);
            --*(_QWORD *)&v236[16];
          }
          else if (*(_QWORD *)&v236[8])
          {
            *(_BYTE *)(*(_QWORD *)&v236[8] + *(_QWORD *)v236 - 1) = 0;
          }
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v236 + *(_QWORD *)&v236[16]) = 0;
        }
        *(_QWORD *)v215 = *(_QWORD *)v236;
        *(_QWORD *)&v215[8] = v43 + 1;
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(&__str, (char **)v215);
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v217, (__int128 *)&__str);
        if (v229 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v23 = 0;
      }
      else
      {
        if (*(_QWORD *)&v236[16] >= *(_QWORD *)&v236[8])
        {
          if (v238)
          {
            v215[0] = 0;
            TBuffer<char>::insert((uint64_t)v236, *(unint64_t *)&v236[16], v215, 1uLL);
            --*(_QWORD *)&v236[16];
          }
          else if (*(_QWORD *)&v236[8])
          {
            *(_BYTE *)(*(_QWORD *)&v236[8] + v42 - 1) = 0;
          }
        }
        else
        {
          *(_BYTE *)(v42 + *(_QWORD *)&v236[16]) = 0;
        }
        if (!strcmp(*(const char **)v236, "CODEPAGE"))
        {
          if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
          {
            if (v235)
            {
              v215[0] = 0;
              TBuffer<char>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v215, 1uLL);
              --*(_QWORD *)&__s[16];
            }
            else if (*(_QWORD *)&__s[8])
            {
              *(_BYTE *)(*(_QWORD *)&__s[8] + *(_QWORD *)__s - 1) = 0;
            }
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)__s + *(_QWORD *)&__s[16]) = 0;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, *(char **)__s);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if (__str.__r_.__value_.__l.__size_ != 4)
            {
              if (__str.__r_.__value_.__l.__size_ == 5)
              {
                if (*(_DWORD *)__str.__r_.__value_.__l.__data_ != 759583829
                  || *(_BYTE *)(__str.__r_.__value_.__r.__words[0] + 4) != 56)
                {
                  goto LABEL_403;
                }
                v62 = 2;
              }
              else
              {
                if (__str.__r_.__value_.__l.__size_ != 7)
                  goto LABEL_403;
                if (*(_DWORD *)__str.__r_.__value_.__l.__data_ != 1769234764
                  || *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 3) != 1227714153)
                {
                  goto LABEL_403;
                }
LABEL_225:
                v62 = 1;
              }
              v211 = v62;
              operator delete(__str.__r_.__value_.__l.__data_);
              goto LABEL_188;
            }
            if (*(_DWORD *)__str.__r_.__value_.__l.__data_ != 842347057)
              goto LABEL_403;
            goto LABEL_225;
          }
          if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 4)
          {
            if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 5)
            {
              if (LODWORD(__str.__r_.__value_.__l.__data_) != 759583829 || __str.__r_.__value_.__s.__data_[4] != 56)
              {
LABEL_402:
                p_str = &__str;
LABEL_403:
                tknPrintf("Error: '%s' : Invalid codepage.\n", v52, v53, v54, v55, p_str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                v167 = (_QWORD *)((char *)this + 16);
                if (*((char *)this + 39) < 0)
                  v167 = (_QWORD *)*v167;
                v168 = TBuffer<char>::c_str((uint64_t)__s);
                tknPrintf("Error: File '%s' : '%s' : Invalid codepage\n", v169, v170, v171, v172, v167, v168);
                std::string::basic_string[abi:ne180100]<0>(v215, &byte_209A88803);
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
                if ((v215[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
                }
                else
                {
                  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
                  __p[0] = *(void **)&v215[16];
                }
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C216908;
                if (SHIBYTE(__p[0]) >= 0)
                  v207 = &__str.__r_.__value_.__s.__data_[8];
                else
                  v207 = (const char *)__str.__r_.__value_.__l.__size_;
                conditionalAssert(v207, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 367, v173, v174);
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
                if (SHIBYTE(__p[0]) < 0)
                  operator delete((void *)__str.__r_.__value_.__l.__size_);
                if ((v215[23] & 0x80000000) != 0)
                  operator delete(*(void **)v215);
                v208 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(&__str, &byte_209A88803);
                *v208 = aPpx;
                v209 = (std::string *)(v208 + 1);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v209, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                }
                else
                {
                  v210 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                  v208[3] = *((_QWORD *)&__str.__r_.__value_.__l + 2);
                  *(_OWORD *)&v209->__r_.__value_.__l.__data_ = v210;
                }
                *v208 = &unk_24C216908;
              }
              v60 = 2;
            }
            else
            {
              if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 7)
                goto LABEL_402;
              if (LODWORD(__str.__r_.__value_.__l.__data_) != 1769234764
                || *(_DWORD *)((char *)__str.__r_.__value_.__r.__words + 3) != 1227714153)
              {
                goto LABEL_402;
              }
LABEL_216:
              v60 = 1;
            }
            v211 = v60;
            goto LABEL_188;
          }
          if (LODWORD(__str.__r_.__value_.__l.__data_) != 842347057)
            goto LABEL_402;
          goto LABEL_216;
        }
LABEL_188:
        v23 = 0;
        if (getNextToken(v29, (uint64_t)__s, " "))
        {
          v122 = (_QWORD *)((char *)this + 16);
          if (*((char *)this + 39) < 0)
            v122 = (_QWORD *)*v122;
          v123 = TBuffer<char>::c_str((uint64_t)&__s1);
          tknPrintf("Error: File '%s' : %s : Syntax error in header\n", v124, v125, v126, v127, v122, v123);
          std::string::basic_string[abi:ne180100]<0>(v215, &byte_209A88803);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
          if ((v215[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
          }
          else
          {
            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
            __p[0] = *(void **)&v215[16];
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C215870;
          if (SHIBYTE(__p[0]) >= 0)
            v175 = &__str.__r_.__value_.__s.__data_[8];
          else
            v175 = (const char *)__str.__r_.__value_.__l.__size_;
          conditionalAssert(v175, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 375, v128, v129);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
          if (SHIBYTE(__p[0]) < 0)
            operator delete((void *)__str.__r_.__value_.__l.__size_);
          if ((v215[23] & 0x80000000) != 0)
            operator delete(*(void **)v215);
          v176 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, &byte_209A88803);
          *v176 = aPpx;
          v177 = (std::string *)(v176 + 1);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v177, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else
          {
            v199 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v176[3] = *((_QWORD *)&__str.__r_.__value_.__l + 2);
            *(_OWORD *)&v177->__r_.__value_.__l.__data_ = v199;
          }
          *v176 = &unk_24C215870;
        }
      }
    }
    if ((v23 & 1) == 0)
    {
      v155 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v155 = (_QWORD *)*v155;
      tknPrintf("Error: '%s' : VERSION must be the first line in header\n", v36, v37, v38, v39, v155);
      std::string::basic_string[abi:ne180100]<0>(v215, &byte_209A88803);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
      if ((v215[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
      }
      else
      {
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
        __p[0] = *(void **)&v215[16];
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C215870;
      if (SHIBYTE(__p[0]) >= 0)
        v193 = &__str.__r_.__value_.__s.__data_[8];
      else
        v193 = (const char *)__str.__r_.__value_.__l.__size_;
      conditionalAssert(v193, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 317, v156, v157);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
      if (SHIBYTE(__p[0]) < 0)
        operator delete((void *)__str.__r_.__value_.__l.__size_);
      if ((v215[23] & 0x80000000) != 0)
        operator delete(*(void **)v215);
      v194 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&__str, &byte_209A88803);
      *v194 = aPpx;
      v195 = (std::string *)(v194 + 1);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v195, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        v205 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v194[3] = *((_QWORD *)&__str.__r_.__value_.__l + 2);
        *(_OWORD *)&v195->__r_.__value_.__l.__data_ = v205;
      }
      *v194 = &unk_24C215870;
    }
    if (*(_QWORD *)&__s[16] >= *(_QWORD *)&__s[8])
    {
      if (v235)
      {
        v215[0] = 0;
        TBuffer<char>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v215, 1uLL);
        --*(_QWORD *)&__s[16];
      }
      else if (*(_QWORD *)&__s[8])
      {
        *(_BYTE *)(*(_QWORD *)&__s[8] + *(_QWORD *)__s - 1) = 0;
      }
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)__s + *(_QWORD *)&__s[16]) = 0;
    }
    if (atol(*(const char **)__s) != 1)
    {
      v158 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v158 = (_QWORD *)*v158;
      tknPrintf("Error: '%s' : VERSION must be 1\n", v44, v45, v46, v47, v158);
      std::string::basic_string[abi:ne180100]<0>(v215, &byte_209A88803);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
      if ((v215[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
      }
      else
      {
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
        __p[0] = *(void **)&v215[16];
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C216908;
      if (SHIBYTE(__p[0]) >= 0)
        v196 = &__str.__r_.__value_.__s.__data_[8];
      else
        v196 = (const char *)__str.__r_.__value_.__l.__size_;
      conditionalAssert(v196, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 325, v159, v160);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)aPpx;
      if (SHIBYTE(__p[0]) < 0)
        operator delete((void *)__str.__r_.__value_.__l.__size_);
      if ((v215[23] & 0x80000000) != 0)
        operator delete(*(void **)v215);
      v197 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&__str, &byte_209A88803);
      *v197 = aPpx;
      v198 = (std::string *)(v197 + 1);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v198, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        v206 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v197[3] = *((_QWORD *)&__str.__r_.__value_.__l + 2);
        *(_OWORD *)&v198->__r_.__value_.__l.__data_ = v206;
      }
      *v197 = &unk_24C216908;
    }
    goto LABEL_188;
  }
  v218 = 0u;
  v219 = 0u;
  v220 = 0u;
  v221 = 0u;
  v222 = 0u;
  v223 = 0u;
  v224 = 0u;
  v225 = 0u;
  v226 = v3;
  std::istream::seekg();
  v2 = 0;
LABEL_258:
  if (v242 && __s1 != v241 && __s1)
    MEMORY[0x20BD149A8]();
  return v2;
}

void sub_2098A3064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,void *a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;
  int v52;
  unint64_t v55;
  unint64_t v56;

  if (a51 < 0)
  {
    operator delete(__p);
    if ((v52 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v52)
  {
LABEL_6:
    __p = &a26;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (LOBYTE(STACK[0x660]))
    {
      if (STACK[0x548] != a12 && STACK[0x548] != 0)
        MEMORY[0x20BD149A8]();
    }
    if (LOBYTE(STACK[0x780]))
    {
      v55 = STACK[0x668];
      if (STACK[0x668] != a13)
      {
        if (v55)
          MEMORY[0x20BD149A8](v55, 0x1000C4077774924);
      }
    }
    if (LOBYTE(STACK[0x8A0]))
    {
      v56 = STACK[0x788];
      if (STACK[0x788] != a16)
      {
        if (v56)
          MEMORY[0x20BD149A8](v56, 0x1000C4077774924);
      }
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v51);
  goto LABEL_6;
}

BOOL TInputStream::getNextLine(uint64_t a1, uint64_t a2)
{
  const char **v3;
  std::locale::id *v4;
  uint64_t v5;
  const std::locale::facet *v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  char *v10;
  unsigned int v11;
  char *v12;
  int v13;
  unsigned int v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  std::locale v23;
  char __s1[2048];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = (const char **)(a1 + 104);
  v4 = (std::locale::id *)MEMORY[0x24BEDB350];
  v5 = MEMORY[0x24BDAC740];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24)));
    v6 = std::locale::use_facet(&v23, v4);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v23);
    v7 = (_QWORD *)std::istream::getline();
    v8 = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5;
    if (v8)
      return v8 == 0;
    ++*(_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 127) < 0)
    {
      if (*(_QWORD *)(a1 + 112))
      {
        v9 = *v3;
LABEL_8:
        v10 = strstr(__s1, v9);
        if (v10)
          *v10 = 0;
      }
    }
    else
    {
      v9 = (const char *)v3;
      if (*(_BYTE *)(a1 + 127))
        goto LABEL_8;
    }
    v11 = __s1[0];
    if (__s1[0])
    {
      v12 = __s1;
      do
      {
        if ((v11 & 0x80) != 0)
          v13 = __maskrune(v11, 0x4000uLL);
        else
          v13 = *(_DWORD *)(v5 + 4 * v11 + 60) & 0x4000;
        if (!v13)
          break;
        v14 = *++v12;
        v11 = v14;
      }
      while (v14);
    }
    else
    {
      v12 = __s1;
    }
    v15 = &__s1[strlen(__s1)];
    v16 = v15 - v12;
    do
    {
      v17 = v15;
      v18 = v16;
      if (v15 <= v12)
        break;
      --v15;
      v19 = *(v17 - 1);
      v20 = *(v17 - 1) < 0 ? __maskrune(v19, 0x4000uLL) : *(_DWORD *)(v5 + 4 * v19 + 60) & 0x4000;
      v16 = v18 - 1;
    }
    while (v20);
    if (v17 != v12)
    {
      TBuffer<char>::resize(a2, 0);
      TBuffer<char>::insert(a2, 0, v12, v18);
      return v8 == 0;
    }
  }
}

{
  const std::locale::facet *v3;
  _QWORD *v4;
  int v5;
  __int32 *v6;
  const __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  unint64_t v10;
  int v11;
  unsigned __int8 v12;
  unint64_t v16;
  TLocaleInfo *v17;
  int v18;
  unsigned __int8 v19;
  __int32 *v22;
  TLocaleInfo *v24;
  const __int32 **v26;
  __int32 *__s1;
  __int128 v28;
  _BYTE v29[1024];
  char v30;
  std::locale v31;
  unsigned __int8 v32[2048];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v26 = (const __int32 **)(a1 + 128);
  __s1 = (__int32 *)v29;
  v28 = xmmword_209A57DD0;
  v30 = 1;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24)));
    v3 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(&v31);
    v4 = (_QWORD *)std::istream::getline();
    v5 = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 5;
    if (v5)
      goto LABEL_78;
    ++*(_QWORD *)(a1 + 64);
    TBuffer<wchar_t>::resize((uint64_t)&__s1, 0);
    TLocaleInfo::multiByteToUnicode(*(_QWORD *)(a1 + 176), v32, (uint64_t)&__s1);
    if (*(char *)(a1 + 151) < 0)
    {
      if (*(_QWORD *)(a1 + 136))
      {
LABEL_7:
        if (*((_QWORD *)&v28 + 1) >= (unint64_t)v28)
        {
          if (v30)
          {
            LODWORD(v31.__locale_) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v28 + 1), (int *)&v31, 1uLL);
            v6 = __s1;
            --*((_QWORD *)&v28 + 1);
          }
          else
          {
            v6 = __s1;
            if ((_QWORD)v28)
              __s1[(_QWORD)v28 - 1] = 0;
          }
        }
        else
        {
          v6 = __s1;
          __s1[*((_QWORD *)&v28 + 1)] = 0;
        }
        v7 = (const __int32 *)v26;
        if (*(char *)(a1 + 151) < 0)
          v7 = *v26;
        v8 = wcsstr(v6, v7);
        if (v8)
        {
          if (*((_QWORD *)&v28 + 1) >= (unint64_t)v28)
          {
            if (v30)
            {
              LODWORD(v31.__locale_) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v28 + 1), (int *)&v31, 1uLL);
              v9 = __s1;
              --*((_QWORD *)&v28 + 1);
            }
            else
            {
              v9 = __s1;
              if ((_QWORD)v28)
                __s1[(_QWORD)v28 - 1] = 0;
            }
          }
          else
          {
            v9 = __s1;
            __s1[*((_QWORD *)&v28 + 1)] = 0;
          }
          TBuffer<wchar_t>::resize((uint64_t)&__s1, v8 - v9);
        }
      }
    }
    else if (*(_BYTE *)(a1 + 151))
    {
      goto LABEL_7;
    }
    if (*((_QWORD *)&v28 + 1))
    {
      v10 = 0;
      while (1)
      {
        v11 = __s1[v10];
        if ((v12 & 1) == 0
        {
          v17 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v17);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v17;
        }
        if (v11 <= 159)
        {
          if (v11 > 0x20 || ((1 << v11) & 0x100002600) == 0)
            goto LABEL_48;
          goto LABEL_44;
        }
        if (v11 >= 12288)
          break;
        if (v11 != 160 && v11 != 8203)
          goto LABEL_48;
LABEL_44:
        ++v10;
        v16 = *((_QWORD *)&v28 + 1);
        if (v10 >= *((_QWORD *)&v28 + 1))
          goto LABEL_49;
      }
      if (v11 == 12288 || v11 == 65279)
        goto LABEL_44;
LABEL_48:
      v16 = *((_QWORD *)&v28 + 1);
LABEL_49:
      if (v16 > v10)
      {
        do
        {
          v18 = __s1[v16 - 1];
          if ((v19 & 1) == 0
          {
            v24 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v24);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v24;
          }
          if (v18 > 159)
          {
            if (v18 >= 12288)
            {
              if (v18 != 65279 && v18 != 12288)
                goto LABEL_70;
            }
            else if (v18 != 160 && v18 != 8203)
            {
              goto LABEL_70;
            }
          }
          else if (v18 > 0x20 || ((1 << v18) & 0x100002600) == 0)
          {
            goto LABEL_70;
          }
          --v16;
        }
        while (v16 > v10);
        v16 = v10;
      }
LABEL_70:
      if (v16 != v10)
        break;
    }
  }
  if (*((_QWORD *)&v28 + 1) >= (unint64_t)v28)
  {
    if (v30)
    {
      LODWORD(v31.__locale_) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v28 + 1), (int *)&v31, 1uLL);
      v22 = __s1;
      --*((_QWORD *)&v28 + 1);
    }
    else
    {
      v22 = __s1;
      if ((_QWORD)v28)
        __s1[(_QWORD)v28 - 1] = 0;
    }
  }
  else
  {
    v22 = __s1;
    __s1[*((_QWORD *)&v28 + 1)] = 0;
  }
  TBuffer<wchar_t>::resize(a2, 0);
  TBuffer<wchar_t>::insert(a2, 0, &v22[v10], v16 - v10);
LABEL_78:
  if (v30 && __s1 != (__int32 *)v29 && __s1)
    MEMORY[0x20BD149A8]();
  return v5 == 0;
}

void sub_2098A3628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, __int128 *a2)
{
  std::allocator<std::pair<std::string, std::string>> *p_end_cap;
  std::pair<std::string, std::string> *v5;
  std::pair<std::string, std::string> *value;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::pair<std::string, std::string> *end;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::pair<std::string, std::string> *v15;
  std::pair<std::string, std::string> *v16;
  __int128 v17;
  __int128 v18;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14)
      v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_2098A3798(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

BOOL TInputStream::isParameter(TInputStream *this, char *a2)
{
  char *v3;
  TInputStream *v4;
  void *__p[2];
  char v7;

  v3 = (char *)this + 152;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v4 = (TInputStream *)std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::find<std::string>((uint64_t)v3, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return (TInputStream *)((char *)this + 160) != v4;
}

void sub_2098A3848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2098A3CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  MEMORY[0x20BD149A8](a10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x440]))
  {
    if (a14 != a11 && a14 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t TInputStream::getBoolParameter(TInputStream *this, char *a2, uint64_t a3)
{
  char *v6;
  char *v7;
  _QWORD *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  TLocaleInfo *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  _QWORD *exception;
  std::string *v21;
  __int128 v22;
  void *v23[2];
  uint64_t v24;
  _BYTE __p[24];
  uint64_t v26;
  BOOL v27;

  v6 = (char *)this + 152;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = (char *)std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((char *)this + 160 != v7)
  {
    v27 = 0;
    v8 = v7 + 56;
    if (v7[79] < 0)
      v8 = (_QWORD *)*v8;
    {
      v16 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v16);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v16;
    }
    v10 = TLocaleInfo::stringToBool(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (uint64_t)v8, &v27);
    if (v27)
    {
      tknPrintf("Error: Expected Boolean value for '%s'\n", v11, v12, v13, v14, a2);
      std::string::basic_string[abi:ne180100]<0>(v23, &byte_209A88803);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v24) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v23[0], (std::string::size_type)v23[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v23;
        v26 = v24;
      }
      *(_QWORD *)__p = &unk_24C214BA0;
      if (v26 >= 0)
        v19 = &__p[8];
      else
        v19 = *(const char **)&__p[8];
      conditionalAssert(v19, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 525, v17, v18);
      *(_QWORD *)__p = aPpx;
      if (SHIBYTE(v26) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v24) < 0)
        operator delete(v23[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *exception = aPpx;
      v21 = (std::string *)(exception + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        v22 = *(_OWORD *)__p;
        exception[3] = *(_QWORD *)&__p[16];
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      *exception = &unk_24C214BA0;
    }
    return v10;
  }
  return a3;
}

void sub_2098A3F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  MEMORY[0x20BD149A8](v26, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TInputStream::getStringParameter(uint64_t a1, char *a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;

  v7 = a1 + 152;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v8 = std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::find<std::string>(v7, (const void **)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  if (a1 + 160 != v8)
  {
    a4 = (int *)(v8 + 56);
    if (*(char *)(v8 + 79) < 0)
      a4 = *(int **)a4;
  }
  return TBuffer<wchar_t>::assign(a3, a4);
}

void sub_2098A40DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TOutputStream::operator<<(uint64_t a1, unsigned int *a2)
{
  _QWORD *v3;
  size_t v4;
  char v6;
  char *__s;
  __int128 v8;
  _BYTE v9[256];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  __s = v9;
  v8 = xmmword_209A57DD0;
  v10 = 1;
  TLocaleInfo::unicodeToMultiByte(*(_QWORD *)(a1 + 16), a2, (uint64_t)&__s);
  v3 = *(_QWORD **)a1;
  if (*((_QWORD *)&v8 + 1) >= (unint64_t)v8)
  {
    if (v10)
    {
      v6 = 0;
      TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v8 + 1), &v6, 1uLL);
      --*((_QWORD *)&v8 + 1);
    }
    else if ((_QWORD)v8)
    {
      __s[(_QWORD)v8 - 1] = 0;
    }
  }
  else
  {
    __s[*((_QWORD *)&v8 + 1)] = 0;
  }
  v4 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)__s, v4);
  if (v10 && __s != v9 && __s)
    MEMORY[0x20BD149A8]();
  return a1;
}

void sub_2098A4228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  if (a45)
    TPToken_Tokenize_cold_1(&a10, v45);
  _Unwind_Resume(exception_object);
}

_QWORD *TOutputStream::writeHeader(_QWORD **a1, const char *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  const char *v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  void *p_p;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  size_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  BOOL v34;
  char v36;
  void *__p;
  __int128 v38;
  _BYTE v39[256];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v8 = *(const char **)(a3 + 32 * a4 - 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"HEADER_BEGIN\n", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"  VERSION 1\n", 12);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"  FILE_TYPE ", 12);
  v10 = strlen(a2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)a2, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"  FILE_VERSION ", 15);
  if (*v8)
  {
    v12 = strlen(v8);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)v8, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)".", 1);
  }
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"  CODEPAGE ", 11);
  if (*((_DWORD *)a1[2] + 16) == 2)
    v16 = "UTF-8";
  else
    v16 = "1252";
  std::string::basic_string[abi:ne180100]<0>(&__p, v16);
  if (v38 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v38 >= 0)
    v18 = HIBYTE(v38);
  else
    v18 = v38;
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(__p);
    if (!a5)
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"HEADER_END\n", 11);
  }
  else if (!a5)
  {
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"HEADER_END\n", 11);
  }
  v22 = (_QWORD *)*a5;
  v20 = a5 + 1;
  v21 = v22;
  __p = v39;
  v38 = xmmword_209A57DD0;
  v40 = 1;
  if (v22 == v20)
    goto LABEL_38;
  do
  {
    TBuffer<char>::resize((uint64_t)&__p, 0);
    v23 = (unsigned int *)(v21 + 7);
    if (*((char *)v21 + 79) < 0)
      v23 = *(unsigned int **)v23;
    TLocaleInfo::unicodeToMultiByte((uint64_t)a1[2], v23, (uint64_t)&__p);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"  PARAMETER ", 12);
    v25 = *((char *)v21 + 55);
    if (v25 >= 0)
      v26 = (uint64_t)(v21 + 4);
    else
      v26 = v21[4];
    if (v25 >= 0)
      v27 = *((unsigned __int8 *)v21 + 55);
    else
      v27 = v21[5];
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"=", 1);
    if (*((_QWORD *)&v38 + 1) >= (unint64_t)v38)
    {
      if (v40)
      {
        v36 = 0;
        TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v38 + 1), &v36, 1uLL);
        --*((_QWORD *)&v38 + 1);
      }
      else if ((_QWORD)v38)
      {
        *((char *)__p + v38 - 1) = 0;
      }
    }
    else
    {
      *((_BYTE *)__p + *((_QWORD *)&v38 + 1)) = 0;
    }
    v30 = strlen((const char *)__p);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)__p, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\n", 1);
    v32 = (_QWORD *)v21[1];
    if (v32)
    {
      do
      {
        v33 = v32;
        v32 = (_QWORD *)*v32;
      }
      while (v32);
    }
    else
    {
      do
      {
        v33 = (_QWORD *)v21[2];
        v34 = *v33 == (_QWORD)v21;
        v21 = v33;
      }
      while (!v34);
    }
    v21 = v33;
  }
  while (v33 != v20);
  if (v40)
  {
LABEL_38:
    v34 = __p == v39 || __p == 0;
    if (!v34)
      MEMORY[0x20BD149A8]();
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"HEADER_END\n", 11);
}

void sub_2098A45CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TInputModel::TInputModel(TInputModel *this, const TDataManager *a2, const TDataManager *a3, char a4, const char *a5)
{
  int IntVar;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  TDataManager *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int BoolVar;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  _QWORD *exception;
  std::string *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  _QWORD *v59;
  std::string *v60;
  const char *v61;
  _QWORD *v62;
  std::string *v63;
  const char *v64;
  _QWORD *v65;
  std::string *v66;
  const char *v67;
  _QWORD *v68;
  std::string *v69;
  const char *v70;
  _QWORD *v71;
  std::string *v72;
  const char *v73;
  _QWORD *v74;
  std::string *v75;
  const char *v76;
  _QWORD *v77;
  std::string *v78;
  const char *v79;
  _QWORD *v80;
  std::string *v81;
  const char *v82;
  _QWORD *v83;
  std::string *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  _QWORD *v89;
  std::string *v90;
  const char *v91;
  _QWORD *v92;
  std::string *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  void *__p[2];
  uint64_t v106;
  _BYTE v107[24];
  uint64_t v108;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  IntVar = TInputModel::getIntVar((TDataManager **)this, "Version", 1);
  *((_QWORD *)this + 2) = IntVar;
  if ((IntVar - 3) <= 0xFFFFFFFD)
  {
    tknPrintf("Error: %llu : Expected %s in range [%llu,%llu]\n", v8, v9, v10, v11, IntVar, "Version", 1, 2);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *(_QWORD *)v107 = aPpx;
    if (SHIBYTE(v106) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v107[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v107[8] = *(_OWORD *)__p;
      v108 = v106;
    }
    *(_QWORD *)v107 = &unk_24C214BA0;
    if (v108 >= 0)
      v37 = &v107[8];
    else
      v37 = *(const char **)&v107[8];
    conditionalAssert(v37, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 609, v35, v36);
    *(_QWORD *)v107 = aPpx;
    if (SHIBYTE(v108) < 0)
      operator delete(*(void **)&v107[8]);
    if (SHIBYTE(v106) < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v107, &byte_209A88803);
    *exception = aPpx;
    v39 = (std::string *)(exception + 1);
    if ((v107[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)v107, *(std::string::size_type *)&v107[8]);
    }
    else
    {
      v85 = *(_OWORD *)v107;
      exception[3] = *(_QWORD *)&v107[16];
      *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v85;
    }
    *exception = &unk_24C214BA0;
  }
  if (IntVar == 2)
  {
    v16 = *((_QWORD *)this + 1);
    if (v16)
    {
      if (!(*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD))(*(_QWORD *)v16 + 40))(v16, "Version", 0, 0))
      {
        tknPrintf("Error: bad model. Couldn't locate %s in static component.\n", v17, v18, v19, v20, "Version");
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)v107 = aPpx;
        if (SHIBYTE(v106) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v107[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&v107[8] = *(_OWORD *)__p;
          v108 = v106;
        }
        *(_QWORD *)v107 = &unk_24C214BA0;
        if (v108 >= 0)
          v67 = &v107[8];
        else
          v67 = *(const char **)&v107[8];
        conditionalAssert(v67, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 683, v46, v47);
        *(_QWORD *)v107 = aPpx;
        if (SHIBYTE(v108) < 0)
          operator delete(*(void **)&v107[8]);
        if (SHIBYTE(v106) < 0)
          operator delete(__p[0]);
        v68 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v107, &byte_209A88803);
        *v68 = aPpx;
        v69 = (std::string *)(v68 + 1);
        if ((v107[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v69, *(const std::string::value_type **)v107, *(std::string::size_type *)&v107[8]);
        }
        else
        {
          v97 = *(_OWORD *)v107;
          v68[3] = *(_QWORD *)&v107[16];
          *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v97;
        }
        *v68 = &unk_24C214BA0;
      }
      if ((TDataManager::getBoolVar(*((TDataManager **)this + 1), "IsStaticComponent", 0) & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Bad static data spec");
        *(_QWORD *)v107 = aPpx;
        if (SHIBYTE(v106) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v107[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&v107[8] = *(_OWORD *)__p;
          v108 = v106;
        }
        *(_QWORD *)v107 = &unk_24C214BA0;
        if (v108 >= 0)
          v70 = &v107[8];
        else
          v70 = *(const char **)&v107[8];
        conditionalAssert(v70, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 689, v48, v49);
        *(_QWORD *)v107 = aPpx;
        if (SHIBYTE(v108) < 0)
          operator delete(*(void **)&v107[8]);
        if (SHIBYTE(v106) < 0)
          operator delete(__p[0]);
        v71 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v107, "Bad static data spec");
        *v71 = aPpx;
        v72 = (std::string *)(v71 + 1);
        if ((v107[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v72, *(const std::string::value_type **)v107, *(std::string::size_type *)&v107[8]);
        }
        else
        {
          v98 = *(_OWORD *)v107;
          v71[3] = *(_QWORD *)&v107[16];
          *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v98;
        }
        *v71 = &unk_24C214BA0;
      }
    }
    if (*(_QWORD *)this)
    {
      if (!(*(uint64_t (**)(_QWORD, const char *, _QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, "Version", 0, 0))
      {
        tknPrintf("Error: bad model. Couldn't locate %s in dynamic component.\n", v21, v22, v23, v24, "Version");
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)v107 = aPpx;
        if (SHIBYTE(v106) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v107[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&v107[8] = *(_OWORD *)__p;
          v108 = v106;
        }
        *(_QWORD *)v107 = &unk_24C214BA0;
        if (v108 >= 0)
          v73 = &v107[8];
        else
          v73 = *(const char **)&v107[8];
        conditionalAssert(v73, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 699, v50, v51);
        *(_QWORD *)v107 = aPpx;
        if (SHIBYTE(v108) < 0)
          operator delete(*(void **)&v107[8]);
        if (SHIBYTE(v106) < 0)
          operator delete(__p[0]);
        v74 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v107, &byte_209A88803);
        *v74 = aPpx;
        v75 = (std::string *)(v74 + 1);
        if ((v107[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v75, *(const std::string::value_type **)v107, *(std::string::size_type *)&v107[8]);
        }
        else
        {
          v99 = *(_OWORD *)v107;
          v74[3] = *(_QWORD *)&v107[16];
          *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v99;
        }
        *v74 = &unk_24C214BA0;
      }
      if (TDataManager::getBoolVar(*(TDataManager **)this, "IsStaticComponent", 0))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Bad dynamic data spec");
        *(_QWORD *)v107 = aPpx;
        if (SHIBYTE(v106) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v107[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&v107[8] = *(_OWORD *)__p;
          v108 = v106;
        }
        *(_QWORD *)v107 = &unk_24C214BA0;
        if (v108 >= 0)
          v76 = &v107[8];
        else
          v76 = *(const char **)&v107[8];
        conditionalAssert(v76, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 705, v52, v53);
        *(_QWORD *)v107 = aPpx;
        if (SHIBYTE(v108) < 0)
          operator delete(*(void **)&v107[8]);
        if (SHIBYTE(v106) < 0)
          operator delete(__p[0]);
        v77 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v107, "Bad dynamic data spec");
        *v77 = aPpx;
        v78 = (std::string *)(v77 + 1);
        if ((v107[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v78, *(const std::string::value_type **)v107, *(std::string::size_type *)&v107[8]);
        }
        else
        {
          v100 = *(_OWORD *)v107;
          v77[3] = *(_QWORD *)&v107[16];
          *(_OWORD *)&v78->__r_.__value_.__l.__data_ = v100;
        }
        *v77 = &unk_24C214BA0;
      }
      if (*(_QWORD *)this)
      {
        v25 = (TDataManager *)*((_QWORD *)this + 1);
        if (v25)
        {
          v26 = TDataManager::getIntVar(v25, "Version", 1);
          if (v26 == TDataManager::getIntVar(*(TDataManager **)this, "Version", 1))
          {
            __p[0] = 0;
            __p[1] = 0;
            v106 = 0;
            TDataManager::getStringVar(*(_QWORD *)this, (uint64_t)"EnhVersion", (uint64_t)__p);
          }
          tknPrintf("Error: %s : Unmatched dynamic and static data specs\n", v27, v28, v29, v30, "Version");
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
          *(_QWORD *)v107 = aPpx;
          if (SHIBYTE(v106) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v107[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v107[8] = *(_OWORD *)__p;
            v108 = v106;
          }
          *(_QWORD *)v107 = &unk_24C214BA0;
          if (v108 >= 0)
            v91 = &v107[8];
          else
            v91 = *(const char **)&v107[8];
          conditionalAssert(v91, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 715, v86, v87);
          *(_QWORD *)v107 = aPpx;
          if (SHIBYTE(v108) < 0)
            operator delete(*(void **)&v107[8]);
          if (SHIBYTE(v106) < 0)
            operator delete(__p[0]);
          v92 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v107, &byte_209A88803);
          *v92 = aPpx;
          v93 = (std::string *)(v92 + 1);
          if ((v107[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v93, *(const std::string::value_type **)v107, *(std::string::size_type *)&v107[8]);
          }
          else
          {
            v104 = *(_OWORD *)v107;
            v92[3] = *(_QWORD *)&v107[16];
            *(_OWORD *)&v93->__r_.__value_.__l.__data_ = v104;
          }
          *v92 = &unk_24C214BA0;
        }
      }
    }
    if (g_bCheckVocCompatibility)
    {
      __p[0] = 0;
      __p[1] = 0;
      v106 = 0;
      TInputModel::getStringVar((uint64_t *)this, (uint64_t)"VocVersionID", (uint64_t)__p);
    }
  }
  else if (IntVar == 1)
  {
    if (!*(_QWORD *)this)
    {
      tknPrintf("Error: Bad model. %s is 1 but there is not dynamic component.\n", v8, v9, v10, v11, "Version");
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *(_QWORD *)v107 = aPpx;
      if (SHIBYTE(v106) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v107[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v107[8] = *(_OWORD *)__p;
        v108 = v106;
      }
      *(_QWORD *)v107 = &unk_24C214BA0;
      if (v108 >= 0)
        v58 = &v107[8];
      else
        v58 = *(const char **)&v107[8];
      conditionalAssert(v58, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 617, v40, v41);
      *(_QWORD *)v107 = aPpx;
      if (SHIBYTE(v108) < 0)
        operator delete(*(void **)&v107[8]);
      if (SHIBYTE(v106) < 0)
        operator delete(__p[0]);
      v59 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v107, &byte_209A88803);
      *v59 = aPpx;
      v60 = (std::string *)(v59 + 1);
      if ((v107[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v60, *(const std::string::value_type **)v107, *(std::string::size_type *)&v107[8]);
      }
      else
      {
        v94 = *(_OWORD *)v107;
        v59[3] = *(_QWORD *)&v107[16];
        *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v94;
      }
      *v59 = &unk_24C214BA0;
    }
    if (!(*(uint64_t (**)(_QWORD, const char *, _QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, "Version", 0, 0))
    {
      tknPrintf("Error: Bad model. Couldn't locate %s\n", v12, v13, v14, v15, "Version");
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *(_QWORD *)v107 = aPpx;
      if (SHIBYTE(v106) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v107[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v107[8] = *(_OWORD *)__p;
        v108 = v106;
      }
      *(_QWORD *)v107 = &unk_24C214BA0;
      if (v108 >= 0)
        v61 = &v107[8];
      else
        v61 = *(const char **)&v107[8];
      conditionalAssert(v61, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 624, v42, v43);
      *(_QWORD *)v107 = aPpx;
      if (SHIBYTE(v108) < 0)
        operator delete(*(void **)&v107[8]);
      if (SHIBYTE(v106) < 0)
        operator delete(__p[0]);
      v62 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v107, &byte_209A88803);
      *v62 = aPpx;
      v63 = (std::string *)(v62 + 1);
      if ((v107[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v63, *(const std::string::value_type **)v107, *(std::string::size_type *)&v107[8]);
      }
      else
      {
        v95 = *(_OWORD *)v107;
        v62[3] = *(_QWORD *)&v107[16];
        *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v95;
      }
      *v62 = &unk_24C214BA0;
    }
    if (g_bCheckVocCompatibility)
    {
      __p[0] = 0;
      __p[1] = 0;
      v106 = 0;
      TDataManager::getStringVar(*(_QWORD *)this, (uint64_t)"VocVersionID", (uint64_t)__p);
    }
    if (TDataManager::getBoolVar(*(TDataManager **)this, "IsStaticComponent", 0))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Bad data spec");
      *(_QWORD *)v107 = aPpx;
      if (SHIBYTE(v106) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v107[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v107[8] = *(_OWORD *)__p;
        v108 = v106;
      }
      *(_QWORD *)v107 = &unk_24C214BA0;
      if (v108 >= 0)
        v64 = &v107[8];
      else
        v64 = *(const char **)&v107[8];
      conditionalAssert(v64, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 641, v44, v45);
      *(_QWORD *)v107 = aPpx;
      if (SHIBYTE(v108) < 0)
        operator delete(*(void **)&v107[8]);
      if (SHIBYTE(v106) < 0)
        operator delete(__p[0]);
      v65 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v107, "Bad data spec");
      *v65 = aPpx;
      v66 = (std::string *)(v65 + 1);
      if ((v107[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v66, *(const std::string::value_type **)v107, *(std::string::size_type *)&v107[8]);
      }
      else
      {
        v96 = *(_OWORD *)v107;
        v65[3] = *(_QWORD *)&v107[16];
        *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v96;
      }
      *v65 = &unk_24C214BA0;
    }
    v31 = *((_QWORD *)this + 1);
    BoolVar = TDataManager::getBoolVar(*(TDataManager **)this, "HasStaticComponent", 0);
    if (v31)
    {
      if ((BoolVar & 1) != 0)
      {
        if ((TDataManager::getBoolVar(*((TDataManager **)this + 1), "IsStaticComponent", 0) & 1) != 0)
        {
          __p[0] = 0;
          __p[1] = 0;
          v106 = 0;
          TDataManager::getStringVar(*(_QWORD *)this, (uint64_t)"EnhVersion", (uint64_t)__p);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "Bad static data spec");
        *(_QWORD *)v107 = aPpx;
        if (SHIBYTE(v106) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v107[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&v107[8] = *(_OWORD *)__p;
          v108 = v106;
        }
        *(_QWORD *)v107 = &unk_24C214BA0;
        if (v108 >= 0)
          v82 = &v107[8];
        else
          v82 = *(const char **)&v107[8];
        conditionalAssert(v82, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 662, v56, v57);
        *(_QWORD *)v107 = aPpx;
        if (SHIBYTE(v108) < 0)
          operator delete(*(void **)&v107[8]);
        if (SHIBYTE(v106) < 0)
          operator delete(__p[0]);
        v83 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v107, "Bad static data spec");
        *v83 = aPpx;
        v84 = (std::string *)(v83 + 1);
        if ((v107[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v84, *(const std::string::value_type **)v107, *(std::string::size_type *)&v107[8]);
        }
        else
        {
          v102 = *(_OWORD *)v107;
          v83[3] = *(_QWORD *)&v107[16];
          *(_OWORD *)&v84->__r_.__value_.__l.__data_ = v102;
        }
        *v83 = &unk_24C214BA0;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Bad static data spec");
      *(_QWORD *)v107 = aPpx;
      if (SHIBYTE(v106) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v107[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v107[8] = *(_OWORD *)__p;
        v108 = v106;
      }
      *(_QWORD *)v107 = &unk_24C214BA0;
      if (v108 >= 0)
        v79 = &v107[8];
      else
        v79 = *(const char **)&v107[8];
      conditionalAssert(v79, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 657, v54, v55);
      *(_QWORD *)v107 = aPpx;
      if (SHIBYTE(v108) < 0)
        operator delete(*(void **)&v107[8]);
      if (SHIBYTE(v106) < 0)
        operator delete(__p[0]);
      v80 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v107, "Bad static data spec");
      *v80 = aPpx;
      v81 = (std::string *)(v80 + 1);
      if ((v107[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v81, *(const std::string::value_type **)v107, *(std::string::size_type *)&v107[8]);
      }
      else
      {
        v101 = *(_OWORD *)v107;
        v80[3] = *(_QWORD *)&v107[16];
        *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v101;
      }
      *v80 = &unk_24C214BA0;
    }
    if ((a4 & 1) == 0 && ((BoolVar ^ 1) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "The data spec has a static component but it was not specified");
      *(_QWORD *)v107 = aPpx;
      if (SHIBYTE(v106) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v107[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v107[8] = *(_OWORD *)__p;
        v108 = v106;
      }
      *(_QWORD *)v107 = &unk_24C214BA0;
      if (v108 >= 0)
        v88 = &v107[8];
      else
        v88 = *(const char **)&v107[8];
      conditionalAssert(v88, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 649, v33, v34);
      *(_QWORD *)v107 = aPpx;
      if (SHIBYTE(v108) < 0)
        operator delete(*(void **)&v107[8]);
      if (SHIBYTE(v106) < 0)
        operator delete(__p[0]);
      v89 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v107, "The data spec has a static component but it was not specified");
      *v89 = aPpx;
      v90 = (std::string *)(v89 + 1);
      if ((v107[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v90, *(const std::string::value_type **)v107, *(std::string::size_type *)&v107[8]);
      }
      else
      {
        v103 = *(_OWORD *)v107;
        v89[3] = *(_QWORD *)&v107[16];
        *(_OWORD *)&v90->__r_.__value_.__l.__data_ = v103;
      }
      *v89 = &unk_24C214BA0;
    }
  }
}

void sub_2098A5D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  int v32;
  uint64_t v33;

  if (*(char *)(v33 - 57) < 0)
  {
    operator delete(*(void **)(v33 - 80));
    if ((v32 & 1) == 0)
    {
LABEL_6:
      if (a31 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

uint64_t TInputModel::getIntVar(TDataManager **this, const char *a2, uint64_t a3)
{
  TDataManager *v6;
  TDataManager *v7;

  v6 = *this;
  if (v6
    && (*(uint64_t (**)(TDataManager *, const char *, _QWORD, _QWORD))(*(_QWORD *)v6 + 40))(v6, a2, 0, 0))
  {
    v7 = *this;
    return TDataManager::getIntVar(v7, a2, a3);
  }
  v7 = this[1];
  if (v7)
    return TDataManager::getIntVar(v7, a2, a3);
  return a3;
}

void TInputModel::getStringVar(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  if (v6 && (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 40))(v6, a2, 0, 0))
  {
    v7 = *a1;
  }
  else
  {
    v7 = a1[1];
    if (!v7)
      JUMPOUT(0x20BD14750);
  }
  TDataManager::getStringVar(v7, a2, a3);
}

BOOL TInputModel::isVar(TInputModel *this, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)this;
  result = 1;
  if (!v4
    || !(*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD))(*(_QWORD *)v4 + 40))(v4, a2, 0, 0))
  {
    v5 = *((_QWORD *)this + 1);
    if (!v5
      || !(*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD))(*(_QWORD *)v5 + 40))(v5, a2, 0, 0))
    {
      return 0;
    }
  }
  return result;
}

char *TInputModel::getStaticDataPath(TInputModel *this)
{
  uint64_t v1;
  char *result;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
  {
    v1 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return &byte_209A88803;
  }
  result = (char *)(v1 + 16);
  if (*(char *)(v1 + 39) < 0)
    return *(char **)result;
  return result;
}

void TOutputModel::TOutputModel(TOutputModel *this, TDataManager *a2, TDataManager *a3, char *a4, const TDataManager *a5)
{
  uint64_t IntVar;
  TDataManager *v10;
  uint64_t v11;
  void *p_p;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *__p;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  if (TInputModel::isVar(this, "Version"))
  {
    TInputModel::TInputModel((TInputModel *)&__p, *(const TDataManager **)this, *((const TDataManager **)this + 1), *((_QWORD *)this + 1) == 0, a4);
    IntVar = v19;
  }
  else if (a3)
  {
    IntVar = 2;
  }
  else if (a5)
  {
    IntVar = (int)TDataManager::getIntVar(a5, "Version", 1);
  }
  else
  {
    IntVar = 1;
  }
  *((_QWORD *)this + 2) = IntVar;
  v10 = (TDataManager *)*((_QWORD *)this + 1);
  if (v10)
  {
    TDataManager::setIntVar(v10, "Version");
    v11 = *((_QWORD *)this + 1);
    std::string::basic_string[abi:ne180100]<0>(&__p, a4);
    if (v19 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v19 >= 0)
      v13 = HIBYTE(v19);
    else
      v13 = v18;
    (*(void (**)(uint64_t, const char *, void *, uint64_t))(*(_QWORD *)v11 + 48))(v11, "VocVersionID", p_p, v13);
    if (SHIBYTE(v19) < 0)
      operator delete(__p);
    TDataManager::setBoolVar(*((TDataManager **)this + 1), "IsStaticComponent", 1);
    if (a5)
    {
      __p = 0;
      v18 = 0;
      v19 = 0;
      TDataManager::getStringVar((uint64_t)a5, (uint64_t)"EnhVersion", (uint64_t)&__p);
    }
  }
  if (*(_QWORD *)this)
  {
    TDataManager::setIntVar(*(TDataManager **)this, "Version");
    v14 = *(_QWORD *)this;
    std::string::basic_string[abi:ne180100]<0>(&__p, a4);
    if (v19 >= 0)
      v15 = &__p;
    else
      v15 = __p;
    if (v19 >= 0)
      v16 = HIBYTE(v19);
    else
      v16 = v18;
    (*(void (**)(uint64_t, const char *, void *, uint64_t))(*(_QWORD *)v14 + 48))(v14, "VocVersionID", v15, v16);
    if (SHIBYTE(v19) < 0)
    {
      operator delete(__p);
      if (!a5)
        return;
    }
    else if (!a5)
    {
      return;
    }
    __p = 0;
    v18 = 0;
    v19 = 0;
    TDataManager::getStringVar((uint64_t)a5, (uint64_t)"EnhVersion", (uint64_t)&__p);
  }
}

void sub_2098A6430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(_QWORD *a1, char **a2)
{
  _QWORD *v4;

  v4 = std::string::basic_string[abi:ne180100]<0>(a1, *a2);
  std::string::basic_string[abi:ne180100]<0>(v4 + 3, a2[1]);
  return a1;
}

void sub_2098A64B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::pair<std::string, std::string> *v4;
  std::pair<std::string, std::string> *begin;
  std::pair<std::string, std::string> *end;
  std::pair<std::string, std::string> *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](this);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::wstring>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::wstring>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_2098A69B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::wstring>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::wstring>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void TClitics::TClitics(TClitics *this, TLexicon *a2, TTokenizerParamManager *a3)
{
  char *v6;
  const TLocaleInfo **v7;
  __int32 *v8;

  *(_QWORD *)this = &unk_24C218D70;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &unk_24C218D70;
  v6 = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v7 = (const TLocaleInfo **)((char *)this + 72);
  TRegExp::TRegExp((_QWORD *)this + 9, (uint64_t)a2 + 240);
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = a3;
  *((_QWORD *)this + 1) = 2;
  (*(void (**)(TClitics *))(*(_QWORD *)this + 16))(this);
  *((_QWORD *)this + 3) = 6;
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 16))(v6);
  v8 = (__int32 *)TStringParam::get((TTokenizerParamManager *)((char *)a3 + 7992));
  if (v8)
  {
    if (*v8)
    {
      TRegExp::add(v7, v8, 0);
      TRegExp::doneAdding((TRegExp *)v7);
    }
  }
}

void sub_2098A6A9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  TRegExp *v2;
  void **v3;

  TRegExp::~TRegExp(v2);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

void TClitics::~TClitics(void **this)
{
  TRegExp::~TRegExp((TRegExp *)(this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
}

BOOL TClitics::isValidRoot(TClitics *this, const TWord *a2)
{
  unsigned int *v3;
  _BOOL8 v4;
  unsigned int *v6;
  __int128 v7;
  _BYTE v8[1024];
  char v9;
  int v10;

  if (!*((_QWORD *)this + 11))
    return 0;
  v6 = (unsigned int *)v8;
  v7 = xmmword_209A57DD0;
  v9 = 1;
  TWord::getCategoryTag((uint64_t)a2, &v6);
  if (*((_QWORD *)&v7 + 1) >= (unint64_t)v7)
  {
    if (v9)
    {
      v10 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v6, *((unint64_t *)&v7 + 1), &v10, 1uLL);
      v3 = v6;
      --*((_QWORD *)&v7 + 1);
    }
    else
    {
      v3 = v6;
      if ((_QWORD)v7)
        v6[(_QWORD)v7 - 1] = 0;
    }
  }
  else
  {
    v3 = v6;
    v6[*((_QWORD *)&v7 + 1)] = 0;
  }
  v4 = TRegExp::match((_QWORD *)this + 9, v3, 0);
  if (v9 && v6 != (unsigned int *)v8 && v6)
    MEMORY[0x20BD149A8]();
  return v4;
}

void sub_2098A6C18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (LOBYTE(STACK[0x420]))
    TSegmenter::findSegmentEnd((uint64_t *)va, v2);
  _Unwind_Resume(a1);
}

void TClitics::addWords(TClitics *this, char **a2, TGraph *a3, TSegmenter *a4)
{
  TVertex *v5;
  uint64_t Segment;
  uint64_t v8;
  uint64_t OutEdge;
  uint64_t Vertex;
  BOOL v11;
  size_t v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t ActiveConfigHandle;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ValidConfig;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  _QWORD *v27;
  unsigned int *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  __int32 *v52;
  uint64_t v53;
  uint64_t HeadClone;
  int v55;
  uint64_t v56;
  int *v57;
  _QWORD *v58;
  uint64_t v59;
  const __int32 *v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t Score;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  TVertex *v87;
  unint64_t v88;
  size_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  TGraph *v94;
  TClitics *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  __int128 v101;
  _BYTE v102[785];
  char v103;
  int *v104;
  _BYTE v105[792];
  char v106;
  int *v107;
  __int128 v108;
  _BYTE v109[1024];
  char v110;
  char *v111;
  _BYTE *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;

  v5 = (TVertex *)a2;
  Segment = TSegmenter::getSegment(a4, a2[2]);
  if (Segment)
  {
    v8 = Segment;
    if (*(_DWORD *)(Segment + 24) == 1)
    {
      v89 = wcslen(*(const __int32 **)Segment);
      if (v89 >= 4)
      {
        OutEdge = TVertex::getOutEdge((uint64_t)v5);
        Vertex = TGraph::getVertex(a3, *(const char **)(v8 + 8));
        if (Vertex)
          v11 = OutEdge == 0;
        else
          v11 = 1;
        if (!v11)
        {
LABEL_112:
          if (*(_QWORD *)(OutEdge + 24) == Vertex && (*(_BYTE *)(OutEdge + 64) & 0x35) == 0)
            return;
          while (1)
          {
            OutEdge = *(_QWORD *)(OutEdge + 8);
            if (!OutEdge)
              break;
            if (!*(_BYTE *)(OutEdge + 32))
              goto LABEL_112;
          }
        }
        v12 = *((_QWORD *)this + 3);
        if (v12 + 2 > v89)
          v12 = v89 - 2;
        v116 = 0;
        v117 = 6;
        v114 = 0;
        v115 = 0;
        v111 = 0;
        v112 = 0;
        v113 = 0;
        v90 = *((_QWORD *)this + 1);
        v88 = v12 + 1;
        if (v90 < v12 + 1)
        {
          v92 = v8;
          v94 = a3;
          v95 = this;
          v87 = v5;
          while (1)
          {
            std::vector<TLexiconMatch>::resize((uint64_t)&v114, 0);
            v13 = *(int **)v92;
            v15 = (_QWORD *)*((_QWORD *)this + 4);
            v14 = *((_QWORD *)this + 5);
            ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v14 + 16464));
            v17 = *(int *)(v14 + 4 * TParam::getValidConfig((TParam *)(v14 + 16464), ActiveConfigHandle) + 16624);
            v18 = *((_QWORD *)this + 5);
            v19 = TParam::getActiveConfigHandle((TParam *)(v18 + 16112));
            ValidConfig = TParam::getValidConfig((TParam *)(v18 + 16112), v19);
            TLexicon::findHeadClonesCollated(v15, (unsigned int *)&v13[v89 - v90], &v117, 1uLL, v17, *(int *)(v18 + 4 * ValidConfig + 16272), (void **)&v114);
            if (v114 == v115)
              goto LABEL_107;
            v107 = (int *)v109;
            v108 = xmmword_209A57DD0;
            v110 = 1;
            v21 = *(int **)v92;
            TBuffer<wchar_t>::resize((uint64_t)&v107, 0);
            TBuffer<wchar_t>::insert((uint64_t)&v107, 0, v21, v89 - v90);
            v22 = *((_QWORD *)this + 5);
            v23 = TParam::getActiveConfigHandle((TParam *)(v22 + 7744));
            if (!*(_BYTE *)(v22 + TParam::getValidConfig((TParam *)(v22 + 7744), v23) + 7896))
              goto LABEL_24;
            if ((respellRoot((uint64_t)&v107, *(int **)v92) & 1) == 0)
              goto LABEL_23;
            v24 = *((_QWORD *)this + 4);
            if (*((_QWORD *)&v108 + 1) >= (unint64_t)v108)
            {
              if (v110)
              {
                LODWORD(v104) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), (int *)&v104, 1uLL);
                v25 = v107;
                --*((_QWORD *)&v108 + 1);
              }
              else
              {
                v25 = v107;
                if ((_QWORD)v108)
                  v107[(_QWORD)v108 - 1] = 0;
              }
            }
            else
            {
              v25 = v107;
              v107[*((_QWORD *)&v108 + 1)] = 0;
            }
            if (TLexicon::checkName(v24, v25, 1, 0xFFFFFFFFFFFFFFFFLL))
            {
LABEL_23:
              v26 = 7;
            }
            else
            {
LABEL_24:
              std::vector<TLexiconMatch>::resize((uint64_t)&v111, 0);
              v27 = (_QWORD *)*((_QWORD *)this + 4);
              if (*((_QWORD *)&v108 + 1) >= (unint64_t)v108)
              {
                if (v110)
                {
                  LODWORD(v104) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), (int *)&v104, 1uLL);
                  v28 = (unsigned int *)v107;
                  --*((_QWORD *)&v108 + 1);
                }
                else
                {
                  v28 = (unsigned int *)v107;
                  if ((_QWORD)v108)
                    v107[(_QWORD)v108 - 1] = 0;
                }
              }
              else
              {
                v28 = (unsigned int *)v107;
                v107[*((_QWORD *)&v108 + 1)] = 0;
              }
              v29 = TStringParam::get((TStringParam *)(*((_QWORD *)this + 5) + 10744));
              v30 = *((_QWORD *)this + 5);
              v31 = TParam::getActiveConfigHandle((TParam *)(v30 + 16464));
              v32 = *(int *)(v30 + 4 * TParam::getValidConfig((TParam *)(v30 + 16464), v31) + 16624);
              v33 = *((_QWORD *)this + 5);
              v34 = TParam::getActiveConfigHandle((TParam *)(v33 + 16112));
              v35 = TParam::getValidConfig((TParam *)(v33 + 16112), v34);
              TLexicon::findHeadClonesCollated(v27, v28, v29, v32, *(int *)(v33 + 4 * v35 + 16272), (void **)&v111);
              v36 = *((_QWORD *)this + 5);
              v37 = TParam::getActiveConfigHandle((TParam *)(v36 + 12864));
              if (!*(_BYTE *)(v36 + TParam::getValidConfig((TParam *)(v36 + 12864), v37) + 13016))
              {
                v70 = v111;
                if (v112 != v111)
                {
                  v71 = 0;
                  v72 = 0;
                  v73 = 0;
                  do
                  {
                    if (TClitics::isValidRoot(this, *(const TWord **)&v70[v71]))
                    {
                      if (!v73)
                        v73 = TGraph::addVertex(a3, 0);
                      v74 = *(_QWORD *)&v111[v71];
                      LODWORD(v104) = 1;
                      *(_QWORD *)v105 = v74;
                      *(_OWORD *)&v105[8] = *(_OWORD *)&v111[v71 + 16];
                      TGraph::addEdge(a3, (uint64_t)v5, v73, (uint64_t)&v104);
                    }
                    ++v72;
                    v70 = v111;
                    v71 += 32;
                  }
                  while (v72 < (v112 - v111) >> 5);
                  if (v73)
                  {
                    v75 = TGraph::addVertex(a3, *(char **)(v92 + 8));
                    v76 = v114;
                    if (v115 != v114)
                    {
                      v77 = v75;
                      v78 = 0;
                      v79 = 0;
                      do
                      {
                        v80 = &v76[v78];
                        v81 = *(_QWORD *)v80;
                        LODWORD(v104) = 1;
                        *(_QWORD *)v105 = v81;
                        *(_OWORD *)&v105[8] = *((_OWORD *)v80 + 1);
                        TGraph::addEdge(a3, (uint64_t)v73, v77, (uint64_t)&v104);
                        ++v79;
                        v76 = v114;
                        v78 += 32;
                      }
                      while (v79 < (v115 - v114) >> 5);
                    }
                  }
                }
                goto LABEL_100;
              }
              v38 = *((_QWORD *)this + 5);
              v39 = TParam::getActiveConfigHandle((TParam *)(v38 + 12616));
              if (*(_BYTE *)(v38 + TParam::getValidConfig((TParam *)(v38 + 12616), v39) + 12768))
              {
                v104 = (int *)&v105[16];
                *(_OWORD *)v105 = xmmword_209A57DD0;
                v106 = 1;
                v100 = v102;
                v101 = xmmword_209A57DD0;
                v103 = 1;
                v40 = v111;
                if (v112 == v111)
                  goto LABEL_78;
                v41 = 0;
                do
                {
                  v91 = v41;
                  v42 = 32 * v41;
                  if (TClitics::isValidRoot(this, *(const TWord **)&v40[32 * v41]))
                  {
                    TWord::getWrittenForm(*(__int32 ***)&v111[v42], (uint64_t)&v107);
                    v43 = v114;
                    if (v115 != v114)
                    {
                      v44 = 0;
                      v45 = 0;
                      do
                      {
                        TWord::getWrittenForm(*(__int32 ***)&v43[v44], (uint64_t)&v100);
                        TBuffer<wchar_t>::operator=((uint64_t)&v104, (uint64_t)&v107);
                        TBuffer<wchar_t>::operator+=((uint64_t)&v104, (uint64_t)&v100);
                        v46 = *((_QWORD *)this + 5);
                        v47 = TParam::getActiveConfigHandle((TParam *)(v46 + 7744));
                        if (!*(_BYTE *)(v46 + TParam::getValidConfig((TParam *)(v46 + 7744), v47) + 7896))
                          goto LABEL_45;
                        if (*((_QWORD *)&v108 + 1) >= (unint64_t)v108)
                        {
                          if (v110)
                          {
                            v96 = 0;
                            TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), &v96, 1uLL);
                            v48 = v107;
                            --*((_QWORD *)&v108 + 1);
                          }
                          else
                          {
                            v48 = v107;
                            if ((_QWORD)v108)
                              v107[(_QWORD)v108 - 1] = 0;
                          }
                        }
                        else
                        {
                          v48 = v107;
                          v107[*((_QWORD *)&v108 + 1)] = 0;
                        }
                        if ((respellRoot((uint64_t)&v104, v48) & 1) != 0)
                        {
LABEL_45:
                          v49 = *((_QWORD *)this + 4);
                          if (*(_QWORD *)&v105[8] >= *(_QWORD *)v105)
                          {
                            if (v106)
                            {
                              v96 = 0;
                              TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                              v50 = v104;
                              --*(_QWORD *)&v105[8];
                            }
                            else
                            {
                              v50 = v104;
                              if (*(_QWORD *)v105)
                                v104[*(_QWORD *)v105 - 1] = 0;
                            }
                          }
                          else
                          {
                            v50 = v104;
                            v104[*(_QWORD *)&v105[8]] = 0;
                          }
                          if (!TLexicon::checkName(v49, v50, 0, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            v51 = *((_QWORD *)this + 4);
                            if (*(_QWORD *)&v105[8] >= *(_QWORD *)v105)
                            {
                              v53 = v92;
                              if (v106)
                              {
                                v96 = 0;
                                TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                                v52 = v104;
                                --*(_QWORD *)&v105[8];
                              }
                              else
                              {
                                v52 = v104;
                                if (*(_QWORD *)v105)
                                  v104[*(_QWORD *)v105 - 1] = 0;
                              }
                            }
                            else
                            {
                              v52 = v104;
                              v104[*(_QWORD *)&v105[8]] = 0;
                              v53 = v92;
                            }
                            HeadClone = TLexicon::findHeadClone(v51, v52);
                            if (HeadClone)
                            {
                              v55 = 1;
                            }
                            else
                            {
                              v56 = *((_QWORD *)this + 4);
                              if (*(_QWORD *)&v105[8] >= *(_QWORD *)v105)
                              {
                                if (v106)
                                {
                                  v96 = 0;
                                  TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                                  v57 = v104;
                                  --*(_QWORD *)&v105[8];
                                }
                                else
                                {
                                  v57 = v104;
                                  if (*(_QWORD *)v105)
                                    v104[*(_QWORD *)v105 - 1] = 0;
                                }
                              }
                              else
                              {
                                v57 = v104;
                                v104[*(_QWORD *)&v105[8]] = 0;
                              }
                              HeadClone = (uint64_t)TLexicon::addTempWord(v56, v57, 0, 0, 0);
                              v55 = 4;
                            }
                            v93 = v55;
                            v58 = TGraph::addVertex(v94, *(char **)(v53 + 8));
                            v59 = *((_QWORD *)this + 4);
                            v60 = *(const __int32 **)v53;
                            if (*(_QWORD *)&v105[8] >= *(_QWORD *)v105)
                            {
                              if (v106)
                              {
                                v96 = 0;
                                TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                                v61 = (unsigned int *)v104;
                                --*(_QWORD *)&v105[8];
                              }
                              else
                              {
                                v61 = (unsigned int *)v104;
                                if (*(_QWORD *)v105)
                                  v104[*(_QWORD *)v105 - 1] = 0;
                              }
                            }
                            else
                            {
                              v61 = (unsigned int *)v104;
                              v104[*(_QWORD *)&v105[8]] = 0;
                            }
                            v62 = *((_QWORD *)v95 + 5);
                            v63 = TParam::getActiveConfigHandle((TParam *)(v62 + 16464));
                            v64 = *(int *)(v62 + 4 * TParam::getValidConfig((TParam *)(v62 + 16464), v63) + 16624);
                            v65 = *((_QWORD *)v95 + 5);
                            v66 = TParam::getActiveConfigHandle((TParam *)(v65 + 16112));
                            v67 = TParam::getValidConfig((TParam *)(v65 + 16112), v66);
                            Score = TLexicon::makeScore(v59, v60, v61, v64, *(int *)(v65 + 4 * v67 + 16272));
                            v96 = v93;
                            v97 = HeadClone;
                            v98 = Score;
                            v99 = v69;
                            TGraph::addEdge(v94, *((_QWORD *)v94 + 8), v58, (uint64_t)&v96);
                            this = v95;
                          }
                        }
                        ++v45;
                        v43 = v114;
                        v44 += 32;
                      }
                      while (v45 < (v115 - v114) >> 5);
                    }
                  }
                  v41 = v91 + 1;
                  v40 = v111;
                }
                while (v91 + 1 < (unint64_t)((v112 - v111) >> 5));
                a3 = v94;
                v5 = v87;
                if (v103)
                {
LABEL_78:
                  if (v100 != v102 && v100)
                    MEMORY[0x20BD149A8]();
                }
                if (v106 && v104 != (int *)&v105[16] && v104)
                  MEMORY[0x20BD149A8]();
LABEL_100:
                v26 = 0;
                goto LABEL_101;
              }
              v82 = v111;
              if (v112 == v111)
                goto LABEL_100;
              v83 = 0;
              v84 = 0;
              while (!TClitics::isValidRoot(this, *(const TWord **)&v82[v83]))
              {
                ++v84;
                v82 = v111;
                v83 += 32;
                if (v84 >= (v112 - v111) >> 5)
                  goto LABEL_100;
              }
              v85 = TLexicon::findHeadClone(*((_QWORD *)this + 4), *(__int32 **)v92);
              if (!v85)
                v85 = (uint64_t)TLexicon::addTempWord(*((_QWORD *)this + 4), *(int **)v92, 0, 0, 0);
              v86 = TGraph::addVertex(a3, *(char **)(v92 + 8));
              LODWORD(v104) = 4;
              *(_QWORD *)v105 = v85;
              *(_QWORD *)&v105[8] = 0;
              v105[16] = 0;
              TGraph::addEdge(a3, *((_QWORD *)a3 + 8), v86, (uint64_t)&v104);
              v26 = 5;
            }
LABEL_101:
            if (v110 && v107 != (int *)v109 && v107)
              MEMORY[0x20BD149A8]();
            if (v26 != 7 && v26)
            {
LABEL_117:
              if (v111)
              {
                v112 = v111;
                operator delete(v111);
              }
              break;
            }
LABEL_107:
            if (++v90 >= v88)
              goto LABEL_117;
          }
        }
        if (v114)
        {
          v115 = v114;
          operator delete(v114);
        }
      }
    }
  }
}

void sub_2098A7714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  void *v18;
  void *v19;

  if (LOBYTE(STACK[0xCF8]))
  {
    if (STACK[0x8E0] != a15 && STACK[0x8E0] != 0)
      MEMORY[0x20BD149A8]();
  }
  v18 = *(void **)(v15 - 144);
  if (v18)
  {
    *(_QWORD *)(v15 - 136) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(v15 - 120);
  if (v19)
  {
    *(_QWORD *)(v15 - 112) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t TBuffer<wchar_t>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int *v6;
  int v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
  {
    if (*(_BYTE *)(a2 + 1048))
    {
      v8 = 0;
      TBuffer<wchar_t>::insert(a2, v5, &v8, 1uLL);
      v5 = *(_QWORD *)(a2 + 16) - 1;
      *(_QWORD *)(a2 + 16) = v5;
      v6 = *(int **)a2;
    }
    else
    {
      v6 = *(int **)a2;
      if (v4)
        v6[v4 - 1] = 0;
    }
  }
  else
  {
    v6 = *(int **)a2;
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v5) = 0;
  }
  TBuffer<wchar_t>::resize(a1, 0);
  TBuffer<wchar_t>::insert(a1, 0, v6, v5);
  return a1;
}

void MrecInitModule_apist_sdapi(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  if (!gParSdapiDiagnosticCheckHeapEveryCall)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "SdapiDiagnosticCheckHeapEveryCall", (const char *)&unk_209A75CA0, (const char *)&unk_209A75CA0, 0, SetShadowSdapiDiagnosticCheckHeapEveryCall, 0);
    *v1 = &unk_24C214CE8;
    gParSdapiDiagnosticCheckHeapEveryCall = (uint64_t)v1;
    gShadowSdapiDiagnosticCheckHeapEveryCall = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParSdapiDiagnosticCheckHeapEveryCall);
  }
  if (!gParSdapiCrashOnSendError)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "SdapiCrashOnSendError", (const char *)&unk_209A75CA0, (const char *)&unk_209A75CA0, 0, SetShadowSdapiCrashOnSendError, 0);
    *v3 = &unk_24C214CE8;
    gParSdapiCrashOnSendError = (uint64_t)v3;
    gShadowSdapiCrashOnSendError = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParSdapiCrashOnSendError);
  }
  if (!gParSdapiAdaptationAccumulationMinCallbackInterval)
  {
    v4 = MemChunkAlloc(0x38uLL, 0);
    v8 = 0x271000000000;
    v5 = (_QWORD *)IntGlobalParamBase::IntGlobalParamBase((uint64_t)v4, (uint64_t)"SdapiAdaptationAccumulationMinCallbackInterval", (uint64_t)&unk_209A75CA0, (uint64_t)&unk_209A75CA0, 1, &v8, 0);
    *v5 = &unk_24C214A58;
    gParSdapiAdaptationAccumulationMinCallbackInterval = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParSdapiAdaptationAccumulationMinCallbackInterval);
  }
  if (!gParSdapiAdaptationApplicationMinCallbackInterval)
  {
    v6 = MemChunkAlloc(0x38uLL, 0);
    v8 = 0x271000000000;
    v7 = (_QWORD *)IntGlobalParamBase::IntGlobalParamBase((uint64_t)v6, (uint64_t)"SdapiAdaptationApplicationMinCallbackInterval", (uint64_t)&unk_209A75CA0, (uint64_t)&unk_209A75CA0, 1, &v8, 0);
    *v7 = &unk_24C214A58;
    gParSdapiAdaptationApplicationMinCallbackInterval = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParSdapiAdaptationApplicationMinCallbackInterval);
  }
}

void throwBadSdapiArgument(const char *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 461, (uint64_t)"sdapi/apist", 13, (uint64_t)"%.500s 0x%016llx", a7, a8, (char)a1);
}

void throwIfErroredDuringCallback(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(ApiState::smpApiState + 1))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 468, (uint64_t)"sdapi/apist", 32, (uint64_t)"%.500s %.500s", a7, a8, (char)a1);
}

uint64_t sdUtilStrMove(char *a1, int a2, const char *__s)
{
  unsigned int v6;
  unsigned int v7;
  size_t v8;

  v6 = strlen(__s);
  v7 = v6;
  if (a2)
  {
    if (a2 - 1 >= v6)
      v8 = v6;
    else
      v8 = (a2 - 1);
    if ((_DWORD)v8)
      memcpy(a1, __s, v8);
    else
      v8 = 0;
    a1[v8] = 0;
  }
  return v7 + 1;
}

uint64_t sdUtilItemMove(int a1, const void *a2, uint64_t a3, void *__dst, unsigned int a5)
{
  unsigned int v6;
  size_t v7;

  if (a5 >= a3)
    v6 = a3;
  else
    v6 = a5;
  v7 = v6 * a1;
  if ((_DWORD)v7)
    memcpy(__dst, a2, v7);
  return a3;
}

void sdUtilConvertSDWordSpecsToCwids(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  ModelMgr *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  ModelMgr *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t VocOrThrow;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  v38 = a6;
  v39 = a7;
  v37 = a5;
  v35 = a4;
  v9 = a3;
  v12 = (ModelMgr *)ModelMgr::smpModelMgr;
  v13 = *(_DWORD *)(a3 + 12);
  v14 = a2 >= v13;
  v15 = a2 - v13;
  if ((_DWORD)v15 != 0 && v14)
  {
    DgnPrimArray<unsigned int>::reallocElts(a3, v15, 0);
    *(_DWORD *)(v9 + 8) = a2;
  }
  else
  {
    *(_DWORD *)(a3 + 8) = a2;
    if (!a2)
      return;
  }
  v16 = 0;
  v17 = a2;
  v36 = v9;
  do
  {
    switch(a1[1])
    {
      case -4:
        if ((v38 & 1) == 0)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 552, (uint64_t)"sdapi/apist", 31, (uint64_t)"%s", a7, a8, (char)&errStr_sdapi_apist_E_BAD_COLLAPSED);
        v18 = *a1;
        if (HIDWORD(*a1))
          v19 = 0;
        else
          v19 = (*a1 & 0xFFFF0000) == 0;
        if (!v19)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 461, (uint64_t)"sdapi/apist", 13, (uint64_t)"%.500s 0x%016llx", a7, a8, (char)"SDhVoc");
        if ((unsigned __int16)v18 - 1 >= 0x7B)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 461, (uint64_t)"sdapi/apist", 13, (uint64_t)"%.500s 0x%016llx", a7, a8, (char)"SDhVoc");
        ModelMgr::getVocOrThrow(v12, (unsigned __int16)v18, a3, a4, a5, a6, a7, a8);
        v20 = (((_DWORD)v18 << 25) | 0xFFFFF4) + 7;
        break;
      case -3:
        if ((v37 & 1) == 0)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 568, (uint64_t)"sdapi/apist", 29, (uint64_t)"%s", a7, a8, (char)&errStr_sdapi_apist_E_BAD_ENDCONTEXT);
        v20 = -50331651;
        if (*a1 != -1)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 570, (uint64_t)"sdapi/apist", 30, (uint64_t)"%s", a7, a8, (char)&errStr_sdapi_apist_E_BAD_OOVVOC);
        break;
      case -2:
        if (v16 || (v35 & 1) == 0)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 560, (uint64_t)"sdapi/apist", 28, (uint64_t)"%s", a7, a8, (char)&errStr_sdapi_apist_E_BAD_STARTCONTEXT);
        v20 = -50331650;
        if (*a1 != -1)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 562, (uint64_t)"sdapi/apist", 30, (uint64_t)"%s", a7, a8, (char)&errStr_sdapi_apist_E_BAD_OOVVOC);
        break;
      case -1:
        if ((v39 & 1) == 0)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 544, (uint64_t)"sdapi/apist", 36, (uint64_t)"%s", a7, a8, (char)&errStr_sdapi_apist_E_BAD_UNKNOWNWORD);
        if (*a1 != -1)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 546, (uint64_t)"sdapi/apist", 30, (uint64_t)"%s", a7, a8, (char)&errStr_sdapi_apist_E_BAD_OOVVOC);
        v20 = -83886081;
        break;
      default:
        v21 = v17;
        v22 = v8;
        v23 = *a1;
        if (HIDWORD(*a1))
          v24 = 0;
        else
          v24 = (*a1 & 0xFFFF0000) == 0;
        if (!v24)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 461, (uint64_t)"sdapi/apist", 13, (uint64_t)"%.500s 0x%016llx", a7, a8, (char)"SDhVoc");
        v25 = v12;
        if ((unsigned __int16)v23 - 1 >= 0x7B)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 461, (uint64_t)"sdapi/apist", 13, (uint64_t)"%.500s 0x%016llx", a7, a8, (char)"SDhVoc");
        v26 = a1[1];
        v27 = v26 - 1;
        if ((unint64_t)(v26 - 1) >> 32)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 461, (uint64_t)"sdapi/apist", 13, (uint64_t)"%.500s 0x%016llx", a7, a8, (char)"SDhWord");
        if (v27 >= 0xFFFFF4)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 461, (uint64_t)"sdapi/apist", 13, (uint64_t)"%.500s 0x%016llx", a7, a8, (char)"SDhWord");
        v12 = v25;
        VocOrThrow = ModelMgr::getVocOrThrow(v25, (unsigned __int16)v23, a3, a4, a5, a6, a7, a8);
        WordList::verifyVisible(*(WordList **)(VocOrThrow + 48), v27, v29, v30, v31, v32, v33, v34);
        v20 = v27 & 0xFFFFFF | ((_DWORD)v23 << 25);
        v8 = v22;
        v17 = v21;
        v9 = v36;
        break;
    }
    *(_DWORD *)(*(_QWORD *)v9 + 4 * v16++) = v20;
    a1 += 2;
  }
  while (v17 != v16);
}

void DisplaySdapiObjectSizes(void)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v17 = 0;
  v18 = 0;
  v16 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 863, (DgnString *)&v14);
  if (v15)
    v4 = v14;
  else
    v4 = &unk_209A75CA0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v0, v1, v2, v3, 0, &unk_209A75CA0, 0, &unk_209A75CA0, v4);
  DgnString::~DgnString((DgnString *)&v14);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v5, v6, v7, v8, 0, &unk_209A75CA0);
  ApiState::printSize((ApiState *)ApiState::smpApiState, 0xFFFFFFFFLL, 1, &v18, &v17, &v16);
  MrecInitModule_sdpres_sdapi();
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 869, (DgnString *)&v14);
  if (v15)
    v13 = v14;
  else
    v13 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v9, v10, v11, v12, 0, &unk_209A75CA0, 35, 35, v13, v18, v17, v16);
  DgnString::~DgnString((DgnString *)&v14);
}

void sub_2098A8144(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 56));
  _Unwind_Resume(a1);
}

void ApiState::printSize(ApiState *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t i;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  void *v186;
  int v187;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1126, (DgnString *)&v186);
  if (v187)
    v16 = v186;
  else
    v16 = &unk_209A75CA0;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A75CA0, a3, &unk_209A75CA0, v16);
  DgnString::~DgnString((DgnString *)&v186);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A75CA0);
  MrecPrintSize(0xFFFFFFFF, a3, a4, a5, a6);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1129, (DgnString *)&v186);
  if (v187)
    v27 = v186;
  else
    v27 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A75CA0, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1131, (DgnString *)&v186);
  if (v187)
    v32 = v186;
  else
    v32 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A75CA0, (34 - a3), (34 - a3), v32, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v186);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1133, (DgnString *)&v186);
  if (v187)
    v37 = v186;
  else
    v37 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A75CA0, (34 - a3), (34 - a3), v37, 1, 1, 0);
  v185 = a6;
  DgnString::~DgnString((DgnString *)&v186);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1135, (DgnString *)&v186);
  if (v187)
    v42 = v186;
  else
    v42 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A75CA0, (34 - a3), (34 - a3), v42, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v186);
  ++*a4;
  ++*a5;
  v43 = SnapTime::sizeObject((uint64_t)this + 8, 0);
  v44 = SnapTime::sizeObject((uint64_t)this + 8, 1);
  v45 = SnapTime::sizeObject((uint64_t)this + 8, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1137, (DgnString *)&v186);
  if (v187)
    v50 = v186;
  else
    v50 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, (a3 + 1), &unk_209A75CA0, (34 - a3), (34 - a3), v50, v43, v44, v45);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v43;
  *a5 += v44;
  *v185 += v45;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1139, (DgnString *)&v186);
  if (v187)
    v55 = v186;
  else
    v55 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, (a3 + 1), &unk_209A75CA0, (34 - a3), (34 - a3), v55, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1141, (DgnString *)&v186);
  if (v187)
    v60 = v186;
  else
    v60 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, (a3 + 1), &unk_209A75CA0, (34 - a3), (34 - a3), v60, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1143, (DgnString *)&v186);
  if (v187)
    v65 = v186;
  else
    v65 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, (a3 + 1), &unk_209A75CA0, (34 - a3), (34 - a3), v65, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 8;
  *a5 += 8;
  v66 = sizeObject((char *)this + 64);
  v67 = sizeObject((char *)this + 64);
  v68 = sizeObject((char *)this + 64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1145, (DgnString *)&v186);
  if (v187)
    v73 = v186;
  else
    v73 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, (a3 + 1), &unk_209A75CA0, (34 - a3), (34 - a3), v73, v66, v67, v68);
  v183 = a3;
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v66;
  *a5 += v67;
  *v185 += v68;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1147, (DgnString *)&v186);
  if (v187)
    v78 = v186;
  else
    v78 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v74, v75, v76, v77, (a3 + 1), &unk_209A75CA0, (34 - a3), (34 - a3), v78, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v186);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v79 = 4;
  else
    v79 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1148, (DgnString *)&v186);
  if (v187)
    v84 = v186;
  else
    v84 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v21, &unk_209A75CA0, v22, v22, v84, v79, v79, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v79;
  *a5 += v79;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1153, (DgnString *)&v186);
    if (v187)
      v89 = v186;
    else
      v89 = &unk_209A75CA0;
    xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v21, &unk_209A75CA0, v22, v22, v89, 64, 64, 0);
    DgnString::~DgnString((DgnString *)&v186);
    *a4 += 64;
    *a5 += 64;
  }
  v184 = v21;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  for (i = 160; i != 1760; i += 80)
  {
    v92 += sizeObject((uint64_t)this + i, 0);
    v91 += sizeObject((uint64_t)this + i, 1);
    v90 += sizeObject((uint64_t)this + i, 3);
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1161, (DgnString *)&v186);
  if (v187)
    v98 = v186;
  else
    v98 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v184, &unk_209A75CA0, v22, v22, v98, v92, v91, v90);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v92;
  *a5 += v91;
  *v185 += v90;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v99 = 4;
  else
    v99 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1164, (DgnString *)&v186);
  if (v187)
    v104 = v186;
  else
    v104 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v100, v101, v102, v103, v184, &unk_209A75CA0, v22, v22, v104, v99, v99, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v99;
  *a5 += v99;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1166, (DgnString *)&v186);
  if (v187)
    v109 = v186;
  else
    v109 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v105, v106, v107, v108, v184, &unk_209A75CA0, v22, v22, v109, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1168, (DgnString *)&v186);
  if (v187)
    v114 = v186;
  else
    v114 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v184, &unk_209A75CA0, v22, v22, v114, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1170, (DgnString *)&v186);
  if (v187)
    v119 = v186;
  else
    v119 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v184, &unk_209A75CA0, v22, v22, v119, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v120 = 4;
  else
    v120 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1172, (DgnString *)&v186);
  if (v187)
    v125 = v186;
  else
    v125 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v121, v122, v123, v124, v184, &unk_209A75CA0, v22, v22, v125, v120, v120, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v120;
  *a5 += v120;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1174, (DgnString *)&v186);
  if (v187)
    v130 = v186;
  else
    v130 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v126, v127, v128, v129, v184, &unk_209A75CA0, v22, v22, v130, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1176, (DgnString *)&v186);
  if (v187)
    v135 = v186;
  else
    v135 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v131, v132, v133, v134, v184, &unk_209A75CA0, v22, v22, v135, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1178, (DgnString *)&v186);
  if (v187)
    v140 = v186;
  else
    v140 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v136, v137, v138, v139, v184, &unk_209A75CA0, v22, v22, v140, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 4;
  *a5 += 4;
  v141 = FileSpec::sizeObject((uint64_t)this + 1808);
  v142 = FileSpec::sizeObject((uint64_t)this + 1808);
  v143 = FileSpec::sizeObject((uint64_t)this + 1808);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1180, (DgnString *)&v186);
  if (v187)
    v148 = v186;
  else
    v148 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v144, v145, v146, v147, v184, &unk_209A75CA0, v22, v22, v148, v141, v142, v143);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v141;
  *a5 += v142;
  *v185 += v143;
  v149 = (char *)this + 1824;
  v150 = sizeObject((uint64_t)this + 1824, 0);
  v151 = sizeObject((uint64_t)v149, 1);
  v152 = sizeObject((uint64_t)v149, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1182, (DgnString *)&v186);
  if (v187)
    v157 = v186;
  else
    v157 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v153, v154, v155, v156, v184, &unk_209A75CA0, v22, v22, v157, v150, v151, v152);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v150;
  *a5 += v151;
  *v185 += v152;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1184, (DgnString *)&v186);
  if (v187)
    v162 = v186;
  else
    v162 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v158, v159, v160, v161, v184, &unk_209A75CA0, v22, v22, v162, 4000, 4000, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 4000;
  *a5 += 4000;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1186, (DgnString *)&v186);
  if (v187)
    v167 = v186;
  else
    v167 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v163, v164, v165, v166, v184, &unk_209A75CA0, v22, v22, v167, 4000, 4000, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 4000;
  *a5 += 4000;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1188, (DgnString *)&v186);
  if (v187)
    v172 = v186;
  else
    v172 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v168, v169, v170, v171, v184, &unk_209A75CA0, v22, v22, v172, 160, 160, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 160;
  *a5 += 160;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1190, (DgnString *)&v186);
  if (v187)
    v177 = v186;
  else
    v177 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v173, v174, v175, v176, v184, &unk_209A75CA0, v22, v22, v177, 160, 160, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 160;
  *a5 += 160;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1191, (DgnString *)&v186);
  if (v187)
    v182 = v186;
  else
    v182 = &unk_209A75CA0;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v178, v179, v180, v181, v183, &unk_209A75CA0, (35 - v183), (35 - v183), v182, *a4, *a5, *v185);
  DgnString::~DgnString((DgnString *)&v186);
}

void sub_2098A8EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void ApiState::ApiState(ApiState *this)
{
  uint64_t v2;
  char *v3;

  *(_WORD *)((char *)this + 1) = 0;
  *((_BYTE *)this + 3) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  DgnString::DgnString((ApiState *)((char *)this + 64));
  v2 = 0;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 11) = 0;
  do
  {
    v3 = (char *)this + v2;
    recursive_mutex_init((_opaque_pthread_mutex_t *)((char *)this + v2 + 160));
    *((_DWORD *)v3 + 56) = 0;
    *((_QWORD *)v3 + 29) = 0;
    v2 += 80;
  }
  while (v2 != 1600);
  *((_OWORD *)this + 110) = 0u;
  *((_DWORD *)this + 444) = 1;
  *((_DWORD *)this + 449) = 0;
  *(_OWORD *)((char *)this + 1780) = 0u;
  *((_QWORD *)this + 225) = 1;
  FileSpec::FileSpec((ApiState *)((char *)this + 1808));
  DgnReadWriteLock::DgnReadWriteLock((ApiState *)((char *)this + 1824));
  recursive_mutex_init((_opaque_pthread_mutex_t *)((char *)this + 96));
  ApiState::resetCallHistogram(this);
}

void sub_2098A9058(_Unwind_Exception *a1)
{
  DgnString *v1;
  uint64_t v2;
  FileSpec *v3;
  uint64_t i;

  FileSpec::~FileSpec(v3);
  for (i = 1680; i != 80; i -= 80)
    DgnLock::~DgnLock((DgnLock *)(v2 + i));
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void ApiState::resetCallHistogram(ApiState *this)
{
  pthread_mutex_t *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v2 = (pthread_mutex_t *)((char *)this + 160);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
  ++*((_DWORD *)this + 56);
  *((_QWORD *)this + 29) = pthread_self();
  *((_QWORD *)this + 1269) = 0;
  *((_QWORD *)this + 1289) = 0;
  v3 = *((_DWORD *)this + 56) - 1;
  *((_DWORD *)this + 56) = v3;
  if (!v3)
    *((_QWORD *)this + 29) = 0;
  pthread_mutex_unlock(v2);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 240));
  ++*((_DWORD *)this + 76);
  *((_QWORD *)this + 39) = pthread_self();
  *((_QWORD *)this + 1270) = 0;
  *((_QWORD *)this + 1290) = 0;
  v4 = *((_DWORD *)this + 76) - 1;
  *((_DWORD *)this + 76) = v4;
  if (!v4)
    *((_QWORD *)this + 39) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 240));
  pthread_mutex_lock((pthread_mutex_t *)this + 5);
  ++*((_DWORD *)this + 96);
  *((_QWORD *)this + 49) = pthread_self();
  *((_QWORD *)this + 1271) = 0;
  *((_QWORD *)this + 1291) = 0;
  v5 = *((_DWORD *)this + 96) - 1;
  *((_DWORD *)this + 96) = v5;
  if (!v5)
    *((_QWORD *)this + 49) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)this + 5);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 400));
  ++*((_DWORD *)this + 116);
  *((_QWORD *)this + 59) = pthread_self();
  *((_QWORD *)this + 1272) = 0;
  *((_QWORD *)this + 1292) = 0;
  v6 = *((_DWORD *)this + 116) - 1;
  *((_DWORD *)this + 116) = v6;
  if (!v6)
    *((_QWORD *)this + 59) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 400));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 480));
  ++*((_DWORD *)this + 136);
  *((_QWORD *)this + 69) = pthread_self();
  *((_QWORD *)this + 1273) = 0;
  *((_QWORD *)this + 1293) = 0;
  v7 = *((_DWORD *)this + 136) - 1;
  *((_DWORD *)this + 136) = v7;
  if (!v7)
    *((_QWORD *)this + 69) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 480));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
  ++*((_DWORD *)this + 156);
  *((_QWORD *)this + 79) = pthread_self();
  *((_QWORD *)this + 1274) = 0;
  *((_QWORD *)this + 1294) = 0;
  v8 = *((_DWORD *)this + 156) - 1;
  *((_DWORD *)this + 156) = v8;
  if (!v8)
    *((_QWORD *)this + 79) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
  pthread_mutex_lock((pthread_mutex_t *)this + 10);
  ++*((_DWORD *)this + 176);
  *((_QWORD *)this + 89) = pthread_self();
  *((_QWORD *)this + 1275) = 0;
  *((_QWORD *)this + 1295) = 0;
  v9 = *((_DWORD *)this + 176) - 1;
  *((_DWORD *)this + 176) = v9;
  if (!v9)
    *((_QWORD *)this + 89) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)this + 10);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 720));
  ++*((_DWORD *)this + 196);
  *((_QWORD *)this + 99) = pthread_self();
  *((_QWORD *)this + 1276) = 0;
  *((_QWORD *)this + 1296) = 0;
  v10 = *((_DWORD *)this + 196) - 1;
  *((_DWORD *)this + 196) = v10;
  if (!v10)
    *((_QWORD *)this + 99) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 720));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 800));
  ++*((_DWORD *)this + 216);
  *((_QWORD *)this + 109) = pthread_self();
  *((_QWORD *)this + 1277) = 0;
  *((_QWORD *)this + 1297) = 0;
  v11 = *((_DWORD *)this + 216) - 1;
  *((_DWORD *)this + 216) = v11;
  if (!v11)
    *((_QWORD *)this + 109) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 800));
  bzero((char *)this + 2152, 0x1F40uLL);
}

void *ApiState::startupHandlers(void *this, void (*a2)(const char *, unint64_t), void *a3, void (*a4)(const char *, unint64_t), void *a5, void (*a6)(const char *, unint64_t))
{
  ApiState::smMemoryErrorHandler = this;
  ApiState::smMemoryErrorUserData = (uint64_t)a2;
  ApiState::smErrorHandler = a3;
  ApiState::smErrorUserData = (uint64_t)a4;
  ApiState::smLogHandler = a5;
  ApiState::smLogUserData = (uint64_t)a6;
  return this;
}

uint64_t ApiState::startupApiState(ApiState *this, const char *a2)
{
  uint64_t *v3;
  ApiState *v4;
  uint64_t result;

  v3 = MemChunkAlloc(0x28E8uLL, 0);
  ApiState::ApiState((ApiState *)v3);
  result = ApiState::init(v4, this);
  ApiState::smpApiState = (uint64_t)v3;
  return result;
}

uint64_t ApiState::init(ApiState *this, DgnSharedMemMgr *a2)
{
  uint64_t v4;
  const char *v5;
  _QWORD v7[12];

  SnapTime::recordTime((ApiState *)((char *)this + 8), 1, 1, 1, 1);
  logMaybeSetTimeStampingBase(*((_QWORD *)this + 2));
  MemChunkRegion::getRegionStats(0, (uint64_t)v7);
  v4 = v7[4];
  *((_QWORD *)this + 6) = v7[1];
  *((_QWORD *)this + 7) = v4;
  StartupMrec(a2, v5);
  MrecInitLibrarySet_throughSdapi();
  MrecInitModule_sdpres_sdapi();
  GlobalParamMgr::resetAll((uint64_t **)GlobalParamMgr::smpGlobalParamMgr);
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  return setDllTerminatedSuccessfullyOrNotInUse(0);
}

void FpuUseMrecDefaults::~FpuUseMrecDefaults(FpuUseMrecDefaults *this)
{
  *(_QWORD *)this = &unk_24C214A18;
}

{
  *(_QWORD *)this = &unk_24C214A18;
  JUMPOUT(0x20BD149A8);
}

void ApiState::staticSendMemoryError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  DgnThreadMgr *appended;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE v14[8192];
  int v15;
  char v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;

  MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v10 = v9;
  v19 = *MEMORY[0x24BDAC8D0];
  if (ApiState::smpApiState)
  {
    ApiState::sendMemoryError((ApiState *)ApiState::smpApiState, v5, v6, v7, v8, v9);
  }
  else
  {
    DgnString::DgnString((DgnString *)&v17);
    v14[0] = 0;
    v15 = 0x2000;
    v16 = 0;
    appended = MessageFormatPrefix((DgnThreadMgr *)v14, 0, 1, -1);
    if (v10)
    {
      DgnBuffer::appendString((DgnBuffer *)v14, ": ");
      appended = (DgnThreadMgr *)DgnBuffer::appendString((DgnBuffer *)v14, v10);
    }
    if (gShadowSdapiCrashOnSendError)
      appended = (DgnThreadMgr *)crashIntoDebugger();
    if (ApiState::smErrorHandler)
    {
      if (v18)
        v12 = v17;
      else
        v12 = &unk_209A75CA0;
      if (v16)
        v13 = v12;
      else
        v13 = v14;
      appended = (DgnThreadMgr *)ApiState::smMemoryErrorHandler(v13, ApiState::smMemoryErrorUserData);
    }
    DgnThreadMgr::broadcastError(appended);
    DgnString::~DgnString((DgnString *)&v17);
  }
}

void sub_2098A9650(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ApiState::sendMemoryError(ApiState *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const char *a6)
{
  uint64_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  pthread_mutex_t *v10;
  const char *v11;
  DgnThreadMgr *appended;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  _BYTE v17[56];
  _BYTE v18[8192];
  int v19;
  char v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;

  v6 = MEMORY[0x24BDAC7A8](this, a2, a3, a4, a5);
  v8 = v7;
  v9 = v6;
  v23 = *MEMORY[0x24BDAC8D0];
  v10 = (pthread_mutex_t *)(v6 + 560);
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 560));
  ++*(_DWORD *)(v9 + 624);
  *(_QWORD *)(v9 + 632) = pthread_self();
  v11 = (const char *)&unk_209A75CA0;
  if (*(_BYTE *)(v9 + 80))
    v11 = *(const char **)(v9 + 88);
  DgnString::DgnString((DgnString *)&v21);
  v18[0] = 0;
  v19 = 0x2000;
  v20 = 0;
  MessageFormatPrefix((DgnThreadMgr *)v18, 0, 1, -1);
  appended = (DgnThreadMgr *)DgnBuffer::appendString((DgnBuffer *)v18, v11);
  if (v8)
  {
    DgnBuffer::appendString((DgnBuffer *)v18, ": ");
    appended = (DgnThreadMgr *)DgnBuffer::appendString((DgnBuffer *)v18, v8);
  }
  if (gShadowSdapiCrashOnSendError)
    appended = (DgnThreadMgr *)crashIntoDebugger();
  if (ApiState::smErrorHandler)
  {
    *(_BYTE *)(v9 + 2) = 1;
    CallbackInsurance::CallbackInsurance((uint64_t)v17, 5, 0, 1);
    v13 = &unk_209A75CA0;
    if (v22)
      v13 = v21;
    if (v20)
      v14 = v13;
    else
      v14 = v18;
    ApiState::smMemoryErrorHandler(v14, ApiState::smMemoryErrorUserData);
    CallbackInsurance::~CallbackInsurance((CallbackInsurance *)v17);
  }
  DgnThreadMgr::broadcastError(appended);
  *(_BYTE *)(v9 + 2) = 0;
  DgnString::~DgnString((DgnString *)&v21);
  v15 = *(_DWORD *)(v9 + 624) - 1;
  *(_DWORD *)(v9 + 624) = v15;
  if (!v15)
    *(_QWORD *)(v9 + 632) = 0;
  return pthread_mutex_unlock(v10);
}

void sub_2098A9860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;
  uint64_t v10;
  DgnString *v11;
  int v13;

  CallbackInsurance::~CallbackInsurance((CallbackInsurance *)&a9);
  DgnString::~DgnString(v11);
  v13 = *(_DWORD *)(v10 + 624) - 1;
  *(_DWORD *)(v10 + 624) = v13;
  if (!v13)
    *(_QWORD *)(v10 + 632) = 0;
  pthread_mutex_unlock(v9);
  _Unwind_Resume(a1);
}

void ApiState::staticSendError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const char *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  const char *v17;
  const char *v18;
  DgnThreadMgr *appended;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE v23[8192];
  int v24;
  char v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;

  v9 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v16 = v10;
  v17 = (const char *)v9;
  v28 = *MEMORY[0x24BDAC8D0];
  if (ApiState::smpApiState)
  {
    LODWORD(v22) = v15;
    ApiState::sendError(ApiState::smpApiState, v9, v10, v11, v12, v12, v13, v14, v22, a9);
  }
  else
  {
    DgnString::DgnString((DgnString *)&v26);
    v23[0] = 0;
    v24 = 0x2000;
    v25 = 0;
    MessageFormatPrefix((DgnThreadMgr *)v23, 0, 1, v16);
    if (v17)
      v18 = v17;
    else
      v18 = (const char *)&unk_209A75CA0;
    DgnBuffer::appendString((DgnBuffer *)v23, v18);
    if (a9)
    {
      DgnBuffer::appendString((DgnBuffer *)v23, ": ");
      DgnBuffer::appendString((DgnBuffer *)v23, a9);
    }
    appended = (DgnThreadMgr *)DgnBuffer::appendString((DgnBuffer *)v23, " (See mrec/doc/client.txt for general documentation on errors.)");
    if (gShadowSdapiCrashOnSendError)
      appended = (DgnThreadMgr *)crashIntoDebugger();
    if (ApiState::smErrorHandler)
    {
      if (v27)
        v20 = v26;
      else
        v20 = &unk_209A75CA0;
      if (v25)
        v21 = v20;
      else
        v21 = v23;
      appended = (DgnThreadMgr *)ApiState::smErrorHandler(v21, ApiState::smErrorUserData);
    }
    DgnThreadMgr::broadcastError(appended);
    DgnString::~DgnString((DgnString *)&v26);
  }
}

void sub_2098A9A84(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ApiState::sendError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const char *a10)
{
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  pthread_mutex_t *v18;
  DgnThreadMgr *appended;
  uint64_t (*v20)(_BYTE *, uint64_t);
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  int v25;
  _BYTE v27[56];
  _BYTE v28[8192];
  int v29;
  char v30;
  _BYTE *v31;
  int v32;
  uint64_t v33;

  v10 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = v10;
  v33 = *MEMORY[0x24BDAC8D0];
  v18 = (pthread_mutex_t *)(v10 + 560);
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 560));
  ++*(_DWORD *)(v17 + 624);
  *(_QWORD *)(v17 + 632) = pthread_self();
  if (!v16)
  {
    if (*(_BYTE *)(v17 + 80))
      v16 = *(const char **)(v17 + 88);
    else
      v16 = (const char *)&unk_209A75CA0;
  }
  DgnString::DgnString((DgnString *)&v31);
  v28[0] = 0;
  v29 = 0x2000;
  v30 = 0;
  MessageFormatPrefix((DgnThreadMgr *)v28, 0, 1, v14);
  DgnBuffer::appendString((DgnBuffer *)v28, v16);
  if (a10)
  {
    DgnBuffer::appendString((DgnBuffer *)v28, ": ");
    DgnBuffer::appendString((DgnBuffer *)v28, a10);
  }
  appended = (DgnThreadMgr *)DgnBuffer::appendString((DgnBuffer *)v28, " (See mrec/doc/client.txt for general documentation on errors.)");
  if (gShadowSdapiCrashOnSendError)
    appended = (DgnThreadMgr *)crashIntoDebugger();
  v20 = (uint64_t (*)(_BYTE *, uint64_t))ApiState::smErrorHandler;
  if (ApiState::smErrorHandler)
  {
    if (v12)
    {
      if (*(_BYTE *)(v17 + 2))
        goto LABEL_27;
      *(_BYTE *)(v17 + 2) = 1;
      if (v32)
        v21 = v31;
      else
        v21 = &unk_209A75CA0;
      if (v30)
        v22 = v21;
      else
        v22 = v28;
      appended = (DgnThreadMgr *)v20(v22, ApiState::smErrorUserData);
    }
    else
    {
      *(_BYTE *)(v17 + 2) = 1;
      CallbackInsurance::CallbackInsurance((uint64_t)v27, 5, 0, 1);
      if (v32)
        v23 = v31;
      else
        v23 = &unk_209A75CA0;
      if (v30)
        v24 = v23;
      else
        v24 = v28;
      ApiState::smErrorHandler(v24, ApiState::smErrorUserData);
      CallbackInsurance::~CallbackInsurance((CallbackInsurance *)v27);
    }
  }
  DgnThreadMgr::broadcastError(appended);
  *(_BYTE *)(v17 + 2) = 0;
LABEL_27:
  DgnString::~DgnString((DgnString *)&v31);
  v25 = *(_DWORD *)(v17 + 624) - 1;
  *(_DWORD *)(v17 + 624) = v25;
  if (!v25)
    *(_QWORD *)(v17 + 632) = 0;
  return pthread_mutex_unlock(v18);
}

void sub_2098A9CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;
  uint64_t v10;
  DgnString *v11;
  int v13;

  CallbackInsurance::~CallbackInsurance((CallbackInsurance *)&a9);
  DgnString::~DgnString(v11);
  v13 = *(_DWORD *)(v10 + 624) - 1;
  *(_DWORD *)(v10 + 624) = v13;
  if (!v13)
    *(_QWORD *)(v10 + 632) = 0;
  pthread_mutex_unlock(v9);
  _Unwind_Resume(a1);
}

void ApiState::staticSendLog(ApiState *this, const char *a2)
{
  if (ApiState::smpApiState)
  {
    ApiState::sendLog(this, (const char *)this);
  }
  else if (ApiState::smLogHandler)
  {
    ApiState::smLogHandler(this, ApiState::smLogUserData);
  }
}

void ApiState::sendLog(ApiState *this, const char *a2)
{
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[56];

  if (ApiState::smLogHandler)
  {
    v3 = ApiState::smpApiState
      && !*(_BYTE *)(ApiState::smpApiState + 1)
      && *(unsigned __int8 *)(ApiState::smpApiState + 80) != 0;
    CallbackInsurance::CallbackInsurance((uint64_t)v11, 6, 0, 0);
    ApiState::smLogHandler(a2, ApiState::smLogUserData);
    if (v3)
      throwIfErroredDuringCallback("SDLogHandler", v4, v5, v6, v7, v8, v9, v10);
    CallbackInsurance::~CallbackInsurance((CallbackInsurance *)v11);
  }
}

void sub_2098A9E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CallbackInsurance::~CallbackInsurance((CallbackInsurance *)va);
  _Unwind_Resume(a1);
}

void ApiState::progressCallbackWrapper(ApiState *this, uint64_t a2, _QWORD *a3)
{
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[56];

  if (*a3)
  {
    v5 = ApiState::smpApiState
      && !*(_BYTE *)(ApiState::smpApiState + 1)
      && *(unsigned __int8 *)(ApiState::smpApiState + 80) != 0;
    CallbackInsurance::CallbackInsurance((uint64_t)v13, 2, 0, 1);
    ((void (*)(uint64_t, _QWORD))*a3)(a2, a3[1]);
    if (v5)
      throwIfErroredDuringCallback("SDProgressCallback", v6, v7, v8, v9, v10, v11, v12);
    CallbackInsurance::~CallbackInsurance((CallbackInsurance *)v13);
  }
}

void sub_2098A9EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CallbackInsurance::~CallbackInsurance((CallbackInsurance *)va);
  _Unwind_Resume(a1);
}

void ApiState::callReallocateArrayCallback(ApiState *this, void (*a2)(unint64_t, unsigned int, unsigned int, void *, unsigned int, void **, unsigned int *), unint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void **a8, unsigned int *a9)
{
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[56];

  v17 = ApiState::smpApiState
     && !*(_BYTE *)(ApiState::smpApiState + 1)
     && *(unsigned __int8 *)(ApiState::smpApiState + 80) != 0;
  CallbackInsurance::CallbackInsurance((uint64_t)v25, 3, 0, 1);
  a2(a3, a4, a5, a6, a7, a8, a9);
  if (v17)
    throwIfErroredDuringCallback("SDReallocateArrayCallback", v18, v19, v20, v21, v22, v23, v24);
  CallbackInsurance::~CallbackInsurance((CallbackInsurance *)v25);
  if (*a9 < a5)
    ThrowExternalNewFailure((uint64_t)this, (a5 * a4));
}

void sub_2098A9FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CallbackInsurance::~CallbackInsurance((CallbackInsurance *)va);
  _Unwind_Resume(a1);
}

uint64_t ApiState::cleanUpAfterSaveException(ApiState *this, DgnFileIOException *a2, DgnString *a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;

  if (*((_DWORD *)this + 10))
    v6 = (void *)*((_QWORD *)this + 4);
  else
    v6 = &unk_209A75CA0;
  if (*((_DWORD *)this + 16))
    v7 = (void *)*((_QWORD *)this + 7);
  else
    v7 = &unk_209A75CA0;
  DgnString::stringPrintf(a2, "%s %d %s", (uint64_t)a3, a4, a5, v6, *((unsigned int *)this + 12), v7);
  (**(void (***)(ApiState *))this)(this);
  return MemChunkFree(this, 0);
}

DgnString *ApiState::setLastResultCodeString(ApiState *this, char *a2)
{
  return DgnString::operator=((ApiState *)((char *)this + 64), a2);
}

uint64_t ApiState::errorReexited(ApiState *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v5;

  v2 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  *((_BYTE *)this + 1) = 1;
  pthread_mutex_unlock(v2);
  LODWORD(v5) = 3;
  return ApiState::sendError((uint64_t)this, 0, 0xFFFFFFFFLL, 0, v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1746, (uint64_t)"sdapi/apist", v5, (const char *)&errStr_sdapi_apist_E_REEXIT);
}

uint64_t ApiState::errorReentry(ApiState *this, const char *a2)
{
  uint64_t v4;
  uint64_t v6;
  char __str[256];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x100uLL, "Illegal SDAPI re-entry into %s while already in %s", a2, *((const char **)this + 11));
  *((_BYTE *)this + 1) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 96));
  LODWORD(v6) = 6;
  return ApiState::sendError((uint64_t)this, (uint64_t)a2, 0xFFFFFFFFLL, 1, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1767, (uint64_t)"sdapi/apist", v6, __str);
}

uint64_t ApiState::errorCallDuringRecog(ApiState *this, const char *a2)
{
  uint64_t v4;
  uint64_t v6;
  char v7[264];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  strcpy(v7, "Called function is illegal when there is an active SDhRecognizer");
  *((_BYTE *)this + 1) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 96));
  LODWORD(v6) = 7;
  return ApiState::sendError((uint64_t)this, (uint64_t)a2, 0xFFFFFFFFLL, 0, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1787, (uint64_t)"sdapi/apist", v6, v7);
}

uint64_t ApiState::errorRDApiNotInit(ApiState *this, const char *a2)
{
  uint64_t v4;
  uint64_t v6;
  char v7[264];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  strcpy(v7, "Called function is illegal when the RDApi is not enabled.");
  *((_BYTE *)this + 1) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 96));
  LODWORD(v6) = 38;
  return ApiState::sendError((uint64_t)this, (uint64_t)a2, 0xFFFFFFFFLL, 0, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1807, (uint64_t)"sdapi/apist", v6, v7);
}

uint64_t ApiState::errorBadHeapOnEntry(ApiState *this, const char *a2)
{
  uint64_t v4;
  uint64_t v6;

  *((_BYTE *)this + 1) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 96));
  LODWORD(v6) = 8;
  return ApiState::sendError((uint64_t)this, (uint64_t)a2, 0xFFFFFFFFLL, 0, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1821, (uint64_t)"sdapi/apist", v6, (const char *)&errStr_sdapi_apist_E_BAD_HEAP_ON_ENTRY);
}

uint64_t ApiState::errorBadHeapOnExit(ApiState *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v5;

  v2 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  *((_BYTE *)this + 1) = 1;
  pthread_mutex_unlock(v2);
  LODWORD(v5) = 9;
  return ApiState::sendError((uint64_t)this, 0, 0xFFFFFFFFLL, 0, v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1835, (uint64_t)"sdapi/apist", v5, (const char *)&errStr_sdapi_apist_E_BAD_HEAP_ON_EXIT);
}

void ApiState::handleDgnMemoryException(uint64_t a1)
{
  uint64_t v1;

  if (ApiState::smpApiState)
  {
    pthread_mutex_lock((pthread_mutex_t *)(ApiState::smpApiState + 96));
    v1 = ApiState::smpApiState;
    *(_BYTE *)(ApiState::smpApiState + 1) = 1;
    a1 = pthread_mutex_unlock((pthread_mutex_t *)(v1 + 96));
  }
  ApiState::staticSendMemoryError(a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1853, (uint64_t)"sdapi/apist", 1);
}

void ApiState::handleDgnException(ApiState *this, DgnException *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  const char *v6;

  if (ApiState::smpApiState)
  {
    pthread_mutex_lock((pthread_mutex_t *)(ApiState::smpApiState + 96));
    v3 = ApiState::smpApiState;
    *(_BYTE *)(ApiState::smpApiState + 1) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 96));
  }
  if (*((_DWORD *)this + 4))
    v4 = (void *)*((_QWORD *)this + 1);
  else
    v4 = &unk_209A75CA0;
  if (*((_DWORD *)this + 10))
    v5 = (void *)*((_QWORD *)this + 4);
  else
    v5 = &unk_209A75CA0;
  if (*((_DWORD *)this + 16))
    v6 = (const char *)*((_QWORD *)this + 7);
  else
    v6 = (const char *)&unk_209A75CA0;
  ApiState::staticSendError(0, *((unsigned int *)this + 18), 0, 0, (uint64_t)v4, *((unsigned int *)this + 6), (uint64_t)v5, *((unsigned int *)this + 12), v6);
}

uint64_t SdapiInsurance::SdapiInsurance(uint64_t a1, const char *a2, int a3, int a4, int a5)
{
  *(_WORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 104) = &unk_24C2165B0;
  *(_BYTE *)(a1 + 120) = 1;
  *(_DWORD *)(a1 + 128) = a5;
  if (ApiState::smpApiState)
  {
    ApiState::enterApi(ApiState::smpApiState, a1, a2, a3, a4);
    if (*(_BYTE *)(DgnThreadMgr::smpThreadMgr + 76) && !*(_BYTE *)(DgnThreadMgr::smpThreadMgr + 77))
      DgnThreadTrace::add(DgnThreadMgr::smpThreadMgr + 80, -1, 6);
    *(_QWORD *)(a1 + 136) = mach_absolute_time();
  }
  return a1;
}

void sub_2098AA5EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = &unk_24C214A18;
  _Unwind_Resume(a1);
}

uint64_t ApiState::enterApi(uint64_t a1, uint64_t a2, const char *a3, int a4, int a5)
{
  pthread_mutex_t *v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[6];

  v10 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  if (*(_BYTE *)(a1 + 80))
  {
    result = ApiState::errorReentry((ApiState *)a1, a3);
LABEL_3:
    *(_BYTE *)(a2 + 97) = 0;
    return result;
  }
  if (a5 != 1 && *(_DWORD *)(RecogCtlMgr::smpRecogCtlMgr + 272))
  {
    result = ApiState::errorCallDuringRecog((ApiState *)a1, a3);
    goto LABEL_3;
  }
  if (a4 == 3 && !*(_BYTE *)(a1 + 3))
  {
    result = ApiState::errorRDApiNotInit((ApiState *)a1, a3);
    goto LABEL_3;
  }
  if (gShadowSdapiDiagnosticCheckHeapEveryCall && (mrecHeapValid() & 1) == 0)
  {
    result = ApiState::errorBadHeapOnEntry((ApiState *)a1, a3);
    goto LABEL_3;
  }
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 88) = a3;
  if (gbShowCallMemDeltas)
  {
    MemChunkRegion::getRegionStats(0, (uint64_t)v15);
    v12 = v15[1];
    *(_OWORD *)a2 = v15[0];
    *(_OWORD *)(a2 + 16) = v12;
    v13 = v15[3];
    *(_OWORD *)(a2 + 32) = v15[2];
    *(_OWORD *)(a2 + 48) = v13;
    v14 = v15[5];
    *(_OWORD *)(a2 + 64) = v15[4];
    *(_OWORD *)(a2 + 80) = v14;
    *(_BYTE *)(a2 + 96) = 1;
  }
  *(_BYTE *)(a2 + 97) = 1;
  return pthread_mutex_unlock(v10);
}

void SdapiInsurance::~SdapiInsurance(SdapiInsurance *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v6;
  uint64_t v7;
  ApiState *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*((_BYTE *)this + 97))
  {
    if (*(_BYTE *)(DgnThreadMgr::smpThreadMgr + 76) && !*(_BYTE *)(DgnThreadMgr::smpThreadMgr + 77))
      DgnThreadTrace::add(DgnThreadMgr::smpThreadMgr + 80, -1, 10);
    if (*((_BYTE *)this + 96))
      v6 = gbShowCallMemDeltas == 0;
    else
      v6 = 1;
    if (!v6)
      ShowDeltaMemSummary(0, *(_QWORD *)(ApiState::smpApiState + 88), this, a4, a5);
    v7 = mach_absolute_time() - *((_QWORD *)this + 17);
    v8 = (ApiState *)ApiState::smpApiState;
    v9 = ApiState::smpApiState + 8 * *((unsigned int *)this + 32);
    ++*(_QWORD *)(v9 + 2152);
    *(_QWORD *)(v9 + 6152) += v7;
    *((_QWORD *)v8 + 5) += v7;
    ApiState::exitApi(v8, v10, v11, v12, v13);
  }
  *((_QWORD *)this + 13) = &unk_24C214A18;
}

uint64_t ApiState::exitApi(ApiState *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*((_BYTE *)this + 80))
    return ApiState::errorReexited(this);
  if (gbShowCalls)
    xlprintf("Exiting sdapi call %s\n", a2, a3, a4, a5, *((_QWORD *)this + 11));
  if (gShadowSdapiDiagnosticCheckHeapEveryCall)
  {
    if ((mrecHeapValid() & 1) == 0)
      ApiState::errorBadHeapOnExit(this);
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  *((_BYTE *)this + 80) = 0;
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 96));
}

uint64_t CallbackInsurance::CallbackInsurance(uint64_t a1, int a2, int a3, char a4)
{
  pthread_rwlock_t *v7;

  *(_DWORD *)a1 = a2;
  v7 = (pthread_rwlock_t *)(ApiState::smpApiState + 1824);
  *(_QWORD *)(a1 + 16) = ApiState::smpApiState + 1824;
  *(_DWORD *)(a1 + 24) = a3 == 0;
  if (a3)
    DgnReadWriteLock::acquireRead(v7);
  else
    DgnReadWriteLock::acquireWrite(v7);
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 32) = &unk_24C2165B0;
  *(_BYTE *)(a1 + 48) = a4;
  DgnThreadMgr::startClientCallbackEvent((DgnThreadMgr *)(a2 == 6));
  *(_QWORD *)(a1 + 8) = mach_absolute_time();
  return a1;
}

void sub_2098AA92C(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_rwlock_t **v2;

  *(_QWORD *)(v1 + 32) = &unk_24C214A18;
  Latch<DgnReadWriteLock,ReadWriteLatchAdapter>::release(v2);
  _Unwind_Resume(a1);
}

void CallbackInsurance::~CallbackInsurance(CallbackInsurance *this)
{
  uint64_t v2;
  unsigned int v3;
  pthread_mutex_t *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  DgnThreadMgr *v9;
  char *v10;
  uint64_t v11;

  v2 = ApiState::smpApiState;
  v3 = *(_DWORD *)this;
  v4 = (pthread_mutex_t *)(ApiState::smpApiState + 80 * *(unsigned int *)this + 160);
  pthread_mutex_lock(v4);
  v5 = (_DWORD *)(v2 + 80 * v3);
  v6 = v5[56];
  v5 += 56;
  *v5 = v6 + 1;
  v7 = v2 + 80 * v3;
  *(_QWORD *)(v7 + 232) = pthread_self();
  v8 = (_QWORD *)(v7 + 232);
  v9 = (DgnThreadMgr *)mach_absolute_time();
  v10 = (char *)v9 - *((_QWORD *)this + 1);
  v11 = ApiState::smpApiState + 8 * *(unsigned int *)this;
  ++*(_QWORD *)(v11 + 10152);
  *(_QWORD *)(v11 + 10312) += v10;
  DgnThreadMgr::endClientCallbackEvent(v9);
  if ((*v5)-- == 1)
    *v8 = 0;
  pthread_mutex_unlock(v4);
  *((_QWORD *)this + 4) = &unk_24C214A18;
  Latch<DgnReadWriteLock,ReadWriteLatchAdapter>::release((pthread_rwlock_t **)this + 2);
}

void ProgressCallbackWrapper(ApiState *a1, _QWORD *a2)
{
  ApiState::progressCallbackWrapper(a1, (uint64_t)a1, a2);
}

void SetShadowSdapiDiagnosticCheckHeapEveryCall(void)
{
  gShadowSdapiDiagnosticCheckHeapEveryCall = *(_BYTE *)(gParSdapiDiagnosticCheckHeapEveryCall + 41);
}

void SetShadowSdapiCrashOnSendError(void)
{
  gShadowSdapiCrashOnSendError = *(_BYTE *)(gParSdapiCrashOnSendError + 41);
}

void IntGlobalParam::~IntGlobalParam(IntGlobalParam *this)
{
  MrecInitModule_sdpres_sdapi();
  JUMPOUT(0x20BD149A8);
}

void FpuSaveRestore::~FpuSaveRestore(FpuSaveRestore *this)
{
  *(_QWORD *)this = &unk_24C214A18;
}

{
  *(_QWORD *)this = &unk_24C214A18;
  JUMPOUT(0x20BD149A8);
}

pthread_rwlock_t *Latch<DgnReadWriteLock,ReadWriteLatchAdapter>::release(pthread_rwlock_t **a1)
{
  pthread_rwlock_t *result;

  result = *a1;
  if (result)
  {
    result = (pthread_rwlock_t *)DgnReadWriteLock::releaseRead(result);
    *a1 = 0;
  }
  return result;
}

void CPUID::initCPUID(CPUID *this)
{
  __int128 v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  int v6;

  if (!*(_BYTE *)this)
  {
    *(_BYTE *)this = 1;
    bzero((char *)this + 4, 0x418uLL);
    *((_DWORD *)this + 263) = 1;
    *(_QWORD *)&v2 = 0x100000001;
    *((_QWORD *)this + 132) = 0x100000001;
    *((_WORD *)this + 532) = 0;
    *((_DWORD *)this + 267) = 1;
    *((_QWORD *)this + 134) = 0x100000001;
    *((_QWORD *)this + 135) = -1;
    *((_QWORD *)this + 136) = -1;
    *((_QWORD *)&v2 + 1) = 0x100000001;
    *(_OWORD *)((char *)this + 1096) = v2;
    LOBYTE(v2) = 0;
    BYTE4(v2) = 0;
    BYTE8(v2) = 0;
    BYTE12(v2) = 0;
    *(_OWORD *)((char *)this + 1112) = v2;
    *(_OWORD *)((char *)this + 1128) = v2;
    *((_BYTE *)this + 1144) = 0;
    *(_OWORD *)((char *)this + 9337) = v2;
    *(_OWORD *)((char *)this + 9353) = v2;
    *(_OWORD *)((char *)this + 9369) = v2;
    *(_OWORD *)((char *)this + 9385) = v2;
    *(_OWORD *)((char *)this + 9401) = v2;
    *(_OWORD *)((char *)this + 9417) = v2;
    v3 = *((unsigned int *)this + 2359);
    if (v3 <= 0x3F)
    {
      v4 = (unsigned __int8 *)this + v3 + 9369;
      v5 = v3 + 1;
      do
      {
        v6 = *v4++;
        if (v6 != 32)
          break;
        *((_DWORD *)this + 2359) = v5++;
      }
      while (v5 != 65);
    }
    bzero((char *)this + 1145, 0x2000uLL);
  }
}

uint64_t TVertex::getInEdge(uint64_t this)
{
  do
    this = *(_QWORD *)this;
  while (this && *(_BYTE *)(this + 32));
  return this;
}

uint64_t TVertex::getInEdgeCount(uint64_t **this)
{
  uint64_t *v1;
  uint64_t result;

  v1 = *this;
  if (!*this)
    return 0;
  while (*((_BYTE *)v1 + 32))
  {
    v1 = (uint64_t *)*v1;
    if (!v1)
      return 0;
  }
  result = 0;
LABEL_7:
  ++result;
  while (1)
  {
    v1 = (uint64_t *)*v1;
    if (!v1)
      return result;
    if (!*((_BYTE *)v1 + 32))
      goto LABEL_7;
  }
}

uint64_t TVertex::getOutEdge(uint64_t this)
{
  do
    this = *(_QWORD *)(this + 8);
  while (this && *(_BYTE *)(this + 32));
  return this;
}

uint64_t TVertex::getOutEdgeCount(TVertex *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  while (*(_BYTE *)(v1 + 32))
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  result = 0;
LABEL_7:
  ++result;
  while (1)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return result;
    if (!*(_BYTE *)(v1 + 32))
      goto LABEL_7;
  }
}

void TGraph::TGraph(TGraph *this, char *a2, TSegmenter *a3, char a4)
{
  *(_QWORD *)this = a3;
  *((_BYTE *)this + 8) = a4;
  TAllocator::TAllocator((TGraph *)((char *)this + 16), 2048);
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 7) = a2;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = TGraph::addVertex(this, a2);
}

void sub_2098AAD2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  TAllocator *v2;
  void **v3;
  void **v4;
  void *v6;

  v6 = *(void **)(v1 + 128);
  if (v6)
  {
    *(_QWORD *)(v1 + 136) = v6;
    operator delete(v6);
  }
  TGraph::TGraph(v4, v3, v1);
  TAllocator::clear(v2);
  _Unwind_Resume(a1);
}

_QWORD *TGraph::addVertex(TGraph *this, char *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t Segment;
  char *v8;
  uint64_t v9;
  char **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  char **v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  int v28;
  unsigned __int8 v29;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  TLocaleInfo *v44;

  if (a2)
  {
    v4 = (unint64_t)&a2[-*((_QWORD *)this + 7)];
    v5 = *((_QWORD *)this + 16);
    if (v4 < (*((_QWORD *)this + 17) - v5) >> 3)
    {
      v6 = *(_QWORD **)(v5 + 8 * v4);
      if (v6)
      {
        *((_BYTE *)v6 + 32) = 0;
        return v6;
      }
    }
    Segment = TSegmenter::getSegment(*(TSegmenter **)this, a2);
    v8 = a2;
    if (!Segment || (v9 = Segment, v8 = a2, *(_DWORD *)(Segment + 24)))
    {
LABEL_7:
      v6 = TAllocator::allocate((TGraph *)((char *)this + 16), 48);
      v10 = (char **)((char *)this + 80);
      v6[5] = (uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3;
      v6[2] = v8;
      v6[3] = a2;
      *((_BYTE *)v6 + 32) = 0;
      *v6 = 0;
      v6[1] = 0;
      v11 = (_QWORD *)*((_QWORD *)this + 11);
      v12 = *((_QWORD *)this + 12);
      if ((unint64_t)v11 >= v12)
      {
        v18 = ((char *)v11 - *v10) >> 3;
        if ((unint64_t)(v18 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v19 = v12 - (_QWORD)*v10;
        v20 = v19 >> 2;
        if (v19 >> 2 <= (unint64_t)(v18 + 1))
          v20 = v18 + 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 96, v21);
        else
          v22 = 0;
        v32 = &v22[8 * v18];
        v33 = &v22[8 * v21];
        *(_QWORD *)v32 = v6;
        v13 = v32 + 8;
        v35 = (char *)*((_QWORD *)this + 10);
        v34 = (char *)*((_QWORD *)this + 11);
        if (v34 != v35)
        {
          do
          {
            v36 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *((_QWORD *)v32 - 1) = v36;
            v32 -= 8;
          }
          while (v34 != v35);
          v34 = *v10;
        }
        *((_QWORD *)this + 10) = v32;
        *((_QWORD *)this + 11) = v13;
        *((_QWORD *)this + 12) = v33;
        if (v34)
          operator delete(v34);
      }
      else
      {
        *v11 = v6;
        v13 = v11 + 1;
      }
      *((_QWORD *)this + 11) = v13;
      TGraph::setMap(this, (TVertex *)v6);
      v37 = *((_QWORD *)this + 9);
      if (!v37 || *(_QWORD *)(v37 + 24) < (unint64_t)a2)
        *((_QWORD *)this + 9) = v6;
      return v6;
    }
    v8 = a2;
    while (1)
    {
      v28 = **(_DWORD **)v9;
      if ((v29 & 1) == 0
      {
        v44 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v44);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v44;
      }
      if (v28 <= 8202)
      {
        if (v28 != 32 && v28 != 160)
          goto LABEL_38;
      }
      else if (v28 != 8203 && v28 != 12288 && v28 != 65279)
      {
LABEL_38:
        if (*((_BYTE *)this + 8))
          goto LABEL_7;
      }
      v8 = *(char **)(v9 + 8);
      v31 = TSegmenter::getSegment(*(TSegmenter **)this, v8);
      if (v31)
      {
        v9 = v31;
        if (!*(_DWORD *)(v31 + 24))
          continue;
      }
      goto LABEL_7;
    }
  }
  v6 = TAllocator::allocate((TGraph *)((char *)this + 16), 48);
  v14 = (char **)((char *)this + 80);
  v6[5] = (uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3;
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_BYTE *)v6 + 32) = 0;
  v15 = (_QWORD *)*((_QWORD *)this + 11);
  v16 = *((_QWORD *)this + 12);
  if ((unint64_t)v15 >= v16)
  {
    v23 = ((char *)v15 - *v14) >> 3;
    if ((unint64_t)(v23 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v24 = v16 - (_QWORD)*v14;
    v25 = v24 >> 2;
    if (v24 >> 2 <= (unint64_t)(v23 + 1))
      v25 = v23 + 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    if (v26)
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 96, v26);
    else
      v27 = 0;
    v38 = &v27[8 * v23];
    v39 = &v27[8 * v26];
    *(_QWORD *)v38 = v6;
    v17 = v38 + 8;
    v41 = (char *)*((_QWORD *)this + 10);
    v40 = (char *)*((_QWORD *)this + 11);
    if (v40 != v41)
    {
      do
      {
        v42 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *((_QWORD *)v38 - 1) = v42;
        v38 -= 8;
      }
      while (v40 != v41);
      v40 = *v14;
    }
    *((_QWORD *)this + 10) = v38;
    *((_QWORD *)this + 11) = v17;
    *((_QWORD *)this + 12) = v39;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *v15 = v6;
    v17 = v15 + 1;
  }
  *((_QWORD *)this + 11) = v17;
  return v6;
}

void sub_2098AB0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x20BD149A8](a10, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TGraph::~TGraph(TGraph *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  TAllocator::clear((TGraph *)((char *)this + 16));
}

uint64_t TGraph::getVertex(TGraph *this, const char *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = (unint64_t)&a2[-*((_QWORD *)this + 7)];
  v3 = *((_QWORD *)this + 16);
  if (v2 >= (*((_QWORD *)this + 17) - v3) >> 3)
    return 0;
  else
    return *(_QWORD *)(v3 + 8 * v2);
}

void TGraph::setMap(TGraph *this, TVertex *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = (uint64_t *)((char *)this + 128);
  v3 = *((_QWORD *)this + 16);
  v5 = *((_QWORD *)a2 + 3) - *((_QWORD *)this + 7);
  if (v5 >= (*((_QWORD *)this + 17) - v3) >> 3)
  {
    if (2 * v5 <= 0x100)
      v6 = 256;
    else
      v6 = 2 * v5;
    v7 = 0;
    std::vector<TSegment const*>::resize((uint64_t)this + 128, v6, &v7);
    v3 = *v4;
  }
  *(_QWORD *)(v3 + 8 * v5) = a2;
}

void TGraph::deleteVertex(TGraph *this, TVertex *a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = *((_QWORD *)a2 + 1);
  if (v2)
  {
    while (*(_BYTE *)(v2 + 32))
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        goto LABEL_4;
    }
LABEL_8:
    *(_BYTE *)(v2 + 32) = 1;
    while (1)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        break;
      if (!*(_BYTE *)(v2 + 32))
        goto LABEL_8;
    }
  }
LABEL_4:
  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)a2)
  {
    while (*((_BYTE *)v3 + 32))
    {
      v3 = (uint64_t *)*v3;
      if (!v3)
        goto LABEL_7;
    }
LABEL_12:
    *((_BYTE *)v3 + 32) = 1;
    while (1)
    {
      v3 = (uint64_t *)*v3;
      if (!v3)
        break;
      if (!*((_BYTE *)v3 + 32))
        goto LABEL_12;
    }
  }
LABEL_7:
  *((_BYTE *)a2 + 32) = 1;
}

void TGraph::deleteEdge(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 32) = 1;
}

uint64_t TGraph::getNextVertex(TGraph *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *i;

  v2 = *((_QWORD *)this + 7);
  if (v2 > a2)
    return *((_QWORD *)this + 8);
  v4 = *(_QWORD *)(*((_QWORD *)this + 9) + 24);
  if (v4 < a2)
    return 0;
  for (i = (uint64_t *)(*((_QWORD *)this + 16) - 8 * v2 + 8 * a2); ; ++i)
  {
    result = *i;
    if (*i)
      break;
    if (++a2 > v4)
      return 0;
  }
  return result;
}

uint64_t TGraph::getPrevVertex(TGraph *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  uint64_t *i;

  v2 = *((_QWORD *)this + 7);
  if (v2 > a2)
    return 0;
  result = *((_QWORD *)this + 9);
  if (*(_QWORD *)(result + 24) >= a2)
  {
    for (i = (uint64_t *)(*((_QWORD *)this + 16) - 8 * v2 + 8 * a2); ; --i)
    {
      result = *i;
      if (*i)
        break;
      if (--a2 < v2)
        return 0;
    }
  }
  return result;
}

_QWORD *TGraph::addEdge(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *i;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  int v14;
  char **v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;

  v9 = (_QWORD *)(a2 + 8);
  for (i = *(_QWORD **)(a2 + 8); i; i = (_QWORD *)i[1])
  {
    if (!*((_BYTE *)i + 32))
      break;
  }
  if (*(_DWORD *)a4 != 5)
  {
    v10 = 0;
    if (!i || *(_DWORD *)a4 == 2)
      goto LABEL_22;
    v10 = 0;
LABEL_9:
    v11 = i;
    v12 = *((_DWORD *)i + 12);
    if (v12 != 2 && v12 != 5)
    {
      v14 = wcscmp(**(const __int32 ***)(a4 + 8), *(const __int32 **)v11[7]);
      if (v14 < 0)
        goto LABEL_22;
      if (!v14 && (_QWORD *)v11[3] == a3 && *(unsigned __int8 *)(a4 + 24) == *((unsigned __int8 *)v11 + 72))
        return v11;
    }
    i = v11;
    while (1)
    {
      i = (_QWORD *)i[1];
      if (!i)
        break;
      if (!*((_BYTE *)i + 32))
      {
        v10 = v11;
        goto LABEL_9;
      }
    }
    v10 = v11;
    goto LABEL_22;
  }
  v10 = 0;
LABEL_22:
  v11 = TAllocator::allocate((TAllocator *)(a1 + 2), 80);
  v15 = (char **)(a1 + 13);
  v16 = (uint64_t)(a1[14] - a1[13]) >> 3;
  *((_DWORD *)v11 + 12) = 3;
  v11[7] = 0;
  v11[8] = 0;
  *((_BYTE *)v11 + 72) = 0;
  v11[5] = v16;
  v11[2] = a2;
  v11[3] = a3;
  *((_BYTE *)v11 + 32) = 0;
  *v11 = 0;
  v11[1] = 0;
  v17 = *(_OWORD *)(a4 + 16);
  *((_OWORD *)v11 + 3) = *(_OWORD *)a4;
  *((_OWORD *)v11 + 4) = v17;
  v18 = (_QWORD *)a1[14];
  v19 = a1[15];
  if ((unint64_t)v18 >= v19)
  {
    v21 = ((char *)v18 - *v15) >> 3;
    if ((unint64_t)(v21 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v22 = v19 - (_QWORD)*v15;
    v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1))
      v23 = v21 + 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a1 + 15), v24);
    else
      v25 = 0;
    v26 = &v25[8 * v21];
    v27 = &v25[8 * v24];
    *(_QWORD *)v26 = v11;
    v20 = v26 + 8;
    v29 = (char *)a1[13];
    v28 = (char *)a1[14];
    if (v28 != v29)
    {
      do
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      v28 = *v15;
    }
    a1[13] = v26;
    a1[14] = v20;
    a1[15] = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v18 = v11;
    v20 = v18 + 1;
  }
  a1[14] = v20;
  v31 = v10 + 1;
  if (!v10)
    v31 = v9;
  v11[1] = *v31;
  *v31 = v11;
  *v11 = *a3;
  *a3 = v11;
  return v11;
}

void TGraph::topologicalSort(_QWORD *a1, void **a2, uint64_t a3)
{
  uint64_t ***v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  void *__p[3];

  std::vector<unsigned long>::vector(__p, (uint64_t)(a1[11] - a1[10]) >> 3);
  v6 = (uint64_t ***)a1[10];
  v7 = 0;
  v8 = a1[11] - (_QWORD)v6;
  if (v8)
  {
    v9 = v8 >> 3;
    v10 = (uint64_t *)__p[0];
    if (v9 <= 1)
      v11 = 1;
    else
      v11 = v9;
    do
    {
      if (!*((_BYTE *)*v6 + 32))
      {
        ++v7;
        *v10 = TVertex::getInEdgeCount(*v6);
      }
      ++v6;
      ++v10;
      --v11;
    }
    while (v11);
  }
  a2[1] = *a2;
  std::vector<TPItnTagHandle_fake **>::reserve(a2, v7);
  v12 = (unint64_t)a2[2];
  v13 = (char *)a2[1];
  if ((unint64_t)v13 >= v12)
  {
    v15 = (v13 - (_BYTE *)*a2) >> 3;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v16 = v12 - (_QWORD)*a2;
    v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1))
      v17 = v15 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a2 + 2), v18);
    else
      v19 = 0;
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    *(_QWORD *)v20 = a1[8];
    v14 = v20 + 8;
    v23 = (char *)*a2;
    v22 = (char *)a2[1];
    if (v22 != *a2)
    {
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      v22 = (char *)*a2;
    }
    *a2 = v20;
    a2[1] = v14;
    a2[2] = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *(_QWORD *)v13 = a1[8];
    v14 = v13 + 8;
  }
  a2[1] = v14;
  v25 = *a2;
  if (v14 != *a2)
  {
    v26 = 0;
    do
    {
      v27 = v25[v26];
      if (a3)
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a3 + 24))(a3, v27, a1);
      while (1)
      {
        v27 = *(_QWORD *)(v27 + 8);
        if (!v27)
          break;
        if (!*(_BYTE *)(v27 + 32))
        {
LABEL_47:
          if (a3)
            (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a3 + 16))(a3, v27, a1);
          v37 = *(_QWORD *)(v27 + 24);
          v38 = __p[0];
          --*((_QWORD *)__p[0] + *(_QWORD *)(v37 + 40));
          if (!v38[*(_QWORD *)(v37 + 40)])
          {
            v40 = (char *)a2[1];
            v39 = (unint64_t)a2[2];
            if ((unint64_t)v40 >= v39)
            {
              v41 = (v40 - (_BYTE *)*a2) >> 3;
              if ((unint64_t)(v41 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v28 = v39 - (_QWORD)*a2;
              v29 = v28 >> 2;
              if (v28 >> 2 <= (unint64_t)(v41 + 1))
                v29 = v41 + 1;
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
                v30 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v30 = v29;
              if (v30)
                v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a2 + 2), v30);
              else
                v31 = 0;
              v32 = &v31[8 * v41];
              *(_QWORD *)v32 = v37;
              v33 = v32 + 8;
              v35 = (char *)*a2;
              v34 = (char *)a2[1];
              if (v34 != *a2)
              {
                do
                {
                  v36 = *((_QWORD *)v34 - 1);
                  v34 -= 8;
                  *((_QWORD *)v32 - 1) = v36;
                  v32 -= 8;
                }
                while (v34 != v35);
                v34 = (char *)*a2;
              }
              *a2 = v32;
              a2[1] = v33;
              a2[2] = &v31[8 * v30];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *(_QWORD *)v40 = v37;
              v33 = v40 + 8;
            }
            a2[1] = v33;
          }
          while (1)
          {
            v27 = *(_QWORD *)(v27 + 8);
            if (!v27)
              goto LABEL_54;
            if (!*(_BYTE *)(v27 + 32))
              goto LABEL_47;
          }
        }
      }
LABEL_54:
      ++v26;
      v25 = *a2;
    }
    while (v26 < ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2098AB81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TGraph::minimize(TGraph *this)
{
  _QWORD *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  TGraph *v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE *v17;
  uint64_t v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  TGraph::topologicalSort(this, (void **)&v16, 0);
  v2 = v16;
  v3 = v17;
  if (v17 == (_BYTE *)v16)
  {
    v2 = v17;
    if (!v17)
      return;
    goto LABEL_42;
  }
  v4 = 0;
  do
  {
    v5 = v2[v4];
    if (!*(_BYTE *)(v5 + 32))
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        while (*(_BYTE *)(v6 + 32))
        {
          v6 = *(_QWORD *)(v6 + 8);
          if (!v6)
            goto LABEL_40;
        }
LABEL_8:
        v7 = *(_DWORD *)(v6 + 48);
        if (v7 != 2 && v7 != 5)
        {
          v9 = v6;
          do
          {
            v9 = *(_QWORD *)(v9 + 8);
            if (!v9)
              goto LABEL_13;
          }
          while (*(_BYTE *)(v9 + 32));
          while (1)
          {
            v10 = *(_DWORD *)(v9 + 48);
            v11 = v10 == 2 || v10 == 5;
            if (!v11 && !wcscmp(**(const __int32 ***)(v6 + 56), **(const __int32 ***)(v9 + 56)))
            {
              v12 = *(_QWORD *)(v6 + 24);
              v13 = *(_QWORD *)(v9 + 24);
              if (v12 == v13)
              {
                *(_BYTE *)(v9 + 32) = 1;
              }
              else if (*(_QWORD *)(v12 + 16) == *(_QWORD *)(v13 + 16) && TVertex::getInEdgeCount((uint64_t **)v12) == 1)
              {
                v14 = (TGraph *)TVertex::getInEdgeCount((uint64_t **)v13);
                if (v14 == (TGraph *)1)
                {
                  v15 = *(_QWORD *)(v13 + 8);
                  if (v15)
                  {
                    while (*(_BYTE *)(v15 + 32))
                    {
                      v15 = *(_QWORD *)(v15 + 8);
                      if (!v15)
                        goto LABEL_33;
                    }
LABEL_35:
                    v14 = (TGraph *)TGraph::addEdge(this, *(_QWORD *)(v6 + 24), *(_QWORD **)(v15 + 24), v15 + 48);
                    while (1)
                    {
                      v15 = *(_QWORD *)(v15 + 8);
                      if (!v15)
                        break;
                      if (!*(_BYTE *)(v15 + 32))
                        goto LABEL_35;
                    }
                  }
LABEL_33:
                  TGraph::deleteVertex(v14, (TVertex *)v13);
                }
              }
            }
            do
            {
              v9 = *(_QWORD *)(v9 + 8);
              if (!v9)
                goto LABEL_13;
            }
            while (*(_BYTE *)(v9 + 32));
          }
        }
LABEL_13:
        while (1)
        {
          v6 = *(_QWORD *)(v6 + 8);
          if (!v6)
            break;
          if (!*(_BYTE *)(v6 + 32))
            goto LABEL_8;
        }
        v2 = v16;
        v3 = v17;
      }
    }
LABEL_40:
    ++v4;
  }
  while (v4 < (v3 - (_BYTE *)v2) >> 3);
  if (v2)
  {
LABEL_42:
    v17 = v2;
    operator delete(v2);
  }
}

void sub_2098ABA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        v10 = *a1 + 8 * (v4 >> 6);
        v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      v6 = v5 - 1;
    }
    v7 = v6 >> 6;
    if (v5 >= 0x41)
      v8 = v7;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *tknPrintString(const char *a1)
{
  const char *v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  char *v7;
  char v8;
  char *v9;
  int v10;

  v2 = s_pLogPartialLine;
  v3 = strlen(s_pLogPartialLine);
  v4 = strlen(a1) + v3 + 101;
  if (v4 <= s_nPartialLineAllocSize)
  {
    v6 = s_pLogPartialLine;
  }
  else
  {
    v5 = (v4 & 0xFFFFFC00) + 1024;
    s_pLogPartialLine = &s_pStaticLogPartialLine;
    s_nPartialLineAllocSize = 0x2000;
    v6 = (char *)operator new[]();
    s_pLogPartialLine = v6;
    s_nPartialLineAllocSize = v5;
    strcpy(v6, v2);
    if (v2 == &s_pStaticLogPartialLine)
    {
      s_pStaticLogPartialLine = 0;
    }
    else if (v2)
    {
      MEMORY[0x20BD14990](v2, 0x1000C8077774924);
      v6 = s_pLogPartialLine;
    }
  }
  v7 = &v6[strlen(v6)];
  v8 = *a1;
  if (*a1)
  {
    do
    {
      if ((s_bJustPrintedNewLine & 1) == 0)
      {
        v9 = strcpy(v7, gpLogLinePrefix);
        v7 += strlen(v9);
        s_bJustPrintedNewLine = 1;
        v8 = *a1;
      }
      *v7++ = v8;
      if (*a1 == 10)
      {
        *v7 = 0;
        tknLogString((uint64_t)s_pLogPartialLine);
        v7 = s_pLogPartialLine;
        s_bJustPrintedNewLine = 0;
        v6 = s_pLogPartialLine;
      }
      v10 = *(unsigned __int8 *)++a1;
      v8 = v10;
    }
    while (v10);
  }
  *v7 = 0;
  return memmove(s_pLogPartialLine, v6, v7 - v6 + 1);
}

void *tknPrintf(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const char *v5;
  char __str[8192];
  uint64_t v8;
  va_list va;

  va_start(va, a5);
  v5 = (const char *)MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v8 = *MEMORY[0x24BDAC8D0];
  __str[0] = 0;
  vsnprintf(__str, 0x1FFEuLL, v5, va);
  return tknPrintString(__str);
}

void *loggableUnicode@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v4;
  void *result;
  TLocaleInfo *v6;
  char v7;
  char *__s;
  __int128 v9;
  _BYTE v10[256];
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  __s = v10;
  v9 = xmmword_209A57DD0;
  v11 = 1;
  {
    v6 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v6);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v6;
  }
  TLocaleInfo::unicodeToMultiByte(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a1, (uint64_t)&__s);
  if (*((_QWORD *)&v9 + 1) >= (unint64_t)v9)
  {
    if (v11)
    {
      v7 = 0;
      TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v9 + 1), &v7, 1uLL);
      --*((_QWORD *)&v9 + 1);
    }
    else if ((_QWORD)v9)
    {
      __s[(_QWORD)v9 - 1] = 0;
    }
  }
  else
  {
    __s[*((_QWORD *)&v9 + 1)] = 0;
  }
  result = std::string::basic_string[abi:ne180100]<0>(a2, __s);
  if (v11)
  {
    result = __s;
    if (__s != v10)
    {
      if (__s)
        return (void *)MEMORY[0x20BD149A8]();
    }
  }
  return result;
}

void sub_2098ABE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  uint64_t v46;

  MEMORY[0x20BD149A8](v45, 0x1070C40ADD13FEBLL);
  if (a45)
  {
    if (a10 != v46 && a10 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

_QWORD *operator<<(_QWORD *a1, unsigned int *a2)
{
  unsigned __int8 v4;
  size_t v5;
  TLocaleInfo *v7;
  char v8;
  char *__s;
  __int128 v10;
  _BYTE v11[256];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  __s = v11;
  v10 = xmmword_209A57DD0;
  v12 = 1;
  {
    v7 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v7);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v7;
  }
  TLocaleInfo::unicodeToMultiByte(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, (uint64_t)&__s);
  if (*((_QWORD *)&v10 + 1) >= (unint64_t)v10)
  {
    if (v12)
    {
      v8 = 0;
      TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v10 + 1), &v8, 1uLL);
      --*((_QWORD *)&v10 + 1);
    }
    else if ((_QWORD)v10)
    {
      __s[(_QWORD)v10 - 1] = 0;
    }
  }
  else
  {
    __s[*((_QWORD *)&v10 + 1)] = 0;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v5);
  if (v12 && __s != v11 && __s)
    MEMORY[0x20BD149A8]();
  return a1;
}

void sub_2098AC03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  uint64_t v46;

  MEMORY[0x20BD149A8](v45, 0x1070C40ADD13FEBLL);
  if (a45)
  {
    if (a10 != v46 && a10 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t StartupLatticeNBestParamSpecMgr(void)
{
  uint64_t *v0;

  v0 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v0, (uint64_t)"LatticeNBestListMaxLength", (uint64_t)&byte_209A88803, (uint64_t)&byte_209A88803, (uint64_t)&sLatticeNBestListMaxLengthIntHistory);
  ParamSpecMgr::addParam(qword_253DF2840, (ParamSpec *)v0);
  return ParamSpecMgr::sortParams((ParamSpecMgr *)qword_253DF2840);
}

uint64_t LatticeNBestParamSet::LatticeNBestParamSet(uint64_t a1, const char *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = a4;
  *(_DWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)a1 = &off_24C216FA0;
  *(_DWORD *)(a1 + 40) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2840, 1, 0, 0, v9, v10, v11, v12);
  return a1;
}

void sub_2098AC194(_Unwind_Exception *a1)
{
  _QWORD *v1;
  DgnString *v2;
  uint64_t v3;

  *v1 = v3;
  DgnString::~DgnString(v2);
  _Unwind_Resume(a1);
}

uint64_t LatticeNBestParamSet::LatticeNBestParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  *(_QWORD *)a1 = &unk_24C213F40;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)a1 = &off_24C216FA0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t LatticeNBestParamSet::setDefaults(LatticeNBestParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_253DF2840, 1, 0, 0, a5, a6, a7, a8);
  *((_DWORD *)this + 10) = result;
  return result;
}

uint64_t LatticeNBestParamSet::sizeObject(uint64_t a1, int a2)
{
  _BOOL4 v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2 != 3;
  v3 = sizeObject(a1 + 8);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 0;
  else
    v4 = 4 * v2;
  return v3 + 16 * v2 + v4;
}

uint64_t LatticeNBestParamSet::getBoolParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 1)
    throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
  else
    throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t LatticeNBestParamSet::getIntParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  const void *ParamByParamId;
  const void *v10;
  const void *v11;

  if (a2 == 1)
  {
    switch((int)a3)
    {
      case 0:
        result = *(unsigned int *)(a1 + 40);
        break;
      case 1:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2840, 1, a3, a4, a5, a6, a7, a8);
        break;
      case 2:
        v10 = (const void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2840, 1, a3, a4, a5, a6, a7, a8);
        break;
      case 3:
        v11 = (const void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2840, 1, a3, a4, a5, a6, a7, a8);
        break;
      default:
        throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
        return 0;
    }
  }
  else
  {
    throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
    return 0;
  }
  return result;
}

double LatticeNBestParamSet::getDoubleParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 1)
    throwWrongTypeForParamId(1, "int", "double", a4, a5, a6, a7, a8);
  else
    throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
  return 0.0;
}

uint64_t LatticeNBestParamSet::getStringParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 1)
    throwWrongTypeForParamId(1, "int", "string", a4, a5, a6, a7, a8);
  else
    throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t LatticeNBestParamSet::getEnumParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 1)
    throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
  else
    throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
  return 0;
}

void LatticeNBestParamSet::setBoolParameter(LatticeNBestParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  if (a2 == 1)
    throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
  throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
}

void LatticeNBestParamSet::setIntParameter(LatticeNBestParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  void *ParamByParamId;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a2 == 1)
  {
    v8 = a3;
    ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_253DF2840, 1, a3, a4, a5, a6, a7, a8);
    if (ParamByParamId)
    IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v8, 0, 0, v11, v12, v13, v14);
    if (*((_DWORD *)this + 9))
      throwParamSetSetFailed("LatticeNBestListMaxLength", "int", v15, v16, v17, v18, v19, v20);
    else
      *((_DWORD *)this + 10) = v8;
  }
  else
  {
    throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
  }
}

void LatticeNBestParamSet::setDoubleParameter(LatticeNBestParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;

  v9 = a2;
  if (a2 == 1)
    throwWrongTypeForParamId(1, "int", "double", a5, a6, a7, a8, a9);
  throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
}

void LatticeNBestParamSet::setStringParameter(LatticeNBestParamSet *this, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  if (a2 == 1)
    throwWrongTypeForParamId(1, "int", "string", a4, a5, a6, a7, a8);
  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void LatticeNBestParamSet::setEnumParameter(LatticeNBestParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  if (a2 == 1)
    throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
  throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
}

void LatticeNBestParamSet::~LatticeNBestParamSet(LatticeNBestParamSet *this)
{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((LatticeNBestParamSet *)((char *)this + 8));
}

{
  *(_QWORD *)this = &unk_24C213F40;
  DgnString::~DgnString((LatticeNBestParamSet *)((char *)this + 8));
  JUMPOUT(0x20BD149A8);
}

void crashIntoDebugger(void)
{
  abort();
}

void assertFailed(const char *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  tknPrintf("Error: Assertion violation in file '%s', line %llu: %s\n", (uint64_t)a2, a3, a4, a5, a2, a3, a1);
  crashIntoDebugger();
}

const char *conditionalAssert(const char *result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (g_bCrashOnError)
    assertFailed(result, a2, a3, a4, a5);
  return result;
}

uint64_t getDirSep(void)
{
  return 47;
}

void getFilePath(char *__s@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v3;
  std::string v4;

  std::string::basic_string[abi:ne180100]<0>(&v4, __s);
  v3 = std::string::rfind(&v4, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v3 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, ".");
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::resize(&v4, v3, 0);
    *a2 = v4;
  }
}

void sub_2098AC814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *getWideNewLine(void)
{
  return "\n";
}

int wcsncasecmp(const __int32 *a1, const __int32 *a2, size_t n)
{
  size_t v3;
  __darwin_ct_rune_t v6;
  __darwin_ct_rune_t v7;
  __int32 v8;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  int v12;

  if (!n)
    return 0;
  v3 = n;
  while (1)
  {
    v7 = *a1++;
    v6 = v7;
    v8 = *a2;
    if (!v7 || v8 == 0)
      break;
    v10 = __tolower(v6);
    v11 = __tolower(*a2);
    if (v10 < v11)
      return -1;
    if (v10 > v11)
      return 1;
    ++a2;
    if (!--v3)
      return 0;
  }
  if (v6 | v8)
    v12 = -1;
  else
    v12 = 0;
  if (v6)
    return 1;
  else
    return v12;
}

void MrecInitModule_searchlm_kernel(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugSearchLM)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugSearchLM", &byte_209A88803, &byte_209A88803, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugSearchLM = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugSearchLM);
  }
}

uint64_t SearchLMScorer::SearchLMScorer(uint64_t a1, unsigned int a2, char a3, int a4, int a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD **v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  void *v26;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v11 = (_QWORD *)(a1 + 32);
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 50) = a2 < 4;
  *(_BYTE *)(a1 + 51) = a2 == 0;
  *(_WORD *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 54) = a3;
  *(_BYTE *)(a1 + 55) = a6;
  *(_QWORD *)(a1 + 56) = a7;
  *(_QWORD *)(a1 + 64) = a8;
  *(_QWORD *)(a1 + 72) = a9;
  *(_QWORD *)(a1 + 80) = a10;
  *(_DWORD *)(a1 + 88) = a2;
  *(_DWORD *)(a1 + 92) = a4;
  *(_DWORD *)(a1 + 96) = a5;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v12 = a1 + 152;
  *(_QWORD *)(a1 + 168) = 0xFFFF00000000;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v13 = a1 + 192;
  *(_QWORD *)(a1 + 200) = 0;
  v14 = *(unsigned int *)(*(_QWORD *)VocMgr::smpVocMgr + 8);
  if ((_DWORD)v14)
  {
    v26 = 0;
    v15 = realloc_array(0, &v26, v14, 0, 0, 1);
    v16 = v26;
    *(_QWORD *)(a1 + 16) = v26;
    *(_DWORD *)(a1 + 24) = v14;
    *(_DWORD *)(a1 + 28) = v15;
    bzero(v16, v14);
  }
  else
  {
    *(_DWORD *)(a1 + 24) = 0;
  }
  v17 = *(unsigned int *)(*(_QWORD *)VocMgr::smpVocMgr + 8);
  v18 = *(_DWORD *)(a1 + 44);
  if (v17 > v18)
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v11, v17 - v18, 0);
  v19 = *(unsigned int *)(a1 + 40);
  if (v19 <= v17)
  {
    if (v19 < v17)
    {
      do
        *(_QWORD *)(*v11 + 8 * v19++) = 0;
      while (v17 != v19);
    }
  }
  else
  {
    DgnIOwnArray<ParamSetBase *>::destructAt((uint64_t)v11, v17, v19 - v17);
  }
  *(_DWORD *)(a1 + 40) = v17;
  if ((int)v17 >= 1)
  {
    v20 = (_QWORD **)VocMgr::smpVocMgr;
    v21 = v17 + 1;
    do
    {
      v22 = *(_QWORD *)(**v20 + 8 * (unsigned __int16)(v21 - 2));
      if (v22)
      {
        *(_QWORD *)(*v11 + 8 * (v21 - 2)) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v22 + 72)
                                                                                              + 464))(*(_QWORD *)(v22 + 72));
        v20 = (_QWORD **)VocMgr::smpVocMgr;
      }
      --v21;
    }
    while (v21 > 1);
  }
  v23 = *(_DWORD *)(a1 + 164);
  if (v23 <= 7)
    DgnPrimArray<unsigned int>::reallocElts(v12, 8 - v23, 0);
  v24 = *(_DWORD *)(a1 + 204);
  if (v24 <= 7)
    DgnPrimArray<unsigned int>::reallocElts(v13, 8 - v24, 0);
  return a1;
}

{
  return SearchLMScorer::SearchLMScorer(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_2098ACB78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v6);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v5);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnIOwnArray<ParamSetBase *>::releaseAll(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void SearchLMScorer::~SearchLMScorer(SearchLMScorer *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)*((_QWORD *)this + 17);
  if (v2)
    MemChunkFree(v2, 0);
  *((_QWORD *)this + 17) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104);
  DgnIOwnArray<ParamSetBase *>::releaseAll((uint64_t)this + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this);
}

void SearchLMScorer::printSize(SearchLMScorer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  char *v229;
  int v230;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 126, (DgnString *)&v229);
  if (v230)
    v16 = v229;
  else
    v16 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_209A88803, a3, &byte_209A88803, v16);
  DgnString::~DgnString((DgnString *)&v229);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_209A88803);
  v21 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 16;
  v22 = *((unsigned int *)this + 2);
  v23 = *((_DWORD *)this + 3);
  v24 = (v21 | 2) + 2 * (v22 - 1);
  if ((int)v22 <= 0)
    v24 = v21;
  if (v23 >= v22)
    v25 = v24;
  else
    v25 = v21;
  if (v23 >= v22)
    v26 = v24 + 2 * (v23 - v22);
  else
    v26 = v21;
  if (v23 >= v22)
    v27 = 0;
  else
    v27 = 2 * v22;
  v28 = (a3 + 1);
  v228 = a3;
  v29 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 128, (DgnString *)&v229);
  if (v230)
    v34 = v229;
  else
    v34 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, v28, &byte_209A88803, v29, v29, v34, v26, v25, v27);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v26;
  *a5 += v25;
  *a6 += v27;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v35 = 12;
  else
    v35 = 16;
  v36 = *((_DWORD *)this + 6);
  v37 = *((_DWORD *)this + 7);
  v38 = v37 >= v36;
  v39 = v37 - v36;
  if (v38)
  {
    v41 = v36 & ~(v36 >> 31);
    v36 = 0;
    v40 = v35 + v41;
    v35 += v41 + v39;
  }
  else
  {
    v40 = v35;
  }
  v42 = v36;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 130, (DgnString *)&v229);
  if (v230)
    v47 = v229;
  else
    v47 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, v28, &byte_209A88803, v29, v29, v47, v35, v40, v42);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v35;
  *a5 += v40;
  *a6 += v42;
  v48 = sizeObject<LMContextData *>((uint64_t)this + 32, 0);
  v49 = sizeObject<LMContextData *>((uint64_t)this + 32, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 132, (DgnString *)&v229);
  if (v230)
    v54 = v229;
  else
    v54 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v28, &byte_209A88803, v29, v29, v54, v48, v49, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v48;
  *a5 += v49;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 134, (DgnString *)&v229);
  if (v230)
    v59 = v229;
  else
    v59 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v28, &byte_209A88803, v29, v29, v59, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 136, (DgnString *)&v229);
  if (v230)
    v64 = v229;
  else
    v64 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v28, &byte_209A88803, v29, v29, v64, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 137, (DgnString *)&v229);
  if (v230)
    v69 = v229;
  else
    v69 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v28, &byte_209A88803, v29, v29, v69, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 139, (DgnString *)&v229);
  if (v230)
    v74 = v229;
  else
    v74 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v28, &byte_209A88803, v29, v29, v74, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 141, (DgnString *)&v229);
  if (v230)
    v79 = v229;
  else
    v79 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v28, &byte_209A88803, v29, v29, v79, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 143, (DgnString *)&v229);
  if (v230)
    v84 = v229;
  else
    v84 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v28, &byte_209A88803, v29, v29, v84, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v85 = 4;
  else
    v85 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 145, (DgnString *)&v229);
  if (v230)
    v90 = v229;
  else
    v90 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, v28, &byte_209A88803, v29, v29, v90, v85, v85, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v85;
  *a5 += v85;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v91 = 4;
  else
    v91 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 147, (DgnString *)&v229);
  if (v230)
    v96 = v229;
  else
    v96 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v28, &byte_209A88803, v29, v29, v96, v91, v91, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v91;
  *a5 += v91;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v97 = 4;
  else
    v97 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 149, (DgnString *)&v229);
  if (v230)
    v102 = v229;
  else
    v102 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v28, &byte_209A88803, v29, v29, v102, v97, v97, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v97;
  *a5 += v97;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v103 = 4;
  else
    v103 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 151, (DgnString *)&v229);
  if (v230)
    v108 = v229;
  else
    v108 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v28, &byte_209A88803, v29, v29, v108, v103, v103, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v103;
  *a5 += v103;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 152, (DgnString *)&v229);
  if (v230)
    v113 = v229;
  else
    v113 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v28, &byte_209A88803, v29, v29, v113, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 154, (DgnString *)&v229);
  if (v230)
    v118 = v229;
  else
    v118 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v28, &byte_209A88803, v29, v29, v118, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 156, (DgnString *)&v229);
  if (v230)
    v123 = v229;
  else
    v123 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v28, &byte_209A88803, v29, v29, v123, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 158, (DgnString *)&v229);
  if (v230)
    v128 = v229;
  else
    v128 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v124, v125, v126, v127, v28, &byte_209A88803, v29, v29, v128, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 160, (DgnString *)&v229);
  if (v230)
    v133 = v229;
  else
    v133 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v129, v130, v131, v132, v28, &byte_209A88803, v29, v29, v133, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v134 = 12;
  else
    v134 = 16;
  v135 = *((unsigned int *)this + 28);
  v136 = *((_DWORD *)this + 29);
  if (v136 >= v135)
  {
    v137 = 0;
    if ((int)v135 > 0)
      v134 += 4 * (v135 - 1) + 4;
    v138 = v134 + 4 * (v136 - v135);
  }
  else
  {
    v137 = 4 * v135;
    v138 = v134;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 162, (DgnString *)&v229);
  if (v230)
    v143 = v229;
  else
    v143 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v139, v140, v141, v142, v28, &byte_209A88803, v29, v29, v143, v138, v134, v137);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v138;
  *a5 += v134;
  *a6 += v137;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v144 = 4;
  else
    v144 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 163, (DgnString *)&v229);
  if (v230)
    v149 = v229;
  else
    v149 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v28, &byte_209A88803, v29, v29, v149, v144, v144, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v144;
  *a5 += v144;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v150 = 4;
  else
    v150 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 164, (DgnString *)&v229);
  if (v230)
    v155 = v229;
  else
    v155 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v151, v152, v153, v154, v28, &byte_209A88803, v29, v29, v155, v150, v150, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v150;
  *a5 += v150;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v156 = 4;
  else
    v156 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 165, (DgnString *)&v229);
  if (v230)
    v161 = v229;
  else
    v161 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v157, v158, v159, v160, v28, &byte_209A88803, v29, v29, v161, v156, v156, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v156;
  *a5 += v156;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 166, (DgnString *)&v229);
  if (v230)
    v166 = v229;
  else
    v166 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v162, v163, v164, v165, v28, &byte_209A88803, v29, v29, v166, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v167 = 12;
  else
    v167 = 16;
  v168 = *((unsigned int *)this + 40);
  v169 = *((_DWORD *)this + 41);
  if (v169 >= v168)
  {
    v170 = 0;
    if ((int)v168 > 0)
      v167 += 4 * (v168 - 1) + 4;
    v171 = v167 + 4 * (v169 - v168);
  }
  else
  {
    v170 = 4 * v168;
    v171 = v167;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 168, (DgnString *)&v229);
  if (v230)
    v176 = v229;
  else
    v176 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v172, v173, v174, v175, v28, &byte_209A88803, v29, v29, v176, v171, v167, v170);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v171;
  *a5 += v167;
  *a6 += v170;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 170, (DgnString *)&v229);
  if (v230)
    v181 = v229;
  else
    v181 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v177, v178, v179, v180, v28, &byte_209A88803, v29, v29, v181, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 172, (DgnString *)&v229);
  if (v230)
    v186 = v229;
  else
    v186 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v182, v183, v184, v185, v28, &byte_209A88803, v29, v29, v186, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 174, (DgnString *)&v229);
  if (v230)
    v191 = v229;
  else
    v191 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v187, v188, v189, v190, v28, &byte_209A88803, v29, v29, v191, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 176, (DgnString *)&v229);
  if (v230)
    v196 = v229;
  else
    v196 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v192, v193, v194, v195, v28, &byte_209A88803, v29, v29, v196, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 178, (DgnString *)&v229);
  if (v230)
    v201 = v229;
  else
    v201 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v197, v198, v199, v200, v28, &byte_209A88803, v29, v29, v201, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v202 = 4;
  else
    v202 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 179, (DgnString *)&v229);
  if (v230)
    v207 = v229;
  else
    v207 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v203, v204, v205, v206, v28, &byte_209A88803, v29, v29, v207, v202, v202, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v202;
  *a5 += v202;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 181, (DgnString *)&v229);
  if (v230)
    v212 = v229;
  else
    v212 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v208, v209, v210, v211, v28, &byte_209A88803, v29, v29, v212, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v213 = 12;
  else
    v213 = 16;
  v214 = *((unsigned int *)this + 50);
  v215 = *((_DWORD *)this + 51);
  if (v215 >= v214)
  {
    v216 = 0;
    if ((int)v214 > 0)
      v213 += 4 * (v214 - 1) + 4;
    v217 = v213 + 4 * (v215 - v214);
  }
  else
  {
    v216 = 4 * v214;
    v217 = v213;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 183, (DgnString *)&v229);
  if (v230)
    v222 = v229;
  else
    v222 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v218, v219, v220, v221, v28, &byte_209A88803, v29, v29, v222, v217, v213, v216);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v217;
  *a5 += v213;
  *a6 += v216;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 184, (DgnString *)&v229);
  if (v230)
    v227 = v229;
  else
    v227 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v223, v224, v225, v226, v228, &byte_209A88803, (35 - v228), (35 - v228), v227, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v229);
}

void sub_2098ADC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<LMContextData *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if ((_DWORD)a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if ((_DWORD)a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!(_DWORD)a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

void SearchLMScorer::endSearchLMScorerSyncRecog(SearchLMScorer *this)
{
  unint64_t v2;
  _QWORD **v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  if (*((_DWORD *)this + 22) != 6)
  {
    if (*((_DWORD *)this + 2))
    {
      v2 = 0;
      v3 = (_QWORD **)VocMgr::smpVocMgr;
      do
      {
        v4 = *(unsigned __int16 *)(*(_QWORD *)this + 2 * v2);
        v5 = *(_QWORD *)(*(_QWORD *)(**v3 + 8 * v4) + 72);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 424))(v5, *((unsigned __int8 *)this + 48), *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v4));
        ++v2;
      }
      while (v2 < *((unsigned int *)this + 2));
    }
    *((_DWORD *)this + 2) = 0;
    v6 = *((unsigned int *)this + 6);
    if ((_DWORD)v6)
      bzero(*((void **)this + 2), v6);
    *((_BYTE *)this + 49) = 0;
  }
}

uint64_t SearchLMScorer::beginSearchLMScorerLMRescoring(uint64_t this, char a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  if (*(_DWORD *)(this + 8))
  {
    v4 = 0;
    v5 = (_QWORD **)VocMgr::smpVocMgr;
    do
    {
      v6 = *(unsigned __int16 *)(*(_QWORD *)v3 + 2 * v4);
      v7 = *(_QWORD *)(*(_QWORD *)(**v5 + 8 * v6) + 72);
      this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 416))(v7, *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * v6));
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 8));
  }
  *(_BYTE *)(v3 + 52) = a2;
  *(_BYTE *)(v3 + 53) = 1;
  return this;
}

uint64_t SearchLMScorer::endSearchLMScorerLMRescoring(uint64_t this)
{
  *(_WORD *)(this + 52) = 0;
  return this;
}

_DWORD *SearchLMScorer::setInitialContext(_DWORD *result, uint64_t *a2)
{
  _DWORD *v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD **v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;

  if (result[22] != 6)
  {
    v3 = result;
    v4 = *((_DWORD *)a2 + 2);
    if (v4 >= 3)
      v5 = 3;
    else
      v5 = v4;
    v6 = (_DWORD **)(result + 26);
    v7 = result[29];
    if (v5 <= v7)
    {
      result[28] = v5;
      if (!(_DWORD)v5)
        return result;
    }
    else
    {
      result = (_DWORD *)DgnPrimArray<unsigned int>::reallocElts((uint64_t)(result + 26), v5 - v7, 0);
      v3[28] = v5;
    }
    v8 = *a2;
    v9 = *v6;
    v10 = -1;
    do
    {
      *v9++ = *(_DWORD *)(v8 + 4 * (v10 + *((_DWORD *)a2 + 2)));
      --v10;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t SearchLMScorer::lmScoreFinalSilenceWithoutActualLM(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;

  SearchLMScorer::setContext(a1, a2, a3, 0, 0, 0, 0, 0, 0xFAFFFFFC, 0xFAFFFFFC);
  result = 0;
  if (*(_DWORD *)(a1 + 88) != 6)
  {
    if (*(_DWORD *)(a1 + 160) && ((**(_DWORD **)(a1 + 152) >> 25) - 125) >= 2 && !*(_BYTE *)(a1 + 168))
      return 0;
    else
      return *(unsigned int *)(a1 + 96);
  }
  return result;
}

void SearchLMScorer::setContext(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, int a5, uint64_t a6, LMStats *a7, char a8, unsigned int a9, unsigned int a10)
{
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL isLMAllowedForState;
  BOOL isLeftWBAllowedForState;
  BOOL isRightWBAllowedForState;
  int WeightsForState;
  uint64_t v24;
  VocMgr *v25;
  int Root;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  VocMgr *v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  _BOOL4 v53;
  unint64_t v54;

  v17 = *(_QWORD *)(a1 + 120);
  if (v17)
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(v17 + 2216);
  if (*(_DWORD *)(a1 + 88) == 6)
    goto LABEL_74;
  *(_BYTE *)(a1 + 184) = a8;
  v18 = *(_QWORD *)(a1 + 128);
  v19 = *(_DWORD *)(v18 + 68);
  if ((v19 & 0xFFFFFFFD) != 0)
  {
    isLMAllowedForState = 1;
  }
  else
  {
    isLMAllowedForState = Constraint::isLMAllowedForState(v18, a3);
    v18 = *(_QWORD *)(a1 + 128);
    v19 = *(_DWORD *)(v18 + 68);
  }
  *(_BYTE *)(a1 + 169) = isLMAllowedForState;
  if ((v19 & 0xFFFFFFFD) != 0)
  {
    isLeftWBAllowedForState = 1;
  }
  else
  {
    isLeftWBAllowedForState = Constraint::isLeftWBAllowedForState(v18, a3);
    v18 = *(_QWORD *)(a1 + 128);
    v19 = *(_DWORD *)(v18 + 68);
  }
  *(_BYTE *)(a1 + 170) = isLeftWBAllowedForState;
  if ((v19 & 0xFFFFFFFD) != 0)
  {
    isRightWBAllowedForState = 1;
  }
  else
  {
    isRightWBAllowedForState = Constraint::isRightWBAllowedForState(v18, a3);
    v18 = *(_QWORD *)(a1 + 128);
    v19 = *(_DWORD *)(v18 + 68);
  }
  *(_BYTE *)(a1 + 171) = isRightWBAllowedForState;
  if ((v19 & 0xFFFFFFFD) != 0)
    WeightsForState = 0xFFFF;
  else
    WeightsForState = Constraint::getWeightsForState(v18, a3);
  *(_DWORD *)(a1 + 172) = WeightsForState;
  v24 = *a3;
  *(_BYTE *)(a1 + 168) = (_DWORD)v24 == -50331650;
  v25 = (VocMgr *)VocMgr::smpVocMgr;
  *(_DWORD *)(a1 + 160) = 0;
  if (*(_BYTE *)(a1 + 184))
  {
    Root = VocMgr::getRoot(v25, a9);
    v27 = *(_DWORD *)(a1 + 160);
    if (v27 == *(_DWORD *)(a1 + 164))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 152, 1, 1);
      v27 = *(_DWORD *)(a1 + 160);
    }
    v28 = *(_QWORD *)(a1 + 152);
    *(_DWORD *)(v28 + 4 * v27) = Root;
    v29 = *(_DWORD *)(a1 + 160) + 1;
    *(_DWORD *)(a1 + 160) = v29;
    if (!*(_BYTE *)(a1 + 50))
      goto LABEL_43;
    v30 = VocMgr::getRoot(v25, v24);
    v31 = *(_DWORD *)(a1 + 160);
    if (v31 == *(_DWORD *)(a1 + 164))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 152, 1, 1);
      v31 = *(_DWORD *)(a1 + 160);
    }
    v28 = *(_QWORD *)(a1 + 152);
    *(_DWORD *)(v28 + 4 * v31) = v30;
    v29 = *(_DWORD *)(a1 + 160) + 1;
    *(_DWORD *)(a1 + 160) = v29;
    if (!*(_BYTE *)(a1 + 52))
      goto LABEL_43;
    v32 = a3[5];
    if (v32 == -83886084)
      v33 = a3[4];
    else
      v33 = v32;
    goto LABEL_39;
  }
  v34 = VocMgr::getRoot(v25, v24);
  v35 = *(_DWORD *)(a1 + 160);
  if (v35 == *(_DWORD *)(a1 + 164))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 152, 1, 1);
    v35 = *(_DWORD *)(a1 + 160);
  }
  v28 = *(_QWORD *)(a1 + 152);
  *(_DWORD *)(v28 + 4 * v35) = v34;
  v29 = *(_DWORD *)(a1 + 160) + 1;
  *(_DWORD *)(a1 + 160) = v29;
  if (!*(_BYTE *)(a1 + 50))
    goto LABEL_43;
  v36 = a3[5];
  if ((_DWORD)v36 != -83886084)
  {
    v40 = VocMgr::getRoot(v25, v36);
    v41 = *(_DWORD *)(a1 + 160);
    if (v41 == *(_DWORD *)(a1 + 164))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 152, 1, 1);
      v41 = *(_DWORD *)(a1 + 160);
    }
    v28 = *(_QWORD *)(a1 + 152);
    *(_DWORD *)(v28 + 4 * v41) = v40;
    v29 = *(_DWORD *)(a1 + 160) + 1;
    *(_DWORD *)(a1 + 160) = v29;
    if (!*(_BYTE *)(a1 + 52))
      goto LABEL_43;
    v33 = a3[4];
LABEL_39:
    v39 = v25;
    goto LABEL_40;
  }
  v37 = VocMgr::getRoot(v25, a3[4]);
  v38 = *(_DWORD *)(a1 + 160);
  if (v38 == *(_DWORD *)(a1 + 164))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 152, 1, 1);
    v38 = *(_DWORD *)(a1 + 160);
  }
  v28 = *(_QWORD *)(a1 + 152);
  *(_DWORD *)(v28 + 4 * v38) = v37;
  v29 = *(_DWORD *)(a1 + 160) + 1;
  *(_DWORD *)(a1 + 160) = v29;
  if (!*(_BYTE *)(a1 + 52))
    goto LABEL_43;
  v33 = a10;
  if (a10 != -83886084)
    goto LABEL_39;
  v39 = v25;
  v33 = a2;
LABEL_40:
  v42 = VocMgr::getRoot(v39, v33);
  v43 = *(_DWORD *)(a1 + 160);
  if (v43 == *(_DWORD *)(a1 + 164))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 152, 1, 1);
    v43 = *(_DWORD *)(a1 + 160);
  }
  v28 = *(_QWORD *)(a1 + 152);
  *(_DWORD *)(v28 + 4 * v43) = v42;
  v29 = *(_DWORD *)(a1 + 160) + 1;
  *(_DWORD *)(a1 + 160) = v29;
LABEL_43:
  if (v29)
  {
    v44 = 0;
    while (1)
    {
      v45 = *(_DWORD *)(v28 + 4 * v44);
      if (v45 == -50331650)
        break;
      if (v45 == -83886084)
        goto LABEL_58;
      if (v29 == ++v44)
      {
        LODWORD(v44) = v29;
        goto LABEL_58;
      }
    }
    *(_DWORD *)(a1 + 160) = v44;
    v46 = *(_DWORD *)(a1 + 112);
    v47 = *(_DWORD *)(a1 + 164);
    if (v46 + (int)v44 > v47)
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 152, v46 - v47 + v44, 1);
      v46 = *(_DWORD *)(a1 + 112);
    }
    if (v46)
    {
      v48 = 0;
      v49 = *(_QWORD *)(a1 + 104);
      v50 = *(_QWORD *)(a1 + 152);
      do
      {
        *(_DWORD *)(v50 + 4 * (v48 + *(_DWORD *)(a1 + 160))) = *(_DWORD *)(v49 + 4 * v48);
        ++v48;
        v51 = *(unsigned int *)(a1 + 112);
      }
      while (v48 < v51);
    }
    else
    {
      LODWORD(v51) = 0;
    }
    LODWORD(v44) = *(_DWORD *)(a1 + 160) + v51;
  }
  else
  {
    LODWORD(v44) = 0;
  }
LABEL_58:
  if (*(_BYTE *)(a1 + 52))
  {
    if (v44 >= 3)
      v52 = 3;
    else
      v52 = v44;
  }
  else
  {
    v53 = v44 != 0;
    if (v44 >= 2)
      LODWORD(v44) = 2;
    if (*(_BYTE *)(a1 + 50))
      v52 = v44;
    else
      v52 = v53;
  }
  *(_DWORD *)(a1 + 160) = v52;
  if (a5)
  {
    *(_QWORD *)(a1 + 176) = a6;
    if (*(_DWORD *)(a1 + 8))
    {
      v54 = 0;
      do
        SearchLMScorer::setContext((SearchLMScorer *)a1, *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * v54++), 0, a7);
      while (v54 < *(unsigned int *)(a1 + 8));
    }
  }
  if (a4 && *(_BYTE *)(a1 + 50))
    SearchLMScorer::setLMStates((SearchLMScorer *)a1, a4);
LABEL_74:
  if (a5)
    *(_BYTE *)(a1 + 144) = 1;
}

uint64_t SearchLMScorer::lmScoreFinalSilence(SearchLMScorer *this, LMStats *a2)
{
  unint64_t v4;
  uint64_t v6;
  _BOOL8 v7;
  char v8;

  if (*((_DWORD *)this + 22) == 6)
    return 0;
  if (!*((_DWORD *)this + 40))
    return *((unsigned int *)this + 24);
  v4 = (unint64_t)**((unsigned int **)this + 19) >> 25;
  if ((v4 - 125) < 2 || *((_BYTE *)this + 168))
    return *((unsigned int *)this + 24);
  if (!*((_BYTE *)this + 169))
    return 0;
  if (!*(_BYTE *)(*((_QWORD *)this + 2) + v4))
    SearchLMScorer::activateVoc(this, **((_DWORD **)this + 19) >> 25, 0, a2);
  v6 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v4) + 72);
  v8 = 0;
  if (*((_BYTE *)this + 53))
    v7 = 1;
  else
    v7 = *((_BYTE *)this + 54) == 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, LMStats *, _QWORD, _BOOL8, char *))(*(_QWORD *)v6 + 512))(v6, 16777213, *((unsigned int *)this + 43), a2, *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v4), v7, &v8);
}

uint64_t SearchLMScorer::activateVoc(SearchLMScorer *this, unsigned int a2, unsigned int *a3, LMStats *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;

  v8 = a2;
  v9 = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * a2);
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v9 + 72) + 408))(*(_QWORD *)(v9 + 72), *((unsigned __int8 *)this + 48), *(_QWORD *)(*((_QWORD *)this + 4) + 8 * a2));
  if (*((_BYTE *)this + 144))
    result = SearchLMScorer::setContext(this, a2, a3, a4);
  v11 = *((_DWORD *)this + 2);
  if (v11 == *((_DWORD *)this + 3))
  {
    result = DgnPrimArray<short>::reallocElts((uint64_t)this, 1, 1);
    v11 = *((_DWORD *)this + 2);
  }
  *(_WORD *)(*(_QWORD *)this + 2 * v11) = a2;
  *((_DWORD *)this + 2) = v11 + 1;
  *(_BYTE *)(*((_QWORD *)this + 2) + v8) = 1;
  if (!*((_BYTE *)this + 49))
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 72) + 696))(*(_QWORD *)(v9 + 72));
    *((_BYTE *)this + 49) = result;
  }
  return result;
}

uint64_t SearchLMScorer::lmScoreNonAcousticWord(SearchLMScorer *this, unsigned int a2, uint64_t a3, LMStats *a4)
{
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  char v12;

  if (*((_DWORD *)this + 22) == 6)
    return 0;
  v9 = (unint64_t)a2 >> 25;
  if (!*(_BYTE *)(*((_QWORD *)this + 2) + v9))
    SearchLMScorer::activateVoc(this, a2 >> 25, 0, a4);
  v10 = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v9);
  v12 = 0;
  if (*((_BYTE *)this + 53))
    v11 = 1;
  else
    v11 = *((_BYTE *)this + 54) == 0;
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, LMStats *, _QWORD, _BOOL8, char *))(**(_QWORD **)(v10 + 72)
                                                                                               + 512))(*(_QWORD *)(v10 + 72), a2 & 0xFFFFFF, a3, a4, *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v9), v11, &v12);
}

uint64_t SearchLMScorer::lmScoreNonSilCwidac(uint64_t a1, unsigned int *a2, LMStats *a3)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  SearchLMScorer *v24;
  unint64_t v25;
  unsigned int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t WeightsForState;
  uint64_t v31;
  _BOOL8 v32;
  char v33;
  char v34;
  unsigned int v35;

  if (*(_DWORD *)(a1 + 88) == 6)
    return 0;
  v7 = *a2;
  v35 = a2[2];
  if (*(_DWORD *)(a1 + 160))
  {
    v8 = **(unsigned int **)(a1 + 152);
    v9 = v8 >> 25;
    v10 = v8 & 0xFFFFFF;
  }
  else
  {
    v10 = 0xFFFFFF;
    v9 = 125;
  }
  v11 = *(_QWORD *)(a1 + 80);
  v12 = !v11 || v10 >= *(_DWORD *)(v11 + 8) || ((*(_DWORD *)(*(_QWORD *)v11 + 4 * (v10 >> 5)) >> v10) & 1) == 0;
  v13 = *(_QWORD *)(a1 + 72);
  if (v13 && *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(v13, (int *)&v35))
  {
    v14 = *(_QWORD *)(a1 + 128);
    if ((*(_DWORD *)(v14 + 68) & 0xFFFFFFFD) == 0)
      v12 &= Constraint::isLeftWBAllowedForState(v14, a2);
  }
  else
  {
    v12 = 0;
  }
  v15 = *(_QWORD *)(a1 + 56);
  if (v15)
  {
    if (*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(v15, (int *)&v35))
    {
LABEL_17:
      LODWORD(v15) = 0;
      goto LABEL_18;
    }
    v15 = *(_QWORD *)(a1 + 64);
    if (v15)
    {
      if (*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(v15, (int *)&v35))
        goto LABEL_17;
      v19 = *(_QWORD *)(a1 + 128);
      if ((*(_DWORD *)(v19 + 68) & 0xFFFFFFFD) != 0)
        goto LABEL_19;
      LODWORD(v15) = Constraint::isLeftWBAllowedForState(v19, a2);
    }
  }
LABEL_18:
  if ((v12 | v15) == 1)
  {
LABEL_19:
    v16 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v9) + 72);
    v34 = 0;
    if (*(_BYTE *)(a1 + 53))
      v17 = 1;
    else
      v17 = *(_BYTE *)(a1 + 54) == 0;
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, LMStats *, _QWORD, _BOOL8, char *))(*(_QWORD *)v16 + 512))(v16, 16777213, *(unsigned int *)(a1 + 172), a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9), v17, &v34);
    goto LABEL_28;
  }
  v18 = 0;
LABEL_28:
  v20 = *(_QWORD *)(a1 + 128);
  if ((*(_DWORD *)(v20 + 68) & 0xFFFFFFFD) != 0 || Constraint::isLMAllowedForState(v20, a2))
  {
    v21 = v7 >> 25;
    v22 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + (v7 >> 25)))
    {
      if (v22 && !*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(v22, (int *)&v35))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v21) + 72);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 480))(v23, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v21));
        SearchLMScorer::setContext((SearchLMScorer *)a1, v7 >> 25, &v35, a3);
      }
    }
    else
    {
      if (v22 && !*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(v22, (int *)&v35))
      {
        v26 = &v35;
        v24 = (SearchLMScorer *)a1;
        v25 = v7 >> 25;
      }
      else
      {
        v24 = (SearchLMScorer *)a1;
        v25 = v7 >> 25;
        v26 = 0;
      }
      SearchLMScorer::activateVoc(v24, v25, v26, a3);
    }
    v28 = v7 & 0xFFFFFF;
    v29 = *(_QWORD *)(a1 + 128);
    if ((*(_DWORD *)(v29 + 68) & 0xFFFFFFFD) != 0)
      WeightsForState = 0xFFFFLL;
    else
      WeightsForState = Constraint::getWeightsForState(v29, a2);
    v31 = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v21);
    v33 = 0;
    if (*(_BYTE *)(a1 + 53))
      v32 = 1;
    else
      v32 = *(_BYTE *)(a1 + 54) == 0;
    v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, LMStats *, _QWORD, _BOOL8, char *))(**(_QWORD **)(v31 + 72)
                                                                                                 + 512))(*(_QWORD *)(v31 + 72), v28, WeightsForState, a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v21), v32, &v33);
  }
  else
  {
    v27 = *(_DWORD *)(a1 + 92);
  }
  return (v27 + v18);
}

uint64_t SearchLMScorer::setContext(SearchLMScorer *this, unsigned int a2, unsigned int *a3, LMStats *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  SearchLMScorer::makeRestrictedContext(this, a2, a3);
  v8 = *((_QWORD *)this + 22);
  if (v8 && *(_DWORD *)(v8 + 8))
    v9 = *(_QWORD *)v8 + 16 * a2;
  else
    v9 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * a2) + 72);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, LMStats *, _QWORD, _QWORD))(*(_QWORD *)v7 + 472))(v7, (char *)this + 192, v9, a4, *((_QWORD *)this + 17), *(_QWORD *)(*((_QWORD *)this + 4) + 8 * a2));
}

void SearchLMScorer::makeRestrictedContext(SearchLMScorer *this, int a2, unsigned int *a3)
{
  int v6;
  unsigned int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t **Bucket;

  v6 = *((_DWORD *)this + 22);
  if ((v6 - 1) >= 3)
  {
    if (v6)
    {
      if (v6 != 4)
      {
        *((_DWORD *)this + 50) = 0;
        return;
      }
      v7 = *((_DWORD *)this + 40) != 0;
    }
    else
    {
      v7 = *((_DWORD *)this + 40);
    }
  }
  else if (*((_DWORD *)this + 40) >= 2u)
  {
    v7 = 2;
  }
  else
  {
    v7 = *((_DWORD *)this + 40);
  }
  v8 = (char *)this + 192;
  v9 = *((_DWORD *)this + 51);
  if (v7 <= v9)
  {
    *((_DWORD *)this + 50) = v7;
    if (!v7)
      return;
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 192, v7 - v9, 0);
    *((_DWORD *)this + 50) = v7;
  }
  if (a3 && *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(*((_QWORD *)this + 8), (int *)a3))
  {
    **(_DWORD **)v8 = 16777214;
    LODWORD(v10) = 1;
  }
  else if (*((_BYTE *)this + 169))
  {
    v10 = 0;
    while (1)
    {
      v11 = *(_DWORD *)(*((_QWORD *)this + 19) + 4 * v10);
      if (a3)
      {
        Bucket = HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(*((_QWORD *)this + 7), (int *)a3);
        if (v10 == 1 && !*Bucket && *((_BYTE *)this + 170))
          break;
      }
      if (v11 >> 25 != a2 && (v11 >> 25) - 127 < 0xFFFFFFFE)
        goto LABEL_31;
      *(_DWORD *)(*(_QWORD *)v8 + 4 * v10++) = v11 & 0xFFFFFF;
      if (v7 == v10)
        return;
    }
    *(_DWORD *)(*(_QWORD *)v8 + 4) = 16777214;
    LODWORD(v10) = 2;
  }
  else
  {
    LODWORD(v10) = 0;
  }
LABEL_31:
  if (v10 < v7)
    memset_pattern16((void *)(*(_QWORD *)v8 + 4 * v10), &unk_209A6F790, 4 * (v7 + ~(_DWORD)v10) + 4);
}

void SearchLMScorer::setEmptyLMStates(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int32x2_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *((unsigned int *)a2 + 2);
  if ((int)v2 >= 1)
  {
    v3 = *a2;
    v4 = vdup_n_s32(0xFAFFFFFC);
    do
    {
      v5 = *(unsigned int *)(v3 + 16 * (v2 - 1) + 8);
      if ((int)v5 >= 1)
      {
        v6 = *(_QWORD *)(v3 + 16 * (v2 - 1));
        v7 = v5 + 1;
        do
          *(int32x2_t *)(v6 + 44 * (v7-- - 2) + 16) = v4;
        while (v7 > 1);
      }
    }
    while (v2-- > 1);
  }
}

void SearchLMScorer::setLMStates(SearchLMScorer *this, uint64_t a2)
{
  SearchLMScorer *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  VocMgr *v28;
  unsigned int v29;
  char v30;
  unsigned int Root;

  if (!*((_DWORD *)this + 40)
    || (v3 = this, v4 = **((_DWORD **)this + 19) >> 25, v4 == 125)
    || !*((_BYTE *)this + 169)
    || (SearchLMScorer::makeRestrictedContext(this, v4, 0), !*((_DWORD *)v3 + 50))
    || (v5 = **((_DWORD **)v3 + 24), v5 == 0xFFFFFF)
    || (v28 = (VocMgr *)VocMgr::smpVocMgr, v5 <= 0xFFFFF3)
    && (v6 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                   + (((unint64_t)**((unsigned int **)v3 + 19) >> 22) & 0x3F8))
                       + 72),
        this = (SearchLMScorer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 440))(v6),
        (this & 1) == 0)
    && !*((_BYTE *)v3 + 55))
  {
    SearchLMScorer::setEmptyLMStates((uint64_t)this, (uint64_t *)a2);
    return;
  }
  Root = -50331650;
  if (**((_DWORD **)v3 + 24) != 16777214)
    Root = VocMgr::getRoot(v28, **((unsigned int **)v3 + 19));
  v29 = -83886084;
  if (*((_BYTE *)v3 + 184))
  {
    v29 = -50331650;
    if (*(_DWORD *)(*((_QWORD *)v3 + 24) + 4) != 16777214)
      v29 = VocMgr::getRoot(v28, *(unsigned int *)(*((_QWORD *)v3 + 19) + 4));
  }
  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = Root >> 25;
    v30 = 0;
    v10 = 127;
    v11 = vdup_n_s32(0xFAFFFFFC);
    v27 = a2;
    do
    {
      v12 = *(_QWORD *)a2 + 16 * v8;
      if (!*(_DWORD *)(v12 + 8))
        goto LABEL_61;
      v13 = 0;
      v14 = 0;
      v15 = *(_QWORD *)v12;
      do
      {
        v16 = (unsigned int *)(v15 + v13);
        v17 = *(unsigned int *)(v15 + v13);
        v18 = v17 >> 25;
        v19 = *((_QWORD *)v3 + 16);
        v20 = *(_DWORD *)(v19 + 68) & 0xFFFFFFFD;
        if (*((_BYTE *)v3 + 184))
        {
          if (!v20 && !Constraint::isLMAllowedForState(v19, v16)
            || v17 >> 27 == 31
            || (_DWORD)v18 != (_DWORD)v9)
          {
            v15 = *(_QWORD *)v12;
            *(int32x2_t *)(*(_QWORD *)v12 + v13 + 16) = v11;
            goto LABEL_57;
          }
          if ((_DWORD)v9 == v29 >> 25)
          {
LABEL_28:
            v21 = v29;
            v18 = v10;
LABEL_55:
            v15 = *(_QWORD *)v12;
            v25 = *(_QWORD *)v12 + v13;
            *(_DWORD *)(v25 + 16) = v21;
            v26 = Root;
            goto LABEL_56;
          }
          if (*(_DWORD *)(*((_QWORD *)v3 + 24) + 4) == 16777214)
          {
            if ((_DWORD)v9 == (_DWORD)v10)
            {
              if ((v30 & 1) != 0)
              {
                v30 = 1;
                goto LABEL_28;
              }
              v30 = 0;
              goto LABEL_53;
            }
            v24 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v28 + 8 * v9) + 72);
            if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 440))(v24, 16777214) & 1) != 0
              || *((_BYTE *)v3 + 55))
            {
              v30 = 1;
              v21 = v29;
              goto LABEL_55;
            }
            v30 = 0;
          }
          else
          {
LABEL_53:
            v18 = v10;
          }
          v21 = -83886084;
          goto LABEL_55;
        }
        if (!v20 && !Constraint::isLMAllowedForState(v19, v16) || v17 >> 27 == 31)
          goto LABEL_49;
        if ((_DWORD)v18 == (_DWORD)v9)
          goto LABEL_33;
        if (**((_DWORD **)v3 + 24) != 16777214)
          goto LABEL_49;
        if ((_DWORD)v18 == (_DWORD)v10)
        {
          if ((v30 & 1) == 0)
          {
            v30 = 0;
LABEL_49:
            v18 = v10;
LABEL_50:
            v22 = -83886084;
            goto LABEL_51;
          }
          v30 = 1;
LABEL_33:
          v22 = Root;
          v18 = v10;
          goto LABEL_51;
        }
        v23 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v28 + 8 * v18) + 72);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 440))(v23, 16777214) & 1) == 0
          && !*((_BYTE *)v3 + 55))
        {
          v30 = 0;
          goto LABEL_50;
        }
        v30 = 1;
        v22 = Root;
LABEL_51:
        v15 = *(_QWORD *)v12;
        v25 = *(_QWORD *)v12 + v13;
        *(_DWORD *)(v25 + 16) = v22;
        v26 = -83886084;
LABEL_56:
        *(_DWORD *)(v25 + 20) = v26;
        v10 = v18;
LABEL_57:
        ++v14;
        v13 += 44;
      }
      while (v14 < *(unsigned int *)(v12 + 8));
      a2 = v27;
      v7 = *(unsigned int *)(v27 + 8);
LABEL_61:
      ++v8;
    }
    while (v8 < v7);
  }
}

uint64_t SearchLMScorer::setRecognizer(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 120) = a2;
  return result;
}

uint64_t SearchLMScorer::unsetContext(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  if (*(_DWORD *)(this + 88) != 6 && *(_DWORD *)(this + 8))
  {
    v2 = 0;
    do
    {
      v3 = *(unsigned __int16 *)(*(_QWORD *)v1 + 2 * v2);
      v4 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * v3) + 72);
      this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 480))(v4, *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * v3));
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 8));
  }
  *(_QWORD *)(v1 + 176) = 0;
  *(_BYTE *)(v1 + 144) = 0;
  return this;
}

void BitArray::setSize(BitArray *this, unsigned int a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;

  v4 = *((_DWORD *)this + 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if ((_DWORD)v6 != 0 && v5)
  {
    BitArray::reallocElts(this, v6, 0);
  }
  else
  {
    v7 = *((_DWORD *)this + 2);
    if (v7 > a2)
      BitArray::clearRange(this, a2, v7);
  }
  *((_DWORD *)this + 2) = a2;
}

void BitArray::BitArray(BitArray *this, unsigned int a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  BitArray::setSize(this, a2);
}

int **BitArray::copy(int **result, int **a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;

  if (result != a2)
  {
    v3 = a3 & 0xFFFFFFE0;
    if (a3 >= 0x20)
    {
      v4 = a3 >> 5;
      v5 = *a2;
      v6 = *result;
      do
      {
        v7 = *v5++;
        *v6++ = v7;
        --v4;
      }
      while (v4);
    }
    if (v3 < a3)
    {
      v8 = *a2;
      do
      {
        v9 = v3 >> 5;
        v10 = 1 << v3;
        if ((v8[v9] & (1 << v3)) != 0)
          v11 = (*result)[v9] | v10;
        else
          v11 = (*result)[v9] & ~v10;
        (*result)[v9] = v11;
        ++v3;
      }
      while (a3 != v3);
    }
  }
  return result;
}

void BitArray::BitArray(BitArray *this, const BitArray *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  BitArray::setSize(this, *((_DWORD *)a2 + 2));
  BitArray::copy((int **)this, (int **)a2, *((_DWORD *)this + 2));
}

int **BitArray::operator=(int **this, uint64_t a2)
{
  unsigned int *v3;
  int *v4;

  if (this != (int **)a2)
  {
    v3 = (unsigned int *)this;
    if (*((_DWORD *)this + 2) <= *((_DWORD *)this + 3))
    {
      v4 = *this;
      if (*(_QWORD *)v3)
        MemChunkFree(v4, 0);
    }
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    BitArray::setSize((BitArray *)v3, *(_DWORD *)(a2 + 8));
    return BitArray::copy((int **)v3, (int **)a2, v3[2]);
  }
  return this;
}

uint64_t BitArray::releaseAll(uint64_t this)
{
  _QWORD *v1;

  v1 = (_QWORD *)this;
  if (*(_DWORD *)(this + 8) <= *(_DWORD *)(this + 12))
  {
    this = *(_QWORD *)this;
    if (*v1)
      this = MemChunkFree((_QWORD *)this, 0);
  }
  *v1 = 0;
  v1[1] = 0;
  return this;
}

void BitArray::~BitArray(BitArray *this)
{
  _QWORD *v2;

  if (*((_DWORD *)this + 2) <= *((_DWORD *)this + 3))
  {
    v2 = *(_QWORD **)this;
    if (*(_QWORD *)this)
      MemChunkFree(v2, 0);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

void BitArray::reallocElts(BitArray *this, uint64_t a2, int a3)
{
  int v3;
  unsigned int v5;
  unsigned int v6;
  char *v7;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *((_DWORD *)this + 3));
  v5 = *((_DWORD *)this + 3) + 31;
  v8 = 0;
  v6 = realloc_array(*(_QWORD **)this, &v8, ((v5 + v3) >> 3) & 0x1FFFFFFC, 4 * (v5 >> 5), 4 * (v5 >> 5), 1);
  *((_DWORD *)this + 3) = (8 * v6) & 0xFFFFFFE0;
  v7 = (char *)v8;
  *(_QWORD *)this = v8;
  bzero(&v7[4 * (v5 >> 5)], 4 * (((v6 >> 2) & 0x7FFFFFF) - (v5 >> 5)));
}

void BitArray::compact(BitArray *this)
{
  int v1;
  int v2;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  _QWORD *v7;
  void *v8;

  v1 = *((_DWORD *)this + 2);
  v2 = *((_DWORD *)this + 3);
  if (v1 != v2)
  {
    if (v1)
    {
      v4 = (v1 + 31) >> 5;
      v8 = 0;
      v5 = realloc_array(*(_QWORD **)this, &v8, 4 * v4, 4 * v4, ((v2 + 31) >> 3) & 0x1FFFFFFC, 0);
      *((_DWORD *)this + 3) = (8 * v5) & 0xFFFFFFE0;
      v6 = (char *)v8;
      *(_QWORD *)this = v8;
      bzero(&v6[4 * v4], 4 * (((v5 >> 2) & 0x7FFFFFF) - v4));
    }
    else
    {
      v7 = *(_QWORD **)this;
      if (*(_QWORD *)this)
        MemChunkFree(v7, 0);
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
    }
  }
}

void BitArray::clearRange(BitArray *this, unsigned int a2, unsigned int a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  if (a2 != a3)
  {
    v5 = a2 + 31;
    v6 = a3 - 1;
    v7 = (a3 - 1) >> 5;
    if (v7 >= (a2 + 31) >> 5)
    {
      v9 = v5 >> 5;
      v10 = v5 & 0xFFFFFFE0;
      if (v10 > a2)
      {
        v11 = *(_QWORD *)this;
        do
        {
          *(_DWORD *)(v11 + 4 * (a2 >> 5)) &= ~(1 << a2);
          ++a2;
        }
        while (v10 != a2);
      }
      v12 = v7 >= v9;
      v13 = v7 - v9;
      if (v13 != 0 && v12)
        bzero((void *)(*(_QWORD *)this + 4 * v9), 4 * v13);
      if (a3)
      {
        v14 = v6 & 0xFFFFFFE0;
        v15 = *(_QWORD *)this;
        do
        {
          *(_DWORD *)(v15 + 4 * (v14 >> 5)) &= ~(1 << v14);
          ++v14;
        }
        while (v14 < a3);
      }
    }
    else if (a2 < a3)
    {
      v8 = *(_QWORD *)this;
      do
      {
        *(_DWORD *)(v8 + 4 * (a2 >> 5)) &= ~(1 << a2);
        ++a2;
      }
      while (a3 != a2);
    }
  }
}

void BitArray::setSizeNoGrow(BitArray *this, unsigned int a2)
{
  unsigned int v4;

  v4 = *((_DWORD *)this + 2);
  if (v4 > a2)
    BitArray::clearRange(this, a2, v4);
  *((_DWORD *)this + 2) = a2;
}

void BitArray::addSize(BitArray *this, int a2)
{
  unsigned int v4;
  unsigned int v5;

  v4 = *((_DWORD *)this + 3);
  v5 = *((_DWORD *)this + 2) + a2;
  if (v5 > v4)
  {
    BitArray::reallocElts(this, v5 - v4, 1);
    v5 = *((_DWORD *)this + 2) + a2;
  }
  BitArray::setSize(this, v5);
}

void BitArray::preAllocate(BitArray *this, unsigned int a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v2 = *((_DWORD *)this + 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if ((_DWORD)v4 != 0 && v3)
    BitArray::reallocElts(this, v4, 0);
}

_DWORD **BitArray::inplaceOrSameSize(_DWORD **this, const BitArray *a2)
{
  unsigned int v2;
  uint64_t v3;
  int *v4;
  _DWORD *v5;
  int v6;

  v2 = *((_DWORD *)a2 + 2) + 31;
  if (v2 >= 0x20)
  {
    v3 = v2 >> 5;
    v4 = *(int **)a2;
    v5 = *this;
    do
    {
      v6 = *v4++;
      *v5++ |= v6;
      --v3;
    }
    while (v3);
  }
  return this;
}

_DWORD **BitArray::inplaceAndSameSize(_DWORD **this, const BitArray *a2)
{
  unsigned int v2;
  uint64_t v3;
  int *v4;
  _DWORD *v5;
  int v6;

  v2 = *((_DWORD *)a2 + 2) + 31;
  if (v2 >= 0x20)
  {
    v3 = v2 >> 5;
    v4 = *(int **)a2;
    v5 = *this;
    do
    {
      v6 = *v4++;
      *v5++ &= v6;
      --v3;
    }
    while (v3);
  }
  return this;
}

uint64_t *BitArray::setRange(uint64_t *this, unsigned int a2, unsigned int a3)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  if (a2 != a3)
  {
    v4 = this;
    v5 = a2 + 31;
    v6 = a3 - 1;
    v7 = (a3 - 1) >> 5;
    if (v7 >= (a2 + 31) >> 5)
    {
      v9 = v5 >> 5;
      v10 = v5 & 0xFFFFFFE0;
      if (v10 > a2)
      {
        v11 = *this;
        do
        {
          *(_DWORD *)(v11 + 4 * (a2 >> 5)) &= ~(1 << a2);
          ++a2;
        }
        while (v10 != a2);
      }
      v12 = v7 >= v9;
      v13 = v7 - v9;
      if (v13 != 0 && v12)
        this = (uint64_t *)memset((void *)(*this + 4 * v9), 255, 4 * v13);
      if (a3)
      {
        v14 = v6 & 0xFFFFFFE0;
        v15 = *v4;
        do
        {
          *(_DWORD *)(v15 + 4 * (v14 >> 5)) |= 1 << v14;
          ++v14;
        }
        while (v14 < a3);
      }
    }
    else if (a2 < a3)
    {
      v8 = *this;
      do
      {
        *(_DWORD *)(v8 + 4 * (a2 >> 5)) |= 1 << a2;
        ++a2;
      }
      while (a3 != a2);
    }
  }
  return this;
}

_QWORD *BitArray::setBitsInRange(_QWORD *this, const BitArray *a2, int a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a4 != a3)
  {
    v4 = 0;
    v5 = *(_QWORD *)a2;
    do
    {
      v6 = 1 << (a3 + v4);
      v7 = (a3 + v4) >> 5;
      if (((*(_DWORD *)(v5 + 4 * (v4 >> 5)) >> v4) & 1) != 0)
        v8 = *(_DWORD *)(*this + 4 * v7) | v6;
      else
        v8 = *(_DWORD *)(*this + 4 * v7) & ~v6;
      *(_DWORD *)(*this + 4 * v7) = v8;
      ++v4;
    }
    while (a4 - a3 != v4);
  }
  return this;
}

void BitArray::getBitsFromRange(BitArray *this, BitArray *a2, unsigned int a3, int a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v8 = a4 - a3;
  v9 = *((_DWORD *)a2 + 2);
  if (v9)
    BitArray::clearRange(a2, 0, v9);
  *((_DWORD *)a2 + 2) = 0;
  BitArray::setSize(a2, v8);
  if (a4 != a3)
  {
    v10 = v8 >> 3;
    v11 = a3 >> 3;
    v12 = a3 & 7;
    if ((a3 & 7) != 0)
    {
      v13 = *(_QWORD *)this;
      v14 = 8 - v12;
      v15 = (*(_DWORD *)(*(_QWORD *)this + 4 * (a3 >> 5)) >> (a3 & 0x18)) >> v12;
      if (v8 >= 8)
      {
        v16 = 0;
        v17 = 0;
        v18 = *(_QWORD *)a2;
        if (v10 <= 1)
          v19 = 1;
        else
          v19 = v8 >> 3;
        do
        {
          v20 = *(_DWORD *)(v13 + ((v11 + 1 + v17) & 0xFFFFFFFC)) >> ((8 * v11 + 8 + v16) & 0x18);
          *(_DWORD *)(v18 + (v17++ & 0xFFFFFFFC)) |= ((v20 << v14) & 0xFE | v15) << (v16 & 0x18);
          v15 = v20 >> v12;
          v16 += 8;
        }
        while (v19 != v17);
      }
      if ((a4 & 7) != 0)
      {
        if ((v8 & 7) > v14)
          v15 |= (*(_DWORD *)(v13 + ((v11 + v10 + 1) & 0x7FFFFFFC)) >> (8 * ((v11 + v10 + 1) & 3))) << v14;
        v15 &= ~(-1 << (v8 & 7));
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * (v8 >> 5)) |= v15 << (v8 & 0x18);
    }
    else
    {
      if (v8 >= 8)
      {
        v21 = 0;
        v22 = 0;
        v23 = *(_QWORD *)this;
        v24 = *(_QWORD *)a2;
        if (v10 <= 1)
          v25 = 1;
        else
          v25 = v8 >> 3;
        do
        {
          *(_DWORD *)(v24 + (v22 & 0xFFFFFFFC)) |= (*(_DWORD *)(v23 + ((v11 + v22) & 0xFFFFFFFC)) >> ((8 * v11 + v21) & 0x18)) << (v21 & 0x18);
          ++v22;
          v21 += 8;
        }
        while (v25 != v22);
      }
      if ((a4 & 7) != 0)
        *(_DWORD *)(*(_QWORD *)a2 + 4 * (v8 >> 5)) |= ((*(_DWORD *)(*(_QWORD *)this + ((v10 + v11) & 0x3FFFFFFC)) >> (8 * ((v10 + v11) & 3))) & ~(-1 << (a4 & 7))) << (v8 & 0x18);
    }
  }
}

_QWORD *BitArray::getBitsFromRangeAsBytes(_QWORD *this, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  unsigned int v20;

  v5 = a5 - a4;
  if (a5 != a4)
  {
    v6 = v5 >> 3;
    v7 = a4 >> 3;
    v8 = a4 & 7;
    if ((a4 & 7) != 0)
    {
      v9 = 8 - v8;
      v10 = (*(_DWORD *)(*this + 4 * (a4 >> 5)) >> (a4 & 0x18)) >> v8;
      if (v5 >= 8)
      {
        v11 = v7 + 1;
        if (v6 <= 1)
          v12 = 1;
        else
          v12 = v6;
        v13 = 8 * v7 + 8;
        v14 = a2;
        do
        {
          v15 = *(_DWORD *)(*this + (v11 & 0xFFFFFFFC)) >> (v13 & 0x18);
          *v14++ = (v15 << v9) | v10;
          v10 = v15 >> v8;
          ++v11;
          v13 += 8;
          --v12;
        }
        while (v12);
      }
      if ((a5 & 7) != 0)
      {
        v16 = v5 & 7;
        if (v16 > v9)
          v10 |= (*(_DWORD *)(*this + ((v7 + (_DWORD)v6 + 1) & 0x7FFFFFFC)) >> (8 * ((v7 + v6 + 1) & 3))) << v9;
        LOBYTE(v10) = v10 & ~(-1 << v16);
      }
      goto LABEL_21;
    }
    if (v5 >= 8)
    {
      if (v6 <= 1)
        v17 = 1;
      else
        v17 = v6;
      v18 = 8 * v7;
      v19 = a2;
      v20 = a4 >> 3;
      do
      {
        *v19++ = *(_DWORD *)(*this + (v20++ & 0xFFFFFFFC)) >> (v18 & 0x18);
        v18 += 8;
        --v17;
      }
      while (v17);
    }
    if ((a5 & 7) != 0)
    {
      v10 = (*(_DWORD *)(*this + (((_DWORD)v6 + v7) & 0x3FFFFFFC)) >> (8 * ((v6 + v7) & 3))) & ~(-1 << (a5 & 7));
LABEL_21:
      a2[v6] = v10;
    }
  }
  return this;
}

uint64_t BitArray::sizeObject(uint64_t a1, int a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 == 3)
  {
    v2 = *(_DWORD *)(a1 + 8);
    v3 = v2 > *(_DWORD *)(a1 + 12);
    v4 = ((v2 + 31) >> 3) & 0x1FFFFFFC;
    if (v3)
      return v4;
    else
      return 0;
  }
  else
  {
    v6 = 12;
    if (!gShadowDiagnosticShowIdealizedObjectSizes)
      v6 = 16;
    v7 = *(_DWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 12);
    v9 = (v7 + 31) >> 5;
    v10 = v6 + 4 * v9;
    v11 = v10 + 4 * (((v8 + 31) >> 5) - v9);
    if (a2)
      v11 = v10;
    if (v7 > v8 || (a2 - 4) >= 0xFFFFFFFE)
      return v6;
    else
      return v11;
  }
}

uint64_t SimpleFrameTransformer::SimpleFrameTransformer(uint64_t a1, uint64_t a2, NeuralNet *a3, uint64_t a4, uint64_t a5, const PelMgr *a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  char v10;
  int v11;
  _QWORD *v18;
  uint64_t WindowSize;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NeuralNet *v30;
  unsigned int OutputSize;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  NeuralNet *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v57;

  v10 = a8;
  v11 = a7;
  *(_QWORD *)a1 = &off_24C2176C8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 56) = 4294967280;
  v18 = (_QWORD *)(a1 + 64);
  if (a3)
    WindowSize = NeuralNet::getWindowSize(a3, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
  else
    WindowSize = 1;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v18, WindowSize);
  *(_QWORD *)(a1 + 80) = 0;
  if (a5)
    v20 = *(_DWORD *)(a5 + 8) | 1u;
  else
    v20 = 1;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray((_QWORD *)(a1 + 88), v20);
  *(_QWORD *)(a1 + 104) = 0;
  v21 = (_QWORD *)(a1 + 112);
  if (a5)
    v22 = *(_DWORD *)(a5 + 8) | 1u;
  else
    v22 = 1;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray((_QWORD *)(a1 + 112), v22);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v30 = *(NeuralNet **)(a1 + 16);
  if (v30)
    OutputSize = NeuralNet::getOutputSize(v30, v23, v24, v25, v26, v27, v28, v29);
  else
    OutputSize = 0;
  DgnPrimArray<unsigned char>::DgnPrimArray(a1 + 152, OutputSize);
  v57 = v10;
  v39 = (_QWORD *)(a1 + 168);
  v40 = *(NeuralNet **)(a1 + 16);
  if (v40)
  {
    v41 = NeuralNet::getOutputSize(v40, v32, v33, v34, v35, v36, v37, v38);
    *v39 = 0;
    *(_QWORD *)(a1 + 176) = 0;
    if ((_DWORD)v41)
      DgnPrimArray<unsigned long long>::reallocElts(a1 + 168, v41, 0);
  }
  else
  {
    LODWORD(v41) = 0;
    *v39 = 0;
    *(_QWORD *)(a1 + 176) = 0;
  }
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 176) = v41;
  *(_QWORD *)(a1 + 192) = 0;
  if (a5)
    v42 = *(_DWORD *)(*(_QWORD *)(a5 + 112) + 132);
  else
    v42 = 0;
  DgnPrimArray<unsigned char>::DgnPrimArray(a1 + 200, v42);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = v11;
  if (a2)
  {
    v43 = *(_DWORD *)(a2 + 8);
    if (!a4)
      goto LABEL_24;
  }
  else
  {
    v43 = 0;
    if (!a4)
      goto LABEL_24;
  }
  if (v43 <= *(_DWORD *)(a4 + 8))
    v43 = *(_DWORD *)(a4 + 8);
LABEL_24:
  v44 = v43 + 7;
  v45 = v44 & 0xFFFFFFF8;
  if ((v44 & 0xFFFFFFF8) != 0)
    DgnPrimArray<short>::reallocElts(a1 + 216, v44 & 0xFFFFFFF8, 0);
  *(_DWORD *)(a1 + 224) = v45;
  *(_QWORD *)(a1 + 48) = 0;
  if (a6)
  {
    v46 = MemChunkAlloc(0x298uLL, 0);
    OnDemandPelScorer::OnDemandPelScorer((OnDemandPelScorer *)v46, a6, 0, 0, 0, 0, 0, 0, a9, a10, v57);
    *(_QWORD *)(a1 + 48) = v47;
    v50 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v50)
    {
      v51 = 0;
      v52 = 0;
      v53 = *(_DWORD *)(*(_QWORD *)(a5 + 112) + 132) * *(_DWORD *)(a5 + 12);
      do
      {
        v54 = *v21 + v51;
        v55 = *(_DWORD *)(v54 + 12);
        if (v53 > v55)
        {
          DgnPrimArray<unsigned long long>::reallocElts(*v21 + v51, v53 - v55, 0);
          v50 = *(unsigned int *)(a1 + 120);
        }
        *(_DWORD *)(v54 + 8) = v53;
        ++v52;
        v51 += 16;
      }
      while (v52 < v50);
      v47 = *(_QWORD *)(a1 + 48);
    }
    if (*(double *)(v47 + 144) == 0.0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 119, (uint64_t)"recogctl/frmtrans", 1, (uint64_t)"%s", v48, v49, (char)&unk_209A75D48);
  }
  return a1;
}

void sub_2098AFFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a12);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v16);
  MovingArrayWindow<DgnPrimArray<double>,DgnArray<DgnPrimArray<double>>>::~MovingArrayWindow(v15);
  MovingArrayWindow<DgnPrimArray<unsigned char>,DgnArray<DgnPrimArray<unsigned char>>>::~MovingArrayWindow(a13);
  MovingArrayWindow<DgnPrimArray<unsigned char>,DgnArray<DgnPrimArray<unsigned char>>>::~MovingArrayWindow(a14);
  _Unwind_Resume(a1);
}

void SimpleFrameTransformer::~SimpleFrameTransformer(SimpleFrameTransformer *this)
{
  void (**v2)(SimpleFrameTransformer *__hidden);
  _QWORD *v3;

  v2 = &off_24C2176C8;
  *(_QWORD *)this = &off_24C2176C8;
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  if (v3)
  {
    (*(void (**)(_QWORD))(*v3 + 16))(*((_QWORD *)this + 6));
    MemChunkFree(v3, 0);
    v2 = *(void (***)(SimpleFrameTransformer *__hidden))this;
  }
  *((_QWORD *)this + 6) = 0;
  v2[3](this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 200);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136);
  MovingArrayWindow<DgnPrimArray<double>,DgnArray<DgnPrimArray<double>>>::~MovingArrayWindow((uint64_t)this + 112);
  MovingArrayWindow<DgnPrimArray<unsigned char>,DgnArray<DgnPrimArray<unsigned char>>>::~MovingArrayWindow((uint64_t)this + 88);
  MovingArrayWindow<DgnPrimArray<unsigned char>,DgnArray<DgnPrimArray<unsigned char>>>::~MovingArrayWindow((uint64_t)this + 64);
}

{
  SimpleFrameTransformer::~SimpleFrameTransformer(this);
  JUMPOUT(0x20BD149A8);
}

double SimpleFrameTransformer::reset(SimpleFrameTransformer *this)
{
  double result;

  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 16) = 0;
  *(_QWORD *)&result = 4294967280;
  *((_QWORD *)this + 7) = 4294967280;
  return result;
}

void SimpleFrameTransformer::printSize(SimpleFrameTransformer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 147, (DgnString *)&v170);
  if ((_DWORD)v171)
    v16 = v170;
  else
    v16 = &unk_209A75D48;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A75D48, a3, &unk_209A75D48, v16);
  DgnString::~DgnString((DgnString *)&v170);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A75D48);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  v22 = (a3 + 1);
  v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 149, (DgnString *)&v170);
  if ((_DWORD)v171)
    v28 = v170;
  else
    v28 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v29 = 4;
  else
    v29 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 150, (DgnString *)&v170);
  if ((_DWORD)v171)
    v34 = v170;
  else
    v34 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v34, v29, v29, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v29;
  *a5 += v29;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v35 = 4;
  else
    v35 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 151, (DgnString *)&v170);
  if ((_DWORD)v171)
    v40 = v170;
  else
    v40 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v40, v35, v35, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v35;
  *a5 += v35;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v41 = 4;
  else
    v41 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 152, (DgnString *)&v170);
  if ((_DWORD)v171)
    v46 = v170;
  else
    v46 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v46, v41, v41, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v41;
  *a5 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v47 = 4;
  else
    v47 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 153, (DgnString *)&v170);
  if ((_DWORD)v171)
    v52 = v170;
  else
    v52 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v52, v47, v47, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v47;
  *a5 += v47;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 4;
  else
    v53 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 154, (DgnString *)&v170);
  if ((_DWORD)v171)
    v58 = v170;
  else
    v58 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v58, v53, v53, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v53;
  *a5 += v53;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 163, (DgnString *)&v170);
  if ((_DWORD)v171)
    v63 = v170;
  else
    v63 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v63, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 165, (DgnString *)&v170);
  if ((_DWORD)v171)
    v68 = v170;
  else
    v68 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v68, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += 4;
  *a5 += 4;
  v69 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 64, 0) + 8;
  v70 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 64, 1) + 8;
  v170 = 0;
  v171 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v170);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 166, (DgnString *)&v170);
  if ((_DWORD)v171)
    v75 = v170;
  else
    v75 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v75, v69, v70, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v69;
  *a5 += v70;
  v76 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 88, 0) + 8;
  v77 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 88, 1) + 8;
  v170 = 0;
  v171 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v170);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 167, (DgnString *)&v170);
  if ((_DWORD)v171)
    v82 = v170;
  else
    v82 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v82, v76, v77, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v76;
  *a5 += v77;
  v83 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 112, 0) + 8;
  v84 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 112, 1) + 8;
  v170 = 0;
  v171 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v170);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 169, (DgnString *)&v170);
  if ((_DWORD)v171)
    v89 = v170;
  else
    v89 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v89, v83, v84, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v83;
  *a5 += v84;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v90 = 12;
  else
    v90 = 16;
  v91 = *((_DWORD *)this + 36);
  v92 = *((_DWORD *)this + 37);
  v93 = v92 >= v91;
  v94 = v92 - v91;
  v169 = a3;
  if (v93)
  {
    v96 = v91 & ~(v91 >> 31);
    v91 = 0;
    v95 = v90 + v96;
    v90 += v96 + v94;
  }
  else
  {
    v95 = v90;
  }
  v97 = v91;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 171, (DgnString *)&v170);
  if ((_DWORD)v171)
    v102 = v170;
  else
    v102 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v22, &unk_209A75D48, v23, v23, v102, v90, v95, v97);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v90;
  *a5 += v95;
  *a6 += v97;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v103 = 12;
  else
    v103 = 16;
  v104 = *((_DWORD *)this + 40);
  v105 = *((_DWORD *)this + 41);
  v93 = v105 >= v104;
  v106 = v105 - v104;
  if (v93)
  {
    v108 = v104 & ~(v104 >> 31);
    v104 = 0;
    v107 = v103 + v108;
    v103 += v108 + v106;
  }
  else
  {
    v107 = v103;
  }
  v109 = v104;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 172, (DgnString *)&v170);
  if ((_DWORD)v171)
    v114 = v170;
  else
    v114 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v22, &unk_209A75D48, v23, v23, v114, v103, v107, v109);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v103;
  *a5 += v107;
  *a6 += v109;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v115 = 12;
  else
    v115 = 16;
  v116 = *((unsigned int *)this + 44);
  v117 = *((_DWORD *)this + 45);
  if (v117 >= v116)
  {
    v118 = 0;
    if ((int)v116 > 0)
      v115 += 8 * (v116 - 1) + 8;
    v119 = v115 + 8 * (v117 - v116);
  }
  else
  {
    v118 = 8 * v116;
    v119 = v115;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 174, (DgnString *)&v170);
  if ((_DWORD)v171)
    v124 = v170;
  else
    v124 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v120, v121, v122, v123, v22, &unk_209A75D48, v23, v23, v124, v119, v115, v118);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v119;
  *a5 += v115;
  *a6 += v118;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v125 = 12;
  else
    v125 = 16;
  v126 = *((_DWORD *)this + 48);
  v127 = *((_DWORD *)this + 49);
  v93 = v127 >= v126;
  v128 = v127 - v126;
  if (v93)
  {
    v130 = v126 & ~(v126 >> 31);
    v126 = 0;
    v129 = v125 + v130;
    v125 += v130 + v128;
  }
  else
  {
    v129 = v125;
  }
  v131 = v126;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 176, (DgnString *)&v170);
  if ((_DWORD)v171)
    v136 = v170;
  else
    v136 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v132, v133, v134, v135, v22, &unk_209A75D48, v23, v23, v136, v125, v129, v131);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v125;
  *a5 += v129;
  *a6 += v131;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v137 = 12;
  else
    v137 = 16;
  v138 = *((_DWORD *)this + 52);
  v139 = *((_DWORD *)this + 53);
  v93 = v139 >= v138;
  v140 = v139 - v138;
  if (v93)
  {
    v142 = v138 & ~(v138 >> 31);
    v138 = 0;
    v141 = v137 + v142;
    v137 += v142 + v140;
  }
  else
  {
    v141 = v137;
  }
  v143 = v138;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 178, (DgnString *)&v170);
  if ((_DWORD)v171)
    v148 = v170;
  else
    v148 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v144, v145, v146, v147, v22, &unk_209A75D48, v23, v23, v148, v137, v141, v143);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v137;
  *a5 += v141;
  *a6 += v143;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v149 = 12;
  else
    v149 = 16;
  v150 = *((unsigned int *)this + 56);
  v151 = *((_DWORD *)this + 57);
  if (v151 >= v150)
  {
    v152 = 0;
    if ((int)v150 > 0)
      v149 = (v149 | 2) + 2 * (v150 - 1);
    v153 = v149 + 2 * (v151 - v150);
  }
  else
  {
    v152 = 2 * v150;
    v153 = v149;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 180, (DgnString *)&v170);
  if ((_DWORD)v171)
    v158 = v170;
  else
    v158 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v154, v155, v156, v157, v22, &unk_209A75D48, v23, v23, v158, v153, v149, v152);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v153;
  *a5 += v149;
  *a6 += v152;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 182, (DgnString *)&v170);
  if ((_DWORD)v171)
    v163 = v170;
  else
    v163 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v159, v160, v161, v162, v22, &unk_209A75D48, v23, v23, v163, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 184, (DgnString *)&v170);
  if ((_DWORD)v171)
    v168 = v170;
  else
    v168 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v164, v165, v166, v167, v169, &unk_209A75D48, (35 - v169), (35 - v169), v168, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v170);
}

void sub_2098B0C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

unint64_t SimpleFrameTransformer::doStage2ForRecogFramesOnly(unint64_t result, uint64_t a2)
{
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_DWORD *)(result + 56);
  if (!((v3 + 1) % *(_DWORD *)(result + 232)))
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (v5)
    {
      FmpeMgr::fmpeStage2(v5, v3, v4 + 88, (uint64_t *)(v4 + 112), (_QWORD *)(v4 + 200));
    }
    else
    {
      v6 = *(_QWORD *)(v4 + 88) + 16 * (v3 % *(_DWORD *)(v4 + 96));
      DgnPrimArray<unsigned char>::copyArraySlice(v4 + 200, (_QWORD *)v6, 0, *(_DWORD *)(v6 + 8));
    }
    return SynchronizedArray<DgnPrimArray<unsigned char>>::add(a2, *(_DWORD *)(v4 + 56) / *(_DWORD *)(v4 + 232), v4 + 200);
  }
  return result;
}

unint64_t SynchronizedArray<DgnPrimArray<unsigned char>>::add(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6;
  _QWORD *v7;

  v6 = *(_DWORD *)(a1 + 16);
  if (v6 == *(_DWORD *)(a1 + 20))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 8, 1, 1);
    v6 = *(_DWORD *)(a1 + 16);
  }
  v7 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v6);
  *v7 = 0;
  v7[1] = 0;
  ++*(_DWORD *)(a1 + 16);
  return DgnPrimArray<unsigned char>::copyArraySlice(*(_QWORD *)(a1 + 8) + 16 * a2, (_QWORD *)a3, 0, *(_DWORD *)(a3 + 8));
}

void SimpleFrameTransformer::transformFrame(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  NeuralNet *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int HalfWindowSize;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;

  v93 = a3;
  v10 = a2;
  if (!a4)
  {
    if (*(_DWORD *)(a1 + 80) != *(_DWORD *)(a1 + 84))
    {
      HalfWindowSize = NeuralNet::getHalfWindowSize(*(NeuralNet **)(a1 + 16), a2, a3, 0, a5, a6, a7, a8);
      v30 = HalfWindowSize;
      v31 = *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 84);
      v32 = v31 - HalfWindowSize;
      v92 = HalfWindowSize;
      if (v31 - HalfWindowSize < HalfWindowSize + 1)
      {
        if (v31 < 2 * HalfWindowSize)
        {
          v33 = v31 - 1;
          v34 = 2 * HalfWindowSize;
          do
          {
            v35 = *(_DWORD *)(a1 + 80) + 1;
            v36 = *(_DWORD *)(a1 + 72);
            v37 = v35 - v36;
            if (v35 < v36)
              v37 = 0;
            *(_DWORD *)(a1 + 80) = v35;
            *(_DWORD *)(a1 + 84) = v37;
            DgnPrimArray<unsigned char>::copyArraySlice(*(_QWORD *)(a1 + 64) + 16 * (v31 % v36), (_QWORD *)(*(_QWORD *)(a1 + 64) + 16 * (v33 % v36)), 0, *(_DWORD *)(*(_QWORD *)(a1 + 64) + 16 * (v33 % v36) + 8));
            ++v31;
          }
          while (v34 != v31);
        }
        if (!v32)
          goto LABEL_52;
        goto LABEL_34;
      }
      v32 = HalfWindowSize;
      v30 = v10;
      if (HalfWindowSize)
      {
LABEL_34:
        v64 = 0;
        v65 = v30 + v92;
        do
        {
          v66 = *(_DWORD *)(a1 + 80) + 1;
          v67 = *(_DWORD *)(a1 + 72);
          v68 = v66 - v67;
          if (v66 < v67)
            v68 = 0;
          *(_DWORD *)(a1 + 80) = v66;
          *(_DWORD *)(a1 + 84) = v68;
          v69 = *(_QWORD *)(a1 + 64);
          v70 = v69 + 16 * ((v65 + v64 - 1) % v67);
          DgnPrimArray<unsigned char>::copyArraySlice(v69 + 16 * ((v65 + v64) % v67), (_QWORD *)v70, 0, *(_DWORD *)(v70 + 8));
          NeuralNet::run(*(NeuralNet **)(a1 + 16), (uint64_t *)(a1 + 64), v64 + v10, a1 + 152, a1 + 168, v71, v72, v73);
          if (a6)
          {
            v79 = *(unsigned int *)(a6 + 8);
            if (v79 == *(_DWORD *)(a6 + 12))
            {
              DgnArray<DgnPrimArray<double>>::reallocElts(a6, 1, 1);
              v79 = *(unsigned int *)(a6 + 8);
            }
            v80 = (_QWORD *)(*(_QWORD *)a6 + 16 * v79);
            *v80 = 0;
            v80[1] = 0;
            DgnPrimArray<double>::copyArraySlice((uint64_t)v80, (uint64_t *)(a1 + 168), 0, *(_DWORD *)(a1 + 176));
            ++*(_DWORD *)(a6 + 8);
          }
          v81 = SimpleFrameTransformer::concatenateFeatures(a1, *(_QWORD *)(a1 + 64) + 16 * ((v64 - v32 + v10 + v92) % *(_DWORD *)(a1 + 72)), v93, v74, v75, v76, v77, v78);
          SimpleFrameTransformer::doImelda(a1, v64 - v32 + v10, v81, v82, v83, v84, v85, v86);
          SimpleFrameTransformer::doFmpeStage1((SimpleFrameTransformer *)a1, v64 - v32 + v10);
          v87 = *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 108);
          if (v87 >= (*(unsigned int (**)(unint64_t))(*(_QWORD *)a1 + 112))(a1) + 1)
          {
            v88 = *(_DWORD *)(a1 + 56);
            if (v88 == -16)
              v89 = 0;
            else
              v89 = v88 + 1;
            *(_DWORD *)(a1 + 56) = v89;
            SimpleFrameTransformer::doStage2ForRecogFramesOnly(a1, a5);
          }
          ++v64;
        }
        while (v64 != v32);
      }
    }
LABEL_52:
    while ((*(int (**)(unint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(unsigned int *)(a5 + 16)) < (int)v10)
    {
      v90 = *(_DWORD *)(a1 + 56);
      if (v90 == -16)
        v91 = 0;
      else
        v91 = v90 + 1;
      *(_DWORD *)(a1 + 56) = v91;
      SimpleFrameTransformer::doStage2ForRecogFramesOnly(a1, a5);
    }
    *(_BYTE *)a5 = 1;
    return;
  }
  v12 = a4;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    LinearTransform::doTransform((int *)(v13 + 8), a4, a1 + 136, a4, a5, a6, a7, a8);
    v12 = a1 + 136;
  }
  v14 = *(NeuralNet **)(a1 + 16);
  if (!v14)
    goto LABEL_28;
  v15 = NeuralNet::getHalfWindowSize(v14, a2, a3, a4, a5, a6, a7, a8);
  v16 = v15;
  v17 = *(_DWORD *)(a1 + 80);
  if (v17 == *(_DWORD *)(a1 + 84))
  {
    v18 = 0;
    do
    {
      v19 = *(_DWORD *)(a1 + 80) + 1;
      v20 = *(_DWORD *)(a1 + 72);
      v21 = v19 - v20;
      if (v19 < v20)
        v21 = 0;
      *(_DWORD *)(a1 + 80) = v19;
      *(_DWORD *)(a1 + 84) = v21;
      DgnPrimArray<unsigned char>::copyArraySlice(*(_QWORD *)(a1 + 64) + 16 * (v18 % v20), (_QWORD *)v12, 0, *(_DWORD *)(v12 + 8));
      ++v18;
    }
    while (v18 <= v16);
    NeuralNet::reset(*(NeuralNet **)(a1 + 16), v22, v23, v24, v25, v26, v27, v28);
    return;
  }
  v38 = v17 + 1;
  v39 = *(_DWORD *)(a1 + 72);
  v40 = v38 - v39;
  if (v38 < v39)
    v40 = 0;
  *(_DWORD *)(a1 + 80) = v38;
  *(_DWORD *)(a1 + 84) = v40;
  DgnPrimArray<unsigned char>::copyArraySlice(*(_QWORD *)(a1 + 64) + 16 * ((v15 + v10) % v39), (_QWORD *)v12, 0, *(_DWORD *)(v12 + 8));
  v41 = *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 84);
  if (v41 >= NeuralNet::getWindowSize(*(NeuralNet **)(a1 + 16), v42, v43, v44, v45, v46, v47, v48))
  {
    NeuralNet::run(*(NeuralNet **)(a1 + 16), (uint64_t *)(a1 + 64), v10, a1 + 152, a1 + 168, v49, v50, v51);
    if (a6)
    {
      v52 = *(_DWORD *)(a6 + 8);
      if (v52 == *(_DWORD *)(a6 + 12))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts(a6, 1, 1);
        v52 = *(_DWORD *)(a6 + 8);
      }
      v53 = (_QWORD *)(*(_QWORD *)a6 + 16 * v52);
      *v53 = 0;
      v53[1] = 0;
      DgnPrimArray<double>::copyArraySlice((uint64_t)v53, (uint64_t *)(a1 + 168), 0, *(_DWORD *)(a1 + 176));
      ++*(_DWORD *)(a6 + 8);
    }
    v54 = v10 % *(_DWORD *)(a1 + 72);
    v10 -= v16;
    v12 = *(_QWORD *)(a1 + 64) + 16 * v54;
LABEL_28:
    v55 = SimpleFrameTransformer::concatenateFeatures(a1, v12, v93, a4, a5, a6, a7, a8);
    SimpleFrameTransformer::doImelda(a1, v10, v55, v56, v57, v58, v59, v60);
    SimpleFrameTransformer::doFmpeStage1((SimpleFrameTransformer *)a1, v10);
    v61 = *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 108);
    if (v61 >= (*(unsigned int (**)(unint64_t))(*(_QWORD *)a1 + 112))(a1) + 1)
    {
      v62 = *(_DWORD *)(a1 + 56);
      if (v62 == -16)
        v63 = 0;
      else
        v63 = v62 + 1;
      *(_DWORD *)(a1 + 56) = v63;
      SimpleFrameTransformer::doStage2ForRecogFramesOnly(a1, a5);
    }
  }
}

uint64_t SimpleFrameTransformer::concatenateFeatures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  NeuralNet *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t j;
  void *v18;

  v8 = a2;
  v10 = *(NeuralNet **)(a1 + 16);
  if (v10)
  {
    v11 = a3;
    if (!NeuralNet::isOutTypeConcatenatedBF(v10, a2, a3, a4, a5, a6, a7, a8) || (v11 & 1) != 0)
    {
      return a1 + 152;
    }
    else
    {
      v12 = (*(_DWORD *)(v8 + 8) + *(_DWORD *)(a1 + 160));
      if (*(_DWORD *)(a1 + 196) < v12)
      {
        v18 = 0;
        *(_DWORD *)(a1 + 196) = realloc_array(*(_QWORD **)(a1 + 184), &v18, v12, *(unsigned int *)(a1 + 192), *(unsigned int *)(a1 + 192), 1);
        *(_QWORD *)(a1 + 184) = v18;
      }
      *(_DWORD *)(a1 + 192) = v12;
      v13 = *(unsigned int *)(v8 + 8);
      if ((_DWORD)v13)
      {
        for (i = 0; i != v13; ++i)
          *(_BYTE *)(*(_QWORD *)(a1 + 184) + i) = *(_BYTE *)(*(_QWORD *)v8 + i);
      }
      v15 = *(unsigned int *)(a1 + 160);
      if ((_DWORD)v15)
      {
        for (j = 0; j != v15; ++j)
          *(_BYTE *)(*(_QWORD *)(a1 + 184) + (v13 + j)) = *(_BYTE *)(*(_QWORD *)(a1 + 152) + j);
      }
      return a1 + 184;
    }
  }
  return v8;
}

void SimpleFrameTransformer::doImelda(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v8 = *(_DWORD *)(a1 + 104) + 1;
  v9 = *(_DWORD *)(a1 + 96);
  v10 = v8 - v9;
  if (v8 < v9)
    v10 = 0;
  *(_DWORD *)(a1 + 104) = v8;
  *(_DWORD *)(a1 + 108) = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = a2 % v9;
  v13 = *(_QWORD *)(a1 + 88);
  if (v11)
    LinearTransform::doTransform((int *)(v11 + 8), a3, v13 + 16 * v12, a4, a5, a6, a7, a8);
  else
    DgnPrimArray<unsigned char>::copyArraySlice(v13 + 16 * v12, (_QWORD *)a3, 0, *(_DWORD *)(a3 + 8));
}

uint64_t SimpleFrameTransformer::doFmpeStage1(SimpleFrameTransformer *this, unsigned int a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  int v6;

  result = *((_QWORD *)this + 4);
  if (result)
  {
    v4 = *((_DWORD *)this + 32) + 1;
    v5 = *((_DWORD *)this + 30);
    v6 = v4 - v5;
    if (v4 < v5)
      v6 = 0;
    *((_DWORD *)this + 32) = v4;
    *((_DWORD *)this + 33) = v6;
    return FmpeMgr::fmpeStage1(result, a2, (unsigned __int8 **)(*((_QWORD *)this + 11) + 16 * (a2 % *((_DWORD *)this + 24))), (void **)(*((_QWORD *)this + 14) + 16 * (a2 % v5)), *((ReproData **)this + 6));
  }
  return result;
}

uint64_t SimpleFrameTransformer::getNextFrameTime(SimpleFrameTransformer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;

  v8 = *((_DWORD *)this + 20);
  if (v8 != *((_DWORD *)this + 21))
    return v8 - NeuralNet::getHalfWindowSize(*((NeuralNet **)this + 2), a2, a3, a4, a5, a6, a7, a8);
  v9 = *((_DWORD *)this + 14);
  if (v9 == -16)
    return (*((_DWORD *)this + 26) - *((_DWORD *)this + 27));
  else
    return v9 + (*(unsigned int (**)(SimpleFrameTransformer *))(*(_QWORD *)this + 112))(this) + 1;
}

uint64_t SimpleFrameTransformer::getPreDecimatedEquivalent(SimpleFrameTransformer *this, int a2)
{
  int v2;

  v2 = *((_DWORD *)this + 58) + *((_DWORD *)this + 58) * a2;
  return v2 + (*(unsigned int (**)(SimpleFrameTransformer *))(*(_QWORD *)this + 112))(this) - 1;
}

uint64_t SimpleFrameTransformer::getPreDecimatedEquivalentWithoutWindow(SimpleFrameTransformer *this, int a2)
{
  return (*((_DWORD *)this + 58) + *((_DWORD *)this + 58) * a2 - 1);
}

uint64_t SimpleFrameTransformer::getRecogEquivalent(SimpleFrameTransformer *this, int a2)
{
  return (a2 - (*(unsigned int (**)(SimpleFrameTransformer *))(*(_QWORD *)this + 112))(this))
       / *((_DWORD *)this + 58);
}

uint64_t SimpleFrameTransformer::transformFramesUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(a1, a2, 0, a3, a4, 0);
}

uint64_t SimpleFrameTransformer::transformFramesUntil(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  int i;
  NeuralNet *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NeuralNet *v20;
  _QWORD v22[2];

  v22[0] = 0;
  v22[1] = 0;
  v13 = a2 + 1;
  for (i = *(_DWORD *)(a1 + 60); ; *(_DWORD *)(a1 + 60) = i)
  {
    v15 = *(NeuralNet **)(a1 + 16);
    if (v15)
    {
      LODWORD(v15) = NeuralNet::getHalfWindowSize(v15, a2, a3, a4, a5, a6, a7, a8);
      v16 = *(_DWORD *)(a1 + 60);
    }
    else
    {
      v16 = i;
    }
    if (i > (int)v15 + v13 || *(_DWORD *)(a4 + 16) <= v16)
      break;
    v17 = *(_QWORD *)(a4 + 8) + 16 * v16;
    DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v22, (_QWORD *)v17, 0, *(_DWORD *)(v17 + 8));
    SimpleFrameTransformer::transformFrame(a1, *(unsigned int *)(a1 + 60), a3, (uint64_t)v22, a5, a6, v18, v19);
    i = *(_DWORD *)(a1 + 60) + 1;
  }
  v20 = *(NeuralNet **)(a1 + 16);
  if (v20)
    LODWORD(v20) = NeuralNet::getHalfWindowSize(v20, a2, a3, a4, a5, a6, a7, a8);
  if (v16 <= (int)v20 + v13 && *(_BYTE *)a4 && !*(_BYTE *)a5)
  {
    *(_DWORD *)(a5 + 4) = *(_DWORD *)(a5 + 16);
    SimpleFrameTransformer::transformFrame(a1, *(unsigned int *)(a4 + 16), a3, 0, a5, a6, a7, a8);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
}

void sub_2098B1628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void FrameTransformerThreadWorker::~FrameTransformerThreadWorker(FrameTransformerThreadWorker *this)
{
  *(_QWORD *)this = off_24C2183C0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 288);
  DgnThreadWorker::~DgnThreadWorker(this);
}

{
  *(_QWORD *)this = off_24C2183C0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 288);
  DgnThreadWorker::~DgnThreadWorker(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t FrameTransformerThreadWorker::onStartup(FrameTransformerThreadWorker *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;

  v2 = *((_QWORD *)this + 6);
  v3 = MemChunkAlloc(0xF0uLL, 0);
  v4 = SimpleFrameTransformer::SimpleFrameTransformer((uint64_t)v3, *(_QWORD *)(v2 + 1576), *(NeuralNet **)(v2 + 1584), *(_QWORD *)(v2 + 1592), *(_QWORD *)(v2 + 1600), *(const PelMgr **)(v2 + 1608), *(unsigned int *)(v2 + 1620), *(unsigned __int8 *)(v2 + 1632), *(double *)(v2 + 1624), *(double *)(v2 + 1640));
  *((_QWORD *)this + 33) = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
  v5 = MemChunkAlloc(0x18uLL, 0);
  *((_QWORD *)this + 34) = SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray((uint64_t)v5);
  v6 = MemChunkAlloc(0x18uLL, 0);
  result = SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray((uint64_t)v6);
  *((_QWORD *)this + 35) = result;
  return result;
}

uint64_t FrameTransformerThreadWorker::onShutdown(FrameTransformerThreadWorker *this)
{
  _QWORD *v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 33) + 72))(*((_QWORD *)this + 33));
  v2 = (_QWORD *)*((_QWORD *)this + 33);
  if (v2)
  {
    (*(void (**)(_QWORD))*v2)(*((_QWORD *)this + 33));
    MemChunkFree(v2, 0);
  }
  DgnDelete<UttFeatureArraySynchronizedArray>(*((_QWORD *)this + 34));
  return DgnDelete<UttFeatureArraySynchronizedArray>(*((_QWORD *)this + 35));
}

_BYTE *FrameTransformerThreadWorker::onPlay(FrameTransformerThreadWorker *this)
{
  uint64_t v1;
  _BYTE *result;

  v1 = *((_QWORD *)this + 6);
  *((_DWORD *)this + 64) = *(_DWORD *)(v1 + 1652);
  result = (_BYTE *)*((_QWORD *)this + 35);
  if (!*result)
    return (_BYTE *)SynchronizedArray<DgnPrimArray<unsigned char>>::update((unint64_t)result, *(_QWORD *)(v1 + 1656));
  return result;
}

unint64_t SynchronizedArray<DgnPrimArray<unsigned char>>::update(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int v4;
  _QWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = (_QWORD *)(result + 8);
  v7 = *(_DWORD *)(result + 16);
  v6 = *(_DWORD *)(result + 20);
  if (v6 > 0x1F3)
  {
    v8 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    result = DgnArray<DgnPrimArray<double>>::reallocElts(result + 8, 500 - v6, 0);
    v8 = *(_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(v3 + 20);
  }
  if (v8 > v6)
    result = DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v5, v8 - v6, 0);
  v9 = *(unsigned int *)(v3 + 16);
  if (v9 <= v8)
  {
    if (v9 < v8)
    {
      v12 = v8 - v9;
      v13 = 16 * v9;
      do
      {
        v14 = (_QWORD *)(*v5 + v13);
        *v14 = 0;
        v14[1] = 0;
        v13 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v9 > (int)v8)
  {
    v10 = (int)v9;
    v11 = 16 * (int)v9 - 16;
    do
    {
      --v10;
      result = DgnPrimArray<unsigned int>::~DgnPrimArray(*v5 + v11);
      v11 -= 16;
    }
    while (v10 > (int)v8);
  }
  *(_DWORD *)(v3 + 16) = v8;
  if ((int)v7 < v4)
  {
    do
    {
      v15 = *(_QWORD *)(a2 + 8) + 16 * v7;
      result = DgnPrimArray<unsigned char>::copyArraySlice(*v5 + 16 * v7++, (_QWORD *)v15, 0, *(_DWORD *)(v15 + 8));
    }
    while (v4 != v7);
  }
  if (*(_BYTE *)a2)
    *(_BYTE *)v3 = 1;
  if (*(_DWORD *)(v3 + 4) == -16)
    *(_DWORD *)(v3 + 4) = *(_DWORD *)(a2 + 4);
  return result;
}

uint64_t FrameTransformerThreadWorker::playOne(FrameTransformerThreadWorker *this)
{
  uint64_t v1;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;

  v1 = *((_QWORD *)this + 34);
  if (*(_BYTE *)v1)
    return 4;
  v4 = *((_DWORD *)this + 64);
  if (v4 != -16 && *(_DWORD *)(v1 + 16) > v4)
    return 4;
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 33) + 32))(*((_QWORD *)this + 33));
  v8 = v5;
  v9 = *((_QWORD *)this + 35);
  if (*(_DWORD *)(v9 + 16) <= (int)v5)
  {
    if (*(_BYTE *)v9)
    {
      v14 = *((_QWORD *)this + 33);
      v15 = *((_QWORD *)this + 34);
      *(_DWORD *)(v15 + 4) = *(_DWORD *)(v15 + 16);
      SimpleFrameTransformer::transformFrame(v14, v8, 0, 0, v15, 0, v6, v7);
    }
    return 4;
  }
  v10 = *(_QWORD *)(v9 + 8) + 16 * v5;
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 288, (_QWORD *)v10, 0, *(_DWORD *)(v10 + 8));
  SimpleFrameTransformer::transformFrame(*((_QWORD *)this + 33), v8, 0, (uint64_t)this + 288, *((_QWORD *)this + 34), 0, v11, v12);
  v13 = *((_DWORD *)this + 64);
  if (v13 != -16 && *(_DWORD *)(*((_QWORD *)this + 34) + 16) > v13)
    return 4;
  return 1;
}

uint64_t FrameTransformerThreadWorker::reset(FrameTransformerThreadWorker *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v6, *((_QWORD *)this + 5));
  v2 = *((_QWORD *)this + 33);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 35);
  if (v3)
    SynchronizedArray<DgnPrimArray<unsigned char>>::reset(v3);
  v4 = *((_QWORD *)this + 34);
  if (v4)
    SynchronizedArray<DgnPrimArray<unsigned char>>::reset(v4);
  *((_DWORD *)this + 64) = -16;
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v6);
}

void sub_2098B1A80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

void FrameTransformerThreadWorker::printSize(FrameTransformerThreadWorker *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  int v70;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1091, (DgnString *)&v69);
  if (v70)
    v15 = v69;
  else
    v15 = &unk_209A75D48;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A75D48, a3, &unk_209A75D48, v15);
  DgnString::~DgnString((DgnString *)&v69);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A75D48);
  v20 = (a3 + 1);
  v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1094, (DgnString *)&v69);
  if (v70)
    v26 = v69;
  else
    v26 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v27 = 4;
  else
    v27 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1095, (DgnString *)&v69);
  if (v70)
    v32 = v69;
  else
    v32 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v32, v27, v27, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v27;
  *a5 += v27;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v33 = 4;
  else
    v33 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1096, (DgnString *)&v69);
  if (v70)
    v38 = v69;
  else
    v38 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v38, v33, v33, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v33;
  *a5 += v33;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 4;
  else
    v39 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1097, (DgnString *)&v69);
  if (v70)
    v44 = v69;
  else
    v44 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v44, v39, v39, 0);
  v64 = a3;
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v39;
  *a5 += v39;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v45 = 12;
  else
    v45 = 16;
  v46 = *((_DWORD *)this + 74);
  v47 = *((_DWORD *)this + 75);
  v48 = a2;
  v49 = v47 >= v46;
  v50 = v47 - v46;
  if (v49)
  {
    v52 = v46 & ~(v46 >> 31);
    v46 = 0;
    v51 = v45 + v52;
    v45 += v52 + v50;
  }
  else
  {
    v51 = v45;
  }
  v53 = v46;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1099, (DgnString *)&v69);
  if (v70)
    v58 = v69;
  else
    v58 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v20, &unk_209A75D48, v21, v21, v58, v45, v51, v53);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v45;
  *a5 += v51;
  *a6 += v53;
  v67 = 0;
  v68 = 0;
  v66 = 0;
  DgnThreadWorker::printSize(this, v48, v20, &v68, &v66, &v67);
  *a4 += v68;
  *a5 += v66;
  *a6 += v67;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1108, (DgnString *)&v69);
  if (v70)
    v63 = v69;
  else
    v63 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v64, &unk_209A75D48, (35 - v64), (35 - v64), v63, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v69);
}

void sub_2098B1EB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

unint64_t FrameTransformerThread::stopScoring(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;

  DgnThreadClient::pause((DgnThreadClient *)a1, a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 1648) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 264) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 264));
  result = SynchronizedArray<DgnPrimArray<unsigned char>>::update(a2, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 272));
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

void FrameTransformerThread::printSize(FrameTransformerThread *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  FrameTransformerThread *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  int v96;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1171, (DgnString *)&v95);
  if (v96)
    v16 = v95;
  else
    v16 = &unk_209A75D48;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A75D48, a3, &unk_209A75D48, v16);
  v91 = this;
  DgnString::~DgnString((DgnString *)&v95);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A75D48);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v21 = 4;
  else
    v21 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1174, (DgnString *)&v95);
  if (v96)
    v26 = v95;
  else
    v26 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v26, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v27 = 4;
  else
    v27 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1175, (DgnString *)&v95);
  if (v96)
    v32 = v95;
  else
    v32 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v32, v27, v27, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += v27;
  *a5 += v27;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v33 = 4;
  else
    v33 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1176, (DgnString *)&v95);
  if (v96)
    v38 = v95;
  else
    v38 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v38, v33, v33, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += v33;
  *a5 += v33;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 4;
  else
    v39 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1177, (DgnString *)&v95);
  if (v96)
    v44 = v95;
  else
    v44 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v44, v39, v39, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += v39;
  *a5 += v39;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1179, (DgnString *)&v95);
  if (v96)
    v49 = v95;
  else
    v49 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v49, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1181, (DgnString *)&v95);
  if (v96)
    v54 = v95;
  else
    v54 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v54, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v95);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1183, (DgnString *)&v95);
  if (v96)
    v59 = v95;
  else
    v59 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v59, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1184, (DgnString *)&v95);
  if (v96)
    v64 = v95;
  else
    v64 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v64, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v95);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1186, (DgnString *)&v95);
  if (v96)
    v69 = v95;
  else
    v69 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v69, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1188, (DgnString *)&v95);
  if (v96)
    v74 = v95;
  else
    v74 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v74, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1190, (DgnString *)&v95);
  if (v96)
    v79 = v95;
  else
    v79 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v79, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v80 = 4;
  else
    v80 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1191, (DgnString *)&v95);
  if (v96)
    v85 = v95;
  else
    v85 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v85, v80, v80, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += v80;
  *a5 += v80;
  v93 = 0;
  v94 = 0;
  v92 = 0;
  DgnThreadClient::printSize(v91, a2, (a3 + 1), &v94, &v92, &v93);
  *a4 += v94;
  *a5 += v92;
  *a6 += v93;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1200, (DgnString *)&v95);
  if (v96)
    v90 = v95;
  else
    v90 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, a3, &unk_209A75D48, (35 - a3), (35 - a3), v90, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v95);
}

void sub_2098B25D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

_QWORD *ThreadedFrameTransformer::ThreadedFrameTransformer(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, double a10, char a11)
{
  uint64_t *v21;
  uint64_t v22;

  *a1 = &off_24C217FC0;
  v21 = MemChunkAlloc(0x680uLL, 0);
  v22 = DgnThread<FrameTransformerThreadWorker>::DgnThread((uint64_t)v21, a2, 0, "FrameTransformer");
  *(_QWORD *)v22 = &off_24C217550;
  *(_QWORD *)(v22 + 1576) = a3;
  *(_QWORD *)(v22 + 1584) = a4;
  *(_QWORD *)(v22 + 1592) = a5;
  *(_QWORD *)(v22 + 1600) = a6;
  *(_QWORD *)(v22 + 1608) = a7;
  *(_BYTE *)(v22 + 1616) = 0;
  *(_DWORD *)(v22 + 1620) = a8;
  *(double *)(v22 + 1624) = a9;
  *(_BYTE *)(v22 + 1632) = a11;
  *(double *)(v22 + 1640) = a10;
  *(_QWORD *)(v22 + 1648) = 0xFFFFFFF000000000;
  *(_QWORD *)(v22 + 1656) = 0;
  a1[1] = v22;
  DgnThreadClient::startup((DgnThreadClient *)v22);
  return a1;
}

void ThreadedFrameTransformer::~ThreadedFrameTransformer(DgnThreadClient **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  DgnThreadClient *v9;

  *this = (DgnThreadClient *)&off_24C217FC0;
  if (DgnThreadClient::isLive(this[1]) && !DgnThreadClient::hasErrored(this[1]))
    DgnThreadClient::shutdown(this[1], v2, v3, v4, v5, v6, v7, v8);
  v9 = this[1];
  if (v9)
  {
    (**(void (***)(DgnThreadClient *))v9)(this[1]);
    MemChunkFree(v9, 0);
  }
}

{
  ThreadedFrameTransformer::~ThreadedFrameTransformer(this);
  JUMPOUT(0x20BD149A8);
}

void ThreadedFrameTransformer::printSize(ThreadedFrameTransformer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  int v32;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1246, (DgnString *)&v31);
  if (v32)
    v15 = v31;
  else
    v15 = &unk_209A75D48;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A75D48, a3, &unk_209A75D48, v15);
  DgnString::~DgnString((DgnString *)&v31);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A75D48);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v20 = 4;
  else
    v20 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1248, (DgnString *)&v31);
  if (v32)
    v25 = v31;
  else
    v25 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &unk_209A75D48, (34 - a3), (34 - a3), v25, v20, v20, 0);
  DgnString::~DgnString((DgnString *)&v31);
  *a4 += v20;
  *a5 += v20;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1251, (DgnString *)&v31);
  if (v32)
    v30 = v31;
  else
    v30 = &unk_209A75D48;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, a3, &unk_209A75D48, (35 - a3), (35 - a3), v30, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v31);
}

void sub_2098B294C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedFrameTransformer::reset(ThreadedFrameTransformer *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 1);
  result = FrameTransformerThreadWorker::reset(*(FrameTransformerThreadWorker **)(v1 + 56));
  *(_DWORD *)(v1 + 1648) = 0;
  return result;
}

uint64_t ThreadedFrameTransformer::getNextFrameTime(ThreadedFrameTransformer *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 1648);
}

uint64_t ThreadedFrameTransformer::getPreDecimatedEquivalent(ThreadedFrameTransformer *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 56) + 264);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t ThreadedFrameTransformer::getPreDecimatedEquivalentWithoutWindow(ThreadedFrameTransformer *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 56) + 264);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t ThreadedFrameTransformer::getRecogEquivalent(ThreadedFrameTransformer *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 56) + 264);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
}

unint64_t ThreadedFrameTransformer::transformFramesUntil(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_DWORD *)(a4 + 16) <= (int)a2 && !*(_BYTE *)a4)
  {
    v9 = *(_QWORD *)(result + 8);
    *(_BYTE *)(v9 + 1616) = 1;
    *(_DWORD *)(v9 + 1652) = a2;
    *(_QWORD *)(v9 + 1656) = a3;
    DgnThreadClient::playAllUntilWorkerPauses((DgnThreadClient *)v9, a2, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(v9 + 1656) = 0;
    *(_DWORD *)(v9 + 1652) = -16;
    return FrameTransformerThread::stopScoring(v9, a4, v10, v11, v12, v13, v14, v15);
  }
  return result;
}

BOOL ThreadedFrameTransformer::maybeStartTransforming(uint64_t a1, uint64_t a2)
{
  BOOL isScoring;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  isScoring = FrameTransformerThread::isScoring(*(FrameTransformerThread **)(a1 + 8));
  v12 = *(_QWORD *)(a1 + 8);
  if (!isScoring && !**(_BYTE **)(*(_QWORD *)(v12 + 56) + 272))
  {
    *(_QWORD *)(v12 + 1656) = a2;
    DgnThreadClient::play((DgnThreadClient *)v12, v5, v6, v7, v8, v9, v10, v11);
    *(_BYTE *)(v12 + 1616) = 1;
    *(_QWORD *)(v12 + 1656) = 0;
    v12 = *(_QWORD *)(a1 + 8);
  }
  return FrameTransformerThread::isScoring((FrameTransformerThread *)v12);
}

BOOL FrameTransformerThread::isScoring(FrameTransformerThread *this)
{
  _BOOL8 result;

  if (!*((_BYTE *)this + 1616))
    return 0;
  result = DgnThreadClient::isLive(this);
  if ((_DWORD)result)
    return !DgnThreadClient::hasErrored(this);
  return result;
}

uint64_t ThreadedFrameTransformer::maybeStopTransforming(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = FrameTransformerThread::isScoring(*(FrameTransformerThread **)(a1 + 8));
  if ((_DWORD)result)
  {
    if (!a2)
      return FrameTransformerThread::stopScoring(*(_QWORD *)(a1 + 8), a3, v7, v8, v9, v10, v11, v12);
    result = DgnThreadClient::getThreadState(*(DgnThreadClient **)(a1 + 8));
    if ((_DWORD)result == 4)
      return FrameTransformerThread::stopScoring(*(_QWORD *)(a1 + 8), a3, v7, v8, v9, v10, v11, v12);
  }
  return result;
}

uint64_t ThreadedFrameTransformer::getHalfWindowSize(ThreadedFrameTransformer *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 56) + 264);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 112))(v1);
}

uint64_t ThreadedFrameTransformer::getThreadId(ThreadedFrameTransformer *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 28);
}

_QWORD *FrameTransformer::makeFrameTransformer(uint64_t a1, NeuralNet *a2, uint64_t a3, uint64_t a4, const PelMgr *a5, int a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t *v20;
  uint64_t *v22;

  if (a6)
  {
    v20 = MemChunkAlloc(0x10uLL, 0);
    return ThreadedFrameTransformer::ThreadedFrameTransformer(v20, a6, a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a7, a9, a10, a8);
  }
  else
  {
    v22 = MemChunkAlloc(0xF0uLL, 0);
    return (_QWORD *)SimpleFrameTransformer::SimpleFrameTransformer((uint64_t)v22, a1, a2, a3, a4, a5, a7, a8, a9, a10);
  }
}

void SimpleFrameTransformer::beginTransSyncRecog(SimpleFrameTransformer *this)
{
  PelScorer *v1;

  v1 = (PelScorer *)*((_QWORD *)this + 6);
  if (v1)
    PelScorer::beginFmpePelSyncRecog(v1);
}

PelScorer *SimpleFrameTransformer::endTransSyncRecog(SimpleFrameTransformer *this)
{
  PelScorer *result;

  result = (PelScorer *)*((_QWORD *)this + 6);
  if (result)
    return (PelScorer *)PelScorer::endFmpePelSyncRecog(result);
  return result;
}

uint64_t SimpleFrameTransformer::maybeStartTransforming()
{
  return 0;
}

uint64_t SimpleFrameTransformer::getHalfWindowSize(SimpleFrameTransformer *this)
{
  return *((_DWORD *)this + 24) >> 1;
}

uint64_t FrameTransformer::getThreadId(FrameTransformer *this)
{
  return 0xFFFFFFFFLL;
}

void FrameTransformerThread::~FrameTransformerThread(FrameTransformerThread *this)
{
  DgnThreadClient::~DgnThreadClient(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t *DgnThread<FrameTransformerThreadWorker>::newWorker(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v4;

  Latch<MemChunkRegion,LatchAdapter>::Latch(&v4, *(_QWORD *)(a1 + 16));
  v2 = MemChunkAlloc(0x130uLL, *(MemChunkRegion **)(a1 + 16));
  DgnThreadWorker::DgnThreadWorker((uint64_t)v2, *(_DWORD *)(a1 + 12), a1, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 28));
  *v2 = (uint64_t)off_24C2183C0;
  *((_DWORD *)v2 + 64) = -16;
  v2[37] = 0;
  *(_OWORD *)(v2 + 33) = 0u;
  *(_OWORD *)(v2 + 35) = 0u;
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v4);
  return v2;
}

void sub_2098B2D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AbstractObserver::canNotify(AbstractObserver *this)
{
  return 0;
}

uint64_t AbstractObserver::canBeNotified(AbstractObserver *this)
{
  return 1;
}

uint64_t DgnThread<FrameTransformerThreadWorker>::DgnThread(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  _QWORD *v5;

  v5 = (_QWORD *)DgnThreadClient::DgnThreadClient(a1, a2, a3, a4);
  *v5 = &unk_24C219960;
  *(_QWORD *)(a1 + 56) = DgnThread<FrameTransformerThreadWorker>::newWorker((uint64_t)v5);
  return a1;
}

void sub_2098B2DC8(_Unwind_Exception *a1)
{
  DgnThreadClient *v1;

  DgnThreadClient::~DgnThreadClient(v1);
  _Unwind_Resume(a1);
}

void DgnThread<FrameTransformerThreadWorker>::~DgnThread(DgnThreadClient *a1)
{
  DgnThreadClient::~DgnThreadClient(a1);
  JUMPOUT(0x20BD149A8);
}

_QWORD *Latch<MemChunkRegion,LatchAdapter>::Latch(_QWORD *a1, uint64_t a2)
{
  void **v4;
  void *v5;
  const void *v6;
  pthread_key_t v7;

  *a1 = a2;
  if (MemChunkRegion::smTlsID == -1)
  {
    v5 = &gGlobalMemChunkRegion;
    goto LABEL_7;
  }
  v4 = (void **)pthread_getspecific(MemChunkRegion::smTlsID);
  if (!v4)
    goto LABEL_5;
  v5 = *v4;
  if (!*v4)
  {
    pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_5:
    v5 = &gGlobalMemChunkRegion;
  }
LABEL_7:
  if (v5 != (void *)a2 && (a2 || v5 != &gGlobalMemChunkRegion))
  {
    if (!a2 || (_UNKNOWN *)a2 == &gGlobalMemChunkRegion)
    {
      v7 = MemChunkRegion::smTlsID;
      v6 = 0;
    }
    else
    {
      v6 = (const void *)(a2 + 1288);
      *(_QWORD *)(a2 + 1288) = a2;
      v7 = MemChunkRegion::smTlsID;
    }
    pthread_setspecific(v7, v6);
  }
  *a1 = v5;
  return a1;
}

uint64_t Latch<MemChunkRegion,LatchAdapter>::release(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  pthread_key_t v5;

  v1 = *(_QWORD **)result;
  if (!*(_QWORD *)result)
    return result;
  v2 = (_QWORD *)result;
  result = MemChunkRegion::smTlsID;
  if (MemChunkRegion::smTlsID == -1)
  {
    v3 = &gGlobalMemChunkRegion;
    goto LABEL_8;
  }
  result = (uint64_t)pthread_getspecific(MemChunkRegion::smTlsID);
  if (!result)
    goto LABEL_6;
  v3 = *(_QWORD **)result;
  if (!*(_QWORD *)result)
  {
    result = pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_6:
    v3 = &gGlobalMemChunkRegion;
  }
LABEL_8:
  if (v3 != v1)
  {
    if (v1 == (_QWORD *)&gGlobalMemChunkRegion)
    {
      v5 = MemChunkRegion::smTlsID;
      v4 = 0;
    }
    else
    {
      v4 = v1 + 161;
      v1[161] = v1;
      v5 = MemChunkRegion::smTlsID;
    }
    result = pthread_setspecific(v5, v4);
  }
  *v2 = 0;
  return result;
}

uint64_t MovingArrayWindow<DgnPrimArray<unsigned char>,DgnArray<DgnPrimArray<unsigned char>>>::~MovingArrayWindow(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a1);
  return a1;
}

uint64_t MovingArrayWindow<DgnPrimArray<double>,DgnArray<DgnPrimArray<double>>>::~MovingArrayWindow(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a1);
  return a1;
}

uint64_t *TResultRelativePosition::TResultRelativePosition(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  if (a5 == -1)
  {
    result[1] = 0;
    result[2] = 0;
    *result = (a4 - a3) >> 3;
  }
  else
  {
    result[1] = 0;
    result[2] = a5;
    v5 = 0;
    if (a4 != a3)
    {
      v6 = (a4 - a3) >> 3;
      if (v6 <= 1)
        v6 = 1;
      while (a5)
      {
        v7 = *(_QWORD *)(a3 + 8 * v5) - 1;
        v8 = *(_QWORD *)(a2 + 40);
        if (v7 >= (*(_QWORD *)(a2 + 48) - v8) >> 3)
          v9 = 0;
        else
          v9 = *(_QWORD **)(v8 + 8 * v7);
        v10 = v9[3];
        v11 = a5 >= v10;
        v12 = a5 - v10;
        if (!v11)
        {
          v13 = v9[13];
          v14 = v9[14];
          *result = v5;
          result[1] = 0;
          if (v14 != v13)
          {
            v15 = 0;
            v16 = (v14 - v13) >> 3;
            do
            {
              if (!a5)
                break;
              v17 = *(_QWORD *)(v13 + 8 * v15);
              v11 = a5 >= v17;
              a5 -= v17;
              if (!v11)
                break;
              v15 += 2;
              result[1] = v15;
              result[2] = a5;
            }
            while (v15 < v16);
          }
          return result;
        }
        result[2] = v12;
        ++v5;
        a5 = v12;
        if (v6 == v5)
        {
          v5 = v6;
          break;
        }
      }
    }
    *result = v5;
  }
  return result;
}

uint64_t TResult::TResult(uint64_t a1, char *a2, _QWORD *a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  _QWORD *v8;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  char isUpper;
  unint64_t v31;
  int v32;
  int v33;
  unsigned __int8 v34;
  __int128 v35;
  unint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  TLocaleInfo *v59;
  uint64_t v60;
  _QWORD *v61;
  std::vector<std::wstring> *v62;
  void **v63;
  _BYTE __v[48];
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v8 = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  v62 = (std::vector<std::wstring> *)(a1 + 32);
  v63 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 80) = 0u;
  v60 = a1 + 80;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)a1 = a6;
  *(_BYTE *)(a1 + 1) = a7;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::wstring>::reserve((std::vector<std::wstring> *)(a1 + 32), (uint64_t)(a3[1] - *a3) >> 3);
  v11 = *v8;
  v61 = v8;
  if (v8[1] != *v8)
  {
    v12 = 0;
    do
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v66, *(__int32 **)(v11 + 8 * v12));
      v14 = *(_QWORD *)(a1 + 40);
      v13 = *(_QWORD *)(a1 + 48);
      if (v14 >= v13)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (unint64_t)v62->__begin_) >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (unint64_t)v62->__begin_) >> 3);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0x555555555555555)
          v19 = 0xAAAAAAAAAAAAAAALL;
        else
          v19 = v17;
        *(_QWORD *)&__v[32] = a1 + 48;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>(a1 + 48, v19);
        else
          v20 = 0;
        v21 = &v20[24 * v16];
        *(_QWORD *)__v = v20;
        *(_QWORD *)&__v[8] = v21;
        *(_QWORD *)&__v[24] = &v20[24 * v19];
        v22 = v66;
        *((_QWORD *)v21 + 2) = v67;
        *(_OWORD *)v21 = v22;
        v67 = 0;
        v66 = 0uLL;
        *(_QWORD *)&__v[16] = v21 + 24;
        std::vector<std::wstring>::__swap_out_circular_buffer(v62, (std::__split_buffer<std::wstring> *)__v);
        v23 = *(_QWORD *)(a1 + 40);
        std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)__v);
        v24 = SHIBYTE(v67);
        *(_QWORD *)(a1 + 40) = v23;
        v8 = v61;
        if (v24 < 0)
          operator delete((void *)v66);
      }
      else
      {
        v15 = v66;
        *(_QWORD *)(v14 + 16) = v67;
        *(_OWORD *)v14 = v15;
        *(_QWORD *)(a1 + 40) = v14 + 24;
      }
      ++v12;
      v11 = *v8;
    }
    while (v12 < (uint64_t)(v8[1] - *v8) >> 3);
  }
  TResult::setText(a1, a2, a4);
  std::vector<TItnControlState>::reserve(v63, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3) + 1);
  v25 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) != v25)
  {
    v26 = 0;
    v27 = 0;
    v28 = (_QWORD *)(a1 + 72);
    do
    {
      v29 = *(_QWORD *)(v25 + 8 * v26) + v27;
      isUpper = 1;
      v31 = v27;
      do
      {
        if (v31 >= v29 || (isUpper & 1) == 0)
          break;
        *(_DWORD *)__v = 0;
        v32 = TLocaleInfo::multiByteToUnicode(*(_QWORD *)(a1 + 8) + 240, (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v31), __v);
        v33 = *(_DWORD *)__v;
        if ((v34 & 1) == 0
        {
          v59 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v59);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v59;
        }
        isUpper = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v33);
        v31 += v32;
      }
      while (v32 != -1);
      *(_QWORD *)&v35 = -1;
      *((_QWORD *)&v35 + 1) = -1;
      *(_OWORD *)&__v[32] = v35;
      v65 = v35;
      *(_OWORD *)__v = v35;
      *(_OWORD *)&__v[16] = v35;
      if ((isUpper & 1) != 0)
        *(_QWORD *)&__v[8 * getItnControlCategory(5) + 32] = 5;
      v25 = *(_QWORD *)(a1 + 104);
      if (*(_QWORD *)(v25 + 8 * (v26 | 1)))
      {
        v36 = 0;
        v37 = *(char **)(a1 + 64);
        do
        {
          if ((unint64_t)v37 >= *v28)
          {
            v41 = (v37 - (_BYTE *)*v63) >> 6;
            if ((unint64_t)(v41 + 1) >> 58)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v42 = *v28 - (_QWORD)*v63;
            v43 = v42 >> 5;
            if (v42 >> 5 <= (unint64_t)(v41 + 1))
              v43 = v41 + 1;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFC0)
              v44 = 0x3FFFFFFFFFFFFFFLL;
            else
              v44 = v43;
            if (v44)
              v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>(a1 + 72, v44);
            else
              v45 = 0;
            v46 = &v45[64 * v41];
            *(_OWORD *)v46 = *(_OWORD *)__v;
            *((_OWORD *)v46 + 1) = *(_OWORD *)&__v[16];
            *((_OWORD *)v46 + 2) = *(_OWORD *)&__v[32];
            *((_OWORD *)v46 + 3) = v65;
            v48 = *(char **)(a1 + 56);
            v47 = *(char **)(a1 + 64);
            v49 = v46;
            if (v47 != v48)
            {
              do
              {
                v50 = *((_OWORD *)v47 - 4);
                v51 = *((_OWORD *)v47 - 3);
                v52 = *((_OWORD *)v47 - 1);
                *((_OWORD *)v49 - 2) = *((_OWORD *)v47 - 2);
                *((_OWORD *)v49 - 1) = v52;
                *((_OWORD *)v49 - 4) = v50;
                *((_OWORD *)v49 - 3) = v51;
                v49 -= 64;
                v47 -= 64;
              }
              while (v47 != v48);
              v47 = (char *)*v63;
            }
            v37 = v46 + 64;
            *(_QWORD *)(a1 + 56) = v49;
            *(_QWORD *)(a1 + 64) = v46 + 64;
            *(_QWORD *)(a1 + 72) = &v45[64 * v44];
            if (v47)
              operator delete(v47);
          }
          else
          {
            v38 = *(_OWORD *)__v;
            v39 = *(_OWORD *)&__v[16];
            v40 = v65;
            *((_OWORD *)v37 + 2) = *(_OWORD *)&__v[32];
            *((_OWORD *)v37 + 3) = v40;
            *(_OWORD *)v37 = v38;
            *((_OWORD *)v37 + 1) = v39;
            v37 += 64;
          }
          *(_QWORD *)(a1 + 64) = v37;
          ++v36;
          v25 = *(_QWORD *)(a1 + 104);
        }
        while (v36 < *(_QWORD *)(v25 + 8 * (v26 | 1)));
      }
      v27 += *(_QWORD *)(v25 + 8 * v26);
      v26 += 2;
    }
    while (v26 < (*(_QWORD *)(a1 + 112) - v25) >> 3);
  }
  v53 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 64) != v53)
  {
    v54 = 0;
    v55 = 0;
    do
    {
      if (TItnControlState::isSet((TItnControlState *)(v53 + v54)))
      {
        if (v55 && TItnControlState::isSet((TItnControlState *)((char *)*v63 + v54 - 64))
          || (v56 = *(_QWORD *)(a1 + 56), v55 + 1 < (*(_QWORD *)(a1 + 64) - v56) >> 6)
          && TItnControlState::isSet((TItnControlState *)(v56 + v54 + 64)))
        {
          v57 = (char *)*v63;
          *(_QWORD *)&v57[8 * getItnControlCategory(5) + 32 + v54] = -1;
          *(_QWORD *)&v57[8 * getItnControlCategory(5) + v54] = 5;
        }
      }
      ++v55;
      v53 = *(_QWORD *)(a1 + 56);
      v54 += 64;
    }
    while (v55 < (*(_QWORD *)(a1 + 64) - v53) >> 6);
  }
  std::vector<unsigned long>::resize(v60, (uint64_t)(v61[1] - *v61) >> 3);
  return a1;
}

void sub_2098B3580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__split_buffer<std::string> *a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, void **a14)
{
  _QWORD *v14;
  uint64_t v15;
  void *v17;
  void *v18;
  void *v19;

  MEMORY[0x20BD149A8](a10, 0x1070C40ADD13FEBLL, a3, a4, a5, a6, a7);
  v17 = (void *)v14[13];
  if (v17)
  {
    v14[14] = v17;
    operator delete(v17);
  }
  v18 = *a11;
  if (*a11)
  {
    v14[11] = v18;
    operator delete(v18);
  }
  v19 = *a14;
  if (*a14)
  {
    v14[8] = v19;
    operator delete(v19);
  }
  *(_QWORD *)(v15 - 104) = a13;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 104));
  _Unwind_Resume(a1);
}

void std::vector<std::wstring>::reserve(std::vector<std::wstring> *this, std::vector<std::wstring>::size_type __n)
{
  std::__compressed_pair<std::wstring *> *p_end_cap;
  std::wstring *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::wstring> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::wstring>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::wstring>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::wstring>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
  }
}

void sub_2098B36F0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

char *TResult::setText(uint64_t a1, char *__s, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  char *v8;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    MEMORY[0x20BD14990](v6, 0x1000C8077774924);
  v7 = strlen(__s);
  v8 = (char *)operator new[]();
  *(_QWORD *)(a1 + 16) = v8;
  strncpy(v8, __s, v7)[v7] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  return std::vector<unsigned long>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((char *)(a1 + 104), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
}

void std::vector<TItnControlState>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 6)
  {
    if (a2 >> 58)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFC0];
    v9 = &v6[64 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 4);
        v14 = *((_OWORD *)v10 - 3);
        v15 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v15;
        *((_OWORD *)v12 - 4) = v13;
        *((_OWORD *)v12 - 3) = v14;
        v12 -= 64;
        v10 -= 64;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t TResult::TResult(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, _QWORD *a5, uint64_t a6, __int128 *a7, char a8, char a9)
{
  size_t v11;
  uint64_t v13;
  size_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  std::vector<std::wstring>::size_type v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  size_t *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  size_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  size_t *v66;
  char *v67;
  size_t v68;
  size_t *v69;
  char *v70;
  size_t v71;
  unint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  char *v88;
  unsigned int *v89;
  int v90;
  size_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char **v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char **v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  int64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  int64_t *v125;
  int64_t v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  _OWORD *v137;
  char *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  unint64_t v156;
  char *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _OWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  char *v172;
  char *v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  size_t v178;
  __int128 *v179;
  int v180;
  void **v181;
  uint64_t v182;
  void **v183;
  char **v184;
  std::vector<std::wstring> *v185;
  char *v186;
  void **v187;
  _BYTE __v[48];
  __int128 v189;
  __int128 v190;
  uint64_t v191;

  v11 = a4;
  v13 = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  v185 = (std::vector<std::wstring> *)(a1 + 32);
  v187 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 80) = 0u;
  v181 = (void **)(a1 + 80);
  v183 = (void **)(a1 + 104);
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 1) = a8;
  if (a9)
    v15 = 3;
  else
    v15 = 1;
  v178 = v15 * a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v15 * a4;
  *(_QWORD *)(a1 + 8) = a6;
  v16 = a4 != 0;
  if (a2)
    v17 = a2 == a3;
  else
    v17 = 1;
  v18 = !v17;
  v180 = v18;
  v19 = 0;
  if (!v17)
  {
    v20 = a2;
    do
    {
      v21 = (unsigned int *)(v20 + 72);
      if (*(char *)(v20 + 95) < 0)
        v21 = *(unsigned int **)v21;
      *(_QWORD *)(a1 + 24) += (int)(TLocaleInfo::unicodeToMultiByte(*(_QWORD *)(a1 + 8) + 240, v21, 0, 0) - 1)
                            + *(_QWORD *)(v20 + 224) * v15;
      v22 = *(_QWORD *)(v20 + 16);
      if (v22 != -1)
        ++v16;
      v20 = *(_QWORD *)(v20 + 144);
      if (!v20 || v20 == a3)
        v19 = v22 - *(_QWORD *)(v13 + 8);
    }
    while (v20 && v20 != a3);
  }
  v182 = a3;
  v179 = a7;
  std::vector<std::wstring>::reserve(v185, v19);
  std::vector<TItnControlState>::reserve(v187, v19 + 1);
  std::vector<unsigned long>::reserve(v181, v19);
  if (v19)
  {
    for (i = 0; i != v19; ++i)
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v190, **(__int32 ***)(*a5 + 112 * (*(_QWORD *)(v13 + 8) + i) + 16));
      v25 = *(_QWORD *)(a1 + 40);
      v24 = *(_QWORD *)(a1 + 48);
      if (v25 >= v24)
      {
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (unint64_t)v185->__begin_) >> 3);
        v28 = v27 + 1;
        if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (unint64_t)v185->__begin_) >> 3);
        if (2 * v29 > v28)
          v28 = 2 * v29;
        if (v29 >= 0x555555555555555)
          v30 = 0xAAAAAAAAAAAAAAALL;
        else
          v30 = v28;
        *(_QWORD *)&__v[32] = a1 + 48;
        if (v30)
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>(a1 + 48, v30);
        else
          v31 = 0;
        v32 = &v31[24 * v27];
        *(_QWORD *)__v = v31;
        *(_QWORD *)&__v[8] = v32;
        *(_QWORD *)&__v[24] = &v31[24 * v30];
        v33 = v190;
        *((_QWORD *)v32 + 2) = v191;
        *(_OWORD *)v32 = v33;
        v191 = 0;
        v190 = 0uLL;
        *(_QWORD *)&__v[16] = v32 + 24;
        std::vector<std::wstring>::__swap_out_circular_buffer(v185, (std::__split_buffer<std::wstring> *)__v);
        v34 = *(_QWORD *)(a1 + 40);
        std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)__v);
        v35 = SHIBYTE(v191);
        *(_QWORD *)(a1 + 40) = v34;
        if (v35 < 0)
          operator delete((void *)v190);
      }
      else
      {
        v26 = v190;
        *(_QWORD *)(v25 + 16) = v191;
        *(_OWORD *)v25 = v26;
        *(_QWORD *)(a1 + 40) = v25 + 24;
      }
      v36 = *(_QWORD *)(*a5 + 112 * (*(_QWORD *)(v13 + 8) + i) + 24);
      v38 = *(char **)(a1 + 88);
      v37 = *(_QWORD *)(a1 + 96);
      if ((unint64_t)v38 >= v37)
      {
        v40 = (char *)*v181;
        v41 = (v38 - (_BYTE *)*v181) >> 3;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v43 = v37 - (_QWORD)v40;
        if (v43 >> 2 > v42)
          v42 = v43 >> 2;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v42;
        if (v44)
        {
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 96, v44);
          v40 = *(char **)(a1 + 80);
          v38 = *(char **)(a1 + 88);
        }
        else
        {
          v45 = 0;
        }
        v46 = &v45[8 * v41];
        *(_QWORD *)v46 = v36;
        v39 = v46 + 8;
        while (v38 != v40)
        {
          v47 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *((_QWORD *)v46 - 1) = v47;
          v46 -= 8;
        }
        *(_QWORD *)(a1 + 80) = v46;
        *(_QWORD *)(a1 + 88) = v39;
        *(_QWORD *)(a1 + 96) = &v45[8 * v44];
        if (v40)
          operator delete(v40);
      }
      else
      {
        *(_QWORD *)v38 = v36;
        v39 = v38 + 8;
      }
      *(_QWORD *)(a1 + 88) = v39;
    }
  }
  v48 = (char *)operator new[]();
  *(_QWORD *)(a1 + 16) = v48;
  std::vector<unsigned long>::reserve(v183, 4 * v16);
  if (v11)
  {
    if (a9)
    {
      do
      {
        strncpy(v48, "　", v15);
        v48 += v15;
        --v11;
      }
      while (v11);
      v49 = *(_QWORD *)(a1 + 120);
      v50 = *(char **)(a1 + 112);
      if ((unint64_t)v50 >= v49)
      {
        v54 = (char *)*v183;
        v55 = (v50 - (_BYTE *)*v183) >> 3;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v57 = v49 - (_QWORD)v54;
        if (v57 >> 2 > v56)
          v56 = v57 >> 2;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
          v58 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 120, v58);
          v54 = *(char **)(a1 + 104);
          v50 = *(char **)(a1 + 112);
        }
        else
        {
          v59 = 0;
        }
        v66 = (size_t *)&v59[8 * v55];
        v67 = &v59[8 * v58];
        *v66 = v178;
        v51 = (char *)(v66 + 1);
        while (v50 != v54)
        {
          v68 = *((_QWORD *)v50 - 1);
          v50 -= 8;
          *--v66 = v68;
        }
        *(_QWORD *)(a1 + 104) = v66;
        *(_QWORD *)(a1 + 112) = v51;
        *(_QWORD *)(a1 + 120) = v67;
        if (v54)
          operator delete(v54);
      }
      else
      {
        *(_QWORD *)v50 = v178;
        v51 = v50 + 8;
      }
    }
    else
    {
      memset(v48, 32, v11);
      v52 = *(_QWORD *)(a1 + 120);
      v53 = *(size_t **)(a1 + 112);
      if ((unint64_t)v53 >= v52)
      {
        v60 = (size_t *)*v183;
        v61 = ((char *)v53 - (_BYTE *)*v183) >> 3;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v63 = v52 - (_QWORD)v60;
        if (v63 >> 2 > v62)
          v62 = v63 >> 2;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v64 = v62;
        if (v64)
        {
          v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 120, v64);
          v60 = *(size_t **)(a1 + 104);
          v53 = *(size_t **)(a1 + 112);
        }
        else
        {
          v65 = 0;
        }
        v69 = (size_t *)&v65[8 * v61];
        v70 = &v65[8 * v64];
        *v69 = v11;
        v51 = (char *)(v69 + 1);
        while (v53 != v60)
        {
          v71 = *--v53;
          *--v69 = v71;
        }
        *(_QWORD *)(a1 + 104) = v69;
        *(_QWORD *)(a1 + 112) = v51;
        *(_QWORD *)(a1 + 120) = v70;
        if (v60)
          operator delete(v60);
      }
      else
      {
        *v53 = v11;
        v51 = (char *)(v53 + 1);
      }
      v48 += v11;
    }
    *(_QWORD *)(a1 + 112) = v51;
    v72 = *(_QWORD *)(a1 + 120);
    if ((unint64_t)v51 >= v72)
    {
      v74 = (char *)*v183;
      v75 = (v51 - (_BYTE *)*v183) >> 3;
      v76 = v75 + 1;
      if ((unint64_t)(v75 + 1) >> 61)
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v77 = v72 - (_QWORD)v74;
      if (v77 >> 2 > v76)
        v76 = v77 >> 2;
      if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
        v78 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v78 = v76;
      if (v78)
      {
        v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 120, v78);
        v74 = *(char **)(a1 + 104);
        v51 = *(char **)(a1 + 112);
      }
      else
      {
        v79 = 0;
      }
      v80 = &v79[8 * v75];
      v81 = &v79[8 * v78];
      *(_QWORD *)v80 = 0;
      v73 = v80 + 8;
      while (v51 != v74)
      {
        v82 = *((_QWORD *)v51 - 1);
        v51 -= 8;
        *((_QWORD *)v80 - 1) = v82;
        v80 -= 8;
      }
      *(_QWORD *)(a1 + 104) = v80;
      *(_QWORD *)(a1 + 112) = v73;
      *(_QWORD *)(a1 + 120) = v81;
      if (v74)
        operator delete(v74);
    }
    else
    {
      *(_QWORD *)v51 = 0;
      v73 = v51 + 8;
    }
    *(_QWORD *)(a1 + 112) = v73;
  }
  if (v180)
  {
    v83 = 0;
    v184 = (char **)(a1 + 120);
    v84 = (_QWORD *)(a1 + 72);
    v186 = v48;
    v85 = (uint64_t *)v48;
    do
    {
      v86 = *(_QWORD *)(v13 + 8);
      v87 = (uint64_t *)v186;
      if (v86 != -1)
        v87 = v85;
      v186 = (char *)v87;
      if (v86 == -1)
        v88 = v48;
      else
        v88 = (char *)v85;
      if (v86 != -1)
        v83 = *(_QWORD *)(v13 + 8);
      v89 = (unsigned int *)(v13 + 72);
      if (*(char *)(v13 + 95) < 0)
        v89 = *(unsigned int **)v89;
      v90 = TLocaleInfo::unicodeToMultiByte(*(_QWORD *)(a1 + 8) + 240, v89, v85, *(_QWORD *)(a1 + 24) + 1);
      v85 = (uint64_t *)((char *)v85 + v90 - 1);
      if (v90 == 1)
        v48 = v88;
      else
        v48 = (char *)v85;
      v91 = *(_QWORD *)(v13 + 224);
      if (a9)
      {
        if (v91)
        {
          v92 = 0;
          do
          {
            strncpy((char *)v85, "　", v15);
            v85 = (uint64_t *)((char *)v85 + v15);
            ++v92;
          }
          while (v92 < *(_QWORD *)(v13 + 224));
        }
      }
      else
      {
        if (v91)
        {
          memset(v85, 32, v91);
          v93 = *(_QWORD *)(v13 + 224);
        }
        else
        {
          v93 = 0;
        }
        v85 = (uint64_t *)((char *)v85 + v93);
      }
      if (*(_QWORD *)(v13 + 16) != -1)
      {
        v94 = (char *)(v48 - v186);
        v96 = *(char ***)(a1 + 112);
        v95 = *(char **)(a1 + 120);
        if (v96 >= (char **)v95)
        {
          v98 = (char *)*v183;
          v99 = ((char *)v96 - (_BYTE *)*v183) >> 3;
          v100 = v99 + 1;
          if ((unint64_t)(v99 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v101 = v95 - v98;
          if (v101 >> 2 > v100)
            v100 = v101 >> 2;
          if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
            v102 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v102 = v100;
          if (v102)
          {
            v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v184, v102);
            v98 = *(char **)(a1 + 104);
            v96 = *(char ***)(a1 + 112);
          }
          else
          {
            v103 = 0;
          }
          v104 = (char **)&v103[8 * v99];
          *v104 = v94;
          v97 = (char *)(v104 + 1);
          while (v96 != (char **)v98)
          {
            v105 = *--v96;
            *--v104 = v105;
          }
          v95 = &v103[8 * v102];
          *(_QWORD *)(a1 + 104) = v104;
          *(_QWORD *)(a1 + 112) = v97;
          *(_QWORD *)(a1 + 120) = v95;
          if (v98)
          {
            operator delete(v98);
            v95 = *v184;
          }
        }
        else
        {
          *v96 = v94;
          v97 = (char *)(v96 + 1);
        }
        *(_QWORD *)(a1 + 112) = v97;
        v106 = *(_QWORD *)(v13 + 16) - v83;
        if (v97 >= v95)
        {
          v108 = (char *)*v183;
          v109 = (v97 - (_BYTE *)*v183) >> 3;
          v110 = v109 + 1;
          if ((unint64_t)(v109 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v111 = v95 - v108;
          if (v111 >> 2 > v110)
            v110 = v111 >> 2;
          if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
            v112 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v112 = v110;
          if (v112)
          {
            v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v184, v112);
            v108 = *(char **)(a1 + 104);
            v97 = *(char **)(a1 + 112);
          }
          else
          {
            v113 = 0;
          }
          v114 = &v113[8 * v109];
          *(_QWORD *)v114 = v106;
          v107 = v114 + 8;
          while (v97 != v108)
          {
            v115 = *((_QWORD *)v97 - 1);
            v97 -= 8;
            *((_QWORD *)v114 - 1) = v115;
            v114 -= 8;
          }
          *(_QWORD *)(a1 + 104) = v114;
          *(_QWORD *)(a1 + 112) = v107;
          *(_QWORD *)(a1 + 120) = &v113[8 * v112];
          if (v108)
            operator delete(v108);
        }
        else
        {
          *(_QWORD *)v97 = v106;
          v107 = v97 + 8;
        }
        *(_QWORD *)(a1 + 112) = v107;
        v116 = (char *)v85 - v48;
        if (v85 != (uint64_t *)v48)
        {
          v117 = *v184;
          if (v107 >= *v184)
          {
            v119 = (char *)*v183;
            v120 = (v107 - (_BYTE *)*v183) >> 3;
            v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v122 = v117 - v119;
            if (v122 >> 2 > v121)
              v121 = v122 >> 2;
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8)
              v123 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v123 = v121;
            if (v123)
            {
              v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v184, v123);
              v119 = *(char **)(a1 + 104);
              v107 = *(char **)(a1 + 112);
            }
            else
            {
              v124 = 0;
            }
            v125 = (int64_t *)&v124[8 * v120];
            *v125 = v116;
            v118 = (char *)(v125 + 1);
            while (v107 != v119)
            {
              v126 = *((_QWORD *)v107 - 1);
              v107 -= 8;
              *--v125 = v126;
            }
            v117 = &v124[8 * v123];
            *(_QWORD *)(a1 + 104) = v125;
            *(_QWORD *)(a1 + 112) = v118;
            *(_QWORD *)(a1 + 120) = v117;
            if (v119)
            {
              operator delete(v119);
              v117 = *v184;
            }
          }
          else
          {
            *(_QWORD *)v107 = v116;
            v118 = v107 + 8;
          }
          *(_QWORD *)(a1 + 112) = v118;
          if (v118 >= v117)
          {
            v128 = (char *)*v183;
            v129 = (v118 - (_BYTE *)*v183) >> 3;
            v130 = v129 + 1;
            if ((unint64_t)(v129 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v131 = v117 - v128;
            if (v131 >> 2 > v130)
              v130 = v131 >> 2;
            if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8)
              v132 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v132 = v130;
            if (v132)
            {
              v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v184, v132);
              v128 = *(char **)(a1 + 104);
              v118 = *(char **)(a1 + 112);
            }
            else
            {
              v133 = 0;
            }
            v134 = &v133[8 * v129];
            *(_QWORD *)v134 = 0;
            v127 = v134 + 8;
            while (v118 != v128)
            {
              v135 = *((_QWORD *)v118 - 1);
              v118 -= 8;
              *((_QWORD *)v134 - 1) = v135;
              v134 -= 8;
            }
            *(_QWORD *)(a1 + 104) = v134;
            *(_QWORD *)(a1 + 112) = v127;
            *(_QWORD *)(a1 + 120) = &v133[8 * v132];
            if (v128)
              operator delete(v128);
          }
          else
          {
            *(_QWORD *)v118 = 0;
            v127 = v118 + 8;
          }
          *(_QWORD *)(a1 + 112) = v127;
        }
        if (*(_QWORD *)(v13 + 16) != v83)
        {
          v136 = 0;
          v137 = (_OWORD *)(v13 + 160);
          v138 = *(char **)(a1 + 64);
          do
          {
            v139 = *(_OWORD *)(v13 + 176);
            *(_OWORD *)__v = *v137;
            *(_OWORD *)&__v[16] = v139;
            v140 = *(_OWORD *)(v13 + 208);
            *(_OWORD *)&__v[32] = *(_OWORD *)(v13 + 192);
            v189 = v140;
            if ((unint64_t)v138 >= *v84)
            {
              v144 = (v138 - (_BYTE *)*v187) >> 6;
              if ((unint64_t)(v144 + 1) >> 58)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v145 = *v84 - (_QWORD)*v187;
              v146 = v145 >> 5;
              if (v145 >> 5 <= (unint64_t)(v144 + 1))
                v146 = v144 + 1;
              if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFC0)
                v147 = 0x3FFFFFFFFFFFFFFLL;
              else
                v147 = v146;
              if (v147)
                v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>(a1 + 72, v147);
              else
                v148 = 0;
              v149 = &v148[64 * v144];
              *(_OWORD *)v149 = *(_OWORD *)__v;
              *((_OWORD *)v149 + 1) = *(_OWORD *)&__v[16];
              *((_OWORD *)v149 + 2) = *(_OWORD *)&__v[32];
              *((_OWORD *)v149 + 3) = v189;
              v151 = *(char **)(a1 + 56);
              v150 = *(char **)(a1 + 64);
              v152 = v149;
              if (v150 != v151)
              {
                do
                {
                  v153 = *((_OWORD *)v150 - 4);
                  v154 = *((_OWORD *)v150 - 3);
                  v155 = *((_OWORD *)v150 - 1);
                  *((_OWORD *)v152 - 2) = *((_OWORD *)v150 - 2);
                  *((_OWORD *)v152 - 1) = v155;
                  *((_OWORD *)v152 - 4) = v153;
                  *((_OWORD *)v152 - 3) = v154;
                  v152 -= 64;
                  v150 -= 64;
                }
                while (v150 != v151);
                v150 = (char *)*v187;
              }
              v138 = v149 + 64;
              *(_QWORD *)(a1 + 56) = v152;
              *(_QWORD *)(a1 + 64) = v149 + 64;
              *(_QWORD *)(a1 + 72) = &v148[64 * v147];
              if (v150)
                operator delete(v150);
            }
            else
            {
              v141 = *v137;
              v142 = *(_OWORD *)(v13 + 176);
              v143 = *(_OWORD *)(v13 + 208);
              *((_OWORD *)v138 + 2) = *(_OWORD *)(v13 + 192);
              *((_OWORD *)v138 + 3) = v143;
              *(_OWORD *)v138 = v141;
              *((_OWORD *)v138 + 1) = v142;
              v138 += 64;
            }
            *(_QWORD *)(a1 + 64) = v138;
            ++v136;
          }
          while (v136 < *(_QWORD *)(v13 + 16) - v83);
        }
      }
      v13 = *(_QWORD *)(v13 + 144);
    }
    while (v13 && v13 != v182);
  }
  else
  {
    v85 = (uint64_t *)v48;
  }
  v156 = *(_QWORD *)(a1 + 72);
  v157 = *(char **)(a1 + 64);
  if ((unint64_t)v157 >= v156)
  {
    v162 = (v157 - (_BYTE *)*v187) >> 6;
    v163 = v162 + 1;
    if ((unint64_t)(v162 + 1) >> 58)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v164 = v156 - (_QWORD)*v187;
    if (v164 >> 5 > v163)
      v163 = v164 >> 5;
    if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFC0)
      v165 = 0x3FFFFFFFFFFFFFFLL;
    else
      v165 = v163;
    if (v165)
      v166 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>(a1 + 72, v165);
    else
      v166 = 0;
    v167 = &v166[64 * v162];
    v168 = &v166[64 * v165];
    v169 = *v179;
    v170 = v179[1];
    v171 = v179[3];
    *((_OWORD *)v167 + 2) = v179[2];
    *((_OWORD *)v167 + 3) = v171;
    *(_OWORD *)v167 = v169;
    *((_OWORD *)v167 + 1) = v170;
    v161 = v167 + 64;
    v173 = *(char **)(a1 + 56);
    v172 = *(char **)(a1 + 64);
    if (v172 != v173)
    {
      do
      {
        v174 = *((_OWORD *)v172 - 4);
        v175 = *((_OWORD *)v172 - 3);
        v176 = *((_OWORD *)v172 - 1);
        *((_OWORD *)v167 - 2) = *((_OWORD *)v172 - 2);
        *((_OWORD *)v167 - 1) = v176;
        *((_OWORD *)v167 - 4) = v174;
        *((_OWORD *)v167 - 3) = v175;
        v167 -= 64;
        v172 -= 64;
      }
      while (v172 != v173);
      v172 = (char *)*v187;
    }
    *(_QWORD *)(a1 + 56) = v167;
    *(_QWORD *)(a1 + 64) = v161;
    *(_QWORD *)(a1 + 72) = v168;
    if (v172)
      operator delete(v172);
  }
  else
  {
    v158 = *v179;
    v159 = v179[1];
    v160 = v179[3];
    *((_OWORD *)v157 + 2) = v179[2];
    *((_OWORD *)v157 + 3) = v160;
    *(_OWORD *)v157 = v158;
    *((_OWORD *)v157 + 1) = v159;
    v161 = v157 + 64;
  }
  *(_QWORD *)(a1 + 64) = v161;
  *(_BYTE *)v85 = 0;
  return a1;
}

void sub_2098B449C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__split_buffer<std::string> *a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  _QWORD *v20;
  uint64_t v21;
  void *v23;
  std::__split_buffer<std::string>::pointer first;
  void *v25;

  v23 = *a16;
  if (*a16)
  {
    v20[14] = v23;
    operator delete(v23);
  }
  first = a13->__first_;
  if (a13->__first_)
  {
    v20[11] = first;
    operator delete(first);
  }
  v25 = *a20;
  if (*a20)
  {
    v20[8] = v25;
    operator delete(v25);
  }
  *(_QWORD *)(v21 - 112) = a18;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 112));
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void TResult::TResult(TResult *this, const TResult *a2, const TResult *a3)
{
  std::vector<std::wstring> *v6;
  void **v7;
  BOOL v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  *((_OWORD *)this + 2) = 0u;
  v6 = (std::vector<std::wstring> *)((char *)this + 32);
  *((_OWORD *)this + 5) = 0u;
  v7 = (void **)((char *)this + 80);
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  if (*(_BYTE *)a2)
    v8 = 1;
  else
    v8 = *(_BYTE *)a3 != 0;
  *(_BYTE *)this = v8;
  *((_BYTE *)this + 1) = *((_BYTE *)a2 + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 3) = *((_QWORD *)a3 + 3) + *((_QWORD *)a2 + 3);
  v9 = (char *)operator new[]();
  *((_QWORD *)this + 2) = v9;
  v10 = strcpy(v9, *((const char **)a2 + 2));
  strcpy(&v10[*((_QWORD *)a2 + 3)], *((const char **)a3 + 2));
  std::vector<unsigned long>::reserve((void **)&v6[3].__begin_, ((uint64_t)(*((_QWORD *)a3 + 14) - *((_QWORD *)a3 + 13)) >> 3)+ ((uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3));
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((char *)&v6[3], *((char **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
  v11 = 0;
  v13 = (char *)*((_QWORD *)a3 + 13);
  v12 = (char *)*((_QWORD *)a3 + 14);
  if (*((_QWORD *)a2 + 13) != *((_QWORD *)a2 + 14) && v13 != v12)
  {
    v14 = *((_QWORD *)this + 14);
    if (*(_QWORD *)(v14 - 8) || *((_QWORD *)v13 + 1))
    {
      v11 = 0;
    }
    else
    {
      *(_QWORD *)(v14 - 16) += *(_QWORD *)v13;
      v11 = 2;
    }
  }
  std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&v6[3], *((_QWORD *)this + 14), &v13[8 * v11], v12, (v12 - &v13[8 * v11]) >> 3);
  std::vector<std::wstring>::reserve(v6, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3)- 0x5555555555555555 * ((uint64_t)(*((_QWORD *)a3 + 5) - *((_QWORD *)a3 + 4)) >> 3));
  std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::wstring const*>,std::__wrap_iter<std::wstring const*>>(v6, *((std::wstring **)a2 + 4), *((__int128 **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  std::vector<std::wstring>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::wstring const*>,std::__wrap_iter<std::wstring const*>>(v6, *((std::wstring **)this + 5), *((std::wstring **)a3 + 4), *((__int128 **)a3 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 5) - *((_QWORD *)a3 + 4)) >> 3));
  std::vector<TItnControlState>::reserve((void **)&v6[1].__begin_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3)+ ((uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 6));
  v15 = (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3;
  std::vector<TItnControlState>::__assign_with_size[abi:ne180100]<std::__wrap_iter<TItnControlState const*>,std::__wrap_iter<TItnControlState const*>>((char *)&v6[1], *((char **)a2 + 7), *((_QWORD *)a2 + 7) - 0x5555555555555540 * v15, 0xAAAAAAAAAAAAAAABLL * v15);
  std::vector<TItnControlState>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TItnControlState const*>,std::__wrap_iter<TItnControlState const*>>((uint64_t)&v6[1], *((_QWORD *)this + 8), *((char **)a3 + 7), *((char **)a3 + 8), (uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 6);
  std::vector<unsigned long>::reserve(v7, ((uint64_t)(*((_QWORD *)a3 + 11) - *((_QWORD *)a3 + 10)) >> 3)+ ((uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3));
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((char *)v7, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
  std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)v7, *((_QWORD *)this + 11), *((char **)a3 + 10), *((char **)a3 + 11), (uint64_t)(*((_QWORD *)a3 + 11) - *((_QWORD *)a3 + 10)) >> 3);
}

void sub_2098B488C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a2);
  v7 = *v5;
  if (*v5)
  {
    v2[14] = v7;
    operator delete(v7);
  }
  v8 = *v3;
  if (*v3)
  {
    v2[11] = v8;
    operator delete(v8);
  }
  v9 = *v4;
  if (*v4)
  {
    v2[8] = v9;
    operator delete(v9);
  }
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void TResult::TResult(TResult *this, const TResult *a2, unint64_t a3, unint64_t a4)
{
  void **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t i;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  std::vector<std::wstring> *v44;
  char *v45;
  void **v46;

  *((_OWORD *)this + 2) = 0u;
  v44 = (std::vector<std::wstring> *)((char *)this + 32);
  *((_OWORD *)this + 5) = 0u;
  v7 = (void **)((char *)this + 80);
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_WORD *)this = *(_WORD *)a2;
  v8 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = v8;
  v9 = *((_QWORD *)a2 + 13);
  if ((*((_QWORD *)a2 + 14) - v9) >> 3 >= a4)
    v10 = a4;
  else
    v10 = (*((_QWORD *)a2 + 14) - v9) >> 3;
  if (a3)
  {
    v11 = 0;
    v12 = 0;
    for (i = 0; i < a3; i += 2)
    {
      v14 = (_QWORD *)(v9 + 8 * i);
      v11 += *v14;
      v12 += v14[1];
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  if (v10 <= a3)
  {
    v16 = 0;
    v15 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = a3;
    do
    {
      v18 = (_QWORD *)(v9 + 8 * v17);
      v15 += *v18;
      v16 += v18[1];
      v17 += 2;
    }
    while (v17 < v10);
  }
  v45 = (char *)this + 104;
  v46 = (void **)((char *)this + 56);
  v19 = (char *)operator new[]();
  *((_QWORD *)this + 2) = v19;
  strncpy(v19, (const char *)(*((_QWORD *)a2 + 2) + v11), v15)[v15] = 0;
  *((_QWORD *)this + 3) = v15;
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(v45, (char *)(*((_QWORD *)a2 + 13) + 8 * a3), *((_QWORD *)a2 + 13) + 8 * v10, v10 - a3);
  std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::wstring const*>,std::__wrap_iter<std::wstring const*>>(v44, (std::wstring *)(*((_QWORD *)a2 + 4) + 24 * v12), (__int128 *)(*((_QWORD *)a2 + 4) + 24 * v12 + 24 * v16), v16);
  std::vector<TItnControlState>::reserve(v46, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3) + 1);
  std::vector<TItnControlState>::__assign_with_size[abi:ne180100]<std::__wrap_iter<TItnControlState const*>,std::__wrap_iter<TItnControlState const*>>((char *)v46, (char *)(*((_QWORD *)a2 + 7) + (v12 << 6)), *((_QWORD *)a2 + 7) + (v12 << 6) + (v16 << 6), v16);
  if (v10 == (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3)
  {
    v20 = *((_QWORD *)a2 + 8);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3) != (v20 - *((_QWORD *)a2 + 7)) >> 6)
    {
      v21 = (__int128 *)(v20 - 64);
      v22 = *((_QWORD *)this + 9);
      v23 = (char *)*((_QWORD *)this + 8);
      if ((unint64_t)v23 >= v22)
      {
        v28 = (v23 - (_BYTE *)*v46) >> 6;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 58)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v30 = v22 - (_QWORD)*v46;
        if (v30 >> 5 > v29)
          v29 = v30 >> 5;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFC0)
          v31 = 0x3FFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>((uint64_t)this + 72, v31);
        else
          v32 = 0;
        v33 = &v32[64 * v28];
        v34 = &v32[64 * v31];
        v35 = *v21;
        v36 = v21[1];
        v37 = v21[3];
        *((_OWORD *)v33 + 2) = v21[2];
        *((_OWORD *)v33 + 3) = v37;
        *(_OWORD *)v33 = v35;
        *((_OWORD *)v33 + 1) = v36;
        v27 = v33 + 64;
        v39 = (char *)*((_QWORD *)this + 7);
        v38 = (char *)*((_QWORD *)this + 8);
        if (v38 != v39)
        {
          do
          {
            v40 = *((_OWORD *)v38 - 4);
            v41 = *((_OWORD *)v38 - 3);
            v42 = *((_OWORD *)v38 - 1);
            *((_OWORD *)v33 - 2) = *((_OWORD *)v38 - 2);
            *((_OWORD *)v33 - 1) = v42;
            *((_OWORD *)v33 - 4) = v40;
            *((_OWORD *)v33 - 3) = v41;
            v33 -= 64;
            v38 -= 64;
          }
          while (v38 != v39);
          v38 = (char *)*v46;
        }
        *((_QWORD *)this + 7) = v33;
        *((_QWORD *)this + 8) = v27;
        *((_QWORD *)this + 9) = v34;
        if (v38)
          operator delete(v38);
      }
      else
      {
        v24 = *v21;
        v25 = v21[1];
        v26 = v21[3];
        *((_OWORD *)v23 + 2) = v21[2];
        *((_OWORD *)v23 + 3) = v26;
        *(_OWORD *)v23 = v24;
        *((_OWORD *)v23 + 1) = v25;
        v27 = v23 + 64;
      }
      *((_QWORD *)this + 8) = v27;
    }
  }
  std::vector<unsigned long>::reserve(v7, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3));
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((char *)v7, (char *)(*((_QWORD *)a2 + 10) + 8 * v12), *((_QWORD *)a2 + 10) + 8 * v12 + 8 * v16, v16);
  v43 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 10) != v43)
    *(_QWORD *)(v43 - 8) = 1000;
}

void sub_2098B4C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12)
{
  _QWORD *v12;
  void **v13;
  void *v15;
  void *v16;
  void *v17;

  v15 = *a10;
  if (*a10)
  {
    v12[14] = v15;
    operator delete(v15);
  }
  v16 = *v13;
  if (*v13)
  {
    v12[11] = v16;
    operator delete(v16);
  }
  v17 = *a11;
  if (*a11)
  {
    v12[8] = v17;
    operator delete(v17);
  }
  a12 = a9;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void TResult::TResult(TResult *this, const char *__s1, unint64_t a3, TLexicon *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  int v25;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  int v33;
  unsigned int *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  char v39;
  unsigned int *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  __int32 *v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  __int128 v85;
  int v86;
  unsigned __int8 *v87;
  uint64_t v88;
  __int32 *v89;
  const __int32 *v90;
  char *v91;
  void *v92;
  int64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  __int32 **v97;
  char *v98;
  char *v99;
  __int32 *v100;
  __int32 ***v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  __int128 v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  __int128 v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unsigned int *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  _OWORD *v144;
  unint64_t v145;
  _OWORD *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  char *v159;
  char *v160;
  unint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  _OWORD *v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const char *v186;
  unint64_t v187;
  int v188;
  _BYTE *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int *v195;
  unint64_t v196;
  int v197;
  _DWORD *v198;
  uint64_t ActiveConfigHandle;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int8 *v208;
  __int32 *v209;
  unint64_t v210;
  unint64_t v211;
  __int128 v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  __int128 v220;
  int v221;
  unsigned __int8 *v222;
  uint64_t v223;
  __int32 *v224;
  const __int32 *v225;
  char *v226;
  void *v227;
  int64_t v228;
  unint64_t v229;
  unint64_t v230;
  char *v231;
  __int32 **v232;
  char *v233;
  char *v234;
  __int32 *v235;
  __int32 ***v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  __int128 v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  char *v246;
  __int128 v247;
  uint64_t v248;
  int v249;
  unsigned int *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  const char *v267;
  unint64_t v268;
  uint64_t v269;
  char *v270;
  char *v271;
  unint64_t v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  _OWORD *v277;
  unint64_t v278;
  _OWORD *v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  char *v285;
  char *v286;
  char *v287;
  char *v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  const char *v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  const char *v378;
  _QWORD *exception;
  std::string *v380;
  const char *v381;
  _QWORD *v382;
  std::string *v383;
  const char *v384;
  _QWORD *v385;
  std::string *v386;
  const char *v387;
  _QWORD *v388;
  std::string *v389;
  const char *v390;
  _QWORD *v391;
  std::string *v392;
  const char *v393;
  _QWORD *v394;
  std::string *v395;
  const char *v396;
  _QWORD *v397;
  std::string *v398;
  const char *v399;
  _QWORD *v400;
  std::string *v401;
  const char *v402;
  _QWORD *v403;
  std::string *v404;
  const char *v405;
  _QWORD *v406;
  std::string *v407;
  const char *v408;
  _QWORD *v409;
  std::string *v410;
  const char *v411;
  _QWORD *v412;
  std::string *v413;
  const char *v414;
  _QWORD *v415;
  std::string *v416;
  const char *v417;
  _QWORD *v418;
  std::string *v419;
  const char *v420;
  _QWORD *v421;
  std::string *v422;
  const char *v423;
  _QWORD *v424;
  std::string *v425;
  const char *v426;
  _QWORD *v427;
  std::string *v428;
  const char *v429;
  _QWORD *v430;
  std::string *v431;
  const char *v432;
  _QWORD *v433;
  std::string *v434;
  const char *v435;
  _QWORD *v436;
  std::string *v437;
  const char *v438;
  _QWORD *v439;
  std::string *v440;
  const char *v441;
  _QWORD *v442;
  std::string *v443;
  const char *v444;
  _QWORD *v445;
  std::string *v446;
  const char *v447;
  _QWORD *v448;
  std::string *v449;
  const char *v450;
  _QWORD *v451;
  std::string *v452;
  const char *v453;
  _QWORD *v454;
  std::string *v455;
  const char *v456;
  _QWORD *v457;
  std::string *v458;
  const char *v459;
  _QWORD *v460;
  std::string *v461;
  const char *v462;
  _QWORD *v463;
  std::string *v464;
  const char *v465;
  _QWORD *v466;
  std::string *v467;
  const char *v468;
  _QWORD *v469;
  std::string *v470;
  const char *v471;
  _QWORD *v472;
  std::string *v473;
  const char *v474;
  _QWORD *v475;
  std::string *v476;
  const char *v477;
  _QWORD *v478;
  std::string *v479;
  const char *v480;
  _QWORD *v481;
  std::string *v482;
  const char *v483;
  _QWORD *v484;
  std::string *v485;
  const char *v486;
  _QWORD *v487;
  std::string *v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  _BOOL4 v526;
  _BOOL4 v527;
  _QWORD *v528;
  const char *v529;
  const char *v530;
  _QWORD *v531;
  const char *v532;
  char **v533;
  char **v534;
  std::vector<std::wstring> *v535;
  void *v536[2];
  uint64_t v537;
  void *v538;
  _BYTE *v539;
  uint64_t v540;
  void *__p[2];
  char *v542;
  int v543[10];
  _BYTE v544[32];
  __int128 v545;
  __int128 v546;
  char v547;
  _BYTE v548[16];
  uint64_t v549;
  _BYTE __src[32];
  __int128 v551;
  __int128 v552;
  unsigned __int8 v553;
  uint64_t v554;

  v554 = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)this + 2) = 0u;
  v535 = (std::vector<std::wstring> *)((char *)this + 32);
  *((_OWORD *)this + 5) = 0u;
  v531 = (_QWORD *)((char *)this + 80);
  v528 = (_QWORD *)((char *)this + 104);
  *(_WORD *)this = 0;
  *((_OWORD *)this + 1) = 0u;
  v533 = (char **)((char *)this + 16);
  v534 = (char **)((char *)this + 56);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 1) = a4;
  v6 = SERIALIZE_NAME;
  if (a3 <= 0x1B)
  {
    tknPrintf("Error: Serialization buffer too small to hold data of type %s\n", (uint64_t)__s1, a3, (uint64_t)a4, a5, SERIALIZE_NAME);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v378 = &v544[8];
    else
      v378 = *(const char **)&v544[8];
    conditionalAssert(v378, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 832, v299, v300);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *exception = aPpx;
    v380 = (std::string *)(exception + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v380, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v489 = *(_OWORD *)v544;
      exception[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v380->__r_.__value_.__l.__data_ = v489;
    }
    *exception = &unk_24C214BA0;
  }
  if (strcmp(__s1, (const char *)SERIALIZE_NAME))
  {
    tknPrintf("Error: Expected %s, found %s\n", v10, v11, v12, v13, v6, __s1);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v381 = &v544[8];
    else
      v381 = *(const char **)&v544[8];
    conditionalAssert(v381, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 839, v301, v302);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v382 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v382 = aPpx;
    v383 = (std::string *)(v382 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v383, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v490 = *(_OWORD *)v544;
      v382[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v383->__r_.__value_.__l.__data_ = v490;
    }
    *v382 = &unk_24C214BA0;
  }
  v532 = __s1;
  v14 = *((_DWORD *)__s1 + 4);
  if ((v14 - 5) <= 0xFFFFFFFB)
  {
    tknPrintf("Error: Expected version [%u,%u], found %u\n", v10, v11, v12, v13, 1, 4, *((unsigned int *)__s1 + 4));
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v384 = &v544[8];
    else
      v384 = *(const char **)&v544[8];
    conditionalAssert(v384, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 846, v303, v304);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v385 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v385 = aPpx;
    v386 = (std::string *)(v385 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v386, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v491 = *(_OWORD *)v544;
      v385[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v386->__r_.__value_.__l.__data_ = v491;
    }
    *v385 = &unk_24C214BA0;
  }
  if (v14 == 4)
  {
    if (a3 <= 0x1F)
    {
      tknPrintf("Error: Serialization buffer too small to hold data of type %s\n", v10, v11, v12, v13, v6);
      std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
      *(_QWORD *)v544 = aPpx;
      if ((__src[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
      }
      else
      {
        *(_OWORD *)&v544[8] = *(_OWORD *)__src;
        *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
      }
      *(_QWORD *)v544 = &unk_24C214BA0;
      if (v544[31] >= 0)
        v417 = &v544[8];
      else
        v417 = *(const char **)&v544[8];
      conditionalAssert(v417, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1179, v325, v326);
      *(_QWORD *)v544 = aPpx;
      if ((v544[31] & 0x80000000) != 0)
        operator delete(*(void **)&v544[8]);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      v418 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
      *v418 = aPpx;
      v419 = (std::string *)(v418 + 1);
      if ((v544[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v419, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
      }
      else
      {
        v502 = *(_OWORD *)v544;
        v418[3] = *(_QWORD *)&v544[16];
        *(_OWORD *)&v419->__r_.__value_.__l.__data_ = v502;
      }
      *v418 = &unk_24C214BA0;
    }
    if (*((_DWORD *)__s1 + 5) != a3)
    {
      tknPrintf("Error: Buffer is corrupted, size mismatch\n", v10, v11, v12, v13);
      std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
      *(_QWORD *)v544 = aPpx;
      if ((__src[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
      }
      else
      {
        *(_OWORD *)&v544[8] = *(_OWORD *)__src;
        *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
      }
      *(_QWORD *)v544 = &unk_24C214BA0;
      if (v544[31] >= 0)
        v426 = &v544[8];
      else
        v426 = *(const char **)&v544[8];
      conditionalAssert(v426, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1187, v331, v332);
      *(_QWORD *)v544 = aPpx;
      if ((v544[31] & 0x80000000) != 0)
        operator delete(*(void **)&v544[8]);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      v427 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
      *v427 = aPpx;
      v428 = (std::string *)(v427 + 1);
      if ((v544[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v428, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
      }
      else
      {
        v505 = *(_OWORD *)v544;
        v427[3] = *(_QWORD *)&v544[16];
        *(_OWORD *)&v428->__r_.__value_.__l.__data_ = v505;
      }
      *v427 = &unk_24C214BA0;
    }
    v15 = *((_DWORD *)__s1 + 6);
    v16 = *((_DWORD *)a4 + 76);
    v18 = (v15 & 4) == 0 && v16 == 2;
    if ((v15 & 4) != 0 && v16 != 2)
    {
      tknPrintf("Error: Encoding mismatch: deserializing UTF-8 result with non UTF-8 model\n", v10, v11, v12, v13);
      std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
      *(_QWORD *)v544 = aPpx;
      if ((__src[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
      }
      else
      {
        *(_OWORD *)&v544[8] = *(_OWORD *)__src;
        *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
      }
      *(_QWORD *)v544 = &unk_24C214BA0;
      if (v544[31] >= 0)
        v429 = &v544[8];
      else
        v429 = *(const char **)&v544[8];
      conditionalAssert(v429, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1196, v333, v334);
      *(_QWORD *)v544 = aPpx;
      if ((v544[31] & 0x80000000) != 0)
        operator delete(*(void **)&v544[8]);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      v430 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
      *v430 = aPpx;
      v431 = (std::string *)(v430 + 1);
      if ((v544[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v431, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
      }
      else
      {
        v506 = *(_OWORD *)v544;
        v430[3] = *(_QWORD *)&v544[16];
        *(_OWORD *)&v431->__r_.__value_.__l.__data_ = v506;
      }
      *v430 = &unk_24C214BA0;
    }
    TLocaleInfo::TLocaleInfo((uint64_t)v548, *((const __int32 **)a4 + 30), *((_QWORD *)a4 + 31), 1, *((_QWORD *)a4 + 39));
    if (v18)
      v23 = v548;
    else
      v23 = (_BYTE *)(*((_QWORD *)this + 1) + 240);
    v39 = v532[24];
    *(_BYTE *)this = v39 & 1;
    *((_BYTE *)this + 1) = (v39 & 2) != 0;
    v40 = (unsigned int *)(v532 + 32);
    v41 = *((unsigned int *)v532 + 5);
    v530 = &v532[v41];
    if (&v532[v41] < v532 + 32 || (v42 = v41 - 32, v42 <= 7))
    {
      tknPrintf("Error: Serialization buffer too small to hold text data\n", v19, v20, v21, v22);
      std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
      *(_QWORD *)v544 = aPpx;
      if ((__src[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
      }
      else
      {
        *(_OWORD *)&v544[8] = *(_OWORD *)__src;
        *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
      }
      *(_QWORD *)v544 = &unk_24C214BA0;
      if (v544[31] >= 0)
        v390 = &v544[8];
      else
        v390 = *(const char **)&v544[8];
      conditionalAssert(v390, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1226, v307, v308);
      *(_QWORD *)v544 = aPpx;
      if ((v544[31] & 0x80000000) != 0)
        operator delete(*(void **)&v544[8]);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      v391 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
      *v391 = aPpx;
      v392 = (std::string *)(v391 + 1);
      if ((v544[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v392, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
      }
      else
      {
        v493 = *(_OWORD *)v544;
        v391[3] = *(_QWORD *)&v544[16];
        *(_OWORD *)&v392->__r_.__value_.__l.__data_ = v493;
      }
      *v391 = &unk_24C214BA0;
    }
    if (v42 < *v40)
    {
      tknPrintf("Error: Serialization buffer too small to hold text data\n", v19, v20, v21, v22);
      std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
      *(_QWORD *)v544 = aPpx;
      if ((__src[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
      }
      else
      {
        *(_OWORD *)&v544[8] = *(_OWORD *)__src;
        *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
      }
      *(_QWORD *)v544 = &unk_24C214BA0;
      if (v544[31] >= 0)
        v438 = &v544[8];
      else
        v438 = *(const char **)&v544[8];
      conditionalAssert(v438, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1233, v339, v340);
      *(_QWORD *)v544 = aPpx;
      if ((v544[31] & 0x80000000) != 0)
        operator delete(*(void **)&v544[8]);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      v439 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
      *v439 = aPpx;
      v440 = (std::string *)(v439 + 1);
      if ((v544[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v440, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
      }
      else
      {
        v509 = *(_OWORD *)v544;
        v439[3] = *(_QWORD *)&v544[16];
        *(_OWORD *)&v440->__r_.__value_.__l.__data_ = v509;
      }
      *v439 = &unk_24C214BA0;
    }
    v527 = v18;
    if (!v18)
    {
      *((_QWORD *)this + 3) = *((unsigned int *)v532 + 9);
      v46 = (char *)operator new[]();
      *v533 = v46;
      strcpy(v46, v532 + 40);
LABEL_249:
      v190 = *v40;
      TAllocator::TAllocator((TAllocator *)v543, 2048);
      v195 = (unsigned int *)((char *)v40 + v190);
      v196 = v530 - (const char *)v195;
      if (v530 < (const char *)v195 || v196 <= 7)
      {
        tknPrintf("Error: Serialization buffer too small to hold a token sequence\n", v191, v192, v193, v194);
        std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
        *(_QWORD *)v544 = aPpx;
        if ((__src[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
        }
        else
        {
          *(_OWORD *)&v544[8] = *(_OWORD *)__src;
          *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
        }
        *(_QWORD *)v544 = &unk_24C214BA0;
        if (v544[31] >= 0)
          v393 = &v544[8];
        else
          v393 = *(const char **)&v544[8];
        conditionalAssert(v393, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1264, v309, v310);
        *(_QWORD *)v544 = aPpx;
        if ((v544[31] & 0x80000000) != 0)
          operator delete(*(void **)&v544[8]);
        if ((__src[23] & 0x80000000) != 0)
          operator delete(*(void **)__src);
        v394 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
        *v394 = aPpx;
        v395 = (std::string *)(v394 + 1);
        if ((v544[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v395, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
        }
        else
        {
          v494 = *(_OWORD *)v544;
          v394[3] = *(_QWORD *)&v544[16];
          *(_OWORD *)&v395->__r_.__value_.__l.__data_ = v494;
        }
        *v394 = &unk_24C214BA0;
      }
      if (v196 < *v195)
      {
        tknPrintf("Error: Serialization buffer too small to hold a token sequence\n", v191, v192, v193, v194);
        std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
        *(_QWORD *)v544 = aPpx;
        if ((__src[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
        }
        else
        {
          *(_OWORD *)&v544[8] = *(_OWORD *)__src;
          *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
        }
        *(_QWORD *)v544 = &unk_24C214BA0;
        if (v544[31] >= 0)
          v444 = &v544[8];
        else
          v444 = *(const char **)&v544[8];
        conditionalAssert(v444, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1271, v343, v344);
        *(_QWORD *)v544 = aPpx;
        if ((v544[31] & 0x80000000) != 0)
          operator delete(*(void **)&v544[8]);
        if ((__src[23] & 0x80000000) != 0)
          operator delete(*(void **)__src);
        v445 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
        *v445 = aPpx;
        v446 = (std::string *)(v445 + 1);
        if ((v544[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v446, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
        }
        else
        {
          v511 = *(_OWORD *)v544;
          v445[3] = *(_QWORD *)&v544[16];
          *(_OWORD *)&v446->__r_.__value_.__l.__data_ = v511;
        }
        *v445 = &unk_24C214BA0;
      }
      *(_QWORD *)v544 = &v544[24];
      *(_OWORD *)&v544[8] = xmmword_209A57DD0;
      v547 = 1;
      v197 = *((_DWORD *)v532 + 7);
      v198 = (_DWORD *)*((_QWORD *)a4 + 42);
      if (v197 < v198[74] || v197 > v198[75])
      {
        tknPrintf("Error: result saved with token phil version == %lld is not supported.\n", v191, v192, v193, v194, *((unsigned int *)v532 + 7));
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)__src = aPpx;
        if (SHIBYTE(v542) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__src[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&__src[8] = *(_OWORD *)__p;
          *(_QWORD *)&__src[24] = v542;
        }
        *(_QWORD *)__src = &unk_24C214BA0;
        if (__src[31] >= 0)
          v399 = &__src[8];
        else
          v399 = *(const char **)&__src[8];
        conditionalAssert(v399, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1279, v313, v314);
        *(_QWORD *)__src = aPpx;
        if ((__src[31] & 0x80000000) != 0)
          operator delete(*(void **)&__src[8]);
        if (SHIBYTE(v542) < 0)
          operator delete(__p[0]);
        v400 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
        *v400 = aPpx;
        v401 = (std::string *)(v400 + 1);
        if ((__src[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v401, *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
        }
        else
        {
          v496 = *(_OWORD *)__src;
          v400[3] = *(_QWORD *)&__src[16];
          *(_OWORD *)&v401->__r_.__value_.__l.__data_ = v496;
        }
        *v400 = &unk_24C214BA0;
      }
      ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v198 + 36));
      v200 = v198[TParam::getValidConfig((TParam *)(v198 + 36), ActiveConfigHandle) + 76];
      v201 = *((unsigned int *)v532 + 7);
      v202 = *((_QWORD *)a4 + 42);
      if (v197 > v200)
      {
        v349 = TIntParam::get((TIntParam *)(v202 + 144));
        tknPrintf("Error: result token phil version is %lld, while lexicon token phil version is %lld\n", v350, v351, v352, v353, v201, v349);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)__src = aPpx;
        if (SHIBYTE(v542) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__src[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&__src[8] = *(_OWORD *)__p;
          *(_QWORD *)&__src[24] = v542;
        }
        *(_QWORD *)__src = &unk_24C214BA0;
        if (__src[31] >= 0)
          v480 = &__src[8];
        else
          v480 = *(const char **)&__src[8];
        conditionalAssert(v480, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1288, v354, v355);
        *(_QWORD *)__src = aPpx;
        if ((__src[31] & 0x80000000) != 0)
          operator delete(*(void **)&__src[8]);
        if (SHIBYTE(v542) < 0)
          operator delete(__p[0]);
        v481 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
        *v481 = aPpx;
        v482 = (std::string *)(v481 + 1);
        if ((__src[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v482, *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
        }
        else
        {
          v523 = *(_OWORD *)__src;
          v481[3] = *(_QWORD *)&__src[16];
          *(_OWORD *)&v482->__r_.__value_.__l.__data_ = v523;
        }
        *v481 = &unk_24C214BA0;
      }
      v203 = TParam::getActiveConfigHandle((TParam *)(v202 + 144));
      if ((_DWORD)v201 == *(_DWORD *)(v202 + 4 * TParam::getValidConfig((TParam *)(v202 + 144), v203) + 304))
      {
        std::vector<std::wstring>::reserve(v535, v195[1]);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3) < v195[1])
        {
          v208 = (unsigned __int8 *)(v195 + 2);
          do
          {
            TBuffer<wchar_t>::resize((uint64_t)v544, 0);
            TLocaleInfo::multiByteToUnicode((uint64_t)v23, v208, (uint64_t)v544);
            if (*(_QWORD *)&v544[16] >= *(_QWORD *)&v544[8])
            {
              if (v547)
              {
                *(_DWORD *)__src = 0;
                TBuffer<wchar_t>::insert((uint64_t)v544, *(unint64_t *)&v544[16], (int *)__src, 1uLL);
                v209 = *(__int32 **)v544;
                --*(_QWORD *)&v544[16];
              }
              else
              {
                v209 = *(__int32 **)v544;
                if (*(_QWORD *)&v544[8])
                  *(_DWORD *)(*(_QWORD *)v544 + 4 * *(_QWORD *)&v544[8] - 4) = 0;
              }
            }
            else
            {
              v209 = *(__int32 **)v544;
              *(_DWORD *)(*(_QWORD *)v544 + 4 * *(_QWORD *)&v544[16]) = 0;
            }
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v209);
            v211 = *((_QWORD *)this + 5);
            v210 = *((_QWORD *)this + 6);
            if (v211 >= v210)
            {
              v214 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v211 - (unint64_t)v535->__begin_) >> 3);
              v215 = v214 + 1;
              if (v214 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v216 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v210 - (unint64_t)v535->__begin_) >> 3);
              if (2 * v216 > v215)
                v215 = 2 * v216;
              if (v216 >= 0x555555555555555)
                v217 = 0xAAAAAAAAAAAAAAALL;
              else
                v217 = v215;
              *(_QWORD *)&v551 = (char *)this + 48;
              if (v217)
                v218 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)this + 48, v217);
              else
                v218 = 0;
              v219 = &v218[24 * v214];
              *(_QWORD *)__src = v218;
              *(_QWORD *)&__src[8] = v219;
              *(_QWORD *)&__src[24] = &v218[24 * v217];
              v220 = *(_OWORD *)__p;
              *((_QWORD *)v219 + 2) = v542;
              *(_OWORD *)v219 = v220;
              __p[1] = 0;
              v542 = 0;
              __p[0] = 0;
              *(_QWORD *)&__src[16] = v219 + 24;
              std::vector<std::wstring>::__swap_out_circular_buffer(v535, (std::__split_buffer<std::wstring> *)__src);
              v213 = *((_QWORD *)this + 5);
              std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)__src);
              v221 = SHIBYTE(v542);
              *((_QWORD *)this + 5) = v213;
              if (v221 < 0)
              {
                operator delete(__p[0]);
                v213 = *((_QWORD *)this + 5);
              }
            }
            else
            {
              v212 = *(_OWORD *)__p;
              *(_QWORD *)(v211 + 16) = v542;
              *(_OWORD *)v211 = v212;
              v213 = v211 + 24;
              *((_QWORD *)this + 5) = v211 + 24;
            }
            v208 += strlen((const char *)v208) + 1;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v213 - (unint64_t)v535->__begin_) >> 3) < v195[1]);
        }
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        v542 = 0;
        std::vector<TPItnTagHandle_fake **>::reserve(__p, v195[1]);
        if (v195[1] > (unint64_t)(((char *)__p[1] - (char *)__p[0]) >> 3))
        {
          v222 = (unsigned __int8 *)(v195 + 2);
          do
          {
            TBuffer<wchar_t>::resize((uint64_t)v544, 0);
            TLocaleInfo::multiByteToUnicode((uint64_t)v23, v222, (uint64_t)v544);
            if ((unint64_t)(*(_QWORD *)&v544[16] + 1) >> 62)
              v223 = -1;
            else
              v223 = 4 * (*(_QWORD *)&v544[16] + 1);
            v224 = (__int32 *)TAllocator::allocate((TAllocator *)v543, v223);
            if (*(_QWORD *)&v544[16] >= *(_QWORD *)&v544[8])
            {
              if (v547)
              {
                *(_DWORD *)__src = 0;
                TBuffer<wchar_t>::insert((uint64_t)v544, *(unint64_t *)&v544[16], (int *)__src, 1uLL);
                v225 = *(const __int32 **)v544;
                --*(_QWORD *)&v544[16];
              }
              else
              {
                v225 = *(const __int32 **)v544;
                if (*(_QWORD *)&v544[8])
                  *(_DWORD *)(*(_QWORD *)v544 + 4 * *(_QWORD *)&v544[8] - 4) = 0;
              }
            }
            else
            {
              v225 = *(const __int32 **)v544;
              *(_DWORD *)(*(_QWORD *)v544 + 4 * *(_QWORD *)&v544[16]) = 0;
            }
            wcscpy(v224, v225);
            v226 = (char *)__p[1];
            if (__p[1] >= v542)
            {
              v228 = ((char *)__p[1] - (char *)__p[0]) >> 3;
              if ((unint64_t)(v228 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v229 = (v542 - (char *)__p[0]) >> 2;
              if (v229 <= v228 + 1)
                v229 = v228 + 1;
              if ((unint64_t)(v542 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
                v230 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v230 = v229;
              if (v230)
                v231 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v542, v230);
              else
                v231 = 0;
              v232 = (__int32 **)&v231[8 * v228];
              *v232 = v224;
              v227 = v232 + 1;
              v234 = (char *)__p[0];
              v233 = (char *)__p[1];
              if (__p[1] != __p[0])
              {
                do
                {
                  v235 = (__int32 *)*((_QWORD *)v233 - 1);
                  v233 -= 8;
                  *--v232 = v235;
                }
                while (v233 != v234);
                v233 = (char *)__p[0];
              }
              __p[0] = v232;
              __p[1] = v227;
              v542 = &v231[8 * v230];
              if (v233)
                operator delete(v233);
            }
            else
            {
              *(_QWORD *)__p[1] = v224;
              v227 = v226 + 8;
            }
            __p[1] = v227;
            v222 += strlen((const char *)v222) + 1;
          }
          while (v195[1] > (unint64_t)((int64_t)((uint64_t)v227 - (unint64_t)__p[0]) >> 3));
        }
        v538 = 0;
        v539 = 0;
        v540 = 0;
        TLexicon::mapWordSequence(a4, (uint64_t *)__p, 0, *((unsigned int *)v532 + 7), *((_BYTE *)this + 1) == 0, 1, (unint64_t *)&v538);
        std::vector<std::wstring>::reserve(v535, (v539 - (_BYTE *)v538) >> 3);
        v236 = (__int32 ***)v538;
        if (v539 != v538)
        {
          v237 = 0;
          do
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v536, *v236[v237]);
            v239 = *((_QWORD *)this + 5);
            v238 = *((_QWORD *)this + 6);
            if (v239 >= v238)
            {
              v241 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v239 - (unint64_t)v535->__begin_) >> 3);
              v242 = v241 + 1;
              if (v241 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v243 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v238 - (unint64_t)v535->__begin_) >> 3);
              if (2 * v243 > v242)
                v242 = 2 * v243;
              if (v243 >= 0x555555555555555)
                v244 = 0xAAAAAAAAAAAAAAALL;
              else
                v244 = v242;
              *(_QWORD *)&v551 = (char *)this + 48;
              if (v244)
                v245 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)this + 48, v244);
              else
                v245 = 0;
              v246 = &v245[24 * v241];
              *(_QWORD *)__src = v245;
              *(_QWORD *)&__src[8] = v246;
              *(_QWORD *)&__src[24] = &v245[24 * v244];
              v247 = *(_OWORD *)v536;
              *((_QWORD *)v246 + 2) = v537;
              *(_OWORD *)v246 = v247;
              v536[1] = 0;
              v537 = 0;
              v536[0] = 0;
              *(_QWORD *)&__src[16] = v246 + 24;
              std::vector<std::wstring>::__swap_out_circular_buffer(v535, (std::__split_buffer<std::wstring> *)__src);
              v248 = *((_QWORD *)this + 5);
              std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)__src);
              v249 = SHIBYTE(v537);
              *((_QWORD *)this + 5) = v248;
              if (v249 < 0)
                operator delete(v536[0]);
            }
            else
            {
              v240 = *(_OWORD *)v536;
              *(_QWORD *)(v239 + 16) = v537;
              *(_OWORD *)v239 = v240;
              *((_QWORD *)this + 5) = v239 + 24;
            }
            ++v237;
            v236 = (__int32 ***)v538;
          }
          while (v237 < (v539 - (_BYTE *)v538) >> 3);
        }
        TLexicon::cleanCache(a4);
        if (v538)
        {
          v539 = v538;
          operator delete(v538);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      v250 = (unsigned int *)((char *)v195 + *v195);
      v251 = v530 - (const char *)v250;
      if (v530 < (const char *)v250 || v251 <= 7)
      {
        tknPrintf("Error: Serialization buffer too small to hold the alignment\n", v204, v205, v206, v207);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)__src = aPpx;
        if (SHIBYTE(v542) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__src[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&__src[8] = *(_OWORD *)__p;
          *(_QWORD *)&__src[24] = v542;
        }
        *(_QWORD *)__src = &unk_24C214BA0;
        if (__src[31] >= 0)
          v408 = &__src[8];
        else
          v408 = *(const char **)&__src[8];
        conditionalAssert(v408, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1332, v319, v320);
        *(_QWORD *)__src = aPpx;
        if ((__src[31] & 0x80000000) != 0)
          operator delete(*(void **)&__src[8]);
        if (SHIBYTE(v542) < 0)
          operator delete(__p[0]);
        v409 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
        *v409 = aPpx;
        v410 = (std::string *)(v409 + 1);
        if ((__src[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v410, *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
        }
        else
        {
          v499 = *(_OWORD *)__src;
          v409[3] = *(_QWORD *)&__src[16];
          *(_OWORD *)&v410->__r_.__value_.__l.__data_ = v499;
        }
        *v409 = &unk_24C214BA0;
      }
      if (v251 < *v250)
      {
        tknPrintf("Error: Serialization buffer too small to hold the alignment\n", v204, v205, v206, v207);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)__src = aPpx;
        if (SHIBYTE(v542) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__src[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&__src[8] = *(_OWORD *)__p;
          *(_QWORD *)&__src[24] = v542;
        }
        *(_QWORD *)__src = &unk_24C214BA0;
        if (__src[31] >= 0)
          v465 = &__src[8];
        else
          v465 = *(const char **)&__src[8];
        conditionalAssert(v465, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1339, v364, v365);
        *(_QWORD *)__src = aPpx;
        if ((__src[31] & 0x80000000) != 0)
          operator delete(*(void **)&__src[8]);
        if (SHIBYTE(v542) < 0)
          operator delete(__p[0]);
        v466 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
        *v466 = aPpx;
        v467 = (std::string *)(v466 + 1);
        if ((__src[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v467, *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
        }
        else
        {
          v518 = *(_OWORD *)__src;
          v466[3] = *(_QWORD *)&__src[16];
          *(_OWORD *)&v467->__r_.__value_.__l.__data_ = v518;
        }
        *v466 = &unk_24C214BA0;
      }
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(v528, v250 + 2, &v250[v250[1] + 2], v250[1]);
      if (v527)
      {
        v252 = *((_QWORD *)this + 13);
        v253 = *((_QWORD *)this + 14);
        v254 = v253 - v252;
        if (v253 != v252)
        {
          v255 = 0;
          v256 = 0;
          v257 = v254 >> 3;
          do
          {
            v258 = *(_QWORD *)(v252 + 8 * v255);
            if (v258)
            {
              v259 = 0;
              v260 = *(_QWORD *)(v252 + 8 * v255);
              do
              {
                v261 = (*v533)[v256];
                v259 += v261 >> 7;
                v256 += (v261 >> 7) + 1;
                --v260;
              }
              while (v260);
            }
            else
            {
              v259 = 0;
            }
            *(_QWORD *)(v252 + 8 * v255) = v258 + v259;
            v255 += 2;
          }
          while (v255 < v257);
        }
      }
      v262 = *v250;
      std::vector<TItnControlState>::resize((uint64_t)v534, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3) + 1);
      v267 = (char *)v250 + v262;
      v268 = v530 - v267;
      if (v530 < v267 || v268 <= 7)
      {
        tknPrintf("Error: Serialization buffer too small to hold the state ranges\n", v263, v264, v265, v266);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)__src = aPpx;
        if (SHIBYTE(v542) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__src[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&__src[8] = *(_OWORD *)__p;
          *(_QWORD *)&__src[24] = v542;
        }
        *(_QWORD *)__src = &unk_24C214BA0;
        if (__src[31] >= 0)
          v411 = &__src[8];
        else
          v411 = *(const char **)&__src[8];
        conditionalAssert(v411, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1371, v321, v322);
        *(_QWORD *)__src = aPpx;
        if ((__src[31] & 0x80000000) != 0)
          operator delete(*(void **)&__src[8]);
        if (SHIBYTE(v542) < 0)
          operator delete(__p[0]);
        v412 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
        *v412 = aPpx;
        v413 = (std::string *)(v412 + 1);
        if ((__src[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v413, *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
        }
        else
        {
          v500 = *(_OWORD *)__src;
          v412[3] = *(_QWORD *)&__src[16];
          *(_OWORD *)&v413->__r_.__value_.__l.__data_ = v500;
        }
        *v412 = &unk_24C214BA0;
      }
      if (v268 < *(unsigned int *)v267)
      {
        tknPrintf("Error: Serialization buffer too small to hold the state ranges\n", v263, v264, v265, v266);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)__src = aPpx;
        if (SHIBYTE(v542) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__src[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&__src[8] = *(_OWORD *)__p;
          *(_QWORD *)&__src[24] = v542;
        }
        *(_QWORD *)__src = &unk_24C214BA0;
        if (__src[31] >= 0)
          v468 = &__src[8];
        else
          v468 = *(const char **)&__src[8];
        conditionalAssert(v468, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1378, v366, v367);
        *(_QWORD *)__src = aPpx;
        if ((__src[31] & 0x80000000) != 0)
          operator delete(*(void **)&__src[8]);
        if (SHIBYTE(v542) < 0)
          operator delete(__p[0]);
        v469 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
        *v469 = aPpx;
        v470 = (std::string *)(v469 + 1);
        if ((__src[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v470, *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
        }
        else
        {
          v519 = *(_OWORD *)__src;
          v469[3] = *(_QWORD *)&__src[16];
          *(_OWORD *)&v470->__r_.__value_.__l.__data_ = v519;
        }
        *v469 = &unk_24C214BA0;
      }
      v269 = *((unsigned int *)v267 + 1);
      v270 = (char *)TAllocator::allocate((TAllocator *)v543, 32 * v269);
      v271 = v270;
      if ((_DWORD)v269)
        memset(v270, 255, 32 * v269);
      memcpy(v271, v267 + 8, 32 * *((unsigned int *)v267 + 1));
      *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
      if (*((_DWORD *)v267 + 1))
      {
        v272 = 0;
        do
        {
          v273 = 0;
          *(_QWORD *)&v274 = -1;
          *((_QWORD *)&v274 + 1) = -1;
          v552 = v274;
          v551 = v274;
          *(_OWORD *)&__src[16] = v274;
          *(_OWORD *)__src = v274;
          do
          {
            v275 = *(int *)&v271[v273];
            if (v275 != -1)
            {
              *(_QWORD *)&__src[8 * getItnControlCategory(*(int *)&v271[v273]) + 32] = -1;
              *(_QWORD *)&__src[8 * getItnControlCategory(v275)] = v275;
            }
            v276 = *(int *)&v271[v273 + 16];
            if (v276 != -1)
              *(_QWORD *)&__src[8 * getItnControlCategory(*(int *)&v271[v273 + 16]) + 32] = v276;
            v273 += 4;
          }
          while (v273 != 16);
          v277 = (_OWORD *)*((_QWORD *)this + 8);
          v278 = *((_QWORD *)this + 9);
          if ((unint64_t)v277 >= v278)
          {
            v280 = ((char *)v277 - *v534) >> 6;
            v281 = v280 + 1;
            if ((unint64_t)(v280 + 1) >> 58)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v282 = v278 - (_QWORD)*v534;
            if (v282 >> 5 > v281)
              v281 = v282 >> 5;
            if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFC0)
              v283 = 0x3FFFFFFFFFFFFFFLL;
            else
              v283 = v281;
            if (v283)
              v284 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>((uint64_t)this + 72, v283);
            else
              v284 = 0;
            v285 = &v284[64 * v280];
            *(_OWORD *)v285 = *(_OWORD *)__src;
            *((_OWORD *)v285 + 1) = *(_OWORD *)&__src[16];
            *((_OWORD *)v285 + 2) = v551;
            *((_OWORD *)v285 + 3) = v552;
            v287 = (char *)*((_QWORD *)this + 7);
            v286 = (char *)*((_QWORD *)this + 8);
            v288 = v285;
            if (v286 != v287)
            {
              do
              {
                v289 = *((_OWORD *)v286 - 4);
                v290 = *((_OWORD *)v286 - 3);
                v291 = *((_OWORD *)v286 - 1);
                *((_OWORD *)v288 - 2) = *((_OWORD *)v286 - 2);
                *((_OWORD *)v288 - 1) = v291;
                *((_OWORD *)v288 - 4) = v289;
                *((_OWORD *)v288 - 3) = v290;
                v288 -= 64;
                v286 -= 64;
              }
              while (v286 != v287);
              v286 = *v534;
            }
            v279 = v285 + 64;
            *((_QWORD *)this + 7) = v288;
            *((_QWORD *)this + 8) = v285 + 64;
            *((_QWORD *)this + 9) = &v284[64 * v283];
            if (v286)
              operator delete(v286);
          }
          else
          {
            *v277 = *(_OWORD *)__src;
            v277[1] = *(_OWORD *)&__src[16];
            v277[2] = v551;
            v277[3] = v552;
            v279 = v277 + 4;
          }
          *((_QWORD *)this + 8) = v279;
          ++v272;
          v271 += 32;
        }
        while (v272 < *((unsigned int *)v267 + 1));
      }
      v292 = *(unsigned int *)v267;
      std::vector<unsigned long>::resize((uint64_t)v531, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3));
      v297 = &v267[v292];
      if (*((_QWORD *)this + 4) != *((_QWORD *)this + 5))
        *(_QWORD *)(*((_QWORD *)this + 11) - 8) = 1000;
      v298 = v530 - v297;
      if (v530 < v297 || v298 <= 7)
      {
        tknPrintf("Error: Serialization buffer too small to hold the pause durations\n", v293, v294, v295, v296);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)__src = aPpx;
        if (SHIBYTE(v542) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__src[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&__src[8] = *(_OWORD *)__p;
          *(_QWORD *)&__src[24] = v542;
        }
        *(_QWORD *)__src = &unk_24C214BA0;
        if (__src[31] >= 0)
          v414 = &__src[8];
        else
          v414 = *(const char **)&__src[8];
        conditionalAssert(v414, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1414, v323, v324);
        *(_QWORD *)__src = aPpx;
        if ((__src[31] & 0x80000000) != 0)
          operator delete(*(void **)&__src[8]);
        if (SHIBYTE(v542) < 0)
          operator delete(__p[0]);
        v415 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
        *v415 = aPpx;
        v416 = (std::string *)(v415 + 1);
        if ((__src[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v416, *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
        }
        else
        {
          v501 = *(_OWORD *)__src;
          v415[3] = *(_QWORD *)&__src[16];
          *(_OWORD *)&v416->__r_.__value_.__l.__data_ = v501;
        }
        *v415 = &unk_24C214BA0;
      }
      if (v298 < *(unsigned int *)v297)
      {
        tknPrintf("Error: Serialization buffer too small to hold the pause durations\n", v293, v294, v295, v296);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
        *(_QWORD *)__src = aPpx;
        if (SHIBYTE(v542) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__src[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&__src[8] = *(_OWORD *)__p;
          *(_QWORD *)&__src[24] = v542;
        }
        *(_QWORD *)__src = &unk_24C214BA0;
        if (__src[31] >= 0)
          v474 = &__src[8];
        else
          v474 = *(const char **)&__src[8];
        conditionalAssert(v474, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1421, v370, v371);
        *(_QWORD *)__src = aPpx;
        if ((__src[31] & 0x80000000) != 0)
          operator delete(*(void **)&__src[8]);
        if (SHIBYTE(v542) < 0)
          operator delete(__p[0]);
        v475 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
        *v475 = aPpx;
        v476 = (std::string *)(v475 + 1);
        if ((__src[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v476, *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
        }
        else
        {
          v521 = *(_OWORD *)__src;
          v475[3] = *(_QWORD *)&__src[16];
          *(_OWORD *)&v476->__r_.__value_.__l.__data_ = v521;
        }
        *v475 = &unk_24C214BA0;
      }
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(v531, (unsigned int *)v297 + 2, (unsigned int *)&v297[4 * *((unsigned int *)v297 + 1) + 8], *((unsigned int *)v297 + 1));
      if (v547 && *(_BYTE **)v544 != &v544[24] && *(_QWORD *)v544)
        MEMORY[0x20BD149A8]();
      goto LABEL_378;
    }
    *(_QWORD *)v544 = &v544[24];
    *(_OWORD *)&v544[8] = xmmword_209A57DD0;
    v547 = 1;
    *(_QWORD *)__src = &__src[24];
    *(_OWORD *)&__src[8] = xmmword_209A57DD0;
    v553 = 1;
    TLocaleInfo::multiByteToUnicode((uint64_t)v23, (unsigned __int8 *)v532 + 40, (uint64_t)v544);
    v43 = *((_QWORD *)this + 1);
    if (*(_QWORD *)&v544[16] >= *(_QWORD *)&v544[8])
    {
      if (v547)
      {
        v543[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)v544, *(unint64_t *)&v544[16], v543, 1uLL);
        v44 = *(unsigned int **)v544;
        --*(_QWORD *)&v544[16];
      }
      else
      {
        v44 = *(unsigned int **)v544;
        if (*(_QWORD *)&v544[8])
          *(_DWORD *)(*(_QWORD *)v544 + 4 * *(_QWORD *)&v544[8] - 4) = 0;
      }
    }
    else
    {
      v44 = *(unsigned int **)v544;
      *(_DWORD *)(*(_QWORD *)v544 + 4 * *(_QWORD *)&v544[16]) = 0;
    }
    TLocaleInfo::unicodeToMultiByte(v43 + 240, v44, (uint64_t)__src);
    *((_QWORD *)this + 3) = *(_QWORD *)&__src[16];
    v49 = (char *)operator new[]();
    v50 = v49;
    *v533 = v49;
    if (*(_QWORD *)&__src[16] >= *(_QWORD *)&__src[8])
    {
      if (v553)
      {
        LOBYTE(v543[0]) = 0;
        TBuffer<char>::insert((uint64_t)__src, *(unint64_t *)&__src[16], (char *)v543, 1uLL);
        --*(_QWORD *)&__src[16];
      }
      else
      {
        if (!*(_QWORD *)&__src[8])
        {
          strcpy(v49, *(const char **)__src);
LABEL_245:
          if (v547 && *(_BYTE **)v544 != &v544[24] && *(_QWORD *)v544)
            MEMORY[0x20BD149A8]();
          goto LABEL_249;
        }
        *(_BYTE *)(*(_QWORD *)&__src[8] + *(_QWORD *)__src - 1) = 0;
      }
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)__src + *(_QWORD *)&__src[16]) = 0;
    }
    v188 = v553;
    v189 = *(_BYTE **)__src;
    strcpy(v50, *(const char **)__src);
    if (v188 && v189 != &__src[24] && v189)
      MEMORY[0x20BD149A8](v189, 0x1000C4077774924);
    goto LABEL_245;
  }
  if (*((_DWORD *)__s1 + 5) != a3)
  {
    tknPrintf("Error: Buffer is corrupted, size mismatch\n", v10, v11, v12, v13);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v420 = &v544[8];
    else
      v420 = *(const char **)&v544[8];
    conditionalAssert(v420, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 854, v327, v328);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v421 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v421 = aPpx;
    v422 = (std::string *)(v421 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v422, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v503 = *(_OWORD *)v544;
      v421[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v422->__r_.__value_.__l.__data_ = v503;
    }
    *v421 = &unk_24C214BA0;
  }
  v24 = *((_DWORD *)__s1 + 6);
  v25 = *((_DWORD *)a4 + 76);
  v27 = (v24 & 0x100) == 0 && v25 == 2;
  if ((v24 & 0x100) != 0 && v25 != 2)
  {
    tknPrintf("Error: Encoding mismatch: deserializing UTF-8 result with non UTF-8 model\n", v10, v11, v12, v13);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v423 = &v544[8];
    else
      v423 = *(const char **)&v544[8];
    conditionalAssert(v423, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 863, v329, v330);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v424 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v424 = aPpx;
    v425 = (std::string *)(v424 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v425, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v504 = *(_OWORD *)v544;
      v424[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v425->__r_.__value_.__l.__data_ = v504;
    }
    *v424 = &unk_24C214BA0;
  }
  TLocaleInfo::TLocaleInfo((uint64_t)v548, *((const __int32 **)a4 + 30), *((_QWORD *)a4 + 31), 1, *((_QWORD *)a4 + 39));
  if (v27)
    v32 = v548;
  else
    v32 = (_BYTE *)(*((_QWORD *)this + 1) + 240);
  v33 = *((_DWORD *)v532 + 6);
  *(_BYTE *)this = (v33 & 0x20) != 0;
  *((_BYTE *)this + 1) = (v33 & 0x40) != 0;
  if ((v33 & 1) == 0)
  {
    tknPrintf("Error: No text in serialization buffer\n", v28, v29, v30, v31);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v432 = &v544[8];
    else
      v432 = *(const char **)&v544[8];
    conditionalAssert(v432, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 926, v335, v336);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v433 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v433 = aPpx;
    v434 = (std::string *)(v433 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v434, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v507 = *(_OWORD *)v544;
      v433[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v434->__r_.__value_.__l.__data_ = v507;
    }
    *v433 = &unk_24C214BA0;
  }
  v34 = (unsigned int *)(v532 + 28);
  v35 = *((unsigned int *)v532 + 5);
  v529 = &v532[v35];
  if (&v532[v35] < v532 + 28 || (v36 = v35 - 28, v36 <= 7))
  {
    tknPrintf("Error: Serialization buffer too small to hold text data\n", v28, v29, v30, v31);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v387 = &v544[8];
    else
      v387 = *(const char **)&v544[8];
    conditionalAssert(v387, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 894, v305, v306);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v388 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v388 = aPpx;
    v389 = (std::string *)(v388 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v389, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v492 = *(_OWORD *)v544;
      v388[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v389->__r_.__value_.__l.__data_ = v492;
    }
    *v388 = &unk_24C214BA0;
  }
  if (v36 < *v34)
  {
    tknPrintf("Error: Serialization buffer too small to hold text data\n", v28, v29, v30, v31);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v435 = &v544[8];
    else
      v435 = *(const char **)&v544[8];
    conditionalAssert(v435, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 901, v337, v338);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v436 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v436 = aPpx;
    v437 = (std::string *)(v436 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v437, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v508 = *(_OWORD *)v544;
      v436[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v437->__r_.__value_.__l.__data_ = v508;
    }
    *v436 = &unk_24C214BA0;
  }
  v526 = v27;
  if (v27)
  {
    *(_QWORD *)v544 = &v544[24];
    *(_OWORD *)&v544[8] = xmmword_209A57DD0;
    v547 = 1;
    *(_QWORD *)__src = &__src[24];
    *(_OWORD *)&__src[8] = xmmword_209A57DD0;
    v553 = 1;
    TLocaleInfo::multiByteToUnicode((uint64_t)v32, (unsigned __int8 *)v532 + 36, (uint64_t)v544);
    v37 = *((_QWORD *)this + 1);
    if (*(_QWORD *)&v544[16] >= *(_QWORD *)&v544[8])
    {
      if (v547)
      {
        v543[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)v544, *(unint64_t *)&v544[16], v543, 1uLL);
        v38 = *(unsigned int **)v544;
        --*(_QWORD *)&v544[16];
      }
      else
      {
        v38 = *(unsigned int **)v544;
        if (*(_QWORD *)&v544[8])
          *(_DWORD *)(*(_QWORD *)v544 + 4 * *(_QWORD *)&v544[8] - 4) = 0;
      }
    }
    else
    {
      v38 = *(unsigned int **)v544;
      *(_DWORD *)(*(_QWORD *)v544 + 4 * *(_QWORD *)&v544[16]) = 0;
    }
    TLocaleInfo::unicodeToMultiByte(v37 + 240, v38, (uint64_t)__src);
    *((_QWORD *)this + 3) = *(_QWORD *)&__src[16];
    v47 = (char *)operator new[]();
    v48 = v47;
    *v533 = v47;
    if (*(_QWORD *)&__src[16] >= *(_QWORD *)&__src[8])
    {
      if (v553)
      {
        LOBYTE(v543[0]) = 0;
        TBuffer<char>::insert((uint64_t)__src, *(unint64_t *)&__src[16], (char *)v543, 1uLL);
        --*(_QWORD *)&__src[16];
      }
      else
      {
        if (!*(_QWORD *)&__src[8])
        {
          strcpy(v47, *(const char **)__src);
LABEL_67:
          if (v547 && *(_BYTE **)v544 != &v544[24] && *(_QWORD *)v544)
            MEMORY[0x20BD149A8]();
          goto LABEL_71;
        }
        *(_BYTE *)(*(_QWORD *)&__src[8] + *(_QWORD *)__src - 1) = 0;
      }
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)__src + *(_QWORD *)&__src[16]) = 0;
    }
    v51 = v553;
    v52 = *(_BYTE **)__src;
    strcpy(v48, *(const char **)__src);
    if (v51 && v52 != &__src[24] && v52)
      MEMORY[0x20BD149A8](v52, 0x1000C4077774924);
    goto LABEL_67;
  }
  *((_QWORD *)this + 3) = *((unsigned int *)v532 + 8);
  v45 = (char *)operator new[]();
  *v533 = v45;
  strcpy(v45, v532 + 36);
LABEL_71:
  v53 = *v34;
  TAllocator::TAllocator((TAllocator *)v543, 2048);
  v58 = *((_DWORD *)v532 + 6);
  if ((v58 & 4) == 0)
  {
    tknPrintf("Error: No token sequence in serialization buffer\n", v54, v55, v56, v57);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v441 = &v544[8];
    else
      v441 = *(const char **)&v544[8];
    conditionalAssert(v441, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1001, v341, v342);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v442 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v442 = aPpx;
    v443 = (std::string *)(v442 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v443, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v510 = *(_OWORD *)v544;
      v442[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v443->__r_.__value_.__l.__data_ = v510;
    }
    *v442 = &unk_24C214BA0;
  }
  v59 = (unsigned int *)((char *)v34 + v53);
  v60 = v529 - (const char *)v59;
  if (v529 < (const char *)v59 || v60 <= 7)
  {
    tknPrintf("Error: Serialization buffer too small to hold a token sequence\n", v54, v55, v56, v57);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v396 = &v544[8];
    else
      v396 = *(const char **)&v544[8];
    conditionalAssert(v396, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 939, v311, v312);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v397 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v397 = aPpx;
    v398 = (std::string *)(v397 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v398, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v495 = *(_OWORD *)v544;
      v397[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v398->__r_.__value_.__l.__data_ = v495;
    }
    *v397 = &unk_24C214BA0;
  }
  if (v60 < *v59)
  {
    tknPrintf("Error: Serialization buffer too small to hold a token sequence\n", v54, v55, v56, v57);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v447 = &v544[8];
    else
      v447 = *(const char **)&v544[8];
    conditionalAssert(v447, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 946, v345, v346);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v448 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v448 = aPpx;
    v449 = (std::string *)(v448 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v449, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v512 = *(_OWORD *)v544;
      v448[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v449->__r_.__value_.__l.__data_ = v512;
    }
    *v448 = &unk_24C214BA0;
  }
  *(_QWORD *)v544 = &v544[24];
  *(_OWORD *)&v544[8] = xmmword_209A57DD0;
  v547 = 1;
  if ((v58 & 0x80) == 0)
  {
    tknPrintf("Error: result saved with token phil version == 1 is not supported.\n", v54, v55, v56, v57);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *(_QWORD *)__src = aPpx;
    if (SHIBYTE(v542) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__src[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&__src[8] = *(_OWORD *)__p;
      *(_QWORD *)&__src[24] = v542;
    }
    *(_QWORD *)__src = &unk_24C214BA0;
    if (__src[31] >= 0)
      v450 = &__src[8];
    else
      v450 = *(const char **)&__src[8];
    conditionalAssert(v450, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 953, v347, v348);
    *(_QWORD *)__src = aPpx;
    if ((__src[31] & 0x80000000) != 0)
      operator delete(*(void **)&__src[8]);
    if (SHIBYTE(v542) < 0)
      operator delete(__p[0]);
    v451 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *v451 = aPpx;
    v452 = (std::string *)(v451 + 1);
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v452, *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      v513 = *(_OWORD *)__src;
      v451[3] = *(_QWORD *)&__src[16];
      *(_OWORD *)&v452->__r_.__value_.__l.__data_ = v513;
    }
    *v451 = &unk_24C214BA0;
  }
  if ((v58 & 0x200) != 0)
    goto LABEL_79;
  v61 = *((_QWORD *)a4 + 42);
  v62 = TParam::getActiveConfigHandle((TParam *)(v61 + 144));
  if (*(_DWORD *)(v61 + 4 * TParam::getValidConfig((TParam *)(v61 + 144), v62) + 304) != 2)
  {
    __p[0] = 0;
    __p[1] = 0;
    v542 = 0;
    std::vector<TPItnTagHandle_fake **>::reserve(__p, v59[1]);
    if (v59[1] > (unint64_t)(((char *)__p[1] - (char *)__p[0]) >> 3))
    {
      v87 = (unsigned __int8 *)(v59 + 2);
      do
      {
        TBuffer<wchar_t>::resize((uint64_t)v544, 0);
        TLocaleInfo::multiByteToUnicode((uint64_t)v32, v87, (uint64_t)v544);
        if ((unint64_t)(*(_QWORD *)&v544[16] + 1) >> 62)
          v88 = -1;
        else
          v88 = 4 * (*(_QWORD *)&v544[16] + 1);
        v89 = (__int32 *)TAllocator::allocate((TAllocator *)v543, v88);
        if (*(_QWORD *)&v544[16] >= *(_QWORD *)&v544[8])
        {
          if (v547)
          {
            *(_DWORD *)__src = 0;
            TBuffer<wchar_t>::insert((uint64_t)v544, *(unint64_t *)&v544[16], (int *)__src, 1uLL);
            v90 = *(const __int32 **)v544;
            --*(_QWORD *)&v544[16];
          }
          else
          {
            v90 = *(const __int32 **)v544;
            if (*(_QWORD *)&v544[8])
              *(_DWORD *)(*(_QWORD *)v544 + 4 * *(_QWORD *)&v544[8] - 4) = 0;
          }
        }
        else
        {
          v90 = *(const __int32 **)v544;
          *(_DWORD *)(*(_QWORD *)v544 + 4 * *(_QWORD *)&v544[16]) = 0;
        }
        wcscpy(v89, v90);
        v91 = (char *)__p[1];
        if (__p[1] >= v542)
        {
          v93 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          if ((unint64_t)(v93 + 1) >> 61)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v94 = (v542 - (char *)__p[0]) >> 2;
          if (v94 <= v93 + 1)
            v94 = v93 + 1;
          if ((unint64_t)(v542 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
            v95 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v95 = v94;
          if (v95)
            v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v542, v95);
          else
            v96 = 0;
          v97 = (__int32 **)&v96[8 * v93];
          *v97 = v89;
          v92 = v97 + 1;
          v99 = (char *)__p[0];
          v98 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              v100 = (__int32 *)*((_QWORD *)v98 - 1);
              v98 -= 8;
              *--v97 = v100;
            }
            while (v98 != v99);
            v98 = (char *)__p[0];
          }
          __p[0] = v97;
          __p[1] = v92;
          v542 = &v96[8 * v95];
          if (v98)
            operator delete(v98);
        }
        else
        {
          *(_QWORD *)__p[1] = v89;
          v92 = v91 + 8;
        }
        __p[1] = v92;
        v87 += strlen((const char *)v87) + 1;
      }
      while (v59[1] > (unint64_t)((int64_t)((uint64_t)v92 - (unint64_t)__p[0]) >> 3));
    }
    v538 = 0;
    v539 = 0;
    v540 = 0;
    TLexicon::mapWordSequence(a4, (uint64_t *)__p, 0, 2, *((_BYTE *)this + 1) == 0, 1, (unint64_t *)&v538);
    std::vector<std::wstring>::reserve(v535, (v539 - (_BYTE *)v538) >> 3);
    v101 = (__int32 ***)v538;
    if (v539 != v538)
    {
      v102 = 0;
      do
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v536, *v101[v102]);
        v104 = *((_QWORD *)this + 5);
        v103 = *((_QWORD *)this + 6);
        if (v104 >= v103)
        {
          v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104 - (unint64_t)v535->__begin_) >> 3);
          v107 = v106 + 1;
          if (v106 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (unint64_t)v535->__begin_) >> 3);
          if (2 * v108 > v107)
            v107 = 2 * v108;
          if (v108 >= 0x555555555555555)
            v109 = 0xAAAAAAAAAAAAAAALL;
          else
            v109 = v107;
          *(_QWORD *)&v551 = (char *)this + 48;
          if (v109)
            v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)this + 48, v109);
          else
            v110 = 0;
          v111 = &v110[24 * v106];
          *(_QWORD *)__src = v110;
          *(_QWORD *)&__src[8] = v111;
          *(_QWORD *)&__src[24] = &v110[24 * v109];
          v112 = *(_OWORD *)v536;
          *((_QWORD *)v111 + 2) = v537;
          *(_OWORD *)v111 = v112;
          v536[1] = 0;
          v537 = 0;
          v536[0] = 0;
          *(_QWORD *)&__src[16] = v111 + 24;
          std::vector<std::wstring>::__swap_out_circular_buffer(v535, (std::__split_buffer<std::wstring> *)__src);
          v113 = *((_QWORD *)this + 5);
          std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)__src);
          v114 = SHIBYTE(v537);
          *((_QWORD *)this + 5) = v113;
          if (v114 < 0)
            operator delete(v536[0]);
        }
        else
        {
          v105 = *(_OWORD *)v536;
          *(_QWORD *)(v104 + 16) = v537;
          *(_OWORD *)v104 = v105;
          *((_QWORD *)this + 5) = v104 + 24;
        }
        ++v102;
        v101 = (__int32 ***)v538;
      }
      while (v102 < (v539 - (_BYTE *)v538) >> 3);
    }
    TLexicon::cleanCache(a4);
    if (v538)
    {
      v539 = v538;
      operator delete(v538);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    goto LABEL_151;
  }
  if ((v532[25] & 2) != 0)
  {
LABEL_79:
    v63 = *((_QWORD *)a4 + 42);
    v64 = TParam::getActiveConfigHandle((TParam *)(v63 + 144));
    if (*(_DWORD *)(v63 + 4 * TParam::getValidConfig((TParam *)(v63 + 144), v64) + 304) == 2)
    {
      tknPrintf("Error: result token phil version is >= 3 while lexicon token phil version is 2\n", v65, v66, v67, v68);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
      *(_QWORD *)__src = aPpx;
      if (SHIBYTE(v542) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__src[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&__src[8] = *(_OWORD *)__p;
        *(_QWORD *)&__src[24] = v542;
      }
      *(_QWORD *)__src = &unk_24C214BA0;
      if (__src[31] >= 0)
        v477 = &__src[8];
      else
        v477 = *(const char **)&__src[8];
      conditionalAssert(v477, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 962, v372, v373);
      *(_QWORD *)__src = aPpx;
      if ((__src[31] & 0x80000000) != 0)
        operator delete(*(void **)&__src[8]);
      if (SHIBYTE(v542) < 0)
        operator delete(__p[0]);
      v478 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
      *v478 = aPpx;
      v479 = (std::string *)(v478 + 1);
      if ((__src[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v479, *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
      }
      else
      {
        v522 = *(_OWORD *)__src;
        v478[3] = *(_QWORD *)&__src[16];
        *(_OWORD *)&v479->__r_.__value_.__l.__data_ = v522;
      }
      *v478 = &unk_24C214BA0;
    }
  }
  std::vector<std::wstring>::reserve(v535, v59[1]);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3) < v59[1])
  {
    v73 = (unsigned __int8 *)(v59 + 2);
    do
    {
      TBuffer<wchar_t>::resize((uint64_t)v544, 0);
      TLocaleInfo::multiByteToUnicode((uint64_t)v32, v73, (uint64_t)v544);
      if (*(_QWORD *)&v544[16] >= *(_QWORD *)&v544[8])
      {
        if (v547)
        {
          *(_DWORD *)__src = 0;
          TBuffer<wchar_t>::insert((uint64_t)v544, *(unint64_t *)&v544[16], (int *)__src, 1uLL);
          v74 = *(__int32 **)v544;
          --*(_QWORD *)&v544[16];
        }
        else
        {
          v74 = *(__int32 **)v544;
          if (*(_QWORD *)&v544[8])
            *(_DWORD *)(*(_QWORD *)v544 + 4 * *(_QWORD *)&v544[8] - 4) = 0;
        }
      }
      else
      {
        v74 = *(__int32 **)v544;
        *(_DWORD *)(*(_QWORD *)v544 + 4 * *(_QWORD *)&v544[16]) = 0;
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v74);
      v76 = *((_QWORD *)this + 5);
      v75 = *((_QWORD *)this + 6);
      if (v76 >= v75)
      {
        v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - (unint64_t)v535->__begin_) >> 3);
        v80 = v79 + 1;
        if (v79 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - (unint64_t)v535->__begin_) >> 3);
        if (2 * v81 > v80)
          v80 = 2 * v81;
        if (v81 >= 0x555555555555555)
          v82 = 0xAAAAAAAAAAAAAAALL;
        else
          v82 = v80;
        *(_QWORD *)&v551 = (char *)this + 48;
        if (v82)
          v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)this + 48, v82);
        else
          v83 = 0;
        v84 = &v83[24 * v79];
        *(_QWORD *)__src = v83;
        *(_QWORD *)&__src[8] = v84;
        *(_QWORD *)&__src[24] = &v83[24 * v82];
        v85 = *(_OWORD *)__p;
        *((_QWORD *)v84 + 2) = v542;
        *(_OWORD *)v84 = v85;
        __p[1] = 0;
        v542 = 0;
        __p[0] = 0;
        *(_QWORD *)&__src[16] = v84 + 24;
        std::vector<std::wstring>::__swap_out_circular_buffer(v535, (std::__split_buffer<std::wstring> *)__src);
        v78 = *((_QWORD *)this + 5);
        std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)__src);
        v86 = SHIBYTE(v542);
        *((_QWORD *)this + 5) = v78;
        if (v86 < 0)
        {
          operator delete(__p[0]);
          v78 = *((_QWORD *)this + 5);
        }
      }
      else
      {
        v77 = *(_OWORD *)__p;
        *(_QWORD *)(v76 + 16) = v542;
        *(_OWORD *)v76 = v77;
        v78 = v76 + 24;
        *((_QWORD *)this + 5) = v76 + 24;
      }
      v73 += strlen((const char *)v73) + 1;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - (unint64_t)v535->__begin_) >> 3) < v59[1]);
  }
LABEL_151:
  v115 = *v59;
  if (v547 && *(_BYTE **)v544 != &v544[24] && *(_QWORD *)v544)
    MEMORY[0x20BD149A8]();
  if ((v532[24] & 2) == 0)
  {
    tknPrintf("Error: No alignment in serialization buffer\n", v69, v70, v71, v72);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v453 = &v544[8];
    else
      v453 = *(const char **)&v544[8];
    conditionalAssert(v453, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1045, v356, v357);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v454 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v454 = aPpx;
    v455 = (std::string *)(v454 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v455, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v514 = *(_OWORD *)v544;
      v454[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v455->__r_.__value_.__l.__data_ = v514;
    }
    *v454 = &unk_24C214BA0;
  }
  v116 = (unsigned int *)((char *)v59 + v115);
  v117 = v529 - (const char *)v116;
  if (v529 < (const char *)v116 || v117 <= 7)
  {
    tknPrintf("Error: Serialization buffer too small to hold the alignment\n", v69, v70, v71, v72);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v402 = &v544[8];
    else
      v402 = *(const char **)&v544[8];
    conditionalAssert(v402, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1010, v315, v316);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v403 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v403 = aPpx;
    v404 = (std::string *)(v403 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v404, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v497 = *(_OWORD *)v544;
      v403[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v404->__r_.__value_.__l.__data_ = v497;
    }
    *v403 = &unk_24C214BA0;
  }
  if (v117 < *v116)
  {
    tknPrintf("Error: Serialization buffer too small to hold the alignment\n", v69, v70, v71, v72);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v456 = &v544[8];
    else
      v456 = *(const char **)&v544[8];
    conditionalAssert(v456, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1017, v358, v359);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v457 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v457 = aPpx;
    v458 = (std::string *)(v457 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v458, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v515 = *(_OWORD *)v544;
      v457[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v458->__r_.__value_.__l.__data_ = v515;
    }
    *v457 = &unk_24C214BA0;
  }
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(v528, v116 + 2, &v116[v116[1] + 2], v116[1]);
  if (v526)
  {
    v118 = *((_QWORD *)this + 13);
    v119 = *((_QWORD *)this + 14);
    v120 = v119 - v118;
    if (v119 != v118)
    {
      v121 = 0;
      v122 = 0;
      v123 = v120 >> 3;
      do
      {
        v124 = *(_QWORD *)(v118 + 8 * v121);
        if (v124)
        {
          v125 = 0;
          v126 = *(_QWORD *)(v118 + 8 * v121);
          do
          {
            v127 = (*v533)[v122];
            v125 += v127 >> 7;
            v122 += (v127 >> 7) + 1;
            --v126;
          }
          while (v126);
        }
        else
        {
          v125 = 0;
        }
        *(_QWORD *)(v118 + 8 * v121) = v124 + v125;
        v121 += 2;
      }
      while (v121 < v123);
    }
  }
  v128 = *v116;
  std::vector<TItnControlState>::resize((uint64_t)v534, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3) + 1);
  if ((v532[24] & 8) == 0)
  {
    tknPrintf("Error: No state range data in serialization buffer\n", v129, v130, v131, v132);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v459 = &v544[8];
    else
      v459 = *(const char **)&v544[8];
    conditionalAssert(v459, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1132, v360, v361);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v460 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v460 = aPpx;
    v461 = (std::string *)(v460 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v461, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v516 = *(_OWORD *)v544;
      v460[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v461->__r_.__value_.__l.__data_ = v516;
    }
    *v460 = &unk_24C214BA0;
  }
  v133 = (char *)v116 + v128;
  v134 = v529 - v133;
  if (v529 < v133 || v134 <= 7)
  {
    tknPrintf("Error: Serialization buffer too small to hold the state ranges\n", v129, v130, v131, v132);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v405 = &v544[8];
    else
      v405 = *(const char **)&v544[8];
    conditionalAssert(v405, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1055, v317, v318);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v406 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v406 = aPpx;
    v407 = (std::string *)(v406 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v407, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v498 = *(_OWORD *)v544;
      v406[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v407->__r_.__value_.__l.__data_ = v498;
    }
    *v406 = &unk_24C214BA0;
  }
  v135 = *(unsigned int *)v133;
  if (v134 < v135)
  {
    tknPrintf("Error: Serialization buffer too small to hold the state ranges\n", v129, v130, v131, v132);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
    *(_QWORD *)v544 = aPpx;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v544[8] = *(_OWORD *)__src;
      *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
    }
    *(_QWORD *)v544 = &unk_24C214BA0;
    if (v544[31] >= 0)
      v462 = &v544[8];
    else
      v462 = *(const char **)&v544[8];
    conditionalAssert(v462, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1062, v362, v363);
    *(_QWORD *)v544 = aPpx;
    if ((v544[31] & 0x80000000) != 0)
      operator delete(*(void **)&v544[8]);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    v463 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
    *v463 = aPpx;
    v464 = (std::string *)(v463 + 1);
    if ((v544[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v464, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
    }
    else
    {
      v517 = *(_OWORD *)v544;
      v463[3] = *(_QWORD *)&v544[16];
      *(_OWORD *)&v464->__r_.__value_.__l.__data_ = v517;
    }
    *v463 = &unk_24C214BA0;
  }
  if (*((_DWORD *)v532 + 4) == 1)
  {
    tknPrintf("Warning: Old-version formatting states ignored from serialization buffer\n", v129, v130, v131, v132);
  }
  else
  {
    v136 = *((unsigned int *)v133 + 1);
    if (((32 * v136) | 8) == v135)
    {
      v137 = (char *)TAllocator::allocate((TAllocator *)v543, 32 * v136);
      v138 = v137;
      if ((_DWORD)v136)
        memset(v137, 255, 32 * v136);
      memcpy(v138, v133 + 8, 32 * *((unsigned int *)v133 + 1));
      *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
      if (*((_DWORD *)v133 + 1))
      {
        v139 = 0;
        do
        {
          v140 = 0;
          *(_QWORD *)&v141 = -1;
          *((_QWORD *)&v141 + 1) = -1;
          v545 = v141;
          v546 = v141;
          *(_OWORD *)v544 = v141;
          *(_OWORD *)&v544[16] = v141;
          do
          {
            v142 = *(int *)&v138[v140];
            if (v142 != -1)
            {
              *(_QWORD *)&v544[8 * getItnControlCategory(*(int *)&v138[v140]) + 32] = -1;
              *(_QWORD *)&v544[8 * getItnControlCategory(v142)] = v142;
            }
            v143 = *(int *)&v138[v140 + 16];
            if (v143 != -1)
              *(_QWORD *)&v544[8 * getItnControlCategory(*(int *)&v138[v140 + 16]) + 32] = v143;
            v140 += 4;
          }
          while (v140 != 16);
          v144 = (_OWORD *)*((_QWORD *)this + 8);
          v145 = *((_QWORD *)this + 9);
          if ((unint64_t)v144 >= v145)
          {
            v147 = ((char *)v144 - *v534) >> 6;
            v148 = v147 + 1;
            if ((unint64_t)(v147 + 1) >> 58)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v149 = v145 - (_QWORD)*v534;
            if (v149 >> 5 > v148)
              v148 = v149 >> 5;
            if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFC0)
              v150 = 0x3FFFFFFFFFFFFFFLL;
            else
              v150 = v148;
            if (v150)
              v151 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>((uint64_t)this + 72, v150);
            else
              v151 = 0;
            v152 = &v151[64 * v147];
            *(_OWORD *)v152 = *(_OWORD *)v544;
            *((_OWORD *)v152 + 1) = *(_OWORD *)&v544[16];
            *((_OWORD *)v152 + 2) = v545;
            *((_OWORD *)v152 + 3) = v546;
            v154 = (char *)*((_QWORD *)this + 7);
            v153 = (char *)*((_QWORD *)this + 8);
            v155 = v152;
            if (v153 != v154)
            {
              do
              {
                v156 = *((_OWORD *)v153 - 4);
                v157 = *((_OWORD *)v153 - 3);
                v158 = *((_OWORD *)v153 - 1);
                *((_OWORD *)v155 - 2) = *((_OWORD *)v153 - 2);
                *((_OWORD *)v155 - 1) = v158;
                *((_OWORD *)v155 - 4) = v156;
                *((_OWORD *)v155 - 3) = v157;
                v155 -= 64;
                v153 -= 64;
              }
              while (v153 != v154);
              v153 = *v534;
            }
            v146 = v152 + 64;
            *((_QWORD *)this + 7) = v155;
            *((_QWORD *)this + 8) = v152 + 64;
            *((_QWORD *)this + 9) = &v151[64 * v150];
            if (v153)
              operator delete(v153);
          }
          else
          {
            *v144 = *(_OWORD *)v544;
            v144[1] = *(_OWORD *)&v544[16];
            v144[2] = v545;
            v144[3] = v546;
            v146 = v144 + 4;
          }
          *((_QWORD *)this + 8) = v146;
          ++v139;
          v138 += 32;
        }
        while (v139 < *((unsigned int *)v133 + 1));
      }
    }
    else
    {
      v159 = (char *)TAllocator::allocate((TAllocator *)v543, 24 * v136);
      v160 = v159;
      if ((_DWORD)v136)
        memset(v159, 255, 24 * ((24 * v136 - 24) / 0x18uLL) + 24);
      memcpy(v160, v133 + 8, 24 * *((unsigned int *)v133 + 1));
      *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
      if (*((_DWORD *)v133 + 1))
      {
        v161 = 0;
        do
        {
          v162 = 0;
          *(_QWORD *)&v163 = -1;
          *((_QWORD *)&v163 + 1) = -1;
          v545 = v163;
          v546 = v163;
          *(_OWORD *)v544 = v163;
          *(_OWORD *)&v544[16] = v163;
          do
          {
            v164 = *(int *)&v160[v162];
            if (v164 != -1)
            {
              *(_QWORD *)&v544[8 * getItnControlCategory(*(int *)&v160[v162]) + 32] = -1;
              *(_QWORD *)&v544[8 * getItnControlCategory(v164)] = v164;
            }
            v165 = *(int *)&v160[v162 + 12];
            if (v165 != -1)
              *(_QWORD *)&v544[8 * getItnControlCategory(*(int *)&v160[v162 + 12]) + 32] = v165;
            v162 += 4;
          }
          while (v162 != 12);
          v166 = (_OWORD *)*((_QWORD *)this + 8);
          v167 = *((_QWORD *)this + 9);
          if ((unint64_t)v166 >= v167)
          {
            v169 = ((char *)v166 - *v534) >> 6;
            v170 = v169 + 1;
            if ((unint64_t)(v169 + 1) >> 58)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v171 = v167 - (_QWORD)*v534;
            if (v171 >> 5 > v170)
              v170 = v171 >> 5;
            if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFC0)
              v172 = 0x3FFFFFFFFFFFFFFLL;
            else
              v172 = v170;
            if (v172)
              v173 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>((uint64_t)this + 72, v172);
            else
              v173 = 0;
            v174 = &v173[64 * v169];
            *(_OWORD *)v174 = *(_OWORD *)v544;
            *((_OWORD *)v174 + 1) = *(_OWORD *)&v544[16];
            *((_OWORD *)v174 + 2) = v545;
            *((_OWORD *)v174 + 3) = v546;
            v176 = (char *)*((_QWORD *)this + 7);
            v175 = (char *)*((_QWORD *)this + 8);
            v177 = v174;
            if (v175 != v176)
            {
              do
              {
                v178 = *((_OWORD *)v175 - 4);
                v179 = *((_OWORD *)v175 - 3);
                v180 = *((_OWORD *)v175 - 1);
                *((_OWORD *)v177 - 2) = *((_OWORD *)v175 - 2);
                *((_OWORD *)v177 - 1) = v180;
                *((_OWORD *)v177 - 4) = v178;
                *((_OWORD *)v177 - 3) = v179;
                v177 -= 64;
                v175 -= 64;
              }
              while (v175 != v176);
              v175 = *v534;
            }
            v168 = v174 + 64;
            *((_QWORD *)this + 7) = v177;
            *((_QWORD *)this + 8) = v174 + 64;
            *((_QWORD *)this + 9) = &v173[64 * v172];
            if (v175)
              operator delete(v175);
          }
          else
          {
            *v166 = *(_OWORD *)v544;
            v166[1] = *(_OWORD *)&v544[16];
            v166[2] = v545;
            v166[3] = v546;
            v168 = v166 + 4;
          }
          *((_QWORD *)this + 8) = v168;
          ++v161;
          v160 += 24;
        }
        while (v161 < *((unsigned int *)v133 + 1));
      }
    }
  }
  v181 = *(unsigned int *)v133;
  std::vector<unsigned long>::resize((uint64_t)v531, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3));
  if (*((_QWORD *)this + 4) != *((_QWORD *)this + 5))
    *(_QWORD *)(*((_QWORD *)this + 11) - 8) = 1000;
  if (*((_DWORD *)v532 + 4) == 3)
  {
    if ((v532[24] & 0x10) == 0)
    {
      tknPrintf("Error: No pause duration data in serialization buffer\n", v182, v183, v184, v185);
      std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
      *(_QWORD *)v544 = aPpx;
      if ((__src[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
      }
      else
      {
        *(_OWORD *)&v544[8] = *(_OWORD *)__src;
        *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
      }
      *(_QWORD *)v544 = &unk_24C214BA0;
      if (v544[31] >= 0)
        v483 = &v544[8];
      else
        v483 = *(const char **)&v544[8];
      conditionalAssert(v483, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1162, v374, v375);
      *(_QWORD *)v544 = aPpx;
      if ((v544[31] & 0x80000000) != 0)
        operator delete(*(void **)&v544[8]);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      v484 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
      *v484 = aPpx;
      v485 = (std::string *)(v484 + 1);
      if ((v544[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v485, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
      }
      else
      {
        v524 = *(_OWORD *)v544;
        v484[3] = *(_QWORD *)&v544[16];
        *(_OWORD *)&v485->__r_.__value_.__l.__data_ = v524;
      }
      *v484 = &unk_24C214BA0;
    }
    v186 = &v133[v181];
    v187 = v529 - &v133[v181];
    if (v529 < &v133[v181] || v187 <= 7)
    {
      tknPrintf("Error: Serialization buffer too small to hold the pause durations\n", v182, v183, v184, v185);
      std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
      *(_QWORD *)v544 = aPpx;
      if ((__src[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
      }
      else
      {
        *(_OWORD *)&v544[8] = *(_OWORD *)__src;
        *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
      }
      *(_QWORD *)v544 = &unk_24C214BA0;
      if (v544[31] >= 0)
        v471 = &v544[8];
      else
        v471 = *(const char **)&v544[8];
      conditionalAssert(v471, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1145, v368, v369);
      *(_QWORD *)v544 = aPpx;
      if ((v544[31] & 0x80000000) != 0)
        operator delete(*(void **)&v544[8]);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      v472 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
      *v472 = aPpx;
      v473 = (std::string *)(v472 + 1);
      if ((v544[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v473, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
      }
      else
      {
        v520 = *(_OWORD *)v544;
        v472[3] = *(_QWORD *)&v544[16];
        *(_OWORD *)&v473->__r_.__value_.__l.__data_ = v520;
      }
      *v472 = &unk_24C214BA0;
    }
    if (v187 < *(unsigned int *)v186)
    {
      tknPrintf("Error: Serialization buffer too small to hold the pause durations\n", v182, v183, v184, v185);
      std::string::basic_string[abi:ne180100]<0>(__src, &byte_209A88803);
      *(_QWORD *)v544 = aPpx;
      if ((__src[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v544[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
      }
      else
      {
        *(_OWORD *)&v544[8] = *(_OWORD *)__src;
        *(_QWORD *)&v544[24] = *(_QWORD *)&__src[16];
      }
      *(_QWORD *)v544 = &unk_24C214BA0;
      if (v544[31] >= 0)
        v486 = &v544[8];
      else
        v486 = *(const char **)&v544[8];
      conditionalAssert(v486, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1152, v376, v377);
      *(_QWORD *)v544 = aPpx;
      if ((v544[31] & 0x80000000) != 0)
        operator delete(*(void **)&v544[8]);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      v487 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v544, &byte_209A88803);
      *v487 = aPpx;
      v488 = (std::string *)(v487 + 1);
      if ((v544[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v488, *(const std::string::value_type **)v544, *(std::string::size_type *)&v544[8]);
      }
      else
      {
        v525 = *(_OWORD *)v544;
        v487[3] = *(_QWORD *)&v544[16];
        *(_OWORD *)&v488->__r_.__value_.__l.__data_ = v525;
      }
      *v487 = &unk_24C214BA0;
    }
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(v531, (unsigned int *)v186 + 2, (unsigned int *)&v186[4 * *((unsigned int *)v186 + 1) + 8], *((unsigned int *)v186 + 1));
  }
LABEL_378:
  TAllocator::clear((TAllocator *)v543);
  TCollation::~TCollation((TCollation *)&v549);
}

void sub_2098B9478(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, void **a16, uint64_t a17, _QWORD *a18, void **a19, void *a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,void *a36,int a37,__int16 a38,char a39,char a40)
{
  _QWORD *v40;
  int v41;
  void *v42;
  void *v45;
  void *v46;
  void *v47;

  if (a40 < 0)
  {
    operator delete(__p);
    if ((v41 & 1) == 0)
    {
LABEL_6:
      TAllocator::clear((TAllocator *)&a30);
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        if (*a18)
          MEMORY[0x20BD14990](*a18, 0x1000C8077774924);
        __cxa_rethrow();
      }
      TCollation::~TCollation((TCollation *)&STACK[0x508]);
      v45 = *a14;
      if (*a14)
      {
        v40[14] = v45;
        operator delete(v45);
      }
      v46 = *a16;
      if (*a16)
      {
        v40[11] = v46;
        operator delete(v46);
      }
      v47 = *a19;
      if (*a19)
      {
        v40[8] = v47;
        operator delete(v47);
      }
      __p = a20;
      std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

void sub_2098B9CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, void **a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35)
{
  _QWORD *v35;
  void *v36;
  void *v37;
  void *v38;

  __cxa_end_catch();
  TCollation::~TCollation((TCollation *)&STACK[0x508]);
  v36 = *a14;
  if (*a14)
  {
    v35[14] = v36;
    operator delete(v36);
  }
  v37 = *a16;
  if (*a16)
  {
    v35[11] = v37;
    operator delete(v37);
  }
  v38 = *a19;
  if (*a19)
  {
    v35[8] = v38;
    operator delete(v38);
  }
  a35 = a20;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&a35);
  JUMPOUT(0x2098B9DA0);
}

void sub_2098B9CAC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x2098B9CB0);
  _Unwind_Resume(a1);
}

void sub_2098B9D2C()
{
  __cxa_end_catch();
  JUMPOUT(0x2098B9D34);
}

void sub_2098B9D90(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_2098B9D98(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x2098B9D9CLL);
  __clang_call_terminate();
}

uint64_t TIntParam::get(TIntParam *this)
{
  uint64_t ActiveConfigHandle;

  ActiveConfigHandle = TParam::getActiveConfigHandle(this);
  return *((unsigned int *)this + TParam::getValidConfig(this, ActiveConfigHandle) + 40);
}

void std::vector<TItnControlState>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 6;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + (a2 << 6);
  }
  else
  {
    std::vector<TItnControlState>::__append((void **)a1, a2 - v2);
  }
}

void TResult::~TResult(TResult *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x20BD14990](v2, 0x1000C8077774924);
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void **)((char *)this + 32);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v6);
}

unint64_t TResult::serialize(unsigned __int8 *a1, char *__dst, unint64_t a3, uint64_t a4)
{
  int v8;
  TParam *v9;
  uint64_t ActiveConfigHandle;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  __int128 v59;
  char *v60;
  char *v61;
  __int128 v62;
  char *v63;
  char *v64;
  uint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t result;
  char *v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  void *__p;
  char *v77;
  char *v78;

  if (a3 >= 0x20)
  {
    strcpy(__dst, (const char *)SERIALIZE_NAME);
    *((_DWORD *)__dst + 4) = 4;
    v8 = *a1;
    *((_DWORD *)__dst + 6) = v8;
    if (a1[1])
    {
      v8 |= 2u;
      *((_DWORD *)__dst + 6) = v8;
    }
    if (*(_DWORD *)(a4 + 304) == 2)
      *((_DWORD *)__dst + 6) = v8 | 4;
    v9 = (TParam *)(*(_QWORD *)(a4 + 336) + 144);
    ActiveConfigHandle = TParam::getActiveConfigHandle(v9);
    *((_DWORD *)__dst + 7) = *((_DWORD *)v9 + TParam::getValidConfig(v9, ActiveConfigHandle) + 40);
  }
  v11 = *((_QWORD *)a1 + 3);
  v12 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + 44;
  if (v12 <= a3)
  {
    *((_DWORD *)__dst + 8) = (v11 & 0xFFFFFFFC) + 12;
    *((_DWORD *)__dst + 9) = v11;
    strcpy(__dst + 40, *((const char **)a1 + 2));
  }
  v14 = *((_QWORD *)a1 + 4);
  v13 = *((_QWORD *)a1 + 5);
  if (v13 == v14)
  {
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3);
    v17 = 8;
    v19 = *((_QWORD *)a1 + 5);
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = 8;
    v13 = *((_QWORD *)a1 + 4);
    do
    {
      v18 = (unsigned int *)(v13 + v15);
      if (*(char *)(v13 + v15 + 23) < 0)
        v18 = *(unsigned int **)v18;
      v17 += (int)TLocaleInfo::unicodeToMultiByte(a4 + 240, v18, 0, 0);
      ++v16;
      v13 = *((_QWORD *)a1 + 4);
      v19 = *((_QWORD *)a1 + 5);
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v13) >> 3);
      v15 += 24;
    }
    while (v16 < v20);
  }
  v21 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v22 = v21 + v12;
  if (v21 + v12 <= a3)
  {
    v23 = &__dst[v12];
    *(_DWORD *)v23 = v21;
    *((_DWORD *)v23 + 1) = v20;
    if (v19 != v13)
    {
      v24 = 0;
      v25 = 0;
      v26 = (uint64_t *)(v23 + 8);
      v27 = a4 + 240;
      do
      {
        v28 = (unsigned int *)(v13 + v24);
        if (*(char *)(v13 + v24 + 23) < 0)
          v28 = *(unsigned int **)v28;
        v26 = (uint64_t *)((char *)v26 + (int)TLocaleInfo::unicodeToMultiByte(v27, v28, v26, v21));
        ++v25;
        v13 = *((_QWORD *)a1 + 4);
        v24 += 24;
      }
      while (v25 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 5) - v13) >> 3));
    }
  }
  v29 = (uint64_t *)*((_QWORD *)a1 + 13);
  v30 = *((_QWORD *)a1 + 14) - (_QWORD)v29;
  v31 = (((uint64_t)v30 >> 1) + 11) & 0xFFFFFFFFFFFFFFFCLL;
  v32 = v31 + v22;
  if (v31 + v22 <= a3)
  {
    v33 = &__dst[v22];
    *(_DWORD *)v33 = v31;
    *((_DWORD *)v33 + 1) = v30 >> 3;
    if ((v30 >> 3))
    {
      v34 = v33 + 8;
      v35 = (v30 >> 3);
      do
      {
        v36 = *v29++;
        *v34++ = v36;
        --v35;
      }
      while (v35);
    }
  }
  v38 = *((_QWORD *)a1 + 7);
  v37 = *((_QWORD *)a1 + 8);
  v39 = ((((v37 - v38) >> 1) | 8) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v40 = v39 + v32;
  if (v39 + v32 <= a3)
  {
    v41 = &__dst[v32];
    *(_DWORD *)v41 = v39;
    *((_DWORD *)v41 + 1) = (unint64_t)(v37 - v38) >> 6;
    __p = 0;
    v77 = 0;
    v78 = 0;
    if (v37 != v38)
    {
      v73 = v41;
      v42 = 0;
      v43 = 0;
      do
      {
        v44 = 0;
        *(_QWORD *)&v45 = -1;
        *((_QWORD *)&v45 + 1) = -1;
        v74 = v45;
        v75 = v45;
        do
        {
          v46 = *((_QWORD *)a1 + 7);
          v47 = *(_QWORD *)(v46 + v42 + v44);
          if (v47 != -1)
          {
            *((_DWORD *)&v74 + getItnControlCategory(*(_QWORD *)(v46 + v42 + v44))) = v47;
            v46 = *((_QWORD *)a1 + 7);
          }
          v48 = v46 + v42 + v44;
          v49 = *(_QWORD *)(v48 + 32);
          if (v49 != -1)
            *((_DWORD *)&v74 + getItnControlCategory(*(_QWORD *)(v48 + 32)) + 4) = v49;
          v44 += 8;
        }
        while (v44 != 32);
        v50 = v77;
        if (v77 >= v78)
        {
          v53 = (char *)__p;
          v54 = (v77 - (_BYTE *)__p) >> 5;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 59)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v56 = v78 - (_BYTE *)__p;
          if ((v78 - (_BYTE *)__p) >> 4 > v55)
            v55 = v56 >> 4;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFE0)
            v57 = 0x7FFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>((uint64_t)&v78, v57);
            v53 = (char *)__p;
            v50 = v77;
          }
          else
          {
            v58 = 0;
          }
          v59 = v75;
          v60 = &v58[32 * v54];
          *(_OWORD *)v60 = v74;
          *((_OWORD *)v60 + 1) = v59;
          if (v50 == v53)
          {
            v63 = &v58[32 * v54];
          }
          else
          {
            v61 = &v58[32 * v54];
            do
            {
              v62 = *((_OWORD *)v50 - 1);
              v63 = v61 - 32;
              *((_OWORD *)v61 - 2) = *((_OWORD *)v50 - 2);
              *((_OWORD *)v61 - 1) = v62;
              v50 -= 32;
              v61 -= 32;
            }
            while (v50 != v53);
          }
          v52 = v60 + 32;
          __p = v63;
          v77 = v60 + 32;
          v78 = &v58[32 * v57];
          if (v53)
            operator delete(v53);
        }
        else
        {
          v51 = v75;
          *(_OWORD *)v77 = v74;
          *((_OWORD *)v50 + 1) = v51;
          v52 = v50 + 32;
        }
        v77 = v52;
        ++v43;
        v42 += 64;
      }
      while (v43 < (uint64_t)(*((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7)) >> 6);
      v64 = (char *)__p;
      if (v52 != __p)
        memmove(v73 + 8, __p, v52 - (_BYTE *)__p);
      if (v64)
      {
        v77 = v64;
        operator delete(v64);
      }
    }
  }
  v65 = (uint64_t *)*((_QWORD *)a1 + 10);
  v66 = *((_QWORD *)a1 + 11) - (_QWORD)v65;
  v67 = (((uint64_t)v66 >> 1) + 11) & 0xFFFFFFFFFFFFFFFCLL;
  result = v67 + v40;
  if (v67 + v40 > a3)
  {
LABEL_62:
    if (!__dst)
      return result;
    goto LABEL_63;
  }
  v69 = &__dst[v40];
  *(_DWORD *)v69 = v67;
  *((_DWORD *)v69 + 1) = v66 >> 3;
  if ((v66 >> 3))
  {
    v70 = v69 + 8;
    v71 = (v66 >> 3);
    do
    {
      v72 = *v65++;
      *v70++ = v72;
      --v71;
    }
    while (v71);
    goto LABEL_62;
  }
LABEL_63:
  *((_DWORD *)__dst + 5) = result;
  return result;
}

void sub_2098BA2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double TResultManager::TResultManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)a1 = &off_24C214C18;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 88) = -1;
  return result;
}

void TResultManager::~TResultManager(TResultManager *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  TResult *v5;
  void *v6;
  void **v7;

  *(_QWORD *)this = &off_24C214C18;
  v3 = *((_QWORD *)this + 5);
  v2 = *((_QWORD *)this + 6);
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(TResult **)(v3 + 8 * v4);
      if (v5)
      {
        TResult::~TResult(v5);
        MEMORY[0x20BD149A8]();
        v3 = *((_QWORD *)this + 5);
        v2 = *((_QWORD *)this + 6);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v7 = (void **)((char *)this + 64);
  std::vector<THint>::__destroy_vector::operator()[abi:ne180100](&v7);
  v6 = (void *)*((_QWORD *)this + 5);
  if (v6)
  {
    *((_QWORD *)this + 6) = v6;
    operator delete(v6);
  }
}

{
  TResultManager::~TResultManager(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t TResultManager::getResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (a2 - 1 >= (unint64_t)((*(_QWORD *)(a1 + 48) - v2) >> 3))
    return 0;
  else
    return *(_QWORD *)(v2 + 8 * (a2 - 1));
}

uint64_t TResultManager::create(uint64_t *a1, uint64_t a2, uint64_t a3, size_t a4, _QWORD *a5, __int128 *a6, char a7, char a8)
{
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v16 = operator new();
  TResult::TResult(v16, a2, a3, a4, a5, a1[3], a6, a7, a8);
  v17 = a1[7];
  v18 = (uint64_t *)a1[6];
  if ((unint64_t)v18 >= v17)
  {
    v20 = a1[5];
    v21 = ((uint64_t)v18 - v20) >> 3;
    if ((unint64_t)(v21 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v22 = v17 - v20;
    v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1))
      v23 = v21 + 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a1 + 7), v24);
    else
      v25 = 0;
    v26 = (uint64_t *)&v25[8 * v21];
    v27 = &v25[8 * v24];
    *v26 = v16;
    v19 = v26 + 1;
    v29 = (char *)a1[5];
    v28 = (char *)a1[6];
    if (v28 != v29)
    {
      do
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *--v26 = v30;
      }
      while (v28 != v29);
      v28 = (char *)a1[5];
    }
    a1[5] = (uint64_t)v26;
    a1[6] = (uint64_t)v19;
    a1[7] = (uint64_t)v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v18 = v16;
    v19 = v18 + 1;
  }
  a1[6] = (uint64_t)v19;
  return ((uint64_t)v19 - a1[5]) >> 3;
}

void sub_2098BA580(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40FC09B48DLL);
  _Unwind_Resume(a1);
}

TResult *TResultManager::destroy(TResult *result, uint64_t a2)
{
  TResult *v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 != -1)
  {
    v2 = result;
    v3 = a2 - 1;
    v4 = *((_QWORD *)result + 5);
    result = *(TResult **)(v4 + 8 * (a2 - 1));
    if (result)
    {
      TResult::~TResult(result);
      result = (TResult *)MEMORY[0x20BD149A8]();
      v4 = *((_QWORD *)v2 + 5);
    }
    *(_QWORD *)(v4 + 8 * v3) = 0;
  }
  return result;
}

uint64_t TResultManager::splitAtTextIndex(char **a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  char *v6;
  char **v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t i;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v78;
  void *__p;
  void *v80;
  uint64_t v81;
  void *v82[2];
  uint64_t v83;
  uint64_t *v84[28];
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t *v88[2];
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  __int128 v95;
  _BYTE v96[17];
  char v97;
  const char *v98;
  __int128 v99;
  _BYTE v100[17];
  char v101;
  char *v102;
  __int128 v103;
  _BYTE v104[256];
  char v105;
  uint64_t v106;

  v4 = a2;
  v106 = *MEMORY[0x24BDAC8D0];
  v6 = a1[5];
  v7 = a1 + 5;
  if (a2 - 1 >= (unint64_t)((a1[6] - v6) >> 3))
  {
    v8 = 0;
    goto LABEL_10;
  }
  v8 = *(_QWORD **)&v6[8 * a2 - 8];
  if (!v8)
  {
LABEL_10:
    v9 = 0;
    v13 = 0;
    v10 = 1;
    goto LABEL_11;
  }
  v9 = 0;
  v10 = 0;
  if (!a3 || (v11 = v8[13], v12 = v8[14], v12 == v11))
  {
    v13 = 0;
LABEL_11:
    if (v9 >= a3)
      v20 = v13;
    else
      v20 = v13 + 2;
    v15 = v9;
    if (!v9)
    {
LABEL_28:
      v21 = -1;
      if ((v10 & 1) != 0)
        return v21;
LABEL_29:
      if (v15 != v8[3])
        TResultManager::copyAlignRange(a1, v4, v20, 0xFFFFFFFFFFFFFFFFLL);
      return v21;
    }
LABEL_15:
    v21 = TResultManager::copyAlignRange(a1, v4, 0, v13);
    if ((v10 & 1) != 0)
      return v21;
    goto LABEL_29;
  }
  v78 = v8;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = (v12 - v11) >> 3;
  while (1)
  {
    v17 = (unint64_t *)(v11 + 8 * v13);
    v18 = *v17;
    v9 = v18 + v15;
    v19 = v17[1] + v14;
    if (v18 + v15 > a3)
      break;
    v13 += 2;
    v14 = v19;
    v15 += v18;
    if (v13 >= v16)
    {
      v10 = 0;
      v4 = a2;
      v8 = v78;
      goto LABEL_11;
    }
  }
  v10 = 0;
  v22 = v13 + 2;
  if (a3 <= v15)
    v22 = v13;
  v75 = v22;
  v76 = a3 - v15;
  if (a3 > v15)
    v23 = v19;
  else
    v23 = v14;
  if (a3 <= v15 || !v18)
  {
    v4 = a2;
    v8 = v78;
    v20 = v75;
    if (!v15)
      goto LABEL_28;
    goto LABEL_15;
  }
  v71 = v23;
  v102 = v104;
  v103 = xmmword_209A57DD0;
  v105 = 1;
  v98 = v100;
  v99 = xmmword_209A57DD0;
  v101 = 1;
  v94 = v96;
  v95 = xmmword_209A57DD0;
  v97 = 1;
  v24 = (char *)v78[2];
  TBuffer<char>::resize((uint64_t)&v98, 0);
  TBuffer<char>::insert((uint64_t)&v98, 0, v24, v15);
  v25 = v78[2];
  TBuffer<char>::resize((uint64_t)&v102, 0);
  TBuffer<char>::insert((uint64_t)&v102, 0, (char *)(v25 + v15), v76);
  v26 = v78[3];
  v72 = v78[2];
  TBuffer<char>::resize((uint64_t)&v94, 0);
  TBuffer<char>::insert((uint64_t)&v94, 0, (char *)(v72 + a3), v26 - a3);
  if (*((_QWORD *)&v103 + 1) >= (unint64_t)v103)
  {
    if (v105)
    {
      LOBYTE(v88[0]) = 0;
      TBuffer<char>::insert((uint64_t)&v102, *((unint64_t *)&v103 + 1), (char *)v88, 1uLL);
      --*((_QWORD *)&v103 + 1);
    }
    else if ((_QWORD)v103)
    {
      v102[(_QWORD)v103 - 1] = 0;
    }
  }
  else
  {
    v102[*((_QWORD *)&v103 + 1)] = 0;
  }
  v28 = v102;
  if (*((_QWORD *)&v99 + 1) >= (unint64_t)v99)
  {
    if (v101)
    {
      LOBYTE(v88[0]) = 0;
      TBuffer<char>::insert((uint64_t)&v98, *((unint64_t *)&v99 + 1), (char *)v88, 1uLL);
      --*((_QWORD *)&v99 + 1);
    }
    else if ((_QWORD)v99)
    {
      v98[v99 - 1] = 0;
    }
  }
  else
  {
    v98[*((_QWORD *)&v99 + 1)] = 0;
  }
  v29 = v98;
  if (*((_QWORD *)&v95 + 1) >= (unint64_t)v95)
  {
    if (v97)
    {
      v73 = (unint64_t)v98;
      LOBYTE(v88[0]) = 0;
      TBuffer<char>::insert((uint64_t)&v94, *((unint64_t *)&v95 + 1), (char *)v88, 1uLL);
      --*((_QWORD *)&v95 + 1);
      v29 = (const char *)v73;
    }
    else if ((_QWORD)v95)
    {
      v94[(_QWORD)v95 - 1] = 0;
    }
  }
  else
  {
    v94[*((_QWORD *)&v95 + 1)] = 0;
  }
  v74 = TTokenizer::tokenize((uint64_t)a1[4], v28, v29, v94, *(_QWORD *)(*((_QWORD *)a1[4] + 3) + 29784), 0);
  v30 = (char *)v78[2];
  TBuffer<char>::resize((uint64_t)&v98, 0);
  TBuffer<char>::insert((uint64_t)&v98, 0, v30, a3);
  v31 = v78[2];
  TBuffer<char>::resize((uint64_t)&v102, 0);
  TBuffer<char>::insert((uint64_t)&v102, 0, (char *)(v31 + a3), v18 + v15 - a3);
  v32 = v78[2];
  v33 = v78[3];
  TBuffer<char>::resize((uint64_t)&v94, 0);
  TBuffer<char>::insert((uint64_t)&v94, 0, (char *)(v32 + v9), v33 - v9);
  if (*((_QWORD *)&v103 + 1) >= (unint64_t)v103)
  {
    if (v105)
    {
      LOBYTE(v88[0]) = 0;
      TBuffer<char>::insert((uint64_t)&v102, *((unint64_t *)&v103 + 1), (char *)v88, 1uLL);
      --*((_QWORD *)&v103 + 1);
    }
    else if ((_QWORD)v103)
    {
      v102[(_QWORD)v103 - 1] = 0;
    }
  }
  else
  {
    v102[*((_QWORD *)&v103 + 1)] = 0;
  }
  v34 = v102;
  if (*((_QWORD *)&v99 + 1) >= (unint64_t)v99)
  {
    if (v101)
    {
      LOBYTE(v88[0]) = 0;
      TBuffer<char>::insert((uint64_t)&v98, *((unint64_t *)&v99 + 1), (char *)v88, 1uLL);
      --*((_QWORD *)&v99 + 1);
    }
    else if ((_QWORD)v99)
    {
      v98[v99 - 1] = 0;
    }
  }
  else
  {
    v98[*((_QWORD *)&v99 + 1)] = 0;
  }
  v35 = v98;
  if (*((_QWORD *)&v95 + 1) >= (unint64_t)v95)
  {
    if (v97)
    {
      LOBYTE(v88[0]) = 0;
      TBuffer<char>::insert((uint64_t)&v94, *((unint64_t *)&v95 + 1), (char *)v88, 1uLL);
      --*((_QWORD *)&v95 + 1);
    }
    else if ((_QWORD)v95)
    {
      v94[(_QWORD)v95 - 1] = 0;
    }
  }
  else
  {
    v94[*((_QWORD *)&v95 + 1)] = 0;
  }
  v36 = TTokenizer::tokenize((uint64_t)a1[4], v34, v35, v94, *(_QWORD *)(*((_QWORD *)a1[4] + 3) + 29784), 0);
  TFsa::TFsa((TFsa *)v88);
  v85 = 0;
  v86 = 0;
  v87 = 0;
  tokenizerResultToFsa(v74, 0, (uint64_t)a1[3], a1[4], (TAllocator *)v88, &v85);
  tokenizerResultToFsa(v36, v76, (uint64_t)a1[3], a1[4], (TAllocator *)v88, &v85);
  TTokenizer::release((uint64_t)a1[4], v74);
  TTokenizer::release((uint64_t)a1[4], v36);
  TFsa::TFsa((TFsa *)v84);
  wordsToFsa(v78[4] + 24 * v14, v78[4] + 24 * v71, (uint64_t)a1[3], v84);
  v82[0] = 0;
  v82[1] = 0;
  v83 = 0;
  __p = 0;
  v80 = 0;
  v81 = 0;
  alignFsa((TAllocator *)v84, v88, (unint64_t)v82, &__p);
  v37 = v78[2];
  TBuffer<char>::resize((uint64_t)&v102, 0);
  TBuffer<char>::insert((uint64_t)&v102, 0, (char *)(v37 + v15), v18);
  v92 = 0;
  v91 = 0;
  v93 = 0;
  if (v15)
    v38 = TResultManager::copyAlignRange(a1, a2, 0, v13);
  else
    v38 = -1;
  v90 = v38;
  if (*((_QWORD *)&v103 + 1) >= (unint64_t)v103)
  {
    if (v105)
    {
      v89 = 0;
      TBuffer<char>::insert((uint64_t)&v102, *((unint64_t *)&v103 + 1), &v89, 1uLL);
      --*((_QWORD *)&v103 + 1);
    }
    else if ((_QWORD)v103)
    {
      v102[(_QWORD)v103 - 1] = 0;
    }
  }
  else
  {
    v102[*((_QWORD *)&v103 + 1)] = 0;
  }
  v39 = create((uint64_t)v102, 0, v76, (uint64_t *)&__p, (uint64_t *)&v85, (uint64_t *)v82, (uint64_t)a1[3]);
  v40 = v39;
  v41 = (unint64_t)a1[7];
  v42 = (uint64_t *)a1[6];
  if ((unint64_t)v42 >= v41)
  {
    v44 = ((char *)v42 - *v7) >> 3;
    if ((unint64_t)(v44 + 1) >> 61)
      goto LABEL_137;
    v45 = v41 - (_QWORD)*v7;
    v46 = v45 >> 2;
    if (v45 >> 2 <= (unint64_t)(v44 + 1))
      v46 = v44 + 1;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
      v47 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v47 = v46;
    if (v47)
      v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a1 + 7), v47);
    else
      v48 = 0;
    v49 = (uint64_t *)&v48[8 * v44];
    v50 = &v48[8 * v47];
    *v49 = v40;
    v43 = (char *)(v49 + 1);
    v52 = a1[5];
    v51 = a1[6];
    if (v51 != v52)
    {
      do
      {
        v53 = *((_QWORD *)v51 - 1);
        v51 -= 8;
        *--v49 = v53;
      }
      while (v51 != v52);
      v51 = *v7;
    }
    a1[5] = (char *)v49;
    a1[6] = v43;
    a1[7] = v50;
    if (v51)
      operator delete(v51);
  }
  else
  {
    *v42 = v39;
    v43 = (char *)(v42 + 1);
  }
  a1[6] = v43;
  v91 = (v43 - a1[5]) >> 3;
  if (*((_QWORD *)&v103 + 1) >= (unint64_t)v103)
  {
    if (v105)
    {
      v89 = 0;
      TBuffer<char>::insert((uint64_t)&v102, *((unint64_t *)&v103 + 1), &v89, 1uLL);
      --*((_QWORD *)&v103 + 1);
    }
    else if ((_QWORD)v103)
    {
      v102[(_QWORD)v103 - 1] = 0;
    }
  }
  else
  {
    v102[*((_QWORD *)&v103 + 1)] = 0;
  }
  v54 = create((uint64_t)v102, v76, v18, (uint64_t *)&__p, (uint64_t *)&v85, (uint64_t *)v82, (uint64_t)a1[3]);
  v55 = v54;
  v57 = (uint64_t *)a1[6];
  v56 = (unint64_t)a1[7];
  if ((unint64_t)v57 >= v56)
  {
    v59 = ((char *)v57 - *v7) >> 3;
    if (!((unint64_t)(v59 + 1) >> 61))
    {
      v60 = v56 - (_QWORD)*v7;
      v61 = v60 >> 2;
      if (v60 >> 2 <= (unint64_t)(v59 + 1))
        v61 = v59 + 1;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
        v62 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v62 = v61;
      if (v62)
        v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a1 + 7), v62);
      else
        v63 = 0;
      v64 = (uint64_t *)&v63[8 * v59];
      v65 = &v63[8 * v62];
      *v64 = v55;
      v58 = (char *)(v64 + 1);
      v67 = a1[5];
      v66 = a1[6];
      if (v66 != v67)
      {
        do
        {
          v68 = *((_QWORD *)v66 - 1);
          v66 -= 8;
          *--v64 = v68;
        }
        while (v66 != v67);
        v66 = *v7;
      }
      a1[5] = (char *)v64;
      a1[6] = v58;
      a1[7] = v65;
      if (v66)
        operator delete(v66);
      goto LABEL_114;
    }
LABEL_137:
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  }
  *v57 = v54;
  v58 = (char *)(v57 + 1);
LABEL_114:
  a1[6] = v58;
  v92 = (v58 - a1[5]) >> 3;
  if (v9 == v78[3])
    v69 = -1;
  else
    v69 = TResultManager::copyAlignRange(a1, a2, v75, 0xFFFFFFFFFFFFFFFFLL);
  v93 = v69;
  v21 = TResultManager::merge(a1, &v90, 2);
  TResultManager::merge(a1, &v92, 2);
  for (i = 0; i != 32; i += 8)
    TResultManager::destroy((TResult *)a1, *(uint64_t *)((char *)&v90 + i));
  if (__p)
  {
    v80 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v83) < 0)
    operator delete(v82[0]);
  TFsa::~TFsa((TFsa *)v84);
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  TFsa::~TFsa((TFsa *)v88);
  if (v97 && v94 != v96 && v94)
    MEMORY[0x20BD149A8]();
  if (v101 && v98 != v100 && v98)
    MEMORY[0x20BD149A8]();
  if (v105 && v102 != v104 && v102)
    MEMORY[0x20BD149A8]();
  return v21;
}

void sub_2098BB030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,char a59)
{
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;

  if (__p)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  TFsa::~TFsa((TFsa *)&a28);
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  TFsa::~TFsa((TFsa *)&a59);
  if (LOBYTE(STACK[0x398]))
  {
    v60 = STACK[0x280];
    if (STACK[0x280] != a10)
    {
      if (v60)
        MEMORY[0x20BD149A8](v60, 0x1000C4077774924);
    }
  }
  if (LOBYTE(STACK[0x4B8]))
  {
    v61 = STACK[0x3A0];
    if (STACK[0x3A0] != a11)
    {
      if (v61)
        MEMORY[0x20BD149A8](v61, 0x1000C4077774924);
    }
  }
  if (LOBYTE(STACK[0x5D8]))
  {
    v62 = STACK[0x4C0];
    if (STACK[0x4C0] != a12)
    {
      if (v62)
        MEMORY[0x20BD149A8](v62, 0x1000C4077774924);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TResultManager::copyAlignRange(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  char **v8;
  const TResult *v9;
  TResult *v10;
  unint64_t v11;
  TResult **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  TResult **v19;
  char *v20;
  char *v21;
  char *v22;
  TResult *v23;

  v7 = a1[5];
  v8 = (char **)(a1 + 5);
  if (a2 - 1 >= (unint64_t)((a1[6] - v7) >> 3))
    v9 = 0;
  else
    v9 = *(const TResult **)(v7 + 8 * (a2 - 1));
  v10 = (TResult *)operator new();
  TResult::TResult(v10, v9, a3, a4);
  v11 = a1[7];
  v12 = (TResult **)a1[6];
  if ((unint64_t)v12 >= v11)
  {
    v14 = ((char *)v12 - *v8) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v15 = v11 - (_QWORD)*v8;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a1 + 7), v17);
    else
      v18 = 0;
    v19 = (TResult **)&v18[8 * v14];
    v20 = &v18[8 * v17];
    *v19 = v10;
    v13 = v19 + 1;
    v22 = (char *)a1[5];
    v21 = (char *)a1[6];
    if (v21 != v22)
    {
      do
      {
        v23 = (TResult *)*((_QWORD *)v21 - 1);
        v21 -= 8;
        *--v19 = v23;
      }
      while (v21 != v22);
      v21 = *v8;
    }
    a1[5] = v19;
    a1[6] = v13;
    a1[7] = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v12 = v10;
    v13 = v12 + 1;
  }
  a1[6] = v13;
  return ((uint64_t)v13 - a1[5]) >> 3;
}

void sub_2098BB284(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40FC09B48DLL);
  _Unwind_Resume(a1);
}

void tokenizerResultToFsa(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, TAllocator *a5, _QWORD *a6)
{
  char *v10;
  unsigned int *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t i;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  __int32 *v46;
  uint64_t Word;
  int *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  void *v54;
  __int32 *v57;
  __int128 v58;
  _BYTE v59[1024];
  char v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  int v67[3];

  TTokenizer::getResultInfo((uint64_t)a4, a1, (uint64_t)&v65);
  v10 = (char *)operator new[]();
  v11 = (unsigned int *)operator new[]();
  v64 = 0;
  v53 = v10;
  v54 = (void *)operator new[]();
  TTokenizer::getResultData(a4, a1, v11, v10, v54, (_DWORD *)&v64 + 1, &v64);
  if (!*((_QWORD *)a5 + 25))
  {
    v12 = TFsa::newState(a5, 0);
    TFsa::addExtremity((uint64_t)a5, (uint64_t)v12, 0);
    TFsa::addExtremity((uint64_t)a5, (uint64_t)v12, 1u);
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)&v61, v66);
  v13 = (uint64_t *)*((_QWORD *)a5 + 22);
  v14 = (uint64_t *)*((_QWORD *)a5 + 23);
  if (v13 != v14)
  {
    while (!*v13)
    {
      if (++v13 == v14)
      {
        v13 = (uint64_t *)*((_QWORD *)a5 + 23);
        break;
      }
    }
  }
  v15 = *v13;
  v16 = v62;
  if (v62 >= v63)
  {
    v18 = (v62 - v61) >> 3;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v19 = (v63 - v61) >> 2;
    if (v19 <= v18 + 1)
      v19 = v18 + 1;
    if ((unint64_t)(v63 - v61) >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v63, v20);
    else
      v21 = 0;
    v22 = &v21[8 * v18];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v15;
    v17 = v22 + 8;
    v25 = v61;
    v24 = v62;
    if (v62 != v61)
    {
      do
      {
        v26 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *((_QWORD *)v22 - 1) = v26;
        v22 -= 8;
      }
      while (v24 != v25);
      v24 = v61;
    }
    v61 = v22;
    v62 = v17;
    v63 = v23;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *(_QWORD *)v62 = v15;
    v17 = v16 + 8;
  }
  v62 = v17;
  v27 = (uint64_t *)*((_QWORD *)a5 + 22);
  v28 = (uint64_t *)*((_QWORD *)a5 + 23);
  if (v27 != v28)
  {
    while (!*v27)
    {
      if (++v27 == v28)
      {
        v27 = (uint64_t *)*((_QWORD *)a5 + 23);
        break;
      }
    }
  }
  TFsa::removeExtremity((uint64_t)a5, *v27, 1u);
  if (v66 >= 2)
  {
    for (i = 1; i < v66; ++i)
    {
      v30 = TFsa::newState(a5, 0);
      v31 = v30;
      v32 = v62;
      if (v62 >= v63)
      {
        v34 = (v62 - v61) >> 3;
        if ((unint64_t)(v34 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v35 = (v63 - v61) >> 2;
        if (v35 <= v34 + 1)
          v35 = v34 + 1;
        if ((unint64_t)(v63 - v61) >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v63, v36);
        else
          v37 = 0;
        v38 = &v37[8 * v34];
        *(_QWORD *)v38 = v31;
        v33 = v38 + 8;
        v40 = v61;
        v39 = v62;
        if (v62 != v61)
        {
          do
          {
            v41 = *((_QWORD *)v39 - 1);
            v39 -= 8;
            *((_QWORD *)v38 - 1) = v41;
            v38 -= 8;
          }
          while (v39 != v40);
          v39 = v61;
        }
        v61 = v38;
        v62 = v33;
        v63 = &v37[8 * v36];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *(_QWORD *)v62 = v30;
        v33 = v32 + 8;
      }
      v62 = v33;
    }
  }
  std::vector<std::pair<unsigned long,unsigned long>>::resize((uint64_t)a6, v65 + ((uint64_t)(a6[1] - *a6) >> 4));
  if (v65)
  {
    v42 = 0;
    v43 = (unsigned int *)(v53 + 8);
    do
    {
      v44 = *(v43 - 1);
      v45 = *v43;
      if (*((_QWORD *)v43 + 1) == 1)
      {
        Word = (uint64_t)TLexicon::addTempWord(a3, (int *)"[", 0, 0, 0);
      }
      else
      {
        v57 = (__int32 *)v59;
        v58 = xmmword_209A57DD0;
        v60 = 1;
        TLocaleInfo::multiByteToUnicode(a3 + 240, (unsigned __int8 *)v54 + *(v43 - 2), (uint64_t)&v57);
        if (*((_QWORD *)&v58 + 1) >= (unint64_t)v58)
        {
          if (v60)
          {
            v67[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v57, *((unint64_t *)&v58 + 1), v67, 1uLL);
            v46 = v57;
            --*((_QWORD *)&v58 + 1);
          }
          else
          {
            v46 = v57;
            if ((_QWORD)v58)
              v57[(_QWORD)v58 - 1] = 0;
          }
        }
        else
        {
          v46 = v57;
          v57[*((_QWORD *)&v58 + 1)] = 0;
        }
        Word = TLexicon::findWord(a3, v46);
        if (!Word)
        {
          if (*((_QWORD *)&v58 + 1) >= (unint64_t)v58)
          {
            if (v60)
            {
              v67[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v57, *((unint64_t *)&v58 + 1), v67, 1uLL);
              v48 = v57;
              --*((_QWORD *)&v58 + 1);
            }
            else
            {
              v48 = v57;
              if ((_QWORD)v58)
                v57[(_QWORD)v58 - 1] = 0;
            }
          }
          else
          {
            v48 = v57;
            v57[*((_QWORD *)&v58 + 1)] = 0;
          }
          Word = (uint64_t)TLexicon::addTempWord(a3, v48, 0, 0, 0);
        }
        if (v60 && v57 != (__int32 *)v59 && v57)
          MEMORY[0x20BD149A8]();
      }
      v49 = TFsa::newTrans(a5, *(_QWORD *)&v61[8 * v44], *(_QWORD *)&v61[8 * v45], Word);
      v50 = v11[4 * v44];
      v51 = v11[4 * v45 + 1];
      v52 = (_QWORD *)(*a6 + 16 * v49[1]);
      *v52 = v50;
      v52[1] = v51;
      if ((_DWORD)v50 != -1)
        *v52 = v50 + a2;
      if ((_DWORD)v51 != -1)
        v52[1] = v51 + a2;
      ++v42;
      v43 += 8;
    }
    while (v42 < v65);
  }
  TFsa::addExtremity((uint64_t)a5, *(_QWORD *)&v61[8 * v64], 1u);
  MEMORY[0x20BD14990](v54, 0x1000C8077774924);
  MEMORY[0x20BD14990](v53, 0x1080C80DF4851B9);
  MEMORY[0x20BD14990](v11, 0x1000C80451B5BE8);
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
}

void sub_2098BB874(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(_QWORD *)(v1 - 136) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void wordsToFsa(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t **this)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  __int32 *v13;
  uint64_t Word;
  int *v15;

  if (!this[25])
  {
    v8 = TFsa::newState((TAllocator *)this, 0);
    TFsa::addExtremity((uint64_t)this, (uint64_t)v8, 0);
    TFsa::addExtremity((uint64_t)this, (uint64_t)v8, 1u);
  }
  v9 = this[22];
  v10 = this[23];
  if (v9 != v10)
  {
    while (!*v9)
    {
      if (++v9 == v10)
      {
        v9 = this[23];
        break;
      }
    }
  }
  v11 = *v9;
  TFsa::removeExtremity((uint64_t)this, *v9, 1u);
  if (a1 >= a2)
  {
    v12 = (_QWORD *)v11;
  }
  else
  {
    do
    {
      v12 = TFsa::newState((TAllocator *)this, 0);
      v13 = (__int32 *)a1;
      if (*(char *)(a1 + 23) < 0)
        v13 = *(__int32 **)a1;
      Word = TLexicon::findWord(a3, v13);
      if (!Word)
      {
        v15 = (int *)a1;
        if (*(char *)(a1 + 23) < 0)
          v15 = *(int **)a1;
        Word = (uint64_t)TLexicon::addTempWord(a3, v15, 0, 0, 0);
      }
      TFsa::newTrans((TAllocator *)this, v11, (uint64_t)v12, Word);
      a1 += 24;
      v11 = (uint64_t)v12;
    }
    while (a1 < a2);
  }
  TFsa::addExtremity((uint64_t)this, (uint64_t)v12, 1u);
}

_QWORD *alignFsa(TAllocator *a1, uint64_t **this, unint64_t a3, void **a4)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD v17[7];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v8 = TFsa::newState((TAllocator *)this, 0);
  v9 = this[19];
  v10 = this[20];
  if (v9 != v10)
  {
    while (!*v9)
    {
      if (++v9 == v10)
      {
        v9 = this[20];
        break;
      }
    }
  }
  v11 = *v9;
  TFsa::removeExtremity((uint64_t)this, *v9, 0);
  TFsa::addExtremity((uint64_t)this, (uint64_t)v8, 0);
  TFsa::newTrans((TAllocator *)this, (uint64_t)v8, v11, -1);
  v12 = TFsa::newState(a1, 0);
  v13 = (uint64_t *)*((_QWORD *)a1 + 19);
  v14 = (uint64_t *)*((_QWORD *)a1 + 20);
  if (v13 != v14)
  {
    while (!*v13)
    {
      if (++v13 == v14)
      {
        v13 = (uint64_t *)*((_QWORD *)a1 + 20);
        break;
      }
    }
  }
  v15 = *v13;
  TFsa::removeExtremity((uint64_t)a1, *v13, 0);
  TFsa::addExtremity((uint64_t)a1, (uint64_t)v12, 0);
  TFsa::newTrans(a1, (uint64_t)v12, v15, -1);
  v17[0] = &unk_24C218D70;
  v17[1] = 1;
  v17[2] = &unk_24C218D70;
  v17[3] = 1;
  v17[4] = &unk_24C218D70;
  v17[5] = 1;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::align((uint64_t)v17, (unint64_t *)a1, (unint64_t *)this, a3, 0, a4);
  return TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::~TAligner(v17);
}

void sub_2098BBB94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::~TAligner((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t create(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t *HeadClone;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t *v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  unint64_t v112;
  unint64_t v114;
  void *__p;
  char *v116;
  char *v117;
  void *v118;
  char *v119;
  char *v120;
  char v121;
  char *v122;
  __int128 v123;
  _BYTE v124[256];
  char v125;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v122 = v124;
  v123 = xmmword_209A57DD0;
  v125 = 1;
  TBuffer<char>::resize((uint64_t)&v122, 0);
  TBuffer<char>::insert((uint64_t)&v122, 0, (char *)(a1 + a2), a3 - a2);
  v114 = a2;
  __p = 0;
  v111 = a7;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v116 = 0;
  v117 = 0;
  v13 = *a4;
  if (*a4 != a4[1])
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = a2;
    v21 = *a5;
    v112 = a3;
    while (1)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v13 + 8 * v14) + 8);
      if (v15 >= v20)
      {
        v23 = *(_QWORD *)(v21 + 16 * v22);
        if (v23 <= a3 && v23 != v15)
        {
          v25 = v23 - v15;
          v27 = v116;
          v26 = v117;
          if (v116 >= v117)
          {
            v29 = (char *)__p;
            v30 = (v116 - (_BYTE *)__p) >> 3;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v32 = v117 - (_BYTE *)__p;
            if ((v117 - (_BYTE *)__p) >> 2 > v31)
              v31 = v32 >> 2;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
            {
              v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v117, v33);
              v29 = (char *)__p;
              v27 = v116;
            }
            else
            {
              v34 = 0;
            }
            v35 = &v34[8 * v30];
            *(_QWORD *)v35 = v25;
            v28 = v35 + 8;
            while (v27 != v29)
            {
              v36 = *((_QWORD *)v27 - 1);
              v27 -= 8;
              *((_QWORD *)v35 - 1) = v36;
              v35 -= 8;
            }
            v26 = &v34[8 * v33];
            __p = v35;
            v116 = v28;
            v117 = v26;
            if (v29)
            {
              operator delete(v29);
              v26 = v117;
            }
            v20 = v114;
          }
          else
          {
            *(_QWORD *)v116 = v25;
            v28 = v27 + 8;
          }
          v116 = v28;
          if (v28 >= v26)
          {
            v38 = (char *)__p;
            v39 = (v28 - (_BYTE *)__p) >> 3;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v41 = v26 - (_BYTE *)__p;
            if (v41 >> 2 > v40)
              v40 = v41 >> 2;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
              v42 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v42 = v40;
            if (v42)
            {
              v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v117, v42);
              v38 = (char *)__p;
              v28 = v116;
            }
            else
            {
              v43 = 0;
            }
            v44 = &v43[8 * v39];
            *(_QWORD *)v44 = 0;
            v37 = v44 + 8;
            while (v28 != v38)
            {
              v45 = *((_QWORD *)v28 - 1);
              v28 -= 8;
              *((_QWORD *)v44 - 1) = v45;
              v44 -= 8;
            }
            __p = v44;
            v116 = v37;
            v117 = &v43[8 * v42];
            if (v38)
              operator delete(v38);
            v20 = v114;
          }
          else
          {
            *(_QWORD *)v28 = 0;
            v37 = v28 + 8;
          }
          v116 = v37;
          a3 = v112;
          v21 = *a5;
        }
      }
      v46 = v19 + 1;
      v47 = (unint64_t *)(v21 + 16 * v22);
      v48 = *v47;
      v15 = v47[1];
      if (v48 != 0xFFFFFFFF)
        v16 = v48;
      if (v16 >= v20)
      {
        if (v15 <= a3)
        {
          v49 = v15 - v16;
          v51 = v116;
          v50 = v117;
          if (v116 >= v117)
          {
            v53 = (char *)__p;
            v54 = (v116 - (_BYTE *)__p) >> 3;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v56 = v117 - (_BYTE *)__p;
            if ((v117 - (_BYTE *)__p) >> 2 > v55)
              v55 = v56 >> 2;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
              v57 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            if (v57)
            {
              v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v117, v57);
              v53 = (char *)__p;
              v51 = v116;
            }
            else
            {
              v58 = 0;
            }
            v59 = &v58[8 * v54];
            *(_QWORD *)v59 = v49;
            v52 = v59 + 8;
            while (v51 != v53)
            {
              v60 = *((_QWORD *)v51 - 1);
              v51 -= 8;
              *((_QWORD *)v59 - 1) = v60;
              v59 -= 8;
            }
            v50 = &v58[8 * v57];
            __p = v59;
            v116 = v52;
            v117 = v50;
            if (v53)
            {
              operator delete(v53);
              v50 = v117;
            }
            v20 = v114;
          }
          else
          {
            *(_QWORD *)v116 = v49;
            v52 = v51 + 8;
          }
          v116 = v52;
          if (v52 >= v50)
          {
            v62 = (char *)__p;
            v63 = (v52 - (_BYTE *)__p) >> 3;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v65 = v50 - (_BYTE *)__p;
            if (v65 >> 2 > v64)
              v64 = v65 >> 2;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
              v66 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v66 = v64;
            if (v66)
            {
              v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v117, v66);
              v62 = (char *)__p;
              v52 = v116;
            }
            else
            {
              v67 = 0;
            }
            v68 = &v67[8 * v63];
            *(_QWORD *)v68 = v46;
            v61 = v68 + 8;
            while (v52 != v62)
            {
              v69 = *((_QWORD *)v52 - 1);
              v52 -= 8;
              *((_QWORD *)v68 - 1) = v69;
              v68 -= 8;
            }
            __p = v68;
            v116 = v61;
            v117 = &v67[8 * v66];
            if (v62)
              operator delete(v62);
            v20 = v114;
          }
          else
          {
            *(_QWORD *)v52 = v46;
            v61 = v52 + 8;
          }
          v116 = v61;
          a3 = v112;
          v21 = *a5;
        }
        v15 = *(_QWORD *)(v21 + 16 * v22 + 8);
        if (v15 == 0xFFFFFFFF)
          v19 = v46;
        else
          v19 = 0;
        if (v16 < a3)
        {
          HeadClone = **(uint64_t ***)(*a4 + 8 * v14);
          if (*((char *)a6 + 23) >= 0)
            v71 = a6;
          else
            v71 = (uint64_t *)*a6;
          do
          {
            v72 = v18;
            v73 = *((unsigned __int8 *)v71 + v17++);
            v18 = 1;
          }
          while (v73 == 68);
          if (v73 != 67)
          {
            HeadClone = (uint64_t *)TWord::getHeadClone((uint64_t)HeadClone);
            v72 = 1;
          }
          v74 = *HeadClone;
          v75 = v119;
          if (v119 >= v120)
          {
            v79 = (v119 - (_BYTE *)v118) >> 3;
            if ((unint64_t)(v79 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v80 = (v120 - (_BYTE *)v118) >> 2;
            if (v80 <= v79 + 1)
              v80 = v79 + 1;
            if ((unint64_t)(v120 - (_BYTE *)v118) >= 0x7FFFFFFFFFFFFFF8)
              v81 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v81 = v80;
            if (v81)
              v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v120, v81);
            else
              v82 = 0;
            v83 = &v82[8 * v79];
            *(_QWORD *)v83 = v74;
            v76 = v83 + 8;
            v85 = (char *)v118;
            v84 = v119;
            if (v119 != v118)
            {
              do
              {
                v86 = *((_QWORD *)v84 - 1);
                v84 -= 8;
                *((_QWORD *)v83 - 1) = v86;
                v83 -= 8;
              }
              while (v84 != v85);
              v84 = (char *)v118;
            }
            v118 = v83;
            v119 = v76;
            v120 = &v82[8 * v81];
            if (v84)
              operator delete(v84);
          }
          else
          {
            *(_QWORD *)v119 = v74;
            v76 = v75 + 8;
          }
          v20 = v114;
          v119 = v76;
          v21 = *a5;
          v15 = *(_QWORD *)(*a5 + 16 * v22 + 8);
          v18 = v72;
          a3 = v112;
          goto LABEL_117;
        }
      }
      else if (v15 == 0xFFFFFFFF)
      {
        ++v19;
      }
      else
      {
        v19 = 0;
      }
      if (*((char *)a6 + 23) >= 0)
        v77 = a6;
      else
        v77 = (uint64_t *)*a6;
      do
        v78 = *((unsigned __int8 *)v77 + v17++);
      while (v78 == 68);
      LOBYTE(v72) = v18;
LABEL_117:
      ++v14;
      v13 = *a4;
      if (v14 >= (a4[1] - *a4) >> 3)
        goto LABEL_120;
    }
  }
  LOBYTE(v72) = 0;
  v20 = v114;
  v15 = v114;
LABEL_120:
  if (v15 >= v20)
  {
    v87 = a3 - v15;
    if (a3 > v15)
    {
      v89 = v116;
      v88 = v117;
      if (v116 >= v117)
      {
        v91 = (char *)__p;
        v92 = (v116 - (_BYTE *)__p) >> 3;
        v93 = v92 + 1;
        if ((unint64_t)(v92 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v94 = v117 - (_BYTE *)__p;
        if ((v117 - (_BYTE *)__p) >> 2 > v93)
          v93 = v94 >> 2;
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
          v95 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v95 = v93;
        if (v95)
        {
          v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v117, v95);
          v91 = (char *)__p;
          v89 = v116;
        }
        else
        {
          v96 = 0;
        }
        v97 = &v96[8 * v92];
        v88 = &v96[8 * v95];
        *(_QWORD *)v97 = v87;
        v90 = v97 + 8;
        while (v89 != v91)
        {
          v98 = *((_QWORD *)v89 - 1);
          v89 -= 8;
          *((_QWORD *)v97 - 1) = v98;
          v97 -= 8;
        }
        __p = v97;
        v116 = v90;
        v117 = v88;
        if (v91)
        {
          operator delete(v91);
          v88 = v117;
        }
      }
      else
      {
        *(_QWORD *)v116 = v87;
        v90 = v89 + 8;
      }
      v116 = v90;
      if (v90 >= v88)
      {
        v100 = (char *)__p;
        v101 = (v90 - (_BYTE *)__p) >> 3;
        v102 = v101 + 1;
        if ((unint64_t)(v101 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v103 = v88 - (_BYTE *)__p;
        if (v103 >> 2 > v102)
          v102 = v103 >> 2;
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
          v104 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v104 = v102;
        if (v104)
        {
          v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v117, v104);
          v100 = (char *)__p;
          v90 = v116;
        }
        else
        {
          v105 = 0;
        }
        v106 = &v105[8 * v101];
        v107 = &v105[8 * v104];
        *(_QWORD *)v106 = 0;
        v99 = v106 + 8;
        while (v90 != v100)
        {
          v108 = *((_QWORD *)v90 - 1);
          v90 -= 8;
          *((_QWORD *)v106 - 1) = v108;
          v106 -= 8;
        }
        __p = v106;
        v116 = v99;
        v117 = v107;
        if (v100)
          operator delete(v100);
      }
      else
      {
        *(_QWORD *)v90 = 0;
        v99 = v90 + 8;
      }
      v116 = v99;
    }
  }
  v109 = operator new();
  if (*((_QWORD *)&v123 + 1) >= (unint64_t)v123)
  {
    if (v125)
    {
      v121 = 0;
      TBuffer<char>::insert((uint64_t)&v122, *((unint64_t *)&v123 + 1), &v121, 1uLL);
      --*((_QWORD *)&v123 + 1);
    }
    else if ((_QWORD)v123)
    {
      v122[(_QWORD)v123 - 1] = 0;
    }
  }
  else
  {
    v122[*((_QWORD *)&v123 + 1)] = 0;
  }
  TResult::TResult(v109, v122, &v118, (uint64_t)&__p, v111, v72 & 1 | (v118 == v119), 0);
  if (__p)
  {
    v116 = (char *)__p;
    operator delete(__p);
  }
  if (v118)
  {
    v119 = (char *)v118;
    operator delete(v118);
  }
  if (v125 && v122 != v124 && v122)
    MEMORY[0x20BD149A8]();
  return v109;
}

void sub_2098BC404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a58)
  {
    if (a23 != a9 && a23 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t TResultManager::merge(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  char v6;
  const TResult *v7;
  char **v8;
  unint64_t v9;
  uint64_t v10;
  const TResult *v11;
  TResult *v12;
  TResult *v13;
  unint64_t v14;
  const TResult **v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  const TResult **v23;
  char *v24;
  char *v25;
  char *v26;
  const TResult *v27;

  if (!a3)
    return -1;
  v3 = a3;
  v6 = 0;
  v7 = 0;
  v8 = (char **)(a1 + 5);
  do
  {
    v9 = *a2 - 1;
    v10 = a1[5];
    if (v9 < (a1[6] - v10) >> 3)
    {
      v11 = *(const TResult **)(v10 + 8 * v9);
      if (v11)
      {
        if (v7)
        {
          v12 = (TResult *)operator new();
          TResult::TResult(v12, v7, v11);
          if ((v6 & 1) != 0)
          {
            TResult::~TResult(v7);
            MEMORY[0x20BD149A8]();
          }
          v6 = 1;
          v7 = v12;
        }
        else
        {
          v7 = *(const TResult **)(v10 + 8 * v9);
        }
      }
    }
    ++a2;
    --v3;
  }
  while (v3);
  if (!v7)
    return -1;
  if ((v6 & 1) == 0)
  {
    v13 = (TResult *)operator new();
    TResult::TResult(v13, v7);
    v7 = v13;
  }
  v14 = a1[7];
  v15 = (const TResult **)a1[6];
  if ((unint64_t)v15 >= v14)
  {
    v18 = ((char *)v15 - *v8) >> 3;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v19 = v14 - (_QWORD)*v8;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a1 + 7), v21);
    else
      v22 = 0;
    v23 = (const TResult **)&v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v7;
    v16 = v23 + 1;
    v26 = (char *)a1[5];
    v25 = (char *)a1[6];
    if (v25 != v26)
    {
      do
      {
        v27 = (const TResult *)*((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = *v8;
    }
    a1[5] = v23;
    a1[6] = v16;
    a1[7] = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v15 = v7;
    v16 = v15 + 1;
  }
  a1[6] = v16;
  return ((uint64_t)v16 - a1[5]) >> 3;
}

void sub_2098BC684(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40FC09B48DLL);
  _Unwind_Resume(a1);
}

char **TResultManager::split(char **result, uint64_t a2, unint64_t **a3, uint64_t a4)
{
  char **v7;
  uint64_t v8;
  unint64_t v9;
  char **v10;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  char *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v7 = result;
  v8 = a3[1] - *a3;
  v9 = v8 + 1;
  if (*(_BYTE *)(a4 + 2072) && *(_QWORD *)(a4 + 8) < v9)
  {
    *(_QWORD *)(a4 + 8) = v8 + 2;
    result = (char **)operator new[]();
    v10 = result;
    v11 = *(const void **)a4;
    v12 = *(_QWORD *)(a4 + 16);
    if (v12)
      result = (char **)memmove(result, *(const void **)a4, 8 * v12);
    if (v11 != (const void *)(a4 + 24) && v11)
      result = (char **)MEMORY[0x20BD149A8](v11, 0x80C40B8603338);
    *(_QWORD *)a4 = v10;
  }
  v13 = *(_QWORD *)(a4 + 16);
  if (v13 < v9)
  {
    v14 = v9;
    if (*(_BYTE *)(a4 + 2072)
      || ((v15 = *(_QWORD *)(a4 + 8), v15 >= v9) ? (v14 = v9) : (v14 = *(_QWORD *)(a4 + 8)),
          v13 < v15 ? (v16 = v14 == v13) : (v16 = 1),
          !v16))
    {
      result = (char **)memset((void *)(*(_QWORD *)a4 + 8 * v13), 255, 8 * (v14 - v13));
    }
  }
  *(_QWORD *)(a4 + 16) = v9;
  v17 = v7[5];
  if (a2 - 1 >= (unint64_t)((v7[6] - v17) >> 3))
    v18 = 0;
  else
    v18 = *(_QWORD *)&v17[8 * a2 - 8];
  v20 = *a3;
  v19 = a3[1];
  if (v19 == *a3)
    goto LABEL_38;
  v21 = 0;
  v22 = 0;
  v23 = a2;
  while (v22)
  {
    v24 = v20[v22];
    if (v24 != v20[v22 - 1])
      goto LABEL_28;
LABEL_32:
    if (++v22 >= (unint64_t)(v19 - v20))
      goto LABEL_37;
  }
  v24 = *v20;
  if (!*v20)
    goto LABEL_32;
LABEL_28:
  if (v24 < *(_QWORD *)(v18 + 24))
  {
    result = (char **)TResultManager::splitAtTextIndex(v7, v23, v24 - v21);
    v25 = result;
    v27 = v26;
    v21 = (*a3)[v22];
    if (v23 != a2)
      result = (char **)TResultManager::destroy((TResult *)v7, v23);
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v22) = v25;
    v20 = *a3;
    v19 = a3[1];
    v23 = v27;
    goto LABEL_32;
  }
  if (v23 == a2)
  {
    v28 = a2;
    result = (char **)TResultManager::merge(v7, &v28, 1);
    v23 = (uint64_t)result;
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v22) = v23;
  v23 = -1;
LABEL_37:
  if (v23 == a2)
  {
LABEL_38:
    v28 = a2;
    result = (char **)TResultManager::merge(v7, &v28, 1);
    v23 = (uint64_t)result;
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * *(_QWORD *)(a4 + 16) - 8) = v23;
  return result;
}

uint64_t TResultManager::deserialize(TLexicon **this, const char *a2, unint64_t a3)
{
  TResult *v6;
  uint64_t v7;
  TLexicon *v8;
  TResult **v9;
  TLexicon *v10;
  TLexicon *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  TResult **v17;
  TLexicon *v18;
  TLexicon *v19;
  TLexicon *v20;
  TResult *v21;

  v6 = (TResult *)operator new();
  TResult::TResult(v6, a2, a3, this[3], v7);
  v8 = this[7];
  v9 = (TResult **)this[6];
  if (v9 >= (TResult **)v8)
  {
    v11 = this[5];
    v12 = ((char *)v9 - (char *)v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(this + 7), v15);
    else
      v16 = 0;
    v17 = (TResult **)&v16[8 * v12];
    v18 = (TLexicon *)&v16[8 * v15];
    *v17 = v6;
    v10 = (TLexicon *)(v17 + 1);
    v20 = this[5];
    v19 = this[6];
    if (v19 != v20)
    {
      do
      {
        v21 = (TResult *)*((_QWORD *)v19 - 1);
        v19 = (TLexicon *)((char *)v19 - 8);
        *--v17 = v21;
      }
      while (v19 != v20);
      v19 = this[5];
    }
    this[5] = (TLexicon *)v17;
    this[6] = v10;
    this[7] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = v6;
    v10 = (TLexicon *)(v9 + 1);
  }
  this[6] = v10;
  return (v10 - this[5]) >> 3;
}

void sub_2098BCA14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40FC09B48DLL);
  _Unwind_Resume(a1);
}

char *TResultManager::setResultText(uint64_t a1, uint64_t a2, char *__s, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 40);
  if (a2 - 1 >= (unint64_t)((*(_QWORD *)(a1 + 48) - v4) >> 3))
    v5 = 0;
  else
    v5 = *(_QWORD *)(v4 + 8 * (a2 - 1));
  return TResult::setText(v5, __s, a4);
}

void TResultManager::align(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int32 *v13;
  uint64_t Word;
  uint64_t v15;
  uint64_t HeadClone;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int32 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  uint64_t v57[7];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  void *v70[2];
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  _QWORD *v76;
  unint64_t v77;

  v75 = 0;
  v76 = 0;
  v77 = 0;
  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v8 = *(_QWORD *)(a2 + 8 * i) - 1;
      v9 = a1[5];
      if (v8 >= (a1[6] - v9) >> 3)
        v10 = 0;
      else
        v10 = *(_QWORD *)(v9 + 8 * v8);
      std::vector<TPItnTagHandle_fake **>::reserve((void **)&v75, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v10 + 40) - *(_QWORD *)(v10 + 32)) >> 3) + v76 - v75);
      v11 = *(_QWORD *)(v10 + 32);
      if (*(_QWORD *)(v10 + 40) != v11)
      {
        v12 = 0;
        do
        {
          v13 = (__int32 *)(v11 + 24 * v12);
          if (*((char *)v13 + 23) < 0)
            v13 = *(__int32 **)v13;
          Word = TLexicon::findWord(a1[3], v13);
          if (!Word)
          {
            v15 = *(_QWORD *)(v10 + 32) + 24 * v12;
            if (*(char *)(v15 + 23) < 0)
              v15 = *(_QWORD *)v15;
            Word = (uint64_t)TLexicon::addTempWord(a1[3], (int *)v15, 0, 0, 0);
          }
          HeadClone = TWord::getHeadClone(Word);
          v17 = HeadClone;
          v18 = v76;
          if ((unint64_t)v76 >= v77)
          {
            v20 = v76 - v75;
            if ((unint64_t)(v20 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v21 = (uint64_t)(v77 - (_QWORD)v75) >> 2;
            if (v21 <= v20 + 1)
              v21 = v20 + 1;
            if (v77 - (unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
              v22 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v22 = v21;
            if (v22)
              v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v77, v22);
            else
              v23 = 0;
            v24 = (uint64_t *)&v23[8 * v20];
            *v24 = v17;
            v19 = v24 + 1;
            v26 = v75;
            v25 = v76;
            if (v76 != v75)
            {
              do
              {
                v27 = *--v25;
                *--v24 = v27;
              }
              while (v25 != v26);
              v25 = v75;
            }
            v75 = v24;
            v76 = v19;
            v77 = (unint64_t)&v23[8 * v22];
            if (v25)
              operator delete(v25);
          }
          else
          {
            *v76 = HeadClone;
            v19 = v18 + 1;
          }
          v76 = v19;
          ++v12;
          v11 = *(_QWORD *)(v10 + 32);
        }
        while (v12 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v10 + 40) - v11) >> 3));
      }
    }
  }
  v72 = 0;
  v73 = 0;
  v74 = 0;
  if (a5)
  {
    v28 = 0;
    do
    {
      v29 = *(_QWORD *)(a4 + 8 * v28) - 1;
      v30 = a1[5];
      if (v29 >= (a1[6] - v30) >> 3)
        v31 = 0;
      else
        v31 = *(_QWORD *)(v30 + 8 * v29);
      std::vector<TPItnTagHandle_fake **>::reserve((void **)&v72, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v31 + 40) - *(_QWORD *)(v31 + 32)) >> 3) + v73 - v72);
      v32 = *(_QWORD *)(v31 + 32);
      if (*(_QWORD *)(v31 + 40) != v32)
      {
        v33 = 0;
        do
        {
          v34 = (__int32 *)(v32 + 24 * v33);
          if (*((char *)v34 + 23) < 0)
            v34 = *(__int32 **)v34;
          v35 = TLexicon::findWord(a1[3], v34);
          if (!v35)
          {
            v36 = *(_QWORD *)(v31 + 32) + 24 * v33;
            if (*(char *)(v36 + 23) < 0)
              v36 = *(_QWORD *)v36;
            v35 = (uint64_t)TLexicon::addTempWord(a1[3], (int *)v36, 0, 0, 0);
          }
          v37 = TWord::getHeadClone(v35);
          v38 = v37;
          v39 = v73;
          if (v73 >= v74)
          {
            v41 = v73 - v72;
            if ((unint64_t)(v41 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v42 = ((char *)v74 - (char *)v72) >> 2;
            if (v42 <= v41 + 1)
              v42 = v41 + 1;
            if ((unint64_t)((char *)v74 - (char *)v72) >= 0x7FFFFFFFFFFFFFF8)
              v43 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v43 = v42;
            if (v43)
              v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v74, v43);
            else
              v44 = 0;
            v45 = (uint64_t *)&v44[8 * v41];
            *v45 = v38;
            v40 = v45 + 1;
            v47 = v72;
            v46 = v73;
            if (v73 != v72)
            {
              do
              {
                v48 = *--v46;
                *--v45 = v48;
              }
              while (v46 != v47);
              v46 = v72;
            }
            v72 = v45;
            v73 = v40;
            v74 = (uint64_t *)&v44[8 * v43];
            if (v46)
              operator delete(v46);
          }
          else
          {
            *v73 = v37;
            v40 = v39 + 1;
          }
          v73 = v40;
          ++v33;
          v32 = *(_QWORD *)(v31 + 32);
        }
        while (v33 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v31 + 40) - v32) >> 3));
      }
      ++v28;
    }
    while (v28 != a5);
    v49 = v72;
    v50 = (uint64_t)v73;
  }
  else
  {
    v50 = 0;
    v49 = 0;
  }
  v70[0] = 0;
  v70[1] = 0;
  v71 = 0;
  v57[0] = (uint64_t)&unk_24C218D70;
  v57[1] = 1;
  v57[2] = (uint64_t)&unk_24C218D70;
  v57[3] = 1;
  v57[4] = (uint64_t)&unk_24C218D70;
  v57[5] = 1;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::align<std::__wrap_iter<TWord const**>>(v57, v75, (uint64_t)v76, v49, v50, (unint64_t)v70);
  if (v71 >= 0)
    v51 = (char *)v70;
  else
    v51 = (char *)v70[0];
  TBuffer<char>::assign(a6, v51);
  TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::~TAligner(v57);
  if (SHIBYTE(v71) < 0)
    operator delete(v70[0]);
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
}

